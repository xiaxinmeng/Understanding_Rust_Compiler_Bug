{"sha": "08394eefae77ab1b344232e1fe151064f839324f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzOTRlZWZhZTc3YWIxYjM0NDIzMmUxZmUxNTEwNjRmODM5MzI0Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2000-12-29T17:35:57Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-12-29T17:35:57Z"}, "message": "Introduce ORIGINAL_REGNO macro\n\nFrom-SVN: r38546", "tree": {"sha": "82c339206e63aab7b8cc6be35db94ce2f5dc014a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82c339206e63aab7b8cc6be35db94ce2f5dc014a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08394eefae77ab1b344232e1fe151064f839324f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08394eefae77ab1b344232e1fe151064f839324f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08394eefae77ab1b344232e1fe151064f839324f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08394eefae77ab1b344232e1fe151064f839324f/comments", "author": null, "committer": null, "parents": [{"sha": "5538d8a0043b1dc9abf08cbda0d27954f6931933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5538d8a0043b1dc9abf08cbda0d27954f6931933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5538d8a0043b1dc9abf08cbda0d27954f6931933"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "7adec343830ef33108b88ee0ab8b9dd22ff656df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -1,3 +1,15 @@\n+2000-12-29  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* emit-rtl.c (gen_raw_REG): New function.\n+\t(gen_rtx_REG, gen_reg_rtx, init_emit_once): Use it instead of\n+\tgen_rtx_raw_REG.\n+\t* print-rtl.c (print_rtx): Print ORIGINAL_REGNO.\n+\t* final.c (alter_subreg): Update it.\n+\t* regrename.c (do_replace): Likewise.  Use gen_raw_REG.\n+\t* rtl.def (REG): Update comment.\n+\t* rtl.h (X0UINT, ORIGINAL_REGNO): New macros.\n+\t(gen_raw_REG): Declare.\n+\n 2000-12-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.c (get_set_constructor_bits): Use host_integerp and"}, {"sha": "9f2a4ae459522549da9963d3e595799a6d09fe8d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -228,6 +228,20 @@ rtx_htab_mark (htab)\n   htab_traverse (*((htab_t *) htab), rtx_htab_mark_1, NULL);\n }\n \n+/* Generate a new REG rtx.  Make sure ORIGINAL_REGNO is set properly, and\n+   don't attempt to share with the various global pieces of rtl (such as\n+   frame_pointer_rtx).  */\n+\n+rtx\n+gen_raw_REG (mode, regno)\n+     enum machine_mode mode;\n+     int regno;\n+{\n+  rtx x = gen_rtx_raw_REG (mode, regno);\n+  ORIGINAL_REGNO (x) = regno;\n+  return x;\n+}\n+\n /* There are some RTL codes that require special attention; the generation\n    functions do the raw handling.  If you add to this list, modify\n    special_rtx in gengenrtl.c as well.  */\n@@ -319,7 +333,7 @@ gen_rtx_REG (mode, regno)\n \treturn stack_pointer_rtx;\n     }\n \n-  return gen_rtx_raw_REG (mode, regno);\n+  return gen_raw_REG (mode, regno);\n }\n \n rtx\n@@ -569,7 +583,7 @@ gen_reg_rtx (mode)\n       f->emit->regno_pointer_align_length = old_size * 2;\n     }\n \n-  val = gen_rtx_raw_REG (mode, reg_rtx_no);\n+  val = gen_raw_REG (mode, reg_rtx_no);\n   regno_reg_rtx[reg_rtx_no++] = val;\n   return val;\n }\n@@ -4053,22 +4067,22 @@ init_emit_once (line_numbers)\n \n   pc_rtx = gen_rtx (PC, VOIDmode);\n   cc0_rtx = gen_rtx (CC0, VOIDmode);\n-  stack_pointer_rtx = gen_rtx_raw_REG (Pmode, STACK_POINTER_REGNUM);\n-  frame_pointer_rtx = gen_rtx_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n+  stack_pointer_rtx = gen_raw_REG (Pmode, STACK_POINTER_REGNUM);\n+  frame_pointer_rtx = gen_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n   if (hard_frame_pointer_rtx == 0)\n-    hard_frame_pointer_rtx = gen_rtx_raw_REG (Pmode, \n-\t\t\t\t\t      HARD_FRAME_POINTER_REGNUM);\n+    hard_frame_pointer_rtx = gen_raw_REG (Pmode, \n+\t\t\t\t\t  HARD_FRAME_POINTER_REGNUM);\n   if (arg_pointer_rtx == 0)\n-    arg_pointer_rtx = gen_rtx_raw_REG (Pmode, ARG_POINTER_REGNUM);\n+    arg_pointer_rtx = gen_raw_REG (Pmode, ARG_POINTER_REGNUM);\n   virtual_incoming_args_rtx = \n-    gen_rtx_raw_REG (Pmode, VIRTUAL_INCOMING_ARGS_REGNUM);\n+    gen_raw_REG (Pmode, VIRTUAL_INCOMING_ARGS_REGNUM);\n   virtual_stack_vars_rtx = \n-    gen_rtx_raw_REG (Pmode, VIRTUAL_STACK_VARS_REGNUM);\n+    gen_raw_REG (Pmode, VIRTUAL_STACK_VARS_REGNUM);\n   virtual_stack_dynamic_rtx = \n-    gen_rtx_raw_REG (Pmode, VIRTUAL_STACK_DYNAMIC_REGNUM);\n+    gen_raw_REG (Pmode, VIRTUAL_STACK_DYNAMIC_REGNUM);\n   virtual_outgoing_args_rtx = \n-    gen_rtx_raw_REG (Pmode, VIRTUAL_OUTGOING_ARGS_REGNUM); \n-  virtual_cfa_rtx = gen_rtx_raw_REG (Pmode, VIRTUAL_CFA_REGNUM);\n+    gen_raw_REG (Pmode, VIRTUAL_OUTGOING_ARGS_REGNUM); \n+  virtual_cfa_rtx = gen_raw_REG (Pmode, VIRTUAL_CFA_REGNUM);\n \n   /* These rtx must be roots if GC is enabled.  */\n   ggc_add_rtx_root (global_rtl, GR_MAX);\n@@ -4148,7 +4162,7 @@ init_emit_once (line_numbers)\n \n #ifdef RETURN_ADDRESS_POINTER_REGNUM\n   return_address_pointer_rtx\n-    = gen_rtx_raw_REG (Pmode, RETURN_ADDRESS_POINTER_REGNUM);\n+    = gen_raw_REG (Pmode, RETURN_ADDRESS_POINTER_REGNUM);\n #endif\n \n #ifdef STRUCT_VALUE"}, {"sha": "0d9d2a3bb61d921fad40f81758e73c70bce49365", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -3169,6 +3169,7 @@ alter_subreg (x)\n #endif\n       PUT_CODE (x, REG);\n       REGNO (x) = regno;\n+      ORIGINAL_REGNO (x) = ORIGINAL_REGNO (y);\n       /* This field has a different meaning for REGs and SUBREGs.  Make sure\n \t to clear it!  */\n       x->used = 0;"}, {"sha": "502834dd81a8463ef2afcb70b7294a0c4697250e", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -170,6 +170,12 @@ print_rtx (in_rtx)\n \t   An exception is the third field of a NOTE, where it indicates\n \t   that the field has several different valid contents.  */\n       case '0':\n+\tif (i == 1 && GET_CODE (in_rtx) == REG)\n+\t  {\n+\t    if (REGNO (in_rtx) != ORIGINAL_REGNO (in_rtx))\n+\t      fprintf (outfile, \" [%d]\", ORIGINAL_REGNO (in_rtx));\n+\t    break;\n+\t  }\n \tif (i == 3 && GET_CODE (in_rtx) == NOTE)\n \t  {\n \t    switch (NOTE_LINE_NUMBER (in_rtx))"}, {"sha": "bb45f3a295383177e366c5180ed9a79e1d09ccea", "filename": "gcc/regrename.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -349,7 +349,9 @@ do_replace (chain, reg)\n {\n   while (chain)\n     {\n-      *chain->loc = gen_rtx_REG (GET_MODE (*chain->loc), reg);\n+      unsigned int regno = ORIGINAL_REGNO (*chain->loc);\n+      *chain->loc = gen_raw_REG (GET_MODE (*chain->loc), reg);\n+      ORIGINAL_REGNO (*chain->loc) = regno;\n       chain = chain->next_use;\n     }\n }"}, {"sha": "6f0aec86b5a822a33f304df0a622307ff6ee363a", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -583,12 +583,10 @@ DEF_RTL_EXPR(VALUE, \"value\", \"0\", 'o')\n /* A register.  The \"operand\" is the register number, accessed with\n    the REGNO macro.  If this number is less than FIRST_PSEUDO_REGISTER\n    than a hardware register is being referred to.  The second operand\n-   doesn't really exist.  Unfortunately, however, the compiler\n-   implicitly assumes that a REG can be transformed in place into a\n-   MEM, and therefore that a REG is at least as big as a MEM.  To\n-   avoid this memory overhead, which is likely to be substantial,\n-   search for uses of PUT_CODE that turn REGs into MEMs, and fix them\n-   somehow.  Then, the trailing `0' can be removed here.  */\n+   holds the original register number - this will be different for a\n+   pseudo register that got turned into a hard register.\n+   This rtx needs to have as many (or more) fields as a MEM, since we\n+   can change REG rtx's into MEMs during reload.  */\n DEF_RTL_EXPR(REG, \"reg\", \"i0\", 'o')\n \n /* A scratch register.  This represents a register used only within a"}, {"sha": "a79e27a737e48ce5b1f559fa166535ab12200c06", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08394eefae77ab1b344232e1fe151064f839324f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=08394eefae77ab1b344232e1fe151064f839324f", "patch": "@@ -328,6 +328,7 @@ extern void rtvec_check_failed_bounds PARAMS ((rtvec, int,\n \n #define X0WINT(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtwint)\n #define X0INT(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtint)\n+#define X0UINT(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtuint)\n #define X0STR(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtstr)\n #define X0EXP(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtx)\n #define X0VEC(RTX, N)\t   (RTL_CHECK1(RTX, N, '0').rtvec)\n@@ -742,9 +743,12 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n \n #define CONTAINING_INSN(RTX) XCEXP(RTX, 2, LABEL_REF)\n \n-/* For a REG rtx, REGNO extracts the register number.  */\n+/* For a REG rtx, REGNO extracts the register number.  ORIGINAL_REGNO holds\n+   the number the register originally had; for a pseudo register turned into\n+   a hard reg this will hold the old pseudo register number.  */\n \n #define REGNO(RTX) XCUINT(RTX, 0, REG)\n+#define ORIGINAL_REGNO(RTX) X0UINT(RTX, 1)\n \n /* For a REG rtx, REG_FUNCTION_VALUE_P is nonzero if the reg\n    is the current function's return value.  */\n@@ -1539,6 +1543,7 @@ extern rtx return_address_pointer_rtx;\n extern rtx gen_rtx_CONST_DOUBLE PARAMS ((enum machine_mode, rtx,\n \t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT));\n extern rtx gen_rtx_CONST_INT PARAMS ((enum machine_mode, HOST_WIDE_INT));\n+extern rtx gen_raw_REG PARAMS ((enum machine_mode, int));\n extern rtx gen_rtx_REG PARAMS ((enum machine_mode, int));\n extern rtx gen_rtx_MEM PARAMS ((enum machine_mode, rtx));\n "}]}