{"sha": "9994a182c8777b52fd08ce1308b251015cfa79ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5NGExODJjODc3N2I1MmZkMDhjZTEzMDhiMjUxMDE1Y2ZhNzllZA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2009-04-17T22:05:09Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-04-17T22:05:09Z"}, "message": "except.c (debug_eh_tree): New.\n\n\n\t* except.c (debug_eh_tree): New.\n\t(struct eh_region, struct eh_status): Move ...\n\t* except.h: ... here.\n\t(add_type_for_runtime): Declare extern.\n\t(lookup_type_for_runtime): Likewise.\n\t(debug_eh_tree): Declare.\n\t* Makefile.in (GTFILES): List except.h before except.c\n\nFrom-SVN: r146296", "tree": {"sha": "31fec464fd443188a48370e7eff6263611e61c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31fec464fd443188a48370e7eff6263611e61c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9994a182c8777b52fd08ce1308b251015cfa79ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9994a182c8777b52fd08ce1308b251015cfa79ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9994a182c8777b52fd08ce1308b251015cfa79ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9994a182c8777b52fd08ce1308b251015cfa79ed/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07485407e17b3be47ede16306a9ba449a03f0a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07485407e17b3be47ede16306a9ba449a03f0a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07485407e17b3be47ede16306a9ba449a03f0a7b"}], "stats": {"total": 241, "additions": 128, "deletions": 113}, "files": [{"sha": "41afc3ada31139a765c8b4ac97d5fe0832a0cfa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9994a182c8777b52fd08ce1308b251015cfa79ed", "patch": "@@ -1,3 +1,13 @@\n+2009-04-17  Diego Novillo  <dnovillo@google.com>\n+\n+\t* except.c (debug_eh_tree): New.\n+\t(struct eh_region, struct eh_status): Move ...\n+\t* except.h: ... here.\n+\t(add_type_for_runtime): Declare extern.\n+\t(lookup_type_for_runtime): Likewise.\n+\t(debug_eh_tree): Declare.\n+\t* Makefile.in (GTFILES): List except.h before except.c\n+\n 2009-04-17  Diego Novillo  <dnovillo@google.com>\n \n \t* omp-low.c (create_omp_child_function): Set DECL_CONTEXT"}, {"sha": "1e5f33f7352e2b026dc67151e8351c0f5feef7f2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9994a182c8777b52fd08ce1308b251015cfa79ed", "patch": "@@ -3307,9 +3307,9 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/dbxout.c $(srcdir)/ipa-struct-reorg.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n   $(srcdir)/tree-vect-generic.c \\\n   $(srcdir)/dojump.c \\\n-  $(srcdir)/emit-rtl.c $(srcdir)/except.c $(srcdir)/explow.c $(srcdir)/expr.c \\\n+  $(srcdir)/emit-rtl.c $(srcdir)/except.h $(srcdir)/explow.c $(srcdir)/expr.c \\\n   $(srcdir)/expr.h \\\n-  $(srcdir)/function.c $(srcdir)/except.h \\\n+  $(srcdir)/function.c $(srcdir)/except.c \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n   $(srcdir)/profile.c $(srcdir)/reginfo.c $(srcdir)/mcf.c \\\n   $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/cfglayout.h \\"}, {"sha": "9874b595d83bb516f11156e7fe2888a9279511f4", "filename": "gcc/except.c", "status": "modified", "additions": 11, "deletions": 106, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9994a182c8777b52fd08ce1308b251015cfa79ed", "patch": "@@ -114,119 +114,15 @@ static int sjlj_fc_personality_ofs;\n static int sjlj_fc_lsda_ofs;\n static int sjlj_fc_jbuf_ofs;\n \f\n-/* Describes one exception region.  */\n-struct eh_region GTY(())\n-{\n-  /* The immediately surrounding region.  */\n-  struct eh_region *outer;\n-\n-  /* The list of immediately contained regions.  */\n-  struct eh_region *inner;\n-  struct eh_region *next_peer;\n-\n-  /* An identifier for this region.  */\n-  int region_number;\n-\n-  /* When a region is deleted, its parents inherit the REG_EH_REGION\n-     numbers already assigned.  */\n-  bitmap aka;\n-\n-  /* Each region does exactly one thing.  */\n-  enum eh_region_type\n-  {\n-    ERT_UNKNOWN = 0,\n-    ERT_CLEANUP,\n-    ERT_TRY,\n-    ERT_CATCH,\n-    ERT_ALLOWED_EXCEPTIONS,\n-    ERT_MUST_NOT_THROW,\n-    ERT_THROW\n-  } type;\n-\n-  /* Holds the action to perform based on the preceding type.  */\n-  union eh_region_u {\n-    /* A list of catch blocks, a surrounding try block,\n-       and the label for continuing after a catch.  */\n-    struct eh_region_u_try {\n-      struct eh_region *eh_catch;\n-      struct eh_region *last_catch;\n-    } GTY ((tag (\"ERT_TRY\"))) eh_try;\n-\n-    /* The list through the catch handlers, the list of type objects\n-       matched, and the list of associated filters.  */\n-    struct eh_region_u_catch {\n-      struct eh_region *next_catch;\n-      struct eh_region *prev_catch;\n-      tree type_list;\n-      tree filter_list;\n-    } GTY ((tag (\"ERT_CATCH\"))) eh_catch;\n-\n-    /* A tree_list of allowed types.  */\n-    struct eh_region_u_allowed {\n-      tree type_list;\n-      int filter;\n-    } GTY ((tag (\"ERT_ALLOWED_EXCEPTIONS\"))) allowed;\n-\n-    /* The type given by a call to \"throw foo();\", or discovered\n-       for a throw.  */\n-    struct eh_region_u_throw {\n-      tree type;\n-    } GTY ((tag (\"ERT_THROW\"))) eh_throw;\n-\n-    /* Retain the cleanup expression even after expansion so that\n-       we can match up fixup regions.  */\n-    struct eh_region_u_cleanup {\n-      struct eh_region *prev_try;\n-    } GTY ((tag (\"ERT_CLEANUP\"))) cleanup;\n-  } GTY ((desc (\"%0.type\"))) u;\n-\n-  /* Entry point for this region's handler before landing pads are built.  */\n-  rtx label;\n-  tree tree_label;\n-\n-  /* Entry point for this region's handler from the runtime eh library.  */\n-  rtx landing_pad;\n-\n-  /* Entry point for this region's handler from an inner region.  */\n-  rtx post_landing_pad;\n-\n-  /* The RESX insn for handing off control to the next outermost handler,\n-     if appropriate.  */\n-  rtx resume;\n-\n-  /* True if something in this region may throw.  */\n-  unsigned may_contain_throw : 1;\n-};\n-\n-typedef struct eh_region *eh_region;\n \n struct call_site_record GTY(())\n {\n   rtx landing_pad;\n   int action;\n };\n-\n-DEF_VEC_P(eh_region);\n-DEF_VEC_ALLOC_P(eh_region, gc);\n-DEF_VEC_ALLOC_P(eh_region, heap);\n-\n-/* Used to save exception status for each function.  */\n-struct eh_status GTY(())\n-{\n-  /* The tree of all regions for this function.  */\n-  struct eh_region *region_tree;\n-\n-  /* The same information as an indexable array.  */\n-  VEC(eh_region,gc) *region_array;\n-  int last_region_number;\n-\n-  htab_t GTY((param_is (struct throw_stmt_node))) throw_stmt_table;\n-};\n \f\n static int t2r_eq (const void *, const void *);\n static hashval_t t2r_hash (const void *);\n-static void add_type_for_runtime (tree);\n-static tree lookup_type_for_runtime (tree);\n \n static int ttypes_filter_eq (const void *, const void *);\n static hashval_t ttypes_filter_hash (const void *);\n@@ -1282,7 +1178,7 @@ t2r_hash (const void *pentry)\n   return TREE_HASH (TREE_PURPOSE (entry));\n }\n \n-static void\n+void\n add_type_for_runtime (tree type)\n {\n   tree *slot;\n@@ -1296,7 +1192,7 @@ add_type_for_runtime (tree type)\n     }\n }\n \n-static tree\n+tree\n lookup_type_for_runtime (tree type)\n {\n   tree *slot;\n@@ -4066,6 +3962,15 @@ dump_eh_tree (FILE * out, struct function *fun)\n     }\n }\n \n+/* Dump the EH tree for FN on stderr.  */\n+\n+void\n+debug_eh_tree (struct function *fn)\n+{\n+  dump_eh_tree (stderr, fn);\n+}\n+\n+\n /* Verify EH region invariants.  */\n \n static bool"}, {"sha": "18c36b019873a7a71b2f312c7f1fbbba2a53f4ad", "filename": "gcc/except.h", "status": "modified", "additions": 105, "deletions": 5, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9994a182c8777b52fd08ce1308b251015cfa79ed/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=9994a182c8777b52fd08ce1308b251015cfa79ed", "patch": "@@ -24,12 +24,109 @@ along with GCC; see the file COPYING3.  If not see\n \n struct function;\n \n-/* Per-function EH data.  Used only in except.c, but GC and others\n-   manipulate pointers to the opaque type.  */\n-struct eh_status;\n+/* Describes one exception region.  */\n+struct eh_region GTY(())\n+{\n+  /* The immediately surrounding region.  */\n+  struct eh_region *outer;\n+\n+  /* The list of immediately contained regions.  */\n+  struct eh_region *inner;\n+  struct eh_region *next_peer;\n+\n+  /* An identifier for this region.  */\n+  int region_number;\n+\n+  /* When a region is deleted, its parents inherit the REG_EH_REGION\n+     numbers already assigned.  */\n+  bitmap aka;\n+\n+  /* Each region does exactly one thing.  */\n+  enum eh_region_type\n+  {\n+    ERT_UNKNOWN = 0,\n+    ERT_CLEANUP,\n+    ERT_TRY,\n+    ERT_CATCH,\n+    ERT_ALLOWED_EXCEPTIONS,\n+    ERT_MUST_NOT_THROW,\n+    ERT_THROW\n+  } type;\n+\n+  /* Holds the action to perform based on the preceding type.  */\n+  union eh_region_u {\n+    /* A list of catch blocks, a surrounding try block,\n+       and the label for continuing after a catch.  */\n+    struct eh_region_u_try {\n+      struct eh_region *eh_catch;\n+      struct eh_region *last_catch;\n+    } GTY ((tag (\"ERT_TRY\"))) eh_try;\n+\n+    /* The list through the catch handlers, the list of type objects\n+       matched, and the list of associated filters.  */\n+    struct eh_region_u_catch {\n+      struct eh_region *next_catch;\n+      struct eh_region *prev_catch;\n+      tree type_list;\n+      tree filter_list;\n+    } GTY ((tag (\"ERT_CATCH\"))) eh_catch;\n+\n+    /* A tree_list of allowed types.  */\n+    struct eh_region_u_allowed {\n+      tree type_list;\n+      int filter;\n+    } GTY ((tag (\"ERT_ALLOWED_EXCEPTIONS\"))) allowed;\n+\n+    /* The type given by a call to \"throw foo();\", or discovered\n+       for a throw.  */\n+    struct eh_region_u_throw {\n+      tree type;\n+    } GTY ((tag (\"ERT_THROW\"))) eh_throw;\n+\n+    /* Retain the cleanup expression even after expansion so that\n+       we can match up fixup regions.  */\n+    struct eh_region_u_cleanup {\n+      struct eh_region *prev_try;\n+    } GTY ((tag (\"ERT_CLEANUP\"))) cleanup;\n+  } GTY ((desc (\"%0.type\"))) u;\n+\n+  /* Entry point for this region's handler before landing pads are built.  */\n+  rtx label;\n+  tree tree_label;\n+\n+  /* Entry point for this region's handler from the runtime eh library.  */\n+  rtx landing_pad;\n+\n+  /* Entry point for this region's handler from an inner region.  */\n+  rtx post_landing_pad;\n+\n+  /* The RESX insn for handing off control to the next outermost handler,\n+     if appropriate.  */\n+  rtx resume;\n+\n+  /* True if something in this region may throw.  */\n+  unsigned may_contain_throw : 1;\n+};\n+\n+typedef struct eh_region *eh_region;\n+DEF_VEC_P(eh_region);\n+DEF_VEC_ALLOC_P(eh_region, gc);\n+DEF_VEC_ALLOC_P(eh_region, heap);\n+\n+/* Per-function EH data.  Used to save exception status for each\n+   function.  */\n+struct eh_status GTY(())\n+{\n+  /* The tree of all regions for this function.  */\n+  struct eh_region *region_tree;\n+\n+  /* The same information as an indexable array.  */\n+  VEC(eh_region,gc) *region_array;\n+  int last_region_number;\n+\n+  htab_t GTY((param_is (struct throw_stmt_node))) throw_stmt_table;\n+};\n \n-/* Internal structure describing a region.  */\n-struct eh_region;\n \n /* Test: is exception handling turned on?  */\n extern int doing_eh (int);\n@@ -108,7 +205,10 @@ extern void collect_eh_region_array (void);\n extern void expand_resx_expr (tree);\n extern void verify_eh_tree (struct function *);\n extern void dump_eh_tree (FILE *, struct function *);\n+void debug_eh_tree (struct function *);\n extern int eh_region_outermost (struct function *, int, int);\n+extern void add_type_for_runtime (tree);\n+extern tree lookup_type_for_runtime (tree);\n \n /* If non-NULL, this is a function that returns an expression to be\n    executed if an unhandled exception is propagated out of a cleanup"}]}