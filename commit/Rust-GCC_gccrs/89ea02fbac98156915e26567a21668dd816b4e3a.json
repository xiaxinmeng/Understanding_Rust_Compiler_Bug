{"sha": "89ea02fbac98156915e26567a21668dd816b4e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllYTAyZmJhYzk4MTU2OTE1ZTI2NTY3YTIxNjY4ZGQ4MTZiNGUzYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-12-17T21:29:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-12-17T21:29:29Z"}, "message": "calls.c (expand_call): Handle CALL_EXPR_HAS_RETURN_SLOT_ADDR with special struct-return ABIs.\n\n        * calls.c (expand_call): Handle CALL_EXPR_HAS_RETURN_SLOT_ADDR\n        with special struct-return ABIs.\n\ncp/\n        * semantics.c (simplify_aggr_init_exprs_r): Don't change the type\n        of the CALL_EXPR.\n\nFrom-SVN: r60223", "tree": {"sha": "37b41e3dbf4463f5475171f6696ef200af12ca08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37b41e3dbf4463f5475171f6696ef200af12ca08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ea02fbac98156915e26567a21668dd816b4e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ea02fbac98156915e26567a21668dd816b4e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ea02fbac98156915e26567a21668dd816b4e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ea02fbac98156915e26567a21668dd816b4e3a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e489a31f89b0a7570f518ab963a2e9706f6761c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e489a31f89b0a7570f518ab963a2e9706f6761c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e489a31f89b0a7570f518ab963a2e9706f6761c0"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "09398e87e1ce96968c6127bd2e05ea7f766de2e4", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=89ea02fbac98156915e26567a21668dd816b4e3a", "patch": "@@ -2248,8 +2248,20 @@ expand_call (exp, target, ignore)\n \tstruct_value_size = int_size_in_bytes (TREE_TYPE (exp));\n \n \tif (CALL_EXPR_HAS_RETURN_SLOT_ADDR (exp))\n-\t  /* The structure value address arg is already in actparms.  */\n-\t  structure_value_addr_parm = 1;\n+\t  {\n+\t    /* The structure value address arg is already in actparms.  */\n+\t    if (struct_value_rtx == 0)\n+\t      /* We want to pass it as a normal argument, so leave it.  */\n+\t      structure_value_addr_parm = 1;\n+\t    else\n+\t      {\n+\t\t/* We want to pass it in a special location.  */\n+\t\ttree return_arg = TREE_VALUE (actparms);\n+\t\tactparms = TREE_CHAIN (actparms);\n+\t\tstructure_value_addr = expand_expr (return_arg, struct_value_rtx,\n+\t\t\t\t\t\t    VOIDmode, EXPAND_NORMAL);\n+\t      }\n+\t  }\n \telse if (target && GET_CODE (target) == MEM)\n \t  structure_value_addr = XEXP (target, 0);\n \telse"}, {"sha": "1e50ff96905a080d9ac528bc7f46d1290597f007", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89ea02fbac98156915e26567a21668dd816b4e3a", "patch": "@@ -1,5 +1,8 @@\n 2002-12-16  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (simplify_aggr_init_exprs_r): Don't change the type\n+\tof the CALL_EXPR.\n+\n \t* semantics.c (do_pushlevel): Call pushlevel after adding the\n \tSCOPE_STMT.\n \t(do_poplevel): Call poplevel before adding the SCOPE_STMT."}, {"sha": "e402a72f894748d6b200eaa776b12036c920d7eb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ea02fbac98156915e26567a21668dd816b4e3a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=89ea02fbac98156915e26567a21668dd816b4e3a", "patch": "@@ -2250,14 +2250,9 @@ simplify_aggr_init_exprs_r (tp, walk_subtrees, data)\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n \n   if (style == arg)\n-    {\n-      /* Tell the backend that we've added our return slot to the argument\n-\t list.  */\n-      CALL_EXPR_HAS_RETURN_SLOT_ADDR (call_expr) = 1;\n-      /* And don't let anyone use the value of the call directly in a\n-\t larger expression.  */\n-      TREE_TYPE (call_expr) = void_type_node;\n-    }\n+    /* Tell the backend that we've added our return slot to the argument\n+       list.  */\n+    CALL_EXPR_HAS_RETURN_SLOT_ADDR (call_expr) = 1;\n   else if (style == pcc)\n     {\n       /* If we're using the non-reentrant PCC calling convention, then we"}]}