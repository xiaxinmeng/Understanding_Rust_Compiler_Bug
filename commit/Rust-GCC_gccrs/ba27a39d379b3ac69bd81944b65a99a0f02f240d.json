{"sha": "ba27a39d379b3ac69bd81944b65a99a0f02f240d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyN2EzOWQzNzliM2FjNjliZDgxOTQ0YjY1YTk5YTBmMDJmMjQwZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-16T14:49:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T14:49:35Z"}, "message": "class.c (resort_type_method_vec): Avoid potential unsigned overflow.\n\n\t* class.c (resort_type_method_vec): Avoid potential unsigned\n\toverflow.\n\nFrom-SVN: r249265", "tree": {"sha": "28d058a0c8c6a9c3169cc5cb9a5599048718b435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d058a0c8c6a9c3169cc5cb9a5599048718b435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba27a39d379b3ac69bd81944b65a99a0f02f240d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba27a39d379b3ac69bd81944b65a99a0f02f240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba27a39d379b3ac69bd81944b65a99a0f02f240d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba27a39d379b3ac69bd81944b65a99a0f02f240d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d1dc5862f978beb28c76b91b137ccc23f747498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1dc5862f978beb28c76b91b137ccc23f747498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1dc5862f978beb28c76b91b137ccc23f747498"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "2d7ee17689467f7f7be8f95ba9fedf9d8c038ddc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba27a39d379b3ac69bd81944b65a99a0f02f240d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba27a39d379b3ac69bd81944b65a99a0f02f240d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba27a39d379b3ac69bd81944b65a99a0f02f240d", "patch": "@@ -1,5 +1,8 @@\n 2017-06-16  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (resort_type_method_vec): Avoid potential unsigned\n+\toverflow.\n+\n \tDon't defer noexcept_deferred_spec.\n \t* cp-tree.h (unevaluated_noexcept_spec): Don't declare.\n \t* decl.c (cxx_init_decl_processing): Initialize"}, {"sha": "1243f33605f367c5b42369a07242c34289923676", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba27a39d379b3ac69bd81944b65a99a0f02f240d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba27a39d379b3ac69bd81944b65a99a0f02f240d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ba27a39d379b3ac69bd81944b65a99a0f02f240d", "patch": "@@ -2328,25 +2328,25 @@ resort_type_method_vec (void* obj,\n \t\t\tgt_pointer_operator new_value,\n \t\t\tvoid* cookie)\n {\n-  vec<tree, va_gc> *method_vec = (vec<tree, va_gc> *) obj;\n-  int len = vec_safe_length (method_vec);\n-  size_t slot;\n-  tree fn;\n+  if (vec<tree, va_gc> *method_vec = (vec<tree, va_gc> *) obj)\n+    {\n+      int len = method_vec->length ();\n+      int slot;\n \n-  /* The type conversion ops have to live at the front of the vec, so we\n-     can't sort them.  */\n-  for (slot = CLASSTYPE_FIRST_CONVERSION_SLOT;\n-       vec_safe_iterate (method_vec, slot, &fn);\n-       ++slot)\n-    if (!DECL_CONV_FN_P (OVL_FIRST (fn)))\n-      break;\n+      /* The type conversion ops have to live at the front of the vec, so we\n+\t can't sort them.  */\n+      for (slot = CLASSTYPE_FIRST_CONVERSION_SLOT;\n+\t   slot < len; slot++)\n+\tif (!DECL_CONV_FN_P (OVL_FIRST ((*method_vec)[slot])))\n+\t  break;\n \n-  if (len - slot > 1)\n-    {\n-      resort_data.new_value = new_value;\n-      resort_data.cookie = cookie;\n-      qsort (method_vec->address () + slot, len - slot, sizeof (tree),\n-\t     resort_method_name_cmp);\n+      if (len > slot + 1)\n+\t{\n+\t  resort_data.new_value = new_value;\n+\t  resort_data.cookie = cookie;\n+\t  qsort (method_vec->address () + slot, len - slot, sizeof (tree),\n+\t\t resort_method_name_cmp);\n+\t}\n     }\n }\n "}]}