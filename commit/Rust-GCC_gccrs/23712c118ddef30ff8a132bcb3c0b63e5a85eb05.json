{"sha": "23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3MTJjMTE4ZGRlZjMwZmY4YTEzMmJjYjNjMGI2M2U1YTg1ZWIwNQ==", "commit": {"author": {"name": "Jeffrey Oldham", "email": "oldham@codesourcery.com", "date": "2001-03-12T19:11:39Z"}, "committer": {"name": "Jeffrey D. Oldham", "email": "oldham@gcc.gnu.org", "date": "2001-03-12T19:11:39Z"}, "message": "jump.c (reversed_comparison_code_parts): Reverse Jan Hubricka's 2001-02-28 patch because it breaks arm-linux and...\n\n2001-03-12  Jeffrey Oldham  <oldham@codesourcery.com>\n\n\t* jump.c (reversed_comparison_code_parts): Reverse Jan Hubricka's\n\t2001-02-28 patch because it breaks arm-linux and mips-sgi-irix6.5.\n\nFrom-SVN: r40421", "tree": {"sha": "989c4cb696a86f022eb722316ced21414cb1541e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989c4cb696a86f022eb722316ced21414cb1541e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23712c118ddef30ff8a132bcb3c0b63e5a85eb05/comments", "author": null, "committer": null, "parents": [{"sha": "e8ea2809d0dd85f1a235ba868897da51b79fca64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ea2809d0dd85f1a235ba868897da51b79fca64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ea2809d0dd85f1a235ba868897da51b79fca64"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "439959a9f2549f77bd45a57771073eabea8280b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23712c118ddef30ff8a132bcb3c0b63e5a85eb05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23712c118ddef30ff8a132bcb3c0b63e5a85eb05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "patch": "@@ -1,3 +1,8 @@\n+2001-03-12  Jeffrey Oldham  <oldham@codesourcery.com>\n+\n+\t* jump.c (reversed_comparison_code_parts): Reverse Jan Hubricka's\n+\t2001-02-28 patch because it breaks arm-linux and mips-sgi-irix6.5.\n+\n Mon Mar 12 14:05:32 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* flow.c (insn_dead_p): Don't consider two memrefs equivalent"}, {"sha": "6fc4deb10f9f0455c4126cdb4dcbef65d9ee94d6", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23712c118ddef30ff8a132bcb3c0b63e5a85eb05/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23712c118ddef30ff8a132bcb3c0b63e5a85eb05/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=23712c118ddef30ff8a132bcb3c0b63e5a85eb05", "patch": "@@ -1782,11 +1782,7 @@ reversed_comparison_code_parts (code, arg0, arg1, insn)\n       case UNLE:\n       case UNGT:\n       case UNGE:\n-\t/* We don't have safe way to reverse these yet - we would need\n-\t   ordered compares that may not trap.  */\n-\tif (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t    || flag_unsafe_math_optimizations)\n-\t  return reverse_condition_maybe_unordered (code);\n+\t/* We don't have safe way to reverse these yet.  */\n \treturn UNKNOWN;\n       default:\n \tbreak;\n@@ -1845,12 +1841,6 @@ reversed_comparison_code_parts (code, arg0, arg1, insn)\n \t}\n     }\n \n-  /* In case of floating point modes, we may reverse here, since\n-     we will be always converting an ordered compare to unordered.\n-     The unsafe code has been caught earlier.  */\n-  if (FLOAT_MODE_P (mode))\n-    return reverse_condition_maybe_unordered (code);\n-\n   /* An integer condition.  */\n   if (GET_CODE (arg0) == CONST_INT\n       || (GET_MODE (arg0) != VOIDmode"}]}