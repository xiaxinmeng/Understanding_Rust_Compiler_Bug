{"sha": "4cb935cb69f12088975fa7f6907c6ace0580e2dd", "node_id": "C_kwDOANBUbNoAKDRjYjkzNWNiNjlmMTIwODg5NzVmYTdmNjkwN2M2YWNlMDU4MGUyZGQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-07T15:07:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-07T15:10:29Z"}, "message": "libstdc++: Use visibility pragmas instead of attributes [PR104807]\n\nThe _GLIBCXX_PSEUDO_VISIBILITY macro isn't defined until after including\nos_defines.h, so we can't use _GLIBCXX_VISIBILITY early in c++config.\nReplace the uses of that macro with #pragma visibility push(default)\ninstead.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104807\n\t* include/bits/c++config (__terminate, __glibcxx_assert_fail):\n\tReplace _GLIBCXX_VISIBILITY on function with visibility pragma.\n\t(__is_constant_evaluated): Add visibility pragma.", "tree": {"sha": "6612629cf094074ee3e702d05a750c571b3f1cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6612629cf094074ee3e702d05a750c571b3f1cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb935cb69f12088975fa7f6907c6ace0580e2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb935cb69f12088975fa7f6907c6ace0580e2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb935cb69f12088975fa7f6907c6ace0580e2dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb935cb69f12088975fa7f6907c6ace0580e2dd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111754595cf8d3a8ae7063a42ac4cea18a304711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111754595cf8d3a8ae7063a42ac4cea18a304711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111754595cf8d3a8ae7063a42ac4cea18a304711"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "2798b9786dc1632bee70a9e9741ce53cc679d9c9", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb935cb69f12088975fa7f6907c6ace0580e2dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb935cb69f12088975fa7f6907c6ace0580e2dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=4cb935cb69f12088975fa7f6907c6ace0580e2dd", "patch": "@@ -302,15 +302,16 @@ namespace std\n   typedef decltype(nullptr)\tnullptr_t;\n #endif\n \n+#pragma GCC visibility push(default)\n   // This allows the library to terminate without including all of <exception>\n   // and without making the declaration of std::terminate visible to users.\n   extern \"C++\" __attribute__ ((__noreturn__, __always_inline__))\n-  _GLIBCXX_VISIBILITY(default)\n   inline void __terminate() _GLIBCXX_USE_NOEXCEPT\n   {\n     void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__));\n     terminate();\n   }\n+#pragma GCC visibility pop\n }\n \n #define _GLIBCXX_USE_DUAL_ABI\n@@ -506,6 +507,7 @@ namespace std\n \n namespace std\n {\n+#pragma GCC visibility push(default)\n   // Internal version of std::is_constant_evaluated().\n   // This can be used without checking if the compiler supports the feature.\n   // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if\n@@ -523,6 +525,7 @@ namespace std\n     return false;\n #endif\n   }\n+#pragma GCC visibility pop\n }\n \n // Debug Mode implies checking assertions.\n@@ -553,13 +556,15 @@ namespace std\n # ifdef _GLIBCXX_VERBOSE_ASSERT\n namespace std\n {\n+#pragma GCC visibility push(default)\n   // Avoid the use of assert, because we're trying to keep the <cassert>\n   // include out of the mix.\n-  extern \"C++\" _GLIBCXX_NORETURN _GLIBCXX_VISIBILITY(default)\n+  extern \"C++\" _GLIBCXX_NORETURN\n   void\n   __glibcxx_assert_fail(const char* __file, int __line,\n \t\t\tconst char* __function, const char* __condition)\n   _GLIBCXX_NOEXCEPT;\n+#pragma GCC visibility pop\n }\n #define __glibcxx_assert_impl(_Condition)\t\t\t\t\\\n   if (__builtin_expect(!bool(_Condition), false))\t\t\t\\"}]}