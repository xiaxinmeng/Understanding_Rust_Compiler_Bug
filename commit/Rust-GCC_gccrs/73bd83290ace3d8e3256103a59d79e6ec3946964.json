{"sha": "73bd83290ace3d8e3256103a59d79e6ec3946964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNiZDgzMjkwYWNlM2Q4ZTMyNTYxMDNhNTlkNzllNmVjMzk0Njk2NA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-02T16:03:31Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-02T16:03:31Z"}, "message": "line-map.h (linemap_assert_fails): Declare.\n\nlibcpp/ChangeLog:\n\n2014-12-02  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* include/line-map.h (linemap_assert_fails): Declare.\n\t* line-map.c (linemap_position_for_loc_and_offset): Use it.\n\nFrom-SVN: r218277", "tree": {"sha": "5d0f39e1459edaf29cc238629070efeb1fc76e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0f39e1459edaf29cc238629070efeb1fc76e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73bd83290ace3d8e3256103a59d79e6ec3946964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bd83290ace3d8e3256103a59d79e6ec3946964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bd83290ace3d8e3256103a59d79e6ec3946964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bd83290ace3d8e3256103a59d79e6ec3946964/comments", "author": null, "committer": null, "parents": [{"sha": "9c320ab1f162ae90a16d99851e7320ad8291e4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c320ab1f162ae90a16d99851e7320ad8291e4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c320ab1f162ae90a16d99851e7320ad8291e4f4"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "afb0f791f2c5a8c7838eda52721f5b4a5e889b9f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=73bd83290ace3d8e3256103a59d79e6ec3946964", "patch": "@@ -1,3 +1,8 @@\n+2014-12-02  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* include/line-map.h (linemap_assert_fails): Declare.\n+\t* line-map.c (linemap_position_for_loc_and_offset): Use it.\n+\n 2014-12-02  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n         * line-map.c (linemap_add): Fix typo."}, {"sha": "48a5dec31e0fb15ef2e5a211c0a92e9ef0820919", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=73bd83290ace3d8e3256103a59d79e6ec3946964", "patch": "@@ -579,6 +579,16 @@ bool linemap_location_from_macro_expansion_p (const struct line_maps *,\n     if (! (EXPR))\t\t\t\t\\\n       abort ();\t\t\t\t\t\\\n   } while (0)\n+ \n+/* Assert that becomes a conditional expression when checking is disabled at\n+   compilation time.  Use this for conditions that should not happen but if\n+   they happen, it is better to handle them gracefully rather than crash\n+   randomly later. \n+   Usage:\n+\n+   if (linemap_assert_fails(EXPR)) handle_error(); */\n+#define linemap_assert_fails(EXPR) __extension__ \\\n+  ({linemap_assert (EXPR); false;}) \n \n /* Assert that MAP encodes locations of tokens that are not part of\n    the replacement-list of a macro expansion.  */\n@@ -588,6 +598,7 @@ bool linemap_location_from_macro_expansion_p (const struct line_maps *,\n #else\n /* Include EXPR, so that unused variable warnings do not occur.  */\n #define linemap_assert(EXPR) ((void)(0 && (EXPR)))\n+#define linemap_assert_fails(EXPR) (! (EXPR))\n #define linemap_check_ordinary(LINE_MAP) (LINE_MAP)\n #endif\n "}, {"sha": "6a695ab0f1bb6d74a39da39358e9d17e5dd85a42", "filename": "libcpp/line-map.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bd83290ace3d8e3256103a59d79e6ec3946964/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=73bd83290ace3d8e3256103a59d79e6ec3946964", "patch": "@@ -645,7 +645,9 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n   const struct line_map * map = NULL;\n \n   /* This function does not support virtual locations yet.  */\n-  linemap_assert (!linemap_location_from_macro_expansion_p (set, loc));\n+  if (linemap_assert_fails\n+      (!linemap_location_from_macro_expansion_p (set, loc)))\n+    return loc;\n \n   if (offset == 0\n       /* Adding an offset to a reserved location (like\n@@ -658,22 +660,27 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n   loc = linemap_resolve_location (set, loc, LRK_SPELLING_LOCATION, &map);\n   /* The new location (loc + offset) should be higher than the first\n      location encoded by MAP.  */\n-  linemap_assert (MAP_START_LOCATION (map) < loc + offset);\n+  if (linemap_assert_fails (MAP_START_LOCATION (map) < loc + offset))\n+    return loc;\n \n   /* If MAP is not the last line map of its set, then the new location\n      (loc + offset) should be less than the first location encoded by\n      the next line map of the set.  */\n   if (map != LINEMAPS_LAST_ORDINARY_MAP (set))\n-    linemap_assert (loc + offset < MAP_START_LOCATION (&map[1]));\n+    if (linemap_assert_fails (loc + offset < MAP_START_LOCATION (&map[1])))\n+      return loc;\n \n   offset += SOURCE_COLUMN (map, loc);\n-  linemap_assert (offset < (1u << map->d.ordinary.column_bits));\n+  if (linemap_assert_fails (offset < (1u << map->d.ordinary.column_bits)))\n+    return loc;\n \n   source_location r = \n     linemap_position_for_line_and_column (map,\n \t\t\t\t\t  SOURCE_LINE (map, loc),\n \t\t\t\t\t  offset);\n-  linemap_assert (map == linemap_lookup (set, r));\n+  if (linemap_assert_fails (map == linemap_lookup (set, r)))\n+    return loc;\n+\n   return r;\n }\n "}]}