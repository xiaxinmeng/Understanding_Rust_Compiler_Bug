{"sha": "38198304ccb559a021fe5abbe91a5191d8cf5f0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxOTgzMDRjY2I1NTlhMDIxZmU1YWJiZTkxYTUxOTFkOGNmNWYwZQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-08-17T08:25:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-17T08:25:31Z"}, "message": "m68k.c (output_move_simode_const): Use subl to move a zero into an address register.\n\n        * m68k.c (output_move_simode_const): Use subl to move a zero into an\n        address register.\n        (output_move_[hq]imode): Likewise.\n\nFrom-SVN: r21778", "tree": {"sha": "bf260083239587c93c7342d2b98ef0d7a1d9e7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf260083239587c93c7342d2b98ef0d7a1d9e7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38198304ccb559a021fe5abbe91a5191d8cf5f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38198304ccb559a021fe5abbe91a5191d8cf5f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38198304ccb559a021fe5abbe91a5191d8cf5f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38198304ccb559a021fe5abbe91a5191d8cf5f0e/comments", "author": null, "committer": null, "parents": [{"sha": "3f9a83a91b7fe23514b34c1f20be785ce935ba9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9a83a91b7fe23514b34c1f20be785ce935ba9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f9a83a91b7fe23514b34c1f20be785ce935ba9b"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "afd7974f976f1654370eb02909e28bea38e615f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38198304ccb559a021fe5abbe91a5191d8cf5f0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38198304ccb559a021fe5abbe91a5191d8cf5f0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38198304ccb559a021fe5abbe91a5191d8cf5f0e", "patch": "@@ -1,3 +1,9 @@\n+Mon Aug 17 09:23:42 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* m68k.c (output_move_simode_const): Use subl to move a zero into an\n+\taddress register.\n+\t(output_move_[hq]imode): Likewise.\n+\n Mon Aug 17 09:15:47 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* toplev.c (main): Enable -fstrict-aliasing for -O2 and above."}, {"sha": "1cfe3b25d9d76ed791c6a894fe3f6033d301c2dc", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38198304ccb559a021fe5abbe91a5191d8cf5f0e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38198304ccb559a021fe5abbe91a5191d8cf5f0e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=38198304ccb559a021fe5abbe91a5191d8cf5f0e", "patch": "@@ -1507,6 +1507,9 @@ output_move_simode_const (operands)\n \t  || !(GET_CODE (operands[0]) == MEM\n \t       && MEM_VOLATILE_P (operands[0]))))\n     return \"clr%.l %0\";\n+  else if (operands[1] == const0_rtx\n+\t   && ADDRESS_REG_P (operands[0]))\n+    return \"sub%.l %0,%0\";\n   else if (DATA_REG_P (operands[0]))\n     return output_move_const_into_data_reg (operands);\n   else if (ADDRESS_REG_P (operands[0])\n@@ -1554,6 +1557,9 @@ output_move_himode (operands)\n \t      || !(GET_CODE (operands[0]) == MEM\n \t\t   && MEM_VOLATILE_P (operands[0]))))\n \treturn \"clr%.w %0\";\n+      else if (operands[1] == const0_rtx\n+\t       && ADDRESS_REG_P (operands[0]))\n+\treturn \"sub%.l %0,%0\";\n       else if (DATA_REG_P (operands[0])\n \t       && INTVAL (operands[1]) < 128\n \t       && INTVAL (operands[1]) >= -128)\n@@ -1668,6 +1674,8 @@ output_move_qimode (operands)\n       return \"moveq %1,%0\";\n #endif\n     }\n+  if (operands[1] == const0_rtx && ADDRESS_REG_P (operands[0]))\n+    return \"sub%.l %0,%0\";\n   if (GET_CODE (operands[1]) != CONST_INT && CONSTANT_P (operands[1]))\n     return \"move%.l %1,%0\";\n   /* 68k family doesn't support byte moves to from address registers.  The"}]}