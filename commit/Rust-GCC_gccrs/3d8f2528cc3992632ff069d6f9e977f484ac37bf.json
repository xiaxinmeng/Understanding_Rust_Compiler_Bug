{"sha": "3d8f2528cc3992632ff069d6f9e977f484ac37bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4ZjI1MjhjYzM5OTI2MzJmZjA2OWQ2ZjllOTc3ZjQ4NGFjMzdiZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-04-19T12:02:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-04-19T12:02:02Z"}, "message": "expmed.c (expand_mult_highpart_adjust): Make OP1 valid for MODE.\n\n\t* expmed.c (expand_mult_highpart_adjust): Make OP1 valid for MODE.\n\t(expand_mult_highpart_optab): Likewise.\n\t(expand_mult_highpart): Make OP1 valid for WIDER_MODE, not MODE.\n\nFrom-SVN: r80848", "tree": {"sha": "caa12be2df3066b3dd8bc86ae03ee0f1517b054b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caa12be2df3066b3dd8bc86ae03ee0f1517b054b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8f2528cc3992632ff069d6f9e977f484ac37bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8f2528cc3992632ff069d6f9e977f484ac37bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8f2528cc3992632ff069d6f9e977f484ac37bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8f2528cc3992632ff069d6f9e977f484ac37bf/comments", "author": null, "committer": null, "parents": [{"sha": "41b8e86c9abcb1dbf93c78a1a8529ade77e39ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b8e86c9abcb1dbf93c78a1a8529ade77e39ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b8e86c9abcb1dbf93c78a1a8529ade77e39ff5"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "b63d0395ea8226ec67c15fb0882512f5d87dc74b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8f2528cc3992632ff069d6f9e977f484ac37bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8f2528cc3992632ff069d6f9e977f484ac37bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d8f2528cc3992632ff069d6f9e977f484ac37bf", "patch": "@@ -1,3 +1,9 @@\n+2004-04-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expmed.c (expand_mult_highpart_adjust): Make OP1 valid for MODE.\n+\t(expand_mult_highpart_optab): Likewise.\n+\t(expand_mult_highpart): Make OP1 valid for WIDER_MODE, not MODE.\n+\n 2004-04-19  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (fixuns_truncsfsi2, fixuns_truncdfsi2,"}, {"sha": "3fb76b45a543d4a2b264d6cec66fa48fb75d0025", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8f2528cc3992632ff069d6f9e977f484ac37bf/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8f2528cc3992632ff069d6f9e977f484ac37bf/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3d8f2528cc3992632ff069d6f9e977f484ac37bf", "patch": "@@ -2841,6 +2841,7 @@ expand_mult_highpart_adjust (enum machine_mode mode, rtx adj_operand, rtx op0,\n   rtx tem;\n   enum rtx_code adj_code = unsignedp ? PLUS : MINUS;\n \n+  op1 = gen_int_mode (INTVAL (op1), mode);\n   tem = expand_shift (RSHIFT_EXPR, mode, op0,\n \t\t      build_int_2 (GET_MODE_BITSIZE (mode) - 1, 0),\n \t\t      NULL_RTX, 0);\n@@ -2895,7 +2896,8 @@ expand_mult_highpart_optab (enum machine_mode mode, rtx op0, rtx op1,\n   if (mul_highpart_cost[(int) mode] < max_cost)\n     {\n       moptab = unsignedp ? umul_highpart_optab : smul_highpart_optab;\n-      tem = expand_binop (mode, moptab, op0, op1, target,\n+      tem = expand_binop (mode, moptab, op0,\n+\t\t\t  gen_int_mode (INTVAL (op1), mode), target,\n \t\t\t  unsignedp, OPTAB_DIRECT);\n       if (tem)\n \treturn tem;\n@@ -2908,7 +2910,8 @@ expand_mult_highpart_optab (enum machine_mode mode, rtx op0, rtx op1,\n \t  < max_cost))\n     {\n       moptab = unsignedp ? smul_highpart_optab : umul_highpart_optab;\n-      tem = expand_binop (mode, moptab, op0, op1, target,\n+      tem = expand_binop (mode, moptab, op0,\n+\t\t\t  gen_int_mode (INTVAL (op1), mode), target,\n \t\t\t  unsignedp, OPTAB_DIRECT);\n       if (tem)\n \t/* We used the wrong signedness.  Adjust the result.  */\n@@ -2987,7 +2990,7 @@ expand_mult_highpart (enum machine_mode mode, rtx op0,\n   if (GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT)\n     abort ();\n \n-  op1 = gen_int_mode (cnst1, mode);\n+  op1 = gen_int_mode (cnst1, wider_mode);\n   cnst1 &= GET_MODE_MASK (mode);\n \n   /* We can't optimize modes wider than BITS_PER_WORD. "}]}