{"sha": "d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmZTI2YjJjZDcwNzNlMTNkMmE0YzhiYzBkNGY0ZDMxMDA1MGNlMQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-11-20T01:44:49Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-20T01:44:49Z"}, "message": "check.c (gfc_check_getcwd_sub): Fix seg fault.\n\n\t* check.c (gfc_check_getcwd_sub): Fix seg fault.\n\n\t* check.c (gfc_check_exit,gfc_check_umask,gfc_check_umask_sub,\n\tgfc_check_unlink,gfc_check_unlink_sub): New functions\n\t* gfortran.h (GFC_ISYM_UMASK,GFC_ISYM_UNLINK): New symbols\n\t* intrinsic.c (add_functions,add_subroutines): Add umask, unlink,\n\texit to intrinsics symbol tables.\n\t* intrinsic.h (gfc_check_umask,gfc_check_unlink,gfc_check_exit,\n\tgfc_check_umask_sub,gfc_check_unlink_sub,gfc_resolve_umask,\n\tgfc_resolve_unlink,gfc_resolve_exit,gfc_resolve_umask_sub,\n\tgfc_resolve_unlink_sub): Add and sort prototypes.\n\t* iresolve.c (gfc_resolve_umask,gfc_resolve_unlink,gfc_resolve_exit,\n\tgfc_resolve_umask_sub,gfc_resolve_unlink_sub): New functions\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Use symbols\n\nlibgfortran/\n\t* Makefile.am: Add intrinsics/{umask.c,unlink.c,exit.c}\n\t* Makefile.in: Regenerated\n\t* intrinsics/umask.c: New file\n\t* intrinsics/unlink.c: ditto\n\t* intrinsics/exit.c: ditto\n\nFrom-SVN: r90949", "tree": {"sha": "b1ef78f610bfdcc13867c75b1e08219b8aa591c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1ef78f610bfdcc13867c75b1e08219b8aa591c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/comments", "author": null, "committer": null, "parents": [{"sha": "449ecb09b3677aa1d7225862dcc53e6f27b0bad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/449ecb09b3677aa1d7225862dcc53e6f27b0bad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/449ecb09b3677aa1d7225862dcc53e6f27b0bad0"}], "stats": {"total": 477, "additions": 460, "deletions": 17}, "files": [{"sha": "1ee3207970cf517550d54af3361836efa2b33d43", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -1,3 +1,20 @@\n+2004-11-20  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* check.c (gfc_check_getcwd_sub): Fix seg fault.\n+\n+\t* check.c (gfc_check_exit,gfc_check_umask,gfc_check_umask_sub,\n+\tgfc_check_unlink,gfc_check_unlink_sub): New functions\n+\t* gfortran.h (GFC_ISYM_UMASK,GFC_ISYM_UNLINK): New symbols\n+\t* intrinsic.c (add_functions,add_subroutines): Add umask, unlink,\n+\texit to intrinsics symbol tables.\n+\t* intrinsic.h (gfc_check_umask,gfc_check_unlink,gfc_check_exit,\n+\tgfc_check_umask_sub,gfc_check_unlink_sub,gfc_resolve_umask,\n+\tgfc_resolve_unlink,gfc_resolve_exit,gfc_resolve_umask_sub,\n+\tgfc_resolve_unlink_sub): Add and sort prototypes.\n+\t* iresolve.c (gfc_resolve_umask,gfc_resolve_unlink,gfc_resolve_exit,\n+\tgfc_resolve_umask_sub,gfc_resolve_unlink_sub): New functions\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Use symbols\n+\n 2004-11-16  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/13010"}, {"sha": "392086429b425ae15e383f41423b27d086285612", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -2108,6 +2108,94 @@ gfc_check_getcwd_sub (gfc_expr * cwd, gfc_expr * status)\n   if (type_check (cwd, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n+  if (status == NULL)\n+    return SUCCESS;\n+\n+  if (scalar_check (status, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (status, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_exit (gfc_expr * status)\n+{\n+  \n+  if (status == NULL)\n+  return SUCCESS;\n+\n+  if (type_check (status, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (status, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_umask (gfc_expr * mask)\n+{\n+\n+  if (type_check (mask, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (mask, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_umask_sub (gfc_expr * mask, gfc_expr * old)\n+{\n+\n+  if (type_check (mask, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (mask, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (old == NULL)\n+    return SUCCESS;\n+\n+  if (scalar_check (old, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (old, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_unlink (gfc_expr * name)\n+{\n+\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_unlink_sub (gfc_expr * name, gfc_expr * status)\n+{\n+\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (status == NULL)\n+    return SUCCESS;\n+\n   if (scalar_check (status, 1) == FAILURE)\n     return FAILURE;\n "}, {"sha": "838e6d963520f62b70cc30026606e6c9a40ebe4c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -387,6 +387,8 @@ enum gfc_generic_isym_id\n   GFC_ISYM_TRANSPOSE,\n   GFC_ISYM_TRIM,\n   GFC_ISYM_UBOUND,\n+  GFC_ISYM_UMASK,\n+  GFC_ISYM_UNLINK,\n   GFC_ISYM_UNPACK,\n   GFC_ISYM_VERIFY,\n   GFC_ISYM_CONVERSION"}, {"sha": "9fe36ef62c1c966468d4b0a4441aabc86341a4c0", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -1856,6 +1856,20 @@ add_functions (void)\n \n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n+  /* g77 compatibility for UMASK.  */\n+  add_sym_1 (\"umask\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_umask, NULL, gfc_resolve_umask,\n+\t     a, BT_INTEGER, di, 0);\n+\n+  make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n+\n+  /* g77 compatibility for UNLINK.  */\n+  add_sym_1 (\"unlink\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n+\t     a, BT_CHARACTER, dc, 0);\n+\n+  make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n+\n   add_sym_3 (\"unpack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_unpack, NULL, gfc_resolve_unpack,\n \t     v, BT_REAL, dr, 0, msk, BT_LOGICAL, dl, 0,\n@@ -1984,6 +1998,10 @@ add_subroutines (void)\n              gfc_check_srand, NULL, gfc_resolve_srand,\n              c, BT_INTEGER, 4, 0);\n \n+  add_sym_1s (\"exit\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+             gfc_check_exit, NULL, gfc_resolve_exit,\n+             c, BT_INTEGER, di, 1);\n+\n   add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_system_sub,\n \t      c, BT_CHARACTER, dc, 0,\n@@ -1993,6 +2011,17 @@ add_subroutines (void)\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,\n \t     cm, BT_INTEGER, di, 1);\n+\n+  add_sym_2s (\"umask\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+          gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n+\t      val, BT_INTEGER, di, 0,\n+\t      num, BT_INTEGER, di, 1);\n+\n+  add_sym_2s (\"unlink\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+          gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n+\t      c, BT_CHARACTER, dc, 0,\n+\t      st, BT_INTEGER, di, 1);\n+\n }\n \n "}, {"sha": "36d3b63468059243548703e299c5fe1ef13d1ddf", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -100,6 +100,8 @@ try gfc_check_transfer (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_transpose (gfc_expr *);\n try gfc_check_trim (gfc_expr *);\n try gfc_check_ubound (gfc_expr *, gfc_expr *);\n+try gfc_check_umask (gfc_expr *);\n+try gfc_check_unlink (gfc_expr *);\n try gfc_check_unpack (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_verify (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_x (gfc_expr *);\n@@ -109,13 +111,16 @@ try gfc_check_x (gfc_expr *);\n try gfc_check_cpu_time (gfc_expr *);\n try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_date_and_time (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_exit (gfc_expr *);\n try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t      gfc_expr *);\n try gfc_check_random_number (gfc_expr *);\n try gfc_check_random_seed (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_system_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_umask_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_unlink_sub (gfc_expr *, gfc_expr *);\n \n \n /* Simplification functions.  */\n@@ -319,21 +324,26 @@ void gfc_resolve_transfer (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_transpose (gfc_expr *, gfc_expr *);\n void gfc_resolve_trim (gfc_expr *, gfc_expr *);\n void gfc_resolve_ubound (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_umask (gfc_expr *, gfc_expr *);\n+void gfc_resolve_unlink (gfc_expr *, gfc_expr *);\n void gfc_resolve_unpack (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n \n \n /* Intrinsic subroutine resolution.  */\n void gfc_resolve_cpu_time (gfc_code *);\n-void gfc_resolve_system_sub (gfc_code *);\n-void gfc_resolve_system_clock (gfc_code *);\n-void gfc_resolve_mvbits (gfc_code *);\n-void gfc_resolve_random_number (gfc_code *);\n+void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);\n void gfc_resolve_getcwd_sub (gfc_code *);\n void gfc_resolve_get_command (gfc_code *);\n void gfc_resolve_get_command_argument (gfc_code *);\n void gfc_resolve_get_environment_variable (gfc_code *);\n+void gfc_resolve_mvbits (gfc_code *);\n+void gfc_resolve_random_number (gfc_code *);\n+void gfc_resolve_system_clock (gfc_code *);\n+void gfc_resolve_system_sub (gfc_code *);\n+void gfc_resolve_umask_sub (gfc_code *);\n+void gfc_resolve_unlink_sub (gfc_code *);\n \n \n /* The mvbits() subroutine requires the most arguments: five.  */"}, {"sha": "0379d70132b4121ce3005c84f7b6dafe188ba35a", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -1433,6 +1433,29 @@ gfc_resolve_ubound (gfc_expr * f, gfc_expr * array,\n }\n \n \n+/* Resolve the g77 compatibility function UMASK.  */\n+\n+void\n+gfc_resolve_umask (gfc_expr * f, gfc_expr * n)\n+{\n+\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = n->ts.kind;\n+  f->value.function.name = gfc_get_string (PREFIX(\"umask_i%d\"), n->ts.kind);\n+}\n+\n+\n+/* Resolve the g77 compatibility function UNLINK.  */\n+\n+void\n+gfc_resolve_unlink (gfc_expr * f, gfc_expr * n ATTRIBUTE_UNUSED)\n+{\n+\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 4;\n+  f->value.function.name = gfc_get_string (PREFIX(\"unlink\"));\n+}\n+\n void\n gfc_resolve_unpack (gfc_expr * f, gfc_expr * vector, gfc_expr * mask,\n \t\t    gfc_expr * field ATTRIBUTE_UNUSED)\n@@ -1639,6 +1662,58 @@ gfc_resolve_system_clock (gfc_code * c)\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+/* Resolve the EXIT intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_exit (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->expr != NULL)\n+    kind = c->ext.actual->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind;\n+\n+  name = gfc_get_string (PREFIX(\"exit_i%d\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+/* Resolve the UMASK intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_umask_sub (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->next->expr != NULL)\n+    kind = c->ext.actual->next->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind;\n+\n+  name = gfc_get_string (PREFIX(\"umask_i%d_sub\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+/* Resolve the UNLINK intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_unlink_sub (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->next->expr != NULL)\n+    kind = c->ext.actual->next->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind;\n+\n+  name = gfc_get_string (PREFIX(\"unlink_i%d_sub\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n void\n gfc_iresolve_init_1 (void)\n {"}, {"sha": "f5b3b34f6b1b589f563c9e4a4aefaaf03c5884c3", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -2974,6 +2974,8 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_GETPID:\n     case GFC_ISYM_GETUID:\n     case GFC_ISYM_SYSTEM:\n+    case GFC_ISYM_UMASK:\n+    case GFC_ISYM_UNLINK:\n       gfc_conv_intrinsic_funcall (se, expr);\n       break;\n "}, {"sha": "3324b0f7dfa2d58c69e3a2d14e16e55067e26be7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -1,3 +1,11 @@\n+2004-11-20  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* Makefile.am: Add intrinsics/{umask.c,unlink.c,exit.c}\n+\t* Makefile.in: Regenerated\n+\t* intrinsics/umask.c: New file\n+\t* intrinsics/unlink.c: ditto\n+\t* intrinsics/exit.c: ditto\n+\n 2004-11-18  Victor Leikehman  <lei@il.ibm.com>\n \n \t* m4/matmul.m4: Loops reordered to improve cache behavior.\n@@ -273,7 +281,7 @@\n \n \tPR fortran/17143\t\n \t* runtime/error.c (itoa): keep from overflowing during\n-        mod operation by using unsigned variable.\n+\tmod operation by using unsigned variable.\n \n 2004-08-24  Bud Davis  <bdavis9659@comcast.net>\n \n@@ -545,9 +553,9 @@\n \n \tPR gfortran/14897\n \t* io/transfer.c (formatted_transfer): position is unique\n-         for T and TL edit descriptors.\n+\t for T and TL edit descriptors.\n \t(data_transfer_init): set record length to size of internal\n-         file.\n+\t file.\n \n 2004-06-09  Bud Davis  <bdavis9659@comcast.net>\n \n@@ -743,7 +751,7 @@\n \n \tPR fortran/14906\n \t* io/format.c (format_item): gracefully handle a ')'\n-        when it is the first character encountered in the string.\n+\twhen it is the first character encountered in the string.\n \n 2004-04-11  Bud Davis  <bdavis9659@comcast.net>\n \n@@ -809,7 +817,7 @@\n \tPR 13919\n \t* io/io.h (global_t):\n \t* io/list_read.c (next_char,list_formatted_read,ist_formatted_read):\n-          Move eof_jmp to a global structure.\n+\t  Move eof_jmp to a global structure.\n \t* io/transfer.c(finalize_transfer) : Set up eof_jump for callers.\n \n 2004-03-24  Bud Davis  <bdavis9659@comcast.net>\n@@ -1233,14 +1241,14 @@\n \n 2003-04-11  Xiaoqiang Zhang <zhangapache@yahoo.com>\n \n-        * io/write.c (extract_real): Ouput floating point value.\n-        (write_float): New Function.\n-        (write_e, write_f, write_en, write_es): Modified\n-        * io/transfer.c (formatted_transfer): Modified.\n-        * libgfor.h (default_rtoa): Declaration.\n-        (rtoa): Declaration.\n-        * runtime/error.c (default_rtoa): New Function.\n-        (rtoa): New Function.\n+\t* io/write.c (extract_real): Ouput floating point value.\n+\t(write_float): New Function.\n+\t(write_e, write_f, write_en, write_es): Modified\n+\t* io/transfer.c (formatted_transfer): Modified.\n+\t* libgfor.h (default_rtoa): Declaration.\n+\t(rtoa): Declaration.\n+\t* runtime/error.c (default_rtoa): New Function.\n+\t(rtoa): New Function.\n \n 2003-04-05  Paul Brook  <paul@nowt.org>\n "}, {"sha": "50a3dacb1443aca95a7625b64b913ce9cbde92b7", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -50,6 +50,7 @@ intrinsics/erf.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/etime.c \\\n+intrinsics/exit.c \\\n intrinsics/getcwd.c \\\n intrinsics/getXid.c \\\n intrinsics/ishftc.c \\\n@@ -67,6 +68,8 @@ intrinsics/selected_int_kind.f90 \\\n intrinsics/selected_real_kind.f90 \\\n intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n+intrinsics/umask.c \\\n+intrinsics/unlink.c \\\n intrinsics/unpack_generic.c \\\n runtime/in_pack_generic.c \\\n runtime/in_unpack_generic.c \\"}, {"sha": "6ae4dfdf335385747fb7b5cfc07af9dc609b823a", "filename": "libgfortran/intrinsics/exit.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Fexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Fexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fexit.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -0,0 +1,49 @@\n+/* Implementation of the EXIT intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+/* SUBROUTINE EXIT(STATUS)\n+   INTEGER, INTENT(IN), OPTIONAL :: STATUS  */\n+\n+void\n+prefix(exit_i4) (GFC_INTEGER_4 * status)\n+{\n+\n+  if (status == NULL)\n+    exit(0);\n+  exit(*status);\n+}\n+\n+void\n+prefix(exit_i8) (GFC_INTEGER_8 * status)\n+{\n+\n+  if (status == NULL)\n+    exit(0);\n+  exit((int) *status);\n+}"}, {"sha": "cf41451e31aff6c9ae9fd1d3323fc39d000619e1", "filename": "libgfortran/intrinsics/umask.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Fumask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Fumask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fumask.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -0,0 +1,75 @@\n+/* Implementation of the UMASK intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_SYS_STAT_H\n+#include <sys/stat.h>\n+#endif\n+\n+/* SUBROUTINE UMASK(MASK, OLD)\n+   INTEGER, INTENT(IN) :: MASK\n+   INTEGER, INTENT(OUT), OPTIONAL :: OLD  */\n+\n+void\n+prefix(umask_i4_sub) (GFC_INTEGER_4 * mask, GFC_INTEGER_4 * old)\n+{\n+  mode_t val;\n+\n+  val = umask((mode_t) *mask);\n+  if (old != NULL)\n+    *old = (GFC_INTEGER_4) val;\n+}\n+\n+void\n+prefix(umask_i8_sub) (GFC_INTEGER_8 * mask, GFC_INTEGER_8 * old)\n+{\n+  mode_t val;\n+\n+  val = umask((mode_t) *mask);\n+  if (old != NULL)\n+    *old = (GFC_INTEGER_8) val;\n+}\n+\n+/* INTEGER FUNCTION UMASK(MASK)\n+   INTEGER, INTENT(IN) :: MASK  */\n+\n+GFC_INTEGER_4\n+prefix(umask) (GFC_INTEGER_4 * mask)\n+{\n+  GFC_INTEGER_4 old;\n+  prefix(umask_i4_sub) (mask, &old);\n+  return old;\n+}\n+\n+GFC_INTEGER_8\n+prefix(umask_i8) (GFC_INTEGER_8 * mask)\n+{\n+  GFC_INTEGER_8 old;\n+  prefix(umask_i8_sub) (mask, &old);\n+  return old;\n+}"}, {"sha": "11c35099a9069b56cea32b34b9f7c9773a0e647b", "filename": "libgfortran/intrinsics/unlink.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Funlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1/libgfortran%2Fintrinsics%2Funlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funlink.c?ref=d8fe26b2cd7073e13d2a4c8bc0d4f4d310050ce1", "patch": "@@ -0,0 +1,85 @@\n+/* Implementation of the UNLINK intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+#include <errno.h>\n+\n+/* SUBROUTINE UNLINK(NAME, STATUS)\n+   CHARACTER(LEN= ), INTENT(IN) :: NAME\n+   INTEGER, INTENT(OUT), OPTIONAL :: STATUS)  */\n+\n+void\n+prefix(unlink_i4_sub) (char * name, GFC_INTEGER_4 * status,\n+\t\t       gfc_charlen_type name_len)\n+{\n+\n+  char *str, *s;\n+  GFC_INTEGER_4 stat;\n+\n+  /* Trim trailing spaces from name.  */\n+  while (name_len > 0 && name[name_len - 1] == ' ')\n+    name_len--;\n+\n+  /* Make a null terminated copy of the string.  */\n+  str = gfc_alloca (name_len + 1);\n+  memcpy (str, name, name_len);\n+  str[name_len] = '\\0'; \n+\n+  stat = unlink (str);\n+\n+  if (status != NULL) \n+    *status = (stat == 0) ? stat : errno;\n+}\n+\n+\n+void\n+prefix(unlink_i8_sub) (char * name, GFC_INTEGER_8 * status,\n+\t\t               gfc_charlen_type name_len)\n+{\n+\n+  GFC_INTEGER_4 status4;\n+\n+  prefix (unlink_i4_sub) (name, &status4, name_len);\n+  if (status)\n+    *status = status4;\n+}\n+\n+\n+/* INTEGER FUNCTION UNLINK(NAME)\n+   CHARACTER(LEN= ), INTENT(IN) :: NAME  */\n+\n+GFC_INTEGER_4\n+prefix(unlink) (char * name, gfc_charlen_type name_len)\n+{\n+  GFC_INTEGER_4 status;\n+  prefix(unlink_i4_sub) (name, &status, name_len);\n+  return status;\n+}\n+"}]}