{"sha": "2ddfea8a33905ade165e6aa833dd0adea93e1480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkZmVhOGEzMzkwNWFkZTE2NWU2YWE4MzNkZDBhZGVhOTNlMTQ4MA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2011-08-23T19:29:54Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-23T19:29:54Z"}, "message": "Add AVX2 testcases.\n\ngcc/\n\n2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* config/i386/sse.md (<s>mul<mode>3_highpart): Update.\n\ngcc/testsuite/\n\n2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* g++.dg/other/i386-2.C: Add -mavx2 check.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/avx-1.c: Add AVX2.\n\t* gcc.target/i386/avx-2.c: Likewise.\n\t* gcc.target/i386/funcspec-5.c: Likewise.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx2): Likewise.\n\t* gcc.target/i386/avx2-check.h: New.\n\t* gcc.target/i386/avx2-i32gatherd-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherd256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherpd256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherps256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq-4.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i32gatherq256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherd256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherps256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq256-3.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq256-4.c: Likewise.\n\t* gcc.target/i386/avx2-mpsadbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-mpsadbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastsd_pd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastsd_pd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastsi128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastsi128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastss_ps-1.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastss_ps-2.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastss_ps256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vbroadcastss_ps256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vextracti128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vextracti128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vinserti128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vinserti128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vmovmskb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vmovntdqa-1.c: Likewise.\n\t* gcc.target/i386/avx2-vmovntdqa-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsb256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsb256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsw256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsw256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpackssdw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpackssdw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpacksswb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpacksswb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpackusdw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpackusdw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpackuswb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpackuswb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddsb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddsb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddusb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddusb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddusw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddusw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpaddw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpalignr256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpalignr256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpand-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpand-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpandn-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpandn-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpavgb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpavgb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpavgw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpavgw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendd128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendd128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendvb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendvb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpblendw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastb128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastb128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastb256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastb256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastd128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastd128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastq128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastq128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastw128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastw128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastw256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpbroadcastw256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpeqw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpcmpgtw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vperm2i128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vperm2i128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpermd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpermd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpermpd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpermpd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpermps-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpermps-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpermq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpermq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vphaddw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphsubd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vphsubd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphsubsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vphsubsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vphsubw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaddubsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaddubsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaddwd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaddwd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskloadq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstored-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstored-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstored256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstored256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstoreq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstoreq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstoreq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaskstoreq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxub-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxub-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxud-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxud-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxuw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmaxuw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminub-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminub-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminud-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminud-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpminuw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpminuw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovmskb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxdq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxdq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxwd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxwd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxwq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovsxwq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxdq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxdq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxwd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxwd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxwq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmovzxwq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmuldq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmuldq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhrsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhrsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhuw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhuw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulhw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulld-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmulld-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmullw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmullw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpmuludq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpmuludq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpor-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpor-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsadbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsadbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufhw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpshufhw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpshuflw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpshuflw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsignw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpslld-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpslld-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpslldi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpslldi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpslldq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpslldq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllqi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllqi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvd128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvd128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvq128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvq128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllvq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllwi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsllwi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrad-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrad-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsradi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsradi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsravd128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsravd128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsravd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsravd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsraw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsraw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrawi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrawi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrld-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrld-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrldi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrldi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrldq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrldq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlqi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlqi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvd128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvd128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvd256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvq128-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvq128-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvq256-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlvq256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlwi-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsrlwi-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubsb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubsb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubsw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubsw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubusb-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubusb-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubusw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpsubusw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhdq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhdq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhqdq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhqdq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhwd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckhwd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklbw-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklbw-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckldq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpckldq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklqdq-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklqdq-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklwd-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpunpcklwd-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpxor-1.c: Likewise.\n\t* gcc.target/i386/avx2-vpxor-2.c: Likewise.\n\t* gcc.target/i386/testimm-9.c: Likewise.\n\nFrom-SVN: r178006", "tree": {"sha": "29cf21e49bab5fac830067dde7594db1a7c83533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cf21e49bab5fac830067dde7594db1a7c83533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ddfea8a33905ade165e6aa833dd0adea93e1480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddfea8a33905ade165e6aa833dd0adea93e1480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddfea8a33905ade165e6aa833dd0adea93e1480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddfea8a33905ade165e6aa833dd0adea93e1480/comments", "author": null, "committer": null, "parents": [{"sha": "a3a704a495fab23d8a9ed90a2207c09a61cca341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a704a495fab23d8a9ed90a2207c09a61cca341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a704a495fab23d8a9ed90a2207c09a61cca341"}], "stats": {"total": 11187, "additions": 11175, "deletions": 12}, "files": [{"sha": "1b5e9ead50256209c403bb9d8750a0d749588361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,3 +1,7 @@\n+2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/sse.md (<s>mul<mode>3_highpart): Update.\n+\n 2011-08-23  Mark Heffernan  <meheff@google.com>\n \n \tPR middle-end/38509"}, {"sha": "33ac5b9543f8f0c1e5c4c5886538d579d7dd4d21", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -4761,7 +4761,7 @@\n \t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n+  \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n (define_insn \"*<s>mul<mode>3_highpart\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")"}, {"sha": "1eb14a2ccf0c0ab603fd9e6c9094d67af4be2bcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,3 +1,390 @@\n+2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mavx2 check.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/avx-1.c: Add AVX2.\n+\t* gcc.target/i386/avx-2.c: Likewise.\n+\t* gcc.target/i386/funcspec-5.c: Likewise.\n+\t* gcc.target/i386/sse-12.c: Likewise.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx2): Likewise.\n+\t* gcc.target/i386/avx2-check.h: New.\n+\t* gcc.target/i386/avx2-i32gatherd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherd256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherpd256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherps256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i32gatherq256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherd256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherpd256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherps256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq-4.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq256-3.c: Likewise.\n+\t* gcc.target/i386/avx2-i64gatherq256-4.c: Likewise.\n+\t* gcc.target/i386/avx2-mpsadbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-mpsadbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastsd_pd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastsd_pd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastsi128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastsi128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastss_ps-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastss_ps-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastss_ps256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vbroadcastss_ps256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vextracti128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vextracti128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vinserti128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vinserti128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vmovmskb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vmovntdqa-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vmovntdqa-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsb256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsb256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsw256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpabsw256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackssdw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackssdw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpacksswb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpacksswb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackusdw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackusdw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackuswb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpackuswb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddsb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddsb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddusb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddusb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddusw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddusw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpaddw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpalignr256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpalignr256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpand-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpand-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpandn-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpandn-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpavgb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpavgb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpavgw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpavgw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendd128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendd128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendvb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendvb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpblendw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastb128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastb128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastb256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastb256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastd128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastd128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastq128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastq128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastw128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastw128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastw256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpbroadcastw256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpeqw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpcmpgtw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vperm2i128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vperm2i128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermpd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermpd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermps-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermps-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpermq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vphaddw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphsubd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vphsubd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphsubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vphsubsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vphsubw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaddubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaddubsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaddwd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaddwd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskloadq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstored-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstored-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstored256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstored256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstoreq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstoreq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstoreq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaskstoreq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxub-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxub-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxud-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxud-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxuw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmaxuw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminub-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminub-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminud-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminud-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminuw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpminuw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovmskb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxdq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxdq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxwd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxwd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxwq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovsxwq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxdq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxdq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxwd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxwd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxwq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmovzxwq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmuldq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmuldq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhrsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhrsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhuw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhuw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulhw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulld-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmulld-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmullw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmullw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmuludq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpmuludq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpor-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpor-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsadbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsadbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufhw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshufhw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshuflw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpshuflw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsignw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslld-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslld-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslldi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslldi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslldq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpslldq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllqi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllqi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvd128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvd128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvq128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvq128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllvq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllwi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsllwi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrad-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrad-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsradi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsradi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsravd128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsravd128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsravd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsravd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsraw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsraw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrawi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrawi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrld-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrld-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrldi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrldi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrldq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrldq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlqi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlqi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvd128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvd128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvd256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvd256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvq128-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvq128-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvq256-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlvq256-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlwi-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsrlwi-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubsb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubsb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubsw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubusb-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubusb-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubusw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpsubusw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhdq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhdq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhqdq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhqdq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhwd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckhwd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklbw-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklbw-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckldq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpckldq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklqdq-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklqdq-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklwd-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpunpcklwd-2.c: Likewise.\n+\t* gcc.target/i386/avx2-vpxor-1.c: Likewise.\n+\t* gcc.target/i386/avx2-vpxor-2.c: Likewise.\n+\t* gcc.target/i386/testimm-9.c: Likewise.\n+\n 2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mbmi2 check."}, {"sha": "8c9c911a3df8e28787261d3b2cabb9f2a29d65b4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "d8c6f8d3b159c90045c5dfdfc91d796e4779e022", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "4f40abb26057346a3fa0d0f07868b668088116dc", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx  -maes -mpclmul\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n@@ -49,6 +49,39 @@\n #define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n #define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n #define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+#define __builtin_ia32_mpsadbw256(X, Y, M) __builtin_ia32_mpsadbw256(X, Y, 1)\n+#define __builtin_ia32_palignr256(X, Y, M) __builtin_ia32_palignr256(X, Y, 8)\n+#define __builtin_ia32_pblendw256(X, Y, M) __builtin_ia32_pblendw256(X, Y, 8)\n+#define __builtin_ia32_pshufd256(X, M) __builtin_ia32_pshufd256(X, 8)\n+#define __builtin_ia32_pshufhw256(X, M) __builtin_ia32_pshufhw256(X, 8)\n+#define __builtin_ia32_pshuflw256(X, M) __builtin_ia32_pshuflw256(X, 8)\n+#define __builtin_ia32_pslldqi256(X, M) __builtin_ia32_pslldqi256(X, 8)\n+#define __builtin_ia32_psrldqi256(X, M) __builtin_ia32_psrldqi256(X, 8)\n+#define __builtin_ia32_pblendd128(X, Y, M) __builtin_ia32_pblendd128(X, Y, 1)\n+#define __builtin_ia32_pblendd256(X, Y, M) __builtin_ia32_pblendd256(X, Y, 1)\n+#define __builtin_ia32_permdf256(X, M) __builtin_ia32_permdf256(X, 1)\n+#define __builtin_ia32_permdi256(X, M) __builtin_ia32_permdi256(X, 1)\n+#define __builtin_ia32_permti256(X, Y, M) __builtin_ia32_permti256(X, Y, 1)\n+#define __builtin_ia32_extract128i256(X, M) __builtin_ia32_extract128i256(X, 1)\n+#define __builtin_ia32_insert128i256(X, Y, M) __builtin_ia32_insert128i256(X, Y, 1)\n+#define __builtin_ia32_gathersiv2df(A, B, C, D, M) __builtin_ia32_gathersiv2df(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv4df(A, B, C, D, M) __builtin_ia32_gathersiv4df(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv2df(A, B, C, D, M) __builtin_ia32_gatherdiv2df(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4df(A, B, C, D, M) __builtin_ia32_gatherdiv4df(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv4sf(A, B, C, D, M) __builtin_ia32_gathersiv4sf(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8sf(A, B, C, D, M) __builtin_ia32_gathersiv8sf(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4sf(A, B, C, D, M) __builtin_ia32_gatherdiv4sf(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4sf256(A, B, C, D, M) \\\n+  __builtin_ia32_gatherdiv4sf256(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv2di(A, B, C, D, M) __builtin_ia32_gathersiv2di(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv4di(A, B, C, D, M) __builtin_ia32_gathersiv4di(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv2di(A, B, C, D, M) __builtin_ia32_gatherdiv2di(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4di(A, B, C, D, M) __builtin_ia32_gatherdiv4di(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv4si(A, B, C, D, M) __builtin_ia32_gathersiv4si(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8si(A, B, C, D, M) __builtin_ia32_gathersiv8si(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4si(A, B, C, D, M) __builtin_ia32_gatherdiv4si(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv4si256(A, B, C, D, M) \\\n+  __builtin_ia32_gatherdiv4si256(A, B, C, D, 1)\n \n /* wmmintrin.h */\n #define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)"}, {"sha": "17bc64e4deb375fecb6345a2cdc170fe1c811410", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "22c9b39da45862c87553962249ecdc1b5983c4ce", "filename": "gcc/testsuite/gcc.target/i386/avx2-check.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,44 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m256-check.h\"\n+#include \"avx-os-support.h\"\n+\n+static void avx2_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx2_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX2 test only if host has AVX2 support.  */\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx_os_support ()) && ((ebx & bit_AVX2) == bit_AVX2))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "8adddcfdc4639f2aa5bfbb7dca678805c0bde397", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_epi32 (base, idx, 1);\n+}"}, {"sha": "7d3f3474d86ef57f196d7e0cfd39a18d4b8c66de", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherd (int *s1, int *s2, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128i_d res;\n+  int s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_i32gather_epi32 (s1, idx.x, 2);\n+\n+  compute_i32gatherd (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "f84c4a56463ca6b6cc0a636c4965f03cc34052f0", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i32gather_epi32 (x, base, idx, x, 1);\n+}"}, {"sha": "2cc3a792ea27c9013f8b0b08b25f979026bb73ef", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd-4.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherd (int *src, int *s1, int *s2, int *mask, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((mask[i] >> 31) & 1)\n+      r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128i_d res, src, mask;\n+  int s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((int *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i32gather_epi32 (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherd (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "a4bbb1d38783bcaba6da149825db9c9e2a2d4ec8", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i32gather_epi32 (base, idx, 1);\n+}"}, {"sha": "e5bcbee1fcf822381592986cfe6ad92b6989408e", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherd256 (int *s1, int *s2, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; ++i)\n+    r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union256i_d res;\n+  int s1[8], res_ref[8] = { 0 };\n+\n+  for (i = 0; i < 8; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_i32gather_epi32 (s1, idx.x, 2);\n+\n+  compute_i32gatherd256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "36df1f80cc123b9595a525b4fca66ff29c755497", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256i x;\n+int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i32gather_epi32 (x, base, idx, x, 1);\n+}"}, {"sha": "a80530912d045e368ad64c271f39825f9641f394", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherd256-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherd256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherd256 (int *src,\n+\t\t       int *s1, int *s2, int *mask, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; ++i)\n+    if ((mask[i] >> 31) & 1)\n+      r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union256i_d res, src, mask;\n+  int s1[8], res_ref[8] = { 0 };\n+\n+  for (i = 0; i < 8; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i32gather_epi32 (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "e9a3a0ecedd12ec0ab5f127f45c2028869f8b732", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_pd (base, idx, 1);\n+}"}, {"sha": "475f623ec88ae2af6ce62c7ec799ef241ab045f4", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd (double *s1, int *s2, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128d res;\n+  double s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_i32gather_pd (s1, idx.x, 2);\n+\n+  compute_i32gatherpd (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "08d0de29b96064d8ee8513ecbccbe4540dde9177", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i32gather_pd (x, base, idx, x, 1);\n+}"}, {"sha": "12c533f9d32f93e14b464775b32826315ff89065", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd (double *src,\n+\t\t     double *s1, int *s2, double *mask, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((((long long *) mask)[i] >> 63) & 1)\n+      r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128d res, src, mask;\n+  double s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i32gather_pd (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherpd (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "82edc5c5526b9e557caafc0788d759f82b31fb87", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i32gather_pd (base, idx, 1);\n+}"}, {"sha": "a45801ba94c7f141821db797a14db06698681723", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd256 (double *s1, int *s2, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union256d res;\n+  double s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_i32gather_pd (s1, idx.x, 2);\n+\n+  compute_i32gatherpd256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "bc22fae9f5aa41d6e47c2b4284637d523b02178f", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i32gather_pd (x, base, idx, x, 1);\n+}"}, {"sha": "f24acbd7fe15c030b1b09913bf10b7aedb976a6e", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd256-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd256 (double *src,\n+\t\t\tdouble *s1,\n+\t\t\tint *s2, double *mask, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((((long long *) mask)[i] >> 63) & 1)\n+      r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union256d res, src, mask;\n+  double s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order, divide by 2\n+         to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i32gather_pd (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "5559cb198d23cfd10b80018f2016cfa79b067582", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_ps (base, idx, 1);\n+}"}, {"sha": "1174ddad5166f86cee457af29de5d61c829cef08", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherps (float *s1, int *s2, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128 res;\n+  float s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_i32gather_ps (s1, idx.x, 2);\n+\n+  compute_i32gatherps (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "0423d2c23456a5d1ffe82b2efcfd0b8540729e92", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i32gather_ps (x, base, idx, x, 1);\n+}"}, {"sha": "94b9213d62e058773ee0b2e95181d0d2ece23a47", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherps (float *src,\n+\t\t     float *s1, int *s2, float *mask, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((((int *) mask)[i] >> 31) & 1)\n+      r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_d idx;\n+  union128 res, src, mask;\n+  float s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((int *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i32gather_ps (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherps (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "ce77a398699d794bcf5bc501b6aadf2917bdabb0", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256 x;\n+float *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i32gather_ps (base, idx, 1);\n+}"}, {"sha": "654c6f676e3d163bf7ed6316e88fe6a5d7356249", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherps256 (float *s1, int *s2, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; ++i)\n+    r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union256 res;\n+  float s1[8], res_ref[8] = { 0 };\n+\n+  for (i = 0; i < 8; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_i32gather_ps (s1, idx.x, 2);\n+\n+  compute_i32gatherps256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "63879e09f931e4d9b17583d2e68529ff7c135138", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherdps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256 x;\n+float *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i32gather_ps (x, base, idx, x, 1);\n+}"}, {"sha": "07c2abacbf24cca9f5ed23fd29d49ee47ebee46a", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherps256-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherps256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherps256 (float *src,\n+\t\t\tfloat *s1, int *s2, float *mask, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; ++i)\n+    if ((((int *) mask)[i] >> 31) & 1)\n+      r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_d idx;\n+  union256 res, src, mask;\n+  float s1[8], res_ref[8] = { 0 };\n+\n+  for (i = 0; i < 8; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((int *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i32gather_ps (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherps256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "a31e07c3adaea6d0120c63f0082034a0b50a6864", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_epi64 (base, idx, 1);\n+}"}, {"sha": "54838e71024758aa2f1b448d221b6ed8eed58a50", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd (long long *s1, int *s2, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_d idx;\n+  union128i_q res;\n+  long long s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_i32gather_epi64 ((long long int *) s1, idx.x, 2);\n+\n+  compute_i32gatherpd (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "b3cd6099544494a9db408e52572f3736f0b6377c", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i32gather_epi64 (x, base, idx, x, 1);\n+}"}, {"sha": "4770d0adaee6a654eee9802ce4ef1503cd808f10", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq-4.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd (long long *src,\n+\t\t     long long *s1,\n+\t\t     int *s2, long long *mask, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((mask[i] >> 63) & 1)\n+      r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_d idx;\n+  union128i_q res, src, mask;\n+  long long s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x =\n+    _mm_mask_i32gather_epi64 (src.x, (long long int *) s1, idx.x, mask.x, 2);\n+\n+  compute_i32gatherpd (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "140036f921f33457a4236e624b807dc714c241a7", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i32gather_epi64 (base, idx, 1);\n+}"}, {"sha": "85e576797fb9c01bed0979a127b10f660c170dcf", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd256 (long long *s1, int *s2, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_d idx;\n+  union256i_q res;\n+  long long s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_i32gather_epi64 ((long long int *) s1, idx.x, 2);\n+\n+  compute_i32gatherpd256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "345917cc2ea57d6bf9615c19c5a0964044f3a11d", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherdq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i32gather_epi64 (x, base, idx, x, 1);\n+}"}, {"sha": "3eab9be5c96c9843fed615d7ed69c47bbd2a977b", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq256-4.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i32gatherpd256 (long long *src,\n+\t\t\tlong long *s1,\n+\t\t\tint *s2, long long *mask, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((mask[i] >> 63) & 1)\n+      r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_d idx;\n+  union256i_q res, src, mask;\n+  long long s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order, divide by 2\n+         to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i32gather_epi64 (src.x,\n+\t\t\t\t       (long long int *) s1,\n+\t\t\t\t       idx.x, mask.x, 2);\n+\n+  compute_i32gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "333a7f848812eec53d07a5ba28b221cf5086c1d3", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i64gather_epi32 (base, idx, 1);\n+}"}, {"sha": "f475a4a734087a04390c23a63b7521e8d92ccde7", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps (int *s1, long long *s2, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128i_d res;\n+  int s1[2], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (8 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_i64gather_epi32 (s1, idx.x, 2);\n+\n+  compute_i64gatherps (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "2c04422331f7e59737d23099571e50f5aaaaffae", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i64gather_epi32 (x, base, idx, x, 1);\n+}"}, {"sha": "77c8747f071dc3ed1d43eb64679c9e97424eef77", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps (int *src,\n+\t\t     int *s1, long long *s2, int *mask, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((mask[i] >> 31) & 1)\n+      r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128i_d res, src, mask;\n+  int s1[2], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (8 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i64gather_epi32 (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherps (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "d338d1bcd86ef9063713d709543357b4253276bb", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i64gather_epi32 (base, idx, 1);\n+}"}, {"sha": "0f88b20b2bb946adf1f7a023cb15445fab90199f", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps256 (int *s1, long long *s2, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union128i_d res;\n+  int s1[8], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_i64gather_epi32 (s1, idx.x, 2);\n+\n+  compute_i64gatherps256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "50fbbf2eb74f7f5d95c7dfcf74a0c351a27a3c3c", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i64gather_epi32 (x, base, idx, x, 1);\n+}"}, {"sha": "6c4bdd60ab139edf17da82e57650f8b6837f5b5c", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherd256-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherd256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps256 (int *src,\n+\t\t\tint *s1, long long *s2, int *mask, int scale, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((mask[i] >> 31) & 1)\n+      r[i] = *(int *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union128i_d res, src, mask;\n+  int s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1973 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i64gather_epi32 (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherps256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128i_d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "a8cc464f42d1fe71ae79fe9b07b9da977743790d", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i64gather_pd (base, idx, 1);\n+}"}, {"sha": "5a119712e81d8e39967955fecb363369464597df", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd (double *s1, long long *s2, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128d res;\n+  double s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order, divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_i64gather_pd (s1, idx.x, 2);\n+\n+  compute_i64gatherpd (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "8cf10f3e7e7bd196ff5e97d1b1069925ffebeaf2", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i64gather_pd (x, base, idx, x, 1);\n+}"}, {"sha": "61cb1f8d0cf60c1084fb6c83134873aa14265392", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd (double *src,\n+\t\t     double *s1,\n+\t\t     long long int *s2, double *mask, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((((long long *) mask)[i] >> 63) & 1)\n+      r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128d res, src, mask;\n+  double s1[2], res_ref[2] = { 0, 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i64gather_pd (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherpd (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "39e2370b2ff5dbc364ba4c02e65a0a06d5ab8ef5", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d x;\n+double *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i64gather_pd (base, idx, 1);\n+}"}, {"sha": "99e192d7548cbe743ffd3eefaadcc68049677d37", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd256 (double *s1, long long int *s2, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union256d res;\n+  double s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_i64gather_pd (s1, idx.x, 2);\n+\n+  compute_i64gatherpd256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "83b31544c7bec8cdabfb1d598fff5da2a2650d0b", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d x;\n+double *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i64gather_pd (x, base, idx, x, 1);\n+}"}, {"sha": "09a5f8a14e0946b930c07427c0c713c90a74fafa", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd256-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd256 (double *src,\n+\t\t\tdouble *s1,\n+\t\t\tlong long int *s2, double *mask, int scale, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((((long long *) mask)[i] >> 63) & 1)\n+      r[i] = *(double *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union256d res, src, mask;\n+  double s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i64gather_pd (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256d (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "2dccde6462d3cf95445d2b47d8788d41df30a8f1", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i64gather_ps (base, idx, 1);\n+}"}, {"sha": "527e4e81243bc949c4f7df874fc01fa9de57424a", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps (float *s1, long long *s2, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128 res;\n+  float s1[2], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (8 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_i64gather_ps (s1, idx.x, 2);\n+\n+  compute_i64gatherps (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "f69cc2636bf3f7b295a94fcbd028108c3207003f", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i64gather_ps (x, base, idx, x, 1);\n+}"}, {"sha": "ada4e49ff44a00c9030d2692e9d27a3c1e52d184", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps (float *src,\n+\t\t     float *s1,\n+\t\t     long long *s2, float *mask, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((((int *) mask)[i] >> 31) & 1)\n+      r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union128i_q idx;\n+  union128 res, src, mask;\n+  float s1[2], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((int *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (8 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm_mask_i64gather_ps (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherps (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "59dd47d91138b112542c3bd59259fbfc0d0b399b", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i64gather_ps (base, idx, 1);\n+}"}, {"sha": "d2fe7c1fb54f51560f154ec4f2250cc802a35e2a", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps256 (float *s1, long long *s2, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union128 res;\n+  float s1[8], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_i64gather_ps (s1, idx.x, 2);\n+\n+  compute_i64gatherps256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "4ccc10a2b95b7fd14e4c3592af4753431025078a", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vgatherqps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+float *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i64gather_ps (x, base, idx, x, 1);\n+}"}, {"sha": "8185cd839c9950266c4d9ce856fb23564610130f", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherps256-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherps256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherps256 (float *src,\n+\t\t\tfloat *s1,\n+\t\t\tlong long *s2, float *mask, int scale, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((((int *) mask)[i] >> 31) & 1)\n+      r[i] = *(float *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q idx;\n+  union128 res, src, mask;\n+  float s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((int *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 4) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i64gather_ps (src.x, s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherps256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128 (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "7db1d924cf8bbde33fac7fe03c28c01ed07ecf09", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i64gather_epi64 (base, idx, 1);\n+}"}, {"sha": "a2d7a99686fe06d9a70a4c5a033646afbe539365", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd (long long *s1, long long *s2, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 2; ++i)\n+    r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_q idx;\n+  union128i_q res;\n+  long long s1[2], res_ref[2] = { 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm_i64gather_epi64 ((long long int *) s1, idx.x, 2);\n+\n+  compute_i64gatherpd (s1, idx.a, 2, res_ref);\n+\n+  if (check_union128i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "16e4fb8ce0e0efd23ff726908da1e78ff5c7a604", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_mask_i64gather_epi64 (x, base, idx, x, 1);\n+}"}, {"sha": "cbc8e31f1ab9a0cae3edeaeebbd397bfb85e15c1", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq-4.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherpd (long long *src,\n+\t\t     long long *s1,\n+\t\t     long long *s2, long long *mask, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 2; ++i)\n+    if ((mask[i] >> 63) & 1)\n+      r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union128i_q idx;\n+  union128i_q res, src, mask;\n+  long long s1[2], res_ref[2] = { 0, 0 };\n+\n+  for (i = 0; i < 2; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      mask.a[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x =\n+    _mm_mask_i64gather_epi64 (src.x, (long long int *) s1, idx.x, mask.x, 2);\n+\n+  compute_i64gatherpd (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union128i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "a9b09210070c799920670f7fc5ac1f10e8afe1a0", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq256-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+long long int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_i64gather_epi64 (base, idx, 1);\n+}"}, {"sha": "3ac3e2e013f5382b92c59e58d2db46ea78763072", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq256-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherq256 (long long *s1, long long *s2, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 4; ++i)\n+    r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union256i_q idx;\n+  union256i_q res;\n+  long long s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (32 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_i64gather_epi64 ((long long int *) s1, idx.x, 2);\n+\n+  compute_i64gatherq256 (s1, idx.a, 2, res_ref);\n+\n+  if (check_union256i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "fd96648fab165744a26eca8d9042114e85d02f9c", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq256-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-3.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpgatherqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256i x;\n+long long int *base;\n+__m256i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mask_i64gather_epi64 (x, base, idx, x, 1);\n+}"}, {"sha": "355c8c2b0624b262eabd072a26d7c34a15b07411", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq256-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_i64gatherq256 (long long *src,\n+\t\t       long long *s1,\n+\t\t       long long *s2,\n+\t\t       long long *mask, int scale, long long *r)\n+{\n+  long long i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if ((mask[i] >> 63) & 1)\n+      r[i] = *(long long *) (((unsigned char *) s1) + s2[i] * scale);\n+    else\n+      r[i] = src[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  long long i;\n+  union256i_q idx;\n+  union256i_q res, src, mask;\n+  long long s1[4], res_ref[4] = { 0 };\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      /* Set some stuff */\n+      s1[i] = 1983 * (i + 1) * (i + 2);\n+\n+      /* Set src as something different from s1 */\n+      src.a[i] = -s1[i];\n+\n+      /* Mask out evens */\n+      ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n+\n+      /* About to gather in reverse order,\n+         divide by 2 to demonstrate scale */\n+      idx.a[i] = (16 - (i + 1) * 8) >> 1;\n+    }\n+\n+  res.x = _mm256_mask_i64gather_epi64 (src.x,\n+\t\t\t\t       (long long int *) s1,\n+\t\t\t\t       idx.x, mask.x, 2);\n+\n+  compute_i64gatherq256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+\n+  if (check_union256i_q (res, res_ref) != 0)\n+    abort ();\n+}"}, {"sha": "740e14163a8fbcf13ca9dcdfc3b57cfaa5a15e5f", "filename": "gcc/testsuite/gcc.target/i386/avx2-mpsadbw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler \"mpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  /* imm = 13 is arbitrary here */\n+  x = _mm256_mpsadbw_epu8 (x, x, 13);\n+}"}, {"sha": "18118e44202697d4b47621ea3ccfc7813069daf9", "filename": "gcc/testsuite/gcc.target/i386/avx2-mpsadbw-2.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mpsadbw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define msk0 0xC0\n+#define msk1 0x01\n+#define msk2 0xF2\n+#define msk3 0x03\n+#define msk4 0x84\n+#define msk5 0x05\n+#define msk6 0xE6\n+#define msk7 0x67\n+\n+\n+static void\n+compute_mpsadbw (int *i1, int *i2, int mask, int *r)\n+{\n+  unsigned char s[4];\n+  int i, j;\n+  int offs1, offs2;\n+  unsigned char *v1 = (char *) i1;\n+  unsigned char *v2 = (char *) i2;\n+  unsigned short *ret = (unsigned short *) r;\n+\n+  memset (ret, 0, 32);\n+\n+  /* Lower part */\n+  offs2 = 4 * (mask & 3);\n+  for (i = 0; i < 4; i++)\n+    s[i] = v2[offs2 + i];\n+\n+  offs1 = 4 * ((mask & 4) >> 2);\n+  for (j = 0; j < 8; j++)\n+    for (i = 0; i < 4; i++)\n+      ret[j] += abs (v1[offs1 + j + i] - s[i]);\n+\n+  /* Higher part */\n+  offs2 = 4 * ((mask >> 3) & 3) + 16;\n+  for (i = 0; i < 4; i++)\n+    s[i] = v2[offs2 + i];\n+\n+  offs1 = 4 * ((mask & 0x20) >> 5) + 16;\n+  for (j = 0; j < 8; j++)\n+    for (i = 0; i < 4; i++)\n+      ret[j + 8] += abs (v1[offs1 + j + i] - s[i]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d val1, val2, val3[8], res[8];\n+  int tmp[8];\n+  unsigned char masks[8];\n+  int i, j;\n+\n+  val1.a[0] = 0x35251505;\n+  val1.a[1] = 0x75655545;\n+  val1.a[2] = 0xB5A59585;\n+  val1.a[3] = 0xF5E5D5C5;\n+\n+  val1.a[4] = 0x35251505;\n+  val1.a[5] = 0x75655545;\n+  val1.a[6] = 0xB5A59585;\n+  val1.a[7] = 0xF5E5D5C5;\n+\n+  val2.a[0] = 0x31211101;\n+  val2.a[1] = 0x71615141;\n+  val2.a[2] = 0xB1A19181;\n+  val2.a[3] = 0xF1E1D1C1;\n+\n+  val2.a[4] = 0x31211101;\n+  val2.a[5] = 0x71615141;\n+  val2.a[6] = 0xB1A19181;\n+  val2.a[7] = 0xF1E1D1C1;\n+\n+  for (i = 0; i < 8; i++)\n+    switch (i % 3)\n+      {\n+      case 1:\n+\tval3[i].a[0] = 0xF1E1D1C1;\n+\tval3[i].a[1] = 0xB1A19181;\n+\tval3[i].a[2] = 0x71615141;\n+\tval3[i].a[3] = 0x31211101;\n+\tbreak;\n+      default:\n+\tval3[i].x = val2.x;\n+\tbreak;\n+      }\n+\n+  /* Check mpsadbw imm8, ymm, ymm.  */\n+  res[0].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk0);\n+  res[1].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk1);\n+  res[2].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk2);\n+  res[3].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk3);\n+  res[4].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk4);\n+  res[5].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk5);\n+  res[6].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk6);\n+  res[7].x = _mm256_mpsadbw_epu8 (val1.x, val2.x, msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      compute_mpsadbw (val1.a, val2.a, masks[i], tmp);\n+      if (check_union256i_d (res[i], tmp))\n+\tabort ();\n+    }\n+\n+  /* Check mpsadbw imm8, m256, ymm.  */\n+  for (i = 0; i < 8; i++)\n+    {\n+      res[i].x = _mm256_mpsadbw_epu8 (val1.x, val3[i].x, msk4);\n+      masks[i] = msk4;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      compute_mpsadbw (val1.a, val3[i].a, masks[i], tmp);\n+      if (check_union256i_d (res[i], tmp))\n+\tabort ();\n+    }\n+}"}, {"sha": "80964e39d2691f58fe43eda3285f492c14bf6cbe", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsd_pd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vbroadcastsd\\[ \\\\t\\]+\\[^\\n\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128d x;\n+__m256d y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastsd_pd (x);\n+}"}, {"sha": "ee323f5af379cdee7602d2b2a1cfcd1924642efe", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsd_pd-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsd_pd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union128d s1;\n+  union256d res;\n+  double res_ref[4];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      s1.a[0] = i * 3.14;\n+\n+      res.x = _mm256_broadcastsd_pd (s1.x);\n+\n+      for (j = 0; j < 4; j++)\n+\tmemcpy (res_ref + j, s1.a, 8);\n+\n+      fail += check_union256d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+\n+}"}, {"sha": "c0592d50867b57b3a9eb2a19d3ba1d810389917b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsi128-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vbroadcasti128\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m128i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastsi128_si256 (y);\n+}"}, {"sha": "6d3af38ff24f5456d5fe8ffdb51dfe0e22d969c0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsi128-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union128i_q s1;\n+  union256i_q res;\n+  long long int res_ref[4];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 2; j++)\n+\ts1.a[j] = j * i;\n+\n+      res.x = _mm_broadcastsi128_si256 (s1.x);\n+\n+      memcpy (res_ref, s1.a, 16);\n+      memcpy (res_ref + 2, s1.a, 16);\n+\n+      fail += check_union256i_q (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+\n+}"}, {"sha": "d9d47e2a9aea0b62c063c4b8340e519a3bd14b17", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastss_ps-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastss_ps (x);\n+}"}, {"sha": "1637e703bc77f04fc4ef0666db929972a1f83b7a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastss_ps-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union128 s1, res;\n+  float res_ref[4];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      s1.a[0] = i * 3.14;\n+\n+      res.x = _mm_broadcastss_ps (s1.x);\n+\n+      for (j = 0; j < 4; j++)\n+\tmemcpy (res_ref + j, s1.a, 4);\n+\n+      fail += check_union128 (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+\n+}"}, {"sha": "dfac3916b082af50d4f59c38c88138125634f512", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastss_ps256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128 x;\n+__m256 y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastss_ps (x);\n+}"}, {"sha": "9f90e2e8527688102d34306dfdaa5e1d23bf79f4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastss_ps256-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastss_ps256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union128 s1;\n+  union256 res;\n+  float res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      s1.a[0] = i * 3.14;\n+\n+      res.x = _mm256_broadcastss_ps (s1.x);\n+\n+      for (j = 0; j < 8; j++)\n+\tmemcpy (res_ref + j, s1.a, 4);\n+\n+      fail += check_union256 (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+\n+}"}, {"sha": "a032e3c9b3c9a7f724f02ecff71fe88da4d0220d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vextracti128-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vextracti128\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m128i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_extracti128_si256 (x, 1);\n+}"}, {"sha": "7d3c561a14f4801560963bd67a18ca6fe2895449", "filename": "gcc/testsuite/gcc.target/i386/avx2-vextracti128-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vextracti128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q s1;\n+  union128i_q res;\n+  long long int res_ref[2];\n+  int j;\n+\n+  for (j = 0; j < 4; j++)\n+    s1.a[j] = j * j;\n+\n+  res.x = _mm256_extracti128_si256 (s1.x, 0);\n+\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1.a, 16);\n+\n+  if (check_union128i_q (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm256_extracti128_si256 (s1.x, 1);\n+\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1.a + 2, 16);\n+\n+  if (check_union128i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "2d0f7c51afc776e732224557d9fcf2b138ad7bcd", "filename": "gcc/testsuite/gcc.target/i386/avx2-vinserti128-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vinserti128\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m128i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_inserti128_si256 (x, y, 1);\n+}"}, {"sha": "f6361cd47276cf6cd53da66eaac3d87158c5463c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vinserti128-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vinserti128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q s1, res;\n+  union128i_q s2;\n+  long long int res_ref[4];\n+  int j;\n+\n+  for (j = 0; j < 4; j++)\n+    s1.a[j] = j * j;\n+\n+  for (j = 0; j < 2; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res.x = _mm256_inserti128_si256 (s1.x, s2.x, 0);\n+\n+  memcpy (res_ref, s1.a, 32);\n+  memcpy (res_ref, s2.a, 16);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm256_inserti128_si256 (s1.x, s2.x, 1);\n+\n+  memcpy (res_ref, s1.a, 32);\n+  memcpy (res_ref + 2, s2.a, 16);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "6637d0c8001a2e7ee39c561790932d3565198620", "filename": "gcc/testsuite/gcc.target/i386/avx2-vmovmskb-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovmskb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovmskb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovmskb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vmovmskb\" } } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b s;\n+  int res, res_ref;\n+  int i, e = 0;\n+\n+  s.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t 15, 98, 25, 98, 7, 1, 2, 3, 4, 10, 20, 30, 90,\n+\t\t\t -80, -40, -100, -15, 98, 25, 98, 7);\n+\n+  res = _mm256_movemask_epi8 (s.x);\n+\n+  for (i = 0; i < 32; i++)\n+    if (s.a[i] & (1 << 7))\n+      res_ref = res_ref | (1 << i);\n+\n+  if (res != res_ref)\n+    abort ();\n+}"}, {"sha": "4c44f082d655a8794bb8bbd31c5d2bd32f7e5df0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vmovntdqa-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vmovntdqa\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m256i *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_stream_load_si256 (y);\n+}"}, {"sha": "f1eda70bd739ba75fa3ad0ebdf622d09b0be4ced", "filename": "gcc/testsuite/gcc.target/i386/avx2-vmovntdqa-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vmovntdqa-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q s1, res;\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ts1.a[j] = j * i;\n+\n+      res.x = _mm256_stream_load_si256 (&s1.x);\n+\n+      fail += check_union256i_q (res, s1.a);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "0607a886cc531392dd2bd5c7cf16bd9b67d8a2d3", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsb256-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_abs_epi8 (x);\n+}"}, {"sha": "05db8a4072362d0ceaaf0150036aec67a105e8ad", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsb256-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"ssse3-vals.h\"\n+#include \"avx2-check.h\"\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_pabs256 (int *i1, char *r)\n+{\n+  char *b1 = (char *) i1;\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    if (b1[i] < 0)\n+      r[i] = -b1[i];\n+    else\n+      r[i] = b1[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  char ck[32];\n+  int fail = 0;\n+\n+  union256i_b s, d;\n+\n+  for (i = 0; i < 256; ++i)\n+    {\n+      /* Recompute the results for 256-bits */\n+      compute_pabs256 (&vals[i], ck);\n+\n+      s.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+\n+      /* Run the 256-bit tests */\n+      d.x = _mm256_abs_epi8 (s.x);\n+\n+      fail += check_union256i_b (d, ck);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "396077ff1287e79dd24749feb94c32a6c21c8640", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsd256-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpabsd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_abs_epi32 (x);\n+}"}, {"sha": "4c88024b58acd729e2e44e2bbfb27e3ed09dfae9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsd256-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"ssse3-vals.h\"\n+#include \"avx2-check.h\"\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_pabs256 (int *i1, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n+    else\n+      r[i] = i1[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  int ck[8];\n+  int fail = 0;\n+\n+  union256i_d s, d;\n+\n+  for (i = 0; i < 256; ++i)\n+    {\n+      /* Recompute the results for 256-bits */\n+      compute_pabs256 (&vals[i], ck);\n+\n+      s.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+\n+      /* Run the 256-bit tests */\n+      d.x = _mm256_abs_epi32 (s.x);\n+\n+      fail += check_union256i_d (d, ck);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2dc7692ce10a1a0bf9019401a8904f4e4f463975", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsw256-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_abs_epi16 (x);\n+}"}, {"sha": "fa4efd2984bfdaf9bf61dfc078a77df0d9090814", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsw256-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"ssse3-vals.h\"\n+#include \"avx2-check.h\"\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_pabs256 (int *i1, short *r)\n+{\n+  short *b1 = (short *) i1;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (b1[i] < 0)\n+      r[i] = -b1[i];\n+    else\n+      r[i] = b1[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  short ck[16];\n+  int fail = 0;\n+\n+  union256i_w s, d;\n+\n+  for (i = 0; i < 256; ++i)\n+    {\n+      /* Using only first 2 bytes of int */\n+      /* Recompute the results for 256-bits */\n+      compute_pabs256 (&vals[i], ck);\n+\n+      s.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+\n+      /* Run the 256-bit tests */\n+      d.x = _mm256_abs_epi16 (s.x);\n+\n+      fail += check_union256i_w (d, ck);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6d5667a64471517d1909d75d6f49a43733edb945", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackssdw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_packs_epi32 (x, x);\n+}"}, {"sha": "16f0d23f61554747d9fe65c6e3e7cba12aa38872", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackssdw-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackssdw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static short\n+int_to_short (int iVal)\n+{\n+  short sVal;\n+\n+  if (iVal < -32768)\n+    sVal = -32768;\n+  else if (iVal > 32767)\n+    sVal = 32767;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, s2;\n+  union256i_w u;\n+  short e[16];\n+  int i;\n+\n+  s1.x = _mm256_set_epi32 (1, 2, 3, 4, 65000, 20, 30, 90);\n+\n+  s2.x = _mm256_set_epi32 (88, 44, 33, 22, 11, 98, 76, -65000);\n+\n+  u.x = _mm256_packs_epi32 (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      e[i] = int_to_short (s1.a[i]);\n+      e[i + 4] = int_to_short (s2.a[i]);\n+      e[i + 8] = int_to_short (s1.a[i + 4]);\n+      e[i + 12] = int_to_short (s2.a[i + 4]);\n+    }\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "00faf844ad7ddfdee236161fc3f288a10f239f9b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpacksswb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_packs_epi16 (x, x);\n+}"}, {"sha": "8b2a1c111842b552d7ac691d48275ad59e2cfb74", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpacksswb-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpacksswb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static char\n+short_to_byte (short iVal)\n+{\n+  char sVal;\n+\n+  if (iVal < -128)\n+    sVal = -128;\n+  else if (iVal > 127)\n+    sVal = 127;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w s1, s2;\n+  union256i_b u;\n+  char e[32];\n+  int i;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 6500, 20, 30, 90,\n+\t\t\t   88, 44, 33, 22, 11, 98, 78, -1000);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 22, 11, 98, 76, -650,\n+\t\t\t   1, 2, 3, 4, 6500, 20, 30, 90);\n+\n+  u.x = _mm256_packs_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      e[i] = short_to_byte (s1.a[i]);\n+      e[i + 8] = short_to_byte (s2.a[i]);\n+      e[i + 16] = short_to_byte (s1.a[i + 8]);\n+      e[i + 24] = short_to_byte (s2.a[i + 8]);\n+    }\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "1f0a7ff9de4ffbfb27548a97d2d91f737e5ad3e2", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackusdw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_packus_epi32 (x, x);\n+}"}, {"sha": "afc102610f3a2e6fbb287f8fa35a32c5bd104b88", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackusdw-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackusdw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static unsigned short\n+int_to_ushort (int iVal)\n+{\n+  unsigned short sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > 65536)\n+    sVal = 65535;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, s2;\n+  union256i_w u;\n+  unsigned short e[16];\n+  int i;\n+\n+  s1.x = _mm256_set_epi32 (1, 2, 3, 4, -65000, 20, 30, 90);\n+\n+  s2.x = _mm256_set_epi32 (88, 44, 33, 22, 11, 98, 76, 120000);\n+\n+  u.x = _mm256_packus_epi32 (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      e[i] = int_to_ushort (s1.a[i]);\n+      e[i + 4] = int_to_ushort (s2.a[i]);\n+      e[i + 8] = int_to_ushort (s1.a[i + 4]);\n+      e[i + 12] = int_to_ushort (s2.a[i + 4]);\n+    }\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "7b30a66667bdc80fcf9e9b9be6f5a33d20b5033c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackuswb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_packus_epi16 (x, x);\n+}"}, {"sha": "abeee3e6d0afb3a6ff8a84bbce5a3630f81dea01", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpackuswb-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpackuswb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static unsigned char\n+short_to_ubyte (short iVal)\n+{\n+  unsigned char sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > 255)\n+    sVal = 255;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w s1, s2;\n+  union256i_b u;\n+  char e[32];\n+  int i;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 6500, 20, 30, 90,\n+\t\t\t   88, 44, 33, 22, 11, 98, 78, -1000);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 22, 11, 98, 76, -650,\n+\t\t\t   1, 2, 3, 4, 6500, 20, 30, 90);\n+\n+  u.x = _mm256_packus_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      e[i] = short_to_ubyte (s1.a[i]);\n+      e[i + 8] = short_to_ubyte (s2.a[i]);\n+      e[i + 16] = short_to_ubyte (s1.a[i + 8]);\n+      e[i + 24] = short_to_ubyte (s2.a[i + 8]);\n+    }\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "b6ceef16f87888f7ac3f93c1f95ee7c32f674bff", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_add_epi8 (x, x);\n+}"}, {"sha": "8abeb50c02d41f9c4655483ad134a21e081a820f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddb-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  char e[32];\n+  unsigned i;\n+\n+  s1.x = _mm256_set_epi8 (10, 74, 50, 4, 6, 99, 1, 4, 87, 83, 84,\n+\t\t\t  29, 81, 79, 1, 3, 1, 5, 2, 47, 20, 2, 72,\n+\t\t\t  92, 9, 4, 23, 17, 99, 43, 72, 17);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 33, 20, 56, 99, 2, 90, 38, 4, 200,\n+\t\t\t  17, 3, 39, 2, 37, 27, 95, 17, 74, 72, 43,\n+\t\t\t  27, 112, 71, 50, 32, 72, 84, 17, 27, 96);\n+\n+  u.x = _mm256_add_epi8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "14142ec0ab5e82570b50c51c260054b76205ef4c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_add_epi32 (x, x);\n+}"}, {"sha": "c3b1961965c342be00886a1349a1e809e2258389", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddd-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d u, s1, s2;\n+  int e[8];\n+  unsigned i;\n+\n+  s1.x = _mm256_set_epi32 (100, 74, 50000, 4, 6999, 39999, 1000, 4);\n+  s2.x = _mm256_set_epi32 (88, 44, 33, 220, 4556, 2999, 2, 9000000);\n+\n+  u.x = _mm256_add_epi32 (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "9fcf9aaad06f6922fcba79e7cc038fe35b2ed0c9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_add_epi64 (x, x);\n+}"}, {"sha": "03b011f3f550d211bf0eb61a8ec5ad72a9dc819b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddq-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q u, s1, s2;\n+  long long e[4];\n+  unsigned i;\n+\n+  s1.x = _mm256_set_epi64x (100, 74, 50000, 4);\n+  s2.x = _mm256_set_epi64x (88, 44, 33, 220);\n+\n+  u.x = _mm256_add_epi64 (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256i_q (u, e))\n+    abort ();\n+}"}, {"sha": "77978d93623fdf55f0f281de7841f8b1a3f5bb68", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddsb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_adds_epi8 (x, x);\n+}"}, {"sha": "d07a6a7814ee7597affd679d9f1075c79b23021a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddsb-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  char e[32];\n+  int i, tmp;\n+\n+  s1.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t  -15, 98, 25, 98, 7, 88, 44, 33, 22, 11, 98,\n+\t\t\t  76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t  -39, 6, 3, 4, 5, 119, 1, 2, 3, 4, 10, 20,\n+\t\t\t  30, 90, -80, -40, -100, -15, 98, 25, 98, 7);\n+\n+  u.x = _mm256_adds_epi8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      tmp = s1.a[i] + s2.a[i];\n+\n+      if (tmp > 127)\n+\ttmp = 127;\n+      if (tmp < -128)\n+\ttmp = -128;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "128f5309f4d0e6afeae3425040ef2d1be2666fb7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_adds_epi16 (x, x);\n+}"}, {"sha": "19bbe0a77c4148ba804984f709edb024062c5adf", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddsw-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  short e[16];\n+  int i, tmp;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 10, 20, 30, 90, -80,\n+\t\t\t   -40, -100, -15, 98, 25, 98, 7);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 22, 11, 98, 76, -100,\n+\t\t\t   -34, -78, -39, 6, 3, 4, 5, 119);\n+\n+  u.x = _mm256_adds_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = s1.a[i] + s2.a[i];\n+\n+      if (tmp > 32767)\n+\ttmp = 32767;\n+      if (tmp < -32768)\n+\ttmp = -32768;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "f6cf4019c4701458393fa57aae735848dfe70637", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddusb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_adds_epu8 (x, x);\n+}"}, {"sha": "68ad4f03fe5bb34dbba647d0d23cf4f8dabb2486", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddusb-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  unsigned char e[32];\n+  unsigned i, tmp;\n+\n+  s1.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, 80, 40, 100, 15,\n+\t\t\t  98, 25, 98, 7, 88, 44, 33, 22, 11, 98, 76,\n+\t\t\t  200, 34, 78, 39, 6, 3, 4, 5, 119);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 33, 220, 11, 98, 76, 100, 34, 78, 39,\n+\t\t\t  6, 3, 4, 5, 219, 1, 2, 3, 4, 10, 20, 30, 90,\n+\t\t\t  80, 40, 100, 15, 98, 25, 98, 7);\n+\n+  u.x = _mm256_adds_epu8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      tmp = (unsigned char) s1.a[i] + (unsigned char) s2.a[i];\n+\n+      if (tmp > 255)\n+\ttmp = 255;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "a4c1dd9bd23932cdc0371f6e2b1a80fc10c012ac", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddusw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_adds_epu16 (x, x);\n+}"}, {"sha": "937b93c21ac91d1d4dddbfff2305a6d091981b6b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddusw-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddusw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  unsigned short e[32];\n+  unsigned i, tmp;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 10, 20, 30, 90,\n+\t\t\t   65531, 40, 100, 15, 98, 25, 98, 7);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 220, 11, 98, 76, 100,\n+\t\t\t   34, 78, 39, 6, 3, 4, 5, 219);\n+\n+  u.x = _mm256_adds_epu16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = (unsigned short) s1.a[i] + (unsigned short) s2.a[i];\n+\n+      if (tmp > 65535)\n+\ttmp = 65535;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "052e3a352a6c24947dc61ac1022da2ab01dbd6e3", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_add_epi16 (x, x);\n+}"}, {"sha": "f7dbf2053ac61794afc159ae0be8d8c13a6ff4eb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpaddw-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpaddw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  short e[16];\n+  unsigned i;\n+\n+  s1.x = _mm256_set_epi16 (100, 74, 50000, 4, 6999, 39999, 1000, 4,\n+\t\t\t   874, 2783, 29884, 2904, 2889, 3279, 1, 3);\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 220, 4556, 2999, 2, 9000,\n+\t\t\t   238, 194, 274, 17, 3, 5739, 2, 379);\n+\n+  u.x = _mm256_add_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "a87a207d4ea1342a231d57f85eda41bbd91c3713", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpalignr256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  /* imm = 13 is arbitrary here */\n+  x = _mm256_alignr_epi8 (x, x, 13);\n+}"}, {"sha": "5be64c0cf5d12315cf6c403ba27831f10dea1f54", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpalignr256-2.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpalignr256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"ssse3-vals.h\"\n+#include \"avx2-check.h\"\n+\n+/* Test the 256-bit form */\n+static void\n+avx2_test_palignr256 (__m256i t1, __m256i t2, unsigned int imm, __m256i * r)\n+{\n+  switch (imm)\n+    {\n+    case 0:\n+      *r = _mm256_alignr_epi8 (t1, t2, 0);\n+      break;\n+    case 1:\n+      *r = _mm256_alignr_epi8 (t1, t2, 1);\n+      break;\n+    case 2:\n+      *r = _mm256_alignr_epi8 (t1, t2, 2);\n+      break;\n+    case 3:\n+      *r = _mm256_alignr_epi8 (t1, t2, 3);\n+      break;\n+    case 4:\n+      *r = _mm256_alignr_epi8 (t1, t2, 4);\n+      break;\n+    case 5:\n+      *r = _mm256_alignr_epi8 (t1, t2, 5);\n+      break;\n+    case 6:\n+      *r = _mm256_alignr_epi8 (t1, t2, 6);\n+      break;\n+    case 7:\n+      *r = _mm256_alignr_epi8 (t1, t2, 7);\n+      break;\n+    case 8:\n+      *r = _mm256_alignr_epi8 (t1, t2, 8);\n+      break;\n+    case 9:\n+      *r = _mm256_alignr_epi8 (t1, t2, 9);\n+      break;\n+    case 10:\n+      *r = _mm256_alignr_epi8 (t1, t2, 10);\n+      break;\n+    case 11:\n+      *r = _mm256_alignr_epi8 (t1, t2, 11);\n+      break;\n+    case 12:\n+      *r = _mm256_alignr_epi8 (t1, t2, 12);\n+      break;\n+    case 13:\n+      *r = _mm256_alignr_epi8 (t1, t2, 13);\n+      break;\n+    case 14:\n+      *r = _mm256_alignr_epi8 (t1, t2, 14);\n+      break;\n+    case 15:\n+      *r = _mm256_alignr_epi8 (t1, t2, 15);\n+      break;\n+    case 16:\n+      *r = _mm256_alignr_epi8 (t1, t2, 16);\n+      break;\n+    case 17:\n+      *r = _mm256_alignr_epi8 (t1, t2, 17);\n+      break;\n+    case 18:\n+      *r = _mm256_alignr_epi8 (t1, t2, 18);\n+      break;\n+    case 19:\n+      *r = _mm256_alignr_epi8 (t1, t2, 19);\n+      break;\n+    case 20:\n+      *r = _mm256_alignr_epi8 (t1, t2, 20);\n+      break;\n+    case 21:\n+      *r = _mm256_alignr_epi8 (t1, t2, 21);\n+      break;\n+    case 22:\n+      *r = _mm256_alignr_epi8 (t1, t2, 22);\n+      break;\n+    case 23:\n+      *r = _mm256_alignr_epi8 (t1, t2, 23);\n+      break;\n+    case 24:\n+      *r = _mm256_alignr_epi8 (t1, t2, 24);\n+      break;\n+    case 25:\n+      *r = _mm256_alignr_epi8 (t1, t2, 25);\n+      break;\n+    case 26:\n+      *r = _mm256_alignr_epi8 (t1, t2, 26);\n+      break;\n+    case 27:\n+      *r = _mm256_alignr_epi8 (t1, t2, 27);\n+      break;\n+    case 28:\n+      *r = _mm256_alignr_epi8 (t1, t2, 28);\n+      break;\n+    case 29:\n+      *r = _mm256_alignr_epi8 (t1, t2, 29);\n+      break;\n+    case 30:\n+      *r = _mm256_alignr_epi8 (t1, t2, 30);\n+      break;\n+    case 31:\n+      *r = _mm256_alignr_epi8 (t1, t2, 31);\n+      break;\n+    default:\n+      *r = _mm256_alignr_epi8 (t1, t2, 32);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result_256 (int *i1, int *i2, unsigned int imm, int *r)\n+{\n+  char buf[32];\n+  char *bout = (char *) r;\n+  int i;\n+\n+  /* Fill lowers 128 bit of ymm */\n+  memcpy (&buf[0], i2, 16);\n+  memcpy (&buf[16], i1, 16);\n+\n+  for (i = 0; i < 16; i++)\n+    if (imm >= 32 || imm + i >= 32)\n+      bout[i] = 0;\n+    else\n+      bout[i] = buf[imm + i];\n+\n+  /* Fill higher 128 bit of ymm */\n+  bout += 16;\n+  memcpy (&buf[0], i2 + 4, 16);\n+  memcpy (&buf[16], i1 + 4, 16);\n+\n+  for (i = 0; i < 16; i++)\n+    if (imm >= 32 || imm + i >= 32)\n+      bout[i] = 0;\n+    else\n+      bout[i] = buf[imm + i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  int ck[8];\n+  int r[8];\n+  unsigned int imm;\n+  int fail = 0;\n+\n+  union256i_q s1, s2, d;\n+\n+  for (i = 0; i < 256; i += 16)\n+    for (imm = 0; imm < 100; imm++)\n+      {\n+\t/* Recompute the results for 256-bits */\n+\tcompute_correct_result_256 (&vals[i + 0], &vals[i + 8], imm, ck);\n+\n+\ts1.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 0]);\n+\ts2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+\t/* Run the 256-bit tests */\n+\tavx2_test_palignr256 (s1.x, s2.x, imm, &d.x);\n+\n+\t_mm256_storeu_si256 ((__m256i *) r, d.x);\n+\n+\tfail += checkVi (r, ck, 8);\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "e77e36982b4b3acfbe87e0cc0983cf5c97219a5a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpand-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpand\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_and_si256 (x, x);\n+}"}, {"sha": "ffd3404e5d5635946b25c5b24a2cf57ce1feb2c8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpand-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpand-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q u, s1, s2;\n+  int source1[8] = { 34545, 95567, 23443, 5675, 2323, 67, 2345, 45667 };\n+  int source2[8] = { 674, 57897, 93459, 45624, 54674, 1237, 67436, 79608 };\n+  int d[8];\n+  int e[8];\n+\n+  s1.x = _mm256_loadu_si256 ((__m256i *) source1);\n+  s2.x = _mm256_loadu_si256 ((__m256i *) source2);\n+  u.x = _mm256_and_si256 (s1.x, s2.x);\n+\n+  _mm256_storeu_si256 ((__m256i *) d, u.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = source1[i] & source2[i];\n+\n+  if (checkVi (d, e, 8))\n+    abort ();\n+}"}, {"sha": "b06889884404fa88b4b0bb61ca40a1d99d979c32", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpandn-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpandn\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_andnot_si256 (x, x);\n+}"}, {"sha": "06d3cbd239d6a17fec811abf5f740d77c63b297a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpandn-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpandn-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  union256i_q u, s1, s2;\n+  int source1[8] = { 34545, 95567, 23443, 5675, 2323, 67, 2345, 45667 };\n+  int source2[8] = { 674, 57897, 93459, 45624, 54674, 1237, 67436, 79608 };\n+  int d[8];\n+  int e[8];\n+\n+  s1.x = _mm256_loadu_si256 ((__m256i *) source1);\n+  s2.x = _mm256_loadu_si256 ((__m256i *) source2);\n+  u.x = _mm256_andnot_si256 (s1.x, s2.x);\n+\n+  _mm256_storeu_si256 ((__m256i *) d, u.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (~source1[i]) & source2[i];\n+\n+  if (checkVi (d, e, 8))\n+    abort ();\n+}"}, {"sha": "a7abd6751a8efc41d1790dcc69394270e1e344cf", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpavgb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_avg_epu8 (x, x);\n+}"}, {"sha": "8519e9bc34f9d167b42d4e12ea9c3c8c282b2a51", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpavgb-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  unsigned char e[32];\n+  int tmp;\n+  int i;\n+\n+  s1.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t  -15, 98, 25, 98, 7, 88, 44, 33, 22, 11, 98,\n+\t\t\t  76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t  -39, 6, 3, 4, 5, 119, 1, 2, 3, 4, 10, 20,\n+\t\t\t  30, 90, -80, -40, -100, -15, 98, 25, 98, 7);\n+\n+  u.x = _mm256_avg_epu8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    e[i] = ((unsigned char) s1.a[i] + (unsigned char) s2.a[i] + 1) >> 1;\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "dc68b8a6b0db9c95f726c5d7687185e920613bcf", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpavgw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_avg_epu16 (x, x);\n+}"}, {"sha": "d222a9d4a773955ac497a7d17574c3e5758c9629", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpavgw-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpavgw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  unsigned short e[32];\n+  int i;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 10, 20, 30, 90, 80,\n+\t\t\t   40, 100, 15, 98, 25, 98, 7);\n+  s2.x = _mm256_set_epi16 (88, 44, 33, 22, 11, 98, 76, 100,\n+\t\t\t   34, 78, 39, 6, 3, 4, 5, 119);\n+\n+  u.x = _mm256_avg_epu16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    e[i] = (s1.a[i] + s2.a[i] + 1) >> 1;\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "92f7e1b8e2319ce33986fd9812bea7747f675524", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendd128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpblendd\\[ \\\\t\\]+\\[^\\n\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_blend_epi32 (x, x, 13);\n+}"}, {"sha": "44732cc6f8143891b1f1f94b54760d594bbdbfdb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendd128-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#undef MASK\n+#define MASK 0xf1\n+\n+static void\n+init_pblendd128 (int *src1, int *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pblendd128 (int *src1, int *src2, unsigned int mask, int *dst)\n+{\n+  int i;\n+\n+  memcpy (dst, src1, 16);\n+  for (i = 0; i < 4; i++)\n+    if (mask & (1 << i))\n+      dst[i] = src2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_d src1, src2, dst;\n+  int dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pblendd128 (src1.a, src2.a, i);\n+\n+      dst.x = _mm_blend_epi32 (src1.x, src2.x, MASK);\n+      calc_pblendd128 (src1.a, src2.a, MASK, dst_ref);\n+\n+      if (check_union128i_d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "ab7498854356e2ed8304fbcc1c5bb1ece1b243ac", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendd256-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpblendd\\[ \\\\t\\]+\\[^\\n\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_blend_epi32 (x, x, 13);\n+}"}, {"sha": "fc5e3f7be969276b8ce5d86cd331a7d3f6a1c9ee", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendd256-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#undef MASK\n+#define MASK 0xf1\n+\n+static void\n+init_pblendd256 (int *src1, int *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pblendd256 (int *src1, int *src2, unsigned int mask, int *dst)\n+{\n+  int i;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 8; i++)\n+    if (mask & (1 << i))\n+      dst[i] = src2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d src1, src2, dst;\n+  int dst_ref[8];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pblendd256 (src1.a, src2.a, i);\n+\n+      dst.x = _mm256_blend_epi32 (src1.x, src2.x, MASK);\n+      calc_pblendd256 (src1.a, src2.a, MASK, dst_ref);\n+\n+      if (check_union256i_d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "09ff4bccaec54f3cecb375d51a74f5d58ab33f19", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendvb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpblendvb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_blendv_epi8 (x, x, x);\n+}"}, {"sha": "c0e1d71ea62d685bc7dfc33b8c2a4ae966439df4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendvb-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendvb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_pblendb (char *src1, char *src2, char *mask, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+\n+      if (sign > 0)\n+\tmask[i] = 1 << 7;\n+      else\n+\tmask[i] = 0;\n+    }\n+}\n+\n+static void\n+calc_pblendb (char *src1, char *src2, char *mask, char *dst)\n+{\n+  int i;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 32; i++)\n+    if (mask[i] & (1 << 7))\n+      dst[i] = src2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b src1, src2, mask, dst;\n+  char dst_ref[32];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pblendb (src1.a, src2.a, mask.a, i);\n+\n+      dst.x = _mm256_blendv_epi8 (src1.x, src2.x, mask.x);\n+      calc_pblendb (src1.a, src2.a, mask.a, dst_ref);\n+\n+      if (check_union256i_b (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "7bbb93e4a53df7f7692598ba6b831e68f7cb9ac9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpblendw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_blend_epi16 (x, x, 13);\n+}"}, {"sha": "0500d351e7c0c9e2b1ffa646528107a66478397b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendw-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#undef MASK\n+#define MASK 0xfe\n+\n+static void\n+init_pblendw (short *src1, short *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pblendw (short *src1, short *src2, unsigned int mask, short *dst)\n+{\n+  int i;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 16; i++)\n+    if (mask & (1 << (i % 8)))\n+      dst[i] = src2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w src1, src2, dst;\n+  short dst_ref[16];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pblendw (src1.a, src2.a, i);\n+\n+      dst.x = _mm256_blend_epi16 (src1.x, src2.x, MASK);\n+      calc_pblendw (src1.a, src2.a, MASK, dst_ref);\n+\n+      if (check_union256i_w (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "14b9a7c09503a3f5ae9de66860c266a7d14c6b0d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastb128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastb_epi8 (x);\n+}"}, {"sha": "927755b2ae160478f0a791f5fbd96808409a4ef8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastb128-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastb128 (char *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastb128 (char *src, char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b src, dst;\n+  char dst_ref[16];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastb128 (src.a, i);\n+\n+      dst.x = _mm_broadcastb_epi8 (src.x);\n+      calc_pbroadcastb128 (src.a, dst_ref);\n+\n+      if (check_union128i_b (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "8e1247aac4f999f2e7ff2cb37a1b3ebe90f745e5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastb256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastb_epi8 (x);\n+}"}, {"sha": "9b0e5646973e1cfe4111fb468993679f468e2f4e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastb256-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastb256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastb256 (char *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastb256 (char *src, char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b src;\n+  union256i_b dst;\n+  char dst_ref[32];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastb256 (src.a, i);\n+\n+      dst.x = _mm256_broadcastb_epi8 (src.x);\n+      calc_pbroadcastb256 (src.a, dst_ref);\n+\n+      if (check_union256i_b (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "8a396678e6c498d6f9b7a3fcccd04537675ae3cb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastd128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastd_epi32 (x);\n+}"}, {"sha": "c9d2b46d21df1a3dbcc8f0a7d40d608bcf876fb4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastd128-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastd128 (int *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastd128 (int *src, int *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_d src, dst;\n+  int dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastd128 (src.a, i);\n+\n+      dst.x = _mm_broadcastd_epi32 (src.x);\n+      calc_pbroadcastd128 (src.a, dst_ref);\n+\n+      if (check_union128i_d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "57f1bc78e8d4e8b91a3cfdc4cf269b8fb6fe9dd9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastd256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastd_epi32 (x);\n+}"}, {"sha": "fe009da1a5c492f3ac6c69e3339da579ac002e43", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastd256-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastd256 (int *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastd256 (int *src, int *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_d src;\n+  union256i_d dst;\n+  int dst_ref[8];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastd256 (src.a, i);\n+\n+      dst.x = _mm256_broadcastd_epi32 (src.x);\n+      calc_pbroadcastd256 (src.a, dst_ref);\n+\n+      if (check_union256i_d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "6714ae7ff714c4fb0a109b28a97548550c980dd3", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastq128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastq_epi64 (x);\n+}"}, {"sha": "e6446de7da9b5bd70ee3d19499967f7ffc67c110", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastq128-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastq128 (long long int *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastq128 (long long int *src, long long int *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_q src, dst;\n+  long long int dst_ref[2];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastq128 (src.a, i);\n+\n+      dst.x = _mm_broadcastq_epi64 (src.x);\n+      calc_pbroadcastq128 (src.a, dst_ref);\n+\n+      if (check_union128i_q (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "bf1532b1e8a9e8039ffc7af46fc6a57587084dac", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastq256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastq_epi64 (x);\n+}"}, {"sha": "47026315655595dec6e316b65b146df4f89b2611", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastq256-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastq256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastq256 (long long int *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastq256 (long long int *src, long long int *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_q src;\n+  union256i_q dst;\n+  long long int dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastq256 (src.a, i);\n+\n+      dst.x = _mm256_broadcastq_epi64 (src.x);\n+      calc_pbroadcastq256 (src.a, dst_ref);\n+\n+      if (check_union256i_q (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "ff5ee87410d674293949641b9f12f824a8d5c457", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastw128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_broadcastw_epi16 (x);\n+}"}, {"sha": "e8673a9dda9424ba280ae687831c714605422f17", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastw128-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastw128 (short *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastw128 (short *src, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w src, dst;\n+  short dst_ref[8];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastw128 (src.a, i);\n+\n+      dst.x = _mm_broadcastw_epi16 (src.x);\n+      calc_pbroadcastw128 (src.a, dst_ref);\n+\n+      if (check_union128i_w (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "14462a19bc02ef4a9a444ab208a989bc3bb23663", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastw256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  y = _mm256_broadcastw_epi16 (x);\n+}"}, {"sha": "bac748fef5af4068e270f6c5cec7352eaa5470c1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpbroadcastw256-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpbroadcastw256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_pbroadcastw256 (short *src, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_pbroadcastw256 (short *src, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    dst[i] = src[0];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w src;\n+  union256i_w dst;\n+  short dst_ref[16];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_pbroadcastw256 (src.a, i);\n+\n+      dst.x = _mm256_broadcastw_epi16 (src.x);\n+      calc_pbroadcastw256 (src.a, dst_ref);\n+\n+      if (check_union256i_w (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "063cb575006edaa0909c871c50b856d75281e607", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpeq_epi8 (x, x);\n+}"}, {"sha": "87a8fa42c1516f4ca23879dccb7a1fab9272b917", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqb-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  char e[32];\n+  int i;\n+\n+  s1.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t  -15, 98, 25, 98, 7, 88, 44, 33, 22, 11, 98,\n+\t\t\t  76, -100, -34, -78, -39, 6, 3, 25, 5, 119);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 3, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t  -39, 6, 3, 4, 5, 119, 1, 2, 3, 4, 10, 20,\n+\t\t\t  30, 90, -80, -40, -100, -15, 98, 25, 98, 7);\n+\n+  u.x = _mm256_cmpeq_epi8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    e[i] = (s1.a[i] == s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "002b6968609064d1d62372f8d8132541d3acf9b1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpeq_epi32 (x, x);\n+}"}, {"sha": "0cc10458fda077313ce8c8dc19f63290059d2a0e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqd-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d u, s1, s2;\n+  int e[8];\n+  int i;\n+\n+  s1.x = _mm256_set_epi32 (1, 2, 3, 4, 10, 20, 30, 90000);\n+\n+  s2.x = _mm256_set_epi32 (88, 44, 3, 22, 11, 98, 76, -100);\n+\n+  u.x = _mm256_cmpeq_epi32 (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (s1.a[i] == s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "196e3c311ff712bb75b9d632bff3892b025c852e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpeq_epi64 (x, x);\n+}"}, {"sha": "4abe781986721208427a90f0a93aafd96f6aa5fb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqq-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_q u, s1, s2;\n+  long long int e[4];\n+  int i;\n+\n+  s1.x = _mm256_set_epi64x (1, 2, 3, 4);\n+\n+  s2.x = _mm256_set_epi64x (88, 44, 3, 220000);\n+\n+  u.x = _mm256_cmpeq_epi64 (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (s1.a[i] == s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_q (u, e))\n+    abort ();\n+}"}, {"sha": "1efa2914315536811baf5be74aae97f68bec54b4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpeq_epi16 (x, x);\n+}"}, {"sha": "9fb38de2cd1787a13db50b524ac47f99353ed96e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpeqw-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpeqw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  short e[16];\n+  int i;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t   76, -100, -34, -78, -31000);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 3, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t   30, 90, -80, -40, -100, -15);\n+\n+  u.x = _mm256_cmpeq_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    e[i] = (s1.a[i] == s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "d8b35bba726d1dfc5d3fe975e960061a56b35ab5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpgt_epi8 (x, x);\n+}"}, {"sha": "b76077c200296ff69f6b54e415f044e589feb5d5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtb-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b u, s1, s2;\n+  char e[32];\n+  int i;\n+\n+  s1.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t  -15, 98, 25, 98, 7, 88, 44, 33, 22, 11, 98,\n+\t\t\t  76, -100, -34, -78, -39, 6, 3, 25, 5, 119);\n+\n+  s2.x = _mm256_set_epi8 (88, 44, 3, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t  -39, 6, 3, 4, 5, 119, 1, 2, 3, 4, 10, 20,\n+\t\t\t  30, 90, -80, -40, -100, -15, 98, 25, 98, 7);\n+\n+  u.x = _mm256_cmpgt_epi8 (s1.x, s2.x);\n+\n+  for (i = 0; i < 32; i++)\n+    e[i] = (s1.a[i] > s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_b (u, e))\n+    abort ();\n+}"}, {"sha": "75e4b24e6f18d0f256304e0a2bfcdf6c0769f7ab", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpgt_epi32 (x, x);\n+}"}, {"sha": "371bd79fa7ff9d99431c4ddeca22c8bd8f5a22e8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtd-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d u, s1, s2;\n+  int e[8];\n+  int i;\n+\n+  s1.x = _mm256_set_epi32 (1, 2, 3, 4, 10, 20, 30, 90000);\n+\n+  s2.x = _mm256_set_epi32 (88, 44, 3, 22, 11, 98, 76, -100);\n+\n+  u.x = _mm256_cmpgt_epi32 (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (s1.a[i] > s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "7a983808b10c0b7d15a8dc9ad4d0ef917f730cb2", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpgt_epi64 (x, x);\n+}"}, {"sha": "8d5cf3ee8639575eb04a20a0b06d8951cfae5511", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtq-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_q u, s1, s2;\n+  long long int e[4];\n+  int i;\n+\n+  s1.x = _mm256_set_epi64x (1, 2, 3, 4);\n+\n+  s2.x = _mm256_set_epi64x (88, 44, 3, 220000);\n+\n+  u.x = _mm256_cmpgt_epi64 (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (s1.a[i] > s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_q (u, e))\n+    abort ();\n+}"}, {"sha": "f2ed472983f2e4c9585ca389e8caa2b83f6436bc", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_cmpgt_epi16 (x, x);\n+}"}, {"sha": "490878f8bc131d029ced194d6dc29b920243ef90", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpcmpgtw-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpcmpgtw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w u, s1, s2;\n+  short e[16];\n+  int i;\n+\n+  s1.x = _mm256_set_epi16 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n+\t\t\t   76, -100, -34, -78, -31000);\n+\n+  s2.x = _mm256_set_epi16 (88, 44, 3, 22, 11, 98, 76, -100, -34, -78,\n+\t\t\t   30, 90, -80, -40, -100, -15);\n+\n+  u.x = _mm256_cmpgt_epi16 (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    e[i] = (s1.a[i] > s2.a[i]) ? -1 : 0;\n+\n+  if (check_union256i_w (u, e))\n+    abort ();\n+}"}, {"sha": "518ff333bd08cc55355fa4c424349c804d52647c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vperm2i128-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vperm2i128\\[ \\\\t\\]+\\[^\\n\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_permute2x128_si256 (x, x, 13);\n+}"}, {"sha": "96f32b8f05f67931366c14a49e36cb431f7db5b4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vperm2i128-2.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vperm2i128-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+#define MASK 0xf1\n+\n+static void\n+init_perm2i128 (unsigned long long *src1, unsigned long long *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed) * seed * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_perm2i128 (unsigned long long *src1,\n+\t\tunsigned long long *src2,\n+\t\tunsigned int mask, unsigned long long *dst)\n+{\n+  int i, temp;\n+\n+  temp = mask & 3;\n+\n+  switch (temp)\n+    {\n+    case 0:\n+      memcpy (dst, src1, 16);\n+    case 1:\n+      memcpy (dst, src1 + 2, 16);\n+    case 2:\n+      memcpy (dst, src2, 16);\n+    case 3:\n+      memcpy (dst, src1 + 2, 16);\n+    }\n+\n+  temp = (mask >> 4) & 3;\n+\n+  switch (temp)\n+    {\n+    case 0:\n+      memcpy (dst + 2, src1, 16);\n+    case 1:\n+      memcpy (dst + 2, src1 + 2, 16);\n+    case 2:\n+      memcpy (dst + 2, src2, 16);\n+    case 3:\n+      memcpy (dst + 2, src1 + 2, 16);\n+    }\n+\n+  if ((mask >> 3) & 1)\n+    memset (dst, 0, 16);\n+\n+  if ((mask >> 7) & 1)\n+    memset (dst + 2, 0, 16);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_q src1, src2, dst;\n+  unsigned long long dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_perm2i128 (src1.a, src2.a, i);\n+\n+      dst.x = _mm256_permute2x128_si256 (src1.x, src2.x, MASK);\n+      calc_perm2i128 (src1.a, src2.a, MASK, dst_ref);\n+\n+      if (check_union256i_q (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "939f338953305d3a673b2fd6f787a2c7ddcfbae7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpermd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_permutevar8x32_epi32 (x, x);\n+}"}, {"sha": "4a4e73c78fb5e37878905859d190f51fa24132e0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_permd (int *src1, int *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_permd (int *src1, int *src2, int *dst)\n+{\n+  int i;\n+  unsigned temp;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 8; i++)\n+    {\n+      temp = src1[i];\n+      dst[i] = src2[temp & 7];\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d src1, src2, dst;\n+  int dst_ref[8];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_permd (src1.a, src2.a, i);\n+\n+      dst.x = _mm256_permutevar8x32_epi32 (src1.x, src2.x);\n+      calc_permd (src1.a, src2.a, dst_ref);\n+\n+      if (check_union256i_d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "62ca67cc4124449faf45935a55af734e48f76443", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermpd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpermpd\\[ \\\\t\\]+\\[^\\n\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_permute4x64_pd (x, 13);\n+}"}, {"sha": "1097e5cd18dced9ecdd945504f1ab2fbc1b2e92c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermpd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermpd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define MASK 0x1a\n+\n+#define NUM 10\n+\n+static void\n+init_permpd (double *src1, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_permpd (double *src1, int mask, double *dst)\n+{\n+  int i;\n+  unsigned temp;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 4; i++)\n+    {\n+      temp = mask >> (i * 2);\n+      dst[i] = src1[temp & 3];\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256d src1, dst;\n+  double dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_permpd (src1.a, i);\n+\n+      dst.x = _mm256_permute4x64_pd (src1.x, MASK);\n+      calc_permpd (src1.a, MASK, dst_ref);\n+\n+      if (check_union256d (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "3346b23531f11bf164e9090a4b751524dc83f992", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermps-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpermps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256 x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_permutevar8x32_ps (x, x);\n+}"}, {"sha": "f145aa1d2141572ded88beeda358ba741bc1ee38", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+static void\n+init_permps (float *src1, float *src2, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      src2[i] = (i + seed + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_permps (float *src1, float *src2, float *dst)\n+{\n+  int i;\n+  unsigned temp;\n+  unsigned *idx = (int *) src1;\n+\n+  memcpy (dst, src1, 32);\n+  for (i = 0; i < 8; i++)\n+    {\n+      temp = idx[i];\n+      dst[i] = src2[temp & 7];\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256 src1, src2, dst;\n+  float dst_ref[8];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_permps (src1.a, src2.a, i);\n+\n+      dst.x = _mm256_permutevar8x32_ps (src1.x, src2.x);\n+      calc_permps (src1.a, src2.a, dst_ref);\n+\n+      if (check_union256 (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "533af89a95bec2aa15742d432532a14ef2b1edcc", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpermq\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_permute4x64_epi64 (x, 13);\n+}"}, {"sha": "2d8c3440280ceffaf34d57d89fb75b0cf97076aa", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermq-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include <string.h>\n+\n+#define NUM 10\n+\n+#define MASK 0xf1\n+\n+static void\n+init_permq (unsigned long long *src1, int seed)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      src1[i] = (i + seed) * (i + seed) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+calc_permq (unsigned long long *src1, unsigned int mask,\n+\t    unsigned long long *dst)\n+{\n+  int i, temp;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      temp = (mask >> (2 * i)) & 3;\n+      dst[i] = src1[temp];\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_q src1, dst;\n+  unsigned long long dst_ref[4];\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      init_permq (src1.a, i);\n+\n+      dst.x = _mm256_permute4x64_epi64 (src1.x, MASK);\n+      calc_permq (src1.a, MASK, dst_ref);\n+\n+      if (check_union256i_q (dst, dst_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "2fb0fd7f2f305ae8b934bea278cff54f434498a4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphaddd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hadd_epi32 (x, x);\n+}"}, {"sha": "0d686cb4f5253473a0e73039d24eb86ac9f6d1ba", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddd-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static void\n+compute_phaddd256 (int *i1, int *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 0] = i1[2 * i] + i1[2 * i + 1];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 2] = i2[2 * i] + i2[2 * i + 1];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 4] = i1[2 * i + 4] + i1[2 * i + 5];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 6] = i2[2 * i + 4] + i2[2 * i + 5];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_hadd_epi32 (s1.x, s2.x);\n+\n+      compute_phaddd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "dbedf69deacbb7cc2aeabe2e6d573b57b0453e5d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphaddsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hadds_epi16 (x, x);\n+}"}, {"sha": "371984776f1b385d0db845cddd4f83c271a2552d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddsw-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static short\n+signed_saturate_to_word (int x)\n+{\n+  if (x > (int) 0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short) x;\n+}\n+\n+static void\n+compute_phaddsw256 (short *i1, short *i2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 0] = signed_saturate_to_word (i1[2 * i] + i1[2 * i + 1]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 4] = signed_saturate_to_word (i2[2 * i] + i2[2 * i + 1]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 8] = signed_saturate_to_word (i1[2 * i + 8] + i1[2 * i + 9]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 12] = signed_saturate_to_word (i2[2 * i + 8] + i2[2 * i + 9]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_hadds_epi16 (s1.x, s2.x);\n+\n+      compute_phaddsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "c0bdac2f969a33f73a0ba00aa1d3e466b15e8c59", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphaddw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hadd_epi16 (x, x);\n+}"}, {"sha": "8811e99d6919a8e3bb550cb3059637d4676f0cf7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphaddw-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphaddw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static void\n+compute_phaddw256 (short *i1, short *i2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 0] = i1[2 * i] + i1[2 * i + 1];\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 4] = i2[2 * i] + i2[2 * i + 1];\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 8] = i1[2 * i + 8] + i1[2 * i + 9];\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 12] = i2[2 * i + 8] + i2[2 * i + 9];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_hadd_epi16 (s1.x, s2.x);\n+\n+      compute_phaddw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d4ede9db012be111228b72cf6437d14d329b3485", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphsubd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphsubd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hsub_epi32 (x, x);\n+}"}, {"sha": "ba493679228684636d3c82a7cb2f9dddaf01258f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphsubd-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static void\n+compute_phsubd256 (int *i1, int *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 0] = i1[2 * i] - i1[2 * i + 1];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 2] = i2[2 * i] - i2[2 * i + 1];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 4] = i1[2 * i + 4] - i1[2 * i + 5];\n+\n+  for (i = 0; i < 2; i++)\n+    r[i + 6] = i2[2 * i + 4] - i2[2 * i + 5];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_hsub_epi32 (s1.x, s2.x);\n+\n+      compute_phsubd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d941f44b3f39a5317870cd52e65419e6b1521151", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphsubsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphsubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hsubs_epi16 (x, x);\n+}"}, {"sha": "1ed0990907fb01c41722a67f493f5072c1dc0e83", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphsubsw-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static short\n+signed_saturate_to_word (int x)\n+{\n+  if (x > (int) 0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short) x;\n+}\n+\n+static void\n+compute_phsubsw256 (short *i1, short *i2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 0] = signed_saturate_to_word (i1[2 * i] - i1[2 * i + 1]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 4] = signed_saturate_to_word (i2[2 * i] - i2[2 * i + 1]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 8] = signed_saturate_to_word (i1[2 * i + 8] - i1[2 * i + 9]);\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 12] = signed_saturate_to_word (i2[2 * i + 8] - i2[2 * i + 9]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_hsubs_epi16 (s1.x, s2.x);\n+\n+      compute_phsubsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "f336fad4879b34a25f61897f700df6121a32bd0b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vphsubw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vphsubw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vphsubw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_hsub_epi16 (x, x);\n+}"}, {"sha": "6ab19103d32e8c0244687a5b05a9c4e4a405eb12", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaddubsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_maddubs_epi16 (x, x);\n+}"}, {"sha": "5761d8f4419e40d40788f7cc5c7731db564c9571", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaddubsw-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddubsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static short\n+signed_saturate_to_word (int x)\n+{\n+  if (x > (int) 0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short) x;\n+}\n+\n+static void\n+compute_pmaddubsw256 (short *i1, short *i2, short *r)\n+{\n+  unsigned char *ub1 = (unsigned char *) i1;\n+  char *sb2 = (char *) i2;\n+  short *sout = (short *) r;\n+  int t0;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      t0 = ((int) ub1[2 * i] * (int) sb2[2 * i] +\n+\t    (int) ub1[2 * i + 1] * (int) sb2[2 * i + 1]);\n+      sout[i] = signed_saturate_to_word (t0);\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_maddubs_epi16 (s1.x, s2.x);\n+\n+      compute_pmaddubsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "97de707ba88d82371c05478720ad609be1acf24e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaddwd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_madd_epi16 (x, x);\n+}"}, {"sha": "d539d39433a5d8cca87f810d05068ccd05041a54", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaddwd-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaddwd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+#include \"ssse3-vals.h\"\n+\n+static void\n+compute_pmaddwd256 (short *i1, short *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = ((int) i1[2 * i] * (int) i2[2 * i] +\n+\t    (int) i1[2 * i + 1] * (int) i2[2 * i + 1]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2;\n+  union256i_d res;\n+  int res_ref[8];\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 16)\n+    {\n+      s1.x = _mm256_loadu_si256 ((__m256i *) & vals[i]);\n+      s2.x = _mm256_loadu_si256 ((__m256i *) & vals[i + 8]);\n+\n+      res.x = _mm256_madd_epi16 (s1.x, s2.x);\n+\n+      compute_pmaddwd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "917de5136df7c1c3d0ce7f11a130157f614fc796", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovd\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_maskload_epi32 (y, x);\n+}"}, {"sha": "9bc3f31bed196f1d2ba71f6483d6458059febac8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadd-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 134\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  int m[4] = { mask_v (0), mask_v (1), mask_v (2), mask_v (3) };\n+  int s[4] = { 1, 2, 3, 4 };\n+  union128i_d u, mask;\n+  int e[4] = { 0 };\n+\n+  mask.x = _mm_loadu_si128 ((__m128i *) m);\n+  u.x = _mm_maskload_epi32 (s, mask.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "aa9438c93a7d16b6fe94e53cc19df6d98e40c005", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadd256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovd\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_maskload_epi32 (y, x);\n+}"}, {"sha": "b5a82bddde258d78f44616f4e5024c2613dea8f1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadd256-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadd256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 134\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  int m[8] =\n+    { mask_v (0), mask_v (1), mask_v (2), mask_v (3), mask_v (4), mask_v (5),\n+mask_v (6), mask_v (7) };\n+  int s[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };\n+  union256i_d u, mask;\n+  int e[8] = { 0 };\n+\n+  mask.x = _mm256_loadu_si256 ((__m256i *) m);\n+  u.x = _mm256_maskload_epi32 (s, mask.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "24768b8f8727636788b33bb123efebc735b1f56d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovq\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_maskload_epi64 (y, x);\n+}"}, {"sha": "ca7abadcac65a460f5cd583d138f56df2da4270e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadq-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 7\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  long long m[2] = { mask_v (0), mask_v (1) };\n+  long long s[2] = { 1, 2 };\n+  union128i_q u, mask;\n+  long long e[2] = { 0 };\n+\n+  mask.x = _mm_loadu_si128 ((__m128i *) m);\n+  u.x = _mm_maskload_epi64 (s, mask.x);\n+\n+  for (i = 0; i < 2; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "9b824eb5764798477175e27ac934612e10ac675d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadq256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovq\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+long long int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_maskload_epi64 (y, x);\n+}"}, {"sha": "c74d15304ec560a388cd3d3ab966badf90556ef8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskloadq256-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskloadq256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 7\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  long long m[4] = { mask_v (0), mask_v (1), mask_v (2), mask_v (3) };\n+  long long s[4] = { 1, 2, 3, 4 };\n+  union256i_q u, mask;\n+  long long e[4] = { 0 };\n+\n+  mask.x = _mm256_loadu_si256 ((__m256i *) m);\n+  u.x = _mm256_maskload_epi64 (s, mask.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (check_union256i_q (u, e))\n+    abort ();\n+}"}, {"sha": "0731d1ae16dda4105e32663b31dbaffe55b78fb7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstored-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovd\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  _mm_maskstore_epi32 (y, x, x);\n+}"}, {"sha": "89b54f594110b23ff4fea6ccd85595e8ddb71bf9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstored-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 214\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  int m[4] = { mask_v (0), mask_v (1), mask_v (2), mask_v (3) };\n+  int s[4] = { 1, 2, 3, 4 };\n+  union128i_d src, mask;\n+  int e[4] = { 0 };\n+  int d[4] = { 0 };\n+\n+  src.x = _mm_loadu_si128 ((__m128i *) s);\n+  mask.x = _mm_loadu_si128 ((__m128i *) m);\n+  _mm_maskstore_epi32 (d, mask.x, src.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (checkVi (d, e, 4))\n+    abort ();\n+}"}, {"sha": "4e2944de0713a4b006349df2f8b68356a9c511ac", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstored256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovd\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  _mm256_maskstore_epi32 (y, x, x);\n+}"}, {"sha": "7b66a08977ace73c201f56379770b079615c0133", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstored256-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstored256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 214\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  int m[8] =\n+    { mask_v (0), mask_v (1), mask_v (2), mask_v (3), mask_v (4), mask_v (5),\n+mask_v (6), mask_v (7) };\n+  int s[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };\n+  union256i_d src, mask;\n+  int e[8] = { 0 };\n+  int d[8] = { 0 };\n+\n+  src.x = _mm256_loadu_si256 ((__m256i *) s);\n+  mask.x = _mm256_loadu_si256 ((__m256i *) m);\n+  _mm256_maskstore_epi32 (d, mask.x, src.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (checkVi (d, e, 8))\n+    abort ();\n+}"}, {"sha": "f1075bf253f0d45a3aa2252becbf0a43a57891d5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstoreq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovq\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+long long int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  _mm_maskstore_epi64 (y, x, x);\n+}"}, {"sha": "bd9e3947075f66023ac39231e82032c90ede14d6", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstoreq-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 6\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  long long m[2] = { mask_v (0), mask_v (1) };\n+  long long s[2] = { 1, 2 };\n+  long long e[2] = { 0 };\n+  long long d[2] = { 0 };\n+  union128i_q src, mask;\n+\n+  src.x = _mm_loadu_si128 ((__m128i *) s);\n+  mask.x = _mm_loadu_si128 ((__m128i *) m);\n+  _mm_maskstore_epi64 (d, mask.x, src.x);\n+\n+  for (i = 0; i < 2; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (checkVl (d, e, 2))\n+    abort ();\n+}"}, {"sha": "0d0520b81a63718a11d8ea87e88dcd1c9a68fafc", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstoreq256-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaskmovq\\[ \\\\t\\]+\\[^\\n\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+long long int *y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  _mm256_maskstore_epi64 (y, x, x);\n+}"}, {"sha": "091791ac637f9f2559f37852704dfc05edb45b58", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaskstoreq256-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaskstoreq256-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#ifndef MASK\n+#define MASK 6\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx2_test (void)\n+{\n+  int i;\n+  long long m[4] = { mask_v (0), mask_v (1), mask_v (2), mask_v (3) };\n+  long long s[4] = { 1, 2, 3, 4 };\n+  long long e[4] = { 0 };\n+  long long d[4] = { 0 };\n+  union256i_q src, mask;\n+\n+  src.x = _mm256_loadu_si256 ((__m256i *) s);\n+  mask.x = _mm256_loadu_si256 ((__m256i *) m);\n+  _mm256_maskstore_epi64 (d, mask.x, src.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = m[i] ? s[i] : 0;\n+\n+  if (checkVl (d, e, 4))\n+    abort ();\n+}"}, {"sha": "2cbbcff9dcb1410d30e9811ca1c0e2c76c33aa2d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epi8 (x, x);\n+}"}, {"sha": "4b1b1dd2f87e6cb156c4c70f99d6edd9fcedf776", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsb-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxsb256 (char *s1, char *s2, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  char res_ref[32];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_max_epi8 (s1.x, s2.x);\n+\n+      compute_pmaxsb256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "1b227e6145c6efabf069d8f33ffaace0de8199f1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxsd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epi32 (x, x);\n+}"}, {"sha": "e488a6ea152a1fd55a611006bbc503cc0898c666", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsd-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxsd256 (int *s1, int *s2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 2000) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_max_epi32 (s1.x, s2.x);\n+\n+      compute_pmaxsd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "8fb2d29cd02706f13f63cf8b053c223ad4f6221a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epi16 (x, x);\n+}"}, {"sha": "6ada1cd23c7a3583e35d4e4d6d760101c6939a73", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxsw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxsw256 (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 2000) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_max_epi16 (s1.x, s2.x);\n+\n+      compute_pmaxsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6d0fe9828d978ff9e7b46e6f7f69e7b7de54be14", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxub-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epu8 (x, x);\n+}"}, {"sha": "f0654e03277997b133ef0add1e0555a001f70b4f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxub-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxub-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxub256 (unsigned char *s1, unsigned char *s2, unsigned char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  unsigned char res_ref[32];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 200;\n+\t}\n+\n+      res.x = _mm256_max_epu8 (s1.x, s2.x);\n+\n+      compute_pmaxub256 ((unsigned char *) s1.a,\n+\t\t\t (unsigned char *) s2.a, (unsigned char *) res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "5784148c70b41a68973bf532fa5a710b591457c8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxud-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epu32 (x, x);\n+}"}, {"sha": "a61314d193b7c7ce5a093015f22ca2d8637264f1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxud-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxud-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxud256 (unsigned int *s1, unsigned int *s2, unsigned int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  unsigned int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 2000;\n+\t}\n+\n+      res.x = _mm256_max_epu32 (s1.x, s2.x);\n+\n+      compute_pmaxud256 ((unsigned *) s1.a, (unsigned *) s2.a,\n+\t\t\t (unsigned *) res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "dbadc254c625eb9d63e2870c6300b3f272597dfd", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxuw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_max_epu16 (x, x);\n+}"}, {"sha": "2631f0cf080221b4e45e8cce9f99bc4fccec5b32", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmaxuw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmaxuw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmaxuw256 (unsigned short *s1, unsigned short *s2, unsigned short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s1[i] > s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  unsigned short res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 2000;\n+\t}\n+\n+      res.x = _mm256_max_epu16 (s1.x, s2.x);\n+\n+      compute_pmaxuw256 ((unsigned short *) s1.a,\n+\t\t\t (unsigned short *) s2.a, (unsigned short *) res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "35cbdb31286f433feaffa58f1bd3e3b32ee8ee11", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epi8 (x, x);\n+}"}, {"sha": "2dc5b109f01e99500ffbf038186b7178ca30cbf8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsb-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminsb256 (char *s1, char *s2, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  char res_ref[32];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_min_epi8 (s1.x, s2.x);\n+\n+      compute_pminsb256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "97c99f24c503495fe1c74abe08421527bb220984", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminsd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epi32 (x, x);\n+}"}, {"sha": "e2c69e7e87a804d64bf899bb9f5112362f41243b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsd-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminsd256 (int *s1, int *s2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 2000) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_min_epi32 (s1.x, s2.x);\n+\n+      compute_pminsd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "43f5c72ac053c3acd208cbe09ee3002c0c0710da", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epi16 (x, x);\n+}"}, {"sha": "05be8ce9056f799a631b5d634c9d2392cb2c1a58", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminsw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminsw256 (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  s2.a[j] = (i + 2000) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_min_epi16 (s1.x, s2.x);\n+\n+      compute_pminsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "44663e8ad108a82198b3c19ba787ab56801f5ba2", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminub-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epu8 (x, x);\n+}"}, {"sha": "16c5f762863381ca7abfa19dd099128dcbaa8062", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminub-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminub-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminub256 (unsigned char *s1, unsigned char *s2, unsigned char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  unsigned char res_ref[32];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 200;\n+\t}\n+\n+      res.x = _mm256_min_epu8 (s1.x, s2.x);\n+\n+      compute_pminub256 ((unsigned char *) s1.a,\n+\t\t\t (unsigned char *) s2.a, (unsigned char *) res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d6acb8b474be4c95055de57df3621c9c1ffedaa6", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminud-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epu32 (x, x);\n+}"}, {"sha": "97ff74226612bdbfd2654439449b98944f5b6ebb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminud-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminud-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminud256 (unsigned int *s1, unsigned int *s2, unsigned int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  unsigned int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 2000;\n+\t}\n+\n+      res.x = _mm256_min_epu32 (s1.x, s2.x);\n+\n+      compute_pminud256 ((unsigned *) s1.a, (unsigned *) s2.a,\n+\t\t\t (unsigned *) res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "c018a49c92b7195e959e3ae487e7c19f6775d47c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminuw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_min_epu16 (x, x);\n+}"}, {"sha": "7de87d00dad99d69ba93dc60ddb5d8692c3a3964", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpminuw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpminuw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pminuw256 (unsigned short *s1, unsigned short *s2, unsigned short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  unsigned short res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = i + 2000;\n+\t}\n+\n+      res.x = _mm256_min_epu16 (s1.x, s2.x);\n+\n+      compute_pminuw256 ((unsigned short *) s1.a,\n+\t\t\t (unsigned short *) s2.a, (unsigned short *) res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "1a37b1bef26f0ae2dba2a0deedc0637be8b40292", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovmskb-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovmskb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+int res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_movemask_epi8 (x);\n+}"}, {"sha": "d438248b5d04cc41c05ced0d5e18b17c5bce3b31", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxbd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi8_epi32 (x);\n+}"}, {"sha": "3b641b0ca07f360e61bd5fa3d1b28c6c3bc83a79", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxbd (char *s, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_d res;\n+  int res_ref[8];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 20, -50, 6, 8, 1, 2, 3, 4, -20, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepi8_epi32 (s.x);\n+\n+  compute_movsxbd (s.a, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "12c817ffb82cad25811e1506f25a4bb35a96fc97", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxbq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi8_epi64 (x);\n+}"}, {"sha": "23aae5bdb678c8d1080501fc552c4277a978e18a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxbq (char *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 20, -50, 6, 8, 1, 2, 3, 4, -20, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepi8_epi64 (s.x);\n+\n+  compute_movsxbq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "bf98e3154c6fe113dadcaafdaeff04d07819768b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi8_epi16 (x);\n+}"}, {"sha": "d1c02ea86386119a6fcaae6794693cc86d4a8f55", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxbw-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxbw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxbw (char *s, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_w res;\n+  short res_ref[16];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 20, -50, 6, 8, 1, 2, 3, 4, -20, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepi8_epi16 (s.x);\n+\n+  compute_movsxbw (s.a, res_ref);\n+\n+  if (check_union256i_w (res, res_ref))\n+    abort ();\n+}"}, {"sha": "9c72c41e18872070a402080229eebaee835950a5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxdq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxdq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi32_epi64 (x);\n+}"}, {"sha": "7e87f316fb076b6ff1acb1960a4c6eeb6a70135f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxdq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxdq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxdq (int *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_d s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi32 (1, -2, 3, 4);\n+\n+  res.x = _mm256_cvtepi32_epi64 (s.x);\n+\n+  compute_movsxdq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "39627ced8c18c50c28b158011eac3f12f21ccf00", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxwd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi16_epi32 (x);\n+}"}, {"sha": "5a95e376e1937586806fe6e0047f480b1089a20f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxwd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxwd (short *s, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w s;\n+  union256i_d res;\n+  int res_ref[8];\n+\n+  s.x = _mm_set_epi16 (1, -2, 3, 4, 200, 5000, -6, 8);\n+\n+  res.x = _mm256_cvtepi16_epi32 (s.x);\n+\n+  compute_movsxwd (s.a, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "9fa613b34208c26693d8d6a806fdd4619a6f41a9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxwq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovsxwq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepi16_epi64 (x);\n+}"}, {"sha": "f096de577624c9b7022651f3ba0ab6a323df41d8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovsxwq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovsxwq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movsxwq (short *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi16 (1, 2, 3, 4, -200, 50, 6, 8);\n+\n+  res.x = _mm256_cvtepi16_epi64 (s.x);\n+\n+  compute_movsxwq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "bde8c134dde59bdb6ec3c47989be50bba669c843", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxbd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu8_epi32 (x);\n+}"}, {"sha": "7a212c89dc4b1b54663e15b2e952bb184dce9cfd", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxbd (unsigned char *s, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_d res;\n+  int res_ref[8];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 20, 50, 6, 8, 1, 2, 3, 4, 200, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepu8_epi32 (s.x);\n+\n+  compute_movzxbd (s.a, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "da8e0584ab7b93bfb419331e8438f3be4c9e42e0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxbq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu8_epi64 (x);\n+}"}, {"sha": "c09c21d67e26acbcc6398ab13162f2c720238860", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxbq (unsigned char *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 20, 150, 6, 8, 1, 2, 3, 4, 20, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepu8_epi64 (s.x);\n+\n+  compute_movzxbq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "f7a926de10f7b67506e63681aa65baa349c38a8a", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu8_epi16 (x);\n+}"}, {"sha": "5ef4b1535755d1c2ee9a0a4ab44a6b978cfce715", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxbw-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxbw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxbw (unsigned char *s, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_b s;\n+  union256i_w res;\n+  short res_ref[16];\n+\n+  s.x = _mm_set_epi8 (1, 2, 3, 4, 200, 50, 6, 8, 1, 2, 3, 4, 200, 5, 6, 8);\n+\n+  res.x = _mm256_cvtepu8_epi16 (s.x);\n+\n+  compute_movzxbw (s.a, res_ref);\n+\n+  if (check_union256i_w (res, res_ref))\n+    abort ();\n+}"}, {"sha": "3f0c400c3ae7cc52dabcac600387196516a61579", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxdq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxdq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu32_epi64 (x);\n+}"}, {"sha": "20986b6448fc828b22007c7c024cb737d593213c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxdq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxdq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxdq (unsigned *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_d s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi32 (1, 2, 3, 4);\n+\n+  res.x = _mm256_cvtepu32_epi64 (s.x);\n+\n+  compute_movzxdq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "902cd6df87fa3e153cb17c95aa80e249ce8f56f8", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxwd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu16_epi32 (x);\n+}"}, {"sha": "b4d2b2da685cfcdddfa6600f515f6238059dd523", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxwd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxwd (unsigned short *s, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w s;\n+  union256i_d res;\n+  int res_ref[8];\n+\n+  s.x = _mm_set_epi16 (1, 2, 3, 4, 200, 5000, 6, 8);\n+\n+  res.x = _mm256_cvtepu16_epi32 (s.x);\n+\n+  compute_movzxwd (s.a, res_ref);\n+\n+  if (check_union256i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "4eaa65aebb1a3bec977863fd2cd2c4f2010c511d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxwq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovzxwq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i x;\n+__m256i res;\n+\n+void extern\n+avx2_test (void)\n+{\n+  res = _mm256_cvtepu16_epi64 (x);\n+}"}, {"sha": "8a9250aeca53621d30161f1095b80be1241ed339", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovzxwq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovzxwq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_movzxwq (unsigned short *s, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s[i];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union128i_w s;\n+  union256i_q res;\n+  long long int res_ref[4];\n+\n+  s.x = _mm_set_epi16 (1, 2, 3, 4, 200, 5000, 6, 8);\n+\n+  res.x = _mm256_cvtepu16_epi64 (s.x);\n+\n+  compute_movzxwq (s.a, res_ref);\n+\n+  if (check_union256i_q (res, res_ref))\n+    abort ();\n+}"}, {"sha": "e1c232da321514c691277ef99586681ebbb987fb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmuldq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmuldq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mul_epi32 (x, x);\n+}"}, {"sha": "b67f25fc4c0338b2cc05a05e0563a22413fe8d78", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmuldq-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuldq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmuldq256 (int *s1, int *s2, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s1[i * 2] * s2[i * 2];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2;\n+  union256i_q res;\n+  long long int res_ref[4];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_mul_epi32 (s1.x, s2.x);\n+      compute_pmuldq256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_q (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "7c6692b81d998690bb5a9fe1d581c24fc7b3a3e5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhrsw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mulhrs_epi16 (x, x);\n+}"}, {"sha": "c6d874222458262ad9a23fade2b84e5771b1930e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhrsw-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhrsw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmulhrsw256 (short *s1, short *s2, short *r)\n+{\n+  int i;\n+  int t0;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      t0 = (((int) s1[i] * (int) s2[i]) >> 14) + 1;\n+      r[i] = (short) (t0 >> 1);\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_mulhrs_epi16 (s1.x, s2.x);\n+\n+      compute_pmulhrsw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d9a2fa7ceef54e80d177e5f5d18efcbae47c108e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhuw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mulhi_epu16 (x, x);\n+}"}, {"sha": "734b20cfb5c6d53ac56a12379f8f1180dddb64ab", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhuw-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhuw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmulhuw256 (unsigned short *s1, unsigned short *s2, unsigned short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = (s1[i] * s2[i]) >> 16;\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  unsigned short res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = i * j;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_mulhi_epu16 (s1.x, s2.x);\n+\n+      compute_pmulhuw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "a626f19199cb894ee5790bc8ecdc950019835633", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mulhi_epi16 (x, x);\n+}"}, {"sha": "ea0bde2bea9aa615508890c3248491dbbaccdf84", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulhw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulhw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmulhw256 (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = (s1[i] * s2[i]) >> 16;\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_mulhi_epi16 (s1.x, s2.x);\n+\n+      compute_pmulhw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "4e2e5250fbd6e69d7d2a56bb68314eefa06e7d30", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulld-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmulld\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mullo_epi32 (x, x);\n+}"}, {"sha": "74443a24d878cb43cc01f6dd9a170be782dc8707", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmulld-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmulld-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmulld256 (int *s1, int *s2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    r[i] = (int) ((long long int) s1[i] * (long long int) s2[i]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_mullo_epi32 (s1.x, s2.x);\n+\n+      compute_pmulld256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "61cc75884073c5f997f676b4ab6a304c980dcdb4", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmullw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mullo_epi16 (x, x);\n+}"}, {"sha": "81d05ccab2f56b6f5f9768981f9affe1f7c562fe", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmullw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmullw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmullw256 (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    r[i] = (short) ((int) s1[i] * (int) s2[i]);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_mullo_epi16 (s1.x, s2.x);\n+\n+      compute_pmullw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "4fa1bf155ace6d897758ca0d605bb612aea8f0bc", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmuludq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpmuludq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_mul_epu32 (x, x);\n+}"}, {"sha": "619b7358e788087be251a8975aab0bf5197d72e9", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmuludq-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmuludq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pmuludq256 (unsigned int *s1, unsigned int *s2, unsigned long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s1[i * 2] * s2[i * 2];\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  union256i_d s1, s2;\n+  union256i_q res;\n+  unsigned long long res_ref[4];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = i * j;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_mul_epu32 (s1.x, s2.x);\n+\n+      compute_pmuludq256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_q (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2e0f46d213cc469c1b406148304805dfd1e6ad7f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpor-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpor\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_or_si256 (x, x);\n+}"}, {"sha": "fd5da8335cab941c877ab6f7d047cd2f8501735b", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpor-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpor-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_por256 (long long int *s1, long long int *s2, long long int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s1[i] | s2[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q s1, s2, res;\n+  long long int res_ref[4];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\t{\n+\t  s1.a[j] = i * j * sign;\n+\t  s2.a[j] = (j + 20) * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_or_si256 (s1.x, s2.x);\n+      compute_por256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_q (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "1cd56661cdb629ce8e44b1006a12f84e26fb70bb", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsadbw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sad_epu8 (x, x);\n+}"}, {"sha": "392613659aa989e6119dfc783ed1aee722b0350e", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsadbw-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsadbw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_sadbw256 (unsigned char *s1, unsigned char *s2, unsigned short *r)\n+{\n+  int i;\n+  unsigned char tmp[32];\n+\n+  for (i = 0; i < 32; i++)\n+    tmp[i] = s1[i] > s2[i] ? s1[i] - s2[i] : s2[i] - s1[i];\n+\n+  memset (r, 0, 32);\n+\n+  for (i = 0; i < 8; i++)\n+    r[0] += tmp[i];\n+\n+  for (i = 8; i < 16; i++)\n+    r[4] += tmp[i];\n+\n+  for (i = 16; i < 24; i++)\n+    r[8] += tmp[i];\n+\n+  for (i = 24; i < 32; i++)\n+    r[12] += tmp[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b s1, s2;\n+  union256i_w res;\n+  unsigned short res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_sad_epu8 (s1.x, s2.x);;\n+      compute_sadbw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b94563d0ca1489ad35b411952f50813732c985d5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_shuffle_epi8 (x, x);\n+}"}, {"sha": "ee91493950bc8164bfe6259e70cd526fd2dde394", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufb-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pshufb256 (char *s1, char *s2, char *r)\n+{\n+  int i;\n+  char select;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      select = s2[i];\n+      if (select & 0x80)\n+\tr[i] = 0;\n+      else\n+\tr[i] = s1[select & 0xf];\n+\n+      select = s2[i + 16];\n+      if (select & 0x80)\n+\tr[i + 16] = 0;\n+      else\n+\tr[i + 16] = s1[16 + (select & 0xf)];\n+    }\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  char res_ref[32];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_shuffle_epi8 (s1.x, s2.x);\n+      compute_pshufb256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "cdfde4654f5a417aa3fe4daea68e5873d62f5bac", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpshufd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_shuffle_epi32 (x, 13);\n+}"}, {"sha": "e799ed78930577cc47e0592ef94d6f0d4d68c581", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufd-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define N 0xec\n+\n+static void\n+compute_pshufd256 (int *s1, unsigned char imm, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = s1[((N & (0x3 << (2 * i))) >> (2 * i))];\n+\n+  for (i = 0; i < 4; i++)\n+    r[i + 4] = s1[((N & (0x3 << (2 * i))) >> (2 * i)) + 4];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, res;\n+  int res_ref[8];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_shuffle_epi32 (s1.x, N);\n+      compute_pshufd256 (s1.a, N, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "fa3f809daa5741ada636f857f577758d2008b771", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufhw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_shufflehi_epi16 (x, 13);\n+}"}, {"sha": "a27ed03b3bda5831d00e07c72ce7e53a18910a31", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshufhw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshufhw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define N 0xec\n+\n+static void\n+compute_pshuflw256 (short *s1, unsigned char imm, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      r[i] = s1[(imm >> (2 * i)) & 3];\n+      r[i + 8] = s1[((imm >> (2 * i)) & 3) + 8];\n+    }\n+\n+  for (i = 4; i < 8; i++)\n+    {\n+      r[i] = s1[i];\n+      r[i + 8] = s1[i + 8];\n+    }\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w s1, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 1; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_shufflelo_epi16 (s1.x, N);\n+      compute_pshuflw256 (s1.a, N, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "24e75625ffed5bbb8e73dcb5f63c4f7714b24f8d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshuflw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_shufflelo_epi16 (x, 13);\n+}"}, {"sha": "144197348d4fdfd286e8d12bb9dd38d225771ca0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpshuflw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpshuflw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define N 0xec\n+\n+static void\n+compute_pshufhw256 (short *s1, unsigned char imm, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      r[i] = s1[i];\n+      r[i + 8] = s1[i + 8];\n+    }\n+\n+  for (i = 4; i < 8; i++)\n+    {\n+      r[i] = s1[((imm >> (2 * (i - 4))) & 3) + 4];\n+      r[i + 8] = s1[((imm >> (2 * (i - 4))) & 3) + 12];\n+    }\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w s1, res;\n+  short res_ref[16];\n+  int i, j, sign = 1;\n+  int fail = 0;\n+\n+  for (i = 1; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i * sign;\n+\t  sign = -sign;\n+\t}\n+\n+      res.x = _mm256_shufflehi_epi16 (s1.x, N);\n+      compute_pshufhw256 (s1.a, N, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6cd7ca6e85c8bf01890c7bea23e5a9b77acdda1d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignb-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpsignb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sign_epi8 (x, x);\n+}"}, {"sha": "5e3d819fea85fa2d6d1aa8fd89d00c0ecbee03f7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignb-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignb-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_psignb256 (char *s1, char *s2, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    if (s2[i] < 0)\n+      r[i] = -s1[i];\n+    else if (s2[i] == 0)\n+      r[i] = 0;\n+    else\n+      r[i] = s1[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b s1, s2, res;\n+  char res_ref[32];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_sign_epi8 (s1.x, s2.x);\n+      compute_psignb256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "dab81a3b1607c6a4182cef2e1f7d5715aad027af", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpsignd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sign_epi32 (x, x);\n+}"}, {"sha": "14e61b014ee91f4f5fe49f6e477ee168f05d05b1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignd-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignd-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_psignd256 (int *s1, int *s2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (s2[i] < 0)\n+      r[i] = -s1[i];\n+    else if (s2[i] == 0)\n+      r[i] = 0;\n+    else\n+      r[i] = s1[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, s2, res;\n+  int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_sign_epi32 (s1.x, s2.x);\n+      compute_psignd256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "cae04c081b481931386a3be6f3f8271ccb0aaeb6", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpsignw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sign_epi16 (x, x);\n+}"}, {"sha": "bb96a1d53d2d5fb30a0ad8de8ddd09be22c53375", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsignw-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsignw-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_psignw256 (short int *s1, short int *s2, short int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (s2[i] < 0)\n+      r[i] = -s1[i];\n+    else if (s2[i] == 0)\n+      r[i] = 0;\n+    else\n+      r[i] = s1[i];\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_w s1, s2, res;\n+  short int res_ref[16];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 16; j++)\n+\t{\n+\t  s1.a[j] = j * i;\n+\t  s2.a[j] = j + 20;\n+\t}\n+\n+      res.x = _mm256_sign_epi16 (s1.x, s2.x);\n+      compute_psignw256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_w (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "5140d7ae076af4acf25b2947e2b79e99a61851d5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslld-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpslld\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m128i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sll_epi32 (x, y);\n+}"}, {"sha": "84c68feb550b3044a2228e654143c5cf68e0ae60", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslld-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslld-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_pslld256 (int *s1, long long int *s2, int *r)\n+{\n+  int i;\n+  long long int count = s2[0];\n+\n+  memset (r, 0, 32);\n+\n+  if (count < 32)\n+    for (i = 0; i < 8; ++i)\n+      r[i] = s1[i] << count;\n+}\n+\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, res;\n+  union128i_q s2;\n+  int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\ts1.a[j] = j * i;\n+\n+      s2.a[0] = i;\n+\n+      res.x = _mm256_sll_epi32 (s1.x, s2.x);\n+\n+      compute_pslld256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "9cea0f67563e8ae7db58c99f4b258ad412a9e599", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslldi-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O3\" } */\n+/* { dg-final { scan-assembler \"vpslld\\[ \\\\t\\]+\\[^\\n\\]*\\\\$\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_slli_epi32 (x, 13);\n+}"}, {"sha": "dfd7d9a0386111bb77ce6410f189f92258bec38d", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslldi-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldi-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O3 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define N 0x5\n+\n+static void\n+compute_pslldi256 (int *s1, int *r)\n+{\n+  int i;\n+\n+  memset (r, 0, 32);\n+\n+  if (N < 64)\n+    for (i = 0; i < 8; ++i)\n+      r[i] = s1[i] << N;\n+}\n+\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_d s1, res;\n+  int res_ref[8];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\ts1.a[j] = j * i;\n+\n+      res.x = _mm256_slli_epi32 (s1.x, N);\n+\n+      compute_pslldi256 (s1.a, res_ref);\n+\n+      fail += check_union256i_d (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "5a85a7982a14eea4e5252c5355e9c4c092d15496", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslldq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpslldq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+extern volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_slli_si256 (x, 13);\n+}"}, {"sha": "7bfb5b185f4b226d98435d4997d01c6016de1b1f", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpslldq-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpslldq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+#define N 0x5\n+\n+static void\n+compute_pslldq256 (char *s1, char *r)\n+{\n+  int i;\n+\n+  memset (r, 0, 32);\n+\n+  for (i = 0; i < 16 - N; i++)\n+    r[i + N] = s1[i];\n+\n+  for (i = 0; i < 16 - N; i++)\n+    r[i + 16 + N] = s1[i + 16];\n+}\n+\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_b s1, res;\n+  char res_ref[32];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 32; j++)\n+\ts1.a[j] = j * i;\n+\n+      res.x = _mm256_slli_si256 (s1.x, N);\n+\n+      compute_pslldq256 (s1.a, res_ref);\n+\n+      fail += check_union256i_b (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "53417a1acede6fe5c509899c2798eb1d5b5504ff", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsllq-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler \"vpsllq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+__m128i y;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_sll_epi64 (x, y);\n+}"}, {"sha": "c0ac89bfe0681b6fb5439273f62a4933c55c76c0", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsllq-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllq-2.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <string.h>\n+#include \"avx2-check.h\"\n+\n+static void\n+compute_psllq256 (long long int *s1, long long int *s2, long long int *r)\n+{\n+  int i;\n+  long long int count = s2[0];\n+\n+  memset (r, 0, 32);\n+\n+  if (count < 64)\n+    for (i = 0; i < 4; ++i)\n+      r[i] = s1[i] << count;\n+}\n+\n+void static\n+avx2_test (void)\n+{\n+  union256i_q s1, res;\n+  union128i_q s2;\n+  long long int res_ref[4];\n+  int i, j;\n+  int fail = 0;\n+\n+  for (i = 0; i < 10; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ts1.a[j] = j * i;\n+\n+      s2.a[0] = i;\n+\n+      res.x = _mm256_sll_epi64 (s1.x, s2.x);\n+\n+      compute_psllq256 (s1.a, s2.a, res_ref);\n+\n+      fail += check_union256i_q (res, res_ref);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2851be5e2a4b04f9376d68e438cfc89c1243fb13", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpsllqi-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllqi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddfea8a33905ade165e6aa833dd0adea93e1480/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllqi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpsllqi-1.c?ref=2ddfea8a33905ade165e6aa833dd0adea93e1480", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O3\" } */\n+/* { dg-final { scan-assembler \"vpsllq\\[ \\\\t\\]+\\[^\\n\\]*\\\\$\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm256_slli_epi64 (x, 13);\n+}"}]}