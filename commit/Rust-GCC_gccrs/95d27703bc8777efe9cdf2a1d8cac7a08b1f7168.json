{"sha": "95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkMjc3MDNiYzg3NzdlZmU5Y2RmMmExZDhjYWM3YTA4YjFmNzE2OA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-20T11:51:05Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-20T11:51:05Z"}, "message": "Introduce -finline-arg-packing.\n\n2019-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR middle-end/91512\n    PR fortran/92738\n    * invoke.texi: Document -finline-arg-packing.\n    * lang.opt: Add -finline-arg-packing.\n    * options.c (gfc_post_options): Handle -finline-arg-packing.\n    * trans-array.c (gfc_conv_array_parameter): Use\n    flag_inline_arg_packing instead of checking for optimize and\n    optimize_size.\n\n2019-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR middle-end/91512\n    PR fortran/92738\n    * gfortran.dg/inline_pack_25.f90: New test.\n\nFrom-SVN: r279639", "tree": {"sha": "2ced2afc4d48ec55f5d67887dcf87f78589301db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ced2afc4d48ec55f5d67887dcf87f78589301db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/comments", "author": null, "committer": null, "parents": [{"sha": "de89b5748d68b76b06e3beca4a956060afb79a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de89b5748d68b76b06e3beca4a956060afb79a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de89b5748d68b76b06e3beca4a956060afb79a3d"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "f1c71ba2d10ff97bad6a25dd13cf6d79fed69c8f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -1,3 +1,9 @@\n+2019-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR middle-end/91512\n+\tPR fortran/92738\n+\t* gfortran.dg/inline_pack_25.f90: New test.\n+\n 2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92996"}, {"sha": "299fc9f8ff475a0cde29c0a3e2481831e1c3ea21", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -192,8 +192,9 @@ and warnings}.\n -ffrontend-loop-interchange -ffrontend-optimize @gol\n -finit-character=@var{n} -finit-integer=@var{n} -finit-local-zero @gol\n -finit-derived -finit-logical=@var{<true|false>} @gol\n--finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n--finline-matmul-limit=@var{n} -fmax-array-constructor=@var{n} @gol\n+-finit-real=@var{<zero|inf|-inf|nan|snan>}\n+-finline-matmul-limit=@var{n} @gol\n+-finline-arg-packing -fmax-array-constructor=@var{n} @gol\n -fmax-stack-var-size=@var{n} -fno-align-commons -fno-automatic @gol\n -fno-protect-parens -fno-underscoring -fsecond-underscore @gol\n -fpack-derived -frealloc-lhs -frecursive -frepack-arrays @gol\n@@ -1779,6 +1780,34 @@ compiled with the @option{-fshort-enums} option.  It will make\n GNU Fortran choose the smallest @code{INTEGER} kind a given\n enumerator set will fit in, and give all its enumerators this kind.\n \n+@item -finline-arg-packing\n+@opindex @code{finline-arg-packing}\n+When passing an assumed-shape argument of a procedure as actual\n+argument to an assumed-size or explicit size or as argument to a\n+procedure that does not have an explicit interface, the argument may\n+have to be packed, that is put into contiguous memory. An example is\n+the call to @code{foo} in\n+@smallexample\n+  subroutine foo(a)\n+     real, dimension(*) :: a\n+  end subroutine foo\n+  subroutine bar(b)\n+     real, dimension(:) :: b\n+     call foo(b)\n+  end subroutine bar\n+@end smallexample\n+\n+When @option{-finline-arg-packing} is in effect, this packing will be\n+performed by inline code. This allows for more optimization while\n+increasing code size.\n+\n+@option{-finline-arg-packing} is implied by any of the @option{-O} options\n+except when optimizing for size via @option{-Os}.  If the code\n+contains a very large number of argument that have to be packed, code\n+size and also compilation time may become excessive.  If that is the\n+case, it may be better to disable this option.  Instances of packing\n+can be found by using by using @option{-Warray-temporaries}.\n+\n @item -fexternal-blas\n @opindex @code{fexternal-blas}\n This option will make @command{gfortran} generate calls to BLAS functions"}, {"sha": "38c889191c8ca88a5ff347aa9c114a9788e9d3d8", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -647,6 +647,10 @@ Enum(gfc_init_local_real) String(inf) Value(GFC_INIT_REAL_INF)\n EnumValue\n Enum(gfc_init_local_real) String(-inf) Value(GFC_INIT_REAL_NEG_INF)\n \n+finline-arg-packing\n+Fortran  Var(flag_inline_arg_packing) Init(-1)\n+-finline-arg-packing\tPerform argument packing inline\n+\n finline-matmul-limit=\n Fortran RejectNegative Joined UInteger Var(flag_inline_matmul_limit) Init(-1)\n -finline-matmul-limit=<n>\tSpecify the size of the largest matrix for which matmul will be inlined."}, {"sha": "19e68d5086fd9f30919c77ac1c51c0d9504739dc", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -467,6 +467,11 @@ gfc_post_options (const char **pfilename)\n   if (flag_frontend_loop_interchange == -1)\n     flag_frontend_loop_interchange = optimize;\n \n+  /* Do inline packing by default if optimizing, but not if\n+     optimizing for size.  */\n+  if (flag_inline_arg_packing == -1)\n+    flag_inline_arg_packing = optimize && !optimize_size;\n+\n   if (flag_max_array_constructor < 65535)\n     flag_max_array_constructor = 65535;\n "}, {"sha": "226fc3ab4be76cee887c47740b27f244cb193a4c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -8139,7 +8139,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n \t making the packing and unpacking operation visible to the\n \t optimizers.  */\n \n-      if (g77 && optimize && !optimize_size && expr->expr_type == EXPR_VARIABLE\n+      if (g77 && flag_inline_arg_packing && expr->expr_type == EXPR_VARIABLE\n \t  && !is_pointer (expr) && ! gfc_has_dimen_vector_ref (expr)\n \t  && !(expr->symtree->n.sym->as\n \t       && expr->symtree->n.sym->as->type == AS_ASSUMED_RANK)"}, {"sha": "957f62a2da39602b9a1de60d87175a7f8bea60d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -1,3 +1,14 @@\n+2019-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR middle-end/91512\n+\tPR fortran/92738\n+\t* invoke.texi: Document -finline-arg-packing.\n+\t* lang.opt: Add -finline-arg-packing.\n+\t* options.c (gfc_post_options): Handle -finline-arg-packing.\n+\t* trans-array.c (gfc_conv_array_parameter): Use\n+\tflag_inline_arg_packing instead of checking for optimize and\n+\toptimize_size.\n+\n 2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92996"}, {"sha": "ac9f7e9a1461bb348029c4137c00f4aef32cefb2", "filename": "gcc/testsuite/gfortran.dg/internal_pack_25.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d27703bc8777efe9cdf2a1d8cac7a08b1f7168/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_25.f90?ref=95d27703bc8777efe9cdf2a1d8cac7a08b1f7168", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fno-inline-arg-packing -O -fdump-tree-original\" }\n+! PR fortran/92738, middle-end/91512\n+! Check that -fno-inline-pack does indeed suppress inline packing.\n+module x\n+  implicit none\n+contains\n+  subroutine foo(x)\n+    real, dimension(:), intent(inout) :: x\n+    call bar (x, size(x))\n+  end subroutine foo\n+  subroutine bar (x, n)\n+    integer, intent(in) :: n\n+    real, dimension(n) :: x\n+    x = -x\n+  end subroutine bar\n+end module x\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_pack\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_unpack\" 1 \"original\" } }"}]}