{"sha": "d06a01bf68804185394809bfc9754dfe9c522639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2YTAxYmY2ODgwNDE4NTM5NDgwOWJmYzk3NTRkZmU5YzUyMjYzOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2012-12-12T13:07:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-12T13:07:19Z"}, "message": "re PR middle-end/55481 (-O2 generates a wrong-code infinite loop in C++Benchmark's simple_types_constant_folding int8 xor test)\n\n2012-12-12  Zdenek Dvorak  <ook@ucw.cz>\n\n\tPR tree-optimization/55481\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Fall\n\tback to general rewriting if we cannot leave an original biv\n\tdefinition alone.\n\n\t* gcc.dg/torture/pr55481.c: New testcase.\n\nFrom-SVN: r194444", "tree": {"sha": "21ace6b448063020524310c868dce7d1b8364db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ace6b448063020524310c868dce7d1b8364db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d06a01bf68804185394809bfc9754dfe9c522639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06a01bf68804185394809bfc9754dfe9c522639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06a01bf68804185394809bfc9754dfe9c522639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06a01bf68804185394809bfc9754dfe9c522639/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85619b6fc10c230dd34998b4e7b281c573143421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85619b6fc10c230dd34998b4e7b281c573143421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85619b6fc10c230dd34998b4e7b281c573143421"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "d9630ed74146fe04dde65eb6542fb764eeabfd63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d06a01bf68804185394809bfc9754dfe9c522639", "patch": "@@ -1,3 +1,10 @@\n+2012-12-12  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/55481\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Fall\n+\tback to general rewriting if we cannot leave an original biv\n+\tdefinition alone.\n+\n 2012-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/55659"}, {"sha": "35e21d682d65905a13f01e34050305986174f4a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d06a01bf68804185394809bfc9754dfe9c522639", "patch": "@@ -1,3 +1,8 @@\n+2012-12-12  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/55481\n+\t* gcc.dg/torture/pr55481.c: New testcase.\n+\n 2012-12-12  Steven Bosscher  <steven@gcc.gnu.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "26ba9ff7d998dbf30d7fc262ba7095a7d3f88b74", "filename": "gcc/testsuite/gcc.dg/torture/pr55481.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55481.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55481.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55481.c?ref=d06a01bf68804185394809bfc9754dfe9c522639", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+\n+int main()\n+{\n+  signed char result = 0;\n+  int n;\n+  for (n = 0; n < 13; ++n)\n+    {\n+      int tem = result;\n+      tem = tem + 31;\n+      result = tem;\n+    }\n+  if (result != -109)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c33fc7c6b8f6b8e5415381dc4a675dda58fdb936", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06a01bf68804185394809bfc9754dfe9c522639/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d06a01bf68804185394809bfc9754dfe9c522639", "patch": "@@ -6088,60 +6088,38 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n   if (cand->pos == IP_ORIGINAL\n       && cand->incremented_at == use->stmt)\n     {\n-      tree step, ctype, utype;\n-      enum tree_code incr_code = PLUS_EXPR, old_code;\n+      enum tree_code stmt_code;\n \n       gcc_assert (is_gimple_assign (use->stmt));\n       gcc_assert (gimple_assign_lhs (use->stmt) == cand->var_after);\n \n-      step = cand->iv->step;\n-      ctype = TREE_TYPE (step);\n-      utype = TREE_TYPE (cand->var_after);\n-      if (TREE_CODE (step) == NEGATE_EXPR)\n-\t{\n-\t  incr_code = MINUS_EXPR;\n-\t  step = TREE_OPERAND (step, 0);\n-\t}\n-\n       /* Check whether we may leave the computation unchanged.\n \t This is the case only if it does not rely on other\n \t computations in the loop -- otherwise, the computation\n \t we rely upon may be removed in remove_unused_ivs,\n \t thus leading to ICE.  */\n-      old_code = gimple_assign_rhs_code (use->stmt);\n-      if (old_code == PLUS_EXPR\n-\t  || old_code == MINUS_EXPR\n-\t  || old_code == POINTER_PLUS_EXPR)\n+      stmt_code = gimple_assign_rhs_code (use->stmt);\n+      if (stmt_code == PLUS_EXPR\n+\t  || stmt_code == MINUS_EXPR\n+\t  || stmt_code == POINTER_PLUS_EXPR)\n \t{\n \t  if (gimple_assign_rhs1 (use->stmt) == cand->var_before)\n \t    op = gimple_assign_rhs2 (use->stmt);\n-\t  else if (old_code != MINUS_EXPR\n-\t\t   && gimple_assign_rhs2 (use->stmt) == cand->var_before)\n+\t  else if (gimple_assign_rhs2 (use->stmt) == cand->var_before)\n \t    op = gimple_assign_rhs1 (use->stmt);\n \t  else\n \t    op = NULL_TREE;\n \t}\n       else\n \top = NULL_TREE;\n \n-      if (op\n-\t  && (TREE_CODE (op) == INTEGER_CST\n-\t      || operand_equal_p (op, step, 0)))\n+      if (op && expr_invariant_in_loop_p (data->current_loop, op))\n \treturn;\n-\n-      /* Otherwise, add the necessary computations to express\n-\t the iv.  */\n-      op = fold_convert (ctype, cand->var_before);\n-      comp = fold_convert (utype,\n-\t\t\t   build2 (incr_code, ctype, op,\n-\t\t\t\t   unshare_expr (step)));\n-    }\n-  else\n-    {\n-      comp = get_computation (data->current_loop, use, cand);\n-      gcc_assert (comp != NULL_TREE);\n     }\n \n+  comp = get_computation (data->current_loop, use, cand);\n+  gcc_assert (comp != NULL_TREE);\n+\n   switch (gimple_code (use->stmt))\n     {\n     case GIMPLE_PHI:"}]}