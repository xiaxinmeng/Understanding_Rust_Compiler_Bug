{"sha": "c69916605c40755b50a2b6db59a1963093236f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5OTE2NjA1YzQwNzU1YjUwYTJiNmRiNTlhMTk2MzA5MzIzNmYwNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-02-06T03:40:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-02-06T03:40:46Z"}, "message": "Makefile.in (c-common.o): Depend on $(EXPR_H).\n\n\t* Makefile.in (c-common.o): Depend on $(EXPR_H).\n\n\t* c-common.c: Include expr.h.\n\n\t* c-pragma.c (mark_align_stack): Add prototype.\n\n\t* caller-save.c (add_stored_regs): Likewise.\n\n\t* combine.c (record_promoted_value): Likewise.\n\n\t* i386.c (ix86_sched_reorder_pentium, ix86_sched_reorder_ppro):\n\tLikewise.\n\n\t* cppinit.c (new_pending_define): Likewise.\n\n\t* cpplib.c (skip_block_comment, skip_line_comment): Likewise.\n\n\t* dwarf2out.c (save_rtx, splice_child_die, reverse_die_lists,\n\tAT_class, AT_flag, AT_int, AT_unsigned, AT_string, AT_ref, AT_loc,\n\tAT_addr, AT_lbl, get_AT_ref, free_AT, free_die, local_scope_p,\n\tclass_scope_p): Likewise.\n\n\t* dwarf2out.h (dwarf2out_set_demangle_name_func,\n\tdwarf2out_add_library_unit_info): Likewise.\n\n\t* ggc.h (ggc_page_print_statistics): Likewise.\n\n\t* haifa-sched.c (propagate_deps): Likewise.\n\n\t* reg-stack.c (next_flags_user, record_label_references): Likewise.\n\n\t* rtl.h (set_stack_check_libfunc): Likewise.\n\n\t* toplev.h (set_fatal_function): Likewise.\n\n\t* toplev.c (set_fatal_function): Delete prototype.\n\n\t* diagnostic.c: Deconstify functions returning malloc'ed ptrs.\n\nFrom-SVN: r31810", "tree": {"sha": "eeea9d658a7f6cacbf960eeccca8c5075429a00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeea9d658a7f6cacbf960eeccca8c5075429a00a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c69916605c40755b50a2b6db59a1963093236f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69916605c40755b50a2b6db59a1963093236f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69916605c40755b50a2b6db59a1963093236f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69916605c40755b50a2b6db59a1963093236f04/comments", "author": null, "committer": null, "parents": [{"sha": "79f4e1c0af29778f98c6d52654983f869b887d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f4e1c0af29778f98c6d52654983f869b887d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f4e1c0af29778f98c6d52654983f869b887d5b"}], "stats": {"total": 131, "additions": 105, "deletions": 26}, "files": [{"sha": "39960099c3d60f896c3dd55c174be59890b303b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -1,3 +1,44 @@\n+2000-02-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (c-common.o): Depend on $(EXPR_H).\n+\n+\t* c-common.c: Include expr.h.\n+\n+\t* c-pragma.c (mark_align_stack): Add prototype.\n+\n+\t* caller-save.c (add_stored_regs): Likewise.\n+\n+\t* combine.c (record_promoted_value): Likewise.\n+\n+\t* i386.c (ix86_sched_reorder_pentium, ix86_sched_reorder_ppro):\n+\tLikewise.\n+\n+\t* cppinit.c (new_pending_define): Likewise.\n+\n+\t* cpplib.c (skip_block_comment, skip_line_comment): Likewise.\n+\n+\t* dwarf2out.c (save_rtx, splice_child_die, reverse_die_lists,\n+\tAT_class, AT_flag, AT_int, AT_unsigned, AT_string, AT_ref, AT_loc,\n+\tAT_addr, AT_lbl, get_AT_ref, free_AT, free_die, local_scope_p,\n+\tclass_scope_p): Likewise.\n+\n+\t* dwarf2out.h (dwarf2out_set_demangle_name_func,\n+\tdwarf2out_add_library_unit_info): Likewise.\n+\n+\t* ggc.h (ggc_page_print_statistics): Likewise.\n+\n+\t* haifa-sched.c (propagate_deps): Likewise.\n+\n+\t* reg-stack.c (next_flags_user, record_label_references): Likewise.\n+\n+\t* rtl.h (set_stack_check_libfunc): Likewise.\n+\n+\t* toplev.h (set_fatal_function): Likewise.\n+\n+\t* toplev.c (set_fatal_function): Delete prototype.\n+\t\n+\t* diagnostic.c: Deconstify functions returning malloc'ed ptrs.\n+\t\n 2000-02-05  Geoff Keating  <geoffk@cygnus.com>\n \n \t* ginclude/ppc-asm.h (FUNC_START): Use USER_LABEL_PREFIX."}, {"sha": "cb8ff00812884b98f72c14ebcc4e487e682de5b5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -1408,7 +1408,8 @@ s-under: $(GCC_PASSES)\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n-\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) ggc.h\n+\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) ggc.h \\\n+\t$(EXPR_H)\n \n # Language-independent files.\n "}, {"sha": "ede62f70a30725c842ab61b50bbfd4eb28df0c3a", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"rtl.h\"\n #include \"ggc.h\"\n+#include \"expr.h\"\n #include \"tm_p.h\"\n \n #if USE_CPPLIB"}, {"sha": "618a0d67fb8ca9a25a74fa866e4cb86c71b0ba8e", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -60,6 +60,9 @@ static int  default_alignment;\n \n static int  push_alignment PARAMS ((int, tree));\n static int  pop_alignment  PARAMS ((tree));\n+#ifdef HANDLE_PRAGMA_PACK_PUSH_POP\n+static void mark_align_stack PARAMS ((void *));\n+#endif\n \n /* Push an alignment value onto the stack.  */\n static int"}, {"sha": "65621adab365ca5677632b2fb80000b98d47a39d", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -93,6 +93,7 @@ static int insert_restore\t\tPARAMS ((struct insn_chain *, int, int,\n \t\t\t\t\t\t int));\n static struct insn_chain *insert_one_insn PARAMS ((struct insn_chain *, int,\n \t\t\t\t\t\t   enum insn_code, rtx));\n+static void add_stored_regs\t\tPARAMS ((rtx, rtx, void *));\n \f\n /* Initialize for caller-save.\n "}, {"sha": "d40b6b13b9c202e0f53b3d8a0dfdff919215e8df", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -417,6 +417,7 @@ static void distribute_notes\tPARAMS ((rtx, rtx, rtx, rtx, rtx, rtx));\n static void distribute_links\tPARAMS ((rtx));\n static void mark_used_regs_combine PARAMS ((rtx));\n static int insn_cuid\t\tPARAMS ((rtx));\n+static void record_promoted_value PARAMS ((rtx, rtx));\n \f\n /* Substitute NEWVAL, an rtx expression, into INTO, a place in some\n    insn.  The substitution can be undone by undo_all.  If INTO is already"}, {"sha": "20f55b1ba258e00d1ed579708103449a240f72a0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -402,6 +402,8 @@ static HOST_WIDE_INT ix86_compute_frame_size PARAMS((HOST_WIDE_INT,\n static int ix86_nsaved_regs PARAMS((void));\n static void ix86_emit_save_regs PARAMS((void));\n static void ix86_emit_epilogue_esp_adjustment PARAMS((int));\n+static void ix86_sched_reorder_pentium PARAMS((rtx *, rtx *));\n+static void ix86_sched_reorder_ppro PARAMS((rtx *, rtx *));\n \n struct ix86_address\n {\n@@ -6206,7 +6208,7 @@ ix86_pent_find_pair (e_ready, ready, type, first)\n \n /* Subroutines of ix86_sched_reorder.  */\n \n-void\n+static void\n ix86_sched_reorder_pentium (ready, e_ready)\n      rtx *ready;\n      rtx *e_ready;\n@@ -6271,7 +6273,7 @@ ix86_sched_reorder_pentium (ready, e_ready)\n     ix86_reorder_insn (insnp, e_ready - 1);\n }\n \n-void\n+static void\n ix86_sched_reorder_ppro (ready, e_ready)\n      rtx *ready;\n      rtx *e_ready;"}, {"sha": "07f3c170e12665f7494b6a6eddf69edc2042867a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -200,6 +200,7 @@ static void append_include_chain\tPARAMS ((cpp_reader *,\n static char *base_name\t\t\tPARAMS ((const char *));\n static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n+static void new_pending_define PARAMS ((struct cpp_options *, const char *));\n \n /* Last argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };"}, {"sha": "4ff14e380ee76132f06a913d6e8da379ac7d2a2f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -105,6 +105,8 @@ static void v_cpp_error_with_line PARAMS ((cpp_reader *, int, int,\n static void v_cpp_warning_with_line PARAMS ((cpp_reader *, int, int, const char *, va_list));\n static U_CHAR *detect_if_not_defined PARAMS ((cpp_reader *));\n static int consider_directive_while_skipping PARAMS ((cpp_reader *, IF_STACK_FRAME *));\n+static void skip_block_comment PARAMS ((cpp_reader *));\n+static void skip_line_comment PARAMS ((cpp_reader *));\n \n /* Here is the actual list of #-directives.\n    This table is ordered by frequency of occurrence; the numbers"}, {"sha": "4aa084b379bf043540f2667cc3cd3c03a9225fd5", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -45,27 +45,26 @@ Boston, MA 02111-1307, USA.  */\n struct output_buffer\n {\n   struct obstack obstack;       /* where we build the text to output */\n-  const char *prefix;           /* prefix of every new line  */\n+  char *prefix;                 /* prefix of every new line  */\n   int line_length;              /* current line length (in characters) */\n   int max_length;               /* maximum characters per line */\n };\n \n /* Prototypes. */\n static int doing_line_wrapping PARAMS ((void));\n-static void init_output_buffer PARAMS ((struct output_buffer*,\n-\t\t\t\t\tconst char *, int));\n-static const char *get_output_prefix PARAMS ((const struct output_buffer *));\n+static void init_output_buffer PARAMS ((struct output_buffer*, char *, int));\n+static char *get_output_prefix PARAMS ((const struct output_buffer *));\n static int output_space_left PARAMS ((const struct output_buffer *));\n static void emit_output_prefix PARAMS ((struct output_buffer *));\n static void output_newline PARAMS ((struct output_buffer *));\n static void output_append PARAMS ((struct output_buffer *, const char *,\n \t\t\t\t   const char *));\n static void output_puts PARAMS ((struct output_buffer *, const char *));\n static void dump_output PARAMS ((struct output_buffer *, FILE *));\n-static const char *vbuild_message_string PARAMS ((const char *, va_list));\n-static const char *build_message_string PARAMS ((const char *, ...))\n+static char *vbuild_message_string PARAMS ((const char *, va_list));\n+static char *build_message_string PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n-static const char *build_location_prefix PARAMS ((const char *, int, int));\n+static char *build_location_prefix PARAMS ((const char *, int, int));\n static void voutput_notice PARAMS ((struct output_buffer *, const char *,\n \t\t\t\t    va_list));\n static void output_printf PARAMS ((struct output_buffer *, const char *, ...))\n@@ -150,7 +149,7 @@ set_message_length (n)\n static void\n init_output_buffer (buffer, prefix, max_length)\n      struct output_buffer *buffer;\n-     const char *prefix;\n+     char *prefix;\n      int max_length;\n {\n   obstack_init (&buffer->obstack);\n@@ -161,7 +160,7 @@ init_output_buffer (buffer, prefix, max_length)\n \n /* Return BUFFER's prefix.  */\n \n-static const char *\n+static char *\n get_output_prefix (buffer)\n      const struct output_buffer *buffer;\n {\n@@ -263,16 +262,16 @@ dump_output (buffer, file)\n      struct output_buffer *buffer;\n      FILE *file;\n {\n-  const char *text;\n+  char *text;\n   \n   obstack_1grow (&buffer->obstack, '\\0');\n   text = obstack_finish (&buffer->obstack);\n   fputs (text, file);\n-  obstack_free (&buffer->obstack, (char *)text);\n+  obstack_free (&buffer->obstack, text);\n   buffer->line_length = 0;\n }\n \n-static const char *\n+static char *\n vbuild_message_string (msgid, ap)\n      const char *msgid;\n      va_list ap;\n@@ -286,14 +285,14 @@ vbuild_message_string (msgid, ap)\n /*  Return a malloc'd string containing MSGID formatted a la\n     printf.  The caller is reponsible for freeing the memory.  */\n \n-static const char *\n+static char *\n build_message_string VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *msgid;\n #endif\n   va_list ap;\n-  const char *str;\n+  char *str;\n \n   VA_START (ap, msgid);\n \n@@ -312,7 +311,7 @@ build_message_string VPARAMS ((const char *msgid, ...))\n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n \n-static const char *\n+static char *\n build_location_prefix (file, line, warn)\n      const char *file;\n      int line;\n@@ -342,10 +341,10 @@ voutput_notice (buffer, msgid, ap)\n      const char *msgid;\n      va_list ap;\n {\n-  const char *message = vbuild_message_string (msgid, ap);\n+  char *message = vbuild_message_string (msgid, ap);\n \n   output_puts (buffer, message);\n-  free ((char *)message);\n+  free (message);\n }\n \n \n@@ -392,7 +391,7 @@ line_wrapper_printf VPARAMS ((FILE *file, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif  \n \n-  init_output_buffer (&buffer, (const char *)NULL, output_maximum_width);\n+  init_output_buffer (&buffer, NULL, output_maximum_width);\n   voutput_notice (&buffer, msgid, ap);\n   dump_output (&buffer, file);\n \n@@ -1006,7 +1005,7 @@ default_print_error_function (file)\n {\n   if (last_error_function != current_function_decl)\n     {\n-      const char *prefix = NULL;\n+      char *prefix = NULL;\n       struct output_buffer buffer;\n       \n       if (file)\n@@ -1056,7 +1055,7 @@ default_print_error_function (file)\n       if (doing_line_wrapping ())\n         dump_output (&buffer, stderr);\n       \n-      free ((char *)prefix);\n+      free (prefix);\n     }\n }\n "}, {"sha": "5e09e4b9b2f17fac8624abcbf8ec86b2d9be52c0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -2515,6 +2515,9 @@ static void add_incomplete_type\t\tPARAMS ((tree));\n static void retry_incomplete_types\tPARAMS ((void));\n static void gen_type_die_for_member\tPARAMS ((tree, tree, dw_die_ref));\n static void gen_abstract_function\tPARAMS ((tree));\n+static rtx save_rtx\t\t\tPARAMS ((rtx));\n+static void splice_child_die\t\tPARAMS ((dw_die_ref, dw_die_ref));\n+static void reverse_die_lists\t\tPARAMS ((dw_die_ref));\n \n /* Section names used to hold DWARF debugging information.  */\n #ifndef DEBUG_INFO_SECTION\n@@ -3470,6 +3473,7 @@ add_dwarf_attr (die, attr)\n     }\n }\n \n+static inline dw_val_class AT_class PARAMS ((dw_attr_ref));\n static inline dw_val_class\n AT_class (a)\n      dw_attr_ref a;\n@@ -3494,6 +3498,7 @@ add_AT_flag (die, attr_kind, flag)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline unsigned AT_flag PARAMS ((dw_attr_ref));\n static inline unsigned\n AT_flag (a)\n      register dw_attr_ref a;\n@@ -3521,6 +3526,7 @@ add_AT_int (die, attr_kind, int_val)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline long int AT_int PARAMS ((dw_attr_ref));\n static inline long int\n AT_int (a)\n      register dw_attr_ref a;\n@@ -3548,6 +3554,7 @@ add_AT_unsigned (die, attr_kind, unsigned_val)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline unsigned long AT_unsigned PARAMS ((dw_attr_ref));\n static inline unsigned long\n AT_unsigned (a)\n      register dw_attr_ref a;\n@@ -3613,6 +3620,7 @@ add_AT_string (die, attr_kind, str)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline const char *AT_string PARAMS ((dw_attr_ref));\n static inline const char *\n AT_string (a)\n      register dw_attr_ref a;\n@@ -3640,6 +3648,7 @@ add_AT_die_ref (die, attr_kind, targ_die)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline dw_die_ref AT_ref PARAMS ((dw_attr_ref));\n static inline dw_die_ref\n AT_ref (a)\n      register dw_attr_ref a;\n@@ -3684,6 +3693,7 @@ add_AT_loc (die, attr_kind, loc)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline dw_loc_descr_ref AT_loc PARAMS ((dw_attr_ref));\n static inline dw_loc_descr_ref\n AT_loc (a)\n      register dw_attr_ref a;\n@@ -3711,6 +3721,7 @@ add_AT_addr (die, attr_kind, addr)\n   add_dwarf_attr (die, attr);\n }\n \n+static inline rtx AT_addr PARAMS ((dw_attr_ref));\n static inline rtx\n AT_addr (a)\n      register dw_attr_ref a;\n@@ -3756,6 +3767,7 @@ add_AT_lbl_offset (die, attr_kind, label)\n   \n }\n \n+static inline const char *AT_lbl PARAMS ((dw_attr_ref));\n static inline const char *\n AT_lbl (a)\n      register dw_attr_ref a;\n@@ -3858,6 +3870,7 @@ get_AT_unsigned (die, attr_kind)\n   return AT_unsigned (a);\n }\n \n+static inline dw_die_ref get_AT_ref PARAMS ((dw_die_ref, enum dwarf_attribute));\n static inline dw_die_ref\n get_AT_ref (die, attr_kind)\n      dw_die_ref die;\n@@ -3886,6 +3899,7 @@ is_fortran ()\n \n /* Free up the memory used by A.  */\n \n+static inline void free_AT PARAMS ((dw_attr_ref));\n static inline void\n free_AT (a)\n      dw_attr_ref a;\n@@ -3932,6 +3946,7 @@ remove_AT (die, attr_kind)\n \n /* Free up the memory used by DIE.  */\n \n+static inline void free_die PARAMS ((dw_die_ref));\n static inline void\n free_die (die)\n      dw_die_ref die;\n@@ -7548,6 +7563,7 @@ scope_die_for (t, context_die)\n \n /* Returns nonzero iff CONTEXT_DIE is internal to a function.  */\n \n+static inline int local_scope_p PARAMS ((dw_die_ref));\n static inline int\n local_scope_p (context_die)\n      dw_die_ref context_die;\n@@ -7561,6 +7577,7 @@ local_scope_p (context_die)\n \n /* Returns nonzero iff CONTEXT_DIE is a class.  */\n \n+static inline int class_scope_p PARAMS ((dw_die_ref));\n static inline int\n class_scope_p (context_die)\n      dw_die_ref context_die;\n@@ -9410,8 +9427,8 @@ gen_decl_die (decl, context_die)\n \n void\n dwarf2out_add_library_unit_info (filename, context_list)\n-     char *filename;\n-     char *context_list;\n+     const char *filename;\n+     const char *context_list;\n {\n   unsigned int file_index;\n "}, {"sha": "1c19f3d266b552f1a06c57b54fa5d1e17400db37", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -39,3 +39,5 @@ extern void dwarf2out_frame_finish\tPARAMS ((void));\n extern void debug_dwarf\t\t\tPARAMS ((void));\n struct die_struct;\n extern void debug_dwarf_die\t\tPARAMS ((struct die_struct *));\n+extern void dwarf2out_set_demangle_name_func PARAMS ((const char *(*) (const char *)));\n+extern void dwarf2out_add_library_unit_info PARAMS ((const char *, const char *));"}, {"sha": "781c15afa1d8cb104c5b2b336f5c8375cd0b21b1", "filename": "gcc/ggc.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -205,3 +205,6 @@ size_t ggc_get_size PARAMS ((void *));\n /* Used by the various collectors to gather and print statistics that\n    do not depend on the collector in use.  */\n void ggc_print_statistics PARAMS ((FILE *, ggc_statistics *));\n+\n+/* Print allocation statistics.  */\n+extern void ggc_page_print_statistics PARAMS ((void));"}, {"sha": "8def49ff0269892fb7c170241fd2de102ad96de6", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -788,6 +788,7 @@ static rtx group_leader PARAMS ((rtx));\n static int set_priorities PARAMS ((int));\n static void init_deps PARAMS ((struct deps *));\n static void schedule_region PARAMS ((int));\n+static void propagate_deps PARAMS ((int, struct deps *, int));\n \n #endif /* INSN_SCHEDULING */\n \f"}, {"sha": "70e877bfded1a1bb60fbc9c0448e6959432f3b25", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -259,6 +259,8 @@ static int convert_regs_1\t\tPARAMS ((FILE *, basic_block));\n static int convert_regs_2\t\tPARAMS ((FILE *, basic_block));\n static int convert_regs\t\t\tPARAMS ((FILE *));\n static void print_stack \t\tPARAMS ((FILE *, stack));\n+static rtx next_flags_user \t\tPARAMS ((rtx));\n+static void record_label_references\tPARAMS ((rtx, rtx));\n \f\n /* Return non-zero if any stack register is mentioned somewhere within PAT.  */\n "}, {"sha": "f068fab367beb90ae908e98d95e0c1ae28e6e6ad", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -956,6 +956,7 @@ extern int ceil_log2\t\t\tPARAMS ((unsigned HOST_WIDE_INT));\n   plus_constant_for_output_wide (X, (HOST_WIDE_INT) (C))\n \n /* In explow.c */\n+extern void set_stack_check_libfunc PARAMS ((rtx));\n extern HOST_WIDE_INT trunc_int_for_mode\tPARAMS ((HOST_WIDE_INT,\n \t\t\t\t\t       enum machine_mode));\n extern rtx plus_constant_wide\t\t PARAMS ((rtx, HOST_WIDE_INT));"}, {"sha": "304abc818481ddf28035990e2bf3a9247f66c1dd", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -152,7 +152,6 @@ extern tree last_assemble_variable_decl;\n static void set_target_switch PARAMS ((const char *));\n static const char *decl_name PARAMS ((tree, int));\n \n-extern void set_fatal_function PARAMS ((void (*)(const char *, va_list)));\n static void float_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n static void pipe_closed PARAMS ((int)) ATTRIBUTE_NORETURN;\n #ifdef ASM_IDENTIFY_LANGUAGE"}, {"sha": "74300b41c45dacbb18c156807798bbec7128ed37", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69916605c40755b50a2b6db59a1963093236f04/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=c69916605c40755b50a2b6db59a1963093236f04", "patch": "@@ -134,4 +134,6 @@ extern int warningcount;\n extern int sorrycount;\n \n extern const char *progname;\n+\n+extern void set_fatal_function PARAMS ((void (*)(const char *, va_list)));\n #endif /* __GCC_TOPLEV_H */"}]}