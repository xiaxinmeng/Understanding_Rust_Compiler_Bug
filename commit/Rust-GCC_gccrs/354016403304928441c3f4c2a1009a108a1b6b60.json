{"sha": "354016403304928441c3f4c2a1009a108a1b6b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0MDE2NDAzMzA0OTI4NDQxYzNmNGMyYTEwMDlhMTA4YTFiNmI2MA==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2015-08-26T03:39:17Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-08-26T03:39:17Z"}, "message": "fold-const.c (fold_binary_loc): Move Optimize root(x)*root(y)\tas root(x*y) to match.pd.\n\n2015-08-26  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* fold-const.c (fold_binary_loc) : Move Optimize \n\troot(x)*root(y)\tas root(x*y) to match.pd.\n\tMove Optimize expN(x)*expN(y) as expN(x+y) to match.pd.\n\tMove Optimize pow(x,y)*pow(x,z) as pow(x,y+z) to match.pd.\n\tMove Optimize a/root(b/c) into a*root(c/b) to match.pd.\n\tMove Optimize x/expN(y) into x*expN(-y) to match.pd.\n\n\t* match.pd (mult (root:s @0) (root:s @1)): New simplifier.\n\t(mult (POW:s @0 @1) (POW:s @0 @2)) : New simplifier.\n\t(mult (exps:s @0) (exps:s @1)) : New simplifier.\n\t(rdiv @0 (root:s (rdiv:s @1 @2))) : New simplifier.\n\t(rdiv @0 (exps:s @1)) : New simplifier.\n\nFrom-SVN: r227207", "tree": {"sha": "28feaf1844e9260eba866a5a3cc14df7aa00aca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28feaf1844e9260eba866a5a3cc14df7aa00aca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354016403304928441c3f4c2a1009a108a1b6b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354016403304928441c3f4c2a1009a108a1b6b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354016403304928441c3f4c2a1009a108a1b6b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354016403304928441c3f4c2a1009a108a1b6b60/comments", "author": null, "committer": null, "parents": [{"sha": "6031a5e32cc168cae5fe9fa06a2557e0b20a5a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6031a5e32cc168cae5fe9fa06a2557e0b20a5a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6031a5e32cc168cae5fe9fa06a2557e0b20a5a81"}], "stats": {"total": 123, "additions": 41, "deletions": 82}, "files": [{"sha": "9a240fc9a6cc9dd7f0196e33bc40977cd95a6194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=354016403304928441c3f4c2a1009a108a1b6b60", "patch": "@@ -1,3 +1,17 @@\n+2015-08-26  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (fold_binary_loc) : Move Optimize \n+\troot(x)*root(y)\tas root(x*y) to match.pd.\n+\tMove Optimize expN(x)*expN(y) as expN(x+y) to match.pd.\n+\tMove Optimize pow(x,y)*pow(x,z) as pow(x,y+z) to match.pd.\n+\tMove Optimize a/root(b/c) into a*root(c/b) to match.pd.\n+\tMove Optimize x/expN(y) into x*expN(-y) to match.pd.\n+\t* match.pd (mult (root:s @0) (root:s @1)): New simplifier.\n+\t(mult (POW:s @0 @1) (POW:s @0 @2)) : New simplifier.\n+\t(mult (exps:s @0) (exps:s @1)) : New simplifier.\n+\t(rdiv @0 (root:s (rdiv:s @1 @2))) : New simplifier.\n+\t(rdiv @0 (exps:s @1)) : New simplifier.\n+\n 2015-08-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c (driver::finalize): Only assign to extra_specs if"}, {"sha": "c826e6790cdab588932ff3e0d948a4fff121e74e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=354016403304928441c3f4c2a1009a108a1b6b60", "patch": "@@ -9947,51 +9947,6 @@ fold_binary_loc (location_t loc,\n \n \t  if (flag_unsafe_math_optimizations)\n \t    {\n-\t      enum built_in_function fcode0 = builtin_mathfn_code (arg0);\n-\t      enum built_in_function fcode1 = builtin_mathfn_code (arg1);\n-\n-\t      /* Optimizations of root(...)*root(...).  */\n-\t      if (fcode0 == fcode1 && BUILTIN_ROOT_P (fcode0))\n-\t\t{\n-\t\t  tree rootfn, arg;\n-\t\t  tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t\t  tree arg10 = CALL_EXPR_ARG (arg1, 0);\n-\n-\t          /* Optimize root(x)*root(y) as root(x*y).  */\n-\t\t  rootfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t  arg = fold_build2_loc (loc, MULT_EXPR, type, arg00, arg10);\n-\t\t  return build_call_expr_loc (loc, rootfn, 1, arg);\n-\t\t}\n-\n-\t      /* Optimize expN(x)*expN(y) as expN(x+y).  */\n-\t      if (fcode0 == fcode1 && BUILTIN_EXPONENT_P (fcode0))\n-\t\t{\n-\t\t  tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t  tree arg = fold_build2_loc (loc, PLUS_EXPR, type,\n-\t\t\t\t\t  CALL_EXPR_ARG (arg0, 0),\n-\t\t\t\t\t  CALL_EXPR_ARG (arg1, 0));\n-\t\t  return build_call_expr_loc (loc, expfn, 1, arg);\n-\t\t}\n-\n-\t      /* Optimizations of pow(...)*pow(...).  */\n-\t      if ((fcode0 == BUILT_IN_POW && fcode1 == BUILT_IN_POW)\n-\t\t  || (fcode0 == BUILT_IN_POWF && fcode1 == BUILT_IN_POWF)\n-\t\t  || (fcode0 == BUILT_IN_POWL && fcode1 == BUILT_IN_POWL))\n-\t\t{\n-\t\t  tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t\t  tree arg01 = CALL_EXPR_ARG (arg0, 1);\n-\t\t  tree arg10 = CALL_EXPR_ARG (arg1, 0);\n-\t\t  tree arg11 = CALL_EXPR_ARG (arg1, 1);\n-\n-\t\t  /* Optimize pow(x,y)*pow(x,z) as pow(x,y+z).  */\n-\t\t  if (operand_equal_p (arg00, arg10, 0))\n-\t\t    {\n-\t\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t      tree arg = fold_build2_loc (loc, PLUS_EXPR, type,\n-\t\t\t\t\t      arg01, arg11);\n-\t\t      return build_call_expr_loc (loc, powfn, 2, arg00, arg);\n-\t\t    }\n-\t\t}\n \n \t      /* Canonicalize x*x as pow(x,2.0), which is expanded as x*x.  */\n \t      if (!in_gimple_form\n@@ -10403,40 +10358,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\tTREE_OPERAND (arg1, 0));\n \t}\n \n-      if (flag_unsafe_math_optimizations)\n-\t{\n-\t  enum built_in_function fcode1 = builtin_mathfn_code (arg1);\n-\n-\t  /* Optimize a/root(b/c) into a*root(c/b).  */\n-\t  if (BUILTIN_CBRT_P (fcode1))\n-\t    {\n-\t      tree rootarg = CALL_EXPR_ARG (arg1, 0);\n-\n-\t      if (TREE_CODE (rootarg) == RDIV_EXPR)\n-\t\t{\n-\t\t  tree rootfn = TREE_OPERAND (CALL_EXPR_FN (arg1), 0);\n-\t\t  tree b = TREE_OPERAND (rootarg, 0);\n-\t\t  tree c = TREE_OPERAND (rootarg, 1);\n-\n-\t\t  tree tmp = fold_build2_loc (loc, RDIV_EXPR, type, c, b);\n-\n-\t\t  tmp = build_call_expr_loc (loc, rootfn, 1, tmp);\n-\t\t  return fold_build2_loc (loc, MULT_EXPR, type, arg0, tmp);\n-\t\t}\n-\t    }\n-\n-\t  /* Optimize x/expN(y) into x*expN(-y).  */\n-\t  if (BUILTIN_EXPONENT_P (fcode1))\n-\t    {\n-\t      tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg1), 0);\n-\t      tree arg = negate_expr (CALL_EXPR_ARG (arg1, 0));\n-\t      arg1 = build_call_expr_loc (loc,\n-\t\t\t\t      expfn, 1,\n-\t\t\t\t      fold_convert_loc (loc, type, arg));\n-\t      return fold_build2_loc (loc, MULT_EXPR, type, arg0, arg1);\n-\t    }\n-\n-\t}\n       return NULL_TREE;\n \n     case TRUNC_DIV_EXPR:"}, {"sha": "289bc5c5d58d775d98cd9a3cb7221fcb11ec0d95", "filename": "gcc/match.pd", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354016403304928441c3f4c2a1009a108a1b6b60/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=354016403304928441c3f4c2a1009a108a1b6b60", "patch": "@@ -2014,11 +2014,28 @@ along with GCC; see the file COPYING3.  If not see\n   (if (!HONOR_SNANS (type))\n    @0))\n \n+ /* Simplify sqrt(x) * sqrt(y) -> sqrt(x*y).  */\n+ (for root (SQRT CBRT)\n+  (simplify\n+   (mult (root:s @0) (root:s @1))\n+    (root (mult @0 @1))))\n+\n+ /* Simplify pow(x,y) * pow(x,z) -> pow(x,y+z). */\n+ (simplify\n+  (mult (POW:s @0 @1) (POW:s @0 @2))\n+   (POW @0 (plus @1 @2)))\n+\n  /* Simplify pow(x,y) * pow(z,y) -> pow(x*z,y). */\n  (simplify\n   (mult (POW:s @0 @1) (POW:s @2 @1))\n    (POW (mult @0 @2) @1))\n \n+ /* Simplify expN(x) * expN(y) -> expN(x+y). */\n+ (for exps (EXP EXP2 EXP10 POW10)\n+  (simplify\n+   (mult (exps:s @0) (exps:s @1))\n+    (exps (plus @0 @1))))\n+\n  /* Simplify tan(x) * cos(x) -> sin(x). */\n  (simplify\n   (mult:c (TAN:s @0) (COS:s @0))\n@@ -2061,9 +2078,16 @@ along with GCC; see the file COPYING3.  If not see\n    (POW @0 (minus @1 { build_one_cst (type); }))))\n \n  /* Simplify a/root(b/c) into a*root(c/b).  */\n- (simplify\n-  (rdiv @0 (SQRT:s (rdiv:s @1 @2)))\n-   (mult @0 (SQRT (rdiv @2 @1))))\n+ (for root (SQRT CBRT)\n+  (simplify\n+   (rdiv @0 (root:s (rdiv:s @1 @2)))\n+    (mult @0 (root (rdiv @2 @1)))))\n+\n+ /* Simplify x/expN(y) into x*expN(-y).  */\n+ (for exps (EXP EXP2 EXP10 POW10)\n+  (simplify\n+   (rdiv @0 (exps:s @1))\n+    (mult @0 (exps (negate @1)))))\n \n  /* Simplify x / pow (y,z) -> x * pow(y,-z). */\n  (simplify"}]}