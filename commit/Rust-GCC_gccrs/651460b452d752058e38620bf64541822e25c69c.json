{"sha": "651460b452d752058e38620bf64541822e25c69c", "node_id": "C_kwDOANBUbNoAKDY1MTQ2MGI0NTJkNzUyMDU4ZTM4NjIwYmY2NDU0MTgyMmUyNWM2OWM", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-01-20T14:36:23Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-23T10:38:35Z"}, "message": "[PATCH 10/15] arm: Implement cortex-M return signing address codegen\n\nHi all,\n\nthis patch enables address return signature and verification based on\nArmv8.1-M Pointer Authentication [1].\n\nTo sign the return address, we use the PAC R12, LR, SP instruction\nupon function entry.  This is signing LR using SP and storing the\nresult in R12.  R12 will be pushed into the stack.\n\nDuring function epilogue R12 will be popped and AUT R12, LR, SP will\nbe used to verify that the content of LR is still valid before return.\n\nHere an example of PAC instrumented function prologue and epilogue:\n\nvoid foo (void);\n\nint main()\n{\n  foo ();\n  return 0;\n}\n\nCompiled with '-march=armv8.1-m.main -mbranch-protection=pac-ret\n-mthumb' translates into:\n\nmain:\n\tpac\tip, lr, sp\n\tpush\t{r3, r7, ip, lr}\n\tadd\tr7, sp, #0\n\tbl\tfoo\n\tmovs\tr3, #0\n\tmov\tr0, r3\n\tpop\t{r3, r7, ip, lr}\n\taut\tip, lr, sp\n\tbx\tlr\n\nThe patch also takes care of generating a PACBTI instruction in place\nof the sequence BTI+PAC when Branch Target Identification is enabled\ncontextually.\n\nEx. the previous example compiled with '-march=armv8.1-m.main\n-mbranch-protection=pac-ret+bti -mthumb' translates into:\n\nmain:\n\tpacbti\tip, lr, sp\n\tpush\t{r3, r7, ip, lr}\n\tadd\tr7, sp, #0\n\tbl\tfoo\n\tmovs\tr3, #0\n\tmov\tr0, r3\n\tpop\t{r3, r7, ip, lr}\n\taut\tip, lr, sp\n\tbx\tlr\n\nAs part of previous upstream suggestions a test for varargs has been\nadded and '-mtpcs-frame' is deemed being incompatible with this return\nsigning address feature being introduced.\n\n[1] <https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/armv8-1-m-pointer-authentication-and-branch-target-identification-extension>\n\ngcc/\n\t* config/arm/arm.h (arm_arch8m_main): Declare it.\n\t* config/arm/arm-protos.h (arm_current_function_pac_enabled_p):\n\tDeclare it.\n\t* config/arm/arm.cc (arm_arch8m_main): Define it.\n\t(arm_option_reconfigure_globals): Set arm_arch8m_main.\n\t(arm_compute_frame_layout, arm_expand_prologue)\n\t(thumb2_expand_return, arm_expand_epilogue)\n\t(arm_conditional_register_usage): Update for pac codegen.\n\t(arm_current_function_pac_enabled_p): New function.\n\t(aarch_bti_enabled) New function.\n\t(use_return_insn): Return zero when pac is enabled.\n\t* config/arm/arm.md (pac_ip_lr_sp, pacbti_ip_lr_sp, aut_ip_lr_sp):\n\tAdd new patterns.\n\t* config/arm/unspecs.md (UNSPEC_PAC_NOP)\n\t(VUNSPEC_PACBTI_NOP, VUNSPEC_AUT_NOP): Add unspecs.\n\ngcc/testsuite/\n\n\t* gcc.target/arm/pac.h : New file.\n\t* gcc.target/arm/pac-1.c : New test case.\n\t* gcc.target/arm/pac-2.c : Likewise.\n\t* gcc.target/arm/pac-3.c : Likewise.\n\t* gcc.target/arm/pac-4.c : Likewise.\n\t* gcc.target/arm/pac-5.c : Likewise.\n\t* gcc.target/arm/pac-6.c : Likewise.\n\t* gcc.target/arm/pac-7.c : Likewise.\n\t* gcc.target/arm/pac-8.c : Likewise.\n\t* gcc.target/arm/pac-9.c : Likewise.\n\t* gcc.target/arm/pac-10.c : Likewise.\n\t* gcc.target/arm/pac-11.c : Likewise.", "tree": {"sha": "7343d35f50cbfdfef62339442c00715609932f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7343d35f50cbfdfef62339442c00715609932f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/651460b452d752058e38620bf64541822e25c69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651460b452d752058e38620bf64541822e25c69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651460b452d752058e38620bf64541822e25c69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651460b452d752058e38620bf64541822e25c69c/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea85c669704332baacfe8a50f18d8498a025309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea85c669704332baacfe8a50f18d8498a025309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea85c669704332baacfe8a50f18d8498a025309"}], "stats": {"total": 314, "additions": 305, "deletions": 9}, "files": [{"sha": "29a4ce5c06ad738131f749421e07b6ccd3ea2087", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -379,6 +379,7 @@ extern int vfp3_const_double_for_bits (rtx);\n extern void arm_emit_coreregs_64bit_shift (enum rtx_code, rtx, rtx, rtx, rtx,\n \t\t\t\t\t   rtx);\n extern bool arm_fusion_enabled_p (tune_params::fuse_ops);\n+extern bool arm_current_function_pac_enabled_p (void);\n extern bool arm_valid_symbolic_address_p (rtx);\n extern bool arm_validize_comparison (rtx *, rtx *, rtx *);\n extern bool arm_expand_vector_compare (rtx, rtx_code, rtx, rtx, bool);"}, {"sha": "33ec15c4296928ac75d4bc1745ec00db42df63cc", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -923,6 +923,11 @@ int arm_arch8_3 = 0;\n \n /* Nonzero if this chip supports the ARM Architecture 8.4 extensions.  */\n int arm_arch8_4 = 0;\n+\n+/* Nonzero if this chip supports the ARM Architecture 8-M Mainline\n+   extensions.  */\n+int arm_arch8m_main = 0;\n+\n /* Nonzero if this chip supports the ARM Architecture 8.1-M Mainline\n    extensions.  */\n int arm_arch8_1m_main = 0;\n@@ -3205,6 +3210,15 @@ arm_option_override_internal (struct gcc_options *opts,\n       arm_stack_protector_guard_offset = offs;\n     }\n \n+  if (arm_current_function_pac_enabled_p ())\n+    {\n+      if (!arm_arch8m_main)\n+        error (\"This architecture does not support branch protection \"\n+               \"instructions\");\n+      if (TARGET_TPCS_FRAME)\n+        sorry (\"Return address signing is not supported with %<-mtpcs-frame%>.\");\n+    }\n+\n #ifdef SUBTARGET_OVERRIDE_INTERNAL_OPTIONS\n   SUBTARGET_OVERRIDE_INTERNAL_OPTIONS;\n #endif\n@@ -3851,6 +3865,7 @@ arm_option_reconfigure_globals (void)\n   arm_arch_arm_hwdiv = bitmap_bit_p (arm_active_target.isa, isa_bit_adiv);\n   arm_arch_crc = bitmap_bit_p (arm_active_target.isa, isa_bit_crc32);\n   arm_arch_cmse = bitmap_bit_p (arm_active_target.isa, isa_bit_cmse);\n+  arm_arch8m_main = arm_arch7 && arm_arch_cmse;\n   arm_arch_lpae = bitmap_bit_p (arm_active_target.isa, isa_bit_lpae);\n   arm_arch_i8mm = bitmap_bit_p (arm_active_target.isa, isa_bit_i8mm);\n   arm_arch_bf16 = bitmap_bit_p (arm_active_target.isa, isa_bit_bf16);\n@@ -4350,6 +4365,12 @@ use_return_insn (int iscond, rtx sibling)\n   if (!reload_completed)\n     return 0;\n \n+  /* Never use a return instruction when return address signing\n+     mechanism is enabled as it requires more than one\n+     instruction.  */\n+  if (arm_current_function_pac_enabled_p ())\n+    return 0;\n+\n   func_type = arm_current_func_type ();\n \n   /* Naked, volatile and stack alignment functions need special\n@@ -21245,6 +21266,9 @@ arm_compute_save_core_reg_mask (void)\n \n   save_reg_mask |= arm_compute_save_reg0_reg12_mask ();\n \n+  if (arm_current_function_pac_enabled_p ())\n+    save_reg_mask |= 1 << IP_REGNUM;\n+\n   /* Decide if we need to save the link register.\n      Interrupt routines have their own banked link register,\n      so they never need to save it.\n@@ -23536,12 +23560,13 @@ arm_expand_prologue (void)\n \n   /* The static chain register is the same as the IP register.  If it is\n      clobbered when creating the frame, we need to save and restore it.  */\n-  clobber_ip = IS_NESTED (func_type)\n-\t       && ((TARGET_APCS_FRAME && frame_pointer_needed && TARGET_ARM)\n-\t\t   || ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n-\t\t\t|| flag_stack_clash_protection)\n-\t\t       && !df_regs_ever_live_p (LR_REGNUM)\n-\t\t       && arm_r3_live_at_start_p ()));\n+  clobber_ip = (IS_NESTED (func_type)\n+                && (((TARGET_APCS_FRAME && frame_pointer_needed && TARGET_ARM)\n+                     || ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+                          || flag_stack_clash_protection)\n+                         && !df_regs_ever_live_p (LR_REGNUM)\n+                         && arm_r3_live_at_start_p ()))\n+                    || arm_current_function_pac_enabled_p ()));\n \n   /* Find somewhere to store IP whilst the frame is being created.\n      We try the following places in order:\n@@ -23566,7 +23591,6 @@ arm_expand_prologue (void)\n \t{\n \t  rtx addr, dwarf;\n \n-\t  gcc_assert(arm_compute_static_chain_stack_bytes() == 4);\n \t  saved_regs += 4;\n \n \t  addr = gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx);\n@@ -23617,6 +23641,17 @@ arm_expand_prologue (void)\n \t}\n     }\n \n+  if (arm_current_function_pac_enabled_p ())\n+    {\n+      /* If IP was clobbered we only emit a PAC instruction as the BTI\n+         one will be added before the push of the clobbered IP (if\n+         necessary) by the bti pass.  */\n+      if (aarch_bti_enabled () && !clobber_ip)\n+\temit_insn (gen_pacbti_nop ());\n+      else\n+\temit_insn (gen_pac_nop ());\n+    }\n+\n   if (TARGET_APCS_FRAME && frame_pointer_needed && TARGET_ARM)\n     {\n       if (IS_INTERRUPT (func_type))\n@@ -27428,7 +27463,14 @@ thumb2_expand_return (bool simple_return)\n \t to assert it for now to ensure that future code changes do not silently\n \t change this behavior.  */\n       gcc_assert (!IS_CMSE_ENTRY (arm_current_func_type ()));\n-      if (num_regs == 1)\n+      if (arm_current_function_pac_enabled_p ())\n+        {\n+          gcc_assert (!(saved_regs_mask & (1 << PC_REGNUM)));\n+          arm_emit_multi_reg_pop (saved_regs_mask);\n+          emit_insn (gen_aut_nop ());\n+          emit_jump_insn (simple_return_rtx);\n+        }\n+      else if (num_regs == 1)\n         {\n           rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n           rtx reg = gen_rtx_REG (SImode, PC_REGNUM);\n@@ -27852,7 +27894,8 @@ arm_expand_epilogue (bool really_return)\n           && really_return\n           && crtl->args.pretend_args_size == 0\n           && saved_regs_mask & (1 << LR_REGNUM)\n-          && !crtl->calls_eh_return)\n+          && !crtl->calls_eh_return\n+\t  && !arm_current_function_pac_enabled_p ())\n         {\n           saved_regs_mask &= ~(1 << LR_REGNUM);\n           saved_regs_mask |= (1 << PC_REGNUM);\n@@ -27966,6 +28009,9 @@ arm_expand_epilogue (bool really_return)\n \t}\n     }\n \n+  if (arm_current_function_pac_enabled_p ())\n+    emit_insn (gen_aut_nop ());\n+\n   if (!really_return)\n     return;\n \n@@ -33067,6 +33113,22 @@ arm_fusion_enabled_p (tune_params::fuse_ops op)\n   return current_tune->fusible_ops & op;\n }\n \n+/* Return TRUE if return address signing mechanism is enabled.  */\n+bool\n+arm_current_function_pac_enabled_p (void)\n+{\n+  return (aarch_ra_sign_scope == AARCH_FUNCTION_ALL\n+          || (aarch_ra_sign_scope == AARCH_FUNCTION_NON_LEAF\n+              && !crtl->is_leaf));\n+}\n+\n+/* Return TRUE if Branch Target Identification Mechanism is enabled.  */\n+static bool\n+aarch_bti_enabled ()\n+{\n+  return false;\n+}\n+\n /* Implement TARGET_SCHED_CAN_SPECULATE_INSN.  Return true if INSN can be\n    scheduled for speculative execution.  Reject the long-running division\n    and square-root instructions.  */"}, {"sha": "97e2fda74646e2c93ea5af2290d7dd25501c8ad0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -506,6 +506,10 @@ extern int arm_arch8_3;\n /* Nonzero if this chip supports the ARM Architecture 8.4 extensions.  */\n extern int arm_arch8_4;\n \n+/* Nonzero if this chip supports the ARM Architecture 8-M Mainline\n+   extensions.  */\n+extern int arm_arch8m_main;\n+\n /* Nonzero if this chip supports the ARM Architecture 8.1-M Mainline\n    extensions.  */\n extern int arm_arch8_1m_main;"}, {"sha": "2695d0b1f7867c5c2128b80e8d28fccbb1c43ca9", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -12986,6 +12986,29 @@\n    (set_attr \"length\" \"8\")]\n )\n \n+(define_insn \"pac_nop\"\n+  [(set (reg:SI IP_REGNUM)\n+\t(unspec:SI [(reg:SI SP_REGNUM) (reg:SI LR_REGNUM)]\n+\t\t   UNSPEC_PAC_NOP))]\n+  \"arm_arch8m_main\"\n+  \"pac\\t%|ip, %|lr, %|sp\"\n+  [(set_attr \"conds\" \"unconditional\")])\n+\n+(define_insn \"pacbti_nop\"\n+  [(set (reg:SI IP_REGNUM)\n+\t(unspec_volatile:SI [(reg:SI SP_REGNUM) (reg:SI LR_REGNUM)]\n+\t\t\t    VUNSPEC_PACBTI_NOP))]\n+  \"arm_arch8m_main\"\n+  \"pacbti\\t%|ip, %|lr, %|sp\"\n+  [(set_attr \"conds\" \"unconditional\")])\n+\n+(define_insn \"aut_nop\"\n+  [(unspec_volatile:SI [(reg:SI IP_REGNUM) (reg:SI SP_REGNUM) (reg:SI LR_REGNUM)]\n+\t\t       VUNSPEC_AUT_NOP)]\n+  \"arm_arch8m_main\"\n+  \"aut\\t%|ip, %|lr, %|sp\"\n+  [(set_attr \"conds\" \"unconditional\")])\n+\n ;; Vector bits common to IWMMXT, Neon and MVE\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "5e964e663fd39aa46f0ac80008dfd948d1f3196a", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -159,6 +159,7 @@\n   UNSPEC_VCDE\t\t; Custom Datapath Extension instruction.\n   UNSPEC_VCDEA\t\t; Custom Datapath Extension instruction.\n   UNSPEC_DLS\t\t; Used for DLS (Do Loop Start), Armv8.1-M Mainline instruction\n+  UNSPEC_PAC_NOP\t; Represents PAC signing LR\n ])\n \n \n@@ -254,6 +255,8 @@\n \t\t\t; instruction.\n   VUNSPEC_VLLDM\t\t; Represent the lazy load multiple with vlldm\n \t\t\t; instruction.\n+  VUNSPEC_PACBTI_NOP\t; Represents PAC signing LR + valid landing pad\n+  VUNSPEC_AUT_NOP\t; Represents PAC verifying LR\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "9b26f62b65f77f19d58450f2911a3ff326fc9937", "filename": "gcc/testsuite/gcc.target/arm/pac-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-1.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,11 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler-times \"pac\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "a794195e8f6eb0bfa3a8fe94e787ee7e57abdbe2", "filename": "gcc/testsuite/gcc.target/arm/pac-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-10.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,10 @@\n+/* Testing return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler \"pac\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler \"aut\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "37ffc93b41b3a2e30f1faa3c56eed8a8ff167a9e", "filename": "gcc/testsuite/gcc.target/arm/pac-11.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-11.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,10 @@\n+/* Testing return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=bti+pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O2\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler-times \"pacbti\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "945ce9385929e27acf018114ea595f9d4f14eecb", "filename": "gcc/testsuite/gcc.target/arm/pac-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-2.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,11 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler \"pac\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler \"aut\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "47e290a5840dcacb17612745fabedaff7c5e8f8a", "filename": "gcc/testsuite/gcc.target/arm/pac-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-3.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,11 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=bti+pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O2\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler-times \"pacbti\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "cf915cdba505a10b226d312205c38dde76677999", "filename": "gcc/testsuite/gcc.target/arm/pac-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-4.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,10 @@\n+/* Testing return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mthumb -mfloat-abi=hard --save-temps -O2\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler-not \"\\tbti\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tpac\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tpacbti\\t\" } } */"}, {"sha": "c70087eb6b65fb2b8df8261711b0b5836bea4079", "filename": "gcc/testsuite/gcc.target/arm/pac-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-5.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,28 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include <stdlib.h>\n+\n+int\n+__attribute__((noinline))\n+foo1 (int a, int b)\n+{\n+  int square (int z) { return z * z; }\n+  return square (a) + square (b);\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo1 (1, 2) != 5)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pac\\tip, lr, sp\" 3 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 3 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "c5329f0ef48b4ed0d200ebb042db6643d3fc27be", "filename": "gcc/testsuite/gcc.target/arm/pac-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-6.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,18 @@\n+/* Check that GCC does .save and .cfi_offset directives with RA_AUTH_CODE pseudo hard-register.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-options \"-march=armv8.1-m.main+fp -mbranch-protection=pac-ret+leaf -mthumb --save-temps -O0 -g\" } */\n+\n+int i;\n+\n+void foo (int);\n+\n+int bar()\n+{\n+  foo (i);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"pac\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler \"aut\\tip, lr, sp\" } } */\n+/* { dg-final { scan-assembler-not \"bti\" } } */"}, {"sha": "cdaebca5cfa923032bad88420ea6fc3c43f9d6f9", "filename": "gcc/testsuite/gcc.target/arm/pac-7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-7.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,32 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include <stdlib.h>\n+\n+int\n+__attribute__((noinline))\n+foo1 (int a, int b)\n+{\n+  int x = 4;\n+  int foo2 (int a, int b)\n+  {\n+    return a + b + x;\n+  }\n+  return foo2 (a, b);\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo1 (1, 2) != 7)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pac\\tip, lr, sp\" 3 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 3 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "3f37dcfa5c8af60ea722fbafa31f24711fe6b415", "filename": "gcc/testsuite/gcc.target/arm/pac-8.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-8.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,34 @@\n+/* Testing return address signing.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-require-effective-target arm_pacbti_hw } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include <stdarg.h>\n+#include <stdlib.h>\n+\n+int acc (int n, ...)\n+{\n+    int sum = 0;\n+    va_list ptr;\n+\n+    va_start (ptr, n);\n+\n+    for (int i = 0; i < n; i++)\n+        sum += va_arg (ptr, int);\n+    va_end (ptr);\n+\n+    return sum;\n+}\n+\n+int main()\n+{\n+  if (acc (3, 1, 2, 3) != 6)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pac\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */"}, {"sha": "ee2fad290b595dd683e3f17319b46336e7767719", "filename": "gcc/testsuite/gcc.target/arm/pac-9.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac-9.c?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,11 @@\n+/* Testing return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mbranch_protection_ok } */\n+/* { dg-options \"-march=armv8.1-m.main+pacbti+fp -mbranch-protection=pac-ret+leaf -mthumb -mfloat-abi=hard --save-temps -O0\" } */\n+\n+#include \"pac.h\"\n+\n+/* { dg-final { scan-assembler-times \"pac\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"aut\\tip, lr, sp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tbti\" } } */\n+"}, {"sha": "7355e6b29541b78c4c99f670447c3bbb1f58089b", "filename": "gcc/testsuite/gcc.target/arm/pac.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651460b452d752058e38620bf64541822e25c69c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpac.h?ref=651460b452d752058e38620bf64541822e25c69c", "patch": "@@ -0,0 +1,17 @@\n+#include <stdlib.h>\n+\n+int\n+__attribute__((noinline))\n+foo1 (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo1 (1, 2) != 3)\n+    abort ();\n+\n+  return 0;\n+}"}]}