{"sha": "8f2a14065c60b1ac45c9019de43b73664bc7657d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyYTE0MDY1YzYwYjFhYzQ1YzkwMTlkZTQzYjczNjY0YmM3NjU3ZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2005-05-17T16:54:58Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-17T16:54:58Z"}, "message": "configure.ac: Add additional warning flags.\n\n\t* configure.ac: Add additional warning flags.\n\t* configure: Regenerate.\n\n\t* io/write.c (calculate_G_format): Remove unused parameter.\n\t(output_float): Remove unused parameter.\n\t(write_float): Change callers.\n\t(nml_write_obj): Avoid signed warning.\n\tMake variable const to support -Wwrite-strings.\n\n\t* io/unix.c (fd_alloc, mmap_open, mmap_sfree, mem_sfree,\n\tmem_truncate): Mark argument as unused.\n\n\t* io/unit.c (get_unit): Mark argument as unused.\n\t(init_units): Avoid warning about signed comparision.\n\n\t* io/transfer.c (next_record_r): Remove unused parameter.\n\t(next_record_w): Remove unused parameter.\n\t(next_record): Change callers.\n\t(iolength_transfer): Mark arguments as unused.\n\n\t* io/open.c: Add initializer.\n\n\t* io/list_read.c (read_character): Mark argument as unused.\n\t(nml_match_name): Add const to make compile with -Wwrite-strings.\n\n\t* io/format.c: Add initializer.\n\nFrom-SVN: r99839", "tree": {"sha": "26c34185de2f602483130274e16f43b5f87afc2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26c34185de2f602483130274e16f43b5f87afc2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2a14065c60b1ac45c9019de43b73664bc7657d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2a14065c60b1ac45c9019de43b73664bc7657d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2a14065c60b1ac45c9019de43b73664bc7657d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2a14065c60b1ac45c9019de43b73664bc7657d/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ba99e3da1e9ffbe2e764ad3686fab8d4bdbaeec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba99e3da1e9ffbe2e764ad3686fab8d4bdbaeec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba99e3da1e9ffbe2e764ad3686fab8d4bdbaeec"}], "stats": {"total": 108, "additions": 73, "deletions": 35}, "files": [{"sha": "11fe6d5a52276ff0f98f011f78e0ed55f884ee14", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -1,3 +1,32 @@\n+2005-05-16  Andreas Jaeger  <aj@suse.de>\n+\n+\t* configure.ac: Add additional warning flags.\n+\t* configure: Regenerate.\n+\n+\t* io/write.c (calculate_G_format): Remove unused parameter.\n+\t(output_float): Remove unused parameter.\n+\t(write_float): Change callers.\n+\t(nml_write_obj): Avoid signed warning.\n+\tMake variable const to support -Wwrite-strings.\n+\n+\t* io/unix.c (fd_alloc, mmap_open, mmap_sfree, mem_sfree,\n+\tmem_truncate): Mark argument as unused.\n+\n+\t* io/unit.c (get_unit): Mark argument as unused.\n+\t(init_units): Avoid warning about signed comparision.\n+\n+\t* io/transfer.c (next_record_r): Remove unused parameter.\n+\t(next_record_w): Remove unused parameter.\n+\t(next_record): Change callers.\n+\t(iolength_transfer): Mark arguments as unused.\n+\n+\t* io/open.c: Add initializer.\n+\n+\t* io/list_read.c (read_character): Mark argument as unused.\n+\t(nml_match_name): Add const to make compile with -Wwrite-strings.\n+\n+\t* io/format.c: Add initializer.\n+\n 2005-05-15  Andreas Jaeger  <aj@suse.de>\n \n \t* m4/eoshift1.m4: Initialize variables to avoid warnings."}, {"sha": "da18e6881abbd26f50271456185224e438c5bcad", "filename": "libgfortran/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -2937,7 +2937,7 @@ if test \"x$GCC\" = \"xyes\"; then\n   AM_FCFLAGS=\"-Wall\"\n   ## We like to use C99 routines when available.  This makes sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available.\n-  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes\"\n+  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes  -Wmissing-prototypes -Wold-style-definition -Wextra -Wwrite-strings\"\n fi\n \n "}, {"sha": "e4b5d917581eb0f46c8d218cb112ee33cd352ef9", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -114,7 +114,7 @@ if test \"x$GCC\" = \"xyes\"; then\n   AM_FCFLAGS=\"-Wall\"\n   ## We like to use C99 routines when available.  This makes sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available.\n-  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes\"\n+  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition -Wextra -Wwrite-strings\"\n fi\n AC_SUBST(AM_FCFLAGS)\n AC_SUBST(AM_CFLAGS)"}, {"sha": "413a664542d3415dfe4eeba430d5e1dc530a922a", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005\n+   Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -54,7 +55,9 @@ static const char *error;\n static format_token saved_token;\n static int value, format_string_len, reversion_ok;\n \n-static fnode *saved_format, colon_node = { FMT_COLON };\n+static fnode *saved_format;\n+static fnode colon_node = { FMT_COLON, 0, NULL, NULL, {{ 0, 0, 0 }}, 0,\n+\t\t\t    NULL };\n \n /* Error messages */\n "}, {"sha": "7b0d25f5d74d949c25ae8c0461c4e2e098296326", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -704,7 +704,7 @@ read_integer (int length)\n /* Read a character variable.  */\n \n static void\n-read_character (int length)\n+read_character (int length __attribute__ ((unused)))\n {\n   char c, quote, message[100];\n \n@@ -1693,7 +1693,7 @@ nml_untouch_nodes (void)\n    on no match.  */\n \n static void\n-nml_match_name (char *name, index_type len)\n+nml_match_name (const char *name, index_type len)\n {\n   index_type i;\n   char c;"}, {"sha": "a48476bacbc3b3179a578df697f70e4e14c3a3f4", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005\n+   Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -38,45 +39,45 @@ Boston, MA 02111-1307, USA.  */\n static st_option access_opt[] = {\n   {\"sequential\", ACCESS_SEQUENTIAL},\n   {\"direct\", ACCESS_DIRECT},\n-  {NULL}\n+  {NULL, 0}\n };\n \n static st_option action_opt[] =\n {\n   { \"read\", ACTION_READ},\n   { \"write\", ACTION_WRITE},\n   { \"readwrite\", ACTION_READWRITE},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option blank_opt[] =\n {\n   { \"null\", BLANK_NULL},\n   { \"zero\", BLANK_ZERO},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option delim_opt[] =\n {\n   { \"none\", DELIM_NONE},\n   { \"apostrophe\", DELIM_APOSTROPHE},\n   { \"quote\", DELIM_QUOTE},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option form_opt[] =\n {\n   { \"formatted\", FORM_FORMATTED},\n   { \"unformatted\", FORM_UNFORMATTED},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option position_opt[] =\n {\n   { \"asis\", POSITION_ASIS},\n   { \"rewind\", POSITION_REWIND},\n   { \"append\", POSITION_APPEND},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option status_opt[] =\n@@ -86,14 +87,14 @@ static st_option status_opt[] =\n   { \"new\", STATUS_NEW},\n   { \"replace\", STATUS_REPLACE},\n   { \"scratch\", STATUS_SCRATCH},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static st_option pad_opt[] =\n {\n   { \"yes\", PAD_YES},\n   { \"no\", PAD_NO},\n-  { NULL}\n+  { NULL, 0}\n };\n \n "}, {"sha": "b51da52204ee4c938939b679bd6b2a8f50030814", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -1205,7 +1205,7 @@ data_transfer_init (int read_flag)\n #define MAX_READ 4096\n \n static void\n-next_record_r (int done)\n+next_record_r (void)\n {\n   int rlength, length;\n   gfc_offset new;\n@@ -1296,7 +1296,7 @@ next_record_r (int done)\n /* Position to the next record in write mode.  */\n \n static void\n-next_record_w (int done)\n+next_record_w (void)\n {\n   gfc_offset c, m;\n   int length;\n@@ -1395,9 +1395,9 @@ next_record (int done)\n   current_unit->read_bad = 0;\n \n   if (g.mode == READING)\n-    next_record_r (done);\n+    next_record_r ();\n   else\n-    next_record_w (done);\n+    next_record_w ();\n \n   /* keep position up to date for INQUIRE */\n   current_unit->flags.position = POSITION_ASIS;\n@@ -1482,7 +1482,9 @@ finalize_transfer (void)\n    data transfer, it just updates the length counter.  */\n \n static void\n-iolength_transfer (bt type, void *dest, int len)\n+iolength_transfer (bt type   __attribute__ ((unused)),\n+\t\t   void *dest __attribute__ ((unused)),\n+\t\t   int len)\n {\n   if (ioparm.iolength != NULL)\n     *ioparm.iolength += len;"}, {"sha": "462d48df19aedcea9e5e6d67e21257e2aa4f939b", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005\n+   Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -329,7 +330,8 @@ fd_flush (unix_stream * s)\n  * to come next. */\n \n static void\n-fd_alloc (unix_stream * s, gfc_offset where, int *len)\n+fd_alloc (unix_stream * s, gfc_offset where,\n+\t  int *len __attribute__ ((unused)))\n {\n   char *new_buffer;\n   int n, read_len;\n@@ -606,7 +608,8 @@ mmap_flush (unix_stream * s)\n  * guaranteed to be mappable. */\n \n static try\n-mmap_alloc (unix_stream * s, gfc_offset where, int *len)\n+mmap_alloc (unix_stream * s, gfc_offset where,\n+\t    int *len __attribute__ ((unused)))\n {\n   gfc_offset offset;\n   int length;\n@@ -711,7 +714,7 @@ mmap_close (unix_stream * s)\n \n \n static try\n-mmap_sfree (unix_stream * s)\n+mmap_sfree (unix_stream * s __attribute__ ((unused)))\n {\n   return SUCCESS;\n }\n@@ -721,7 +724,7 @@ mmap_sfree (unix_stream * s)\n  * mmap()-ed, we fall back to the file descriptor functions. */\n \n static try\n-mmap_open (unix_stream * s)\n+mmap_open (unix_stream * s __attribute__ ((unused)))\n {\n   char *p;\n   int i;\n@@ -827,7 +830,7 @@ mem_seek (unix_stream * s, gfc_offset offset)\n \n \n static int\n-mem_truncate (unix_stream * s)\n+mem_truncate (unix_stream * s __attribute__ ((unused)))\n {\n   return SUCCESS;\n }\n@@ -843,7 +846,7 @@ mem_close (unix_stream * s)\n \n \n static try\n-mem_sfree (unix_stream * s)\n+mem_sfree (unix_stream * s __attribute__ ((unused)))\n {\n   return SUCCESS;\n }"}, {"sha": "36fee92598864143e2ceae0a4d20eeb7bb06b3a9", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2a14065c60b1ac45c9019de43b73664bc7657d/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=8f2a14065c60b1ac45c9019de43b73664bc7657d", "patch": "@@ -181,7 +181,7 @@ calculate_exp (int d)\n           for Gw.dEe, n' ' means e+2 blanks  */\n \n static fnode *\n-calculate_G_format (fnode *f, double value, int len, int *num_blank)\n+calculate_G_format (fnode *f, double value, int *num_blank)\n {\n   int e = f->u.real.e;\n   int d = f->u.real.d;\n@@ -271,7 +271,7 @@ calculate_G_format (fnode *f, double value, int len, int *num_blank)\n /* Output a real number according to its format which is FMT_G free.  */\n \n static void\n-output_float (fnode *f, double value, int len)\n+output_float (fnode *f, double value)\n {\n   /* This must be large enough to accurately hold any value.  */\n   char buffer[32];\n@@ -732,13 +732,13 @@ write_float (fnode *f, const char *source, int len)\n \n   if (f->format != FMT_G)\n     {\n-      output_float (f, n, len);\n+      output_float (f, n);\n     }\n   else\n     {\n       save_scale_factor = g.scale_factor;\n-      f2 = calculate_G_format(f, n, len, &nb);\n-      output_float (f2, n, len);\n+      f2 = calculate_G_format(f, n, &nb);\n+      output_float (f2, n);\n       g.scale_factor = save_scale_factor;\n       if (f2 != NULL)\n         free_mem(f2);\n@@ -1325,7 +1325,7 @@ list_formatted_write (bt type, void *p, int len)\n \n /* Stores the delimiter to be used for character objects.  */\n \n-static char * nml_delim;\n+static const char * nml_delim;\n \n static namelist_info *\n nml_write_obj (namelist_info * obj, index_type offset,\n@@ -1359,13 +1359,13 @@ nml_write_obj (namelist_info * obj, index_type offset,\n       if (base)\n \t{\n \t  len =strlen (base->var_name);\n-\t  for (dim_i = 0; dim_i < strlen (base_name); dim_i++)\n+\t  for (dim_i = 0; dim_i < (index_type) strlen (base_name); dim_i++)\n             {\n \t      cup = toupper (base_name[dim_i]);\n \t      write_character (&cup, 1);\n             }\n \t}\n-      for (dim_i =len; dim_i < strlen (obj->var_name); dim_i++)\n+      for (dim_i =len; dim_i < (index_type) strlen (obj->var_name); dim_i++)\n \t{\n \t  cup = toupper (obj->var_name[dim_i]);\n \t  write_character (&cup, 1);"}]}