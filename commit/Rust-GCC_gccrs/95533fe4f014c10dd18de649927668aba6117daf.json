{"sha": "95533fe4f014c10dd18de649927668aba6117daf", "node_id": "C_kwDOANBUbNoAKDk1NTMzZmU0ZjAxNGMxMGRkMThkZTY0OTkyNzY2OGFiYTYxMTdkYWY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-01T18:56:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-01T18:56:20Z"}, "message": "c++: deducing from class type of NTTP [PR105110]\n\nHere when attempting to deduce T in the NTTP type A<T> from the argument\ntype 'const A<int>', we give up due to the const:\n\n  types \u2018A<T>\u2019 and \u2018const A<int>\u2019 have incompatible cv-qualifiers\n\nBut since the type of an NTTP cannot be cv-qualified, it seems natural\nto ignore cv-qualifiers on the argument type before attempting to unify\nthe two types.\n\n\tPR c++/105110\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (unify) <case TEMPLATE_PARM_INDEX>: Drop cv-quals from\n\tthe argument type of an NTTP before deducing from it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/nontype-class52.C: New test.", "tree": {"sha": "0b223d19b1c4bb27635bbea774bc99652fe3f9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b223d19b1c4bb27635bbea774bc99652fe3f9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95533fe4f014c10dd18de649927668aba6117daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95533fe4f014c10dd18de649927668aba6117daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95533fe4f014c10dd18de649927668aba6117daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95533fe4f014c10dd18de649927668aba6117daf/comments", "author": null, "committer": null, "parents": [{"sha": "e9ea121da7d0c6ee7214ca74f861fa5f4bc16913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ea121da7d0c6ee7214ca74f861fa5f4bc16913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ea121da7d0c6ee7214ca74f861fa5f4bc16913"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "75ed9a34018aa4f0914ec1d974d1f31f0eae8db5", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95533fe4f014c10dd18de649927668aba6117daf/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95533fe4f014c10dd18de649927668aba6117daf/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=95533fe4f014c10dd18de649927668aba6117daf", "patch": "@@ -24266,8 +24266,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t      && !(strict & UNIFY_ALLOW_INTEGER)\n \t      && TEMPLATE_PARM_LEVEL (parm) <= TMPL_ARGS_DEPTH (targs))\n \t    {\n-\t      /* Deduce it from the non-type argument.  */\n-\t      tree atype = TREE_TYPE (arg);\n+\t      /* Deduce it from the non-type argument.  As above, ignore\n+\t\t top-level quals here too.  */\n+\t      tree atype = cv_unqualified (TREE_TYPE (arg));\n \t      RECUR_AND_CHECK_FAILURE (tparms, targs,\n \t\t\t\t       tparm, atype,\n \t\t\t\t       UNIFY_ALLOW_NONE, explain_p);"}, {"sha": "56163376afb9ee4985a297155e9fb78c26cafbf0", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class52.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95533fe4f014c10dd18de649927668aba6117daf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95533fe4f014c10dd18de649927668aba6117daf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class52.C?ref=95533fe4f014c10dd18de649927668aba6117daf", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105110\n+// { dg-do compile { target c++20 } }\n+\n+template<class> struct A { };\n+\n+template<auto> struct B { };\n+\n+template<class T, A<T> V> void f(B<V>);\n+\n+int main() {\n+  constexpr A<int> a;\n+  f(B<a>{});\n+}"}]}