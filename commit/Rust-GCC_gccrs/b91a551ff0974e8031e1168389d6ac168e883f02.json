{"sha": "b91a551ff0974e8031e1168389d6ac168e883f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxYTU1MWZmMDk3NGU4MDMxZTExNjgzODlkNmFjMTY4ZTg4M2YwMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-04-19T09:58:41Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2013-04-19T09:58:41Z"}, "message": "re PR fortran/56872 (Incorrect SUM evaluation, involving implied-do loop, with -ffrontend-optimize)\n\n2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/56872\n\t* frontend-passes.c (copy_walk_reduction_arg): Change argument type\n\tto gfc_constructor.  If it has an iterator, wrap the copy of its\n\texpression in an array constructor with that iterator.  Don't special\n\tcase function expressions.\n\t(callback_reduction): Update caller.  Don't return early if there is\n\tan iterator.\n\n2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/56872\n\t* gfortran.dg/array_constructor_45.f90:  New test.\n\t* gfortran.dg/array_constructor_46.f90:  New test.\n\t* gfortran.dg/array_constructor_47.f90:  New test.\n\t* gfortran.dg/array_constructor_40.f90:  Adjust number of\n\twhile loops.\n\n\nCo-Authored-By: Mikael Morin <mikael@gcc.gnu.org>\n\nFrom-SVN: r198086", "tree": {"sha": "e616424c2cdeea4121811800aa2e92170e87eb9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e616424c2cdeea4121811800aa2e92170e87eb9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b91a551ff0974e8031e1168389d6ac168e883f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91a551ff0974e8031e1168389d6ac168e883f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91a551ff0974e8031e1168389d6ac168e883f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91a551ff0974e8031e1168389d6ac168e883f02/comments", "author": null, "committer": null, "parents": [{"sha": "dad89f7c034b3b8d8851ab9dc8960ee88d6ea784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad89f7c034b3b8d8851ab9dc8960ee88d6ea784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad89f7c034b3b8d8851ab9dc8960ee88d6ea784"}], "stats": {"total": 129, "additions": 108, "deletions": 21}, "files": [{"sha": "9323af9b8c6818102c5098a000eaabc7c680f375", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -1,3 +1,14 @@\n+2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56872\n+\t* frontend-passes.c (copy_walk_reduction_arg): Change argument type\n+\tto gfc_constructor.  If it has an iterator, wrap the copy of its\n+\texpression in an array constructor with that iterator.  Don't special\n+\tcase function expressions.\n+\t(callback_reduction): Update caller.  Don't return early if there is\n+\tan iterator.\n+\n 2013-04-18  Tobias Burnus  <burnus@net-b.de>\n \n \t* expr.c (find_array_element): Don't copy expr."}, {"sha": "0618aed895a30717b39c0063fc56791d964354ab", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -192,37 +192,49 @@ optimize_expr (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n    old one can be freed.  */\n \n static gfc_expr *\n-copy_walk_reduction_arg (gfc_expr *e, gfc_expr *fn)\n+copy_walk_reduction_arg (gfc_constructor *c, gfc_expr *fn)\n {\n-  gfc_expr *fcn;\n-  gfc_isym_id id;\n+  gfc_expr *fcn, *e = c->expr;\n \n-  if (e->rank == 0 || e->expr_type == EXPR_FUNCTION)\n-    fcn = gfc_copy_expr (e);\n-  else\n+  fcn = gfc_copy_expr (e);\n+  if (c->iterator)\n+    {\n+      gfc_constructor_base newbase;\n+      gfc_expr *new_expr;\n+      gfc_constructor *new_c;\n+\n+      newbase = NULL;\n+      new_expr = gfc_get_expr ();\n+      new_expr->expr_type = EXPR_ARRAY;\n+      new_expr->ts = e->ts;\n+      new_expr->where = e->where;\n+      new_expr->rank = 1;\n+      new_c = gfc_constructor_append_expr (&newbase, fcn, &(e->where));\n+      new_c->iterator = c->iterator;\n+      new_expr->value.constructor = newbase;\n+      c->iterator = NULL;\n+\n+      fcn = new_expr;\n+    }\n+\n+  if (fcn->rank != 0)\n     {\n-      id = fn->value.function.isym->id;\n+      gfc_isym_id id = fn->value.function.isym->id;\n \n       if (id == GFC_ISYM_SUM || id == GFC_ISYM_PRODUCT)\n-\tfcn = gfc_build_intrinsic_call (current_ns,\n-\t\t\t\t\tfn->value.function.isym->id,\n+\tfcn = gfc_build_intrinsic_call (current_ns, id,\n \t\t\t\t\tfn->value.function.isym->name,\n-\t\t\t\t\tfn->where, 3, gfc_copy_expr (e),\n-\t\t\t\t\tNULL, NULL);\n+\t\t\t\t\tfn->where, 3, fcn, NULL, NULL);\n       else if (id == GFC_ISYM_ANY || id == GFC_ISYM_ALL)\n-\tfcn = gfc_build_intrinsic_call (current_ns,\n-\t\t\t\t\tfn->value.function.isym->id,\n+\tfcn = gfc_build_intrinsic_call (current_ns, id,\n \t\t\t\t\tfn->value.function.isym->name,\n-\t\t\t\t\tfn->where, 2, gfc_copy_expr (e),\n-\t\t\t\t\tNULL);\n+\t\t\t\t\tfn->where, 2, fcn, NULL);\n       else\n \tgfc_internal_error (\"Illegal id in copy_walk_reduction_arg\");\n \n       fcn->symtree->n.sym->attr.access = ACCESS_PRIVATE;\n     }\n \n-  (void) gfc_expr_walker (&fcn, callback_reduction, NULL);\n-\n   return fcn;\n }\n \n@@ -305,10 +317,10 @@ callback_reduction (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n      - only have a single element in the array which contains an\n      iterator.  */\n \n-  if (c == NULL || (c->iterator != NULL && gfc_constructor_next (c) == NULL))\n+  if (c == NULL)\n     return 0;\n \n-  res = copy_walk_reduction_arg (c->expr, fn);\n+  res = copy_walk_reduction_arg (c, fn);\n \n   c = gfc_constructor_next (c);\n   while (c)\n@@ -320,7 +332,7 @@ callback_reduction (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n       new_expr->where = fn->where;\n       new_expr->value.op.op = op;\n       new_expr->value.op.op1 = res;\n-      new_expr->value.op.op2 = copy_walk_reduction_arg (c->expr, fn);\n+      new_expr->value.op.op2 = copy_walk_reduction_arg (c, fn);\n       res = new_expr;\n       c = gfc_constructor_next (c);\n     }"}, {"sha": "930fb254e01c1c16ac9f0ade74befd88519e98a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -1,3 +1,13 @@\n+2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56872\n+\t* gfortran.dg/array_constructor_45.f90:  New test.\n+\t* gfortran.dg/array_constructor_46.f90:  New test.\n+\t* gfortran.dg/array_constructor_47.f90:  New test.\n+\t* gfortran.dg/array_constructor_40.f90:  Adjust number of\n+\twhile loops.\n+\n 2013-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/56999"}, {"sha": "424f6f4fe75684ffb4d28618a6a33e75c782994c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_40.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -48,5 +48,5 @@ program main\n   call baz(a,b,res);\n   if (abs(res - 8.1) > 1e-5) call abort\n end program main\n-! { dg-final { scan-tree-dump-times \"while\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"while\" 5 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "fdf049c378e1c741a973b3cd29bdeaf5839a205d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_45.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! PR PR 56872 - wrong front-end optimization with a\n+! single array constructor and another value.\n+program main\n+  real    :: s\n+  integer :: m\n+  integer :: k\n+  real :: res\n+\n+  m = 2\n+  s = 1000.\n+\n+  res = SUM([3.0,(s**(REAL(k-1)/REAL(m-1)),k=1,m),17.])\n+  if (abs(res - 1021.)>1e-4) call abort\n+end"}, {"sha": "471c6a86fbdb1914e4aad7c10f64e4b85c0eac3c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_46.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! Test that nested array constructors are optimized.\n+program main\n+  implicit none\n+  integer, parameter :: dp=selected_real_kind(15)\n+  real(kind=dp), dimension(2,2) :: a\n+  real(kind=dp) thirteen\n+\n+  data a /2._dp,3._dp,5._dp,7._dp/\n+  thirteen = 13._dp\n+  if (abs (product([[11._dp, thirteen], a]) - 30030._dp) > 1e-8) call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"while\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "2ad85be349680cbcb15a58579ecaddd1314f4a8c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_47.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91a551ff0974e8031e1168389d6ac168e883f02/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90?ref=b91a551ff0974e8031e1168389d6ac168e883f02", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! Test that reduction optimization doesn't break with a function expression\n+! in an array constructor. \n+program main\n+  implicit none\n+  integer, parameter :: dp=selected_real_kind(15)\n+  real(kind=dp), dimension(2,2) :: a\n+  real(kind=dp) thirteen\n+\n+  data a /2._dp,3._dp,5._dp,7._dp/\n+  thirteen = 13._dp\n+  if (abs (product([[sum([eleven_ones()]), thirteen], a]) - 30030._dp) > 1e-8) call abort\n+ contains\n+  function eleven_ones()\n+    real(kind=dp) :: eleven_ones(11)\n+    integer       :: i\n+\n+    eleven_ones = [ (1._dp, i=1,11) ]\n+  end function eleven_ones\n+end program main\n+! { dg-final { scan-tree-dump-times \"while\" 4 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+"}]}