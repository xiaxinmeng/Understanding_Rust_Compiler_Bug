{"sha": "cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyNmFkOTdmMGE2Yjk3NWYzYTM3ZTNhZGMwZjg5Y2E2MDg5NWRjZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:58:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:58:27Z"}, "message": "Resync\n\nFrom-SVN: r111107", "tree": {"sha": "99c941818b304e9c924b2f89dba3e6296f196e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c941818b304e9c924b2f89dba3e6296f196e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf/comments", "author": null, "committer": null, "parents": [{"sha": "7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e"}], "stats": {"total": 1511, "additions": 1511, "deletions": 0}, "files": [{"sha": "481c0d99fc552faa883c31b5a87a469aaaea0b91", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1511, "deletions": 0, "changes": 1511, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc26ad97f0a6b975f3a37e3adc0f89ca60895dcf", "patch": "@@ -1,3 +1,1514 @@\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-intnam-os2.ads, a-intnam-unixware.ads, g-soccon-unixware.ads,\n+\tg-soliop-unixware.ads, i-os2err.ads, i-os2lib.adb, i-os2lib.ads,\n+\ti-os2syn.ads, i-os2thr.ads, s-intman-irix-athread.adb,\n+\ts-osinte-aix-fsu.ads, s-osinte-fsu.adb, s-parame-os2.adb,\n+\ts-osinte-irix-athread.ads, s-osinte-linux-fsu.ads, s-osinte-os2.adb,\n+\ts-osinte-os2.ads, s-osinte-solaris-fsu.ads, s-osinte-unixware.adb,\n+\ts-osinte-unixware.ads, s-osprim-os2.adb, s-taprop-irix-athread.adb,\n+\ts-taprop-os2.adb, s-tasinf-irix-athread.adb, s-tasinf-irix-athread.ads,\n+\ts-taspri-os2.ads, system-os2.ads, system-unixware.ads: Removed,\n+\tno longer used.\n+\n+2006-02-13  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-taster.adb (Current_Task_Fallback_Handler): Document why explicit\n+\tprotection against race conditions is not needed.\n+\t(Set_Dependents_Fallback_Handler): Add mutual exclusive access to the\n+\tfallback handler.\n+\t(Set_Specific_Handler): Add mutual exclusive access to the specific\n+\thandler.\n+\t(Specific_Handler): Add mutual exclusive access for retrieving the\n+\tspecific handler.\n+\n+\t* s-tarest.adb (Task_Wrapper): Add mutual exclusive access to the fall\n+\tback handler.\n+\n+\t* s-taskin.ads (Common_ATCB): Remove pragma Atomic for\n+\tFall_Back_Handler and Specific_Handler.\n+\n+\t* s-tassta.adb (Task_Wrapper): Add mutual exclusive access to the task\n+\ttermination handlers.\n+\tSet two different owerflow depending on the maximal stack size.\n+\n+\t* s-solita.adb (Task_Termination_Handler_T): Document why explicit\n+\tprotection against race conditions is not needed when executing the\n+\ttask termination handler.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-gloloc-mingw.adb, a-cgaaso.ads, a-stzmap.adb, a-stzmap.adb,\n+\ta-stzmap.ads, a-ztcoio.adb, a-ztedit.adb, a-ztedit.ads, a-ztenau.adb,\n+\ta-ztenau.ads, a-colien.adb, a-colien.ads, a-colire.adb, a-colire.ads,\n+\ta-comlin.adb, a-decima.adb, a-decima.ads, a-direio.adb, a-direio.adb,\n+\ta-direio.adb, a-direio.ads, a-ngcoty.adb, a-ngcoty.ads, a-nuflra.adb,\n+\ta-nuflra.ads, a-sequio.adb, a-sequio.ads, a-sequio.ads, a-storio.ads,\n+\ta-stream.ads, a-ststio.adb, a-ststio.adb, a-ststio.ads, a-ststio.ads,\n+\ta-stwima.adb, a-stwima.adb, a-stwima.ads, a-stwise.adb, a-teioed.adb,\n+\ta-teioed.ads, a-ticoau.adb, a-ticoau.ads, a-ticoio.adb, a-tasatt.ads,\n+\ta-tideau.adb, a-tideau.ads, a-tideio.adb, a-tideio.ads, a-tienau.adb,\n+\ta-tienau.ads, a-tienio.adb, a-tienio.ads, a-tifiio.ads, a-tiflau.adb,\n+\ta-tiflau.ads, a-tiflio.adb, a-tiflio.adb, a-tiflio.ads, a-tigeau.ads,\n+\ta-tiinau.adb, a-tiinau.ads, a-tiinio.adb, a-tiinio.ads, a-timoio.adb,\n+\ta-timoio.ads, a-titest.adb, a-titest.ads, a-wtcoio.adb, a-wtdeau.adb,\n+\ta-wtdeau.ads, a-wtdeio.adb, a-wtdeio.ads, a-wtedit.adb, a-wtedit.adb,\n+\ta-wtedit.ads, a-wtenau.adb, a-wtenau.ads, a-wtenau.ads, a-wtenio.adb,\n+\ta-wtenio.ads, a-wtfiio.adb, a-wtfiio.ads, a-wtflau.adb, a-wtflau.ads,\n+\ta-wtflio.adb, a-wtflio.adb, a-wtflio.ads, a-wtgeau.ads, a-wtinau.adb,\n+\ta-wtinau.ads, a-wtinio.adb, a-wtinio.ads, a-wtmoau.adb, a-wtmoau.ads,\n+\ta-wtmoio.adb, a-wtmoio.ads, xref_lib.adb, xref_lib.ads, xr_tabls.adb,\n+\tg-boubuf.adb, g-boubuf.ads, g-cgideb.adb, g-io.adb, gnatdll.adb,\n+\tg-pehage.adb, i-c.ads, g-spitbo.adb, g-spitbo.ads, mdll.adb,\n+\tmlib-fil.adb, mlib-utl.adb, mlib-utl.ads, prj-env.adb, prj-tree.adb,\n+\tprj-tree.ads, prj-util.adb, s-arit64.adb, s-asthan.ads, s-auxdec.adb,\n+\ts-auxdec.ads, s-chepoo.ads, s-direio.adb, s-direio.ads, s-errrep.adb,\n+\ts-errrep.ads, s-fileio.adb, s-fileio.ads, s-finroo.adb, s-finroo.ads,\n+\ts-gloloc.adb, s-gloloc.ads, s-io.adb, s-io.ads, s-rpc.adb,\n+\ts-rpc.ads, s-shasto.ads, s-sequio.adb, s-stopoo.ads, s-stratt.adb,\n+\ts-stratt.ads, s-taasde.adb, s-taasde.ads, s-tadert.adb, s-sequio.ads,\n+\ts-taskin.adb, s-tasque.adb, s-tasque.ads, s-wchjis.ads, makegpr.adb,\n+\ta-coinve.adb, a-cidlli.adb, eval_fat.adb, exp_dist.ads, exp_smem.adb,\n+\tfmap.adb, g-dyntab.ads, g-expect.adb, lib-xref.ads, osint.adb,\n+\tpar-load.adb, restrict.adb, sinput-c.ads, a-cdlili.adb,\n+\tsystem-vms.ads, system-vms-zcx.ads, system-vms_64.ads: Minor\n+\treformatting.\n+\n+2006-02-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-tasatt.adb, s-osinte-lynxos-3.adb, s-osinte-lynxos.adb,\n+\ts-osinte-aix.adb, s-interr-sigaction.adb, s-asthan-vms-alpha.adb,\n+\ts-interr-vms.adb, s-intman-vms.adb, s-interr-vxworks.adb,\n+\ts-intman-vxworks.adb, s-asthan-vms-alpha.adb, a-ztexio.adb,\n+\ta-reatim.adb, a-taside.adb, a-textio.adb, a-witeio.adb, prj-attr.adb,\n+\ts-intman-irix.adb, s-intman-solaris.adb, s-intman-posix.adb,\n+\ta-dynpri.adb, a-interr.adb, g-dynhta.adb, s-asthan.adb, s-interr.adb,\n+\ts-pooglo.adb, s-pooloc.adb, s-poosiz.adb, s-tasren.adb, s-tasuti.adb,\n+\ts-tataat.adb, s-tpobop.adb: Remove redundant with clauses.\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-osinte-darwin.adb, s-osinte-darwin.ads, s-osinte-vxworks.ads, \n+\ts-osinte-solaris.ads, s-osinte-linux.ads, s-osinte-freebsd.ads, \n+\ts-osinte-solaris-posix.ads, s-osinte-lynxos-3.ads, s-osinte-lynxos.ads, \n+\ts-osinte-tru64.ads, s-osinte-aix.ads, s-osinte-irix.ads, \n+\ts-osinte-hpux-dce.ads, s-osinte-linux-hppa.ads, \n+\ts-osinte-linux-alpha.ads, s-inmaop-posix.adb (sigset_t_ptr): Removed,\n+\treplaced by anonymous access type.\n+\t(pthread_sigmask): Now take an access sigset_t\n+\n+\t* s-osinte-hpux.ads:  Ditto.\n+\t(pthread_mutex_t, pthread_cond_t): Update definitions to support\n+\tproperly 32 and 64 bit ABIs.\n+\n+2006-02-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop-posix.adb, s-taprop-vxworks.adb, s-taprop-tru64.adb, \n+\ts-taprop-lynxos.adb, s-taprop-irix.adb, s-taprop-hpux-dce.adb, \n+\ts-taprop-linux.adb, s-taprop-solaris.adb,\n+\ts-taprop-vms.adb (Create_Task): Remove task adjustment code. This\n+\tadjustement is already done when calling this routine.\n+\n+2006-02-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* system-mingw.ads (Underlying_Priorities): Update the priority mapping\n+\ttable to take advantage of the 16 priority levels available on Windows\n+\t2000 and XP. On NT4 there are only 7 priority levels, this is properly\n+\tsupported by this new mapping.\n+\n+2006-02-13  Nicolas Setton  <setton@adacore.com>\n+\n+\t* adadecode.h, adadecode.c: (__gnat_decode): Improve support of types.\n+\t(get_encoding): New subprogram. Extracts the encodings from an encoded\n+\tAda name.\n+\n+2006-02-13  Pascal Obry  <obry@adacore.com>\n+\t    Nicolas Roche  <roche@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adaint.h, adaint.c (DIR_SEPARATOR): Use _T() macro for Unicode\n+\tsupport.\n+\t(__gnat_try_lock): Add unicode support by using a specific section on\n+\tWindows.\n+\t(__gnat_get_current_dir): Idem.\n+\t(__gnat_open_read): Idem.\n+\t(__gnat_open_rw): Idem.\n+\t(__gnat_open_create): Idem.\n+\t(__gnat_create_output_file): Idem.\n+\t(__gnat_open_append): Idem.\n+\t(__gnat_open_new): Idem.\n+\t(__gnat_file_time_name): Idem.\n+\t(__gnat_set_file_time_name): Idem.\n+\t(__gnat_stat): Idem.\n+\t(win32_no_block_spawn): Idem.\n+\t(__gnat_locate_exec_on_path): Idem.\n+\t(__gnat_opendir): New routine.\n+\t(__gnat_closedir): Idem.\n+\t(__gnat_readdir): Add new parameter length (pointer to int). Update\n+\timplementation to use it and add specific Win32 code for Unicode\n+\tsupport.\n+\t(__gnat_get_env_value_ptr): Remove. Replaced by __gnat_getenv in env.c\n+\t(__gnat_set_env_value): Remove. Replaced by __gnat_setenv in env.c\n+\t(convert_addresses): Do not define this dummy routine on VMS.\n+\n+\t* mingw32.h (GNAT_UNICODE_SUPPORT): New definition, if set the GNAT\n+\truntime Unicode support will be activated.\n+\t(S2WS): String to Wide-String conversion. This version just copy a\n+\tstring in non Unicode version.\n+\t(WS2S): Wide-String to String conversion. This version just copy a\n+\tstring in non Unicode version.\n+\n+\t* g-dirope.adb: (Close): Now import __gnat_closedir from adaint.c.\n+\t(Open): Now import __gnat_opendir from adaint.c.\n+\t(Read): Change the implementation to support unicode characters. It is\n+\tnot possible to use strlen() on Windows as this version supports only\n+\tstandard ASCII characters. So the length of the directory entry is now\n+\treturned from the imported __gnat_readdir routine.\n+\tUpdate copyright notice.\n+\n+\t* s-crtl-vms64.ads, s-crtl.ads: (closedir): Moved to adaint.c.\n+\t(opendir): Moved to adaint.c.\n+\n+\t* g-os_lib.adb (Copy_Time_Stamp): Fix off-by-one range computation.\n+\t(Get_Directory): Fix wrong indexing.\n+\t(Getenv): replace __gnat_get_env_value_ptr from adaint.c by\n+\t__gnat_getenv from env.c\n+\t(Setenv): replace __gnat_set_env_value from adaint.c by __gnat_setenv\n+\tfrom env.c\n+\n+\t* env.h, env.c: New file.\n+\n+\t* s-scaval.adb (Initialize): Replace __gnat_get_env_value_ptr from\n+\tadaint.c by __gnat_getenv from env.c\n+\n+\t* s-shasto.adb (Initialize): replace __gnat_get_env_value_ptr from\n+\tadaint.c by __gnat_getenv from env.c\n+\n+\t* Make-lang.in: Add env.o in the list of C object needed by gnat1\n+\tand gnatbind.\n+\tUpdate dependencies.\n+\n+2006-02-13  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ada-tree.h: (TYPE_UNCHECKED_UNION_P): Deleted.\n+\t\n+\t* gigi.h (value_factor_p): Add prototype and description, now public.\n+\n+\t* decl.c (gnat_to_gnu_field): Don't attempt BLKmode to integral type\n+\tpromotion for field with rep clause if the associated size was proven\n+\tto be in error.\n+\tExpand comments describing attempts to use a packable type.\n+\t(gnat_to_gnu_entity) <E_Signed_Integer_Subtype,\n+\tE_Floating_Point_Subtype>: Inherit alias set of what we are making a\n+\tsubtype of to ensure conflicts amongst all subtypes in a hierarchy,\n+\tnecessary since these are not different types and pointers may\n+\tactually designate any subtype in this hierarchy.\n+\t(gnat_to_gnu_entity, case E_Record_Type): Always make fields for\n+\tdiscriminants but put them into record only if not Unchecked_Union;\n+\tpass flag to components_to_record showing Unchecked_Union.\n+\t(make_dummy_type): Use UNION_TYPE only if Unchecked_Union and no\n+\tcomponents before variants; don't set TYPE_UNCHECKED_UNION_P.\n+\t(components_to_record): New argument UNCHECKED_UNION.\n+\tRemove special case code for Unchecked_Union and instead use main code\n+\twith small changes.\n+\n+\tPR ada/26096\n+\t(gnat_to_gnu_entity) <E_Variable>: Do not initialize the\n+\taligning variable with the expression being built, only its inner\n+\tfield.\n+\n+\t* trans.c (Handled_Sequence_Of_Statements_to_gnu): Remove call to\n+\temit_sequence_entry_statements.\n+\t(emit_sequence_entry_statements, body_with_handlers_p): Delete.\n+\t(establish_gnat_vms_condition_handler): Move before\n+\tSubprogram_Body_to_gnu.\n+\t(Subprogram_Body_to_gnu): On VMS, establish_gnat_vms_condition_handler\n+\tfor a subprogram if it has a foreign convention or is exported.\n+\t(Identifier_to_gnu): Manually unshare the DECL_INITIAL tree when it is\n+\tsubstituted for a CONST_DECL.\n+\t(tree_transform, case N_Aggregate): Remove code for UNION_TYPE and pass\n+\tEtype to assoc_to_constructor.\n+\t(assoc_to_constructor): New argument, GNAT_ENTITY; use it to ignore\n+\tdiscriminants of Unchecked_Union.\n+\t(TARGET_ABI_OPEN_VMS): Define to 0 if not defined, so that later uses\n+\tdon't need cluttering preprocessor directives.\n+\t(establish_gnat_vms_condition_handler): New function. Establish the GNAT\n+\tcondition handler as current in the compiled function.\n+\t(body_with_handlers_p): New function. Tell whether a given sequence of\n+\tstatements node is attached to a package or subprogram body and involves\n+\texception handlers possibly nested within inner block statements.\n+\t(emit_sequence_entry_statements): New function, to emit special\n+\tstatements on entry of sequences when necessary. Establish GNAT\n+\tcondition handler in the proper cases for VMS.\n+\t(Handled_Sequence_Of_Statements_to_gnu): Start block code with\n+\temit_sequence_entry_statements.\n+\n+\t* utils2.c (find_common_type): If both input types are BLKmode and\n+\thave a constant size, use the smaller one.\n+\t(build_simple_component_ref): Also match if FIELD and NEW_FIELD are\n+\tthe same.\n+\n+\t* utils.c (value_factor_p): Make public, to allow uses from other gigi\n+\tunits.\n+\t(create_type_decl): Do not set the flag DECL_IGNORED_P for dummy types.\n+\t(convert, case UNION_TYPE): Remove special treatment for unchecked\n+\tunions.\n+\n+\tPR ada/18659\n+\t(update_pointer_to): Update variants of pointer types to\n+\tunconstrained arrays by attaching the list of fields of the main\n+\tvariant.\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-exexpr.adb, a-exexpr-gcc.adb\n+\t(Process_Raise_Exception): Removed, merged with Propagate_Exception.\n+\t(Propagate_Exception): Now take extra From_Signal_Handler parameter.\n+\tRemove code unused for exception propagation for the compiler itself\n+ \tfrom a-except.adb and update to still share separate packages.\n+\n+\t* a-except.ads, a-except.adb: Ditto.\n+\tAdd comments that this version is now used only by the compiler and\n+\tother basic tools. The full version that includes the Ada 2005 stuff\n+\tis in separate files a-except-2005.ads/adb. The reason is that we do\n+\tnot want to cause bootstrap problems with compilers not recognizing\n+\tWide_Wide_String.\n+\tAdd exception reason code PE_Implicit_Return\n+\tAdd new exception reason code (Null Exception_Id)\n+\n+\t* a-except-2005.adb, a-except-2005.ads: New files.\n+\n+\t* s-wchcon.ads: (Get_WC_Encoding_Method): New function.\n+\n+\t* s-wchcon.adb: New file.\n+\n+\t* Makefile.in (LIBGNAT_SRCS): Add tb-gcc.c.\n+\t(traceback.o deps): Likewise.\n+\t(SPARC/Solaris): Accept sparc[64|v9]-sun-solaris.\n+\tActivate build of GMEM instrumentation library on VMS targets.\n+\t(gnatlib-sjlj, gnatlib-zcx): Pass EH_MECHANISM to make gnatlib.\n+\tUse a-except-2005.ads/adb for all run-time library builds unless\n+\tspecified otherwise.\n+\t[VMS] (LIBGNAT_TARGET_PAIRS_AUX1,2): Rename s-parame-vms.ads to\n+\ts-parame-vms-alpha.ads and add s-parame-vms-ia64.ads.\n+\tUse s-parame.adb on all native platforms.\n+\tUse s-parame-vxworks.adb on all vxworks platforms.\n+\tAdd env.c env.h in LIBGNAT_SRCS\n+\tAdd env.o in LIBGNAT_OBJS\n+\t(GNATMAKE_OBJS): Remove ctrl_c.o object.\n+\t(LIBGNAT_TARGET_PAIRS for x86-vxworks): Use an specialized version of\n+\ts-osinte.adb, s-tpopsp.adb, and system.ads for the run time that\n+\tsupports VxWorks 6 RTPs.\n+\t(EXTRA_GNATRTL_NONTASKING_OBJS for x86-vxworks): Remove the use of\n+\ti-vxworks and i-vxwoio from the run time that supports VxWorks 6 RTPs.\n+\n+\t* types.h, types.ads (Terminate_Program): New exception\n+\tAdd comment on modifying multiple versions of a-except.adb when the\n+\ttable of exception reasons is modified.\n+\tAdd exception reason code PE_Implicit_Return\n+\tAdd new exception reason code (Null Exception_Id)\n+\n+        * clean.adb (Initialize): Get the target parameters before checking\n+        if target is OpenVMS. Move the OpenVMS specific code here from package\n+        body elaboration code.\n+\n+2006-02-13  Thomas Quinot  <quinot@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali-util.adb (Get_File_Checksum): Update to account for change in\n+\tprofile of Initialize_Scanner.\n+\n+\t* gprep.adb (Gnatprep): Update to account for change in profile of\n+\tInitialize_Scanner.\n+\t(Process_One_File): Same.\n+\n+\t* lib.adb (Get_Code_Or_Source_Unit): New subprogram factoring the\n+\tcommon code between Get_Code_Unit and Get_Source_Unit. Reimplement\n+\tthat behaviour using the new Unit information recorded in the source\n+\tfiles table, rather than going through all units every time.\n+\t(Get_Code_Unit): Reimplement in terms of Get_Code_Or_Source_Unit.\n+\t(Get_Source_Unit): Same.\n+\n+\t* prepcomp.adb (Parse_Preprocessing_Data_File): Update to account for\n+\tchange in profile of Initialize_Scanner.\n+\t(Prepare_To_Preprocess): Same.\n+\n+\t* lib.ads: Fix typo in comment (templace -> template).\n+\n+\t* prj-part.adb (Parse_Single_Project): Update to account for change in\n+\tprofile of Initialize_Scanner.\n+\n+\t* scn.adb (Initialize_Scanner): Account for change in profile of\n+\tScng.Initialize_Scanner: set Current_Source_Unit in Scn instead of Scng.\n+\tAlso record the association of the given Source_File_Index to the\n+\tcorresponding Unit_Number_Type.\n+\n+\t* scng.ads, scng.adb (Initialize_Scanner.Set_Reserved): Remove\n+\tprocedure.\n+\t(Initialize_Scanner): Call Scans.Initialize_Ada_Keywords.\n+\tRemove Unit formal for generic scanner: this formal\n+\tis only relevant to Scn (the scanner instance used to parse Ada source\n+\tfiles), not to other instances. Update comment accordingly.\n+\t(Scan): Use new function Snames.Is_Keyword_Name.\n+\n+\t* sinfo-cn.adb: Fix typo in comment.\n+\n+\t* sinput.adb (Unit, Set_Unit): Accessors for new source file attribute\n+\tUnit.\n+\n+\t* sinput.ads (Source_File_Record): New component Unit, used to capture\n+\tthe unit identifier (if any) associated to a source file.\n+\n+\t* sinput-c.adb, sinput-l.adb (Load_File): Initialize new component\n+\tUnit in Source_File_Record.\n+\n+\t* sinput-p.adb (Source_File_Is_Subunit): Update to account for change\n+\tin profile of Initialize_Scanner.\n+\n+\t* scans.adb (Initialize_Ada_Keywords): New procedure\n+\n+\t* scans.ads (Initialize_Ada_Keywords): New procedure to initialize the\n+\tAda keywords in the Namet table, without the need to call\n+\tInitialize_Scanner.\n+\n+\t* snames.adb: Add pragma Ada_2005 (synonym for Ada_05)\n+\t(Is_Keyword_Name): New function\n+\n+\t* snames.ads: Add subtype Configuration_Pragma_Names\n+\tAdd pragma Ada_2005 (synonym for Ada_05)\n+\t(Is_Keyword_Name): New function\n+\n+\t* snames.h: Add pragma Ada_2005 (synonym for Ada_05)\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-stwisu.adb, a-strsup.adb, a-stzsup.adb (Super_Slice): Fix slice\n+\tindex.\n+\n+\t* a-stwima.adb (To_Set): Add extra check when N = 0.\n+\n+\t* g-regpat.adb: (Match_Simple_Operator): Avoid possible overflow.\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-parame-mingw.adb, s-parame-linux.adb,\n+\ts-parame-solaris.adb: Removed, replaced by s-parame.adb\n+\n+\t* s-parame-vxworks.ads: Fix typo.\n+\n+\t* s-parame-vxworks.adb: New file.\n+\n+\t* s-parame.adb: Version now used by all native platforms.\n+\t(Default_Stack_Size): Use 2 megs for default stack size and use\n+\t__gl_default_stack_size when available.\n+\t(Minimum_Stack_Size): Use 12K.\n+\n+\t* s-taprop-mingw.adb: Set default stack size linker switch to 2megs.\n+\t(Create_Task): Refine implementation taking advantage of the XP stack\n+\tsize support. On XP, we now create the thread using the flag\n+\tSTACK_SIZE_PARAM_IS_A_RESERVATION.\n+\n+\t* s-osinte-mingw.ads (Stack_Size_Param_Is_A_Reservation): New constant.\n+\n+\t* sysdep.c (__gnat_is_windows_xp): New routine, returns 1 on Windows\n+\tXP and 0 on older Windows versions.\n+\n+\t* interfac-vms.ads: Removed, no longer used.\n+\n+2006-02-13  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-rbtgso.adb, a-crbtgo.adb, a-crbtgk.adb, a-coorse.adb, \n+\ta-cohama.adb, a-ciorse.adb, a-cihama.adb, a-cihase.adb, \n+\ta-cohase.adb: All explicit raise statements now include an exception\n+\tmessage.\n+\n+\t* a-ciormu.ads, a-ciormu.adb, a-coormu.ads, a-coormu.adb\n+\t(Update_Element_Preserving_Key): renamed op to just Update_Element.\n+\tExplicit raise statements now include an exception message\n+\n+\t* a-cihase.ads, a-cohase.ads: Removed comment.\n+\n+\t* a-stboha.ads, a-stboha.adb, a-stfiha.ads, a-envvar.adb,\n+\ta-envvar.ads, a-swbwha.ads, a-swbwha.adb, a-swfwha.ads, a-szbzha.ads,\n+\ta-szbzha.adb, a-szfzha.ads: New files.\n+\n+2006-02-13  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cgcaso.adb, a-cgaaso.adb: Implemented using heapsort instead of\n+\tquicksort.\n+\n+2006-02-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lang.opt: Wvariadic-macros: New option.\n+\tWold-style-definition: Likewise.\n+\tWmissing-format-attribute: Likewise.\n+\n+\t* misc.c (gnat_handle_option): New cases for -Wvariadic-macros,\n+\t-Wold-style-definition and -Wmissing-format-attribute.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-ticoio.ads, a-ticoio.adb: Add use clause (moved here from spec)\n+\n+\t* a-coteio.ads, a-lcteio.ads, a-llctio.ads, a-scteio.ads: New files.\n+\n+2006-02-13  Nicolas Roche  <roche@adacore.com>\n+\n+\t* a-envvar.adb, a-envvar.ads: New files.\n+\n+2006-02-13  Douglas Rupp  <rupp@adacore.com>\n+\n+\t* s-parame-vms.ads: Renamed to s-parame-vms-alpha.ads\n+\n+\t* s-parame-vms-alpha.ads, s-parame-vms-ia64.ads: New files.\n+\n+2006-02-13  Pat Rogers  <rogers@adacore.com>\n+\n+\t* a-rttiev.adb, a-rttiev.ads: New files.\n+\n+2006-02-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-tiboio.adb, a-tiboio.ads, a-wwboio.adb,\n+\ta-wwboio.ads, a-zzboio.adb, a-zzboio.ads:  New files.\n+\n+\t* impunit.adb, Makefile.rtl: Added new Ada 2005 units.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* rtsfind.adb, exp_prag.adb, lib-writ.adb, par-labl.adb, \n+\tsem_case.adb: Minor code reorganization (not Present should be No)\n+\n+2006-02-13  Geert Bosch  <bosch@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-tifiio.adb (Put_Digits): Test Last against To'First - 1 instead of\n+\t0, since the lower bound of the actual string may be greater than one.\n+\n+\tPR ada/20753\n+\n+\t(Put): Fix condition to raise Layout_Error when invalid\n+\tlayout is requested.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* back_end.adb (Scan_Compiler_Arguments): Check if\n+\tSearch_Directory_Present is True and, if it is, add the argument in\n+\tthe source search directory path.\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Accept switch \"-I\". Set\n+\tSearch_Directory_Present to True.\n+\n+2006-02-13  Joel Brobecker  <brobecke@adacore.com>\n+\n+\t* bindgen.adb (Gen_Main_C): declare the ensure_reference variable as\n+\tvolatile, to tell the compiler to preserve this variable at any level\n+\tof optimization.\n+\t(Gen_Versions_Ada): Temporarily work around codegen bug.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatlink.adb (Process_Binder_File): If -shared is specified, invoke\n+\tgcc to link with option -shared-libgcc.\n+\t(Gnatlink): Remove duplicate switches -shared-libgcc\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatvsn.ads (Current_Year): New constant, used to easily update\n+\tcopyright on all GNAT tools.\n+\n+\t* gnatls.adb, gnatname.adb, vms_conv.adb: Add 2006 to displayed\n+\tcopyright notice.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* erroutc.ads, erroutc.adb (Set_Message_Blank): Don't insert space\n+\tafter hyphen (small aesthetic change useful for a range of numbers\n+\tusing ^-^.\n+\tSuppress range checks for a couple of assignments which otherwise\n+\tcause validity checks with validity checking turned on.\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case Size):\n+\tImprovement in error message for object.\n+\t(Rep_Item_Too_Late): Remove '!' in warning message.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* err_vars.ads: Suppress range checks for a couple of assignments\n+\twhich otherwise cause validity checks with validity checking turned on.\n+\tUpdate comments.\n+\n+\t* errout.adb (Error_Msg_Internal): Do not suppress warning messages.\n+\tMake message unconditional if it is a warning.\n+\t(Error_Msg_NEL): Always output warning messages.\n+\tSuppress range checks for a couple of assignments which otherwise\n+\tcause validity checks with validity checking turned on.\n+\n+\t* errout.ads (Message Insertion Characters): Document that '!' is\n+\timplied by '?' in error messages.\n+\n+\t* gnat1drv.adb: (Bad_Body): Remove '!' in warning message.\n+\t(Gnat1drv): Use a goto to end of main subprogram instead of\n+\tExit_Program (E_Success) so that finalization can occur normally.\n+\n+2006-02-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-stchop.adb (Stack_Check): Raise Storage_Error if the argument has\n+\twrapped around.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-direct.adb (Duration_To_Time, OS_Time_To_Long_Integer): New\n+\tUnchecked_Conversion functions.\n+\t(Modification_Time): Use direct conversion of OS_Time to Calendar time\n+\twhen OpenVMS returns False.\n+\n+\t* a-dirval-mingw.adb, a-dirval-vms.adb, a-dirval.ads,\n+\ta-dirval.adb (OpenVMS): New Boolean function\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* checks.adb (Build_Discriminant_Checks): If the expression being\n+\tchecks is an aggregate retrieve the values of its discriminants to\n+\tgenerate the check, rather than creating a temporary and a reference\n+\tto it.\n+\t(Apply_Access_Check): Rewritten to handle new Is_Known_Null flag\n+\t(Install_Null_Excluding_Check): Ditto\n+\t(Selected_Length_Checks): Build actual subtype for the original Ck_Node,\n+\tnot for the renamed object, so that the actual itype is attached in the\n+\tproper context.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* debug.adb: Eliminate numeric switches for binder/gnatmake\n+\n+\t* switch-m.adb (Normalize_Compiler_Switches): Record numeric debug\n+\tswitches for the compiler.\n+\t(Scan_Make_Switches): Do not allow numeric debug switches for gnatmake\n+\t(Scan_Make_Switches): When failing with an illegal switch, output an\n+\terror message with the full switch.\n+\tEliminate numeric switches for binder/gnatmake\n+\n+\t* switch.ads, switch.adb (Bad_Switch): New procedure\n+\n+\t* switch-b.adb (Scan_Binder_Switches): Do not accept combined switches.\n+\tRemove 0-9 as debug flag character possibilities\n+\t-d is now controlling the primary stack size when its value is a\n+\tpositive. Also add checks against invalid values, and support for kb,\n+\tmb. Ditto for -D switch.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\t    Serguei Rybin  <rybin@adacore.com>\n+\n+\t* opt.ads opt.adb: Add Ada_Version_Explicit_Config along with\n+\tsave/restore routines.\n+\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n+\twere not always properly handled previously.\n+\tSince we are changing the tree format anyway, also get rid of the\n+\tjunk obsolete Immediate_Errors flag.\n+\t(Tree_Read): Change the way of reading Tree_Version_String - now we\n+\tread the version string from the tree even if its length is not the\n+\tsame as the length of the version string computed from Gnatvsn.\n+\t(Search_Directory_Present): New Boolean flag for the compiler.\n+\tDefine Tree_Version_String as a dynamic string.\n+\t(Default_Stack_Size): new variable, used to handle switch -d.\n+\n+\t* par-prag.adb: \n+\tFor pragma Ada_2005, remove stuff about setting Ada_Version_Explicit\n+\tonly for main unit.\n+\tAdd pragma Ada_2005 (synonym for Ada_05)\n+\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n+\twere not always properly handled previously.\n+\n+\t* directio.ads, ioexcept.ads, sequenio.ads, text_io.ads: Change\n+\texplicit Ada_95 to Ada_2005.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (First_Tag_Component): Protect the frontend\n+\tagainst errors in the source program: a private types for which the\n+\tcorresponding full type declaration is missing and pragma CPP_Virtual\n+\tis used.\n+\t(Is_Unchecked_Union): Check flag on Implementation_Base_Type.\n+\t(Is_Known_Null): New flag\n+\t(Has_Pragma_Pure): New flag\n+\t(No_Return): Present in all entities, set only for procedures\n+\t(Is_Limited_Type): A type whose ancestor is an interface is limited if\n+\texplicitly declared limited.\n+\t(DT_Offset_To_Top_Func): New attribute that is present in E_Component\n+\tentities. Only used for component marked Is_Tag. If present it stores\n+\tthe Offset_To_Top function used to provide this value in tagged types\n+\twhose ancestor has discriminants.\n+\n+\t* exp_ch2.adb: Update status of new Is_Known_Null flag\n+\n+\t* sem_ch7.adb: Maintain status of new Is_Known_Null flag\n+\n+\t* sem_cat.adb (Get_Categorization): Don't treat function as Pure in\n+\tthe categorization sense if Is_Pure was set by pragma Pure_Function.\n+\n+2006-02-13  Quentin Ochem  <ochem@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* bindusg.adb: Updated documentation for -d and -D switches.\n+\n+\t* raise.h (__gnat_set_globals): added new parameter for\n+\tDefault_Stack_Size.\n+\n+\t* init.c (__gnat_adjust_context_for_raise) <alpha-vms case>: Implement.\n+\t(__gnat_handle_vms_condition): Adjust context before raise.\n+\t(__gnat_install_handler): Restore the global vector setup for GCC\n+\tversions before 3.4, as the frame based circtuitry is not available\n+\tin this case.\n+\t(__gnat_set_globals): added a parameter default_stack_size\n+\t(__gl_default_stack_size): new variable.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Array_Aggr_Code): Rename variable\n+\t\"Others_Mbox_Present\" to \"Others_Box_Present\" because the mbox concept\n+\tdoes not exist in the Ada RM.\n+\t(Compatible_Int_Bounds): Determine whether two integer range bounds\n+\tare of equal length and have the same start and end values.\n+\t(Is_Int_Range_Bounds): Determine whether a node is an integer range.\n+\t(Build_Record_Aggr_Code): Perform proper sliding of a nested array\n+\taggregate when it is part of an object declaration.\n+\t(Build_Record_Aggr_Code)  If the aggregate ttype is a derived type that\n+\tconstrains discriminants of its parent, add explicitly the discriminant\n+\tconstraints of the ancestor by retrieving them from the\n+\tstored_constraint of the parent.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case Mechanism_Code): If\n+\tattribute Mechanism_Code is applied to renamed subprogram, modify\n+\tprefix to point to base subprogram.\n+\tMax/Min attributes now violate Restriction No_Implicit_Conditionals\n+\n+\t* sinfo.ads: Document that Mechanism_Code cannot be applied to\n+\trenamed subprograms so that the front-end must replace the prefix\n+\tappropriately.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch3.adb (Component_Needs_Simple_Initialization): Add check for\n+\tavailability of RE_Interface_Tag.\n+\t(Build_Initialization_Call): Fix wrong access to the discriminant value.\n+\t(Freeze_Record_Type): Do not generate the tables associated with\n+\ttimed and conditional dispatching calls through synchronized\n+\tinterfaces if compiling under No_Dispatching_Calls restriction.\n+\tWhen compiling for Ada 2005, for a nonabstract\n+\ttype with a null extension, call Make_Controlling_Function_Wrappers\n+\tand insert the wrapper function declarations and bodies (the latter\n+\tbeing appended as freeze actions).\n+\t(Predefined_Primitive_Bodies): Do not generate the bodies of the\n+\tpredefined primitives associated with timed and conditional\n+\tdispatching calls through synchronized interfaces if we are\n+\tcompiling under No_Dispatching_Calls.\n+\t(Build_Init_Procedure):  Use RTE_Available to check if a run-time\n+\tservice is available before generating a call.\n+\t(Make_Controlling_Function_Wrappers): New procedure.\n+\t(Expand_N_Full_Type_Declaration): Create a class-wide master for\n+\taccess-to-limited-interfaces because they can be used to reference\n+\ttasks that implement such limited interface.\n+\t(Build_Offset_To_Top_Functions): Build the tree corresponding to the\n+\tprocedure spec and body of the Offset_To_Top function that is generated\n+\twhen the parent of a type with discriminants has secondary dispatch\n+\ttables.\n+\t(Init_Secondary_Tags): Handle the case in which the parent of the type\n+\tcontaining secondary dispatch tables has discriminants to generate the\n+\tcorrect arguments to call Set_Offset_To_Top.\n+\t(Build_Record_Init_Proc): Add call to Build_Offset_To_Top_Functions.\n+\n+\t* a-tags.ads, a-tags.adb: (Check_Index): Removed.\n+\tAdd Wide_[Wide_]Expanded_Name.\n+\t(Get_Predefined_Prim_Op_Address): New subprogram that provides exactly\n+\tthe same functionality of Get_Prim_Op_Address but applied to predefined\n+\tprimitive operations because the pointers to the predefined primitives\n+\tare now saved in a separate table.\n+\t(Parent_Size): Modified to get access to the separate table of primitive\n+\toperations or the parent type.\n+\t(Set_Predefined_Prim_Op_Address): New subprogram that provides the same\n+\tfunctionality of Set_Prim_Op_Address but applied to predefined primitive\n+\toperations.\n+\t(Set_Signature): New subprogram used to store the signature of a DT.\n+\t(Displace): If the Offset_To_Top value is not static then call the\n+\tfunction generated by the expander to get such value; otherwise use\n+\tthe value stored in the table of interfaces.\n+\t(Offset_To_Top): The type of the actual has been changed to Address to\n+\tgive the correct support to tagged types with discriminants. In this\n+\tcase this value is stored just immediately after the tag field.\n+\t(Set_Offset_To_Top): Two new formals have been added to indicate if the\n+\toffset_to_top value is static and hence pass this value to the run-time\n+\tto store it in the table of interfaces, or else if this value is dynamic\n+\tand then pass to the run-time the address of a function that is\n+\tgenerated by the expander to provide this value for each object of the\n+\ttype.\n+\n+\t* rtsfind.ads (Default_Prin_Op_Count): Removed.\n+\t(Default_Prim_Op_Count): New entity\n+\t(Get_Predefined_Prim_Op_Address): New entity\n+\t(Set_Predefined_Prim_Op_Address): New entity\n+\t(RE_Set_Signature): New entity\n+\n+2006-02-13  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Pass Allocator => True to\n+\tMake_Adjust_Call done for a newly-allocated object.\n+\n+\t* exp_ch7.ads, exp_ch7.adb (Expand_Cleanup_Actions): If the statements\n+\tin a subprogram are wrapped in a cleanup block, indicate that the\n+\tsubprogram contains an inner block with an exception handler.\n+\t(Make_Adjust_Call): New Boolean formal Allocator indicating whether the\n+\tAdjust call is for a newly-allocated object. In that case we must not\n+\tassume that the finalization list chain pointers are correct (since they\n+\tcome from a bit-for-bit copy of the original object's pointers) so if\n+\tthe attach level would otherwise be zero (no change), we set it to 4\n+\tinstead to cause the pointers to be reset to null.\n+\n+\t* s-finimp.adb (Attach_To_Final_List): New attach level: 4, meaning\n+\treset chain pointers to null.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): If the right-hand side is a\n+\tstring, and the context requires a loop for the assignment (e.g.\n+\tbecause the left-hand side is packed), generate a unique name for the\n+\ttemporary that holds the string, to prevent spurious name clashes.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): Handle calls to functions that\n+\treturn unconstrained arrays.\n+\tUpdate comments.\n+\t(Expand_Call):  An indirect call through an access parameter of a\n+\tprotected operation is not a protected call.\n+\tAdd circuit to raise CE in Ada 2005 mode following call\n+\tto Raise_Exception.\n+\t(Register_DT_Entry): Do nothing if\n+\tthe run-time does not give support to abstract interfaces.\n+\t(Freeze_Subprogram): In case of dispatching operations, do not generate\n+\tcode to register the operation in the dispatch table if the source\n+\tis compiled with No_Dispatching_Calls.\n+\t(Register_Predefined_DT_Entry): Generate code that calls the new\n+\trun-time subprogram Set_Predefined_Prim_Op_Address instead of\n+\tSet_Prim_Op_Address.\n+\n+\t* sem_ch5.adb (Analyze_Assignment_Statement): Do not apply length checks\n+\ton array assignments if the right-hand side is a function call that has\n+\tbeen inlined. Check is performed on the assignment in the block.\n+\t(Process_Bounds): If bounds and range are overloaded, apply preference\n+\trule for root operations to disambiguate, and diagnose true ambiguity.\n+\t(Analyze_Assignment): Propagate the tag for a class-wide assignment with\n+\ta tag-indeterminate right-hand side even when Expander_Active is True.\n+\tNeeded to ensure that dispatching calls to T'Input are allowed and\n+\tget the tag of the target class-wide object.\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Handle entities that override\n+\tan inherited primitive operation that already overrides several\n+\tabstract interface primitives. For transitivity, the new entity must\n+\talso override all the abstract interface primitives covered by the\n+\tinherited overriden primitive.\n+\tEmit warning if new entity differs from homograph in same scope only in\n+\tthat one has an access parameter and the other one has a parameter of\n+\ta general access type with the same designated type, at the same\n+\tposition in the signature.\n+\t(Make_Inequality_Operator): Use source locations of parameters and\n+\tsubtype marks from corresponding equality operator when creating the\n+\ttree structure for the implicit declaration of \"/=\". This does not\n+\tchange anything in behaviour except that the decoration of the\n+\tcomponents of the subtree created for \"/=\" allows ASIS to get the\n+\tstring images of the corresponding identifiers.\n+\t(Analyze_Return_Statement): Remove '!' in warning message.\n+\t(Check_Statement_Sequence): Likewise.\n+\t(Analyze_Subprogram_Body): For an access parameter whose designated type\n+\tis an incomplete type imported through a limited_with clause, use the\n+\ttype of the corresponding formal in the body.\n+\t(Check_Returns): Implicit return in No_Return procedure now raises\n+\tProgram_Error with a compile time warning, instead of beging illegal.\n+\t(Has_Single_Return):  Function returning unconstrained type cannot be\n+\tinlined if expression in unique return statement is not an identifier.\n+\t(Build_Body_To_Inline): It is possible to inline a function call that\n+\treturns an unconstrained type if all return statements in the function\n+\treturn the same local variable. Subsidiary procedure Has_Single_Return\n+\tverifies that the body conforms to this restriction.\n+\n+\t* sem_res.adb (Resolve_Equality_Op): If the operands do not have the\n+\tsame type, and  one of them is of an anonymous access type, convert\n+\tthe other operand to it, so that this is a valid binary operation for\n+\tgigi.\n+\t(Resolve_Type_Conversion): Handle subtypes of protected types and\n+\ttask types when accessing to the corresponding record type.\n+\t(Resolve_Allocator): Add '\\' in 2-line warning message.\n+\tRemove '!' in warning message.\n+\t(Resolve_Call): Add '\\' in 2-line warning message.\n+\t(Valid_Conversion): Likewise.\n+\t(Resolve_Overloaded_Selected_Component): If disambiguation succeeds, the\n+\tresulting type may be an access type with an implicit dereference.\n+\tObtain the proper component from the designated type.\n+\t(Make_Call_Into_Operator): Handle properly a call to predefined equality\n+\tgiven by an expanded name with prefix Standard, when the operands are\n+\tof an anonymous access type.\n+\t(Check_Fully_Declared_Prefix): New procedure, subsidiary of Resolve_\n+\tExplicit_Dereference and Resolve_Selected_Component, to verify that the\n+\tprefix of the expression is not of an incomplete type. Allows full\n+\tdiagnoses of all semantic errors.\n+\t(Resolve_Actuals): If the actual is an allocator whose directly\n+\tdesignated type is a class-wide interface we build an anonymous\n+\taccess type to use it as the type of the allocator. Later, when\n+\tthe subprogram call is expanded, if the interface has a secondary\n+\tdispatch table the expander will add a type conversion to force\n+\tthe displacement of the pointer.\n+\t(Resolve_Call): If a function that returns an unconstrained type is\n+\tmarked Inlined_Always and inlined, the call will be inlined and does\n+\tnot require the creation of a transient scope.\n+\t(Check_Direct_Boolean_Op): Removed\n+\t(Resolve_Comparison_Op): Remove call to above\n+\t(Resolve_Equality_Op): Remove call to above\n+\t(Resolve_Logical_Op): Inline above, since this is only call.\n+\t(Valid_Conversion): Handle properly conversions between arrays of\n+\tconvertible anonymous access types.\n+\n+\tPR ada/25885\n+\n+\t(Set_Literal_String_Subtype): If the lower bound is not static, wrap\n+\tthe literal in an unchecked conversion, because GCC 4.x needs a static\n+\tvalue for a string bound.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): When creating the\n+\tcomponents of the corresponding record, take into account component\n+\tdefinitions that are access definitions.\n+\t(Expand_N_Asynchronous_Select): A delay unit statement rewritten as a\n+\tprocedure is not considered a dispatching call and will be expanded\n+\tproperly.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Expand_Dispatching_Call): If the\n+\tcontrolling argument of the dispatching call is an abstract interface\n+\tclass-wide type then we use it directly.\n+\tCheck No_Dispatching_Calls restriction.\n+\t(Default_Prim_Op_Position): Remove the code that looks for the last\n+\tentity in the list of aliased subprograms. This code was wrong in\n+\tcase of renamings.\n+\t(Fill_DT_Entry): Add assertion to avoid the use of this subprogram\n+\twhen the source is compiled with the No_Dispatching_Calls restriction.\n+\t(Init_Predefined_Interface_Primitives): No need to inherit primitives\n+\tif we are compiling with restriction No_Dispatching_Calls.\n+\t(Make_Disp_XXX): Addition of assertion to avoid the use of all these\n+\tsubprograms if we are compiling under No_Dispatching_Calls restriction.\n+\t(Make_DT): Generate a dispatch table with a single dummy entry if\n+\twe are compiling with the No_Dispatching_Calls restriction. In\n+\taddition, in this case we don't generate code that calls to the\n+\tfollowing run-time subprograms: Set_Type_Kind, Inherit_DT.\n+\t(Make_Select_Specific_Data_Table): Add assertion to avoid the use\n+\tof this subprogram if compiling with the No_Dispatching_Calls\n+\trestriction.\n+\t(Expand_Type_Conversion): Instead of using the actual parameter,\n+\tthe argument passed as parameter to the conversion function was\n+\terroneously referenced by the expander.\n+\t(Ada_Actions): Addition of Get_Predefined_Prim_Op_Address,\n+\tSet_Predefined_Primitive_Op_Address and Set_Signature.\n+\t(Expand_Dispatching_Call): Generate call to\n+\tGet_Predefined_Prim_Op_Address for predefined primitives.\n+\t(Fill_DT_Entry): Generate call to Set_Predefined_Prim_Op_Address for\n+\tpredefined primitives.\n+\t(Make_DT, Make_Secondary_DT): If the tagged type has no user defined\n+\tprimitives we reserve one dummy entry to ensure that the tag does not\n+\tpoint to some memory that is associated with some other object. In\n+\taddition, remove all the old code that generated the assignments\n+\tassociated with the signature of the dispatch table and replace them\n+\tby a call to the new subprogram Set_Signature.\n+\t(Set_All_DT_Position): Change the algorithm because now we have a\n+\tseparate dispatch table associated with predefined primitive operations.\n+\t(Expand_Interface_Conversion): In case of non-static offset_to_top\n+\tadd explicit dereference to get access to the object after the call\n+\tto displace the pointer to the object.\n+\t(Expand_Interface_Thunk): Modify the generation of the actual used\n+\tin the calls to the run-time function Offset_To_Top to fulfil its\n+\tnew interface.\n+\t(Make_DT): Add the new actuals required to call Set_Offset_To_Top.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_dist.adb (Copy_Specification): For access parameters, copy\n+\tNull_Exclusion flag, which will have been set for stream subprograms\n+\tin Ada2005 mode.\n+\n+2006-02-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* expect.c (__gnat_expect_portable_execvp): New implementation. The\n+\tprevious implementation was using the C runtime spawnve routine but\n+\tthe corresponding wait was using directly the Win32 API. This was\n+\tcausing some times a lock when waiting for an event using\n+\tWaitForSingleObject in __gnat_waitpid. This new implementation uses\n+\tthe Win32 CreateProcess routine. Avoiding mixing C runtime and Win32\n+\tAPI fixes this problem.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Correct error of bad analyze\n+\tcall.\n+\n+2006-02-13  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_pakd.ads: Fix typos in comments.\n+\n+\t* exp_pakd.adb (Convert_To_PAT_Type): For the case of a bit packed\n+\tarray reference that is an explicit dereference, mark the converted\n+\t(packed) array reference as analyzed to prevent a forthcoming\n+\treanalysis from resetting its type to the original (non-packed) array\n+\ttype.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Find_Prim_Op,\n+\tIs_Predefined_Primitive_Operation): When\n+\tsearching for the predefined equality operator, verify that operands\n+\thave the same type.\n+\t(Is_Predefined_Dispatching_Operation): Remove the code that looks\n+\tfor the last entity in the list of aliased subprograms. This code\n+\twas wrong in case of renamings.\n+\t(Set_Renamed_Subprogram): New procedure\n+\t(Remove_Side_Effects): Replace calls to Etype (Exp) with use of the\n+\tExp_Type constant computed when entering this subprogram.\n+\t(Known_Null): New function\n+\t(OK_To_Do_Constant_Replacement): New function\n+\t(Known_Non_Null): Check scope before believing Is_Known_Non_Null flag\n+\t(Side_Effect_Free): An attribute reference 'Input is not free of\n+\tside effect, unlike other attributes that are functions. (from code\n+\treading).\n+\t(Remove_Side_Effects): Expressions that involve packed arrays or records\n+\tare copied at the point of reference, and therefore must be marked as\n+\trenamings of objects.\n+\t(Is_Predefined_Dispatching_Operation): Return false if the operation is\n+\tnot a dispatching operation.\n+\n+\tPR ada/18819\n+\t(Remove_Side_Effects): Lift enclosing type conversion nodes for\n+\telementary types in all cases.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Handle subtypes of protected types and\n+\ttask types when accessing to the corresponding record type.\n+\tRemove '!' in warning message.\n+\n+2006-02-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-altive.ads (VECTOR_ALIGNMENT): Set to Min (16, Max_Alignment),\n+\tto avoid useless and space inefficient overalignments on targets where\n+\tMax_Alignment is larger than 16.\n+\n+2006-02-13  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-catiio.adb (Sec_Number): New type used to compute the number of\n+\tseconds since 1-1-1970.\n+\t(Image) [Natural]: The parameter was an Integer, as we can't deal with\n+\tnegative numbers (years, months...) it is better to have a Natural here.\n+\tCode clean-up.\n+\t(Image) [Number]: Change parameter from Long_Integer to Number.\n+\t(Image): Use Number type to compute the seconds since 1-1-1970 to fix an\n+\toverflow for dates past year 2038.\n+\n+2006-02-13  Matthew Heaney  <heaney@adacore.com>\n+\n+\t*  g-dyntab.adb (Index_Of): conversion from Natural can no longer raise\n+\tConstraint_Error.\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatbind.adb (Scan_Bind_Arg): Replace error by warning on -M and\n+\tnative platforms.\n+\t(Gnatbind): Do not call Exit_Program (E_Success) at the end, so that\n+\tfinalization can occur normally.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Rules_Switches): New table\n+\t(Add_To_Rules_Switches): New procedure\n+\t(GNATCmd): For command CHECK, put all options following \"-rules\" in the\n+\tRules_Switches table. Append these -rules switches after the -cargs\n+\tswitches.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-spipat.adb (Image, case PC_Assign_Imm and case PC_Assign_OnM):\n+\tThese two cases were generating incorrect output, and if this unit\n+\twas built with checks on, generated a discriminant mismatch constraint\n+\terror.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-xref.adb (Get_Type_Reference): For a private type whose full\n+\tview is an array type, indicate the component type as well, for\n+\tnavigation purposes.\n+\t(Generate_Reference): Don't consider array ref on LHS to be a case\n+\tof violating pragma Unreferenced.\n+\tDo not give Ada 2005 warning except on real reference.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Collect_Arguments_And_Compile): For VMS, when compiling the\n+\tmain source, add switch -mdebug-main=_ada_ so that the executable can\n+\tbe debugged by the standard VMS debugger.\n+\t(Gnatmake): Set No_Main_Subprogram to True when there is no main\n+\tsubprogram, to avoid issuing -mdebug-main=_ada_ for VMS uselessly.\n+\tExit the Multi_Main_Loop when Unique_Compile is True after compilation\n+\tof the last source, as the binding and linking phases are never\n+\tperformed.\n+\tSet all executable obsolete when rebuilding a library.\n+\n+\t* makeutl.adb (Linker_Options_Switches): Do not process empty linker\n+\toptions.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\tPR ada/23973\n+\n+\t* par-ch3.adb (P_Derived_Type_Def_Or_Private_Ext_Decl): Reorganize the\n+\tcode to improve the error message reported when the program has\n+\tdeclarations of abstract interface types and it is not compiled with\n+\tthe -gnat05 switch.\n+\t(P_Access_Definition): Reorganize the code to improve the error\n+\tmessage reported when the new Ada 2005 syntax for anonymous\n+\taccess types is used and the program is not compiled with the\n+\t-gnat05 switch.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch6.adb, style.ads, styleg.adb, styleg.ads, stylesw.adb,\n+\tstylesw.ads, usage.adb, vms_data.ads: Implement -gnatyI switch\n+\t(MODE_IN)\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* par-endh.adb (Explicit_Start_Label): Add code to protect the parser\n+\tagainst source containing syntax errors.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.adb (Reset): Initialize the first element of table Namings with\n+\tthe standard naming data.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.ads (Error_Warning): New enumeration type\n+\n+\t* prj-nmsc.ads, prj-nmsc.adb (Error_Msg): If location parameter is\n+\tunknown, use the location of the project to report the error.\n+\t(When_No_Sources): New global variable\n+\t(Report_No_Ada_Sources): New procedure\n+\t(Check): New parameter When_No_Sources. Set value of global variable\n+\tWhen_No_Sources,\n+\t(Find_Sources): Call Report_No_Ada_Sources when appropriate\n+\t(Get_Sources_From_File): Ditto\n+\t(Warn_If_Not_Sources): Better warning messages indicating the unit name\n+\tand the file name.\n+\n+\t* prj-pars.ads, prj-pars.adb (Parse): New parameter When_No_Sources.\n+\tCall Prj.Proc.Process with parameter When_No_Sources.\n+\n+\t* prj-proc.ads, prj-proc.adb (Check): New parameter When_No_Sources.\n+\tCall Recursive_Check with parameter When_No_Sources.\n+\t(Recursive_Check): New parameter When_No_Sources. Call itself and\n+\tPrj.Nmsc.Check with parameter When_No_Sources.\n+\t(Process): New parameter When_No_Sources. Call Check with parameter\n+\tWhen_No_Sources.\n+\t(Copy_Package_Declarations): New procedure to copy renamed parameters\n+\tand setting the location of the declared attributes to the location\n+\tof the renamed package.\n+\t(Process_Declarative_Items): Call Copy_Package_Declarations for renamed\n+\tpackages.\n+\n+2006-02-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-makr.adb (Make): Preserve the comments from the original project\n+\tfile.\n+\tWhen removing nodes (attributes Source_Dirs, Source_Files,\n+\tSource_List_File and package Naming), save the comments and attach the\n+\tsaved comments to the newly created nodes.\n+\tDo not add a with clause for the naming package if one already exists.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.ads (No_Dispatching_Calls): New GNAT restriction.\n+\n+\t* sem_disp.adb (Override_Dispatching_Operation): Traverse the list of\n+\taliased entities to look for the overriden abstract interface\n+\tsubprogram.\n+\t(Is_Interface_Subprogram): Complete documentation.\n+\t(Check_Dispatching_Operation): Do not generate code to register the\n+\toperation in the dispatch table if the source is compiled with\n+\trestriction No_Dispatching_Calls.\n+\t(Override_Dispatching_Operation): Check for illegal attempt to override\n+\tNo_Return procedure with procedure that is not No_Return\n+\t(Check_Dispatching_Call): Suppress the check for an abstract operation\n+\twhen the original node of an actual is a tag-indeterminate attribute\n+\tcall, since the attribute, which must be 'Input, can never be abstract.\n+\t(Is_Tag_Indeterminate): Handle checking of tag indeterminacy of a\n+\tcall to the Input attribute (even when rewritten).\n+\t(Propagate_Tag): Augment comment to indicate the possibility of a call\n+\tto an Input attribute.\n+\n+\t* sem_disp.ads (Override_Dispatching_Operation): Moved to spec to allow\n+\tcalling it from Exp_Ch3.Make_Controlling_Function_Wrappers.\n+\n+\t* s-rident.ads: (No_Dispatching_Calls): New GNAT restriction.\n+\tNo_Wide_Characters is no longer partition-wide\n+\tNo_Implementation_Attributes/Pragmas are now Ada 2005 (AI-257)\n+\trather than GNAT\n+\n+2006-02-13  Douglas Rupp  <rupp@adacore.com>\n+\n+\t* s-auxdec-vms_64.ads (Short_Address): Wrap it in a type.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Restructure the code that\n+\thandles default-initialized components to keep separate the management\n+\tof this feature but also avoid the unrequired resolution and\n+\texpansion of components that do not have partially initialized\n+\tvalues.\n+\t(Collect_Aggr_Bounds): Add '\\' in 2-line warning message.\n+\t(Check_Bounds): Likewise.\n+\t(Check_Length): Likewise.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): In case of 'Class applied to an\n+\tabstract interface type call analyze_and_resolve to expand the type\n+\tconversion into the corresponding displacement of the\n+\treference to the base of the object.\n+\t(Eval_Attribute, case Width): For systems where IEEE extended precision\n+\tis supported, the maximum exponent occupies 4 decimal digits.\n+\t(Accessibility_Message): Add '\\' in 2-line warning message.\n+\t(Resolve_Attribute): Likewise.\n+\t(case Attribute_Access): Significantly revise checks\n+\tfor illegal access-to-subprogram Access attributes to properly enforce\n+\tthe rules of 3.10.2(32/2).\n+\tDiagnose use of current instance with an illegal attribute.\n+\n+        * sem_util.ads, sem_util.adb (Enclosing_Generic_Body): Change formal\n+        to a Node_Id.\n+        (Enclosing_Generic_Unit): New function to return a node's innermost\n+        enclosing generic declaration node.\n+        (Compile_Time_Constraint_Error): Remove '!' in warning messages.\n+        (Type_Access_Level): The accessibility level of anonymous acccess types\n+        associated with discriminants is that of the current instance of the\n+        type, and that's deeper than the type itself (AARM 3.10.2 (12.3.21)).\n+        (Compile_Time_Constraint_Error): Handle case of conditional expression.\n+        (Kill_Current_Values_For_Entity): New function\n+        (Enter_Name): Change formal type to Entity_Id\n+\n+2006-02-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch10.adb (Check_Redundant_Withs): New procedure in\n+\tAnalyze_Compilation_Unit.\n+\tDetect and warn on redundant with clauses detected in a package spec\n+\tand/or body when -gnatwr is used.\n+\t(Analyze_Context): Analyze config pragmas before other items\n+\t(Install_Context_Items): Don't analyze config pragmas here\n+\t(Install_Limited_Withed_Unit): Set limited entity of package in\n+\twith_clause so that cross-reference information or warning messages on\n+\tunused packages can be properly generated\n+\t(Is_Visible_Through_Renamings): Return false if the limited_with_clause\n+\thas Error_Posted set. Prevent infinite loops in illegal programs.\n+\t(Check_Private_Child_Unit): Move test for a nonprivate with clause down\n+\tto the point of the error test requiring the current unit to be private.\n+\tThis ensures that private with clauses are not exempted from the basic\n+\tchecking for being a descendant of the same library unit parent as a\n+\twithed private descendant unit.\n+\t(Check_Private_Limited_Withed_Unit): Revise the checking algorithm to\n+\thandle private with clauses properly, as well as to account for cases\n+\twhere the withed unit is a public descendant of a private ancestor\n+\t(in which case the current unit must be a descendant of the private\n+\tancestor's parent). The spec comments were updated accordingly. Also,\n+\tthe old error message in this subprogram was replaced with error\n+\tmessages that mirror the errors tested and reported by\n+\tCheck_Private_Child_Unit.\n+\tParameter and variable names improved for readability.\n+\t(Install_Limited_Context_Clauses): Remove test for a withed unit being\n+\tprivate as the precondition for calling\n+\tCheck_Private_Limited_Withed_Unit since that subprogram has been\n+\trevised to test public units as well as private units.\n+\n+2006-02-13  Thomas Quinot  <quinot@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch12.adb (Inline_Instance_Body): Remove erroneous assumption\n+\tthat Scope_Stack.First = 1.\n+\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n+\twere not always properly handled previously.\n+\t(Formal_Entity): Complete rewrite, to handle properly some complex case\n+\twith multiple levels of parametrization by formal packages.\n+\t(Analyze_Formal_Derived_Type): Propagate Ada 2005 \"limited\" indicator\n+\tto the corresponding derived type declaration for proper semantics.\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove '!' in warning message.\n+\t(Check_Component): Enforce restriction on components of\n+\tunchecked_unions: a component in a variant cannot contain tasks or\n+\tcontrolled types.\n+\t(Unchecked_Union): Allow nested variants and multiple discriminants, to\n+\tconform to AI-216.\n+\tAdd pragma Ada_2005 (synonym for Ada_05)\n+\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n+\twere not always properly handled previously.\n+\tDocument that pragma Propagate_Exceptions has no effect\n+\t(Analyze_Pragma, case Pure): Set new flag Has_Pragma_Pure\n+\t(Set_Convention_From_Pragma): Check that if a convention is\n+\tspecified for a dispatching operation, then it must be\n+\tconsistent with the existing convention for the operation.\n+\t(CPP_Class): Because of the C++ ABI compatibility, the programmer is no\n+\tlonger required to specify an vtable-ptr component in the record. For\n+\tcompatibility reasons we leave the support for the previous definition.\n+\t(Analyze_Pragma, case No_Return): Allow multiple arguments\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Check_Abstract_Overriding): Flag a\n+\tnon-overrideen inherited operation with a controlling result as\n+\tillegal only its implicit declaration comes from the derived type\n+\tdeclaration of its result's type.\n+\t(Check_Possible_Deferred_Completion): Relocate the object definition\n+\tnode of the subtype indication of a deferred constant completion rather\n+\tthan directly analyzing it. The analysis of the generated subtype will\n+\tcorrectly decorate the GNAT tree.\n+\t(Record_Type_Declaration): Check whether this is a declaration for a\n+\tlimited derived record before analyzing components.\n+\t(Analyze_Component_Declaration): Diagnose record types  not explicitly\n+\tdeclared limited when a component has a limited type.\n+\t(Build_Derived_Record_Type): Code reorganization to check if some of\n+\tthe inherited subprograms of a tagged type cover interface primitives.\n+\tThis check was missing in case of a full-type associated with a private\n+\ttype declaration.\n+\t(Constant_Redeclaration): Check that the subtypes of the partial and the\n+\tfull view of a constrained deferred constant statically match.\n+\t(Mentions_T): A reference to the current type in an anonymous access\n+\tcomponent declaration  must be an entity name.\n+\t(Make_Incomplete_Type_Declaration): If type is tagged, set type of\n+\tclass_wide type to refer to full type, not to the incomplete one.\n+\t(Add_Interface_Tag_Components): Do nothing if RE_Interface_Tag is not\n+\tavailable. Required to give support to the certified run-time.\n+\t(Analyze_Component_Declaration): In case of anonymous access components\n+\tperform missing checks for AARM 3.9.2(9) and 3.10.2 (12.2).\n+\t(Process_Discriminants): For an access discriminant, use the\n+\tdiscriminant specification as the associated_node_for_itype, to\n+\tsimplify accessibility checks.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch4.adb (Remove_Abstract_Interpretations): Even if there are no\n+\tabstract interpretations on an operator, remove interpretations that\n+\tyield Address or a type derived from it, if one of the operands is an\n+\tinteger literal.\n+\t(Try_Object_Operation.Try_Primitive_Operation,\n+\tTry_Object_Operation.Try_Class_Wide_Operation): Set proper source\n+\tlocation when creating the new reference to a primitive or class-wide\n+\toperation as a part of rewriting a subprogram call.\n+\t(Try_Primitive_Operations): If context requires a function, collect all\n+\tinterpretations after the first match, because there may be primitive\n+\toperations of the same type with the same profile and different return\n+\ttypes. From code reading.\n+\t(Try_Primitive_Operation): Use the node kind to choose the proper\n+\toperation when a function and a procedure have the same parameter\n+\tprofile.\n+\t(Complete_Object_Operation): If formal is an access parameter and prefix\n+\tis an object, rewrite as an Access reference, to match signature of\n+\tprimitive operation.\n+\t(Find_Equality_Type, Find_One_Interp): Handle properly equality given\n+\tby an expanded name with prefix Standard, when the operands are of an\n+\tanonymous access type.\n+\t(Remove_Abstract_Operations): If the operation is abstract because it is\n+\tinherited by a user-defined type derived from Address, remove it as\n+\twell from the set of candidate interpretations of an overloaded node.\n+\t(Analyze_Membership_Op): Membership test not applicable to cpp-class\n+\ttypes.\n+\n+2006-02-13  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch8.adb (Note_Redundant_Use): Suppress unhelpful warning about\n+\tredundant use clauses.\n+\tIn particular, if the scope of two use clauses overlaps, but one is not\n+\tentirely included in the other, we should not warn.  This can happen\n+\twith nested packages.\n+\t(Analyze_Subprogram_Renaming): Protect the compiler against previously\n+\treported errors. The bug was reported when the compiler was built\n+\twith assertions enabled.\n+\t(Find_Type): If the node is a 'Class reference and the prefix is a\n+\tsynchronized type without a corresponding record, return the type\n+\titself.\n+\n+2006-02-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): Check that\n+\tif this is the full-declaration associated with a private declaration\n+\tthat implement interfaces, then the private type declaration must be\n+\tlimited.\n+\t(Analyze_Single_Protected, Analyze_Single_Task): Do not mark the object\n+\tas aliased. The use of the 'access attribute is not available for such\n+\tobject (for this purpose the object should be explicitly marked as\n+\taliased, but being an anonymous type this is not possible).\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb (Same_Elaboration_Scope): A package that is a\n+\tcompilation unit is an elaboration scope.\n+\t(Add_Task_Proc): Add '\\' in 2-line warning message.\n+\t(Activate_All_Desirable): Deal with case of unit with'ed by parent\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_type.adb (Write_Overloads): Improve display of candidate\n+\tinterpretations.\n+\t(Add_One_Interp): Do not add to the list of interpretations aliased\n+\tentities corresponding with an abstract interface type that is an\n+\timmediate ancestor of a tagged type; otherwise we have a dummy\n+\tconflict between this entity and the aliased entity.\n+\t(Disambiguate): The predefined equality on universal_access is not\n+\tusable if there is a user-defined equality with the proper signature,\n+\tdeclared in the same declarative part as the designated type.\n+\t(Find_Unique_Type): The universal_access equality operator defined under\n+\tAI-230 does not cover pool specific access types.\n+\t(Covers): If one of the types is a generic actual subtype, check whether\n+\tit matches the partial view of the other type.\n+\n+2006-02-13  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinput-d.adb (Write_Line): Update the Source_Index_Table after each\n+\tline. This is necessary to allow In_Extended_Main_Unit to provide\n+\tcorrect results for itypes while writing out expanded source.\n+\t(Close_File): No need to update the source_index_table here since it's\n+\tnow done for each line.\n+\n+2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sprint.adb (Write_Itype): Preserve Sloc of declaration, if any, to\n+\tpreserve the source unit where the itype is declared, and prevent a\n+\tbackend abort.\n+\t(Note_Implicit_Run_Time_Call): New procedure\n+\t(Write_Itype): Handle missing cases (E_Class_Wide_Type and\n+\tE_Subprogram_Type)\n+\n+\t* sprint.ads: Document use of $ for implicit run time routine call\n+\n+2006-02-13  Quentin Ochem  <ochem@adacore.com>\n+\n+\t* s-stausa.adb (Initialize_Analyzer): fixed error in assignment of\n+\ttask name.\n+\n+2006-02-13  Bob Duff  <duff@adacore.com>\n+\n+\t* s-valint.adb (Scan_Integer): Call Scan_Raw_Unsigned instead of\n+\tScan_Unsigned, so we do not scan leading blanks and sign twice.\n+\tInteger'Value(\"- 5\") and Integer'Value(\"-+5\") now correctly\n+\traise Constraint_Error.\n+\n+\t* s-vallli.adb (Scan_Long_Long_Integer): Call\n+\tScan_Raw_Long_Long_Unsigned instead of Scan_Long_Long_Unsigned, so we\n+\tdo not scan leading blanks and sign twice.\n+\tInteger'Value(\"- 5\") and Integer'Value(\"-+5\") now correctly\n+\traise Constraint_Error.\n+\n+\t* s-valllu.ads, s-valllu.adb (Scan_Raw_Long_Long_Unsigned,\n+\tScan_Long_Long_Unsigned): Split out most of the processing from\n+\tScan_Long_Long_Unsigned out into\n+\tScan_Raw_Long_Long_Unsigned, so that Val_LLI can call the Raw_ version.\n+\tThis prevents scanning leading blanks and sign twice.\n+\tAlso fixed a bug: Modular'Value(\"-0\") should raise Constraint_Error\n+\tSee RM-3.5(44).\n+\n+\t* s-valuns.ads, s-valuns.adb (Scan_Raw_Unsigned, Scan_Unsigned): Split\n+\tout most of the processing from Scan_Unsigned out into\n+\tScan_Raw_Unsigned, so that Val_LLI can call the Raw_ version.\n+\tThis prevents scanning leading blanks and sign twice.\n+\n+\t* s-valuti.ads, s-valuti.adb (Scan_Plus_Sign): Add Scan_Plus_Sign, for\n+\tuse with Modular'Value attribute.\n+\t(Scan_Plus_Sign): Add Scan_Plus_Sign, for use with Modular'Value\n+\tattribute.\n+\n+2006-02-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-wchjis.adb (JIS_To_EUC): Raise Constraint_Error for invalid value\n+\n+2006-02-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tracebak.c (PPC AIX/Darwin): Define FORCE_CALL to 1.\n+\t(PPC VxWorks): Likewise.\n+\t(Generic unwinder): Define FORCE_CALL to 0 if not already defined.\n+\t(forced_callee): Make non-inlinable and non-pure.\n+\t(__gnat_backtrace): Call forced_callee if FORCE_CALL is set to 1.\n+\n+2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n+\t    Ben Brosgol  <brosgol@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Remove limitations with sparc m64\n+\tsupport.\n+\tDocument that gnatbind -M option is for cross environments only.\n+\tAdded description of using gnatmem to trace gnat rtl allocs and deallocs\n+\tAdd note on use of $ to label implicit run time calls\n+\tAdd documentation for -gnatyI (check mode IN)\n+\tUpdated chapter on compatibility with HP Ada\n+\tVMS-oriented edits.\n+\tRan spell and corrected errors\n+\tAdd documentation for gnatbind -d and rework documentation of -D\n+\tat the same time.\n+\tAdd subprogram/data elimination section.\n+\tMinor editing of annex A.\n+\tAdd section for gnatcheck.\n+\tAdd documentation for restriction No_Dispatching_Calls\n+\tAdd documentation for pragma Ada_2005\n+\tRemove mention of obsolete pragma Propagate_Exceptions\n+\tDocument that pragma Unreferenced can appear after DO in ACCEPT\n+\tClarify Pure_Function for library level units\n+\tMention Max/Min in connection with No_Implicit_Conditionals\n+\tNo_Wide_Characters restriction is no longer partition-wide\n+\tAdd a nice example for Universal_Literal_String attribute\n+\tDocument that pragma No_Return can take multiple arguments\n+\n+\t* ug_words: Added entry for gnatcheck\n+\n+\t* g-ctrl_c.ads (Install_Handler): Enhance comments\n+\n+\t* g-os_lib.ads: Add comments to OS_Exit that it is abrupt termination\n+\n+\t* g-trasym.ads: Add documentation on how to do off line symbolic\n+\ttraceback computation.\n+\n+\t* s-fatgen.adb: Add comments for Unaligned_Valid\n+\n+\t* stand.ads: Fix typo in comment\n+\n 2006-02-09  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Make-lang.in (check-gnat): Run run_acats with $(SHELL)."}]}