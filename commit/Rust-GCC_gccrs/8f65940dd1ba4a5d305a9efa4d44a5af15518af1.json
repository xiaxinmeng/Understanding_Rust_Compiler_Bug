{"sha": "8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2NTk0MGRkMWJhNGE1ZDMwNWE5ZWZhNGQ0NGE1YWYxNTUxOGFmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-21T06:57:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-21T06:57:37Z"}, "message": "dwarf2out.c (output_call_frame_info): For dw_cie_version >= 4 add also address size and segment size fields into CIE...\n\n\t* dwarf2out.c (output_call_frame_info): For dw_cie_version\n\t>= 4 add also address size and segment size fields into CIE\n\theader.\n\n\t* unwind-dw2.c (extract_cie_info): Handle CIE version 4, as\n\tlong as address size is the same as sizeof (void *) and\n\tsegment size is 0.\n\t* unwind-dw2-fde.c (get_cie_encoding): Likewise.  If\n\taddress size or segment size is unexpected, return DW_EH_PE_omit.\n\t(classify_object_over_fdes): If get_cie_encoding returned\n\tDW_EH_PE_omit, return -1.\n\t(init_object): If classify_object_over_fdes returned -1,\n\tpretend there were no FDEs at all.\n\nFrom-SVN: r158589", "tree": {"sha": "17be69b1e08b391d9bba647e830f604c506db243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17be69b1e08b391d9bba647e830f604c506db243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d64427ff33f0521b2af8636a74422d52392141e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64427ff33f0521b2af8636a74422d52392141e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64427ff33f0521b2af8636a74422d52392141e3"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "6f875d4b32e09600d8d2b5092514d3a053d6ceb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "patch": "@@ -1,3 +1,19 @@\n+2010-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (output_call_frame_info): For dw_cie_version\n+\t>= 4 add also address size and segment size fields into CIE\n+\theader.\n+\n+\t* unwind-dw2.c (extract_cie_info): Handle CIE version 4, as\n+\tlong as address size is the same as sizeof (void *) and\n+\tsegment size is 0.\n+\t* unwind-dw2-fde.c (get_cie_encoding): Likewise.  If\n+\taddress size or segment size is unexpected, return DW_EH_PE_omit.\n+\t(classify_object_over_fdes): If get_cie_encoding returned\n+\tDW_EH_PE_omit, return -1.\n+\t(init_object): If classify_object_over_fdes returned -1,\n+\tpretend there were no FDEs at all.\n+\n 2010-04-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (bswap<mode>2): Macroize expander from"}, {"sha": "21a3f75f85516b08f681ed49b4d17aa25c454f4f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "patch": "@@ -3771,6 +3771,11 @@ output_call_frame_info (int for_eh)\n     }\n \n   dw2_asm_output_nstring (augmentation, -1, \"CIE Augmentation\");\n+  if (dw_cie_version >= 4)\n+    {\n+      dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"CIE Address Size\");\n+      dw2_asm_output_data (1, 0, \"CIE Segment Size\");\n+    }\n   dw2_asm_output_data_uleb128 (1, \"CIE Code Alignment Factor\");\n   dw2_asm_output_data_sleb128 (DWARF_CIE_DATA_ALIGNMENT,\n \t\t\t       \"CIE Data Alignment Factor\");"}, {"sha": "93d427165c46633527cf7ed5a04ca650a230c427", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n /* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,\n-   2009  Free Software Foundation, Inc.\n+   2009, 2010  Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GCC.\n@@ -265,10 +265,18 @@ get_cie_encoding (const struct dwarf_cie *cie)\n   _sleb128_t stmp;\n \n   aug = cie->augmentation;\n+  p = aug + strlen ((const char *)aug) + 1; /* Skip the augmentation string.  */\n+  if (__builtin_expect (cie->version >= 4, 0))\n+    {\n+      if (p[0] != sizeof (void *) || p[1] != 0)\n+\treturn DW_EH_PE_omit;\t\t/* We are not prepared to handle unexpected\n+\t\t\t\t\t   address sizes or segment selectors.  */\n+      p += 2;\t\t\t\t/* Skip address size and segment size.  */\n+    }\n+\n   if (aug[0] != 'z')\n     return DW_EH_PE_absptr;\n \n-  p = aug + strlen ((const char *)aug) + 1; /* Skip the augmentation string.  */\n   p = read_uleb128 (p, &utmp);\t\t/* Skip code alignment.  */\n   p = read_sleb128 (p, &stmp);\t\t/* Skip data alignment.  */\n   if (cie->version == 1)\t\t/* Skip return address column.  */\n@@ -614,6 +622,8 @@ classify_object_over_fdes (struct object *ob, const fde *this_fde)\n \t{\n \t  last_cie = this_cie;\n \t  encoding = get_cie_encoding (this_cie);\n+\t  if (encoding == DW_EH_PE_omit)\n+\t    return -1;\n \t  base = base_from_object (encoding, ob);\n \t  if (ob->s.b.encoding == DW_EH_PE_omit)\n \t    ob->s.b.encoding = encoding;\n@@ -723,10 +733,26 @@ init_object (struct object* ob)\n \t{\n \t  fde **p = ob->u.array;\n \t  for (count = 0; *p; ++p)\n-\t    count += classify_object_over_fdes (ob, *p);\n+\t    {\n+\t      size_t cur_count = classify_object_over_fdes (ob, *p);\n+\t      if (cur_count == (size_t) -1)\n+\t\tgoto unhandled_fdes;\n+\t      count += cur_count;\n+\t    }\n \t}\n       else\n-\tcount = classify_object_over_fdes (ob, ob->u.single);\n+\t{\n+\t  count = classify_object_over_fdes (ob, ob->u.single);\n+\t  if (count == (size_t) -1)\n+\t    {\n+\t      static const fde terminator;\n+\t    unhandled_fdes:\n+\t      ob->s.i = 0;\n+\t      ob->s.b.encoding = DW_EH_PE_omit;\n+\t      ob->u.single = &terminator;\n+\t      return;\n+\t    }\n+\t}\n \n       /* The count field we have in the main struct object is somewhat\n \t limited, but should suffice for virtually all cases.  If the"}, {"sha": "65d639d4301f6d036cbaf4f7acd4c0a92e5db4bc", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f65940dd1ba4a5d305a9efa4d44a5af15518af1/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=8f65940dd1ba4a5d305a9efa4d44a5af15518af1", "patch": "@@ -356,7 +356,16 @@ extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,\n       aug += 2;\n     }\n \n-  /* Immediately following the augmentation are the code and\n+  /* After the augmentation resp. pointer for \"eh\" augmentation\n+     follows for CIE version >= 4 address size byte and\n+     segment size byte.  */\n+  if (__builtin_expect (cie->version >= 4, 0))\n+    {\n+      if (p[0] != sizeof (void *) || p[1] != 0)\n+\treturn NULL;\n+      p += 2;\n+    }\n+  /* Immediately following this are the code and\n      data alignment and return address column.  */\n   p = read_uleb128 (p, &utmp);\n   fs->code_align = (_Unwind_Word)utmp;"}]}