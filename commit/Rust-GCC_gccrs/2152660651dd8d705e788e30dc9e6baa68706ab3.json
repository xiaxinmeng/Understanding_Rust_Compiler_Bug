{"sha": "2152660651dd8d705e788e30dc9e6baa68706ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE1MjY2MDY1MWRkOGQ3MDVlNzg4ZTMwZGM5ZTZiYWE2ODcwNmFiMw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-02-27T02:01:10Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-02-27T02:01:10Z"}, "message": "target-supports.exp (check-iconv-available): New function.\n\n2004-02-26  Eric Christopher  <echristo@redhat.com>\n\n\t* lib/target-supports.exp (check-iconv-available): New function.\n\t* lib/gcc-dg.exp (dg-require-iconv): New function.\n\tUse above.\n        * gcc.dg/charset: New directory.\n        * gcc.dg/charset/charset.exp: New file.\n        * gcc.dg/charset/asm1.c: Ditto.\n        * gcc.dg/charset/asm2.c: Ditto.\n        * gcc.dg/charset/asm3.c: Ditto.\n        * gcc.dg/charset/asm4.c: Ditto.\n        * gcc.dg/charset/asm5.c: Ditto.\n        * gcc.dg/charset/attribute1.c: Ditto.\n        * gcc.dg/charset/attribute2.c: Ditto.\n        * gcc.dg/charset/string1.c: Ditto.\n        * g++.dg/charset: New directory.\n        * g++.dg/dg.exp: Add here. Special options.\n        * g++.dg/charset/charset.exp: New file.\n        * g++.dg/charset/asm1.c: Ditto.\n        * g++.dg/charset/asm2.c: Ditto.\n        * g++.dg/charset/asm3.c: Ditto.\n        * g++.dg/charset/asm4.c: Ditto.\n        * g++.dg/charset/attribute1.c: Ditto.\n        * g++.dg/charset/attribute2.c: Ditto.\n        * g++.dg/charset/extern1.cc: Ditto.\n        * g++.dg/charset/extern2.cc: Ditto.\n        * g++.dg/charset/string1.c: Ditto.\n\n2004-02-26  Eric Christopher  <echristo@redhat.com>\n\n\t* c-lex.c (c_lex_string_translate): New variable.\n\t(lex_string): Use to determine string translation.\n\t* c-pragma.h: Prototype.\n\t* c-parse.in (start_string_translation): New. Set above.\n\t(stop_string_translation): Ditto.\n\t(attribute, attribute_list, asm_def, asm_stmt,\n\tasm_operand): Use above functions.\n\t* cp/parser.c (cp_parser_declaration): Translate strings\n\tunless token is RID_EXTERN. Set c_lex_string_translate\n\tfor recursive use.\n\t(cp_parser_asm_definition): Only translate argument strings\n\tto asms.\n\t(cp_parser_asm_operand_list): Ditto.\n\t(cp_parser_attribute_list): Do not translate attribute strings.\n\nFrom-SVN: r78548", "tree": {"sha": "e038a62a69bfb1693a9ec4eefdb706a3fe353e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e038a62a69bfb1693a9ec4eefdb706a3fe353e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2152660651dd8d705e788e30dc9e6baa68706ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2152660651dd8d705e788e30dc9e6baa68706ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2152660651dd8d705e788e30dc9e6baa68706ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2152660651dd8d705e788e30dc9e6baa68706ab3/comments", "author": null, "committer": null, "parents": [{"sha": "26d8bbbbc39d3621e926b393138125800a5dc90a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d8bbbbc39d3621e926b393138125800a5dc90a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d8bbbbc39d3621e926b393138125800a5dc90a"}], "stats": {"total": 1931, "additions": 1180, "deletions": 751}, "files": [{"sha": "2df6191667498d7545f449e1f9fd06195d6653f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -1,3 +1,20 @@\n+2004-02-26  Eric Christopher  <echristo@redhat.com>\n+\n+\t* c-lex.c (c_lex_string_translate): New variable.\n+\t(lex_string): Use to determine string translation.\n+\t* c-pragma.h: Prototype.\n+\t* c-parse.in (start_string_translation): New. Set above.\n+\t(stop_string_translation): Ditto.\n+\t(attribute, attribute_list, asm_def, asm_stmt,\n+\tasm_operand): Use above functions.\n+\t* cp/parser.c (cp_parser_declaration): Translate strings\n+\tunless token is RID_EXTERN. Set c_lex_string_translate\n+\tfor recursive use.\n+\t(cp_parser_asm_definition): Only translate argument strings\n+\tto asms.\n+\t(cp_parser_asm_operand_list): Ditto.\n+\t(cp_parser_attribute_list): Do not translate attribute strings.\n+\n 2004-02-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* stmt.c (expand_start_case_dummy): Remove.\n@@ -104,7 +121,7 @@\n \t* cfglayout.c (break_superblocks): Likewise; fix memory leak.\n \t* except.c (build_post_landing_pads, connect_post_landing_pads,\n \tdw2_build_landing_pads, sjlj_emit_function_enter,\n-\tsjlj_emit_function_exit, sjlj_emit_dispatch_table, \n+\tsjlj_emit_function_exit, sjlj_emit_dispatch_table,\n \tsjlj_build_landing_pads): Update CFG.\n \t(emit_to_new_bb_before): New function.\n \t(finish_eh_generation): Do not rebuild the CFG.\n@@ -715,7 +732,7 @@\n 2004-02-23  Fariborz Jahanian <fjahanian@apple.com>\n         * config/rs6000/rs6000.c (function_arg): call to\n \trs6000_mixed_function_arg for DFmode moved to allow\n-\tnormal DFmode incoming register assignment.  \n+\tnormal DFmode incoming register assignment.\n \n 2004-02-23  Dale Johannesen  <dalej@apple.com>\n \n@@ -864,7 +881,7 @@\n \tmerely its number.\n \t(rs6000_attribute_table): Add \"altivec\" attribute.\n \t(rs6000_handle_altivec_attribute): New function.\n-\t* config/rs6000/rs6000.h (TARGET_OPTIONS): Describe \n+\t* config/rs6000/rs6000.h (TARGET_OPTIONS): Describe\n \t'-m[no-]-warn-altivec-long' (which '-W[no-]altivec-long-deprecated'\n \tmaps to).\n \t(rs6000_warn_altivec_long, rs6000_warn_altivec_long_switch): Forward"}, {"sha": "3986b2771bba87af8be967f6da04f39fec4c159d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -54,6 +54,7 @@ static splay_tree file_info_tree;\n \n int pending_lang_change; /* If we need to switch languages - C++ only */\n int c_header_level;\t /* depth in C headers - C++ only */\n+bool c_lex_string_translate = true; /* If we need to translate characters received.  */\n \n static tree interpret_integer (const cpp_token *, unsigned int);\n static tree interpret_float (const cpp_token *, unsigned int);\n@@ -308,7 +309,7 @@ get_nonpadding_token (void)\n   timevar_pop (TV_CPP);\n \n   return tok;\n-}  \n+}\n \n int\n c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n@@ -675,7 +676,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n \t  if (tok->type == CPP_WSTRING)\n \t    wide = true;\n \t  obstack_grow (&str_ob, &tok->val.str, sizeof (cpp_string));\n-\t  \n+\n \t  tok = get_nonpadding_token ();\n \t  if (c_dialect_objc () && tok->type == CPP_ATSIGN)\n \t    {\n@@ -693,7 +694,9 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n   if (count > 1 && !objc_string && warn_traditional && !in_system_header)\n     warning (\"traditional C rejects string constant concatenation\");\n \n-  if (cpp_interpret_string (parse_in, strs, count, &istr, wide))\n+  if ((c_lex_string_translate\n+       ? cpp_interpret_string : cpp_interpret_string_notranslate)\n+      (parse_in, strs, count, &istr, wide))\n     {\n       value = build_string (istr.len, (char *)istr.text);\n       free ((void *)istr.text);"}, {"sha": "e628aa5fe90d0488824b9a35154f1191a247ee8d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -1432,8 +1432,11 @@ attributes:\n \t;\n \n attribute:\n-      ATTRIBUTE '(' '(' attribute_list ')' ')'\n-\t\t{ $$ = $4; }\n+      ATTRIBUTE stop_string_translation\n+                '(' '(' attribute_list ')' ')' start_string_translation\n+\t\t{ $$ = $5; }\n+      | ATTRIBUTE error start_string_translation\n+                {}\n \t;\n \n attribute_list:\n@@ -2480,8 +2483,9 @@ label:\t  CASE expr_no_commas ':'\n /* simple_asm_expr is used in restricted contexts, where a full\n    expression with inputs and outputs does not make sense.  */\n simple_asm_expr:\n-\tASM_KEYWORD '(' STRING ')'\n-\t\t{ $$ = $3; }\n+\tASM_KEYWORD stop_string_translation\n+\t      '(' STRING ')' start_string_translation\n+\t\t{ $$ = $4; }\n \t;\n \n /* maybeasm: used for assembly names for declarations */\n@@ -2495,14 +2499,17 @@ maybeasm:\n asmdef:\n \tsimple_asm_expr ';'\n \t\t{ assemble_asm ($1); }\n+        | ASM_KEYWORD error start_string_translation ';'\n+                {}\n \t;\n \n /* Full-blown asm statement with inputs, outputs, clobbers, and\n    volatile tag allowed.  */\n asm_stmt:\n-\tASM_KEYWORD maybe_volatile '(' asm_argument ')' ';'\n+\tASM_KEYWORD maybe_volatile stop_string_translation\n+\t        '(' asm_argument ')' start_string_translation ';'\n \t\t{ stmt_count++;\n-\t\t  $$ = build_asm_stmt ($2, $4); }\n+\t\t  $$ = build_asm_stmt ($2, $5); }\n \t;\n \n asm_argument:\n@@ -2550,12 +2557,13 @@ nonnull_asm_operands:\n \t;\n \n asm_operand:\n-\t  STRING '(' expr ')'\n-\t\t{ $$ = build_tree_list (build_tree_list (NULL_TREE, $1), $3); }\n-\t| '[' identifier ']' STRING '(' expr ')'\n+\t  STRING start_string_translation '(' expr ')' stop_string_translation\n+\t\t{ $$ = build_tree_list (build_tree_list (NULL_TREE, $1), $4); }\n+\t| '[' identifier ']' STRING start_string_translation\n+\t  '(' expr ')' stop_string_translation\n \t\t{ $2 = build_string (IDENTIFIER_LENGTH ($2),\n \t\t\t\t     IDENTIFIER_POINTER ($2));\n-\t\t  $$ = build_tree_list (build_tree_list ($2, $4), $6); }\n+\t\t  $$ = build_tree_list (build_tree_list ($2, $4), $7); }\n \t;\n \n asm_clobbers:\n@@ -2564,6 +2572,15 @@ asm_clobbers:\n \t| asm_clobbers ',' STRING\n \t\t{ $$ = tree_cons (NULL_TREE, $3, $1); }\n \t;\n+\n+stop_string_translation:\n+        { c_lex_string_translate = false; }\n+        ;\n+\n+start_string_translation:\n+        { c_lex_string_translate = true; }\n+        ;\n+\n \f\n /* This is what appears inside the parens in a function declarator.\n    Its value is a list of ..._TYPE nodes.  Attributes must appear here"}, {"sha": "397b02d684079c14ba33ddf93b7fb07c90f24213", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -57,4 +57,8 @@ extern void add_to_renaming_pragma_list (tree, tree);\n extern int c_lex (tree *);\n extern int c_lex_with_flags (tree *, unsigned char *);\n \n+/* If true, then lex strings into the execution character set.  \n+   Otherwise, lex strings into the host character set.  */\n+extern bool c_lex_string_translate;\n+\n #endif /* GCC_C_PRAGMA_H */"}, {"sha": "a7ec5f065b35335f6f042664b416624894bd77fd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 734, "deletions": 713, "changes": 1447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3"}, {"sha": "8c5b63633dfef769e3572a0a663635a217e41757", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -1,3 +1,31 @@\n+2004-02-26  Eric Christopher  <echristo@redhat.com>\n+\n+\t* lib/target-supports.exp (check-iconv-available): New function.\n+\t* lib/gcc-dg.exp (dg-require-iconv): New function.\n+\tUse above.\n+        * gcc.dg/charset: New directory.\n+        * gcc.dg/charset/charset.exp: New file.\n+        * gcc.dg/charset/asm1.c: Ditto.\n+        * gcc.dg/charset/asm2.c: Ditto.\n+        * gcc.dg/charset/asm3.c: Ditto.\n+        * gcc.dg/charset/asm4.c: Ditto.\n+        * gcc.dg/charset/asm5.c: Ditto.\n+        * gcc.dg/charset/attribute1.c: Ditto.\n+        * gcc.dg/charset/attribute2.c: Ditto.\n+        * gcc.dg/charset/string1.c: Ditto.\n+        * g++.dg/charset: New directory.\n+        * g++.dg/dg.exp: Add here. Special options.\n+        * g++.dg/charset/charset.exp: New file.\n+        * g++.dg/charset/asm1.c: Ditto.\n+        * g++.dg/charset/asm2.c: Ditto.\n+        * g++.dg/charset/asm3.c: Ditto.\n+        * g++.dg/charset/asm4.c: Ditto.\n+        * g++.dg/charset/attribute1.c: Ditto.\n+        * g++.dg/charset/attribute2.c: Ditto.\n+        * g++.dg/charset/extern1.cc: Ditto.\n+        * g++.dg/charset/extern2.cc: Ditto.\n+        * g++.dg/charset/string1.c: Ditto.\n+\n 2004-02-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14278\n@@ -89,7 +117,7 @@\n \t* gcc.dg/altivec-6.c: New test case.\n \t* gcc.dg/altivec-[7-9].c: Generalize target triple; add\n \ttype casts as needed.\n-\t* gcc.dg/altivec-10.c: Include altivec_check.h and call \n+\t* gcc.dg/altivec-10.c: Include altivec_check.h and call\n \taltivec_check().\n \t* gcc.dg/altivec-12.c: New test case.\n \t* gcc.dg/altivec-varargs-1.c: Generalize target triple;\n@@ -21063,5 +21091,3 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n-\n-"}, {"sha": "9c0ff2866b073ec55b46fcfd767bbe74eec8b712", "filename": "gcc/testsuite/g++.dg/charset/asm1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm1.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-* } }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \".ascii bar\" } }\n+   { dg-final { scan-assembler \".ascii foo\" } }\n+ */\n+extern int x, y;\n+\n+asm (\".ascii bar\");\n+\n+int foo (void)\n+{\n+  __asm__ (\".ascii foo\");\n+  return 0;\n+}"}, {"sha": "7cc1379a8a99d6c5ac58db05b0039e0d285a7e45", "filename": "gcc/testsuite/g++.dg/charset/asm2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm2.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,33 @@\n+/* Test for complex asm statements. Make sure it compiles\n+   then test for some of the asm statements not being translated.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"std\" } }\n+   { dg-final { scan-assembler \"cld\" } }\n+   { dg-final { scan-assembler \"rep\" } }\n+   { dg-final { scan-assembler \"movsb\" } } */\n+#define size_t int\n+void *\n+memmove (void *__dest, __const void *__src, size_t __n)\n+{\n+  register unsigned long int __d0, __d1, __d2;\n+  if (__dest < __src)\n+    __asm__ __volatile__\n+      (\"cld\\n\\t\"\n+       \"rep\\n\\t\"\n+       \"movsb\"\n+       : \"=&c\" (__d0), \"=&S\" (__d1), \"=&D\" (__d2)\n+       : \"0\" (__n), \"1\" (__src), \"2\" (__dest)\n+       : \"memory\");\n+  else\n+    __asm__ __volatile__\n+      (\"std\\n\\t\"\n+       \"rep\\n\\t\"\n+       \"movsb\\n\\t\"\n+       \"cld\"\n+       : \"=&c\" (__d0), \"=&S\" (__d1), \"=&D\" (__d2)\n+       : \"0\" (__n), \"1\" (__n - 1 + (const char *) __src),\n+         \"2\" (__n - 1 + (char *) __dest)\n+       : \"memory\");\n+  return __dest;\n+}"}, {"sha": "cd850c3e81ffc373d36ecfe7d14934975c1bd92b", "filename": "gcc/testsuite/g++.dg/charset/asm3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm3.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,10 @@\n+/* Simple asm test.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"foo\" } } */\n+extern int bar;\n+\n+int main (void)\n+{\n+  asm (\"foo %0\" : \"=r\" (bar));\n+}"}, {"sha": "fa93f40fdaf000f695869acbc5299d303426f636", "filename": "gcc/testsuite/g++.dg/charset/asm4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fasm4.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,8 @@\n+/* Test for string translation.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler-not \"translate\" } } */\n+void foo (void)\n+{\n+  asm (\"xx\" : : \"r\"(\"translate\") : \"cc\");\n+}"}, {"sha": "993c7934c80600b0eb19fecdc95a022a00b26bf6", "filename": "gcc/testsuite/g++.dg/charset/attribute1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute1.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,10 @@\n+/* Test for attribute non-translation.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"foo\" } } */\n+int walrus __attribute__ ((section (\".foo\")));\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "3cb766aa63a94c455384b6b2f1b5ed936257df8e", "filename": "gcc/testsuite/g++.dg/charset/attribute2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,8 @@\n+/* Test to make sure that invalid attributes aren't translated.\n+   If error recovery is ever testable then \"foobar\" should be\n+   translated.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+*/\n+int foo __attribute__ ((walrus)); /* { dg-error \"walrus\" \"ignored\" } */\n+char x[] = \"foobar\";"}, {"sha": "096dc3ec2ea93e5bfdc2f69edbeef33853e5454b", "filename": "gcc/testsuite/g++.dg/charset/charset.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,44 @@\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# GCC testsuite that uses the 'dg.exp' driver.\n+\n+# There's a bunch of headers we need.\n+if [is_remote host] {\n+    foreach header [glob -nocomplain $srcdir/$subdir/*.{h,def} ] {\n+        remote_download host $header\n+    }\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib target-supports.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"-fexec-charset=IBM-1047\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,S} ]] \\\n+        \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "2a68ab7cf781fc5e3a37b36e3b2833628b8884ec", "filename": "gcc/testsuite/g++.dg/charset/extern1.cc", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern1.cc?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,15 @@\n+/* Test extern statments not being translated. */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+*/\n+\n+extern  \"C\" {\n+\n+\n+int testbug (void) {\n+\n+  return 0;\n+\n+}\n+\n+} //extern block"}, {"sha": "82157a6fea464ed4906e8a897113df839ae4f426", "filename": "gcc/testsuite/g++.dg/charset/extern2.cc", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fextern2.cc?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,5 @@\n+/* Check that we push the declaration and then continue translation.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler-not \"foobar\" } } */\n+extern \"C\" { char *foo = \"foobar\"; }"}, {"sha": "375e28a2ed62fb334a0539ba2c336de529dd5dc5", "filename": "gcc/testsuite/g++.dg/charset/string.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fstring.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,5 @@\n+/* Simple character translation test.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler-not \"string foobar\" } } */\n+char *foo = \"string foobar\";"}, {"sha": "f809f10f2db8e927f4b4893d733bfb2202a4e5e4", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -4,15 +4,15 @@\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n # G++ testsuite that uses the `dg.exp' driver.\n \n@@ -32,6 +32,7 @@ dg-init\n # that are handled specially.\n set tests [lsort [find $srcdir/$subdir *.C]]\n set tests [prune $tests $srcdir/$subdir/bprob/*]\n+set tests [prune $tests $srcdir/$subdir/charset/*]\n set tests [prune $tests $srcdir/$subdir/compat/*]\n set tests [prune $tests $srcdir/$subdir/debug/*]\n set tests [prune $tests $srcdir/$subdir/gcov/*]"}, {"sha": "d7578d418f61bb2a7f9eb4d96e87f6cc8c75d7f9", "filename": "gcc/testsuite/gcc.dg/charset/asm1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm1.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \".ascii bar\" } }\n+   { dg-final { scan-assembler \".ascii foo\" } }\n+ */\n+extern int x, y;\n+\n+asm (\".ascii bar\");\n+\n+int foo (void)\n+{\n+  __asm__ (\".ascii foo\");\n+  return 0;\n+}"}, {"sha": "4af7a18cf81074b1dc45378b12db847788708f0e", "filename": "gcc/testsuite/gcc.dg/charset/asm2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm2.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,16 @@\n+/* Test for execution character set encoding errors.\n+   If we ever get a good way to test error recovery\n+   the string \"foobar\" should be translated.  */\n+/* { dg-do compile } */\n+/* { dg-require-iconv \"IBM-1047\" } */\n+asm (not_a_string); /* { dg-error \"syntax error before\" \"not_a_string\" } */\n+char x[] = \"foobar\";\n+\n+void foo (void)\n+{\n+  char *y;\n+  asm (not_a_string2); /* { dg-error \"syntax error before\" \"not_a_string\" } */\n+\n+#define FOO \"walrus\"\n+  y = FOO;\n+}"}, {"sha": "7cc1379a8a99d6c5ac58db05b0039e0d285a7e45", "filename": "gcc/testsuite/gcc.dg/charset/asm3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm3.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,33 @@\n+/* Test for complex asm statements. Make sure it compiles\n+   then test for some of the asm statements not being translated.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"std\" } }\n+   { dg-final { scan-assembler \"cld\" } }\n+   { dg-final { scan-assembler \"rep\" } }\n+   { dg-final { scan-assembler \"movsb\" } } */\n+#define size_t int\n+void *\n+memmove (void *__dest, __const void *__src, size_t __n)\n+{\n+  register unsigned long int __d0, __d1, __d2;\n+  if (__dest < __src)\n+    __asm__ __volatile__\n+      (\"cld\\n\\t\"\n+       \"rep\\n\\t\"\n+       \"movsb\"\n+       : \"=&c\" (__d0), \"=&S\" (__d1), \"=&D\" (__d2)\n+       : \"0\" (__n), \"1\" (__src), \"2\" (__dest)\n+       : \"memory\");\n+  else\n+    __asm__ __volatile__\n+      (\"std\\n\\t\"\n+       \"rep\\n\\t\"\n+       \"movsb\\n\\t\"\n+       \"cld\"\n+       : \"=&c\" (__d0), \"=&S\" (__d1), \"=&D\" (__d2)\n+       : \"0\" (__n), \"1\" (__n - 1 + (const char *) __src),\n+         \"2\" (__n - 1 + (char *) __dest)\n+       : \"memory\");\n+  return __dest;\n+}"}, {"sha": "cd850c3e81ffc373d36ecfe7d14934975c1bd92b", "filename": "gcc/testsuite/gcc.dg/charset/asm4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm4.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,10 @@\n+/* Simple asm test.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"foo\" } } */\n+extern int bar;\n+\n+int main (void)\n+{\n+  asm (\"foo %0\" : \"=r\" (bar));\n+}"}, {"sha": "fa93f40fdaf000f695869acbc5299d303426f636", "filename": "gcc/testsuite/gcc.dg/charset/asm5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fasm5.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,8 @@\n+/* Test for string translation.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler-not \"translate\" } } */\n+void foo (void)\n+{\n+  asm (\"xx\" : : \"r\"(\"translate\") : \"cc\");\n+}"}, {"sha": "993c7934c80600b0eb19fecdc95a022a00b26bf6", "filename": "gcc/testsuite/gcc.dg/charset/attribute1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute1.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,10 @@\n+/* Test for attribute non-translation.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler \"foo\" } } */\n+int walrus __attribute__ ((section (\".foo\")));\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "4ce95a51f84bcc785be5c8fa4a51f0a4fca4e82c", "filename": "gcc/testsuite/gcc.dg/charset/attribute2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fattribute2.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,8 @@\n+/* Test to make sure that invalid attributes aren't translated.\n+   If error recovery is ever testable then \"foobar\" should be\n+   translated.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+ */\n+int foo __attribute__ ((walrus)); /* { dg-error \"walrus\" \"ignored\" } */\n+char x[] = \"foobar\";"}, {"sha": "ad75cb55af8bacee87773700884dc9ccc61d7e52", "filename": "gcc/testsuite/gcc.dg/charset/charset.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fcharset.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fcharset.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fcharset.exp?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,44 @@\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# GCC testsuite that uses the 'dg.exp' driver.\n+\n+# There's a bunch of headers we need.\n+if [is_remote host] {\n+    foreach header [glob -nocomplain $srcdir/$subdir/*.{h,def} ] {\n+        remote_download host $header\n+    }\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib target-supports.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CHARSETCFLAGS\n+if ![info exists DEFAULT_CHARSETCFLAGS] then {\n+    set DEFAULT_CHARSETCFLAGS \"-fexec-charset=IBM-1047\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,S} ]] \\\n+        \"\" $DEFAULT_CHARSETCFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "375e28a2ed62fb334a0539ba2c336de529dd5dc5", "filename": "gcc/testsuite/gcc.dg/charset/string.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fstring.c?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -0,0 +1,5 @@\n+/* Simple character translation test.  */\n+/* { dg-do compile }\n+   { dg-require-iconv \"IBM-1047\" }\n+   { dg-final { scan-assembler-not \"string foobar\" } } */\n+char *foo = \"string foobar\";"}, {"sha": "d1a85a819c519a01d581c16e94bda655d94926b5", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -4,15 +4,15 @@\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n load_lib dg.exp\n load_lib file-format.exp\n@@ -175,7 +175,7 @@ proc gcc-dg-runtest { testcases default-extra-flags } {\n     global runtests\n \n     foreach test $testcases {\n-\t# If we're only testing specific files and this isn't one of \n+\t# If we're only testing specific files and this isn't one of\n \t# them, skip it.\n \tif ![runtest_file_p $runtests $test] {\n \t    continue\n@@ -226,7 +226,7 @@ proc gcc-dg-debug-runtest { target_compile trivial opt_opts testcases } {\n     global runtests\n \n     foreach test $testcases {\n-\t# If we're only testing specific files and this isn't one of \n+\t# If we're only testing specific files and this isn't one of\n \t# them, skip it.\n \tif ![runtest_file_p $runtests $test] {\n \t    continue\n@@ -237,7 +237,7 @@ proc gcc-dg-debug-runtest { target_compile trivial opt_opts testcases } {\n \tforeach flags $DEBUG_TORTURE_OPTIONS {\n \t    set doit 1\n \t    if { [string match {*/debug-[126].c} \"$nshort\"] \\\n-\t\t    && [string match \"*1\" [lindex \"$flags\" 0] ] } { \n+\t\t    && [string match \"*1\" [lindex \"$flags\" 0] ] } {\n \t\tset doit 0\n \t    }\n \n@@ -333,7 +333,7 @@ proc dg-require-profiling { args } {\n \n # If this target does not support DLL attributes skip this test.\n \n-proc dg-require-dll { args } { \n+proc dg-require-dll { args } {\n     global target_triplet\n     # As a special case, the mcore-*-elf supports dllimport/dllexport.\n     if { [string match \"mcore-*-elf\" $target_triplet] } {\n@@ -348,6 +348,15 @@ proc dg-require-dll { args } {\n     set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n }\n \n+proc dg-require-iconv { args } {\n+    if { ![ check_iconv_available ${args} ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n # Prune any messages matching ARGS[1] (a regexp) from test output.\n proc dg-prune-output { args } {\n     global additional_prunes"}, {"sha": "ef2989043b3022780814be1eb025981d424678c6", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2152660651dd8d705e788e30dc9e6baa68706ab3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2152660651dd8d705e788e30dc9e6baa68706ab3", "patch": "@@ -4,15 +4,15 @@\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n # Please email any bugs, comments, and/or additions to this file to:\n # gcc-patches@gcc.gnu.org\n@@ -31,13 +31,13 @@ proc check_weak_available { } {\n     global target_cpu\n \n     # All mips targets should support it\n-    \n+\n     if { [ string first \"mips\" $target_cpu ] >= 0 } {\n         return 1\n     }\n \n     # All solaris2 targets should support it\n-    \n+\n     if { [regexp \".*-solaris2.*\" $target_triplet] } {\n         return 1\n     }\n@@ -139,7 +139,7 @@ proc check_alias_available { } {\n \t\t}\n \t    }\n \t}\n-\t\n+\n \tverbose \"check_alias_available  returning $alias_available_saved\" 2\n     }\n \n@@ -187,7 +187,7 @@ proc check_profiling_available { test_what } {\n     # exist on any irix6 system currently posting testsuite results.\n     # Support for -pg on irix relies on gcrt1.o which doesn't exist yet.\n     # See: http://gcc.gnu.org/ml/gcc/2002-10/msg00169.html\n-    if { [istarget mips*-*-irix*] \n+    if { [istarget mips*-*-irix*]\n     && ([lindex $test_what 1] == \"-p\" || [lindex $test_what 1] == \"-pg\") } {\n \treturn 0\n     }\n@@ -201,13 +201,44 @@ proc check_profiling_available { test_what } {\n \t     || [istarget strongarm*-*-elf]\n \t     || [istarget xscale*-*-elf]\n \t     || [istarget cris-*-*]\n-\t     || [istarget h8300-*-*] \n+\t     || [istarget h8300-*-*]\n \t     || [istarget *-*-windiss] } {\n \t    set profiling_available_saved 0\n \t} else {\n \t    set profiling_available_saved 1\n \t}\n     }\n-    \n+\n     return $profiling_available_saved\n }\n+\n+# Return true if iconv is supported on the target. In particular IBM-1047.\n+\n+proc check_iconv_available { test_what } {\n+    global tool\n+\n+    set result \"\"\n+\n+    verbose \"check_iconv_available compiling testfile\" 1\n+    set f [open \"tmp.c\" \"w\"]\n+    # Compile a small test program.\n+    puts $f \"#include <iconv.h>\\n\"\n+    puts $f \"int main (void)\\n {\\n iconv_t cd; \\n\"\n+    puts $f \"cd = iconv_open (\\\"[lindex $test_what 1]\\\", \\\"UTF-8\\\");\\n\"\n+    puts $f \"if (cd == (iconv_t) -1)\\n return 1;\\n\"\n+    puts $f \"return 0;\\n}\"\n+    close $f\n+\n+    set lines [${tool}_target_compile \"tmp.c\" \"tmp.x\" executable \"\"]\n+\n+    set result [${tool}_load \"./tmp.x\" \"\" \"\"]\n+    set status [lindex $result 0];\n+\n+    verbose \"status is <$status>\"\n+\n+    if { $status == \"pass\" } then {\n+\treturn 1\n+    }\n+\n+    return 0\n+}"}]}