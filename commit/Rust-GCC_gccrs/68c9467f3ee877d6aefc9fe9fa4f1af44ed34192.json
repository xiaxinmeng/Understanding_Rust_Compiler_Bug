{"sha": "68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjOTQ2N2YzZWU4NzdkNmFlZmM5ZmU5ZmE0ZjFhZjQ0ZWQzNDE5Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-01-19T20:35:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-01-19T20:35:55Z"}, "message": "ipa-devirt.c (ipa_devirt): Drop polymorphic call info in hopeless cases.\n\n\n\t* ipa-devirt.c (ipa_devirt): Drop polymorphic call info in hopeless\n\tcases.\n\nFrom-SVN: r219858", "tree": {"sha": "3b4b0631f624755107d28fb30fb863ecb1580843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b4b0631f624755107d28fb30fb863ecb1580843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192/comments", "author": null, "committer": null, "parents": [{"sha": "6ce54d0f336b3907dafcc9a3046ef56fd7913847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce54d0f336b3907dafcc9a3046ef56fd7913847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce54d0f336b3907dafcc9a3046ef56fd7913847"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "25c3bc1b2e596c42427c29f82f9bedbad4b2f4a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "patch": "@@ -1,3 +1,8 @@\n+2015-01-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (ipa_devirt): Drop polymorphic call info in hopeless\n+\tcases.\n+\n 2015-01-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/64671"}, {"sha": "aaffa3cbb2f2a24eb4bb71c128b129234b9f4bb0", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c9467f3ee877d6aefc9fe9fa4f1af44ed34192/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=68c9467f3ee877d6aefc9fe9fa4f1af44ed34192", "patch": "@@ -2815,6 +2815,7 @@ ipa_devirt (void)\n   int npolymorphic = 0, nspeculated = 0, nconverted = 0, ncold = 0;\n   int nmultiple = 0, noverwritable = 0, ndevirtualized = 0, nnotdefined = 0;\n   int nwrong = 0, nok = 0, nexternal = 0, nartificial = 0;\n+  int ndropped = 0;\n \n   if (!odr_types_ptr)\n     return 0;\n@@ -2865,6 +2866,28 @@ ipa_devirt (void)\n \n \t    npolymorphic++;\n \n+\t    /* See if the call can be devirtualized by means of ipa-prop's\n+\t       polymorphic call context propagation.  If not, we can just\n+\t       forget about this call being polymorphic and avoid some heavy\n+\t       lifting in remove_unreachable_nodes that will otherwise try to\n+\t       keep all possible targets alive until inlining and in the inliner\n+\t       itself.\n+\n+\t       This may need to be revisited once we add further ways to use\n+\t       the may edges, but it is a resonable thing to do right now.  */\n+\n+\t    if ((e->indirect_info->param_index == -1\n+\t\t|| (!opt_for_fn (n->decl, flag_devirtualize_speculatively)\n+\t\t    && e->indirect_info->vptr_changed))\n+\t\t&& !flag_ltrans_devirtualize)\n+\t      {\n+\t\te->indirect_info->polymorphic = false;\n+\t\tndropped++;\n+\t        if (dump_file)\n+\t\t  fprintf (dump_file, \"Dropping polymorphic call info;\"\n+\t\t\t   \" it can not be used by ipa-prop\\n\");\n+\t      }\n+\n \t    if (!opt_for_fn (n->decl, flag_devirtualize_speculatively))\n \t      continue;\n \n@@ -3094,11 +3117,11 @@ ipa_devirt (void)\n \t     \" %i speculatively devirtualized, %i cold\\n\"\n \t     \"%i have multiple targets, %i overwritable,\"\n \t     \" %i already speculated (%i agree, %i disagree),\"\n-\t     \" %i external, %i not defined, %i artificial\\n\",\n+\t     \" %i external, %i not defined, %i artificial, %i infos dropped\\n\",\n \t     npolymorphic, ndevirtualized, nconverted, ncold,\n \t     nmultiple, noverwritable, nspeculated, nok, nwrong,\n-\t     nexternal, nnotdefined, nartificial);\n-  return ndevirtualized ? TODO_remove_functions : 0;\n+\t     nexternal, nnotdefined, nartificial, ndropped);\n+  return ndevirtualized || ndropped ? TODO_remove_functions : 0;\n }\n \n namespace {"}]}