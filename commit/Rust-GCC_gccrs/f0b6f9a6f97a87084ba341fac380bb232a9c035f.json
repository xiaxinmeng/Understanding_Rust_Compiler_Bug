{"sha": "f0b6f9a6f97a87084ba341fac380bb232a9c035f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiNmY5YTZmOTdhODcwODRiYTM0MWZhYzM4MGJiMjMyYTljMDM1Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-03-01T09:14:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-03-01T09:14:08Z"}, "message": "h8300-protos.h: Fix formatting.\n\n\t* config/h8300/h8300-protos.h: Fix formatting.\n\t* config/h8300/h8300.c: Likewise.\n\t* config/h8300/h8300.h: Likewise.\n\nFrom-SVN: r50192", "tree": {"sha": "f9099b496bdde8f8838dc8e0eb94165e20d70f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9099b496bdde8f8838dc8e0eb94165e20d70f8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b6f9a6f97a87084ba341fac380bb232a9c035f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b6f9a6f97a87084ba341fac380bb232a9c035f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b6f9a6f97a87084ba341fac380bb232a9c035f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b6f9a6f97a87084ba341fac380bb232a9c035f/comments", "author": null, "committer": null, "parents": [{"sha": "bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8db8a122ca4449832e7bed6d3f49be60f4c75e"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "9bdcf0dc3f8e393e81c7fe1b5217b5aceb07b963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0b6f9a6f97a87084ba341fac380bb232a9c035f", "patch": "@@ -1,3 +1,9 @@\n+2002-03-01  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300-protos.h: Fix formatting.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/h8300/h8300.h: Likewise.\n+\n 2002-03-01  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (print_operand): Support 16-bit"}, {"sha": "ff31530dec981d3883624862aa21bbda78621032", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f0b6f9a6f97a87084ba341fac380bb232a9c035f", "patch": "@@ -1,5 +1,5 @@\n-/* Definitions of target machine for GNU compiler. \n-   Hitachi H8/300 version generating coff \n+/* Definitions of target machine for GNU compiler.\n+   Hitachi H8/300 version generating coff\n    Copyright (C) 2000 Free SoftwareFoundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com)."}, {"sha": "7a77cc8a024374d4471c408e6c5909489b94ea67", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f0b6f9a6f97a87084ba341fac380bb232a9c035f", "patch": "@@ -270,7 +270,7 @@ pop (file, rn)\n   fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[rn]);\n }\n \n-/* This is what the stack looks like after the prolog of \n+/* This is what the stack looks like after the prolog of\n    a function with a frame has been set up:\n \n    <args>\n@@ -1842,7 +1842,7 @@ compute_logical_op_cc (mode, operands)\n    Below, a trailing '*' after the shift count indicates the \"best\"\n    mode isn't implemented.  We only describe SHIFT_SPECIAL cases to\n    simplify the table.  For other cases, refer to shift_alg_[qhs]i.\n-   \n+\n    H8/300 QImode shifts\n    7      - ASHIFTRT: shll, subx (propagate carry bit to all bits)\n \n@@ -2588,7 +2588,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n       else if (TARGET_H8300 && 24 <= count && count <= 28)\n \t{\n \t  info->remainder = count - 24;\n- \n+\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:"}, {"sha": "c5852f54c6d671729e5e5b2c7f76990c02f2dec6", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b6f9a6f97a87084ba341fac380bb232a9c035f/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f0b6f9a6f97a87084ba341fac380bb232a9c035f", "patch": "@@ -1,5 +1,5 @@\n-/* Definitions of target machine for GNU compiler. \n-   Hitachi H8/300 version generating coff \n+/* Definitions of target machine for GNU compiler.\n+   Hitachi H8/300 version generating coff\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n    2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n@@ -171,7 +171,7 @@ extern int target_flags;\n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive\n-   but a CALL with constant address is cheap. \n+   but a CALL with constant address is cheap.\n \n    Calls through a register are cheaper than calls to named\n    functions; however, the register pressure this causes makes\n@@ -194,7 +194,7 @@ extern int target_flags;\n #define BYTES_BIG_ENDIAN 1\n \n /* Define this if most significant word of a multiword number is lowest\n-   numbered.  \n+   numbered.\n    This is true on an H8/300 (actually we can make it up, but we choose to\n    be consistent).  */\n #define WORDS_BIG_ENDIAN 1\n@@ -263,7 +263,7 @@ extern int target_flags;\n    from 0 to just below FIRST_PSEUDO_REGISTER.\n \n    All registers that the compiler knows about must be given numbers,\n-   even those that are not normally considered general registers.  \n+   even those that are not normally considered general registers.\n \n    Reg 9 does not correspond to any hardware register, but instead\n    appears in the RTL as an argument pointer prior to reload, and is\n@@ -284,7 +284,7 @@ extern int target_flags;\n    The latter must include the registers where values are returned\n    and the register where structure-value addresses are passed.\n    Aside from that, you can include as many other registers as you\n-   like.  \n+   like.\n \n    H8 destroys r0,r1,r2,r3.  */\n \n@@ -304,7 +304,7 @@ extern int target_flags;\n    to hold something of mode MODE.\n \n    This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers. \n+   but can be less for certain modes in special long registers.\n \n    We pretend the MAC register is 32bits -- we don't have any data\n    types on the H8 series to handle more than 32bits.  */\n@@ -424,7 +424,7 @@ enum reg_class {\n #define INDEX_REG_CLASS NO_REGS\n #define BASE_REG_CLASS  GENERAL_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description. \n+/* Get reg_class from a letter such as appears in the machine description.\n \n    'a' is the MAC register.  */\n \n@@ -463,8 +463,8 @@ enum reg_class {\n    0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself. \n-     \n+   Here VALUE is the CONST_DOUBLE rtx itself.\n+\n   `G' is a floating-point zero.  */\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\\\n@@ -486,7 +486,7 @@ enum reg_class {\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* Any SI register-to-register move may need to be reloaded, \n+/* Any SI register-to-register move may need to be reloaded,\n    so define REGISTER_MOVE_COST to be > 2 so that reload never\n    shortcuts.  */\n \n@@ -586,8 +586,8 @@ enum reg_class {\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0. \n-   \n+   otherwise, FUNC is 0.\n+\n    On the H8 the return value is in R0/R1.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n@@ -728,7 +728,7 @@ struct cum_arg\n #define EXIT_IGNORE_STACK 0\n \n /* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  \n+   of a trampoline, leaving space for the variable parts.\n \n    H8/300\n \t      vvvv context\n@@ -900,7 +900,7 @@ struct cum_arg\n \n    The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS,\n    except for CONSTANT_ADDRESS_P which is actually\n-   machine-independent.  \n+   machine-independent.\n \n    On the H8/300, a legitimate address has the form\n    REG, REG+CONSTANT_ADDRESS or CONSTANT_ADDRESS.  */\n@@ -930,7 +930,7 @@ struct cum_arg\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output. \n+   opportunities to optimize the output.\n \n    For the H8/300, don't do anything.  */\n "}]}