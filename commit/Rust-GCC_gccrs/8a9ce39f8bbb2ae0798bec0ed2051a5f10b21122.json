{"sha": "8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5Y2UzOWY4YmJiMmFlMDc5OGJlYzBlZDIwNTFhNWYxMGIyMTEyMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-19T07:54:25Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-19T07:54:25Z"}, "message": "d: Fix FAIL in gdc.dg/runnable.d on X32 targets (PR94609)\n\nPatch fixes test failure seen on X32 where a nested struct was passed in\nregisters, rather than via invisible reference.  Now, all non-POD\nstructs are passed by invisible reference, not just those with a\nuser-defined copy constructor/destructor.\n\ngcc/d/ChangeLog:\n\n\tPR d/94609\n\t* d-codegen.cc (argument_reference_p): Don't check TREE_ADDRESSABLE.\n\t(type_passed_as): Build reference type if TREE_ADDRESSABLE.\n\t* d-convert.cc (convert_for_argument): Build explicit TARGET_EXPR if\n\tneeded for arguments passed by invisible reference.\n\t* types.cc (TypeVisitor::visit (TypeStruct *)): Mark all structs that\n\tare not POD as TREE_ADDRESSABLE.", "tree": {"sha": "fc21a3367bf87c7264be4c8c3b30124fa1897449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc21a3367bf87c7264be4c8c3b30124fa1897449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d207dd4003765481fb89710159d63dad571f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d207dd4003765481fb89710159d63dad571f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d207dd4003765481fb89710159d63dad571f05"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "6c3eb89c4d71d279869852fb7371a91175b1b490", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "patch": "@@ -1,3 +1,13 @@\n+2020-04-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/94609\n+\t* d-codegen.cc (argument_reference_p): Don't check TREE_ADDRESSABLE.\n+\t(type_passed_as): Build reference type if TREE_ADDRESSABLE.\n+\t* d-convert.cc (convert_for_argument): Build explicit TARGET_EXPR if\n+\tneeded for arguments passed by invisible reference.\n+\t* types.cc (TypeVisitor::visit (TypeStruct *)): Mark all structs that\n+\tare not POD as TREE_ADDRESSABLE.\n+\n 2020-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* Make-lang.in (D_FRONTEND_OBJS): Remove d/argtypes.o."}, {"sha": "8dc1ab264f84547c34bf4d6e30e014d976b3313f", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "patch": "@@ -180,10 +180,6 @@ argument_reference_p (Parameter *arg)\n   if (tb->ty == Treference || arg->storageClass & (STCout | STCref))\n     return true;\n \n-  tree type = build_ctype (arg->type);\n-  if (TREE_ADDRESSABLE (type))\n-    return true;\n-\n   return false;\n }\n \n@@ -211,7 +207,7 @@ type_passed_as (Parameter *arg)\n   tree type = build_ctype (arg->type);\n \n   /* Parameter is passed by reference.  */\n-  if (argument_reference_p (arg))\n+  if (TREE_ADDRESSABLE (type) || argument_reference_p (arg))\n     return build_reference_type (type);\n \n   return type;"}, {"sha": "9ee149b8386330519fa6e021ad2e51c512fe96d8", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "patch": "@@ -677,6 +677,21 @@ convert_for_argument (tree expr, Parameter *arg)\n       /* Front-end shouldn't automatically take the address.  */\n       return convert (type_passed_as (arg), build_address (expr));\n     }\n+  else if (TREE_ADDRESSABLE (TREE_TYPE (expr)))\n+    {\n+      /* Type is a struct passed by invisible reference.  */\n+      Type *t = arg->type->toBasetype ();\n+      gcc_assert (t->ty == Tstruct);\n+      StructDeclaration *sd = ((TypeStruct *) t)->sym;\n+\n+      /* Nested structs also have ADDRESSABLE set, but if the type has\n+\t neither a copy constructor nor a destructor available, then we\n+\t need to take care of copying its value before passing it.  */\n+      if (!sd->postblit && !sd->dtor)\n+\texpr = force_target_expr (expr);\n+\n+      return convert (type_passed_as (arg), build_address (expr));\n+    }\n \n   return expr;\n }"}, {"sha": "f6ae5740f010a0deb32ddd4fe4abf8f153f14a99", "filename": "gcc/d/types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=8a9ce39f8bbb2ae0798bec0ed2051a5f10b21122", "patch": "@@ -915,7 +915,7 @@ class TypeVisitor : public Visitor\n     /* For structs with a user defined postblit or a destructor,\n        also set TREE_ADDRESSABLE on the type and all variants.\n        This will make the struct be passed around by reference.  */\n-    if (t->sym->postblit || t->sym->dtor)\n+    if (!t->sym->isPOD ())\n       {\n \tfor (tree tv = t->ctype; tv != NULL_TREE; tv = TYPE_NEXT_VARIANT (tv))\n \t  TREE_ADDRESSABLE (tv) = 1;"}]}