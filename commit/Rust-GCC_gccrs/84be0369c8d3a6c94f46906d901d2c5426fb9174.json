{"sha": "84be0369c8d3a6c94f46906d901d2c5426fb9174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiZTAzNjljOGQzYTZjOTRmNDY5MDZkOTAxZDJjNTQyNmZiOTE3NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-17T08:39:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-17T10:49:22Z"}, "message": "[Ada] Remove discriminant checks processing in gigi\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_Selected_Component): Request a compile\n\ttime error replacement in Apply_Compile_Time_Constraint_Error\n\tin case of an invalid field.\n\t* sem_ch3.adb (Create_Constrained_Components): Take advantage of\n\tGather_Components also in the case of a record extension and\n\talso constrain records in the case of compile time known discriminant\n\tvalues, as already done in gigi.\n\t* sem_util.ads, sem_util.adb (Gather_Components): New parameter\n\tAllow_Compile_Time to allow compile time known (but non static)\n\tdiscriminant values, needed by Create_Constrained_Components,\n\tand new parameter Include_Interface_Tag.\n\t(Is_Dependent_Component_Of_Mutable_Object): Use Original_Node to\n\tperform check on the original tree.\n\t(Is_Object_Reference): Likewise.  Only call Original_Node when\n\trelevant via a new function Safe_Prefix.\n\t(Is_Static_Discriminant_Component, In_Check_Node): New.\n\t(Is_Actual_Out_Or_In_Out_Parameter): New.\n\t* exp_ch4.adb (Expand_N_Selected_Component): Remove no longer needed\n\tcode preventing evaluating statically discriminants in more cases.\n\t* exp_ch5.adb (Expand_N_Loop_Statement): Simplify expansion of loops\n\twith an N_Raise_xxx_Error node to avoid confusing the code generator.\n\t(Make_Component_List_Assign): Try to find a constrained type to\n\textract discriminant values from, so that the case statement\n\tbuilt gets an opportunity to be folded by\n\tExpand_N_Case_Statement.\n\t(Expand_Assign_Record): Update comments, code cleanups.\n\t* sem_attr.adb (Analyze_Attribute): Perform most of the analysis\n\ton the original prefix node to deal properly with a prefix rewritten\n\tas a N_Raise_xxx_Error.\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Handle properly\n\ta discrete subtype definition being rewritten as N_Raise_xxx_Error.\n\t* sem_ch8.adb (Analyze_Object_Renaming): Handle N_Raise_xxx_Error\n\tnodes as part of the expression being renamed.\n\t* sem_eval.ads, sem_eval.adb (Fold, Eval_Selected_Component): New.\n\t(Compile_Time_Known_Value, Expr_Value, Expr_Rep_Value): Evaluate\n\tstatic discriminant component values.\n\t* sem_res.adb (Resolve_Selected_Component): Call\n\tEval_Selected_Component.", "tree": {"sha": "1250f8a04ad17af94f101ef30149f1459a0869ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1250f8a04ad17af94f101ef30149f1459a0869ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84be0369c8d3a6c94f46906d901d2c5426fb9174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84be0369c8d3a6c94f46906d901d2c5426fb9174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84be0369c8d3a6c94f46906d901d2c5426fb9174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84be0369c8d3a6c94f46906d901d2c5426fb9174/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3a70f2d1fd213ff669bdaf5752615ab871a2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3a70f2d1fd213ff669bdaf5752615ab871a2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3a70f2d1fd213ff669bdaf5752615ab871a2c7"}], "stats": {"total": 474, "additions": 353, "deletions": 121}, "files": [{"sha": "04bd1fe0dba3a591c1756000e8a1b4858142f8f6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -11162,7 +11162,7 @@ package body Exp_Ch4 is\n                   --  because the selected component may be a reference to the\n                   --  object being initialized, whose discriminant is not yet\n                   --  set. This only happens in complex cases involving changes\n-                  --  or representation.\n+                  --  of representation.\n \n                   if Disc = Entity (Selector_Name (N))\n                     and then (Is_Entity_Name (Dval)\n@@ -11174,15 +11174,7 @@ package body Exp_Ch4 is\n                      --  constrained by an outer discriminant, which cannot\n                      --  be optimized away.\n \n-                     if Denotes_Discriminant\n-                          (Dval, Check_Concurrent => True)\n-                     then\n-                        exit Discr_Loop;\n-\n-                     elsif Nkind (Original_Node (Dval)) = N_Selected_Component\n-                       and then\n-                         Denotes_Discriminant\n-                           (Selector_Name (Original_Node (Dval)), True)\n+                     if Denotes_Discriminant (Dval, Check_Concurrent => True)\n                      then\n                         exit Discr_Loop;\n "}, {"sha": "4cae2ee8d3f8b860ce0c8f4df39e325d766ffb44", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -1623,14 +1623,27 @@ package body Exp_Ch5 is\n             CI : constant List_Id := Component_Items (CL);\n             VP : constant Node_Id := Variant_Part (CL);\n \n-            Alts   : List_Id;\n-            DC     : Node_Id;\n-            DCH    : List_Id;\n-            Expr   : Node_Id;\n-            Result : List_Id;\n-            V      : Node_Id;\n+            Constrained_Typ : Entity_Id;\n+            Alts            : List_Id;\n+            DC              : Node_Id;\n+            DCH             : List_Id;\n+            Expr            : Node_Id;\n+            Result          : List_Id;\n+            V               : Node_Id;\n \n          begin\n+            --  Try to find a constrained type to extract discriminant values\n+            --  from, so that the case statement built below gets an\n+            --  opportunity to be folded by Expand_N_Case_Statement.\n+\n+            if U_U or else Is_Constrained (Etype (Rhs)) then\n+               Constrained_Typ := Etype (Rhs);\n+            elsif Is_Constrained (Etype (Expression (N))) then\n+               Constrained_Typ := Etype (Expression (N));\n+            else\n+               Constrained_Typ := Empty;\n+            end if;\n+\n             Result := Make_Field_Assigns (CI);\n \n             if Present (VP) then\n@@ -1652,17 +1665,12 @@ package body Exp_Ch5 is\n                   Next_Non_Pragma (V);\n                end loop;\n \n-               --  If we have an Unchecked_Union, use the value of the inferred\n-               --  discriminant of the variant part expression as the switch\n-               --  for the case statement. The case statement may later be\n-               --  folded.\n-\n-               if U_U then\n+               if Present (Constrained_Typ) then\n                   Expr :=\n                     New_Copy (Get_Discriminant_Value (\n                       Entity (Name (VP)),\n-                      Etype (Rhs),\n-                      Discriminant_Constraint (Etype (Rhs))));\n+                      Constrained_Typ,\n+                      Discriminant_Constraint (Constrained_Typ)));\n                else\n                   Expr :=\n                     Make_Selected_Component (Loc,\n@@ -1786,9 +1794,10 @@ package body Exp_Ch5 is\n       --  Start of processing for Expand_Assign_Record\n \n       begin\n-         --  Note that we use the base types for this processing. This results\n-         --  in some extra work in the constrained case, but the change of\n-         --  representation case is so unusual that it is not worth the effort.\n+         --  Note that we need to use the base types for this processing in\n+         --  order to retrieve the Type_Definition. In the constrained case,\n+         --  we filter out the non relevant fields in\n+         --  Make_Component_List_Assign.\n \n          --  First copy the discriminants. This is done unconditionally. It\n          --  is required in the unconstrained left side case, and also in the\n@@ -1824,7 +1833,7 @@ package body Exp_Ch5 is\n                      CF := F;\n                   end if;\n \n-                  if Is_Unchecked_Union (Base_Type (R_Typ)) then\n+                  if Is_Unchecked_Union (R_Typ) then\n \n                      --  Within an initialization procedure this is the\n                      --  assignment to an unchecked union component, in which\n@@ -1916,8 +1925,8 @@ package body Exp_Ch5 is\n                Insert_Actions (N,\n                  Make_Component_List_Assign (Component_List (RDef), True));\n             else\n-               Insert_Actions\n-                 (N, Make_Component_List_Assign (Component_List (RDef)));\n+               Insert_Actions (N,\n+                 Make_Component_List_Assign (Component_List (RDef)));\n             end if;\n \n             Rewrite (N, Make_Null_Statement (Loc));\n@@ -4681,6 +4690,16 @@ package body Exp_Ch5 is\n             New_Id  : Entity_Id;\n \n          begin\n+            --  If Discrete_Subtype_Definition has been rewritten as an\n+            --  N_Raise_xxx_Error, rewrite the whole loop as a raise node to\n+            --  avoid confusing the code generator down the line.\n+\n+            if Nkind (Discrete_Subtype_Definition (LPS)) in N_Raise_xxx_Error\n+            then\n+               Rewrite (N, Discrete_Subtype_Definition (LPS));\n+               return;\n+            end if;\n+\n             if Present (Iterator_Filter (LPS)) then\n                pragma Assert (Ada_Version >= Ada_2020);\n                Set_Statements (N,"}, {"sha": "e4537e45553307346cc01181653d6a8b5dc74d98", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -227,9 +227,11 @@ package body Sem_Attr is\n    procedure Analyze_Attribute (N : Node_Id) is\n       Loc     : constant Source_Ptr   := Sloc (N);\n       Aname   : constant Name_Id      := Attribute_Name (N);\n-      P       : constant Node_Id      := Prefix (N);\n       Exprs   : constant List_Id      := Expressions (N);\n       Attr_Id : constant Attribute_Id := Get_Attribute_Id (Aname);\n+      P_Old   : constant Node_Id      := Prefix (N);\n+\n+      P       : Node_Id := P_Old;\n       E1      : Node_Id;\n       E2      : Node_Id;\n \n@@ -1836,7 +1838,7 @@ package body Sem_Attr is\n \n          --  Case of an expression\n \n-         Resolve (P);\n+         Resolve (P_Old);\n \n          if Is_Access_Type (P_Type) then\n \n@@ -1852,12 +1854,12 @@ package body Sem_Attr is\n                Freeze_Before (N, Designated_Type (P_Type));\n             end if;\n \n-            Rewrite (P,\n-              Make_Explicit_Dereference (Sloc (P),\n-                Prefix => Relocate_Node (P)));\n+            Rewrite (P_Old,\n+              Make_Explicit_Dereference (Sloc (P_Old),\n+                Prefix => Relocate_Node (P_Old)));\n \n-            Analyze_And_Resolve (P);\n-            P_Type := Etype (P);\n+            Analyze_And_Resolve (P_Old);\n+            P_Type := Etype (P_Old);\n \n             if P_Type = Any_Type then\n                raise Bad_Attribute;\n@@ -3102,6 +3104,15 @@ package body Sem_Attr is\n          end if;\n       end if;\n \n+      --  If the prefix was rewritten as a raise node, then rewrite N as a\n+      --  raise node, to avoid creating inconsistent trees. We still need to\n+      --  perform legality checks on the original tree.\n+\n+      if Nkind (P) in N_Raise_xxx_Error then\n+         Rewrite (N, Relocate_Node (P));\n+         P := Original_Node (P_Old);\n+      end if;\n+\n       --  Remaining processing depends on attribute\n \n       case Attr_Id is"}, {"sha": "c01bce132c07f7a4df8034f4fb7b965362648508", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -14619,11 +14619,13 @@ package body Sem_Ch3 is\n       Comp_List   : constant Elist_Id   := New_Elmt_List;\n       Parent_Type : constant Entity_Id  := Etype (Typ);\n       Assoc_List  : constant List_Id    := New_List;\n-      Discr_Val   : Elmt_Id;\n-      Errors      : Boolean;\n-      New_C       : Entity_Id;\n-      Old_C       : Entity_Id;\n-      Is_Static   : Boolean := True;\n+\n+      Discr_Val             : Elmt_Id;\n+      Errors                : Boolean;\n+      New_C                 : Entity_Id;\n+      Old_C                 : Entity_Id;\n+      Is_Static             : Boolean := True;\n+      Is_Compile_Time_Known : Boolean := True;\n \n       procedure Collect_Fixed_Components (Typ : Entity_Id);\n       --  Collect parent type components that do not appear in a variant part\n@@ -14773,7 +14775,11 @@ package body Sem_Ch3 is\n       while Present (Discr_Val) loop\n          if not Is_OK_Static_Expression (Node (Discr_Val)) then\n             Is_Static := False;\n-            exit;\n+\n+            if not Compile_Time_Known_Value (Node (Discr_Val)) then\n+               Is_Compile_Time_Known := False;\n+               exit;\n+            end if;\n          end if;\n \n          Next_Elmt (Discr_Val);\n@@ -14871,63 +14877,60 @@ package body Sem_Ch3 is\n          end if;\n       end Add_Discriminants;\n \n-      if Is_Static\n+      if Is_Compile_Time_Known\n         and then Is_Variant_Record (Typ)\n       then\n          Collect_Fixed_Components (Typ);\n-\n-         Gather_Components (\n-           Typ,\n-           Component_List (Type_Definition (Parent (Typ))),\n-           Governed_By   => Assoc_List,\n-           Into          => Comp_List,\n-           Report_Errors => Errors);\n-         pragma Assert (not Errors\n-           or else Serious_Errors_Detected > 0);\n+         Gather_Components\n+           (Typ,\n+            Component_List (Type_Definition (Parent (Typ))),\n+            Governed_By          => Assoc_List,\n+            Into                 => Comp_List,\n+            Report_Errors        => Errors,\n+            Allow_Compile_Time   => True);\n+         pragma Assert (not Errors or else Serious_Errors_Detected > 0);\n \n          Create_All_Components;\n \n       --  If the subtype declaration is created for a tagged type derivation\n       --  with constraints, we retrieve the record definition of the parent\n       --  type to select the components of the proper variant.\n \n-      elsif Is_Static\n+      elsif Is_Compile_Time_Known\n         and then Is_Tagged_Type (Typ)\n         and then Nkind (Parent (Typ)) = N_Full_Type_Declaration\n         and then\n           Nkind (Type_Definition (Parent (Typ))) = N_Derived_Type_Definition\n         and then Is_Variant_Record (Parent_Type)\n       then\n          Collect_Fixed_Components (Typ);\n-\n          Gather_Components\n            (Typ,\n             Component_List (Type_Definition (Parent (Parent_Type))),\n-            Governed_By   => Assoc_List,\n-            Into          => Comp_List,\n-            Report_Errors => Errors);\n+            Governed_By          => Assoc_List,\n+            Into                 => Comp_List,\n+            Report_Errors        => Errors,\n+            Allow_Compile_Time   => True);\n \n          --  Note: previously there was a check at this point that no errors\n          --  were detected. As a consequence of AI05-220 there may be an error\n          --  if an inherited discriminant that controls a variant has a non-\n          --  static constraint.\n \n          --  If the tagged derivation has a type extension, collect all the\n-         --  new components therein.\n+         --  new relevant components therein via Gather_Components.\n \n          if Present (Record_Extension_Part (Type_Definition (Parent (Typ))))\n          then\n-            Old_C := First_Component (Typ);\n-            while Present (Old_C) loop\n-               if Original_Record_Component (Old_C) = Old_C\n-                 and then Chars (Old_C) /= Name_uTag\n-                 and then Chars (Old_C) /= Name_uParent\n-               then\n-                  Append_Elmt (Old_C, Comp_List);\n-               end if;\n-\n-               Next_Component (Old_C);\n-            end loop;\n+            Gather_Components\n+              (Typ,\n+               Component_List\n+                 (Record_Extension_Part (Type_Definition (Parent (Typ)))),\n+               Governed_By           => Assoc_List,\n+               Into                  => Comp_List,\n+               Report_Errors         => Errors,\n+               Allow_Compile_Time    => True,\n+               Include_Interface_Tag => True);\n          end if;\n \n          Create_All_Components;"}, {"sha": "7a8c261ee4f898ff37cb1986f726ed7e401c66a4", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -5455,7 +5455,7 @@ package body Sem_Ch4 is\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"component not present in }??\",\n                         CE_Discriminant_Check_Failed,\n-                        Ent => Prefix_Type, Rep => False);\n+                        Ent => Prefix_Type);\n \n                      Set_Raises_Constraint_Error (N);\n                      return;"}, {"sha": "0b1db8510c47d7708a6796908108b5999ff70d8a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -3097,7 +3097,10 @@ package body Sem_Ch5 is\n          Check_Predicate_Use (Entity (Subtype_Mark (DS)));\n       end if;\n \n-      Make_Index (DS, N);\n+      if Nkind (DS) not in N_Raise_xxx_Error then\n+         Make_Index (DS, N);\n+      end if;\n+\n       Set_Ekind (Id, E_Loop_Parameter);\n \n       --  A quantified expression which appears in a pre- or post-condition may"}, {"sha": "899464f961b7f58eb166d11b61f5e5b7a0c23934", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -772,6 +772,31 @@ package body Sem_Ch8 is\n       --  Obtain the name of the object from node Nod which is being renamed by\n       --  the object renaming declaration N.\n \n+      function Find_Raise_Node (N : Node_Id) return Traverse_Result;\n+      --  Process one node in search for N_Raise_xxx_Error nodes.\n+      --  Return Abandon if found, OK otherwise.\n+\n+      ---------------------\n+      -- Find_Raise_Node --\n+      ---------------------\n+\n+      function Find_Raise_Node (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (N) in N_Raise_xxx_Error then\n+            return Abandon;\n+         else\n+            return OK;\n+         end if;\n+      end Find_Raise_Node;\n+\n+      ------------------------\n+      -- No_Raise_xxx_Error --\n+      ------------------------\n+\n+      function No_Raise_xxx_Error is new Traverse_Func (Find_Raise_Node);\n+      --  Traverse tree to look for a N_Raise_xxx_Error node and returns\n+      --  Abandon if so and OK if none found.\n+\n       ------------------------------\n       -- Check_Constrained_Object --\n       ------------------------------\n@@ -1454,9 +1479,12 @@ package body Sem_Ch8 is\n       then\n          Error_Msg_N (\"incompatible types in renaming\", Nam);\n \n-      --  AI12-0383: Names that denote values can be renamed\n+      --  AI12-0383: Names that denote values can be renamed.\n+      --  Ignore (accept) N_Raise_xxx_Error nodes in this context.\n \n-      elsif Ada_Version < Ada_2020 then\n+      elsif Ada_Version < Ada_2020\n+        and then No_Raise_xxx_Error (Nam) = OK\n+      then\n          Error_Msg_N (\"value in renaming requires -gnat2020\", Nam);\n       end if;\n "}, {"sha": "8d47589df73c10af47c3616e06644419d50f0e3a", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -43,6 +43,7 @@ with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Cat;  use Sem_Cat;\n+with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Elab; use Sem_Elab;\n@@ -1855,6 +1856,12 @@ package body Sem_Eval is\n            N_Character_Literal | N_Real_Literal | N_String_Literal | N_Null\n          then\n             return True;\n+\n+         --  Evaluate static discriminants, to eliminate dead paths and\n+         --  redundant discriminant checks.\n+\n+         elsif Is_Static_Discriminant_Component (Op) then\n+            return True;\n          end if;\n       end if;\n \n@@ -3818,6 +3825,24 @@ package body Sem_Eval is\n       Warn_On_Known_Condition (N);\n    end Eval_Relational_Op;\n \n+   -----------------------------\n+   -- Eval_Selected_Component --\n+   -----------------------------\n+\n+   procedure Eval_Selected_Component (N : Node_Id) is\n+   begin\n+      --  If an attribute reference or a LHS, nothing to do.\n+      --  Also do not fold if N is an [in] out subprogram parameter.\n+      --  Fold will perform the other relevant tests.\n+\n+      if Nkind (Parent (N)) /= N_Attribute_Reference\n+        and then Is_LHS (N) = No\n+        and then not Is_Actual_Out_Or_In_Out_Parameter (N)\n+      then\n+         Fold (N);\n+      end if;\n+   end Eval_Selected_Component;\n+\n    ----------------\n    -- Eval_Shift --\n    ----------------\n@@ -4487,6 +4512,15 @@ package body Sem_Eval is\n       elsif Kind = N_Unchecked_Type_Conversion then\n          return Expr_Rep_Value (Expression (N));\n \n+      --  Static discriminant value\n+\n+      elsif Is_Static_Discriminant_Component (N) then\n+         return Expr_Rep_Value\n+                  (Get_Discriminant_Value\n+                     (Entity (Selector_Name (N)),\n+                      Etype (Prefix (N)),\n+                      Discriminant_Constraint (Etype (Prefix (N)))));\n+\n       else\n          raise Program_Error;\n       end if;\n@@ -4574,6 +4608,15 @@ package body Sem_Eval is\n       elsif Kind = N_Unchecked_Type_Conversion then\n          Val := Expr_Value (Expression (N));\n \n+      --  Static discriminant value\n+\n+      elsif Is_Static_Discriminant_Component (N) then\n+         Val := Expr_Value\n+                  (Get_Discriminant_Value\n+                     (Entity (Selector_Name (N)),\n+                      Etype (Prefix (N)),\n+                      Discriminant_Constraint (Etype (Prefix (N)))));\n+\n       else\n          raise Program_Error;\n       end if;\n@@ -4801,6 +4844,32 @@ package body Sem_Eval is\n       end if;\n    end Flag_Non_Static_Expr;\n \n+   ----------\n+   -- Fold --\n+   ----------\n+\n+   procedure Fold (N : Node_Id) is\n+      Typ : constant Entity_Id := Etype (N);\n+   begin\n+      --  If not known at compile time or if already a literal, nothing to do\n+\n+      if Nkind (N) in N_Numeric_Or_String_Literal\n+        or else not Compile_Time_Known_Value (N)\n+      then\n+         null;\n+\n+      elsif Is_Discrete_Type (Typ) then\n+         Fold_Uint (N, Expr_Value (N), Static => Is_Static_Expression (N));\n+\n+      elsif Is_Real_Type (Typ) then\n+         Fold_Ureal (N, Expr_Value_R (N), Static => Is_Static_Expression (N));\n+\n+      elsif Is_String_Type (Typ) then\n+         Fold_Str\n+           (N, Strval (Expr_Value_S (N)), Static => Is_Static_Expression (N));\n+      end if;\n+   end Fold;\n+\n    ----------------\n    -- Fold_Dummy --\n    ----------------"}, {"sha": "972cee646d7936d3c0ef9feeb85dbde2706fe915", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -330,6 +330,7 @@ package Sem_Eval is\n    procedure Eval_Op_Not                 (N : Node_Id);\n    procedure Eval_Real_Literal           (N : Node_Id);\n    procedure Eval_Relational_Op          (N : Node_Id);\n+   procedure Eval_Selected_Component     (N : Node_Id);\n    procedure Eval_Shift                  (N : Node_Id);\n    procedure Eval_Short_Circuit          (N : Node_Id);\n    procedure Eval_Slice                  (N : Node_Id);\n@@ -387,6 +388,10 @@ package Sem_Eval is\n    --  The call has no effect if Raises_Constraint_Error (N) is True, since\n    --  there is no point in folding if we have an error.\n \n+   procedure Fold (N : Node_Id);\n+   --  Rewrite N with the relevant value if Compile_Time_Known_Value (N) is\n+   --  True, otherwise a no-op.\n+\n    function Is_In_Range\n      (N            : Node_Id;\n       Typ          : Entity_Id;"}, {"sha": "4077ae1b256c1215533808bcce0021313c4570f4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -10891,30 +10891,34 @@ package body Sem_Res is\n          Set_Etype (N, Base_Type (Typ));\n       end if;\n \n-      --  Note: No Eval processing is required, because the prefix is of a\n-      --  record type, or protected type, and neither can possibly be static.\n+      --  Eval_Selected_Component may e.g. fold statically known discriminants.\n \n-      --  If the record type is atomic and the component is not, then this is\n-      --  worth a warning before Ada 2020, since we have a situation where the\n-      --  access to the component may cause extra read/writes of the atomic\n-      --  object, or partial word accesses, both of which may be unexpected.\n+      Eval_Selected_Component (N);\n \n-      if Nkind (N) = N_Selected_Component\n-        and then Is_Atomic_Ref_With_Address (N)\n-        and then not Is_Atomic (Entity (S))\n-        and then not Is_Atomic (Etype (Entity (S)))\n-        and then Ada_Version < Ada_2020\n-      then\n-         Error_Msg_N\n-           (\"??access to non-atomic component of atomic record\",\n-            Prefix (N));\n-         Error_Msg_N\n-           (\"\\??may cause unexpected accesses to atomic object\",\n-            Prefix (N));\n-      end if;\n+      if Nkind (N) = N_Selected_Component then\n \n-      Resolve_Implicit_Dereference (Prefix (N));\n-      Analyze_Dimension (N);\n+         --  If the record type is atomic and the component is not, then this\n+         --  is worth a warning before Ada 2020, since we have a situation\n+         --  where the access to the component may cause extra read/writes of\n+         --  the atomic object, or partial word accesses, both of which may be\n+         --  unexpected.\n+\n+         if Is_Atomic_Ref_With_Address (N)\n+           and then not Is_Atomic (Entity (S))\n+           and then not Is_Atomic (Etype (Entity (S)))\n+           and then Ada_Version < Ada_2020\n+         then\n+            Error_Msg_N\n+              (\"??access to non-atomic component of atomic record\",\n+               Prefix (N));\n+            Error_Msg_N\n+              (\"\\??may cause unexpected accesses to atomic object\",\n+               Prefix (N));\n+         end if;\n+\n+         Resolve_Implicit_Dereference (Prefix (N));\n+         Analyze_Dimension (N);\n+      end if;\n    end Resolve_Selected_Component;\n \n    -------------------"}, {"sha": "20ec9075a515b7e88bb7db89c899a085d14c0d94", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 97, "deletions": 21, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -9896,11 +9896,13 @@ package body Sem_Util is\n    -----------------------\n \n    procedure Gather_Components\n-     (Typ           : Entity_Id;\n-      Comp_List     : Node_Id;\n-      Governed_By   : List_Id;\n-      Into          : Elist_Id;\n-      Report_Errors : out Boolean)\n+     (Typ                   : Entity_Id;\n+      Comp_List             : Node_Id;\n+      Governed_By           : List_Id;\n+      Into                  : Elist_Id;\n+      Report_Errors         : out Boolean;\n+      Allow_Compile_Time    : Boolean := False;\n+      Include_Interface_Tag : Boolean := False)\n    is\n       Assoc           : Node_Id;\n       Variant         : Node_Id;\n@@ -9932,15 +9934,20 @@ package body Sem_Util is\n \n       while Present (Comp_Item) loop\n \n-         --  Skip the tag of a tagged record, the interface tags, as well\n-         --  as all items that are not user components (anonymous types,\n-         --  rep clauses, Parent field, controller field).\n+         --  Skip the tag of a tagged record, as well as all items that are not\n+         --  user components (anonymous types, rep clauses, Parent field,\n+         --  controller field).\n \n          if Nkind (Comp_Item) = N_Component_Declaration then\n             declare\n                Comp : constant Entity_Id := Defining_Identifier (Comp_Item);\n             begin\n-               if not Is_Tag (Comp) and then Chars (Comp) /= Name_uParent then\n+               if not (Is_Tag (Comp)\n+                        and then not\n+                          (Include_Interface_Tag\n+                            and then Etype (Comp) = RTE (RE_Interface_Tag)))\n+                 and then Chars (Comp) /= Name_uParent\n+               then\n                   Append_Elmt (Comp, Into);\n                end if;\n             end;\n@@ -10049,7 +10056,11 @@ package body Sem_Util is\n       end loop Find_Constraint;\n \n       Discrim_Value := Expression (Assoc);\n-      if Is_OK_Static_Expression (Discrim_Value) then\n+\n+      if Is_OK_Static_Expression (Discrim_Value)\n+        or else (Allow_Compile_Time\n+                 and then Compile_Time_Known_Value (Discrim_Value))\n+      then\n          Discrim_Value_Status := Static_Expr;\n       else\n          if Ada_Version >= Ada_2020 then\n@@ -10228,7 +10239,8 @@ package body Sem_Util is\n          end if;\n \n          Gather_Components\n-           (Typ, Component_List (Variant), Governed_By, Into, Report_Errors);\n+           (Typ, Component_List (Variant), Governed_By, Into,\n+            Report_Errors, Allow_Compile_Time);\n       end if;\n    end Gather_Components;\n \n@@ -13861,6 +13873,24 @@ package body Sem_Util is\n           and then Assertion_Expression_Pragma (Get_Pragma_Id (Prag));\n    end In_Assertion_Expression_Pragma;\n \n+   -------------------\n+   -- In_Check_Node --\n+   -------------------\n+\n+   function In_Check_Node (N : Node_Id) return Boolean is\n+      Node : Node_Id := Parent (N);\n+   begin\n+      while Present (Node) loop\n+         if Nkind (Node) in N_Raise_xxx_Error then\n+            return True;\n+         end if;\n+\n+         Node := Parent (Node);\n+      end loop;\n+\n+      return False;\n+   end In_Check_Node;\n+\n    -------------------------------\n    -- In_Generic_Formal_Package --\n    -------------------------------\n@@ -15210,6 +15240,19 @@ package body Sem_Util is\n       return Present (Formal) and then Ekind (Formal) = E_In_Out_Parameter;\n    end Is_Actual_In_Out_Parameter;\n \n+   ---------------------------------------\n+   -- Is_Actual_Out_Or_In_Out_Parameter --\n+   ---------------------------------------\n+\n+   function Is_Actual_Out_Or_In_Out_Parameter (N : Node_Id) return Boolean is\n+      Formal : Entity_Id;\n+      Call   : Node_Id;\n+   begin\n+      Find_Actual (N, Formal, Call);\n+      return Present (Formal)\n+        and then Ekind (Formal) in E_Out_Parameter | E_In_Out_Parameter;\n+   end Is_Actual_Out_Or_In_Out_Parameter;\n+\n    -------------------------\n    -- Is_Actual_Parameter --\n    -------------------------\n@@ -16312,7 +16355,7 @@ package body Sem_Util is\n       P_Aliased   : Boolean := False;\n       Comp        : Entity_Id;\n \n-      Deref : Node_Id := Object;\n+      Deref : Node_Id := Original_Node (Object);\n       --  Dereference node, in something like X.all.Y(2)\n \n    --  Start of processing for Is_Dependent_Component_Of_Mutable_Object\n@@ -16323,11 +16366,9 @@ package body Sem_Util is\n       while Nkind (Deref) in\n               N_Indexed_Component | N_Selected_Component | N_Slice\n       loop\n-         Deref := Prefix (Deref);\n+         Deref := Original_Node (Prefix (Deref));\n       end loop;\n \n-      Deref := Original_Node (Deref);\n-\n       --  If the prefix is a qualified expression of a variable, then function\n       --  Is_Variable will return False for that because a qualified expression\n       --  denotes a constant view, so we need to get the name being qualified\n@@ -16503,14 +16544,16 @@ package body Sem_Util is\n          elsif Nkind (Object) = N_Indexed_Component\n            or else Nkind (Object) = N_Slice\n          then\n-            return Is_Dependent_Component_Of_Mutable_Object (Prefix (Object));\n+            return Is_Dependent_Component_Of_Mutable_Object\n+                     (Original_Node (Prefix (Object)));\n \n          --  A type conversion that Is_Variable is a view conversion:\n          --  go back to the denoted object.\n \n          elsif Nkind (Object) = N_Type_Conversion then\n             return\n-              Is_Dependent_Component_Of_Mutable_Object (Expression (Object));\n+              Is_Dependent_Component_Of_Mutable_Object\n+                (Original_Node (Expression (Object)));\n          end if;\n       end if;\n \n@@ -18296,6 +18339,23 @@ package body Sem_Util is\n    -------------------------\n \n    function Is_Object_Reference (N : Node_Id) return Boolean is\n+      function Safe_Prefix (N : Node_Id) return Node_Id;\n+      --  Return Prefix (N) unless it has been rewritten as an\n+      --  N_Raise_xxx_Error node, in which case return its original node.\n+\n+      -----------------\n+      -- Safe_Prefix --\n+      -----------------\n+\n+      function Safe_Prefix (N : Node_Id) return Node_Id is\n+      begin\n+         if Nkind (Prefix (N)) in N_Raise_xxx_Error then\n+            return Original_Node (Prefix (N));\n+         else\n+            return Prefix (N);\n+         end if;\n+      end Safe_Prefix;\n+\n    begin\n       --  AI12-0068: Note that a current instance reference in a type or\n       --  subtype's aspect_specification is considered a value, not an object\n@@ -18311,8 +18371,8 @@ package body Sem_Util is\n                | N_Slice\n             =>\n                return\n-                 Is_Object_Reference (Prefix (N))\n-                   or else Is_Access_Type (Etype (Prefix (N)));\n+                 Is_Object_Reference (Safe_Prefix (N))\n+                   or else Is_Access_Type (Etype (Safe_Prefix (N)));\n \n             --  In Ada 95, a function call is a constant object; a procedure\n             --  call is not.\n@@ -18340,8 +18400,8 @@ package body Sem_Util is\n                return\n                  Is_Object_Reference (Selector_Name (N))\n                    and then\n-                     (Is_Object_Reference (Prefix (N))\n-                       or else Is_Access_Type (Etype (Prefix (N))));\n+                     (Is_Object_Reference (Safe_Prefix (N))\n+                       or else Is_Access_Type (Etype (Safe_Prefix (N))));\n \n             --  An explicit dereference denotes an object, except that a\n             --  conditional expression gets turned into an explicit dereference\n@@ -19954,6 +20014,22 @@ package body Sem_Util is\n           or else Nkind (N) = N_Procedure_Call_Statement;\n    end Is_Statement;\n \n+   --------------------------------------\n+   -- Is_Static_Discriminant_Component --\n+   --------------------------------------\n+\n+   function Is_Static_Discriminant_Component (N : Node_Id) return Boolean is\n+   begin\n+      return Nkind (N) = N_Selected_Component\n+        and then not Is_In_Discriminant_Check (N)\n+        and then Present (Etype (Prefix (N)))\n+        and then Ekind (Etype (Prefix (N))) = E_Record_Subtype\n+        and then Has_Static_Discriminants (Etype (Prefix (N)))\n+        and then Present (Entity (Selector_Name (N)))\n+        and then Ekind (Entity (Selector_Name (N))) = E_Discriminant\n+        and then not In_Check_Node (N);\n+   end Is_Static_Discriminant_Component;\n+\n    ------------------------\n    -- Is_Static_Function --\n    ------------------------"}, {"sha": "656018004955409f0b79e63f12fe77c8a388b275", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be0369c8d3a6c94f46906d901d2c5426fb9174/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=84be0369c8d3a6c94f46906d901d2c5426fb9174", "patch": "@@ -1049,11 +1049,13 @@ package Sem_Util is\n    --  be installed on the scope stack to prevent spurious visibility errors.\n \n    procedure Gather_Components\n-     (Typ           : Entity_Id;\n-      Comp_List     : Node_Id;\n-      Governed_By   : List_Id;\n-      Into          : Elist_Id;\n-      Report_Errors : out Boolean);\n+     (Typ                   : Entity_Id;\n+      Comp_List             : Node_Id;\n+      Governed_By           : List_Id;\n+      Into                  : Elist_Id;\n+      Report_Errors         : out Boolean;\n+      Allow_Compile_Time    : Boolean := False;\n+      Include_Interface_Tag : Boolean := False);\n    --  The purpose of this procedure is to gather the valid components in a\n    --  record type according to the values of its discriminants, in order to\n    --  validate the components of a record aggregate.\n@@ -1076,6 +1078,12 @@ package Sem_Util is\n    --    Report_Errors is set to True if the values of the discriminants are\n    --     non-static.\n    --\n+   --    Allow_Compile_Time if set to True, allows compile time known values in\n+   --     Governed_By expressions in addition to static expressions.\n+   --\n+   --    Include_Interface_Tag if set to True, gather any interface tag\n+   --     component, otherwise exclude them.\n+   --\n    --  This procedure is also used when building a record subtype. If the\n    --  discriminant constraint of the subtype is static, the components of the\n    --  subtype are only those of the variants selected by the values of the\n@@ -1542,6 +1550,9 @@ package Sem_Util is\n    --  Returns True if node N appears within a pragma that acts as an assertion\n    --  expression. See Sem_Prag for the list of qualifying pragmas.\n \n+   function In_Check_Node (N : Node_Id) return Boolean;\n+   --  Return True if N is part of a N_Raise_xxx_Error node\n+\n    function In_Generic_Formal_Package (E : Entity_Id) return Boolean;\n    --  Returns True if entity E is inside a generic formal package\n \n@@ -1696,6 +1707,10 @@ package Sem_Util is\n    function Is_Actual_Out_Parameter (N : Node_Id) return Boolean;\n    --  Determines if N is an actual parameter of out mode in a subprogram call\n \n+   function Is_Actual_Out_Or_In_Out_Parameter (N : Node_Id) return Boolean;\n+   --  Determines if N is an actual parameter of out or in out mode in a\n+   --  subprogram call.\n+\n    function Is_Actual_Parameter (N : Node_Id) return Boolean;\n    --  Determines if N is an actual parameter in a subprogram call\n \n@@ -2236,6 +2251,13 @@ package Sem_Util is\n    --  the N_Statement_Other_Than_Procedure_Call subtype from Sinfo).\n    --  Note that a label is *not* a statement, and will return False.\n \n+   function Is_Static_Discriminant_Component (N : Node_Id) return Boolean;\n+   --  Return True if N is guaranteed to a selected component containing a\n+   --  statically known discriminant.\n+   --  Note that this routine takes a conservative view and may return False\n+   --  in some cases where N would match the criteria. In other words this\n+   --  routine should be used to simplify or optimize the expanded code.\n+\n    function Is_Static_Function (Subp : Entity_Id) return Boolean;\n    --  Determine whether subprogram Subp denotes a static function,\n    --  which is a function with the aspect Static with value True."}]}