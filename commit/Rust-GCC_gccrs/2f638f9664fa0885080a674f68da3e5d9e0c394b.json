{"sha": "2f638f9664fa0885080a674f68da3e5d9e0c394b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2MzhmOTY2NGZhMDg4NTA4MGE2NzRmNjhkYTNlNWQ5ZTBjMzk0Yg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-10T23:28:00Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-10T23:28:00Z"}, "message": "Makefile.in (tradcpp0): Depend on mkdeps.h.\n\n        * Makefile.in (tradcpp0): Depend on mkdeps.h.  Link mkdeps.o\n        * cppinit.c (cpp_start_read): Update comment, remove unneeded\n        if statement.\n        * tradcpp.c: Include mkdeps.h.\n        (deps, print_deps_phony_targets, deps_append, output_deps,\n        init_dependency_output, output_deps): New.\n        (deps_buffer, deps_allocated_size, deps_size, deps_column,\n        deps_output): Delete.\n        (print_deps_missing_files): Rename deps_missing_files.\n        (inhibit_output): Make global.\n        (main): Delete inhibit_output, deps_stream, deps_target.\n        Use mkdeps functionality in the same way as cpplib.  Remove\n        -g3 handling.  Handle -MF, -MP, -MQ, -MT.  Update handling of\n        -M and -MM.  Remove old handling of deps via deps_out, and\n        old reading of environment variables.\n        (get_filename): Update to use deps_add_dep.\n\nFrom-SVN: r38885", "tree": {"sha": "0227689a93ad08961b217abbf9f69ce04b58f163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0227689a93ad08961b217abbf9f69ce04b58f163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f638f9664fa0885080a674f68da3e5d9e0c394b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f638f9664fa0885080a674f68da3e5d9e0c394b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f638f9664fa0885080a674f68da3e5d9e0c394b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f638f9664fa0885080a674f68da3e5d9e0c394b/comments", "author": null, "committer": null, "parents": [{"sha": "6c41818449c4cbd10d6055be3483dfd04a3968b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c41818449c4cbd10d6055be3483dfd04a3968b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c41818449c4cbd10d6055be3483dfd04a3968b8"}], "stats": {"total": 367, "additions": 190, "deletions": 177}, "files": [{"sha": "3498c50c20b14f2713372f021f2f64e58a0717c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f638f9664fa0885080a674f68da3e5d9e0c394b", "patch": "@@ -1,3 +1,22 @@\n+2001-01-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * Makefile.in (tradcpp0): Depend on mkdeps.h.  Link mkdeps.o\n+        * cppinit.c (cpp_start_read): Update comment, remove unneeded\n+        if statement.\n+        * tradcpp.c: Include mkdeps.h.\n+        (deps, print_deps_phony_targets, deps_append, output_deps,\n+        init_dependency_output, output_deps): New.\n+        (deps_buffer, deps_allocated_size, deps_size, deps_column,\n+        deps_output): Delete.\n+        (print_deps_missing_files): Rename deps_missing_files.\n+        (inhibit_output): Make global.\n+        (main): Delete inhibit_output, deps_stream, deps_target.\n+        Use mkdeps functionality in the same way as cpplib.  Remove\n+        -g3 handling.  Handle -MF, -MP, -MQ, -MT.  Update handling of\n+        -M and -MM.  Remove old handling of deps via deps_out, and\n+        old reading of environment variables.\n+        (get_filename): Update to use deps_add_dep.\n+\n 2001-01-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* output.h (make_function_rtl): Remove prototype."}, {"sha": "03f928b3c6eab028b56af8c20f20707ea7eebcd4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2f638f9664fa0885080a674f68da3e5d9e0c394b", "patch": "@@ -1926,9 +1926,10 @@ mkdeps.o: mkdeps.c $(CONFIG_H) system.h mkdeps.h\n \n # The traditional mode preprocessor, a separate program for ease of\n # maintenance.  Some code is shared with the ISO-C cpp.\n-tradcpp0$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBDEPS)\n+tradcpp0$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o \\\n+        mkdeps.h $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o tradcpp0$(exeext) \\\n-\ttradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBS)\n+\ttradcpp.o tradcif.o mkdeps.o cppdefault.o version.o intl.o $(LIBS)\n \n tradcpp.o: tradcpp.c $(CONFIG_H) system.h version.h cppdefault.h tradcpp.h\n tradcif.o: $(srcdir)/tradcif.c $(CONFIG_H) system.h defaults.h tradcpp.h"}, {"sha": "0a7fe489a5fef05f0ebc0639f702df41b9311548", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2f638f9664fa0885080a674f68da3e5d9e0c394b", "patch": "@@ -903,11 +903,11 @@ cpp_start_read (pfile, fname)\n \n   if (CPP_OPTION (pfile, print_deps))\n     {\n-      /* Set the default target (if there is none already).  */\n+      /* Set the default target (if there is none already), and\n+\t the dependency on the main file.  */\n       deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n \n-      if (CPP_OPTION (pfile, in_fname))\n-\tdeps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n+      deps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n     }\n \n   /* Open the main input file.  This must be done early, so we have a\n@@ -943,6 +943,7 @@ cpp_start_read (pfile, fname)\n   return 1;\n }\n \n+/* Use mkdeps.c to output dependency information.  */\n static void\n output_deps (pfile)\n      cpp_reader *pfile;"}, {"sha": "64ff649eb00a1199ffe011f701dbbbbed1d6ca8c", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 164, "deletions": 172, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f638f9664fa0885080a674f68da3e5d9e0c394b/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=2f638f9664fa0885080a674f68da3e5d9e0c394b", "patch": "@@ -24,6 +24,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"version.h\"\n #include \"cppdefault.h\"\n #include \"tradcpp.h\"\n+#include \"mkdeps.h\"\n \n typedef unsigned char U_CHAR;\n \n@@ -40,12 +41,23 @@ size_t max_include_len;\n \n int put_out_comments = 0;\n \n+/* mkdeps.h opaque structure that encapsulates dependency information.  */\n+struct deps *deps;\n+\n /* Nonzero means print the names of included files rather than\n    the preprocessed output.  1 means just the #include \"...\",\n    2 means #include <...> as well.  */\n \n int print_deps = 0;\n \n+/* Nonzero means print dummy targets for each header file.  */\n+\n+int print_deps_phony_targets = 0;\n+\n+/* If true, fopen (deps_file, \"a\") else fopen (deps_file, \"w\").  */\n+\n+int deps_append = 0;\n+\n /* File name which deps are being written to.  This is 0 if deps are\n    being written to stdout.  */\n \n@@ -54,7 +66,7 @@ const char *deps_file = 0;\n /* Nonzero if missing .h files in -M output are assumed to be\n    generated files and not errors.  */\n \n-int print_deps_missing_files = 0;\n+int deps_missing_files = 0;\n        \n /* Nonzero means don't output line number information.  */\n \n@@ -70,6 +82,9 @@ int dump_macros;\n \n int inhibit_warnings = 0;\n \n+/* Non-0 means don't output the preprocessed program.  */\n+int inhibit_output = 0;\n+\n /* Nonzero means warn if slash-star appears in a comment.  */\n \n int warn_comments;\n@@ -390,6 +405,7 @@ static void output_line_command PARAMS ((FILE_BUF *, FILE_BUF *,\n \n static int eval_if_expression\tPARAMS ((const U_CHAR *, int));\n \n+static void output_deps\t\tPARAMS ((void));\n static void initialize_builtins\tPARAMS ((void));\n static void run_directive\tPARAMS ((const char *, size_t,\n \t\t\t\t\t enum node_type));\n@@ -400,7 +416,7 @@ static void make_assertion\tPARAMS ((const char *));\n static void grow_outbuf \tPARAMS ((FILE_BUF *, int));\n static int handle_directive \tPARAMS ((FILE_BUF *, FILE_BUF *));\n static void finclude\t\tPARAMS ((int, const char *, FILE_BUF *));\n-static void deps_output\t\tPARAMS ((const char *, int));\n+static void init_dependency_output PARAMS ((void));\n static void rescan\t\tPARAMS ((FILE_BUF *, int));\n static void newline_fix\t\tPARAMS ((U_CHAR *));\n static void name_newline_fix\tPARAMS ((U_CHAR *));\n@@ -462,19 +478,6 @@ struct if_stack {\n typedef struct if_stack IF_STACK_FRAME;\n IF_STACK_FRAME *if_stack = NULL;\n \n-/* Buffer of -M output.  */\n-\n-char *deps_buffer;\n-\n-/* Number of bytes allocated in above.  */\n-int deps_allocated_size;\n-\n-/* Number of bytes used.  */\n-int deps_size;\n-\n-/* Number of bytes since the last newline.  */\n-int deps_column;\n-\n /* Nonzero means -I- has been seen,\n    so don't look for #include \"foo\" the source-file directory.  */\n int ignore_srcdir;\n@@ -502,14 +505,6 @@ main (argc, argv)\n   pending_dir *pend = (pending_dir *) xcalloc (argc, sizeof (pending_dir));\n   int no_standard_includes = 0;\n \n-  /* Non-0 means don't output the preprocessed program.  */\n-  int inhibit_output = 0;\n-\n-  /* Stream on which to print the dependency information.  */\n-  FILE *deps_stream = 0;\n-  /* Target-name to write with the dependency information.  */\n-  char *deps_target = 0;\n-\n #ifdef RLIMIT_STACK\n   /* Get rid of any avoidable limit on stack size.  */\n   {\n@@ -534,6 +529,10 @@ main (argc, argv)\n \n   max_include_len = cpp_GCC_INCLUDE_DIR_len + 7;  /* ??? */\n \n+  /* It's simplest to just create this struct whether or not it will\n+     be needed.  */\n+  deps = deps_init ();\n+\n   /* Process switches and find input file name.  */\n \n   for (i = 1; i < argc; i++) {\n@@ -550,7 +549,6 @@ main (argc, argv)\n       switch (c) {\n       case 'E':\n       case '$':\n-      case 'g':\n \tbreak;  /* Ignore for compatibility with ISO/extended cpp.  */\n \n       case 'l':\n@@ -621,6 +619,12 @@ main (argc, argv)\n \t{\n \t  char *p = NULL;\n \n+\t  /* -MD and -MMD for tradcpp are deprecated and undocumented\n+\t     (use -M or -MM with -MF instead), and probably should be\n+\t     removed with the next major GCC version.  For the moment\n+\t     we allow these for the benefit of Automake 1.4, which\n+\t     uses these when dependency tracking is enabled.  Automake\n+\t     1.5 will fix this.  */\n \t  if (!strncmp (argv[i], \"-MD\", 3)) {\n \t    p = argv[i] + 3;\n \t    print_deps = 2;\n@@ -629,12 +633,30 @@ main (argc, argv)\n \t    print_deps = 1;\n \t  } else if (!strcmp (argv[i], \"-M\")) {\n \t    print_deps = 2;\n-\t    inhibit_output = 1;\n \t  } else if (!strcmp (argv[i], \"-MM\")) {\n \t    print_deps = 1;\n-\t    inhibit_output = 1;\n-\t  } else if (!strcmp (argv[i], \"-MG\"))\n-\t    print_deps_missing_files = 1;\n+\t  } else if (!strcmp (argv[i], \"-MG\")) {\n+\t    deps_missing_files = 1;\n+\t  } else if (!strcmp (argv[i], \"-MF\")) {\n+\t    p = argv[i] + 3;\n+\t  } else if (!strcmp (argv[i], \"-MP\")) {\n+\t    print_deps_phony_targets = 1;\n+\t  } else if (!strcmp (argv[i], \"-MQ\") || !strcmp (argv[i], \"-MT\")) {\n+\t    /* Add a target.  -MQ quotes for Make.  */\n+\t    const char *tgt = argv[i] + 3;\n+\t    int quoted = argv[i][2] == 'Q';\n+\n+\t    if (*tgt == '\\0' && i + 1 == argc)\n+\t      fatal (\"Filename missing after %s option\", argv[i]);\n+\t    else\n+\t      {\n+\t\tif (*tgt == '\\0')\n+\t\t  tgt = argv[++i];\n+\t      \n+\t\tdeps_add_target (deps, tgt, quoted);\n+\t      }\n+\t  }\n+\n \t  if (p) {\n \t    if (*p)\n \t      deps_file = p;\n@@ -747,12 +769,26 @@ main (argc, argv)\n     }\n   }\n \n-  if (print_deps_missing_files && (!print_deps || !inhibit_output))\n-    fatal (\"-MG must be specified with one of -M or -MM\");\n+  init_dependency_output ();\n+\n+  /* After checking the environment variables, check if -M or -MM has\n+     not been specified, but other -M options have.  */\n+  if (print_deps == 0\n+      && (deps_missing_files || deps_file || print_deps_phony_targets))\n+    fatal (\"you must additionally specify either -M or -MM\");\n \n   if (user_label_prefix == 0)\n     user_label_prefix = USER_LABEL_PREFIX;\n \n+  if (print_deps)\n+    {\n+      /* Set the default target (if there is none already), and\n+\t the dependency on the main file.  */\n+      deps_add_default_target (deps, in_fname);\n+\n+      deps_add_dep (deps, in_fname);\n+    }\n+\n   /* Install __LINE__, etc.  Must follow option processing.  */\n   initialize_builtins ();\n \n@@ -832,96 +868,6 @@ main (argc, argv)\n   } else if ((f = open (in_fname, O_RDONLY, 0666)) < 0)\n     goto sys_error;\n \n-  /* Either of two environment variables can specify output of deps.\n-     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n-     where OUTPUT_FILE is the file to write deps info to\n-     and DEPS_TARGET is the target to mention in the deps.  */\n-\n-  if (print_deps == 0\n-      && (getenv (\"SUNPRO_DEPENDENCIES\") != 0\n-\t  || getenv (\"DEPENDENCIES_OUTPUT\") != 0))\n-    {\n-      char *spec = getenv (\"DEPENDENCIES_OUTPUT\");\n-      char *s;\n-\n-      if (spec == 0)\n-\t{\n-\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n-\t  print_deps = 2;\n-\t}\n-      else\n-\tprint_deps = 1;\n-\n-      /* Find the space before the DEPS_TARGET, if there is one.  */\n-      s = strchr (spec, ' ');\n-      if (s)\n-\t{\n-\t  char *out_file;\n-\n-\t  deps_target = s + 1;\n-\t  out_file = (char *) xmalloc (s - spec + 1);\n-\t  memcpy (out_file, spec, s - spec);\n-\t  out_file[s - spec] = 0;\n-\t  deps_file = out_file;\n-\t}\n-      else\n-\t{\n-\t  deps_target = 0;\n-\t  deps_file = spec;\n-\t}\n-    }\n-\n-  /* For -M, print the expected object file name\n-     as the target of this Make-rule.  */\n-  if (print_deps) {\n-\n-    if (deps_file) {\n-      deps_stream = fopen (deps_file, \"a\");\n-      if (deps_stream == 0)\n-\tpfatal_with_name (deps_file);\n-    } else\n-      /* If the -M option was used, output the deps to standard output.  */\n-      deps_stream = stdout;\n-\n-    deps_allocated_size = 200;\n-    deps_buffer = (char *) xmalloc (deps_allocated_size);\n-    deps_buffer[0] = 0;\n-    deps_size = 0;\n-    deps_column = 0;\n-\n-    if (deps_target) {\n-      deps_output (deps_target, 0);\n-      deps_output (\":\", 0);\n-    } else if (*in_fname == 0)\n-      deps_output (\"-: \", 0);\n-    else {\n-      int len;\n-      const char *p = in_fname;\n-      const char *p1 = p;\n-      /* Discard all directory prefixes from P.  */\n-      while (*p1) {\n-\tif (*p1 == '/')\n-\t  p = p1 + 1;\n-\tp1++;\n-      }\n-      /* Output P, but remove known suffixes.  */\n-      len = strlen (p);\n-      if (p[len - 2] == '.'\n-\t  && (p[len - 1] == 'c' || p[len - 1] == 'C' || p[len - 1] == 'S'))\n-\tdeps_output (p, len - 2);\n-      else if (p[len - 3] == '.'\n-\t       && p[len - 2] == 'c'\n-\t       && p[len - 1] == 'c')\n-\tdeps_output (p, len - 3);\n-      else\n-\tdeps_output (p, 0);\n-      /* Supply our own suffix.  */\n-      deps_output (\".o : \", 0);\n-      deps_output (in_fname, 0);\n-      deps_output (\" \", 0);\n-    }\n-  }\n-\n   if (file_size_and_mode (f, &st_mode, &st_size))\n     goto sys_error;\n   fp->fname = in_fname;\n@@ -998,20 +944,16 @@ main (argc, argv)\n \n   if (dump_macros)\n     dump_all_macros ();\n-  else if (! inhibit_output && deps_stream != stdout) {\n+  else if (! inhibit_output)\n     if (write (fileno (stdout), outbuf.buf, outbuf.bufp - outbuf.buf) < 0)\n       fatal (\"I/O error on output\");\n-  }\n \n-  if (print_deps) {\n-    fputs (deps_buffer, deps_stream);\n-    putc ('\\n', deps_stream);\n-    if (deps_stream != stdout) {\n-      fclose (deps_stream);\n-      if (ferror (deps_stream))\n-\tfatal (\"I/O error on output\");\n-    }\n-  }\n+  /* Don't write the deps file if preprocessing has failed.  */\n+  if (print_deps && errors == 0)\n+    output_deps ();\n+\n+  /* Destruct the deps object.  */\n+  deps_free (deps);\n \n   if (ferror (stdout))\n     fatal (\"I/O error on output\");\n@@ -1024,6 +966,91 @@ main (argc, argv)\n   pfatal_with_name (in_fname);\n }\n \n+/* Set up dependency-file output.  */\n+static void\n+init_dependency_output ()\n+{\n+  char *spec, *s, *output_file;\n+\n+  /* Either of two environment variables can specify output of deps.\n+     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n+     where OUTPUT_FILE is the file to write deps info to\n+     and DEPS_TARGET is the target to mention in the deps.  */\n+\n+  if (print_deps == 0)\n+    {\n+      spec = getenv (\"DEPENDENCIES_OUTPUT\");\n+      if (spec)\n+\tprint_deps = 1;\n+      else\n+\t{\n+\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n+\t  if (spec)\n+\t    print_deps = 2;\n+\t  else\n+\t    return;\n+\t}\n+\n+      /* Find the space before the DEPS_TARGET, if there is one.  */\n+      s = strchr (spec, ' ');\n+      if (s)\n+\t{\n+\t  /* Let the caller perform MAKE quoting.  */\n+\t  deps_add_target (deps, s + 1, 0);\n+\t  output_file = (char *) xmalloc (s - spec + 1);\n+\t  memcpy (output_file, spec, s - spec);\n+\t  output_file[s - spec] = 0;\n+\t}\n+      else\n+\toutput_file = spec;\n+\n+      /* Command line overrides environment variables.  */\n+      if (deps_file == 0)\n+\tdeps_file = output_file;\n+      deps_append = 1;\n+    }\n+\n+  /* If dependencies go to standard output, or -MG is used, we should\n+     suppress output.  The user may be requesting other stuff to\n+     stdout, with -dM, -v etc.  We let them shoot themselves in the\n+     foot.  */\n+  if (deps_file == 0 || deps_missing_files)\n+    inhibit_output = 1;\n+}\n+\n+/* Use mkdeps.c to output dependency information.  */\n+static void\n+output_deps ()\n+{\n+  /* Stream on which to print the dependency information.  */\n+  FILE *deps_stream = 0;\n+  const char *deps_mode = deps_append ? \"a\" : \"w\";\n+\n+  if (deps_file == 0)\n+    deps_stream = stdout;\n+  else\n+    {\n+      deps_stream = fopen (deps_file, deps_mode);\n+      if (deps_stream == 0)\n+\t{\n+\t  error_from_errno (deps_file);\n+\t  return;\n+\t}\n+    }\n+\n+  deps_write (deps, deps_stream, 72);\n+\n+  if (print_deps_phony_targets)\n+    deps_phony_targets (deps, deps_stream);\n+\n+  /* Don't close stdout.  */\n+  if (deps_file)\n+    {\n+      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n+\tfatal (\"I/O error on output\");\n+    }\n+}\n+\n /* Move all backslash-newline pairs out of embarrassing places.\n    Exchange all such pairs following BP\n    with any potentially-embarrasing characters that follow them.\n@@ -2372,7 +2399,7 @@ do_include (buf, limit, op)\n   if (f < 0) {\n     strncpy (fname, (const char *)fbeg, flen);\n     fname[flen] = 0;\n-    if (print_deps_missing_files\n+    if (deps_missing_files\n \t&& print_deps > (system_header_p || (system_include_depth > 0))) {\n \n       /* If requested as a system header, assume it belongs in\n@@ -2383,7 +2410,7 @@ do_include (buf, limit, op)\n \tstackp = include;\n \n       if (!system_header_p || *fbeg == '/' || !stackp->fname)\n-\tdeps_output ((const char *)fbeg, flen);\n+\tdeps_add_dep (deps, fname);\n       else {\n \tchar *p;\n \tint len = strlen(stackp->fname);\n@@ -2393,10 +2420,9 @@ do_include (buf, limit, op)\n \tp[len++] = '/';\n \tmemcpy (p + len, fbeg, flen);\n \tlen += flen;\n-\tdeps_output (p, len);\n+\tp[len] = '\\0';\n+\tdeps_add_dep (deps, p);\n       }\n-      deps_output (\" \", 0);\n-\n     } else if (print_deps\n \t       && print_deps <= (system_header_p\n \t\t\t\t || (system_include_depth > 0)))\n@@ -2433,10 +2459,8 @@ do_include (buf, limit, op)\n       ptr->fname = xstrdup (fname);\n \n       /* For -M, add this file to the dependencies.  */\n-      if (print_deps > (system_header_p || (system_include_depth > 0))) {\n-\tdeps_output (fname, strlen (fname));\n-\tdeps_output (\" \", 0);\n-      }\n+      if (print_deps > (system_header_p || (system_include_depth > 0)))\n+\tdeps_add_dep (deps, fname);\n     }   \n \n     if (system_header_p)\n@@ -5106,38 +5130,6 @@ make_assertion (str)\n   run_directive (str, count, type);\n }\n \f\n-/* Add output to `deps_buffer' for the -M switch.\n-   STRING points to the text to be output.\n-   SIZE is the number of bytes, or 0 meaning output until a null.\n-   If SIZE is nonzero, we break the line first, if it is long enough.  */\n-static void\n-deps_output (string, size)\n-     const char *string;\n-     int size;\n-{\n-#ifndef MAX_OUTPUT_COLUMNS\n-#define MAX_OUTPUT_COLUMNS 75\n-#endif\n-  if (size != 0 && deps_column != 0\n-      && size + deps_column > MAX_OUTPUT_COLUMNS) {\n-    deps_output (\"\\\\\\n  \", 0);\n-    deps_column = 0;\n-  }\n-\n-  if (size == 0)\n-    size = strlen (string);\n-\n-  if (deps_size + size + 1 > deps_allocated_size) {\n-    deps_allocated_size = deps_size + size + 50;\n-    deps_allocated_size *= 2;\n-    deps_buffer = (char *) xrealloc (deps_buffer, deps_allocated_size);\n-  }\n-  memcpy (&deps_buffer[deps_size], string, size);\n-  deps_size += size;\n-  deps_column += size;\n-  deps_buffer[deps_size] = 0;\n-}\n-\n /* Get the file-mode and data size of the file open on FD\n    and store them in *MODE_POINTER and *SIZE_POINTER.  */\n "}]}