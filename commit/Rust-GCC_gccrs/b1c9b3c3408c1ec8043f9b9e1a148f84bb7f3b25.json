{"sha": "b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjOWIzYzM0MDhjMWVjODA0M2Y5YjllMWExNDhmODRiYjdmM2IyNQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-11T20:11:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-11T20:11:23Z"}, "message": "c++: Change the mangling of __alignof__ [PR88115]\n\nThis patch changes the mangling of __alignof__ to v111__alignof__,\nmaking its mangling distinct from that of alignof(type) and\nalignof(expr).\n\nHow we mangle ALIGNOF_EXPR now depends on its ALIGNOF_EXPR_STD_P flag,\nwhich after the previous patch gets consistently set for alignof(type)\nas well as alignof(expr).\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/88115\n\t* c-opts.c (c_common_post_options): Update latest_abi_version.\n\ngcc/ChangeLog:\n\n\tPR c++/88115\n\t* common.opt (-fabi-version): Document =15.\n\t* doc/invoke.texi (C++ Dialect Options): Likewise.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88115\n\t* mangle.c (write_expression): Mangle __alignof_ differently\n\tfrom alignof when the ABI version is at least 15.\n\nlibiberty/ChangeLog:\n\n\tPR c++/88115\n\t* cp-demangle.c (d_print_comp_inner)\n\t<case DEMANGLE_COMPONENT_EXTENDED_OPERATOR>: Don't print the\n\t\"operator \" prefix for __alignof__.\n\t<case DEMANGLE_COMPONENT_UNARY>: Always print parens around the\n\toperand of __alignof__.\n\t* testsuite/demangle-expected: Test demangling for __alignof__.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88115\n\t* g++.dg/abi/macro0.C: Adjust.\n\t* g++.dg/cpp0x/alignof7.C: New test.\n\t* g++.dg/cpp0x/alignof8.C: New test.", "tree": {"sha": "005cdc1c5d50f3abaf02bd6680a57bf9c489de81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005cdc1c5d50f3abaf02bd6680a57bf9c489de81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/comments", "author": null, "committer": null, "parents": [{"sha": "61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "40e92229d8ac88688e148b2ca5b52d45aaf57c49", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -945,7 +945,7 @@ c_common_post_options (const char **pfilename)\n \n   /* Change flag_abi_version to be the actual current ABI level, for the\n      benefit of c_cpp_builtins, and to make comparison simpler.  */\n-  const int latest_abi_version = 14;\n+  const int latest_abi_version = 15;\n   /* Generate compatibility aliases for ABI v11 (7.1) by default.  */\n   const int abi_compat_default = 11;\n "}, {"sha": "9552cebe0d6c4a4f05d177560aaf66cd16d8ed6e", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -960,9 +960,13 @@ Driver Undocumented\n ; 13: Fixes the accidental change in 12 to the calling convention for classes\n ;     with deleted copy constructor and trivial move constructor.\n ;     Default in G++ 8.2.\n+;\n ; 14: Corrects the mangling of nullptr expression.\n ;     Default in G++ 10.\n ;\n+; 15: Changes the mangling of __alignof__ to be distinct from that of alignof.\n+;     Default in G++ 11.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "5548e51d39d1a3773c61ae7c01522ab3f10165f5", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -3049,11 +3049,30 @@ write_expression (tree expr)\n       else\n \tgoto normal_expr;\n     }\n-  else if (TREE_CODE (expr) == ALIGNOF_EXPR\n-\t   && TYPE_P (TREE_OPERAND (expr, 0)))\n+  else if (TREE_CODE (expr) == ALIGNOF_EXPR)\n     {\n-      write_string (\"at\");\n-      write_type (TREE_OPERAND (expr, 0));\n+      if (!ALIGNOF_EXPR_STD_P (expr))\n+\t{\n+\t  if (abi_warn_or_compat_version_crosses (15))\n+\t    G.need_abi_warning = true;\n+\t  if (abi_version_at_least (15))\n+\t    {\n+\t      /* We used to mangle __alignof__ like alignof.  */\n+\t      write_string (\"v111__alignof__\");\n+\t      if (TYPE_P (TREE_OPERAND (expr, 0)))\n+\t\twrite_type (TREE_OPERAND (expr, 0));\n+\t      else\n+\t\twrite_expression (TREE_OPERAND (expr, 0));\n+\t      return;\n+\t    }\n+\t}\n+      if (TYPE_P (TREE_OPERAND (expr, 0)))\n+\t{\n+\t  write_string (\"at\");\n+\t  write_type (TREE_OPERAND (expr, 0));\n+\t}\n+      else\n+\tgoto normal_expr;\n     }\n   else if (code == SCOPE_REF\n \t   || code == BASELINK)"}, {"sha": "553cc07e3306ae5d4759f1d0d2a5176861394414", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -2807,6 +2807,9 @@ change in version 12.\n Version 14, which first appeared in G++ 10, corrects the mangling of\n the nullptr expression.\n \n+Version 15, which first appeared in G++ 11, changes the mangling of\n+@code{__alignof__} to be distinct from that of @code{alignof}.\n+\n See also @option{-Wabi}.\n \n @item -fabi-compat-version=@var{n}"}, {"sha": "7c3c17051ed6ad60b2c770b7828627901a42039a", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -1,6 +1,6 @@\n // This testcase will need to be kept in sync with c_common_post_options.\n // { dg-options \"-fabi-version=0\" }\n \n-#if __GXX_ABI_VERSION != 1014\n+#if __GXX_ABI_VERSION != 1015\n #error \"Incorrect value of __GXX_ABI_VERSION\"\n #endif"}, {"sha": "a4d7f24a4d754d2c99e4c9c775f23871379d6684", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof7.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/88115\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-pedantic\" }\n+\n+// Verify we mangle __alignof__ differently from alignof.\n+\n+#include <cstddef>\n+\n+template <class T> void f1(decltype(alignof(T))) { }\n+template <class T> void f2(decltype(alignof(T{}))) { }\n+template <class T> void f3(decltype(__alignof__(T))) { }\n+template <class T> void f4(decltype(__alignof__(T{}))) { }\n+\n+template void f1<int>(std::size_t);\n+template void f2<int>(std::size_t);\n+template void f3<int>(std::size_t);\n+template void f4<int>(std::size_t);\n+\n+// { dg-final { scan-assembler \"_Z2f1IiEvDTatT_E\" } }\n+// { dg-final { scan-assembler \"_Z2f2IiEvDTaztlT_EE\" } }\n+// { dg-final { scan-assembler \"_Z2f3IiEvDTv111__alignof__T_E\" } }\n+// { dg-final { scan-assembler \"_Z2f4IiEvDTv111__alignof__tlT_EE\" } }"}, {"sha": "a9368e21b0b80647a53c0a5d528752882e8ee568", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof8.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof8.C?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/88115\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-pedantic -fabi-version=14 -Wabi\" }\n+\n+#include \"alignof7.C\"\n+\n+// { dg-warning \"changes between\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"changes between\" \"\" { target *-*-* } 12 }\n+\n+// { dg-final { scan-assembler \"_Z2f1IiEvDTatT_E\" } }\n+// { dg-final { scan-assembler \"_Z2f2IiEvDTaztlT_EE\" } }\n+// { dg-final { scan-assembler \"_Z2f3IiEvDTatT_E\" } }\n+// { dg-final { scan-assembler \"_Z2f4IiEvDTaztlT_EE\" } }"}, {"sha": "a9f8e759ff533f0e499a784782eed706e1883134", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -5458,9 +5458,18 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       }\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n-      d_append_string (dpi, \"operator \");\n-      d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n-      return;\n+      {\n+\tstruct demangle_component *name = dc->u.s_extended_operator.name;\n+\tif (name->type == DEMANGLE_COMPONENT_NAME\n+\t    && !strncmp (name->u.s_name.s, \"__alignof__\", name->u.s_name.len))\n+\t  d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n+\telse\n+\t  {\n+\t    d_append_string (dpi, \"operator \");\n+\t    d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n+\t  }\n+\treturn;\n+      }\n \n     case DEMANGLE_COMPONENT_CONVERSION:\n       d_append_string (dpi, \"operator \");\n@@ -5525,8 +5534,14 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \tif (code && !strcmp (code, \"gs\"))\n \t  /* Avoid parens after '::'.  */\n \t  d_print_comp (dpi, options, operand);\n-\telse if (code && !strcmp (code, \"st\"))\n-\t  /* Always print parens for sizeof (type).  */\n+\telse if ((code && !strcmp (code, \"st\"))\n+\t\t || (op->type == DEMANGLE_COMPONENT_EXTENDED_OPERATOR\n+\t\t     && (op->u.s_extended_operator.name->type\n+\t\t\t == DEMANGLE_COMPONENT_NAME)\n+\t\t     && !strncmp (op->u.s_extended_operator.name->u.s_name.s,\n+\t\t\t\t  \"__alignof__\",\n+\t\t\t\t  op->u.s_extended_operator.name->u.s_name.len)))\n+\t  /* Always print parens for sizeof (type) and __alignof__.  */\n \t  {\n \t    d_append_char (dpi, '(');\n \t    d_print_comp (dpi, options, operand);"}, {"sha": "4ad9da82f2c76f590af2a62e9e6d8c708146b844", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "patch": "@@ -1469,3 +1469,10 @@ f(A<X{.a.b[3 ... 4]=(1)}>)\n # PR 96143\n _Z2F2IZ1FvEUlvE_EN1AIT_E1XES2_\n A<F()::{lambda()#1}>::X F2<F()::{lambda()#1}>(F()::{lambda()#1})\n+\n+# PR 88115\n+_Z1fIiEvDTv111__alignof__T_E\n+void f<int>(decltype (__alignof__(int)))\n+\n+_Z1fIiEvDTv111__alignof__tlT_EE\n+void f<int>(decltype (__alignof__(int{})))"}]}