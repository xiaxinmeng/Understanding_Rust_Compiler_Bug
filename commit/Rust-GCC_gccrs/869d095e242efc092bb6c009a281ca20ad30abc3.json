{"sha": "869d095e242efc092bb6c009a281ca20ad30abc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5ZDA5NWUyNDJlZmMwOTJiYjZjMDA5YTI4MWNhMjBhZDMwYWJjMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-09-14T05:21:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-09-14T05:21:51Z"}, "message": "i386.c (output_fp_compare): Add generation of ftst instruction.\n\n\t* config/i386/i386.c (output_fp_compare): Add generation\n\tof ftst instruction.\n\t* config/i386/i386.md (*cmpfp_0_sf, cmpfp_0_df, cmpfp_0_xf):\n\tUse output_fp_compare () function.\n\t(cmpfp_i, *cmpfp_i_sse, *cmpfp_i_sse_only): Fix insn constraint.\n\t(fix_truncdi_memory): Remove operands[5] copy.\n\nFrom-SVN: r87482", "tree": {"sha": "c6a5847d90e73a009ee8110d7f75704a8a6d2fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a5847d90e73a009ee8110d7f75704a8a6d2fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/869d095e242efc092bb6c009a281ca20ad30abc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869d095e242efc092bb6c009a281ca20ad30abc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869d095e242efc092bb6c009a281ca20ad30abc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869d095e242efc092bb6c009a281ca20ad30abc3/comments", "author": null, "committer": null, "parents": [{"sha": "19525b57d1b46595e853e610669cd40f367f26e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19525b57d1b46595e853e610669cd40f367f26e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19525b57d1b46595e853e610669cd40f367f26e5"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "3cd560d79438d3d56e74cd728d0cf0acfff5f5e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=869d095e242efc092bb6c009a281ca20ad30abc3", "patch": "@@ -1,3 +1,12 @@\n+2004-09-14  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.c (output_fp_compare): Add generation\n+\tof ftst instruction.\n+\t* config/i386/i386.md (*cmpfp_0_sf, cmpfp_0_df, cmpfp_0_xf):\n+\tUse output_fp_compare () function.\n+\t(cmpfp_i, *cmpfp_i_sse, *cmpfp_i_sse_only): Fix insn constraint.\n+\t(fix_truncdi_memory): Remove operands[5] copy.\n+\n 2004-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r.md, config/m68k/m68kelf.h,"}, {"sha": "8f5364fff66e7027d0835a44bc06c0812e72aa8f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=869d095e242efc092bb6c009a281ca20ad30abc3", "patch": "@@ -7228,15 +7228,20 @@ const char *\n output_fp_compare (rtx insn, rtx *operands, int eflags_p, int unordered_p)\n {\n   int stack_top_dies;\n-  rtx cmp_op0 = operands[0];\n-  rtx cmp_op1 = operands[1];\n+  rtx cmp_op0, cmp_op1;\n   int is_sse = SSE_REG_P (operands[0]) | SSE_REG_P (operands[1]);\n \n   if (eflags_p == 2)\n     {\n-      cmp_op0 = cmp_op1;\n+      cmp_op0 = operands[1];\n       cmp_op1 = operands[2];\n     }\n+  else\n+    {\n+      cmp_op0 = operands[0];\n+      cmp_op1 = operands[1];\n+    }\n+\n   if (is_sse)\n     {\n       if (GET_MODE (operands[0]) == SFmode)\n@@ -7256,6 +7261,17 @@ output_fp_compare (rtx insn, rtx *operands, int eflags_p, int unordered_p)\n \n   stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n \n+  if (cmp_op1 == CONST0_RTX (GET_MODE (cmp_op1)))\n+    {\n+      if (stack_top_dies)\n+\t{\n+\t  output_asm_insn (\"ftst\\n\\tfnstsw\\t%0\", operands);\n+\t  return TARGET_USE_FFREEP ? \"ffreep\\t%y1\" : \"fstp\\t%y1\";\n+\t}\n+      else\n+\treturn \"ftst\\n\\tfnstsw\\t%0\";\n+    }\n+\n   if (STACK_REG_P (cmp_op1)\n       && stack_top_dies\n       && find_regno_note (insn, REG_DEAD, REGNO (cmp_op1))"}, {"sha": "168f2f37a1bee70dab0aa7bb2d7ca47da726f0f2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869d095e242efc092bb6c009a281ca20ad30abc3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=869d095e242efc092bb6c009a281ca20ad30abc3", "patch": "@@ -805,15 +805,7 @@\n \t     (match_operand:SF 2 \"const0_operand\" \"X\"))]\n \tUNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    {\n-      output_asm_insn (\"ftst\\;fnstsw\\t%0\", operands);\n-      return TARGET_USE_FFREEP ? \"ffreep\\t%y1\" : \"fstp\\t%y1\";\n-    }\n-  else\n-    return \"ftst\\;fnstsw\\t%0\";\n-}\n+  \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -825,15 +817,7 @@\n \t     (match_operand:DF 2 \"const0_operand\" \"X\"))]\n \tUNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    {\n-      output_asm_insn (\"ftst\\;fnstsw\\t%0\", operands);\n-      return TARGET_USE_FFREEP ? \"ffreep\\t%y1\" : \"fstp\\t%y1\";\n-    }\n-  else\n-    return \"ftst\\;fnstsw\\t%0\";\n-}\n+  \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -845,15 +829,7 @@\n \t     (match_operand:XF 2 \"const0_operand\" \"X\"))]\n \tUNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    {\n-      output_asm_insn (\"ftst\\;fnstsw\\t%0\", operands);\n-      return TARGET_USE_FFREEP ? \"ffreep\\t%y1\" : \"fstp\\t%y1\";\n-    }\n-  else\n-    return \"ftst\\;fnstsw\\t%0\";\n-}\n+  \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF\")])\n \n@@ -1032,7 +1008,7 @@\n   \"TARGET_80387 && TARGET_CMOVE\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[0])\"\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"* return output_fp_compare (insn, operands, 1, 0);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set (attr \"mode\")\n@@ -1050,7 +1026,7 @@\n \t\t      (match_operand 1 \"nonimmediate_operand\" \"f#x,xm#f\")))]\n   \"TARGET_80387\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[0])\"\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"* return output_fp_compare (insn, operands, 1, 0);\"\n   [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set (attr \"mode\")\n@@ -1064,7 +1040,7 @@\n \t(compare:CCFP (match_operand 0 \"register_operand\" \"x\")\n \t\t      (match_operand 1 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[0])\"\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"* return output_fp_compare (insn, operands, 1, 0);\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set (attr \"mode\")\n@@ -4161,7 +4137,7 @@\n    (clobber (match_scratch:DF 4 \"=&1f\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n-  \"* operands[5] = operands[4]; return output_fix_trunc (insn, operands);\"\n+  \"* return output_fix_trunc (insn, operands);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])"}]}