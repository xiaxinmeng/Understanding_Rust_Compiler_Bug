{"sha": "5463c2c89362c64ad49953bd06e10cc8925bfe06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2M2MyYzg5MzYyYzY0YWQ0OTk1M2JkMDZlMTBjYzg5MjViZmUwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-21T07:59:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-21T07:59:32Z"}, "message": "re PR tree-optimization/69355 (Wrong results with -O1 optimization)\n\n\tPR c++/69355\n\t* tree-dfa.c (get_ref_base_and_extent): Use GET_MODE_BITSIZE (mode)\n\tfor bitsize instead of GET_MODE_PRECISION (mode).\n\n\t* g++.dg/torture/pr69355.C: New test.\n\nFrom-SVN: r232663", "tree": {"sha": "cba686a88e409c5c096dcbba16a02aa2df958b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba686a88e409c5c096dcbba16a02aa2df958b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5463c2c89362c64ad49953bd06e10cc8925bfe06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463c2c89362c64ad49953bd06e10cc8925bfe06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5463c2c89362c64ad49953bd06e10cc8925bfe06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463c2c89362c64ad49953bd06e10cc8925bfe06/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef59b981131e0fd8ef2c2b1c4862d490210390a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef59b981131e0fd8ef2c2b1c4862d490210390a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef59b981131e0fd8ef2c2b1c4862d490210390a"}], "stats": {"total": 163, "additions": 162, "deletions": 1}, "files": [{"sha": "5b4ed595fd6c4ab6c44765b98b206aecf0e1904b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5463c2c89362c64ad49953bd06e10cc8925bfe06", "patch": "@@ -1,3 +1,9 @@\n+2016-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69355\n+\t* tree-dfa.c (get_ref_base_and_extent): Use GET_MODE_BITSIZE (mode)\n+\tfor bitsize instead of GET_MODE_PRECISION (mode).\n+\n 2016-01-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/52291"}, {"sha": "a6bc40c1ece47cfa5443deb615c69cb49a6187c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5463c2c89362c64ad49953bd06e10cc8925bfe06", "patch": "@@ -1,3 +1,8 @@\n+2016-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69355\n+\t* g++.dg/torture/pr69355.C: New test.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "58cb9615e21cad0c869a3fdb23b5e326673ce1ff", "filename": "gcc/testsuite/g++.dg/torture/pr69355.C", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr69355.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr69355.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr69355.C?ref=5463c2c89362c64ad49953bd06e10cc8925bfe06", "patch": "@@ -0,0 +1,150 @@\n+// PR c++/69355\n+// { dg-do run }\n+\n+template <int> struct A;\n+template <> struct A<1> {};\n+template <class Obj, int> struct B\n+{\n+  template <class T> struct C\n+  {\n+    typedef T *iterator;\n+    C (iterator p1) : m_iter (p1) {}\n+    void operator, (T p1) { *m_iter = p1; }\n+    iterator m_iter;\n+  };\n+  typedef double *iterator;\n+  B (Obj &p1, double) : m_object (p1) {}\n+  C<double> operator, (double);\n+  Obj &m_object;\n+};\n+template <class Obj, int LEN>\n+typename B<Obj, LEN>::template C<double>\n+B<Obj, LEN>::operator, (double p1)\n+{\n+  iterator a = m_object.data (), b = a + 1;\n+  *a = 1;\n+  *b = p1;\n+  return C<double>(b + 1);\n+}\n+class D {};\n+inline double operator+(const double &p1, D) { return p1; }\n+template <int> class U;\n+template <int Sz, int K = 0> struct F\n+{\n+  enum { doIt = K < Sz - 1 ? 1 : 0 };\n+  template <class Dest, class Src, class Assign>\n+  static void assign (Dest &p1, Src &p2, Assign &p3)\n+  {\n+    p3.apply_on (p1 (K), p2 (K));\n+    F<Sz * doIt, (K + 1) * doIt>::assign (p1, p2, p3);\n+  }\n+  template <class Dest, class Src> static double dot (Dest &p1, Src &p2)\n+  {\n+    return p1 (K) * p2 (K) + F<Sz * doIt, (K + 1) * doIt>::dot (p1, p2);\n+  }\n+};\n+template <> struct F<0>\n+{\n+  template <class Dest, class Src, class Assign>\n+  static void assign (Dest &, Src &, Assign &) {}\n+  template <class Dest, class Src> static D dot (Dest &, Src &) { return D (); }\n+};\n+template <class E, int Sz> struct G\n+{\n+  enum { ops_assign, use_meta };\n+  G (const E &p1) : m_expr (p1) {}\n+  double operator()(int p1) const { return m_expr (p1); }\n+  template <class Dest, class Src, class Assign>\n+  static void do_assign (A<1>, Dest &p2, Src &p3, Assign &p4)\n+  {\n+    F<Sz>::assign (p2, p3, p4);\n+  }\n+  template <class Dest, class Assign>\n+  void assign_to (Dest &p1, const Assign &p2) const\n+  {\n+    do_assign (A<1>(), p1, *this, p2);\n+  }\n+  E m_expr;\n+};\n+struct H\n+{\n+  static double apply_on (double p1, long double p2) { return p1 / p2; }\n+  static void apply_on (double &p1, double p2) { p1 = p2; }\n+};\n+template <class E1, class E2> struct I\n+{\n+  I (const E1 &p1, const E2 &p2) : m_lhs (p1), m_rhs (p2) {}\n+  double operator()(int p1) const\n+  {\n+    double c = m_lhs (p1);\n+    return H::apply_on (c, m_rhs (0));\n+  }\n+  E1 m_lhs;\n+  const E2 m_rhs;\n+};\n+struct J\n+{\n+  J (double p1) : m_data (p1) {}\n+  long double operator()(int) const { return m_data; }\n+  long double m_data;\n+};\n+template <int Sz> struct K\n+{\n+  K (const U<Sz> &p1) : m_data (p1.data ()) {}\n+  double operator()(int p1) const { return m_data[p1]; }\n+  const double *m_data;\n+};\n+template <int Sz> struct U\n+{\n+  U () {}\n+  U (const U &p1)\n+  {\n+    *this = G<ConstReference, Sz>(p1.const_ref ());\n+  }\n+  B<U, Sz> operator=(double) { return B<U, Sz>(*this, 0); }\n+  double *data () { return m_data; }\n+  const double *data () const { return m_data; }\n+  double &operator()(int p1) { return m_data[p1]; }\n+  double operator()(int p1) const { return m_data[p1]; }\n+  typedef K<Sz> ConstReference;\n+  ConstReference const_ref () const { return *this; }\n+  template <class E> void operator=(const G<E, Sz> &p1)\n+  {\n+    p1.assign_to (*this, H ());\n+  }\n+  double m_data[Sz];\n+};\n+template <int Sz>\n+G<I<K<Sz>, J>, Sz> div (U<Sz> &p1, double p2)\n+{\n+  typedef I<K<Sz>, J> expr_type;\n+  return G<expr_type, Sz>(expr_type (p1.const_ref (), p2));\n+}\n+template <int Sz> double norm2 (U<Sz> &p1)\n+{\n+  return __builtin_sqrt (F<Sz>::dot (p1, p1));\n+}\n+template <int Sz>\n+G<I<K<Sz>, J>, Sz> operator/(U<Sz> &p1, double p2)\n+{\n+  return div (p1, p2);\n+}\n+typedef U<3> V;\n+V foo (V p1)\n+{\n+  double e = norm2 (p1);\n+  V r;\n+  r = p1 / e;\n+  return r;\n+}\n+int\n+main ()\n+{\n+  V f;\n+  f = 1, 2, 3;\n+  V r = foo (f);\n+  if (__builtin_fabs (r (0) - 0.267261) > 0.01\n+      || __builtin_fabs (r (1) - 0.534522) > 0.01\n+      || __builtin_fabs (r (2) - 0.801784) > 0.01)\n+    __builtin_abort ();\n+}"}, {"sha": "db560cf73602ee8fdf0841d586654870a19181a8", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c2c89362c64ad49953bd06e10cc8925bfe06/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=5463c2c89362c64ad49953bd06e10cc8925bfe06", "patch": "@@ -395,7 +395,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       if (mode == BLKmode)\n \tsize_tree = TYPE_SIZE (TREE_TYPE (exp));\n       else\n-\tbitsize = int (GET_MODE_PRECISION (mode));\n+\tbitsize = int (GET_MODE_BITSIZE (mode));\n     }\n   if (size_tree != NULL_TREE\n       && TREE_CODE (size_tree) == INTEGER_CST)"}]}