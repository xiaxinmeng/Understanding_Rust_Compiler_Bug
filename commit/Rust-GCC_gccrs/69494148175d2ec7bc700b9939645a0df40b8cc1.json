{"sha": "69494148175d2ec7bc700b9939645a0df40b8cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0OTQxNDgxNzVkMmVjN2JjNzAwYjk5Mzk2NDVhMGRmNDBiOGNjMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-10-29T15:36:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-10-29T15:36:12Z"}, "message": "sparc.c (function_arg_partial_nregs): Never return 1 for complex integral modes whose size is lesser or equal to a word.\n\n\t* config/sparc/sparc.c (function_arg_partial_nregs) [TARGET_ARCH64]:\n\tNever return 1 for complex integral modes whose size is lesser or\n\tequal to a word.\n\t(function_arg_pass_by_reference) [TARGET_ARCH64]: Mention CTImode\n\tin the comment.\n\t(function_arg_advance) [TARGET_ARCH64]: Don't special-case complex\n\tmodes.\n\t(sparc_va_arg) [TARGET_ARCH64]: Handle any types whose is greater\n\tthan 16 bytes by reference.\n\nFrom-SVN: r73044", "tree": {"sha": "20b899c24c143379fe8552185bb09b0632de9f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b899c24c143379fe8552185bb09b0632de9f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69494148175d2ec7bc700b9939645a0df40b8cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69494148175d2ec7bc700b9939645a0df40b8cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69494148175d2ec7bc700b9939645a0df40b8cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69494148175d2ec7bc700b9939645a0df40b8cc1/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2035efe7fbfe3205e24f476402d7504650999530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2035efe7fbfe3205e24f476402d7504650999530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2035efe7fbfe3205e24f476402d7504650999530"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "a4a32b1325ebcbfc39bfdc605327835b33b5cfed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69494148175d2ec7bc700b9939645a0df40b8cc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69494148175d2ec7bc700b9939645a0df40b8cc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69494148175d2ec7bc700b9939645a0df40b8cc1", "patch": "@@ -1,3 +1,15 @@\n+2003-10-29  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (function_arg_partial_nregs) [TARGET_ARCH64]:\n+\tNever return 1 for complex integral modes whose size is lesser or\n+\tequal to a word.\n+\t(function_arg_pass_by_reference) [TARGET_ARCH64]: Mention CTImode\n+\tin the comment.\n+\t(function_arg_advance) [TARGET_ARCH64]: Don't special-case complex\n+\tmodes.\n+\t(sparc_va_arg) [TARGET_ARCH64]: Handle any types whose is greater\n+\tthan 16 bytes by reference.\n+\n 2003-10-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/ia64/ia64.c (ia64_assemble_integer): Test POINTER_SIZE,"}, {"sha": "1e77430f1c7a96ce636c7a032b2aa8816f8421c1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69494148175d2ec7bc700b9939645a0df40b8cc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69494148175d2ec7bc700b9939645a0df40b8cc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=69494148175d2ec7bc700b9939645a0df40b8cc1", "patch": "@@ -5429,7 +5429,8 @@ function_arg_partial_nregs (const struct sparc_args *cum,\n \t      && slotno == SPARC_INT_ARG_MAX - 1)\n \t    return 1;\n \t}\n-      else if (GET_MODE_CLASS (mode) == MODE_COMPLEX_INT\n+      else if ((GET_MODE_CLASS (mode) == MODE_COMPLEX_INT\n+\t\t&& GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n \t       || (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n \t\t   && ! (TARGET_FPU && named)))\n \t{\n@@ -5476,7 +5477,8 @@ function_arg_pass_by_reference (const struct sparc_args *cum ATTRIBUTE_UNUSED,\n   else\n     {\n       return ((type && TREE_CODE (type) == ARRAY_TYPE)\n-\t      /* Consider complex values as aggregates, so care for TCmode.  */\n+\t      /* Consider complex values as aggregates, so care\n+\t\t for CTImode and TCmode.  */\n \t      || GET_MODE_SIZE (mode) > 16\n \t      || (type\n \t\t  && AGGREGATE_TYPE_P (type)\n@@ -5521,14 +5523,6 @@ function_arg_advance (struct sparc_args *cum, enum machine_mode mode,\n \t  else /* passed by reference */\n \t    ++cum->words;\n \t}\n-      else if (GET_MODE_CLASS (mode) == MODE_COMPLEX_INT)\n-\t{\n-\t  cum->words += 2;\n-\t}\n-      else if (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n-\t{\n-\t  cum->words += GET_MODE_SIZE (mode) / UNITS_PER_WORD;\n-\t}\n       else\n \t{\n \t  cum->words += (mode != BLKmode\n@@ -5661,17 +5655,19 @@ sparc_va_arg (tree valist, tree type)\n       if (TYPE_ALIGN (type) >= 2 * (unsigned) BITS_PER_WORD)\n \talign = 2 * UNITS_PER_WORD;\n \n-      if (AGGREGATE_TYPE_P (type))\n+      /* Consider complex values as aggregates, so care\n+\t for CTImode and TCmode.  */\n+      if ((unsigned HOST_WIDE_INT) size > 16)\n \t{\n-\t  if ((unsigned HOST_WIDE_INT) size > 16)\n-\t    {\n-\t      indirect = 1;\n-\t      size = rsize = UNITS_PER_WORD;\n-\t      align = 0;\n-\t    }\n-\t  /* SPARC v9 ABI states that structures up to 8 bytes in size are\n-\t     given one 8 byte slot.  */\n-\t  else if (size == 0)\n+\t  indirect = 1;\n+\t  size = rsize = UNITS_PER_WORD;\n+\t  align = 0;\n+\t}\n+      else if (AGGREGATE_TYPE_P (type))\n+\t{\n+\t  /* SPARC-V9 ABI states that structures up to 16 bytes in size\n+\t     are given whole slots as needed.  */\n+\t  if (size == 0)\n \t    size = rsize = UNITS_PER_WORD;\n \t  else\n \t    size = rsize;"}]}