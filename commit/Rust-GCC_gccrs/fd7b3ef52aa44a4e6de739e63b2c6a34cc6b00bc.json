{"sha": "fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3YjNlZjUyYWE0NGE0ZTZkZTczOWU2M2IyYzZhMzRjYzZiMDBiYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-06-29T13:53:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-06-29T13:53:32Z"}, "message": "Simplify structure try_transform_to_exit_first_loop_alt\n\n2015-06-29  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-parloops.c (try_transform_to_exit_first_loop_alt): Simplify\n\tfunction structure.\n\nFrom-SVN: r225119", "tree": {"sha": "b6e774aa0b69528905941fdd8e69df6a5282b599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6e774aa0b69528905941fdd8e69df6a5282b599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc/comments", "author": null, "committer": null, "parents": [{"sha": "1f8c015bb4a994ef88e1b1b946bc3c0cc2102ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8c015bb4a994ef88e1b1b946bc3c0cc2102ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8c015bb4a994ef88e1b1b946bc3c0cc2102ef8"}], "stats": {"total": 64, "additions": 20, "deletions": 44}, "files": [{"sha": "4427fd4870242c191f498d4323bb8203661ccbe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "patch": "@@ -1,3 +1,8 @@\n+2015-06-29  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-parloops.c (try_transform_to_exit_first_loop_alt): Simplify\n+\tfunction structure.\n+\n 2015-06-29  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* doc/invoke.texi (Aarch64 Options, -march): Split out arch and"}, {"sha": "ec708c67ac97306265061b739ae47722d7290112", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 15, "deletions": 44, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=fd7b3ef52aa44a4e6de739e63b2c6a34cc6b00bc", "patch": "@@ -1788,60 +1788,31 @@ try_transform_to_exit_first_loop_alt (struct loop *loop,\n \t\t\t\t       nit, build_one_cst (nit_type));\n \n \t  gcc_assert (TREE_CODE (alt_bound) == INTEGER_CST);\n+\t  transform_to_exit_first_loop_alt (loop, reduction_list, alt_bound);\n+\t  return true;\n \t}\n       else\n \t{\n \t  /* Todo: Figure out if we can trigger this, if it's worth to handle\n \t     optimally, and if we can handle it optimally.  */\n+\t  return false;\n \t}\n     }\n-  else\n-    {\n-      gcc_assert (TREE_CODE (nit) == SSA_NAME);\n-\n-      gimple def = SSA_NAME_DEF_STMT (nit);\n-\n-      if (def\n-\t  && is_gimple_assign (def)\n-\t  && gimple_assign_rhs_code (def) == PLUS_EXPR)\n-\t{\n-\t  tree op1 = gimple_assign_rhs1 (def);\n-\t  tree op2 = gimple_assign_rhs2 (def);\n-\t  if (integer_minus_onep (op1))\n-\t    alt_bound = op2;\n-\t  else if (integer_minus_onep (op2))\n-\t    alt_bound = op1;\n-\t}\n \n-      /* There is a number of test-cases for which we don't get an alt_bound\n-\t here: they're listed here, with the lhs of the last stmt as the nit:\n+  gcc_assert (TREE_CODE (nit) == SSA_NAME);\n \n-\t libgomp.graphite/force-parallel-1.c:\n-\t _21 = (signed long) N_6(D);\n-\t _19 = _21 + -1;\n-\t _7 = (unsigned long) _19;\n+  gimple def = SSA_NAME_DEF_STMT (nit);\n \n-\t libgomp.graphite/force-parallel-2.c:\n-\t _33 = (signed long) N_9(D);\n-\t _16 = _33 + -1;\n-\t _37 = (unsigned long) _16;\n-\n-\t libgomp.graphite/force-parallel-5.c:\n-\t <bb 6>:\n-\t # graphite_IV.5_46 = PHI <0(5), graphite_IV.5_47(11)>\n-\t <bb 7>:\n-\t _33 = (unsigned long) graphite_IV.5_46;\n-\n-\t g++.dg/tree-ssa/pr34355.C:\n-\t _2 = (unsigned int) i_9;\n-\t _3 = 4 - _2;\n-\n-\t gcc.dg/pr53849.c:\n-\t _5 = d.0_11 + -2;\n-\t _18 = (unsigned int) _5;\n-\n-\t We will be able to handle some of these cases, if we can determine when\n-\t it's safe to look past casts.  */\n+  if (def\n+      && is_gimple_assign (def)\n+      && gimple_assign_rhs_code (def) == PLUS_EXPR)\n+    {\n+      tree op1 = gimple_assign_rhs1 (def);\n+      tree op2 = gimple_assign_rhs2 (def);\n+      if (integer_minus_onep (op1))\n+\talt_bound = op2;\n+      else if (integer_minus_onep (op2))\n+\talt_bound = op1;\n     }\n \n   if (alt_bound == NULL_TREE)"}]}