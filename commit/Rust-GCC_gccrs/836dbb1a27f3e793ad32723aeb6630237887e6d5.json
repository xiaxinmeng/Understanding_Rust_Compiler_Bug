{"sha": "836dbb1a27f3e793ad32723aeb6630237887e6d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2ZGJiMWEyN2YzZTc5M2FkMzI3MjNhZWI2NjMwMjM3ODg3ZTZkNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-05-24T10:13:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-05-24T10:13:35Z"}, "message": "Fix GROUP_GAP for single-element interleaving\n\nvectorizable_load had a curious \"force_peeling\" variable, with no\ncomment explaining why we need it for single-element interleaving\nbut not for other cases.  I think it's simply because we weren't\ninitialising the GROUP_GAP correctly for single loads.\n\nTested on aarch64-linux-gnu and x86_64-linux-gnu.\n\ngcc/\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Set\n\tGROUP_GAP for single-element interleaving.\n\t* tree-vect-stmts.c (vectorizable_load): Remove force_peeling\n\tvariable.\n\nFrom-SVN: r236631", "tree": {"sha": "424962ab1d41c98e6fba733950a5329a6bc15160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/424962ab1d41c98e6fba733950a5329a6bc15160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/836dbb1a27f3e793ad32723aeb6630237887e6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836dbb1a27f3e793ad32723aeb6630237887e6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/836dbb1a27f3e793ad32723aeb6630237887e6d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836dbb1a27f3e793ad32723aeb6630237887e6d5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f17a223de829cb5fa0b32a9f12c22a4fa929506c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17a223de829cb5fa0b32a9f12c22a4fa929506c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17a223de829cb5fa0b32a9f12c22a4fa929506c"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "a61b6cd97d0a289349d34bf8388236f4d93551e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=836dbb1a27f3e793ad32723aeb6630237887e6d5", "patch": "@@ -1,3 +1,10 @@\n+2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Set\n+\tGROUP_GAP for single-element interleaving.\n+\t* tree-vect-stmts.c (vectorizable_load): Remove force_peeling\n+\tvariable.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70434"}, {"sha": "36d302a056ca4af0124a6cff9ed0c9e0fc318283", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=836dbb1a27f3e793ad32723aeb6630237887e6d5", "patch": "@@ -2233,6 +2233,7 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n \t{\n \t  GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) = stmt;\n \t  GROUP_SIZE (vinfo_for_stmt (stmt)) = groupsize;\n+\t  GROUP_GAP (stmt_info) = groupsize - 1;\n \t  if (dump_enabled_p ())\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,"}, {"sha": "f66e18062087c9bc039470d0ad27c5fc8780af56", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836dbb1a27f3e793ad32723aeb6630237887e6d5/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=836dbb1a27f3e793ad32723aeb6630237887e6d5", "patch": "@@ -6308,7 +6308,6 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n          that leaves unused vector loads around punt - we at least create\n \t very sub-optimal code in that case (and blow up memory,\n \t see PR65518).  */\n-      bool force_peeling = false;\n       if (first_stmt == stmt\n \t  && !GROUP_NEXT_ELEMENT (stmt_info))\n \t{\n@@ -6322,16 +6321,15 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t    }\n \n \t  /* Single-element interleaving requires peeling for gaps.  */\n-\t  force_peeling = true;\n+\t  gcc_assert (GROUP_GAP (stmt_info));\n \t}\n \n       /* If there is a gap in the end of the group or the group size cannot\n          be made a multiple of the vector element count then we access excess\n \t elements in the last iteration and thus need to peel that off.  */\n       if (loop_vinfo\n \t  && ! STMT_VINFO_STRIDED_P (stmt_info)\n-\t  && (force_peeling\n-\t      || GROUP_GAP (vinfo_for_stmt (first_stmt)) != 0\n+\t  && (GROUP_GAP (vinfo_for_stmt (first_stmt)) != 0\n \t      || (!slp && vf % GROUP_SIZE (vinfo_for_stmt (first_stmt)) != 0)))\n \t{\n \t  if (dump_enabled_p ())"}]}