{"sha": "8b8b203a26bdac3dede77e76d06e4e7084f79acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI4YjIwM2EyNmJkYWMzZGVkZTc3ZTc2ZDA2ZTRlNzA4NGY3OWFjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-10T00:40:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-10T00:40:44Z"}, "message": "Overhaul pointer-to-member conversion and template argument handling.\n\n\t* call.c (standard_conversion): Avoid creating ck_pmem when the\n\tclass type is the same.\n\t* cvt.c (can_convert_qual): Split from\n\tperform_qualification_conversions.\n\t* constexpr.c (cxx_eval_constant_expression): Check it.\n\t* typeck.c (convert_ptrmem): Only cplus_expand_constant if\n\tadjustment is necessary.\n\t* pt.c (check_valid_ptrmem_cst_expr): Compare class types.\n\t(convert_nontype_argument): Avoid redundant error.\n\nFrom-SVN: r249088", "tree": {"sha": "17fc780673ab6af72b41232e6ed5191e0b849c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17fc780673ab6af72b41232e6ed5191e0b849c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b8b203a26bdac3dede77e76d06e4e7084f79acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8b203a26bdac3dede77e76d06e4e7084f79acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8b203a26bdac3dede77e76d06e4e7084f79acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8b203a26bdac3dede77e76d06e4e7084f79acc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52486891929862f8272e1c602957f5cb3b5d6e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52486891929862f8272e1c602957f5cb3b5d6e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52486891929862f8272e1c602957f5cb3b5d6e2a"}], "stats": {"total": 106, "additions": 61, "deletions": 45}, "files": [{"sha": "4e966a2e26fb8952377625694312eb7f94590622", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -1,5 +1,16 @@\n 2017-06-09  Jason Merrill  <jason@redhat.com>\n \n+\tOverhaul pointer-to-member conversion and template argument handling.\n+\t* call.c (standard_conversion): Avoid creating ck_pmem when the\n+\tclass type is the same.\n+\t* cvt.c (can_convert_qual): Split from\n+\tperform_qualification_conversions.\n+\t* constexpr.c (cxx_eval_constant_expression): Check it.\n+\t* typeck.c (convert_ptrmem): Only cplus_expand_constant if\n+\tadjustment is necessary.\n+\t* pt.c (check_valid_ptrmem_cst_expr): Compare class types.\n+\t(convert_nontype_argument): Avoid redundant error.\n+\n \t* call.c (convert_like_real): Remove \"inner\" parameter.\n \tDon't replace a constant with its value.\n \t* cp-gimplify.c (cp_fully_fold): Use cp_fold_rvalue."}, {"sha": "a4b6a95f13e776a758e4061fbe850814ca41f9c2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -1262,14 +1262,16 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t  tree fbase = TYPE_PTRMEM_CLASS_TYPE (from);\n \t  tree tbase = TYPE_PTRMEM_CLASS_TYPE (to);\n \n-\t  if (DERIVED_FROM_P (fbase, tbase)\n-\t      && (same_type_ignoring_top_level_qualifiers_p\n-\t\t  (from_pointee, to_pointee)))\n+\t  if (same_type_p (fbase, tbase))\n+\t    /* No base conversion needed.  */;\n+\t  else if (DERIVED_FROM_P (fbase, tbase)\n+\t\t   && (same_type_ignoring_top_level_qualifiers_p\n+\t\t       (from_pointee, to_pointee)))\n \t    {\n \t      from = build_ptrmem_type (tbase, from_pointee);\n \t      conv = build_conv (ck_pmem, from, conv);\n \t    }\n-\t  else if (!same_type_p (fbase, tbase))\n+\t  else\n \t    return NULL;\n \t}\n       else if (CLASS_TYPE_P (from_pointee)"}, {"sha": "ae24e4010ff11e7db805f0dcbb31dd1996da4a98", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -4399,7 +4399,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tif (TREE_CODE (op) == PTRMEM_CST && tcode == NOP_EXPR)\n \t  {\n \t    if (same_type_ignoring_top_level_qualifiers_p (type,\n-\t\t\t\t\t\t\t   TREE_TYPE (op)))\n+\t\t\t\t\t\t\t   TREE_TYPE (op))\n+\t\t|| can_convert_qual (type, op))\n \t      return cp_fold_convert (type, op);\n \t    else\n \t      {"}, {"sha": "07da0cda5e741bf031149a1de9328fd640c80cca", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -6022,6 +6022,7 @@ extern tree convert_force\t\t\t(tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_expr_type_conversion\t\t(int, tree, bool);\n extern tree type_promotes_to\t\t\t(tree);\n+extern bool can_convert_qual\t\t\t(tree, tree);\n extern tree perform_qualification_conversions\t(tree, tree);\n extern bool tx_safe_fn_type_p\t\t\t(tree);\n extern tree tx_unsafe_fn_variant\t\t(tree);"}, {"sha": "3460e1334294407238366a336c9d618a2ffa9bc1", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -1890,6 +1890,26 @@ type_promotes_to (tree type)\n    closely.  Although they are used only in pt.c at the moment, they\n    should presumably be used everywhere in the future.  */\n \n+/* True iff EXPR can be converted to TYPE via a qualification conversion.\n+   Callers should check for identical types before calling this function.  */\n+\n+bool\n+can_convert_qual (tree type, tree expr)\n+{\n+  tree expr_type = TREE_TYPE (expr);\n+  gcc_assert (!same_type_p (type, expr_type));\n+\n+  if (TYPE_PTR_P (type) && TYPE_PTR_P (expr_type))\n+    return comp_ptr_ttypes (TREE_TYPE (type), TREE_TYPE (expr_type));\n+  else if (TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (expr_type))\n+    return (same_type_p (TYPE_PTRMEM_CLASS_TYPE (type),\n+\t\t\t TYPE_PTRMEM_CLASS_TYPE (expr_type))\n+\t    && comp_ptr_ttypes (TYPE_PTRMEM_POINTED_TO_TYPE (type),\n+\t\t\t\tTYPE_PTRMEM_POINTED_TO_TYPE (expr_type)));\n+  else\n+    return false;\n+}\n+\n /* Attempt to perform qualification conversions on EXPR to convert it\n    to TYPE.  Return the resulting expression, or error_mark_node if\n    the conversion was impossible.  */\n@@ -1903,14 +1923,7 @@ perform_qualification_conversions (tree type, tree expr)\n \n   if (same_type_p (type, expr_type))\n     return expr;\n-  else if (TYPE_PTR_P (type) && TYPE_PTR_P (expr_type)\n-\t   && comp_ptr_ttypes (TREE_TYPE (type), TREE_TYPE (expr_type)))\n-    return build_nop (type, expr);\n-  else if (TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (expr_type)\n-\t   && same_type_p (TYPE_PTRMEM_CLASS_TYPE (type),\n-\t\t\t   TYPE_PTRMEM_CLASS_TYPE (expr_type))\n-\t   && comp_ptr_ttypes (TYPE_PTRMEM_POINTED_TO_TYPE (type),\n-\t\t\t       TYPE_PTRMEM_POINTED_TO_TYPE (expr_type)))\n+  else if (can_convert_qual (type, expr))\n     return build_nop (type, expr);\n   else\n     return error_mark_node;"}, {"sha": "b537cb8a85d7d9111a1f513fdd1e3ea4afbd36b6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -6124,8 +6124,14 @@ static bool\n check_valid_ptrmem_cst_expr (tree type, tree expr,\n \t\t\t     tsubst_flags_t complain)\n {\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n+  tree orig_expr = expr;\n   STRIP_NOPS (expr);\n-  if (expr && (null_ptr_cst_p (expr) || TREE_CODE (expr) == PTRMEM_CST))\n+  if (null_ptr_cst_p (expr))\n+    return true;\n+  if (TREE_CODE (expr) == PTRMEM_CST\n+      && same_type_p (TYPE_PTRMEM_CLASS_TYPE (type),\n+\t\t      PTRMEM_CST_CLASS (expr)))\n     return true;\n   if (cxx_dialect >= cxx11 && null_member_pointer_value_p (expr))\n     return true;\n@@ -6135,9 +6141,12 @@ check_valid_ptrmem_cst_expr (tree type, tree expr,\n     return true;\n   if (complain & tf_error)\n     {\n-      error (\"%qE is not a valid template argument for type %qT\",\n-\t     expr, type);\n-      error (\"it must be a pointer-to-member of the form %<&X::Y%>\");\n+      error_at (loc, \"%qE is not a valid template argument for type %qT\",\n+\t\torig_expr, type);\n+      if (TREE_CODE (expr) != PTRMEM_CST)\n+\tinform (loc, \"it must be a pointer-to-member of the form %<&X::Y%>\");\n+      else\n+\tinform (loc, \"because it is a member of %qT\", PTRMEM_CST_CLASS (expr));\n     }\n   return false;\n }\n@@ -6880,36 +6889,12 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n          expression must be a pointer-to-member constant.  */\n       if (!value_dependent_expression_p (expr)\n \t  && !check_valid_ptrmem_cst_expr (type, expr, complain))\n-\treturn error_mark_node;\n+\treturn NULL_TREE;\n \n       /* Repeated conversion can't deal with a conversion that turns PTRMEM_CST\n \t into a CONSTRUCTOR, so build up a new PTRMEM_CST instead.  */\n       if (fnptr_conv_p (type, TREE_TYPE (expr)))\n \texpr = make_ptrmem_cst (type, PTRMEM_CST_MEMBER (expr));\n-\n-      /* There is no way to disable standard conversions in\n-\t resolve_address_of_overloaded_function (called by\n-\t instantiate_type). It is possible that the call succeeded by\n-\t converting &B::I to &D::I (where B is a base of D), so we need\n-\t to reject this conversion here.\n-\n-\t Actually, even if there was a way to disable standard conversions,\n-\t it would still be better to reject them here so that we can\n-\t provide a superior diagnostic.  */\n-      if (!same_type_p (TREE_TYPE (expr), type))\n-\t{\n-\t  if (complain & tf_error)\n-\t    {\n-\t      error (\"%qE is not a valid template argument for type %qT \"\n-\t\t     \"because it is of type %qT\", expr, type,\n-\t\t     TREE_TYPE (expr));\n-\t      /* If we are just one standard conversion off, explain.  */\n-\t      if (can_convert_standard (type, TREE_TYPE (expr), complain))\n-\t\tinform (input_location,\n-\t\t\t\"standard conversions are not allowed in this context\");\n-\t    }\n-\t  return NULL_TREE;\n-\t}\n     }\n   /* [temp.arg.nontype]/5, bullet 7\n \n@@ -6921,7 +6906,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n          expression must be a pointer-to-member constant.  */\n       if (!value_dependent_expression_p (expr)\n \t  && !check_valid_ptrmem_cst_expr (type, expr, complain))\n-\treturn error_mark_node;\n+\treturn NULL_TREE;\n \n       expr = perform_qualification_conversions (type, expr);\n       if (expr == error_mark_node)"}, {"sha": "34d475b98f0f3443b808102dcd708a82a916024f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b203a26bdac3dede77e76d06e4e7084f79acc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8b8b203a26bdac3dede77e76d06e4e7084f79acc", "patch": "@@ -6710,12 +6710,13 @@ tree\n convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n \t\tbool c_cast_p, tsubst_flags_t complain)\n {\n+  if (same_type_p (type, TREE_TYPE (expr)))\n+    return expr;\n+\n   if (TYPE_PTRDATAMEM_P (type))\n     {\n       tree delta;\n \n-      if (TREE_CODE (expr) == PTRMEM_CST)\n-\texpr = cplus_expand_constant (expr);\n       delta = get_delta_difference (TYPE_PTRMEM_CLASS_TYPE (TREE_TYPE (expr)),\n \t\t\t\t    TYPE_PTRMEM_CLASS_TYPE (type),\n \t\t\t\t    allow_inverse_p,\n@@ -6727,6 +6728,8 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n \t{\n \t  tree cond, op1, op2;\n \n+\t  if (TREE_CODE (expr) == PTRMEM_CST)\n+\t    expr = cplus_expand_constant (expr);\n \t  cond = cp_build_binary_op (input_location,\n \t\t\t\t     EQ_EXPR,\n \t\t\t\t     expr,"}]}