{"sha": "cc1ef413a859433a8313fa9c15aaff41bdc837dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxZWY0MTNhODU5NDMzYTgzMTNmYTljMTVhYWZmNDFiZGM4MzdkYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-16T18:11:43Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-16T18:13:06Z"}, "message": "i386: Additional peephole2 to use flags from CMPXCHG more [PR96189]\n\nCMPXCHG instruction sets ZF flag if the values in the destination operand\nand EAX register are equal; otherwise the ZF flag is cleared and value\nfrom destination operand is loaded to EAX. Following assembly:\n\n        xorl    %eax, %eax\n        lock cmpxchgl   %edx, (%rdi)\n        testl   %eax, %eax\n        sete    %al\n\ncan be optimized by removing the unneeded comparison, since set ZF flag\nsignals that no update to EAX happened.  This patch adds peephole2\npattern to also handle XOR zeroing and load of -1 by OR.\n\n2020-07-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/96189\n\t* config/i386/sync.md\n\t(peephole2 to remove unneded compare after CMPXCHG):\n\tNew pattern, also handle XOR zeroing and load of -1 by OR.\n\ngcc/testsuite/ChangeLog:\n\tPR target/96189\n\t* gcc.target/i386/pr96189-1.c: New test.", "tree": {"sha": "8c405f73976c652609af5fabfd2755a57a49fb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c405f73976c652609af5fabfd2755a57a49fb15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1ef413a859433a8313fa9c15aaff41bdc837dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1ef413a859433a8313fa9c15aaff41bdc837dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1ef413a859433a8313fa9c15aaff41bdc837dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1ef413a859433a8313fa9c15aaff41bdc837dc/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f569026aa3088aa895ea39618d2998333b08600b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f569026aa3088aa895ea39618d2998333b08600b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f569026aa3088aa895ea39618d2998333b08600b"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "e22109039c10459cc38ca657a9015d9537c687bb", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1ef413a859433a8313fa9c15aaff41bdc837dc/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1ef413a859433a8313fa9c15aaff41bdc837dc/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=cc1ef413a859433a8313fa9c15aaff41bdc837dc", "patch": "@@ -629,6 +629,40 @@\n \t      (set (reg:CCZ FLAGS_REG)\n \t\t   (unspec_volatile:CCZ [(const_int 0)] UNSPECV_CMPXCHG))])])\n \n+(define_peephole2\n+  [(parallel [(set (match_operand:SWI48 0 \"register_operand\")\n+\t\t   (match_operand:SWI48 1 \"const_int_operand\"))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (parallel [(set (match_operand:SWI 2 \"register_operand\")\n+\t\t   (unspec_volatile:SWI\n+\t\t     [(match_operand:SWI 3 \"memory_operand\")\n+\t\t      (match_dup 2)\n+\t\t      (match_operand:SWI 4 \"register_operand\")\n+\t\t      (match_operand:SI 5 \"const_int_operand\")]\n+\t\t     UNSPECV_CMPXCHG))\n+\t      (set (match_dup 3)\n+\t\t   (unspec_volatile:SWI [(const_int 0)] UNSPECV_CMPXCHG))\n+\t      (set (reg:CCZ FLAGS_REG)\n+\t\t   (unspec_volatile:CCZ [(const_int 0)] UNSPECV_CMPXCHG))])\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (match_dup 2)\n+\t\t     (match_dup 1)))]\n+  \"REGNO (operands[0]) == REGNO (operands[2])\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_dup 1))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (parallel [(set (match_dup 2)\n+\t\t   (unspec_volatile:SWI\n+\t\t     [(match_dup 3)\n+\t\t      (match_dup 2)\n+\t\t      (match_dup 4)\n+\t\t      (match_dup 5)]\n+\t\t     UNSPECV_CMPXCHG))\n+\t      (set (match_dup 3)\n+\t\t   (unspec_volatile:SWI [(const_int 0)] UNSPECV_CMPXCHG))\n+\t      (set (reg:CCZ FLAGS_REG)\n+\t\t   (unspec_volatile:CCZ [(const_int 0)] UNSPECV_CMPXCHG))])])\n+\n ;; For operand 2 nonmemory_operand predicate is used instead of\n ;; register_operand to allow combiner to better optimize atomic\n ;; additions of constants."}, {"sha": "fd95cb23794e88ccf9487d2b2249ac09a8f7f307", "filename": "gcc/testsuite/gcc.target/i386/pr96189-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1ef413a859433a8313fa9c15aaff41bdc837dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1ef413a859433a8313fa9c15aaff41bdc837dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189-1.c?ref=cc1ef413a859433a8313fa9c15aaff41bdc837dc", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/96176 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmpb\\t\" } } */\n+\n+_Bool\n+foo (short *x, short z)\n+{\n+  short y = 0;\n+  __atomic_compare_exchange_n (x, &y, z, 0, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\n+  return y == 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\ttestw\\t\" } } */\n+\n+_Bool\n+bar (short *x, short z)\n+{\n+  short y = -1;\n+  __atomic_compare_exchange_n (x, &y, z, 0, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\n+  return y == -1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tincw\\t\" } } */"}]}