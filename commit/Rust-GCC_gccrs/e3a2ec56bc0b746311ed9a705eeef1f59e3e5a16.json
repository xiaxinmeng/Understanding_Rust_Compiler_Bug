{"sha": "e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhMmVjNTZiYzBiNzQ2MzExZWQ5YTcwNWVlZWYxZjU5ZTNlNWExNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-05-07T08:35:17Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-07T08:35:17Z"}, "message": "re PR fortran/53255 ([OOP] With TYPE, wrong type-bound operator used: of parent instead of overridden one)\n\n2012-05-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53255\n        * resolve.c (resolve_typebound_static): Fix handling\n        of overridden specific to generic operator.\n\n2012-05-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53255\n        * gfortran.dg/typebound_operator_15.f90: New.\n\nFrom-SVN: r187226", "tree": {"sha": "ab8adc6520cf69d65c86596388c3008bfca8695c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8adc6520cf69d65c86596388c3008bfca8695c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b3f712e2148384800838edfda032b9eb7345846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3f712e2148384800838edfda032b9eb7345846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3f712e2148384800838edfda032b9eb7345846"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "5c580069dafa953faa1d52a1481227c1bf68c2f3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "patch": "@@ -1,3 +1,9 @@\n+2012-05-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53255\n+\t* resolve.c (resolve_typebound_static): Fix handling\n+\tof overridden specific to generic operator.\n+\n 2012-05-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41587"}, {"sha": "b3a23ed73c9f3cc1f6dafdf1f95325588f0b082c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "patch": "@@ -5671,12 +5671,11 @@ resolve_typebound_static (gfc_expr* e, gfc_symtree** target,\n   e->value.compcall.actual = NULL;\n \n   /* If we find a deferred typebound procedure, check for derived types\n-     that an over-riding typebound procedure has not been missed.  */\n-  if (e->value.compcall.tbp->deferred\n-\t&& e->value.compcall.name\n-\t&& !e->value.compcall.tbp->non_overridable\n-\t&& e->value.compcall.base_object\n-\t&& e->value.compcall.base_object->ts.type == BT_DERIVED)\n+     that an overriding typebound procedure has not been missed.  */\n+  if (e->value.compcall.name\n+      && !e->value.compcall.tbp->non_overridable\n+      && e->value.compcall.base_object\n+      && e->value.compcall.base_object->ts.type == BT_DERIVED)\n     {\n       gfc_symtree *st;\n       gfc_symbol *derived;"}, {"sha": "4b30e8b3cf3d21d1769676e45842b0eb39c73037", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "patch": "@@ -1,3 +1,8 @@\n+2012-05-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53255\n+\t* gfortran.dg/typebound_operator_15.f90: New.\n+\n 2012-05-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41587"}, {"sha": "ca4d45c70175dec9c5ce66ca90ecf560a70f24a3", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_15.f90", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_15.f90?ref=e3a2ec56bc0b746311ed9a705eeef1f59e3e5a16", "patch": "@@ -0,0 +1,78 @@\n+! { dg-do run }\n+!\n+! PR fortran/53255\n+!\n+! Contributed by Reinhold Bader.\n+!\n+! Before TYPE(ext)'s .tr. wrongly called the base type's trace\n+! instead of ext's trace_ext.\n+!\n+module mod_base\n+  implicit none\n+  private\n+  integer, public :: base_cnt = 0\n+  type, public :: base\n+     private\n+     real :: r(2,2) = reshape( (/ 1.0, 2.0, 3.0, 4.0 /), (/ 2, 2 /))\n+   contains\n+     procedure, private :: trace\n+     generic :: operator(.tr.) => trace\n+  end type base\n+contains\n+  complex function trace(this)\n+    class(base), intent(in) :: this\n+    base_cnt = base_cnt + 1\n+!    write(*,*) 'executing base'\n+    trace = this%r(1,1) + this%r(2,2)\n+  end function trace\n+end module mod_base\n+\n+module mod_ext\n+  use mod_base\n+  implicit none\n+  private\n+  integer, public :: ext_cnt = 0\n+  public :: base, base_cnt\n+  type, public, extends(base) :: ext\n+     private\n+     real :: i(2,2) = reshape( (/ 1.0, 1.0, 1.0, 1.5 /), (/ 2, 2 /))\n+   contains\n+     procedure, private :: trace => trace_ext\n+  end type ext\n+contains\n+   complex function trace_ext(this)\n+    class(ext), intent(in) :: this\n+\n+!   the following should be executed through invoking .tr. p below\n+!    write(*,*) 'executing override'\n+    ext_cnt = ext_cnt + 1\n+    trace_ext = .tr. this%base + (0.0, 1.0) * ( this%i(1,1) + this%i(2,2) )\n+  end function trace_ext\n+\n+end module mod_ext\n+program test_override\n+  use mod_ext\n+  implicit none\n+  type(base) :: o\n+  type(ext) :: p\n+  real :: r\n+\n+  ! Note: ext's \".tr.\" (trace_ext) calls also base's \"trace\"\n+\n+!  write(*,*) .tr. o\n+!  write(*,*) .tr. p\n+  if (base_cnt /= 0 .or. ext_cnt /= 0) call abort ()\n+  r = .tr. o\n+  if (base_cnt /= 1 .or. ext_cnt /= 0) call abort ()\n+  r = .tr. p\n+  if (base_cnt /= 2 .or. ext_cnt /= 1) call abort ()\n+\n+  if (abs(.tr. o - 5.0 ) < 1.0e-6  .and. abs( .tr. p - (5.0,2.5)) < 1.0e-6) &\n+  then\n+    if (base_cnt /= 4 .or. ext_cnt /= 2) call abort ()\n+!     write(*,*) 'OK'\n+  else\n+    call abort()\n+!     write(*,*) 'FAIL'\n+  end if\n+end program test_override"}]}