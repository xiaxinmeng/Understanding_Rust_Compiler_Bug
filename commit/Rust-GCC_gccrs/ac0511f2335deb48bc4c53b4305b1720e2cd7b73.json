{"sha": "ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwNTExZjIzMzVkZWI0OGJjNGM1M2I0MzA1YjE3MjBlMmNkN2I3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-06-18T12:56:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-06-18T12:56:42Z"}, "message": "tree-streamer.h (streamer_tree_cache_create): Adjust prototype.\n\n2013-06-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-streamer.h (streamer_tree_cache_create): Adjust prototype.\n\t* tree-streamer.c (streamer_tree_cache_create): Make maintaining\n\tthe map from cache entry to cache index optional.\n\t(streamer_tree_cache_replace_tree): Adjust accordingly.\n\t(streamer_tree_cache_append): Likewise.\n\t(streamer_tree_cache_delete): Likewise.\n\t* lto-streamer-in.c (lto_data_in_create): Do not maintain the\n\tstreamer cache map from cache entry to cache index.\n\t* lto-streamer-out.c (create_output_block): Adjust.\n\n\tlto/\n\t* lto.c (lto_register_var_decl_in_symtab): Pass in cache index\n\tand use it.\n\t(lto_register_function_decl_in_symtab): Likewise.\n\t(cmp_tree): New function.\n\t(unify_scc): Instead of using the streamer cache map from entry\n\tto cache index match up the two maps we have by sorting them.\n\tAdjust calls to lto_register_var_decl_in_symtab and\n\tlto_register_function_decl_in_symtab.\n\nFrom-SVN: r200168", "tree": {"sha": "9e68c4d64c5b3c8af30ab8699be281e4d320a8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e68c4d64c5b3c8af30ab8699be281e4d320a8e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09485a08d3f4a486b59d969515e94ac3527eb3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09485a08d3f4a486b59d969515e94ac3527eb3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09485a08d3f4a486b59d969515e94ac3527eb3dd"}], "stats": {"total": 128, "additions": 91, "deletions": 37}, "files": [{"sha": "94a19edca5bbb3256a55e7cb354cdfa7ed9e7244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -1,3 +1,15 @@\n+2013-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-streamer.h (streamer_tree_cache_create): Adjust prototype.\n+\t* tree-streamer.c (streamer_tree_cache_create): Make maintaining\n+\tthe map from cache entry to cache index optional.\n+\t(streamer_tree_cache_replace_tree): Adjust accordingly.\n+\t(streamer_tree_cache_append): Likewise.\n+\t(streamer_tree_cache_delete): Likewise.\n+\t* lto-streamer-in.c (lto_data_in_create): Do not maintain the\n+\tstreamer cache map from cache entry to cache index.\n+\t* lto-streamer-out.c (create_output_block): Adjust.\n+\n 2013-06-18  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/arm/arm.md (attribute \"insn\"): Move multiplication and division"}, {"sha": "fe7ab7c5067d58fa6812814b47287a77b7657156", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -1305,7 +1305,7 @@ lto_data_in_create (struct lto_file_decl_data *file_data, const char *strings,\n   data_in->strings = strings;\n   data_in->strings_len = len;\n   data_in->globals_resolution = resolutions;\n-  data_in->reader_cache = streamer_tree_cache_create (false);\n+  data_in->reader_cache = streamer_tree_cache_create (false, false);\n \n   return data_in;\n }"}, {"sha": "b59bc8fe5d99fc85f36c213747e8928c5565f3a5", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -71,7 +71,7 @@ create_output_block (enum lto_section_type section_type)\n   ob->decl_state = lto_get_out_decl_state ();\n   ob->main_stream = XCNEW (struct lto_output_stream);\n   ob->string_stream = XCNEW (struct lto_output_stream);\n-  ob->writer_cache = streamer_tree_cache_create (!flag_wpa);\n+  ob->writer_cache = streamer_tree_cache_create (!flag_wpa, true);\n \n   if (section_type == LTO_section_function_body)\n     ob->cfg_stream = XCNEW (struct lto_output_stream);"}, {"sha": "aeda657fdba34f7e27cf470408d0cd59728a99c4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -1,3 +1,14 @@\n+2013-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto.c (lto_register_var_decl_in_symtab): Pass in cache index\n+\tand use it.\n+\t(lto_register_function_decl_in_symtab): Likewise.\n+\t(cmp_tree): New function.\n+\t(unify_scc): Instead of using the streamer cache map from entry\n+\tto cache index match up the two maps we have by sorting them.\n+\tAdjust calls to lto_register_var_decl_in_symtab and\n+\tlto_register_function_decl_in_symtab.\n+\n 2013-06-17  Richard Biener  <rguenther@suse.de>\n \n \t* Make-lang.in (lto.o): Add $(DATA_STREAMER_H) dependency."}, {"sha": "7ddb84d76cc093652f944f5afe6a40a5c2a26398", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 52, "deletions": 29, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -1608,27 +1608,22 @@ register_resolution (struct lto_file_decl_data *file_data, tree decl,\n    different files.  */\n \n static void\n-lto_register_var_decl_in_symtab (struct data_in *data_in, tree decl)\n+lto_register_var_decl_in_symtab (struct data_in *data_in, tree decl,\n+\t\t\t\t unsigned ix)\n {\n   tree context;\n \n   /* Variable has file scope, not local.  */\n   if (!TREE_PUBLIC (decl)\n       && !((context = decl_function_context (decl))\n \t   && auto_var_in_fn_p (decl, context)))\n-    {\n-      rest_of_decl_compilation (decl, 1, 0);\n-    }\n+    rest_of_decl_compilation (decl, 1, 0);\n \n   /* If this variable has already been declared, queue the\n      declaration for merging.  */\n   if (TREE_PUBLIC (decl))\n-    {\n-      unsigned ix;\n-      if (!streamer_tree_cache_lookup (data_in->reader_cache, decl, &ix))\n-\tgcc_unreachable ();\n-      register_resolution (data_in->file_data, decl, get_resolution (data_in, ix));\n-    }\n+    register_resolution (data_in->file_data,\n+\t\t\t decl, get_resolution (data_in, ix));\n }\n \n \n@@ -1638,17 +1633,14 @@ lto_register_var_decl_in_symtab (struct data_in *data_in, tree decl)\n    file being read.  */\n \n static void\n-lto_register_function_decl_in_symtab (struct data_in *data_in, tree decl)\n+lto_register_function_decl_in_symtab (struct data_in *data_in, tree decl,\n+\t\t\t\t      unsigned ix)\n {\n   /* If this variable has already been declared, queue the\n      declaration for merging.  */\n   if (TREE_PUBLIC (decl) && !DECL_ABSTRACT (decl))\n-    {\n-      unsigned ix;\n-      if (!streamer_tree_cache_lookup (data_in->reader_cache, decl, &ix))\n-\tgcc_unreachable ();\n-      register_resolution (data_in->file_data, decl, get_resolution (data_in, ix));\n-    }\n+    register_resolution (data_in->file_data,\n+\t\t\t decl, get_resolution (data_in, ix));\n }\n \n \n@@ -2259,6 +2251,19 @@ compare_tree_sccs (tree_scc *pscc, tree_scc *scc,\n   return false;\n }\n \n+/* QSort sort function to sort a map of two pointers after the 2nd\n+   pointer.  */\n+\n+static int\n+cmp_tree (const void *p1_, const void *p2_)\n+{\n+  tree *p1 = (tree *)(const_cast<void *>(p1_));\n+  tree *p2 = (tree *)(const_cast<void *>(p2_));\n+  if (p1[1] == p2[1])\n+    return 0;\n+  return ((uintptr_t)p1[1] < (uintptr_t)p2[1]) ? -1 : 1;\n+}\n+\n /* Try to unify the SCC with nodes FROM to FROM + LEN in CACHE and\n    hash value SCC_HASH with an already recorded SCC.  Return true if\n    that was successful, otherwise return false.  */\n@@ -2323,29 +2328,47 @@ unify_scc (struct streamer_tree_cache_d *cache, unsigned from,\n \t  num_sccs_merged++;\n \t  total_scc_size_merged += len;\n \n-\t  /* Fixup the streamer cache with the prevailing nodes according\n-\t     to the tree node mapping computed by compare_tree_sccs.  */\n+#ifdef ENABLE_CHECKING\n \t  for (unsigned i = 0; i < len; ++i)\n \t    {\n \t      tree t = map[2*i+1];\n \t      enum tree_code code = TREE_CODE (t);\n-\t      unsigned ix;\n-\t      bool r;\n \t      /* IDENTIFIER_NODEs should be singletons and are merged by the\n \t\t streamer.  The others should be singletons, too, and we\n \t\t should not merge them in any way.  */\n \t      gcc_assert (code != TRANSLATION_UNIT_DECL\n \t\t\t  && code != IDENTIFIER_NODE\n \t\t\t  && !streamer_handle_as_builtin_p (t));\n-\t      r = streamer_tree_cache_lookup (cache, t, &ix);\n-\t      gcc_assert (r && ix >= from);\n-\t      streamer_tree_cache_replace_tree (cache, map[2 * i], ix);\n-\t      if (TYPE_P (t))\n-\t\tnum_merged_types++;\n \t    }\n+#endif\n+\n+\t  /* Fixup the streamer cache with the prevailing nodes according\n+\t     to the tree node mapping computed by compare_tree_sccs.  */\n+\t  if (len == 1)\n+\t    streamer_tree_cache_replace_tree (cache, pscc->entries[0], from);\n+\t  else\n+\t    {\n+\t      tree *map2 = XALLOCAVEC (tree, 2 * len);\n+\t      for (unsigned i = 0; i < len; ++i)\n+\t\t{\n+\t\t  map2[i*2] = (tree)(uintptr_t)(from + i);\n+\t\t  map2[i*2+1] = scc->entries[i];\n+\t\t}\n+\t      qsort (map2, len, 2 * sizeof (tree), cmp_tree);\n+\t      qsort (map, len, 2 * sizeof (tree), cmp_tree);\n+\t      for (unsigned i = 0; i < len; ++i)\n+\t\tstreamer_tree_cache_replace_tree (cache, map[2*i],\n+\t\t\t\t\t\t  (uintptr_t)map2[2*i]);\n+\t    }\n+\n \t  /* Free the tree nodes from the read SCC.  */\n \t  for (unsigned i = 0; i < len; ++i)\n-\t    ggc_free (scc->entries[i]);\n+\t    {\n+\t      if (TYPE_P (scc->entries[i]))\n+\t\tnum_merged_types++;\n+\t      ggc_free (scc->entries[i]);\n+\t    }\n+\n \t  break;\n \t}\n \n@@ -2493,10 +2516,10 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t\t  /* Register variables and functions with the\n \t\t     symbol table.  */\n \t\t  if (TREE_CODE (t) == VAR_DECL)\n-\t\t    lto_register_var_decl_in_symtab (data_in, t);\n+\t\t    lto_register_var_decl_in_symtab (data_in, t, from + i);\n \t\t  else if (TREE_CODE (t) == FUNCTION_DECL\n \t\t\t   && !DECL_BUILT_IN (t))\n-\t\t    lto_register_function_decl_in_symtab (data_in, t);\n+\t\t    lto_register_function_decl_in_symtab (data_in, t, from + i);\n \t\t  /* Scan the tree for references to global functions or\n \t\t     variables and record those for later fixup.  */\n \t\t  maybe_remember_with_vars (t);"}, {"sha": "86bad29c0129699a6adaec636c829ecaa0699ce6", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -197,7 +197,10 @@ streamer_tree_cache_replace_tree (struct streamer_tree_cache_d *cache,\n   hashval_t hash = 0;\n   if (cache->hashes.exists ())\n     hash = streamer_tree_cache_get_hash (cache, ix);\n-  streamer_tree_cache_insert_1 (cache, t, hash, &ix, false);\n+  if (!cache->node_map)\n+    streamer_tree_cache_add_to_node_array (cache, ix, t, hash);\n+  else\n+    streamer_tree_cache_insert_1 (cache, t, hash, &ix, false);\n }\n \n \n@@ -208,7 +211,10 @@ streamer_tree_cache_append (struct streamer_tree_cache_d *cache,\n \t\t\t    tree t, hashval_t hash)\n {\n   unsigned ix = cache->nodes.length ();\n-  streamer_tree_cache_insert_1 (cache, t, hash, &ix, false);\n+  if (!cache->node_map)\n+    streamer_tree_cache_add_to_node_array (cache, ix, t, hash);\n+  else\n+    streamer_tree_cache_insert_1 (cache, t, hash, &ix, false);\n }\n \n /* Return true if tree node T exists in CACHE, otherwise false.  If IX_P is\n@@ -319,13 +325,14 @@ preload_common_nodes (struct streamer_tree_cache_d *cache)\n /* Create a cache of pickled nodes.  */\n \n struct streamer_tree_cache_d *\n-streamer_tree_cache_create (bool with_hashes)\n+streamer_tree_cache_create (bool with_hashes, bool with_map)\n {\n   struct streamer_tree_cache_d *cache;\n \n   cache = XCNEW (struct streamer_tree_cache_d);\n \n-  cache->node_map = pointer_map_create ();\n+  if (with_map)\n+    cache->node_map = pointer_map_create ();\n   cache->nodes.create (165);\n   if (with_hashes)\n     cache->hashes.create (165);\n@@ -347,7 +354,8 @@ streamer_tree_cache_delete (struct streamer_tree_cache_d *c)\n   if (c == NULL)\n     return;\n \n-  pointer_map_destroy (c->node_map);\n+  if (c->node_map)\n+    pointer_map_destroy (c->node_map);\n   c->nodes.release ();\n   c->hashes.release ();\n   free (c);"}, {"sha": "241eae2c1bf22bc1f8de690ee1a90c1d2b78d1d8", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0511f2335deb48bc4c53b4305b1720e2cd7b73/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=ac0511f2335deb48bc4c53b4305b1720e2cd7b73", "patch": "@@ -98,7 +98,7 @@ void streamer_tree_cache_append (struct streamer_tree_cache_d *, tree,\n \t\t\t\t hashval_t);\n bool streamer_tree_cache_lookup (struct streamer_tree_cache_d *, tree,\n \t\t\t\t unsigned *);\n-struct streamer_tree_cache_d *streamer_tree_cache_create (bool);\n+struct streamer_tree_cache_d *streamer_tree_cache_create (bool, bool);\n void streamer_tree_cache_delete (struct streamer_tree_cache_d *);\n \n /* Return the tree node at slot IX in CACHE.  */"}]}