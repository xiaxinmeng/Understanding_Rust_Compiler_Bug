{"sha": "c8574943c1178b72c96c34eca2f2e684201260f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1NzQ5NDNjMTE3OGI3MmM5NmMzNGVjYTJmMmU2ODQyMDEyNjBmNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-03-08T15:50:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-03-08T15:50:25Z"}, "message": "[AArch64] PR target/84748: Mark *compare_cstore<mode>_insn as clobbering CC reg\n\nIn this wrong-code PR the combine pass ends up moving a CC-using instruction past a *compare_cstore<mode>_insn\ninsn_and_split. After reload the *compare_cstore<mode>_insn splitter ends up generating a SUBS instruction that\nclobbers the condition flags, and things go bad.\n\nThe solution is simple, the *compare_cstore<mode>_insn pattern should specify that it clobbers the CC register\nso that combine (or any other pass) does not assume that it can move CC-using patterns across it.\n\nThis patch does that and fixes the testcase.\n\nThe testcase FAILs on GCC 8 only, but the buggy pattern is in GCC 6 onwards, so we should backport this as\na latent bug fix after it's had some time to bake in trunk.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\n\tPR target/84748\n\t* config/aarch64/aarch64.md (*compare_cstore<mode>_insn): Mark pattern\n\tas clobbering CC_REGNUM.\n\n\t* gcc.c-torture/execute/pr84748.c: New test.\n\nFrom-SVN: r258366", "tree": {"sha": "005276771a440d1d92a8b12943f3a1ea917fe037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005276771a440d1d92a8b12943f3a1ea917fe037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8574943c1178b72c96c34eca2f2e684201260f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8574943c1178b72c96c34eca2f2e684201260f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8574943c1178b72c96c34eca2f2e684201260f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8574943c1178b72c96c34eca2f2e684201260f4/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24545562ca5ece2615f8178ad6c6eb0be4fe6b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24545562ca5ece2615f8178ad6c6eb0be4fe6b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24545562ca5ece2615f8178ad6c6eb0be4fe6b3f"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "a467d7bafafeace7d2eac03859c8025637739c20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8574943c1178b72c96c34eca2f2e684201260f4", "patch": "@@ -1,3 +1,9 @@\n+2018-03-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/84748\n+\t* config/aarch64/aarch64.md (*compare_cstore<mode>_insn): Mark pattern\n+\tas clobbering CC_REGNUM.\n+\n 2018-03-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/84552"}, {"sha": "5b879fa3906b7338c54c622ae8cc8fe2560bfa7e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=c8574943c1178b72c96c34eca2f2e684201260f4", "patch": "@@ -3242,7 +3242,8 @@\n (define_insn_and_split \"*compare_cstore<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t (EQL:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:GPI 2 \"aarch64_imm24\" \"n\")))]\n+\t\t  (match_operand:GPI 2 \"aarch64_imm24\" \"n\")))\n+   (clobber (reg:CC CC_REGNUM))]\n   \"!aarch64_move_imm (INTVAL (operands[2]), <MODE>mode)\n    && !aarch64_plus_operand (operands[2], <MODE>mode)\n    && !reload_completed\""}, {"sha": "8b6d0e53c5eb2b127c3c9b7a759c50f53ddd71ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8574943c1178b72c96c34eca2f2e684201260f4", "patch": "@@ -1,3 +1,8 @@\n+2018-03-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/84748\n+\t* gcc.c-torture/execute/pr84748.c: New test.\n+\n 2018-03-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/84552"}, {"sha": "9572ab285c661c218acfa85c4e8a97a418d45a8e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr84748.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84748.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8574943c1178b72c96c34eca2f2e684201260f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84748.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84748.c?ref=c8574943c1178b72c96c34eca2f2e684201260f4", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-require-effective-target int128 } */\n+\n+typedef unsigned __int128 u128;\n+\n+int a, c, d;\n+u128 b;\n+\n+unsigned long long g0, g1;\n+\n+void\n+store (unsigned long long a0, unsigned long long a1)\n+{\n+  g0 = a0;\n+  g1 = a1;\n+}\n+\n+void\n+foo (void)\n+{\n+  b += a;\n+  c = d != 84347;\n+  b /= c;\n+  u128 x = b;\n+  store (x >> 0, x >> 64);\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  if (g0 != 0 || g1 != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}