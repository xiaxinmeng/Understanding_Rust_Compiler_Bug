{"sha": "45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhN2RkODA4ZTIwYzRkMmZlNDdkMWQ2N2MzOTBiM2Q3MGJmMjBkZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-22T20:15:18Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-22T20:15:18Z"}, "message": "sparc.md (G[0-7]_REG, [...]): New constants.\n\n\t* config/sparc/sparc.md (G[0-7]_REG, O[0-7]_REG, L[0-7]_REG,\n\tI[0-7]_REG, F[0-62]_REG, FCC[0-3]_REG, CC_REG, SFP_REG): New\n\tconstants.  Use them everywhere.\n\nFrom-SVN: r179103", "tree": {"sha": "37d7e71b8af3603c542fa1c622e2b74d15c23195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d7e71b8af3603c542fa1c622e2b74d15c23195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ea6239ff2ebe85f666e3e8b4c4f22eea9d32133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea6239ff2ebe85f666e3e8b4c4f22eea9d32133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea6239ff2ebe85f666e3e8b4c4f22eea9d32133"}], "stats": {"total": 394, "additions": 243, "deletions": 151}, "files": [{"sha": "1ca11135363bce46cd65bc91209cb532da4dd9b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "patch": "@@ -96,6 +96,10 @@\n \t* config/sparc/sparc.c (sparc_vis_init_builtins): Do not mark\n \tfpack16, fpack32, fpackfix as const.\n \n+\t* config/sparc/sparc.md (G[0-7]_REG, O[0-7]_REG, L[0-7]_REG,\n+\tI[0-7]_REG, F[0-62]_REG, FCC[0-3]_REG, CC_REG, SFP_REG): New\n+\tconstants.  Use them everywhere.\n+\n 2011-09-22  Oleg Endo  <oleg.endo@t-online.de>\n \n \t* config/sh/sh.c (andcosts): Renamed to and_xor_ior_costs."}, {"sha": "588caf3da4fad68e16deba91b1ef05d9d55e3e0e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 239, "deletions": 151, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7dd808e20c4d2fe47d1d67c390b3d70bf20de/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=45a7dd808e20c4d2fe47d1d67c390b3d70bf20de", "patch": "@@ -89,6 +89,94 @@\n    (UNSPECV_PROBE_STACK_RANGE\t11)\n   ])\n \n+(define_constants\n+ [(G0_REG\t\t\t0)\n+  (G1_REG\t\t\t1)\n+  (G2_REG\t\t\t2)\n+  (G3_REG\t\t\t3)\n+  (G4_REG\t\t\t4)\n+  (G5_REG\t\t\t5)\n+  (G6_REG\t\t\t6)\n+  (G7_REG\t\t\t7)\n+  (O0_REG\t\t\t8)\n+  (O1_REG\t\t\t9)\n+  (O2_REG\t\t\t10)\n+  (O3_REG\t\t\t11)\n+  (O4_REG\t\t\t12)\n+  (O5_REG\t\t\t13)\n+  (O6_REG\t\t\t14)\n+  (O7_REG\t\t\t15)\n+  (L0_REG\t\t\t16)\n+  (L1_REG\t\t\t17)\n+  (L2_REG\t\t\t18)\n+  (L3_REG\t\t\t19)\n+  (L4_REG\t\t\t20)\n+  (L5_REG\t\t\t21)\n+  (L6_REG\t\t\t22)\n+  (L7_REG\t\t\t23)\n+  (I0_REG\t\t\t24)\n+  (I1_REG\t\t\t25)\n+  (I2_REG\t\t\t26)\n+  (I3_REG\t\t\t27)\n+  (I4_REG\t\t\t28)\n+  (I5_REG\t\t\t29)\n+  (I6_REG\t\t\t30)\n+  (I7_REG\t\t\t31)\n+  (F0_REG\t\t\t32)\n+  (F1_REG\t\t\t33)\n+  (F2_REG\t\t\t34)\n+  (F3_REG\t\t\t35)\n+  (F4_REG\t\t\t36)\n+  (F5_REG\t\t\t37)\n+  (F6_REG\t\t\t38)\n+  (F7_REG\t\t\t39)\n+  (F8_REG\t\t\t40)\n+  (F9_REG\t\t\t41)\n+  (F10_REG\t\t\t42)\n+  (F11_REG\t\t\t43)\n+  (F12_REG\t\t\t44)\n+  (F13_REG\t\t\t45)\n+  (F14_REG\t\t\t46)\n+  (F15_REG\t\t\t47)\n+  (F16_REG\t\t\t48)\n+  (F17_REG\t\t\t49)\n+  (F18_REG\t\t\t50)\n+  (F19_REG\t\t\t51)\n+  (F20_REG\t\t\t52)\n+  (F21_REG\t\t\t53)\n+  (F22_REG\t\t\t54)\n+  (F23_REG\t\t\t55)\n+  (F24_REG\t\t\t56)\n+  (F25_REG\t\t\t57)\n+  (F26_REG\t\t\t58)\n+  (F27_REG\t\t\t59)\n+  (F28_REG\t\t\t60)\n+  (F29_REG\t\t\t61)\n+  (F30_REG\t\t\t62)\n+  (F31_REG\t\t\t63)\n+  (F32_REG\t\t\t64)\n+  (F34_REG\t\t\t66)\n+  (F36_REG\t\t\t68)\n+  (F38_REG\t\t\t70)\n+  (F40_REG\t\t\t72)\n+  (F42_REG\t\t\t74)\n+  (F44_REG\t\t\t76)\n+  (F46_REG\t\t\t78)\n+  (F48_REG\t\t\t80)\n+  (F50_REG\t\t\t82)\n+  (F52_REG\t\t\t84)\n+  (F54_REG\t\t\t86)\n+  (F56_REG\t\t\t88)\n+  (F58_REG\t\t\t90)\n+  (F60_REG\t\t\t92)\n+  (F62_REG\t\t\t94)\n+  (FCC0_REG\t\t\t96)\n+  (FCC1_REG\t\t\t97)\n+  (FCC2_REG\t\t\t98)\n+  (FCC3_REG\t\t\t99)\n+  (CC_REG\t\t\t100)\n+  (SFP_REG\t\t\t101)\n+ ])\n \n (define_mode_iterator P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n (define_mode_iterator I [QI HI SI DI])\n@@ -384,15 +472,15 @@\n ;; The compare DEFINE_INSNs.\n \n (define_insn \"*cmpsi_insn\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t    (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"cmp\\t%0, %1\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmpdi_sp64\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t     (match_operand:DI 1 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n@@ -518,7 +606,7 @@\n \t\t(match_operand:SI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (eq:SI (match_dup 3) (const_int 0)))\n-\t      (clobber (reg:CC 100))])]\n+\t      (clobber (reg:CC CC_REG))])]\n   \"\"\n   { operands[3] = gen_reg_rtx (SImode); })\n \n@@ -537,7 +625,7 @@\n \t\t(match_operand:SI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ne:SI (match_dup 3) (const_int 0)))\n-\t      (clobber (reg:CC 100))])]\n+\t      (clobber (reg:CC CC_REG))])]\n   \"\"\n   { operands[3] = gen_reg_rtx (SImode); })\n \n@@ -562,44 +650,44 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (ltu:SI (reg:CC 100) (const_int 0)))]\n+   (set (match_dup 0) (ltu:SI (reg:CC CC_REG) (const_int 0)))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*neg_snesi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (neg:SI (ltu:SI (reg:CC 100) (const_int 0))))]\n+   (set (match_dup 0) (neg:SI (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*snesi_zero_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (ne:DI (match_operand:SI 1 \"register_operand\" \"r\")\n                (const_int 0)))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"TARGET_ARCH64\"\n   \"#\"\n   \"&& 1\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0)\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (minus:SI (const_int 0)\n                                                      (match_dup 1))\n                                            (const_int 0)))\n    (set (match_dup 0) (zero_extend:DI (plus:SI (plus:SI (const_int 0)\n                                                         (const_int 0))\n-                                               (ltu:SI (reg:CC_NOOV 100)\n+                                               (ltu:SI (reg:CC_NOOV CC_REG)\n                                                        (const_int 0)))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n@@ -653,44 +741,44 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (geu:SI (reg:CC 100) (const_int 0)))]\n+   (set (match_dup 0) (geu:SI (reg:CC CC_REG) (const_int 0)))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*neg_seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (neg:SI (geu:SI (reg:CC 100) (const_int 0))))]\n+   (set (match_dup 0) (neg:SI (geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*seqsi_zero_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (eq:DI (match_operand:SI 1 \"register_operand\" \"r\")\n                (const_int 0)))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"TARGET_ARCH64\"\n   \"#\"\n   \"&& 1\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0)\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (minus:SI (const_int 0)\n                                                      (match_dup 1))\n                                            (const_int 0)))\n    (set (match_dup 0) (zero_extend:DI (minus:SI (minus:SI (const_int 0)\n                                                           (const_int -1))\n-                                                (ltu:SI (reg:CC_NOOV 100)\n+                                                (ltu:SI (reg:CC_NOOV CC_REG)\n                                                         (const_int 0)))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n@@ -749,13 +837,13 @@\n \t(plus:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n+   (set (match_dup 0) (plus:SI (ltu:SI (reg:CC CC_REG) (const_int 0))\n \t\t\t       (match_dup 2)))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n@@ -765,14 +853,14 @@\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n-\t\t\t\t(ltu:SI (reg:CC 100) (const_int 0))))]\n+\t\t\t\t(ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -781,13 +869,13 @@\n \t(plus:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n-   (set (match_dup 0) (plus:SI (geu:SI (reg:CC 100) (const_int 0))\n+   (set (match_dup 0) (plus:SI (geu:SI (reg:CC CC_REG) (const_int 0))\n \t\t\t       (match_dup 2)))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n@@ -797,14 +885,14 @@\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n-\t\t\t\t(geu:SI (reg:CC 100) (const_int 0))))]\n+\t\t\t\t(geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -814,45 +902,45 @@\n \n (define_insn \"*sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ltu:SI (reg:CC 100) (const_int 0)))]\n+\t(ltu:SI (reg:CC CC_REG) (const_int 0)))]\n   \"\"\n   \"addx\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (ltu:SI (reg:CC 100) (const_int 0))))]\n+\t(neg:SI (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"subx\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n ;; ??? Combine should canonicalize these next two to the same pattern.\n (define_insn \"*neg_sltu_minus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (neg:SI (ltu:SI (reg:CC 100) (const_int 0)))\n+\t(minus:SI (neg:SI (ltu:SI (reg:CC CC_REG) (const_int 0)))\n \t\t  (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"subx\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sltu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n+\t(neg:SI (plus:SI (ltu:SI (reg:CC CC_REG) (const_int 0))\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(geu:SI (reg:CC 100) (const_int 0)))]\n+\t(geu:SI (reg:CC CC_REG) (const_int 0)))]\n   \"\"\n   \"subx\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (geu:SI (reg:CC 100) (const_int 0))))]\n+\t(neg:SI (geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"addx\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -863,15 +951,15 @@\n \n (define_insn \"*sltu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n+\t(plus:SI (ltu:SI (reg:CC CC_REG) (const_int 0))\n \t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"addx\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sltu_plus_x_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n+\t(plus:SI (ltu:SI (reg:CC CC_REG) (const_int 0))\n \t\t (plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n@@ -881,7 +969,7 @@\n (define_insn \"*x_minus_sltu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (ltu:SI (reg:CC 100) (const_int 0))))]\n+\t\t  (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"subx\\t%1, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -891,23 +979,23 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n \t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-\t\t  (ltu:SI (reg:CC 100) (const_int 0))))]\n+\t\t  (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"subx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*x_minus_sltu_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n-\t\t  (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n+\t\t  (plus:SI (ltu:SI (reg:CC CC_REG) (const_int 0))\n \t\t\t   (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sgeu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (geu:SI (reg:CC 100) (const_int 0))\n+\t(plus:SI (geu:SI (reg:CC CC_REG) (const_int 0))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"subx\\t%1, -1, %0\"\n@@ -916,7 +1004,7 @@\n (define_insn \"*x_minus_sgeu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (geu:SI (reg:CC 100) (const_int 0))))]\n+\t\t  (geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"addx\\t%1, -1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -992,7 +1080,7 @@\n (define_insn \"*normal_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"noov_compare_operator\"\n-\t\t\t\t      [(reg 100) (const_int 0)])\n+\t\t\t\t      [(reg CC_REG) (const_int 0)])\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1008,7 +1096,7 @@\n (define_insn \"*inverted_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"noov_compare_operator\"\n-\t\t\t\t      [(reg 100) (const_int 0)])\n+\t\t\t\t      [(reg CC_REG) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n@@ -1137,7 +1225,7 @@\n \t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")\n \t\t   (match_operand:P 2 \"call_address_operand\" \"\")\n \t\t   (match_operand:P 3 \"const_int_operand\" \"\")] UNSPEC_LOAD_PCREL_SYM))\n-   (clobber (reg:P 15))]\n+   (clobber (reg:P O7_REG))]\n   \"REGNO (operands[0]) == INTVAL (operands[3])\"\n {\n   if (flag_delayed_branch)\n@@ -2919,23 +3007,23 @@\n ;; Simplify comparisons of extended values.\n \n (define_insn \"*cmp_zero_extendqisi2\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (zero_extend:SI (match_operand:QI 0 \"register_operand\" \"r\"))\n \t\t    (const_int 0)))]\n   \"\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_qi\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (match_operand:QI 0 \"register_operand\" \"r\")\n \t\t    (const_int 0)))]\n   \"\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extendqisi2_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2945,7 +3033,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extendqisi2_andcc_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (const_int 255))\n \t\t    (const_int 0)))\n@@ -2956,23 +3044,23 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extendqidi2\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (zero_extend:DI (match_operand:QI 0 \"register_operand\" \"r\"))\n \t\t     (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_qi_sp64\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (match_operand:QI 0 \"register_operand\" \"r\")\n \t\t     (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extendqidi2_set\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t     (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2982,7 +3070,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extendqidi2_andcc_set\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (and:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t     (const_int 255))\n \t\t     (const_int 0)))\n@@ -2995,15 +3083,15 @@\n ;; Similarly, handle {SI,DI}->QI mode truncation followed by a compare.\n \n (define_insn \"*cmp_siqi_trunc\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (subreg:QI (match_operand:SI 0 \"register_operand\" \"r\") 3)\n \t\t    (const_int 0)))]\n   \"\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_siqi_trunc_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (subreg:QI (match_operand:SI 1 \"register_operand\" \"r\") 3)\n \t\t    (const_int 0)))\n    (set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -3013,15 +3101,15 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_diqi_trunc\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (subreg:QI (match_operand:DI 0 \"register_operand\" \"r\") 7)\n \t\t    (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"andcc\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_diqi_trunc_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (subreg:QI (match_operand:DI 1 \"register_operand\" \"r\") 7)\n \t\t    (const_int 0)))\n    (set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -3222,7 +3310,7 @@\n ;; because combine uses this as a canonical form.\n \n (define_insn \"*cmp_zero_extract\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 1 \"small_int_operand\" \"I\")\n@@ -3239,7 +3327,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extract_sp64\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 1 \"small_int_operand\" \"I\")\n@@ -3535,11 +3623,11 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_NOOV 100)\n+  [(parallel [(set (reg:CC_NOOV CC_REG)\n \t\t   (compare:CC_NOOV (plus:SI (match_dup 4)\n \t\t\t\t\t     (match_dup 5))\n \t\t\t\t    (const_int 0)))\n@@ -3548,7 +3636,7 @@\n    (set (match_dup 6)\n \t(plus:SI (plus:SI (match_dup 7)\n \t\t\t  (match_dup 8))\n-\t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+\t\t (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n {\n   operands[3] = gen_lowpart (SImode, operands[0]);\n   operands[4] = gen_lowpart (SImode, operands[1]);\n@@ -3574,7 +3662,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-\t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+\t\t (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n   \"\"\n   \"addx\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -3584,12 +3672,12 @@\n \t(zero_extend:DI (plus:SI (plus:SI\n                                   (match_operand:SI 1 \"register_or_zero_operand\" \"%rJ\")\n                                   (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-                                 (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n+                                 (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (plus:SI (plus:SI (match_dup 1) (match_dup 2))\n-                               (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n+                               (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))\n    (set (match_dup 4) (const_int 0))]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\n    operands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\"\n@@ -3599,7 +3687,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (plus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"%rJ\")\n                                           (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-                                 (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n+                                 (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0)))))]\n   \"TARGET_ARCH64\"\n   \"addx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -3608,17 +3696,17 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n                  (match_operand:DI 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_NOOV 100)\n+  [(parallel [(set (reg:CC_NOOV CC_REG)\n                    (compare:CC_NOOV (plus:SI (match_dup 3) (match_dup 1))\n                                     (const_int 0)))\n               (set (match_dup 5) (plus:SI (match_dup 3) (match_dup 1)))])\n    (set (match_dup 6)\n         (plus:SI (plus:SI (match_dup 4) (const_int 0))\n-                 (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+                 (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n   \"operands[3] = gen_lowpart (SImode, operands[2]);\n    operands[4] = gen_highpart (SImode, operands[2]);\n    operands[5] = gen_lowpart (SImode, operands[0]);\n@@ -3647,7 +3735,7 @@\n    (set_attr \"fptype\" \"*,*,single\")])\n \n (define_insn \"*cmp_cc_plus\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (plus:SI (match_operand:SI 0 \"arith_operand\" \"%r\")\n \t\t\t\t  (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n@@ -3656,7 +3744,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_plus\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (plus:DI (match_operand:DI 0 \"arith_operand\" \"%r\")\n \t\t\t\t   (match_operand:DI 1 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))]\n@@ -3665,7 +3753,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_plus_set\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))\n@@ -3676,7 +3764,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_plus_set\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (plus:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n \t\t\t\t   (match_operand:DI 2 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))\n@@ -3708,11 +3796,11 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_NOOV 100)\n+  [(parallel [(set (reg:CC_NOOV CC_REG)\n \t\t   (compare:CC_NOOV (minus:SI (match_dup 4)\n \t\t\t\t\t      (match_dup 5))\n \t\t\t\t    (const_int 0)))\n@@ -3721,7 +3809,7 @@\n    (set (match_dup 6)\n \t(minus:SI (minus:SI (match_dup 7)\n \t\t\t    (match_dup 8))\n-\t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+\t\t  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n {\n   operands[3] = gen_lowpart (SImode, operands[0]);\n   operands[4] = gen_lowpart (SImode, operands[1]);\n@@ -3747,7 +3835,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n \t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-\t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+\t\t  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n   \"\"\n   \"subx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -3756,7 +3844,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n                                             (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n+                                  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0)))))]\n   \"TARGET_ARCH64\"\n   \"subx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n@@ -3765,12 +3853,12 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n                                             (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n+                                  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (minus:SI (minus:SI (match_dup 1) (match_dup 2))\n-                                (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n+                                (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))\n    (set (match_dup 4) (const_int 0))]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\n    operands[4] = gen_highpart (SImode, operands[0]);\"\n@@ -3780,17 +3868,17 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n       (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                 (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_NOOV 100)\n+  [(parallel [(set (reg:CC_NOOV CC_REG)\n                    (compare:CC_NOOV (minus:SI (match_dup 3) (match_dup 2))\n                                     (const_int 0)))\n               (set (match_dup 5) (minus:SI (match_dup 3) (match_dup 2)))])\n    (set (match_dup 6)\n         (minus:SI (minus:SI (match_dup 4) (const_int 0))\n-                  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+                  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))]\n   \"operands[3] = gen_lowpart (SImode, operands[1]);\n    operands[4] = gen_highpart (SImode, operands[1]);\n    operands[5] = gen_lowpart (SImode, operands[0]);\n@@ -3819,7 +3907,7 @@\n    (set_attr \"fptype\" \"*,*,single\")])\n \n (define_insn \"*cmp_minus_cc\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 0 \"register_or_zero_operand\" \"rJ\")\n \t\t\t\t   (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n@@ -3828,7 +3916,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_minus_ccx\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (minus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:DI 1 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))]\n@@ -3837,7 +3925,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"cmp_minus_cc_set\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n \t\t\t\t   (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))\n@@ -3848,7 +3936,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_minus_ccx_set\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:DI 2 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))\n@@ -3932,7 +4020,7 @@\n    (set_attr \"length\" \"9,8\")])\n \n (define_insn \"*cmp_mul_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (mult:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n@@ -4416,7 +4504,7 @@\n   [(set_attr \"type\" \"idiv\")])\n \n (define_insn \"*cmp_sdiv_cc_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n@@ -4507,7 +4595,7 @@\n   [(set_attr \"type\" \"idiv\")])\n \n (define_insn \"*cmp_udiv_cc_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (udiv:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t     (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n@@ -4921,7 +5009,7 @@\n ;; want to set the condition code.  \n \n (define_insn \"*cmp_cc_arith_op\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (match_operator:SI 2 \"cc_arith_operator\"\n \t\t\t    [(match_operand:SI 0 \"arith_operand\" \"%r\")\n@@ -4932,7 +5020,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (match_operator:DI 2 \"cc_arith_operator\"\n \t\t\t    [(match_operand:DI 0 \"arith_operand\" \"%r\")\n@@ -4943,7 +5031,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_arith_op_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (match_operator:SI 3 \"cc_arith_operator\"\n \t\t\t    [(match_operand:SI 1 \"arith_operand\" \"%r\")\n@@ -4956,7 +5044,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_set\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (match_operator:DI 3 \"cc_arith_operator\"\n \t\t\t    [(match_operand:DI 1 \"arith_operand\" \"%r\")\n@@ -4969,7 +5057,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_xor_not\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (not:SI (xor:SI (match_operand:SI 0 \"register_or_zero_operand\" \"%rJ\")\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))\n@@ -4979,7 +5067,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_xor_not\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (not:DI (xor:DI (match_operand:DI 0 \"register_or_zero_operand\" \"%rJ\")\n \t\t\t (match_operand:DI 1 \"arith_operand\" \"rI\")))\n@@ -4989,7 +5077,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_xor_not_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (not:SI (xor:SI (match_operand:SI 1 \"register_or_zero_operand\" \"%rJ\")\n \t\t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n@@ -5001,7 +5089,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_xor_not_set\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (not:DI (xor:DI (match_operand:DI 1 \"register_or_zero_operand\" \"%rJ\")\n \t\t\t (match_operand:DI 2 \"arith_operand\" \"rI\")))\n@@ -5013,7 +5101,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_arith_op_not\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (match_operator:SI 2 \"cc_arith_not_operator\"\n \t\t\t    [(not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n@@ -5024,7 +5112,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_not\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (match_operator:DI 2 \"cc_arith_not_operator\"\n \t\t\t    [(not:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n@@ -5035,7 +5123,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_arith_op_not_set\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC\n \t (match_operator:SI 3 \"cc_arith_not_operator\"\n \t\t\t    [(not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n@@ -5049,7 +5137,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_not_set\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX\n \t (match_operator:DI 3 \"cc_arith_not_operator\"\n \t\t\t    [(not:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n@@ -5087,16 +5175,16 @@\n (define_insn_and_split \"*negdi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 100))]\n+   (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_NOOV 100)\n+  [(parallel [(set (reg:CC_NOOV CC_REG)\n                    (compare:CC_NOOV (minus:SI (const_int 0) (match_dup 5))\n                                     (const_int 0)))\n               (set (match_dup 4) (minus:SI (const_int 0) (match_dup 5)))])\n    (set (match_dup 2) (minus:SI (minus:SI (const_int 0) (match_dup 3))\n-                                (ltu:SI (reg:CC 100) (const_int 0))))]\n+                                (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"operands[2] = gen_highpart (SImode, operands[0]);\n    operands[3] = gen_highpart (SImode, operands[1]);\n    operands[4] = gen_lowpart (SImode, operands[0]);\n@@ -5116,23 +5204,23 @@\n   \"sub\\t%%g0, %1, %0\")\n \n (define_insn \"*cmp_cc_neg\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n   \"\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_neg\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (neg:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_set_neg\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -5142,7 +5230,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_set_neg\"\n-  [(set (reg:CCX_NOOV 100)\n+  [(set (reg:CCX_NOOV CC_REG)\n \t(compare:CCX_NOOV (neg:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n \t\t\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5203,23 +5291,23 @@\n    (set_attr \"fptype\" \"*,single\")])\n \n (define_insn \"*cmp_cc_not\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))]\n   \"\"\n   \"xnorcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_not\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (not:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n \t\t     (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"xnorcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_set_not\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(compare:CC (not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -5229,7 +5317,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_set_not\"\n-  [(set (reg:CCX 100)\n+  [(set (reg:CCX CC_REG)\n \t(compare:CCX (not:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5241,7 +5329,7 @@\n (define_insn \"*cmp_cc_set\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"register_operand\" \"r\"))\n-   (set (reg:CC 100)\n+   (set (reg:CC CC_REG)\n \t(compare:CC (match_dup 1)\n \t\t    (const_int 0)))]\n   \"\"\n@@ -5251,7 +5339,7 @@\n (define_insn \"*cmp_ccx_set64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"register_operand\" \"r\"))\n-   (set (reg:CCX 100)\n+   (set (reg:CCX CC_REG)\n \t(compare:CCX (match_dup 1)\n \t\t     (const_int 0)))]\n   \"TARGET_ARCH64\"\n@@ -5694,7 +5782,7 @@\n ;   (set_attr \"length\" \"4\")])\n \n (define_insn \"*cmp_cc_ashift_1\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (ashift:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1))\n \t\t\t (const_int 0)))]\n@@ -5703,7 +5791,7 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_set_ashift_1\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n \t(compare:CC_NOOV (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1))\n \t\t\t (const_int 0)))\n@@ -6040,7 +6128,7 @@\n (define_insn \"*call_address_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64\"\n   \"call\\t%a0, %1%#\"\n@@ -6049,7 +6137,7 @@\n (define_insn \"*call_symbolic_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64\"\n   \"call\\t%a0, %1%#\"\n@@ -6058,7 +6146,7 @@\n (define_insn \"*call_address_sp64\"\n   [(call (mem:DI (match_operand:DI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"TARGET_ARCH64\"\n   \"call\\t%a0, %1%#\"\n@@ -6067,7 +6155,7 @@\n (define_insn \"*call_symbolic_sp64\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"TARGET_ARCH64\"\n   \"call\\t%a0, %1%#\"\n@@ -6079,7 +6167,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n {\n@@ -6095,7 +6183,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n {\n@@ -6111,7 +6199,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n@@ -6124,7 +6212,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n@@ -6162,7 +6250,7 @@\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n   \"! TARGET_ARCH64\"\n   \"call\\t%a1, %2%#\"\n@@ -6172,7 +6260,7 @@\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n   \"! TARGET_ARCH64\"\n   \"call\\t%a1, %2%#\"\n@@ -6182,7 +6270,7 @@\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n   \"TARGET_ARCH64\"\n   \"call\\t%a1, %2%#\"\n@@ -6192,7 +6280,7 @@\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n   \"TARGET_ARCH64\"\n   \"call\\t%a1, %2%#\"\n@@ -6771,22 +6859,22 @@\n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"register_operand\" \"\"))\n-   (set (reg:CC 100)\n+   (set (reg:CC CC_REG)\n \t(compare:CC (match_operand:SI 2 \"register_operand\" \"\")\n \t\t    (const_int 0)))]\n   \"(rtx_equal_p (operands[2], operands[0])\n     || rtx_equal_p (operands[2], operands[1]))\n     && ! SPARC_FP_REG_P (REGNO (operands[0]))\n     && ! SPARC_FP_REG_P (REGNO (operands[1]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (set (reg:CC 100)\n+\t      (set (reg:CC CC_REG)\n \t\t   (compare:CC (match_dup 1) (const_int 0)))])]\n   \"\")\n \n (define_peephole2\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(match_operand:DI 1 \"register_operand\" \"\"))\n-   (set (reg:CCX 100)\n+   (set (reg:CCX CC_REG)\n \t(compare:CCX (match_operand:DI 2 \"register_operand\" \"\")\n \t\t    (const_int 0)))]\n   \"TARGET_ARCH64\n@@ -6795,7 +6883,7 @@\n    && ! SPARC_FP_REG_P (REGNO (operands[0]))\n    && ! SPARC_FP_REG_P (REGNO (operands[1]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (set (reg:CCX 100)\n+\t      (set (reg:CCX CC_REG)\n \t\t   (compare:CCX (match_dup 1) (const_int 0)))])]\n   \"\")\n \n@@ -6902,7 +6990,7 @@\n \n \n (define_insn \"\"\n-  [(trap_if (match_operator 0 \"noov_compare_operator\" [(reg:CC 100) (const_int 0)])\n+  [(trap_if (match_operator 0 \"noov_compare_operator\" [(reg:CC CC_REG) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"\"\n {\n@@ -6914,7 +7002,7 @@\n   [(set_attr \"type\" \"trap\")])\n \n (define_insn \"\"\n-  [(trap_if (match_operator 0 \"noov_compare_operator\" [(reg:CCX 100) (const_int 0)])\n+  [(trap_if (match_operator 0 \"noov_compare_operator\" [(reg:CCX CC_REG) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"TARGET_V9\"\n   \"t%C0\\t%%xcc, %1\"\n@@ -6962,7 +7050,7 @@\n \t\t\t\t  (match_operand 2 \"tgd_symbolic_operand\" \"\")]\n \t\t\t\t UNSPEC_TLSGD))\n \t      (match_operand 3 \"\" \"\")))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"call\\t%a1, %%tgd_call(%a2)%#\"\n   [(set_attr \"type\" \"call\")])\n@@ -6973,7 +7061,7 @@\n \t\t\t\t  (match_operand 2 \"tgd_symbolic_operand\" \"\")]\n \t\t\t\t UNSPEC_TLSGD))\n \t      (match_operand 3 \"\" \"\")))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"call\\t%a1, %%tgd_call(%a2)%#\"\n   [(set_attr \"type\" \"call\")])\n@@ -7012,7 +7100,7 @@\n \t(call (mem:SI (unspec:SI [(match_operand:SI 1 \"symbolic_operand\" \"s\")]\n \t\t\t\t UNSPEC_TLSLDM))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI 15))]\n+   (clobber (reg:SI O7_REG))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"call\\t%a1, %%tldm_call(%&)%#\"\n   [(set_attr \"type\" \"call\")])\n@@ -7022,7 +7110,7 @@\n \t(call (mem:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"s\")]\n \t\t\t\t UNSPEC_TLSLDM))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI 15))]\n+   (clobber (reg:DI O7_REG))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"call\\t%a1, %%tldm_call(%&)%#\"\n   [(set_attr \"type\" \"call\")])\n@@ -7553,7 +7641,7 @@\n })\n \n (define_insn \"stack_protect_testsi\"\n-  [(set (reg:CC 100)\n+  [(set (reg:CC CC_REG)\n \t(unspec:CC [(match_operand:SI 0 \"memory_operand\" \"m\")\n \t\t    (match_operand:SI 1 \"memory_operand\" \"m\")]\n \t\t   UNSPEC_SP_TEST))\n@@ -7826,7 +7914,7 @@\n ;; Edge instructions produce condition codes equivalent to a 'subcc'\n ;; with the same operands.\n (define_insn \"edge8<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n@@ -7837,7 +7925,7 @@\n   [(set_attr \"type\" \"edge\")])\n \n (define_insn \"edge8l<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n@@ -7848,7 +7936,7 @@\n   [(set_attr \"type\" \"edge\")])\n \n (define_insn \"edge16<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n@@ -7859,7 +7947,7 @@\n   [(set_attr \"type\" \"edge\")])\n \n (define_insn \"edge16l<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n@@ -7870,7 +7958,7 @@\n   [(set_attr \"type\" \"edge\")])\n \n (define_insn \"edge32<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n@@ -7881,7 +7969,7 @@\n   [(set_attr \"type\" \"edge\")])\n \n (define_insn \"edge32l<P:mode>_vis\"\n-  [(set (reg:CC_NOOV 100)\n+  [(set (reg:CC_NOOV CC_REG)\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))"}]}