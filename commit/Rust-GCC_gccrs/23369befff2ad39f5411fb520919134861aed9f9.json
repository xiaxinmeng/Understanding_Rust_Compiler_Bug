{"sha": "23369befff2ad39f5411fb520919134861aed9f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzNjliZWZmZjJhZDM5ZjU0MTFmYjUyMDkxOTEzNDg2MWFlZDlmOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-02-28T02:21:40Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-02-28T02:21:40Z"}, "message": "re PR target/19065 (Make CRIS libstdc++ asms autoincrement-safe)\n\n\tPR target/19065.\n\t* config/cris/cris.h (EXTRA_CONSTRAINT_Q): Accept only (mem (reg)),\n\tnot including (reg). Do not check for reg being CRIS_PC_REGNUM.\n\t(EXTRA_MEMORY_CONSTRAINT): Define as 'Q'.\n\t* config/cris/cris.md: Tweak comments referring to Q.\n \t(\"cmpsi\", \"cmphi\", \"cmpqi\", \"*movsi_internal\", \"movhi\")\n\t(\"movstricthi\", \"movqi\", \"movstrictqi\", \"movsf\", \"addsi3\")\n\t(\"addhi3\", \"addqi3\", \"subsi3\", \"subhi3\", \"subqi3\")\n\t(\"*expanded_andsi\", \"*expanded_andhi\", \"*andhi_lowpart\", \"andqi3\")\n\t(\"*andqi_lowpart\", \"iorsi3\", \"iorhi3\", \"iorqi3\", \"uminsi3\"):\n\tInsert spaces in constraints to align alternatives vertically for\n\treadability.\n\t(\"cmphi\"): Ditto.  Add separate alternative for operand 0 \"Q>\",\n\toperand 1: \"M\".\n\nFrom-SVN: r95647", "tree": {"sha": "db961eaca82ffa6b1a366f02cb0867d16de07fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db961eaca82ffa6b1a366f02cb0867d16de07fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23369befff2ad39f5411fb520919134861aed9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23369befff2ad39f5411fb520919134861aed9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23369befff2ad39f5411fb520919134861aed9f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23369befff2ad39f5411fb520919134861aed9f9/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5902435e9af672b3c794aaae943c8c938e5babdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5902435e9af672b3c794aaae943c8c938e5babdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5902435e9af672b3c794aaae943c8c938e5babdf"}], "stats": {"total": 168, "additions": 93, "deletions": 75}, "files": [{"sha": "aacdf51ff1241444b638346f4cf11eb2abecd2ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23369befff2ad39f5411fb520919134861aed9f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23369befff2ad39f5411fb520919134861aed9f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23369befff2ad39f5411fb520919134861aed9f9", "patch": "@@ -1,3 +1,20 @@\n+2005-02-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/19065.\n+\t* config/cris/cris.h (EXTRA_CONSTRAINT_Q): Accept only (mem (reg)),\n+\tnot including (reg). Do not check for reg being CRIS_PC_REGNUM.\n+\t(EXTRA_MEMORY_CONSTRAINT): Define as 'Q'.\n+\t* config/cris/cris.md: Tweak comments referring to Q.\n+ \t(\"cmpsi\", \"cmphi\", \"cmpqi\", \"*movsi_internal\", \"movhi\")\n+\t(\"movstricthi\", \"movqi\", \"movstrictqi\", \"movsf\", \"addsi3\")\n+\t(\"addhi3\", \"addqi3\", \"subsi3\", \"subhi3\", \"subqi3\")\n+\t(\"*expanded_andsi\", \"*expanded_andhi\", \"*andhi_lowpart\", \"andqi3\")\n+\t(\"*andqi_lowpart\", \"iorsi3\", \"iorhi3\", \"iorqi3\", \"uminsi3\"):\n+\tInsert spaces in constraints to align alternatives vertically for\n+\treadability.\n+\t(\"cmphi\"): Ditto.  Add separate alternative for operand 0 \"Q>\",\n+\toperand 1: \"M\".\n+\n 2005-02-27  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR rtl-optimization/17728"}, {"sha": "faad7364a348358dbe42404820c3d59965d6cd49", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23369befff2ad39f5411fb520919134861aed9f9/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23369befff2ad39f5411fb520919134861aed9f9/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=23369befff2ad39f5411fb520919134861aed9f9", "patch": "@@ -772,14 +772,14 @@ enum reg_class {NO_REGS, ALL_REGS, LIM_REG_CLASSES};\n   (C) == 'U' ? EXTRA_CONSTRAINT_U (X) :\t\t\\\n   0)\n \n+#define EXTRA_MEMORY_CONSTRAINT(X, STR) ((X) == 'Q')\n+\n #define EXTRA_CONSTRAINT_Q(X)\t\t\t\t\\\n  (\t\t\t\t\t\t\t\\\n-  /* Slottable addressing modes:\t\t\t\\\n-     A register?  FIXME: Unnecessary.  */\t\t\\\n-  (BASE_P (X) && REGNO (X) != CRIS_PC_REGNUM)\t\t\\\n-  /* Indirect register: [reg]?  */\t\t\t\\\n-  || (GET_CODE (X) == MEM && BASE_P (XEXP (X, 0))\t\\\n-      && REGNO (XEXP (X, 0)) != CRIS_PC_REGNUM)\t\t\\\n+  /* Just an indirect register (happens to also be\t\\\n+     \"all\" slottable memory addressing modes not\t\\\n+     covered by other constraints, i.e. '>').  */\t\\\n+  GET_CODE (X) == MEM && BASE_P (XEXP (X, 0))\t\t\\\n  )\n \n #define EXTRA_CONSTRAINT_R(X)\t\t\t\t\t\\"}, {"sha": "69f31ea1627e06d2a1a44d0b6f7c93958176c257", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 70, "deletions": 69, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23369befff2ad39f5411fb520919134861aed9f9/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23369befff2ad39f5411fb520919134861aed9f9/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=23369befff2ad39f5411fb520919134861aed9f9", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for CRIS cpu cores.\n-;; Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+;; Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n ;; Free Software Foundation, Inc.\n ;; Contributed by Axis Communications.\n \n@@ -91,9 +91,9 @@\n ;; mode, but that would need more attributes and hairier, more error\n ;; prone code.\n ;;\n-;;  There is an extra constraint, 'Q', which recognizes indirect reg,\n-;; except when the reg is pc.  The constraints 'Q' and '>' together match\n-;; all possible memory operands that are slottable.\n+;;  There is an extra memory constraint, 'Q', which recognizes an indirect\n+;; register.  The constraints 'Q' and '>' together match all possible\n+;; memory operands that are slottable.\n ;;  For other operands, you need to check if it has a valid \"slottable\"\n ;; quick-immediate operand, where the particular signedness-variation\n ;; may match the constraints 'I' or 'J'.), and include it in the\n@@ -268,8 +268,8 @@\n (define_insn \"cmpsi\"\n   [(set (cc0)\n \t(compare\n-\t (match_operand:SI 0 \"nonimmediate_operand\" \"r,r,r,r,Q>,Q>,r,r,m,m\")\n-\t (match_operand:SI 1 \"general_operand\" \"I,r,Q>,M,M,r,P,g,M,r\")))]\n+\t (match_operand:SI 0 \"nonimmediate_operand\" \"r,r,r, r,Q>,Q>,r,r,m,m\")\n+\t (match_operand:SI 1 \"general_operand\"\t    \"I,r,Q>,M,M, r, P,g,M,r\")))]\n   \"\"\n   \"@\n    cmpq %1,%0\n@@ -286,24 +286,25 @@\n \n (define_insn \"cmphi\"\n   [(set (cc0)\n-\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,r,Q>,Q>,r,m,m\")\n-\t\t (match_operand:HI 1 \"general_operand\" \"r,Q>,M,r,g,M,r\")))]\n+\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,r, r,Q>,Q>,r,m,m\")\n+\t\t (match_operand:HI 1 \"general_operand\"\t    \"r,Q>,M,M, r, g,M,r\")))]\n   \"\"\n   \"@\n    cmp.w %1,%0\n    cmp.w %1,%0\n    test.w %0\n+   test.w %0\n    cmp.w %0,%1\n    cmp.w %1,%0\n    test.w %0\n    cmp.w %0,%1\"\n-  [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no,no\")])\n+  [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,no,no,no\")])\n \n (define_insn \"cmpqi\"\n   [(set (cc0)\n \t(compare\n-\t (match_operand:QI 0 \"nonimmediate_operand\" \"r,r,r,Q>,Q>,r,m,m\")\n-\t (match_operand:QI 1 \"general_operand\" \"r,Q>,M,M,r,g,M,r\")))]\n+\t (match_operand:QI 0 \"nonimmediate_operand\" \"r,r, r,Q>,Q>,r,m,m\")\n+\t (match_operand:QI 1 \"general_operand\"\t    \"r,Q>,M,M, r, g,M,r\")))]\n   \"\"\n   \"@\n    cmp.b %1,%0\n@@ -993,11 +994,11 @@\n \n (define_insn \"*movsi_internal\"\n   [(set\n-    (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,Q>,r,Q>,g,r,r,r,g\")\n+    (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r, r,Q>,r,Q>,g,r,r,r,g\")\n     (match_operand:SI 1\n     ;; FIXME: We want to put S last, but apparently g matches S.\n     ;; It's a bug: an S is not a general_operand and shouldn't match g.\n-     \"cris_general_operand_or_gotless_symbol\" \"r,Q>,M,M,I,r,M,n,!S,g,r\"))]\n+     \"cris_general_operand_or_gotless_symbol\"   \"r,Q>,M,M, I,r, M,n,!S,g,r\"))]\n   \"\"\n   \"*\n {\n@@ -1206,8 +1207,8 @@\n \n (define_insn \"movhi\"\n   [(set\n-    (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,Q>,r,Q>,r,r,r,g,g,r\")\n-    (match_operand:HI 1 \"general_operand\" \"r,Q>,M,M,I,r,L,O,n,M,r,g\"))]\n+    (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r, r,Q>,r,Q>,r,r,r,g,g,r\")\n+    (match_operand:HI 1 \"general_operand\"\t\"r,Q>,M,M, I,r, L,O,n,M,r,g\"))]\n   \"\"\n   \"*\n {\n@@ -1249,8 +1250,8 @@\n (define_insn \"movstricthi\"\n   [(set\n     (strict_low_part\n-     (match_operand:HI 0 \"nonimmediate_operand\" \"+r,r,r,Q>,Q>,g,r,g\"))\n-    (match_operand:HI 1 \"general_operand\" \"r,Q>,M,M,r,M,g,r\"))]\n+     (match_operand:HI 0 \"nonimmediate_operand\" \"+r,r, r,Q>,Q>,g,r,g\"))\n+    (match_operand:HI 1 \"general_operand\"\t \"r,Q>,M,M, r, M,g,r\"))]\n   \"\"\n   \"@\n    move.w %1,%0\n@@ -1264,8 +1265,8 @@\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,no,no,no\")])\n \f\n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,Q>,r,r,Q>,r,g,g,r,r\")\n-\t(match_operand:QI 1 \"general_operand\" \"r,r,Q>,M,M,I,M,r,O,g\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,Q>,r, r,Q>,r,g,g,r,r\")\n+\t(match_operand:QI 1 \"general_operand\"\t    \"r,r, Q>,M,M, I,M,r,O,g\"))]\n   \"\"\n   \"@\n    move.b %1,%0\n@@ -1286,8 +1287,8 @@\n \n (define_insn \"movstrictqi\"\n   [(set (strict_low_part\n-\t (match_operand:QI 0 \"nonimmediate_operand\" \"+r,Q>,r,r,Q>,g,g,r\"))\n-\t(match_operand:QI 1 \"general_operand\" \"r,r,Q>,M,M,M,r,g\"))]\n+\t (match_operand:QI 0 \"nonimmediate_operand\" \"+r,Q>,r, r,Q>,g,g,r\"))\n+\t(match_operand:QI 1 \"general_operand\"\t     \"r,r, Q>,M,M, M,r,g\"))]\n   \"\"\n   \"@\n    move.b %1,%0\n@@ -1306,8 +1307,8 @@\n ;; It will use clear, so we know ALL types of immediate 0 never change cc.\n \n (define_insn \"movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,Q>,r,r,Q>,g,g,r\")\n-\t(match_operand:SF 1 \"general_operand\" \"r,r,Q>,G,G,G,r,g\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,Q>,r, r,Q>,g,g,r\")\n+\t(match_operand:SF 1 \"general_operand\"\t    \"r,r, Q>,G,G, G,r,g\"))]\n   \"\"\n   \"@\n    move.d %1,%0\n@@ -1720,10 +1721,10 @@\n    add.d %M2,%M1,%M0\\;ax\\;add.d %H2,%H1,%H0\")\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r,r,r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\"  \"=r,r, r,r,r,r,r,  r\")\n \t(plus:SI\n-\t (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r\")\n-\t (match_operand:SI 2 \"general_operand\" \"r,Q>,J,N,n,g,!To,0\")))]\n+\t (match_operand:SI 1 \"register_operand\" \"%0,0, 0,0,0,0,r,  r\")\n+\t (match_operand:SI 2 \"general_operand\"   \"r,Q>,J,N,n,g,!To,0\")))]\n \n ;; The last constraint is due to that after reload, the '%' is not\n ;; honored, and canonicalization doesn't care about keeping the same\n@@ -1773,9 +1774,9 @@\n  [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no,no,yes\")])\n \f\n (define_insn \"addhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,r\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"r,Q>,J,N,g,!To\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"\t\t\"=r,r, r,r,r,r\")\n+\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0, 0,0,0,r\")\n+\t\t (match_operand:HI 2 \"general_operand\"   \"r,Q>,J,N,g,!To\")))]\n   \"\"\n   \"@\n    add.w %2,%0\n@@ -1788,9 +1789,9 @@\n    (set_attr \"cc\" \"normal,normal,clobber,clobber,normal,normal\")])\n \n (define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n-\t(plus:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0,0,0,r\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"r,Q>,J,N,O,g,!To\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"\t\t\"=r,r, r,r,r,r,r\")\n+\t(plus:QI (match_operand:QI 1 \"register_operand\" \"%0,0, 0,0,0,0,r\")\n+\t\t (match_operand:QI 2 \"general_operand\"\t \"r,Q>,J,N,O,g,!To\")))]\n   \"\"\n   \"@\n    add.b %2,%0\n@@ -1824,10 +1825,10 @@\n    sub.d %M2,%M1,%M0\\;ax\\;sub.d %H2,%H1,%H0\")\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r,r,r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r, r,r,r,r,r,r\")\n \t(minus:SI\n-\t (match_operand:SI 1 \"register_operand\" \"0,0,0,0,0,0,0,r\")\n-\t (match_operand:SI 2 \"general_operand\" \"r,Q>,J,N,P,n,g,!To\")))]\n+\t (match_operand:SI 1 \"register_operand\" \"0,0, 0,0,0,0,0,r\")\n+\t (match_operand:SI 2 \"general_operand\"\t\"r,Q>,J,N,P,n,g,!To\")))]\n   \"\"\n \n ;; This does not do the optimal: \"addu.w 65535,r0\" when %2 is negative.\n@@ -1845,9 +1846,9 @@\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no,no,no\")])\n \f\n (define_insn \"subhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,0,0,r\")\n-\t\t  (match_operand:HI 2 \"general_operand\" \"r,Q>,J,N,g,!To\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"\t\t\"=r,r, r,r,r,r\")\n+\t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0, 0,0,0,r\")\n+\t\t  (match_operand:HI 2 \"general_operand\"  \"r,Q>,J,N,g,!To\")))]\n   \"\"\n   \"@\n    sub.w %2,%0\n@@ -1860,9 +1861,9 @@\n    (set_attr \"cc\" \"normal,normal,clobber,clobber,normal,normal\")])\n \n (define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(minus:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0,0,r\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"r,Q>,J,N,g,!To\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"\t\t\"=r,r, r,r,r,r\")\n+\t(minus:QI (match_operand:QI 1 \"register_operand\" \"0,0, 0,0,0,r\")\n+\t\t  (match_operand:QI 2 \"general_operand\"  \"r,Q>,J,N,g,!To\")))]\n   \"\"\n   \"@\n    sub.b %2,%0\n@@ -2734,9 +2735,9 @@\n ;; improved reload pass.\n \n (define_insn \"*expanded_andsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,r\")\n-\t\t(match_operand:SI 2 \"general_operand\" \"I,r,Q>,g,!To\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"\t       \"=r,r,r, r,r\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0, 0,r\")\n+\t\t(match_operand:SI 2 \"general_operand\"   \"I,r,Q>,g,!To\")))]\n   \"\"\n   \"@\n    andq %2,%0\n@@ -2810,9 +2811,9 @@\n ;; Catch-all andhi3 pattern.\n \n (define_insn \"*expanded_andhi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0,r\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"I,r,Q>,L,O,g,!To\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"\t       \"=r,r,r, r,r,r,r\")\n+\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0, 0,0,0,r\")\n+\t\t(match_operand:HI 2 \"general_operand\"   \"I,r,Q>,L,O,g,!To\")))]\n \n ;; Sidenote: the tightening from \"general_operand\" to\n ;; \"register_operand\" for operand 1 actually increased the register\n@@ -2835,9 +2836,9 @@\n \n (define_insn \"*andhi_lowpart\"\n   [(set (strict_low_part\n-\t (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r,r\"))\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,r\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"r,Q>,L,O,g,!To\")))]\n+\t (match_operand:HI 0 \"register_operand\"\t       \"=r,r, r,r,r,r\"))\n+\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0, 0,0,0,r\")\n+\t\t(match_operand:HI 2 \"general_operand\"   \"r,Q>,L,O,g,!To\")))]\n   \"\"\n   \"@\n    and.w %2,%0\n@@ -2850,9 +2851,9 @@\n    (set_attr \"cc\" \"normal,normal,normal,clobber,normal,normal\")])\n \f\n (define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0,0,r\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"I,r,Q>,O,g,!To\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n+\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n+\t\t(match_operand:QI 2 \"general_operand\"   \"I,r,Q>,O,g,!To\")))]\n   \"\"\n   \"@\n    andq %2,%0\n@@ -2866,9 +2867,9 @@\n \n (define_insn \"*andqi_lowpart\"\n   [(set (strict_low_part\n-\t (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r\"))\n-\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0,r\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"r,Q>,O,g,!To\")))]\n+\t (match_operand:QI 0 \"register_operand\"\t       \"=r,r, r,r,r\"))\n+\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0, 0,0,r\")\n+\t\t(match_operand:QI 2 \"general_operand\"   \"r,Q>,O,g,!To\")))]\n   \"\"\n   \"@\n    and.b %2,%0\n@@ -2887,9 +2888,9 @@\n ;; with andsi3.\n \n (define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,r\")\n-\t\t(match_operand:SI 2 \"general_operand\" \"I,r,Q>,n,g,!To\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n+\t\t(match_operand:SI 2 \"general_operand\"  \"I, r,Q>,n,g,!To\")))]\n   \"\"\n   \"@\n    orq %2,%0\n@@ -2902,9 +2903,9 @@\n    (set_attr \"cc\" \"normal,normal,normal,clobber,normal,normal\")])\n \n (define_insn \"iorhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n-\t(ior:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0,r\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"I,r,Q>,L,O,g,!To\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"\t       \"=r,r,r, r,r,r,r\")\n+\t(ior:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0, 0,0,0,r\")\n+\t\t(match_operand:HI 2 \"general_operand\"   \"I,r,Q>,L,O,g,!To\")))]\n   \"\"\n   \"@\n    orq %2,%0\n@@ -2918,9 +2919,9 @@\n    (set_attr \"cc\" \"clobber,normal,normal,normal,clobber,normal,normal\")])\n \n (define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0,0,r\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"I,r,Q>,O,g,!To\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n+\t(ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n+\t\t(match_operand:QI 2 \"general_operand\"   \"I,r,Q>,O,g,!To\")))]\n   \"\"\n   \"@\n    orq %2,%0\n@@ -3340,9 +3341,9 @@\n ;; normal code too.\n \n (define_insn \"uminsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(umin:SI  (match_operand:SI 1 \"register_operand\" \"%0,0,0,r\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"r,Q>,g,!STo\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"\t\t \"=r,r, r,r\")\n+\t(umin:SI  (match_operand:SI 1 \"register_operand\" \"%0,0, 0,r\")\n+\t\t  (match_operand:SI 2 \"general_operand\"   \"r,Q>,g,!STo\")))]\n   \"\"\n   \"*\n {\n@@ -3858,7 +3859,7 @@\n }\")\n \n ;; Accept *anything* as operand 1.  Accept operands for operand 0 in\n-;; order of preference (Q includes r, but r is shorter, faster)\n+;; order of preference.\n \n (define_insn \"*expanded_call\"\n   [(call (mem:QI (match_operand:SI"}]}