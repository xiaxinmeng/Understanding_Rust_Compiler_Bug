{"sha": "877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc3YzFjNTU1ZmRjYzQ2NDY3YzlmZTllOWRjY2I4YWFmOGVmZTE3OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-12-01T00:29:08Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-12-01T00:29:08Z"}, "message": "i386-cpuid.h (bit_SSE3): New.\n\n2006-11-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.dg/i386-cpuid.h (bit_SSE3): New.\n\t(i386_get_cpuid): New function.\n\t(i386_cpuid_ecx): Likewise.\n\t(i386_cpuid_edx): Likewise.\n\t(i386_cpuid): Updated to call i386_cpuid_edx.\n\n\t* gcc.target/i386/sse3-addsubpd.c: New file.\n\t* gcc.target/i386/sse3-addsubps.c: Likewise.\n\t* gcc.target/i386/sse3-haddpd.c: Likewise.\n\t* gcc.target/i386/sse3-haddps.c: Likewise.\n\t* gcc.target/i386/sse3-hsubpd.c: Likewise.\n\t* gcc.target/i386/sse3-hsubps.c: Likewise.\n\t* gcc.target/i386/sse3-lddqu.c: Likewise.\n\t* gcc.target/i386/sse3-movddup.c: Likewise.\n\t* gcc.target/i386/sse3-movshdup.c: Likewise.\n\t* gcc.target/i386/sse3-movsldup.c: Likewise.\n\nFrom-SVN: r119390", "tree": {"sha": "aa63eca0b3a24896e654060e76e5d7e54be65671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa63eca0b3a24896e654060e76e5d7e54be65671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c928f426c12ff5555926e4addbe4d5e88debc505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c928f426c12ff5555926e4addbe4d5e88debc505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c928f426c12ff5555926e4addbe4d5e88debc505"}], "stats": {"total": 1151, "additions": 1140, "deletions": 11}, "files": [{"sha": "f16250dfb446e361d50e76d272aa5e308b50b8c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -1,3 +1,22 @@\n+2006-11-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/i386-cpuid.h (bit_SSE3): New.\n+\t(i386_get_cpuid): New function.\n+\t(i386_cpuid_ecx): Likewise.\n+\t(i386_cpuid_edx): Likewise.\n+\t(i386_cpuid): Updated to call i386_cpuid_edx.\n+\n+\t* gcc.target/i386/sse3-addsubpd.c: New file.\n+\t* gcc.target/i386/sse3-addsubps.c: Likewise.\n+\t* gcc.target/i386/sse3-haddpd.c: Likewise.\n+\t* gcc.target/i386/sse3-haddps.c: Likewise.\n+\t* gcc.target/i386/sse3-hsubpd.c: Likewise.\n+\t* gcc.target/i386/sse3-hsubps.c: Likewise.\n+\t* gcc.target/i386/sse3-lddqu.c: Likewise.\n+\t* gcc.target/i386/sse3-movddup.c: Likewise.\n+\t* gcc.target/i386/sse3-movshdup.c: Likewise.\n+\t* gcc.target/i386/sse3-movsldup.c: Likewise.\n+\n 2006-12-01  Dirk Mueller  <dmueller@suse.de>\n \n \t* g++.dg/warn/Wreturn-type-4.C: New testcase."}, {"sha": "952a7c0eaee4e51c0c01b71ef1b17aa0c4e08000", "filename": "gcc/testsuite/gcc.dg/i386-cpuid.h", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -2,6 +2,10 @@\n    Used by 20020523-2.c and i386-sse-6.c, and possibly others.  */\n /* Plagarized from 20020523-2.c.  */\n \n+/* %ecx */\n+#define bit_SSE3 (1 << 0)\n+\n+/* %edx */\n #define bit_CMOV (1 << 15)\n #define bit_MMX (1 << 23)\n #define bit_SSE (1 << 25)\n@@ -11,14 +15,14 @@\n #define NOINLINE __attribute__ ((noinline))\n #endif\n \n-unsigned int i386_cpuid (void) NOINLINE;\n-\n-unsigned int NOINLINE\n-i386_cpuid (void)\n+static inline unsigned int\n+i386_get_cpuid (unsigned int *ecx, unsigned int *edx)\n {\n-  int fl1, fl2;\n+  int fl1;\n \n #ifndef __x86_64__\n+  int fl2;\n+\n   /* See if we can use cpuid.  On AMD64 we always can.  */\n   __asm__ (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n \t   \"pushl %0; popfl; pushfl; popl %0; popfl\"\n@@ -42,15 +46,44 @@ i386_cpuid (void)\n   if (fl1 == 0)\n     return (0);\n \n-  /* Invoke CPUID(1), return %edx; caller can examine bits to\n+  /* Invoke CPUID(1), return %ecx and %edx; caller can examine bits to\n      determine what's supported.  */\n #ifdef __x86_64__\n-  __asm__ (\"pushq %%rcx; pushq %%rbx; cpuid; popq %%rbx; popq %%rcx\"\n-\t   : \"=d\" (fl2), \"=a\" (fl1) : \"1\" (1) : \"cc\");\n+  __asm__ (\"pushq %%rbx; cpuid; popq %%rbx\"\n+\t   : \"=c\" (*ecx), \"=d\" (*edx), \"=a\" (fl1) : \"2\" (1) : \"cc\");\n #else\n-  __asm__ (\"pushl %%ecx; pushl %%ebx; cpuid; popl %%ebx; popl %%ecx\"\n-\t   : \"=d\" (fl2), \"=a\" (fl1) : \"1\" (1) : \"cc\");\n+  __asm__ (\"pushl %%ebx; cpuid; popl %%ebx\"\n+\t   : \"=c\" (*ecx), \"=d\" (*edx), \"=a\" (fl1) : \"2\" (1) : \"cc\");\n #endif\n \n-  return fl2;\n+  return 1;\n+}\n+\n+unsigned int i386_cpuid_ecx (void) NOINLINE;\n+unsigned int i386_cpuid_edx (void) NOINLINE;\n+\n+unsigned int NOINLINE\n+i386_cpuid_ecx (void)\n+{\n+  unsigned int ecx, edx;\n+  if (i386_get_cpuid (&ecx, &edx))\n+    return ecx;\n+  else\n+    return 0;\n+}\n+\n+unsigned int NOINLINE\n+i386_cpuid_edx (void)\n+{\n+  unsigned int ecx, edx;\n+  if (i386_get_cpuid (&ecx, &edx))\n+    return edx;\n+  else\n+    return 0;\n+}\n+\n+static inline unsigned int\n+i386_cpuid (void)\n+{\n+  return i386_cpuid_edx ();\n }"}, {"sha": "9906239fdabc9763b92d14afedb476493fe76202", "filename": "gcc/testsuite/gcc.target/i386/sse3-addsubpd.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubpd.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_addsubpd (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_loadu_pd (i1);\n+  __m128d t2 = _mm_loadu_pd (i2);\n+\n+  t1 = _mm_addsub_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static void\n+sse3_test_addsubpd_subsume (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_load_pd (i1);\n+  __m128d t2 = _mm_load_pd (i2);\n+\n+  t1 = _mm_addsub_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static int\n+chk_pd (double *v1, double *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 2; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static double p1[2] __attribute__ ((aligned(16)));\n+static double p2[2] __attribute__ ((aligned(16)));\n+static double p3[2];\n+static double ck[2];\n+\n+double vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 4)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+\n+      p2[0] = vals[i+2];\n+      p2[1] = vals[i+3];\n+\n+      ck[0] = p1[0] - p2[0];\n+      ck[1] = p1[1] + p2[1];\n+\n+      sse3_test_addsubpd (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+\n+      sse3_test_addsubpd_subsume (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "6c45af1ac5d13f662f64953f216e077918783ac0", "filename": "gcc/testsuite/gcc.target/i386/sse3-addsubps.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-addsubps.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_addsubps (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_loadu_ps (i1);\n+  __m128 t2 = _mm_loadu_ps (i2);\n+\n+  t1 = _mm_addsub_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static void\n+sse3_test_addsubps_subsume (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_load_ps (i1);\n+  __m128 t2 = _mm_load_ps (i2);\n+\n+  t1 = _mm_addsub_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static int\n+chk_ps (float *v1, float *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static float p1[4] __attribute__ ((aligned(16)));\n+static float p2[4] __attribute__ ((aligned(16)));\n+static float p3[4];\n+static float ck[4];\n+\n+static float vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 8)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+      p1[2] = vals[i+2];\n+      p1[3] = vals[i+3];\n+\n+      p2[0] = vals[i+4];\n+      p2[1] = vals[i+5];\n+      p2[2] = vals[i+6];\n+      p2[3] = vals[i+7];\n+\n+      ck[0] = p1[0] - p2[0];\n+      ck[1] = p1[1] + p2[1];\n+      ck[2] = p1[2] - p2[2];\n+      ck[3] = p1[3] + p2[3];\n+\n+      sse3_test_addsubps (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+\n+      sse3_test_addsubps_subsume (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "a85f3b37f6cab2e89496e526812a051de84b45ac", "filename": "gcc/testsuite/gcc.target/i386/sse3-haddpd.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddpd.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_haddpd (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_loadu_pd (i1);\n+  __m128d t2 = _mm_loadu_pd (i2);\n+\n+  t1 = _mm_hadd_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static void\n+sse3_test_haddpd_subsume (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_load_pd (i1);\n+  __m128d t2 = _mm_load_pd (i2);\n+\n+  t1 = _mm_hadd_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static int\n+chk_pd (double *v1, double *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 2; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static double p1[2] __attribute__ ((aligned(16)));\n+static double p2[2] __attribute__ ((aligned(16)));\n+static double p3[2];\n+static double ck[2];\n+\n+static double vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 4)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+\n+      p2[0] = vals[i+2];\n+      p2[1] = vals[i+3];\n+\n+      ck[0] = p1[0] + p1[1];\n+      ck[1] = p2[0] + p2[1];\n+\n+      sse3_test_haddpd (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+\n+      sse3_test_haddpd_subsume (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2914b3863f042da4de6d0efaea87747e7499be6d", "filename": "gcc/testsuite/gcc.target/i386/sse3-haddps.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-haddps.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_haddps (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_loadu_ps (i1);\n+  __m128 t2 = _mm_loadu_ps (i2);\n+\n+  t1 = _mm_hadd_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static void\n+sse3_test_haddps_subsume (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_load_ps (i1);\n+  __m128 t2 = _mm_load_ps (i2);\n+\n+  t1 = _mm_hadd_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static int\n+chk_ps(float *v1, float *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static float p1[4] __attribute__ ((aligned(16)));\n+static float p2[4] __attribute__ ((aligned(16)));\n+static float p3[4];\n+static float ck[4];\n+\n+static float vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test ()\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 8)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+      p1[2] = vals[i+2];\n+      p1[3] = vals[i+3];\n+\n+      p2[0] = vals[i+4];\n+      p2[1] = vals[i+5];\n+      p2[2] = vals[i+6];\n+      p2[3] = vals[i+7];\n+\n+      ck[0] = p1[0] + p1[1];\n+      ck[1] = p1[2] + p1[3];\n+      ck[2] = p2[0] + p2[1];\n+      ck[3] = p2[2] + p2[3];\n+\n+      sse3_test_haddps (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+\n+      sse3_test_haddps_subsume (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "fcb1e9aef1a7562bec5a059ce5bc9d640bf13777", "filename": "gcc/testsuite/gcc.target/i386/sse3-hsubpd.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubpd.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_hsubpd (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_loadu_pd (i1);\n+  __m128d t2 = _mm_loadu_pd (i2);\n+\n+  t1 = _mm_hsub_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static void\n+sse3_test_hsubpd_subsume (double *i1, double *i2, double *r)\n+{\n+  __m128d t1 = _mm_load_pd (i1);\n+  __m128d t2 = _mm_load_pd (i2);\n+\n+  t1 = _mm_hsub_pd (t1, t2);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static int\n+chk_pd (double *v1, double *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 2; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static double p1[2] __attribute__ ((aligned(16)));\n+static double p2[2] __attribute__ ((aligned(16)));\n+static double p3[2];\n+static double ck[2];\n+\n+static double vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 4)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+\n+      p2[0] = vals[i+2];\n+      p2[1] = vals[i+3];\n+\n+      ck[0] = p1[0] - p1[1];\n+      ck[1] = p2[0] - p2[1];\n+\n+      sse3_test_hsubpd (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+\n+      sse3_test_hsubpd_subsume (p1, p2, p3);\n+\n+      fail += chk_pd (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "e3b63272ea33251a0f03f9a17262369cfa5cfb45", "filename": "gcc/testsuite/gcc.target/i386/sse3-hsubps.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-hsubps.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_hsubps (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_loadu_ps (i1);\n+  __m128 t2 = _mm_loadu_ps (i2);\n+\n+  t1 = _mm_hsub_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static void\n+sse3_test_hsubps_subsume (float *i1, float *i2, float *r)\n+{\n+  __m128 t1 = _mm_load_ps (i1);\n+  __m128 t2 = _mm_load_ps (i2);\n+\n+  t1 = _mm_hsub_ps (t1, t2);\n+\n+  _mm_storeu_ps (r, t1);\n+}\n+\n+static int\n+chk_ps (float *v1, float *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++) {\n+    if (v1[i] != v2[i]) {\n+      n_fails += 1;\n+    }\n+  }\n+\n+  return n_fails;\n+}\n+\n+static float p1[4] __attribute__ ((aligned(16)));\n+static float p2[4] __attribute__ ((aligned(16)));\n+static float p3[4];\n+static float ck[4];\n+\n+static float vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 8)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+      p1[2] = vals[i+2];\n+      p1[3] = vals[i+3];\n+\n+      p2[0] = vals[i+4];\n+      p2[1] = vals[i+5];\n+      p2[2] = vals[i+6];\n+      p2[3] = vals[i+7];\n+\n+      ck[0] = p1[0] - p1[1];\n+      ck[1] = p1[2] - p1[3];\n+      ck[2] = p2[0] - p2[1];\n+      ck[3] = p2[2] - p2[3];\n+\n+      sse3_test_hsubps (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+\n+      sse3_test_hsubps_subsume (p1, p2, p3);\n+\n+      fail += chk_ps (ck, p3);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "45c63e436bb631ec41b381ab3aae2929642d5abf", "filename": "gcc/testsuite/gcc.target/i386/sse3-lddqu.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-lddqu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-lddqu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-lddqu.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_lddqu (double *i1, double *r)\n+{\n+  __m128i t1 = _mm_lddqu_si128 ((__m128i *) i1);\n+\n+  _mm_storeu_si128 ((__m128i *) r, t1);\n+}\n+\n+static int\n+chk_pd (double *v1, double *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 2; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static double p1[2];\n+static double p2[2];\n+static double ck[2];\n+\n+static double vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 2)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = vals[i+1];\n+\n+      sse3_test_lddqu (p1, p2);\n+\n+      ck[0] = p1[0];\n+      ck[1] = p1[1];\n+\n+      fail += chk_pd (ck, p2);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "96641c60d2db41e91bac5dac63133e97ecc2df26", "filename": "gcc/testsuite/gcc.target/i386/sse3-movddup.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movddup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movddup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movddup.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_movddup_mem (double *i1, double *r)\n+{\n+  __m128d t1 = _mm_loaddup_pd (i1);\n+\n+  _mm_storeu_pd (r, t1);\n+}\n+\n+static double cnst1 [2] = {1.0, 1.0};\n+\n+static void\n+sse3_test_movddup_reg (double *i1, double *r)\n+{\n+  __m128d t1 = _mm_loadu_pd (i1);\n+  __m128d t2 = _mm_loadu_pd (&cnst1[0]);\n+\n+  t1  = _mm_mul_pd (t1, t2);\n+  t2  = _mm_movedup_pd (t1);\n+\n+  _mm_storeu_pd (r, t2);\n+}\n+\n+static void\n+sse3_test_movddup_reg_subsume_unaligned (double *i1, double *r)\n+{\n+  __m128d t1 = _mm_loadu_pd (i1);\n+  __m128d t2 = _mm_movedup_pd (t1);\n+\n+  _mm_storeu_pd (r, t2);\n+}\n+\n+static void\n+sse3_test_movddup_reg_subsume_ldsd (double *i1, double *r)\n+{\n+  __m128d t1 = _mm_load_sd (i1);\n+  __m128d t2 = _mm_movedup_pd (t1);\n+\n+  _mm_storeu_pd (r, t2);\n+}\n+\n+static void\n+sse3_test_movddup_reg_subsume (double *i1, double *r)\n+{\n+  __m128d t1 = _mm_load_pd (i1);\n+  __m128d t2 = _mm_movedup_pd (t1);\n+\n+  _mm_storeu_pd (r, t2);\n+}\n+\n+static int\n+chk_pd (double *v1, double *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 2; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static double p1[2] __attribute__ ((aligned(16)));\n+static double p2[2];\n+static double ck[2];\n+\n+static double vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 1)\n+    {\n+      p1[0] = vals[i+0];\n+\n+      ck[0] = p1[0];\n+      ck[1] = p1[0];\n+\n+      sse3_test_movddup_mem (p1, p2);\n+\n+      fail += chk_pd (ck, p2);\n+\n+      sse3_test_movddup_reg (p1, p2);\n+\n+      fail += chk_pd (ck, p2);\n+\n+      sse3_test_movddup_reg_subsume (p1, p2);\n+\n+      fail += chk_pd (ck, p2);\n+\n+      sse3_test_movddup_reg_subsume_unaligned (p1, p2);\n+\n+      fail += chk_pd (ck, p2);\n+\n+      sse3_test_movddup_reg_subsume_ldsd (p1, p2);\n+\n+      fail += chk_pd (ck, p2);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "88d4125e37746a519e5176d66b2964fdd48ffd53", "filename": "gcc/testsuite/gcc.target/i386/sse3-movshdup.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movshdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movshdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movshdup.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_movshdup_reg (float *i1, float *r)\n+{\n+  __m128 t1 = _mm_loadu_ps (i1);\n+  __m128 t2 = _mm_movehdup_ps (t1);\n+\n+  _mm_storeu_ps (r, t2);\n+}\n+\n+static void\n+sse3_test_movshdup_reg_subsume (float *i1, float *r)\n+{\n+  __m128 t1 = _mm_load_ps (i1);\n+  __m128 t2 = _mm_movehdup_ps (t1);\n+\n+  _mm_storeu_ps (r, t2);\n+}\n+\n+static int\n+chk_ps (float *v1, float *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static float p1[4] __attribute__ ((aligned(16)));\n+static float p2[4];\n+static float ck[4];\n+\n+static float vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 2)\n+    {\n+      p1[0] = 0.0;\n+      p1[1] = vals[i+0];\n+      p1[2] = 1.0;\n+      p1[3] = vals[i+1];\n+\n+      ck[0] = p1[1];\n+      ck[1] = p1[1];\n+      ck[2] = p1[3];\n+      ck[3] = p1[3];\n+\n+      sse3_test_movshdup_reg (p1, p2);\n+\n+      fail += chk_ps (ck, p2);\n+\n+      sse3_test_movshdup_reg_subsume (p1, p2);\n+\n+      fail += chk_ps (ck, p2);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "a3128ad20fb5a5536ed7f60ca44e4a682137be02", "filename": "gcc/testsuite/gcc.target/i386/sse3-movsldup.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movsldup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877c1c555fdcc46467c9fe9e9dccb8aaf8efe178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movsldup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-movsldup.c?ref=877c1c555fdcc46467c9fe9e9dccb8aaf8efe178", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse3\" } */\n+#include <pmmintrin.h>\n+#include <stdlib.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse3_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE3 test only if host has SSE3 support.  */\n+  if ((cpu_facilities & bit_SSE3))\n+    sse3_test ();\n+\n+  exit (0);\n+}\n+\n+static void\n+sse3_test_movsldup_reg (float *i1, float *r)\n+{\n+  __m128 t1 = _mm_loadu_ps (i1);\n+  __m128 t2 = _mm_moveldup_ps (t1);\n+\n+  _mm_storeu_ps (r, t2);\n+}\n+\n+static void\n+sse3_test_movsldup_reg_subsume (float *i1, float *r)\n+{\n+  __m128 t1 = _mm_load_ps (i1);\n+  __m128 t2 = _mm_moveldup_ps (t1);\n+\n+  _mm_storeu_ps (r, t2);\n+}\n+\n+static int\n+chk_ps (float *v1, float *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static float p1[4] __attribute__ ((aligned(16)));\n+static float p2[4];\n+static float p3[4];\n+static float ck[4];\n+\n+static float vals[80] =\n+  {\n+    100.0,  200.0, 300.0, 400.0, 5.0, -1.0, .345, -21.5,\n+    1100.0, 0.235, 321.3, 53.40, 0.3, 10.0, 42.0, 32.52,\n+    32.6,   123.3, 1.234, 2.156, 0.1, 3.25, 4.75, 32.44,\n+    12.16,  52.34, 64.12, 71.13, -.1, 2.30, 5.12, 3.785,\n+    541.3,  321.4, 231.4, 531.4, 71., 321., 231., -531.,\n+    23.45,  23.45, 23.45, 23.45, 23.45, 23.45, 23.45, 23.45,\n+    23.45,  -1.43, -6.74, 6.345, -20.1, -20.1, -40.1, -40.1,\n+    1.234,  2.345, 3.456, 4.567, 5.678, 6.789, 7.891, 8.912,\n+    -9.32,  -8.41, -7.50, -6.59, -5.68, -4.77, -3.86, -2.95,\n+    9.32,  8.41, 7.50, 6.59, -5.68, -4.77, -3.86, -2.95\n+  };\n+\n+static void\n+sse3_test (void)\n+{\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < 80; i += 2)\n+    {\n+      p1[0] = vals[i+0];\n+      p1[1] = 0.0;\n+      p1[2] = vals[i+1];\n+      p1[3] = 1.0;\n+\n+      ck[0] = p1[0];\n+      ck[1] = p1[0];\n+      ck[2] = p1[2];\n+      ck[3] = p1[2];\n+\n+      sse3_test_movsldup_reg (p1, p2);\n+\n+      fail += chk_ps (ck, p2);\n+\n+      sse3_test_movsldup_reg_subsume (p1, p2);\n+\n+      fail += chk_ps (ck, p2);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}]}