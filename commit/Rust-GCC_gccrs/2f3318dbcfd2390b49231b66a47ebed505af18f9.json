{"sha": "2f3318dbcfd2390b49231b66a47ebed505af18f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzMzE4ZGJjZmQyMzkwYjQ5MjMxYjY2YTQ3ZWJlZDUwNWFmMThmOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T10:07:36Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Add testcase for vector init and broadcast intrinsics.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/m512-check.h: Add union128h, union256h, union512h.\n\t* gcc.target/i386/avx512fp16-10a.c: New test.\n\t* gcc.target/i386/avx512fp16-10b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-1c.c: Ditto.\n\t* gcc.target/i386/avx512fp16-1d.c: Ditto.\n\t* gcc.target/i386/avx512fp16-1e.c: Ditto.\n\t* gcc.target/i386/avx512fp16-2a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-2b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-2c.c: Ditto.\n\t* gcc.target/i386/avx512fp16-3a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-3b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-3c.c: Ditto.\n\t* gcc.target/i386/avx512fp16-4.c: Ditto.\n\t* gcc.target/i386/avx512fp16-5.c: Ditto.\n\t* gcc.target/i386/avx512fp16-6.c: Ditto.\n\t* gcc.target/i386/avx512fp16-7.c: Ditto.\n\t* gcc.target/i386/avx512fp16-8.c: Ditto.\n\t* gcc.target/i386/avx512fp16-9a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-9b.c: Ditto.\n\t* gcc.target/i386/pr54855-13.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vec_set_var.c: Ditto.", "tree": {"sha": "917913354e75fb676801e21d0a419ae44213fbcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/917913354e75fb676801e21d0a419ae44213fbcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f3318dbcfd2390b49231b66a47ebed505af18f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3318dbcfd2390b49231b66a47ebed505af18f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3318dbcfd2390b49231b66a47ebed505af18f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3318dbcfd2390b49231b66a47ebed505af18f9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2a82e1f9d2c4afc62b864a9cd9efe2e8ecce7d"}], "stats": {"total": 910, "additions": 909, "deletions": 1}, "files": [{"sha": "f06ffffa822fdd4357d96e7ba2c55b2f18a5010f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-10a.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10a.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <immintrin.h>\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+set_128 (_Float16 x)\n+{\n+  return _mm_set_sh (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[ \\t]\\+\\[^\\n\\r]*xmm0\" 1 { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[ \\t]\\+\\[^\\n\\r]*xmm0\" 2 { target { ! ia32 } } } } */"}, {"sha": "055edd7aaf51110680e4be646cdd040992233ab2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-10b.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-10b.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-10a.c\"\n+\n+union128h u128 = { ESP_FLOAT16, 0.0f, 0.0f, 0.0f,\n+\t\t   0.0f, 0.0f, 0.0f, 0.0f };\n+\n+static void\n+do_test (void)\n+{\n+  __m128h v128 = set_128 (ESP_FLOAT16);\n+  union128h a128;\n+\n+  a128.x = v128;\n+  if (check_union128h (a128, u128.a))\n+    abort ();\n+}"}, {"sha": "45c7bddeba56c0776e98ad3ef27ab0d05784389e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1a.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef _Float16 __v8hf __attribute__ ((__vector_size__ (16)));\n+typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo1 (_Float16 x)\n+{\n+  return __extension__ (__m128h)(__v8hf) { x, 0.0f, 0.0f, 0.0f,\n+                                           0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo2 (_Float16 *x)\n+{\n+  return __extension__ (__m128h)(__v8hf) { *x, 0.0f, 0.0f, 0.0f,\n+                                           0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 2 { target { ia32 } } } } */"}, {"sha": "7560c625e25b57cbc0d3c486ef343589ca7faa37", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1b.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1b.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-1a.c\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union128h u = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m128h v;\n+  union128h a;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union128h (a, u.a))\n+    abort ();\n+  x = 33.3;\n+  u.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union128h (a, u.a))\n+    abort ();\n+}"}, {"sha": "49fc2aa42e2c6ea96df2e7448697a01e5c347b17", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1c.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1c.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"(?:vmovsh|vmovw)\" 2 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrw\" 2 { target { ia32 } } } } */\n+\n+typedef _Float16 __v8hf __attribute__ ((__vector_size__ (16)));\n+typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo1 (__m128h a, _Float16 f)\n+{\n+  __v8hf x = (__v8hf) a;\n+  x[2] = f;\n+  return (__m128h) x;\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo2 (__m128h a, _Float16 f)\n+{\n+  __v8hf x = (__v8hf) a;\n+  x[0] = f;\n+  return (__m128h) x;\n+}"}, {"sha": "cdaf656eb48c0d9302e33f8a3ea79476f16a3c19", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1d.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1d.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-1c.c\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union128h u = { -1.2f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f };\n+  __m128h v;\n+  union128h a, b;\n+  v = foo1 (u.x, x);\n+  a.x = v;\n+  b = u;\n+  b.a[2] = x;\n+  if (check_union128h (a, b.a))\n+    abort ();\n+  x = 33.3;\n+  b = u;\n+  b.a[0] = x;\n+  v = foo2 (u.x, x);\n+  a.x = v;\n+  if (check_union128h (a, b.a))\n+    abort ();\n+}"}, {"sha": "04d33cfcf2b8f846b7c59f14594d4d8506e36c10", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-1e.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-1e.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-1a.c\"\n+\n+__m128h\n+__attribute__ ((noinline,noclone))\n+foo3 (__m128h x)\n+{\n+  return foo1(x[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  union128h u = { -1.2f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f };\n+  union128h a, b = { -1.2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};\n+  __m128h v;\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union128h (a, b.a))\n+    abort ();\n+}"}, {"sha": "c03138fb13ddd36011507067082884007775e9b9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-2a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2a.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef _Float16 __v16hf __attribute__ ((__vector_size__ (32)));\n+typedef _Float16 __m256h __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+foo1 (_Float16 x)\n+{\n+  return __extension__ (__m256h)(__v16hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+foo2 (_Float16 *x)\n+{\n+  return __extension__ (__m256h)(__v16hf) { *x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 2 { target { ia32 } } } } */"}, {"sha": "100afd0f49cb5a86d8f43179565d044d9cbb003b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-2b.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2b.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-2a.c\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union256h u = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m256h v;\n+  union256h a;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union256h (a, u.a))\n+    abort ();\n+  x = 33.3;\n+  u.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union256h (a, u.a))\n+    abort ();\n+}"}, {"sha": "cf4b42a402111d7eb3c5ccac72ce25d9a4c13c5c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-2c.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-2c.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-2a.c\"\n+\n+__m256h\n+__attribute__ ((noinline,noclone))\n+foo3 (__m256h x)\n+{\n+  return foo1(x[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union256h u = { x, 3.5f, -5.9f, 0.0f, 0.0f, 0.0f, 7.7f, 0.0f,\n+\t\t  4.0f, -4.20f, 0.0f, 0.0f, 0.0f, -8.7f, 0.0f, 0.0f };\n+\n+  union256h exp = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t    0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m256h v;\n+  union256h a;\n+  memset (&v, -1, sizeof (v));\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union256h (a, exp.a))\n+    abort ();\n+}"}, {"sha": "126e7d9ee362080a15df6494be0375f25ec716ff", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-3a.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3a.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef _Float16 __v32hf __attribute__ ((__vector_size__ (64)));\n+typedef _Float16 __m512h __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+foo1 (_Float16 x)\n+{\n+  return __extension__ (__m512h)(__v32hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+foo2 (_Float16 *x)\n+{\n+  return __extension__ (__m512h)(__v32hf) { *x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[^\\n\\r]*xmm0\" 2 { target { ia32 } } } } */"}, {"sha": "291db066bfaa095810b8c8711c3310e89fa2de42", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-3b.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3b.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-3a.c\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union512h u = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m512h v;\n+  union512h a;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union512h (a, u.a))\n+    abort ();\n+  x = 33.3;\n+  u.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union512h (a, u.a))\n+    abort ();\n+}"}, {"sha": "21f9e16434a2651e312bcee4dffccef5fc519554", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-3c.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-3c.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-3a.c\"\n+\n+__m512h\n+__attribute__ ((noinline,noclone))\n+foo3 (__m512h x)\n+{\n+  return foo1(x[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union512h u = { x, 3.5f, -5.9f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  2.0f, -2.3f, 0.0f, 0.0f, 10.4f, 0.0f, 0.0f, 0.0f,\n+\t\t  3.0f, -3.2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t  4.0f, -4.20f, 0.0f, 0.0f, 0.0f, -8.7f, 0.0f, 0.0f };\n+\n+  union512h exp = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t    0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t    0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t    0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m512h v;\n+  union512h a;\n+  memset (&v, -1, sizeof (v));\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union512h (a, exp.a))\n+    abort ();\n+}"}, {"sha": "1329a0434a09ed406db5a8ea05ee6956002301ed", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-4.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do assemble { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef _Float16 __m256h __attribute__ ((__vector_size__ (32), __may_alias__));\n+typedef _Float16 __m512h __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+extern __m128h x128, y128;\n+extern __m256h x256, y256;\n+extern __m512h x512, y512;\n+\n+__m128h\n+foo1 (float f1, __m128h f2)\n+{\n+  x128 = y128;\n+  return f2;\n+}\n+\n+__m256h\n+foo2 (float f1, __m256h f2)\n+{\n+  x256 = y256;\n+  return f2;\n+}\n+\n+__m512h\n+foo3 (float f1, __m512h f2)\n+{\n+  x512 = y512;\n+  return f2;\n+}"}, {"sha": "d28b9651b8bd753990fedea4683dbf83b43c6aa6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-5.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-5.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,133 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo1 (_Float16 x)\n+{\n+  return __extension__ (__m128h)(__v8hf) { x, 0.0f, 0.0f, 0.0f,\n+                                           1.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+foo2 (_Float16 x, _Float16 y)\n+{\n+  return __extension__ (__m128h)(__v8hf) { x, 0.0f, 0.0f, y,\n+                                           3.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+foo3 (_Float16 x)\n+{\n+  return __extension__ (__m256h)(__v16hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            1.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+foo4 (_Float16 x, _Float16 y)\n+{\n+  return __extension__ (__m256h)(__v16hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, y,\n+                                            3.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+foo5 (_Float16 x)\n+{\n+  return __extension__ (__m512h)(__v32hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            1.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+foo6 (_Float16 x, _Float16 y)\n+{\n+  return __extension__ (__m512h)(__v32hf) { x, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, y,\n+                                            3.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f,\n+                                            0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  _Float16 y = -35.7;\n+  union128h u128 = { x, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f };\n+  union256h u256 = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  union512h u512 = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  __m128h v128;\n+  __m256h v256;\n+  __m512h v512;\n+  union128h a128;\n+  union256h a256;\n+  union512h a512;\n+\n+  memset (&v128, -1, sizeof (v128));\n+  v128 = foo1 (x);\n+  a128.x = v128;\n+  if (check_union128h (a128, u128.a))\n+    abort ();\n+  memset (&v128, -1, sizeof (v128));\n+  u128.a[3] = y;\n+  u128.a[4] = 3.0f;\n+  v128 = foo2 (x, y);\n+  a128.x = v128;\n+  if (check_union128h (a128, u128.a))\n+    abort ();\n+\n+  memset (&v256, -1, sizeof (v256));\n+  v256 = foo3 (x);\n+  a256.x = v256;\n+  if (check_union256h (a256, u256.a))\n+    abort ();\n+  memset (&v256, -1, sizeof (v256));\n+  u256.a[7] = y;\n+  u256.a[8] = 3.0f;\n+  v256 = foo4 (x, y);\n+  a256.x = v256;\n+  if (check_union256h (a256, u256.a))\n+    abort ();\n+\n+  memset (&v512, -1, sizeof (v512));\n+  v512 = foo5 (x);\n+  a512.x = v512;\n+  if (check_union512h (a512, u512.a))\n+    abort ();\n+  memset (&v512, -1, sizeof (v512));\n+  u512.a[15] = y;\n+  u512.a[16] = 3.0f;\n+  v512 = foo6 (x, y);\n+  a512.x = v512;\n+  if (check_union512h (a512, u512.a))\n+    abort ();\n+}"}, {"sha": "d85a6c4060329b53df3f03717207321b50641a51", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-6.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-6.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo128 (_Float16 *p, __m128h x)\n+{\n+  *p = ((__v8hf)x)[0];\n+}\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo256 (_Float16 *p, __m256h x)\n+{\n+  *p = ((__v16hf)x)[0];\n+}\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo512 (_Float16 *p, __m512h x)\n+{\n+  *p = ((__v32hf)x)[0];\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union128h u128 = { x, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f };\n+  union256h u256 = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  union512h u512 = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  _Float16 y;\n+\n+  foo128 (&y, u128.x);\n+  if (x != y)\n+    abort ();\n+\n+  foo256 (&y, u256.x);\n+  if (x != y)\n+    abort ();\n+\n+  foo512 (&y, u512.x);\n+  if (x != y)\n+    abort ();\n+}"}, {"sha": "26ae25fc0d467dcb774ef6254be2152cc04bd739", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-7.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-7.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo128 (_Float16 *p, __m128h x)\n+{\n+  *p = ((__v8hf)x)[4];\n+}\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo256 (_Float16 *p, __m256h x)\n+{\n+  *p = ((__v16hf)x)[10];\n+}\n+\n+void\n+__attribute__ ((noinline, noclone))\n+foo512 (_Float16 *p, __m512h x)\n+{\n+  *p = ((__v32hf)x)[30];\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union128h u128 = { 0.0f, x, 0.0f, 0.0f, x, 0.0f, 0.0f, x };\n+  union256h u256 = { x, 0.0f, 0.0f, 0.0f, x, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, x, 0.0f, 0.0f, x, 0.0f, 0.0f };\n+  union512h u512 = { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, x, 0.0f, 0.0f, x, 0.0f };\n+  __m128h v128 = _mm_setr_ph (0.0f, x, 0.0f, 0.0f,\n+\t\t\t      x, 0.0f, 0.0f, x);\n+  __m256h v256 = _mm256_setr_ph (x, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t x, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, x, 0.0f,\n+\t\t\t\t 0.0f, x, 0.0f, 0.0f);\n+  __m512h v512 = _mm512_setr_ph (x, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, x, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, x, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t\t\t 0.0f, 0.0f, 0.0f, x,\n+\t\t\t\t 0.0f, 0.0f, x, 0.0f);\n+  union128h a128;\n+  union256h a256;\n+  union512h a512;\n+  _Float16 y;\n+\n+  a128.x = v128;\n+  if (check_union128h (a128, u128.a))\n+    abort ();\n+\n+  a256.x = v256;\n+  if (check_union256h (a256, u256.a))\n+    abort ();\n+\n+  a512.x = v512;\n+  if (check_union512h (a512, u512.a))\n+    abort ();\n+\n+  foo128 (&y, u128.x);\n+  if (x != y)\n+    abort ();\n+\n+  foo256 (&y, u256.x);\n+  if (x != y)\n+    abort ();\n+\n+  foo512 (&y, u512.x);\n+  if (x != y)\n+    abort ();\n+}"}, {"sha": "8f103751c2f498d15f64b11fc9c859a6e441cf4d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-8.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-8.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+_Float16\n+__attribute__ ((noinline, noclone))\n+foo128 (__m128h x)\n+{\n+  return ((__v8hf)x)[4];\n+}\n+\n+_Float16\n+__attribute__ ((noinline, noclone))\n+foo256 (__m256h x)\n+{\n+  return ((__v16hf)x)[10];\n+}\n+\n+_Float16\n+__attribute__ ((noinline, noclone))\n+foo512 (__m512h x)\n+{\n+  return ((__v32hf)x)[30];\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 25.3;\n+  union128h u128 = { 0.0f, 0.0f, 0.0f, 0.0f, x, 0.0f, 0.0f, 0.0f };\n+  union256h u256 = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+  union512h u512 = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n+\t\t     0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, x, 0.0f };\n+\n+  if (foo128 (u128.x) != x)\n+    abort ();\n+\n+  if (foo256 (u256.x) != x)\n+    abort ();\n+\n+  if (foo512 (u512.x) != x)\n+    abort ();\n+}"}, {"sha": "580ffb51e45841945b7285aee8915483efdadf04", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-9a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9a.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <immintrin.h>\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+set1_128 (_Float16 x)\n+{\n+  return _mm_set1_ph (x);\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+set1_256 (_Float16 x)\n+{\n+  return _mm256_set1_ph (x);\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+set1_512 (_Float16 x)\n+{\n+  return _mm512_set1_ph (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\t]\\+\\[^\\n\\r]*\\[xyz\\]mm0\" 3 } } */"}, {"sha": "198b23e64b44f1bdc7773d7abe3ea8672e271309", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-9b.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-9b.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-9a.c\"\n+\n+union128h u128 = { ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16 };\n+union256h u256 = { ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16 };\n+union512h u512 = { ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16,\n+\t\t   ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16, ESP_FLOAT16 };\n+\n+static void\n+do_test (void)\n+{\n+  __m128h v128 = set1_128 (ESP_FLOAT16);\n+  __m256h v256 = set1_256 (ESP_FLOAT16);\n+  __m512h v512 = set1_512 (ESP_FLOAT16);\n+  union128h a128;\n+  union256h a256;\n+  union512h a512;\n+\n+  a128.x = v128;\n+  if (check_union128h (a128, u128.a))\n+    abort ();\n+\n+  a256.x = v256;\n+  if (check_union256h (a256, u256.a))\n+    abort ();\n+\n+  a512.x = v512;\n+  if (check_union512h (a512, u512.a))\n+    abort ();\n+}"}, {"sha": "6a2e82086b9cc03a926ef4d245b0f90f5b13f439", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vec_set_var.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_set_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_set_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_set_var.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mno-avx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)vpblendvb[ \\t]+%xmm[0-9]} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpblendvb[ \\t]+%ymm[0-9]} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)(?:vpbroadcastw|vmovdq[ua]16)[ \\t].*%zmm[0-9].*%k[0-7]} 1 } } */\n+\n+typedef _Float16 v32hf __attribute__((vector_size(64)));\n+typedef _Float16 v16hf __attribute__((vector_size(32)));\n+typedef _Float16 v8hf __attribute__((vector_size(16)));\n+\n+v8hf\n+foo1 (v8hf a, _Float16 b, int c)\n+{\n+  a[c] = b;\n+  return a;\n+}\n+\n+v16hf\n+foo2 (v16hf a, _Float16 b, int c)\n+{\n+  a[c] = b;\n+  return a;\n+}\n+\n+v32hf\n+foo3 (v32hf a, _Float16 b, int c)\n+{\n+  a[c] = b;\n+  return a;\n+}"}, {"sha": "68e74fce68d2324cb8ea0ea115f3f212bc678e27", "filename": "gcc/testsuite/gcc.target/i386/m512-check.h", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fm512-check.h?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -60,7 +60,24 @@ typedef union\n  __m512i x;\n  unsigned long long a[8];\n } union512i_uq;\n-                                    \n+\n+typedef union\n+{\n+  __m128h x;\n+  _Float16 a[8];\n+} union128h;\n+\n+typedef union\n+{\n+  __m256h x;\n+  _Float16 a[16];\n+} union256h;\n+\n+typedef union\n+{\n+  __m512h x;\n+  _Float16 a[32];\n+} union512h;\n \n CHECK_EXP (union512i_b, char, \"%d\")\n CHECK_EXP (union512i_w, short, \"%d\")\n@@ -115,3 +132,22 @@ CHECK_ROUGH_EXP (union256, float, \"%f\")\n CHECK_ROUGH_EXP (union256d, double, \"%f\")\n CHECK_ROUGH_EXP (union128, float, \"%f\")\n CHECK_ROUGH_EXP (union128d, double, \"%f\")\n+\n+#ifdef AVX512FP16\n+\n+CHECK_EXP (union128h, _Float16, \"%f\")\n+CHECK_EXP (union256h, _Float16, \"%f\")\n+CHECK_EXP (union512h, _Float16, \"%f\")\n+\n+#ifndef ESP_FLOAT16\n+#define ESP_FLOAT16 0.27\n+#endif\n+\n+CHECK_FP_EXP (union128h, _Float16, ESP_FLOAT16, \"%f\")\n+CHECK_FP_EXP (union256h, _Float16, ESP_FLOAT16, \"%f\")\n+CHECK_FP_EXP (union512h, _Float16, ESP_FLOAT16, \"%f\")\n+\n+CHECK_ROUGH_EXP (union128h, _Float16, \"%f\")\n+CHECK_ROUGH_EXP (union256h, _Float16, \"%f\")\n+CHECK_ROUGH_EXP (union512h, _Float16, \"%f\")\n+#endif"}, {"sha": "87b4f459a5a840e83e1cca306e8998454450c0d9", "filename": "gcc/testsuite/gcc.target/i386/pr54855-13.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3318dbcfd2390b49231b66a47ebed505af18f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-13.c?ref=2f3318dbcfd2390b49231b66a47ebed505af18f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vmaxsh\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vcomish\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vmovsh\\[ \\\\t\\]\" { target { ! ia32 } } } } */\n+\n+#include <immintrin.h>\n+\n+__m128h\n+foo (__m128h x, __m128h y)\n+{\n+  x[0] = x[0] > y[0] ? x[0] : y[0];\n+  return x;\n+}"}]}