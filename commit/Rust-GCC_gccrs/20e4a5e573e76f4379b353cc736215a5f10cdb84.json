{"sha": "20e4a5e573e76f4379b353cc736215a5f10cdb84", "node_id": "C_kwDOANBUbNoAKDIwZTRhNWU1NzNlNzZmNDM3OWIzNTNjYzczNjIxNWE1ZjEwY2RiODQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T18:11:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T18:11:51Z"}, "message": "c-family: Fix up -W*conversion on bitwise &/|/^ [PR101537]\n\nThe following testcases emit a bogus -Wconversion warning.  This is because\nconversion_warning function doesn't handle BIT_*_EXPR (only unsafe_conversion_p\nthat is called during the default: case, and that one doesn't handle\nSAVE_EXPRs added because the unsigned char & or | operands promoted to int\nhave side-effects and =| or =& is used.\n\nThe patch handles BIT_IOR_EXPR/BIT_XOR_EXPR like the last 2 operands of\nCOND_EXPR by recursing on the two operands, if either of them doesn't fit\ninto the narrower type, complain.  BIT_AND_EXPR too, but first it needs to\nhandle some special cases that unsafe_conversion_p does, namely when one\nof the two operands is a constant.\n\nThis fixes completely the pr101537.c test and for C also pr103881.c\nand doesn't regress anything in the testsuite, for C++ pr103881.c still\nemits the bogus warnings.\nThis is because while the C FE emits in that case a SAVE_EXPR that\nconversion_warning can handle already, C++ FE emits\nTARGET_EXPR <D.whatever, ...>, something | D.whatever\netc. and conversion_warning handles COMPOUND_EXPR by \"recursing\" on the\nrhs.  To handle that case, we'd need for TARGET_EXPR on the lhs remember\nin some hash map the mapping from D.whatever to the TARGET_EXPR and when\nwe see D.whatever, use corresponding TARGET_EXPR initializer instead.\n\n2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/101537\n\tPR c/103881\ngcc/c-family/\n\t* c-warn.c (conversion_warning): Handle BIT_AND_EXPR, BIT_IOR_EXPR\n\tand BIT_XOR_EXPR.\ngcc/testsuite/\n\t* c-c++-common/pr101537.c: New test.\n\t* c-c++-common/pr103881.c: New test.", "tree": {"sha": "5be1205aa8335ac1918920a00c4ec85587f2838e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be1205aa8335ac1918920a00c4ec85587f2838e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e4a5e573e76f4379b353cc736215a5f10cdb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e4a5e573e76f4379b353cc736215a5f10cdb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e4a5e573e76f4379b353cc736215a5f10cdb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e4a5e573e76f4379b353cc736215a5f10cdb84/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0378f563b0321c44c4a9c98cf46d2a22b9160f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0378f563b0321c44c4a9c98cf46d2a22b9160f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0378f563b0321c44c4a9c98cf46d2a22b9160f76"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "1ce2202c7ff6d218dba35083e48c2f6c17884024", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=20e4a5e573e76f4379b353cc736215a5f10cdb84", "patch": "@@ -1304,6 +1304,34 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t\t|| conversion_warning (loc, type, op2, result));\n       }\n \n+    case BIT_AND_EXPR:\n+      if (TREE_CODE (expr_type) == INTEGER_TYPE\n+\t  && TREE_CODE (type) == INTEGER_TYPE)\n+\tfor (int i = 0; i < 2; ++i)\n+\t  {\n+\t    tree op = TREE_OPERAND (expr, i);\n+\t    if (TREE_CODE (op) != INTEGER_CST)\n+\t      continue;\n+\n+\t    /* If one of the operands is a non-negative constant\n+\t       that fits in the target type, then the type of the\n+\t       other operand does not matter.  */\n+\t    if (int_fits_type_p (op, c_common_signed_type (type))\n+\t\t&& int_fits_type_p (op, c_common_unsigned_type (type)))\n+\t      return false;\n+\n+\t    /* If constant is unsigned and fits in the target\n+\t       type, then the result will also fit.  */\n+\t    if (TYPE_UNSIGNED (TREE_TYPE (op)) && int_fits_type_p (op, type))\n+\t      return false;\n+\t  }\n+      /* FALLTHRU */\n+    case BIT_IOR_EXPR:\n+    case BIT_XOR_EXPR:\n+      return (conversion_warning (loc, type, TREE_OPERAND (expr, 0), result)\n+\t      || conversion_warning (loc, type, TREE_OPERAND (expr, 1),\n+\t\t\t\t     result));\n+\n     default_:\n     default:\n       conversion_kind = unsafe_conversion_p (type, expr, result, true);"}, {"sha": "c0c3cfc45cb41a8b587d4a197337080018b5bb61", "filename": "gcc/testsuite/c-c++-common/pr101537.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr101537.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr101537.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr101537.c?ref=20e4a5e573e76f4379b353cc736215a5f10cdb84", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/101537 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+int\n+foo ()\n+{\n+  int aaa = 1;\n+  unsigned char bbb = 0;\n+  bbb |= aaa ? 1 : 0;\n+  return bbb;\n+}\n+\n+int\n+bar (unsigned char x, int f)\n+{\n+  x |= f ? 1 : 0;\n+  return x;\n+}\n+\n+int\n+baz (unsigned char x, int f)\n+{\n+  x = x | f ? 1 : 0;\n+  return x;\n+}"}, {"sha": "bb3f53bcf7ba1955b24f4afc3b869b51adb3f034", "filename": "gcc/testsuite/c-c++-common/pr103881.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e4a5e573e76f4379b353cc736215a5f10cdb84/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103881.c?ref=20e4a5e573e76f4379b353cc736215a5f10cdb84", "patch": "@@ -0,0 +1,20 @@\n+/* PR c/103881 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+unsigned char bar (void);\n+\n+void\n+foo (void)\n+{\n+  unsigned char t = 0;\n+  t |= bar ();\n+  t |= bar () & bar ();\t/* { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" \"\" { xfail c++ } } */\n+  t &= bar () & bar ();\t/* { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" \"\" { xfail c++ } } */\n+  t = bar () & bar ();\n+\n+  unsigned char a = bar ();\n+  t |= a & a;\n+  t |= bar () & a;\t\t/* { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" \"\" { xfail c++ } } */\n+  t |= a & bar ();\t\t/* { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" \"\" { xfail c++ } } */\n+}"}]}