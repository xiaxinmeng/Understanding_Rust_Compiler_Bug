{"sha": "240dd6c063b481c092c9ec406b69b400f6f033f1", "node_id": "C_kwDOANBUbNoAKDI0MGRkNmMwNjNiNDgxYzA5MmM5ZWM0MDZiNjliNDAwZjZmMDMzZjE", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-01-17T03:24:20Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-01-17T05:27:16Z"}, "message": "rs6000: Split pattern for TI to V1TI move [PR103124]\n\nThis patch defines a new split pattern for TI to V1TI move.  The pattern concatenates two subreg:DI of a TI to a V2DI.  With the pattern, the subreg pass can do register split for TI when there is a TI to V1TI move.\n\ngcc/\n\n\tPR target/103124\n\t* config/rs6000/vsx.md (split pattern for TI to V1TI move): Defined.\n\ngcc/testsuite/\n\n\tPR target/103124\n\t* gcc.target/powerpc/pr103124.c: New testcase.", "tree": {"sha": "bb3d31b9135207c738a77a046540b4dd5ba8051e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3d31b9135207c738a77a046540b4dd5ba8051e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240dd6c063b481c092c9ec406b69b400f6f033f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240dd6c063b481c092c9ec406b69b400f6f033f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240dd6c063b481c092c9ec406b69b400f6f033f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240dd6c063b481c092c9ec406b69b400f6f033f1/comments", "author": null, "committer": null, "parents": [{"sha": "1e942d7c05c66ccc477567506a6bf86d91cae429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e942d7c05c66ccc477567506a6bf86d91cae429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e942d7c05c66ccc477567506a6bf86d91cae429"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "65bbc763eb06aee4404e9af41b2294b262806d20", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240dd6c063b481c092c9ec406b69b400f6f033f1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240dd6c063b481c092c9ec406b69b400f6f033f1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=240dd6c063b481c092c9ec406b69b400f6f033f1", "patch": "@@ -6586,3 +6586,19 @@\n    [(set_attr \"type\" \"vecperm\")\n     (set_attr \"prefixed\" \"yes\")])\n \n+;; Construct V1TI by vsx_concat_v2di\n+(define_split\n+  [(set (match_operand:V1TI 0 \"vsx_register_operand\")\n+\t(subreg:V1TI\n+\t  (match_operand:TI 1 \"int_reg_operand\") 0 ))]\n+  \"TARGET_P9_VECTOR && !reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx tmp1 = simplify_gen_subreg (DImode, operands[1], TImode, 0);\n+  rtx tmp2 = simplify_gen_subreg (DImode, operands[1], TImode, 8);\n+  rtx tmp3 = gen_reg_rtx (V2DImode);\n+  emit_insn (gen_vsx_concat_v2di (tmp3, tmp1, tmp2));\n+  rtx tmp4 = simplify_gen_subreg (V1TImode, tmp3, V2DImode, 0);\n+  emit_move_insn (operands[0], tmp4);\n+  DONE;\n+})"}, {"sha": "dc7bb9c91d4385c7f2f4644b16ca7b51bfb913de", "filename": "gcc/testsuite/gcc.target/powerpc/pr103124.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240dd6c063b481c092c9ec406b69b400f6f033f1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240dd6c063b481c092c9ec406b69b400f6f033f1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103124.c?ref=240dd6c063b481c092c9ec406b69b400f6f033f1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+/* { dg-final { scan-assembler-not {\\mmr\\M} } } */\n+\n+vector __int128 add (long long a)\n+{\n+  vector __int128 b;\n+  b = (vector __int128) {a};\n+  return b;\n+}"}]}