{"sha": "b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlNzg4Y2MwOWIwNmQ2NjAzOGNjNmNiZTIwODJlODMyYTdlYmVmZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-11T16:20:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-11T16:20:24Z"}, "message": "shared_ptr.h (hash<shared_ptr>): Add.\n\n2010-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/shared_ptr.h (hash<shared_ptr>): Add.\n\t* include/bits/shared_ptr_base.h (hash<__shared_ptr>): Likewise.\n\t* include/bits/unique_ptr.h (hash<unique_ptr>): Likewise.\n\t* testsuite/20_util/shared_ptr/hash/1.cc: New.\n\t* testsuite/20_util/unique_ptr/hash/1.cc: Likewise.\n\nFrom-SVN: r160621", "tree": {"sha": "aa7302db648ad8852e5444d9a24bd8ad8a8bbbf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7302db648ad8852e5444d9a24bd8ad8a8bbbf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/comments", "author": null, "committer": null, "parents": [{"sha": "6575ae21609f4ef889d650ec08f8fe3bb72fd17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6575ae21609f4ef889d650ec08f8fe3bb72fd17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6575ae21609f4ef889d650ec08f8fe3bb72fd17e"}], "stats": {"total": 139, "additions": 138, "deletions": 1}, "files": [{"sha": "96dd53a6a47b086a46104014bf97aae7eb7c1d33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -1,3 +1,11 @@\n+2010-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/shared_ptr.h (hash<shared_ptr>): Add.\n+\t* include/bits/shared_ptr_base.h (hash<__shared_ptr>): Likewise.\n+\t* include/bits/unique_ptr.h (hash<unique_ptr>): Likewise.\n+\t* testsuite/20_util/shared_ptr/hash/1.cc: New.\n+\t* testsuite/20_util/unique_ptr/hash/1.cc: Likewise.\n+\n 2010-06-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/appendix_contributing.xml: Indent code examples"}, {"sha": "4f87dd459cfd60ef8c20a681587b068647b28f42", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -514,6 +514,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  std::forward<_Args>(__args)...);\n     }\n \n+  /// std::hash specialization for shared_ptr.\n+  template<typename _Tp>\n+    struct hash<shared_ptr<_Tp>>\n+    : public std::unary_function<shared_ptr<_Tp>, size_t>\n+    {\n+      size_t\n+      operator()(const shared_ptr<_Tp>& __s) const\n+      { return std::hash<_Tp*>()(__s.get()); }\n+    };\n+\n   // @} group pointer_abstractions\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "0a69d2b2411b6ed9c74e209c1510075494f86b5b", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -1164,6 +1164,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t std::forward<_Args>(__args)...);\n     }\n \n+  /// std::hash specialization for __shared_ptr.\n+  template<typename _Tp, _Lock_policy _Lp>\n+    struct hash<__shared_ptr<_Tp, _Lp>>\n+    : public std::unary_function<__shared_ptr<_Tp, _Lp>, size_t>\n+    {\n+      size_t\n+      operator()(const __shared_ptr<_Tp, _Lp>& __s) const\n+      { return std::hash<_Tp*>()(__s.get()); }\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif // _SHARED_PTR_BASE_H"}, {"sha": "ac62ff7f3041a6f1037f63bd62376acec68fb956", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -233,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n-  template<typename _Tp, typename _Tp_Deleter> \n+  template<typename _Tp, typename _Tp_Deleter>\n     class unique_ptr<_Tp[], _Tp_Deleter>\n     {\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n@@ -444,6 +444,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const unique_ptr<_Up, _Up_Deleter>& __y)\n     { return !(__x.get() < __y.get()); }\n \n+  /// std::hash specialization for unique_ptr.\n+  template<typename _Tp, typename _Tp_Deleter>\n+    struct hash<unique_ptr<_Tp, _Tp_Deleter>>\n+    : public std::unary_function<unique_ptr<_Tp, _Tp_Deleter>, size_t>\n+    {\n+      size_t\n+      operator()(const unique_ptr<_Tp, _Tp_Deleter>& __u) const\n+      {\n+\ttypedef unique_ptr<_Tp, _Tp_Deleter> _UP;\n+\treturn std::hash<typename _UP::pointer>()(__u.get());\n+      }\n+    };\n+\n   // @} group pointer_abstractions\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "93f4739d78261b5a4167f93ff9e9dbba84e32863", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/hash/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fhash%2F1.cc?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  struct T { };\n+\n+  std::shared_ptr<T>                s0(new T);\n+  std::hash<std::shared_ptr<T>>     hs0;\n+  std::hash<T*>                     hp0;\n+\n+  VERIFY( hs0(s0) == hp0(s0.get()) );\n+\n+  std::__shared_ptr<T>              s1(new T);\n+  std::hash<std::__shared_ptr<T>>   hs1;\n+  std::hash<T*>                     hp1;\n+\n+  VERIFY( hs1(s1) == hp1(s1.get()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "53ece26ecff7216d6a13081cda24366a408f9c88", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/hash/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e788cc09b06d66038cc6cbe2082e832a7ebefd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc?ref=b0e788cc09b06d66038cc6cbe2082e832a7ebefd", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  struct T { };\n+\n+  std::unique_ptr<T>                                 u0(new T);\n+  std::hash<std::unique_ptr<T>>                      hu0;\n+  std::hash<typename std::unique_ptr<T>::pointer>    hp0;\n+\n+  VERIFY( hu0(u0) == hp0(u0.get()) );\n+\n+  std::unique_ptr<T[]>                               u1(new T[10]);\n+  std::hash<std::unique_ptr<T[]>>                    hu1;\n+  std::hash<typename std::unique_ptr<T[]>::pointer>  hp1;\n+\n+  VERIFY( hu1(u1) == hp1(u1.get()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}