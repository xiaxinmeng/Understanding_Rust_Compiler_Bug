{"sha": "21d13d8372447885e205a86f4b1c41d437d6dd1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkMTNkODM3MjQ0Nzg4NWUyMDVhODZmNGIxYzQxZDQzN2Q2ZGQxZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-02-12T21:42:28Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-12T21:42:28Z"}, "message": "debug.h (struct gcc_debug_hooks): Add type_decl field.\n\n\t* debug.h (struct gcc_debug_hooks): Add type_decl field.\n\t(debug_nothing_tree_int): Prototype.\n\t(dwarf_debug_hooks): Delete, unused.\n\t* debug.c (do_nothing_debug_hooks): Update.\n\t(debug_nothing_tree_int): New function.\n\t* langhooks.h (struct lang_hooks_for_decls):\n\tRemove builtin_type_decls field.\n\t* langhooks-def.h (LANG_HOOKS_BUILTIN_TYPE_DECLS): Delete.\n\t(LANG_HOOKS_DECLS): Update.\n\t* toplev.c (rest_of_decl_compilation, rest_of_type_compilation):\n\tUse debug_hooks->type_decl.\n\t* dbxout.c (preinit_symbols): New static.\n\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n\t(dbxout_init): Don't call DBX_OUTPUT_STANDARD_TYPES or\n\tlang_hooks.decls.builtin_type_decls.  Do scan preinit_symbols\n\tfor symbols to output.\n\t(dbxout_type_decl): New function.\n\t(dbxout_symbol): If called before dbxout_init has run, queue\n\tthe symbol for later.  Apply DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER\n\tto TYPE_DECLs before emitting them.\n\t* xcoffout.c (assign_type_number): Delete.\n\t(xcoff_type_numbers): New static table.\n\t(xcoff_assign_fundamental_type_number): New function.\n\t* xcoffout.h: Define DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER, not\n\tDBX_OUTPUT_STANDARD_TYPES.  Remove unnecessary #ifdefs.\n\t* sdbout.c: Include varray.h.\n\t(deferred_global_decls): New static.\n\t(sdb_debug_hooks): Update.\n\t(sdbout_global_decl): If we can't emit something right now,\n\tremember it in deferred_global_decls.\n\t(sdbout_finish): Just scan deferred_global_decls; don't call getdecls.\n\t(sdbout_init): Initialize deferred_global_decls.\n\t* Makefile.in: Update dependencies of sdbout.o.\n\t* dwarf2out.c (dwarf2out_type_decl): New function.\n\t(dwarf2_debug_hooks): Update.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Update.\n\t* c-decl.c (getdecls): Just return 0.\n\t(check_for_loop_decls): Don't use getdecls.\n\t(record_builtin_type): Call debug_hooks->type_decl on the TYPE_DECL.\n\t* c-objc-common.c (c_objc_common_finish_file): Don't use getdecls.\ncp:\n\t* cp-lang.c: Don't define LANG_HOOKS_BUILTIN_TYPE_DECLS.\n\t* cp-tree.h: Don't declare cxx_builtin_type_decls.\n\t* decl.c (builtin_type_decls, cxx_builtin_type_decls): Delete.\n\t(record_builtin_type): Call debug_hooks->type_decl on the TYPE_DECL.\n\nFrom-SVN: r77730", "tree": {"sha": "cfa7bbb13d0bfc85e73ea5724b507a1d241d14d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa7bbb13d0bfc85e73ea5724b507a1d241d14d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d13d8372447885e205a86f4b1c41d437d6dd1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d13d8372447885e205a86f4b1c41d437d6dd1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d13d8372447885e205a86f4b1c41d437d6dd1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d13d8372447885e205a86f4b1c41d437d6dd1e/comments", "author": null, "committer": null, "parents": [{"sha": "3c419fd66aac3fbb17911c838fa47918548a15b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c419fd66aac3fbb17911c838fa47918548a15b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c419fd66aac3fbb17911c838fa47918548a15b9"}], "stats": {"total": 413, "additions": 219, "deletions": 194}, "files": [{"sha": "9d75e321b452d7ffbfc3c651c9944bcf62cd328b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -1,3 +1,46 @@\n+2004-02-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* debug.h (struct gcc_debug_hooks): Add type_decl field.\n+\t(debug_nothing_tree_int): Prototype.\n+\t(dwarf_debug_hooks): Delete, unused.\n+\t* debug.c (do_nothing_debug_hooks): Update.\n+\t(debug_nothing_tree_int): New function.\n+\t* langhooks.h (struct lang_hooks_for_decls):\n+\tRemove builtin_type_decls field.\n+\t* langhooks-def.h (LANG_HOOKS_BUILTIN_TYPE_DECLS): Delete.\n+\t(LANG_HOOKS_DECLS): Update.\n+\t* toplev.c (rest_of_decl_compilation, rest_of_type_compilation):\n+\tUse debug_hooks->type_decl.\n+\t* dbxout.c (preinit_symbols): New static.\n+\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n+\t(dbxout_init): Don't call DBX_OUTPUT_STANDARD_TYPES or\n+\tlang_hooks.decls.builtin_type_decls.  Do scan preinit_symbols\n+\tfor symbols to output.\n+\t(dbxout_type_decl): New function.\n+\t(dbxout_symbol): If called before dbxout_init has run, queue\n+\tthe symbol for later.  Apply DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER\n+\tto TYPE_DECLs before emitting them.\n+\t* xcoffout.c (assign_type_number): Delete.\n+\t(xcoff_type_numbers): New static table.\n+\t(xcoff_assign_fundamental_type_number): New function.\n+\t* xcoffout.h: Define DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER, not\n+\tDBX_OUTPUT_STANDARD_TYPES.  Remove unnecessary #ifdefs.\n+\t* sdbout.c: Include varray.h.\n+\t(deferred_global_decls): New static.\n+\t(sdb_debug_hooks): Update.\n+\t(sdbout_global_decl): If we can't emit something right now,\n+\tremember it in deferred_global_decls.\n+\t(sdbout_finish): Just scan deferred_global_decls; don't call getdecls.\n+\t(sdbout_init): Initialize deferred_global_decls.\n+\t* Makefile.in: Update dependencies of sdbout.o.\n+\t* dwarf2out.c (dwarf2out_type_decl): New function.\n+\t(dwarf2_debug_hooks): Update.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Update.\n+\t* c-decl.c (getdecls): Just return 0.\n+\t(check_for_loop_decls): Don't use getdecls.\n+\t(record_builtin_type): Call debug_hooks->type_decl on the TYPE_DECL.\n+\t* c-objc-common.c (c_objc_common_finish_file): Don't use getdecls.\n+\n 2004-02-12  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_sched_reorder2): Remove."}, {"sha": "22640847394a4508344553efe345882a5d68db7a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -1605,10 +1605,10 @@ dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\\n    $(GGC_H) gt-dbxout.h\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n-   flags.h function.h $(EXPR_H) output.h hard-reg-set.h $(REGS_H) real.h \\\n-   insn-config.h xcoffout.h c-pragma.h $(GGC_H) $(TARGET_H) \\\n-   sdbout.h toplev.h $(TM_P_H) except.h debug.h langhooks.h gt-sdbout.h\n+sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n+   $(TREE_H) $(GGC_H) varray.h $(RTL_H) $(REGS_H) flags.h insn-config.h \\\n+   output.h toplev.h $(TM_P_H) gsyms.h langhooks.h $(TARGET_H) sdbout.h \\\n+   gt-sdbout.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) dwarf2.h debug.h flags.h insn-config.h reload.h \\\n    output.h $(DIAGNOSTIC_H) real.h hard-reg-set.h $(REGS_H) $(EXPR_H) \\"}, {"sha": "0487e03d0c9c48815bc1214a2a6560fcc7a95f86", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -2056,12 +2056,13 @@ define_label (location_t location, tree name)\n   return label;\n }\n \f\n-/* Return the list of declarations of the current scope.  */\n+/* Return the list of declarations of the current scope.\n+   This hook is optional and not implemented for C.  */\n \n tree\n getdecls (void)\n {\n-  return current_scope->names;\n+  return 0;\n }\n \n \f\n@@ -6197,7 +6198,7 @@ check_for_loop_decls (void)\n         }\n     }\n \n-  for (t = getdecls (); t; t = TREE_CHAIN (t))\n+  for (t = current_scope->names; t; t = TREE_CHAIN (t))\n     {\n       if (TREE_CODE (t) != VAR_DECL && DECL_NAME (t))\n \terror (\"%Jdeclaration of non-variable '%D' in 'for' loop \"\n@@ -6380,11 +6381,14 @@ void\n record_builtin_type (enum rid rid_index, const char *name, tree type)\n {\n   tree id;\n+  tree tdecl;\n   if (name == 0)\n     id = ridpointers[(int) rid_index];\n   else\n     id = get_identifier (name);\n-  pushdecl (build_decl (TYPE_DECL, id, type));\n+  tdecl = build_decl (TYPE_DECL, id, type);\n+  pushdecl (tdecl);\n+  debug_hooks->type_decl (tdecl, 0);\n }\n \n /* Build the void_list_node (void_type_node having been created).  */"}, {"sha": "d011ef4f5af9403d97c798acae0d015cf59ceebb", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -265,17 +265,6 @@ c_objc_common_finish_file (void)\n \n       finish_cdtor (body);\n     }\n-\n-  {\n-    int flags;\n-    FILE *stream = dump_begin (TDI_all, &flags);\n-\n-    if (stream)\n-      {\n-\tdump_node (getdecls (), flags & ~TDF_SLIM, stream);\n-\tdump_end (TDI_all, stream);\n-      }\n-  }\n }\n \n /* Called during diagnostic message formatting process to print a"}, {"sha": "c7ddf37efc508d994e1307dd9ab0a1d8b4835e3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -1,3 +1,10 @@\n+2004-02-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cp-lang.c: Don't define LANG_HOOKS_BUILTIN_TYPE_DECLS.\n+\t* cp-tree.h: Don't declare cxx_builtin_type_decls.\n+\t* decl.c (builtin_type_decls, cxx_builtin_type_decls): Delete.\n+\t(record_builtin_type): Call debug_hooks->type_decl on the TYPE_DECL.\n+\n 2004-02-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* typeck.c (lookup_destructor): Fix typo in error message."}, {"sha": "eda846826793f0a400edbf6a167a88f0c5d30394", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -102,8 +102,6 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n-#undef LANG_HOOKS_BUILTIN_TYPE_DECLS\n-#define LANG_HOOKS_BUILTIN_TYPE_DECLS cxx_builtin_type_decls\n #undef LANG_HOOKS_PUSHLEVEL\n #define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n #undef LANG_HOOKS_POPLEVEL"}, {"sha": "91997270c9e210ece2aea6317da3c122f7cf50fa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -3707,7 +3707,6 @@ extern void register_dtor_fn                    (tree);\n extern tmpl_spec_kind current_tmpl_spec_kind    (int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n extern tree check_elaborated_type_specifier     (enum tag_types, tree, bool);\n-extern tree cxx_builtin_type_decls              (void);\n extern void warn_extern_redeclared_static (tree, tree);\n \n extern bool have_extern_spec;"}, {"sha": "a343e6ac357115e100cefdd9c5fd54788c20cefd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -2748,18 +2748,6 @@ make_unbound_class_template (tree context, tree name, tsubst_flags_t complain)\n \n \f\n \n-/* A chain of TYPE_DECLs for the builtin types.  */\n-\n-static GTY(()) tree builtin_type_decls;\n-\n-/* Return a chain of TYPE_DECLs for the builtin types.  */\n-\n-tree\n-cxx_builtin_type_decls (void)\n-{\n-  return builtin_type_decls;\n-}\n-\n /* Push the declarations of builtin types into the namespace.\n    RID_INDEX is the index of the builtin type in the array\n    RID_POINTERS.  NAME is the name used when looking up the builtin\n@@ -2803,10 +2791,7 @@ record_builtin_type (enum rid rid_index,\n     TYPE_NAME (type) = tdecl;\n \n   if (tdecl)\n-    {\n-      TREE_CHAIN (tdecl) = builtin_type_decls;\n-      builtin_type_decls = tdecl;\n-    }\n+    debug_hooks->type_decl (tdecl, 0);\n }\n \n /* Record one of the standard Java types."}, {"sha": "0fe6c0bd2c8a76aae28d08fd804b5d7e116c3afa", "filename": "gcc/dbxout.c", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -179,6 +179,12 @@ static GTY(()) int typevec_len;\n \n static GTY(()) int next_type_number;\n \n+/* The C front end may call dbxout_symbol before dbxout_init runs.\n+   We save all such decls in this list and output them when we get\n+   to dbxout_init.  */\n+\n+static GTY(()) tree preinit_symbols;\n+\n enum binclstatus {BINCL_NOT_REQUIRED, BINCL_PENDING, BINCL_PROCESSED};\n \n /* When using N_BINCL in dbx output, each type number is actually a\n@@ -371,6 +377,7 @@ static void dbxout_begin_function (tree);\n static void dbxout_begin_block (unsigned, unsigned);\n static void dbxout_end_block (unsigned, unsigned);\n static void dbxout_function_decl (tree);\n+static void dbxout_type_decl (tree, int);\n \n const struct gcc_debug_hooks dbx_debug_hooks =\n {\n@@ -396,6 +403,7 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   debug_nothing_int,\t\t         /* end_function */\n   dbxout_function_decl,\n   dbxout_global_decl,\t\t         /* global_decl */\n+  dbxout_type_decl,\t\t\t /* type_decl */\n   debug_nothing_tree_tree,               /* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n@@ -425,6 +433,7 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   xcoffout_end_function,\n   debug_nothing_tree,\t\t         /* function_decl */\n   dbxout_global_decl,\t\t         /* global_decl */\n+  dbxout_type_decl,\t\t\t /* type_decl */\n   debug_nothing_tree_tree,               /* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n@@ -537,22 +546,20 @@ dbxout_init (const char *input_file_name)\n   current_file->pending_bincl_name = NULL;\n #endif\n \n-  /* Make sure that types `int' and `char' have numbers 1 and 2.\n-     Definitions of other integer types will refer to those numbers.\n-     (Actually it should no longer matter what their numbers are.\n-     Also, if any types with tags have been defined, dbxout_symbol\n-     will output them first, so the numbers won't be 1 and 2.  That\n-     happens in C++.  So it's a good thing it should no longer matter).  */\n-\n-#ifdef DBX_OUTPUT_STANDARD_TYPES\n-  DBX_OUTPUT_STANDARD_TYPES (syms);\n-#endif\n-\n   /* Get all permanent types that have typedef names, and output them\n      all, except for those already output.  Some language front ends\n-     put these declarations in the top-level scope; some do not.  */\n-  dbxout_typedefs ((*lang_hooks.decls.builtin_type_decls) ());\n+     put these declarations in the top-level scope; some do not;\n+     the latter are responsible for calling debug_hooks->type_decl from\n+     their record_builtin_type function.  */\n   dbxout_typedefs (syms);\n+\n+  if (preinit_symbols)\n+    {\n+      tree t;\n+      for (t = nreverse (preinit_symbols); t; t = TREE_CHAIN (t))\n+\tdbxout_symbol (TREE_VALUE (t), 0);\n+      preinit_symbols = 0;\n+    }\n }\n \n /* Output any typedef names for types described by TYPE_DECLs in SYMS.  */\n@@ -805,6 +812,14 @@ dbxout_global_decl (tree decl)\n     }\n }\n \n+/* This is just a function-type adapter; dbxout_symbol does exactly\n+   what we want but returns an int.  */\n+static void\n+dbxout_type_decl (tree decl, int local)\n+{\n+  dbxout_symbol (decl, local);\n+}\n+\n /* At the end of compilation, finish writing the symbol table.\n    Unless you define DBX_OUTPUT_MAIN_SOURCE_FILE_END, the default is\n    to do nothing.  */\n@@ -2064,14 +2079,22 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n      symbol nodees are flagged with TREE_USED.  Ignore any that\n      aren't flaged as TREE_USED.  */\n \n+  if (flag_debug_only_used_symbols\n+      && (!TREE_USED (decl)\n+          && (TREE_CODE (decl) != VAR_DECL || !DECL_INITIAL (decl))))\n+    DBXOUT_DECR_NESTING_AND_RETURN (0);\n+\n+  /* If dbxout_init has not yet run, queue this symbol for later.  */\n+  if (!typevec)\n+    {\n+      preinit_symbols = tree_cons (0, decl, preinit_symbols);\n+      DBXOUT_DECR_NESTING_AND_RETURN (0);\n+    }\n+\n   if (flag_debug_only_used_symbols)\n     {\n       tree t;\n \n-      if (!TREE_USED (decl)\n-          && (TREE_CODE (decl) != VAR_DECL || !DECL_INITIAL (decl)))\n-        DBXOUT_DECR_NESTING_AND_RETURN (0);\n-\n       /* We now have a used symbol.  We need to generate the info for\n          the symbol's type in addition to the symbol itself.  These\n          type symbols are queued to be generated after were done with\n@@ -2175,6 +2198,20 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n       if (TREE_ASM_WRITTEN (decl) || TYPE_DECL_SUPPRESS_DEBUG (decl))\n \tDBXOUT_DECR_NESTING_AND_RETURN (0);\n \n+      /* Don't output typedefs for types with magic type numbers (XCOFF).  */\n+#ifdef DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER\n+      {\n+\tint fundamental_type_number =\n+\t  DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER (decl);\n+\n+\tif (fundamental_type_number != 0)\n+\t  {\n+\t    TREE_ASM_WRITTEN (decl) = 1;\n+\t    TYPE_SYMTAB_ADDRESS (TREE_TYPE (decl)) = fundamental_type_number;\n+\t    DBXOUT_DECR_NESTING_AND_RETURN (0);\n+\t  }\n+      }\n+#endif\n       FORCE_TEXT;\n       result = 1;\n       {"}, {"sha": "812920604ba636a5f13b39824c42e6a88b2e8fe2", "filename": "gcc/debug.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -41,6 +41,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int,\t\t         /* end_function */\n   debug_nothing_tree,\t\t         /* function_decl */\n   debug_nothing_tree,\t\t         /* global_decl */\n+  debug_nothing_tree_int,\t\t /* type_decl */\n   debug_nothing_tree_tree,               /* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n@@ -100,3 +101,9 @@ debug_nothing_int_int (unsigned int line ATTRIBUTE_UNUSED,\n \t\t       unsigned int n ATTRIBUTE_UNUSED)\n {\n }\n+\n+void\n+debug_nothing_tree_int (tree decl ATTRIBUTE_UNUSED,\n+\t\t\tint local ATTRIBUTE_UNUSED)\n+{\n+}"}, {"sha": "547b7f68eab209d864e69d70a2e2b798fe463aa2", "filename": "gcc/debug.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -89,6 +89,14 @@ struct gcc_debug_hooks\n      compilation proper has finished.  */\n   void (* global_decl) (tree decl);\n \n+  /* Debug information for a type DECL.  Called from toplev.c after\n+     compilation proper, also from various language front ends to\n+     record built-in types.  The second argument is properly a\n+     boolean, which indicates whether or not the type is a \"local\"\n+     type as determined by the language.  (It's not a boolean for\n+     legacy reasons.)  */\n+  void (* type_decl) (tree decl, int local);\n+\n   /* Debug information for imported modules and declarations.  */\n   void (* imported_module_or_decl) (tree decl, tree context);\n \n@@ -122,6 +130,7 @@ extern void debug_nothing_int_charstar (unsigned int, const char *);\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);\n+extern void debug_nothing_tree_int (tree, int);\n extern void debug_nothing_tree_tree (tree, tree);\n extern bool debug_true_tree (tree);\n extern void debug_nothing_rtx (rtx);\n@@ -131,7 +140,6 @@ extern const struct gcc_debug_hooks do_nothing_debug_hooks;\n extern const struct gcc_debug_hooks dbx_debug_hooks;\n extern const struct gcc_debug_hooks sdb_debug_hooks;\n extern const struct gcc_debug_hooks xcoff_debug_hooks;\n-extern const struct gcc_debug_hooks dwarf_debug_hooks;\n extern const struct gcc_debug_hooks dwarf2_debug_hooks;\n extern const struct gcc_debug_hooks vmsdbg_debug_hooks;\n "}, {"sha": "91a4705021e3fe3ebd8b49f94236ba7c4a1b379a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -3249,6 +3249,7 @@ static void dwarf2out_begin_block (unsigned, unsigned);\n static void dwarf2out_end_block (unsigned, unsigned);\n static bool dwarf2out_ignore_block (tree);\n static void dwarf2out_global_decl (tree);\n+static void dwarf2out_type_decl (tree, int);\n static void dwarf2out_imported_module_or_decl (tree, tree);\n static void dwarf2out_abstract_function (tree);\n static void dwarf2out_var_location (rtx);\n@@ -3275,6 +3276,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   debug_nothing_int,\t\t/* end_function */\n   dwarf2out_decl,\t\t/* function_decl */\n   dwarf2out_global_decl,\n+  dwarf2out_type_decl,\t\t/* type_decl */\n   dwarf2out_imported_module_or_decl,\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   /* The DWARF 2 backend tries to reduce debugging bloat by not\n@@ -12494,6 +12496,15 @@ dwarf2out_global_decl (tree decl)\n     dwarf2out_decl (decl);\n }\n \n+/* Output debug information for type decl DECL.  Called from toplev.c\n+   and from language front ends (to record built-in types).  */\n+static void\n+dwarf2out_type_decl (tree decl, int local)\n+{\n+  if (!local)\n+    dwarf2out_decl (decl);\n+}\n+\n /* Output debug information for imported module or decl.  */ \n  \n static void"}, {"sha": "7d66437af030d6003ab16a76b086ffed0ca6b451", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -242,7 +242,6 @@ extern int lhd_tree_dump_type_quals (tree);\n #define LANG_HOOKS_SET_BLOCK\tset_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n-#define LANG_HOOKS_BUILTIN_TYPE_DECLS lhd_return_null_tree_v\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE NULL\n@@ -256,7 +255,6 @@ extern int lhd_tree_dump_type_quals (tree);\n   LANG_HOOKS_SET_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n-  LANG_HOOKS_BUILTIN_TYPE_DECLS, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE, \\"}, {"sha": "f2c879afd2c216c03a513c924b8636bda99fbc70", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -189,9 +189,6 @@ struct lang_hooks_for_decls\n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) (void);\n \n-  /* Returns a chain of TYPE_DECLs for built-in types.  */\n-  tree (*builtin_type_decls) (void);\n-\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (tree);"}, {"sha": "56cebba59361d091b9efe30a3290556a2299c885", "filename": "gcc/sdbout.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -48,6 +48,7 @@ AT&T C compiler.  From the example below I would conclude the following:\n #include \"debug.h\"\n #include \"tree.h\"\n #include \"ggc.h\"\n+#include \"varray.h\"\n \n static GTY(()) tree anonymous_types;\n \n@@ -59,6 +60,10 @@ static GTY(()) int sdbout_source_line_counter;\n \n static GTY(()) int unnamed_struct_number;\n \n+/* Declarations whose debug info was deferred till end of compilation.  */\n+\n+static GTY(()) varray_type deferred_global_decls;\n+\n #ifdef SDB_DEBUGGING_INFO\n \n #include \"rtl.h\"\n@@ -331,6 +336,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_end_function,\t\t         /* end_function */\n   debug_nothing_tree,\t\t         /* function_decl */\n   sdbout_global_decl,\t\t         /* global_decl */\n+  sdbout_type_decl,\t\t\t /* type_decl */\n   debug_nothing_tree_tree,               /* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n@@ -1438,6 +1444,8 @@ sdbout_global_decl (tree decl)\n \t sdbout_finish ().  */\n       if (!DECL_INITIAL (decl) || !TREE_PUBLIC (decl))\n \tsdbout_symbol (decl, 0);\n+      else\n+\tVARRAY_PUSH_TREE (deferred_global_decls, decl);\n \n       /* Output COFF information for non-global file-scope initialized\n \t variables.  */\n@@ -1452,29 +1460,12 @@ sdbout_global_decl (tree decl)\n static void\n sdbout_finish (const char *main_filename ATTRIBUTE_UNUSED)\n {\n-  tree decl = (*lang_hooks.decls.getdecls) ();\n-  unsigned int len = list_length (decl);\n-  tree *vec = xmalloc (sizeof (tree) * len);\n-  unsigned int i;\n+  int i;\n \n-  /* Process the decls in reverse order--earliest first.  Put them\n-     into VEC from back to front, then take out from front.  */\n+  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_global_decls); i++)\n+    sdbout_symbol (VARRAY_TREE (deferred_global_decls, i), 0);\n \n-  for (i = 0; i < len; i++, decl = TREE_CHAIN (decl))\n-    vec[len - i - 1] = decl;\n-\n-  for (i = 0; i < len; i++)\n-    {\n-      decl = vec[i];\n-      if (TREE_CODE (decl) == VAR_DECL\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && DECL_INITIAL (decl)\n-\t  && TREE_PUBLIC (decl)\n-\t  && DECL_RTL_SET_P (decl))\n-\tsdbout_symbol (decl, 0);\n-    }\n-\n-  free (vec);\n+  VARRAY_FREE (deferred_global_decls);\n }\n \n /* Describe the beginning of an internal block within a function.\n@@ -1677,6 +1668,8 @@ sdbout_init (const char *input_file_name ATTRIBUTE_UNUSED)\n   current_file->next = NULL;\n   current_file->name = input_file_name;\n #endif\n+\n+  VARRAY_TREE_INIT (deferred_global_decls, 12, \"deferred_global_decls\");\n }\n \n #else  /* SDB_DEBUGGING_INFO */"}, {"sha": "763c5d024babcfc431a9fb46ee53a3746aec27f0", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -1978,71 +1978,26 @@ rest_of_decl_compilation (tree decl,\n \t    expand_decl (decl);\n \t}\n     }\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-  else if ((write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\t   && TREE_CODE (decl) == TYPE_DECL)\n+  else if (TREE_CODE (decl) == TYPE_DECL)\n     {\n       timevar_push (TV_SYMOUT);\n-      dbxout_symbol (decl, 0);\n+      debug_hooks->type_decl (decl, !top_level);\n       timevar_pop (TV_SYMOUT);\n     }\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  else if (write_symbols == SDB_DEBUG && top_level\n-\t   && TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      timevar_push (TV_SYMOUT);\n-      sdbout_symbol (decl, 0);\n-      timevar_pop (TV_SYMOUT);\n-    }\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-  else if ((write_symbols == DWARF2_DEBUG\n-\t   || write_symbols == VMS_AND_DWARF2_DEBUG)\n-\t   && top_level\n-\t   && TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      timevar_push (TV_SYMOUT);\n-      dwarf2out_decl (decl);\n-      timevar_pop (TV_SYMOUT);\n-    }\n-#endif\n }\n \n /* Called after finishing a record, union or enumeral type.  */\n \n void\n-rest_of_type_compilation (\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\t\\\n-    || defined (SDB_DEBUGGING_INFO) || defined (DWARF2_DEBUGGING_INFO)\n-\t\t\t  tree type,\n-\t\t\t  int toplev\n-#else\n-\t\t\t  tree type ATTRIBUTE_UNUSED,\n-\t\t\t  int toplev ATTRIBUTE_UNUSED\n-#endif\n-\t\t\t  )\n+rest_of_type_compilation (tree type, int toplev)\n {\n   /* Avoid confusing the debug information machinery when there are\n      errors.  */\n   if (errorcount != 0 || sorrycount != 0)\n     return;\n \n   timevar_push (TV_SYMOUT);\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-    dbxout_symbol (TYPE_STUB_DECL (type), !toplev);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_symbol (TYPE_STUB_DECL (type), !toplev);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if ((write_symbols == DWARF2_DEBUG\n-       || write_symbols == VMS_AND_DWARF2_DEBUG)\n-      && toplev)\n-    dwarf2out_decl (TYPE_STUB_DECL (type));\n-#endif\n+  debug_hooks->type_decl (TYPE_STUB_DECL (type), !toplev);\n   timevar_pop (TV_SYMOUT);\n }\n "}, {"sha": "f0b49f6f6c60aa999573c6b9cd6983148338ce0b", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -186,6 +186,7 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_end_function,\n    vmsdbgout_decl,\n    vmsdbgout_global_decl,\n+   debug_nothing_tree_int,\t  /* type_decl */\n    debug_nothing_tree_tree,       /* imported_module_or_decl */\n    debug_nothing_tree,\t\t  /* deferred_inline_function */\n    vmsdbgout_abstract_function,"}, {"sha": "447da746ac40c56333b7ecf94488901710afc470", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -112,59 +112,71 @@ const char *xcoff_lastfile;\n #define ASM_OUTPUT_LBE(FILE,LINENUM,BLOCKNUM) \\\n   fprintf (FILE, \"\\t.eb\\t%d\\n\", ABS_OR_RELATIVE_LINENO (LINENUM))\n \n-static void assign_type_number (tree, const char *, int);\n static void xcoffout_block (tree, int, tree);\n static void xcoffout_source_file (FILE *, const char *, int);\n \f\n /* Support routines for XCOFF debugging info.  */\n \n-/* Assign NUMBER as the stabx type number for the type described by NAME.\n-   Search all decls in the list SYMS to find the type NAME.  */\n-\n-static void\n-assign_type_number (tree syms, const char *name, int number)\n+struct xcoff_type_number\n {\n-  tree decl;\n-\n-  for (decl = syms; decl; decl = TREE_CHAIN (decl))\n-    if (DECL_NAME (decl)\n-\t&& strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)), name) == 0)\n-      {\n-\tTREE_ASM_WRITTEN (decl) = 1;\n-\tTYPE_SYMTAB_ADDRESS (TREE_TYPE (decl)) = number;\n-      }\n-}\n-\n-/* Setup gcc primitive types to use the XCOFF built-in type numbers where\n-   possible.  */\n-\n-void\n-xcoff_output_standard_types (tree syms)\n-{\n-  /* Handle built-in C types here.  */\n-\n-  assign_type_number (syms, \"int\", -1);\n-  assign_type_number (syms, \"char\", -2);\n-  assign_type_number (syms, \"short int\", -3);\n-  assign_type_number (syms, \"long int\", (TARGET_64BIT ? -31 : -4));\n-  assign_type_number (syms, \"unsigned char\", -5);\n-  assign_type_number (syms, \"signed char\", -6);\n-  assign_type_number (syms, \"short unsigned int\", -7);\n-  assign_type_number (syms, \"unsigned int\", -8);\n+  const char *name;\n+  int number;\n+};\n+static const struct xcoff_type_number xcoff_type_numbers[] = {\n+  { \"int\", -1 },\n+  { \"char\", -2 },\n+  { \"short int\", -3 },\n+  { \"long int\", -4 },  /* fiddled to -31 if 64 bits */\n+  { \"unsigned char\", -5 },\n+  { \"signed char\", -6 },\n+  { \"short unsigned int\", -7 },\n+  { \"unsigned int\", -8 },\n   /* No such type \"unsigned\".  */\n-  assign_type_number (syms, \"long unsigned int\", (TARGET_64BIT ? -32 : -10));\n-  assign_type_number (syms, \"void\", -11);\n-  assign_type_number (syms, \"float\", -12);\n-  assign_type_number (syms, \"double\", -13);\n-  assign_type_number (syms, \"long double\", -14);\n+  { \"long unsigned int\", -10 }, /* fiddled to -32 if 64 bits */\n+  { \"void\", -11 },\n+  { \"float\", -12 },\n+  { \"double\", -13 },\n+  { \"long double\", -14 },\n   /* Pascal and Fortran types run from -15 to -29.  */\n-  assign_type_number (syms, \"wchar\", -30);\n-  assign_type_number (syms, \"long long int\", -31);\n-  assign_type_number (syms, \"long long unsigned int\", -32);\n+  { \"wchar\", -30 },  /* XXX Should be \"wchar_t\" ? */\n+  { \"long long int\", -31 },\n+  { \"long long unsigned int\", -32 },\n   /* Additional Fortran types run from -33 to -37.  */\n \n   /* ??? Should also handle built-in C++ and Obj-C types.  There perhaps\n      aren't any that C doesn't already have.  */\n+};    \n+\n+/* Returns an XCOFF fundamental type number for DECL (assumed to be a\n+   TYPE_DECL), or 0 if dbxout.c should assign a type number normally.  */\n+int\n+xcoff_assign_fundamental_type_number (tree decl)\n+{\n+  const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n+  size_t i;\n+\n+  /* Do not waste time searching the list for non-intrinsic types.  */\n+  if (DECL_SOURCE_LINE (decl) > 0)\n+    return 0;\n+\n+  /* Linear search, blech, but the list is too small to bother\n+     doing anything else.  */\n+  for (i = 0; i < ARRAY_SIZE (xcoff_type_numbers); i++)\n+    if (!strcmp (xcoff_type_numbers[i].name, name))\n+      goto found;\n+  return 0;\n+\n+ found:\n+  /* -4 and -10 should be replaced with -31 and -32, respectively,\n+     when used for a 64-bit type.  */\n+  if (int_size_in_bytes (TREE_TYPE (decl)) == 8)\n+    {\n+      if (xcoff_type_numbers[i].number == -4)\n+\treturn -31;\n+      if (xcoff_type_numbers[i].number == -10)\n+\treturn -32;\n+    }\n+  return xcoff_type_numbers[i].number;\n }\n \n /* Print an error message for unrecognized stab codes.  */"}, {"sha": "1a0cf652c48e239b20f2e71f785c4e228cef50b2", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d13d8372447885e205a86f4b1c41d437d6dd1e/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=21d13d8372447885e205a86f4b1c41d437d6dd1e", "patch": "@@ -29,15 +29,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Use the XCOFF predefined type numbers.  */\n \n-/* ??? According to metin, typedef stabx must go in text control section,\n-   but he did not make this changes everywhere where such typedef stabx\n-   can be emitted, so it is really needed or not?  */\n-\n-#define DBX_OUTPUT_STANDARD_TYPES(SYMS)\t\t\\\n-{\t\t\t\t\t\t\\\n-  text_section ();\t\t\t\t\\\n-  xcoff_output_standard_types (SYMS);\t\t\\\n-}\n+#define DBX_ASSIGN_FUNDAMENTAL_TYPE_NUMBER(TYPE) \\\n+  xcoff_assign_fundamental_type_number (TYPE)\n \n /* Any type with a negative type index has already been output.  */\n \n@@ -183,23 +176,11 @@ extern const char *xcoff_lastfile;\n /* Prototype functions in xcoffout.c.  */\n \n extern int stab_to_sclass (int);\n-#ifdef BUFSIZ\n extern void xcoffout_begin_prologue (unsigned int, const char *);\n extern void xcoffout_begin_block (unsigned, unsigned);\n extern void xcoffout_end_epilogue (unsigned int, const char *);\n extern void xcoffout_end_function (unsigned int);\n extern void xcoffout_end_block (unsigned, unsigned);\n-#endif /* BUFSIZ */\n-\n-#ifdef TREE_CODE\n-extern void xcoff_output_standard_types (tree);\n-#ifdef BUFSIZ\n+extern int xcoff_assign_fundamental_type_number (tree);\n extern void xcoffout_declare_function (FILE *, tree, const char *);\n-#endif /* BUFSIZ */\n-#endif /* TREE_CODE */\n-\n-#ifdef RTX_CODE\n-#ifdef BUFSIZ\n extern void xcoffout_source_line (unsigned int, const char *);\n-#endif /* BUFSIZ */\n-#endif /* RTX_CODE */"}]}