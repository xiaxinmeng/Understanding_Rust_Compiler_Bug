{"sha": "87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjM2ZjZmE2YmJiNWMzNzJkNGUyNzUyNzZkMjFmNjAxZDBiNjJiMA==", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-29T09:21:18Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-29T10:55:06Z"}, "message": "Adjust formatting of acc_get_property tests\n\nlibgomp/\n * testsuite/libgomp.oacc-c-c++-common/acc_get_property.c:\n Adjust to GNU coding style.\n * testsuite/libgomp.oacc-c-c++-common/acc_get_property-aux.c: Likewise.\n * testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c: Likewise.\n * testsuite/libgomp.oacc-c-c++-common/acc_get_property-host.c: Likewise.\n * testsuite/libgomp.oacc-c-c++-common/acc_get_property-nvptx.c: Likewise.", "tree": {"sha": "479a941b519b35685b6fd5556405dbca023a2673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479a941b519b35685b6fd5556405dbca023a2673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/comments", "author": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5ea57959183bd5bd0356739bb5167417401a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5ea57959183bd5bd0356739bb5167417401a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5ea57959183bd5bd0356739bb5167417401a31"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "47285fc7e63bc5b0f327ee2d2b476d76353d3bac", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-aux.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-aux.c?ref=87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "patch": "@@ -7,19 +7,20 @@\n #include <string.h>\n \n \n-void expect_device_string_properties (acc_device_t dev_type, int dev_num,\n-\t\t\t\t      const char* expected_vendor,\n-\t\t\t\t      const char* expected_name,\n-\t\t\t\t      const char* expected_driver)\n+void\n+expect_device_string_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t\t const char* expected_vendor,\n+\t\t\t\t const char* expected_name,\n+\t\t\t\t const char* expected_driver)\n {\n-const char *vendor = acc_get_property_string (dev_num, dev_type,\n-\t\t\t\t\t    acc_property_vendor);\n-if (strcmp (vendor, expected_vendor))\n-{\n-    fprintf (stderr, \"Expected acc_property_vendor to equal \\\"%s\\\", \"\n-\t    \"but was \\\"%s\\\".\\n\", expected_vendor, vendor);\n-    abort ();\n-}\n+  const char *vendor = acc_get_property_string (dev_num, dev_type,\n+\t\t\t\t\t\tacc_property_vendor);\n+  if (strcmp (vendor, expected_vendor))\n+    {\n+      fprintf (stderr, \"Expected acc_property_vendor to equal \\\"%s\\\", \"\n+\t       \"but was \\\"%s\\\".\\n\", expected_vendor, vendor);\n+      abort ();\n+    }\n \n   const char *name = acc_get_property_string (dev_num, dev_type,\n \t\t\t\t\t      acc_property_name);\n@@ -58,8 +59,9 @@ if (strcmp (vendor, expected_vendor))\n     }\n }\n \n-void expect_device_memory (acc_device_t dev_type, int dev_num,\n-\t\t\t   size_t expected_total_memory)\n+void\n+expect_device_memory (acc_device_t dev_type, int dev_num,\n+\t\t      size_t expected_total_memory)\n {\n \n   size_t total_mem = acc_get_property (dev_num, dev_type,\n@@ -83,11 +85,12 @@ void expect_device_memory (acc_device_t dev_type, int dev_num,\n     }\n }\n \n-void expect_device_properties (acc_device_t dev_type, int dev_num,\n-\t\t\t       size_t expected_total_memory,\n-\t\t\t       const char* expected_vendor,\n-\t\t\t       const char* expected_name,\n-\t\t\t       const char* expected_driver)\n+void\n+expect_device_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t  size_t expected_total_memory,\n+\t\t\t  const char* expected_vendor,\n+\t\t\t  const char* expected_name,\n+\t\t\t  const char* expected_driver)\n {\n   expect_device_string_properties (dev_type, dev_num, expected_vendor,\n \t\t\t\t   expected_name, expected_driver);"}, {"sha": "ce59264a60dc84e18356a7a39e76db53f8ad5439", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-gcn.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-gcn.c?ref=87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "patch": "@@ -34,7 +34,8 @@ hsa_status_t (*hsa_init_fn) (void);\n \n char* support_cpu_devices;\n \n-void test_setup ()\n+void\n+test_setup ()\n {\n   char* env_runtime;\n   char* hsa_runtime_lib;\n@@ -68,7 +69,8 @@ void test_setup ()\n   support_cpu_devices = getenv (\"GCN_SUPPORT_CPU_DEVICES\");\n }\n \n-static hsa_status_t check_agent_properties (hsa_agent_t agent, void *dev_num_arg)\n+static hsa_status_t\n+check_agent_properties (hsa_agent_t agent, void *dev_num_arg)\n {\n \n   char name[64];\n@@ -120,7 +122,8 @@ static hsa_status_t check_agent_properties (hsa_agent_t agent, void *dev_num_arg\n   return status;\n }\n \n-int main ()\n+int\n+main ()\n {\n   int dev_num = 0;\n   test_setup ();"}, {"sha": "4ed0dfa8886fedb0f8a2d763e8bc986817a43325", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-host.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-host.c?ref=87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "patch": "@@ -6,12 +6,14 @@\n #include <openacc.h>\n #include <stdio.h>\n \n-void expect_device_properties\n-(acc_device_t dev_type, int dev_num,\n- size_t expected_memory, const char* expected_vendor,\n- const char* expected_name, const char* expected_driver);\n+void expect_device_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t       size_t expected_memory,\n+\t\t\t       const char* expected_vendor,\n+\t\t\t       const char* expected_name,\n+\t\t\t       const char* expected_driver);\n \n-int main()\n+int\n+main ()\n {\n   printf (\"Checking acc_device_host device properties\\n\");\n   expect_device_properties (acc_device_host, 0, 0, \"GNU\", \"GOMP\", \"1.0\");"}, {"sha": "6334cfdd2f7310e0c813da9077900fb4b0388ac5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property-nvptx.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property-nvptx.c?ref=87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "patch": "@@ -11,12 +11,14 @@\n #include <string.h>\n #include <stdio.h>\n \n-void expect_device_properties\n-(acc_device_t dev_type, int dev_num,\n- size_t expected_memory, const char* expected_vendor,\n- const char* expected_name, const char* expected_driver);\n+void expect_device_properties (acc_device_t dev_type, int dev_num,\n+\t\t\t       size_t expected_memory,\n+\t\t\t       const char* expected_vendor,\n+\t\t\t       const char* expected_name,\n+\t\t\t       const char* expected_driver);\n \n-int main ()\n+int\n+main ()\n {\n   int dev_count;\n   cudaGetDeviceCount (&dev_count);\n@@ -29,26 +31,26 @@ int main ()\n \t  abort ();\n \t}\n \n-      printf(\"Checking device %d\\n\", dev_num);\n+      printf (\"Checking device %d\\n\", dev_num);\n \n       const char *vendor = \"Nvidia\";\n       size_t free_mem;\n       size_t total_mem;\n-      if (cudaMemGetInfo(&free_mem, &total_mem) != cudaSuccess)\n+      if (cudaMemGetInfo (&free_mem, &total_mem) != cudaSuccess)\n \t{\n \t  fprintf (stderr, \"cudaMemGetInfo failed.\\n\");\n \t  abort ();\n \t}\n \n       struct cudaDeviceProp p;\n-      if (cudaGetDeviceProperties(&p, dev_num) != cudaSuccess)\n+      if (cudaGetDeviceProperties (&p, dev_num) != cudaSuccess)\n \t{\n \t  fprintf (stderr, \"cudaGetDeviceProperties failed.\\n\");\n \t  abort ();\n \t}\n \n       int driver_version;\n-      if (cudaDriverGetVersion(&driver_version) != cudaSuccess)\n+      if (cudaDriverGetVersion (&driver_version) != cudaSuccess)\n \t{\n \t  fprintf (stderr, \"cudaDriverGetVersion failed.\\n\");\n \t  abort ();\n@@ -63,7 +65,7 @@ int main ()\n \n       /* Note that this check relies on the fact that the device numbering\n \t used by the nvptx plugin agrees with the CUDA device ordering. */\n-      expect_device_properties(acc_device_nvidia, dev_num,\n-\t\t\t       total_mem, vendor, p.name, driver);\n+      expect_device_properties (acc_device_nvidia, dev_num,\n+\t\t\t\ttotal_mem, vendor, p.name, driver);\n     }\n }"}, {"sha": "3460035f0035016940d417d2f887f7335e713f18", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_get_property.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c3fcfa6bbb5c372d4e275276d21f601d0b62b0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_get_property.c?ref=87c3fcfa6bbb5c372d4e275276d21f601d0b62b0", "patch": "@@ -14,7 +14,7 @@\n    and do basic device independent validation. */\n \n void\n-print_device_properties(acc_device_t type)\n+print_device_properties (acc_device_t type)\n {\n   const char *s;\n   size_t v;\n@@ -23,7 +23,7 @@ print_device_properties(acc_device_t type)\n \n   for (int i = 0; i < dev_count; ++i)\n     {\n-      printf(\"  Device %d:\\n\", i+1);\n+      printf (\"  Device %d:\\n\", i+1);\n \n       s = acc_get_property_string (i, type, acc_property_vendor);\n       printf (\"    Vendor: %s\\n\", s);\n@@ -57,19 +57,20 @@ print_device_properties(acc_device_t type)\n     }\n }\n \n-int main ()\n+int\n+main ()\n {\n-  printf(\"acc_device_none:\\n\");\n+  printf (\"acc_device_none:\\n\");\n   /* For completness; not expected to print anything since there\n      should be no devices of this type. */\n-  print_device_properties(acc_device_none);\n+  print_device_properties (acc_device_none);\n \n-  printf(\"acc_device_default:\\n\");\n-  print_device_properties(acc_device_default);\n+  printf (\"acc_device_default:\\n\");\n+  print_device_properties (acc_device_default);\n \n-  printf(\"acc_device_host:\\n\");\n-  print_device_properties(acc_device_host);\n+  printf (\"acc_device_host:\\n\");\n+  print_device_properties (acc_device_host);\n \n-  printf(\"acc_device_not_host:\\n\");\n-  print_device_properties(acc_device_not_host);\n+  printf (\"acc_device_not_host:\\n\");\n+  print_device_properties (acc_device_not_host);\n }"}]}