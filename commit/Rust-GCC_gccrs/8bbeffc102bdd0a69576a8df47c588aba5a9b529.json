{"sha": "8bbeffc102bdd0a69576a8df47c588aba5a9b529", "node_id": "C_kwDOANBUbNoAKDhiYmVmZmMxMDJiZGQwYTY5NTc2YThkZjQ3YzU4OGFiYTVhOWI1Mjk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-28T11:27:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-29T09:06:33Z"}, "message": "libstdc++: Workaround for missing 'using enum' in Clang 12\n\nOnce we no longer care about older compilers without this feature, we\ncan drop these static data members, so the names don't have to be\nvisible at class scope.\n\nlibstdc++-v3/ChangeLog:\n\n\t* libsupc++/compare (_Strong_order) [!__cpp_using_enum]: Add\n\tstatic data members for _Fp_fmt enumerators.", "tree": {"sha": "99207d89a2b9a517caa40ce109fd562b706fca30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99207d89a2b9a517caa40ce109fd562b706fca30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bbeffc102bdd0a69576a8df47c588aba5a9b529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbeffc102bdd0a69576a8df47c588aba5a9b529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbeffc102bdd0a69576a8df47c588aba5a9b529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbeffc102bdd0a69576a8df47c588aba5a9b529/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7255d29c577106c14e42a9c3c88fc6fa6b6e4ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7255d29c577106c14e42a9c3c88fc6fa6b6e4ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7255d29c577106c14e42a9c3c88fc6fa6b6e4ecf"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "e9cf9139deff6855e0b2c70e49f12b632855f27d", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbeffc102bdd0a69576a8df47c588aba5a9b529/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbeffc102bdd0a69576a8df47c588aba5a9b529/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=8bbeffc102bdd0a69576a8df47c588aba5a9b529", "patch": "@@ -677,12 +677,25 @@ namespace std\n \t// TODO: _Bfloat16,\n       };\n \n+#ifndef __cpp_using_enum\n+      // XXX Remove these once 'using enum' support is ubiquitous.\n+      static constexpr _Fp_fmt _Binary16 = _Fp_fmt::_Binary16;\n+      static constexpr _Fp_fmt _Binary32 = _Fp_fmt::_Binary32;\n+      static constexpr _Fp_fmt _Binary64 = _Fp_fmt::_Binary64;\n+      static constexpr _Fp_fmt _Binary128 = _Fp_fmt::_Binary128;\n+      static constexpr _Fp_fmt _X86_80bit = _Fp_fmt::_X86_80bit;\n+      static constexpr _Fp_fmt _M68k_80bit = _Fp_fmt::_M68k_80bit;\n+      static constexpr _Fp_fmt _Dbldbl = _Fp_fmt::_Dbldbl;\n+#endif\n+\n       // Identify the format used by a floating-point type.\n       template<typename _Tp>\n \tstatic consteval _Fp_fmt\n \t_S_fp_fmt() noexcept\n \t{\n+#ifdef __cpp_using_enum\n \t  using enum _Fp_fmt;\n+#endif\n \n \t  // Identify these formats first, then assume anything else is IEEE.\n \t  // N.B. ARM __fp16 alternative format can be handled as binary16.\n@@ -810,7 +823,9 @@ namespace std\n \t    return __builtin_bit_cast(int16_t, __val);\n \t  else\n \t    {\n+#ifdef __cpp_using_enum\n \t      using enum _Fp_fmt;\n+#endif\n \t      constexpr auto __fmt = _S_fp_fmt<_Tp>();\n \t      if constexpr (__fmt == _X86_80bit || __fmt == _M68k_80bit)\n \t\t{\n@@ -862,7 +877,9 @@ namespace std\n \t  if (__ix == __iy)\n \t    return strong_ordering::equal; // All bits are equal, we're done.\n \n+#ifdef __cpp_using_enum\n \t  using enum _Fp_fmt;\n+#endif\n \t  constexpr auto __fmt = _S_fp_fmt<_Tp>();\n \n \t  if constexpr (__fmt == _Dbldbl) // double-double"}]}