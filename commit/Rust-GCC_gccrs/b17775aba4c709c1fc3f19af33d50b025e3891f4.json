{"sha": "b17775aba4c709c1fc3f19af33d50b025e3891f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3Nzc1YWJhNGM3MDljMWZjM2YxOWFmMzNkNTBiMDI1ZTM4OTFmNA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-06T05:35:31Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-06T05:35:31Z"}, "message": "re PR tree-optimization/23128 (VRP fails for unsigned values)\n\n2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR tree-optimization/23128\n        * tree-vrp.c (vrp_int_const_binop): Check if unsigned addition or\n        subtraction wrap, and set TREE_OVERFLOW if they do.\n\nFrom-SVN: r102800", "tree": {"sha": "2e47c97b535d7d1d721621ee6339c61536de7863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e47c97b535d7d1d721621ee6339c61536de7863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17775aba4c709c1fc3f19af33d50b025e3891f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17775aba4c709c1fc3f19af33d50b025e3891f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17775aba4c709c1fc3f19af33d50b025e3891f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17775aba4c709c1fc3f19af33d50b025e3891f4/comments", "author": null, "committer": null, "parents": [{"sha": "099f36ab8c55844ae47def2f3cacaef7d006d441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099f36ab8c55844ae47def2f3cacaef7d006d441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099f36ab8c55844ae47def2f3cacaef7d006d441"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "db61463c1d28cb72321ff448250940f43fc0da31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -1,3 +1,9 @@\n+2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/23128\n+\t* tree-vrp.c (vrp_int_const_binop): Check if unsigned addition or\n+\tsubtraction wrap, and set TREE_OVERFLOW if they do.\n+\n 2005-08-05  Richard Henderson  <rth@redhat.com>\n \n \tPR 21728"}, {"sha": "8b37d466490b6a36b29d93f9bf4c3075c7cbbc39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -1,3 +1,9 @@\n+2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* gcc.c-torture/execute/vrp-5.c: New test.\n+\t* gcc.c-torture/execute/vrp-6.c: New test.\n+\t* gcc.dg/tree-ssa/vrp21.c: New test.\n+\n 2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* g++.dg/parse/pr22514.C: New test."}, {"sha": "8f3c7255a02134d0e4f1e1eec72c95f16e8d2f05", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.c?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -0,0 +1,22 @@\n+extern void exit (int);\n+extern void abort ();\n+\n+void test(unsigned int a, unsigned int b)\n+{\n+  if (a < 5)\n+    abort();\n+  if (b < 5)\n+    abort();\n+  if (a + b != 0U)\n+    abort();\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  unsigned int x = 0x80000000;\n+  test(x, x);\n+  exit (0);\n+}\n+\n+\n+"}, {"sha": "7c6a1750f7d8aae4b5d2068f1ecf640f6f28357a", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.c?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -0,0 +1,33 @@\n+#include <limits.h>\n+\n+extern void exit (int);\n+extern void abort ();\n+\n+void test01(unsigned int a, unsigned int b)\n+{\n+  if (a < 5)\n+    abort();\n+  if (b < 5)\n+    abort();\n+  if (a - b != 5)\n+    abort();\n+}\n+\n+void test02(unsigned int a, unsigned int b)\n+{\n+  if (a >= 12)\n+    if (b > 15)\n+      if (a - b < UINT_MAX - 15U)\n+\tabort ();\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  unsigned x = 0x80000000;\n+  test01(x + 5, x);\n+  test02(14, 16);\n+  exit (0);\n+}\n+\n+\n+"}, {"sha": "3cd817d71e25891a6dada92575944a35383378bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp21.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vrp -fdump-tree-vrp\" } */\n+\n+extern void link_error ();\n+\n+void test01(unsigned int a, unsigned int b)\n+{\n+  unsigned int x = 0x80000000;\n+  if (a < x)\n+    if (b < x)\n+      if (a > 5)\n+        if (a + b == 0U)\n+          link_error ();\n+}\n+\n+void test02(unsigned int a, unsigned int b)\n+{\n+  unsigned int x = 0x80000000;\n+  if (a > x)\n+    if (b < x)\n+      if (a - b == 1U)\n+        link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */"}, {"sha": "a77be8479cd6947ee791a71ff8af33e11b7dee55", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17775aba4c709c1fc3f19af33d50b025e3891f4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b17775aba4c709c1fc3f19af33d50b025e3891f4", "patch": "@@ -915,12 +915,25 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n      on -INF and +INF.  */\n   res = int_const_binop (code, val1, val2, 0);\n \n+  if (TYPE_UNSIGNED (TREE_TYPE (val1)))\n+    {\n+      int checkz = compare_values (res, val1);\n+\n+      /* Ensure that res = val1 + val2 >= val1\n+         or that res = val1 - val2 <= val1.  */\n+      if ((code == PLUS_EXPR && !(checkz == 1 || checkz == 0))\n+          || (code == MINUS_EXPR && !(checkz == 0 || checkz == -1)))\n+\t{\n+\t  res = copy_node (res);\n+\t  TREE_OVERFLOW (res) = 1;\n+\t}\n+    }\n   /* If the operation overflowed but neither VAL1 nor VAL2 are\n      overflown, return -INF or +INF depending on the operation\n      and the combination of signs of the operands.  */\n-  if (TREE_OVERFLOW (res)\n-      && !TREE_OVERFLOW (val1)\n-      && !TREE_OVERFLOW (val2))\n+  else if (TREE_OVERFLOW (res)\n+\t   && !TREE_OVERFLOW (val1)\n+\t   && !TREE_OVERFLOW (val2))\n     {\n       int sgn1 = tree_int_cst_sgn (val1);\n       int sgn2 = tree_int_cst_sgn (val2);"}]}