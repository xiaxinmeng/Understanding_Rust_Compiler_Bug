{"sha": "4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxZjU3ZmVkYWQwNDJmY2YyYmYyY2M3OGQwZTYyMTcyYjRkN2FlZA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-05-23T09:02:51Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-05-23T09:02:51Z"}, "message": "[ARM, AArch64] Add missing vstX_lane fp16 tests.\n\n2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Add fp16 tests.\n\nFrom-SVN: r236577", "tree": {"sha": "5b1ac936fb2992d997649f09c99ca71a23a41a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1ac936fb2992d997649f09c99ca71a23a41a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed/comments", "author": null, "committer": null, "parents": [{"sha": "16c5ec7703eb856659732502c007b6d6eff4431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c5ec7703eb856659732502c007b6d6eff4431c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c5ec7703eb856659732502c007b6d6eff4431c"}], "stats": {"total": 109, "additions": 106, "deletions": 3}, "files": [{"sha": "e6490135031fb74073aafc0bb61ddc78afb2ffac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "patch": "@@ -1,3 +1,7 @@\n+2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Add fp16 tests.\n+\n 2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vtst.c: Add tests for"}, {"sha": "282edd591a0268a2358c4dcfb0332ca302850997", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c?ref=4b1f57fedad042fcf2bf2cc78d0e62172b4d7aed", "patch": "@@ -14,6 +14,7 @@ VECT_VAR_DECL(expected_st2_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected_st2_0,poly,8,8) [] = { 0xf0, 0xf1, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_st2_0,int,16,8) [] = { 0xfff0, 0xfff1, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -24,6 +25,8 @@ VECT_VAR_DECL(expected_st2_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t       0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t 0x0, 0x0 };\n \n@@ -39,6 +42,7 @@ VECT_VAR_DECL(expected_st2_1,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_1,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,hfloat,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -48,6 +52,8 @@ VECT_VAR_DECL(expected_st2_1,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st2_1,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_1,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st2_1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results for vst3, chunk 0.  */\n@@ -62,6 +68,7 @@ VECT_VAR_DECL(expected_st3_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected_st3_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0x0 };\n+VECT_VAR_DECL(expected_st3_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0x0 };\n VECT_VAR_DECL(expected_st3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_st3_0,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -73,6 +80,8 @@ VECT_VAR_DECL(expected_st3_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t       0xfffffff2, 0x0 };\n VECT_VAR_DECL(expected_st3_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t 0xc1600000, 0x0 };\n \n@@ -88,6 +97,7 @@ VECT_VAR_DECL(expected_st3_1,uint,32,2) [] = { 0xfffffff2, 0x0 };\n VECT_VAR_DECL(expected_st3_1,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_1,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_1,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_1,hfloat,32,2) [] = { 0xc1600000, 0x0 };\n VECT_VAR_DECL(expected_st3_1,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -97,6 +107,8 @@ VECT_VAR_DECL(expected_st3_1,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st3_1,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_1,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_1,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results for vst3, chunk 2.  */\n@@ -111,6 +123,7 @@ VECT_VAR_DECL(expected_st3_2,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_2,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,hfloat,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -120,6 +133,8 @@ VECT_VAR_DECL(expected_st3_2,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st3_2,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_2,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st3_2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results for vst4, chunk 0.  */\n@@ -134,6 +149,7 @@ VECT_VAR_DECL(expected_st4_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected_st4_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_st4_0,hfloat,16,4) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n VECT_VAR_DECL(expected_st4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_st4_0,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -145,6 +161,8 @@ VECT_VAR_DECL(expected_st4_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t       0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected_st4_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_0,hfloat,16,8) [] = { 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t\t 0xc1600000, 0xc1500000 };\n \n@@ -160,6 +178,7 @@ VECT_VAR_DECL(expected_st4_1,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n VECT_VAR_DECL(expected_st4_1,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_1,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_1,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_st4_1,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -169,6 +188,8 @@ VECT_VAR_DECL(expected_st4_1,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st4_1,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_1,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_1,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results for vst4, chunk 2.  */\n@@ -183,6 +204,7 @@ VECT_VAR_DECL(expected_st4_2,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_2,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,hfloat,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -192,6 +214,8 @@ VECT_VAR_DECL(expected_st4_2,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st4_2,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_2,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results for vst4, chunk 3.  */\n@@ -206,6 +230,7 @@ VECT_VAR_DECL(expected_st4_3,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,poly,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,poly,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_3,hfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,hfloat,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n@@ -215,6 +240,8 @@ VECT_VAR_DECL(expected_st4_3,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n VECT_VAR_DECL(expected_st4_3,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,poly,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_3,hfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n VECT_VAR_DECL(expected_st4_3,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Declare additional input buffers as needed.  */\n@@ -229,6 +256,7 @@ VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 32, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 64, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 8, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 16, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 16, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 32, 2);\n \n /* Input buffers for vld3_lane.  */\n@@ -242,6 +270,7 @@ VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 32, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 64, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 8, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 16, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 16, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 32, 3);\n \n /* Input buffers for vld4_lane.  */\n@@ -255,6 +284,7 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 32, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 64, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 8, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 16, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 16, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 32, 4);\n \n void exec_vstX_lane (void)\n@@ -302,7 +332,7 @@ void exec_vstX_lane (void)\n \n   /* We need all variants in 64 bits, but there is no 64x2 variant,\n      nor 128 bits vectors of int8/uint8/poly8.  */\n-#define DECL_ALL_VSTX_LANE(X)\t\t\t\\\n+#define DECL_ALL_VSTX_LANE_NO_FP16(X)\t\t\\\n   DECL_VSTX_LANE(int, 8, 8, X);\t\t\t\\\n   DECL_VSTX_LANE(int, 16, 4, X);\t\t\\\n   DECL_VSTX_LANE(int, 32, 2, X);\t\t\\\n@@ -319,11 +349,20 @@ void exec_vstX_lane (void)\n   DECL_VSTX_LANE(poly, 16, 8, X);\t\t\\\n   DECL_VSTX_LANE(float, 32, 4, X)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define DECL_ALL_VSTX_LANE(X)\t\t\\\n+  DECL_ALL_VSTX_LANE_NO_FP16(X);\t\\\n+  DECL_VSTX_LANE(float, 16, 4, X);\t\\\n+  DECL_VSTX_LANE(float, 16, 8, X)\n+#else\n+#define DECL_ALL_VSTX_LANE(X) DECL_ALL_VSTX_LANE_NO_FP16(X)\n+#endif\n+\n #define DUMMY_ARRAY(V, T, W, N, L) VECT_VAR_DECL(V,T,W,N)[N*L]\n \n   /* Use the same lanes regardless of the size of the array (X), for\n      simplicity.  */\n-#define TEST_ALL_VSTX_LANE(X)\t\t\t\\\n+#define TEST_ALL_VSTX_LANE_NO_FP16(X)\t\t\\\n   TEST_VSTX_LANE(, int, s, 8, 8, X, 7);\t\t\\\n   TEST_VSTX_LANE(, int, s, 16, 4, X, 2);\t\\\n   TEST_VSTX_LANE(, int, s, 32, 2, X, 0);\t\\\n@@ -340,7 +379,16 @@ void exec_vstX_lane (void)\n   TEST_VSTX_LANE(q, poly, p, 16, 8, X, 5);\t\\\n   TEST_VSTX_LANE(q, float, f, 32, 4, X, 2)\n \n-#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_VSTX_LANE(X)\t\t\t\\\n+  TEST_ALL_VSTX_LANE_NO_FP16(X);\t\t\\\n+  TEST_VSTX_LANE(, float, f, 16, 4, X, 2);\t\\\n+  TEST_VSTX_LANE(q, float, f, 16, 8, X, 6)\n+#else\n+#define TEST_ALL_VSTX_LANE(X) TEST_ALL_VSTX_LANE_NO_FP16(X)\n+#endif\n+\n+#define TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\t\\\n   TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n@@ -357,6 +405,15 @@ void exec_vstX_lane (void)\n   TEST_EXTRA_CHUNK(poly, 16, 8, X, Y);\t\t\\\n   TEST_EXTRA_CHUNK(float, 32, 4, X, Y)\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define TEST_ALL_EXTRA_CHUNKS(X,Y)\t\t\\\n+  TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 16, 8, X, Y)\n+#else\n+#define TEST_ALL_EXTRA_CHUNKS(X,Y) TEST_ALL_EXTRA_CHUNKS_NO_FP16(X, Y)\n+#endif\n+\n   /* Declare the temporary buffers / variables.  */\n   DECL_ALL_VSTX_LANE(2);\n   DECL_ALL_VSTX_LANE(3);\n@@ -371,12 +428,18 @@ void exec_vstX_lane (void)\n   DUMMY_ARRAY(buffer_src, uint, 32, 2, 4);\n   DUMMY_ARRAY(buffer_src, poly, 8, 8, 4);\n   DUMMY_ARRAY(buffer_src, poly, 16, 4, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  DUMMY_ARRAY(buffer_src, float, 16, 4, 4);\n+#endif\n   DUMMY_ARRAY(buffer_src, float, 32, 2, 4);\n   DUMMY_ARRAY(buffer_src, int, 16, 8, 4);\n   DUMMY_ARRAY(buffer_src, int, 32, 4, 4);\n   DUMMY_ARRAY(buffer_src, uint, 16, 8, 4);\n   DUMMY_ARRAY(buffer_src, uint, 32, 4, 4);\n   DUMMY_ARRAY(buffer_src, poly, 16, 8, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  DUMMY_ARRAY(buffer_src, float, 16, 8, 4);\n+#endif\n   DUMMY_ARRAY(buffer_src, float, 32, 4, 4);\n \n   /* Check vst2_lane/vst2q_lane.  */\n@@ -400,6 +463,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st2_0, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st2_0, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st2_0, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st2_0, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(2, 1);\n #undef CMT\n@@ -419,6 +486,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st2_1, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st2_1, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st2_1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st2_1, CMT);\n+#endif\n \n \n   /* Check vst3_lane/vst3q_lane.  */\n@@ -444,6 +515,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_0, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_0, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_0, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st3_0, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(3, 1);\n \n@@ -464,6 +539,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_1, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_1, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st3_1, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(3, 2);\n \n@@ -484,6 +563,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_2, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_2, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st3_2, CMT);\n+#endif\n \n \n   /* Check vst4_lane/vst4q_lane.  */\n@@ -509,6 +592,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_0, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_0, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_0, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st4_0, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(4, 1);\n \n@@ -529,6 +616,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_1, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_1, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st4_1, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(4, 2);\n \n@@ -549,6 +640,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_2, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_2, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st4_2, CMT);\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS(4, 3);\n \n@@ -569,6 +664,10 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_3, CMT);\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_3, CMT);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_3, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_st4_3, CMT);\n+#endif\n }\n \n int main (void)"}]}