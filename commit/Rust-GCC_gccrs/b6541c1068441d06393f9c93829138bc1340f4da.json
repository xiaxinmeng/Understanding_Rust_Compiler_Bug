{"sha": "b6541c1068441d06393f9c93829138bc1340f4da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1NDFjMTA2ODQ0MWQwNjM5M2Y5YzkzODI5MTM4YmMxMzQwZjRkYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2007-12-18T03:22:37Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-12-18T03:22:37Z"}, "message": "inclhack.def: (glibc_c99_inline_1a, glibc_c99_inline_5): New.\n\n\t* inclhack.def: (glibc_c99_inline_1a, glibc_c99_inline_5): New.\n\t* fixincl.x: Regenerate.\n\t* tests/base/wchar.h: Update.\n\t* tests/base/features.h: New.\n\nFrom-SVN: r131031", "tree": {"sha": "a21691d865a012c4d9abfbf9583014553f3379ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a21691d865a012c4d9abfbf9583014553f3379ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6541c1068441d06393f9c93829138bc1340f4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6541c1068441d06393f9c93829138bc1340f4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6541c1068441d06393f9c93829138bc1340f4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6541c1068441d06393f9c93829138bc1340f4da/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26173ea95bf3c778dddb420f26f7a700b9937388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26173ea95bf3c778dddb420f26f7a700b9937388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26173ea95bf3c778dddb420f26f7a700b9937388"}], "stats": {"total": 183, "additions": 178, "deletions": 5}, "files": [{"sha": "86991332b9fd25b4fe337084984a1b36481c664d", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=b6541c1068441d06393f9c93829138bc1340f4da", "patch": "@@ -1,3 +1,10 @@\n+2007-12-18  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* inclhack.def: (glibc_c99_inline_1a, glibc_c99_inline_5): New.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/wchar.h: Update.\n+\t* tests/base/features.h: New.\n+\n 2007-10-14  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/33700"}, {"sha": "c61a3ac520593c6aa2d02f38be33f6647ede4d09", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 100, "deletions": 5, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=b6541c1068441d06393f9c93829138bc1340f4da", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Sunday October 14, 2007 at 06:17:05 PM EDT\n+ * It has been AutoGen-ed  Tuesday December 18, 2007 at 03:28:19 AM CET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Oct 14 18:17:05 EDT 2007\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Dec 18 03:28:19 CET 2007\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 210 fixup descriptions.\n+ * This file contains 212 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -2263,6 +2263,43 @@ static const char* apzGlibc_C99_Inline_1Patch[] = {\n     \"%0 && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_1a fix\n+ */\n+tSCC zGlibc_C99_Inline_1aName[] =\n+     \"glibc_c99_inline_1a\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_1aList[] =\n+  \"features.h\\0*/features.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_1aMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_1aSelect0[] =\n+       \"(\\\\) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__)\\n\\\n+(#[ \\t]*define[ \\t]*__USE_EXTERN_INLINES[ \\t]*1)\";\n+\n+#define    GLIBC_C99_INLINE_1A_TEST_CT  1\n+static tTestDesc aGlibc_C99_Inline_1aTests[] = {\n+  { TT_EGREP,    zGlibc_C99_Inline_1aSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_1a\n+ */\n+static const char* apzGlibc_C99_Inline_1aPatch[] = {\n+    \"format\",\n+    \"%1 && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_C99_Inline_2 fix\n@@ -2397,6 +2434,52 @@ extern\\n\\\n     \"(^| )extern \",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_5 fix\n+ */\n+tSCC zGlibc_C99_Inline_5Name[] =\n+     \"glibc_c99_inline_5\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_5List[] =\n+  \"wchar.h\\0*/wchar.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_5Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_5Select0[] =\n+       \"(^| )extern __inline\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_5Bypass0[] =\n+       \"__STDC_VERSION__\";\n+\n+#define    GLIBC_C99_INLINE_5_TEST_CT  2\n+static tTestDesc aGlibc_C99_Inline_5Tests[] = {\n+  { TT_NEGREP,   zGlibc_C99_Inline_5Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zGlibc_C99_Inline_5Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_5\n+ */\n+static const char* apzGlibc_C99_Inline_5Patch[] = {\n+    \"format\",\n+    \"\\n\\\n+#ifdef __GNUC_GNU_INLINE__\\n\\\n+extern\\n\\\n+#endif\\n\\\n+__inline\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_Mutex_Init fix\n@@ -8539,9 +8622,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          253\n+#define REGEX_COUNT          256\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            210\n+#define FIX_COUNT            212\n \n /*\n  *  Enumerate the fixes\n@@ -8599,9 +8682,11 @@ typedef enum {\n     FREEBSD_GCC3_BREAKAGE_FIXIDX,\n     FREEBSD_GCC4_BREAKAGE_FIXIDX,\n     GLIBC_C99_INLINE_1_FIXIDX,\n+    GLIBC_C99_INLINE_1A_FIXIDX,\n     GLIBC_C99_INLINE_2_FIXIDX,\n     GLIBC_C99_INLINE_3_FIXIDX,\n     GLIBC_C99_INLINE_4_FIXIDX,\n+    GLIBC_C99_INLINE_5_FIXIDX,\n     GLIBC_MUTEX_INIT_FIXIDX,\n     GNU_TYPES_FIXIDX,\n     HP_INLINE_FIXIDX,\n@@ -9020,6 +9105,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      GLIBC_C99_INLINE_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aGlibc_C99_Inline_1Tests,   apzGlibc_C99_Inline_1Patch, 0 },\n \n+  {  zGlibc_C99_Inline_1aName,    zGlibc_C99_Inline_1aList,\n+     apzGlibc_C99_Inline_1aMachs,\n+     GLIBC_C99_INLINE_1A_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_C99_Inline_1aTests,   apzGlibc_C99_Inline_1aPatch, 0 },\n+\n   {  zGlibc_C99_Inline_2Name,    zGlibc_C99_Inline_2List,\n      apzGlibc_C99_Inline_2Machs,\n      GLIBC_C99_INLINE_2_TEST_CT, FD_MACH_ONLY,\n@@ -9035,6 +9125,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      GLIBC_C99_INLINE_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aGlibc_C99_Inline_4Tests,   apzGlibc_C99_Inline_4Patch, 0 },\n \n+  {  zGlibc_C99_Inline_5Name,    zGlibc_C99_Inline_5List,\n+     apzGlibc_C99_Inline_5Machs,\n+     GLIBC_C99_INLINE_5_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_C99_Inline_5Tests,   apzGlibc_C99_Inline_5Patch, 0 },\n+\n   {  zGlibc_Mutex_InitName,    zGlibc_Mutex_InitList,\n      apzGlibc_Mutex_InitMachs,\n      GLIBC_MUTEX_INIT_TEST_CT, FD_MACH_ONLY,"}, {"sha": "859042a8da21e5f209da189f252a0cfe22d03ea3", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=b6541c1068441d06393f9c93829138bc1340f4da", "patch": "@@ -1347,6 +1347,24 @@ EOT;\n };\n \n \n+/*\n+ *  Similar, but a version that didn't have __NO_INLINE__\n+ */\n+fix = {\n+    hackname  = glibc_c99_inline_1a;\n+    files     = features.h, '*/features.h';\n+    select    = \"(\\\\) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__)\\n\"\n+\t\t\"(#[ \\t]*define[ \\t]*__USE_EXTERN_INLINES[ \\t]*1)\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1 && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\\n%2\";\n+    test_text = <<-EOT\n+#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__\n+# define __USE_EXTERN_INLINES\t1\n+#endif\n+EOT;\n+};\n+\n+\n /*\n  * The glibc_c99_inline_1 fix should have fixed everything.  Unfortunately\n  * there are many glibc headers which do not respect __USE_EXTERN_INLINES.\n@@ -1408,6 +1426,21 @@ fix = {\n };\n \n \n+fix = {\n+    hackname  = glibc_c99_inline_5;\n+    files     = wchar.h, '*/wchar.h';\n+    bypass    = \"__STDC_VERSION__\";\n+    select    = \"(^| )extern __inline\";\n+    c_fix     = format;\n+    c_fix_arg = \"\\n#ifdef __GNUC_GNU_INLINE__\\nextern\\n#endif\\n__inline\";\n+    test_text = <<-EOT\n+\t__extension__ extern __inline double\n+\t__extension__ __extern_inline long\n+\textern __inline unsigned int\n+\tEOT;\n+};\n+\n+\n /*  glibc-2.3.5 defines pthread mutex initializers incorrectly,\n  *  so we replace them with versions that correspond to the\n  *  definition."}, {"sha": "93838c71253f2cd35a057d71f9cce28d46bf7577", "filename": "fixincludes/tests/base/features.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ftests%2Fbase%2Ffeatures.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ftests%2Fbase%2Ffeatures.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ffeatures.h?ref=b6541c1068441d06393f9c93829138bc1340f4da", "patch": "@@ -0,0 +1,23 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/features.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( GLIBC_C99_INLINE_1_CHECK )\n+#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__     && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__\n+# define __USE_EXTERN_INLINES\t1\n+#endif\n+#endif  /* GLIBC_C99_INLINE_1_CHECK */\n+\n+\n+#if defined( GLIBC_C99_INLINE_1A_CHECK )\n+#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__ && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\n+# define __USE_EXTERN_INLINES\t1\n+#endif\n+#endif  /* GLIBC_C99_INLINE_1A_CHECK */"}, {"sha": "5ca5adeb0e19bc1f98f71f63b3b65864d9e9a575", "filename": "fixincludes/tests/base/wchar.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ftests%2Fbase%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6541c1068441d06393f9c93829138bc1340f4da/fixincludes%2Ftests%2Fbase%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fwchar.h?ref=b6541c1068441d06393f9c93829138bc1340f4da", "patch": "@@ -13,3 +13,18 @@\n extern wchar_t *wcstok __((wchar_t *, const wchar_t *, wchar_t **)) __asm__(\"wcstok_r\");\n extern size_t   wcsftime __((wchar_t *, size_t, const wchar_t *, const struct tm *)) __asm__(\"__wcsftime_isoc\");\n #endif  /* ALPHA_WCHAR_CHECK */\n+\n+\n+#if defined( GLIBC_C99_INLINE_5_CHECK )\n+__extension__\n+#ifdef __GNUC_GNU_INLINE__\n+extern\n+#endif\n+__inline double\n+__extension__ __extern_inline long\n+\n+#ifdef __GNUC_GNU_INLINE__\n+extern\n+#endif\n+__inline unsigned int\n+#endif  /* GLIBC_C99_INLINE_5_CHECK */"}]}