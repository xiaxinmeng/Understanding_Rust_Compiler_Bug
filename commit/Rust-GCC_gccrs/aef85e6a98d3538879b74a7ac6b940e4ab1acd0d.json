{"sha": "aef85e6a98d3538879b74a7ac6b940e4ab1acd0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmODVlNmE5OGQzNTM4ODc5Yjc0YTdhYzZiOTQwZTRhYjFhY2QwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:07:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:07:56Z"}, "message": "(__objc_runtime_mutux, __objc_runtime_thread_alive): New variables.\n\n(objc_init_statics, __objc_init_protocols): Surround sarray access\nwith mutex lock/unlock\n(__objc_exec_class): Likewise.\nInitialization for thread-safe global variables.\nDeclarations for thread-safe functions and global variables\n\nFrom-SVN: r11442", "tree": {"sha": "2d270f9d38e156668c3d0cc94ddf79f9853f9776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d270f9d38e156668c3d0cc94ddf79f9853f9776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d/comments", "author": null, "committer": null, "parents": [{"sha": "53cc7066b87d1dc7e804721b3afbc1b5cab2a17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cc7066b87d1dc7e804721b3afbc1b5cab2a17b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cc7066b87d1dc7e804721b3afbc1b5cab2a17b"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "c09e9faea1fb8159674ff492ed5f03a221dc2d3a", "filename": "gcc/objc/init.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d/gcc%2Fobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef85e6a98d3538879b74a7ac6b940e4ab1acd0d/gcc%2Fobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Finit.c?ref=aef85e6a98d3538879b74a7ac6b940e4ab1acd0d", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime initialization \n-   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GNU CC.\n@@ -31,13 +31,19 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define PROTOCOL_VERSION 2\n \n /* This list contains all modules currently loaded into the runtime */\n-static struct objc_list* __objc_module_list = 0;\n+static struct objc_list* __objc_module_list = 0; \t/* !T:MUTEX */\n \n /* This list contains all proto_list's not yet assigned class links */\n-static struct objc_list* unclaimed_proto_list = 0;\n+static struct objc_list* unclaimed_proto_list = 0; \t/* !T:MUTEX */\n \n /* List of unresolved static instances.  */\n-static struct objc_list *uninitialized_statics;\n+static struct objc_list *uninitialized_statics = 0; \t/* !T:MUTEX */\n+\n+/* Global runtime \"write\" mutex. */\n+_objc_mutex_t __objc_runtime_mutex;\n+\n+/* Number of threads that are alive. */\n+int __objc_runtime_threads_alive = 1;\t\t\t/* !T:MUTEX */\n \n /* Check compiler vs runtime version */\n static void init_check_module_version (Module_t);\n@@ -52,10 +58,10 @@ static void __objc_class_add_protocols (Class, struct objc_protocol_list*);\n    or a category is loaded into the runtime.  This may e.g. help a\n    dynamic loader determine the classes that have been loaded when\n    an object file is dynamically linked in */\n-void (*_objc_load_callback)(Class class, Category* category) = 0;\n+void (*_objc_load_callback)(Class class, Category* category) = 0; /* !T:SAFE */\n \n /* Is all categories/classes resolved? */\n-BOOL __objc_dangling_categories = NO;\n+BOOL __objc_dangling_categories = NO;           /* !T:UNUSED */\n \n extern SEL\n __sel_register_typed_name (const char *name, const char *types, \n@@ -69,6 +75,8 @@ objc_init_statics ()\n   struct objc_list **cell = &uninitialized_statics;\n   struct objc_static_instances **statics_in_module;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   while (*cell)\n     {\n       int module_initialized = 1;\n@@ -114,6 +122,8 @@ objc_init_statics ()\n       else\n \tcell = &(*cell)->tail;\n     }\n+\n+  objc_mutex_unlock(__objc_runtime_mutex);\n } /* objc_init_statics */\n \n /* This function is called by constructor functions generated for each\n@@ -150,13 +160,19 @@ __objc_exec_class (Module_t module)\n   /* On the first call of this routine, initialize some data structures.  */\n   if (!previous_constructors)\n     {\n+\t/* Initialize thread-safe system */\n+      __objc_init_thread_system();\n+      __objc_runtime_threads_alive = 1;\n+      __objc_runtime_mutex = objc_mutex_allocate();\n+\n       __objc_init_selector_tables();\n       __objc_init_class_tables();\n       __objc_init_dispatch_tables();\n       previous_constructors = 1;\n     }\n \n   /* Save the module pointer for later processing. (not currently used) */\n+  objc_mutex_lock(__objc_runtime_mutex);\n   __objc_module_list = list_cons(module, __objc_module_list);\n \n   /* Replace referenced selectors from names to SEL's.  */\n@@ -287,6 +303,7 @@ __objc_exec_class (Module_t module)\n       unclaimed_proto_list = 0;\n     }\n \n+  objc_mutex_unlock(__objc_runtime_mutex);\n }\n \n /* Sanity check the version of gcc used to compile `module'*/\n@@ -315,6 +332,8 @@ __objc_init_protocols (struct objc_protocol_list* protos)\n   if (! protos)\n     return;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   if (!proto_class)\n     proto_class = objc_lookup_class(\"Protocol\");\n \n@@ -348,6 +367,8 @@ __objc_init_protocols (struct objc_protocol_list* protos)\n \t  abort ();\n \t}\n     }\n+\n+  objc_mutex_unlock(__objc_runtime_mutex);\n }\n \n static void __objc_class_add_protocols (Class class,"}]}