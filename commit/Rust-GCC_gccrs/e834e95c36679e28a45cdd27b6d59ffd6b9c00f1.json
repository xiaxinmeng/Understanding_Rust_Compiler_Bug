{"sha": "e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzNGU5NWMzNjY3OWUyOGE0NWNkZDI3YjZkNTlmZmQ2YjljMDBmMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-13T11:02:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-13T11:02:28Z"}, "message": "re PR lto/48978 (excessive hash table allocation for large lto build)\n\n2011-05-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/48978\n\t* gimple.c (iterative_hash_gimple_type): Revert change in\n\tpointer target and function result and argument hashing.\n\nFrom-SVN: r173730", "tree": {"sha": "34a02abafb70c287f26d660d86f6ad14184a53dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a02abafb70c287f26d660d86f6ad14184a53dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3420348330cbc3b086b38563216e82fc0ce6e2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3420348330cbc3b086b38563216e82fc0ce6e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3420348330cbc3b086b38563216e82fc0ce6e2e9"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "10660451117580a9f1efcf5411f6ddd5e204f206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "patch": "@@ -1,3 +1,9 @@\n+2011-05-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/48978\n+\t* gimple.c (iterative_hash_gimple_type): Revert change in\n+\tpointer target and function result and argument hashing.\n+\n 2011-05-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movxf_internal): Use !can_create_pseudo ()."}, {"sha": "28a67441880cec40eaddfc517623a97932b8a4de", "filename": "gcc/gimple.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "patch": "@@ -4110,10 +4110,20 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n     }\n \n   /* For pointer and reference types, fold in information about the type\n-     pointed to.  */\n+     pointed to but do not recurse into possibly incomplete types to\n+     avoid hash differences for complete vs. incomplete types.  */\n   if (POINTER_TYPE_P (type))\n-    v = visit (TREE_TYPE (type), state, v,\n-\t       sccstack, sccstate, sccstate_obstack);\n+    {\n+      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n+\t{\n+\t  v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n+\t  v = iterative_hash_name\n+\t\t(TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (type))), v);\n+\t}\n+      else\n+\tv = visit (TREE_TYPE (type), state, v,\n+\t\t   sccstack, sccstate, sccstate_obstack);\n+    }\n \n   /* For integer types hash the types min/max values and the string flag.  */\n   if (TREE_CODE (type) == INTEGER_TYPE)\n@@ -4154,13 +4164,29 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n \tv = visit (TYPE_METHOD_BASETYPE (type), state, v,\n \t\t   sccstack, sccstate, sccstate_obstack);\n \n-      /* Check result and argument types.  */\n-      v = visit (TREE_TYPE (type), state, v,\n-\t\t sccstack, sccstate, sccstate_obstack);\n+      /* For result types allow mismatch in completeness.  */\n+      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n+\t{\n+\t  v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n+\t  v = iterative_hash_name\n+\t\t(TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (type))), v);\n+\t}\n+      else\n+\tv = visit (TREE_TYPE (type), state, v,\n+\t\t   sccstack, sccstate, sccstate_obstack);\n+\n       for (p = TYPE_ARG_TYPES (type), na = 0; p; p = TREE_CHAIN (p))\n \t{\n-\t  v = visit (TREE_VALUE (p), state, v,\n-\t\t     sccstack, sccstate, sccstate_obstack);\n+\t  /* For argument types allow mismatch in completeness.  */\n+\t  if (RECORD_OR_UNION_TYPE_P (TREE_VALUE (p)))\n+\t    {\n+\t      v = iterative_hash_hashval_t (TREE_CODE (TREE_VALUE (p)), v);\n+\t      v = iterative_hash_name\n+\t\t    (TYPE_NAME (TYPE_MAIN_VARIANT (TREE_VALUE (p))), v);\n+\t    }\n+\t  else\n+\t    v = visit (TREE_VALUE (p), state, v,\n+\t\t       sccstack, sccstate, sccstate_obstack);\n \t  na++;\n \t}\n "}]}