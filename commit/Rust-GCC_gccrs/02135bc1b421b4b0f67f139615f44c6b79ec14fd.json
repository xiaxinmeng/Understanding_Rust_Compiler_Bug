{"sha": "02135bc1b421b4b0f67f139615f44c6b79ec14fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxMzViYzFiNDIxYjRiMGY2N2YxMzk2MTVmNDRjNmI3OWVjMTRmZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2008-05-26T23:37:05Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-26T23:37:05Z"}, "message": "rs6000.c (rs6000_legitimize_tls_address): Generate new tls_gd_* and tls_ld_* insns instead of an insn sequence.\n\n2008-05-26  Steven Bosscher  <stevenb.gcc@gmail.com>\n\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Generate\n\tnew tls_gd_* and tls_ld_* insns instead of an insn sequence.\n\t* config/rs6000/rs6000.md (TLSmode, tls_abi_suffix, tls_insn_suffix,\n\ttls_sysv_suffix): New mode and mode attribute iterators.\n\t(tls_gd_32, tls_gd_64, tls_ld_32, tls_ld_64): Remove.\n\t(lts_gd_aix*, tls_gd_sysv*, tls_ld_aix*, tls_ld_sysv*): New patterns.\n\t(tls_dtprel_*, tls_dtprel_ha_*, tls_dtprel_lo_*, tls_got_dtprel_*,\n\ttls_tprel_*, tls_tprel_ha_*, tls_tprel_lo_*, tls_got_tprel_*,\n\ttls_tls_*): Merge 32 bit and 64 bit variants using aforementioned\n\titerators.\n\nFrom-SVN: r135961", "tree": {"sha": "4ad21d079581bfa6ce84ba8875710d3fa2213aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad21d079581bfa6ce84ba8875710d3fa2213aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02135bc1b421b4b0f67f139615f44c6b79ec14fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02135bc1b421b4b0f67f139615f44c6b79ec14fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02135bc1b421b4b0f67f139615f44c6b79ec14fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02135bc1b421b4b0f67f139615f44c6b79ec14fd/comments", "author": null, "committer": null, "parents": [{"sha": "273d8a65e2e9b220f067c490951d23a6b81610a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273d8a65e2e9b220f067c490951d23a6b81610a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273d8a65e2e9b220f067c490951d23a6b81610a6"}], "stats": {"total": 335, "additions": 164, "deletions": 171}, "files": [{"sha": "7798bf7c5018badb6659c101f36f53470ff4cd82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02135bc1b421b4b0f67f139615f44c6b79ec14fd", "patch": "@@ -1,3 +1,16 @@\n+2008-05-26  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Generate\n+\tnew tls_gd_* and tls_ld_* insns instead of an insn sequence.\n+\t* config/rs6000/rs6000.md (TLSmode, tls_abi_suffix, tls_insn_suffix,\n+\ttls_sysv_suffix): New mode and mode attribute iterators.\n+\t(tls_gd_32, tls_gd_64, tls_ld_32, tls_ld_64): Remove.\n+\t(lts_gd_aix*, tls_gd_sysv*, tls_ld_aix*, tls_ld_sysv*): New patterns.\n+\t(tls_dtprel_*, tls_dtprel_ha_*, tls_dtprel_lo_*, tls_got_dtprel_*,\n+\ttls_tprel_*, tls_tprel_ha_*, tls_tprel_lo_*, tls_got_tprel_*,\n+\ttls_tls_*): Merge 32 bit and 64 bit variants using aforementioned\n+\titerators.\n+\n 2008-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/36329"}, {"sha": "1eafc999fde43acdf2096bc73a8cb66450f46db6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=02135bc1b421b4b0f67f139615f44c6b79ec14fd", "patch": "@@ -3897,14 +3897,18 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n       if (model == TLS_MODEL_GLOBAL_DYNAMIC)\n \t{\n \t  r3 = gen_rtx_REG (Pmode, 3);\n-\t  if (TARGET_64BIT)\n-\t    insn = gen_tls_gd_64 (r3, got, addr);\n+\t  tga = rs6000_tls_get_addr ();\n+\n+\t  if (DEFAULT_ABI == ABI_AIX && TARGET_64BIT)\n+\t    insn = gen_tls_gd_aix64 (r3, got, addr, tga, const0_rtx);\n+\t  else if (DEFAULT_ABI == ABI_AIX && !TARGET_64BIT)\n+\t    insn = gen_tls_gd_aix32 (r3, got, addr, tga, const0_rtx);\n+\t  else if (DEFAULT_ABI == ABI_V4)\n+\t    insn = gen_tls_gd_sysvsi (r3, got, addr, tga, const0_rtx);\n \t  else\n-\t    insn = gen_tls_gd_32 (r3, got, addr);\n+\t    gcc_unreachable ();\n+\n \t  start_sequence ();\n-\t  emit_insn (insn);\n-\t  tga = gen_rtx_MEM (Pmode, rs6000_tls_get_addr ());\n-\t  insn = gen_call_value (r3, tga, const0_rtx, const0_rtx);\n \t  insn = emit_call_insn (insn);\n \t  RTL_CONST_CALL_P (insn) = 1;\n \t  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), r3);\n@@ -3915,14 +3919,18 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n       else if (model == TLS_MODEL_LOCAL_DYNAMIC)\n \t{\n \t  r3 = gen_rtx_REG (Pmode, 3);\n-\t  if (TARGET_64BIT)\n-\t    insn = gen_tls_ld_64 (r3, got);\n+\t  tga = rs6000_tls_get_addr ();\n+\n+\t  if (DEFAULT_ABI == ABI_AIX && TARGET_64BIT)\n+\t    insn = gen_tls_ld_aix64 (r3, got, tga, const0_rtx);\n+\t  else if (DEFAULT_ABI == ABI_AIX && !TARGET_64BIT)\n+\t    insn = gen_tls_ld_aix32 (r3, got, tga, const0_rtx);\n+\t  else if (DEFAULT_ABI == ABI_V4)\n+\t    insn = gen_tls_ld_sysvsi (r3, got, tga, const0_rtx);\n \t  else\n-\t    insn = gen_tls_ld_32 (r3, got);\n+\t    gcc_unreachable ();\n+\n \t  start_sequence ();\n-\t  emit_insn (insn);\n-\t  tga = gen_rtx_MEM (Pmode, rs6000_tls_get_addr ());\n-\t  insn = gen_call_value (r3, tga, const0_rtx, const0_rtx);\n \t  insn = emit_call_insn (insn);\n \t  RTL_CONST_CALL_P (insn) = 1;\n \t  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), r3);"}, {"sha": "1f63454e69498edd311e2983bc078a0ef06041d6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 131, "deletions": 159, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02135bc1b421b4b0f67f139615f44c6b79ec14fd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=02135bc1b421b4b0f67f139615f44c6b79ec14fd", "patch": "@@ -10199,183 +10199,155 @@\n \f\n ;; TLS support.\n \n-;; \"b\" output constraint here and on tls_ld to support tls linker optimization.\n-(define_insn \"tls_gd_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%2@got@tlsgd\")\n-\n-(define_insn \"tls_gd_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"addi %0,%1,%2@got@tlsgd\")\n-\n-(define_insn \"tls_ld_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")]\n-\t\t   UNSPEC_TLSLD))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%&@got@tlsld\")\n-\n-(define_insn \"tls_ld_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")]\n-\t\t   UNSPEC_TLSLD))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"addi %0,%1,%&@got@tlsld\")\n-\n-(define_insn \"tls_dtprel_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPREL))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%2@dtprel\")\n-\n-(define_insn \"tls_dtprel_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPREL))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"addi %0,%1,%2@dtprel\")\n-\n-(define_insn \"tls_dtprel_ha_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPRELHA))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addis %0,%1,%2@dtprel@ha\")\n+;; Mode attributes for different ABIs.\n+(define_mode_iterator TLSmode [(SI \"! TARGET_64BIT\") (DI \"TARGET_64BIT\")])\n+(define_mode_attr tls_abi_suffix [(SI \"32\") (DI \"64\")])\n+(define_mode_attr tls_sysv_suffix [(SI \"si\") (DI \"di\")])\n+(define_mode_attr tls_insn_suffix [(SI \"wz\") (DI \"d\")])\n+\n+(define_insn \"tls_gd_aix<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 4 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t \t    (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX\"\n+  \"addi %0,%1,%2@got@tlsgd\\;bl %z3\\;%.\"\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"12\")])\n \n-(define_insn \"tls_dtprel_ha_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPRELHA))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"addis %0,%1,%2@dtprel@ha\")\n+(define_insn \"tls_gd_sysv<TLSmode:tls_sysv_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 4 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t \t    (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n+{\n+  if (flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \"addi %0,%1,%2@got@tlsgd\\;bl %z3+32768@plt\";\n+      else\n+\treturn \"addi %0,%1,%2@got@tlsgd\\;bl %z3@plt\";\n+    }\n+  else\n+    return \"addi %0,%1,%2@got@tlsgd\\;bl %z3\";\n+}\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"8\")])\n \n-(define_insn \"tls_dtprel_lo_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPRELLO))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%2@dtprel@l\")\n+(define_insn \"tls_ld_aix<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 3 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n+\t\t   UNSPEC_TLSLD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX\"\n+  \"addi %0,%1,%&@got@tlsld\\;bl %z2\\;%.\"\n+  [(set_attr \"length\" \"12\")])\n \n-(define_insn \"tls_dtprel_lo_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSDTPRELLO))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"addi %0,%1,%2@dtprel@l\")\n+(define_insn \"tls_ld_sysv<TLSmode:tls_sysv_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 3 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n+\t\t   UNSPEC_TLSLD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n+{\n+  if (flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \"addi %0,%1,%&@got@tlsld\\;bl %z2+32768@plt\";\n+      else\n+\treturn \"addi %0,%1,%&@got@tlsld\\;bl %z2@plt\";\n+    }\n+  else\n+    return \"addi %0,%1,%&@got@tlsld\\;bl %z2\";\n+}\n+  [(set_attr \"length\" \"8\")])\n \n-(define_insn \"tls_got_dtprel_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGOTDTPREL))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"lwz %0,%2@got@dtprel(%1)\")\n+(define_insn \"tls_dtprel_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSDTPREL))]\n+  \"HAVE_AS_TLS\"\n+  \"addi %0,%1,%2@dtprel\")\n \n-(define_insn \"tls_got_dtprel_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGOTDTPREL))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"ld %0,%2@got@dtprel(%1)\")\n+(define_insn \"tls_dtprel_ha_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSDTPRELHA))]\n+  \"HAVE_AS_TLS\"\n+  \"addis %0,%1,%2@dtprel@ha\")\n \n-(define_insn \"tls_tprel_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPREL))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%2@tprel\")\n+(define_insn \"tls_dtprel_lo_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSDTPRELLO))]\n+  \"HAVE_AS_TLS\"\n+  \"addi %0,%1,%2@dtprel@l\")\n \n-(define_insn \"tls_tprel_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPREL))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n+(define_insn \"tls_got_dtprel_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSGOTDTPREL))]\n+  \"HAVE_AS_TLS\"\n+  \"l<TLSmode:tls_insn_suffix> %0,%2@got@dtprel(%1)\")\n+\n+(define_insn \"tls_tprel_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSTPREL))]\n+  \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@tprel\")\n \n-(define_insn \"tls_tprel_ha_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPRELHA))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addis %0,%1,%2@tprel@ha\")\n-\n-(define_insn \"tls_tprel_ha_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPRELHA))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n+(define_insn \"tls_tprel_ha_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSTPRELHA))]\n+  \"HAVE_AS_TLS\"\n   \"addis %0,%1,%2@tprel@ha\")\n \n-(define_insn \"tls_tprel_lo_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPRELLO))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"addi %0,%1,%2@tprel@l\")\n-\n-(define_insn \"tls_tprel_lo_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTPRELLO))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n+(define_insn \"tls_tprel_lo_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSTPRELLO))]\n+  \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@tprel@l\")\n \n ;; \"b\" output constraint here and on tls_tls input to support linker tls\n ;; optimization.  The linker may edit the instructions emitted by a\n ;; tls_got_tprel/tls_tls pair to addis,addi.\n-(define_insn \"tls_got_tprel_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGOTTPREL))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n-  \"lwz %0,%2@got@tprel(%1)\")\n-\n-(define_insn \"tls_got_tprel_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGOTTPREL))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"ld %0,%2@got@tprel(%1)\")\n-\n-(define_insn \"tls_tls_32\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTLS))]\n-  \"HAVE_AS_TLS && !TARGET_64BIT\"\n+(define_insn \"tls_got_tprel_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSGOTTPREL))]\n+  \"HAVE_AS_TLS\"\n+  \"l<TLSmode:tls_insn_suffix> %0,%2@got@tprel(%1)\")\n+\n+(define_insn \"tls_tls_<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSTLS))]\n+  \"HAVE_AS_TLS\"\n   \"add %0,%1,%2@tls\")\n \n-(define_insn \"tls_tls_64\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t\t    (match_operand:DI 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSTLS))]\n-  \"HAVE_AS_TLS && TARGET_64BIT\"\n-  \"add %0,%1,%2@tls\")\n \f\n ;; Next come insns related to the calling sequence.\n ;;"}]}