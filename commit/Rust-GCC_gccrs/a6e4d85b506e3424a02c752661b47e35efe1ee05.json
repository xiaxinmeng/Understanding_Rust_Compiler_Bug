{"sha": "a6e4d85b506e3424a02c752661b47e35efe1ee05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlNGQ4NWI1MDZlMzQyNGEwMmM3NTI2NjFiNDdlMzVlZmUxZWUwNQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-05-02T18:25:23Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-05-02T18:25:23Z"}, "message": "ggc.h (ggc_alloc_zone_pass_stat): New macro.\n\n\t* ggc.h (ggc_alloc_zone_pass_stat): New macro.\n\t(ggc_alloc_zone_stat): Don't define.\n\t* ggc-zone.c (ggc_alloc_typed_stat, ggc_alloc_stat): Use\n\tggc_alloc_zone_pass_stat.\n\t* rtl.c (rtx_alloc_stat, shallow_copy_rtx_stat): Likewise.\n\t* tree.c (make_node_stat, copy_node_stat, make_tree_binfo_stat)\n\t(make_tree_vec_stat, tree_cons_stat, build1_stat): Likewise.\n\nFrom-SVN: r99114", "tree": {"sha": "90026114ff8c66b22fb5163e84cf7c18df6b27fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90026114ff8c66b22fb5163e84cf7c18df6b27fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e4d85b506e3424a02c752661b47e35efe1ee05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e4d85b506e3424a02c752661b47e35efe1ee05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e4d85b506e3424a02c752661b47e35efe1ee05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e4d85b506e3424a02c752661b47e35efe1ee05/comments", "author": null, "committer": null, "parents": [{"sha": "ff7f012ac0aa90d0b8f540a01844ecc158b2d740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7f012ac0aa90d0b8f540a01844ecc158b2d740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7f012ac0aa90d0b8f540a01844ecc158b2d740"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "3d0b8c2bace865f5ca82c63db4a3eade710b7b2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6e4d85b506e3424a02c752661b47e35efe1ee05", "patch": "@@ -1,3 +1,13 @@\n+2005-05-02  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* ggc.h (ggc_alloc_zone_pass_stat): New macro.\n+\t(ggc_alloc_zone_stat): Don't define.\n+\t* ggc-zone.c (ggc_alloc_typed_stat, ggc_alloc_stat): Use\n+\tggc_alloc_zone_pass_stat.\n+\t* rtl.c (rtx_alloc_stat, shallow_copy_rtx_stat): Likewise.\n+\t* tree.c (make_node_stat, copy_node_stat, make_tree_binfo_stat)\n+\t(make_tree_vec_stat, tree_cons_stat, build1_stat): Likewise.\n+\n 2005-05-02  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* calls.c (expand_call): Handle current_function_pretend_args_size"}, {"sha": "596bbbab7f4a1af4f852b5be059a321f10f143ce", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=a6e4d85b506e3424a02c752661b47e35efe1ee05", "patch": "@@ -1274,16 +1274,16 @@ ggc_alloc_typed_stat (enum gt_types_enum gte, size_t size\n   switch (gte)\n     {\n     case gt_ggc_e_14lang_tree_node:\n-      return ggc_alloc_zone_stat (size, &tree_zone PASS_MEM_STAT);\n+      return ggc_alloc_zone_pass_stat (size, &tree_zone);\n \n     case gt_ggc_e_7rtx_def:\n-      return ggc_alloc_zone_stat (size, &rtl_zone PASS_MEM_STAT);\n+      return ggc_alloc_zone_pass_stat (size, &rtl_zone);\n \n     case gt_ggc_e_9rtvec_def:\n-      return ggc_alloc_zone_stat (size, &rtl_zone PASS_MEM_STAT);\n+      return ggc_alloc_zone_pass_stat (size, &rtl_zone);\n \n     default:\n-      return ggc_alloc_zone_stat (size, &main_zone PASS_MEM_STAT);\n+      return ggc_alloc_zone_pass_stat (size, &main_zone);\n     }\n }\n \n@@ -1292,7 +1292,7 @@ ggc_alloc_typed_stat (enum gt_types_enum gte, size_t size\n void *\n ggc_alloc_stat (size_t size MEM_STAT_DECL)\n {\n-  return ggc_alloc_zone_stat (size, &main_zone PASS_MEM_STAT);\n+  return ggc_alloc_zone_pass_stat (size, &main_zone);\n }\n \n /* Poison the chunk.  */"}, {"sha": "57107ffdfc10ec1388f47345a29940a77e0f0b92", "filename": "gcc/ggc.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=a6e4d85b506e3424a02c752661b47e35efe1ee05", "patch": "@@ -313,15 +313,11 @@ extern struct alloc_zone tree_id_zone;\n /* Allocate an object into the specified allocation zone.  */\n extern void *ggc_alloc_zone_stat (size_t, struct alloc_zone * MEM_STAT_DECL);\n # define ggc_alloc_zone(s,z) ggc_alloc_zone_stat (s,z MEM_STAT_INFO)\n-\n+# define ggc_alloc_zone_pass_stat(s,z) ggc_alloc_zone_stat (s,z PASS_MEM_STAT)\n #else\n \n # define ggc_alloc_zone(s, z) ggc_alloc (s)\n-# ifdef GATHER_STATISTICS\n-#  define ggc_alloc_zone_stat(s, z, n, l, f) ggc_alloc_stat (s, n, l, f)\n-# else\n-#  define ggc_alloc_zone_stat(s, z) ggc_alloc_stat (s)\n-# endif\n+# define ggc_alloc_zone_pass_stat(s, z) ggc_alloc_stat (s PASS_MEM_STAT)\n \n #endif\n "}, {"sha": "2f52544ee0c74f366b2cf729bf346a3db0291379", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a6e4d85b506e3424a02c752661b47e35efe1ee05", "patch": "@@ -174,7 +174,7 @@ rtx_alloc_stat (RTX_CODE code MEM_STAT_DECL)\n {\n   rtx rt;\n \n-  rt = (rtx) ggc_alloc_zone_stat (RTX_SIZE (code), &rtl_zone PASS_MEM_STAT);\n+  rt = (rtx) ggc_alloc_zone_pass_stat (RTX_SIZE (code), &rtl_zone);\n \n   /* We want to clear everything up to the FLD array.  Normally, this\n      is one int, but we don't want to assume that and it isn't very\n@@ -308,8 +308,8 @@ shallow_copy_rtx_stat (rtx orig MEM_STAT_DECL)\n {\n   rtx copy;\n \n-  copy = (rtx) ggc_alloc_zone_stat (RTX_SIZE (GET_CODE (orig)),\n-\t\t\t\t    &rtl_zone PASS_MEM_STAT);\n+  copy = (rtx) ggc_alloc_zone_pass_stat (RTX_SIZE (GET_CODE (orig)),\n+\t\t\t\t\t &rtl_zone);\n   memcpy (copy, orig, RTX_SIZE (GET_CODE (orig)));\n   return copy;\n }"}, {"sha": "ed46248be19faf0d24178a9482a7c0d80c69105c", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e4d85b506e3424a02c752661b47e35efe1ee05/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a6e4d85b506e3424a02c752661b47e35efe1ee05", "patch": "@@ -347,9 +347,9 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n #endif\n \n   if (code == IDENTIFIER_NODE)\n-    t = ggc_alloc_zone_stat (length, &tree_id_zone PASS_MEM_STAT);\n+    t = ggc_alloc_zone_pass_stat (length, &tree_id_zone);\n   else\n-    t = ggc_alloc_zone_stat (length, &tree_zone PASS_MEM_STAT);\n+    t = ggc_alloc_zone_pass_stat (length, &tree_zone);\n \n   memset (t, 0, length);\n \n@@ -433,7 +433,7 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   gcc_assert (code != STATEMENT_LIST);\n \n   length = tree_size (node);\n-  t = ggc_alloc_zone_stat (length, &tree_zone PASS_MEM_STAT);\n+  t = ggc_alloc_zone_pass_stat (length, &tree_zone);\n   memcpy (t, node, length);\n \n   TREE_CHAIN (t) = 0;\n@@ -921,7 +921,7 @@ make_tree_binfo_stat (unsigned base_binfos MEM_STAT_DECL)\n   tree_node_sizes[(int) binfo_kind] += length;\n #endif\n \n-  t = ggc_alloc_zone_stat (length, &tree_zone PASS_MEM_STAT);\n+  t = ggc_alloc_zone_pass_stat (length, &tree_zone);\n \n   memset (t, 0, offsetof (struct tree_binfo, base_binfos));\n \n@@ -946,7 +946,7 @@ make_tree_vec_stat (int len MEM_STAT_DECL)\n   tree_node_sizes[(int) vec_kind] += length;\n #endif\n \n-  t = ggc_alloc_zone_stat (length, &tree_zone PASS_MEM_STAT);\n+  t = ggc_alloc_zone_pass_stat (length, &tree_zone);\n \n   memset (t, 0, length);\n \n@@ -1418,8 +1418,7 @@ tree_cons_stat (tree purpose, tree value, tree chain MEM_STAT_DECL)\n {\n   tree node;\n \n-  node = ggc_alloc_zone_stat (sizeof (struct tree_list),\n-\t\t\t      &tree_zone PASS_MEM_STAT);\n+  node = ggc_alloc_zone_pass_stat (sizeof (struct tree_list), &tree_zone);\n \n   memset (node, 0, sizeof (struct tree_common));\n \n@@ -2512,7 +2511,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 1);\n \n-  t = ggc_alloc_zone_stat (length, &tree_zone PASS_MEM_STAT);\n+  t = ggc_alloc_zone_pass_stat (length, &tree_zone);\n \n   memset (t, 0, sizeof (struct tree_common));\n "}]}