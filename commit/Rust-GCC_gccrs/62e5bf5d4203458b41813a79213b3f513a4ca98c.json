{"sha": "62e5bf5d4203458b41813a79213b3f513a4ca98c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlNWJmNWQ0MjAzNDU4YjQxODEzYTc5MjEzYjNmNTEzYTRjYTk4Yw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-01T20:32:20Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-01T20:32:20Z"}, "message": "alias.c (init_alias_analysis): Correct whitespace.\n\n\n\t* alias.c (init_alias_analysis): Correct whitespace.\n\t* bb-reorder.c (fix_edges_for_rarely_executed_code,\n\tpartition_hot_cold_basic_blocks): Likewise.\n\t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n\texpand_builtin_sprintf, fold_builtin_carg, fold_builtin_sprintf,\n\tmaybe_emit_sprintf_chk_warning, fold_builtin_sprintf_chk,\n\tfold_builtin_snprintf_chk, fold_builtin_printf,\n\tfold_builtin_fprintf, do_mpfr_ckconv, do_mpfr_arg1, do_mpfr_arg2,\n\tdo_mpfr_arg3, do_mpfr_sincos): Likewise.\n\t* cfgcleanup.c (cleanup_cfg): Likewise.\n\t* cfgexpand.c (tree_expand_cfg): Likewise.\n\t* fold-const.c (fold_binary) <RDIV_EXPR>: Likewise.\n\t* function.c (get_next_funcdef_no): Likewise.\n\t* gengtype.c (main): Likewise.\n\t* genmodes.c (main): Likewise.\n\t* gcse.c (bypass_conditional_jumps, print_ldst_list): Likewise.\n\t* haifa-sched.c (schedule_block, extend_h_i_d): Likewise.\n\t* ifcvt.c (noce_emit_move_insn): Likewise.\n\t* modulo-sched.c (generate_prolog_epilog, sms_schedule_by_order):\n\tLikewise.\n\t* stor-layout.c (get_best_mode): Likewise.\n\t* tree-ssa-loop-niter.c (get_val_for): Likewise.\n\t* tree-ssa-structalias.c (get_varinfo, get_varinfo_fc,\n\tscc_visit, do_ds_constraint, do_complex_constraint, label_visit,\n\tperform_var_substitution, solve_graph): Likewise.\n\t* tree-vrp.c (vrp_finalize): Likewise.\n\nFrom-SVN: r121470", "tree": {"sha": "4f883cdf40bcff1810e7d9c293a34dbdf22ce4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f883cdf40bcff1810e7d9c293a34dbdf22ce4e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e5bf5d4203458b41813a79213b3f513a4ca98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e5bf5d4203458b41813a79213b3f513a4ca98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e5bf5d4203458b41813a79213b3f513a4ca98c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e5bf5d4203458b41813a79213b3f513a4ca98c/comments", "author": null, "committer": null, "parents": [{"sha": "0f160ccf2876be5265381dc04a87e71e2dc5f0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f160ccf2876be5265381dc04a87e71e2dc5f0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f160ccf2876be5265381dc04a87e71e2dc5f0b6"}], "stats": {"total": 161, "additions": 97, "deletions": 64}, "files": [{"sha": "76fa4f5b3bb816913462fc342ac0aae32a96f2ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,3 +1,32 @@\n+2007-02-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* alias.c (init_alias_analysis): Correct whitespace.\n+\t* bb-reorder.c (fix_edges_for_rarely_executed_code,\n+\tpartition_hot_cold_basic_blocks): Likewise.\n+\t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n+\texpand_builtin_sprintf, fold_builtin_carg, fold_builtin_sprintf,\n+\tmaybe_emit_sprintf_chk_warning, fold_builtin_sprintf_chk,\n+\tfold_builtin_snprintf_chk, fold_builtin_printf,\n+\tfold_builtin_fprintf, do_mpfr_ckconv, do_mpfr_arg1, do_mpfr_arg2,\n+\tdo_mpfr_arg3, do_mpfr_sincos): Likewise.\n+\t* cfgcleanup.c (cleanup_cfg): Likewise.\n+\t* cfgexpand.c (tree_expand_cfg): Likewise.\n+\t* fold-const.c (fold_binary) <RDIV_EXPR>: Likewise.\n+\t* function.c (get_next_funcdef_no): Likewise.\n+\t* gengtype.c (main): Likewise.\n+\t* genmodes.c (main): Likewise.\n+\t* gcse.c (bypass_conditional_jumps, print_ldst_list): Likewise.\n+\t* haifa-sched.c (schedule_block, extend_h_i_d): Likewise.\n+\t* ifcvt.c (noce_emit_move_insn): Likewise.\n+\t* modulo-sched.c (generate_prolog_epilog, sms_schedule_by_order):\n+\tLikewise.\n+\t* stor-layout.c (get_best_mode): Likewise.\n+\t* tree-ssa-loop-niter.c (get_val_for): Likewise.\n+\t* tree-ssa-structalias.c (get_varinfo, get_varinfo_fc,\n+\tscc_visit, do_ds_constraint, do_complex_constraint, label_visit,\n+\tperform_var_substitution, solve_graph): Likewise.\n+\t* tree-vrp.c (vrp_finalize): Likewise.\n+\n 2007-02-01  Ian Lance Taylor  <iant@google.com>\n \n \t* lower-subreg.c (simplify_gen_subreg_concatn): If we ask for the"}, {"sha": "8b9254caa19ea74793061f94d5c5da2c5050f05f", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,6 +1,6 @@\n /* Alias analysis for GNU C\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+   2007 Free Software Foundation, Inc.\n    Contributed by John Carr (jfc@mit.edu).\n \n This file is part of GCC.\n@@ -2583,7 +2583,7 @@ init_alias_analysis (void)\n \t}\n \n       /* Now propagate values from new_reg_base_value to reg_base_value.  */\n-      gcc_assert (maxreg == (unsigned int) max_reg_num());\n+      gcc_assert (maxreg == (unsigned int) max_reg_num ());\n \n       for (ui = 0; ui < maxreg; ui++)\n \t{"}, {"sha": "9428ef3b92302abf0f8e994a1489161693503a68", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,6 @@\n /* Basic block reordering routines for the GNU compiler.\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1841,7 +1842,7 @@ fix_edges_for_rarely_executed_code (edge *crossing_edges,\n   if (!HAS_LONG_UNCOND_BRANCH)\n     {\n       fix_crossing_unconditional_branches ();\n-      reg_scan (get_insns(), max_reg_num ());\n+      reg_scan (get_insns (), max_reg_num ());\n     }\n \n   add_reg_crossing_jump_notes ();\n@@ -2191,7 +2192,7 @@ partition_hot_cold_basic_blocks (void)\n \n   free (crossing_edges);\n \n-  cfg_layout_finalize();\n+  cfg_layout_finalize ();\n }\n \f\n static bool"}, {"sha": "73d0a11a66eab7fa6d2181b00c173bad3a3b362a", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -5108,7 +5108,7 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n   if (fmt_str == NULL)\n     return 0;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* If the format specifier was \"%s\\n\", call __builtin_puts(arg).  */\n@@ -5224,7 +5224,7 @@ expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n   if (fmt_str == NULL)\n     return 0;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* If the format specifier was \"%s\", call __builtin_fputs(arg,fp).  */\n@@ -5316,7 +5316,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n   if (fmt_str == NULL)\n     return 0;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n@@ -9145,7 +9145,7 @@ fold_builtin_fmin_fmax (tree arglist, tree type, bool max)\n /* Fold a call to builtin carg(a+bi) -> atan2(b,a).  */\n \n static tree\n-fold_builtin_carg(tree arglist, tree type)\n+fold_builtin_carg (tree arglist, tree type)\n {\n   if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n     {\n@@ -10562,7 +10562,7 @@ fold_builtin_sprintf (tree arglist, int ignored)\n   call = NULL_TREE;\n   retval = NULL_TREE;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n@@ -10901,7 +10901,7 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n   if (fmt_str == NULL)\n     return;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return;\n \n   /* If the format doesn't contain % args or %%, we know its size.  */\n@@ -11363,7 +11363,7 @@ fold_builtin_sprintf_chk (tree arglist, enum built_in_function fcode)\n \n   len = NULL_TREE;\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* Check whether the format is a literal string constant.  */\n@@ -11488,7 +11488,7 @@ fold_builtin_snprintf_chk (tree arglist, tree maxlen,\n \treturn 0;\n     }\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* Only convert __{,v}snprintf_chk to {,v}snprintf if flag is 0\n@@ -11572,7 +11572,7 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n       fn_puts = implicit_built_in_decls[BUILT_IN_PUTS];\n     }\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   if (strcmp (fmt_str, target_percent_s) == 0 || strchr (fmt_str, target_percent) == NULL)\n@@ -11733,7 +11733,7 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n       fn_fputs = implicit_built_in_decls[BUILT_IN_FPUTS];\n     }\n \n-  if (!init_target_chars())\n+  if (!init_target_chars ())\n     return 0;\n \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n@@ -11841,12 +11841,12 @@ init_target_chars (void)\n    entering this function.  Return NULL_TREE if any checks fail.  */\n \n static tree\n-do_mpfr_ckconv(mpfr_srcptr m, tree type, int inexact)\n+do_mpfr_ckconv (mpfr_srcptr m, tree type, int inexact)\n {\n   /* Proceed iff we get a normal number, i.e. not NaN or Inf and no\n      overflow/underflow occurred.  If -frounding-math, proceed iff the\n      result of calling FUNC was exact.  */\n-  if (mpfr_number_p (m) && !mpfr_overflow_p() && !mpfr_underflow_p()\n+  if (mpfr_number_p (m) && !mpfr_overflow_p () && !mpfr_underflow_p ()\n       && (!flag_rounding_math || !inexact))\n     {\n       REAL_VALUE_TYPE rr;\n@@ -11905,7 +11905,7 @@ do_mpfr_arg1 (tree arg, tree type, int (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t),\n \n \t  mpfr_init2 (m, prec);\n \t  mpfr_from_real (m, ra);\n-\t  mpfr_clear_flags();\n+\t  mpfr_clear_flags ();\n \t  inexact = func (m, m, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m, type, inexact);\n \t  mpfr_clear (m);\n@@ -11949,7 +11949,7 @@ do_mpfr_arg2 (tree arg1, tree arg2, tree type,\n \t  mpfr_inits2 (prec, m1, m2, NULL);\n \t  mpfr_from_real (m1, ra1);\n \t  mpfr_from_real (m2, ra2);\n-\t  mpfr_clear_flags();\n+\t  mpfr_clear_flags ();\n \t  inexact = func (m1, m1, m2, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n \t  mpfr_clears (m1, m2, NULL);\n@@ -11998,7 +11998,7 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n \t  mpfr_from_real (m1, ra1);\n \t  mpfr_from_real (m2, ra2);\n \t  mpfr_from_real (m3, ra3);\n-\t  mpfr_clear_flags();\n+\t  mpfr_clear_flags ();\n \t  inexact = func (m1, m1, m2, m3, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n \t  mpfr_clears (m1, m2, m3, NULL);\n@@ -12040,7 +12040,7 @@ do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n \n \t  mpfr_inits2 (prec, m, ms, mc, NULL);\n \t  mpfr_from_real (m, ra);\n-\t  mpfr_clear_flags();\n+\t  mpfr_clear_flags ();\n \t  inexact = mpfr_sin_cos (ms, mc, m, GMP_RNDN);\n \t  result_s = do_mpfr_ckconv (ms, type, inexact);\n \t  result_c = do_mpfr_ckconv (mc, type, inexact);"}, {"sha": "7c5b745a65067aa795050be7f7706fd5acd4260f", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,6 +1,7 @@\n /* Control flow optimization code for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2234,7 +2235,7 @@ cleanup_cfg (int mode)\n \t now to introduce more opportunities for try_optimize_cfg.  */\n       if (!(mode & (CLEANUP_NO_INSN_DEL | CLEANUP_UPDATE_LIFE))\n \t  && !reload_completed)\n-\tdelete_trivially_dead_insns (get_insns(), max_reg_num ());\n+\tdelete_trivially_dead_insns (get_insns (), max_reg_num ());\n     }\n \n   compact_blocks ();\n@@ -2259,7 +2260,7 @@ cleanup_cfg (int mode)\n \t       && (mode & CLEANUP_EXPENSIVE)\n \t       && !reload_completed)\n \t{\n-\t  if (!delete_trivially_dead_insns (get_insns(), max_reg_num ()))\n+\t  if (!delete_trivially_dead_insns (get_insns (), max_reg_num ()))\n \t    break;\n \t}\n       else"}, {"sha": "b0ea1fcd4199cba5a4bc5c095e4267a6f13beabc", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,5 @@\n /* A pass for lowering trees to RTL.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1829,7 +1829,7 @@ tree_expand_cfg (void)\n \n   compact_blocks ();\n #ifdef ENABLE_CHECKING\n-  verify_flow_info();\n+  verify_flow_info ();\n #endif\n \n   /* There's no need to defer outputting this function any more; we"}, {"sha": "e587ea94034bbb72e1de35b8f9c7d5892cfe8081", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -10232,8 +10232,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      tree arg10 = TREE_VALUE (TREE_OPERAND (arg1, 1));\n \t      tree arg11 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg1, 1)));\n \t      tree neg11 = fold_convert (type, negate_expr (arg11));\n-\t      tree arglist = tree_cons(NULL_TREE, arg10,\n-\t\t\t\t       build_tree_list (NULL_TREE, neg11));\n+\t      tree arglist = tree_cons (NULL_TREE, arg10,\n+\t\t\t\t\tbuild_tree_list (NULL_TREE, neg11));\n \t      arg1 = build_function_call_expr (powfn, arglist);\n \t      return fold_build2 (MULT_EXPR, type, arg0, arg1);\n \t    }"}, {"sha": "b80176c304fdb5c52f8ee346e28c02436cc5689b", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GCC.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3776,7 +3776,7 @@ debug_find_var_in_block_tree (tree var, tree block)\n \n /* Return value of funcdef and increase it.  */\n int\n-get_next_funcdef_no(void) \n+get_next_funcdef_no (void) \n {\n   return funcdef_no++;\n }"}, {"sha": "485e53ddaa0cdc3eb2b527e42fb64a2fa9975979", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,7 +1,7 @@\n /* Global common subexpression elimination/Partial redundancy elimination\n    and global constant/copy propagation for GNU compiler.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3731,7 +3731,7 @@ bypass_conditional_jumps (void)\n   /* If we bypassed any register setting insns, we inserted a\n      copy on the redirected edge.  These need to be committed.  */\n   if (changed)\n-    commit_edge_insertions();\n+    commit_edge_insertions ();\n \n   return changed;\n }\n@@ -5127,7 +5127,7 @@ print_ldst_list (FILE * file)\n \n   fprintf (file, \"LDST list: \\n\");\n \n-  for (ptr = first_ls_expr(); ptr != NULL; ptr = next_ls_expr (ptr))\n+  for (ptr = first_ls_expr (); ptr != NULL; ptr = next_ls_expr (ptr))\n     {\n       fprintf (file, \"  Pattern (%3d): \", ptr->index);\n "}, {"sha": "515c31c4695938b55ad83165088dddd8ad9988ea", "filename": "gcc/gengtype.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,6 @@\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3046,7 +3047,7 @@ write_roots (pair_p variables)\n \f\n extern int main (int argc, char **argv);\n int\n-main(int ARG_UNUSED (argc), char ** ARG_UNUSED (argv))\n+main (int ARG_UNUSED (argc), char ** ARG_UNUSED (argv))\n {\n   unsigned i;\n   static struct fileloc pos = { __FILE__, __LINE__ };"}, {"sha": "97e194bebd42f80861dd00cf5e0059c96034e523", "filename": "gcc/genmodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,5 @@\n /* Generate the machine mode enumeration and associated tables.\n-   Copyright (C) 2003, 2004\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1260,7 +1260,7 @@ emit_min_insn_modes_c (void)\n \n /* Master control.  */\n int\n-main(int argc, char **argv)\n+main (int argc, char **argv)\n {\n   bool gen_header = false, gen_min = false;\n   progname = argv[0];"}, {"sha": "21b3d6450422cb57736f164a9045083b5e04218b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -2202,7 +2202,7 @@ schedule_block (basic_block *target_bb, int rgn_n_insns1)\n \t\t there's nothing better to do (ready list is empty) but\n \t\t there are still vacant dispatch slots in the current cycle.  */\n \t      if (sched_verbose >= 6)\n-\t\tfprintf(sched_dump,\";;\\t\\tSecond chance\\n\");\n+\t\tfprintf (sched_dump,\";;\\t\\tSecond chance\\n\");\n \t      memcpy (temp_state, curr_state, dfa_state_size);\n \t      if (early_queue_to_ready (temp_state, &ready))\n \t\tready_sort (&ready);\n@@ -3027,7 +3027,7 @@ extend_h_i_d (void)\n {\n   /* We use LUID 0 for the fake insn (UID 0) which holds dependencies for\n      pseudos which do not cross calls.  */\n-  int new_max_uid = get_max_uid() + 1;  \n+  int new_max_uid = get_max_uid () + 1;  \n \n   h_i_d = xrecalloc (h_i_d, new_max_uid, old_max_uid, sizeof (*h_i_d));\n   old_max_uid = new_max_uid;"}, {"sha": "bbd349daf0718f81be9aa94abac4ff5119968568", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,5 @@\n /* If-conversion support.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -722,7 +722,7 @@ noce_emit_move_insn (rtx x, rtx y)\n \t     ? emit_move_insn (x, y)\n \t     : emit_insn (gen_rtx_SET (VOIDmode, x, y));\n       seq = get_insns ();\n-      end_sequence();\n+      end_sequence ();\n \n       if (recog_memoized (insn) <= 0)\n \t{"}, {"sha": "7da7ed869e0900c9ddc89c190d14c7bcaa6b914a", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,5 @@\n /* Swing Modulo Scheduling implementation.\n-   Copyright (C) 2004, 2005, 2006\n+   Copyright (C) 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Ayal Zaks and Mustafa Hagog <zaks,mustafa@il.ibm.com>\n \n@@ -744,7 +744,7 @@ generate_prolog_epilog (partial_schedule_ptr ps, struct loop * loop, rtx count_r\n \n   /* Put the prolog on the entry edge.  */\n   e = loop_preheader_edge (loop);\n-  split_edge_and_insert (e, get_insns());\n+  split_edge_and_insert (e, get_insns ());\n \n   end_sequence ();\n \n@@ -757,7 +757,7 @@ generate_prolog_epilog (partial_schedule_ptr ps, struct loop * loop, rtx count_r\n   /* Put the epilogue on the exit edge.  */\n   gcc_assert (single_exit (loop));\n   e = single_exit (loop);\n-  split_edge_and_insert (e, get_insns());\n+  split_edge_and_insert (e, get_insns ());\n   end_sequence ();\n }\n \n@@ -1469,7 +1469,7 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order)\n       bool unscheduled_nodes = false;\n \n       if (dump_file)\n-\tfprintf(dump_file, \"Starting with ii=%d\\n\", ii);\n+\tfprintf (dump_file, \"Starting with ii=%d\\n\", ii);\n       if (try_again_with_larger_ii)\n \t{\n \t  try_again_with_larger_ii = false;\n@@ -1521,8 +1521,9 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order)\n \t    }\n \t  /* 2. Try scheduling u in window.  */\n \t  if (dump_file)\n-\t    fprintf(dump_file, \"Trying to schedule node %d in (%d .. %d) step %d\\n\",\n-\t\t    u, start, end, step);\n+\t    fprintf (dump_file,\n+\t\t     \"Trying to schedule node %d in (%d .. %d) step %d\\n\",\n+\t\t     u, start, end, step);\n \n           /* use must_follow & must_precede bitmaps to determine order\n \t     of nodes within the cycle.  */\n@@ -1556,7 +1557,7 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order)\n \t\t    SET_BIT (sched_nodes, u);\n \t\t    success = 1;\n \t\t    if (dump_file)\n-\t\t      fprintf(dump_file, \"Schedule in %d\\n\", c);\n+\t\t      fprintf (dump_file, \"Schedule in %d\\n\", c);\n \t\t    break;\n \t\t  }\n \t      }"}, {"sha": "43ca759df07e6befcb331acba998228e624bff0b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -2162,7 +2162,7 @@ get_best_mode (int bitsize, int bitpos, unsigned int align,\n     return VOIDmode;\n \n   if ((SLOW_BYTE_ACCESS && ! volatilep)\n-      || (volatilep && !targetm.narrow_volatile_bitfield()))\n+      || (volatilep && !targetm.narrow_volatile_bitfield ()))\n     {\n       enum machine_mode wide_mode = VOIDmode, tmode;\n "}, {"sha": "c2a9f9c2039d5f2501ef4eec804c9ed2b52e9e0f", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1311,7 +1311,7 @@ get_val_for (tree x, tree base)\n     }\n \n   /* Should never reach here.  */\n-  gcc_unreachable();\n+  gcc_unreachable ();\n }\n \n /* Tries to count the number of iterations of LOOP till it exits by EXIT"}, {"sha": "576ae1b78bb41f3467c08e43bfe24566e6238b22", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -1,5 +1,5 @@\n /* Tree based points-to analysis\n-   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dberlin@dberlin.org>\n \n This file is part of GCC.\n@@ -288,15 +288,15 @@ static VEC(varinfo_t,heap) *varmap;\n static inline varinfo_t\n get_varinfo (unsigned int n)\n {\n-  return VEC_index(varinfo_t, varmap, n);\n+  return VEC_index (varinfo_t, varmap, n);\n }\n \n /* Return the varmap element N, following the collapsed_to link.  */\n \n static inline varinfo_t\n get_varinfo_fc (unsigned int n)\n {\n-  varinfo_t v = VEC_index(varinfo_t, varmap, n);\n+  varinfo_t v = VEC_index (varinfo_t, varmap, n);\n \n   if (v->collapsed_to)\n     return v->collapsed_to;\n@@ -1124,7 +1124,7 @@ scc_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n       {\n \tunsigned int t = find (w);\n \tunsigned int nnode = find (n);\n-\tgcc_assert(nnode == n);\n+\tgcc_assert (nnode == n);\n \n \tif (si->dfs[t] < si->dfs[nnode])\n \t  si->dfs[n] = si->dfs[t];\n@@ -1465,7 +1465,7 @@ do_ds_constraint (constraint_t c, bitmap delta)\n   EXECUTE_IF_SET_IN_BITMAP (delta, 0, j, bi)\n     {\n       unsigned HOST_WIDE_INT loff = c->lhs.offset;\n-      if (type_safe (j, &loff) && !(get_varinfo(j)->is_special_var))\n+      if (type_safe (j, &loff) && !(get_varinfo (j)->is_special_var))\n \t{\n \t  varinfo_t v;\n \t  unsigned int t;\n@@ -1527,7 +1527,7 @@ do_complex_constraint (constraint_graph_t graph, constraint_t c, bitmap delta)\n       bool flag = false;\n       unsigned int t;\n \n-      gcc_assert(c->rhs.type == SCALAR && c->lhs.type == SCALAR);\n+      gcc_assert (c->rhs.type == SCALAR && c->lhs.type == SCALAR);\n       t = find (c->rhs.var);\n       solution = get_varinfo (t)->solution;\n       t = find (c->lhs.var);\n@@ -1692,7 +1692,7 @@ label_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n       {\n \tunsigned int t = si->node_mapping[w];\n \tunsigned int nnode = si->node_mapping[n];\n-\tgcc_assert(nnode == n);\n+\tgcc_assert (nnode == n);\n \n \tif (si->dfs[t] < si->dfs[nnode])\n \t  si->dfs[n] = si->dfs[t];\n@@ -1797,7 +1797,7 @@ perform_var_substitution (constraint_graph_t graph)\n \tfprintf (dump_file,\n \t\t \"Equivalence class for %s node id %d:%s is %d\\n\",\n \t\t direct_node ? \"Direct node\" : \"Indirect node\", i,\n-\t\t get_varinfo(i)->name,\n+\t\t get_varinfo (i)->name,\n \t\t graph->label[si->node_mapping[i]]);\n       }\n \n@@ -2053,7 +2053,7 @@ solve_graph (constraint_graph_t graph)\n \n \t  /* In certain indirect cycle cases, we may merge this\n \t     variable to another.  */\n-\t  if (eliminate_indirect_cycles (i) && find(i) != i)\n+\t  if (eliminate_indirect_cycles (i) && find (i) != i)\n \t    continue;\n \n \t  /* If the node has changed, we need to process the"}, {"sha": "8ed50a91268142f94c051e62256bb21823ff8b9d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e5bf5d4203458b41813a79213b3f513a4ca98c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=62e5bf5d4203458b41813a79213b3f513a4ca98c", "patch": "@@ -4960,7 +4960,7 @@ vrp_finalize (void)\n   substitute_and_fold (single_val_range, true);\n \n   if (warn_array_bounds)\n-      check_all_array_refs();\n+      check_all_array_refs ();\n \n   /* We must identify jump threading opportunities before we release\n      the datastructures built by VRP.  */"}]}