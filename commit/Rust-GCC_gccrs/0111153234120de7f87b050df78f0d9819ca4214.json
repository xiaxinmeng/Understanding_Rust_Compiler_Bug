{"sha": "0111153234120de7f87b050df78f0d9819ca4214", "node_id": "C_kwDOANBUbNoAKDAxMTExNTMyMzQxMjBkZTdmODdiMDUwZGY3OGYwZDk4MTljYTQyMTQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-09-24T08:49:13Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-09-30T13:07:19Z"}, "message": "libphobos: Remove unused variables in gcc.backtrace.\n\nThe core.runtime module always overrides the default parameter value for\nconstructor calls.  MaxAlignment is not required because a class can be\ncreated on the stack with the `scope' keyword.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/core/runtime.d (runModuleUnitTests): Use scope to new\n\tLibBacktrace on the stack.\n\t* libdruntime/gcc/backtrace.d (FIRSTFRAME): Remove.\n\t(LibBacktrace.MaxAlignment): Remove.\n\t(LibBacktrace.this): Remove default initialization of firstFrame.\n\t(UnwindBacktrace.this): Likewise.", "tree": {"sha": "410d42d4ef765829c978c1584becdb4fdff7efa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410d42d4ef765829c978c1584becdb4fdff7efa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0111153234120de7f87b050df78f0d9819ca4214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0111153234120de7f87b050df78f0d9819ca4214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0111153234120de7f87b050df78f0d9819ca4214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0111153234120de7f87b050df78f0d9819ca4214/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa5449a094d3887e124d400ff0410af2c745b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa5449a094d3887e124d400ff0410af2c745b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa5449a094d3887e124d400ff0410af2c745b2d"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "5fc99046d23557a7f267e63015ac768ee599ca6c", "filename": "libphobos/libdruntime/core/runtime.d", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0111153234120de7f87b050df78f0d9819ca4214/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0111153234120de7f87b050df78f0d9819ca4214/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fruntime.d?ref=0111153234120de7f87b050df78f0d9819ca4214", "patch": "@@ -483,17 +483,9 @@ extern (C) bool runModuleUnitTests()\n             fprintf(stderr, \"Segmentation fault while running unittests:\\n\");\n             fprintf(stderr, \"----------------\\n\");\n \n-            enum alignment = LibBacktrace.MaxAlignment;\n-            enum classSize = __traits(classInstanceSize, LibBacktrace);\n-\n-            void[classSize + alignment] bt_store = void;\n-            void* alignedAddress = cast(byte*)((cast(size_t)(bt_store.ptr + alignment - 1))\n-                & ~(alignment - 1));\n-\n-            (alignedAddress[0 .. classSize]) = typeid(LibBacktrace).initializer[];\n-            auto bt = cast(LibBacktrace)(alignedAddress);\n-            // First frame is LibBacktrace ctor. Second is signal handler, but include that for now\n-            bt.__ctor(1);\n+            // First frame is LibBacktrace ctor. Second is signal handler,\n+            // but include that for now\n+            scope bt = new LibBacktrace(1);\n \n             foreach (size_t i, const(char[]) msg; bt)\n                 fprintf(stderr, \"%s\\n\", msg.ptr ? msg.ptr : \"???\");"}, {"sha": "3c4d65f417fda762e95c8275662ea96dccdc7d59", "filename": "libphobos/libdruntime/gcc/backtrace.d", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0111153234120de7f87b050df78f0d9819ca4214/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0111153234120de7f87b050df78f0d9819ca4214/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d?ref=0111153234120de7f87b050df78f0d9819ca4214", "patch": "@@ -24,24 +24,6 @@ module gcc.backtrace;\n \n import gcc.libbacktrace;\n \n-version (Posix)\n-{\n-    // NOTE: The first 5 frames with the current implementation are\n-    //       inside core.runtime and the object code, so eliminate\n-    //       these for readability.  The alternative would be to\n-    //       exclude the first N frames that are in a list of\n-    //       mangled function names.\n-    private enum FIRSTFRAME = 5;\n-}\n-else\n-{\n-    // NOTE: On Windows, the number of frames to exclude is based on\n-    //       whether the exception is user or system-generated, so\n-    //       it may be necessary to exclude a list of function names\n-    //       instead.\n-    private enum FIRSTFRAME = 0;\n-}\n-\n // Max size per line of the traceback.\n private enum MAX_BUFSIZE = 1536;\n \n@@ -205,8 +187,6 @@ static if (BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC)\n     // FIXME: state is never freed as libbacktrace doesn't provide a free function...\n     public class LibBacktrace : Throwable.TraceInfo\n     {\n-        enum MaxAlignment = (void*).alignof;\n-\n         static void initLibBacktrace()\n         {\n             if (!initialized)\n@@ -216,7 +196,7 @@ static if (BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC)\n             }\n         }\n \n-        this(int firstFrame = FIRSTFRAME)\n+        this(int firstFrame)\n         {\n             _firstFrame = firstFrame;\n \n@@ -365,7 +345,7 @@ else\n      */\n     public class UnwindBacktrace : Throwable.TraceInfo\n     {\n-        this(int firstFrame = FIRSTFRAME)\n+        this(int firstFrame)\n         {\n             _firstFrame = firstFrame;\n             _callstack = getBacktrace();"}]}