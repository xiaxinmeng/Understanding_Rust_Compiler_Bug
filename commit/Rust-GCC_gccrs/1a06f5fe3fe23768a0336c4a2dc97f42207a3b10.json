{"sha": "1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwNmY1ZmUzZmUyMzc2OGEwMzM2YzRhMmRjOTdmNDIyMDdhM2IxMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-14T15:38:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-14T15:38:55Z"}, "message": "expr.c (emit_move_insn_1): Split push of complex value when no suitable push instruction exist.\n\n\t* expr.c (emit_move_insn_1):  Split push of complex value when\n\tno suitable push instruction exist.\n\n\t* i386.md (QImode move/add/shift patterns): Use ANY_QI_REG_P\n\tinstead of QI_REG_P.\n\nFrom-SVN: r40454", "tree": {"sha": "1c2e5b34b8e26aee9ad132104f2e0aeaee5463b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c2e5b34b8e26aee9ad132104f2e0aeaee5463b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/comments", "author": null, "committer": null, "parents": [{"sha": "2f2aa235bd3f79727d2ebfd4faab2f0a2048ea30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2aa235bd3f79727d2ebfd4faab2f0a2048ea30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2aa235bd3f79727d2ebfd4faab2f0a2048ea30"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "54031ae237a6a1371a84ee64622b6c9c74dd0539", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "patch": "@@ -1,3 +1,11 @@\n+Wed Mar 14 16:36:25 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expr.c (emit_move_insn_1):  Split push of complex value when\n+\tno suitable push instruction exist.\n+\n+\t* i386.md (QImode move/add/shift patterns): Use ANY_QI_REG_P\n+\tinstead of QI_REG_P.\n+\n Tue Mar 13 22:22:04 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* alias.c (handled_component_p, can_address_p): New functions."}, {"sha": "df06a2f3378fcce2979f0dc3557daf803089ce65", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "patch": "@@ -1138,7 +1138,7 @@ enum reg_class\n   ((n) < 8 || REX_INT_REGNO_P (n))\n \n #define GENERAL_REG_P(X) \\\n-  (REG_P (X) && GENERAL_REG_REGNO_P (X))\n+  (REG_P (X) && GENERAL_REGNO_P (X))\n \n #define ANY_QI_REG_P(X) (TARGET_64BIT ? GENERAL_REG_P(X) : QI_REG_P (X))\n "}, {"sha": "c700f2317b025c6756e52677d9fb6ebef0d1fd82", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "patch": "@@ -1911,7 +1911,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_IMOVX:\n-      if (!QI_REG_P (operands[1]) && GET_CODE (operands[1]) != MEM)\n+      if (!ANY_QI_REG_P (operands[1]) && GET_CODE (operands[1]) != MEM)\n \tabort ();\n       return \\\"movz{bl|x}\\\\t{%1, %k0|%k0, %1}\\\";\n     default:\n@@ -3077,7 +3077,7 @@\n    (clobber (reg:CC 17))]\n   \"reload_completed \n    && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n-   && (!REG_P (operands[1]) || QI_REG_P (operands[1]))\"\n+   && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))])\n \n@@ -3088,7 +3088,7 @@\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\n-   && QI_REG_P (operands[0])\n+   && ANY_QI_REG_P (operands[0])\n    && (TARGET_ZERO_EXTEND_WITH_AND && !optimize_size)\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -3147,7 +3147,7 @@\n    (clobber (reg:CC 17))]\n   \"reload_completed \n    && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n-   && (!REG_P (operands[1]) || QI_REG_P (operands[1]))\"\n+   && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_dup 0)\n \t(zero_extend:SI (match_dup 1)))])\n \n@@ -3158,8 +3158,8 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\n-   && QI_REG_P (operands[0])\n-   && (QI_REG_P (operands[1]) || GET_CODE (operands[1]) == MEM)\n+   && ANY_QI_REG_P (operands[0])\n+   && (ANY_QI_REG_P (operands[1]) || GET_CODE (operands[1]) == MEM)\n    && (TARGET_ZERO_EXTEND_WITH_AND && !optimize_size)\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -8470,7 +8470,7 @@\n     case TYPE_ALU:\n       if (operands[2] != const1_rtx)\n \tabort ();\n-      if (NON_QI_REG_P (operands[1]))\n+      if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n         return \\\"add{l}\\\\t{%k0, %k0|%k0, %k0}\\\";\n       else\n         return \\\"add{b}\\\\t{%0, %0|%0, %0}\\\";\n@@ -8527,15 +8527,15 @@\n     case TYPE_ALU:\n       if (operands[2] != const1_rtx)\n \tabort ();\n-      if (NON_QI_REG_P (operands[1]))\n+      if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n         return \\\"add{l}\\\\t{%k0, %k0|%k0, %k0}\\\";\n       else\n         return \\\"add{b}\\\\t{%0, %0|%0, %0}\\\";\n \n     default:\n       if (REG_P (operands[2]))\n \t{\n-          if (NON_QI_REG_P (operands[1]))\n+\t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \\\"sal{l}\\\\t{%b2, %k0|%k0, %b2}\\\";\n \t  else\n \t    return \\\"sal{b}\\\\t{%b2, %0|%0, %b2}\\\";\n@@ -8544,14 +8544,14 @@\n \t       && INTVAL (operands[2]) == 1\n \t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n \t{\n-          if (NON_QI_REG_P (operands[1]))\n+\t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \\\"sal{l}\\\\t%0\\\";\n \t  else\n \t    return \\\"sal{b}\\\\t%0\\\";\n \t}\n       else\n \t{\n-          if (NON_QI_REG_P (operands[1]))\n+\t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \\\"sal{l}\\\\t{%2, %k0|%k0, %2}\\\";\n \t  else\n \t    return \\\"sal{b}\\\\t{%2, %0|%0, %2}\\\";"}, {"sha": "44900a61346811f676de661a6ec24fe5d0d09384", "filename": "gcc/expr.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a06f5fe3fe23768a0336c4a2dc97f42207a3b10/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1a06f5fe3fe23768a0336c4a2dc97f42207a3b10", "patch": "@@ -2786,12 +2786,55 @@ emit_move_insn_1 (x, y)\n       /* Don't split destination if it is a stack push.  */\n       int stack = push_operand (x, GET_MODE (x));\n \n+      /* In case we output to the stack, but the size is smaller machine can\n+\t push exactly, we need to use move instructions.  */\n+      if (stack\n+\t  && PUSH_ROUNDING (GET_MODE_SIZE (submode)) != GET_MODE_SIZE (submode))\n+\t{\n+\t  rtx temp;\n+\t  int offset1, offset2;\n+\n+\t  /* Do not use anti_adjust_stack, since we don't want to update\n+\t     stack_pointer_delta.  */\n+\t  temp = expand_binop (Pmode,\n+#ifdef STACK_GROWS_DOWNWARD\n+\t\t\t       sub_optab,\n+#else\n+\t\t\t       add_optab,\n+#endif\n+\t\t\t       stack_pointer_rtx,\n+\t\t\t       GEN_INT\n+\t\t\t\t (PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))),\n+\t\t\t       stack_pointer_rtx,\n+\t\t\t       0,\n+\t\t\t       OPTAB_LIB_WIDEN);\n+\t  if (temp != stack_pointer_rtx)\n+\t    emit_move_insn (stack_pointer_rtx, temp);\n+#ifdef STACK_GROWS_DOWNWARD\n+\t  offset1 = 0;\n+\t  offset2 = GET_MODE_SIZE (submode);\n+#else\n+\t  offset1 = -PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)));\n+\t  offset2 = (-PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))\n+\t\t     + GET_MODE_SIZE (submode));\n+#endif\n+\t  emit_move_insn (change_address (x, submode,\n+\t\t\t\t\t  gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t        stack_pointer_rtx,\n+\t\t\t\t\t\t\tGEN_INT (offset1))),\n+\t\t\t  gen_realpart (submode, y));\n+\t  emit_move_insn (change_address (x, submode,\n+\t\t\t\t\t  gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t        stack_pointer_rtx,\n+\t\t\t\t\t\t\tGEN_INT (offset2))),\n+\t\t\t  gen_imagpart (submode, y));\n+\t}\n       /* If this is a stack, push the highpart first, so it\n \t will be in the argument order.\n \n \t In that case, change_address is used only to convert\n \t the mode, not to change the address.  */\n-      if (stack)\n+      else if (stack)\n \t{\n \t  /* Note that the real part always precedes the imag part in memory\n \t     regardless of machine's endianness.  */"}]}