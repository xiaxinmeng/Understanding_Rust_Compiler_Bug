{"sha": "43804767bb0ac9695e67f01b9a4a708d79c72465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4MDQ3NjdiYjBhYzk2OTVlNjdmMDFiOWE0YTcwOGQ3OWM3MjQ2NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-30T13:02:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-30T13:02:58Z"}, "message": "stl_algo.h (stable_sort): Uglify the buf variable.\n\n2006-07-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (stable_sort): Uglify the buf variable.\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer<>::\n\t_M_initialize_buffer): Uglify the val parameter.\n\nFrom-SVN: r115820", "tree": {"sha": "fa10507574d1548c2333496f0adf7b3de28d126e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa10507574d1548c2333496f0adf7b3de28d126e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43804767bb0ac9695e67f01b9a4a708d79c72465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43804767bb0ac9695e67f01b9a4a708d79c72465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43804767bb0ac9695e67f01b9a4a708d79c72465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43804767bb0ac9695e67f01b9a4a708d79c72465/comments", "author": null, "committer": null, "parents": [{"sha": "56ee081b4a698df0959b6a312694846b56964d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ee081b4a698df0959b6a312694846b56964d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ee081b4a698df0959b6a312694846b56964d2d"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "33c2d80a8069ccd38f6aa91387f74301a0e28418", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43804767bb0ac9695e67f01b9a4a708d79c72465", "patch": "@@ -1,3 +1,9 @@\n+2006-07-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (stable_sort): Uglify the buf variable.\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer<>::\n+\t_M_initialize_buffer): Uglify the val parameter.\n+\n 2006-07-27  Benjamin Kosnik  <bkoz@wells.artheist.org>\n \n \tPR libstdc++/19664 round 3\t"}, {"sha": "cbdcd98c75777de4372348b8f1ac588a60eeaa06", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=43804767bb0ac9695e67f01b9a4a708d79c72465", "patch": "@@ -3850,13 +3850,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      _Temporary_buffer<_RandomAccessIterator, _ValueType>\n-\tbuf(__first, __last);\n-      if (buf.begin() == 0)\n+      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,\n+\t\t\t\t\t\t\t\t __last);\n+      if (__buf.begin() == 0)\n \tstd::__inplace_stable_sort(__first, __last);\n       else\n-\tstd::__stable_sort_adaptive(__first, __last, buf.begin(),\n-\t\t\t\t    _DistanceType(buf.size()));\n+\tstd::__stable_sort_adaptive(__first, __last, __buf.begin(),\n+\t\t\t\t    _DistanceType(__buf.size()));\n     }\n \n   /**\n@@ -3894,12 +3894,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      _Temporary_buffer<_RandomAccessIterator, _ValueType> buf(__first, __last);\n-      if (buf.begin() == 0)\n+      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,\n+\t\t\t\t\t\t\t\t __last);\n+      if (__buf.begin() == 0)\n \tstd::__inplace_stable_sort(__first, __last, __comp);\n       else\n-\tstd::__stable_sort_adaptive(__first, __last, buf.begin(),\n-\t\t\t\t    _DistanceType(buf.size()), __comp);\n+\tstd::__stable_sort_adaptive(__first, __last, __buf.begin(),\n+\t\t\t\t    _DistanceType(__buf.size()), __comp);\n     }\n \n   /**"}, {"sha": "fbe24e795d73e20b547105ba14417a3364bf404a", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43804767bb0ac9695e67f01b9a4a708d79c72465/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=43804767bb0ac9695e67f01b9a4a708d79c72465", "patch": "@@ -1,6 +1,7 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -78,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_class_requires(_ForwardIterator, _ForwardIteratorConcept)\n \n-\tpublic:\n+    public:\n       typedef _Tp         value_type;\n       typedef value_type* pointer;\n       typedef pointer     iterator;\n@@ -93,8 +94,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_initialize_buffer(const _Tp&, __true_type) { }\n \n       void\n-      _M_initialize_buffer(const _Tp& val, __false_type)\n-      { std::uninitialized_fill_n(_M_buffer, _M_len, val); }\n+      _M_initialize_buffer(const _Tp& __val, __false_type)\n+      { std::uninitialized_fill_n(_M_buffer, _M_len, __val); }\n \n     public:\n       /// As per Table mumble."}]}