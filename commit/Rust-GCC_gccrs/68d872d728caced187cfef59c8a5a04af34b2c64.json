{"sha": "68d872d728caced187cfef59c8a5a04af34b2c64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkODcyZDcyOGNhY2VkMTg3Y2ZlZjU5YzhhNWEwNGFmMzRiMmM2NA==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2017-07-06T11:52:05Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-07-06T11:52:05Z"}, "message": "Add missing intrinsics for VGETMANT[SD,SS] and VGETEXP[SD,SS]\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm_mask_getexp_round_ss, \n\t_mm_maskz_getexp_round_ss,\t_mm_mask_getexp_round_sd, \n\t_mm_maskz_getexp_round_sd, _mm_mask_getmant_round_sd,\n\t_mm_maskz_getmant_round_sd, _mm_mask_getmant_round_ss, \n\t_mm_maskz_getmant_round_ss, _mm_mask_getexp_ss, _mm_maskz_getexp_ss, \n\t_mm_mask_getexp_sd, _mm_maskz_getexp_sd, _mm_mask_getmant_sd, \n\t_mm_maskz_getmant_sd, _mm_mask_getmant_ss, \n\t_mm_maskz_getmant_ss): New intrinsics.\n\t(__builtin_ia32_getexpss128_mask): Changed to ...\n\t__builtin_ia32_getexpss128_round ... this.\n\t(__builtin_ia32_getexpsd128_mask): Changed to ...\n\t__builtin_ia32_getexpsd128_round ... this.\n\t* config/i386/i386-builtin-types.def \n\t((V2DF, V2DF, V2DF, INT, V2DF, UQI, INT),\n\t(V4SF, V4SF, V4SF, INT, V4SF, UQI, INT)): New function type aliases.\n\t* config/i386/i386-builtin.def (__builtin_ia32_getexpsd_mask_round, \n\t__builtin_ia32_getexpss_mask_round,\t__builtin_ia32_getmantsd_mask_round, \n\t__builtin_ia32_getmantss_mask_round): New builtins.\n\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT,\n\tV4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT): Handle new types.\n\t(CODE_FOR_avx512f_vgetmantv2df_mask_round, \n\tCODE_FOR_avx512f_vgetmantv4sf_mask_round): New cases.\n\t* config/i386/sse.md \n\t(avx512f_sgetexp<mode><round_saeonly_name>): Changed to ...\n\tavx512f_sgetexp<mode><mask_scalar_name>\n\t<round_saeonly_scalar_name> ... this.\n\t(vgetexp<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|\n\t%0, %1, %2<round_saeonly_op3>}): Changed to ...\n\tvgetexp<ssescalarmodesuffix>\n\t\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n\t%0<mask_scalar_operand3>, %1, %2<round_saeonly_scalar_mask_op3>} ... this.\n\t(avx512f_vgetmant<mode><round_saeonly_name>): Changed to ...\n\tavx512f_vgetmant<mode><mask_scalar_name>\n\t<round_saeonly_scalar_name> ... this.\n\t(vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|\n\t%0, %1, %2<round_saeonly_op4>, %3}): Changed to ...\n\tvgetmant<ssescalarmodesuffix>\n\t\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|\n\t%0<mask_scalar_operand4>, %1, %2\n\t<round_saeonly_scalar_mask_op4>, %3} ... this.\n\t* config/i386/subst.md (mask_scalar_operand4, \n\tround_saeonly_scalar_mask_operand4,\tround_saeonly_scalar_mask_op4, \n\tround_saeonly_scalar_nimm_predicate): New subst attributes.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vgetexpsd-1.c (_mm_mask_getexp_sd, \n\t_mm_maskz_getexp_sd, _mm_mask_getexp_round_sd, \n\t_mm_maskz_getexp_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vgetexpss-1.c (_mm_mask_getexp_ss, \n\t_mm_maskz_getexp_ss, _mm_mask_getexp_round_ss, \n\t_mm_maskz_getexp_round_ss): Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-1.c (_mm_mask_getmant_sd, \n\t_mm_maskz_getmant_sd, _mm_mask_getmant_round_sd, \n\t_mm_maskz_getmant_round_sd): Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-1.c (_mm_mask_getmant_ss, \n\t_mm_maskz_getmant_ss, _mm_mask_getmant_round_ss, \n\t_mm_maskz_getmant_round_ss): Ditto.\n\t* gcc.target/i386/avx512f-vgetexpsd-2.c (_mm_mask_getexp_sd, \n\t_mm_maskz_getexp_sd, _mm_getexp_round_sd, _mm_mask_getexp_round_sd, \n\t_mm_maskz_getexp_round_sd): New runtime tests.\n\t* gcc.target/i386/avx512f-vgetexpss-2.c (_mm_mask_getexp_ss, \n\t_mm_maskz_getexp_ss, _mm_getexp_round_ss, _mm_mask_getexp_round_ss, \n\t_mm_maskz_getexp_round_ss): Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-2.c (_mm_mask_getmant_sd, \n\t_mm_maskz_getmant_sd, _mm_getmant_round_sd, _mm_mask_getmant_round_sd, \n\t_mm_maskz_getmant_round_sd): Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-2.c (_mm_mask_getmant_ss, \n\t_mm_maskz_getmant_ss, _mm_getmant_round_ss, _mm_mask_getmant_round_ss, \n\t_mm_maskz_getmant_round_ss): Ditto.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_getexpsd_mask_round, \n\t__builtin_ia32_getexpss_mask_round,\t__builtin_ia32_getmantsd_mask_round, \n\t__builtin_ia32_getmantss_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c : Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto. \n\t* gcc.target/i386/sse-14.c (_mm_maskz_getexp_round_sd, \n\t_mm_maskz_getexp_round_ss, _mm_mask_getmant_round_sd, \n\t_mm_maskz_getmant_round_sd, _mm_mask_getmant_round_ss,\n\t_mm_maskz_getmant_round_ss, _mm_mask_getexp_round_sd, \n\t_mm_mask_getexp_round_ss): Test new intrinsics.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\t* gcc.target/i386/sse-22.c (_mm_maskz_getmant_round_sd, \n\t_mm_maskz_getmant_round_ss, _mm_mask_getmant_round_sd, \n\t_mm_mask_getmant_round_ss): Test new intrinsics \n\t* gcc.target/i386/testimm-10.c (_mm_mask_getmant_sd, \n\t_mm_maskz_getmant_sd, _mm_mask_getmant_ss, \n\t_mm_maskz_getmant_ss): Test new intrinsics.\n\nFrom-SVN: r250018", "tree": {"sha": "843d247d5c6de95fde5f0d3d0b50cfea5a0e7cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843d247d5c6de95fde5f0d3d0b50cfea5a0e7cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d872d728caced187cfef59c8a5a04af34b2c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d872d728caced187cfef59c8a5a04af34b2c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d872d728caced187cfef59c8a5a04af34b2c64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d872d728caced187cfef59c8a5a04af34b2c64/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81bfefba7f6befbbce0d4f4fff9ac1dd2d1dfe0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bfefba7f6befbbce0d4f4fff9ac1dd2d1dfe0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bfefba7f6befbbce0d4f4fff9ac1dd2d1dfe0f"}], "stats": {"total": 662, "additions": 635, "deletions": 27}, "files": [{"sha": "49efdcd26b9424f150e2fa195360064f89b52694", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,3 +1,49 @@\n+2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_getexp_round_ss,\n+\t_mm_maskz_getexp_round_ss, _mm_mask_getexp_round_sd,\n+\t_mm_maskz_getexp_round_sd, _mm_mask_getmant_round_sd,\n+\t_mm_maskz_getmant_round_sd, _mm_mask_getmant_round_ss,\n+\t_mm_maskz_getmant_round_ss, _mm_mask_getexp_ss, _mm_maskz_getexp_ss,\n+\t_mm_mask_getexp_sd, _mm_maskz_getexp_sd, _mm_mask_getmant_sd,\n+\t_mm_maskz_getmant_sd, _mm_mask_getmant_ss,\n+\t_mm_maskz_getmant_ss): New intrinsics.\n+\t(__builtin_ia32_getexpss128_mask): Changed to ...\n+\t__builtin_ia32_getexpss128_round ... this.\n+\t(__builtin_ia32_getexpsd128_mask): Changed to ...\n+\t__builtin_ia32_getexpsd128_round ... this.\n+\t* config/i386/i386-builtin-types.def\n+\t((V2DF, V2DF, V2DF, INT, V2DF, UQI, INT),\n+\t(V4SF, V4SF, V4SF, INT, V4SF, UQI, INT)): New function type aliases.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_getexpsd_mask_round,\n+\t__builtin_ia32_getexpss_mask_round,\t__builtin_ia32_getmantsd_mask_round,\n+\t__builtin_ia32_getmantss_mask_round): New builtins.\n+\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT,\n+\tV4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT): Handle new types.\n+\t(CODE_FOR_avx512f_vgetmantv2df_mask_round,\n+\tCODE_FOR_avx512f_vgetmantv4sf_mask_round): New cases.\n+\t* config/i386/sse.md\n+\t(avx512f_sgetexp<mode><round_saeonly_name>): Changed to ...\n+\tavx512f_sgetexp<mode><mask_scalar_name>\n+\t<round_saeonly_scalar_name> ... this.\n+\t(vgetexp<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|\n+\t%0, %1, %2<round_saeonly_op3>}): Changed to ...\n+\tvgetexp<ssescalarmodesuffix>\n+\t\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n+\t%0<mask_scalar_operand3>, %1, %2<round_saeonly_scalar_mask_op3>} ... this.\n+\t(avx512f_vgetmant<mode><round_saeonly_name>): Changed to ...\n+\tavx512f_vgetmant<mode><mask_scalar_name>\n+\t<round_saeonly_scalar_name> ... this.\n+\t(vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|\n+\t%0, %1, %2<round_saeonly_op4>, %3}): Changed to ...\n+\tvgetmant<ssescalarmodesuffix>\n+\t\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|\n+\t%0<mask_scalar_operand4>, %1, %2\n+\t<round_saeonly_scalar_mask_op4>, %3} ... this.\n+\t* config/i386/subst.md (mask_scalar_operand4,\n+\tround_saeonly_scalar_mask_operand4,\tround_saeonly_scalar_mask_op4,\n+\tround_saeonly_scalar_nimm_predicate): New subst attributes.\n+\n 2017-07-06  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc/config/i386/i386.c (ix86_erase_embedded_rounding):"}, {"sha": "72f57f7b6c930a5582b5e3835a09603bd085b3d1", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 295, "deletions": 2, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -8417,6 +8417,29 @@ _mm_getexp_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t\t    __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_getexpss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_getexpss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_getexp_round_sd (__m128d __A, __m128d __B, const int __R)\n@@ -8426,6 +8449,29 @@ _mm_getexp_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t\t     __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_getexp_round_ps (__m512 __A, const int __R)\n@@ -8570,6 +8616,33 @@ _mm_getmant_round_sd (__m128d __A, __m128d __B,\n \t\t\t\t\t\t   __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t      __m128d __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t      _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t    (__v2df) __B,\n+\t\t\t\t\t\t    (__D << 2) | __C,\n+                                                    (__v2df) __W,\n+\t\t\t\t\t\t     __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t       _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t       _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v2df)\n+                                                        _mm_setzero_pd(),\n+\t\t\t\t\t\t        __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_getmant_round_ss (__m128 __A, __m128 __B,\n@@ -8582,6 +8655,33 @@ _mm_getmant_round_ss (__m128 __A, __m128 __B,\n \t\t\t\t\t\t  __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t      __m128 __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t      _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128) __builtin_ia32_getmantss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf) __B,\n+\t\t\t\t\t\t    (__D << 2) | __C,\n+                                                    (__v4sf) __W,\n+\t\t\t\t\t\t     __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t       _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t       _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128) __builtin_ia32_getmantss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v4sf)\n+                                                        _mm_setzero_ps(),\n+\t\t\t\t\t\t        __U, __R);\n+}\n+\n #else\n #define _mm512_getmant_round_pd(X, B, C, R)                                                  \\\n   ((__m512d)__builtin_ia32_getmantpd512_mask ((__v8df)(__m512d)(X),                 \\\n@@ -8629,18 +8729,63 @@ _mm_getmant_round_ss (__m128 __A, __m128 __B,\n \t\t\t\t\t    (int)(((D)<<2) | (C)),\t\\\n \t\t\t\t\t    (R)))\n \n+#define _mm_mask_getmant_round_sd(W, U, X, Y, C, D, R)                                       \\\n+  ((__m128d)__builtin_ia32_getmantsd_mask_round ((__v2df)(__m128d)(X),                  \\\n+\t\t\t\t\t     (__v2df)(__m128d)(Y),                  \\\n+                                             (int)(((D)<<2) | (C)),                 \\\n+                                             (__v2df)(__m128d)(W),                   \\\n+                                             (__mmask8)(U),\\\n+\t\t\t\t\t     (R)))\n+\n+#define _mm_maskz_getmant_round_sd(U, X, Y, C, D, R)                                         \\\n+  ((__m128d)__builtin_ia32_getmantsd_mask_round ((__v2df)(__m128d)(X),                  \\\n+                                                 (__v2df)(__m128d)(Y),                  \\\n+                                             (int)(((D)<<2) | (C)),              \\\n+                                             (__v2df)(__m128d)_mm_setzero_pd(),  \\\n+                                             (__mmask8)(U),\\\n+\t\t\t\t\t     (R)))\n+\n #define _mm_getmant_round_ss(X, Y, C, D, R)                                                  \\\n   ((__m128)__builtin_ia32_getmantss_round ((__v4sf)(__m128)(X),                      \\\n \t\t\t\t\t   (__v4sf)(__m128)(Y),\t\t\\\n \t\t\t\t\t   (int)(((D)<<2) | (C)),\t\\\n \t\t\t\t\t   (R)))\n \n+#define _mm_mask_getmant_round_ss(W, U, X, Y, C, D, R)                                       \\\n+  ((__m128)__builtin_ia32_getmantss_mask_round ((__v4sf)(__m128)(X),                  \\\n+\t\t\t\t\t     (__v4sf)(__m128)(Y),                  \\\n+                                             (int)(((D)<<2) | (C)),                 \\\n+                                             (__v4sf)(__m128)(W),                   \\\n+                                             (__mmask8)(U),\\\n+\t\t\t\t\t     (R)))\n+\n+#define _mm_maskz_getmant_round_ss(U, X, Y, C, D, R)                                         \\\n+  ((__m128)__builtin_ia32_getmantss_mask_round ((__v4sf)(__m128)(X),                  \\\n+                                                 (__v4sf)(__m128)(Y),                  \\\n+                                             (int)(((D)<<2) | (C)),              \\\n+                                             (__v4sf)(__m128)_mm_setzero_ps(),  \\\n+                                             (__mmask8)(U),\\\n+\t\t\t\t\t     (R)))\n+\n #define _mm_getexp_round_ss(A, B, R)\t\t\t\t\t\t      \\\n   ((__m128)__builtin_ia32_getexpss128_round((__v4sf)(__m128)(A), (__v4sf)(__m128)(B), R))\n \n+#define _mm_mask_getexp_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_getexpss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_getexp_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_getexpss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #define _mm_getexp_round_sd(A, B, R)\t\t\t\t\t\t       \\\n   ((__m128d)__builtin_ia32_getexpsd128_round((__v2df)(__m128d)(A), (__v2df)(__m128d)(B), R))\n \n+#define _mm_mask_getexp_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_getexpsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_getexp_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_getexpsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n+\n+\n #define _mm512_getexp_round_ps(A, R)\t\t\t\t\t\t\\\n   ((__m512)__builtin_ia32_getexpps512_mask((__v16sf)(__m512)(A),\t\t\\\n   (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, R))\n@@ -13358,6 +13503,29 @@ _mm_getexp_ss (__m128 __A, __m128 __B)\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_getexpss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_getexpss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf)\n+\t\t\t\t\t\t_mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_getexp_sd (__m128d __A, __m128d __B)\n@@ -13367,6 +13535,29 @@ _mm_getexp_sd (__m128d __A, __m128d __B)\n \t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df)\n+\t\t\t\t\t\t_mm_setzero_pd (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_getmant_pd (__m512d __A, _MM_MANTISSA_NORM_ENUM __B,\n@@ -13450,6 +13641,33 @@ _mm_getmant_sd (__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM __C,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t_MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v2df) __W,\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t _MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_mask_round ((__v2df) __A,\n+                                                        (__v2df) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v2df)\n+\t\t\t\t\t\t\t_mm_setzero_pd(),\n+\t\t\t\t\t\t        __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_getmant_ss (__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,\n@@ -13461,6 +13679,33 @@ _mm_getmant_ss (__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t_MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128) __builtin_ia32_getmantss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v4sf) __W,\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t _MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128) __builtin_ia32_getmantss_mask_round ((__v4sf) __A,\n+                                                        (__v4sf) __B,\n+\t\t\t\t\t\t        (__D << 2) | __C,\n+                                                        (__v4sf)\n+\t\t\t\t\t\t\t_mm_setzero_ps(),\n+\t\t\t\t\t\t        __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n #else\n #define _mm512_getmant_pd(X, B, C)                                                  \\\n   ((__m512d)__builtin_ia32_getmantpd512_mask ((__v8df)(__m512d)(X),                 \\\n@@ -13508,20 +13753,68 @@ _mm_getmant_ss (__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,\n                                            (int)(((D)<<2) | (C)),                   \\\n \t\t\t\t\t   _MM_FROUND_CUR_DIRECTION))\n \n+#define _mm_mask_getmant_sd(W, U, X, Y, C, D)                                       \\\n+  ((__m128d)__builtin_ia32_getmantsd_mask_round ((__v2df)(__m128d)(X),                 \\\n+                                                 (__v2df)(__m128d)(Y),                 \\\n+                                                 (int)(((D)<<2) | (C)),                \\\n+                                                (__v2df)(__m128d)(W),                 \\\n+                                              (__mmask8)(U),\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_getmant_sd(U, X, Y, C, D)                                         \\\n+  ((__m128d)__builtin_ia32_getmantsd_mask_round ((__v2df)(__m128d)(X),                 \\\n+                                           (__v2df)(__m128d)(Y),                     \\\n+                                              (int)(((D)<<2) | (C)),                \\\n+                                           (__v2df)_mm_setzero_pd(),             \\\n+                                              (__mmask8)(U),\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n #define _mm_getmant_ss(X, Y, C, D)                                                  \\\n   ((__m128)__builtin_ia32_getmantss_round ((__v4sf)(__m128)(X),                      \\\n                                           (__v4sf)(__m128)(Y),                      \\\n                                           (int)(((D)<<2) | (C)),                    \\\n \t\t\t\t\t  _MM_FROUND_CUR_DIRECTION))\n \n+#define _mm_mask_getmant_ss(W, U, X, Y, C, D)                                       \\\n+  ((__m128)__builtin_ia32_getmantss_mask_round ((__v4sf)(__m128)(X),                 \\\n+                                                 (__v4sf)(__m128)(Y),                 \\\n+                                                 (int)(((D)<<2) | (C)),                \\\n+                                                (__v4sf)(__m128)(W),                 \\\n+                                              (__mmask8)(U),\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_getmant_ss(U, X, Y, C, D)                                         \\\n+  ((__m128)__builtin_ia32_getmantss_mask_round ((__v4sf)(__m128)(X),                 \\\n+                                           (__v4sf)(__m128)(Y),                     \\\n+                                              (int)(((D)<<2) | (C)),                \\\n+                                           (__v4sf)_mm_setzero_ps(),             \\\n+                                              (__mmask8)(U),\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n #define _mm_getexp_ss(A, B)\t\t\t\t\t\t      \\\n-  ((__m128)__builtin_ia32_getexpss128_mask((__v4sf)(__m128)(A), (__v4sf)(__m128)(B),  \\\n+  ((__m128)__builtin_ia32_getexpss128_round((__v4sf)(__m128)(A), (__v4sf)(__m128)(B),  \\\n \t\t\t\t\t   _MM_FROUND_CUR_DIRECTION))\n \n+#define _mm_mask_getexp_ss(W, U, A, B) \\\n+    (__m128)__builtin_ia32_getexpss_mask_round(A, B, W, U,\\\n+                                             _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_getexp_ss(U, A, B)   \\\n+    (__m128)__builtin_ia32_getexpss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U,\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION)\n+\n #define _mm_getexp_sd(A, B)\t\t\t\t\t\t       \\\n-  ((__m128d)__builtin_ia32_getexpsd128_mask((__v2df)(__m128d)(A), (__v2df)(__m128d)(B),\\\n+  ((__m128d)__builtin_ia32_getexpsd128_round((__v2df)(__m128d)(A), (__v2df)(__m128d)(B),\\\n \t\t\t\t\t    _MM_FROUND_CUR_DIRECTION))\n \n+#define _mm_mask_getexp_sd(W, U, A, B) \\\n+    (__m128d)__builtin_ia32_getexpsd_mask_round(A, B, W, U,\\\n+                                             _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_getexp_sd(U, A, B)   \\\n+    (__m128d)__builtin_ia32_getexpsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U,\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION)\n+\n #define _mm512_getexp_ps(A)\t\t\t\t\t\t\\\n   ((__m512)__builtin_ia32_getexpps512_mask((__v16sf)(__m512)(A),\t\t\\\n   (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, _MM_FROUND_CUR_DIRECTION))"}, {"sha": "8d584dbe940fba5188aa81e2657c320b806ec746", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -454,6 +454,8 @@ DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SI, INT, UQI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, UQI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT, V2DF, UQI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V4SF, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V4SF, INT, V16SF, UHI)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V8SF, INT, V16SF, UHI)"}, {"sha": "e91468a1a2ec2d49b1b0341d0a06d9dc6481b31f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -2449,11 +2449,15 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_maskz_round, \"__b\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv8df_mask_round, \"__builtin_ia32_getexppd512_mask\", IX86_BUILTIN_GETEXPPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv16sf_mask_round, \"__builtin_ia32_getexpps512_mask\", IX86_BUILTIN_GETEXPPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv2df_round, \"__builtin_ia32_getexpsd128_round\", IX86_BUILTIN_GETEXPSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv2df_mask_round, \"__builtin_ia32_getexpsd_mask_round\", IX86_BUILTIN_GETEXPSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv4sf_round, \"__builtin_ia32_getexpss128_round\", IX86_BUILTIN_GETEXPSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv4sf_mask_round, \"__builtin_ia32_getexpss_mask_round\", IX86_BUILTIN_GETEXPSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv8df_mask_round, \"__builtin_ia32_getmantpd512_mask\", IX86_BUILTIN_GETMANTPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv16sf_mask_round, \"__builtin_ia32_getmantps512_mask\", IX86_BUILTIN_GETMANTPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv2df_round, \"__builtin_ia32_getmantsd_round\", IX86_BUILTIN_GETMANTSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv2df_mask_round, \"__builtin_ia32_getmantsd_mask_round\", IX86_BUILTIN_GETMANTSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv4sf_round, \"__builtin_ia32_getmantss_round\", IX86_BUILTIN_GETMANTSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv4sf_mask_round, \"__builtin_ia32_getmantss_mask_round\", IX86_BUILTIN_GETMANTSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv8df3_mask_round, \"__builtin_ia32_maxpd512_mask\", IX86_BUILTIN_MAXPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv16sf3_mask_round, \"__builtin_ia32_maxps512_mask\", IX86_BUILTIN_MAXPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsmaxv2df3_round, \"__builtin_ia32_maxsd_round\", IX86_BUILTIN_MAXSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)"}, {"sha": "afd61bf6f8ce514c623110825e94940a09feeada", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -36701,6 +36701,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8DF_FTYPE_V8DF_V8DF_INT_V8DF_QI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_INT_V4SF_QI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT:\n+    case V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT:\n       nargs = 6;\n       nargs_constant = 4;\n       break;\n@@ -36738,7 +36740,9 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t\tcase CODE_FOR_avx512f_getmantv8df_mask_round:\n \t\tcase CODE_FOR_avx512f_getmantv16sf_mask_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv2df_round:\n+\t\tcase CODE_FOR_avx512f_vgetmantv2df_mask_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv4sf_round:\n+\t\tcase CODE_FOR_avx512f_vgetmantv4sf_mask_round:\n \t\t  error (\"the immediate argument must be a 4-bit immediate\");\n \t\t  return const0_rtx;\n \t\tcase CODE_FOR_avx512f_cmpv8df3_mask_round:"}, {"sha": "e2db3b17f05872389d82580b85f3e242eb206eac", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -8294,17 +8294,17 @@\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_sgetexp<mode><round_saeonly_name>\"\n+(define_insn \"avx512f_sgetexp<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n+\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")]\n \t    UNSPEC_GETEXP)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vgetexp<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\";\n+   \"vgetexp<ssescalarmodesuffix>\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %1, %2<round_saeonly_scalar_mask_op3>}\";\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -19501,18 +19501,18 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_vgetmant<mode><round_saeonly_name>\"\n+(define_insn \"avx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_GETMANT)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\";\n+   \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %2<round_saeonly_scalar_mask_op4>, %3}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n "}, {"sha": "a318a8d4c8018e4db1a4c0a74a6ae5acbe66a171", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -239,6 +239,7 @@\n \n (define_subst_attr \"mask_scalar_name\" \"mask_scalar\" \"\" \"_mask\")\n (define_subst_attr \"mask_scalar_operand3\" \"mask_scalar\" \"\" \"%{%4%}%N3\")\n+(define_subst_attr \"mask_scalar_operand4\" \"mask_scalar\" \"\" \"%{%5%}%N4\")\n \n (define_subst \"mask_scalar\"\n   [(set (match_operand:SUBST_V 0)\n@@ -280,9 +281,12 @@\n \n (define_subst_attr \"round_saeonly_scalar_name\" \"round_saeonly_scalar\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_scalar_mask_operand3\" \"mask_scalar\" \"%r3\" \"%r5\")\n+(define_subst_attr \"round_saeonly_scalar_mask_operand4\" \"mask_scalar\" \"%r4\" \"%r6\")\n (define_subst_attr \"round_saeonly_scalar_mask_op3\" \"round_saeonly_scalar\" \"\" \"<round_saeonly_scalar_mask_operand3>\")\n+(define_subst_attr \"round_saeonly_scalar_mask_op4\" \"round_saeonly_scalar\" \"\" \"<round_saeonly_scalar_mask_operand4>\")\n (define_subst_attr \"round_saeonly_scalar_constraint\" \"round_saeonly_scalar\" \"vm\" \"v\")\n (define_subst_attr \"round_saeonly_scalar_prefix\" \"round_saeonly_scalar\" \"vex\" \"evex\")\n+(define_subst_attr \"round_saeonly_scalar_nimm_predicate\" \"round_saeonly_scalar\" \"vector_operand\" \"register_operand\")\n \n (define_subst \"round_saeonly_scalar\"\n   [(set (match_operand:SUBST_V 0)"}, {"sha": "f4f2c0f17ec17754a07738356c6f2ddb73c0d017", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,3 +1,47 @@\n+2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vgetexpsd-1.c (_mm_mask_getexp_sd,\n+\t_mm_maskz_getexp_sd, _mm_mask_getexp_round_sd,\n+\t_mm_maskz_getexp_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vgetexpss-1.c (_mm_mask_getexp_ss,\n+\t_mm_maskz_getexp_ss, _mm_mask_getexp_round_ss,\n+\t_mm_maskz_getexp_round_ss): Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-1.c (_mm_mask_getmant_sd,\n+\t_mm_maskz_getmant_sd, _mm_mask_getmant_round_sd,\n+\t_mm_maskz_getmant_round_sd): Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-1.c (_mm_mask_getmant_ss,\n+\t_mm_maskz_getmant_ss, _mm_mask_getmant_round_ss,\n+\t_mm_maskz_getmant_round_ss): Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpsd-2.c (_mm_mask_getexp_sd,\n+\t_mm_maskz_getexp_sd, _mm_getexp_round_sd, _mm_mask_getexp_round_sd,\n+\t_mm_maskz_getexp_round_sd): New runtime tests.\n+\t* gcc.target/i386/avx512f-vgetexpss-2.c (_mm_mask_getexp_ss,\n+\t_mm_maskz_getexp_ss, _mm_getexp_round_ss, _mm_mask_getexp_round_ss,\n+\t_mm_maskz_getexp_round_ss): Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-2.c (_mm_mask_getmant_sd,\n+\t_mm_maskz_getmant_sd, _mm_getmant_round_sd, _mm_mask_getmant_round_sd,\n+\t_mm_maskz_getmant_round_sd): Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-2.c (_mm_mask_getmant_ss,\n+\t_mm_maskz_getmant_ss, _mm_getmant_round_ss, _mm_mask_getmant_round_ss,\n+\t_mm_maskz_getmant_round_ss): Ditto.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_getexpsd_mask_round,\n+\t__builtin_ia32_getexpss_mask_round, __builtin_ia32_getmantsd_mask_round,\n+\t__builtin_ia32_getmantss_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c : Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c (_mm_maskz_getexp_round_sd,\n+\t_mm_maskz_getexp_round_ss, _mm_mask_getmant_round_sd,\n+\t_mm_maskz_getmant_round_sd, _mm_mask_getmant_round_ss,\n+\t_mm_maskz_getmant_round_ss, _mm_mask_getexp_round_sd,\n+\t_mm_mask_getexp_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\t* gcc.target/i386/sse-22.c (_mm_maskz_getmant_round_sd,\n+\t_mm_maskz_getmant_round_ss, _mm_mask_getmant_round_sd,\n+\t_mm_mask_getmant_round_ss): Test new intrinsics\n+\t* gcc.target/i386/testimm-10.c (_mm_mask_getmant_sd,\n+\t_mm_maskz_getmant_sd, _mm_mask_getmant_ss,\n+\t_mm_maskz_getmant_ss): Test new intrinsics.\n+\n 2017-07-06  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports-dg.exp (dg-require-stack-check): New."}, {"sha": "085ba81a672646672977b0dd69fcf1990be82a95", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -233,11 +233,15 @@\n #define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n+#define __builtin_ia32_getexpsd_mask_round(A, B, C, D, E) __builtin_ia32_getexpsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n+#define __builtin_ia32_getexpss_mask_round(A, B, C, D, E) __builtin_ia32_getexpss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantsd_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsd_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantss_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantss_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)"}, {"sha": "226cd9665cad56d1f672f7abd8a39b2eae1cf6a0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpsd-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,15 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d x;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_getexp_sd (x, x);\n+  x = _mm_mask_getexp_sd (x, m, x, x);\n+  x = _mm_maskz_getexp_sd (m, x, x);\n   x = _mm_getexp_round_sd (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getexp_round_sd (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getexp_round_sd (m, x, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "cb82448725f5137c9451fe3161e3c7a1ae6a5482", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpsd-2.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -6,30 +6,61 @@\n \n #include <math.h>\n #include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include \"avx512f-mask-type.h\"\n \n static void\n compute_vgetexpsd (double *s, double *r)\n {\n   r[0] = floor (log (s[0]) / log (2));\n+  r[1] = s[1];\n }\n \n void static\n avx512f_test (void)\n {\n   int i;\n-  union128d res1, s1;\n+  union128d res1, res2, res3, res4, res5, res6, s1;\n+  MASK_TYPE mask = MASK_VALUE;\n   double res_ref[SIZE];\n \n   for (i = 0; i < SIZE; i++)\n     {\n       s1.a[i] = 5.0 - i;\n-      res_ref[i] = s1.a[i];\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_getexp_sd (s1.x, s1.x);\n+  res2.x = _mm_mask_getexp_sd (res2.x, mask, s1.x, s1.x);\n+  res3.x = _mm_maskz_getexp_sd (mask, s1.x, s1.x);\n+  res4.x = _mm_getexp_round_sd (s1.x, s1.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_getexp_round_sd (res5.x, mask, s1.x, s1.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_getexp_round_sd (mask, s1.x, s1.x, _MM_FROUND_NO_EXC);\n \n   compute_vgetexpsd (s1.a, res_ref);\n \n   if (check_fp_union128d (res1, res_ref))\n     abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_fp_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_fp_union128d (res3, res_ref))\n+    abort ();\n+\n+  compute_vgetexpsd (s1.a, res_ref);\n+\n+  if (check_fp_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_fp_union128d (res5, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_fp_union128d (res6, res_ref))\n+    abort ();\n }"}, {"sha": "495b93c9c6a0a82fcebba5bff53c142291cf5f53", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpss-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,15 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 x;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_getexp_ss (x, x);\n+  x = _mm_mask_getexp_ss (x, m, x, x);\n+  x = _mm_maskz_getexp_ss (m, x, x);\n   x = _mm_getexp_round_ss (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getexp_round_ss (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getexp_round_ss (m, x, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "ed193af78d448ef586b7df233098e998696dd077", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpss-2.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -6,30 +6,63 @@\n \n #include <math.h>\n #include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include \"avx512f-mask-type.h\"\n \n static void\n compute_vgetexpss (float *s, float *r)\n {\n+  int i;\n   r[0] = floor (log (s[0]) / log (2));\n+  for(i = 1; i < SIZE; i++)\n+     r[i] = s[i];\n }\n \n void static\n avx512f_test (void)\n {\n   int i;\n-  union128 res1, s1;\n+  union128 res1, res2, res3, res4, res5, res6, s1;\n+  MASK_TYPE mask = MASK_VALUE;\n   float res_ref[SIZE];\n \n   for (i = 0; i < SIZE; i++)\n     {\n       s1.a[i] = 5.0 - i;\n-      res_ref[i] = s1.a[i];\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_getexp_ss (s1.x, s1.x);\n+  res2.x = _mm_mask_getexp_ss (res2.x, mask, s1.x, s1.x);\n+  res3.x = _mm_maskz_getexp_ss (mask, s1.x, s1.x);\n+  res4.x = _mm_getexp_round_ss (s1.x, s1.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_getexp_round_ss (res5.x, mask, s1.x, s1.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_getexp_round_ss (mask, s1.x, s1.x, _MM_FROUND_NO_EXC);\n \n   compute_vgetexpss (s1.a, res_ref);\n \n   if (check_fp_union128 (res1, res_ref))\n     abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_fp_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_fp_union128 (res3, res_ref))\n+    abort ();\n+\n+  compute_vgetexpss (s1.a, res_ref);\n+\n+  if (check_fp_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_fp_union128 (res5, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_fp_union128 (res6, res_ref))\n+    abort ();\n }"}, {"sha": "25a64202ea716d1897185865f26af317b7cb04a2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantsd-1.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,16 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_getmant_sd (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n-  x = _mm_getmant_round_sd (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n-\t\t\t    _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getmant_sd (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_maskz_getmant_sd (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_getmant_round_sd (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,_MM_FROUND_NO_EXC);\n+  x = _mm_mask_getmant_round_sd (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getmant_round_sd (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n }"}, {"sha": "45875b4a92133575eb1bb0f31d00fdacbeae9cfc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantsd-2.c", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -5,6 +5,10 @@\n \n #include \"avx512f-check.h\"\n #include <math.h>\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128/64)\n+#include \"avx512f-mask-type.h\"\n \n union fp_int_t\n {\n@@ -76,18 +80,51 @@ compute_vgetmantsd (double *r, double *s1, double *s2, int interv,\n static void\n avx512f_test (void)\n {\n-  union128d res1, src1, src2;\n+  union128d res1, res2, res3, res4, res5, res6, src1, src2;\n   double res_ref[2];\n-  int interv = _MM_MANT_NORM_p5_1;\n-  int signctrl = _MM_MANT_SIGN_src;\n+  MASK_TYPE mask = MASK_VALUE;\n \n   src1.x = _mm_set_pd (-3.0, 111.111);\n   src2.x = _mm_set_pd (222.222, -2.0);\n+  \n+  int i; \n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+    }\n \n-  res1.x = _mm_getmant_sd (src1.x, src2.x, interv, signctrl);\n+  res1.x = _mm_getmant_sd (src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res2.x = _mm_mask_getmant_sd (res2.x, mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res3.x = _mm_maskz_getmant_sd (mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res4.x = _mm_getmant_round_sd (src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_getmant_round_sd (res5.x, mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_getmant_round_sd (mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n \n-  compute_vgetmantsd (res_ref, src1.a, src2.a, interv, signctrl);\n+  compute_vgetmantsd (res_ref, src1.a, src2.a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n \n   if (check_union128d (res1, res_ref))\n     abort ();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  compute_vgetmantsd (res_ref, src1.a, src2.a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res6, res_ref))\n+    abort ();\n+\n }"}, {"sha": "00a055ffeeee57a6af407a438ccb4dac9ae6d8d8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantss-1.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -1,16 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_getmant_ss (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n-  x = _mm_getmant_round_ss (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n-\t\t      _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getmant_ss (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_maskz_getmant_ss (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_getmant_round_ss (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getmant_round_ss (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getmant_round_ss (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n }"}, {"sha": "bcd449b4ae2b7621c7d6d819d19abcbc055df784", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantss-2.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -5,6 +5,10 @@\n \n #include \"avx512f-check.h\"\n #include <math.h>\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128/32)\n+#include \"avx512f-mask-type.h\"\n \n union fp_int_t\n {\n@@ -72,7 +76,7 @@ compute_vgetmantss (float *r, float *s1, float *s2, int interv,\n {\n   int i;\n   r[0] = get_norm_mant (s2[0], signctrl, interv);\n-  for (i = 1; i < 4; i++)\n+  for (i = 1; i < SIZE; i++)\n     {\n       r[i] = s1[i];\n     }\n@@ -81,18 +85,50 @@ compute_vgetmantss (float *r, float *s1, float *s2, int interv,\n static void\n avx512f_test (void)\n {\n-  union128 res1, src1, src2;\n+  union128 res1, res2, res3, res4, res5, res6, src1, src2;\n   float res_ref[4];\n-  int interv = _MM_MANT_NORM_p5_1;\n-  int signctrl = _MM_MANT_SIGN_src;\n+  MASK_TYPE mask = MASK_VALUE;\n \n   src1.x = _mm_set_ps (-24.043, 68.346, -43.35, 546.46);\n   src2.x = _mm_set_ps (222.222, 333.333, 444.444, -2.0);\n \n-  res1.x = _mm_getmant_ss (src1.x, src2.x, interv, signctrl);\n+  int i; \n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_getmant_ss (src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res2.x = _mm_mask_getmant_ss (res2.x, mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res3.x = _mm_maskz_getmant_ss (mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+  res4.x = _mm_getmant_round_ss (src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_getmant_round_ss (res5.x, mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_getmant_round_ss (mask, src1.x, src2.x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n \n-  compute_vgetmantss (res_ref, src1.a, src2.a, interv, signctrl);\n+  compute_vgetmantss (res_ref, src1.a, src2.a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n \n   if (check_union128 (res1, res_ref))\n     abort ();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  compute_vgetmantss (res_ref, src1.a, src2.a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);\n+\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res6, res_ref))\n+    abort ();\n }"}, {"sha": "c5c43b12611256c9ab969076e9715d8fe495431a", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -250,11 +250,15 @@\n #define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n+#define __builtin_ia32_getexpsd_mask_round(A, B, C, D, E) __builtin_ia32_getexpsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n+#define __builtin_ia32_getexpss_mask_round(A, B, C, D, E) __builtin_ia32_getexpss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantsd_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsd_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantss_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantss_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)"}, {"sha": "c2a19b3ccef4cc2339e81af37b954df994a9cae5", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -244,7 +244,9 @@ test_2 (_mm512_maskz_extractf64x4_pd, __m256d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_extracti32x4_epi32, __m128i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_extracti64x4_epi64, __m256i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm_maskz_getexp_round_sd, __m128d, __mmask8, __m128d, __m128d, 8)\n test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 8)\n+test_3 (_mm_maskz_getexp_round_ss, __m128, __mmask8, __m128, __m128, 8)\n test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 8)\n test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 8)\n test_2 (_mm512_maskz_permute_pd, __m512d, __mmask8, __m512d, 1)\n@@ -300,7 +302,11 @@ test_2 (_mm_div_round_ss, __m128, __m128, __m128, 9)\n test_2 (_mm_getexp_round_sd, __m128d, __m128d, __m128d, 8)\n test_2 (_mm_getexp_round_ss, __m128, __m128, __m128, 8)\n test_2y (_mm_getmant_round_sd, __m128d, __m128d, __m128d, 1, 1, 8)\n+test_4y (_mm_mask_getmant_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 1, 1, 8)\n+test_3y (_mm_maskz_getmant_round_sd, __m128d, __mmask8, __m128d, __m128d, 1, 1, 8)\n test_2y (_mm_getmant_round_ss, __m128, __m128, __m128, 1, 1, 8)\n+test_4y (_mm_mask_getmant_round_ss, __m128, __m128, __mmask8, __m128, __m128, 1, 1, 8)\n+test_3y (_mm_maskz_getmant_round_ss, __m128, __mmask8, __m128, __m128, 1, 1, 8)\n test_2 (_mm_mul_round_sd, __m128d, __m128d, __m128d, 9)\n test_2 (_mm_mul_round_ss, __m128, __m128, __m128, 9)\n test_2 (_mm_scalef_round_sd, __m128d, __m128d, __m128d, 9)\n@@ -356,7 +362,9 @@ test_3 (_mm512_mask_extractf64x4_pd, __m256d, __m256d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_extracti32x4_epi32, __m128i, __m128i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_extracti64x4_epi64, __m256i, __m256i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_4 (_mm_mask_getexp_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 8)\n test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_4 (_mm_mask_getexp_round_ss, __m128, __m128, __mmask8, __m128, __m128, 8)\n test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 8)\n test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 8)\n test_3 (_mm512_mask_permute_pd, __m512d, __m512d, __mmask8, __m512d, 1)"}, {"sha": "cd8945be1cbd3263214c03da5473249bb3e5ee1e", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -399,7 +399,9 @@ test_2 (_mm512_maskz_extracti64x4_epi64, __m256i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 8)\n test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 8)\n test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_3y (_mm_maskz_getmant_round_sd, __m128d, __mmask8, __m128d, __m128d, 1, 1, 8)\n test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 8)\n+test_3y (_mm_maskz_getmant_round_ss, __m128, __mmask8, __m128, __m128, 1, 1, 8)\n test_2 (_mm512_maskz_permute_pd, __m512d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_permute_ps, __m512, __mmask16, __m512, 1)\n test_2 (_mm512_maskz_permutex_epi64, __m512i, __mmask8, __m512i, 1)\n@@ -491,7 +493,9 @@ test_3 (_mm512_mask_extracti64x4_epi64, __m256i, __m256i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 8)\n test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_4y (_mm_mask_getmant_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 1, 1, 8)\n test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 8)\n+test_4y (_mm_mask_getmant_round_ss, __m128, __m128, __mmask8, __m128, __m128, 1, 1, 8)\n test_3 (_mm512_mask_permute_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_permute_ps, __m512, __m512, __mmask16, __m512, 1)\n test_3 (_mm512_mask_permutex_epi64, __m512i, __m512i, __mmask8, __m512i, 1)"}, {"sha": "fc339a51e63861813e29c5b7885994a592be12a8", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -251,11 +251,15 @@\n #define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n+#define __builtin_ia32_getexpsd_mask_round(A, B, C, D, E) __builtin_ia32_getexpsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n+#define __builtin_ia32_getexpss_mask_round(A, B, C, D, E) __builtin_ia32_getexpss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantsd_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsd_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantss_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantss_mask_round(A, B, 1, W, U, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)"}, {"sha": "d0e9b42f2fef74e27be702f3834e82416f79fd41", "filename": "gcc/testsuite/gcc.target/i386/testimm-10.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -191,5 +191,9 @@ test4bit (void) {\n   m512  = _mm512_maskz_getmant_ps (mmask16, m512, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n \n   m128d = _mm_getmant_sd (m128d, m128d, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n+  m128d  = _mm_mask_getmant_sd (m128d, mmask8, m128d, m128d, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n+  m128d  = _mm_maskz_getmant_sd (mmask8, m128d, m128d, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n   m128  = _mm_getmant_ss (m128, m128, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n+  m128  = _mm_mask_getmant_ss (m128, mmask8, m128, m128, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n+  m128  = _mm_maskz_getmant_ss (mmask8, m128, m128, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n }"}, {"sha": "d5ab95c208ed0b2a5b9d0e5285e99ebb5783f9e1", "filename": "gcc/testsuite/gcc.target/i386/testround-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d872d728caced187cfef59c8a5a04af34b2c64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c?ref=68d872d728caced187cfef59c8a5a04af34b2c64", "patch": "@@ -249,7 +249,11 @@ test_round (void)\n   m128d = _mm_cvt_roundss_sd (m128d, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m128 = _mm_getexp_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_getexp_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_getexp_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_getexp_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_getexp_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_getexp_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_getexp_round_ps (m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getexp_round_ps (m512, mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getexp_round_ps (mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -263,7 +267,11 @@ test_round (void)\n   m512 = _mm512_mask_getmant_round_ps (m512, mmask16, m512, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getmant_round_ps (mmask16, m512, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_getmant_round_sd (m128d, m128d, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_getmant_round_sd (m128d, mmask8, m128d, m128d, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_getmant_round_sd (mmask8, m128d, m128d, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_getmant_round_ss (m128, m128, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_getmant_round_ss (m128, mmask8, m128, m128, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_getmant_round_ss (mmask8, m128, m128, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512 = _mm512_roundscale_round_ps (m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_roundscale_round_ps (m512, mmask16, m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -524,7 +532,11 @@ test_sae_only (void)\n   m128d = _mm_cvt_roundss_sd (m128d, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n \n   m128 = _mm_getexp_round_ss (m128, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_getexp_round_ss (m128, mmask8, m128, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_getexp_round_ss (mmask8, m128, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_getexp_round_sd (m128d, m128d, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_getexp_round_sd (m128d, mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_getexp_round_sd (mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_getexp_round_ps (m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getexp_round_ps (m512, mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getexp_round_ps (mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */"}]}