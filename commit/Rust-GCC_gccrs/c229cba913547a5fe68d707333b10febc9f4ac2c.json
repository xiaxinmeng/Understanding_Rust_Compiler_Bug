{"sha": "c229cba913547a5fe68d707333b10febc9f4ac2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyOWNiYTkxMzU0N2E1ZmU2OGQ3MDczMzNiMTBmZWJjOWY0YWMyYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1997-12-09T16:35:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-09T16:35:56Z"}, "message": "rs6000.h (FUNCTION_ARG_PADDING): Define.\n\n        * rs6000.h (FUNCTION_ARG_PADDING): Define.\n        * rs6000.c (function_arg_padding): New function.\n\nFrom-SVN: r17029", "tree": {"sha": "1ecfc51f0e3741646cb4a02f83f9ac34139e6044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ecfc51f0e3741646cb4a02f83f9ac34139e6044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c229cba913547a5fe68d707333b10febc9f4ac2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c229cba913547a5fe68d707333b10febc9f4ac2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c229cba913547a5fe68d707333b10febc9f4ac2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c229cba913547a5fe68d707333b10febc9f4ac2c/comments", "author": null, "committer": null, "parents": [{"sha": "b2c59d0b27284fbf3d463e387225296fee2340f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c59d0b27284fbf3d463e387225296fee2340f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c59d0b27284fbf3d463e387225296fee2340f7"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "efdd2a8bb06bb646b6214bfff5e09a9191311a3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c229cba913547a5fe68d707333b10febc9f4ac2c", "patch": "@@ -1,3 +1,8 @@\n+Tue Dec  9 09:38:58 1997  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.h (FUNCTION_ARG_PADDING): Define.\n+\t* rs6000.c (function_arg_padding): New function.\n+\n Tue Dec  9 10:34:21 1997  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* m68k.c: Include tree.h only once."}, {"sha": "f8a10b6cf4fe6b32916b4daa8fbb41240b768024", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c229cba913547a5fe68d707333b10febc9f4ac2c", "patch": "@@ -1167,6 +1167,35 @@ init_cumulative_args (cum, fntype, libname, incoming)\n     }\n }\n \f\n+/* If defined, a C expression which determines whether, and in which\n+   direction, to pad out an argument with extra space.  The value\n+   should be of type `enum direction': either `upward' to pad above\n+   the argument, `downward' to pad below, or `none' to inhibit\n+   padding.\n+\n+   For the AIX ABI structs are always stored left shifted in their\n+   argument slot.  */\n+\n+enum direction\n+function_arg_padding (mode, type)\n+     enum machine_mode mode;\n+     tree type;\n+{\n+  if (type && TREE_CODE (type) == RECORD_TYPE)\n+    {\n+      return upward;\n+    }\n+\n+  /* This is the default definition.  */\n+  return (! BYTES_BIG_ENDIAN\n+          ? upward\n+          : ((mode == BLKmode\n+              ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n+                 && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n+              : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n+             ? downward : upward));\n+}\n+\n /* If defined, a C expression that gives the alignment boundary, in bits,\n    of an argument with the specified mode and type.  If it is not defined, \n    PARM_BOUNDARY is used for all arguments."}, {"sha": "087ac5ad8ce761ec5d7d891e2ba6b42e792a1f23", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c229cba913547a5fe68d707333b10febc9f4ac2c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c229cba913547a5fe68d707333b10febc9f4ac2c", "patch": "@@ -1461,6 +1461,15 @@ typedef struct rs6000_args\n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n   function_arg_pass_by_reference(&CUM, MODE, TYPE, NAMED)\n \n+/* If defined, a C expression which determines whether, and in which\n+   direction, to pad out an argument with extra space.  The value\n+   should be of type `enum direction': either `upward' to pad above\n+   the argument, `downward' to pad below, or `none' to inhibit\n+   padding.  */\n+\n+#define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n+  function_arg_padding (MODE, TYPE)\n+\n /* If defined, a C expression that gives the alignment boundary, in bits,\n    of an argument with the specified mode and type.  If it is not defined,\n    PARM_BOUNDARY is used for all arguments.  */"}]}