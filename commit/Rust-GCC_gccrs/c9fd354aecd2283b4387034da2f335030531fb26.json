{"sha": "c9fd354aecd2283b4387034da2f335030531fb26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmZDM1NGFlY2QyMjgzYjQzODcwMzRkYTJmMzM1MDMwNTMxZmIyNg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2014-09-04T16:37:45Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2014-09-04T16:37:45Z"}, "message": "Make gen_formal_parameter_die() merge DIEs from a previous execution.\n\nDo not set DW_AT_inline incorrectly on all functions.\n\nDo not remove formal parameters when a previous DIE has been found.\nInstead, augment the missing bits later.\n\nFrom-SVN: r214907", "tree": {"sha": "f007acdd4dbb650642bf81b32fe59a0b5a4b0b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f007acdd4dbb650642bf81b32fe59a0b5a4b0b84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9fd354aecd2283b4387034da2f335030531fb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fd354aecd2283b4387034da2f335030531fb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fd354aecd2283b4387034da2f335030531fb26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fd354aecd2283b4387034da2f335030531fb26/comments", "author": null, "committer": null, "parents": [{"sha": "73179e4a2454d9af3da90d7893b1c05dfc03f7d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73179e4a2454d9af3da90d7893b1c05dfc03f7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73179e4a2454d9af3da90d7893b1c05dfc03f7d2"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "77ad5accfacfb985b19592119740c91c3ff7587b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fd354aecd2283b4387034da2f335030531fb26/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fd354aecd2283b4387034da2f335030531fb26/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c9fd354aecd2283b4387034da2f335030531fb26", "patch": "@@ -17647,29 +17647,51 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n {\n   tree node_or_origin = node ? node : origin;\n   tree ultimate_origin;\n-  dw_die_ref parm_die;\n+  dw_die_ref parm_die = NULL;\n   \n   if (TREE_CODE_CLASS (TREE_CODE (node_or_origin)) == tcc_declaration)\n     {\n       parm_die = lookup_decl_die (node);\n \n       if (parm_die && parm_die->die_parent == NULL)\n \t{\n-\t  add_child_die (context_die, parm_die);\n-\t  /* XXX check that parm_die already has all the right attributes\n-\t     that we would add below?  */\n-\t  return parm_die;\n+\t  /* Check that parm_die already has the right attributes that\n+\t     we would have added below.  If any attributes are\n+\t     missing, fall through to add them.\n+\n+\t     ?? Add more checks here.  */\n+\t  if (! DECL_ABSTRACT (node_or_origin)\n+\t      && !get_AT (parm_die, DW_AT_location)\n+\t      && !get_AT (parm_die, DW_AT_const_value))\n+\t    /* We are missing  location info, and are about to add it.  */\n+\t    ;\n+\t  else\n+\t    {\n+\t      add_child_die (context_die, parm_die);\n+\t      return parm_die;\n+\t    }\n \t}\n     }\n \n-  parm_die = new_die (DW_TAG_formal_parameter, context_die, node);\n+  bool reusing_die;\n+  if (parm_die)\n+    reusing_die = true;\n+  else\n+    {\n+      parm_die = new_die (DW_TAG_formal_parameter, context_die, node);\n+      reusing_die = false;\n+    }\n \n   switch (TREE_CODE_CLASS (TREE_CODE (node_or_origin)))\n     {\n     case tcc_declaration:\n       ultimate_origin = decl_ultimate_origin (node_or_origin);\n       if (node || ultimate_origin)\n \torigin = ultimate_origin;\n+\n+      if (reusing_die)\n+\tgoto add_location;\n+\n       if (origin != NULL && node != origin)\n \tadd_abstract_origin_attribute (parm_die, origin);\n       else if (emit_name_p)\n@@ -17694,6 +17716,7 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n \n       if (node && node != origin)\n         equate_decl_number_to_die (node, parm_die);\n+    add_location:\n       if (! DECL_ABSTRACT (node_or_origin))\n \tadd_location_or_const_value_attribute (parm_die, node_or_origin,\n \t\t\t\t\t       node == NULL, DW_AT_location);\n@@ -18238,7 +18261,13 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  && !get_AT (old_die, DW_AT_inline))\n \t{\n \t  /* Detect and ignore this case, where we are trying to output\n-\t     something we have already output.  */\n+\t     something we have already output.\n+\n+\t     If we have no location information, this must be a\n+\t     partially generated DIE from early dwarf generation.\n+\t     Fall through and generate it.  */\n+\t  if (get_AT (old_die, DW_AT_low_pc)\n+\t      || get_AT (old_die, DW_AT_ranges))\n \t  return;\n \t}\n \n@@ -18257,6 +18286,10 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t{\n \t  subr_die = old_die;\n \n+\t  /* ??? Hmmm, early dwarf generation happened earlier, so no\n+\t     sense in removing the parameters.  Let's keep them and\n+\t     augment them with location information later.  */\n+#if 0\n \t  /* Clear out the declaration attribute and the formal parameters.\n \t     Do not remove all children, because it is possible that this\n \t     declaration die was forced using force_decl_die(). In such\n@@ -18265,6 +18298,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  remove_AT (subr_die, DW_AT_declaration);\n \t  remove_AT (subr_die, DW_AT_object_pointer);\n \t  remove_child_TAG (subr_die, DW_TAG_formal_parameter);\n+#endif\n \t}\n       else\n \t{\n@@ -21094,6 +21128,17 @@ dwarf2out_decl (tree decl)\n void\n dwarf2out_early_decl (tree decl)\n {\n+  /* gen_decl_die() will set DECL_ABSTRACT because\n+     cgraph_function_possibly_inlined_p() returns true.  This is in\n+     turn will cause DW_AT_inline attributes to be set.\n+\n+     This happens because at early dwarf generation, there is no\n+     cgraph information, causing cgraph_function_possibly_inlined_p()\n+     to return true.  Trick cgraph_function_possibly_inlined_p()\n+     while we generate dwarf early.  */\n+  bool save = cgraph_global_info_ready;\n+  cgraph_global_info_ready = true;\n+\n   /* We don't handle TYPE_DECLs.  If required, they'll be reached via\n      other DECLs and they can point to template types or other things\n      that dwarf2out can't handle when done via dwarf2out_decl.  */\n@@ -21102,6 +21147,11 @@ dwarf2out_early_decl (tree decl)\n     {\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n \t{\n+\t  /* A missing cfun means the symbol is unused and was removed\n+\t     from the callgraph.  */\n+\t  if (!DECL_STRUCT_FUNCTION (decl))\n+\t    goto early_decl_exit;\n+\n \t  push_cfun (DECL_STRUCT_FUNCTION (decl));\n \t  current_function_decl = decl;\n \t}\n@@ -21112,6 +21162,9 @@ dwarf2out_early_decl (tree decl)\n \t  current_function_decl = NULL;\n \t}\n     }\n+ early_decl_exit:\n+  cgraph_global_info_ready = save;\n+  return;\n }\n \n /* Write the debugging output for DECL.  */"}]}