{"sha": "1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxMDlmMGZkYmIxMzE3ZmQ1YWY4YjEwNzEyZjgwZjgwZjkyNjFkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-12T09:18:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-12T09:18:40Z"}, "message": "init.c (build_new): Handle freeing allocated memory when the constructor throws.\n\n\t* init.c (build_new): Handle freeing allocated memory when the\n\tconstructor throws.\n\n\t* call.c (build_new_method_call): Fix flags arg.\n\n\t* pt.c (do_type_instantiation): Don't try to instantiate\n\tmember templates.\n\t(mark_decl_instantiated): If we support one_only but not\n\tweak symbols, mark this one_only.\n\t* decl2.c (import_export_vtable): Don't defer handling of vtables\n\tif MULTIPLE_SYMBOL_SPACES.\n\nFrom-SVN: r16436", "tree": {"sha": "b685db14b33b9f4aa6922a3e9bfd117f6d86470a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b685db14b33b9f4aa6922a3e9bfd117f6d86470a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/comments", "author": null, "committer": null, "parents": [{"sha": "0b3ca5ee97993095632bea6f5586393583263cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3ca5ee97993095632bea6f5586393583263cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3ca5ee97993095632bea6f5586393583263cbf"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "fdfb3061574ec896e9d81bdbc30e0ff2c3f8283b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "patch": "@@ -4,6 +4,20 @@ Sun Nov  9 01:29:55 1997  Jim Wilson  (wilson@cygnus.com)\n \t* init.c (build_vec_delete_1): Delete build_block and\n \tadd_block_current_level calls.\n \n+Wed Nov 12 00:48:16 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Handle freeing allocated memory when the\n+\tconstructor throws.\n+\n+\t* call.c (build_new_method_call): Fix flags arg.\n+\n+\t* pt.c (do_type_instantiation): Don't try to instantiate\n+\tmember templates.\n+\t(mark_decl_instantiated): If we support one_only but not\n+\tweak symbols, mark this one_only.\n+\t* decl2.c (import_export_vtable): Don't defer handling of vtables\n+\tif MULTIPLE_SYMBOL_SPACES.\n+\n Tue Nov 11 12:02:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* except.c (expand_end_catch_block): Lose call to __sjpopnthrow."}, {"sha": "0efcf4aa971d8b05056b41cf779ac5c6dd55b2ae", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "patch": "@@ -4810,9 +4810,6 @@ build_new_op (code, flags, arg1, arg2, arg3)\n   if (code == POSTINCREMENT_EXPR || code == POSTDECREMENT_EXPR)\n     arg2 = integer_zero_node;\n \n-  fns = lookup_name_nonclass (fnname);\n-  /* + Koenig lookup */\n-\n   if (arg2 && arg3)\n     arglist = scratch_tree_cons (NULL_TREE, arg1, scratch_tree_cons\n \t\t      (NULL_TREE, arg2, build_scratch_list (NULL_TREE, arg3)));\n@@ -4821,6 +4818,9 @@ build_new_op (code, flags, arg1, arg2, arg3)\n   else\n     arglist = build_scratch_list (NULL_TREE, arg1);\n \n+  fns = lookup_name_nonclass (fnname);\n+  /* + Koenig lookup */\n+\n   if (fns && TREE_CODE (fns) == TREE_LIST)\n     fns = TREE_VALUE (fns);\n   for (; fns; fns = DECL_CHAIN (fns))\n@@ -5580,8 +5580,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n \t      candidates = \n \t\tadd_template_candidate (candidates, t, explicit_targs,\n \t\t\t\t\tthis_arglist,\n-\t\t\t\t\tTREE_TYPE (name), \n-\t\t\t\t\tLOOKUP_NORMAL); \n+\t\t\t\t\tTREE_TYPE (name), flags); \n \t    }\n \t  else if (! template_only)\n \t    candidates = add_function_candidate (candidates, t,"}, {"sha": "dfe31c29923f60bc9799db242e9be8a413e478e6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "patch": "@@ -2528,6 +2528,7 @@ import_export_vtable (decl, type, final)\n \n       int found = CLASSTYPE_TEMPLATE_INSTANTIATION (type);\n \n+#ifndef MULTIPLE_SYMBOL_SPACES\n       if (! found && ! final)\n \t{\n \t  tree method;\n@@ -2541,6 +2542,7 @@ import_export_vtable (decl, type, final)\n \t\tbreak;\n \t      }\n \t}\n+#endif\n \n       if (final || ! found)\n \t{"}, {"sha": "5c02d053bdd46ccfdd05283406d531ce6f54b53e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "patch": "@@ -2522,7 +2522,7 @@ build_new (placement, decl, init, use_global_new)\n       TREE_CALLS_NEW (rval) = 1;\n     }\n \n-  if (check_new && rval)\n+  if ((flag_exceptions || check_new) && rval)\n     alloc_expr = rval = save_expr (rval);\n   else\n     alloc_expr = NULL_TREE;\n@@ -2705,13 +2705,34 @@ build_new (placement, decl, init, use_global_new)\n \t  rval = xval;\n \t}\n #endif\n+\n+      /* If any part of the object initialization terminates by throwing\n+\t an exception and the new-expression does not contain a\n+\t new-placement, then the deallocation function is called to free\n+\t the memory in which the object was being constructed.  */\n+      /* FIXME: handle placement delete.  */\n+      if (flag_exceptions && ! placement)\n+\t{\n+\t  tree cleanup;\n+\n+\t  if (! use_global_new && TYPE_LANG_SPECIFIC (true_type)\n+\t      && (TYPE_GETS_DELETE (true_type) & (1 << has_array)))\n+\t    cleanup = build_opfncall (DELETE_EXPR, LOOKUP_NORMAL,\n+\t\t\t\t      alloc_expr, size, NULL_TREE);\n+\t  else\n+\t    cleanup = build_builtin_call\n+\t      (void_type_node, BID, build_expr_list (NULL_TREE, alloc_expr));\n+\t\t\t\t\t \n+\t  rval = build (TRY_CATCH_EXPR, TREE_TYPE (rval), rval, cleanup);\n+\t  rval = build (COMPOUND_EXPR, TREE_TYPE (rval), alloc_expr, rval);\n+\t}\n     }\n   else if (TYPE_READONLY (true_type))\n     cp_error (\"uninitialized const in `new' of `%#T'\", true_type);\n \n  done:\n \n-  if (alloc_expr && rval != alloc_expr)\n+  if (check_new && alloc_expr && rval != alloc_expr)\n     {\n       /* Did we modify the storage?  */\n       tree ifexp = build_binary_op (NE_EXPR, alloc_expr,"}, {"sha": "b02ff634bb38040d6a7f65bd4c76ebcce6d5af9f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f109f0fdbb1317fd5af8b10712f80f80f9261d3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1f109f0fdbb1317fd5af8b10712f80f80f9261d3", "patch": "@@ -3988,6 +3988,8 @@ mark_decl_instantiated (result, extern_p)\n     {\n       DECL_INTERFACE_KNOWN (result) = 1;\n       DECL_NOT_REALLY_EXTERN (result) = 1;\n+      if (supports_one_only () && ! SUPPORTS_WEAK)\n+\tcomdat_linkage (result);\n     }\n   else if (TREE_CODE (result) == FUNCTION_DECL)\n     mark_inline_for_output (result);\n@@ -4397,7 +4399,8 @@ do_type_instantiation (t, storage)\n \n     if (! static_p)\n       for (tmp = TYPE_METHODS (t); tmp; tmp = TREE_CHAIN (tmp))\n-\tif (DECL_TEMPLATE_INSTANTIATION (tmp))\n+\tif (TREE_CODE (t) == FUNCTION_DECL\n+\t    && DECL_TEMPLATE_INSTANTIATION (tmp))\n \t  {\n \t    mark_decl_instantiated (tmp, extern_p);\n \t    repo_template_instantiated (tmp, extern_p);"}]}