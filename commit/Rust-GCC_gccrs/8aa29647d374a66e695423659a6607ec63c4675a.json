{"sha": "8aa29647d374a66e695423659a6607ec63c4675a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFhMjk2NDdkMzc0YTY2ZTY5NTQyMzY1OWE2NjA3ZWM2M2M0Njc1YQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-06-25T12:46:41Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-06-25T12:46:41Z"}, "message": "ipa-prop.c (determine_cst_member_ptr): Ignore non-clobbering statements instead of bailing out on them.\n\n2010-06-25  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (determine_cst_member_ptr): Ignore non-clobbering\n\tstatements instead of bailing out on them.\n\t(ipa_analyze_indirect_call_uses): Do not require that loads from the\n\tparameter are in the same BB as the condition.  Update comments.\n\n\t* testsuite/g++.dg/ipa/iinline-2.C: New test.\n\nFrom-SVN: r161377", "tree": {"sha": "82fbcbdeb6c7649ca76ce539f4c5d1b7d2957cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82fbcbdeb6c7649ca76ce539f4c5d1b7d2957cd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aa29647d374a66e695423659a6607ec63c4675a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa29647d374a66e695423659a6607ec63c4675a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa29647d374a66e695423659a6607ec63c4675a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa29647d374a66e695423659a6607ec63c4675a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a2eceff8f1f275c2cda0ac25db354697bf33f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2eceff8f1f275c2cda0ac25db354697bf33f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2eceff8f1f275c2cda0ac25db354697bf33f7d"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "c0768aeb0359d35b1e485db80b0b2b17cd56218a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8aa29647d374a66e695423659a6607ec63c4675a", "patch": "@@ -1,3 +1,10 @@\n+2010-06-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (determine_cst_member_ptr): Ignore non-clobbering\n+\tstatements instead of bailing out on them.\n+\t(ipa_analyze_indirect_call_uses): Do not require that loads from the\n+\tparameter are in the same BB as the condition.  Update comments.\n+\n 2010-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/43866"}, {"sha": "8b537f4d48d1bca5c61290d7ce2f8fbe89dadda5", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=8aa29647d374a66e695423659a6607ec63c4675a", "patch": "@@ -806,6 +806,8 @@ determine_cst_member_ptr (gimple call, tree arg, tree method_field,\n       gimple stmt = gsi_stmt (gsi);\n       tree lhs, rhs, fld;\n \n+      if (!stmt_may_clobber_ref_p (stmt, arg))\n+\tcontinue;\n       if (!gimple_assign_single_p (stmt))\n \treturn;\n \n@@ -814,7 +816,7 @@ determine_cst_member_ptr (gimple call, tree arg, tree method_field,\n \n       if (TREE_CODE (lhs) != COMPONENT_REF\n \t  || TREE_OPERAND (lhs, 0) != arg)\n-\tcontinue;\n+\treturn;\n \n       fld = TREE_OPERAND (lhs, 1);\n       if (!method && fld == method_field)\n@@ -1030,14 +1032,18 @@ ipa_note_param_call (struct cgraph_node *node, int param_index, gimple stmt,\n      <bb 2>:\n        f$__delta_5 = f.__delta;\n        f$__pfn_24 = f.__pfn;\n+\n+     ...\n+\n+     <bb 5>\n        D.2496_3 = (int) f$__pfn_24;\n        D.2497_4 = D.2496_3 & 1;\n        if (D.2497_4 != 0)\n          goto <bb 3>;\n        else\n          goto <bb 4>;\n \n-     <bb 3>:\n+     <bb 6>:\n        D.2500_7 = (unsigned int) f$__delta_5;\n        D.2501_8 = &S + D.2500_7;\n        D.2502_9 = (int (*__vtbl_ptr_type) (void) * *) D.2501_8;\n@@ -1048,7 +1054,7 @@ ipa_note_param_call (struct cgraph_node *node, int param_index, gimple stmt,\n        D.2507_15 = *D.2506_14;\n        iftmp.11_16 = (String:: *) D.2507_15;\n \n-     <bb 4>:\n+     <bb 7>:\n        # iftmp.11_1 = PHI <iftmp.11_16(3), f$__pfn_24(2)>\n        D.2500_19 = (unsigned int) f$__delta_5;\n        D.2508_20 = &S + D.2500_19;\n@@ -1109,17 +1115,18 @@ ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n   d1 = SSA_NAME_DEF_STMT (n1);\n   d2 = SSA_NAME_DEF_STMT (n2);\n \n+  join = gimple_bb (def);\n   if ((rec = ipa_get_stmt_member_ptr_load_param (d1, false)))\n     {\n       if (ipa_get_stmt_member_ptr_load_param (d2, false))\n \treturn;\n \n-      bb = gimple_bb (d1);\n+      bb = EDGE_PRED (join, 0)->src;\n       virt_bb = gimple_bb (d2);\n     }\n   else if ((rec = ipa_get_stmt_member_ptr_load_param (d2, false)))\n     {\n-      bb = gimple_bb (d2);\n+      bb = EDGE_PRED (join, 1)->src;\n       virt_bb = gimple_bb (d1);\n     }\n   else\n@@ -1128,7 +1135,6 @@ ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n   /* Second, we need to check that the basic blocks are laid out in the way\n      corresponding to the pattern. */\n \n-  join = gimple_bb (def);\n   if (!single_pred_p (virt_bb) || !single_succ_p (virt_bb)\n       || single_pred (virt_bb) != bb\n       || single_succ (virt_bb) != join)\n@@ -1138,7 +1144,7 @@ ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n      significant bit of the pfn. */\n \n   branch = last_stmt (bb);\n-  if (gimple_code (branch) != GIMPLE_COND)\n+  if (!branch || gimple_code (branch) != GIMPLE_COND)\n     return;\n \n   if (gimple_cond_code (branch) != NE_EXPR"}, {"sha": "08dc8273f0cda8338fd1cbd554c038654819a7c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8aa29647d374a66e695423659a6607ec63c4675a", "patch": "@@ -1,3 +1,7 @@\n+2010-06-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* g++.dg/ipa/iinline-2.C: New test.\n+\n 2010-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/43866"}, {"sha": "670a5dd952219d66ec9e40a00b04106781520196", "filename": "gcc/testsuite/g++.dg/ipa/iinline-2.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fiinline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa29647d374a66e695423659a6607ec63c4675a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fiinline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fiinline-2.C?ref=8aa29647d374a66e695423659a6607ec63c4675a", "patch": "@@ -0,0 +1,61 @@\n+/* Verify that simple indirect calls are inlined even without early\n+   inlining..  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining\"  } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+extern void non_existent (const char *, int);\n+\n+class String\n+{\n+private:\n+  const char *data;\n+\n+public:\n+  String (const char *d) : data(d)\n+  {}\n+\n+  int funcOne (int delim) const;\n+  int printStuffTwice (int delim) const;\n+};\n+\n+\n+int String::funcOne (int delim) const\n+{\n+  int i;\n+  for (i = 0; i < delim; i++)\n+    non_existent(data, i);\n+\n+  return 1;\n+}\n+\n+extern int global;\n+\n+int docalling (int c, int (String::* f)(int delim) const)\n+{\n+  String S (\"muhehehe\");\n+\n+  if (c > 2)\n+    global = 3;\n+  else\n+    global = 5;\n+\n+  return (S.*f)(4);\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input (void)\n+{\n+  return 1;\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  int i = 0;\n+  while (i < 1000)\n+    i += docalling (get_input (), &String::funcOne);\n+  non_existent (\"done\", i);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"String::funcOne\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}