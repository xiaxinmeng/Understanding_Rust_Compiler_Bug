{"sha": "6e885ad3287388192e52e9b524dbaa408507c0a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4ODVhZDMyODczODgxOTJlNTJlOWI1MjRkYmFhNDA4NTA3YzBhNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-12T17:02:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-12T18:23:05Z"}, "message": "c++: ICE with using-decl [PR 99238]\n\nThis ICE was caused by a stray TREE_VISITED marker.  The lookup\nmachinery was leaving it there due to the way I'd arranged for it to\nbe cleared.  That was presuming the name_lookup::value field didn't\nchange, and that wasn't always true in the using-decl processing.  I\ntook the opportunity to break out a helper, and then call it\nimmediately after lookups, rather than wait until destructor time.\nAdded some asserts the module machinery to catch further cases of\nthis.\n\n\tPR c++/99238\n\tgcc/cp/\n\t* module.cc (depset::hash::add_binding_entity): Assert not\n\tvisited.\n\t(depset::add::add_specializations): Likewise.\n\t* name-lookup.c (name_lookup::dedup): New.\n\t(name_lookup::~name_lookup): Assert not deduping.\n\t(name_lookup::restore_state): Likewise.\n\t(name_lookup::add_overload): Replace outlined code with dedup\n\tcall.\n\t(name_lookup::add_value): Likewise.\n\t(name_lookup::search_namespace_only): Likewise.\n\t(name_lookup::adl_namespace_fns): Likewise.\n\t(name_lookup::adl_class_fns): Likewise.\n\t(name_lookup::search_adl): Likewise.  Add clearing dedup call.\n\t(name_lookup::search_qualified): Likewise.\n\t(name_lookup::search_unqualified): Likewise.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99238.h: New.\n\t* g++.dg/modules/pr99238_a.H: New.\n\t* g++.dg/modules/pr99238_b.H: New.", "tree": {"sha": "7e95fc65bdaa8414b29907489f09ec61cff00f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e95fc65bdaa8414b29907489f09ec61cff00f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e885ad3287388192e52e9b524dbaa408507c0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e885ad3287388192e52e9b524dbaa408507c0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e885ad3287388192e52e9b524dbaa408507c0a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e885ad3287388192e52e9b524dbaa408507c0a4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b84e2771fc2495493d0c66c3cba714484757d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b84e2771fc2495493d0c66c3cba714484757d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b84e2771fc2495493d0c66c3cba714484757d7"}], "stats": {"total": 97, "additions": 52, "deletions": 45}, "files": [{"sha": "19bdfc7cb218c095eec3d53e0ed65eb0348da39a", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=6e885ad3287388192e52e9b524dbaa408507c0a4", "patch": "@@ -12706,6 +12706,9 @@ depset::hash::add_binding_entity (tree decl, WMB_Flags flags, void *data_)\n \t  *slot = data->binding;\n \t}\n \n+      /* Make sure nobody left a tree visited lying about.  */\n+      gcc_checking_assert (!TREE_VISITED (decl));\n+\n       if (flags & WMB_Using)\n \t{\n \t  decl = ovl_make (decl, NULL_TREE);\n@@ -13000,6 +13003,8 @@ depset::hash::add_specializations (bool decl_p)\n     have_spec:;\n #endif\n \n+      /* Make sure nobody left a tree visited lying about.  */\n+      gcc_checking_assert (!TREE_VISITED (spec));\n       depset *dep = make_dependency (spec, depset::EK_SPECIALIZATION);\n       if (dep->is_special ())\n \t{"}, {"sha": "9382a47e195424620d135dff0d6b73c0d851183a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 34, "deletions": 45, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6e885ad3287388192e52e9b524dbaa408507c0a4", "patch": "@@ -464,13 +464,25 @@ class name_lookup\n   }\n   ~name_lookup ()\n   {\n+    gcc_checking_assert (!deduping);\n     restore_state ();\n   }\n \n private: /* Uncopyable, unmovable, unassignable. I am a rock. */\n   name_lookup (const name_lookup &);\n   name_lookup &operator= (const name_lookup &);\n \n+ public:\n+  /* Turn on or off deduping mode.  */\n+  void dedup (bool state)\n+  {\n+    if (deduping != state)\n+      {\n+\tdeduping = state;\n+\tlookup_mark (value, state);\n+      }\n+  }\n+\n protected:\n   static bool seen_p (tree scope)\n   {\n@@ -605,8 +617,7 @@ name_lookup::preserve_state ()\n void\n name_lookup::restore_state ()\n {\n-  if (deduping)\n-    lookup_mark (value, false);\n+  gcc_checking_assert (!deduping);\n \n   /* Unmark and empty this lookup's scope stack.  */\n   for (unsigned ix = vec_safe_length (scopes); ix--;)\n@@ -703,12 +714,9 @@ name_lookup::add_overload (tree fns)\n \tprobe = ovl_skip_hidden (probe);\n       if (probe && TREE_CODE (probe) == OVERLOAD\n \t  && OVL_DEDUP_P (probe))\n-\t{\n-\t  /* We're about to add something found by multiple paths, so\n-\t     need to engage deduping mode.  */\n-\t  lookup_mark (value, true);\n-\t  deduping = true;\n-\t}\n+\t/* We're about to add something found by multiple paths, so need to\n+\t   engage deduping mode.  */\n+\tdedup (true);\n     }\n \n   value = lookup_maybe_add (fns, value, deduping);\n@@ -737,12 +745,8 @@ name_lookup::add_value (tree new_val)\n     value = ORIGINAL_NAMESPACE (value);\n   else\n     {\n-      if (deduping)\n-\t{\n-\t  /* Disengage deduping mode.  */\n-\t  lookup_mark (value, false);\n-\t  deduping = false;\n-\t}\n+      /* Disengage deduping mode.  */\n+      dedup (false);\n       value = ambiguous (new_val, value);\n     }\n }\n@@ -951,10 +955,7 @@ name_lookup::search_namespace_only (tree scope)\n \t\t\t    if ((hit & 1 && BINDING_VECTOR_GLOBAL_DUPS_P (val))\n \t\t\t\t|| (hit & 2\n \t\t\t\t    && BINDING_VECTOR_PARTITION_DUPS_P (val)))\n-\t\t\t      {\n-\t\t\t\tlookup_mark (value, true);\n-\t\t\t\tdeduping = true;\n-\t\t\t      }\n+\t\t\t      dedup (true);\n \t\t\t  }\n \t\t\tdup_detect |= dup;\n \t\t      }\n@@ -1076,6 +1077,8 @@ name_lookup::search_qualified (tree scope, bool usings)\n \tfound = search_usings (scope);\n     }\n \n+  dedup (false);\n+\n   return found;\n }\n \n@@ -1177,6 +1180,8 @@ name_lookup::search_unqualified (tree scope, cp_binding_level *level)\n \tbreak;\n     }\n \n+  dedup (false);\n+\n   /* Restore to incoming length.  */\n   vec_safe_truncate (queue, length);\n \n@@ -1284,15 +1289,10 @@ name_lookup::adl_namespace_fns (tree scope, bitmap imports)\n \t\t\telse if (MODULE_BINDING_PARTITION_P (bind))\n \t\t\t  dup = 2;\n \t\t\tif (unsigned hit = dup_detect & dup)\n-\t\t\t  {\n-\t\t\t    if ((hit & 1 && BINDING_VECTOR_GLOBAL_DUPS_P (val))\n-\t\t\t\t|| (hit & 2\n-\t\t\t\t    && BINDING_VECTOR_PARTITION_DUPS_P (val)))\n-\t\t\t      {\n-\t\t\t\tlookup_mark (value, true);\n-\t\t\t\tdeduping = true;\n-\t\t\t      }\n-\t\t\t  }\n+\t\t\t  if ((hit & 1 && BINDING_VECTOR_GLOBAL_DUPS_P (val))\n+\t\t\t      || (hit & 2\n+\t\t\t\t  && BINDING_VECTOR_PARTITION_DUPS_P (val)))\n+\t\t\t    dedup (true);\n \t\t\tdup_detect |= dup;\n \t\t      }\n \n@@ -1328,11 +1328,7 @@ name_lookup::adl_class_fns (tree type)\n \t    if (CP_DECL_CONTEXT (fn) != context)\n \t      continue;\n \n-\t    if (!deduping)\n-\t      {\n-\t\tlookup_mark (value, true);\n-\t\tdeduping = true;\n-\t      }\n+\t    dedup (true);\n \n \t    /* Template specializations are never found by name lookup.\n \t       (Templates themselves can be found, but not template\n@@ -1634,12 +1630,9 @@ name_lookup::search_adl (tree fns, vec<tree, va_gc> *args)\n   if (vec_safe_length (scopes))\n     {\n       /* Now do the lookups.  */\n-      if (fns)\n-\t{\n-\t  deduping = true;\n-\t  lookup_mark (fns, true);\n-\t}\n       value = fns;\n+      if (fns)\n+\tdedup (true);\n \n       /* INST_PATH will be NULL, if this is /not/ 2nd-phase ADL.  */\n       bitmap inst_path = NULL;\n@@ -1697,14 +1690,9 @@ name_lookup::search_adl (tree fns, vec<tree, va_gc> *args)\n \n \t\t    if (tree bind = *mslot)\n \t\t      {\n-\t\t\tif (!deduping)\n-\t\t\t  {\n-\t\t\t    /* We must turn on deduping, because some\n-\t\t\t       other class from this module might also\n-\t\t\t       be in this namespace.  */\n-\t\t\t    deduping = true;\n-\t\t\t    lookup_mark (value, true);\n-\t\t\t  }\n+\t\t\t/* We must turn on deduping, because some other class\n+\t\t\t   from this module might also be in this namespace.  */\n+\t\t\tdedup (true);\n \n \t\t\t/* Add the exported fns  */\n \t\t\tif (STAT_HACK_P (bind))\n@@ -1715,6 +1703,7 @@ name_lookup::search_adl (tree fns, vec<tree, va_gc> *args)\n \t}\n \n       fns = value;\n+      dedup (false);\n     }\n \n   return fns;"}, {"sha": "312641f312c4109bd5f9ca26cab79f19d3e70429", "filename": "gcc/testsuite/g++.dg/modules/pr99238.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238.h?ref=6e885ad3287388192e52e9b524dbaa408507c0a4", "patch": "@@ -0,0 +1 @@\n+struct tm;"}, {"sha": "b594c09ec586ef3904ed366438c02778878e77c5", "filename": "gcc/testsuite/g++.dg/modules/pr99238_a.H", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_a.H?ref=6e885ad3287388192e52e9b524dbaa408507c0a4", "patch": "@@ -0,0 +1,4 @@\n+// PR 99238 ICE with using decl\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+#include \"pr99238.h\""}, {"sha": "070ee36f95ffc3c5a03f497f3a78d0cba06ded5c", "filename": "gcc/testsuite/g++.dg/modules/pr99238_b.H", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e885ad3287388192e52e9b524dbaa408507c0a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99238_b.H?ref=6e885ad3287388192e52e9b524dbaa408507c0a4", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+#include \"pr99238.h\"\n+import \"pr99238_a.H\";\n+namespace std\n+{\n+  using ::tm;\n+}"}]}