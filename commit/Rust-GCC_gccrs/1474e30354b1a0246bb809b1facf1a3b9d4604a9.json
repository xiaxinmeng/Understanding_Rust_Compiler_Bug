{"sha": "1474e30354b1a0246bb809b1facf1a3b9d4604a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3NGUzMDM1NGIxYTAyNDZiYjgwOWIxZmFjZjFhM2I5ZDQ2MDRhOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-20T22:22:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-20T22:22:34Z"}, "message": "[multiple changes]\n\nThu May 20 10:00:42 1999   Stephen L Moshier  <moshier@world.std.com>\n        * Makefile.in (GCC_FOR_TARGET): Add -I$(build_tooldir)/include.\nThu May 20 09:58:57 1999  Jan Hubicka <hubicka@freesoft.cz>\n        * function.c (assign_stack_local): Align stack slot propertly.\n        (assign_outer_stack_local): Likewise.\n\nFrom-SVN: r27073", "tree": {"sha": "417ae3edbc2e199490a83bc4e074428aec9ff1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417ae3edbc2e199490a83bc4e074428aec9ff1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1474e30354b1a0246bb809b1facf1a3b9d4604a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1474e30354b1a0246bb809b1facf1a3b9d4604a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1474e30354b1a0246bb809b1facf1a3b9d4604a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1474e30354b1a0246bb809b1facf1a3b9d4604a9/comments", "author": null, "committer": null, "parents": [{"sha": "d08940b2c252d872b47eeb4ba6939ffd987da65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08940b2c252d872b47eeb4ba6939ffd987da65e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d08940b2c252d872b47eeb4ba6939ffd987da65e"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "c938cfc77078888778a97b4e0aa0bb6613fb136c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1474e30354b1a0246bb809b1facf1a3b9d4604a9", "patch": "@@ -1,3 +1,12 @@\n+Thu May 20 10:00:42 1999   Stephen L Moshier  <moshier@world.std.com>\n+\n+\t* Makefile.in (GCC_FOR_TARGET): Add -I$(build_tooldir)/include.\n+\n+Thu May 20 09:58:57 1999  Jan Hubicka <hubicka@freesoft.cz>\n+\n+\t* function.c (assign_stack_local): Align stack slot propertly.\n+\t(assign_outer_stack_local): Likewise.\n+\n Thu May 20 10:38:43 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* expr.h (lang_expand_constant): Declare."}, {"sha": "20b832a4cec834e5a9d376e46147dbc17649edab", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1474e30354b1a0246bb809b1facf1a3b9d4604a9", "patch": "@@ -166,7 +166,7 @@ INSTALL_ASSERT_H = install-assert-h\n # The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n-GCC_FOR_TARGET = ./xgcc -B./ -B$(build_tooldir)/bin/\n+GCC_FOR_TARGET = ./xgcc -B./ -B$(build_tooldir)/bin/ -I$(build_tooldir)/include\n \n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./."}, {"sha": "f41982ec363f91805d0112cfdb2ebab8865a3206", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474e30354b1a0246bb809b1facf1a3b9d4604a9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1474e30354b1a0246bb809b1facf1a3b9d4604a9", "patch": "@@ -786,6 +786,10 @@ assign_stack_local (mode, size, align)\n   else\n     alignment = align / BITS_PER_UNIT;\n \n+#ifdef FRAME_GROWS_DOWNWARD\n+  frame_offset -= size;\n+#endif\n+\n   /* Round frame offset to that alignment.\n      We must be careful here, since FRAME_OFFSET might be negative and\n      division with a negative dividend isn't as well defined as we might\n@@ -802,10 +806,6 @@ assign_stack_local (mode, size, align)\n   if (BYTES_BIG_ENDIAN && mode != BLKmode)\n     bigend_correction = size - GET_MODE_SIZE (mode);\n \n-#ifdef FRAME_GROWS_DOWNWARD\n-  frame_offset -= size;\n-#endif\n-\n   /* If we have already instantiated virtual registers, return the actual\n      address relative to the frame pointer.  */\n   if (virtuals_instantiated)\n@@ -871,6 +871,10 @@ assign_outer_stack_local (mode, size, align, function)\n   else\n     alignment = align / BITS_PER_UNIT;\n \n+#ifdef FRAME_GROWS_DOWNWARD\n+  function->frame_offset -= size;\n+#endif\n+\n   /* Round frame offset to that alignment.  */\n #ifdef FRAME_GROWS_DOWNWARD\n   function->frame_offset = FLOOR_ROUND (function->frame_offset, alignment);\n@@ -883,9 +887,6 @@ assign_outer_stack_local (mode, size, align, function)\n   if (BYTES_BIG_ENDIAN && mode != BLKmode)\n     bigend_correction = size - GET_MODE_SIZE (mode);\n \n-#ifdef FRAME_GROWS_DOWNWARD\n-  function->frame_offset -= size;\n-#endif\n   addr = plus_constant (virtual_stack_vars_rtx,\n \t\t\tfunction->frame_offset + bigend_correction);\n #ifndef FRAME_GROWS_DOWNWARD"}]}