{"sha": "10a5233517ed126df715d041cdb64e41bb365cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhNTIzMzUxN2VkMTI2ZGY3MTVkMDQxY2RiNjRlNDFiYjM2NWNiMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-08T13:20:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-08T13:20:39Z"}, "message": "tree-cfg.c (tree_forwarder_block_p): Reorder checks so that common cases will be caught earlier than others.\n\n\t* tree-cfg.c (tree_forwarder_block_p): Reorder checks so that\n\tcommon cases will be caught earlier than others.\n\nFrom-SVN: r88752", "tree": {"sha": "92519b84d1073787b2b240233b78ec42b58c986f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92519b84d1073787b2b240233b78ec42b58c986f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a5233517ed126df715d041cdb64e41bb365cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a5233517ed126df715d041cdb64e41bb365cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a5233517ed126df715d041cdb64e41bb365cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a5233517ed126df715d041cdb64e41bb365cb2/comments", "author": null, "committer": null, "parents": [{"sha": "c054bc3d7a7758deca716ee59948379bf86b694f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c054bc3d7a7758deca716ee59948379bf86b694f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c054bc3d7a7758deca716ee59948379bf86b694f"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "5bb44a52245f350503adca3e5071ff8748d269e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a5233517ed126df715d041cdb64e41bb365cb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a5233517ed126df715d041cdb64e41bb365cb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a5233517ed126df715d041cdb64e41bb365cb2", "patch": "@@ -1,3 +1,8 @@\n+2004-10-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (tree_forwarder_block_p): Reorder checks so that\n+\tcommon cases will be caught earlier than others.\n+\n 2004-10-08  Michael Matz  <matz@suse.de>\n \n \t* loop-doloop.c (doloop_optimize): Extend count."}, {"sha": "c1d40d5830e008a1aade1d73ab4337c54c5f05c2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a5233517ed126df715d041cdb64e41bb365cb2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a5233517ed126df715d041cdb64e41bb365cb2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=10a5233517ed126df715d041cdb64e41bb365cb2", "patch": "@@ -3694,7 +3694,10 @@ tree_make_forwarder_block (edge fallthru)\n \n /* Return true if basic block BB does nothing except pass control\n    flow to another block and that we can safely insert a label at\n-   the start of the successor block.  */\n+   the start of the successor block.\n+\n+   As a precondition, we require that BB be not equal to\n+   ENTRY_BLOCK_PTR.  */\n \n static bool\n tree_forwarder_block_p (basic_block bb)\n@@ -3708,17 +3711,25 @@ tree_forwarder_block_p (basic_block bb)\n   if (! bb_ann (bb)->forwardable)\n     return false;\n \n-  /* BB must have a single outgoing normal edge.  Otherwise it can not be\n-     a forwarder block.  */\n+  /* BB must have a single outgoing edge.  */\n   if (EDGE_COUNT (bb->succs) != 1\n+      /* BB can not have any PHI nodes.  This could potentially be\n+\t relaxed early in compilation if we re-rewrote the variables\n+\t appearing in any PHI nodes in forwarder blocks.  */\n+      || phi_nodes (bb)\n+      /* BB may not be a predecessor of EXIT_BLOCK_PTR.  */\n       || EDGE_SUCC (bb, 0)->dest == EXIT_BLOCK_PTR\n-      || (EDGE_SUCC (bb, 0)->flags & EDGE_ABNORMAL)\n-      || bb == ENTRY_BLOCK_PTR)\n+      /* BB may not have an abnormal outgoing edge.  */\n+      || (EDGE_SUCC (bb, 0)->flags & EDGE_ABNORMAL))\n     {\n       bb_ann (bb)->forwardable = 0;\n       return false; \n     }\n \n+#if ENABLE_CHECKING\n+  gcc_assert (bb != ENTRY_BLOCK_PTR);\n+#endif\n+\n   /* Successors of the entry block are not forwarders.  */\n   FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR->succs)\n     if (e->dest == bb)\n@@ -3727,15 +3738,6 @@ tree_forwarder_block_p (basic_block bb)\n \treturn false;\n       }\n \n-  /* BB can not have any PHI nodes.  This could potentially be relaxed\n-     early in compilation if we re-rewrote the variables appearing in\n-     any PHI nodes in forwarder blocks.  */\n-  if (phi_nodes (bb))\n-    {\n-      bb_ann (bb)->forwardable = 0;\n-      return false; \n-    }\n-\n   /* Now walk through the statements.  We can ignore labels, anything else\n      means this is not a forwarder block.  */\n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))"}]}