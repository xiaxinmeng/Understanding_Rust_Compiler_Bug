{"sha": "cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M2OTJiNGM0MDJiYmE3ZGQ5MmY2ODFlM2UwOTViNWM2ZTVmMjdkZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-02T10:09:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-02T10:09:04Z"}, "message": "invoke.texi (hot-bb-count-fraction): Rework description.\n\n\t* doc/invoke.texi (hot-bb-count-fraction): Rework description.\n\t(hot-bb-count-ws-permille): Likewise.\n\t(hot-bb-frequency-fraction): Likewise.\n\t(unlikely-bb-count-fraction): Likewise.\n\t* params.def (hot-bb-count-fraction): Rework description.\n\t(hot-bb-count-ws-permille): Likewise.\n\t(hot-bb-frequency-fraction): Likewise.\n\t(unlikely-bb-count-fraction): Likewise.  Remove min and max values.\n\t* predict.c (get_hot_bb_threshold): Deal with 0 HOT_BB_COUNT_FRACTION.\n\nFrom-SVN: r274006", "tree": {"sha": "9d16a6847a5a9ac6689cab729eeb4647fcf40954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d16a6847a5a9ac6689cab729eeb4647fcf40954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/comments", "author": null, "committer": null, "parents": [{"sha": "d603877768c5a4ed26481afc0aff99e87a0a8d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d603877768c5a4ed26481afc0aff99e87a0a8d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d603877768c5a4ed26481afc0aff99e87a0a8d62"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "87877a2580711f88e297d3e83a286a9beed57286", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "patch": "@@ -1,3 +1,15 @@\n+2019-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/invoke.texi (hot-bb-count-fraction): Rework description.\n+\t(hot-bb-count-ws-permille): Likewise.\n+\t(hot-bb-frequency-fraction): Likewise.\n+\t(unlikely-bb-count-fraction): Likewise.\n+\t* params.def (hot-bb-count-fraction): Rework description.\n+\t(hot-bb-count-ws-permille): Likewise.\n+\t(hot-bb-frequency-fraction): Likewise.\n+\t(unlikely-bb-count-fraction): Likewise.  Remove min and max values.\n+\t* predict.c (get_hot_bb_threshold): Deal with 0 HOT_BB_COUNT_FRACTION.\n+\n 2019-08-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/91323"}, {"sha": "7b3c77b8033a53e7a53e6f3ec9a0863a2041c743", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "patch": "@@ -11443,13 +11443,38 @@ for vectorizer. Value -1 means no limit.\n The maximum number of iterations of a loop the brute-force algorithm\n for analysis of the number of iterations of the loop tries to evaluate.\n \n+@item hot-bb-count-fraction\n+The denominator n of fraction 1/n of the maximal execution count of a\n+basic block in the entire program that a basic block needs to at least\n+have in order to be considered hot.  The default is 10000, which means\n+that a basic block is considered hot if its execution count is greater\n+than 1/10000 of the maximal execution count.  0 means that it is never\n+considered hot.  Used in non-LTO mode.\n+\n @item hot-bb-count-ws-permille\n-A basic block profile count is considered hot if it contributes to \n-the given permillage (i.e.@: 0...1000) of the entire profiled execution.\n+The number of most executed permilles, ranging from 0 to 1000, of the\n+profiled execution of the entire program to which the execution count\n+of a basic block must be part of in order to be considered hot.  The\n+default is 990, which means that a basic block is considered hot if\n+its execution count contributes to the upper 990 permilles, or 99.0%,\n+of the profiled execution of the entire program.  0 means that it is\n+never considered hot.  Used in LTO mode.\n \n @item hot-bb-frequency-fraction\n-Select fraction of the entry block frequency of executions of basic block in\n-function given basic block needs to have to be considered hot.\n+The denominator n of fraction 1/n of the execution frequency of the\n+entry block of a function that a basic block of this function needs\n+to at least have in order to be considered hot.  The default is 1000,\n+which means that a basic block is considered hot in a function if it\n+is executed more frequently than 1/1000 of the frequency of the entry\n+block of the function.  0 means that it is never considered hot.\n+\n+@item unlikely-bb-count-fraction\n+The denominator n of fraction 1/n of the number of profiled runs of\n+the entire program below which the execution count of a basic block\n+must be in order for the basic block to be considered unlikely executed.\n+The default is 20, which means that a basic block is considered unlikely\n+executed if it is executed in fewer than 1/20, or 5%, of the runs of\n+the program.  0 means that it is always considered unlikely executed.\n \n @item max-predicted-iterations\n The maximum number of loop iterations we predict statically.  This is useful\n@@ -12130,11 +12155,6 @@ A threshold on the average loop count considered by the swing modulo scheduler.\n The number of cycles the swing modulo scheduler considers when checking\n conflicts using DFA.\n \n-@item hot-bb-count-fraction\n-Select fraction of the maximal count of repetitions of basic block\n-in program given basic block needs\n-to have to be considered hot (used in non-LTO mode)\n-\n @item max-inline-insns-recursive-auto\n The maximum number of instructions non-inline function\n can grow to via recursive inlining.\n@@ -12172,10 +12192,6 @@ Maximum number of arrays per scop.\n @item max-vartrack-reverse-op-size\n Max. size of loc list for which reverse ops should be added.\n \n-@item unlikely-bb-count-fraction\n-The minimum fraction of profile runs a given basic block execution count\n-must be not to be considered unlikely.\n-\n @item tracer-dynamic-coverage-feedback\n The percentage of function, weighted by execution frequency,\n that must be covered by trace formation."}, {"sha": "13001a7bb2d3a6fe63b3e5a455e9cb42f84669e6", "filename": "gcc/params.def", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "patch": "@@ -427,23 +427,31 @@ DEFPARAM(PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD,\n \n DEFPARAM(HOT_BB_COUNT_FRACTION,\n \t \"hot-bb-count-fraction\",\n-\t \"Select fraction of the maximal count of repetitions of basic block in program given basic \"\n-\t \"block needs to have to be considered hot (used in non-LTO mode).\",\n+\t \"The denominator n of fraction 1/n of the maximal execution count of \"\n+\t \"a basic block in the entire program that a basic block needs to at \"\n+\t \"least have in order to be considered hot (used in non-LTO mode).\",\n \t 10000, 0, 0)\n+\n DEFPARAM(HOT_BB_COUNT_WS_PERMILLE,\n \t \"hot-bb-count-ws-permille\",\n-         \"A basic block profile count is considered hot if it contributes to \"\n-         \"the given permillage of the entire profiled execution (used in LTO mode).\",\n+\t \"The number of most executed permilles of the profiled execution of \"\n+\t \"the entire program to which the execution count of a basic block \"\n+\t \"must be part of in order to be considered hot (used in LTO mode).\",\n \t 990, 0, 1000)\n+\n DEFPARAM(HOT_BB_FREQUENCY_FRACTION,\n \t \"hot-bb-frequency-fraction\",\n-\t \"Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot.\",\n+\t \"The denominator n of fraction 1/n of the execution frequency of the \"\n+\t \"entry block of a function that a basic block of this function needs \"\n+\t \"to at least have in order to be considered hot.\",\n \t 1000, 0, 0)\n \n DEFPARAM(UNLIKELY_BB_COUNT_FRACTION,\n \t \"unlikely-bb-count-fraction\",\n-         \"The minimum fraction of profile runs a given basic block execution count must be not to be considered unlikely.\",\n-\t 20, 1, 10000)\n+\t \"The denominator n of fraction 1/n of the number of profiled runs of \"\n+\t \"the entire program below which the execution count of a basic block \"\n+\t \"must be in order for the basic block to be considered unlikely.\",\n+\t 20, 0, 0)\n \n DEFPARAM (PARAM_ALIGN_THRESHOLD,\n \t  \"align-threshold\","}, {"sha": "915f0806b110f99030e0c817ce55c1c060f7a090", "filename": "gcc/predict.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc692b4c402bba7dd92f681e3e095b5c6e5f27dd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cc692b4c402bba7dd92f681e3e095b5c6e5f27dd", "patch": "@@ -132,11 +132,15 @@ get_hot_bb_threshold ()\n {\n   if (min_count == -1)\n     {\n-      gcov_type t = profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION);\n-      set_hot_bb_threshold (t);\n+      const int hot_frac = PARAM_VALUE (HOT_BB_COUNT_FRACTION);\n+      const gcov_type min_hot_count\n+\t= hot_frac\n+\t  ? profile_info->sum_max / hot_frac\n+\t  : (gcov_type)profile_count::max_count;\n+      set_hot_bb_threshold (min_hot_count);\n       if (dump_file)\n \tfprintf (dump_file, \"Setting hotness threshold to %\" PRId64 \".\\n\",\n-\t\t min_count);\n+\t\t min_hot_count);\n     }\n   return min_count;\n }"}]}