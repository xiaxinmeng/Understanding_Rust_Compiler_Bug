{"sha": "73aef89eb7b3d00fef404cd3163115c1563a78cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhZWY4OWViN2IzZDAwZmVmNDA0Y2QzMTYzMTE1YzE1NjNhNzhjZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-12-09T17:00:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-12-09T17:00:19Z"}, "message": "re PR middle-end/46844 (regrename.c:312:22: error: unused parameter 'reg')\n\n2010-12-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/46844\n\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize\n\taddresses.\n\n\t* gcc.c-torture/compile/pr46866.c: New testcase.\n\nFrom-SVN: r167649", "tree": {"sha": "e31fc55ad862a3c65fc3385fd9e3bb811dbcc1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31fc55ad862a3c65fc3385fd9e3bb811dbcc1d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73aef89eb7b3d00fef404cd3163115c1563a78cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73aef89eb7b3d00fef404cd3163115c1563a78cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73aef89eb7b3d00fef404cd3163115c1563a78cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73aef89eb7b3d00fef404cd3163115c1563a78cf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0c4ec7cdb619ed922ad1e5eb4605713646685e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c4ec7cdb619ed922ad1e5eb4605713646685e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0c4ec7cdb619ed922ad1e5eb4605713646685e"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "9dec6e7132728b9da38f70674ccb65448a6fd5ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73aef89eb7b3d00fef404cd3163115c1563a78cf", "patch": "@@ -1,3 +1,9 @@\n+2010-12-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/46844\n+\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize\n+\taddresses.\n+\n 2010-12-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/netware.h (TARGET_POSIX_IO): Define."}, {"sha": "ba51ee8d853bf90b7ad16c51eeebcb0670d836d8", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=73aef89eb7b3d00fef404cd3163115c1563a78cf", "patch": "@@ -132,6 +132,10 @@ canonicalize_constructor_val (tree cval)\n \treturn NULL_TREE;\n       if (base && TREE_CODE (base) == VAR_DECL)\n \tadd_referenced_var (base);\n+      /* We never have the chance to fixup types in global initializers\n+         during gimplification.  Do so here.  */\n+      if (TREE_TYPE (TREE_TYPE (cval)) != TREE_TYPE (TREE_OPERAND (cval, 0)))\n+\tcval = build_fold_addr_expr (TREE_OPERAND (cval, 0));\n     }\n   return cval;\n }"}, {"sha": "e1317fb5045db2a3030e6ddd4f4b91d0bef5d143", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73aef89eb7b3d00fef404cd3163115c1563a78cf", "patch": "@@ -1,3 +1,8 @@\n+2010-12-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/46844\n+\t* gcc.c-torture/compile/pr46866.c: New testcase.\n+\n 2010-12-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/45068"}, {"sha": "4941148571f3e13985606fdf68d725dc568a01c2", "filename": "gcc/testsuite/gcc.c-torture/compile/pr46866.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr46866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73aef89eb7b3d00fef404cd3163115c1563a78cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr46866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr46866.c?ref=73aef89eb7b3d00fef404cd3163115c1563a78cf", "patch": "@@ -0,0 +1,19 @@\n+extern void *malloc(__SIZE_TYPE__);\n+typedef struct T T;\n+struct T {\n+    void (*destroy)(void *);\n+};\n+void destroy(union { void *this; } __attribute__((transparent_union)));\n+static const typeof(destroy) *_destroy  = (const typeof(destroy)*)destroy;\n+void destroy(void *this);\n+static T *create_empty(void)\n+{\n+  T *this = malloc(sizeof(*this));\n+  *this = (typeof(*this)){ _destroy };\n+  return this;\n+}\n+void openssl_crl_load(void)\n+{\n+  T *this = create_empty();\n+  destroy(this);\n+}"}]}