{"sha": "96327cdcf6c9cba932a35da14b7fff8694da5182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzMjdjZGNmNmM5Y2JhOTMyYTM1ZGExNGI3ZmZmODY5NGRhNTE4Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-03-22T15:32:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-03-22T15:32:00Z"}, "message": "toplev.c (flag_loop_optimize, [...]): New static variables.\n\n\t* toplev.c (flag_loop_optimize, flag_crossjumping):\n\tNew static variables.\n\t(rest_of_compilation): Conditionalize crossjumping and\n\tloop optimizer.\n\t(parse_options_and_default_flags): Default loop_optimize and\n\tcrossjumping.\n\t(lang_independent_options): Add -fcrossjumping and -floop-optimize\n\t* invoke.texi (crossjumping, loop-optimize): Document.\n\nFrom-SVN: r51175", "tree": {"sha": "26895af1e0a165a0de77cc238bffae112c4d74e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26895af1e0a165a0de77cc238bffae112c4d74e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96327cdcf6c9cba932a35da14b7fff8694da5182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96327cdcf6c9cba932a35da14b7fff8694da5182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96327cdcf6c9cba932a35da14b7fff8694da5182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96327cdcf6c9cba932a35da14b7fff8694da5182/comments", "author": null, "committer": null, "parents": [{"sha": "bc185257e74ed5e051e0e428ffd368a0f42b74e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc185257e74ed5e051e0e428ffd368a0f42b74e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc185257e74ed5e051e0e428ffd368a0f42b74e2"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "7e49d236c9544547d4d7c067c51f4dd621b7a7de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96327cdcf6c9cba932a35da14b7fff8694da5182", "patch": "@@ -1,3 +1,14 @@\n+Fri Mar 22 16:30:42 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (flag_loop_optimize, flag_crossjumping):\n+\tNew static variables.\n+\t(rest_of_compilation): Conditionalize crossjumping and\n+\tloop optimizer.\n+\t(parse_options_and_default_flags): Default loop_optimize and\n+\tcrossjumping.\n+\t(lang_independent_options): Add -fcrossjumping and -floop-optimize\n+\t* invoke.texi (crossjumping, loop-optimize): Document.\n+\n 2002-03-22  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* real.c (eiisneg): Move outside #ifdef NANS."}, {"sha": "533fda1a4aaf74af534e8484c41f6e5630c2d009", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=96327cdcf6c9cba932a35da14b7fff8694da5182", "patch": "@@ -266,7 +266,7 @@ in the following sections.\n -fdelayed-branch  -fdelete-null-pointer-checks @gol\n -fexpensive-optimizations  -ffast-math  -ffloat-store @gol\n -fforce-addr  -fforce-mem  -ffunction-sections @gol\n--fgcse  -fgcse-lm  -fgcse-sm @gol\n+-fgcse  -fgcse-lm  -fgcse-sm -floop-optimize -fcrossjumping @gol\n -finline-functions  -finline-limit=@var{n}  -fkeep-inline-functions @gol\n -fkeep-static-consts  -fmerge-constants  -fmerge-all-constants @gol\n -fmove-all-movables  -fno-default-inline  -fno-defer-pop @gol\n@@ -3495,6 +3495,17 @@ subexpression elimination.  This pass will attempt to move stores out of loops.\n When used in conjunction with @option{-fgcse-lm}, loops containing a load/store sequence\n can be changed to a load before the loop and a store after the loop.\n \n+@item -floop-optimize\n+@opindex floop-optimize\n+Perform loop optimizations: move constant expressions out of loops, simplify\n+exit test conditions and optionally do strength-reduction and loop unrolling as\n+well.\n+\n+@item -fcrossjumping\n+@opindex crossjumping\n+Perform cross-jumping transformation. This transformation unifies equivalent code and save code size. The\n+resulting code may or may not perform better than without cross-jumping.\n+\n @item -fdelete-null-pointer-checks\n @opindex fdelete-null-pointer-checks\n Use global dataflow analysis to identify and eliminate useless checks"}, {"sha": "ca26e7feb171e3ab6ecde557abe883c52b2ae4f9", "filename": "gcc/toplev.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96327cdcf6c9cba932a35da14b7fff8694da5182/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=96327cdcf6c9cba932a35da14b7fff8694da5182", "patch": "@@ -605,6 +605,14 @@ int flag_syntax_only = 0;\n \n static int flag_gcse;\n \n+/* Nonzero means perform loop optimizer.  */\n+\n+static int flag_loop_optimize;\n+\n+/* Nonzero means perform crossjumping.  */\n+\n+static int flag_crossjumping;\n+\n /* Nonzero means to use global dataflow analysis to eliminate\n    useless null pointer tests.  */\n \n@@ -1017,6 +1025,10 @@ static const lang_independent_options f_options[] =\n    N_(\"Perform enhanced load motion during global subexpression elimination\") },\n   {\"gcse-sm\", &flag_gcse_sm, 1,\n    N_(\"Perform store motion after global subexpression elimination\") },\n+  {\"loop-optimize\", &flag_loop_optimize, 1,\n+   N_(\"Perform the loop optimizations\") },\n+  {\"crossjumping\", &flag_crossjumping, 1,\n+   N_(\"Perform cross-jumping optimization\") },\n   {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n    N_(\"Run CSE pass after loop optimizations\") },\n   {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n@@ -2846,7 +2858,7 @@ rest_of_compilation (decl)\n \n   /* Move constant computations out of loops.  */\n \n-  if (optimize > 0)\n+  if (optimize > 0 && flag_loop_optimize)\n     {\n       timevar_push (TV_LOOP);\n       delete_dead_jumptables ();\n@@ -3244,7 +3256,8 @@ rest_of_compilation (decl)\n   if (optimize)\n     {\n       life_analysis (insns, rtl_dump_file, PROP_FINAL);\n-      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_CROSSJUMP | CLEANUP_UPDATE_LIFE);\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE\n+\t\t   | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n \n       /* This is kind of a heuristic.  We need to run combine_stack_adjustments\n          even for machines with possibly nonzero RETURN_POPS_ARGS\n@@ -3350,7 +3363,7 @@ rest_of_compilation (decl)\n \t and insn splitting possibly introduced more crossjumping\n \t oppurtuntities.  */\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_POST_REGSTACK\n-\t\t   | CLEANUP_CROSSJUMP);\n+\t\t   | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n       if (flag_reorder_blocks)\n \t{\n \t  reorder_basic_blocks ();\n@@ -4645,6 +4658,8 @@ parse_options_and_default_flags (argc, argv)\n #endif\n       flag_guess_branch_prob = 1;\n       flag_cprop_registers = 1;\n+      flag_loop_optimize = 1;\n+      flag_crossjumping = 1;\n     }\n \n   if (optimize >= 2)"}]}