{"sha": "cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3YWI5Yjc5Y2RkM2QwN2Q1NTc2Yjc3MjFlNmJhMTc1OTA5YWZkYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-19T17:06:29Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-19T17:06:29Z"}, "message": "s390.c (addr_generation_dependency_p): Handle SUBREG and STRICT_LOW_PART within SET_DEST.\n\n\t* config/s390/s390.c (addr_generation_dependency_p): Handle SUBREG\n\tand STRICT_LOW_PART within SET_DEST.\n\t* config/s390/s390.md (\"*extractqi\", \"*extracthi\"): New insns with\n\tsplitters, replacing pre-reload splitters.\n\t(\"*zero_extendhisi2_31\", \"*zero_extendqisi2_31\",\n\t\"*zero_extendqihi2_31\"): New insns.\n\t(\"*zero_extendqihi2_64\"): Do not clobber CC.\n\nFrom-SVN: r57309", "tree": {"sha": "774edddc805f272e98e5c0686e9743b200026e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/774edddc805f272e98e5c0686e9743b200026e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/comments", "author": null, "committer": null, "parents": [{"sha": "70b76b34a36af13d99506906cf89af67af614071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b76b34a36af13d99506906cf89af67af614071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b76b34a36af13d99506906cf89af67af614071"}], "stats": {"total": 97, "additions": 80, "deletions": 17}, "files": [{"sha": "083c12f32ac0d3fedcee4fb5ff465de2c3a1b7e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "patch": "@@ -1,3 +1,13 @@\n+2002-09-19  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (addr_generation_dependency_p): Handle SUBREG \n+\tand STRICT_LOW_PART within SET_DEST.\n+\t* config/s390/s390.md (\"*extractqi\", \"*extracthi\"): New insns with\n+\tsplitters, replacing pre-reload splitters.\n+\t(\"*zero_extendhisi2_31\", \"*zero_extendqisi2_31\", \n+\t\"*zero_extendqihi2_31\"): New insns.\n+\t(\"*zero_extendqihi2_64\"): Do not clobber CC.\n+\n 2002-09-18  Devang Patel  <dpatel@apple.com>\n \n \t* cp/cp-tree.h: New prototype for walk_vtabls().        "}, {"sha": "a5e0ab5cb49377e1c4e218ce22d7de642bc51951", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "patch": "@@ -2812,7 +2812,11 @@ addr_generation_dependency_p (dep_rtx, insn)\n   if (GET_CODE (dep_rtx) == SET)\n     {\n       target = SET_DEST (dep_rtx);\n-      \n+      if (GET_CODE (target) == STRICT_LOW_PART)\n+\ttarget = XEXP (target, 0);\n+      while (GET_CODE (target) == SUBREG)\n+\ttarget = SUBREG_REG (target);\n+\n       if (GET_CODE (target) == REG)\n \t{\n \t  int regno = REGNO (target);"}, {"sha": "ff2c9240e2f4c73d608e714e639271120dc744a9", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ab9b79cdd3d07d5576b7721e6ba175909afdc/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=cc7ab9b79cdd3d07d5576b7721e6ba175909afdc", "patch": "@@ -1931,13 +1931,16 @@\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extract:SI (match_operand:QI 1 \"s_operand\" \"\")\n-                         (match_operand 2 \"const_int_operand\" \"\")\n-                         (const_int 0)))]\n-  \"!TARGET_64BIT && !reload_completed\n+(define_insn_and_split \"*extractqi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (zero_extract:SI (match_operand:QI 1 \"s_operand\" \"Q\")\n+                         (match_operand 2 \"const_int_operand\" \"n\")\n+                         (const_int 0)))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) < 8\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(parallel\n     [(set (match_dup 0) (unspec:SI [(match_dup 1)] 10))\n      (clobber (reg:CC 33))])\n@@ -1946,15 +1949,20 @@\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], QImode, 0);\n-}\")\n+}\"\n+  [(set_attr \"type\"    \"o2\")\n+   (set_attr \"atype\"   \"mem\")])\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extract:SI (match_operand:QI 1 \"s_operand\" \"\")\n-                         (match_operand 2 \"const_int_operand\" \"\")\n-                         (const_int 0)))]\n-  \"!TARGET_64BIT && !reload_completed\n+(define_insn_and_split \"*extracthi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (zero_extract:SI (match_operand:QI 1 \"s_operand\" \"Q\")\n+                         (match_operand 2 \"const_int_operand\" \"n\")\n+                         (const_int 0)))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT\n    && INTVAL (operands[2]) >= 8 && INTVAL (operands[2]) < 16\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(parallel\n     [(set (match_dup 0) (unspec:SI [(match_dup 1)] 10))\n      (clobber (reg:CC 33))])\n@@ -1963,7 +1971,9 @@\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], HImode, 0);\n-}\")\n+}\"\n+  [(set_attr \"type\"    \"o2\")\n+   (set_attr \"atype\"   \"mem\")])\n \n ;\n ; extendsidi2 instruction pattern(s).\n@@ -2252,6 +2262,21 @@\n   \"llgh\\\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXE\")\n    (set_attr \"atype\"   \"mem\")])\n+\n+(define_insn_and_split \"*zero_extendhisi2_31\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+        (zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"Q\")))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (const_int 0))\n+   (parallel\n+    [(set (strict_low_part (match_dup 2)) (match_dup 1))\n+     (clobber (reg:CC 33))])]\n+  \"operands[2] = gen_lowpart (HImode, operands[0]);\"\n+  [(set_attr \"type\" \"o2\")\n+   (set_attr \"atype\" \"mem\")])\n  \n ;\n ; zero_extendqisi2 instruction pattern(s).\n@@ -2276,6 +2301,18 @@\n   \"llgc\\\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXE\")\n    (set_attr \"atype\"   \"mem\")])\n+\n+(define_insn_and_split \"*zero_extendqisi2_31\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+        (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n+  \"!TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (const_int 0))\n+   (set (strict_low_part (match_dup 2)) (match_dup 1))]\n+  \"operands[2] = gen_lowpart (QImode, operands[0]);\"\n+  [(set_attr \"type\" \"o2\")\n+   (set_attr \"atype\" \"mem\")])\n  \n ;\n ; zero_extendqihi2 instruction pattern(s).\n@@ -2295,13 +2332,25 @@\n \n (define_insn \"*zero_extendqihi2_64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))\n-   (clobber (reg:CC 33))]\n+        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_64BIT\"\n   \"llgc\\\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXE\")\n    (set_attr \"atype\"   \"mem\")])\n \n+(define_insn_and_split \"*zero_extendqihi2_31\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=&d\")\n+        (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n+  \"!TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (const_int 0))\n+   (set (strict_low_part (match_dup 2)) (match_dup 1))]\n+  \"operands[2] = gen_lowpart (QImode, operands[0]);\"\n+  [(set_attr \"type\" \"o2\")\n+   (set_attr \"atype\" \"mem\")])\n+\n+\n ;\n ; fixuns_truncdfdi2 and fix_truncdfsi2 instruction pattern(s).\n ;"}]}