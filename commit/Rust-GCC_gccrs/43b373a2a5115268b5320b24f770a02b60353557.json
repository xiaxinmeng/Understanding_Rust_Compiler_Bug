{"sha": "43b373a2a5115268b5320b24f770a02b60353557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiMzczYTJhNTExNTI2OGI1MzIwYjI0Zjc3MGEwMmI2MDM1MzU1Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-14T14:31:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-14T14:31:32Z"}, "message": "local-alloc.c (rest_of_handle_local_alloc): Use VEC instead of VARRAY.\n\n\t* local-alloc.c (rest_of_handle_local_alloc): Use VEC instead\n\tof VARRAY.\n\t* reload1.c (reg_equiv_memory_loc_varray): Rename to\n\treg_equiv_memory_loc_vec.  Change the type to VEC(rtx,gc) *.\n\t(init_reload, reload): Use VEC instead of VARRAY.\n\t* reload.h: Update the prototype for\n\treg_equiv_memory_loc_varray.\n\nFrom-SVN: r112955", "tree": {"sha": "9b7e85735089c4ca6a211da08638cf2f0a7f0793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b7e85735089c4ca6a211da08638cf2f0a7f0793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b373a2a5115268b5320b24f770a02b60353557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b373a2a5115268b5320b24f770a02b60353557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b373a2a5115268b5320b24f770a02b60353557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b373a2a5115268b5320b24f770a02b60353557/comments", "author": null, "committer": null, "parents": [{"sha": "68ba34f361d5287404bde9283b9df315f4a2c147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ba34f361d5287404bde9283b9df315f4a2c147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ba34f361d5287404bde9283b9df315f4a2c147"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "c9cfac42f7a1fb3649239a4d3a2c8b923862d66a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b373a2a5115268b5320b24f770a02b60353557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b373a2a5115268b5320b24f770a02b60353557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43b373a2a5115268b5320b24f770a02b60353557", "patch": "@@ -1,3 +1,13 @@\n+2006-04-14  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* local-alloc.c (rest_of_handle_local_alloc): Use VEC instead\n+\tof VARRAY.\n+\t* reload1.c (reg_equiv_memory_loc_varray): Rename to\n+\treg_equiv_memory_loc_vec.  Change the type to VEC(rtx,gc) *.\n+\t(init_reload, reload): Use VEC instead of VARRAY.\n+\t* reload.h: Update the prototype for\n+\treg_equiv_memory_loc_varray.\n+\n 2006-04-14  Alexey Starovoytov  <alexey.starovoytov@sun.com>\n             Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "c103400b8eaf9093b6aadf9d0ece4488edf2108f", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=43b373a2a5115268b5320b24f770a02b60353557", "patch": "@@ -2537,8 +2537,10 @@ rest_of_handle_local_alloc (void)\n   allocate_reg_info (max_regno, FALSE, TRUE);\n \n   /* And the reg_equiv_memory_loc array.  */\n-  VARRAY_GROW (reg_equiv_memory_loc_varray, max_regno);\n-  reg_equiv_memory_loc = &VARRAY_RTX (reg_equiv_memory_loc_varray, 0);\n+  VEC_safe_grow (rtx, gc, reg_equiv_memory_loc_vec, max_regno);\n+  memset (VEC_address (rtx, reg_equiv_memory_loc_vec), 0,\n+\t  sizeof (rtx) * max_regno);\n+  reg_equiv_memory_loc = VEC_address (rtx, reg_equiv_memory_loc_vec);\n \n   allocate_initial_values (reg_equiv_memory_loc);\n "}, {"sha": "fbb315ef0feb4f7844b63585e5ee6b28df879853", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=43b373a2a5115268b5320b24f770a02b60353557", "patch": "@@ -155,7 +155,7 @@ extern struct reload rld[MAX_RELOADS];\n extern int n_reloads;\n #endif\n \n-extern GTY (()) struct varray_head_tag *reg_equiv_memory_loc_varray;\n+extern GTY (()) VEC(rtx,gc) *reg_equiv_memory_loc_vec;\n extern rtx *reg_equiv_constant;\n extern rtx *reg_equiv_invariant;\n extern rtx *reg_equiv_memory_loc;"}, {"sha": "d791da6ff32e21f887501a504c8f2fc4105ef5e7", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b373a2a5115268b5320b24f770a02b60353557/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=43b373a2a5115268b5320b24f770a02b60353557", "patch": "@@ -112,7 +112,7 @@ rtx *reg_equiv_memory_loc;\n \n /* We allocate reg_equiv_memory_loc inside a varray so that the garbage\n    collector can keep track of what is inside.  */\n-varray_type reg_equiv_memory_loc_varray;\n+VEC(rtx,gc) *reg_equiv_memory_loc_vec;\n \n /* Element N is the address of stack slot to which pseudo reg N is equivalent.\n    This is used when the address is not valid as a memory address\n@@ -496,7 +496,6 @@ init_reload (void)\n \n   INIT_REG_SET (&spilled_pseudos);\n   INIT_REG_SET (&pseudos_counted);\n-  VARRAY_RTX_INIT (reg_equiv_memory_loc_varray, 0, \"reg_equiv_memory_loc\");\n }\n \n /* List of insn chains that are currently unused.  */\n@@ -1251,7 +1250,7 @@ reload (rtx first, int global)\n     free (reg_equiv_invariant);\n   reg_equiv_constant = 0;\n   reg_equiv_invariant = 0;\n-  VARRAY_GROW (reg_equiv_memory_loc_varray, 0);\n+  VEC_free (rtx, gc, reg_equiv_memory_loc_vec);\n   reg_equiv_memory_loc = 0;\n \n   if (offsets_known_at)"}]}