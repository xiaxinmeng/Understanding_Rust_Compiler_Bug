{"sha": "5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlNmNiNTliM2U1YWI3YjY5NTM0ODQxYmU0MmYyZDZlOWZiMTM0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-13T21:18:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-13T21:18:33Z"}, "message": "i386.opt (mcx16, msahf): New options.\n\n        * config/i386/i386.opt (mcx16, msahf): New options.\n        * config/i386/i386.c (x86_cmpxchg16b, x86_sahf): Remove.\n        (ix86_tune_features) [X86_TUNE_USE_SAHF]: Enable for m_GENERIC.\n\n        * config/i386/driver-i386.c (bit_LAHF_LM): New define.\n        (host_detect_local_cpu): Detect cx16 and lahf_lm cpuid bits.\n        Output -mcx16 and -msahf options when corresponding bit is set.\n\n        * doc/invoke.texi (i386 and x86-64 Options): Document -mcx16\n        and -msahf options.\n\ntestsuite/ChangeLog\n\n        * testsuite/gcc.target/i386/cmpxchg16b-1.c: New test.\n\nFrom-SVN: r122884", "tree": {"sha": "6b2026da7067b0c4a55a08b49268a5b8ff8b866f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2026da7067b0c4a55a08b49268a5b8ff8b866f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d265b0b1c24d13c3dfdf830877fa8edf87e8c15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d265b0b1c24d13c3dfdf830877fa8edf87e8c15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d265b0b1c24d13c3dfdf830877fa8edf87e8c15d"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "510f1bcb1e2e8225d68bfda2f4bb90434a464fdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -1,3 +1,16 @@\n+2007-03-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.opt (mcx16, msahf): New options.\n+\t* config/i386/i386.c (x86_cmpxchg16b, x86_sahf): Remove.\n+\t(ix86_tune_features) [X86_TUNE_USE_SAHF]: Enable for m_GENERIC.\n+\n+\t* config/i386/driver-i386.c (bit_LAHF_LM): New define.\n+\t(host_detect_local_cpu): Detect cx16 and lahf_lm cpuid bits.\n+\tOutput -mcx16 and -msahf options when corresponding bit is set.\n+\n+\t* doc/invoke.texi (i386 and x86-64 Options): Document -mcx16\n+\tand -msahf options.\n+\n 2007-03-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.ac: Test for assembler tolerance to # 0 \"\"."}, {"sha": "a4155373f1a343d436ebe5d118aa496d66778cc4", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -43,6 +43,7 @@ const char *host_detect_local_cpu (int argc, const char **argv);\n #define bit_SSE4a (1 << 6)\n #define bit_CMPXCHG16B (1 << 13)\n \n+#define bit_LAHF_LM (1 << 0)\n #define bit_3DNOW (1 << 31)\n #define bit_3DNOWP (1 << 30)\n #define bit_LM (1 << 29)\n@@ -188,13 +189,15 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n {\n   const char *cpu = NULL;\n   const char *cache = \"\";\n+  const char *options = \"\";\n   enum processor_type processor = PROCESSOR_I386;\n   unsigned int eax, ebx, ecx, edx;\n   unsigned int max_level;\n   unsigned int vendor;\n   unsigned int ext_level;\n   unsigned char has_mmx = 0, has_3dnow = 0, has_3dnowp = 0, has_sse = 0;\n   unsigned char has_sse2 = 0, has_sse3 = 0, has_ssse3 = 0, has_cmov = 0;\n+  unsigned char has_cmpxchg16b = 0, has_lahf_lm = 0;\n   unsigned char has_longmode = 0, has_cmpxchg8b = 0, has_sse4a = 0;\n   unsigned char is_amd = 0;\n   unsigned int family = 0;\n@@ -236,6 +239,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   has_sse2 = !!(edx & bit_SSE2);\n   has_sse3 = !!(ecx & bit_SSE3);\n   has_ssse3 = !!(ecx & bit_SSSE3);\n+  has_cmpxchg16b = !!(ecx & bit_CMPXCHG16B);\n   /* We don't care for extended family.  */\n   family = (eax >> 8) & ~(1 << 4);\n \n@@ -244,6 +248,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   if (ext_level >= 0x80000000)\n     {\n       cpuid (0x80000001, eax, ebx, ecx, edx);\n+      has_lahf_lm = !!(ecx & bit_LAHF_LM);\n       has_3dnow = !!(edx & bit_3DNOW);\n       has_3dnowp = !!(edx & bit_3DNOWP);\n       has_longmode = !!(edx & bit_LM);\n@@ -416,8 +421,16 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       break;\n     }\n \n+  if (arch)\n+    {\n+      if (has_cmpxchg16b)\n+\toptions = concat (options, \"-mcx16 \", NULL);\n+      if (has_lahf_lm)\n+\toptions = concat (options, \"-msahf \", NULL);\n+    }\n+\n done:\n-  return concat (cache, \"-m\", argv[0], \"=\", cpu, NULL);\n+  return concat (cache, \"-m\", argv[0], \"=\", cpu, \" \", options, NULL);\n }\n #else\n /* If we aren't compiling with GCC we just provide a minimal"}, {"sha": "ca5b48a22f2b31be4e4c9f1d8a59b49c335977c2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -1040,7 +1040,7 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   \n   /* X86_TUNE_USE_SAHF */\n   m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_PENT4\n-  | m_NOCONA | m_CORE2 | m_GENERIC32,\n+  | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n      partial dependencies.  */\n@@ -1438,14 +1438,6 @@ enum processor_type ix86_arch;\n /* true if sse prefetch instruction is not NOOP.  */\n int x86_prefetch_sse;\n \n-/* true if cmpxchg16b is supported.  */\n-int x86_cmpxchg16b;\n-\n-/* true if sahf is supported. Early Intel CPUs with Intel 64\n-   lacked LAHF and SAHF instructions supported by AMD64 until\n-   introduction of Pentium 4 G1 step in December 2005.  */\n-int x86_sahf;\n-\n /* ix86_regparm_string as a number */\n static int ix86_regparm;\n "}, {"sha": "6605775d95d307a9d4a3a0410340a91147f15cab", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -322,17 +322,14 @@ extern unsigned int ix86_arch_features[X86_ARCH_LAST];\n #define TARGET_XADD\t\tix86_arch_features[X86_ARCH_XADD]\n #define TARGET_BSWAP\t\tix86_arch_features[X86_ARCH_BSWAP]\n \n+#define TARGET_CMPXCHG16B\tx86_cmpxchg16b\n+#define TARGET_SAHF\t\tx86_sahf\n+\n #define TARGET_FISTTP\t\t(TARGET_SSE3 && TARGET_80387)\n \n extern int x86_prefetch_sse;\n #define TARGET_PREFETCH_SSE\tx86_prefetch_sse\n \n-extern int x86_cmpxchg16b;\n-#define TARGET_CMPXCHG16B\tx86_cmpxchg16b\n-\n-extern int x86_sahf;\n-#define TARGET_SAHF\t\tx86_sahf\n-\n #define ASSEMBLER_DIALECT\t(ix86_asm_dialect)\n \n #define TARGET_SSE_MATH\t\t((ix86_fpmath & FPMATH_SSE) != 0)"}, {"sha": "d8955ae3a930d7a43821a40354a5a3e6d9fe18a0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -221,6 +221,14 @@ which include popcnt and lzcnt instructions, for popcount and clz built-ins\n namely __builtin_popcount, __builtin_popcountl, __builtin_popcountll and\n __builtin_clz, __builtin_clzl, __builtin_clzll\n \n+mcx16\n+Target Report RejectNegative Var(x86_cmpxchg16b)\n+Support code generation of cmpxchg16b instruction.\n+\n+msahf\n+Target Report RejectNegative Var(x86_sahf)\n+Support code generation of sahf instruction in 64bit x86-64 code\n+\n msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode"}, {"sha": "d5a5da581041c5d7a92c6fa45fc6713bc7d23222", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -543,7 +543,7 @@ Objective-C and Objective-C++ Dialects}.\n -masm=@var{dialect}  -mno-fancy-math-387 @gol\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n--mpreferred-stack-boundary=@var{num} @gol\n+-mpreferred-stack-boundary=@var{num} -mcx16 -msahf @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4a -m3dnow -mpopcnt -mabm @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -10081,6 +10081,22 @@ supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n \n+@item -mcx16\n+@opindex -mcx16\n+This option will enable GCC to use CMPXCHG16B instruction in generated code.\n+CMPXCHG16B allows for atomic operations on 128-bit double quadword (or oword)\n+data types.  This is useful for high resolution counters that could be updated\n+by multiple processors (or cores).  This instruction is generated as part of\n+atomic built-in functions: see @ref{Atomic Builtins} for details.\n+\n+@item -msahf\n+@opindex -msahf\n+This option will enable GCC to use SAHF instruction in generated code.  Early\n+Intel CPUs with Intel 64 lacked LAHF and SAHF instructions supported by AMD64\n+until introduction of Pentium 4 G1 step in December 2005.  LAHF and SAHF are\n+load and store instructions, respectively, for certain status flags.  These\n+instructions are used for virtualization and floating-point condition handling.\n+\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "3c03cb8742ba45710f8727d9fdeba55ec80e65a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -1,3 +1,7 @@\n+2007-03-13  Uros Bizjak  <ubizjak@gmail.com>\n+\t\n+\t* testsuite/gcc.target/i386/cmpxchg16b-1.c: New test.\n+\n 2007-03-12  Seongbae Park <seongbae.park@gmail.com>\n \n \t* gcc.dg/c90-vla-1.c: Reflect the change of the error message."}, {"sha": "5999544aa32a7c868bd3830a5bf9ad8e95da5930", "filename": "gcc/testsuite/gcc.target/i386/cmpxchg16b-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpxchg16b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6cb59b3e5ab7b69534841be42f2d6e9fb1340/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpxchg16b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpxchg16b-1.c?ref=5be6cb59b3e5ab7b69534841be42f2d6e9fb1340", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-O2 -mcx16\" } */\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+\n+TItype m_128;\n+\n+void test(TItype x_128)\n+{\n+  m_128 = __sync_val_compare_and_swap (&m_128, x_128, m_128);\n+}\n+\n+/* { dg-final { scan-assembler \"cmpxchg16b\" } } */"}]}