{"sha": "8318b0d99afacde466752a417e0f6c544b15b644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxOGIwZDk5YWZhY2RlNDY2NzUyYTQxN2UwZjZjNTQ0YjE1YjY0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-30T21:39:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-30T21:39:57Z"}, "message": "tree-ssa-loop-ivopts.c: Include target.h.\n\n        * tree-ssa-loop-ivopts.c: Include target.h.\n        (produce_memory_decl_rtl): Pass the rtx through encode_section_info.\n        (get_address_cost): Force SYMBOL_FLAG_LOCAL set.\n        (force_expr_to_var_cost): Use produce_memory_decl_rtl.\n        * Makefile.in (tree-ssa-loop-ivopts.o): Depend on TARGET_H.\n\nFrom-SVN: r123371", "tree": {"sha": "f2f50acc9af5e4da6dd296b8fd1f7ecdfbc9d1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f50acc9af5e4da6dd296b8fd1f7ecdfbc9d1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8318b0d99afacde466752a417e0f6c544b15b644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8318b0d99afacde466752a417e0f6c544b15b644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8318b0d99afacde466752a417e0f6c544b15b644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8318b0d99afacde466752a417e0f6c544b15b644/comments", "author": null, "committer": null, "parents": [{"sha": "121de39fc0ebadfbf9ef9f1721aa3cac42ac92e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121de39fc0ebadfbf9ef9f1721aa3cac42ac92e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121de39fc0ebadfbf9ef9f1721aa3cac42ac92e1"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "2b97b215cdfdd3623410a1d8c55868493dc2c090", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8318b0d99afacde466752a417e0f6c544b15b644/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8318b0d99afacde466752a417e0f6c544b15b644/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8318b0d99afacde466752a417e0f6c544b15b644", "patch": "@@ -2136,7 +2136,7 @@ tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h $(GGC_H) $(RECOG_H) insn-config.h $(HASHTAB_H) $(SCEV_H) \\\n    $(CFGLOOP_H) $(PARAMS_H) langhooks.h $(BASIC_BLOCK_H) hard-reg-set.h \\\n-   tree-chrec.h $(VARRAY_H) tree-affine.h pointer-set.h\n+   tree-chrec.h $(VARRAY_H) tree-affine.h pointer-set.h $(TARGET_H)\n tree-affine.o : tree-affine.c tree-affine.h $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H)"}, {"sha": "6e952af1cd4067f54298fa0b244c365b4f545a62", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8318b0d99afacde466752a417e0f6c544b15b644/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8318b0d99afacde466752a417e0f6c544b15b644/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=8318b0d99afacde466752a417e0f6c544b15b644", "patch": "@@ -91,6 +91,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"params.h\"\n #include \"langhooks.h\"\n #include \"tree-affine.h\"\n+#include \"target.h\"\n \n /* The infinite cost.  */\n #define INFTY 10000000\n@@ -2380,11 +2381,17 @@ produce_memory_decl_rtl (tree obj, int *regno)\n     {\n       const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (obj));\n       x = gen_rtx_SYMBOL_REF (Pmode, name);\n+      SET_SYMBOL_REF_DECL (x, obj);\n+      x = gen_rtx_MEM (DECL_MODE (obj), x);\n+      targetm.encode_section_info (obj, x, true);\n     }\n   else\n-    x = gen_raw_REG (Pmode, (*regno)++);\n+    {\n+      x = gen_raw_REG (Pmode, (*regno)++);\n+      x = gen_rtx_MEM (DECL_MODE (obj), x);\n+    }\n \n-  return gen_rtx_MEM (DECL_MODE (obj), x);\n+  return x;\n }\n \n /* Prepares decl_rtl for variables referred in *EXPR_P.  Callback for\n@@ -2943,6 +2950,12 @@ get_address_cost (bool symbol_present, bool var_present,\n \t  if (sym_p)\n \t    {\n \t      base = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (\"\"));\n+\t      /* ??? We can run into trouble with some backends by presenting\n+\t\t it with symbols which havn't been properly passed through\n+\t\t targetm.encode_section_info.  By setting the local bit, we\n+\t\t enhance the probability of things working.  */\n+\t      SYMBOL_REF_FLAGS (base) = SYMBOL_FLAG_LOCAL;\n+\n \t      if (off_p)\n \t\tbase = gen_rtx_fmt_e (CONST, Pmode,\n \t\t\t\t      gen_rtx_fmt_ee (PLUS, Pmode,\n@@ -3070,17 +3083,18 @@ force_expr_to_var_cost (tree expr)\n \n   if (!costs_initialized)\n     {\n-      tree var = create_tmp_var_raw (integer_type_node, \"test_var\");\n-      rtx x = gen_rtx_MEM (DECL_MODE (var),\n-\t\t\t   gen_rtx_SYMBOL_REF (Pmode, \"test_var\"));\n-      tree addr;\n       tree type = build_pointer_type (integer_type_node);\n+      tree var, addr;\n+      rtx x;\n+\n+      var = create_tmp_var_raw (integer_type_node, \"test_var\");\n+      TREE_STATIC (var) = 1;\n+      x = produce_memory_decl_rtl (var, NULL);\n+      SET_DECL_RTL (var, x);\n \n       integer_cost = computation_cost (build_int_cst (integer_type_node,\n \t\t\t\t\t\t      2000));\n \n-      SET_DECL_RTL (var, x);\n-      TREE_STATIC (var) = 1;\n       addr = build1 (ADDR_EXPR, type, var);\n       symbol_cost = computation_cost (addr) + 1;\n "}]}