{"sha": "f301014645f6ec88d2c543fba1e26a2f2418c40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwMTAxNDY0NWY2ZWM4OGQyYzU0M2ZiYTFlMjZhMmYyNDE4YzQwYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-09T21:06:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-09T21:06:03Z"}, "message": "cp-tree.h (make_rtl_for_local_static): New function.\n\n\t* cp-tree.h (make_rtl_for_local_static): New function.\n\t* decl.c (make_rtl_for_nonlocal_decl): Move code to create RTL for\n\tlocal statics ...\n\t(make_rtl_for_local_static): Here.\n\t* semantics.c (expand_stmt): Use make_rtl_for_local_static.\n\nFrom-SVN: r29879", "tree": {"sha": "8aa5a888de758612c31c5b837bb35ab0f091e001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa5a888de758612c31c5b837bb35ab0f091e001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f301014645f6ec88d2c543fba1e26a2f2418c40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f301014645f6ec88d2c543fba1e26a2f2418c40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f301014645f6ec88d2c543fba1e26a2f2418c40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f301014645f6ec88d2c543fba1e26a2f2418c40a/comments", "author": null, "committer": null, "parents": [{"sha": "ab61414260712684d8f75c8550933f24e0d1df22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab61414260712684d8f75c8550933f24e0d1df22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab61414260712684d8f75c8550933f24e0d1df22"}], "stats": {"total": 100, "additions": 68, "deletions": 32}, "files": [{"sha": "a4ab8c59f17e2341cf79dfe1cdcf181346bf2eb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f301014645f6ec88d2c543fba1e26a2f2418c40a", "patch": "@@ -1,3 +1,11 @@\n+1999-10-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (make_rtl_for_local_static): New function.  \n+\t* decl.c (make_rtl_for_nonlocal_decl): Move code to create RTL for\n+\tlocal statics ...\n+\t(make_rtl_for_local_static): Here.\n+\t* semantics.c (expand_stmt): Use make_rtl_for_local_static.\n+\t\n 1999-10-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* method.c: Include tm_p.h."}, {"sha": "ea8e495f1ae04355819b61eb469a2f1ee90127a9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f301014645f6ec88d2c543fba1e26a2f2418c40a", "patch": "@@ -3470,6 +3470,7 @@ extern tree create_implicit_typedef             PROTO((tree, tree));\n extern tree maybe_push_decl                     PROTO((tree));\n extern void emit_local_var                      PROTO((tree));\n extern tree build_target_expr                   PROTO((tree, tree));\n+extern void make_rtl_for_local_static           PROTO((tree));\n \n /* in decl2.c */\n extern void init_decl2\t\t\t\tPROTO((void));"}, {"sha": "1554abc6df47a32ba086802439ef2c78dd8e743c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f301014645f6ec88d2c543fba1e26a2f2418c40a", "patch": "@@ -7378,23 +7378,7 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n     {\n       DECL_INITIAL (decl) = save_expr (DECL_INITIAL (decl));\n \n-      if (! toplev\n-\t  && TREE_STATIC (decl)\n-\t  && ! TREE_SIDE_EFFECTS (decl)\n-\t  && ! TREE_PUBLIC (decl)\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && ! TYPE_NEEDS_DESTRUCTOR (type)\n-\t  && DECL_MODE (decl) != BLKmode)\n-\t{\n-\t  /* If this variable is really a constant, then fill its DECL_RTL\n-\t     slot with something which won't take up storage.\n-\t     If something later should take its address, we can always give\n-\t     it legitimate RTL at that time.  */\n-\t  DECL_RTL (decl) = gen_reg_rtx (DECL_MODE (decl));\n-\t  store_expr (DECL_INITIAL (decl), DECL_RTL (decl), 0);\n-\t  TREE_ASM_WRITTEN (decl) = 1;\n-\t}\n-      else if (toplev && ! TREE_PUBLIC (decl))\n+      if (toplev && ! TREE_PUBLIC (decl))\n \t{\n \t  /* If this is a static const, change its apparent linkage\n \t     if it belongs to a #pragma interface.  */\n@@ -7432,6 +7416,47 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n }\n \n+/* Create RTL for the local static variable DECL.  */\n+\n+void\n+make_rtl_for_local_static (decl)\n+     tree decl;\n+{\n+  tree type = TREE_TYPE (decl);\n+  const char *asmspec = NULL;\n+\n+  if (TREE_READONLY (decl)\n+      && DECL_INITIAL (decl) != NULL_TREE\n+      && DECL_INITIAL (decl) != error_mark_node\n+      && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl))\n+      && ! TREE_SIDE_EFFECTS (decl)\n+      && ! TREE_PUBLIC (decl)\n+      && ! DECL_EXTERNAL (decl)\n+      && ! TYPE_NEEDS_DESTRUCTOR (type)\n+      && DECL_MODE (decl) != BLKmode)\n+    {\n+      /* As an optimization, we try to put register-sized static\n+\t constants in a register, rather than writing them out.  If we\n+\t take the address of the constant later, we'll make RTL for it\n+\t at that point.  */\n+      DECL_RTL (decl) = gen_reg_rtx (DECL_MODE (decl));\n+      store_expr (DECL_INITIAL (decl), DECL_RTL (decl), 0);\n+      TREE_ASM_WRITTEN (decl) = 1;\n+      return;\n+    }\n+\n+  if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+    {\n+      /* The only way this situaton can occur is if the\n+\t user specified a name for this DECL using the\n+\t `attribute' syntax.  */\n+      asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+      DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n+    }\n+\n+  rest_of_decl_compilation (decl, asmspec, /*top_level=*/0, /*at_end=*/0);\n+}\n+\n /* The old ARM scoping rules injected variables declared in the\n    initialization statement of a for-statement into the surrounding\n    scope.  We support this usage, in order to be backward-compatible."}, {"sha": "4c91e168232133610691d1f47cecb7f95dbb8181", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f301014645f6ec88d2c543fba1e26a2f2418c40a", "patch": "@@ -2301,21 +2301,7 @@ expand_stmt (t)\n \t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n \t      }\n \t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-\t      {\n-\t\tconst char *asmspec = NULL;\n-\n-\t\tif (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n-\t\t  {\n-\t\t    /* The only way this situaton can occur is if the\n-\t\t       user specified a name for this DECL using the\n-\t\t       `attribute' syntax.  */\n-\t\t    asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-\t\t    DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n-\t\t  }\n-\n-\t\trest_of_decl_compilation (decl, asmspec, \n-\t\t\t\t\t  /*top_level=*/0, /*at_end=*/0);\n-\t      }\n+\t      make_rtl_for_local_static (decl);\n \n \t    resume_momentary (i);\n \t  }"}, {"sha": "212191c5447cee2cac3f46bb7ccae7e858dc1e0c", "filename": "gcc/testsuite/g++.old-deja/g++.other/static10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f301014645f6ec88d2c543fba1e26a2f2418c40a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic10.C?ref=f301014645f6ec88d2c543fba1e26a2f2418c40a", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+// Origin: Ulrich Drepper <drepper@cygnus.com>\n+\n+struct st\n+{\n+  int a;\n+};\n+\n+int\n+foo (int a)\n+{\n+  static const st i = { 0 };\n+\n+  if (i.a == a)\n+    return 0;\n+}"}]}