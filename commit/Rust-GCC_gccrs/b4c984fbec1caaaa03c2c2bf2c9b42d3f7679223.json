{"sha": "b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjOTg0ZmJlYzFjYWFhYTAzYzJjMmJmMmM5YjQyZDNmNzY3OTIyMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-12-21T02:36:37Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-12-21T02:36:37Z"}, "message": "builtin-attrs.def (__builtin_printf_unlocked, [...]): Mark with the __printf__ attribute.\n\n\t* builtin-attrs.def (__builtin_printf_unlocked,\n\t__builtin_fprintf_unlocked, printf_unlocked, fprintf_unlocked):\n\tMark with the __printf__ attribute.\n\n\t* builtins.c (expand_builtin_fputs): Add an `unlocked' parameter\n\tand set the replacement function depending on it.\n\t(expand_builtin): Skip BUILT_IN_*_UNLOCKED when not optimizing.\n\tHandle BUILT_IN_*_UNLOCKED when optimizing.\n\n\t* builtins.def (DEF_EXT_FALLBACK_BUILTIN,\n\tDEF_EXT_FRONT_END_LIB_BUILTIN): New macros.\n\tDeclare the \"unlocked\" stdio functions.\n\n\t* c-common.c (c_expand_builtin_printf, c_expand_builtin_fprintf):\n\tAdd an `unlocked' parameter and set the replacement function\n\tdepending on it.\n\t(c_expand_builtin): Handle BUILT_IN_PRINTF_UNLOCKED and\n\tBUILT_IN_FPRINTF_UNLOCKED.\n\n\t* doc/extend.texi (printf_unlocked, fprintf_unlocked,\n\tfputs_unlocked): Document.\n\ntestsuite:\n\t* gcc.dg/format/builtin-1.c: Test unlocked stdio.\n\t* gcc.dg/format/c90-printf-3.c: Likewise.\n\t* gcc.dg/format/c99-printf-3.c: Likewise.\n\t* gcc.dg/format/ext-1.c: Likewise.\n\t* gcc.dg/format/ext-6.c: Likewise.\n\t* gcc.dg/format/format.h: Prototype unlocked stdio.\n\nFrom-SVN: r48229", "tree": {"sha": "840ebfbffcd09b2abfcb6059dc21b1f965cc1ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840ebfbffcd09b2abfcb6059dc21b1f965cc1ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/comments", "author": null, "committer": null, "parents": [{"sha": "bfa8af3e37f63413295d14f15eae6dda770d4a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa8af3e37f63413295d14f15eae6dda770d4a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa8af3e37f63413295d14f15eae6dda770d4a02"}], "stats": {"total": 191, "additions": 173, "deletions": 18}, "files": [{"sha": "33602270c7ec34278d38648e992038a988790d82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -1,3 +1,27 @@\n+2001-12-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-attrs.def (__builtin_printf_unlocked,\n+\t__builtin_fprintf_unlocked, printf_unlocked, fprintf_unlocked):\n+\tMark with the __printf__ attribute.\n+\t\n+\t* builtins.c (expand_builtin_fputs): Add an `unlocked' parameter\n+\tand set the replacement function depending on it.\n+\t(expand_builtin): Skip BUILT_IN_*_UNLOCKED when not optimizing.\n+\tHandle BUILT_IN_*_UNLOCKED when optimizing.\n+\t\n+\t* builtins.def (DEF_EXT_FALLBACK_BUILTIN,\n+\tDEF_EXT_FRONT_END_LIB_BUILTIN): New macros.\n+\tDeclare the \"unlocked\" stdio functions.\n+\t\n+\t* c-common.c (c_expand_builtin_printf, c_expand_builtin_fprintf):\n+\tAdd an `unlocked' parameter and set the replacement function\n+\tdepending on it.\n+\t(c_expand_builtin): Handle BUILT_IN_PRINTF_UNLOCKED and\n+\tBUILT_IN_FPRINTF_UNLOCKED.\n+\n+\t* doc/extend.texi (printf_unlocked, fprintf_unlocked,\n+\tfputs_unlocked): Document.\n+\n 2001-12-20  Josef Zlomek  <zlomek@matfyz.cz>\n \n \t* cfgloop.c (flow_loops_find): Use the information of the depth"}, {"sha": "10b370893e2e89e9f835487a58f803dfc08e2099", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -125,6 +125,8 @@ DEF_ATTR_TREE_LIST (ATTR_FORMAT_ARG_2, ATTR_FORMAT_ARG, ATTR_LIST_2, ATTR_NULL)\n    -ffreestanding.  */\n DEF_FN_ATTR_IDENT (__builtin_printf, ATTR_FORMAT_PRINTF_1_2, true)\n DEF_FN_ATTR_IDENT (__builtin_fprintf, ATTR_FORMAT_PRINTF_2_3, true)\n+DEF_FN_ATTR_IDENT (__builtin_printf_unlocked, ATTR_FORMAT_PRINTF_1_2, true)\n+DEF_FN_ATTR_IDENT (__builtin_fprintf_unlocked, ATTR_FORMAT_PRINTF_2_3, true)\n \n /* Functions from ISO/IEC 9899:1990.  */\n #define DEF_C89_ATTR(NAME, ATTRS) DEF_FN_ATTR_IDENT (NAME, ATTRS, flag_hosted)\n@@ -162,5 +164,8 @@ DEF_EXT_ATTR (dgettext, ATTR_FORMAT_ARG_2)\n DEF_EXT_ATTR (dcgettext, ATTR_FORMAT_ARG_2)\n /* X/Open strfmon function.  */\n DEF_EXT_ATTR (strfmon, ATTR_FORMAT_STRFMON_3_4)\n+/* Glibc thread-unsafe stdio functions.  */\n+DEF_EXT_ATTR (printf_unlocked, ATTR_FORMAT_PRINTF_1_2)\n+DEF_EXT_ATTR (fprintf_unlocked, ATTR_FORMAT_PRINTF_2_3)\n #undef DEF_EXT_ATTR\n #undef DEF_FN_ATTR_IDENT"}, {"sha": "1df7a0d0b5a4bfe88f155f8978488755ed587633", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -142,7 +142,7 @@ static rtx expand_builtin_strrchr\tPARAMS ((tree, rtx,\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n-static rtx expand_builtin_fputs\t\tPARAMS ((tree, int));\n+static rtx expand_builtin_fputs\t\tPARAMS ((tree, int, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n static tree fold_builtin_constant_p\tPARAMS ((tree));\n@@ -3287,12 +3287,16 @@ expand_builtin_ffs (arglist, target, subtarget)\n    long, we attempt to transform this call into __builtin_fputc().  */\n \n static rtx\n-expand_builtin_fputs (arglist, ignore)\n+expand_builtin_fputs (arglist, ignore, unlocked)\n      tree arglist;\n      int ignore;\n+     int unlocked;\n {\n-  tree len, fn, fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n-    fn_fwrite = built_in_decls[BUILT_IN_FWRITE];\n+  tree len, fn;\n+  tree fn_fputc = unlocked ? built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n+    : built_in_decls[BUILT_IN_FPUTC];\n+  tree fn_fwrite = unlocked ? built_in_decls[BUILT_IN_FWRITE_UNLOCKED]\n+    : built_in_decls[BUILT_IN_FWRITE];\n \n   /* If the return value is used, or the replacement _DECL isn't\n      initialized, don't do the transformation.  */\n@@ -3581,6 +3585,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       case BUILT_IN_FPUTC:\n       case BUILT_IN_FPUTS:\n       case BUILT_IN_FWRITE:\n+      case BUILT_IN_PUTCHAR_UNLOCKED:\n+      case BUILT_IN_PUTS_UNLOCKED:\n+      case BUILT_IN_PRINTF_UNLOCKED:\n+      case BUILT_IN_FPUTC_UNLOCKED:\n+      case BUILT_IN_FPUTS_UNLOCKED:\n+      case BUILT_IN_FWRITE_UNLOCKED:\n         return expand_call (exp, target, ignore);\n \n       default:\n@@ -3863,9 +3873,18 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_PUTS:\n     case BUILT_IN_FPUTC:\n     case BUILT_IN_FWRITE:\n+    case BUILT_IN_PUTCHAR_UNLOCKED:\n+    case BUILT_IN_PUTS_UNLOCKED:\n+    case BUILT_IN_FPUTC_UNLOCKED:\n+    case BUILT_IN_FWRITE_UNLOCKED:\n       break;\n     case BUILT_IN_FPUTS:\n-      target = expand_builtin_fputs (arglist, ignore);\n+      target = expand_builtin_fputs (arglist, ignore,/*unlocked=*/ 0);\n+      if (target)\n+\treturn target;\n+      break;\n+    case BUILT_IN_FPUTS_UNLOCKED:\n+      target = expand_builtin_fputs (arglist, ignore,/*unlocked=*/ 1);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "7b58bef1ae156e010a54acfbd672333badd45d48", "filename": "gcc/builtins.def", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -70,6 +70,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       false, true, false)\n \n+/* Like DEF_FALLBACK_BUILTIN, except that the function is not one that\n+   is specified by ANSI/ISO C.  So, when we're being fully conformant\n+   we ignore the version of these builtins that does not begin with\n+   __builtin.  */\n+#undef DEF_EXT_FALLBACK_BUILTIN\n+#define DEF_EXT_FALLBACK_BUILTIN(ENUM, NAME, TYPE)\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       false, true, true)\n+\n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n    `__builtin' version, we will create an ordinary version (e.g,\n@@ -111,6 +120,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n \t       true, true, false)\n \n+/* Like DEF_FRONT_END_LIB_BUILTIN, except that the function is not one\n+   that is specified by ANSI/ISO C.  So, when we're being fully\n+   conformant we ignore the version of these builtins that does not\n+   begin with __builtin.  */\n+#undef DEF_EXT_FRONT_END_LIB_BUILTIN\t\t\t\n+#define DEF_EXT_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE)\t        \\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n+\t       true, true, true)\n+\n /* A built-in that is not currently used.  */\n #undef DEF_UNUSED_BUILTIN\t\t\t\t\t\n #define DEF_UNUSED_BUILTIN(X)\t\t\t\t\t\\\n@@ -370,6 +388,37 @@ DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,\n \t\t\t \"__builtin_fprintf\",\n \t\t\t BT_FN_INT_PTR_CONST_STRING_VAR)\n \n+/* Stdio unlocked builtins.  */\n+\n+DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,\n+\t\t\t \"__builtin_putchar_unlocked\",\n+\t\t\t BT_FN_INT_INT)\n+DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTS_UNLOCKED,\n+\t\t\t \"__builtin_puts_unlocked\",\n+\t\t\t BT_FN_INT_CONST_STRING)\n+DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,\n+\t\t\t      \"__builtin_printf_unlocked\",\n+\t\t\t      BT_FN_INT_CONST_STRING_VAR)\n+DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n+\t\t\t \"__builtin_fputc_unlocked\",\n+\t\t\t BT_FN_INT_INT_PTR)\n+/* Declare the __builtin_ style with arguments and the regular style\n+   without them.  We rely on stdio.h to supply the arguments for the\n+   regular style declaration since we had to use void* instead of\n+   FILE* in the __builtin_ prototype supplied here.  */\n+DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,\n+\t     \"__builtin_fputs_unlocked\",\n+\t     BUILT_IN_NORMAL,\n+\t     BT_FN_INT_CONST_STRING_PTR,\n+\t     BT_FN_INT_VAR,\n+\t     true, true, true)\n+DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,\n+\t\t\t \"__builtin_fwrite_unlocked\",\n+\t\t\t BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR)\n+DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF_UNLOCKED,\n+\t\t\t      \"__builtin_fprintf_unlocked\",\n+\t\t\t      BT_FN_INT_PTR_CONST_STRING_VAR)\n+\n   /* ISO C99 floating point unordered comparisons.  */\n DEF_GCC_BUILTIN(BUILT_IN_ISGREATER, \n \t\t\"__builtin_isgreater\","}, {"sha": "d671e3bdf7275270739e7da5958de7aff87add26", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -643,9 +643,9 @@ combine_strings (strings)\n static int is_valid_printf_arglist PARAMS ((tree));\n static rtx c_expand_builtin PARAMS ((tree, rtx, enum machine_mode, enum expand_modifier));\n static rtx c_expand_builtin_printf PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t    enum expand_modifier, int));\n+\t\t\t\t\t    enum expand_modifier, int, int));\n static rtx c_expand_builtin_fprintf PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t     enum expand_modifier, int));\n+\t\t\t\t\t     enum expand_modifier, int, int));\n \f\n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -3589,14 +3589,28 @@ c_expand_builtin (exp, target, tmode, modifier)\n     {\n     case BUILT_IN_PRINTF:\n       target = c_expand_builtin_printf (arglist, target, tmode,\n-\t\t\t\t\tmodifier, ignore);\n+\t\t\t\t\tmodifier, ignore,/*unlocked=*/ 0);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_PRINTF_UNLOCKED:\n+      target = c_expand_builtin_printf (arglist, target, tmode,\n+\t\t\t\t\tmodifier, ignore,/*unlocked=*/ 1);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_FPRINTF:\n       target = c_expand_builtin_fprintf (arglist, target, tmode,\n-\t\t\t\t\t modifier, ignore);\n+\t\t\t\t\t modifier, ignore,/*unlocked=*/ 0);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_FPRINTF_UNLOCKED:\n+      target = c_expand_builtin_fprintf (arglist, target, tmode,\n+\t\t\t\t\t modifier, ignore,/*unlocked=*/ 1);\n       if (target)\n \treturn target;\n       break;\n@@ -3649,15 +3663,18 @@ is_valid_printf_arglist (arglist)\n /* If the arguments passed to printf are suitable for optimizations,\n    we attempt to transform the call.  */\n static rtx\n-c_expand_builtin_printf (arglist, target, tmode, modifier, ignore)\n+c_expand_builtin_printf (arglist, target, tmode, modifier, ignore, unlocked)\n      tree arglist;\n      rtx target;\n      enum machine_mode tmode;\n      enum expand_modifier modifier;\n      int ignore;\n+     int unlocked;\n {\n-  tree fn_putchar = built_in_decls[BUILT_IN_PUTCHAR],\n-    fn_puts = built_in_decls[BUILT_IN_PUTS];\n+  tree fn_putchar = unlocked ?\n+    built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED] : built_in_decls[BUILT_IN_PUTCHAR];\n+  tree fn_puts = unlocked ?\n+    built_in_decls[BUILT_IN_PUTS_UNLOCKED] : built_in_decls[BUILT_IN_PUTS];\n   tree fn, format_arg, stripped_string;\n \n   /* If the return value is used, or the replacement _DECL isn't\n@@ -3750,15 +3767,18 @@ c_expand_builtin_printf (arglist, target, tmode, modifier, ignore)\n /* If the arguments passed to fprintf are suitable for optimizations,\n    we attempt to transform the call.  */\n static rtx\n-c_expand_builtin_fprintf (arglist, target, tmode, modifier, ignore)\n+c_expand_builtin_fprintf (arglist, target, tmode, modifier, ignore, unlocked)\n      tree arglist;\n      rtx target;\n      enum machine_mode tmode;\n      enum expand_modifier modifier;\n      int ignore;\n+     int unlocked;\n {\n-  tree fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n-    fn_fputs = built_in_decls[BUILT_IN_FPUTS];\n+  tree fn_fputc = unlocked ?\n+    built_in_decls[BUILT_IN_FPUTC_UNLOCKED] : built_in_decls[BUILT_IN_FPUTC];\n+  tree fn_fputs = unlocked ?\n+    built_in_decls[BUILT_IN_FPUTS_UNLOCKED] : built_in_decls[BUILT_IN_FPUTS];\n   tree fn, format_arg, stripped_string;\n \n   /* If the return value is used, or the replacement _DECL isn't"}, {"sha": "a224770953b9cfffa916d5ddb0542ae078be7774", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -2047,7 +2047,8 @@ warnings are requested (using @option{-Wformat}), so there is no need to\n modify the header file @file{stdio.h}.  In C99 mode, the functions\n @code{snprintf}, @code{vsnprintf}, @code{vscanf}, @code{vfscanf} and\n @code{vsscanf} are also checked.  Except in strictly conforming C\n-standard modes, the X/Open function @code{strfmon} is also checked.\n+standard modes, the X/Open function @code{strfmon} is also checked as\n+are @code{printf_unlocked} and @code{fprintf_unlocked}.\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n \n @item format_arg (@var{string-index})\n@@ -4259,7 +4260,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex fabsl\n @findex ffs\n @findex fprintf\n+@findex fprintf_unlocked\n @findex fputs\n+@findex fputs_unlocked\n @findex imaxabs\n @findex index\n @findex labs\n@@ -4268,6 +4271,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex memcpy\n @findex memset\n @findex printf\n+@findex printf_unlocked\n @findex rindex\n @findex sin\n @findex sinf\n@@ -4315,8 +4319,9 @@ in.  @code{_exit} is not recognized in strict ISO C mode (@option{-ansi},\n strict C89 mode (@option{-ansi} or @option{-std=c89}).\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n-@code{bzero}, @code{index}, @code{rindex} and @code{ffs} may be handled\n-as built-in functions.  All these functions have corresponding versions\n+@code{bzero}, @code{index}, @code{rindex}, @code{ffs}, @code{fputs_unlocked},\n+@code{printf_unlocked} and @code{fprintf_unlocked} may be handled as\n+built-in functions.  All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode.\n "}, {"sha": "1a1c24d998038aaa6807b981a057de3028c72195", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -1,3 +1,12 @@\n+2001-12-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/builtin-1.c: Test unlocked stdio.\n+\t* gcc.dg/format/c90-printf-3.c: Likewise.\n+\t* gcc.dg/format/c99-printf-3.c: Likewise.\n+\t* gcc.dg/format/ext-1.c: Likewise.\n+\t* gcc.dg/format/ext-6.c: Likewise.\n+\t* gcc.dg/format/format.h: Prototype unlocked stdio.\n+\n 2001-12-20  Richard Henderson  <rth@redhat.com>\n \n \t* g++.old-deja/g++.eh/badalloc1.C (arena_size): New."}, {"sha": "ba1cab6473a7936aa1e8f1b733496690076fe6fc", "filename": "gcc/testsuite/gcc.dg/format/builtin-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -14,4 +14,9 @@ foo (int i)\n   __builtin_fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"__builtin_fprintf\" } */\n   __builtin_printf (\"%d\", i);\n   __builtin_printf (\"%ld\", i); /* { dg-warning \"format\" \"__builtin_printf\" } */\n+\n+  __builtin_fprintf_unlocked (stdout, \"%d\", i);\n+  __builtin_fprintf_unlocked (stdout, \"%ld\", i); /* { dg-warning \"format\" \"__builtin_fprintf_unlocked\" } */\n+  __builtin_printf_unlocked (\"%d\", i);\n+  __builtin_printf_unlocked (\"%ld\", i); /* { dg-warning \"format\" \"__builtin_printf_unlocked\" } */\n }"}, {"sha": "1d53de32f6582b4b56a20d44ac1d2d2863f6d1bb", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -16,6 +16,9 @@ foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,\n   fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n   printf (\"%d\", i);\n   printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  /* The \"unlocked\" functions shouldn't warn in c90 mode.  */\n+  fprintf_unlocked (stdout, \"%ld\", i); /* { dg-bogus \"format\" \"fprintf_unlocked\" } */\n+  printf_unlocked (\"%ld\", i); /* { dg-bogus \"format\" \"printf_unlocked\" } */\n   sprintf (s, \"%d\", i);\n   sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n   vfprintf (stdout, \"%d\", v0);"}, {"sha": "b8ae405b299a25c6ce20ce2cbc0a396135b1482b", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -15,6 +15,9 @@ foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,\n   fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n   printf (\"%d\", i);\n   printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  /* The \"unlocked\" functions shouldn't warn in c99 mode.  */\n+  fprintf_unlocked (stdout, \"%ld\", i); /* { dg-bogus \"format\" \"fprintf_unlocked\" } */\n+  printf_unlocked (\"%ld\", i); /* { dg-bogus \"format\" \"printf_unlocked\" } */\n   sprintf (s, \"%d\", i);\n   sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n   snprintf (s, n, \"%d\", i);"}, {"sha": "e69e756085cf5f438efb354815acbebb98b2f0d8", "filename": "gcc/testsuite/gcc.dg/format/ext-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -116,4 +116,11 @@ foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n   printf (\"%IC\", lc); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%IS\", ls); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%Im\"); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+\n+  /* As an extension, GCC does format checking on \"unlocked\"\n+     i.e. thread unsafe versions of these functions.  */\n+  fprintf_unlocked (stdout, \"%d\", i);\n+  fprintf_unlocked (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf_unlocked\" } */\n+  printf_unlocked (\"%d\", i);\n+  printf_unlocked (\"%ld\", i); /* { dg-warning \"format\" \"printf_unlocked\" } */\n }"}, {"sha": "08d24cbf745963c12144b606e4147c9ba047a577", "filename": "gcc/testsuite/gcc.dg/format/ext-6.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -16,6 +16,10 @@ foo (int i, char *s, size_t n, int *ip, va_list v0, va_list v1, va_list v2,\n   fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n   printf (\"%d\", i);\n   printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  fprintf_unlocked (stdout, \"%d\", i);\n+  fprintf_unlocked (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf_unlocked\" } */\n+  printf_unlocked (\"%d\", i);\n+  printf_unlocked (\"%ld\", i); /* { dg-warning \"format\" \"printf_unlocked\" } */\n   sprintf (s, \"%d\", i);\n   sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n   snprintf (s, n, \"%d\", i);"}, {"sha": "230d1410136935650a8f53bc082b6ca664c46ce2", "filename": "gcc/testsuite/gcc.dg/format/format.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h?ref=b4c984fbec1caaaa03c2c2bf2c9b42d3f7679223", "patch": "@@ -67,6 +67,8 @@ extern FILE *stdout;\n \n extern int fprintf (FILE *restrict, const char *restrict, ...);\n extern int printf (const char *restrict, ...);\n+extern int fprintf_unlocked (FILE *restrict, const char *restrict, ...);\n+extern int printf_unlocked (const char *restrict, ...);\n extern int sprintf (char *restrict, const char *restrict, ...);\n extern int vfprintf (FILE *restrict, const char *restrict, va_list);\n extern int vprintf (const char *restrict, va_list);"}]}