{"sha": "fe807059aaaf1be52e81513df1e25ef476c56b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4MDcwNTlhYWFmMWJlNTJlODE1MTNkZjFlMjVlZjQ3NmM1NmI3ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-04-28T11:38:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-04-28T11:38:21Z"}, "message": "re PR libstdc++/51365 (cannot use final empty class in std::tuple)\n\n\tPR libstdc++/51365\n\t* include/bits/shared_ptr_base (_Sp_ebo_helper): Helper class to\n\timplement EBO safely.\n\t(_Sp_counted_base::_M_get_deleter): Add noexcept.\n\t(_Sp_counter_ptr): Use noexcept instead of comments.\n\t(_Sp_counted_deleter): Likewise. Use _Sp_ebo_helper.\n\t(_Sp_counted_ptr_inplace): Likewise.\n\t* testsuite/20_util/shared_ptr/cons/51365.cc: New.\n\t* testsuite/20_util/shared_ptr/cons/52924.cc: Add rebind member to\n\tcustom allocator and test construction with custom allocator.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r198367", "tree": {"sha": "dde84f495deb32e31bc879ea489238264f8f45c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde84f495deb32e31bc879ea489238264f8f45c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe807059aaaf1be52e81513df1e25ef476c56b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe807059aaaf1be52e81513df1e25ef476c56b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe807059aaaf1be52e81513df1e25ef476c56b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe807059aaaf1be52e81513df1e25ef476c56b7d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35eb492bcfbc6627bb5d800d0af2cfd8bf39203f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35eb492bcfbc6627bb5d800d0af2cfd8bf39203f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35eb492bcfbc6627bb5d800d0af2cfd8bf39203f"}], "stats": {"total": 203, "additions": 156, "deletions": 47}, "files": [{"sha": "bb2bb8672ce05387b518d46abd05534c7729c308", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe807059aaaf1be52e81513df1e25ef476c56b7d", "patch": "@@ -1,3 +1,18 @@\n+2013-04-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51365\n+\t* include/bits/shared_ptr_base (_Sp_ebo_helper): Helper class to\n+\timplement EBO safely.\n+\t(_Sp_counted_base::_M_get_deleter): Add noexcept.\n+\t(_Sp_counter_ptr): Use noexcept instead of comments.\n+\t(_Sp_counted_deleter): Likewise. Use _Sp_ebo_helper.\n+\t(_Sp_counted_ptr_inplace): Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/51365.cc: New.\n+\t* testsuite/20_util/shared_ptr/cons/52924.cc: Add rebind member to\n+\tcustom allocator and test construction with custom allocator.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2013-04-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/unordered_set/insert/move_range.cc: Adjust"}, {"sha": "a0f513f5def3b5ac9b5c992e72c794f561ae1f4d", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 79, "deletions": 42, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=fe807059aaaf1be52e81513df1e25ef476c56b7d", "patch": "@@ -126,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { delete this; }\n       \n       virtual void*\n-      _M_get_deleter(const std::type_info&) = 0;\n+      _M_get_deleter(const std::type_info&) noexcept = 0;\n \n       void\n       _M_add_ref_copy()\n@@ -284,7 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       explicit\n-      _Sp_counted_ptr(_Ptr __p)\n+      _Sp_counted_ptr(_Ptr __p) noexcept\n       : _M_ptr(__p) { }\n \n       virtual void\n@@ -296,14 +296,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { delete this; }\n \n       virtual void*\n-      _M_get_deleter(const std::type_info&)\n-      { return 0; }\n+      _M_get_deleter(const std::type_info&) noexcept\n+      { return nullptr; }\n \n       _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;\n       _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;\n \n-    protected:\n-      _Ptr             _M_ptr;  // copy constructor must not throw\n+    private:\n+      _Ptr             _M_ptr;\n     };\n \n   template<>\n@@ -318,59 +318,91 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }\n \n+  template<int _Nm, typename _Tp,\n+\t   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>\n+    struct _Sp_ebo_helper;\n+\n+  /// Specialization using EBO.\n+  template<int _Nm, typename _Tp>\n+    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp\n+    {\n+      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }\n+\n+      static _Tp&\n+      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }\n+    };\n+\n+  /// Specialization not using EBO.\n+  template<int _Nm, typename _Tp>\n+    struct _Sp_ebo_helper<_Nm, _Tp, false>\n+    {\n+      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }\n+\n+      static _Tp&\n+      _S_get(_Sp_ebo_helper& __eboh)\n+      { return __eboh._M_tp; }\n+\n+    private:\n+      _Tp _M_tp;\n+    };\n+\n   // Support for custom deleter and/or allocator\n   template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>\n     class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>\n     {\n-      // Helper class that stores the Deleter and also acts as an allocator.\n-      // Used to dispose of the owned pointer and the internal refcount\n-      // Requires that copies of _Alloc can free each other's memory.\n-      struct _My_Deleter\n-      : public _Alloc           // copy constructor must not throw\n+      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>\n       {\n-\t_Deleter _M_del;        // copy constructor must not throw\n-\t_My_Deleter(_Deleter __d, const _Alloc& __a)\n-\t: _Alloc(__a), _M_del(__d) { }\n+\ttypedef _Sp_ebo_helper<0, _Deleter>\t_Del_base;\n+\ttypedef _Sp_ebo_helper<1, _Alloc>\t_Alloc_base;\n+\n+      public:\n+\t_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n+\t: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)\n+\t{ }\n+\n+\t_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }\n+\t_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }\n+\n+\t_Ptr _M_ptr;\n       };\n \n     public:\n       // __d(__p) must not throw.\n-      _Sp_counted_deleter(_Ptr __p, _Deleter __d)\n-      : _M_ptr(__p), _M_del(__d, _Alloc()) { }\n+      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept\n+      : _M_impl(__p, __d, _Alloc()) { }\n \n       // __d(__p) must not throw.\n-      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a)\n-      : _M_ptr(__p), _M_del(__d, __a) { }\n+      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n+      : _M_impl(__p, __d, __a) { }\n \n       ~_Sp_counted_deleter() noexcept { }\n \n       virtual void\n       _M_dispose() noexcept\n-      { _M_del._M_del(_M_ptr); }\n+      { _M_impl._M_del()(_M_impl._M_ptr); }\n \n       virtual void\n       _M_destroy() noexcept\n       {\n \ttypedef typename allocator_traits<_Alloc>::template\n \t  rebind_traits<_Sp_counted_deleter> _Alloc_traits;\n-\ttypename _Alloc_traits::allocator_type __a(_M_del);\n+\ttypename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());\n \t_Alloc_traits::destroy(__a, this);\n \t_Alloc_traits::deallocate(__a, this, 1);\n       }\n \n       virtual void*\n-      _M_get_deleter(const std::type_info& __ti)\n+      _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n #ifdef __GXX_RTTI\n-        return __ti == typeid(_Deleter) ? &_M_del._M_del : 0;\n+        return __ti == typeid(_Deleter) ? &_M_impl._M_del() : nullptr;\n #else\n-        return 0;\n+        return nullptr;\n #endif\n       }\n \n-    protected:\n-      _Ptr             _M_ptr;  // copy constructor must not throw\n-      _My_Deleter      _M_del;  // copy constructor must not throw\n+    private:\n+      _Impl _M_impl;\n     };\n \n   // helpers for make_shared / allocate_shared\n@@ -380,41 +412,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n     class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>\n     {\n-      // Helper class that stores the pointer and also acts as an allocator.\n-      // Used to dispose of the owned pointer and the internal refcount\n-      // Requires that copies of _Alloc can free each other's memory.\n-      struct _Impl\n-      : public _Alloc           // copy constructor must not throw\n+      class _Impl : _Sp_ebo_helper<0, _Alloc>\n       {\n-\t_Impl(_Alloc __a) : _Alloc(__a), _M_ptr() { }\n-\t_Tp* _M_ptr;\n+\ttypedef _Sp_ebo_helper<0, _Alloc>\t_A_base;\n+\n+      public:\n+\texplicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }\n+\n+\t_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }\n+\n+\t__gnu_cxx::__aligned_buffer<_Tp> _M_storage;\n       };\n \n     public:\n       template<typename... _Args>\n \t_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)\n-\t: _M_impl(__a), _M_storage()\n+\t: _M_impl(__a)\n \t{\n-\t  _M_impl._M_ptr = _M_storage._M_ptr();\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 2070.  allocate_shared should use allocator_traits<A>::construct\n-\t  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,\n+\t  allocator_traits<_Alloc>::construct(__a, _M_ptr(),\n \t      std::forward<_Args>(__args)...); // might throw\n \t}\n \n       ~_Sp_counted_ptr_inplace() noexcept { }\n \n       virtual void\n       _M_dispose() noexcept\n-      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }\n+      {\n+\tallocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());\n+      }\n \n       // Override because the allocator needs to know the dynamic type\n       virtual void\n       _M_destroy() noexcept\n       {\n \ttypedef typename allocator_traits<_Alloc>::template\n \t  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;\n-\ttypename _Alloc_traits::allocator_type __a(_M_impl);\n+\ttypename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());\n \t_Alloc_traits::destroy(__a, this);\n \t_Alloc_traits::deallocate(__a, this, 1);\n       }\n@@ -424,17 +459,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n #ifdef __GXX_RTTI\n-\treturn __ti == typeid(_Sp_make_shared_tag) ? _M_storage._M_addr() : 0;\n+\treturn __ti == typeid(_Sp_make_shared_tag) ? _M_ptr() : nullptr;\n #else\n-        return 0;\n+        return nullptr;\n #endif\n       }\n \n     private:\n+      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }\n+\n       _Impl _M_impl;\n-      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;\n     };\n \n+\n   template<_Lock_policy _Lp>\n     class __shared_count\n     {\n@@ -592,7 +629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void*\n       _M_get_deleter(const std::type_info& __ti) const noexcept\n-      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : 0; }\n+      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }\n \n       bool\n       _M_less(const __shared_count& __rhs) const noexcept"}, {"sha": "b6d1009d88445ed5ffd87f17b389daebf360ed64", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=fe807059aaaf1be52e81513df1e25ef476c56b7d", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 770 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 807 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "757e7eb5a52d0ad76e58fe0a4636a29f6b753cf7", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/51365.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F51365.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F51365.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F51365.cc?ref=fe807059aaaf1be52e81513df1e25ef476c56b7d", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+// libstdc++/51365\n+// Test with 'final' deleter and allocator.\n+\n+struct A { };\n+\n+struct D final\n+{\n+  void operator()(A*) { }\n+};\n+\n+template<typename T>\n+struct Alloc final : std::allocator<T>\n+{\n+  Alloc() = default;\n+  template<typename U> Alloc(const Alloc<U>&) { }\n+\n+  template<typename U>\n+    struct rebind\n+    { typedef Alloc<U> other; };\n+};\n+\n+A a;\n+D d;\n+\n+Alloc<A> al;\n+\n+auto sd = std::shared_ptr<A>(&a, d);\n+auto sa = std::shared_ptr<A>(&a, d, al);\n+auto as = std::allocate_shared<A>(al);"}, {"sha": "6949c36e91d8c10d88787017b955dff50ca0db87", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/52924.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe807059aaaf1be52e81513df1e25ef476c56b7d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc?ref=fe807059aaaf1be52e81513df1e25ef476c56b7d", "patch": "@@ -22,23 +22,29 @@\n \n // libstdc++/52924\n \n-struct A { } a;\n+struct A { };\n \n struct D {\n   ~D() noexcept(false) { }\n   void operator()(A*) { }\n-} d;\n-\n-auto sp = std::shared_ptr<A>(&a, d);\n+};\n \n template<typename T>\n struct Alloc : std::allocator<T>\n {\n   Alloc() = default;\n   ~Alloc() noexcept(false) { }\n   template<typename U> Alloc(const Alloc<U>&) { }\n+\n+  template<typename U>\n+    struct rebind\n+    { typedef Alloc<U> other; };\n };\n \n+A a;\n+D d;\n Alloc<A> al;\n \n+auto sd = std::shared_ptr<A>(&a, d);\n+auto sa = std::shared_ptr<A>(&a, d, al);\n auto as = std::allocate_shared<A>(al);"}]}