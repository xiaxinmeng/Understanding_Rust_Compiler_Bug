{"sha": "3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "node_id": "C_kwDOANBUbNoAKDNjYWMwNmQ4NGYzMzQ3MDVlZDBiY2UxMmZiYzNhNGNlYzRhOGZkM2I", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-13T21:13:59Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-13T21:13:59Z"}, "message": "lra: Replace subregs in bare uses & clobbers [PR108681]\n\nIn this PR we had a write to one vector of a 4-vector tuple.\nThe vector had mode V1DI, and the target doesn't provide V1DI\nmoves, so this was converted into:\n\n    (clobber (subreg:V1DI (reg/v:V4x1DI 92 [ b ]) 24))\n\nfollowed by a DImode move.  (The clobber isn't really necessary\nor helpful for a single word, but would be for wider moves.)\n\nThe subreg in the clobber survived until after RA:\n\n    (clobber (subreg:V1DI (reg/v:V4x1DI 34 v2 [orig:92 b ] [92]) 24))\n\nIMO this isn't well-formed.  If a subreg of a hard register simplifies\nto a hard register, it should be replaced by the hard register.  If the\nsubreg doesn't simplify, then target-independent code can't be sure\nwhich parts of the register are affected and which aren't.  A clobber\nof such a subreg isn't useful and (again IMO) should just be removed.\nConversely, a use of such a subreg is effectively a use of the whole\ninner register.\n\nLRA has code to simplify subregs of hard registers, but it didn't\nhandle bare uses and clobbers.  The patch extends it to do that.\n\nOne question was whether the final_p argument to alter_subregs\nshould be true or false.  True is IMO dangerous, since it forces\nreplacements that might not be valid from a dataflow perspective,\nand uses and clobbers only exist for dataflow.  As said above,\nI think the correct way of handling a failed simplification would\nbe to delete clobbers and replace uses of subregs with uses of\nthe inner register.  But I didn't want to write untested code\nto do that.\n\nIn the PR, the clobber caused an infinite loop in DCE, because\nof a disagreement about what effect the clobber had.  But for\nthe reasons above, I think that was GIGO rather than a bug in\nDF or DCE.\n\ngcc/\n\tPR rtl-optimization/108681\n\t* lra-spills.cc (lra_final_code_change): Extend subreg replacement\n\tcode to handle bare uses and clobbers.\n\ngcc/testsuite/\n\tPR rtl-optimization/108681\n\t* gcc.target/aarch64/pr108681.c: New test.", "tree": {"sha": "6ccaabfdea739c4e58015ca06dad436957b8518b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ccaabfdea739c4e58015ca06dad436957b8518b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33e3dcbd15e73603796e30b5eeec11a0c8bacec"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "4af85c49d43a05c39f642f40b2b843dfe14e670d", "filename": "gcc/lra-spills.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b/gcc%2Flra-spills.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b/gcc%2Flra-spills.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.cc?ref=3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "patch": "@@ -860,6 +860,9 @@ lra_final_code_change (void)\n \t\tlra_update_dup (id, i);\n \t\tinsn_change_p = true;\n \t      }\n+\t  if ((GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n+\t      && alter_subregs (&XEXP (pat, 0), false))\n+\t    insn_change_p = true;\n \t  if (insn_change_p)\n \t    lra_update_operator_dups (id);\n "}, {"sha": "2391eaac2f2595514095f2b3004a4f6ca294dabf", "filename": "gcc/testsuite/gcc.target/aarch64/pr108681.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108681.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108681.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108681.c?ref=3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O\" } */\n+\n+#pragma GCC aarch64 \"arm_neon.h\"\n+typedef __Int64x1_t int64x1_t;\n+void foo (int64x1x4_t);\n+\n+void\n+bar (int64x1_t a)\n+{\n+  for (;;) {\n+    int64x1x4_t b;\n+    b.val[3] = a;\n+    foo (b);\n+  }\n+}"}]}