{"sha": "6ac0194d21d90e29832fd1c996ba23e6e183d328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjMDE5NGQyMWQ5MGUyOTgzMmZkMWM5OTZiYTIzZTZlMTgzZDMyOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-11-22T23:12:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-11-22T23:12:29Z"}, "message": "re PR c/14050 ([DR289] c99 restrict doesn't work in abs declarator)\n\n\tPR c/14050\n\t* c-decl.c (set_array_declarator_inner): Don't give error for\n\tstatic or type qualifiers in abstract declarator.  Remove\n\tabstract_p parameter.\n\t* c-tree.h (set_array_declarator_inner): Update prototype.\n\t* c-parser.c (c_parser_direct_declarator_inner): Update call to\n\tset_array_declarator_inner.\n\t* doc/standards.texi: Update for C99 TC3.\n\ntestsuite:\n\t* gcc.dg/c99-arraydecl-1.c: Don't expect errors for static or type\n\tqualifiers in abstract declarator.\n\nFrom-SVN: r130362", "tree": {"sha": "f8959fdd1818cd96126e42cc4ebcbcb497abeb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8959fdd1818cd96126e42cc4ebcbcb497abeb58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac0194d21d90e29832fd1c996ba23e6e183d328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac0194d21d90e29832fd1c996ba23e6e183d328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac0194d21d90e29832fd1c996ba23e6e183d328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac0194d21d90e29832fd1c996ba23e6e183d328/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8702365b9124ee1b29f8a25ba23fa0982fa237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8702365b9124ee1b29f8a25ba23fa0982fa237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8702365b9124ee1b29f8a25ba23fa0982fa237"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "e6f36406f0df773c1f9d87948cf86c8cdee503e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -1,3 +1,14 @@\n+2007-11-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/14050\n+\t* c-decl.c (set_array_declarator_inner): Don't give error for\n+\tstatic or type qualifiers in abstract declarator.  Remove\n+\tabstract_p parameter.\n+\t* c-tree.h (set_array_declarator_inner): Update prototype.\n+\t* c-parser.c (c_parser_direct_declarator_inner): Update call to\n+\tset_array_declarator_inner.\n+\t* doc/standards.texi: Update for C99 TC3.\n+\n 2007-11-22  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.c (mmix_encode_section_info): Remove duplicate"}, {"sha": "bcf20e09a37ba983b0336635317e81322df2935f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -3081,20 +3081,13 @@ build_array_declarator (tree expr, struct c_declspecs *quals, bool static_p,\n \n /* Set the contained declarator of an array declarator.  DECL is the\n    declarator, as constructed by build_array_declarator; INNER is what\n-   appears on the left of the [].  ABSTRACT_P is true if it is an\n-   abstract declarator, false otherwise; this is used to reject static\n-   and type qualifiers in abstract declarators, where they are not in\n-   the C99 grammar (subject to possible change in DR#289).  */\n+   appears on the left of the [].  */\n \n struct c_declarator *\n set_array_declarator_inner (struct c_declarator *decl,\n-\t\t\t    struct c_declarator *inner, bool abstract_p)\n+\t\t\t    struct c_declarator *inner)\n {\n   decl->declarator = inner;\n-  if (abstract_p && (decl->u.array.quals != TYPE_UNQUALIFIED\n-\t\t     || decl->u.array.attrs != NULL_TREE\n-\t\t     || decl->u.array.static_p))\n-    error (\"static or type qualifiers in abstract declarator\");\n   return decl;\n }\n "}, {"sha": "529354701a4f2ffc218fb8708747fc8cc890000c", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -2499,7 +2499,7 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \t\t\t\t\t   star_seen);\n       if (declarator == NULL)\n \treturn NULL;\n-      inner = set_array_declarator_inner (declarator, inner, !id_present);\n+      inner = set_array_declarator_inner (declarator, inner);\n       return c_parser_direct_declarator_inner (parser, id_present, inner);\n     }\n   else if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))"}, {"sha": "28f99c6a223f992f0814263ea7cec5043e6d4c3a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -487,8 +487,7 @@ extern void c_push_function_context (struct function *);\n extern void c_pop_function_context (struct function *);\n extern void push_parm_decl (const struct c_parm *);\n extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n-\t\t\t\t\t\t\tstruct c_declarator *,\n-\t\t\t\t\t\t\tbool);\n+\t\t\t\t\t\t\tstruct c_declarator *);\n extern tree c_builtin_function (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);"}, {"sha": "6b5e15bc4768796b32d2b166d24d4a6522d4c681", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -37,6 +37,8 @@ with some exceptions, and possibly with some extensions.\n @cindex Technical Corrigendum 1\n @cindex TC2\n @cindex Technical Corrigendum 2\n+@cindex TC3\n+@cindex Technical Corrigendum 3\n @cindex AMD1\n @cindex freestanding implementation\n @cindex freestanding environment\n@@ -86,9 +88,9 @@ standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in\n development, drafts of this standard version were referred to as\n @dfn{C9X}.)\n \n-Errors in the 1999 ISO C standard were corrected in two Technical\n-Corrigenda published in 2001 and 2004.  GCC does not support the uncorrected\n-version.\n+Errors in the 1999 ISO C standard were corrected in three Technical\n+Corrigenda published in 2001, 2004 and 2007.  GCC does not support the\n+uncorrected version.\n \n By default, GCC provides some extensions to the C language that on\n rare occasions conflict with the C standard.  @xref{C"}, {"sha": "ca92fa8a9b32b23e69fce6f8d789bb8c400f1e8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -1,3 +1,9 @@\n+2007-11-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/14050\n+\t* gcc.dg/c99-arraydecl-1.c: Don't expect errors for static or type\n+\tqualifiers in abstract declarator.\n+\n 2007-11-22  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/derived_constructor_comps_3.f90: New."}, {"sha": "2036d82fbd9e1e3b2daf75e3025fba7326c42703", "filename": "gcc/testsuite/gcc.dg/c99-arraydecl-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac0194d21d90e29832fd1c996ba23e6e183d328/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-1.c?ref=6ac0194d21d90e29832fd1c996ba23e6e183d328", "patch": "@@ -9,8 +9,8 @@\n    [quals static expr].  Not yet: [quals *].  */\n \n void f00 (int a[const]);\n-void f01 (int [const]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"abstract\" \"\\[quals\\] in abstract declarator\" { target *-*-* } 12 } */\n+void f01 (int [const]);\n+\n void\n f02 (int a[const])\n {\n@@ -28,8 +28,8 @@ f03 (a)\n }\n \n void f10 (int a[const 2]);\n-void f11 (int [const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"abstract\" \"\\[quals expr\\] in abstract declarator\" { target *-*-* } 31 } */\n+void f11 (int [const 2]);\n+\n void\n f12 (int a[const 2])\n {\n@@ -47,8 +47,8 @@ f13 (a)\n }\n \n void f20 (int a[static 2]);\n-void f21 (int [static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"abstract\" \"\\[static expr\\] in abstract declarator\" { target *-*-* } 50 } */\n+void f21 (int [static 2]);\n+\n void\n f22 (int a[static 2])\n {\n@@ -64,8 +64,8 @@ f23 (a)\n }\n \n void f30 (int a[static const 2]);\n-void f31 (int [static const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"abstract\" \"\\[static quals expr\\] in abstract declarator\" { target *-*-* } 67 } */\n+void f31 (int [static const 2]);\n+\n void\n f32 (int a[static const 2])\n {\n@@ -83,8 +83,8 @@ f33 (a)\n }\n \n void f40 (int a[const static 2]);\n-void f41 (int [const static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"abstract\" \"\\[quals static expr\\] in abstract declarator\" { target *-*-* } 86 } */\n+void f41 (int [const static 2]);\n+\n void\n f42 (int a[const static 2])\n {"}]}