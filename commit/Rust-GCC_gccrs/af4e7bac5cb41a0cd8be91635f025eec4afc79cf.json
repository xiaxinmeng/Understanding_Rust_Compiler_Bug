{"sha": "af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0ZTdiYWM1Y2I0MWEwY2Q4YmU5MTYzNWYwMjVlZWM0YWZjNzljZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-04-11T16:39:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-04-11T16:39:41Z"}, "message": "Revert previous patch.\n\nFrom-SVN: r52166", "tree": {"sha": "205a8d5ef46cb4a09431aae336cb04669f966cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/205a8d5ef46cb4a09431aae336cb04669f966cc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/comments", "author": null, "committer": null, "parents": [{"sha": "94ed000253a233a9a41c5094d1a932097803cc1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ed000253a233a9a41c5094d1a932097803cc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ed000253a233a9a41c5094d1a932097803cc1a"}], "stats": {"total": 68, "additions": 3, "deletions": 65}, "files": [{"sha": "a2d8b8f394338c1f28e53bdf1575e1ccb11d615b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "patch": "@@ -1,9 +1,3 @@\n-2002-04-11  Richard Sandiford  <rsandifo@redhat.com>\n-\n-\t* decl.c (duplicate_decls): Don't try to unify an implicit typedef\n-\twith an explicit one.\n-\t(lookup_tag): Extract the tag of an explicit typedef.\n-\n 2002-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5507"}, {"sha": "dc9d37313e71e1c42fce4feeb4e0a4c29dcec248", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "patch": "@@ -3426,18 +3426,6 @@ duplicate_decls (newdecl, olddecl)\n \t}\n     }\n \n-  /* Do not merge an implicit typedef with an explicit one.  In:\n-\n-       class A;\n-       ...\n-       typedef class A A __attribute__ ((foo));\n-\n-     the attribute should apply only to the typedef.  */\n-  if (TREE_CODE (olddecl) == TYPE_DECL\n-      && (DECL_IMPLICIT_TYPEDEF_P (olddecl)\n-\t  || DECL_IMPLICIT_TYPEDEF_P (newdecl)))\n-    return 0;\n-\n   /* If new decl is `static' and an `extern' was seen previously,\n      warn about it.  */\n   warn_extern_redeclared_static (newdecl, olddecl);\n@@ -5348,23 +5336,10 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t    else\n \t      old = BINDING_TYPE (old);\n \n-\t    /* If the declaration has an original type, it must a\n-\t       typedef.  When it is an explicit typedef of the form:\n-\n-\t\t   typedef struct A A;\n-\n-\t       the original type will be the tag that we want.\n-\t       We should not return any other kind of typedef.\n-\n-\t       Detect the valid case by checking that the original\n-\t       type has the same name and context as the typedef.  */\n+\t    /* If it has an original type, it is a typedef, and we\n+\t       should not return it.  */\n \t    if (old && DECL_ORIGINAL_TYPE (TYPE_NAME (old)))\n-\t      {\n-\t\told = DECL_ORIGINAL_TYPE (TYPE_NAME (old));\n-\t\tif (TYPE_IDENTIFIER (old) != name\n-\t\t    || context_for_name_lookup (TYPE_NAME (old)) != tail)\n-\t\t  old = NULL_TREE;\n-\t      }\n+\t      old = NULL_TREE;\n \t    if (old && TREE_CODE (old) != form\n \t\t&& (form == ENUMERAL_TYPE || TREE_CODE (old) == ENUMERAL_TYPE))\n \t      {"}, {"sha": "93ef461fc1bf5f762a913b0d2aa4a8d6c9229912", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4e7bac5cb41a0cd8be91635f025eec4afc79cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af4e7bac5cb41a0cd8be91635f025eec4afc79cf", "patch": "@@ -1,7 +1,3 @@\n-2002-04-11  Richard Sandiford  <rsandifo@redhat.com>\n-\n-\t* g++.dg/ext/attrib5.C: New test.\n-\n 2002-04-10  Janis Johnson  <janis187@us.ibm.com>\n \n \t* g77.f-torture/execute/6177.f: New test."}, {"sha": "47511934cc9a87660a01ea081f44abeca916e514", "filename": "gcc/testsuite/g++.dg/ext/attrib5.C", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ed000253a233a9a41c5094d1a932097803cc1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ed000253a233a9a41c5094d1a932097803cc1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib5.C?ref=94ed000253a233a9a41c5094d1a932097803cc1a", "patch": "@@ -1,27 +0,0 @@\n-// There were two related problems here, depending on the vintage.  At\n-// one time:\n-//\n-//    typedef struct A { ... } A __attribute__ ((aligned (16)));\n-//\n-// would cause original_types to go into an infinite loop.  At other\n-// times, the attributes applied to an explicit typedef would be lost\n-// (check_b2 would have a negative size).\n-\n-// First check that the declaration is accepted and has an effect.\n-typedef struct A { int i; } A __attribute__ ((aligned (16)));\n-int check_A[__alignof__ (A) >= 16 ? 1 : -1];\n-\n-// Check that the alignment is only applied to the typedef.\n-struct B { int i; };\n-namespace N { typedef B B; };\n-typedef struct B B __attribute__((aligned (16)));\n-N::B b1;\n-B b2;\n-int check_b1[__alignof__ (b1) == __alignof__ (int) ? 1 : -1];\n-int check_b2[__alignof__ (b2) >= 16 ? 1 : -1];\n-\n-// The fix for this case involved a change to lookup_tag.  This \n-// bit just checks against a possible regression.\n-namespace N { struct C; };\n-typedef struct N::C C;\t\t// { dg-error \"previous declaration\" }\n-struct C;\t\t\t// { dg-error \"conflicting types\" }"}]}