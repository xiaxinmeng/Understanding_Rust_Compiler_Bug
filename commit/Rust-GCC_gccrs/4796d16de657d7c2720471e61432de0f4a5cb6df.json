{"sha": "4796d16de657d7c2720471e61432de0f4a5cb6df", "node_id": "C_kwDOANBUbNoAKDQ3OTZkMTZkZTY1N2Q3YzI3MjA0NzFlNjE0MzJkZTBmNGE1Y2I2ZGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-29T07:43:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-29T07:43:34Z"}, "message": "openmp: Simplify fold_build_pointer_plus callers in omp-expand\n\nTobias mentioned in PR106449 that fold_build_pointer_plus already\nfold_converts the second argument to sizetype if it doesn't already\nhave an integral type gimple compatible with sizetype.\n\nSo, this patch simplifies the callers of fold_build_pointer_plus in\nomp-expand so that they don't do those conversions manually.\n\n2022-07-29  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp-expand.cc (expand_omp_for_init_counts, expand_omp_for_init_vars,\n\textract_omp_for_update_vars, expand_omp_for_ordered_loops,\n\texpand_omp_simd): Don't fold_convert second argument to\n\tfold_build_pointer_plus to sizetype.", "tree": {"sha": "19789cfa6988d7b92eec771f0740334a10faaa04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19789cfa6988d7b92eec771f0740334a10faaa04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4796d16de657d7c2720471e61432de0f4a5cb6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4796d16de657d7c2720471e61432de0f4a5cb6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4796d16de657d7c2720471e61432de0f4a5cb6df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4796d16de657d7c2720471e61432de0f4a5cb6df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201e8d9f82444403682cd583ce0a03e3e3dd2b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201e8d9f82444403682cd583ce0a03e3e3dd2b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201e8d9f82444403682cd583ce0a03e3e3dd2b73"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "9cc61fed9f89de0fe246642e0445ef1eea6a9ba0", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4796d16de657d7c2720471e61432de0f4a5cb6df/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4796d16de657d7c2720471e61432de0f4a5cb6df/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=4796d16de657d7c2720471e61432de0f4a5cb6df", "patch": "@@ -2267,8 +2267,7 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      else if (POINTER_TYPE_P (itype))\n \t\t{\n \t\t  gcc_assert (integer_onep (fd->loops[i].m1));\n-\t\t  t = fold_convert (sizetype,\n-\t\t\t\t    unshare_expr (fd->loops[i].n1));\n+\t\t  t = unshare_expr (fd->loops[i].n1);\n \t\t  n1 = fold_build_pointer_plus (vs[i - fd->loops[i].outer], t);\n \t\t}\n \t      else\n@@ -2291,8 +2290,7 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      else if (POINTER_TYPE_P (itype))\n \t\t{\n \t\t  gcc_assert (integer_onep (fd->loops[i].m2));\n-\t\t  t = fold_convert (sizetype,\n-\t\t\t\t    unshare_expr (fd->loops[i].n2));\n+\t\t  t = unshare_expr (fd->loops[i].n2);\n \t\t  n2 = fold_build_pointer_plus (vs[i - fd->loops[i].outer], t);\n \t\t}\n \t      else\n@@ -2353,8 +2351,7 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      tree step = fold_convert (itype,\n \t\t\t\t\tunshare_expr (fd->loops[i].step));\n \t      if (POINTER_TYPE_P (TREE_TYPE (vs[i])))\n-\t\tt = fold_build_pointer_plus (vs[i],\n-\t\t\t\t\t     fold_convert (sizetype, step));\n+\t\tt = fold_build_pointer_plus (vs[i], step);\n \t      else\n \t\tt = fold_build2 (PLUS_EXPR, itype, vs[i], step);\n \t      t = force_gimple_operand_gsi (&gsi2, t, true, NULL_TREE,\n@@ -2794,8 +2791,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      else if (POINTER_TYPE_P (itype))\n \t\t{\n \t\t  gcc_assert (integer_onep (fd->loops[j].m1));\n-\t\t  t = fold_convert (sizetype,\n-\t\t\t\t    unshare_expr (fd->loops[j].n1));\n+\t\t  t = unshare_expr (fd->loops[j].n1);\n \t\t  n1 = fold_build_pointer_plus (vs[j - fd->loops[j].outer], t);\n \t\t}\n \t      else\n@@ -2818,8 +2814,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      else if (POINTER_TYPE_P (itype))\n \t\t{\n \t\t  gcc_assert (integer_onep (fd->loops[j].m2));\n-\t\t  t = fold_convert (sizetype,\n-\t\t\t\t    unshare_expr (fd->loops[j].n2));\n+\t\t  t = unshare_expr (fd->loops[j].n2);\n \t\t  n2 = fold_build_pointer_plus (vs[j - fd->loops[j].outer], t);\n \t\t}\n \t      else\n@@ -2895,8 +2890,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t  tree step\n \t\t    = fold_convert (itype, unshare_expr (fd->loops[j].step));\n \t\t  if (POINTER_TYPE_P (vtype))\n-\t\t    t = fold_build_pointer_plus (vs[j], fold_convert (sizetype,\n-\t\t\t\t\t\t\t\t      step));\n+\t\t    t = fold_build_pointer_plus (vs[j], step);\n \t\t  else\n \t\t    t = fold_build2 (PLUS_EXPR, itype, vs[j], step);\n \t\t}\n@@ -2959,8 +2953,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t    = fold_convert (itype, unshare_expr (fd->loops[j].step));\n \t\t  t = fold_build2 (MULT_EXPR, itype, t, t2);\n \t\t  if (POINTER_TYPE_P (vtype))\n-\t\t    t = fold_build_pointer_plus (n1,\n-\t\t\t\t\t\t fold_convert (sizetype, t));\n+\t\t    t = fold_build_pointer_plus (n1, t);\n \t\t  else\n \t\t    t = fold_build2 (PLUS_EXPR, itype, n1, t);\n \t\t}\n@@ -2970,8 +2963,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t  t = fold_build2 (MULT_EXPR, itype, t,\n \t\t\t\t   fold_convert (itype, fd->loops[j].step));\n \t\t  if (POINTER_TYPE_P (vtype))\n-\t\t    t = fold_build_pointer_plus (fd->loops[j].n1,\n-\t\t\t\t\t\t fold_convert (sizetype, t));\n+\t\t    t = fold_build_pointer_plus (fd->loops[j].n1, t);\n \t\t  else\n \t\t    t = fold_build2 (PLUS_EXPR, itype, fd->loops[j].n1, t);\n \t\t}\n@@ -3035,9 +3027,8 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t  if (POINTER_TYPE_P (itype))\n \t    {\n \t      gcc_assert (integer_onep (fd->loops[i].m2));\n-\t      t = fold_convert (sizetype, unshare_expr (fd->loops[i].n2));\n \t      t = fold_build_pointer_plus (fd->loops[i - fd->loops[i].outer].v,\n-\t\t\t\t\t   t);\n+\t\t\t\t\t   unshare_expr (fd->loops[i].n2));\n \t    }\n \t  else\n \t    {\n@@ -3130,7 +3121,7 @@ extract_omp_for_update_vars (struct omp_for_data *fd, tree *nonrect_bounds,\n \t\t{\n \t\t  if (POINTER_TYPE_P (TREE_TYPE (l->v)))\n \t\t    t = fold_build_pointer_plus (fd->loops[i + 1 - l->outer].v,\n-\t\t\t\t\t\t fold_convert (sizetype, t));\n+\t\t\t\t\t\t t);\n \t\t  else\n \t\t    {\n \t\t      tree t2\n@@ -3186,9 +3177,7 @@ extract_omp_for_update_vars (struct omp_for_data *fd, tree *nonrect_bounds,\n \t\tif (l->m1)\n \t\t  {\n \t\t    if (POINTER_TYPE_P (TREE_TYPE (l->v)))\n-\t\t      t = fold_build_pointer_plus (fd->loops[i].v,\n-\t\t\t\t\t\t   fold_convert (sizetype,\n-\t\t\t\t\t\t\t\t l->n1));\n+\t\t      t = fold_build_pointer_plus (fd->loops[i].v, l->n1);\n \t\t    else\n \t\t      {\n \t\t\tt = fold_build2 (MULT_EXPR, TREE_TYPE (l->m1), l->m1,\n@@ -3210,9 +3199,7 @@ extract_omp_for_update_vars (struct omp_for_data *fd, tree *nonrect_bounds,\n \t\tif (l->m2)\n \t\t  {\n \t\t    if (POINTER_TYPE_P (TREE_TYPE (l->v)))\n-\t\t      t = fold_build_pointer_plus (fd->loops[i].v,\n-\t\t\t\t\t\t   fold_convert (sizetype,\n-\t\t\t\t\t\t\t\t l->n2));\n+\t\t      t = fold_build_pointer_plus (fd->loops[i].v, l->n2);\n \t\t    else\n \t\t      {\n \t\t\tt = fold_build2 (MULT_EXPR, TREE_TYPE (l->m2), l->m2,\n@@ -3640,9 +3627,7 @@ expand_omp_for_ordered_loops (struct omp_for_data *fd, tree *counts,\n \t{\n \t  gsi = gsi_last_bb (cont_bb);\n \t  if (POINTER_TYPE_P (type))\n-\t    t = fold_build_pointer_plus (fd->loops[i].v,\n-\t\t\t\t\t fold_convert (sizetype,\n-\t\t\t\t\t\t       fd->loops[i].step));\n+\t    t = fold_build_pointer_plus (fd->loops[i].v, fd->loops[i].step);\n \t  else\n \t    t = fold_build2 (PLUS_EXPR, type, fd->loops[i].v,\n \t\t\t     fold_convert (type, fd->loops[i].step));\n@@ -6669,10 +6654,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t{\n \t  i = fd->collapse - 1;\n \t  if (POINTER_TYPE_P (TREE_TYPE (fd->loops[i].v)))\n-\t    {\n-\t      t = fold_convert (sizetype, fd->loops[i].step);\n-\t      t = fold_build_pointer_plus (fd->loops[i].v, t);\n-\t    }\n+\t    t = fold_build_pointer_plus (fd->loops[i].v, fd->loops[i].step);\n \t  else\n \t    {\n \t      t = fold_convert (TREE_TYPE (fd->loops[i].v),\n@@ -6820,10 +6802,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t    e = EDGE_SUCC (last_bb, 1);\n \t  basic_block bb = split_edge (e);\n \t  if (POINTER_TYPE_P (TREE_TYPE (fd->loops[i].v)))\n-\t    {\n-\t      t = fold_convert (sizetype, fd->loops[i].step);\n-\t      t = fold_build_pointer_plus (fd->loops[i].v, t);\n-\t    }\n+\t    t = fold_build_pointer_plus (fd->loops[i].v, fd->loops[i].step);\n \t  else\n \t    {\n \t      t = fold_convert (TREE_TYPE (fd->loops[i].v),"}]}