{"sha": "b1fe8605a12deddd1c5998ee6a78f1d17d507980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmZTg2MDVhMTJkZWRkZDFjNTk5OGVlNmE3OGYxZDE3ZDUwNzk4MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-11-16T15:01:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-16T15:01:55Z"}, "message": "[PR c++/87269] Mark string operator overload in template defn.\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-11/msg01458.html\n\tPR c++/87269\n\t* parser.c (lookup_literal_operator): Mark overload for keeping\n\twhen inside template.  Refactor.\n\n\t* g++.dg/lookup/pr87269.C: New.\n\nFrom-SVN: r266210", "tree": {"sha": "f6b78fc2da5d03484ea2e0907d79b0cafefa3fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b78fc2da5d03484ea2e0907d79b0cafefa3fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1fe8605a12deddd1c5998ee6a78f1d17d507980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fe8605a12deddd1c5998ee6a78f1d17d507980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1fe8605a12deddd1c5998ee6a78f1d17d507980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fe8605a12deddd1c5998ee6a78f1d17d507980/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac28df7e539038f3a1a34902c4bd5c8441a86f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac28df7e539038f3a1a34902c4bd5c8441a86f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac28df7e539038f3a1a34902c4bd5c8441a86f02"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "6b167f33e06e5f0c858ec273c86f608bc8dcc4e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1fe8605a12deddd1c5998ee6a78f1d17d507980", "patch": "@@ -1,3 +1,9 @@\n+2018-11-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87269\n+\t* parser.c (lookup_literal_operator): Mark overload for keeping\n+\twhen inside template.  Refactor.\n+\n 2018-11-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/86246"}, {"sha": "99bd4dc08fbed4cd8b6ee344dcfeaedf3522e6cf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b1fe8605a12deddd1c5998ee6a78f1d17d507980", "patch": "@@ -4259,20 +4259,21 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n static tree\n lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n {\n-  tree decl;\n-  decl = lookup_name (name);\n+  tree decl = lookup_name (name);\n   if (!decl || !is_overloaded_fn (decl))\n     return error_mark_node;\n \n   for (lkp_iterator iter (decl); iter; ++iter)\n     {\n-      unsigned int ix;\n-      bool found = true;\n       tree fn = *iter;\n-      tree parmtypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-      if (parmtypes != NULL_TREE)\n+\n+      if (tree parmtypes = TYPE_ARG_TYPES (TREE_TYPE (fn)))\n \t{\n-\t  for (ix = 0; ix < vec_safe_length (args) && parmtypes != NULL_TREE;\n+\t  unsigned int ix;\n+\t  bool found = true;\n+\n+\t  for (ix = 0;\n+\t       found && ix < vec_safe_length (args) && parmtypes != NULL_TREE;\n \t       ++ix, parmtypes = TREE_CHAIN (parmtypes))\n \t    {\n \t      tree tparm = TREE_VALUE (parmtypes);\n@@ -4285,14 +4286,19 @@ lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n \t\t\t\t       TREE_TYPE (targ))))\n \t\tfound = false;\n \t    }\n+\n \t  if (found\n \t      && ix == vec_safe_length (args)\n \t      /* May be this should be sufficient_parms_p instead,\n \t\t depending on how exactly should user-defined literals\n \t\t work in presence of default arguments on the literal\n \t\t operator parameters.  */\n \t      && parmtypes == void_list_node)\n-\t    return decl;\n+\t    {\n+\t      if (processing_template_decl)\n+\t\tlookup_keep (decl);\n+\t      return decl;\n+\t    }\n \t}\n     }\n "}, {"sha": "b1b6ae4bc8706c261700989bd8946f094483fce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1fe8605a12deddd1c5998ee6a78f1d17d507980", "patch": "@@ -1,3 +1,8 @@\n+2018-11-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87269\n+\t* g++.dg/lookup/pr87269.C: New.\n+\n 2018-11-16  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/88053"}, {"sha": "b0ceda238784cba6e92a5af87ecf30e8a92344c6", "filename": "gcc/testsuite/g++.dg/lookup/pr87269.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87269.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fe8605a12deddd1c5998ee6a78f1d17d507980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87269.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87269.C?ref=b1fe8605a12deddd1c5998ee6a78f1d17d507980", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+// PR c++/87269 ICE failing to keep a lookup\n+\n+namespace {\n+  void  operator\"\" _a (const char *, unsigned long) {}\n+}\n+\n+void operator\"\" _a (unsigned long long);\n+\n+template <typename> void f () { \"\"_a; }\n+\n+void frob ()\n+{\n+  f<int> ();\n+}"}]}