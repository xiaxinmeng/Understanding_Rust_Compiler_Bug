{"sha": "dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1ZWU4NjlmNTc4ZjUxYTI2OTE4MzNiNGQ2MDA1NGJmN2UyYTBhOQ==", "commit": {"author": {"name": "Jing Yu", "email": "jingyu@google.com", "date": "2010-04-08T18:16:57Z"}, "committer": {"name": "Jing Yu", "email": "jingyu@gcc.gnu.org", "date": "2010-04-08T18:16:57Z"}, "message": "Fix a problematic logic at unswitch-loops pass.\n\n2010-04-07  Jing Yu  <jingyu@google.com>\n            Zdenek Dvorak  <ook@ucw.cz>\n\n\tPR tree-optimization/42720\n\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Move one-time\n\tloop unswitch conditions here from\n\t(tree_unswitch_single_loop).\n\nCo-Authored-By: Zdenek Dvorak <ook@ucw.cz>\n\nFrom-SVN: r158138", "tree": {"sha": "06ba5a757773ce104bb48ef3ccbaae8c74222aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ba5a757773ce104bb48ef3ccbaae8c74222aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5ee869f578f51a2691833b4d60054bf7e2a0a9/comments", "author": null, "committer": null, "parents": [{"sha": "98c07c54a05e2969417acde52a8d132cfa51be18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c07c54a05e2969417acde52a8d132cfa51be18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c07c54a05e2969417acde52a8d132cfa51be18"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "8d2578f0c9523b7dca3aabfff5b7fa1c7d5f7bcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5ee869f578f51a2691833b4d60054bf7e2a0a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5ee869f578f51a2691833b4d60054bf7e2a0a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "patch": "@@ -1,3 +1,11 @@\n+2010-04-08  Jing Yu  <jingyu@google.com>\n+\t    Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/42720\n+\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Move one-time\n+\tloop unswitch conditions here from\n+\t(tree_unswitch_single_loop).\n+\n 2010-04-08  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-if-conv.c: Fix comments and simplify logic."}, {"sha": "bb3b1a5f40afa043104a9f5aa70ee8d320b1c080", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5ee869f578f51a2691833b4d60054bf7e2a0a9/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5ee869f578f51a2691833b4d60054bf7e2a0a9/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=dc5ee869f578f51a2691833b4d60054bf7e2a0a9", "patch": "@@ -88,6 +88,26 @@ tree_ssa_unswitch_loops (void)\n   /* Go through inner loops (only original ones).  */\n   FOR_EACH_LOOP (li, loop, LI_ONLY_INNERMOST)\n     {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+        fprintf (dump_file, \";; Considering loop %d\\n\", loop->num);\n+\n+      /* Do not unswitch in cold regions. */\n+      if (optimize_loop_for_size_p (loop))\n+        {\n+          if (dump_file && (dump_flags & TDF_DETAILS))\n+            fprintf (dump_file, \";; Not unswitching cold loops\\n\");\n+          continue;\n+        }\n+\n+      /* The loop should not be too large, to limit code growth. */\n+      if (tree_num_loop_insns (loop, &eni_size_weights)\n+          > (unsigned) PARAM_VALUE (PARAM_MAX_UNSWITCH_INSNS))\n+        {\n+          if (dump_file && (dump_flags & TDF_DETAILS))\n+            fprintf (dump_file, \";; Not unswitching, loop too big\\n\");\n+          continue;\n+        }\n+\n       changed |= tree_unswitch_single_loop (loop, 0);\n     }\n \n@@ -189,31 +209,6 @@ tree_unswitch_single_loop (struct loop *loop, int num)\n       return false;\n     }\n \n-  /* Only unswitch innermost loops.  */\n-  if (loop->inner)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \";; Not unswitching, not innermost loop\\n\");\n-      return false;\n-    }\n-\n-  /* Do not unswitch in cold regions.  */\n-  if (optimize_loop_for_size_p (loop))\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \";; Not unswitching cold loops\\n\");\n-      return false;\n-    }\n-\n-  /* The loop should not be too large, to limit code growth.  */\n-  if (tree_num_loop_insns (loop, &eni_size_weights)\n-      > (unsigned) PARAM_VALUE (PARAM_MAX_UNSWITCH_INSNS))\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \";; Not unswitching, loop too big\\n\");\n-      return false;\n-    }\n-\n   i = 0;\n   bbs = get_loop_body (loop);\n "}]}