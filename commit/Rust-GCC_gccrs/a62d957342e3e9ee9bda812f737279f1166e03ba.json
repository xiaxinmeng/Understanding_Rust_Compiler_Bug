{"sha": "a62d957342e3e9ee9bda812f737279f1166e03ba", "node_id": "C_kwDOANBUbNoAKGE2MmQ5NTczNDJlM2U5ZWU5YmRhODEyZjczNzI3OWYxMTY2ZTAzYmE", "commit": {"author": {"name": "Jia-Wei Chen", "email": "jiawei@iscas.ac.cn", "date": "2022-11-17T03:58:54Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-11-17T04:00:52Z"}, "message": "RISC-V: Optimize RVV epilogue logic.\n\nSometimes \"step1 -= scalable_frame\" will cause adjust equal to\nzero. And it will generate additional redundant instruction\n\"addi sp,sp,0\". Add checking segement to skip that case.\n\nThis testcase mix exist spill-1.c and adding new fun to check if\nthere have redundant addi intructions. Idea provided by Jeff Law.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_expand_epilogue):\n\tDo not emit useless add sp, sp, 0 instrutions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/spill-sp-adjust.c: New test.", "tree": {"sha": "a59ee47de8a820f4386d88764b0e428a7947590d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59ee47de8a820f4386d88764b0e428a7947590d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a62d957342e3e9ee9bda812f737279f1166e03ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62d957342e3e9ee9bda812f737279f1166e03ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62d957342e3e9ee9bda812f737279f1166e03ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62d957342e3e9ee9bda812f737279f1166e03ba/comments", "author": {"login": "pz9115", "id": 43362020, "node_id": "MDQ6VXNlcjQzMzYyMDIw", "avatar_url": "https://avatars.githubusercontent.com/u/43362020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pz9115", "html_url": "https://github.com/pz9115", "followers_url": "https://api.github.com/users/pz9115/followers", "following_url": "https://api.github.com/users/pz9115/following{/other_user}", "gists_url": "https://api.github.com/users/pz9115/gists{/gist_id}", "starred_url": "https://api.github.com/users/pz9115/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pz9115/subscriptions", "organizations_url": "https://api.github.com/users/pz9115/orgs", "repos_url": "https://api.github.com/users/pz9115/repos", "events_url": "https://api.github.com/users/pz9115/events{/privacy}", "received_events_url": "https://api.github.com/users/pz9115/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e214cab68cb34e77622b91113f7698cf137bbdd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e214cab68cb34e77622b91113f7698cf137bbdd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e214cab68cb34e77622b91113f7698cf137bbdd6"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "ed8ba833c8ddcdad89a2c6fe5e3588d8880e8d19", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62d957342e3e9ee9bda812f737279f1166e03ba/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62d957342e3e9ee9bda812f737279f1166e03ba/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=a62d957342e3e9ee9bda812f737279f1166e03ba", "patch": "@@ -5204,25 +5204,29 @@ riscv_expand_epilogue (int style)\n \t  step1 -= scalable_frame;\n \t}\n \n-      /* Get an rtx for STEP1 that we can add to BASE.  */\n-      rtx adjust = GEN_INT (step1.to_constant ());\n-      if (!SMALL_OPERAND (step1.to_constant ()))\n+      /* Get an rtx for STEP1 that we can add to BASE.\n+\t Skip if adjust equal to zero.  */\n+      if (step1.to_constant () != 0)\n \t{\n-\t  riscv_emit_move (RISCV_PROLOGUE_TEMP (Pmode), adjust);\n-\t  adjust = RISCV_PROLOGUE_TEMP (Pmode);\n-\t}\n-\n-      insn = emit_insn (\n-\t       gen_add3_insn (stack_pointer_rtx, stack_pointer_rtx, adjust));\n+\t  rtx adjust = GEN_INT (step1.to_constant ());\n+\t  if (!SMALL_OPERAND (step1.to_constant ()))\n+\t    {\n+\t      riscv_emit_move (RISCV_PROLOGUE_TEMP (Pmode), adjust);\n+\t      adjust = RISCV_PROLOGUE_TEMP (Pmode);\n+\t    }\n \n-      rtx dwarf = NULL_RTX;\n-      rtx cfa_adjust_rtx = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t GEN_INT (step2));\n+\t  insn = emit_insn (gen_add3_insn (stack_pointer_rtx,\n+\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t   adjust));\n+\t  rtx dwarf = NULL_RTX;\n+\t  rtx cfa_adjust_rtx = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     GEN_INT (step2));\n \n-      dwarf = alloc_reg_note (REG_CFA_DEF_CFA, cfa_adjust_rtx, dwarf);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+\t  dwarf = alloc_reg_note (REG_CFA_DEF_CFA, cfa_adjust_rtx, dwarf);\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n \n-      REG_NOTES (insn) = dwarf;\n+\t  REG_NOTES (insn) = dwarf;\n+\t}\n     }\n   else if (frame_pointer_needed)\n     {"}, {"sha": "f8c9f6313e8f7e77b0cfc8f4f162f84da6f10aad", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-sp-adjust.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62d957342e3e9ee9bda812f737279f1166e03ba/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62d957342e3e9ee9bda812f737279f1166e03ba/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c?ref=a62d957342e3e9ee9bda812f737279f1166e03ba", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv\" } */\n+\n+#include \"spill-1.c\"\n+\n+void\n+spill_sp_adjust (int8_t *v)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)v; \n+}\n+\n+/* Make sure we do not have a useless SP adjustment.  */\n+/* { dg-final { scan-assembler-not \"addi\\tsp,sp,0\" } } */"}]}