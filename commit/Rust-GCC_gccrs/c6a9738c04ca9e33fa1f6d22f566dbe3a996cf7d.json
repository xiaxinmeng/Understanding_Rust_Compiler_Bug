{"sha": "c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhOTczOGMwNGNhOWUzM2ZhMWY2ZDIyZjU2NmRiZTNhOTk2Y2Y3ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-11T20:40:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-11T20:40:11Z"}, "message": "dump.c (queue): Be careful when computing bitmasks.\n\n\t* dump.c (queue): Be careful when computing bitmasks.\n\t(dequeue_and_dump): Describe binfos as binfos, not as\n\tvectors.\n\nFrom-SVN: r28679", "tree": {"sha": "94cd3fcc26732d99be8a6f9433efca5352434b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94cd3fcc26732d99be8a6f9433efca5352434b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d/comments", "author": null, "committer": null, "parents": [{"sha": "fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "1b07f59ea5685dde963dd010403bea40b2800fd5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "patch": "@@ -1,3 +1,132 @@\n+1999-08-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* dump.c (queue): Be careful when computing bitmasks.\n+\t(dequeue_and_dump): Describe binfos as binfos, not as\n+\tvectors.\n+\t\n+\t* parse.y (pedantic): Give it itype.  Adjust usage accordingly\n+\tthroughout. \t\n+\t* parse.c: Regenerated.\n+\t\n+\t* Make-lang.in (CXX_SRCS): Remove sig.c.\n+\t* Makefile.in (CXX_OBJS): Remove sig.o.\n+\t(sig.o): Remove.\n+\t* cp-tree.h (CPTI_OPAQUE_TYPE): Remove.\n+\t(CPTI_SIGNATURE_TYPE): Likewise.\n+\t(CPTI_SIGTABLE_ENTRY_TYPE): Likewise.\n+\t(opaque_type_node): Likewise.\n+\t(signature_type_node): Likewise.\n+\t(sigtable_entry_type): Likewise.\n+\t(flag_handle_signatures): Likewise.\n+\t(lang_type): Remove is_signature, is_signature_pointer,\n+\tis_signature_reference, has_opaque_typedecls,\n+\tsigtables_has_been_generated.  Adjust dummy.  Remove signature,\n+\tsignature_pointer_to, signature_reference_to.\n+\t(IS_SIGNATURE): Remove.\n+\t(SET_SIGNATURE): Remove.\n+\t(CLEAR_SIGNATURE): Remove.\n+\t(IS_SIGNATURE_POINTER): Remove.\n+\t(IS_SIGNATURE_REFERENCE): Remove.\n+\t(SIGNATURE_HAS_OPAQUE_TYPEDECLS): Remove.\n+\t(SIGTABLE_HAS_BEEN_GENERATED): Remove.\n+\t(CLASSTYPE_SIGNATURE): Remove.\n+\t(SIGNATURE_TYPE): Remove.\n+\t(SIGNATURE_METHOD_VEC): Remove.\n+\t(SIGNATURE_POINTER_TO): Remove.\n+\t(SIGNATURE_REFERENCE_TO): Remove.\n+\t(lang_decl_flags): Remove is_default_implementation.  Rename\n+\tmemfunc_pointer_to to saved_tree.\n+\t(IS_DEFAULT_IMPLEMENTATION): Remove.\n+\t(DECL_MEMFUNC_POINTER_TO): Remove.\n+\t(DECL_MEMFUNC_POINTING_TO): Remove.\n+\t(DECL_SAVED_TREE): Adjust definition.\n+\t(tag_types): Remove signature_type_node.\n+\t(SIGNATURE_FIELD_NAME): Remove.\n+\t(SIGNATURE_FIELD_NAME_FORMAT): Likewise.\n+\t(SIGNATURE_OPTR_NAME): Likewise.\n+\t(SIGNATURE_SPTR_NAME): Likewise.\n+\t(SIGNATURE_POINTER_NAME): Likewise.\n+\t(SIGNATURE_POINTER_NAME_FORMAT): Likewise.\n+\t(SIGNATURE_REFERENCE_NAME): Likewise.\n+\t(SIGNATURE_REFERNECE_NAME_FORMAT): Likewise.\n+\t(SIGTABLE_PTR_TYPE): Likewise.\n+\t(SIGTABLE_NAME_FORMAT): Likewise.\n+\t(SIGTABLE_NAME_FORMAT_LONG): Likewise.\n+\t(SIGTABLE_TAG_NAME): Likewise.\n+\t(SIGTABLE_VB_OFF_NAME): Likewise.\n+\t(SIGTABLE_VT_OFF_NAME): Likewise.\n+\t(finish_base_specifiers): Change prototype.\n+\t(build_signature_pointer_type): Remove.\n+\t(build_signature_reference_type): Remove.\n+\t(build_signature_pointer_constructor): Remove.\n+\t(build_signature_method_call): Remove.\n+\t(build_optr_ref): Likewise.\n+\t(append_signature_fields): Likewise.\n+\t(signature_error): Likewise.\n+\t* call.c (build_this): Remove signature support.\n+\t(build_over_call): Likewise.\n+\t(build_new_method_call): Likewise.\n+\t* class.c (add_implicitly_declared_members): Likewise.\n+\t(finish_struct_1): Likewise.\n+\t(finish_struct): Likewise.\n+\t* cvt.c (cp_convert_to_pointer): Likewise.\n+\t(convert_to_pointer_force): Likewise.\n+\t(ocp_convert): Likewise.\n+\t* decl.c (sigtable_decl_p): Remove.\n+\t(init_decl_processing): Remove support for signatures.\n+\t(cp_finish_decl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grokparms): Likewise.\n+\t(xref_tag): Likewise.\n+\t(start_function): Likewise.\n+\t(start_method): Likewise.\n+\t* decl2.c (finish_sigtable_vardecl): Remove.\n+\t(flag_handle_signatures): Remove.\n+\t(lang_f_options): Remove handle-signatures.\n+\t(grokfield): Remove support for signatures.\n+\t(grokbitfield): Likewise.\n+\t(finish_file): Likewise.\n+\t(reparse_absdcl_as_casts): Likewise.\n+\t* error.c (dump_type_real): Likewise.\n+\t(dump_function_decl): Likewise.\n+\t* friend.c (make_friend_class): Likewise.\n+\t* gxx.gperf: Remove __signature__, signature, __sigof__, sigof.\n+\t* hash.h: Regenerated.\n+\t* init.c (build_new_1): Remove support for signatures.\n+\t* lang-options.h: Remove -fhandle-signatures,\n+\t-fno-handle-signatures. \n+\t* lex.c (init_parse): Remove support for signatures.\n+\t(yyprint): Likewise.\n+\t* lex.h (rid): Remove RID_SIGNATURE.\n+\t* method.c (build_decl_overload_real): Remove support for\n+\tsignatures. \n+\t(hack_identifier): Likewise.\n+\t* parse.y (base_class): Likewise.\n+\t(base_class.1): Likewise.\n+\t(access_specifier): Likewise.\n+\t* search.c (lookup_member): Likewise.\n+\t* semantics.c (finish_qualified_object_call_expr): Likewise.\n+\t(finish_template_type_parm): Likewise.\n+\t(begin_class_definition): Likewise.\n+\t(finish_base_specifier): Likewise.\n+\t* sig.c: Remove.\n+\t* tree.c (build_cplus_method_type): Remove support for signatures.\n+\t* typeck.c (require_complete_type): Likewise.\n+\t(c_sizeof): Likewise.\n+\t(c_alignof): Likewise.\n+\t(build_object_ref): Likewise.\n+\t(build_component_ref): Likewise.\n+\t(build_indirect_ref): Likewise.\n+\t(build_c_cast): Likewise.\n+\t(build_modify_expr): Likewise.\n+\t(convert_for_initialization): Likewise.\n+\t* typeck2.c (signature_error): Remove.\n+\t(store_init_value): Remove support for signatures.\n+\t(digest_init): Likewise.\n+\t(build_x_arrow): Likewise.\n+\t(build_functional_cast): Likewise.\n+\t* xref.c (GNU_xref_decl): Likewise.\n+\t\n 1999-08-10  Martin v. Loewis  <martin@mira.isdn.cs.tu-berlin.de>\n \n \t* lex.c (do_identifier): Remove unnecessary lookup of class field."}, {"sha": "0ae83efce1e298c7c51450064f21c75a03e2c402", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=c6a9738c04ca9e33fa1f6d22f566dbe3a996cf7d", "patch": "@@ -120,8 +120,8 @@ queue (di, t, flags)\n   /* Create a new entry in the splay-tree.  */\n   dni = (dump_node_info_p) xmalloc (sizeof (struct dump_node_info));\n   dni->index = index;\n-  dni->dump_children_p = flags & DUMP_CHILDREN;\n-  dni->binfo_p = flags & DUMP_BINFO;\n+  dni->dump_children_p = ((flags & DUMP_CHILDREN) != 0);\n+  dni->binfo_p = ((flags & DUMP_BINFO) != 0);\n   dq->node = splay_tree_insert (di->nodes, (splay_tree_key) t, \n \t\t\t\t(splay_tree_value) dni);\n \n@@ -291,6 +291,7 @@ dequeue_and_dump (di)\n   int dump_children_p;\n   enum tree_code code;\n   char code_class;\n+  const char* code_name;\n \n   /* Get the next node from the queue.  */\n   dq = di->queue;\n@@ -310,7 +311,11 @@ dequeue_and_dump (di)\n   /* Print the node index.  */\n   dump_index (di, index);\n   /* And the type of node this is.  */\n-  fprintf (di->stream, \"%-16s \", tree_code_name[(int) TREE_CODE (t)]);\n+  if (dni->binfo_p)\n+    code_name = \"binfo\";\n+  else\n+    code_name = tree_code_name[(int) TREE_CODE (t)];\n+  fprintf (di->stream, \"%-16s \", code_name);\n   di->column = 25;\n \n   /* Figure out what kind of node this is.  */"}]}