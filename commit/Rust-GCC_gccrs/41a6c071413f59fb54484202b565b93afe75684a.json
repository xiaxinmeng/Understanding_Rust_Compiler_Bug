{"sha": "41a6c071413f59fb54484202b565b93afe75684a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNmMwNzE0MTNmNTlmYjU0NDg0MjAyYjU2NWI5M2FmZTc1Njg0YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-22T17:20:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-22T17:20:10Z"}, "message": "revert: re PR target/70738 (Add -mgeneral-regs-only option)\n\nRevert:\n\ngcc/\n\n\tPR target/70738\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): New.\n\t(ix86_handle_option): Disable MPX, MMX, SSE and x87 instructions\n\tfor -mgeneral-regs-only.\n\t* config/i386/i386.c (ix86_option_override_internal): Don't\n\tenable x87 instructions if only the general registers are\n\tallowed.\n\t* config/i386/i386.opt: Add -mgeneral-regs-only.\n\t* doc/invoke.texi: Document -mgeneral-regs-only.\n\ngcc/testsuite/\n\n\tPR target/70738\n\t* gcc.target/i386/pr70738-1.c: Likewise.\n\t* gcc.target/i386/pr70738-2.c: Likewise.\n\t* gcc.target/i386/pr70738-3.c: Likewise.\n\t* gcc.target/i386/pr70738-4.c: Likewise.\n\t* gcc.target/i386/pr70738-5.c: Likewise.\n\t* gcc.target/i386/pr70738-6.c: Likewise.\n\t* gcc.target/i386/pr70738-7.c: Likewise.\n\t* gcc.target/i386/pr70738-8.c: Likewise.\n\t* gcc.target/i386/pr70738-9.c: Likewise.\n\nFrom-SVN: r236570", "tree": {"sha": "79de3076a968de2196eaf488054b9afdde954a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79de3076a968de2196eaf488054b9afdde954a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a6c071413f59fb54484202b565b93afe75684a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6c071413f59fb54484202b565b93afe75684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a6c071413f59fb54484202b565b93afe75684a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6c071413f59fb54484202b565b93afe75684a/comments", "author": null, "committer": null, "parents": [{"sha": "af120161421cdc935ff98a0e5038775f22a1ca90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af120161421cdc935ff98a0e5038775f22a1ca90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af120161421cdc935ff98a0e5038775f22a1ca90"}], "stats": {"total": 195, "additions": 2, "deletions": 193}, "files": [{"sha": "e113f7958f9e13bbae2141246d91d9a31bcf5d2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -103,19 +103,6 @@\n \n \t* config/nvptx/nvptx.md (sincossf3): New pattern.\n \n-2016-05-20  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\tPR target/70738\n-\t* common/config/i386/i386-common.c\n-\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): New.\n-\t(ix86_handle_option): Disable MPX, MMX, SSE and x87 instructions\n-\tfor -mgeneral-regs-only.\n-\t* config/i386/i386.c (ix86_option_override_internal): Don't\n-\tenable x87 instructions if only the general registers are\n-\tallowed.\n-\t* config/i386/i386.opt: Add -mgeneral-regs-only.\n-\t* doc/invoke.texi: Document -mgeneral-regs-only.\n-\n 2016-05-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* calls.c (maybe_complain_about_tail_call): New function."}, {"sha": "cc65c8c8a514933f26fc5c9b49ddf08fd2ebce97", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -223,11 +223,6 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n #define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n \n-#define OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET \\\n-  (OPTION_MASK_ISA_MMX_UNSET \\\n-   | OPTION_MASK_ISA_SSE_UNSET \\\n-   | OPTION_MASK_ISA_MPX)\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n bool\n@@ -241,21 +236,6 @@ ix86_handle_option (struct gcc_options *opts,\n \n   switch (code)\n     {\n-    case OPT_mgeneral_regs_only:\n-      if (value)\n-\t{\n-\t  /* Disable MPX, MMX, SSE and x87 instructions if only the\n-\t     general registers are allowed..  */\n-\t  opts->x_ix86_isa_flags\n-\t    &= ~OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit\n-\t    |= OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n-\t  opts->x_target_flags &= ~MASK_80387;\n-\t}\n-      else\n-\tgcc_unreachable ();\n-      return true;\n-\n     case OPT_mmmx:\n       if (value)\n \t{"}, {"sha": "1cb88d6dc0a5eae2ee2abd834fd99967e9f22c02", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -5337,10 +5337,7 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PKU))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU;\n \n-\t/* Don't enable x87 instructions if only the general registers\n-\t   are allowed.  */\n-\tif (!(opts_set->x_target_flags & MASK_GENERAL_REGS_ONLY)\n-\t    && !(opts_set->x_target_flags & MASK_80387))\n+\tif (!(opts_set->x_target_flags & MASK_80387))\n \t  {\n \t    if (processor_alias_table[i].flags & PTA_NO_80387)\n \t      opts->x_target_flags &= ~MASK_80387;"}, {"sha": "36dd4bd1572c582a8b69e100aeedacdf2d86eb13", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -897,7 +897,3 @@ Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n mmitigate-rop\n Target Var(flag_mitigate_rop) Init(0)\n Attempt to avoid generating instruction sequences containing ret bytes.\n-\n-mgeneral-regs-only\n-Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Save\n-Generate code which uses only the general registers."}, {"sha": "f3d087f9cad4889c88115693416dffa3a97a2008", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -1172,7 +1172,7 @@ See RS/6000 and PowerPC Options.\n -msse2avx -mfentry -mrecord-mcount -mnop-mcount -m8bit-idiv @gol\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n -malign-data=@var{type} -mstack-protector-guard=@var{guard} @gol\n--mmitigate-rop -mgeneral-regs-only}\n+-mmitigate-rop}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n@@ -24264,12 +24264,6 @@ opcodes, to mitigate against certain forms of attack. At the moment,\n this option is limited in what it can do and should not be relied\n on to provide serious protection.\n \n-@item -mgeneral-regs-only\n-@opindex mgeneral-regs-only\n-Generate code that uses only the general-purpose registers.  This\n-prevents the compiler from using floating-point, vector, mask and bound\n-registers.\n-\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "07c14704b79b7ad5cbc23e4c4b6e5497d293f82c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6c071413f59fb54484202b565b93afe75684a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41a6c071413f59fb54484202b565b93afe75684a", "patch": "@@ -68,19 +68,6 @@\n \tPR c++/70572\n \t* g++.dg/cpp1y/auto-fn31.C: New.\n \n-2016-05-20  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\tPR target/70738\n-\t* gcc.target/i386/pr70738-1.c: Likewise.\n-\t* gcc.target/i386/pr70738-2.c: Likewise.\n-\t* gcc.target/i386/pr70738-3.c: Likewise.\n-\t* gcc.target/i386/pr70738-4.c: Likewise.\n-\t* gcc.target/i386/pr70738-5.c: Likewise.\n-\t* gcc.target/i386/pr70738-6.c: Likewise.\n-\t* gcc.target/i386/pr70738-7.c: Likewise.\n-\t* gcc.target/i386/pr70738-8.c: Likewise.\n-\t* gcc.target/i386/pr70738-9.c: Likewise.\n-\n 2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-addec.c: New test."}, {"sha": "19381c269322052bd71ba35923c4b5fa05b6e70e", "filename": "gcc/testsuite/gcc.target/i386/pr70738-1.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n-\n-int32x2_t test (int32x2_t a, int32x2_t b)\n-{ /* { dg-error \"SSE register return with SSE disabled\" } */\n-  return a + b;\n-}"}, {"sha": "8b909047be52b085b4a41cafd713c4c2743e3004", "filename": "gcc/testsuite/gcc.target/i386/pr70738-2.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-mmmx -mgeneral-regs-only\" } */\n-\n-typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n-\n-int32x2_t\n-test (int32x2_t a, int32x2_t b) /* { dg-warning \"MMX vector argument without MMX enabled\" } */\n-{ /* { dg-warning \"MMX vector return without MMX enabled\" } */\n-  return a + b;\n-}"}, {"sha": "1ac3adbaedaca427639a97fb27b64a7f3ea0f9e8", "filename": "gcc/testsuite/gcc.target/i386/pr70738-3.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n-extern int32x4_t c;\n-\n-void\n-test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n-{\n-  c = a + b;\n-}"}, {"sha": "c6d20f2ba116351d78e62dfa38d07e7b02d1bea8", "filename": "gcc/testsuite/gcc.target/i386/pr70738-4.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n-\n-int32x4_t\n-test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n-{ /* { dg-warning \"SSE vector return without SSE enabled\" } */\n-  return a + b;\n-}"}, {"sha": "8b4380921f45bfcb0261fae44a5f0995526a0cd3", "filename": "gcc/testsuite/gcc.target/i386/pr70738-5.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-#include <stdarg.h>\n-\n-typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n-\n-int\n-test (int i, ...)\n-{\n-  va_list argp;\n-  va_start (argp, i);\n-  int32x2_t x = (int32x2_t) {0, 1};\n-  x += va_arg (argp, int32x2_t); /* { dg-error \"SSE register argument with SSE disabled\" } */\n-  return x[0] + x[1];\n-}"}, {"sha": "3bccabb0b5ed5bb8f39e96c110946f1ef3164525", "filename": "gcc/testsuite/gcc.target/i386/pr70738-6.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-extern float a, b, c;\n-\n-void\n-foo (void)\n-{\n-  c = a * b; /* { dg-error \"SSE register return with SSE disabled\" } */\n-}"}, {"sha": "2e5b49f619de8e7b37a37b58cbd40df576c9c5d7", "filename": "gcc/testsuite/gcc.target/i386/pr70738-7.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n-\n-extern float a, b, c;\n-\n-void\n-foo (void)\n-{\n-  c = a * b;\n-}\n-\n-/* { dg-final { scan-assembler-not \"mulss\" } } */\n-/* { dg-final { scan-assembler \"call\\[ \\t\\]__mulsf3\" } } */"}, {"sha": "0740460b237a6973ff8cb1b3bee4b8338d929a10", "filename": "gcc/testsuite/gcc.target/i386/pr70738-8.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n-\n-extern void abort ();\n-\n-int\n-dec (int a, int b)\n-{\n-  return a + b;\n-}\n-\n-int\n-cal (int a, int b)\n-{\n-  int sum1 = a * b;\n-  int sum2 = a / b;\n-  int sum = dec (sum1, sum2);\n-  return a + b + sum + sum1 + sum2;\n-}\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int ret = cal (2, 1);\n-\n-  if (ret != 11)\n-    abort ();\n-\n-  return 0;\n-}"}, {"sha": "c71f0b0c43f34bc4dfcaddcaa836da07692dc4c0", "filename": "gcc/testsuite/gcc.target/i386/pr70738-9.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,23 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n-\n-extern void abort ();\n-\n-int\n-cal (int a, int b)\n-{\n-  int sum = a + b;\n-  int sum1 = a * b;\n-  return (a + b + sum + sum1);\n-}\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int ret = cal (1, 2);\n-\n-  if (ret != 8)\n-    abort ();\n-\n-  return 0;\n-}"}]}