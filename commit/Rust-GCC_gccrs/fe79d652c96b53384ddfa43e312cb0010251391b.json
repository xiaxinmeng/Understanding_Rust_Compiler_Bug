{"sha": "fe79d652c96b53384ddfa43e312cb0010251391b", "node_id": "C_kwDOANBUbNoAKGZlNzlkNjUyYzk2YjUzMzg0ZGRmYTQzZTMxMmNiMDAxMDI1MTM5MWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-17T13:40:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-18T06:58:54Z"}, "message": "target/104581 - compile-time regression in mode-switching\n\nThe x86 backend piggy-backs on mode-switching for insertion of\nvzeroupper.  A recent improvement there was implemented in a way\nto walk possibly the whole basic-block for all DF reg def definitions\nin its mode_needed hook which is called for each instruction in\na basic-block during mode-switching local analysis.\n\nThe following mostly reverts this improvement.  It needs to be\nre-done in a way more consistent with a local dataflow which\nprobably means making targets aware of the state of the local\ndataflow analysis.\n\n2022-02-17  Richard Biener  <rguenther@suse.de>\n\n\tPR target/104581\n\t* config/i386/i386.cc (ix86_avx_u128_mode_source): Remove.\n\t(ix86_avx_u128_mode_needed): Return AVX_U128_DIRTY instead\n\tof calling ix86_avx_u128_mode_source which would eventually\n\thave returned AVX_U128_ANY in some very special case.\n\n\t* gcc.target/i386/pr101456-1.c: XFAIL.", "tree": {"sha": "811ee2a1099174431b334430a16a0cb46ccd7953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811ee2a1099174431b334430a16a0cb46ccd7953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe79d652c96b53384ddfa43e312cb0010251391b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe79d652c96b53384ddfa43e312cb0010251391b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe79d652c96b53384ddfa43e312cb0010251391b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe79d652c96b53384ddfa43e312cb0010251391b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422d1d378e52418d821781ad756cf3eafc3fa9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422d1d378e52418d821781ad756cf3eafc3fa9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422d1d378e52418d821781ad756cf3eafc3fa9a2"}], "stats": {"total": 81, "additions": 5, "deletions": 76}, "files": [{"sha": "e4b42fbba6fdbe4b1fc70449a096fad47b053c18", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe79d652c96b53384ddfa43e312cb0010251391b/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe79d652c96b53384ddfa43e312cb0010251391b/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=fe79d652c96b53384ddfa43e312cb0010251391b", "patch": "@@ -14377,80 +14377,12 @@ ix86_check_avx_upper_register (const_rtx exp)\n \n static void\n ix86_check_avx_upper_stores (rtx dest, const_rtx, void *data)\n- {\n-   if (ix86_check_avx_upper_register (dest))\n+{\n+  if (ix86_check_avx_upper_register (dest))\n     {\n       bool *used = (bool *) data;\n       *used = true;\n     }\n- }\n-\n-/* For YMM/ZMM store or YMM/ZMM extract.  Return mode for the source\n-   operand of SRC DEFs in the same basic block before INSN.  */\n-\n-static int\n-ix86_avx_u128_mode_source (rtx_insn *insn, const_rtx src)\n-{\n-  basic_block bb = BLOCK_FOR_INSN (insn);\n-  rtx_insn *end = BB_END (bb);\n-\n-  /* Return AVX_U128_DIRTY if there is no DEF in the same basic\n-     block.  */\n-  int status = AVX_U128_DIRTY;\n-\n-  for (df_ref def = DF_REG_DEF_CHAIN (REGNO (src));\n-       def; def = DF_REF_NEXT_REG (def))\n-    if (DF_REF_BB (def) == bb)\n-      {\n-\t/* Ignore DEF from different basic blocks.  */\n-\trtx_insn *def_insn = DF_REF_INSN (def);\n-\n-\t/* Check if DEF_INSN is before INSN.  */\n-\trtx_insn *next;\n-\tfor (next = NEXT_INSN (def_insn);\n-\t     next != nullptr && next != end && next != insn;\n-\t     next = NEXT_INSN (next))\n-\t  ;\n-\n-\t/* Skip if DEF_INSN isn't before INSN.  */\n-\tif (next != insn)\n-\t  continue;\n-\n-\t/* Return AVX_U128_DIRTY if the source operand of DEF_INSN\n-\t   isn't constant zero.  */\n-\n-\tif (CALL_P (def_insn))\n-\t  {\n-\t    bool avx_upper_reg_found = false;\n-\t    note_stores (def_insn,\n-\t\t\t ix86_check_avx_upper_stores,\n-\t\t\t &avx_upper_reg_found);\n-\n-\t    /* Return AVX_U128_DIRTY if call returns AVX.  */\n-\t    if (avx_upper_reg_found)\n-\t      return AVX_U128_DIRTY;\n-\n-\t    continue;\n-\t  }\n-\n-\trtx set = single_set (def_insn);\n-\tif (!set)\n-\t  return AVX_U128_DIRTY;\n-\n-\trtx dest = SET_DEST (set);\n-\n-\t/* Skip if DEF_INSN is not an AVX load.  Return AVX_U128_DIRTY\n-\t   if the source operand isn't constant zero.  */\n-\tif (ix86_check_avx_upper_register (dest)\n-\t    && standard_sse_constant_p (SET_SRC (set),\n-\t\t\t\t\tGET_MODE (dest)) != 1)\n-\t  return AVX_U128_DIRTY;\n-\n-\t/* We get here only if all AVX loads are from constant zero.  */\n-\tstatus = AVX_U128_ANY;\n-      }\n-\n-  return status;\n }\n \n /* Return needed mode for entity in optimize_mode_switching pass.  */\n@@ -14520,11 +14452,7 @@ ix86_avx_u128_mode_needed (rtx_insn *insn)\n \t{\n \t  FOR_EACH_SUBRTX (iter, array, src, NONCONST)\n \t    if (ix86_check_avx_upper_register (*iter))\n-\t      {\n-\t\tint status = ix86_avx_u128_mode_source (insn, *iter);\n-\t\tif (status == AVX_U128_DIRTY)\n-\t\t  return status;\n-\t      }\n+\t      return AVX_U128_DIRTY;\n \t}\n \n       /* This isn't YMM/ZMM load/store.  */"}, {"sha": "7fb3a3f055ccec873b78e5be67cd26393c0c9133", "filename": "gcc/testsuite/gcc.target/i386/pr101456-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe79d652c96b53384ddfa43e312cb0010251391b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101456-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe79d652c96b53384ddfa43e312cb0010251391b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101456-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101456-1.c?ref=fe79d652c96b53384ddfa43e312cb0010251391b", "patch": "@@ -30,4 +30,5 @@ foo3 (void)\n   bar ();\n }\n \n-/* { dg-final { scan-assembler-not \"vzeroupper\" } } */\n+/* See PR104581 for the XFAIL reason.  */\n+/* { dg-final { scan-assembler-not \"vzeroupper\" { xfail *-*-* } } } */"}]}