{"sha": "dd2c9f746201cd614e594d05ce52f832626c66ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyYzlmNzQ2MjAxY2Q2MTRlNTk0ZDA1Y2U1MmY4MzI2MjZjNjZhYg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-12-08T15:46:09Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-12-08T15:46:09Z"}, "message": "ipa-type-escape.c (analyze_variable): Use gcc_assert instead of abort.\n\n\t* ipa-type-escape.c (analyze_variable): Use gcc_assert instead of\n\tabort.\n\t* except.c (output_ttype): Likewise.\n\t* tree-object-size.c (collect_object_sizes_for): Likewise.\n\t(check_for_plus_in_loops_1): Likewise.\n\t(check_for_plus_in_loops): Likewise.\n\t(compute_object_sizes): Use gcc_unreachable instead of abort.\n\nCo-Authored-By: Christophe Jaillet <christophe.jaillet@wanadoo.fr>\n\nFrom-SVN: r108237", "tree": {"sha": "e1639906e1c1e7741a5d5186f82d45bc10d23605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1639906e1c1e7741a5d5186f82d45bc10d23605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2c9f746201cd614e594d05ce52f832626c66ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2c9f746201cd614e594d05ce52f832626c66ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2c9f746201cd614e594d05ce52f832626c66ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2c9f746201cd614e594d05ce52f832626c66ab/comments", "author": null, "committer": null, "parents": [{"sha": "ccd83be5d60adc34ce892a4650dda435ea3cd60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd83be5d60adc34ce892a4650dda435ea3cd60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd83be5d60adc34ce892a4650dda435ea3cd60e"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "7a8b1b7b534553a7194e60e78d5830b8fca0db3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd2c9f746201cd614e594d05ce52f832626c66ab", "patch": "@@ -1,3 +1,14 @@\n+2005-12-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+            Christophe Jaillet  <christophe.jaillet@wanadoo.fr>\n+\n+\t* ipa-type-escape.c (analyze_variable): Use gcc_assert instead of\n+\tabort.\n+\t* except.c (output_ttype): Likewise.\n+\t* tree-object-size.c (collect_object_sizes_for): Likewise.\n+\t(check_for_plus_in_loops_1): Likewise.\n+\t(check_for_plus_in_loops): Likewise.\n+\t(compute_object_sizes): Use gcc_unreachable instead of abort.\n+\n 2005-12-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/ms1/ms1.md (UNSPEC_LOOP): New constant."}, {"sha": "782a516abfb64ce4a24a82da136407c60bf5d98f", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=dd2c9f746201cd614e594d05ce52f832626c66ab", "patch": "@@ -3486,8 +3486,8 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n \t      public = TREE_PUBLIC (type);\n \t    }\n \t}\n-      else if (TREE_CODE (type) != INTEGER_CST)\n-\tabort ();\n+      else\n+\tgcc_assert (TREE_CODE (type) == INTEGER_CST);\n     }\n \n   /* Allow the target to override the type table entry format.  */"}, {"sha": "af0c2a405ba3c6563280d6108c8c532c80065582", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=dd2c9f746201cd614e594d05ce52f832626c66ab", "patch": "@@ -1349,13 +1349,10 @@ analyze_variable (struct cgraph_varpool_node *vnode)\n   if (vnode->externally_visible)\n     mark_interesting_type (type, FULL_ESCAPE);\n \n-  if (TREE_CODE (global) == VAR_DECL)\n-    {\n-      if (DECL_INITIAL (global)) \n-\twalk_tree (&DECL_INITIAL (global), scan_for_refs, \n-\t\t   NULL, visited_nodes);\n-    } \n-  else abort();\n+  gcc_assert (TREE_CODE (global) == VAR_DECL);\n+\n+  if (DECL_INITIAL (global))\n+    walk_tree (&DECL_INITIAL (global), scan_for_refs, NULL, visited_nodes);\n }\n \n /* This is the main routine for finding the reference patterns for"}, {"sha": "01eb3814b27915f970e5272fb3e4bd5bed65894a", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c9f746201cd614e594d05ce52f832626c66ab/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=dd2c9f746201cd614e594d05ce52f832626c66ab", "patch": "@@ -688,8 +688,7 @@ collect_object_sizes_for (struct object_size_info *osi, tree var)\n   switch (TREE_CODE (stmt))\n     {\n     case RETURN_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (stmt, 0)) != MODIFY_EXPR)\n-\tabort ();\n+      gcc_assert (TREE_CODE (TREE_OPERAND (stmt, 0)) == MODIFY_EXPR);\n       stmt = TREE_OPERAND (stmt, 0);\n       /* FALLTHRU  */\n \n@@ -815,8 +814,7 @@ check_for_plus_in_loops_1 (struct object_size_info *osi, tree var,\n   switch (TREE_CODE (stmt))\n     {\n     case RETURN_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (stmt, 0)) != MODIFY_EXPR)\n-\tabort ();\n+      gcc_assert (TREE_CODE (TREE_OPERAND (stmt, 0)) == MODIFY_EXPR);\n       stmt = TREE_OPERAND (stmt, 0);\n       /* FALLTHRU  */\n \n@@ -894,8 +892,7 @@ check_for_plus_in_loops (struct object_size_info *osi, tree var)\n   switch (TREE_CODE (stmt))\n     {\n     case RETURN_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (stmt, 0)) != MODIFY_EXPR)\n-\tabort ();\n+      gcc_assert (TREE_CODE (TREE_OPERAND (stmt, 0)) == MODIFY_EXPR);\n       stmt = TREE_OPERAND (stmt, 0);\n       /* FALLTHRU  */\n \n@@ -1045,7 +1042,7 @@ compute_object_sizes (void)\n \t    }\n \n \t  if (!set_rhs (stmtp, result))\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  update_stmt (*stmtp);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}