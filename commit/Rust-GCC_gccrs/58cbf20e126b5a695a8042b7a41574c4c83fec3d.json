{"sha": "58cbf20e126b5a695a8042b7a41574c4c83fec3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjYmYyMGUxMjZiNWE2OTVhODA0MmI3YTQxNTc0YzRjODNmZWMzZA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-23T20:54:48Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-23T20:54:48Z"}, "message": "sparc.c (arith11_operand): Use SPARC_SIMM11_P.\n\n\t* sparc/sparc.c (arith11_operand): Use SPARC_SIMM11_P.\n\t(arith10_operand): Use SPARC_SIMM10_P.\n\nFrom-SVN: r11601", "tree": {"sha": "ade613dadacf01c071848cbdf52303913771f755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ade613dadacf01c071848cbdf52303913771f755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58cbf20e126b5a695a8042b7a41574c4c83fec3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cbf20e126b5a695a8042b7a41574c4c83fec3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cbf20e126b5a695a8042b7a41574c4c83fec3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cbf20e126b5a695a8042b7a41574c4c83fec3d/comments", "author": null, "committer": null, "parents": [{"sha": "18c5947fd35bd6f8d2632cf41f8e841b9cd12419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c5947fd35bd6f8d2632cf41f8e841b9cd12419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c5947fd35bd6f8d2632cf41f8e841b9cd12419"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "e6e4cccc6ddeff01e72ad9c941aa82b9ff330b69", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cbf20e126b5a695a8042b7a41574c4c83fec3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cbf20e126b5a695a8042b7a41574c4c83fec3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=58cbf20e126b5a695a8042b7a41574c4c83fec3d", "patch": "@@ -709,9 +709,9 @@ cc_arithopn (op, mode)\n \t  || GET_CODE (op) == IOR);\n }\n \f\n-/* Return true if OP is a register, or is a CONST_INT that can fit in a 13\n-   bit immediate field.  This is an acceptable SImode operand for most 3\n-   address instructions.  */\n+/* Return true if OP is a register, or is a CONST_INT that can fit in a\n+   signed 13 bit immediate field.  This is an acceptable SImode operand for\n+   most 3 address instructions.  */\n \n int\n arith_operand (op, mode)\n@@ -722,32 +722,30 @@ arith_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op)));\n }\n \n-/* Return true if OP is a register, or is a CONST_INT that can fit in an 11\n-   bit immediate field.  This is an acceptable SImode operand for the movcc\n-   instructions.  */\n+/* Return true if OP is a register, or is a CONST_INT that can fit in a\n+   signed 11 bit immediate field.  This is an acceptable SImode operand for\n+   the movcc instructions.  */\n \n int\n arith11_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n-\t  || (GET_CODE (op) == CONST_INT\n-\t      && ((unsigned) (INTVAL (op) + 0x400) < 0x800)));\n+\t  || (GET_CODE (op) == CONST_INT && SPARC_SIMM11_P (INTVAL (op))));\n }\n \n-/* Return true if OP is a register, or is a CONST_INT that can fit in an 10\n-   bit immediate field.  This is an acceptable SImode operand for the movrcc\n-   instructions.  */\n+/* Return true if OP is a register, or is a CONST_INT that can fit in a\n+   signed 10 bit immediate field.  This is an acceptable SImode operand for\n+   the movrcc instructions.  */\n \n int\n arith10_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n-\t  || (GET_CODE (op) == CONST_INT\n-\t      && ((unsigned) (INTVAL (op) + 0x200) < 0x400)));\n+\t  || (GET_CODE (op) == CONST_INT && SPARC_SIMM10_P (INTVAL (op))));\n }\n \n /* Return true if OP is a register, is a CONST_INT that fits in a 13 bit"}]}