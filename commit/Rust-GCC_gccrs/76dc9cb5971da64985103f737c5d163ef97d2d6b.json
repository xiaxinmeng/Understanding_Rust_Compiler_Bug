{"sha": "76dc9cb5971da64985103f737c5d163ef97d2d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkYzljYjU5NzFkYTY0OTg1MTAzZjczN2M1ZDE2M2VmOTdkMmQ2Yg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-04T09:19:39Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-04T09:19:39Z"}, "message": "[NDS32] Merge movqi and movhi patterns.\n\ngcc/\n\t* config/nds32/nds32.md (movqi, movhi): Merge into mov<mode>.\n\nFrom-SVN: r259071", "tree": {"sha": "a4f4b007429b9f52aadccb842582f43d7e396581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4f4b007429b9f52aadccb842582f43d7e396581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76dc9cb5971da64985103f737c5d163ef97d2d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dc9cb5971da64985103f737c5d163ef97d2d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dc9cb5971da64985103f737c5d163ef97d2d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dc9cb5971da64985103f737c5d163ef97d2d6b/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e9ca9328ae625ad366d6a1043f2b8df58b56cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9ca9328ae625ad366d6a1043f2b8df58b56cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9ca9328ae625ad366d6a1043f2b8df58b56cb6"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "3555f35e18ceb73b43e9c5dcb498229368949d9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dc9cb5971da64985103f737c5d163ef97d2d6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dc9cb5971da64985103f737c5d163ef97d2d6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76dc9cb5971da64985103f737c5d163ef97d2d6b", "patch": "@@ -1,3 +1,7 @@\n+2018-04-04  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.md (movqi, movhi): Merge into mov<mode>.\n+\n 2018-04-04  Chung-Ju Wu  <jasonwucj@gmail.com>\n \t    Kito Cheng  <kito.cheng@gmail.com>\n "}, {"sha": "9a12598e21100f6d614c13f7763929b8e9fdd51a", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dc9cb5971da64985103f737c5d163ef97d2d6b/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dc9cb5971da64985103f737c5d163ef97d2d6b/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=76dc9cb5971da64985103f737c5d163ef97d2d6b", "patch": "@@ -83,26 +83,25 @@\n ;; For QImode and HImode, the immediate value can be fit in imm20s.\n ;; So there is no need to split rtx for QI and HI patterns.\n \n-(define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"\")\n-\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:QIHI 0 \"general_operand\" \"\")\n+\t(match_operand:QIHI 1 \"general_operand\" \"\"))]\n   \"\"\n {\n   /* Need to force register if mem <- !reg.  */\n   if (MEM_P (operands[0]) && !REG_P (operands[1]))\n-    operands[1] = force_reg (QImode, operands[1]);\n-})\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n \n-(define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n-  \"\"\n-{\n-  /* Need to force register if mem <- !reg.  */\n-  if (MEM_P (operands[0]) && !REG_P (operands[1]))\n-    operands[1] = force_reg (HImode, operands[1]);\n+  if (MEM_P (operands[1]) && optimize > 0)\n+    {\n+      rtx reg = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_zero_extend<mode>si2 (reg, operands[1]));\n+      operands[1] = gen_lowpart (<MODE>mode, reg);\n+    }\n })\n \n+\n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]"}]}