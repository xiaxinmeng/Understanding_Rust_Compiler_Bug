{"sha": "98363db00799b353cbbc8ab9c55ecf28d298363a", "node_id": "C_kwDOANBUbNoAKDk4MzYzZGIwMDc5OWIzNTNjYmJjOGFiOWM1NWVjZjI4ZDI5ODM2M2E", "commit": {"author": {"name": "Jakub Dupak", "email": "dev@jakubdupak.com", "date": "2023-03-11T19:50:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-13T18:09:47Z"}, "message": "hir: Simplify indentation to single line\n\nImproves readability by better corresponding to resulting output.\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-hir-dump.cc (Dump::visit): Simplify indentation dump to single line.\n\nSigned-off-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "24021850ff517a2e1db855e819ef39e7b8aeec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24021850ff517a2e1db855e819ef39e7b8aeec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98363db00799b353cbbc8ab9c55ecf28d298363a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98363db00799b353cbbc8ab9c55ecf28d298363a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98363db00799b353cbbc8ab9c55ecf28d298363a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98363db00799b353cbbc8ab9c55ecf28d298363a/comments", "author": {"login": "jdupak", "id": 22683640, "node_id": "MDQ6VXNlcjIyNjgzNjQw", "avatar_url": "https://avatars.githubusercontent.com/u/22683640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdupak", "html_url": "https://github.com/jdupak", "followers_url": "https://api.github.com/users/jdupak/followers", "following_url": "https://api.github.com/users/jdupak/following{/other_user}", "gists_url": "https://api.github.com/users/jdupak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdupak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdupak/subscriptions", "organizations_url": "https://api.github.com/users/jdupak/orgs", "repos_url": "https://api.github.com/users/jdupak/repos", "events_url": "https://api.github.com/users/jdupak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdupak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048971cf4284e8eaf71060d3136495b1111793d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048971cf4284e8eaf71060d3136495b1111793d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048971cf4284e8eaf71060d3136495b1111793d9"}], "stats": {"total": 93, "additions": 38, "deletions": 55}, "files": [{"sha": "cfa6a3a46dadc495bd8e828e4bc4af0c30948432", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 38, "deletions": 55, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98363db00799b353cbbc8ab9c55ecf28d298363a/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98363db00799b353cbbc8ab9c55ecf28d298363a/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=98363db00799b353cbbc8ab9c55ecf28d298363a", "patch": "@@ -30,16 +30,16 @@ Dump::go (HIR::Crate &crate)\n   // inner attributes\n   if (!crate.inner_attrs.empty ())\n     {\n-      indentation.increment();\n+      indentation.increment ();\n       stream << indentation;\n       stream << \"inner_attrs: [\";\n       for (auto &attr : crate.inner_attrs)\n \tstream << attr.as_string ();\n       stream << \"],\" << std::endl;\n-      indentation.decrement();\n+      indentation.decrement ();\n     }\n \n-  indentation.increment();\n+  indentation.increment ();\n   stream << indentation;\n   //\n \n@@ -53,14 +53,14 @@ Dump::go (HIR::Crate &crate)\n     }\n   stream << indentation;\n   stream << \"],\" << std::endl;\n-  indentation.decrement();\n+  indentation.decrement ();\n   //\n \n-  indentation.increment();\n+  indentation.increment ();\n   stream << indentation;\n   stream << \"node_mappings: \";\n   stream << crate.get_mappings ().as_string ();\n-  indentation.decrement();\n+  indentation.decrement ();\n \n   stream << \"\\n}\" << std::endl;\n }\n@@ -236,7 +236,7 @@ void\n Dump::visit (BlockExpr &block_expr)\n {\n   stream << \"BlockExpr: [\";\n-  indentation.increment();\n+  indentation.increment ();\n   stream << std::endl;\n   // TODO: inner attributes\n \n@@ -246,21 +246,18 @@ Dump::visit (BlockExpr &block_expr)\n       auto &stmts = block_expr.get_statements ();\n       for (auto &stmt : stmts)\n \t{\n-\t  stream << indentation;\n-\t  stream << \"Stmt: {\\n\";\n+\t  stream << indentation << \"Stmt: {\\n\";\n \t  // stream << indentation;\n \t  stmt->accept_vis (*this);\n \t  stream << \"\\n\";\n-\t  stream << indentation;\n-\t  stream << \"}\\n\";\n+\t  stream << indentation << \"}\\n\";\n \t}\n     }\n \n   // // TODO: print tail expression if exists\n \n-  indentation.decrement();\n-  stream << indentation;\n-  stream << \"]\";\n+  indentation.decrement ();\n+  stream << indentation << \"]\";\n }\n \n void\n@@ -376,21 +373,18 @@ Dump::visit (UseDeclaration &)\n void\n Dump::visit (Function &func)\n {\n-  indentation.increment();\n-  stream << indentation;\n-  stream << \"Function {\" << std::endl;\n-  indentation.increment();\n+  indentation.increment ();\n+  stream << indentation << \"Function {\" << std::endl;\n+  indentation.increment ();\n \n   // function name\n-  stream << indentation;\n-  stream << \"func_name: \";\n+  stream << indentation << \"func_name: \";\n   auto func_name = func.get_function_name ();\n   stream << func_name;\n   stream << \",\\n\";\n \n   // return type\n-  stream << indentation;\n-  stream << \"return_type: \";\n+  stream << indentation << \"return_type: \";\n   if (func.has_return_type ())\n     {\n       auto &ret_type = func.get_return_type ();\n@@ -405,36 +399,30 @@ Dump::visit (Function &func)\n   // function params\n   if (func.has_function_params ())\n     {\n-      stream << indentation;\n-      stream << \"params: [\\n\";\n-      indentation.increment();\n+      stream << indentation << \"params: [\\n\";\n+      indentation.increment ();\n       auto &func_params = func.get_function_params ();\n       for (const auto &item : func_params)\n \t{\n-\t  stream << indentation;\n-\t  stream << item.as_string ();\n-\t  stream << \",\\n\";\n+\t  stream << indentation << item.as_string () << \",\\n\";\n \t}\n \n       // parameter node mappings\n-      stream << indentation;\n-      stream << \"node_mappings: [\\n\";\n+      stream << indentation << \"node_mappings: [\\n\";\n       for (const auto &item : func_params)\n \t{\n \t  auto nmap = item.get_mappings ();\n-\t  indentation.increment();\n+\t  indentation.increment ();\n \t  stream << indentation;\n \t  auto pname = item.param_name->as_string ();\n \t  stream << pname << \": \";\n \t  stream << nmap.as_string () << \",\\n\";\n-\t  indentation.decrement();\n+\t  indentation.decrement ();\n \t}\n-      stream << indentation;\n-      stream << \"],\";\n-      indentation.decrement();\n+      stream << indentation << \"],\";\n+      indentation.decrement ();\n       stream << \"\\n\";\n-      stream << indentation;\n-      stream << \"],\";\n+      stream << indentation << \"],\";\n       stream << \"\\n\";\n     }\n \n@@ -445,17 +433,15 @@ Dump::visit (Function &func)\n \n   // func node mappings\n   stream << \"\\n\";\n-  stream << indentation;\n-  stream << \"node_mappings: \";\n+  stream << indentation << \"node_mappings: \";\n   stream << func.get_impl_mappings ().as_string ();\n-  indentation.decrement();\n+  indentation.decrement ();\n   stream << \"\\n\";\n-  stream << indentation;\n-  stream << \"}\" << std::endl;\n+  stream << indentation << \"}\" << std::endl;\n   // TODO: get function definition and visit block\n \n   // stream << std::endl;\n-  indentation.decrement();\n+  indentation.decrement ();\n }\n void\n Dump::visit (TypeAlias &)\n@@ -590,11 +576,10 @@ Dump::visit (EmptyStmt &)\n void\n Dump::visit (LetStmt &let_stmt)\n {\n-  indentation.increment();\n+  indentation.increment ();\n   // TODO: outer attributes\n-  stream << indentation;\n-  stream << \"LetStmt: {\\n\";\n-  indentation.increment();\n+  stream << indentation << \"LetStmt: {\\n\";\n+  indentation.increment ();\n   stream << indentation;\n \n   auto var_pattern = let_stmt.get_pattern ();\n@@ -610,20 +595,18 @@ Dump::visit (LetStmt &let_stmt)\n   if (let_stmt.has_init_expr ())\n     {\n       stream << \" = Expr: {\\n \";\n-      indentation.increment();\n+      indentation.increment ();\n       stream << indentation;\n       auto expr = let_stmt.get_init_expr ();\n       expr->accept_vis (*this);\n       stream << \"\\n\";\n-      stream << indentation;\n-      indentation.decrement();\n-      stream << \"}\\n\";\n+      stream << indentation << \"}\\n\";\n+      indentation.decrement ();\n     }\n-  indentation.decrement();\n-  stream << indentation;\n-  stream << \"}\\n\";\n+  indentation.decrement ();\n+  stream << indentation << \"}\\n\";\n \n-  indentation.decrement();\n+  indentation.decrement ();\n }\n void\n Dump::visit (ExprStmtWithoutBlock &expr_stmt)"}]}