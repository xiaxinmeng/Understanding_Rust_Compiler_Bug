{"sha": "feb93adf76eda52385a73eb57c5bef7c870a2564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViOTNhZGY3NmVkYTUyMzg1YTczZWI1N2M1YmVmN2M4NzBhMjU2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-02T13:43:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-02T14:55:18Z"}, "message": "tree-optimization/97630 - fix SLP cycle memory leak\n\nThis fixes SLP cycles leaking memory by maintaining a double-linked\nlist of allocatd SLP nodes we can zap when we free the alloc pool.\n\n2020-12-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97630\n\t* tree-vectorizer.h (_slp_tree::next_node,\n\t_slp_tree::prev_node): New.\n\t(vect_slp_init): Declare.\n\t(vect_slp_fini): Likewise.\n\t* tree-vectorizer.c (vectorize_loops): Call vect_slp_init/fini.\n\t(pass_slp_vectorize::execute): Likewise.\n\t* tree-vect-slp.c (vect_slp_init): New.\n\t(vect_slp_fini): Likewise.\n\t(slp_first_node): New global.\n\t(_slp_tree::_slp_tree): Link node into the SLP tree list.\n\t(_slp_tree::~_slp_tree): Delink node from the SLP tree list.", "tree": {"sha": "ab341ac008fc8dbb5f504d4850d989a1f09bf142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab341ac008fc8dbb5f504d4850d989a1f09bf142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feb93adf76eda52385a73eb57c5bef7c870a2564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb93adf76eda52385a73eb57c5bef7c870a2564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb93adf76eda52385a73eb57c5bef7c870a2564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb93adf76eda52385a73eb57c5bef7c870a2564/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad800c03d00a57fc21718c160459d9a1e8d747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad800c03d00a57fc21718c160459d9a1e8d747a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad800c03d00a57fc21718c160459d9a1e8d747a"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "3bd40cbb193bbb78b2adb7cd5134f52571527f77", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=feb93adf76eda52385a73eb57c5bef7c870a2564", "patch": "@@ -48,11 +48,28 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfganal.h\"\n #include \"tree-eh.h\"\n #include \"tree-cfg.h\"\n+#include \"alloc-pool.h\"\n \n static bool vectorizable_slp_permutation (vec_info *, gimple_stmt_iterator *,\n \t\t\t\t\t  slp_tree, stmt_vector_for_cost *);\n \n-object_allocator<_slp_tree> *slp_tree_pool;\n+static object_allocator<_slp_tree> *slp_tree_pool;\n+static slp_tree slp_first_node;\n+\n+void\n+vect_slp_init (void)\n+{\n+  slp_tree_pool = new object_allocator<_slp_tree> (\"SLP nodes\");\n+}\n+\n+void\n+vect_slp_fini (void)\n+{\n+  while (slp_first_node)\n+    delete slp_first_node;\n+  delete slp_tree_pool;\n+  slp_tree_pool = NULL;\n+}\n \n void *\n _slp_tree::operator new (size_t n)\n@@ -73,6 +90,11 @@ _slp_tree::operator delete (void *node, size_t n)\n \n _slp_tree::_slp_tree ()\n {\n+  this->prev_node = NULL;\n+  if (slp_first_node)\n+    slp_first_node->prev_node = this;\n+  this->next_node = slp_first_node;\n+  slp_first_node = this;\n   SLP_TREE_SCALAR_STMTS (this) = vNULL;\n   SLP_TREE_SCALAR_OPS (this) = vNULL;\n   SLP_TREE_VEC_STMTS (this) = vNULL;\n@@ -94,6 +116,12 @@ _slp_tree::_slp_tree ()\n \n _slp_tree::~_slp_tree ()\n {\n+  if (this->prev_node)\n+    this->prev_node->next_node = this->next_node;\n+  else\n+    slp_first_node = this->next_node;\n+  if (this->next_node)\n+    this->next_node->prev_node = this->prev_node;\n   SLP_TREE_CHILDREN (this).release ();\n   SLP_TREE_SCALAR_STMTS (this).release ();\n   SLP_TREE_SCALAR_OPS (this).release ();"}, {"sha": "f9e264220180fb5fb9528f7afe809e9734a18acf", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=feb93adf76eda52385a73eb57c5bef7c870a2564", "patch": "@@ -1171,7 +1171,7 @@ vectorize_loops (void)\n   if (vect_loops_num <= 1)\n     return 0;\n \n-  slp_tree_pool = new object_allocator<_slp_tree> (\"SLP nodes for vect\");\n+  vect_slp_init ();\n \n   if (cfun->has_simduid_loops)\n     note_simd_array_uses (&simd_array_to_simduid_htab);\n@@ -1295,8 +1295,7 @@ vectorize_loops (void)\n     shrink_simd_arrays (simd_array_to_simduid_htab, simduid_to_vf_htab);\n   delete simduid_to_vf_htab;\n   cfun->has_simduid_loops = false;\n-  delete slp_tree_pool;\n-  slp_tree_pool = NULL;\n+  vect_slp_fini ();\n \n   if (num_vectorized_loops > 0)\n     {\n@@ -1432,12 +1431,11 @@ pass_slp_vectorize::execute (function *fun)\n \t}\n     }\n \n-  slp_tree_pool = new object_allocator<_slp_tree> (\"SLP nodes for slp\");\n+  vect_slp_init ();\n \n   vect_slp_function (fun);\n \n-  delete slp_tree_pool;\n-  slp_tree_pool = NULL;\n+  vect_slp_fini ();\n \n   if (!in_loop_pipeline)\n     {"}, {"sha": "c0f786c8f34473e09f454e8c0f23731135770cc7", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb93adf76eda52385a73eb57c5bef7c870a2564/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=feb93adf76eda52385a73eb57c5bef7c870a2564", "patch": "@@ -26,7 +26,6 @@ typedef class _stmt_vec_info *stmt_vec_info;\n #include \"tree-data-ref.h\"\n #include \"tree-hash-traits.h\"\n #include \"target.h\"\n-#include \"alloc-pool.h\"\n \n \n /* Used for naming of new temporaries.  */\n@@ -116,8 +115,6 @@ typedef hash_map<tree_operand_hash,\n  ************************************************************************/\n typedef struct _slp_tree *slp_tree;\n \n-extern object_allocator<_slp_tree> *slp_tree_pool;\n-\n /* A computation tree of an SLP instance.  Each node corresponds to a group of\n    stmts to be packed in a SIMD stmt.  */\n struct _slp_tree {\n@@ -172,6 +169,10 @@ struct _slp_tree {\n \n   /* Return memory to slp_tree_pool.  */\n   static void operator delete (void *, size_t);\n+\n+  /* Linked list of nodes to release when we free the slp_tree_pool.  */\n+  slp_tree next_node;\n+  slp_tree prev_node;\n };\n \n /* The enum describes the type of operations that an SLP instance\n@@ -1963,6 +1964,8 @@ extern int vect_get_known_peeling_cost (loop_vec_info, int, int *,\n extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n \n /* In tree-vect-slp.c.  */\n+extern void vect_slp_init (void);\n+extern void vect_slp_fini (void);\n extern void vect_free_slp_instance (slp_instance);\n extern bool vect_transform_slp_perm_load (vec_info *, slp_tree, vec<tree>,\n \t\t\t\t\t  gimple_stmt_iterator *, poly_uint64,"}]}