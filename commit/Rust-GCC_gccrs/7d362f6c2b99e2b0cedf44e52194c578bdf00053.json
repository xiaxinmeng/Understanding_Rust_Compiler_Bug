{"sha": "7d362f6c2b99e2b0cedf44e52194c578bdf00053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzNjJmNmMyYjk5ZTJiMGNlZGY0NGU1MjE5NGM1NzhiZGYwMDA1Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:52:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:52:56Z"}, "message": "c-common.c (convert_vector_to_pointer_for_subscript): Remove cast to unsigned type.\n\ngcc/c-family/\n\t* c-common.c (convert_vector_to_pointer_for_subscript): Remove\n\tcast to unsigned type.\n\ngcc/\n\t* tree.h (tree_to_uhwi): Return an unsigned HOST_WIDE_INT.\n\t* tree.c (tree_to_uhwi): Return an unsigned HOST_WIDE_INT.\n\t(tree_ctz): Remove cast to unsigned type.\n\t* builtins.c (fold_builtin_memory_op): Likewise.\n\t* dwarf2out.c (descr_info_loc): Likewise.\n\t* godump.c (go_output_typedef): Likewise.\n\t* omp-low.c (expand_omp_simd): Likewise.\n\t* stor-layout.c (excess_unit_span): Likewise.\n\t* tree-object-size.c (addr_object_size): Likewise.\n\t* tree-sra.c (analyze_all_variable_accesses): Likewise.\n\t* tree-ssa-forwprop.c (simplify_builtin_call): Likewise.\n\t(simplify_rotate): Likewise.\n\t* tree-ssa-strlen.c (adjust_last_stmt, handle_builtin_memcpy)\n\t(handle_pointer_plus): Likewise.\n\t* tree-switch-conversion.c (check_range): Likewise.\n\t* tree-vect-patterns.c (vect_recog_rotate_pattern): Likewise.\n\t* tsan.c (instrument_builtin_call): Likewise.\n\t* cfgexpand.c (defer_stack_allocation): Add cast to HOST_WIDE_INT.\n\t* trans-mem.c (tm_log_add): Likewise.\n\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Likewise.\n\t* config/arm/arm.c (aapcs_vfp_sub_candidate): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_aggregate_candidate): Likewise.\n\t* config/mips/mips.c (r10k_safe_mem_expr_p): Make offset unsigned.\n\nFrom-SVN: r204964", "tree": {"sha": "bc3f5ccb003ab318e04d250e0610c40cf5569900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc3f5ccb003ab318e04d250e0610c40cf5569900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d362f6c2b99e2b0cedf44e52194c578bdf00053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d362f6c2b99e2b0cedf44e52194c578bdf00053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d362f6c2b99e2b0cedf44e52194c578bdf00053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d362f6c2b99e2b0cedf44e52194c578bdf00053/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b"}], "stats": {"total": 123, "additions": 69, "deletions": 54}, "files": [{"sha": "7220961ba607c459a991eeea1aaffac8d7c2be55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1,3 +1,29 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree.h (tree_to_uhwi): Return an unsigned HOST_WIDE_INT.\n+\t* tree.c (tree_to_uhwi): Return an unsigned HOST_WIDE_INT.\n+\t(tree_ctz): Remove cast to unsigned type.\n+\t* builtins.c (fold_builtin_memory_op): Likewise.\n+\t* dwarf2out.c (descr_info_loc): Likewise.\n+\t* godump.c (go_output_typedef): Likewise.\n+\t* omp-low.c (expand_omp_simd): Likewise.\n+\t* stor-layout.c (excess_unit_span): Likewise.\n+\t* tree-object-size.c (addr_object_size): Likewise.\n+\t* tree-sra.c (analyze_all_variable_accesses): Likewise.\n+\t* tree-ssa-forwprop.c (simplify_builtin_call): Likewise.\n+\t(simplify_rotate): Likewise.\n+\t* tree-ssa-strlen.c (adjust_last_stmt, handle_builtin_memcpy)\n+\t(handle_pointer_plus): Likewise.\n+\t* tree-switch-conversion.c (check_range): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_rotate_pattern): Likewise.\n+\t* tsan.c (instrument_builtin_call): Likewise.\n+\t* cfgexpand.c (defer_stack_allocation): Add cast to HOST_WIDE_INT.\n+\t* trans-mem.c (tm_log_add): Likewise.\n+\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Likewise.\n+\t* config/arm/arm.c (aapcs_vfp_sub_candidate): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_aggregate_candidate): Likewise.\n+\t* config/mips/mips.c (r10k_safe_mem_expr_p): Make offset unsigned.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree.h (host_integerp, tree_low_cst): Delete."}, {"sha": "39d40cb75e7bcd890110dab4690b03de9d5dff2f", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -8781,7 +8781,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  if (readonly_data_expr (src)\n \t      || (tree_fits_uhwi_p (len)\n \t\t  && (MIN (src_align, dest_align) / BITS_PER_UNIT\n-\t\t      >= (unsigned HOST_WIDE_INT) tree_to_uhwi (len))))\n+\t\t      >= tree_to_uhwi (len))))\n \t    {\n \t      tree fn = builtin_decl_implicit (BUILT_IN_MEMCPY);\n \t      if (!fn)"}, {"sha": "113b4edda79f882bdf6c4e42410a6bb1b052234c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-common.c (convert_vector_to_pointer_for_subscript): Remove\n+\tcast to unsigned type.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-common.c (fold_offsetof_1): Use tree_to_uhwi rather than"}, {"sha": "83d6253cbfd497fea4649a209b376402259f036a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -11702,8 +11702,7 @@ convert_vector_to_pointer_for_subscript (location_t loc,\n \n       if (TREE_CODE (index) == INTEGER_CST)\n         if (!tree_fits_uhwi_p (index)\n-            || ((unsigned HOST_WIDE_INT) tree_to_uhwi (index)\n-               >= TYPE_VECTOR_SUBPARTS (type)))\n+            || tree_to_uhwi (index) >= TYPE_VECTOR_SUBPARTS (type))\n           warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n \n       c_common_mark_addressable_vec (*vecp);"}, {"sha": "85732c8f0d7596966c284165dc5b2d1ed07b5f56", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1133,7 +1133,7 @@ defer_stack_allocation (tree var, bool toplevel)\n   /* Whether the variable is small enough for immediate allocation not to be\n      a problem with regard to the frame size.  */\n   bool smallish\n-    = (tree_to_uhwi (DECL_SIZE_UNIT (var))\n+    = ((HOST_WIDE_INT) tree_to_uhwi (DECL_SIZE_UNIT (var))\n        < PARAM_VALUE (PARAM_MIN_SIZE_FOR_STACK_SHARING));\n \n   /* If stack protection is enabled, *all* stack variables must be deferred,"}, {"sha": "edd378ce69d8df32d3b10356d8679b5080bea6e5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -6041,7 +6041,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -6071,7 +6071,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -6103,7 +6103,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n "}, {"sha": "3ee27b4b7be1ad9aba36804d7510a32daa481107", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -4739,7 +4739,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -4769,7 +4769,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -4801,7 +4801,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n "}, {"sha": "80bbb00c2c8465c5bc0cd11a0812ebbda0168765", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -14927,7 +14927,7 @@ r10k_safe_address_p (rtx x, rtx insn)\n    a link-time-constant address.  */\n \n static bool\n-r10k_safe_mem_expr_p (tree expr, HOST_WIDE_INT offset)\n+r10k_safe_mem_expr_p (tree expr, unsigned HOST_WIDE_INT offset)\n {\n   HOST_WIDE_INT bitoffset, bitsize;\n   tree inner, var_offset;\n@@ -14940,7 +14940,7 @@ r10k_safe_mem_expr_p (tree expr, HOST_WIDE_INT offset)\n     return false;\n \n   offset += bitoffset / BITS_PER_UNIT;\n-  return offset >= 0 && offset < tree_to_uhwi (DECL_SIZE_UNIT (inner));\n+  return offset < tree_to_uhwi (DECL_SIZE_UNIT (inner));\n }\n \n /* A for_each_rtx callback for which DATA points to the instruction"}, {"sha": "bfa061c8c6e4029a25a56ed2c2fb5f3510a33860", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -8564,7 +8564,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -8594,7 +8594,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -8626,7 +8626,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_to_uhwi (TYPE_SIZE (type))\n+\t    || ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n "}, {"sha": "0095507ee1a6442b7502d38e9ccbc9bdc4afc80d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -17073,8 +17073,7 @@ descr_info_loc (tree val, tree base_decl)\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n       if (tree_fits_uhwi_p (TREE_OPERAND (val, 1))\n-\t  && (unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (val, 1))\n-\t     < 16384)\n+\t  && tree_to_uhwi (TREE_OPERAND (val, 1)) < 16384)\n \t{\n \t  loc = descr_info_loc (TREE_OPERAND (val, 0), base_decl);\n \t  if (!loc)"}, {"sha": "3efbc7c988b100eb185b38f0adfe39650cf4eaa4", "filename": "gcc/godump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -986,8 +986,7 @@ go_output_typedef (struct godump_container *container, tree decl)\n \t\t     tree_to_shwi (TREE_VALUE (element)));\n \t  else if (tree_fits_uhwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t     ((unsigned HOST_WIDE_INT)\n-\t\t      tree_to_uhwi (TREE_VALUE (element))));\n+\t\t      tree_to_uhwi (TREE_VALUE (element)));\n \t  else\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t     ((unsigned HOST_WIDE_INT)"}, {"sha": "f850f53e441957d2cff45864ef31a203500584d0", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -6770,8 +6770,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t{\n \t  safelen = OMP_CLAUSE_SAFELEN_EXPR (safelen);\n \t  if (!tree_fits_uhwi_p (safelen)\n-\t      || (unsigned HOST_WIDE_INT) tree_to_uhwi (safelen)\n-\t\t > INT_MAX)\n+\t      || tree_to_uhwi (safelen) > INT_MAX)\n \t    loop->safelen = INT_MAX;\n \t  else\n \t    loop->safelen = tree_to_uhwi (safelen);"}, {"sha": "535b897f80c02c8fcb8871ce8157546b1032833e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1053,8 +1053,7 @@ excess_unit_span (HOST_WIDE_INT byte_offset, HOST_WIDE_INT bit_offset,\n \n   offset = offset % align;\n   return ((offset + size + align - 1) / align\n-\t  > ((unsigned HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n-\t     / align));\n+\t  > tree_to_uhwi (TYPE_SIZE (type)) / align);\n }\n #endif\n "}, {"sha": "879f37b9177cc04f88dad950e5038c5e678cff21", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1104,7 +1104,7 @@ tm_log_add (basic_block entry_block, tree addr, gimple stmt)\n \t  && transaction_invariant_address_p (lp->addr, entry_block)\n \t  && TYPE_SIZE_UNIT (type) != NULL\n \t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n-\t  && (tree_to_uhwi (TYPE_SIZE_UNIT (type))\n+\t  && ((HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE_UNIT (type))\n \t      < PARAM_VALUE (PARAM_TM_MAX_AGGREGATE_SIZE))\n \t  /* We must be able to copy this type normally.  I.e., no\n \t     special constructors and the like.  */"}, {"sha": "51a5d590a2cb28455392df43c52a2456a2a68222", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -210,15 +210,13 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n   else if (pt_var\n \t   && DECL_P (pt_var)\n \t   && tree_fits_uhwi_p (DECL_SIZE_UNIT (pt_var))\n-\t   && (unsigned HOST_WIDE_INT)\n-\t        tree_to_uhwi (DECL_SIZE_UNIT (pt_var)) < offset_limit)\n+\t   && tree_to_uhwi (DECL_SIZE_UNIT (pt_var)) < offset_limit)\n     pt_var_size = DECL_SIZE_UNIT (pt_var);\n   else if (pt_var\n \t   && TREE_CODE (pt_var) == STRING_CST\n \t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n \t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n-\t   && (unsigned HOST_WIDE_INT)\n-\t      tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n+\t   && tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n \t      < offset_limit)\n     pt_var_size = TYPE_SIZE_UNIT (TREE_TYPE (pt_var));\n   else"}, {"sha": "b4b17882d2a9e602cd8b80a61ee1e7caccc04831", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -2488,7 +2488,7 @@ analyze_all_variable_accesses (void)\n \tif (TREE_CODE (var) == VAR_DECL\n \t    && type_consists_of_records_p (TREE_TYPE (var)))\n \t  {\n-\t    if ((unsigned) tree_to_uhwi (TYPE_SIZE (TREE_TYPE (var)))\n+\t    if (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (var)))\n \t\t<= max_total_scalarization_size)\n \t      {\n \t\tcompletely_scalarize_var (var);"}, {"sha": "817fa9f461451ef2adef7d47618287a550d22c8b", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1601,7 +1601,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t     as the new memcpy length, if it is too big, bail out.  */\n \t  src_len = tree_to_uhwi (diff);\n \t  src_len += tree_to_uhwi (len2);\n-\t  if (src_len < (unsigned HOST_WIDE_INT) tree_to_uhwi (len1))\n+\t  if (src_len < tree_to_uhwi (len1))\n \t    src_len = tree_to_uhwi (len1);\n \t  if (src_len > 1024)\n \t    break;\n@@ -2319,7 +2319,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n   /* CNT1 + CNT2 == B case above.  */\n   if (tree_fits_uhwi_p (def_arg2[0])\n       && tree_fits_uhwi_p (def_arg2[1])\n-      && (unsigned HOST_WIDE_INT) tree_to_uhwi (def_arg2[0])\n+      && tree_to_uhwi (def_arg2[0])\n \t + tree_to_uhwi (def_arg2[1]) == TYPE_PRECISION (rtype))\n     rotcnt = def_arg2[0];\n   else if (TREE_CODE (def_arg2[0]) != SSA_NAME"}, {"sha": "04e9ef4a0e2b0fbe8b34da3da681a9a2ff3b0ce3", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -850,12 +850,11 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n     {\n       if (!tree_fits_uhwi_p (last.len)\n \t  || integer_zerop (len)\n-\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (len)\n-\t     != (unsigned HOST_WIDE_INT) tree_to_uhwi (last.len) + 1)\n+\t  || tree_to_uhwi (len) != tree_to_uhwi (last.len) + 1)\n \treturn;\n       /* Don't adjust the length if it is divisible by 4, it is more efficient\n \t to store the extra '\\0' in that case.  */\n-      if ((((unsigned HOST_WIDE_INT) tree_to_uhwi (len)) & 3) == 0)\n+      if ((tree_to_uhwi (len) & 3) == 0)\n \treturn;\n     }\n   else if (TREE_CODE (len) == SSA_NAME)\n@@ -1337,8 +1336,7 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       /* Handle memcpy (x, \"abcd\", 5) or\n \t memcpy (x, \"abc\\0uvw\", 7).  */\n       if (!tree_fits_uhwi_p (len)\n-\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (len)\n-\t     <= (unsigned HOST_WIDE_INT) ~idx)\n+\t  || tree_to_uhwi (len) <= (unsigned HOST_WIDE_INT) ~idx)\n \treturn;\n     }\n \n@@ -1627,8 +1625,7 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n     {\n       tree off = gimple_assign_rhs2 (stmt);\n       if (tree_fits_uhwi_p (off)\n-\t  && (unsigned HOST_WIDE_INT) tree_to_uhwi (off)\n-\t     <= (unsigned HOST_WIDE_INT) ~idx)\n+\t  && tree_to_uhwi (off) <= (unsigned HOST_WIDE_INT) ~idx)\n \tssa_ver_to_stridx[SSA_NAME_VERSION (lhs)]\n \t    = ~(~idx - (int) tree_to_uhwi (off));\n       return;"}, {"sha": "fa31e22d525d43df2b1cf834169d4a01e8abf226", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -701,7 +701,7 @@ check_range (struct switch_conv_info *info)\n       return false;\n     }\n \n-  if ((unsigned HOST_WIDE_INT) tree_to_uhwi (info->range_size)\n+  if (tree_to_uhwi (info->range_size)\n       > ((unsigned) info->count * SWITCH_CONVERSION_BRANCH_RATIO))\n     {\n       info->reason = \"the maximum range-branch ratio exceeded\";"}, {"sha": "0992fbc9c7358882ebc00086b47fb1637cbe71be", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -1636,8 +1636,7 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n   if (TREE_CODE (def) == INTEGER_CST)\n     {\n       if (!tree_fits_uhwi_p (def)\n-\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (def)\n-\t     >= GET_MODE_PRECISION (TYPE_MODE (type))\n+\t  || tree_to_uhwi (def) >= GET_MODE_PRECISION (TYPE_MODE (type))\n \t  || integer_zerop (def))\n \treturn NULL;\n       def2 = build_int_cst (stype,"}, {"sha": "5e098b5e32e07fcd9cefb12c09330e578e3c5f37", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -2211,17 +2211,15 @@ tree_ctz (const_tree expr)\n     case LSHIFT_EXPR:\n       ret1 = tree_ctz (TREE_OPERAND (expr, 0));\n       if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n-\t  && ((unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (expr, 1))\n-\t      < (unsigned HOST_WIDE_INT) prec))\n+\t  && (tree_to_uhwi (TREE_OPERAND (expr, 1)) < prec))\n \t{\n \t  ret2 = tree_to_uhwi (TREE_OPERAND (expr, 1));\n \t  return MIN (ret1 + ret2, prec);\n \t}\n       return ret1;\n     case RSHIFT_EXPR:\n       if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n-\t  && ((unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (expr, 1))\n-\t      < (unsigned HOST_WIDE_INT) prec))\n+\t  && (tree_to_uhwi (TREE_OPERAND (expr, 1)) < prec))\n \t{\n \t  ret1 = tree_ctz (TREE_OPERAND (expr, 0));\n \t  ret2 = tree_to_uhwi (TREE_OPERAND (expr, 1));\n@@ -7011,7 +7009,7 @@ tree_to_shwi (const_tree t)\n    TYPE_UNSIGNED) fits in an unsigned HOST_WIDE_INT.  Return that\n    HOST_WIDE_INT.  */\n \n-HOST_WIDE_INT\n+unsigned HOST_WIDE_INT\n tree_to_uhwi (const_tree t)\n {\n   gcc_assert (tree_fits_uhwi_p (t));"}, {"sha": "f63672c0897c9a8cf81c1dad509fadd2a6fd522b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -3668,7 +3668,7 @@ extern bool tree_fits_uhwi_p (const_tree)\n #endif\n   ;\n extern HOST_WIDE_INT tree_to_shwi (const_tree);\n-extern HOST_WIDE_INT tree_to_uhwi (const_tree);\n+extern unsigned HOST_WIDE_INT tree_to_uhwi (const_tree);\n #if !defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 4003)\n extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT\n tree_to_shwi (const_tree t)\n@@ -3677,7 +3677,7 @@ tree_to_shwi (const_tree t)\n   return TREE_INT_CST_LOW (t);\n }\n \n-extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT\n+extern inline __attribute__ ((__gnu_inline__)) unsigned HOST_WIDE_INT\n tree_to_uhwi (const_tree t)\n {\n   gcc_assert (tree_fits_uhwi_p (t));"}, {"sha": "b8f65af65411a0da92b88e198cf8de57a4e8c5ca", "filename": "gcc/tsan.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d362f6c2b99e2b0cedf44e52194c578bdf00053/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=7d362f6c2b99e2b0cedf44e52194c578bdf00053", "patch": "@@ -448,8 +448,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t  case fetch_op:\n \t    last_arg = gimple_call_arg (stmt, num - 1);\n \t    if (!tree_fits_uhwi_p (last_arg)\n-\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (last_arg)\n-\t\t   > MEMMODEL_SEQ_CST)\n+\t\t|| tree_to_uhwi (last_arg) > MEMMODEL_SEQ_CST)\n \t      return;\n \t    gimple_call_set_fndecl (stmt, decl);\n \t    update_stmt (stmt);\n@@ -520,12 +519,10 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t    for (j = 0; j < 6; j++)\n \t      args[j] = gimple_call_arg (stmt, j);\n \t    if (!tree_fits_uhwi_p (args[4])\n-\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (args[4])\n-\t\t   > MEMMODEL_SEQ_CST)\n+\t\t|| tree_to_uhwi (args[4]) > MEMMODEL_SEQ_CST)\n \t      return;\n \t    if (!tree_fits_uhwi_p (args[5])\n-\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (args[5])\n-\t\t   > MEMMODEL_SEQ_CST)\n+\t\t|| tree_to_uhwi (args[5]) > MEMMODEL_SEQ_CST)\n \t      return;\n \t    update_gimple_call (gsi, decl, 5, args[0], args[1], args[2],\n \t\t\t\targs[4], args[5]);"}]}