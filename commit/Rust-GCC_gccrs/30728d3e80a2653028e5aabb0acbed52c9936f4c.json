{"sha": "30728d3e80a2653028e5aabb0acbed52c9936f4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3MjhkM2U4MGEyNjUzMDI4ZTVhYWJiMGFjYmVkNTJjOTkzNmY0Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-18T21:59:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-18T21:59:12Z"}, "message": "compiler: fix test for mismatch between function results and uses\n\nTest is http://codereview.appspot.com/111360045 .\n\nFrom-SVN: r212830", "tree": {"sha": "bb24d5d2976aba0f2dec4db00e327105e4b46cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb24d5d2976aba0f2dec4db00e327105e4b46cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30728d3e80a2653028e5aabb0acbed52c9936f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30728d3e80a2653028e5aabb0acbed52c9936f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30728d3e80a2653028e5aabb0acbed52c9936f4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30728d3e80a2653028e5aabb0acbed52c9936f4c/comments", "author": null, "committer": null, "parents": [{"sha": "6742052af4eac19acab2313a82dda5a80bd4c665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6742052af4eac19acab2313a82dda5a80bd4c665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6742052af4eac19acab2313a82dda5a80bd4c665"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "f054d0a52a28de8b8aa6cc4ce3150a91542ac6a8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=30728d3e80a2653028e5aabb0acbed52c9936f4c", "patch": "@@ -9065,6 +9065,15 @@ Call_expression::result(size_t i) const\n   return (*this->results_)[i];\n }\n \n+// Set the number of results expected from a call expression.\n+\n+void\n+Call_expression::set_expected_result_count(size_t count)\n+{\n+  go_assert(this->expected_result_count_ == 0);\n+  this->expected_result_count_ = count;\n+}\n+\n // Return whether this is a call to the predeclared function recover.\n \n bool\n@@ -9252,6 +9261,15 @@ Call_expression::do_check_types(Gogo*)\n       return;\n     }\n \n+  if (this->expected_result_count_ != 0\n+      && this->expected_result_count_ != this->result_count())\n+    {\n+      if (this->issue_error())\n+\tthis->report_error(_(\"function result count mismatch\"));\n+      this->set_is_error();\n+      return;\n+    }\n+\n   bool is_method = fntype->is_method();\n   if (is_method)\n     {\n@@ -9302,6 +9320,20 @@ Call_expression::do_check_types(Gogo*)\n       if (!is_method || this->args_->size() > 1)\n \tthis->report_error(_(\"too many arguments\"));\n     }\n+  else if (this->args_->size() == 1\n+\t   && this->args_->front()->call_expression() != NULL\n+\t   && this->args_->front()->call_expression()->result_count() > 1)\n+    {\n+      // This is F(G()) when G returns more than one result.  If the\n+      // results can be matched to parameters, it would have been\n+      // lowered in do_lower.  If we get here we know there is a\n+      // mismatch.\n+      if (this->args_->front()->call_expression()->result_count()\n+\t  < parameters->size())\n+\tthis->report_error(_(\"not enough arguments\"));\n+      else\n+\tthis->report_error(_(\"too many arguments\"));\n+    }\n   else\n     {\n       int i = 0;"}, {"sha": "0ce6f22706a8bbd664113dbd86b44a34ff62e4bb", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=30728d3e80a2653028e5aabb0acbed52c9936f4c", "patch": "@@ -1606,9 +1606,9 @@ class Call_expression : public Expression\n \t\t  Location location)\n     : Expression(EXPRESSION_CALL, location),\n       fn_(fn), args_(args), type_(NULL), results_(NULL), call_(NULL),\n-      call_temp_(NULL), is_varargs_(is_varargs), are_hidden_fields_ok_(false),\n-      varargs_are_lowered_(false), types_are_determined_(false),\n-      is_deferred_(false), issued_error_(false)\n+      call_temp_(NULL), expected_result_count_(0), is_varargs_(is_varargs),\n+      are_hidden_fields_ok_(false), varargs_are_lowered_(false),\n+      types_are_determined_(false), is_deferred_(false), issued_error_(false)\n   { }\n \n   // The function to call.\n@@ -1639,6 +1639,12 @@ class Call_expression : public Expression\n   Temporary_statement*\n   result(size_t i) const;\n \n+  // Set the number of results expected from this call.  This is used\n+  // when the call appears in a context that expects multiple results,\n+  // such as a, b = f().\n+  void\n+  set_expected_result_count(size_t);\n+\n   // Return whether this is a call to the predeclared function\n   // recover.\n   bool\n@@ -1767,6 +1773,9 @@ class Call_expression : public Expression\n   Bexpression* call_;\n   // A temporary variable to store this call if the function returns a tuple.\n   Temporary_statement* call_temp_;\n+  // If not 0, the number of results expected from this call, when\n+  // used in a context that expects multiple values.\n+  size_t expected_result_count_;\n   // True if the last argument is a varargs argument (f(a...)).\n   bool is_varargs_;\n   // True if this statement may pass hidden fields in the arguments."}, {"sha": "d7d3a072040ef14bfe147e1108ad1bd6da109560", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=30728d3e80a2653028e5aabb0acbed52c9936f4c", "patch": "@@ -1694,6 +1694,8 @@ Parse::init_vars_from_call(const Typed_identifier_list* vars, Type* type,\n   // the right number of values, but it might.  Declare the variables,\n   // and then assign the results of the call to them.\n \n+  call->set_expected_result_count(vars->size());\n+\n   Named_object* first_var = NULL;\n   unsigned int index = 0;\n   bool any_new = false;\n@@ -4101,6 +4103,7 @@ Parse::tuple_assignment(Expression_list* lhs, bool may_be_composite_lit,\n     {\n       if (op != OPERATOR_EQ)\n \terror_at(location, \"multiple results only permitted with %<=%>\");\n+      call->set_expected_result_count(lhs->size());\n       delete vals;\n       vals = new Expression_list;\n       for (unsigned int i = 0; i < lhs->size(); ++i)"}, {"sha": "c407591170a3f95254e89df304ca82c62478e2c8", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30728d3e80a2653028e5aabb0acbed52c9936f4c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=30728d3e80a2653028e5aabb0acbed52c9936f4c", "patch": "@@ -2664,6 +2664,7 @@ Return_statement::do_lower(Gogo*, Named_object* function, Block* enclosing,\n       && vals->front()->call_expression() != NULL)\n     {\n       Call_expression* call = vals->front()->call_expression();\n+      call->set_expected_result_count(results_count);\n       delete vals;\n       vals = new Expression_list;\n       for (size_t i = 0; i < results_count; ++i)"}]}