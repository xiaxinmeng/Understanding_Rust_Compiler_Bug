{"sha": "a3b6119721e9344233ac684940ea4cc0ee79e9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiNjExOTcyMWU5MzQ0MjMzYWM2ODQ5NDBlYTRjYzBlZTc5ZTljNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-29T11:46:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-29T11:46:54Z"}, "message": "random (subtract_with_carry_01<>::_M_initialize_npows): New.\n\n2006-08-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (subtract_with_carry_01<>::_M_initialize_npows):\n\tNew.\n\t(subtract_with_carry_01<>::subtract_with_carry_01(),\n\tsubtract_with_carry_01<>::subtract_with_carry_01(unsigned long),\n\tsubtract_with_carry_01<>::subtract_with_carry_01(_Gen&)): Use it.\n\t* include/tr1/random.tcc: Define.\n\n\t* include/tr1/random (xor_combine<>::_M_initialize_max()): New.\n\t(xor_combine<>::xor_combine(), xor_combine<>::xor_combine(const\n\tbase1_type&, const base2_type&), xor_combine<>::xor_combine(unsigned\n\tlong), xor_combine<>::xor_combine(_Gen&)): Use it.\n\t(xor_combine<>::min, xor_combine<>::max): Adjust.\n\t* include/tr1/random.tcc: Define.\n\nFrom-SVN: r116559", "tree": {"sha": "0b05bba61c2ae51b0060ee8beaae22c3e242dbe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b05bba61c2ae51b0060ee8beaae22c3e242dbe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b6119721e9344233ac684940ea4cc0ee79e9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b6119721e9344233ac684940ea4cc0ee79e9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b6119721e9344233ac684940ea4cc0ee79e9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b6119721e9344233ac684940ea4cc0ee79e9c5/comments", "author": null, "committer": null, "parents": [{"sha": "d99cc025420e145199dee250bb957835631f04ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99cc025420e145199dee250bb957835631f04ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99cc025420e145199dee250bb957835631f04ab"}], "stats": {"total": 116, "additions": 95, "deletions": 21}, "files": [{"sha": "cf8546c87a064763877b6d874a9f7537c8b7368a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a3b6119721e9344233ac684940ea4cc0ee79e9c5", "patch": "@@ -1,3 +1,19 @@\n+2006-08-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (subtract_with_carry_01<>::_M_initialize_npows):\n+\tNew.\n+\t(subtract_with_carry_01<>::subtract_with_carry_01(),\n+\tsubtract_with_carry_01<>::subtract_with_carry_01(unsigned long),\n+\tsubtract_with_carry_01<>::subtract_with_carry_01(_Gen&)): Use it.\n+\t* include/tr1/random.tcc: Define.\n+\n+\t* include/tr1/random (xor_combine<>::_M_initialize_max()): New.\n+\t(xor_combine<>::xor_combine(), xor_combine<>::xor_combine(const\n+\tbase1_type&, const base2_type&), xor_combine<>::xor_combine(unsigned\n+\tlong), xor_combine<>::xor_combine(_Gen&)): Use it.\n+\t(xor_combine<>::min, xor_combine<>::max): Adjust.\n+\t* include/tr1/random.tcc: Define.\n+\n 2006-08-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4(glibcxx_PCHFLAGS): Set to stdtr1c++.h."}, {"sha": "8ffdf16d7f5943d546a202413427347dd15c962b", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=a3b6119721e9344233ac684940ea4cc0ee79e9c5", "patch": "@@ -944,15 +944,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * number generator.\n        */\n       subtract_with_carry_01()\n-      { this->seed(); }\n+      {\n+\tthis->seed();\n+\t_M_initialize_npows();\n+      }\n \n       /**\n        * Constructs an explicitly seeded % subtract_with_carry_01 random number\n        * generator.\n        */\n       explicit\n       subtract_with_carry_01(unsigned long __value)\n-      { this->seed(__value); }\n+      {\n+\tthis->seed(__value);\n+\t_M_initialize_npows();\n+      }\n \n       /**\n        * Constructs a % subtract_with_carry_01 random number generator engine\n@@ -962,7 +968,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        */\n       template<class _Gen>\n         subtract_with_carry_01(_Gen& __g)\n-        { this->seed(__g); }\n+        {\n+\t  this->seed(__g);\n+\t  _M_initialize_npows();\t  \n+\t}\n \n       /**\n        * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n@@ -1081,6 +1090,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         seed(_Gen& __g, false_type);\n \n     private:\n+      void\n+      _M_initialize_npows();\n+\n       static const int __n = (__w + 31) / 32;\n \n       _UInt32Type  _M_x[long_lag][__n];\n@@ -1372,17 +1384,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       static const int shift2 = __s2;\n \n       // constructors and member function\n-      xor_combine() { }\n+      xor_combine()\n+      : _M_b1(), _M_b2()\t\n+      { _M_initialize_max(); }\n \n       xor_combine(const base1_type& __rng1, const base2_type& __rng2)\n-      : _M_b1(__rng1), _M_b2(__rng2) { }\n+      : _M_b1(__rng1), _M_b2(__rng2)\n+      { _M_initialize_max(); }\n \n       xor_combine(unsigned long __s)\n-      : _M_b1(__s), _M_b2(__s + 1) { }\n+      : _M_b1(__s), _M_b2(__s + 1)\n+      { _M_initialize_max(); }\n \n       template<class _Gen>\n         xor_combine(_Gen& __g)\n-\t: _M_b1(__g), _M_b2(__g) { }\n+\t: _M_b1(__g), _M_b2(__g)\n+        { _M_initialize_max(); }\n \n       void\n       seed()\n@@ -1407,15 +1424,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       base2() const\n       { return _M_b2; }\n \n-      // FIXME: Cannot be always correct.  FWIW, the solution in N2032\n-      // in practice isn't much better..\n+      // XXX Per N2032, but aren't always right...\n       result_type\n       min() const\n-      { return _M_b1.min() ^ _M_b2.min(); }\n+      { return 0; }\n \n       result_type\n       max() const\n-      { return _M_b1.max() | _M_b2.max(); }\n+      { return _M_max; }\n \n       /**\n        * Gets the next random number in the sequence.\n@@ -1492,8 +1508,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n \n     private:\n-      base1_type _M_b1;\n-      base2_type _M_b2;\n+      void\n+      _M_initialize_max();\n+\n+      base1_type  _M_b1;\n+      base2_type  _M_b2;\n+      result_type _M_max;\n     };\n \n "}, {"sha": "e6d4d941d5967fa3d72464f7b289c7741c45cf08", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b6119721e9344233ac684940ea4cc0ee79e9c5/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=a3b6119721e9344233ac684940ea4cc0ee79e9c5", "patch": "@@ -445,6 +445,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<typename _RealType, int __w, int __s, int __r>\n+    void\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    _M_initialize_npows()\n+    {\n+      for (int __j = 0; __j < __n; ++__j)\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t_M_npows[__j] = std::tr1::ldexp(_RealType(1), -__w + __j * 32);\n+#else\n+        _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n+#endif\n+    }\n+\n   template<typename _RealType, int __w, int __s, int __r>\n     void\n     subtract_with_carry_01<_RealType, __w, __s, __r>::\n@@ -484,14 +497,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t    }\n \n \t_M_p = 0;\n-\n-\t// Initialize the array holding the negative powers of 2.\n-\tfor (int __j = 0; __j < __n; ++__j)\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\t  _M_npows[__j] = std::tr1::ldexp(_RealType(1), -__w + __j * 32);\n-#else\n-\t  _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n-#endif\n       }\n \n   template<typename _RealType, int __w, int __s, int __r>\n@@ -637,6 +642,39 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    void\n+    xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t_UniformRandomNumberGenerator2, __s2>::\n+    _M_initialize_max()\n+    {\n+      const int __lshift = std::abs(__s1 - __s2);\n+\n+      result_type __m1 = _M_b1.max() - _M_b1.min();\n+      result_type __m2 = _M_b2.max() - _M_b2.min();\n+\n+      // NB: in TR1 s1 is not required to be >= s2.\n+      if (__s1 >= __s2)\n+\t__m1 <<= __lshift;\n+      else\n+\t__m2 <<= __lshift;\n+\n+      result_type __a = __m1 & __m2;\n+      const result_type __b = __m1 | __m2;      \n+\n+      result_type __c = 0;\n+      if (__a)\n+\t{\n+\t  result_type __k;\n+\t  for (__k = 0; __a != 1; __a >>= 1)\n+\t    ++__k;\n+\t  __c = (result_type(1) << __k) - 1;\n+\t}\n+\n+      _M_max = (__c | __b) << __lshift; \n+    }\n+\n   template<class _UniformRandomNumberGenerator1, int __s1,\n \t   class _UniformRandomNumberGenerator2, int __s2,\n \t   typename _CharT, typename _Traits>"}]}