{"sha": "d68d366425369649cb4e25a07752e25a4fff52cf", "node_id": "C_kwDOANBUbNoAKGQ2OGQzNjY0MjUzNjk2NDljYjRlMjVhMDc3NTJlMjVhNGZmZjUyY2Y", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-10T20:35:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-22T13:01:29Z"}, "message": "ubsan: default to trap on unreachable at -O0 and -Og [PR104642]\n\nWhen not optimizing, we can't do anything useful with unreachability in\nterms of code performance, so we might as well improve debugging by turning\n__builtin_unreachable into a trap.  I think it also makes sense to do this\nwhen we're explicitly optimizing for the debugging experience.\n\nIn the PR richi suggested introducing an -funreachable-traps flag for this.\nThis functionality is already implemented as -fsanitize=unreachable\n-fsanitize-trap=unreachable, and we want to share the implementation, but it\ndoes seem useful to have a separate flag that isn't affected by the various\nsanitization controls.  -fsanitize=unreachable takes priority over\n-funreachable-traps if both are enabled.\n\nJakub observed that this would slow down -O0 by default from running the\nsanopt pass, so this revision avoids the need for sanopt by rewriting calls\nintroduced by the compiler immediately, and calls written by the user at\nfold time.  Many of the calls introduced by the compiler are also rewritten\nimmediately to ubsan calls when not trapping, which fixes ubsan-8b.C;\npreviously the call to f() was optimized away before sanopt.  But this early\nrewriting isn't practical for uses of __builtin_unreachable in\ndevirtualization and such, so sanopt rewriting is still done for\nnon-trapping sanitize.\n\n\tPR c++/104642\n\ngcc/ChangeLog:\n\n\t* common.opt: Add -funreachable-traps.\n\t* doc/invoke.texi (-funreachable-traps): Document it.\n\t* opts.cc (finish_options): Enable at -O0 or -Og.\n\t* tree.cc (build_common_builtin_nodes): Add __builtin_trap.\n\t(builtin_decl_unreachable, build_builtin_unreachable): New.\n\t* tree.h: Declare them.\n\t* ubsan.cc (sanitize_unreachable_fn): Factor out.\n\t(ubsan_instrument_unreachable): Use\n\tgimple_build_builtin_unreachable.\n\t* ubsan.h (sanitize_unreachable_fn): Declare.\n\t* gimple.cc (gimple_build_builtin_unreachable): New.\n\t* gimple.h: Declare it.\n\t* builtins.cc (expand_builtin_unreachable): Add assert.\n\t(fold_builtin_0): Call build_builtin_unreachable.\n\t* sanopt.cc: Don't run for just SANITIZE_RETURN\n\tor SANITIZE_UNREACHABLE when trapping.\n\t* cgraphunit.cc (walk_polymorphic_call_targets): Use new\n\tunreachable functions.\n\t* gimple-fold.cc (gimple_fold_call)\n\t(gimple_get_virt_method_for_vtable)\n\t* ipa-fnsummary.cc (redirect_to_unreachable)\n\t* ipa-prop.cc (ipa_make_edge_direct_to_target)\n\t(ipa_impossible_devirt_target)\n\t* ipa.cc (walk_polymorphic_call_targets)\n\t* tree-cfg.cc (pass_warn_function_return::execute)\n\t(execute_fixup_cfg)\n\t* tree-ssa-loop-ivcanon.cc (remove_exits_and_undefined_stmts)\n\t(unloop_loops)\n\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt):\n\tLikewise.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_builtin_function_call): Handle\n\tunreachable/trap earlier.\n\t* cp-gimplify.cc (cp_maybe_instrument_return): Use\n\tbuild_builtin_unreachable.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ubsan/return-8a.C: New test.\n\t* g++.dg/ubsan/return-8b.C: New test.\n\t* g++.dg/ubsan/return-8d.C: New test.\n\t* g++.dg/ubsan/return-8e.C: New test.", "tree": {"sha": "5c24e85ecae155722951810c6932c0d39dcbd55f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c24e85ecae155722951810c6932c0d39dcbd55f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d68d366425369649cb4e25a07752e25a4fff52cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68d366425369649cb4e25a07752e25a4fff52cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68d366425369649cb4e25a07752e25a4fff52cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68d366425369649cb4e25a07752e25a4fff52cf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038b077689bb5310386b04d40a2cea234f01e6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038b077689bb5310386b04d40a2cea234f01e6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038b077689bb5310386b04d40a2cea234f01e6aa"}], "stats": {"total": 288, "additions": 233, "deletions": 55}, "files": [{"sha": "e6816d5c86550b724e89aad834ad3314d555a6b4", "filename": "gcc/builtins.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -5184,6 +5184,9 @@ expand_builtin_trap (void)\n static void\n expand_builtin_unreachable (void)\n {\n+  /* Use gimple_build_builtin_unreachable or builtin_decl_unreachable\n+     to avoid this.  */\n+  gcc_checking_assert (!sanitize_flags_p (SANITIZE_UNREACHABLE));\n   emit_barrier ();\n }\n \n@@ -9261,6 +9264,12 @@ fold_builtin_0 (location_t loc, tree fndecl)\n     case BUILT_IN_CLASSIFY_TYPE:\n       return fold_builtin_classify_type (NULL_TREE);\n \n+    case BUILT_IN_UNREACHABLE:\n+      /* Rewrite any explicit calls to __builtin_unreachable.  */\n+      if (sanitize_flags_p (SANITIZE_UNREACHABLE))\n+\treturn build_builtin_unreachable (loc);\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "836e759cdf1077824fd2eebf0582f98c6a469158", "filename": "gcc/cgraphunit.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcgraphunit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcgraphunit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -1033,8 +1033,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t  if (targets.length () == 1)\n \t    target = targets[0];\n \t  else\n-\t    target = cgraph_node::create\n-\t\t\t(builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n+\t    target = cgraph_node::create (builtin_decl_unreachable ());\n \n \t  if (symtab->dump_file)\n \t    {"}, {"sha": "da5d23d1de83d9d2a5e6d29dba20bd6f5c7cec40", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -3017,6 +3017,10 @@ funit-at-a-time\n Common Var(flag_unit_at_a_time) Init(1)\n Compile whole compilation unit at a time.\n \n+funreachable-traps\n+Common Var(flag_unreachable_traps) Optimization\n+Trap on __builtin_unreachable instead of using it for optimization.\n+\n funroll-loops\n Common Var(flag_unroll_loops) Optimization EnabledBy(funroll-all-loops)\n Perform loop unrolling when iteration count is known."}, {"sha": "0dc94d9445db9a0b89cb07d5ca0a69392089db49", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -1438,6 +1438,20 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \t/* These builtins shall be ignored during constant expression\n \t   evaluation.  */\n \treturn void_node;\n+      case BUILT_IN_UNREACHABLE:\n+      case BUILT_IN_TRAP:\n+\tif (!*non_constant_p && !ctx->quiet)\n+\t  {\n+\t    /* Do not allow__builtin_unreachable in constexpr function.\n+\t       The __builtin_unreachable call with BUILTINS_LOCATION\n+\t       comes from cp_maybe_instrument_return.  */\n+\t    if (EXPR_LOCATION (t) == BUILTINS_LOCATION)\n+\t      error (\"%<constexpr%> call flows off the end of the function\");\n+\t    else\n+\t      error (\"%q+E is not a constant expression\", t);\n+\t  }\n+\t*non_constant_p = true;\n+\treturn t;\n       default:\n \tbreak;\n       }\n@@ -1531,18 +1545,9 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n     {\n       if (!*non_constant_p && !ctx->quiet)\n \t{\n-\t  /* Do not allow__builtin_unreachable in constexpr function.\n-\t     The __builtin_unreachable call with BUILTINS_LOCATION\n-\t     comes from cp_maybe_instrument_return.  */\n-\t  if (fndecl_built_in_p (fun, BUILT_IN_UNREACHABLE)\n-\t      && EXPR_LOCATION (t) == BUILTINS_LOCATION)\n-\t    error (\"%<constexpr%> call flows off the end of the function\");\n-\t  else\n-\t    {\n-\t      new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n-\t\t\t\t\t       CALL_EXPR_FN (t), nargs, args);\n-\t      error (\"%q+E is not a constant expression\", new_call);\n-\t    }\n+\t  new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n+\t\t\t\t\t   CALL_EXPR_FN (t), nargs, args);\n+\t  error (\"%q+E is not a constant expression\", new_call);\n \t}\n       *non_constant_p = true;\n       return t;"}, {"sha": "c05be833357fd17fa9df55a4b024d7c191887c26", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -1814,7 +1814,7 @@ cp_maybe_instrument_return (tree fndecl)\n \t information is provided, while the __builtin_unreachable () below\n \t if return sanitization is disabled will just result in hard to\n \t understand runtime error without location.  */\n-      && (!optimize\n+      && ((!optimize && !flag_unreachable_traps)\n \t  || sanitize_flags_p (SANITIZE_UNREACHABLE, fndecl)))\n     return;\n \n@@ -1864,10 +1864,7 @@ cp_maybe_instrument_return (tree fndecl)\n   if (sanitize_flags_p (SANITIZE_RETURN, fndecl))\n     t = ubsan_instrument_return (loc);\n   else\n-    {\n-      tree fndecl = builtin_decl_explicit (BUILT_IN_UNREACHABLE);\n-      t = build_call_expr_loc (BUILTINS_LOCATION, fndecl, 0);\n-    }\n+    t = build_builtin_unreachable (BUILTINS_LOCATION);\n \n   append_to_statement_list (t, p);\n }"}, {"sha": "e7526c5a58eef790aaac277768789e65c5f1756f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -12939,6 +12939,20 @@ also at @option{-O0} if @option{-fsection-anchors} is explicitly requested.\n Additionally @option{-fno-toplevel-reorder} implies\n @option{-fno-section-anchors}.\n \n+@item -funreachable-traps\n+@opindex funreachable-traps\n+With this option, the compiler turns calls to\n+@code{__builtin_unreachable} into traps, instead of using them for\n+optimization.  This also affects any such calls implicitly generated\n+by the compiler.\n+\n+This option has the same effect as @option{-fsanitize=unreachable\n+-fsanitize-trap=unreachable}, but does not affect the values of those\n+options.  If @option{-fsanitize=unreachable} is enabled, that option\n+takes priority over this one.\n+\n+This option is enabled by default at @option{-O0} and @option{-Og}.\n+\n @item -fweb\n @opindex fweb\n Constructs webs as commonly used for register allocation purposes and assign"}, {"sha": "a1704784bc99a25800a9369a0400ae141ff11952", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -5510,9 +5510,8 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t\t}\n \t      else\n \t\t{\n-\t\t  tree fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n-\t\t  gimple *new_stmt = gimple_build_call (fndecl, 0);\n-\t\t  gimple_set_location (new_stmt, gimple_location (stmt));\n+\t\t  location_t loc = gimple_location (stmt);\n+\t\t  gimple *new_stmt = gimple_build_builtin_unreachable (loc);\n \t\t  /* If the call had a SSA name as lhs morph that into\n \t\t     an uninitialized value.  */\n \t\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n@@ -8396,7 +8395,7 @@ gimple_get_virt_method_for_vtable (HOST_WIDE_INT token,\n   if (!fn\n       || (TREE_CODE (fn) != ADDR_EXPR && TREE_CODE (fn) != FDESC_EXPR)\n       || TREE_CODE (TREE_OPERAND (fn, 0)) != FUNCTION_DECL)\n-    fn = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+    fn = builtin_decl_unreachable ();\n   else\n     {\n       fn = TREE_OPERAND (fn, 0);"}, {"sha": "9b156399ba12a9a30409d2346efb9dce059c700c", "filename": "gcc/gimple.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n+#include \"ubsan.h\"\n #include \"langhooks.h\"\n #include \"attr-fnspec.h\"\n #include \"ipa-modref-tree.h\"\n@@ -421,6 +422,18 @@ gimple_build_call_from_tree (tree t, tree fnptrtype)\n   return call;\n }\n \n+/* Build a gcall to __builtin_unreachable as rewritten by\n+   -fsanitize=unreachable.  */\n+\n+gcall *\n+gimple_build_builtin_unreachable (location_t loc)\n+{\n+  tree data = NULL_TREE;\n+  tree fn = sanitize_unreachable_fn (&data, loc);\n+  gcall *g = gimple_build_call (fn, data != NULL_TREE, data);\n+  gimple_set_location (g, loc);\n+  return g;\n+}\n \n /* Build a GIMPLE_ASSIGN statement.\n "}, {"sha": "1d15ff98ac2e15c3a6f3aa0b9fe35ea04b024505", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -1638,6 +1638,7 @@ extern void maybe_remove_unused_call_args (struct function *, gimple *);\n extern bool gimple_inexpensive_call_p (gcall *);\n extern bool stmt_can_terminate_bb_p (gimple *);\n extern location_t gimple_or_expr_nonartificial_location (gimple *, tree);\n+gcall *gimple_build_builtin_unreachable (location_t);\n \n /* Return the disposition for a warning (or all warnings by default)\n    for a statement.  */"}, {"sha": "c9564451f266e43a93c4f65769c85572af55ec16", "filename": "gcc/ipa-fnsummary.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa-fnsummary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa-fnsummary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -250,8 +250,8 @@ static struct cgraph_edge *\n redirect_to_unreachable (struct cgraph_edge *e)\n {\n   struct cgraph_node *callee = !e->inline_failed ? e->callee : NULL;\n-  struct cgraph_node *target = cgraph_node::get_create\n-\t\t      (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n+  struct cgraph_node *target\n+    = cgraph_node::get_create (builtin_decl_unreachable ());\n \n   if (e->speculative)\n     e = cgraph_edge::resolve_speculation (e, target->decl);"}, {"sha": "e1fc481423b32fa6bde0cb487505a48b524bcf6c", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -3410,7 +3410,7 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target,\n \t\t\t       ie->caller->dump_name ());\n \t    }\n \n-\t  target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t  target = builtin_decl_unreachable ();\n \t  callee = cgraph_node::get_create (target);\n \t  unreachable = true;\n \t}\n@@ -3821,7 +3821,7 @@ ipa_impossible_devirt_target (struct cgraph_edge *ie, tree target)\n \t\t \"No devirtualization target in %s\\n\",\n \t\t ie->caller->dump_name ());\n     }\n-  tree new_target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+  tree new_target = builtin_decl_unreachable ();\n   cgraph_node::get_create (new_target);\n   return new_target;\n }"}, {"sha": "4d5729f83703e15fd0cc122c5cbc5ac5acca23eb", "filename": "gcc/ipa.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fipa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -232,8 +232,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t  if (targets.length () == 1)\n \t    target = targets[0];\n \t  else\n-\t    target = cgraph_node::get_create\n-\t\t       (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n+\t    target = cgraph_node::get_create (builtin_decl_unreachable ());\n \n \t  if (dump_enabled_p ())\n \t    {"}, {"sha": "9982974c8b5089a617612cecd93cd8f4d17c2267", "filename": "gcc/opts.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -1122,6 +1122,10 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n       opts->x_flag_no_inline = 1;\n     }\n \n+  /* At -O0 or -Og, turn __builtin_unreachable into a trap.  */\n+  if (!opts->x_optimize || opts->x_optimize_debug)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_unreachable_traps, true);\n+\n   /* Pipelining of outer loops is only possible when general pipelining\n      capabilities are requested.  */\n   if (!opts->x_flag_sel_sched_pipelining)"}, {"sha": "2b05553baeb23f62dd6585a7be35269cad0c404a", "filename": "gcc/sanopt.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fsanopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fsanopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -942,7 +942,15 @@ class pass_sanopt : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_sanitize; }\n+  virtual bool gate (function *)\n+  {\n+    /* SANITIZE_RETURN is handled in the front-end.  When trapping,\n+       SANITIZE_UNREACHABLE is handled by builtin_decl_unreachable.  */\n+    unsigned int mask = SANITIZE_RETURN;\n+    if (flag_sanitize_trap & SANITIZE_UNREACHABLE)\n+      mask |= SANITIZE_UNREACHABLE;\n+    return flag_sanitize & ~mask;\n+  }\n   virtual unsigned int execute (function *);\n \n }; // class pass_sanopt"}, {"sha": "54f1c7b5326510ded106547d58e08b5532b881a8", "filename": "gcc/testsuite/g++.dg/ubsan/return-8a.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8a.C?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/104642\n+\n+// At -O0 and -Og we default to -funreachable-traps\n+// so the below should abort at runtime.\n+\n+// { dg-do run }\n+// { dg-shouldfail { *-*-* } }\n+// { dg-additional-options \"-O0\" }\n+\n+bool b;\n+\n+int f() {\n+  if (b) return 42;\n+}\t\t\t// { dg-warning \"-Wreturn-type\" }\n+\n+int main() { f(); }"}, {"sha": "bdaea60f8097eb2ec770f7dfdb618f4090d4269f", "filename": "gcc/testsuite/g++.dg/ubsan/return-8b.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8b.C?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/104642\n+\n+// With -fsanitize=unreachable we shouldn't optimize away the call to f.\n+\n+// { dg-do run }\n+// { dg-shouldfail { *-*-* } }\n+// { dg-additional-options \"-O -fsanitize=unreachable\" }\n+\n+bool b;\n+\n+int f() {\n+  if (b) return 42;\n+  __builtin_unreachable ();\n+  return 24;\n+}\n+\n+int main() { f(); }"}, {"sha": "7eaded035ae32d63c8b89f5527d546c97bf96cf6", "filename": "gcc/testsuite/g++.dg/ubsan/return-8d.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8d.C?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/104642\n+\n+// At -O0 and -Og we default to -funreachable-traps\n+// so the below should abort at runtime.\n+\n+// { dg-do run }\n+// { dg-shouldfail { *-*-* } }\n+// { dg-additional-options \"-Og\" }\n+\n+bool b;\n+\n+int f() {\n+  if (b) return 42;\n+}\t\t\t// { dg-warning \"-Wreturn-type\" }\n+\n+int main() { f(); }"}, {"sha": "fba402b35f25c3b2be80802f5f9f1d34e8f5291c", "filename": "gcc/testsuite/g++.dg/ubsan/return-8e.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8e.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8e.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-8e.C?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/104642\n+\n+// At -O0 and -Og we default to -funreachable-traps\n+// so the below should abort at runtime.\n+\n+// { dg-do run }\n+// { dg-shouldfail { *-*-* } }\n+// { dg-additional-options \"-O2\" }\n+\n+bool b;\n+\n+__attribute__ ((optimize (\"Og\")))\n+int f() {\n+  if (b) return 42;\n+}\t\t\t// { dg-warning \"-Wreturn-type\" }\n+\n+int main() { f(); }"}, {"sha": "734fdddbf976e0ac5343065ac10f8a19cff8104c", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -9503,9 +9503,8 @@ pass_warn_function_return::execute (function *fun)\n \t     with __builtin_unreachable () call.  */\n \t  if (optimize && gimple_code (last) == GIMPLE_RETURN)\n \t    {\n-\t      tree fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n-\t      gimple *new_stmt = gimple_build_call (fndecl, 0);\n-\t      gimple_set_location (new_stmt, gimple_location (last));\n+\t      location_t loc = gimple_location (last);\n+\t      gimple *new_stmt = gimple_build_builtin_unreachable (loc);\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (last);\n \t      gsi_replace (&gsi, new_stmt, true);\n \t      remove_edge (e);\n@@ -9834,7 +9833,7 @@ execute_fixup_cfg (void)\n \t    {\n \t      if (stmt && is_gimple_call (stmt))\n \t\tgimple_call_set_ctrl_altering (stmt, false);\n-\t      tree fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t      tree fndecl = builtin_decl_unreachable ();\n \t      stmt = gimple_build_call (fndecl, 0);\n \t      gimple_stmt_iterator gsi = gsi_last_bb (bb);\n \t      gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);"}, {"sha": "6a38b77ab7ac24e20e86c1517f49af4f73ee3b8c", "filename": "gcc/tree-ssa-loop-ivcanon.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-ssa-loop-ivcanon.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-ssa-loop-ivcanon.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -505,9 +505,8 @@ remove_exits_and_undefined_stmts (class loop *loop, unsigned int npeeled)\n \t  && wi::ltu_p (elt->bound, npeeled))\n \t{\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (elt->stmt);\n-\t  gcall *stmt = gimple_build_call\n-\t      (builtin_decl_implicit (BUILT_IN_UNREACHABLE), 0);\n-\t  gimple_set_location (stmt, gimple_location (elt->stmt));\n+\t  location_t loc = gimple_location (elt->stmt);\n+\t  gcall *stmt = gimple_build_builtin_unreachable (loc);\n \t  gsi_insert_before (&gsi, stmt, GSI_NEW_STMT);\n \t  split_block (gimple_bb (stmt), stmt);\n \t  changed = true;\n@@ -641,7 +640,7 @@ unloop_loops (bitmap loop_closed_ssa_invalidated,\n \n       /* Create new basic block for the latch edge destination and wire\n \t it in.  */\n-      stmt = gimple_build_call (builtin_decl_implicit (BUILT_IN_UNREACHABLE), 0);\n+      stmt = gimple_build_builtin_unreachable (locus);\n       latch_edge = make_edge (latch, create_basic_block (NULL, NULL, latch), flags);\n       latch_edge->probability = profile_probability::never ();\n       latch_edge->flags |= flags;"}, {"sha": "776dccbbf5a08c5a292961bd5a80134e1edcd870", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -6807,7 +6807,7 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t      if (targets.length () == 1)\n \t\tfn = targets[0]->decl;\n \t      else\n-\t\tfn = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t\tfn = builtin_decl_unreachable ();\n \t      if (dump_enabled_p ())\n \t\t{\n \t\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, stmt,"}, {"sha": "84000dd8b697ad9cb781ffaf5c2c378d363a8d21", "filename": "gcc/tree.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -71,6 +71,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-range.h\"\n #include \"gomp-constants.h\"\n #include \"dfp.h\"\n+#include \"asan.h\"\n+#include \"ubsan.h\"\n \n /* Tree code classes.  */\n \n@@ -9649,6 +9651,7 @@ build_common_builtin_nodes (void)\n     }\n \n   if (!builtin_decl_explicit_p (BUILT_IN_UNREACHABLE)\n+      || !builtin_decl_explicit_p (BUILT_IN_TRAP)\n       || !builtin_decl_explicit_p (BUILT_IN_ABORT))\n     {\n       ftype = build_function_type (void_type_node, void_list_node);\n@@ -9662,6 +9665,10 @@ build_common_builtin_nodes (void)\n \tlocal_define_builtin (\"__builtin_abort\", ftype, BUILT_IN_ABORT,\n \t\t\t      \"abort\",\n \t\t\t      ECF_LEAF | ECF_NORETURN | ECF_CONST | ECF_COLD);\n+      if (!builtin_decl_explicit_p (BUILT_IN_TRAP))\n+\tlocal_define_builtin (\"__builtin_trap\", ftype, BUILT_IN_TRAP,\n+\t\t\t      \"__builtin_trap\",\n+\t\t\t      ECF_NORETURN | ECF_NOTHROW | ECF_LEAF | ECF_COLD);\n     }\n \n   if (!builtin_decl_explicit_p (BUILT_IN_MEMCPY)\n@@ -10779,6 +10786,39 @@ build_alloca_call_expr (tree size, unsigned int align, HOST_WIDE_INT max_size)\n     }\n }\n \n+/* The built-in decl to use to mark code points believed to be unreachable.\n+   Typically __builtin_unreachable, but __builtin_trap if\n+   -fsanitize=unreachable -fsanitize-trap=unreachable.  If only\n+   -fsanitize=unreachable, we rely on sanopt to replace calls with the\n+   appropriate ubsan function.  When building a call directly, use\n+   {gimple_},build_builtin_unreachable instead.  */\n+\n+tree\n+builtin_decl_unreachable ()\n+{\n+  enum built_in_function fncode = BUILT_IN_UNREACHABLE;\n+\n+  if (sanitize_flags_p (SANITIZE_UNREACHABLE)\n+      ? (flag_sanitize_trap & SANITIZE_UNREACHABLE)\n+      : flag_unreachable_traps)\n+    fncode = BUILT_IN_TRAP;\n+  /* For non-trapping sanitize, we will rewrite __builtin_unreachable () later,\n+     in the sanopt pass.  */\n+\n+  return builtin_decl_explicit (fncode);\n+}\n+\n+/* Build a call to __builtin_unreachable, possibly rewritten by\n+   -fsanitize=unreachable.  Use this rather than the above when practical.  */\n+\n+tree\n+build_builtin_unreachable (location_t loc)\n+{\n+  tree data = NULL_TREE;\n+  tree fn = sanitize_unreachable_fn (&data, loc);\n+  return build_call_expr_loc (loc, fn, data != NULL_TREE, data);\n+}\n+\n /* Create a new constant string literal of type ELTYPE[SIZE] (or LEN\n    if SIZE == -1) and return a tree node representing char* pointer to\n    it as an ADDR_EXPR (ARRAY_REF (ELTYPE, ...)).  When STR is nonnull"}, {"sha": "6f6ad5a3a5f4dd4173482dfe259acf539ba24000", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -5858,6 +5858,11 @@ builtin_decl_implicit (enum built_in_function fncode)\n   return builtin_info[uns_fncode].decl;\n }\n \n+/* For BUILTIN_UNREACHABLE, use one of these or\n+   gimple_build_builtin_unreachable instead of one of the above.  */\n+extern tree builtin_decl_unreachable ();\n+extern tree build_builtin_unreachable (location_t);\n+\n /* Set explicit builtin function nodes and whether it is an implicit\n    function.  */\n "}, {"sha": "f15026872a136c87bc569d6d6128a0b581762d87", "filename": "gcc/ubsan.cc", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.cc?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -638,27 +638,43 @@ ubsan_create_data (const char *name, int loccnt, const location_t *ploc, ...)\n   return var;\n }\n \n-/* Instrument the __builtin_unreachable call.  We just call the libubsan\n-   routine instead.  */\n+/* Shared between *build_builtin_unreachable.  */\n \n-bool\n-ubsan_instrument_unreachable (gimple_stmt_iterator *gsi)\n+tree\n+sanitize_unreachable_fn (tree *data, location_t loc)\n {\n-  gimple *g;\n-  location_t loc = gimple_location (gsi_stmt (*gsi));\n-\n-  if (flag_sanitize_trap & SANITIZE_UNREACHABLE)\n-    g = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  tree fn = NULL_TREE;\n+  bool san = sanitize_flags_p (SANITIZE_UNREACHABLE);\n+  if (san\n+      ? (flag_sanitize_trap & SANITIZE_UNREACHABLE)\n+      : flag_unreachable_traps)\n+    {\n+      fn = builtin_decl_explicit (BUILT_IN_TRAP);\n+      *data = NULL_TREE;\n+    }\n+  else if (san)\n+    {\n+      fn = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE);\n+      *data = ubsan_create_data (\"__ubsan_unreachable_data\", 1, &loc,\n+\t\t\t\t NULL_TREE, NULL_TREE);\n+      *data = build_fold_addr_expr_loc (loc, *data);\n+    }\n   else\n     {\n-      tree data = ubsan_create_data (\"__ubsan_unreachable_data\", 1, &loc,\n-\t\t\t\t     NULL_TREE, NULL_TREE);\n-      data = build_fold_addr_expr_loc (loc, data);\n-      tree fn\n-\t= builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE);\n-      g = gimple_build_call (fn, 1, data);\n+      fn = builtin_decl_explicit (BUILT_IN_UNREACHABLE);\n+      *data = NULL_TREE;\n     }\n-  gimple_set_location (g, loc);\n+  return fn;\n+}\n+\n+/* Rewrite a gcall to __builtin_unreachable for -fsanitize=unreachable.  Called\n+   by the sanopt pass.  */\n+\n+bool\n+ubsan_instrument_unreachable (gimple_stmt_iterator *gsi)\n+{\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n+  gimple *g = gimple_build_builtin_unreachable (loc);\n   gsi_replace (gsi, g, false);\n   return false;\n }"}, {"sha": "71a40a399e4bb9a9a9d67cad8c12d26ed8cc3f47", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d366425369649cb4e25a07752e25a4fff52cf/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=d68d366425369649cb4e25a07752e25a4fff52cf", "patch": "@@ -65,5 +65,6 @@ extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree,\n \t\t\t\t\t  tree, tree *);\n extern tree ubsan_instrument_float_cast (location_t, tree, tree);\n extern tree ubsan_get_source_location_type (void);\n+extern tree sanitize_unreachable_fn (tree *data, location_t loc);\n \n #endif  /* GCC_UBSAN_H  */"}]}