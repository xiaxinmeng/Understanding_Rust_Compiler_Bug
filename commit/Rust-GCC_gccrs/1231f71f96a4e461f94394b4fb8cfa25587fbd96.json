{"sha": "1231f71f96a4e461f94394b4fb8cfa25587fbd96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMWY3MWY5NmE0ZTQ2MWY5NDM5NGI0ZmI4Y2ZhMjU1ODdmYmQ5Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-26T20:02:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-27T02:56:57Z"}, "message": "c++: Fix ICE with invalid array bounds [PR93789]\n\nr7-2111 introduced maybe_constant_value in cp_fully_fold.\nmaybe_constant_value uses cxx_eval_outermost_constant_expr, which\ncan clear TREE_CONSTANT:\n6510   else if (non_constant_p && TREE_CONSTANT (r))\n[...]\n6529       TREE_CONSTANT (r) = false;\n\nIn this test the array size is '(long int) \"h\"'.  This used to be\nTREE_CONSTANT but given the change above, the flag will be cleared\nwhen we cp_fully_fold the array size in compute_array_index_type_loc.\nThat means we don't emit an error in the\n10391   else if (TREE_CONSTANT (size)\nblock in the same function, and we go on.  Then we compute ITYPE\nusing cp_build_binary_op and use maybe_constant_value on it and\nsuddenly we have something that's TREE_CONSTANT again.  And then we\ncrash in reshape_init_array_1 in tree_to_uhwi, because what we have\ndoesn't fit in an unsigned HWI.\n\nicc accepts this code, but since we used to reject it, I see no desire\nto make this work, so don't use the folded result when we've lost\nthe TREE_CONSTANT flag while evaluating the size.\n\n2020-02-26  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93789 - ICE with invalid array bounds.\n\t* decl.c (compute_array_index_type_loc): Don't use the folded\n\tsize when folding cleared TREE_CONSTANT.\n\n\t* g++.dg/ext/vla22.C: New test.", "tree": {"sha": "3d6f576c891a39c4aeb3f9729debbc4cf21cb04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6f576c891a39c4aeb3f9729debbc4cf21cb04d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1231f71f96a4e461f94394b4fb8cfa25587fbd96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1231f71f96a4e461f94394b4fb8cfa25587fbd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1231f71f96a4e461f94394b4fb8cfa25587fbd96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1231f71f96a4e461f94394b4fb8cfa25587fbd96/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "b2d952d822014ff7cedf2648a68227ea3161f172", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1231f71f96a4e461f94394b4fb8cfa25587fbd96", "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93789 - ICE with invalid array bounds.\n+\t* decl.c (compute_array_index_type_loc): Don't use the folded\n+\tsize when folding cleared TREE_CONSTANT.\n+\n 2020-02-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* class.c (classtype_has_non_deleted_copy_ctor): New."}, {"sha": "e3f4b435a4905d38e66215a8343f96429af834a0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1231f71f96a4e461f94394b4fb8cfa25587fbd96", "patch": "@@ -10338,9 +10338,14 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"size of array is not an integral constant-expression\");\n \t}\n-      /* Use the folded result for VLAs, too; it will have resolved\n-\t SIZEOF_EXPR.  */\n-      size = folded;\n+      if (TREE_CONSTANT (size) && !TREE_CONSTANT (folded))\n+\t/* We might have lost the TREE_CONSTANT flag e.g. when we are\n+\t   folding a conversion from a pointer to integral type.  In that\n+\t   case issue an error below and don't treat this as a VLA.  */;\n+      else\n+\t/* Use the folded result for VLAs, too; it will have resolved\n+\t   SIZEOF_EXPR.  */\n+\tsize = folded;\n     }\n \n   /* Normally, the array-bound will be a constant.  */"}, {"sha": "085537d977b3a75c4526d5e9694e0e36ff53a0c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1231f71f96a4e461f94394b4fb8cfa25587fbd96", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93789 - ICE with invalid array bounds.\n+\t* g++.dg/ext/vla22.C: New test.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93950"}, {"sha": "2308ee748df0b2f4031793eec5728a952c41779d", "filename": "gcc/testsuite/g++.dg/ext/vla22.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1231f71f96a4e461f94394b4fb8cfa25587fbd96/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C?ref=1231f71f96a4e461f94394b4fb8cfa25587fbd96", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/93789 - ICE with invalid array bounds.\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+void\n+f ()\n+{\n+  const int tbl[(long) \"h\"] = { 12 }; // { dg-error \"size of array .tbl. is not an integral constant-expression\" }\n+}"}]}