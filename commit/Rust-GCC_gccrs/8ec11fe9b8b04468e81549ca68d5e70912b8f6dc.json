{"sha": "8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjMTFmZTliOGIwNDQ2OGU4MTU0OWNhNjhkNWU3MDkxMmI4ZjZkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-07-06T07:49:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-07-06T07:49:05Z"}, "message": "sparc.h (sparc_compare_emitted): New extern.\n\n\t* config/sparc/sparc.h (sparc_compare_emitted): New extern.\n\t* config/sparc/sparc.c (sparc_compare_emitted): New variable.\n\t(gen_compare_reg): If sparc_compare_emitted is set, clear it\n\tand return its previous value.\n\t(emit_v9_brxx_insn): Assert sparc_compare_emitted is NULL.\n\t* config/sparc/sparc.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New\n\tconstants.\n\t(stack_protect_set, stack_protect_test): New expanders.\n\t(stack_protect_setsi, stack_protect_setdi, stack_protect_testsi,\n\tstack_protect_testdi): New insns.\n\t* config/sparc/linux.h (TARGET_THREAD_SSP_OFFSET): Define.\n\t* config/sparc/linux64.h (TARGET_THREAD_SSP_OFFSET): Define.\n\nFrom-SVN: r101653", "tree": {"sha": "8ca6fd41c47572b47720e13f43cf054b3a1a38b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca6fd41c47572b47720e13f43cf054b3a1a38b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9da4058c1454b279f0b5791100105bf7a6734e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da4058c1454b279f0b5791100105bf7a6734e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da4058c1454b279f0b5791100105bf7a6734e9d"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "4343b436a5b961d9fafc3a33b70fab50af598ea2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -1,3 +1,18 @@\n+2005-07-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.h (sparc_compare_emitted): New extern.\n+\t* config/sparc/sparc.c (sparc_compare_emitted): New variable.\n+\t(gen_compare_reg): If sparc_compare_emitted is set, clear it\n+\tand return its previous value.\n+\t(emit_v9_brxx_insn): Assert sparc_compare_emitted is NULL.\n+\t* config/sparc/sparc.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New\n+\tconstants.\n+\t(stack_protect_set, stack_protect_test): New expanders.\n+\t(stack_protect_setsi, stack_protect_setdi, stack_protect_testsi,\n+\tstack_protect_testdi): New insns.\n+\t* config/sparc/linux.h (TARGET_THREAD_SSP_OFFSET): Define.\n+\t* config/sparc/linux64.h (TARGET_THREAD_SSP_OFFSET): Define.\n+\n 2005-07-06  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dce.c (cfg_altered): New global."}, {"sha": "87a043e53cf0878a7508a8dba7df54624269d2a6", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -229,3 +229,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef NEED_INDICATE_EXEC_STACK\n #define NEED_INDICATE_EXEC_STACK 1\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* sparc glibc provides __stack_chk_guard in [%g7 + 0x14].  */\n+#define TARGET_THREAD_SSP_OFFSET\t0x14\n+#endif"}, {"sha": "82860fea24e8655023ad2b9e999083343f196ece", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -363,3 +363,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef NEED_INDICATE_EXEC_STACK\n #define NEED_INDICATE_EXEC_STACK 1\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* sparc glibc provides __stack_chk_guard in [%g7 + 0x14],\n+   sparc64 glibc provides it at [%g7 + 0x28].  */\n+#define TARGET_THREAD_SSP_OFFSET\t(TARGET_ARCH64 ? 0x28 : 0x14)\n+#endif"}, {"sha": "b0cde28b1438e59b1e1a6e84b6d54ab9207a759b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -232,7 +232,7 @@ static GTY(()) int struct_value_alias_set;\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n-rtx sparc_compare_op0, sparc_compare_op1;\n+rtx sparc_compare_op0, sparc_compare_op1, sparc_compare_emitted;\n \n /* Vector to say how input registers are mapped to output registers.\n    HARD_FRAME_POINTER_REGNUM cannot be remapped by this function to\n@@ -1905,6 +1905,13 @@ gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg;\n \n+  if (sparc_compare_emitted != NULL_RTX)\n+    {\n+      cc_reg = sparc_compare_emitted;\n+      sparc_compare_emitted = NULL_RTX;\n+      return cc_reg;\n+    }\n+\n   /* ??? We don't have movcc patterns so we cannot generate pseudo regs for the\n      fcc regs (cse can't tell they're really call clobbered regs and will\n      remove a duplicate comparison even if there is an intervening function\n@@ -2071,6 +2078,7 @@ gen_v9_scc (enum rtx_code compare_code, register rtx *operands)\n void\n emit_v9_brxx_insn (enum rtx_code code, rtx op0, rtx label)\n {\n+  gcc_assert (sparc_compare_emitted == NULL_RTX);\n   emit_jump_insn (gen_rtx_SET (VOIDmode,\n \t\t\t   pc_rtx,\n \t\t\t   gen_rtx_IF_THEN_ELSE (VOIDmode,"}, {"sha": "35b8dd5cccb359d9447e6ee98fc168887aaf29e5", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -1584,6 +1584,7 @@ function_arg_padding ((MODE), (TYPE))\n \n extern GTY(()) rtx sparc_compare_op0;\n extern GTY(()) rtx sparc_compare_op1;\n+extern GTY(()) rtx sparc_compare_emitted;\n \n \f\n /* Generate the special assembly code needed to tell the assembler whatever"}, {"sha": "ee601d03dde8f2e265538ed8f96694bfc61ac1d8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "patch": "@@ -57,6 +57,9 @@\n    (UNSPEC_ALIGNDATA\t\t48)\n    (UNSPEC_ALIGNADDR\t\t49)\n    (UNSPEC_PDIST\t\t50)\n+\n+   (UNSPEC_SP_SET\t\t60)\n+   (UNSPEC_SP_TEST\t\t61)\n   ])\n \n (define_constants\n@@ -8155,6 +8158,96 @@\n   [(set_attr \"type\" \"store\")])\n \n \n+;; Stack protector instructions.\n+\n+(define_expand \"stack_protect_set\"\n+  [(match_operand 0 \"memory_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")]\n+  \"\"\n+{\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  rtx tlsreg = gen_rtx_REG (Pmode, 7);\n+  rtx addr = gen_rtx_PLUS (Pmode, tlsreg, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n+  operands[1] = gen_rtx_MEM (Pmode, addr);\n+#endif\n+  if (TARGET_ARCH64)\n+    emit_insn (gen_stack_protect_setdi (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_stack_protect_setsi (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_setsi\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_ARCH32\"\n+  \"ld\\t%1, %2\\;st\\t%2, %0\\;mov\\t0, %2\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_insn \"stack_protect_setdi\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_ARCH64\"\n+  \"ldx\\t%1, %2\\;stx\\t%2, %0\\;mov\\t0, %2\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"memory_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")\n+   (match_operand 2 \"\" \"\")]\n+  \"\"\n+{\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  rtx tlsreg = gen_rtx_REG (Pmode, 7);\n+  rtx addr = gen_rtx_PLUS (Pmode, tlsreg, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n+  operands[1] = gen_rtx_MEM (Pmode, addr);\n+#endif\n+  if (TARGET_ARCH64)\n+    {\n+      rtx temp = gen_reg_rtx (Pmode);\n+      emit_insn (gen_stack_protect_testdi (temp, operands[0], operands[1]));\n+      sparc_compare_op0 = temp;\n+      sparc_compare_op1 = const0_rtx;\n+    }\n+  else\n+    {\n+      emit_insn (gen_stack_protect_testsi (operands[0], operands[1]));\n+      sparc_compare_op0 = operands[0];\n+      sparc_compare_op1 = operands[1];\n+      sparc_compare_emitted = gen_rtx_REG (CCmode, SPARC_ICC_REG);\n+    }\n+  emit_jump_insn (gen_beq (operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_testsi\"\n+  [(set (reg:CC 100)\n+\t(unspec:CC [(match_operand:SI 0 \"memory_operand\" \"m\")\n+\t\t    (match_operand:SI 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (set (match_scratch:SI 3 \"=r\") (const_int 0))]\n+  \"TARGET_ARCH32\"\n+  \"ld\\t%0, %2\\;ld\\t%1, %3\\;xorcc\\t%2, %3, %2\\;mov\\t0, %3\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"stack_protect_testdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n+\t\t    (match_operand:DI 2 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+   (set (match_scratch:DI 3 \"=r\") (const_int 0))]\n+  \"TARGET_ARCH64\"\n+  \"ldx\\t%1, %0\\;ldx\\t%2, %3\\;xor\\t%0, %3, %0\\;mov\\t0, %3\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")])\n+\n+\n ;; Vector instructions.\n \n (define_insn \"addv2si3\""}]}