{"sha": "ff2c46ac2987d86c445b1d9ceb922822a22e86be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyYzQ2YWMyOTg3ZDg2YzQ0NWIxZDljZWI5MjI4MjJhMjJlODZiZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-17T01:52:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-17T01:52:38Z"}, "message": "re PR c++/6320 (3.1 regression wrt 3.0: ICE in  remove_eh_handler, at except.c:2696)\n\n        PR c++/6320\n        * except.c (remove_eh_handler): Insert inner regions at beginning\n        of sibling chain.  Refactor expressions.\n\n\t* g++.dg/eh/dead1.C: New.\n\nFrom-SVN: r52397", "tree": {"sha": "c5ae4aa22955a383c3707fc61b8ad066906e115b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ae4aa22955a383c3707fc61b8ad066906e115b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2c46ac2987d86c445b1d9ceb922822a22e86be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2c46ac2987d86c445b1d9ceb922822a22e86be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2c46ac2987d86c445b1d9ceb922822a22e86be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2c46ac2987d86c445b1d9ceb922822a22e86be/comments", "author": null, "committer": null, "parents": [{"sha": "b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "9b1f9e1eb8dca4fbed45b9ac8a5f958853c39b33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff2c46ac2987d86c445b1d9ceb922822a22e86be", "patch": "@@ -1,3 +1,9 @@\n+2002-04-16  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/6320\n+\t* except.c (remove_eh_handler): Insert inner regions at beginning\n+\tof sibling chain.  Refactor expressions.\n+\n 2002-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sol2-bi.h (AS_SPARC64_FLAG): New."}, {"sha": "e1f32a5671826ce23b197f5a207cc2473f8bb5e2", "filename": "gcc/except.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ff2c46ac2987d86c445b1d9ceb922822a22e86be", "patch": "@@ -2579,7 +2579,7 @@ static void\n remove_eh_handler (region)\n      struct eh_region *region;\n {\n-  struct eh_region **pp, *p;\n+  struct eh_region **pp, **pp_start, *p, *outer, *inner;\n   rtx lab;\n \n   /* For the benefit of efficiently handling REG_EH_REGION notes,\n@@ -2588,21 +2588,22 @@ remove_eh_handler (region)\n      multiple copies of this region in the array, so we have a\n      list of alternate numbers by which we are known.  */\n \n-  cfun->eh->region_array[region->region_number] = region->outer;\n+  outer = region->outer;\n+  cfun->eh->region_array[region->region_number] = outer;\n   if (region->aka)\n     {\n       int i;\n       EXECUTE_IF_SET_IN_BITMAP (region->aka, 0, i,\n-\t{ cfun->eh->region_array[i] = region->outer; });\n+\t{ cfun->eh->region_array[i] = outer; });\n     }\n \n-  if (region->outer)\n+  if (outer)\n     {\n-      if (!region->outer->aka)\n-        region->outer->aka = BITMAP_XMALLOC ();\n+      if (!outer->aka)\n+        outer->aka = BITMAP_XMALLOC ();\n       if (region->aka)\n-\tbitmap_a_or_b (region->outer->aka, region->outer->aka, region->aka);\n-      bitmap_set_bit (region->outer->aka, region->region_number);\n+\tbitmap_a_or_b (outer->aka, outer->aka, region->aka);\n+      bitmap_set_bit (outer->aka, region->region_number);\n     }\n \n   if (cfun->eh->built_landing_pads)\n@@ -2612,23 +2613,24 @@ remove_eh_handler (region)\n   if (lab)\n     remove_exception_handler_label (lab);\n \n-  if (region->outer)\n-    pp = &region->outer->inner;\n+  if (outer)\n+    pp_start = &outer->inner;\n   else\n-    pp = &cfun->eh->region_tree;\n-  for (p = *pp; p != region; pp = &p->next_peer, p = *pp)\n+    pp_start = &cfun->eh->region_tree;\n+  for (pp = pp_start, p = *pp; p != region; pp = &p->next_peer, p = *pp)\n     continue;\n+  *pp = region->next_peer;\n \n-  if (region->inner)\n+  inner = region->inner;\n+  if (inner)\n     {\n-      for (p = region->inner; p->next_peer ; p = p->next_peer)\n-\tp->outer = region->outer;\n-      p->next_peer = region->next_peer;\n-      p->outer = region->outer;\n-      *pp = region->inner;\n+      for (p = inner; p->next_peer ; p = p->next_peer)\n+\tp->outer = outer;\n+      p->outer = outer;\n+\n+      p->next_peer = *pp_start;\n+      *pp_start = inner;\n     }\n-  else\n-    *pp = region->next_peer;\n \n   if (region->type == ERT_CATCH)\n     {"}, {"sha": "88ae92264d05fc1baf790bc06a3910f7e8d3436e", "filename": "gcc/testsuite/g++.dg/eh/dead1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdead1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2c46ac2987d86c445b1d9ceb922822a22e86be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdead1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdead1.C?ref=ff2c46ac2987d86c445b1d9ceb922822a22e86be", "patch": "@@ -0,0 +1,20 @@\n+// PR 6320\n+// Rechained the MUST_NOT_THROW region in the wrong order wrt the \n+// TRY/CATCH while removing them and got confused.\n+// { dg-do compile }\n+\n+struct S {\n+  ~S();\n+};\n+\n+void foo()\n+{\n+  try {\n+    return;\n+  }\n+  catch (int) {\n+  }\n+  catch (...) {\n+    S s;\n+  }\n+}"}]}