{"sha": "b1a2242e24fe984711214b7546cb993cfe45ace8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhMjI0MmUyNGZlOTg0NzExMjE0Yjc1NDZjYjk5M2NmZTQ1YWNlOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-19T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-19T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "eb557a5f91548377314a4be2bfe6c0ad3fa4c3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb557a5f91548377314a4be2bfe6c0ad3fa4c3a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a2242e24fe984711214b7546cb993cfe45ace8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a2242e24fe984711214b7546cb993cfe45ace8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a2242e24fe984711214b7546cb993cfe45ace8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a2242e24fe984711214b7546cb993cfe45ace8/comments", "author": null, "committer": null, "parents": [{"sha": "5128f8d0d99008d4f069bbaef9ee4372fe5da7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5128f8d0d99008d4f069bbaef9ee4372fe5da7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5128f8d0d99008d4f069bbaef9ee4372fe5da7ce"}], "stats": {"total": 304, "additions": 303, "deletions": 1}, "files": [{"sha": "cb489a6523a3af465f2748e72b11d9d83ba5ad6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,45 @@\n+2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (struct gimplify_omp_ctx): Add has_depend member.\n+\t(gimplify_scan_omp_clauses): Set it to true if OMP_CLAUSE_DEPEND\n+\tappears on OMP_TASK.\n+\t(gimplify_adjust_omp_clauses_1, gimplify_adjust_omp_clauses): Force\n+\tGOVD_WRITTEN on shared variables if task construct has depend clause.\n+\n+2020-12-18  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\tPR target/98177\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n+\tget_same_sized_vectype to obtain index type.\n+\t(vectorizable_reduction): Likewise.\n+\n+2020-12-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* langhooks-def.h (lhd_get_decl_init): New.\n+\t(lhd_finish_decl_inits): New.\n+\t(LANG_HOOKS_GET_DECL_INIT): New.\n+\t(LANG_HOOKS_OMP_FINISH_DECL_INITS): New.\n+\t(LANG_HOOKS_DECLS): Add LANG_HOOKS_GET_DECL_INIT and\n+\tLANG_HOOKS_OMP_FINISH_DECL_INITS.\n+\t* langhooks.c (lhd_omp_get_decl_init): New.\n+\t(lhd_omp_finish_decl_inits): New.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add omp_get_decl_init\n+\tand omp_finish_decl_inits.\n+\t* omp-offload.c (omp_discover_declare_target_var_r): Use\n+\tget_decl_init langhook in place of DECL_INITIAL.  Call\n+\tomp_finish_decl_inits langhook at end of function.\n+\n+2020-12-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Use\n+\taarch64_full_sve_mode and aarch64_vq_mode directly, instead of\n+\tgoing via aarch64_simd_container_mode.\n+\n+2020-12-18  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/iterators.md (rot): Add UNSPEC_VCMUL, UNSPEC_VCMUL90,\n+\tUNSPEC_VCMUL180, UNSPEC_VCMUL270.\n+\n 2020-12-17  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* config/arm/arm-cpus.in: Add Cortex-A78C core."}, {"sha": "1137155e7df86c8c7bcbd772e57d007b7539b388", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1 +1 @@\n-20201218\n+20201219"}, {"sha": "833b111ed07b1ddfb60e5966652add1863193e23", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,86 @@\n+2020-12-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* cp-lang.c (cxx_get_decl_init): New.\n+\t(cxx_omp_finish_decl_inits): New.\n+\t(LANG_HOOKS_GET_DECL_INIT): New.\n+\t(LANG_HOOKS_OMP_FINISH_DECL_INITS): New.\n+\t* cp-tree.h (dynamic_initializers): New.\n+\t* decl.c (dynamic_initializers): New.\n+\t* decl2.c (c_parse_final_cleanups): Add initializer entries\n+\tfrom vars to dynamic_initializers.\n+\n+2020-12-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (O_CLOEXEC, O_BINARY): Add window's support.\n+\t(elf_in::defrost, module_state::do_import)\n+\t(finish_module_processing): Use O_BINARY.\n+\n+2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98343\n+\t* cp-gimplify.c (source_location_table_entry_hash::pch_nx): Override\n+\tstatic member functions from ggc_remove.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (satisfying_constraint): Move up definition\n+\tand give it bool type.\n+\t(failed_type_completion_count): Replace with ...\n+\t(failed_type_completions): ... this.\n+\t(note_failed_type_completion_for_satisfaction): Append the\n+\tsupplied argument to failed_type_completions.\n+\t(some_type_complete_p): Define.\n+\t(sat_entry::maybe_unstable): Replace with ...\n+\t(sat_entry::ftc_begin, sat_entry::ftc_end): ... these.\n+\t(satisfaction_cache::ftc_count): Replace with ...\n+\t(satisfaction_cache::ftc_begin): ... this.\n+\t(satisfaction_cache::satisfaction_cache): Adjust accordingly.\n+\t(satisfaction_cache::get): Adjust accordingly, using\n+\tsome_type_complete_p.\n+\t(satisfaction_cache::save): Adjust accordingly.\n+\t(satisfying_constraint_p): Remove unused function.\n+\t(satisfy_constraint): Set satisfying_constraint.\n+\t(satisfy_declaration_constraints): Likewise.\n+\t* decl.c (require_deduced_type): Call\n+\tnote_failed_type_completion_for_satisfaction.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (sat_entry::evaluating): New member.\n+\t(satisfaction_cache::get): If entry->evaluating, diagnose\n+\tself-recursive satisfaction.  Otherwise, set entry->evaluating\n+\tif we're not reusing a cached satisfaction result.\n+\t(satisfaction_cache::save): Clear entry->evaluating.\n+\t(satisfy_atom): Set up diagnosing_failed_constraint before the\n+\tfirst call to get().\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (failed_type_completion_count): New.\n+\t(note_failed_type_completion_for_satisfaction): New.\n+\t(sat_entry::constr): Rename to ...\n+\t(sat_entry::atom): ... this.\n+\t(sat_entry::location): New member.\n+\t(sat_entry::maybe_unstable): New member.\n+\t(sat_entry::diagnose_instability): New member.\n+\t(struct sat_hasher): Adjust after the above renaming.\n+\t(get_satisfaction, save_satisfaction): Remove.\n+\t(satisfaction_cache): Rewrite completely.\n+\t(satisfy_atom): When instantiation of the parameter mapping\n+\tfails, set diagnose_instability.  Propagate location from\n+\tinst_cache.entry to cache.entry if the secondary lookup\n+\tsucceeded.\n+\t(satisfy_declaration_constraints): When\n+\tfailed_type_completion_count differs before and after\n+\tsatisfaction, then don't cache the satisfaction result.\n+\t* cp-tree.h (note_failed_type_completion_for_satisfaction):\n+\tDeclare.\n+\t* pt.c (tsubst) <case TYPENAME_TYPE>: Use\n+\tcomplete_type_or_maybe_complain instead of open-coding it.\n+\t* typeck.c (complete_type_or_maybe_complain): Call\n+\tnote_failed_type_completion_for_satisfaction when type\n+\tcompletion fails.\n+\n 2020-12-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/98340"}, {"sha": "367502498cb24873aeacd3013e8bdbe867fcccb1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,48 @@\n+2020-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83118\n+\tPR fortran/96012\n+\t* resolve.c (resolve_ordinary_assign): Generate a vtable if\n+\tnecessary for scalar non-polymorphic rhs's to unlimited lhs's.\n+\t* trans-array.c (get_class_info_from_ss): New function.\n+\t(gfc_trans_allocate_array_storage): Defer obtaining class\n+\telement type until all sources of class exprs are tried. Use\n+\tclass API rather than TREE_OPERAND. Look for class expressions\n+\tin ss->info by calling get_class_info_from_ss. After, obtain\n+\tthe element size for class descriptors. Where the element type\n+\tis unknown, cast the data as character(len=size) to overcome\n+\tunlimited polymorphic problems.\n+\t(gfc_conv_ss_descriptor): Do not fix class variable refs.\n+\t(build_class_array_ref, structure_alloc_comps): Replace code\n+\treplicating the new function gfc_resize_class_size_with_len.\n+\t(gfc_alloc_allocatable_for_assignment): Obtain element size\n+\tfor lhs in cases of deferred characters and class enitities.\n+\tMove code for the element size of rhs to start of block. Clean\n+\tup extraction of class parameters throughout this function.\n+\tAfter the shape check test whether or not the lhs and rhs\n+\telement sizes are the same. Use earlier evaluation of\n+\t'cond_null'. Reallocation of lhs only to happen if size changes\n+\tor element size changes.\n+\t* trans-expr.c (gfc_resize_class_size_with_len): New function.\n+\t(gfc_get_class_from_expr): If a constant expression is\n+\tencountered, return NULL_TREE;\n+\t(trans_scalar_class_assign): New function.\n+\t(gfc_conv_procedure_call): Ensure the vtable is present for\n+\tpassing a non-class actual to an unlimited formal.\n+\t(trans_class_vptr_len_assignment): For expressions of type\n+\tBT_CLASS, extract the class expression if necessary. Use a\n+\tstatement block outside the loop body. Ensure that 'rhs' is\n+\tof the correct type. Obtain rhs vptr in all circumstances.\n+\t(gfc_trans_scalar_assign): Call trans_scalar_class_assign to\n+\tmake maximum use of the vptr copy in place of assignment.\n+\t(trans_class_assignment): Actually do reallocation if needed.\n+\t(gfc_trans_assignment_1): Simplify some of the logic with\n+\t'realloc_flag'. Set 'vptr_copy' for all array assignments to\n+\tunlimited polymorphic lhs.\n+\t* trans.c (gfc_build_array_ref): Call gfc_resize_class_size_\n+\twith_len to correct span for unlimited polymorphic decls.\n+\t* trans.h : Add prototype for gfc_resize_class_size_with_len.\n+\n 2020-12-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92587"}, {"sha": "2c6a2f97ebd9ebb4a4267453b3da116ad2ce4d21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,60 @@\n+2020-12-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97750.c: Remove check for warning.\n+\n+2020-12-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* g++.dg/gomp/declare-target-3.C: Only check .offload_var_table\n+\tentries if offloading is enabled.\n+\n+2020-12-18  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\tPR target/98177\n+\t* g++.target/aarch64/sve/pr98177-1.C: New test.\n+\t* g++.target/aarch64/sve/pr98177-2.C: New test.\n+\t* gcc.target/aarch64/sve/pr98177-1.c: New test.\n+\t* gcc.target/aarch64/sve/pr98177-2.c: New test.\n+\n+2020-12-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* g++.dg/gomp/declare-target-3.C: New.\n+\n+2020-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83118\n+\tPR fortran/96012\n+\t* gfortran.dg/dependency_60.f90: New test.\n+\t* gfortran.dg/class_allocate_25.f90: New test.\n+\t* gfortran.dg/class_assign_4.f90: New test.\n+\t* gfortran.dg/unlimited_polymorphic_32.f03: New test.\n+\n+2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98343\n+\t* g++.dg/pch/pr98343.C: New test.\n+\t* g++.dg/pch/pr98343.Hs: New file.\n+\n+2020-12-18  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/go-test.exp (go-set-goos): New procedure.\n+\t(go-gc-match): New procedure.\n+\t(go-gc-tests): Call go-set-goos.  Use go-gc-match to handle +build\n+\tlines.  Look for +build lines beyond first line of file.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96840\n+\t* g++.dg/cpp2a/concepts-pr88395.C: Adjust to expect the\n+\tself-recursive satisfaction to get directly diagnosed.\n+\t* g++.dg/cpp2a/concepts-recursive-sat2.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-recursive-sat4.C: New test.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-complete1.C: New test.\n+\t* g++.dg/cpp2a/concepts-complete2.C: New test.\n+\t* g++.dg/cpp2a/concepts-complete3.C: New test.\n+\n 2020-12-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/pr97750.c: New."}, {"sha": "b94dce96abd935cf6857598bc11972ca63b80706", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,10 @@\n+2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/98380\n+\t* configure.ac: Set darwin_dynamic_lookup=no instead to empty\n+\tstring.\n+\t* configure: Regenerated.\n+\n 2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/97865"}, {"sha": "b849ffdd8947d8d3ea5b73dd7202e13b21a72ef6", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,7 @@\n+2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/task-6.c: New test.\n+\n 2020-12-09  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* plugin/plugin-gcn.c: Include hsa_ext_amd.h."}, {"sha": "7933ccd7aac0fcf9650865b6f471ce1ecfc48086", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a2242e24fe984711214b7546cb993cfe45ace8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a2242e24fe984711214b7546cb993cfe45ace8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b1a2242e24fe984711214b7546cb993cfe45ace8", "patch": "@@ -1,3 +1,67 @@\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98377\n+\t* src/c++17/floating_to_chars.cc (__floating_to_chars_precision):\n+\tFix mistake.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98370\n+\t* src/c++17/floating_to_chars.cc (__floating_to_chars_shortest):\n+\tProvide explicit template arguments to the call to std::max.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98374\n+\t* src/c++17/floating_to_chars.cc: Guard include of <langinfo.h>\n+\twith __has_include.\n+\t(__floating_to_chars_precision) [!defined(RADIXCHAR)]: Don't\n+\tattempt to obtain the radix character of the current locale,\n+\tjust assume it's '.'.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl)\n+\t[!defined(FE_TONEAREST)]: Don't adjust the rounding mode.\n+\t* src/c++17/floating_to_chars.cc (__floating_to_chars_precision):\n+\tLikewise.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/20_util/to_chars/double.cc: New test, consisting of\n+\ttestcases imported from the MSVC STL testsuite.\n+\t* testsuite/20_util/to_chars/float.cc: Likewise.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* include/std/charconv (to_chars): Declare the floating-point\n+\toverloads for float, double and long double.\n+\t* src/c++17/Makefile.am (sources): Add floating_to_chars.cc.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/floating_to_chars.cc: New file.\n+\t(to_chars): Define for float, double and long double.\n+\t* testsuite/20_util/to_chars/long_double.cc: New test.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/ryu/common.h, src/c++17/ryu/d2fixed.c,\n+\tsrc/c++17/ryu/d2fixed_full_table.h, src/c++17/ryu/d2s.c,\n+\tsrc/c++17/ryu/d2s_intrinsics.h, src/c++17/ryu/f2s.c,\n+\tsrc/c++17/ryu/f2s_intrinsics.h, src/c++17/ryu/generic_128.c:\n+\tApply local modifications.\n+\n+2020-12-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/ryu/MERGE: New file.\n+\t* src/c++17/ryu/common.h, src/c++17/ryu/d2fixed.c,\n+\tsrc/c++17/ryu/d2fixed_full_table.h, src/c++17/ryu/d2s.c,\n+\tsrc/c++17/ryu/d2s_full_table.h, src/c++17/ryu/d2s_intrinsics.h,\n+\tsrc/c++17/ryu/digit_table.h, src/c++17/ryu/f2s.c,\n+\tsrc/c++17/ryu/f2s_intrinsics.h, src/c++17/ryu/generic_128.c,\n+\tsrc/c++17/ryu/generic_128.h, src/c++17/ryu/ryu_generic_128.h:\n+\tImport these files from the Ryu library.\n+\n 2020-12-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/os/djgpp/error_constants.h: Test POSIX errno macros"}]}