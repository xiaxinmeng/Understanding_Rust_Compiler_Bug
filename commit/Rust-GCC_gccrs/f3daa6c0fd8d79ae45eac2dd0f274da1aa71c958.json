{"sha": "f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkYWE2YzBmZDhkNzlhZTQ1ZWFjMmRkMGYyNzRkYTFhYTcxYzk1OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-08T20:37:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-08T20:37:21Z"}, "message": "PR middle-end/98266 - bogus array subscript is partly outside array bounds on virtual inheritance\n\ngcc/ChangeLog:\n\n\tPR middle-end/98266\n\t* gimple-array-bounds.cc (inbounds_vbase_memaccess_p): New function.\n\t(array_bounds_checker::check_array_bounds): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/98266\n\t* g++.dg/warn/Warray-bounds-15.C: New test.\n\t* g++.dg/warn/Warray-bounds-18.C: New test.\n\t* g++.dg/warn/Warray-bounds-19.C: New test.\n\t* g++.dg/warn/Warray-bounds-20.C: New test.\n\t* g++.dg/warn/Warray-bounds-21.C: New test.", "tree": {"sha": "b3ab03035bc62990c57b38a1dccf441011dd1209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ab03035bc62990c57b38a1dccf441011dd1209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5ff78ff3f971c11ec67f422b2fd34281db9123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5ff78ff3f971c11ec67f422b2fd34281db9123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5ff78ff3f971c11ec67f422b2fd34281db9123"}], "stats": {"total": 541, "additions": 540, "deletions": 1}, "files": [{"sha": "54f320511996f1dba537e6b1d04c463acb5c1c8a", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -890,6 +890,50 @@ array_bounds_checker::check_addr_expr (location_t location, tree t)\n     }\n }\n \n+/* Return true if T is a reference to a member of a base class that's within\n+   the bounds of the enclosing complete object.  The function \"hacks\" around\n+   problems discussed in pr98266 and pr97595.  */\n+\n+static bool\n+inbounds_vbase_memaccess_p (tree t)\n+{\n+  if (TREE_CODE (t) != COMPONENT_REF)\n+    return false;\n+\n+  tree mref = TREE_OPERAND (t, 0);\n+  if (TREE_CODE (mref) != MEM_REF)\n+    return false;\n+\n+  /* Consider the access if its type is a derived class.  */\n+  tree mreftype = TREE_TYPE (mref);\n+  if (!RECORD_OR_UNION_TYPE_P (mreftype)\n+      || !TYPE_BINFO (mreftype))\n+    return false;\n+\n+  /* Compute the size of the referenced object (it could be dynamically\n+     allocated).  */\n+  access_ref aref;   // unused\n+  tree refop = TREE_OPERAND (mref, 0);\n+  tree refsize = compute_objsize (refop, 1, &aref);\n+  if (!refsize || TREE_CODE (refsize) != INTEGER_CST)\n+    return false;\n+\n+  /* Compute the byte offset of the member within its enclosing class.  */\n+  tree fld = TREE_OPERAND (t, 1);\n+  tree fldpos = byte_position (fld);\n+  if (TREE_CODE (fldpos) != INTEGER_CST)\n+    return false;\n+\n+  /* Compute the byte offset of the member with the outermost complete\n+     object by adding its offset computed above to the MEM_REF offset.  */\n+  tree refoff = TREE_OPERAND (mref, 1);\n+  tree fldoff = int_const_binop (PLUS_EXPR, fldpos, refoff);\n+\n+  /* Return true if the member offset is less than the size of the complete\n+     object.  */\n+  return tree_int_cst_lt (fldoff, refsize);\n+}\n+\n /* Callback for walk_tree to check a tree for out of bounds array\n    accesses.  The array_bounds_checker class is passed in DATA.  */\n \n@@ -919,8 +963,14 @@ array_bounds_checker::check_array_bounds (tree *tp, int *walk_subtree,\n   else if (TREE_CODE (t) == ADDR_EXPR)\n     {\n       checker->check_addr_expr (location, t);\n-      *walk_subtree = FALSE;\n+      *walk_subtree = false;\n     }\n+  else if (inbounds_vbase_memaccess_p (t))\n+    /* Hack: Skip MEM_REF checks in accesses to a member of a base class\n+       at an offset that's within the bounds of the enclosing object.\n+       See pr98266 and pr97595.  */\n+    *walk_subtree = false;\n+\n   /* Propagate the no-warning bit to the outer expression.  */\n   if (warned)\n     TREE_NO_WARNING (t) = true;"}, {"sha": "455f3a0c300aada9fa94c23b3db371d41244a5c4", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-15.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-15.C?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -0,0 +1,33 @@\n+/* PR middle-end/98266 - bogus array subscript is partly outside array\n+   bounds on virtual inheritance\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#if __cplusplus < 201103L\n+// This matters for the test case.\n+#  define noexcept   throw ()\n+#endif\n+\n+struct A\n+{\n+  virtual ~A () noexcept;\n+  const char *s;\n+};\n+\n+struct B: virtual A { };\n+struct C: virtual A { };      // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+\n+struct D: virtual B, virtual C\n+{\n+  D (const char*);\n+};\n+\n+void sink (void*);\n+void sink (D);\n+\n+\n+// Verify that accesses to the table aren't diagnosed.\n+void test_vtbl ()\n+{\n+  sink (D (\"\"));\n+}"}, {"sha": "53d93cf83e71ee8e7bc1b8900d3ee874256033df", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-18.C", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-18.C?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -0,0 +1,167 @@\n+/* PR middle-end/98266 - bogus array subscript is partly outside array\n+   bounds on virtual inheritance\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+struct A\n+{\n+  int ai, aj, aa[2];\n+\n+  virtual ~A ();\n+};\n+\n+struct B: virtual A { };\n+struct C: virtual A { };\n+\n+void sink (void*);\n+\n+struct C1: virtual A\n+{\n+  int c2i, c2j, c2a[2];\n+\n+  C1 ();\n+  ~C1 ()\n+  {                           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    c2i = __LINE__;           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    c2j = __LINE__;           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    c2a[0] = __LINE__;        // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    c2a[1] = __LINE__;        // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    c2a[2] = __LINE__;        // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+struct D1: virtual B, virtual C1\n+{\n+  D1 ();\n+};\n+\n+void sink (void*);\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class are diagnosed.  Use direct array accesses.  */\n+void test_vmem_base_ctor_arryaccess ()\n+{\n+  D1 d2;\n+  sink (&d2);\n+}\n+\n+\n+struct C2: virtual A\n+{\n+  int c3a[2];\n+\n+  C2 ();\n+  ~C2 ()\n+  {                           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    int *p = c3a;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+struct D2: virtual B, virtual C2\n+{\n+  D2 ();\n+};\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class are diagnosed.  Use pointer accesses.  */\n+void test_vmem_base_dtor_ptraccess ()\n+{\n+  D2 d3;\n+  sink (&d3);\n+}\n+\n+\n+struct C3: virtual A          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+{\n+  int i, j, a[2];\n+\n+  C3 ();\n+};\n+\n+struct D3: virtual B, virtual C3\n+{\n+  D3 ()\n+  {                           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    i = __LINE__;             // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    j = __LINE__;             // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[0] = __LINE__;          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[1] = __LINE__;          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[2] = __LINE__;          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class made in the ctor of a derived class are diagnosed.  Use direct\n+   array accesses.  */\n+void test_vmem_derived_ctor_arryaccess ()\n+{\n+  D3 d4;\n+  sink (&d4);\n+}\n+\n+\n+struct D4: virtual B, virtual C3\n+{\n+  D4 ()\n+  {                           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    int *p = a;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class made in the ctor of a derived class are diagnosed.  Use pointer\n+   accesses.  */\n+void test_vmem_derived_ctor_ptraccess ()\n+{\n+  D4 d5;\n+  sink (&d5);\n+}\n+\n+\n+struct D5: virtual B, virtual C3  // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+{\n+  ~D5 ()\n+  {\n+    i = __LINE__;             // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    j = __LINE__;             // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[0] = __LINE__;          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[1] = __LINE__;          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    a[2] = __LINE__;          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class made in the dtor of a derived class are diagnosed.  Use pointer\n+   accesses.  */\n+void test_vmem_derived_dtor_arryaccess ()\n+{\n+  D5 d6;\n+  sink (&d6);\n+}\n+\n+\n+struct D6: virtual B, virtual C3  // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+{\n+  ~D6 ()\n+  {\n+    int *p = a;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;\n+    *p++ = __LINE__;          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+};\n+\n+/* Verify that only out of bounds accesses to members of an ordinary base\n+   class made in the dtor of a derived class are diagnosed.  Use pointer\n+   accesses.  */\n+void test_vmem_derived_dtor_ptraccess ()\n+{\n+  D6 d7;\n+  sink (&d7);\n+}"}, {"sha": "e5fabe955ea773cceea1e5aca76848296ac0b5a8", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-19.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-19.C?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -0,0 +1,110 @@\n+/* PR middle-end/98266 - bogus array subscript is partly outside array\n+   bounds on virtual inheritance\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+void* operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+\n+struct A\n+{\n+  virtual ~A ();\n+  int ai;\n+};\n+\n+struct B: virtual A { };\n+\n+\n+// Exercise access to base members by ctor of the most derived class.\n+\n+struct C1: virtual A          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+{\n+  int c1i;\n+  C1 ();\n+};\n+\n+struct D1: virtual B, virtual C1\n+{\n+  D1 () { ai = 0; c1i = 1; };\n+};\n+\n+void sink (void*);\n+\n+void nowarn_derived_ctor_access_decl ()\n+{\n+  D1 d1;\n+  sink (&d1);\n+}\n+\n+void nowarn_derived_ctor_access_new ()\n+{\n+  D1 *p = new D1;\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_placement_new ()\n+{\n+  char a[sizeof (D1)];\n+  D1 *p = new (a) D1;\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_new_array ()\n+{\n+  D1 *p = new D1[2];\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_placement_new_array ()\n+{\n+  char a[sizeof (D1) * 2];\n+  D1 *p = new (a) D1[2];\n+  sink (p);\n+}\n+\n+\n+// Exercise access to base members by ctor of the second most derived class.\n+\n+struct C2: virtual A\n+{\n+  int c2i;\n+  ~C2 () { ai = 0; c2i = 1; }         // { dg-bogus \"\\\\\\[-Warray-bounds\"\n+};\n+\n+struct D2: virtual B, virtual C2\n+{\n+  D2 ();\n+};\n+\n+void nowarn_base_dtor_access_decl ()\n+{\n+  D2 d2;\n+  sink (&d2);\n+}\n+\n+void nowarn_base_dtor_access_new ()\n+{\n+  D2 *p = new D2;\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_placement_new ()\n+{\n+  char a[sizeof (D2)];\n+  D2 *p = new (a) D2;\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_new_array ()\n+{\n+  D2 *p = new D2[2];\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_placement_new_array ()\n+{\n+  char a[sizeof (D2) * 2];\n+  D2 *p = new (a) D2[2];\n+  sink (p);\n+}"}, {"sha": "e142ea16787d72c65a11fac520ed1a8e245ed530", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-20.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-20.C?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -0,0 +1,68 @@\n+/* PR middle-end/98266 - bogus array subscript is partly outside array\n+   bounds on virtual inheritance\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+void* operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+\n+struct A\n+{\n+  int ai;\n+  virtual ~A ();\n+};\n+\n+struct B: virtual A { };\n+\n+struct C: virtual A\n+{\n+  int ci;\n+  C ();\n+};\n+\n+struct D1: virtual B, virtual C\n+{\n+  /* The warning would ideally point to the assignment but instead points\n+     to the opening brace.  */\n+  D1 ()\n+  {                           // { dg-warning \"\\\\\\[-Warray-bounds\" \"brace\" }\n+    ci = 0;                   // { dg-warning \"\\\\\\[-Warray-bounds\" \"assign\" { xfail *-*-* } }\n+  }\n+};\n+\n+void sink (void*);\n+\n+void warn_derived_ctor_access_new_decl ()\n+{\n+  char a[sizeof (D1)];        // { dg-message \"referencing 'a'\" \"note\" }\n+  char *p = a;\n+  ++p;\n+  D1 *q = new (p) D1;\n+  sink (q);\n+}\n+\n+void warn_derived_ctor_access_new_alloc ()\n+{\n+  char *p = (char*)operator new (sizeof (D1));    // { dg-message \"referencing an object of size \\\\d+ allocated by 'void\\\\\\* operator new\\\\\\(\" \"note\" }\n+  ++p;\n+  D1 *q = new (p) D1;\n+  sink (q);\n+}\n+\n+void warn_derived_ctor_access_new_array_decl ()\n+{\n+  char b[sizeof (D1) * 2];    // { dg-message \"referencing 'b'\" \"note\" }\n+  char *p = b;\n+  ++p;\n+  D1 *q = new (p) D1[2];\n+  sink (q);\n+}\n+\n+void warn_derived_ctor_access_new_array_alloc ()\n+{\n+  char *p = new char[sizeof (D1) * 2];            // { dg-message \"referencing an object of size \\\\d+ allocated by 'void\\\\\\* operator new \\\\\\[]\\\\\\(\" \"note\" }\n+  ++p;\n+  D1 *q = new (p) D1[2];\n+  sink (q);\n+}"}, {"sha": "57bb98bf63f0a3958a3911b10392f92bc115a9f7", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-21.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-21.C?ref=f3daa6c0fd8d79ae45eac2dd0f274da1aa71c958", "patch": "@@ -0,0 +1,111 @@\n+/* PR middle-end/98266 - bogus array subscript is partly outside array\n+   bounds on virtual inheritance\n+   Same as Warray-bounds-19.C with nonvirtual inheritance.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+void* operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+\n+struct A\n+{\n+  virtual ~A ();\n+  int ai;\n+};\n+\n+struct B: A { };\n+\n+\n+// Exercise access to base members by ctor of the most derived class.\n+\n+struct C1: A\n+{\n+  int c1i;\n+  C1 ();\n+};\n+\n+struct D1: B, C1\n+{\n+  D1 () { B::ai = 0; C1::ai = 1; c1i = 2; };\n+};\n+\n+void sink (void*);\n+\n+void nowarn_derived_ctor_access_decl ()\n+{\n+  D1 d1;\n+  sink (&d1);\n+}\n+\n+void nowarn_derived_ctor_access_new ()\n+{\n+  D1 *p = new D1;\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_placement_new ()\n+{\n+  char a[sizeof (D1)];\n+  D1 *p = new (a) D1;\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_new_array ()\n+{\n+  D1 *p = new D1[2];\n+  sink (p);\n+}\n+\n+void nowarn_derived_ctor_access_placement_new_array ()\n+{\n+  char a[sizeof (D1) * 2];\n+  D1 *p = new (a) D1[2];\n+  sink (p);\n+}\n+\n+\n+// Exercise access to base members by ctor of the second most derived class.\n+\n+struct C2: A\n+{\n+  int c2i;\n+  ~C2 () { ai = 0; c2i = 1; }\n+};\n+\n+struct D2: B, C2\n+{\n+  D2 ();\n+};\n+\n+void nowarn_base_dtor_access_decl ()\n+{\n+  D2 d2;\n+  sink (&d2);\n+}\n+\n+void nowarn_base_dtor_access_new ()\n+{\n+  D2 *p = new D2;\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_placement_new ()\n+{\n+  char a[sizeof (D2)];\n+  D2 *p = new (a) D2;\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_new_array ()\n+{\n+  D2 *p = new D2[2];\n+  sink (p);\n+}\n+\n+void nowarn_base_dtor_access_placement_new_array ()\n+{\n+  char a[sizeof (D2) * 2];\n+  D2 *p = new (a) D2[2];\n+  sink (p);\n+}"}]}