{"sha": "6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzYTlmNzJiZjVhZDM2NzRhM2NlMDJjYWVhNmU3YjkxZWVjOWQyYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-04-20T22:26:55Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-20T22:26:55Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Make sure required C99 support is enabled correctly before long long is activated.\n\n\n2001-04-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Make sure required C99\n\tsupport is enabled correctly before long long is activated.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\n\t* include/backward/backward_warning.h: Format correctly.\n\n\t* testsuite/26_numerics/c99_classification_macros_c.cc: Add.\n\t* testsuite/26_numerics/c99_classification_macros_c++.cc: Add.\n\t* testsuite/26_numerics/c99_macros.cc: Remove.\n\nFrom-SVN: r41470", "tree": {"sha": "143ad7e4caf443c6b8a31b0d264878a8f0ca4474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143ad7e4caf443c6b8a31b0d264878a8f0ca4474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/comments", "author": null, "committer": null, "parents": [{"sha": "4b3db7c50c5ef04f4230170787883b92990f4e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3db7c50c5ef04f4230170787883b92990f4e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3db7c50c5ef04f4230170787883b92990f4e72"}], "stats": {"total": 1615, "additions": 829, "deletions": 786}, "files": [{"sha": "502bd66ddd8f33ea51c727019d9906f63f06bc3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "patch": "@@ -1,3 +1,16 @@\n+2001-04-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Make sure required C99\n+\tsupport is enabled correctly before long long is activated.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t\n+\t* include/backward/backward_warning.h: Format correctly.\n+\n+\t* testsuite/26_numerics/c99_classification_macros_c.cc: Add.\n+\t* testsuite/26_numerics/c99_classification_macros_c++.cc: Add.\n+\t* testsuite/26_numerics/c99_macros.cc: Remove.\n+\t\n 2001-04-20  Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/bits/stl_bvector.h:  Replace __ITERATOR_CATEGORY with"}, {"sha": "d04988321f078712c6bfb3028da1bce3cc2b265a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "patch": "@@ -1318,39 +1318,6 @@ EOF\n ])\n \n \n-dnl\n-dnl Check for template specializations for the 'long long' type extension.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n-dnl       defaults to `no'.\n-dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n-  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n-\n-  AC_ARG_ENABLE(long-long,\n-  changequote(<<, >>)dnl\n-  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n-  changequote([, ])dnl\n-  [case \"$enableval\" in\n-   yes) enable_long_long=yes ;;\n-   no)  enable_long_long=no ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n-   esac],\n-  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n-\n-  # Option parsed, now set things appropriately\n-  if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n-  fi\n-])\n-\n- \n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n dnl\n@@ -1433,6 +1400,49 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n ])\n \n \n+dnl\n+dnl Check for template specializations for the 'long long' type extension.\n+dnl NB: Must check for C99 support before calling _GLIBCPP_ENABLE_LONG_LONG\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_LONG\n+dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n+dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_LONG\n+AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n+  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+\n+  AC_ARG_ENABLE(long-long,\n+  changequote(<<, >>)dnl\n+  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_long_long=yes ;;\n+   no)  enable_long_long=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n+   esac],\n+  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+\n+  # iostreams require strtoll, strtoull to compile. If the\n+  # GLIBCPP_ENABLE_C99 tests found these, and if C99 support is enabled,\n+  # go ahead and allow long long to be used.\n+  if test x\"$enable_c99\" = x\"no\"; then\n+    enable_long_long=no; \n+  fi\n+\n+  # Option parsed, now set things appropriately\n+  AC_MSG_CHECKING([for enabled long long support])\n+  if test x\"$enable_long_long\" = xyes; then\n+    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  fi\n+  AC_MSG_RESULT($enable_long_long)\n+])\n+\n+\n dnl\n dnl Check for what kind of C headers to use.\n dnl"}, {"sha": "5225bc1aecaa9d9a9a1418b1ee8e0a69894a2834", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "patch": "@@ -1330,39 +1330,6 @@ EOF\n ])\n \n \n-dnl\n-dnl Check for template specializations for the 'long long' type extension.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n-dnl       defaults to `no'.\n-dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n-  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n-\n-  AC_ARG_ENABLE(long-long,\n-  changequote(<<, >>)dnl\n-  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n-  changequote([, ])dnl\n-  [case \"$enableval\" in\n-   yes) enable_long_long=yes ;;\n-   no)  enable_long_long=no ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n-   esac],\n-  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n-\n-  # Option parsed, now set things appropriately\n-  if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n-  fi\n-])\n-\n- \n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n dnl\n@@ -1445,6 +1412,49 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n ])\n \n \n+dnl\n+dnl Check for template specializations for the 'long long' type extension.\n+dnl NB: Must check for C99 support before calling _GLIBCPP_ENABLE_LONG_LONG\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_LONG\n+dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n+dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_LONG\n+AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n+  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+\n+  AC_ARG_ENABLE(long-long,\n+  changequote(<<, >>)dnl\n+  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_long_long=yes ;;\n+   no)  enable_long_long=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n+   esac],\n+  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+\n+  # iostreams require strtoll, strtoull to compile. If the\n+  # GLIBCPP_ENABLE_C99 tests found these, and if C99 support is enabled,\n+  # go ahead and allow long long to be used.\n+  if test x\"$enable_c99\" = x\"no\"; then\n+    enable_long_long=no; \n+  fi\n+\n+  # Option parsed, now set things appropriately\n+  AC_MSG_CHECKING([for enabled long long support])\n+  if test x\"$enable_long_long\" = xyes; then\n+    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  fi\n+  AC_MSG_RESULT($enable_long_long)\n+])\n+\n+\n dnl\n dnl Check for what kind of C headers to use.\n dnl"}, {"sha": "dbca343c0ec492602fb53bb609766e5f354a407e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 726, "deletions": 716, "changes": 1442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b"}, {"sha": "991541553ded0448e8ba7a1118a299bcf5a59b7d", "filename": "libstdc++-v3/include/backward/backward_warning.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h?ref=6c3a9f72bf5ad3674a3ce02caea6e7b91eec9d2b", "patch": "@@ -29,10 +29,10 @@\n #define _CPP_BACKWARD_BACKWARD_WARNING_H 1\n \n #ifdef __DEPRECATED\n-# warning \"This file includes at least one deprecated or antiquated header.\"\n-# warning \"Please use the <X> file instead of <X.h> file for \"C++\" includes\"\n-# warning \"and use the <cX> file instead of <X.h> file for \"C\" includes.\"\n-# warning \"To disable this warning use -Wno-deprecated.\"\n+#warning This file includes at least one deprecated or antiquated header. \\\n+         Please use the <X> header instead of <X.h> header for 'C++' includes \\\n+         and use the <cX> header instead of <X.h> header for 'C' includes. \\\n+         To disable this warning use -Wno-deprecated.\n #endif\n \n #endif"}]}