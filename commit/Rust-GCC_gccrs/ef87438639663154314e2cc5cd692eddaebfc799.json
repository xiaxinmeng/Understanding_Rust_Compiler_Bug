{"sha": "ef87438639663154314e2cc5cd692eddaebfc799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4NzQzODYzOTY2MzE1NDMxNGUyY2M1Y2Q2OTJlZGRhZWJmYzc5OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-04-01T19:19:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-04-01T19:19:13Z"}, "message": "natVMClassLoader.cc (getSystemClassLoaderInternal): Updated for name change.\n\n\t* java/lang/natVMClassLoader.cc (getSystemClassLoaderInternal):\n\tUpdated for name change.\n\t(nativeFindClass): New method.\n\t(loadClass): Use nativeFindClass.\n\t* java/lang/natClassLoader.cc (_Jv_FindClass): Use single-argument\n\tform of loadClass.\n\t* java/lang/VMClassLoader.java (tried_libraries, lib_control,\n\tLIB_FULL, LIB_CACHE, LIB_NEVER): New fields from old\n\tVMClassLoader.\n\t(initialize): New method.\n\t(nativeFindClass): Declare.\n\t* gnu/gcj/runtime/natVMClassLoader.cc: Removed.\n\t* gnu/gcj/runtime/VMClassLoader.java: Removed.\n\t* gnu/gcj/runtime/ExtensionClassLoader.java: Renamed from\n\tVMClassLoader.java.\n\t(definePackageForNative): Removed.\n\t(tried_libraries, LIB_CACHE, LIB_FULL, LIB_NEVER, lib_control):\n\tMoved to VMClassLoader.java.\n\t* prims.cc (_Jv_CreateJavaVM): Updated for renaming.\n\t* Makefile.am (gnu/gcj/runtime/ExtensionClassLoader.h): Renamed.\n\t(ordinary_java_source_files): Added ExtensionClassLoader.java,\n\tremoved VMClassLoader.java.\n\t(nat_source_files): Removed natVMClassLoader.cc.\n\nFrom-SVN: r97414", "tree": {"sha": "3d09f5cb569908269df7399fc0b8e4ca62d64f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d09f5cb569908269df7399fc0b8e4ca62d64f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef87438639663154314e2cc5cd692eddaebfc799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef87438639663154314e2cc5cd692eddaebfc799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef87438639663154314e2cc5cd692eddaebfc799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef87438639663154314e2cc5cd692eddaebfc799/comments", "author": null, "committer": null, "parents": [{"sha": "35913faefbd7d9de8847f449ac4fd750b383e75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35913faefbd7d9de8847f449ac4fd750b383e75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35913faefbd7d9de8847f449ac4fd750b383e75f"}], "stats": {"total": 400, "additions": 194, "deletions": 206}, "files": [{"sha": "0b53eaa6a7672f5805f98add37bfd9102fa93851", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -1,3 +1,29 @@\n+2005-04-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natVMClassLoader.cc (getSystemClassLoaderInternal):\n+\tUpdated for name change.\n+\t(nativeFindClass): New method.\n+\t(loadClass): Use nativeFindClass.\n+\t* java/lang/natClassLoader.cc (_Jv_FindClass): Use single-argument\n+\tform of loadClass.\n+\t* java/lang/VMClassLoader.java (tried_libraries, lib_control,\n+\tLIB_FULL, LIB_CACHE, LIB_NEVER): New fields from old\n+\tVMClassLoader.\n+\t(initialize): New method.\n+\t(nativeFindClass): Declare.\n+\t* gnu/gcj/runtime/natVMClassLoader.cc: Removed.\n+\t* gnu/gcj/runtime/VMClassLoader.java: Removed.\n+\t* gnu/gcj/runtime/ExtensionClassLoader.java: Renamed from\n+\tVMClassLoader.java.\n+\t(definePackageForNative): Removed.\n+\t(tried_libraries, LIB_CACHE, LIB_FULL, LIB_NEVER, lib_control):\n+\tMoved to VMClassLoader.java.\n+\t* prims.cc (_Jv_CreateJavaVM): Updated for renaming.\n+\t* Makefile.am (gnu/gcj/runtime/ExtensionClassLoader.h): Renamed.\n+\t(ordinary_java_source_files): Added ExtensionClassLoader.java,\n+\tremoved VMClassLoader.java.\n+\t(nat_source_files): Removed natVMClassLoader.cc.\n+\n 2005-04-01  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "7afbe199eb9602c741abbce6923639961492a1c6", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -811,7 +811,7 @@ java/lang/reflect/Proxy$$ProxyType.h: java/lang/reflect/Proxy.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t'java/lang/reflect/Proxy$$ProxyType'\n \n-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class\n+gnu/gcj/runtime/ExtensionClassLoader.h: gnu/gcj/runtime/ExtensionClassLoader.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t    -friend 'class ::java::lang::ClassLoader;' \\\n \t    $(basename $<)\n@@ -2991,6 +2991,7 @@ gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\\n gnu/gcj/runtime/BootClassLoader.java \\\n+gnu/gcj/runtime/ExtensionClassLoader.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/HelperClassLoader.java \\\n@@ -3001,7 +3002,6 @@ gnu/gcj/runtime/SharedLibHelper.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/SystemClassLoader.java \\\n-gnu/gcj/runtime/VMClassLoader.java \\\n gnu/gcj/util/Debug.java \\\n gnu/java/io/ASN1ParsingException.java \\\n gnu/java/io/Base64InputStream.java \\\n@@ -3760,7 +3760,6 @@ gnu/gcj/io/shs.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n-gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/gcj/util/natDebug.cc \\\n gnu/java/lang/natMainThread.cc \\\n gnu/java/net/natPlainDatagramSocketImpl.cc \\"}, {"sha": "4d959edada40ab63e0a210d07144f191061d4250", "filename": "libjava/Makefile.in", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -338,8 +338,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/gcj/io/natSimpleSHSStream.cc gnu/gcj/io/shs.cc \\\n \tgnu/gcj/runtime/natFinalizerThread.cc \\\n \tgnu/gcj/runtime/natSharedLibLoader.cc \\\n-\tgnu/gcj/runtime/natStringBuffer.cc \\\n-\tgnu/gcj/runtime/natVMClassLoader.cc gnu/gcj/util/natDebug.cc \\\n+\tgnu/gcj/runtime/natStringBuffer.cc gnu/gcj/util/natDebug.cc \\\n \tgnu/java/lang/natMainThread.cc \\\n \tgnu/java/net/natPlainDatagramSocketImpl.cc \\\n \tgnu/java/net/natPlainSocketImpl.cc \\\n@@ -548,6 +547,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/gcj/RawDataManaged.java gnu/gcj/io/DefaultMimeTypes.java \\\n \tgnu/gcj/io/MimeTypes.java gnu/gcj/io/SimpleSHSStream.java \\\n \tgnu/gcj/runtime/BootClassLoader.java \\\n+\tgnu/gcj/runtime/ExtensionClassLoader.java \\\n \tgnu/gcj/runtime/FileDeleter.java \\\n \tgnu/gcj/runtime/FinalizerThread.java \\\n \tgnu/gcj/runtime/HelperClassLoader.java \\\n@@ -557,8 +557,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/gcj/runtime/SharedLibHelper.java \\\n \tgnu/gcj/runtime/SharedLibLoader.java \\\n \tgnu/gcj/runtime/StringBuffer.java \\\n-\tgnu/gcj/runtime/SystemClassLoader.java \\\n-\tgnu/gcj/runtime/VMClassLoader.java gnu/gcj/util/Debug.java \\\n+\tgnu/gcj/runtime/SystemClassLoader.java gnu/gcj/util/Debug.java \\\n \tgnu/java/io/ASN1ParsingException.java \\\n \tgnu/java/io/Base64InputStream.java \\\n \tgnu/java/io/ClassLoaderObjectInputStream.java \\\n@@ -2319,8 +2318,7 @@ am__objects_6 = gnu/gcj/natCore.lo \\\n \tgnu/gcj/io/natSimpleSHSStream.lo gnu/gcj/io/shs.lo \\\n \tgnu/gcj/runtime/natFinalizerThread.lo \\\n \tgnu/gcj/runtime/natSharedLibLoader.lo \\\n-\tgnu/gcj/runtime/natStringBuffer.lo \\\n-\tgnu/gcj/runtime/natVMClassLoader.lo gnu/gcj/util/natDebug.lo \\\n+\tgnu/gcj/runtime/natStringBuffer.lo gnu/gcj/util/natDebug.lo \\\n \tgnu/java/lang/natMainThread.lo \\\n \tgnu/java/net/natPlainDatagramSocketImpl.lo \\\n \tgnu/java/net/natPlainSocketImpl.lo \\\n@@ -3553,6 +3551,7 @@ am__objects_15 = $(am__objects_9) gnu/classpath/ServiceFactory.lo \\\n \tgnu/gcj/io/DefaultMimeTypes.lo gnu/gcj/io/MimeTypes.lo \\\n \tgnu/gcj/io/SimpleSHSStream.lo \\\n \tgnu/gcj/runtime/BootClassLoader.lo \\\n+\tgnu/gcj/runtime/ExtensionClassLoader.lo \\\n \tgnu/gcj/runtime/FileDeleter.lo \\\n \tgnu/gcj/runtime/FinalizerThread.lo \\\n \tgnu/gcj/runtime/HelperClassLoader.lo \\\n@@ -3561,8 +3560,7 @@ am__objects_15 = $(am__objects_9) gnu/classpath/ServiceFactory.lo \\\n \tgnu/gcj/runtime/SharedLibHelper.lo \\\n \tgnu/gcj/runtime/SharedLibLoader.lo \\\n \tgnu/gcj/runtime/StringBuffer.lo \\\n-\tgnu/gcj/runtime/SystemClassLoader.lo \\\n-\tgnu/gcj/runtime/VMClassLoader.lo gnu/gcj/util/Debug.lo \\\n+\tgnu/gcj/runtime/SystemClassLoader.lo gnu/gcj/util/Debug.lo \\\n \tgnu/java/io/ASN1ParsingException.lo \\\n \tgnu/java/io/Base64InputStream.lo \\\n \tgnu/java/io/ClassLoaderObjectInputStream.lo \\\n@@ -6753,6 +6751,7 @@ gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\\n gnu/gcj/runtime/BootClassLoader.java \\\n+gnu/gcj/runtime/ExtensionClassLoader.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/HelperClassLoader.java \\\n@@ -6763,7 +6762,6 @@ gnu/gcj/runtime/SharedLibHelper.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/SystemClassLoader.java \\\n-gnu/gcj/runtime/VMClassLoader.java \\\n gnu/gcj/util/Debug.java \\\n gnu/java/io/ASN1ParsingException.java \\\n gnu/java/io/Base64InputStream.java \\\n@@ -7517,7 +7515,6 @@ gnu/gcj/io/shs.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n-gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/gcj/util/natDebug.cc \\\n gnu/java/lang/natMainThread.cc \\\n gnu/java/net/natPlainDatagramSocketImpl.cc \\\n@@ -8227,8 +8224,6 @@ gnu/gcj/runtime/natSharedLibLoader.lo:  \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/natStringBuffer.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n-gnu/gcj/runtime/natVMClassLoader.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n-\tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/util/$(am__dirstamp):\n \t@$(mkdir_p) gnu/gcj/util\n \t@: > gnu/gcj/util/$(am__dirstamp)\n@@ -9045,6 +9040,9 @@ gnu/gcj/io/SimpleSHSStream.lo: gnu/gcj/io/$(am__dirstamp) \\\n \tgnu/gcj/io/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/BootClassLoader.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n+gnu/gcj/runtime/ExtensionClassLoader.lo:  \\\n+\tgnu/gcj/runtime/$(am__dirstamp) \\\n+\tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/FileDeleter.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/FinalizerThread.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n@@ -9065,8 +9063,6 @@ gnu/gcj/runtime/StringBuffer.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/SystemClassLoader.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n \tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n-gnu/gcj/runtime/VMClassLoader.lo: gnu/gcj/runtime/$(am__dirstamp) \\\n-\tgnu/gcj/runtime/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/util/Debug.lo: gnu/gcj/util/$(am__dirstamp) \\\n \tgnu/gcj/util/$(DEPDIR)/$(am__dirstamp)\n gnu/java/io/$(am__dirstamp):\n@@ -14851,6 +14847,8 @@ mostlyclean-compile:\n \t-rm -f gnu/gcj/natCore.lo\n \t-rm -f gnu/gcj/runtime/BootClassLoader.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/BootClassLoader.lo\n+\t-rm -f gnu/gcj/runtime/ExtensionClassLoader.$(OBJEXT)\n+\t-rm -f gnu/gcj/runtime/ExtensionClassLoader.lo\n \t-rm -f gnu/gcj/runtime/FileDeleter.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/FileDeleter.lo\n \t-rm -f gnu/gcj/runtime/FinalizerThread.$(OBJEXT)\n@@ -14871,16 +14869,12 @@ mostlyclean-compile:\n \t-rm -f gnu/gcj/runtime/StringBuffer.lo\n \t-rm -f gnu/gcj/runtime/SystemClassLoader.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/SystemClassLoader.lo\n-\t-rm -f gnu/gcj/runtime/VMClassLoader.$(OBJEXT)\n-\t-rm -f gnu/gcj/runtime/VMClassLoader.lo\n \t-rm -f gnu/gcj/runtime/natFinalizerThread.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/natFinalizerThread.lo\n \t-rm -f gnu/gcj/runtime/natSharedLibLoader.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/natSharedLibLoader.lo\n \t-rm -f gnu/gcj/runtime/natStringBuffer.$(OBJEXT)\n \t-rm -f gnu/gcj/runtime/natStringBuffer.lo\n-\t-rm -f gnu/gcj/runtime/natVMClassLoader.$(OBJEXT)\n-\t-rm -f gnu/gcj/runtime/natVMClassLoader.lo\n \t-rm -f gnu/gcj/tools/gcj_dbtool/Main.$(OBJEXT)\n \t-rm -f gnu/gcj/tools/gcj_dbtool/natMain.$(OBJEXT)\n \t-rm -f gnu/gcj/util/Debug.$(OBJEXT)\n@@ -19828,6 +19822,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/natSimpleSHSStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/shs.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/BootClassLoader.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/ExtensionClassLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/FileDeleter.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/FinalizerThread.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/HelperClassLoader.Plo@am__quote@\n@@ -19838,11 +19833,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/SharedLibLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/StringBuffer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/SystemClassLoader.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/VMClassLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natFinalizerThread.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natSharedLibLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natStringBuffer.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natVMClassLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/tools/gcj_dbtool/$(DEPDIR)/Main.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/tools/gcj_dbtool/$(DEPDIR)/natMain.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/util/$(DEPDIR)/Debug.Plo@am__quote@\n@@ -24245,7 +24238,7 @@ java/lang/reflect/Proxy$$ProxyType.h: java/lang/reflect/Proxy.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t'java/lang/reflect/Proxy$$ProxyType'\n \n-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class\n+gnu/gcj/runtime/ExtensionClassLoader.h: gnu/gcj/runtime/ExtensionClassLoader.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t    -friend 'class ::java::lang::ClassLoader;' \\\n \t    $(basename $<)"}, {"sha": "690143a437a69f936c6065ca919bba916f39a3b4", "filename": "libjava/gnu/gcj/runtime/ExtensionClassLoader.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fgnu%2Fgcj%2Fruntime%2FExtensionClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fgnu%2Fgcj%2Fruntime%2FExtensionClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FExtensionClassLoader.java?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -0,0 +1,40 @@\n+/* Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n+\n+package gnu.gcj.runtime;\n+\n+import java.net.URL;\n+\n+// The extension loader for libgcj.  Class loader bootstrap is a bit\n+// tricky, see prims.cc and SystemClassLoader for some details.\n+public final class ExtensionClassLoader extends HelperClassLoader\n+{\n+  private ExtensionClassLoader ()\n+  {\t\n+  }\n+\n+  private void init() \n+  {\n+    addDirectoriesFromProperty(\"java.ext.dirs\");\n+  }\n+\n+  // This can be package-private because we only call it from native\n+  // code during startup.\n+  static void initialize ()\n+  {\n+    instance.init();\n+    system_instance.init();\n+  }\n+\n+  // The only ExtensionClassLoader that can exist.\n+  static ExtensionClassLoader instance = new ExtensionClassLoader();\n+  // The system class loader.\n+  static SystemClassLoader system_instance = new SystemClassLoader(instance);\n+}"}, {"sha": "1ed0c026cf8094ea476e056910e18e2dc5b43c80", "filename": "libjava/gnu/gcj/runtime/VMClassLoader.java", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35913faefbd7d9de8847f449ac4fd750b383e75f/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35913faefbd7d9de8847f449ac4fd750b383e75f/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java?ref=35913faefbd7d9de8847f449ac4fd750b383e75f", "patch": "@@ -1,94 +0,0 @@\n-/* Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.runtime;\n-\n-import java.net.URL;\n-import java.util.HashSet;\n-\n-// Despite its name, this class is really the extension loader for\n-// libgcj.  Class loader bootstrap is a bit tricky, see prims.cc and\n-// SystemClassLoader for some details.\n-public final class VMClassLoader extends HelperClassLoader\n-{\n-  private VMClassLoader ()\n-  {\t\n-    String p\n-      = System.getProperty (\"gnu.gcj.runtime.VMClassLoader.library_control\",\n-\t\t\t    \"\");\n-    if (\"never\".equals(p))\n-      lib_control = LIB_NEVER;\n-    else if (\"cache\".equals(p))\n-      lib_control = LIB_CACHE;\n-    else if (\"full\".equals(p))\n-      lib_control = LIB_FULL;\n-    else\n-      lib_control = LIB_CACHE;\n-  }\n-\n-  private void init() \n-  {\n-    addDirectoriesFromProperty(\"java.ext.dirs\");\n-  }\n-\n-  /** This is overridden to search the internal hash table, which \n-   * will only search existing linked-in classes.   This will make\n-   * the default implementation of loadClass (in ClassLoader) work right.\n-   * The implementation of this method is in\n-   * gnu/gcj/runtime/natVMClassLoader.cc.\n-   */\n-  protected native Class findClass(String name) \n-    throws java.lang.ClassNotFoundException;\n-\n-  // This can be package-private because we only call it from native\n-  // code during startup.\n-  static void initialize ()\n-  {\n-    instance.init();\n-    system_instance.init();\n-  }\n-\n-  // Define a package for something loaded natively.\n-  void definePackageForNative(String className)\n-  {\n-    int lastDot = className.lastIndexOf('.');\n-    if (lastDot != -1)\n-      {\n-\tString packageName = className.substring(0, lastDot);\n-\tif (getPackage(packageName) == null)\n-\t  {\n-\t    // FIXME: this assumes we're defining the core, which\n-\t    // isn't necessarily so.  We could detect this and set up\n-\t    // appropriately.  We could also look at a manifest file\n-\t    // compiled into the .so.\n-\t    definePackage(packageName, \"Java Platform API Specification\",\n-\t\t\t  \"GNU\", \"1.4\", \"gcj\", \"GNU\",\n-\t\t\t  null, // FIXME: gcj version.\n-\t\t\t  null);\n-\t  }\n-      }\n-  }\n-\n-  // This keeps track of shared libraries we've already tried to load.\n-  private HashSet tried_libraries = new HashSet();\n-\n-  // Holds one of the LIB_* constants; used to determine how shared\n-  // library loads are done.\n-  private int lib_control;\n-\n-  // The only VMClassLoader that can exist.\n-  static VMClassLoader instance = new VMClassLoader();\n-  // The system class loader.\n-  static SystemClassLoader system_instance = new SystemClassLoader(instance);\n-\n-  private static final int LIB_FULL = 0;\n-  private static final int LIB_CACHE = 1;\n-  private static final int LIB_NEVER = 2;\n-}"}, {"sha": "7f2ee34eb32d219898a26f765895e28a2dc2bc38", "filename": "libjava/gnu/gcj/runtime/natVMClassLoader.cc", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35913faefbd7d9de8847f449ac4fd750b383e75f/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatVMClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35913faefbd7d9de8847f449ac4fd750b383e75f/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatVMClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatVMClassLoader.cc?ref=35913faefbd7d9de8847f449ac4fd750b383e75f", "patch": "@@ -1,79 +0,0 @@\n-// Native code for VMClassLoader\n-\n-/* Copyright (C) 2002, 2003, 2005  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-\n-#include <gcj/cni.h>\n-#include <jvm.h>\n-\n-#include <gnu/gcj/runtime/VMClassLoader.h>\n-#include <java/lang/Class.h>\n-#include <java/lang/StringBuffer.h>\n-#include <java/net/URLClassLoader.h>\n-#include <java/lang/Runtime.h>\n-#include <java/util/HashSet.h>\n-\n-jclass\n-gnu::gcj::runtime::VMClassLoader::findClass (jstring name)\n-{\n-  _Jv_Utf8Const *name_u = _Jv_makeUtf8Const (name);\n-  jclass klass = _Jv_FindClassInCache (name_u);\n-\n-  if (! klass && lib_control != LIB_NEVER)\n-    {\n-      // Turn `gnu.pkg.quux' into `lib-gnu-pkg-quux'.  Then search for\n-      // a module named (eg, on Linux) `lib-gnu-pkg-quux.so', followed\n-      // by `lib-gnu-pkg.so' and `lib-gnu.so'.  If loading one of\n-      // these causes the class to appear in the cache, then use it.\n-      java::lang::StringBuffer *sb = new java::lang::StringBuffer (JvNewStringLatin1(\"lib-\"));\n-      // Skip inner classes\n-      jstring cn;\n-      jint ci = name->indexOf('$');\n-      if (ci == -1)\n-\tcn = name;\n-      else\n-\tcn = name->substring (0, ci);\n-      jstring so_base_name = (sb->append (cn)->toString ())->replace ('.', '-');\n-\n-      using namespace ::java::lang;\n-      Runtime *rt = Runtime::getRuntime();\n-\n-      // Compare against `3' because that is the length of \"lib\".\n-      while (! klass && so_base_name && so_base_name->length() > 3)\n-\t{\n-\t  if (lib_control == LIB_CACHE)\n-\t    {\n-\t      // If we've already tried this name, we're done.\n-\t      if (tried_libraries->contains(so_base_name))\n-\t\tbreak;\n-\t      tried_libraries->add(so_base_name);\n-\t    }\n-\n-\t  jboolean loaded = rt->loadLibraryInternal (so_base_name);\n-\n-\t  jint nd = so_base_name->lastIndexOf ('-');\n-\t  if (nd == -1)\n-\t    so_base_name = NULL;\n-\t  else\n-\t    so_base_name = so_base_name->substring (0, nd);\n-\n-\t  if (loaded)\n-\t    klass = _Jv_FindClassInCache (name_u);\n-\t}\n-    }\n-\n-  // Either define the package, or try loading using the interpreter.\n-  if (klass)\n-    definePackageForNative(name);\n-  else\n-    klass = java::net::URLClassLoader::findClass (name);\n-\n-  return klass;\n-}"}, {"sha": "c48fc709991367de972f9bfffc90323596abcda1", "filename": "libjava/java/lang/VMClassLoader.java", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMClassLoader.java?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -51,6 +51,7 @@\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.StringTokenizer;\n import gnu.gcj.runtime.BootClassLoader;\n@@ -87,6 +88,17 @@\n   // until we've initialized the system, at which point it is created.\n   static BootClassLoader bootLoader;\n \n+  // This keeps track of shared libraries we've already tried to load.\n+  private static HashSet tried_libraries;\n+\n+  // Holds one of the LIB_* constants; used to determine how shared\n+  // library loads are done.\n+  private static int lib_control;\n+\n+  private static final int LIB_FULL = 0;\n+  private static final int LIB_CACHE = 1;\n+  private static final int LIB_NEVER = 2;\n+\n   /**\n    * Helper to define a class using a string of bytes. This assumes that\n    * the security checks have already been performed, if necessary.\n@@ -298,6 +310,30 @@ static final Map classAssertionStatus()\n \n   static native void initBootLoader(String libdir);\n \n+  static void initialize(String libdir)\n+  {\n+    initBootLoader(libdir);\n+\n+    String p\n+      = System.getProperty (\"gnu.gcj.runtime.VMClassLoader.library_control\",\n+\t\t\t    \"\");\n+    if (\"never\".equals(p))\n+      lib_control = LIB_NEVER;\n+    else if (\"cache\".equals(p))\n+      lib_control = LIB_CACHE;\n+    else if (\"full\".equals(p))\n+      lib_control = LIB_FULL;\n+    else\n+      lib_control = LIB_CACHE;\n+\n+    tried_libraries = new HashSet();\n+  }\n+\n+  /**\n+   * Possibly load a .so and search it for classes.\n+   */\n+  static native Class nativeFindClass(String name);\n+\n   static ClassLoader getSystemClassLoader()\n   {\n     // This method is called as the initialization of systemClassLoader,"}, {"sha": "00292f93dad5836ca6c3d9bb4567002c0b57d8a4", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -26,7 +26,6 @@ details.  */\n #include <java/lang/Character.h>\n #include <java/lang/Thread.h>\n #include <java/lang/ClassLoader.h>\n-#include <gnu/gcj/runtime/VMClassLoader.h>\n #include <java/lang/InternalError.h>\n #include <java/lang/IllegalAccessError.h>\n #include <java/lang/LinkageError.h>\n@@ -226,8 +225,9 @@ _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader)\n     {\n       if (loader)\n \t{\n-\t  // Load using a user-defined loader, jvmspec 5.3.2\n-\t  klass = loader->loadClass(sname, false);\n+\t  // Load using a user-defined loader, jvmspec 5.3.2.\n+\t  // Note that we explicitly must call the single-argument form.\n+\t  klass = loader->loadClass(sname);\n \n \t  // If \"loader\" delegated the loadClass operation to another\n \t  // loader, explicitly register that it is also an initiating"}, {"sha": "e6c3b947d2428d31d1028181ea87a5488c61b147", "filename": "libjava/java/lang/natVMClassLoader.cc", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -23,14 +23,17 @@ details.  */\n \n #include <java/lang/VMClassLoader.h>\n #include <java/lang/VMCompiler.h>\n-#include <gnu/gcj/runtime/VMClassLoader.h>\n+#include <gnu/gcj/runtime/ExtensionClassLoader.h>\n #include <gnu/gcj/runtime/SystemClassLoader.h>\n #include <gnu/gcj/runtime/BootClassLoader.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Class.h>\n #include <java/lang/Throwable.h>\n #include <java/security/ProtectionDomain.h>\n #include <java/lang/ClassFormatError.h>\n+#include <java/lang/StringBuffer.h>\n+#include <java/lang/Runtime.h>\n+#include <java/util/HashSet.h>\n \n void\n java::lang::VMClassLoader::resolveClass (jclass klass)\n@@ -110,8 +113,8 @@ java::lang::VMClassLoader::defineClass (java::lang::ClassLoader *loader,\n java::lang::ClassLoader *\n java::lang::VMClassLoader::getSystemClassLoaderInternal()\n {\n-  _Jv_InitClass (&gnu::gcj::runtime::VMClassLoader::class$);\n-  return gnu::gcj::runtime::VMClassLoader::system_instance;\n+  _Jv_InitClass (&gnu::gcj::runtime::ExtensionClassLoader::class$);\n+  return gnu::gcj::runtime::ExtensionClassLoader::system_instance;\n }\n \n jclass\n@@ -129,6 +132,68 @@ java::lang::VMClassLoader::initBootLoader(jstring libdir)\n   bootLoader = new gnu::gcj::runtime::BootClassLoader(libdir);\n }\n \n+jclass\n+java::lang::VMClassLoader::nativeFindClass (jstring name)\n+{\n+  jclass klass = NULL;\n+\n+  if (lib_control != LIB_NEVER)\n+    {\n+      // Turn `gnu.pkg.quux' into `lib-gnu-pkg-quux'.  Then search for\n+      // a module named (eg, on Linux) `lib-gnu-pkg-quux.so', followed\n+      // by `lib-gnu-pkg.so' and `lib-gnu.so'.  If loading one of\n+      // these causes the class to appear in the cache, then use it.\n+      java::lang::StringBuffer *sb\n+\t= new java::lang::StringBuffer (JvNewStringLatin1(\"lib-\"));\n+      // Skip inner classes\n+      jstring cn;\n+      jint ci = name->indexOf('$');\n+      if (ci == -1)\n+\tcn = name;\n+      else\n+\tcn = name->substring (0, ci);\n+      jstring so_base_name\n+\t= (sb->append (cn)->toString ())->replace ('.', '-');\n+\n+      using namespace ::java::lang;\n+      Runtime *rt = Runtime::getRuntime();\n+\n+      _Jv_Utf8Const *name_u = NULL;\n+\n+      // Compare against `3' because that is the length of \"lib\".\n+      while (! klass && so_base_name && so_base_name->length() > 3)\n+\t{\n+\t  if (lib_control == LIB_CACHE)\n+\t    {\n+\t      // If we've already tried this name, we're done.\n+\t      if (tried_libraries->contains(so_base_name))\n+\t\tbreak;\n+\t      tried_libraries->add(so_base_name);\n+\t    }\n+\n+\t  jboolean loaded = rt->loadLibraryInternal (so_base_name);\n+\n+\t  jint nd = so_base_name->lastIndexOf ('-');\n+\t  if (nd == -1)\n+\t    so_base_name = NULL;\n+\t  else\n+\t    so_base_name = so_base_name->substring (0, nd);\n+\n+\t  if (loaded)\n+\t    {\n+\t      if (name_u == NULL)\n+\t\tname_u = _Jv_makeUtf8Const (name);\n+\t      klass = _Jv_FindClassInCache (name_u);\n+\t    }\n+\t}\n+    }\n+\n+  if (klass)\n+    definePackageForNative(name);\n+\n+  return klass;\n+}\n+\n jclass\n java::lang::VMClassLoader::loadClass(jstring name, jboolean resolve)\n {\n@@ -142,6 +207,8 @@ java::lang::VMClassLoader::loadClass(jstring name, jboolean resolve)\n       _Jv_Utf8Const *utf = _Jv_makeUtf8Const (name);\n       klass = _Jv_FindClassInCache (utf);\n     }\n+  if (! klass)\n+    klass = nativeFindClass(name);\n   if (klass)\n     {\n       // We never want to return a class without its supers linked."}, {"sha": "5643902f27f59b53f793d7f89ce4907704de086a", "filename": "libjava/prims.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87438639663154314e2cc5cd692eddaebfc799/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=ef87438639663154314e2cc5cd692eddaebfc799", "patch": "@@ -60,7 +60,7 @@ details.  */\n #include <java/io/PrintStream.h>\n #include <java/lang/UnsatisfiedLinkError.h>\n #include <java/lang/VirtualMachineError.h>\n-#include <gnu/gcj/runtime/VMClassLoader.h>\n+#include <gnu/gcj/runtime/ExtensionClassLoader.h>\n #include <gnu/gcj/runtime/FinalizerThread.h>\n #include <execution.h>\n #include <gnu/java/lang/MainThread.h>\n@@ -1132,8 +1132,8 @@ _Jv_CreateJavaVM (JvVMInitArgs* vm_args)\n   _Jv_InitClass (&java::lang::ClassLoader::class$);\n \n   // Set up the system class loader and the bootstrap class loader.\n-  gnu::gcj::runtime::VMClassLoader::initialize();\n-  java::lang::VMClassLoader::initBootLoader(JvNewStringLatin1(TOOLEXECLIBDIR));\n+  gnu::gcj::runtime::ExtensionClassLoader::initialize();\n+  java::lang::VMClassLoader::initialize(JvNewStringLatin1(TOOLEXECLIBDIR));\n \n   _Jv_RegisterBootstrapPackages();\n "}]}