{"sha": "dcd13066a0a64aca161216a077d7b9e14b87e0d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkMTMwNjZhMGE2NGFjYTE2MTIxNmEwNzdkN2I5ZTE0Yjg3ZTBkNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:14:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:14:40Z"}, "message": "(TARGET_ALIGN_INT, MASK_ALIGN_INT): New macros.\n\n(BIGGEST_ALIGNMENT): Determine according to TARGET_ALIGN_INT.\n(TARGET_SWITCHES): Add align-int and no-align-int.\n\nFrom-SVN: r14082", "tree": {"sha": "c80cd8b9eb79c85cdb5db73153e4fb448810c02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80cd8b9eb79c85cdb5db73153e4fb448810c02a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd13066a0a64aca161216a077d7b9e14b87e0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd13066a0a64aca161216a077d7b9e14b87e0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd13066a0a64aca161216a077d7b9e14b87e0d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd13066a0a64aca161216a077d7b9e14b87e0d4/comments", "author": null, "committer": null, "parents": [{"sha": "d82f7df265f5df5c1769a954069cf8afb4952097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82f7df265f5df5c1769a954069cf8afb4952097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82f7df265f5df5c1769a954069cf8afb4952097"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "78dc97457e5629159cb4c4ca846a45e9da0dc2c5", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd13066a0a64aca161216a077d7b9e14b87e0d4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd13066a0a64aca161216a077d7b9e14b87e0d4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=dcd13066a0a64aca161216a077d7b9e14b87e0d4", "patch": "@@ -113,6 +113,13 @@ extern int target_flags;\n #define MASK_5200\t2048\n #define TARGET_5200 (target_flags & MASK_5200)\n \n+/* Align ints to a word boundary.  This breaks compatibility with the \n+   published ABI's for structures containing ints, but produces faster\n+   code on cpus with 32 bit busses (020, 030, 040, 060, CPU32+, coldfire).\n+   It's required for coldfire cpus without a misalignment module.  */\n+#define MASK_ALIGN_INT\t4096\n+#define TARGET_ALIGN_INT (target_flags & MASK_ALIGN_INT)\n+\n /* Compile for a CPU32 */\n \t/* A 68020 without bitfields is a good heuristic for a CPU32 */\n #define TARGET_CPU32\t(TARGET_68020 && !TARGET_BITFIELD)\n@@ -158,6 +165,8 @@ extern int target_flags;\n     { \"68302\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n     { \"68332\", - (MASK_68060|MASK_68040|MASK_BITFIELD)},\t\t\\\n     { \"68332\", MASK_68020},\t\t\t\t\t\t\\\n+    { \"align-int\", MASK_ALIGN_INT },\t\t\t\t\t\\\n+    { \"no-align-int\", -MASK_ALIGN_INT },\t\t\t\t\\\n     SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n /* TARGET_DEFAULT is defined in sun*.h and isi.h, etc.  */\n@@ -257,8 +266,12 @@ extern int target_flags;\n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 16\n \n-/* No data type wants to be aligned rounder than this.  */\n-#define BIGGEST_ALIGNMENT 16\n+/* No data type wants to be aligned rounder than this. \n+   Most published ABIs say that ints should be aligned on 16 bit\n+   boundries, but cpus with 32 bit busses get better performance\n+   aligned on 32 bit boundries.  Coldfires without a misalignment\n+   module require 32 bit alignment. */\n+#define BIGGEST_ALIGNMENT (TARGET_ALIGN_INT ? 32 : 16)\n \n /* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */"}]}