{"sha": "177bc204a2f3a13c9fad9c8f88eb3449c8752552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3YmMyMDRhMmYzYTEzYzlmYWQ5YzhmODhlYjM0NDljODc1MjU1Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@linux.vnet.ibm.com", "date": "2014-02-07T14:52:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-07T14:52:26Z"}, "message": "gcc/\n\t* config/s390/s390-protos.h (s390_can_use_simple_return_insn)\n\t(s390_can_use_return_insn): Declare.\n\t* config/s390/s390.h (EPILOGUE_USES): Define.\n\t* config/s390/s390.c (s390_mainpool_start): Allow two main_pool\n\tinstructions.\n\t(s390_chunkify_start): Handle return JUMP_LABELs.\n\t(s390_early_mach): Emit a main_pool instruction on the entry edge.\n\t(s300_set_up_by_prologue, s390_can_use_simple_return_insn)\n\t(s390_can_use_return_insn): New functions.\n\t(s390_fix_long_loop_prediction): Handle conditional returns.\n\t(TARGET_SET_UP_BY_PROLOGUE): Define.\n\t* config/s390/s390.md (ANY_RETURN): New code iterator.\n\t(*creturn, *csimple_return, return, simple_return): New patterns.\n\nFrom-SVN: r207605", "tree": {"sha": "66c6a4c444bca952b3f996e781e0e593bbc8db05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c6a4c444bca952b3f996e781e0e593bbc8db05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177bc204a2f3a13c9fad9c8f88eb3449c8752552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177bc204a2f3a13c9fad9c8f88eb3449c8752552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177bc204a2f3a13c9fad9c8f88eb3449c8752552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177bc204a2f3a13c9fad9c8f88eb3449c8752552/comments", "author": null, "committer": null, "parents": [{"sha": "0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0621cf3c78ee4e26cdb44bdfcb40677028280d5d"}], "stats": {"total": 120, "additions": 118, "deletions": 2}, "files": [{"sha": "5703bb57d1d2e0d26e81b09365130034b6b3850f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=177bc204a2f3a13c9fad9c8f88eb3449c8752552", "patch": "@@ -1,3 +1,19 @@\n+2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_can_use_simple_return_insn)\n+\t(s390_can_use_return_insn): Declare.\n+\t* config/s390/s390.h (EPILOGUE_USES): Define.\n+\t* config/s390/s390.c (s390_mainpool_start): Allow two main_pool\n+\tinstructions.\n+\t(s390_chunkify_start): Handle return JUMP_LABELs.\n+\t(s390_early_mach): Emit a main_pool instruction on the entry edge.\n+\t(s300_set_up_by_prologue, s390_can_use_simple_return_insn)\n+\t(s390_can_use_return_insn): New functions.\n+\t(s390_fix_long_loop_prediction): Handle conditional returns.\n+\t(TARGET_SET_UP_BY_PROLOGUE): Define.\n+\t* config/s390/s390.md (ANY_RETURN): New code iterator.\n+\t(*creturn, *csimple_return, return, simple_return): New patterns.\n+\n 2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_restore_gprs_from_fprs): Add REG_CFA_RESTORE"}, {"sha": "9bd08fa20dc2248689b22dd9453f0e1de1d1ce6a", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=177bc204a2f3a13c9fad9c8f88eb3449c8752552", "patch": "@@ -36,6 +36,8 @@ extern bool s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment);\n extern HOST_WIDE_INT s390_initial_elimination_offset (int, int);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);\n+extern bool s390_can_use_simple_return_insn (void);\n+extern bool s390_can_use_return_insn (void);\n extern void s390_function_profiler (FILE *, int);\n extern void s390_set_has_landing_pad_p (bool);\n extern bool s390_hard_regno_mode_ok (unsigned int, enum machine_mode);"}, {"sha": "993ed8434f61e21c044b9320eae52f3aa94b52c0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=177bc204a2f3a13c9fad9c8f88eb3449c8752552", "patch": "@@ -6673,7 +6673,15 @@ s390_mainpool_start (void)\n \t  && GET_CODE (SET_SRC (PATTERN (insn))) == UNSPEC_VOLATILE\n \t  && XINT (SET_SRC (PATTERN (insn)), 1) == UNSPECV_MAIN_POOL)\n \t{\n-\t  gcc_assert (!pool->pool_insn);\n+\t  /* There might be two main_pool instructions if base_reg\n+\t     is call-clobbered; one for shrink-wrapped code and one\n+\t     for the rest.  We want to keep the first.  */\n+\t  if (pool->pool_insn)\n+\t    {\n+\t      insn = PREV_INSN (insn);\n+\t      delete_insn (NEXT_INSN (insn));\n+\t      continue;\n+\t    }\n \t  pool->pool_insn = insn;\n \t}\n \n@@ -7110,7 +7118,7 @@ s390_chunkify_start (void)\n \t  if (GET_CODE (pat) == SET)\n \t    {\n \t      rtx label = JUMP_LABEL (insn);\n-\t      if (label)\n+\t      if (label && !ANY_RETURN_P (label))\n \t\t{\n \t\t  if (s390_find_pool (pool_list, label)\n \t\t      != s390_find_pool (pool_list, insn))\n@@ -8635,6 +8643,11 @@ s390_early_mach (void)\n   /* Re-compute register info.  */\n   s390_register_info ();\n \n+  /* If we're using a base register, ensure that it is always valid for\n+     the first non-prologue instruction.  */\n+  if (cfun->machine->base_reg)\n+    emit_insn_at_entry (gen_main_pool (cfun->machine->base_reg));\n+\n   /* Annotate all constant pool references to let the scheduler know\n      they implicitly use the base register.  */\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -9170,6 +9183,55 @@ s390_emit_epilogue (bool sibcall)\n     }\n }\n \n+/* Implement TARGET_SET_UP_BY_PROLOGUE.  */\n+\n+static void\n+s300_set_up_by_prologue (hard_reg_set_container *regs)\n+{\n+  if (cfun->machine->base_reg\n+      && !call_really_used_regs[REGNO (cfun->machine->base_reg)])\n+    SET_HARD_REG_BIT (regs->set, REGNO (cfun->machine->base_reg));\n+}\n+\n+/* Return true if the function can use simple_return to return outside\n+   of a shrink-wrapped region.  At present shrink-wrapping is supported\n+   in all cases.  */\n+\n+bool\n+s390_can_use_simple_return_insn (void)\n+{\n+  return true;\n+}\n+\n+/* Return true if the epilogue is guaranteed to contain only a return\n+   instruction and if a direct return can therefore be used instead.\n+   One of the main advantages of using direct return instructions\n+   is that we can then use conditional returns.  */\n+\n+bool\n+s390_can_use_return_insn (void)\n+{\n+  int i;\n+\n+  if (!reload_completed)\n+    return false;\n+\n+  if (crtl->profile)\n+    return false;\n+\n+  if (TARGET_TPF_PROFILING)\n+    return false;\n+\n+  for (i = 0; i < 16; i++)\n+    if (cfun_gpr_save_slot (i))\n+      return false;\n+\n+  if (cfun->machine->base_reg\n+      && !call_really_used_regs[REGNO (cfun->machine->base_reg)])\n+    return false;\n+\n+  return cfun_frame_layout.frame_size == 0;\n+}\n \n /* Return the size in bytes of a function argument of\n    type TYPE and/or mode MODE.  At least one of TYPE or\n@@ -11019,6 +11081,11 @@ s390_fix_long_loop_prediction (rtx insn)\n       || GET_CODE (SET_SRC(set)) != IF_THEN_ELSE)\n     return false;\n \n+  /* Skip conditional returns.  */\n+  if (ANY_RETURN_P (XEXP (SET_SRC (set), 1))\n+      && XEXP (SET_SRC (set), 2) == pc_rtx)\n+    return false;\n+\n   label_ref = (GET_CODE (XEXP (SET_SRC (set), 1)) == LABEL_REF ?\n \t       XEXP (SET_SRC (set), 1) : XEXP (SET_SRC (set), 2));\n \n@@ -12163,6 +12230,9 @@ s390_option_override (void)\n #undef TARGET_CAN_INLINE_P\n #define TARGET_CAN_INLINE_P s390_can_inline_p\n \n+#undef TARGET_SET_UP_BY_PROLOGUE\n+#define TARGET_SET_UP_BY_PROLOGUE s300_set_up_by_prologue\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "2f2139e919b14d11844ed8ddb2675ed224564e09", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=177bc204a2f3a13c9fad9c8f88eb3449c8752552", "patch": "@@ -878,6 +878,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n } while (0)\n \n+/* Mark the return register as used by the epilogue so that we can\n+   use it in unadorned (return) and (simple_return) instructions.  */\n+#define EPILOGUE_USES(REGNO) ((REGNO) == RETURN_REGNUM)\n+\n #undef ASM_OUTPUT_FUNCTION_LABEL\n #define ASM_OUTPUT_FUNCTION_LABEL(FILE, NAME, DECL) \\\n   s390_asm_output_function_label (FILE, NAME, DECL)"}, {"sha": "76902b5eae589a2bd63db3612dc4d2fc996b62dc", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177bc204a2f3a13c9fad9c8f88eb3449c8752552/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=177bc204a2f3a13c9fad9c8f88eb3449c8752552", "patch": "@@ -598,6 +598,9 @@\n ;; In place of GET_MODE_BITSIZE (<MODE>mode)\n (define_mode_attr bitsize [(DI \"64\") (SI \"32\") (HI \"16\") (QI \"8\")])\n \n+;; Allow return and simple_return to be defined from a single template.\n+(define_code_iterator ANY_RETURN [return simple_return])\n+\n ;;\n ;;- Compare instructions.\n ;;\n@@ -8079,6 +8082,18 @@\n    (set_attr \"type\"  \"branch\")\n    (set_attr \"atype\" \"agen\")])\n \n+;; A conditional return instruction.\n+(define_insn \"*c<code>\"\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 0 \"s390_comparison\" [(reg CC_REGNUM) (const_int 0)])\n+          (ANY_RETURN)\n+          (pc)))]\n+  \"s390_can_use_<code>_insn ()\"\n+  \"b%C0r\\t%%r14\"\n+  [(set_attr \"op_type\" \"RR\")\n+   (set_attr \"type\"  \"jsr\")\n+   (set_attr \"atype\" \"agen\")])\n \n ;;\n ;;- Negated conditional jump instructions.\n@@ -9674,6 +9689,15 @@\n   \"\"\n   \"s390_emit_epilogue (true); DONE;\")\n \n+;; A direct return instruction, without using an epilogue.\n+(define_insn \"<code>\"\n+  [(ANY_RETURN)]\n+  \"s390_can_use_<code>_insn ()\"\n+  \"br\\t%%r14\"\n+  [(set_attr \"op_type\" \"RR\")\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"atype\"   \"agen\")])\n+\n (define_insn \"*return\"\n   [(return)\n    (use (match_operand 0 \"register_operand\" \"a\"))]"}]}