{"sha": "ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5OGZhOTU1YjVkYzk4YmIwNWUzMGVkNzkyOTkxNTVkMmEyZjk3Yw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-01-07T19:53:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-01-07T19:53:13Z"}, "message": "[-fcompare-debug] var tracking options are not optimization options\n\nIf we include them in the ICF hash, they may cause congruence_groups to\nbe processed in a different order due to different hashes, which in turn\ncauses different funcdef_nos to be assigned to functions.  Since these\nnumbers are included in -fcompare-debug dumps, they cause failures.\n\nSince these options are not optimization options, in that they do not\n(or should not, save for bugs like this) affect the executable code\noutput by the compiler, they should not be marked as such.\n\nThis patch replaces the Optimization flag in the var-tracking options\nwith the newly-introduced PerFunction flag, so that it can still be\ncontrolled on a per-function basis, but that disregards it in the hash\ncomputation used by ICF.\n\nThis fixes -fcompare-debug failures in numerous LTO testcases.\n\nfor  gcc/ChangeLog\n\n\t* doc/options.texi (PerFunction): New.\n\t* opt-functions.awk (switch_flags): Map both Optimization and\n\tPerFunction to CL_OPTIMIZATION.\n\t* opth-gen.awk: Test for PerFunction flag along with\n\tOptimization.\n\t* optc-save-gen.awk: Likewise.  Introduce var_opt_hash and set\n\tit only when the latter is present.  Skip those that don't in\n\tthe hash function generator.\n\t* common.opt (fvar-tracking): Mark as PerFunction instead of\n\tOptimization.\n\t(fvar-tracking-assignments): Likewise.\n\t(fvar-tracking-assignments-toggle): Likewise.\n\t(fvar-tracking-uninit): Likewise.\n\nFrom-SVN: r244198", "tree": {"sha": "2bf26f2a4e197b339a06e6fa3464a559f3ddd2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bf26f2a4e197b339a06e6fa3464a559f3ddd2e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/comments", "author": null, "committer": null, "parents": [{"sha": "42002dfec374c429569796c275001f1b0635e674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42002dfec374c429569796c275001f1b0635e674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42002dfec374c429569796c275001f1b0635e674"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "9f7f0900becc1a45875f28eabc27a4f7be3f8304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -1,3 +1,19 @@\n+2017-01-07  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* doc/options.texi (PerFunction): New.\n+\t* opt-functions.awk (switch_flags): Map both Optimization and\n+\tPerFunction to CL_OPTIMIZATION.\n+\t* opth-gen.awk: Test for PerFunction flag along with\n+\tOptimization.\n+\t* optc-save-gen.awk: Likewise.  Introduce var_opt_hash and set\n+\tit only when the latter is present.  Skip those that don't in\n+\tthe hash function generator.\n+\t* common.opt (fvar-tracking): Mark as PerFunction instead of\n+\tOptimization.\n+\t(fvar-tracking-assignments): Likewise.\n+\t(fvar-tracking-assignments-toggle): Likewise.\n+\t(fvar-tracking-uninit): Likewise.\n+\n 2017-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/79018"}, {"sha": "4b35e4b61be1ff231e42cbf35d2bd8bc7e2e5cd5", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -2644,29 +2644,29 @@ Common Undocumented Var(flag_use_linker_plugin)\n ; will be set according to optimize, debug_info_level and debug_hooks\n ; in process_options ().\n fvar-tracking\n-Common Report Var(flag_var_tracking) Init(2) Optimization\n+Common Report Var(flag_var_tracking) Init(2) PerFunction\n Perform variable tracking.\n \n ; Positive if we should track variables at assignments, negative if\n ; we should run the var-tracking pass only to discard debug\n ; annotations.  When flag_var_tracking_assignments ==\n ; AUTODETECT_VALUE it will be set according to flag_var_tracking.\n fvar-tracking-assignments\n-Common Report Var(flag_var_tracking_assignments) Init(2) Optimization\n+Common Report Var(flag_var_tracking_assignments) Init(2) PerFunction\n Perform variable tracking by annotating assignments.\n \n ; Nonzero if we should toggle flag_var_tracking_assignments after\n ; processing options and computing its default.  */\n fvar-tracking-assignments-toggle\n-Common Report Var(flag_var_tracking_assignments_toggle) Optimization\n+Common Report Var(flag_var_tracking_assignments_toggle) PerFunction\n Toggle -fvar-tracking-assignments.\n \n ; Positive if we should track uninitialized variables, negative if\n ; we should run the var-tracking pass only to discard debug\n ; annotations.  When flag_var_tracking_uninit == AUTODETECT_VALUE it\n ; will be set according to flag_var_tracking.\n fvar-tracking-uninit\n-Common Report Var(flag_var_tracking_uninit) Optimization\n+Common Report Var(flag_var_tracking_uninit) PerFunction\n Perform variable tracking and also tag variables that are uninitialized.\n \n ftree-vectorize"}, {"sha": "3b68aabcfc319519a2e5ccf6899db7e414789229", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -430,6 +430,13 @@ This is an optimization option.  It should be shown as such in\n @code{Var} should be saved and restored when the optimization level is\n changed with @code{optimize} attributes.\n \n+@item PerFunction\n+This is an option that can be overridden on a per-function basis.\n+@code{Optimization} implies @code{PerFunction}, but options that do not\n+affect executable code generation may use this flag instead, so that the\n+option is not taken into account in ways that might affect executable\n+code generation.\n+\n @item Undocumented\n The option is deliberately missing documentation and should not\n be included in the @option{--help} output."}, {"sha": "0736a6f3fafe6b8c6074fe6c0bb8a02ea6dd2d9b", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -105,7 +105,7 @@ function switch_flags (flags)\n \t  test_flag(\"Undocumented\", flags,  \" | CL_UNDOCUMENTED\") \\\n \t  test_flag(\"NoDWARFRecord\", flags,  \" | CL_NO_DWARF_RECORD\") \\\n \t  test_flag(\"Warning\", flags,  \" | CL_WARNING\") \\\n-\t  test_flag(\"Optimization\", flags,  \" | CL_OPTIMIZATION\")\n+\t  test_flag(\"(Optimization|PerFunction)\", flags,  \" | CL_OPTIMIZATION\")\n \tsub( \"^0 \\\\| \", \"\", result )\n \treturn result\n }"}, {"sha": "d79d1e9cd8d99cf21a914287f06f8795f2e2c238", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -100,7 +100,7 @@ var_opt_range[\"optimize_debug\"] = \"0, 1\";\n # cache.\n \n for (i = 0; i < n_opts; i++) {\n-\tif (flag_set_p(\"Optimization\", flags[i])) {\n+\tif (flag_set_p(\"(Optimization|PerFunction)\", flags[i])) {\n \t\tname = var_name(flags[i])\n \t\tif(name == \"\")\n \t\t\tcontinue;\n@@ -743,7 +743,7 @@ var_opt_val[2] = \"x_optimize_debug\"\n var_opt_val_type[1] = \"char \"\n var_opt_val_type[2] = \"char \"\n for (i = 0; i < n_opts; i++) {\n-\tif (flag_set_p(\"Optimization\", flags[i])) {\n+\tif (flag_set_p(\"(Optimization|PerFunction)\", flags[i])) {\n \t\tname = var_name(flags[i])\n \t\tif(name == \"\")\n \t\t\tcontinue;\n@@ -756,6 +756,7 @@ for (i = 0; i < n_opts; i++) {\n \t\totype = var_type_struct(flags[i])\n \t\tvar_opt_val_type[n_opt_val] = otype;\n \t\tvar_opt_val[n_opt_val++] = \"x_\" name;\n+\t\tvar_opt_hash[n_opt_val] = flag_set_p(\"Optimization\", flags[i]);\n \t}\n }\n print \"\";\n@@ -765,6 +766,8 @@ print \"cl_optimization_hash (struct cl_optimization const *ptr ATTRIBUTE_UNUSED)\n print \"{\";\n print \"  inchash::hash hstate;\";\n for (i = 0; i < n_opt_val; i++) {\n+\tif (!var_opt_hash[i])\n+\t\tcontinue;\n \tname = var_opt_val[i]\n \tprint \"  hstate.add_wide_int (ptr->\" name\");\";\n }"}, {"sha": "13577550a86fd9b9efe52887d935d77b5109ba80", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98fa955b5dc98bb05e30ed79299155d2a2f97c/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "patch": "@@ -142,7 +142,7 @@ var_opt_char[1] = \"unsigned char x_optimize_size\";\n var_opt_char[2] = \"unsigned char x_optimize_debug\";\n \n for (i = 0; i < n_opts; i++) {\n-\tif (flag_set_p(\"Optimization\", flags[i])) {\n+\tif (flag_set_p(\"(Optimization|PerFunction)\", flags[i])) {\n \t\tname = var_name(flags[i])\n \t\tif(name == \"\")\n \t\t\tcontinue;"}]}