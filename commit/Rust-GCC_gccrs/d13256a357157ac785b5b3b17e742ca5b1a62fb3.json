{"sha": "d13256a357157ac785b5b3b17e742ca5b1a62fb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzMjU2YTM1NzE1N2FjNzg1YjViM2IxN2U3NDJjYTViMWE2MmZiMw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2004-10-06T16:07:03Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2004-10-06T16:07:03Z"}, "message": "ia64.h (FUNCTION_ARG_BOUNDARY): Change macro to call ia64_function_arg_boundary.\n\n\t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Change macro to\n\tcall ia64_function_arg_boundary.\n\t* config/ia64/ia64-protos.h (ia64_function_arg_boundary): New.\n\t* config/ia64/ia64.c (ia64_function_arg_boundary): New.\n\t(ia64_function_arg_advance): Do not put 128 bit floats into\n\tFP registers.\n\nFrom-SVN: r88608", "tree": {"sha": "8c42196e78b6f1f024ae1d75e8392b43aa7ac016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c42196e78b6f1f024ae1d75e8392b43aa7ac016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d13256a357157ac785b5b3b17e742ca5b1a62fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13256a357157ac785b5b3b17e742ca5b1a62fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13256a357157ac785b5b3b17e742ca5b1a62fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13256a357157ac785b5b3b17e742ca5b1a62fb3/comments", "author": null, "committer": null, "parents": [{"sha": "fbdad37d8558c4167831992c25481528d3142a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdad37d8558c4167831992c25481528d3142a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdad37d8558c4167831992c25481528d3142a64"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "560e4cd3a1714dd7ed851efb393ba10e13db007d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d13256a357157ac785b5b3b17e742ca5b1a62fb3", "patch": "@@ -1,3 +1,12 @@\n+2004-10-06  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Change macro to\n+\tcall ia64_function_arg_boundary.\n+\t* config/ia64/ia64-protos.h (ia64_function_arg_boundary): New.\n+\t* config/ia64/ia64.c (ia64_function_arg_boundary): New.\n+\t(ia64_function_arg_advance): Do not put 128 bit floats into\n+\tFP registers.\n+\n 2004-10-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_strcpy): Delete duplicate code."}, {"sha": "ab5062c8c72abb8bc9df0a635869f7408e97cdf8", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=d13256a357157ac785b5b3b17e742ca5b1a62fb3", "patch": "@@ -77,6 +77,7 @@ extern int ia64_function_arg_partial_nregs (CUMULATIVE_ARGS *,\n \t\t\t\t\t    enum machine_mode, tree, int);\n extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n+extern int ia64_function_arg_boundary (enum machine_mode, tree);\n extern void ia64_asm_output_external (FILE *, tree, const char *);\n #endif /* TREE_CODE */\n "}, {"sha": "69339d81ca445b70ff419ce388fc1c62211a6b0a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d13256a357157ac785b5b3b17e742ca5b1a62fb3", "patch": "@@ -3325,10 +3325,11 @@ ia64_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       cum->fp_regs = fp_regs;\n     }\n \n-  /* Integral and aggregates go in general registers.  If we have run out of\n-     FR registers, then FP values must also go in general registers.  This can\n-     happen when we have a SFmode HFA.  */\n-  else if (! FLOAT_MODE_P (mode) || cum->fp_regs == MAX_ARGUMENT_SLOTS)\n+  /* Integral and aggregates go in general registers.  So do TFmode FP values.\n+     If we have run out of FR registers, then other FP values must also go in\n+     general registers.  This can happen when we have a SFmode HFA.  */\n+  else if (mode == TFmode || mode == TCmode\n+           || (! FLOAT_MODE_P (mode) || cum->fp_regs == MAX_ARGUMENT_SLOTS))\n     cum->int_regs = cum->words;\n \n   /* If there is a prototype, then FP values go in a FR register when\n@@ -3351,6 +3352,31 @@ ia64_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n }\n \n+/* Arguments with alignment larger than 8 bytes start at the next even\n+   boundary.  On ILP32 HPUX, TFmode arguments start on next even boundery\n+   even though their normal alignment is 8 bytes.  See ia64_function_arg.  */\n+\n+int\n+ia64_function_arg_boundary (enum machine_mode mode, tree type)\n+{\n+\n+  if (mode == TFmode && TARGET_HPUX && TARGET_ILP32)\n+    return PARM_BOUNDARY * 2;\n+\n+  if (type)\n+    {\n+      if (TYPE_ALIGN (type) > PARM_BOUNDARY)\n+        return PARM_BOUNDARY * 2;\n+      else\n+        return PARM_BOUNDARY;\n+    }\n+\n+  if (GET_MODE_BITSIZE (mode) > PARM_BOUNDARY)\n+    return PARM_BOUNDARY * 2;\n+  else\n+    return PARM_BOUNDARY;\n+}\n+\n /* Variable sized types are passed by reference.  */\n /* ??? At present this is a GCC extension to the IA-64 ABI.  */\n "}, {"sha": "aab51f83000435ba6584a0871fd5e1a461cbe90d", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13256a357157ac785b5b3b17e742ca5b1a62fb3/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=d13256a357157ac785b5b3b17e742ca5b1a62fb3", "patch": "@@ -1376,15 +1376,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* If defined, a C expression that gives the alignment boundary, in bits, of an\n    argument with the specified mode and type.  */\n \n-/* Arguments with alignment larger than 8 bytes start at the next even\n-   boundary.  See ia64_function_arg.  */\n+/* Return the alignment boundary in bits for an argument with a specified\n+   mode and type.  */\n \n #define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  (((TYPE) ? (TYPE_ALIGN (TYPE) > 8 * BITS_PER_UNIT)\t\t\\\n-    : (((((MODE) == BLKmode\t\t\t\t\t\\\n-\t  ? int_size_in_bytes (TYPE) : GET_MODE_SIZE (MODE))\t\\\n-\t + UNITS_PER_WORD - 1) / UNITS_PER_WORD) > 1))\t\t\\\n-    ? 128 : PARM_BOUNDARY)\n+  ia64_function_arg_boundary (MODE, TYPE)\n \n /* A C expression that is nonzero if REGNO is the number of a hard register in\n    which function arguments are sometimes passed.  This does *not* include"}]}