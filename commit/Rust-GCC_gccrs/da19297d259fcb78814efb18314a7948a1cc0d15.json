{"sha": "da19297d259fcb78814efb18314a7948a1cc0d15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExOTI5N2QyNTlmY2I3ODgxNGVmYjE4MzE0YTc5NDhhMWNjMGQxNQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-05-14T15:05:16Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-05-14T15:05:16Z"}, "message": "expr.c (expand_expr_real_1): Force op0 to memory if the component is to be referenced in BLKmode according...\n\n        * expr.c (expand_expr_real_1) <normal_inner_ref>: Force op0 to\n        memory if the component is to be referenced in BLKmode according\n        to get_inner_reference.\n\n        testsuite/\n        * gnat.dg/blkextract_from_reg.adb: New test.\n\nFrom-SVN: r135296", "tree": {"sha": "0858aef5f3aa63b8939b44ff482ee04774554ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0858aef5f3aa63b8939b44ff482ee04774554ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da19297d259fcb78814efb18314a7948a1cc0d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da19297d259fcb78814efb18314a7948a1cc0d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da19297d259fcb78814efb18314a7948a1cc0d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da19297d259fcb78814efb18314a7948a1cc0d15/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fd03c702134e610ffa87e5bb380606e14a6dc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd03c702134e610ffa87e5bb380606e14a6dc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd03c702134e610ffa87e5bb380606e14a6dc81"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "b7c1870085da3fb59097709bb1b1557df674d96b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da19297d259fcb78814efb18314a7948a1cc0d15", "patch": "@@ -1,3 +1,9 @@\n+2008-05-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Force op0 to\n+\tmemory if the component is to be referenced in BLKmode according\n+\tto get_inner_reference.\n+\n 2008-05-14  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* calls.c (emit_library_call_value_1): Restore code clearing"}, {"sha": "0bf8238240068c35b70d25d58d3d8363d9843fa7", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=da19297d259fcb78814efb18314a7948a1cc0d15", "patch": "@@ -7739,13 +7739,15 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t/* If this is a constant, put it into a register if it is a legitimate\n \t   constant, OFFSET is 0, and we won't try to extract outside the\n \t   register (in case we were passed a partially uninitialized object\n-\t   or a view_conversion to a larger size).  Force the constant to\n-\t   memory otherwise.  */\n+\t   or a view_conversion to a larger size) or a BLKmode piece of it\n+\t   (e.g. if it is unchecked-converted to a record type in Ada).  Force\n+\t   the constant to memory otherwise.  */\n \tif (CONSTANT_P (op0))\n \t  {\n \t    enum machine_mode mode = TYPE_MODE (TREE_TYPE (tem));\n \t    if (mode != BLKmode && LEGITIMATE_CONSTANT_P (op0)\n \t\t&& offset == 0\n+\t\t&& mode1 != BLKmode\n \t\t&& bitpos + bitsize <= GET_MODE_BITSIZE (mode))\n \t      op0 = force_reg (mode, op0);\n \t    else\n@@ -7759,8 +7761,9 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t   for an ARRAY_RANGE_REF whose type is BLKmode.  */\n \telse if (!MEM_P (op0)\n \t\t && (offset != 0\n-\t\t     || (bitpos + bitsize > GET_MODE_BITSIZE (GET_MODE (op0)))\n-\t\t     || (code == ARRAY_RANGE_REF && mode == BLKmode)))\n+\t\t     || mode1 == BLKmode\n+\t\t     || (bitpos + bitsize\n+\t\t\t > GET_MODE_BITSIZE (GET_MODE (op0)))))\n \t  {\n \t    tree nt = build_qualified_type (TREE_TYPE (tem),\n \t\t\t\t\t    (TYPE_QUALS (TREE_TYPE (tem))"}, {"sha": "7f8b32d9d4c59189c685751a2a8c4d6eb34e04d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da19297d259fcb78814efb18314a7948a1cc0d15", "patch": "@@ -1,3 +1,7 @@\n+2008-05-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/blkextract_from_reg.adb: New test.\n+\n 2008-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36215"}, {"sha": "204d71964c75347837f571259635197e7939295d", "filename": "gcc/testsuite/gnat.dg/blkextract_from_reg.adb", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Ftestsuite%2Fgnat.dg%2Fblkextract_from_reg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19297d259fcb78814efb18314a7948a1cc0d15/gcc%2Ftestsuite%2Fgnat.dg%2Fblkextract_from_reg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fblkextract_from_reg.adb?ref=da19297d259fcb78814efb18314a7948a1cc0d15", "patch": "@@ -0,0 +1,49 @@\n+--  { dg-do run }\n+\n+with System, Ada.Unchecked_Conversion; use System;\n+\n+procedure BLKextract_From_Reg is\n+\n+   type Byte is range 0 .. +255;\n+   for  Byte'size use 8;\n+\n+   type RGB is array (1 .. 3) of Byte;\n+   for RGB'Size use 24;\n+\n+   type RAW_Packet is range 0 .. 2 ** 32 - 1;\n+   for  RAW_Packet'Size use 32;\n+\n+   type Composite_Packet is record\n+      Values : RGB;\n+      Pad    : Byte;\n+   end record;\n+   for Composite_Packet use record\n+      Values at 0 range 0 .. 23;\n+      Pad    at 3 range 0 .. 7;\n+   end record;\n+   for Composite_Packet'Size use 32;\n+\n+   function To_Composite_Packet is\n+      new Ada.Unchecked_Conversion (RAW_Packet, Composite_Packet);\n+\n+   function Blob return RGB is\n+      RAW_Blob : RAW_Packet := 16#01020304#;\n+   begin\n+      return To_Composite_Packet (RAW_Blob).Values;\n+   end;\n+\n+   Blob_Color : RGB := Blob;\n+   Expected_Color : RGB;\n+begin\n+   if System.Default_Bit_Order = High_Order_First then\n+      Expected_Color := (1 => 1, 2 => 2, 3 => 3);\n+   else\n+      Expected_Color := (1 => 4, 2 => 3, 3 => 2);\n+   end if;\n+   \n+   for I in Blob_Color'Range loop\n+      if Blob_Color (I) /= Expected_Color (I) then\n+\t raise Program_Error;\n+      end if;\n+   end loop;\n+end;"}]}