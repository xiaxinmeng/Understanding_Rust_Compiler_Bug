{"sha": "aefa9d43dcc6925454a258b8107e91462e60beac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmYTlkNDNkY2M2OTI1NDU0YTI1OGI4MTA3ZTkxNDYyZTYwYmVhYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-03-26T15:04:44Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-03-26T15:04:44Z"}, "message": "builtins.c (expand_builtin_pow, [...]): Remove uses of dconst3, dconstsqrt2, dconstthird, dconste and/or dconst10.\n\n\t* builtins.c (expand_builtin_pow, fold_builtin_cabs,\n\tfold_builtin_sqrt, fold_builtin_cbrt, fold_builtin_logarithm,\n\tfold_builtin_hypot, fold_builtin_pow): Remove uses of dconst3,\n\tdconstsqrt2, dconstthird, dconste and/or dconst10.\n\t* config/i386/i386.c (ix86_emit_swsqrtsf): Likewise.\n\t* emit-rtl.c (dconst3, dconst10, dconstm2, dconstthird,\n\tdconstsqrt2, dconste): Delete.\n\t(init_emit_once): Likewise.  Simplify initializing dconstm1.\n\tConstify variable.\n\t* real.c (get_real_const): New.\n\t* real.h (dconst3, dconst10, dconstm2, dconstthird,\n\tdconstsqrt2, dconste): Delete.\n\t(real_value_const, get_real_const): New.\n\nFrom-SVN: r133607", "tree": {"sha": "974dfbada45151a1464bb76ba72bf9e40597ea73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/974dfbada45151a1464bb76ba72bf9e40597ea73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aefa9d43dcc6925454a258b8107e91462e60beac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa9d43dcc6925454a258b8107e91462e60beac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefa9d43dcc6925454a258b8107e91462e60beac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa9d43dcc6925454a258b8107e91462e60beac/comments", "author": null, "committer": null, "parents": [{"sha": "35dd7cc326a43e7323effe52421eb237701ee71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35dd7cc326a43e7323effe52421eb237701ee71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35dd7cc326a43e7323effe52421eb237701ee71b"}], "stats": {"total": 143, "additions": 102, "deletions": 41}, "files": [{"sha": "f8bbc3089fa40ba32b0eeff7d647044471d57ca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -1,3 +1,19 @@\n+2008-03-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_pow, fold_builtin_cabs,\n+\tfold_builtin_sqrt, fold_builtin_cbrt, fold_builtin_logarithm,\n+\tfold_builtin_hypot, fold_builtin_pow): Remove uses of dconst3,\n+\tdconstsqrt2, dconstthird, dconste and/or dconst10.\n+\t* config/i386/i386.c (ix86_emit_swsqrtsf): Likewise.\n+\t* emit-rtl.c (dconst3, dconst10, dconstm2, dconstthird,\n+\tdconstsqrt2, dconste): Delete.\n+\t(init_emit_once): Likewise.  Simplify initializing dconstm1.\n+\tConstify variable.\n+\t* real.c (get_real_const): New.\n+\t* real.h (dconst3, dconst10, dconstm2, dconstthird,\n+\tdconstsqrt2, dconste): Delete.\n+\t(real_value_const, get_real_const): New.\n+\n 2008-03-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/cygming.h (BIGGEST_ALIGNMENT): Removed."}, {"sha": "d07fed886141bed6b824c7cc6506df215c574302", "filename": "gcc/builtins.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -2983,6 +2983,8 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n       && (tree_expr_nonnegative_p (arg0)\n \t  || !HONOR_NANS (mode)))\n     {\n+      REAL_VALUE_TYPE dconst3;\n+      real_from_integer (&dconst3, VOIDmode, 3, 0, 0);\n       real_arithmetic (&c2, MULT_EXPR, &c, &dconst3);\n       real_round (&c2, mode, &c2);\n       n = real_to_integer (&c2);\n@@ -7458,7 +7460,8 @@ fold_builtin_cabs (tree arg, tree type, tree fndecl)\n \t  && operand_equal_p (real, imag, OEP_PURE_SAME))\n         {\n \t  const REAL_VALUE_TYPE sqrt2_trunc\n-\t    = real_value_truncate (TYPE_MODE (type), dconstsqrt2);\n+\t    = real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t   *get_real_const (rv_sqrt2));\n \t  STRIP_NOPS (real);\n \t  return fold_build2 (MULT_EXPR, type,\n \t\t\t      fold_build1 (ABS_EXPR, type, real),\n@@ -7541,7 +7544,7 @@ fold_builtin_sqrt (tree arg, tree type)\n \t  tree tree_root;\n \t  /* The inner root was either sqrt or cbrt.  */\n \t  REAL_VALUE_TYPE dconstroot =\n-\t    BUILTIN_SQRT_P (fcode) ? dconsthalf : dconstthird;\n+\t    BUILTIN_SQRT_P (fcode) ? dconsthalf : *get_real_const (rv_third);\n \n \t  /* Adjust for the outer root.  */\n \t  SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n@@ -7594,7 +7597,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t{\n \t  tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n \t  const REAL_VALUE_TYPE third_trunc =\n-\t    real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t    real_value_truncate (TYPE_MODE (type), *get_real_const (rv_third));\n \t  arg = fold_build2 (MULT_EXPR, type,\n \t\t\t     CALL_EXPR_ARG (arg, 0),\n \t\t\t     build_real (type, third_trunc));\n@@ -7610,7 +7613,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t    {\n \t      tree arg0 = CALL_EXPR_ARG (arg, 0);\n \t      tree tree_root;\n-\t      REAL_VALUE_TYPE dconstroot = dconstthird;\n+\t      REAL_VALUE_TYPE dconstroot = *get_real_const (rv_third);\n \n \t      SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n \t      dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n@@ -7632,7 +7635,9 @@ fold_builtin_cbrt (tree arg, tree type)\n \t\t  tree tree_root;\n \t\t  REAL_VALUE_TYPE dconstroot;\n \n-\t\t  real_arithmetic (&dconstroot, MULT_EXPR, &dconstthird, &dconstthird);\n+\t\t  real_arithmetic (&dconstroot, MULT_EXPR,\n+\t\t\t\t   get_real_const (rv_third),\n+\t\t\t\t   get_real_const (rv_third));\n \t\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n \t\t  tree_root = build_real (type, dconstroot);\n \t\t  return build_call_expr (powfn, 2, arg0, tree_root);\n@@ -7651,7 +7656,8 @@ fold_builtin_cbrt (tree arg, tree type)\n \t    {\n \t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n \t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t\t= real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t       *get_real_const (rv_third));\n \t      tree narg01 = fold_build2 (MULT_EXPR, type, arg01,\n \t\t\t\t\t build_real (type, dconstroot));\n \t      return build_call_expr (powfn, 2, arg00, narg01);\n@@ -8199,7 +8205,7 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n       if (flag_unsafe_math_optimizations && func == mpfr_log)\n         {\n \t  const REAL_VALUE_TYPE e_truncated =\n-\t    real_value_truncate (TYPE_MODE (type), dconste);\n+\t    real_value_truncate (TYPE_MODE (type), *get_real_const (rv_e));\n \t  if (real_dconstp (arg, &e_truncated))\n \t    return build_real (type, dconst1);\n \t}\n@@ -8233,7 +8239,8 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n \t  CASE_FLT_FN (BUILT_IN_EXP):\n \t    /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n \t    x = build_real (type,\n-\t\t\t    real_value_truncate (TYPE_MODE (type), dconste));\n+\t\t\t    real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t\t\t *get_real_const (rv_e)));\n \t    exponent = CALL_EXPR_ARG (arg, 0);\n \t    break;\n \t  CASE_FLT_FN (BUILT_IN_EXP2):\n@@ -8244,7 +8251,11 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n \t  CASE_FLT_FN (BUILT_IN_EXP10):\n \t  CASE_FLT_FN (BUILT_IN_POW10):\n \t    /* Prepare to do logN(exp10(exponent) -> exponent*logN(10).  */\n-\t    x = build_real (type, dconst10);\n+\t    {\n+\t      REAL_VALUE_TYPE dconst10;\n+\t      real_from_integer (&dconst10, VOIDmode, 10, 0, 0);\n+\t      x = build_real (type, dconst10);\n+\t    }\n \t    exponent = CALL_EXPR_ARG (arg, 0);\n \t    break;\n \t  CASE_FLT_FN (BUILT_IN_SQRT):\n@@ -8256,7 +8267,7 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n \t    /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n \t    x = CALL_EXPR_ARG (arg, 0);\n \t    exponent = build_real (type, real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t\t      dconstthird));\n+\t\t\t\t\t\t\t      *get_real_const (rv_third)));\n \t    break;\n \t  CASE_FLT_FN (BUILT_IN_POW):\n \t    /* Prepare to do logN(pow(x,exponent) -> exponent*logN(x).  */\n@@ -8316,7 +8327,7 @@ fold_builtin_hypot (tree fndecl, tree arg0, tree arg1, tree type)\n       && operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n     {\n       const REAL_VALUE_TYPE sqrt2_trunc\n-\t= real_value_truncate (TYPE_MODE (type), dconstsqrt2);\n+\t= real_value_truncate (TYPE_MODE (type), *get_real_const (rv_sqrt2));\n       return fold_build2 (MULT_EXPR, type,\n \t\t\t  fold_build1 (ABS_EXPR, type, arg0),\n \t\t\t  build_real (type, sqrt2_trunc));\n@@ -8382,7 +8393,8 @@ fold_builtin_pow (tree fndecl, tree arg0, tree arg1, tree type)\n       if (flag_unsafe_math_optimizations)\n \t{\n \t  const REAL_VALUE_TYPE dconstroot\n-\t    = real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t    = real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t   *get_real_const (rv_third));\n \n \t  if (REAL_VALUES_EQUAL (c, dconstroot))\n \t    {\n@@ -8449,7 +8461,8 @@ fold_builtin_pow (tree fndecl, tree arg0, tree arg1, tree type)\n \t  if (tree_expr_nonnegative_p (arg))\n \t    {\n \t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t\t= real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t       *get_real_const (rv_third));\n \t      tree narg1 = fold_build2 (MULT_EXPR, type, arg1,\n \t\t\t\t\tbuild_real (type, dconstroot));\n \t      return build_call_expr (fndecl, 2, arg, narg1);"}, {"sha": "3dfb301962c49f9634d33dbb21cea4364ebba1b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -24311,7 +24311,7 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, enum machine_mode mode,\n   e2 = gen_reg_rtx (mode);\n   e3 = gen_reg_rtx (mode);\n \n-  real_arithmetic (&r, NEGATE_EXPR, &dconst3, NULL);\n+  real_from_integer (&r, VOIDmode, -3, -1, 0);\n   mthree = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n \n   real_arithmetic (&r, NEGATE_EXPR, &dconsthalf, NULL);"}, {"sha": "77889cf9d54a3fc1008bc1f39e02718178c81af2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -100,14 +100,8 @@ rtx const_true_rtx;\n REAL_VALUE_TYPE dconst0;\n REAL_VALUE_TYPE dconst1;\n REAL_VALUE_TYPE dconst2;\n-REAL_VALUE_TYPE dconst3;\n-REAL_VALUE_TYPE dconst10;\n REAL_VALUE_TYPE dconstm1;\n-REAL_VALUE_TYPE dconstm2;\n REAL_VALUE_TYPE dconsthalf;\n-REAL_VALUE_TYPE dconstthird;\n-REAL_VALUE_TYPE dconstsqrt2;\n-REAL_VALUE_TYPE dconste;\n \n /* Record fixed-point constant 0 and 1.  */\n FIXED_VALUE_TYPE fconst0[MAX_FCONST0];\n@@ -5245,26 +5239,16 @@ init_emit_once (int line_numbers)\n   REAL_VALUE_FROM_INT (dconst0,   0,  0, double_mode);\n   REAL_VALUE_FROM_INT (dconst1,   1,  0, double_mode);\n   REAL_VALUE_FROM_INT (dconst2,   2,  0, double_mode);\n-  REAL_VALUE_FROM_INT (dconst3,   3,  0, double_mode);\n-  REAL_VALUE_FROM_INT (dconst10, 10,  0, double_mode);\n-  REAL_VALUE_FROM_INT (dconstm1, -1, -1, double_mode);\n-  REAL_VALUE_FROM_INT (dconstm2, -2, -1, double_mode);\n+\n+  dconstm1 = dconst1;\n+  dconstm1.sign = 1;\n \n   dconsthalf = dconst1;\n   SET_REAL_EXP (&dconsthalf, REAL_EXP (&dconsthalf) - 1);\n \n-  real_arithmetic (&dconstthird, RDIV_EXPR, &dconst1, &dconst3);\n-\n-  /* Initialize mathematical constants for constant folding builtins.\n-     These constants need to be given to at least 160 bits precision.  */\n-  real_from_string (&dconstsqrt2,\n-    \"1.4142135623730950488016887242096980785696718753769480731766797379907\");\n-  real_from_string (&dconste,\n-    \"2.7182818284590452353602874713526624977572470936999595749669676277241\");\n-\n   for (i = 0; i < (int) ARRAY_SIZE (const_tiny_rtx); i++)\n     {\n-      REAL_VALUE_TYPE *r =\n+      const REAL_VALUE_TYPE *const r =\n \t(i == 0 ? &dconst0 : i == 1 ? &dconst1 : &dconst2);\n \n       for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);"}, {"sha": "ac3b7dc02ecde8adc526ac257eb6cc5f20054008", "filename": "gcc/real.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -2163,6 +2163,49 @@ times_pten (REAL_VALUE_TYPE *r, int exp)\n     do_divide (r, r, &pten);\n }\n \n+/* Returns the special REAL_VALUE_TYPE enumerated by E.  */\n+\n+const REAL_VALUE_TYPE *\n+get_real_const (enum real_value_const e)\n+{\n+  static REAL_VALUE_TYPE value[rv_max];\n+\n+  gcc_assert (e < rv_max);\n+\n+  /* Initialize mathematical constants for constant folding builtins.\n+     These constants need to be given to at least 160 bits precision.  */\n+  if (value[e].cl == rvc_zero)\n+    switch (e)\n+    {\n+    case rv_e:\n+      {\n+\tmpfr_t m;\n+\tmpfr_init2 (m, SIGNIFICAND_BITS);\n+\tmpfr_set_ui (m, 1, GMP_RNDN);\n+\tmpfr_exp (m, m, GMP_RNDN);\n+\treal_from_mpfr (&value[e], m, NULL_TREE, GMP_RNDN);\n+\tmpfr_clear (m);\n+      }\n+      break;\n+    case rv_third:\n+      real_arithmetic (&value[e], RDIV_EXPR, &dconst1, real_digit (3));\n+      break;\n+    case rv_sqrt2:\n+      {\n+\tmpfr_t m;\n+\tmpfr_init2 (m, SIGNIFICAND_BITS);\n+\tmpfr_sqrt_ui (m, 2, GMP_RNDN);\n+\treal_from_mpfr (&value[e], m, NULL_TREE, GMP_RNDN);\n+\tmpfr_clear (m);\n+      }\n+      break;\n+    default:\n+      gcc_unreachable();\n+    }\n+\n+  return &value[e];\n+}\n+\n /* Fills R with +Inf.  */\n \n void"}, {"sha": "9809004ab1695ecf672236fba06e77b175ca6ed0", "filename": "gcc/real.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -374,19 +374,24 @@ extern void real_ldexp (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *, int);\n \n /* **** End of software floating point emulator interface macros **** */\n \f\n-/* Constant real values 0, 1, 2, 3, 10, -1, -2, 0.5 and 1/3.  */\n+/* Constant real values 0, 1, 2, -1 and 0.5.  */\n \n extern REAL_VALUE_TYPE dconst0;\n extern REAL_VALUE_TYPE dconst1;\n extern REAL_VALUE_TYPE dconst2;\n-extern REAL_VALUE_TYPE dconst3;\n-extern REAL_VALUE_TYPE dconst10;\n extern REAL_VALUE_TYPE dconstm1;\n-extern REAL_VALUE_TYPE dconstm2;\n extern REAL_VALUE_TYPE dconsthalf;\n-extern REAL_VALUE_TYPE dconstthird;\n-extern REAL_VALUE_TYPE dconstsqrt2;\n-extern REAL_VALUE_TYPE dconste;\n+\n+/* Enumerate the special constant values we need. */\n+enum real_value_const {\n+  rv_e,\n+  rv_third,\n+  rv_sqrt2,\n+  rv_max\n+};\n+\n+/* Function to return a real value special constant.  */\n+extern const REAL_VALUE_TYPE * get_real_const (enum real_value_const);\n \n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */"}]}