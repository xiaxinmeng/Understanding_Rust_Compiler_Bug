{"sha": "34a2d6f3c98299bce12cda2d215e6dee49ed641f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMmQ2ZjNjOTgyOTliY2UxMmNkYTJkMjE1ZTZkZWU0OWVkNjQxZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-24T03:33:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-24T03:33:13Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1260", "tree": {"sha": "13ea0ca5043aef6cd6ce13b3693fa64d9e4ef7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ea0ca5043aef6cd6ce13b3693fa64d9e4ef7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a2d6f3c98299bce12cda2d215e6dee49ed641f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a2d6f3c98299bce12cda2d215e6dee49ed641f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a2d6f3c98299bce12cda2d215e6dee49ed641f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a2d6f3c98299bce12cda2d215e6dee49ed641f/comments", "author": null, "committer": null, "parents": [{"sha": "051e5bbf6ba91f419b6d3ff6a3a75e17dd2506dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051e5bbf6ba91f419b6d3ff6a3a75e17dd2506dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051e5bbf6ba91f419b6d3ff6a3a75e17dd2506dd"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "821639877cce12ad31be38726f342d3e1f72a7f0", "filename": "gcc/cccp.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2d6f3c98299bce12cda2d215e6dee49ed641f/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2d6f3c98299bce12cda2d215e6dee49ed641f/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=34a2d6f3c98299bce12cda2d215e6dee49ed641f", "patch": "@@ -752,10 +752,10 @@ struct assertion_hashnode {\n typedef struct assertion_hashnode ASSERTION_HASHNODE;\n \n /* Some definitions for the hash table.  The hash function MUST be\n-   computed as shown in hashf () below.  That is because the rescan\n+   computed as shown in hashf below.  That is because the rescan\n    loop computes the hash value `on the fly' for most tokens,\n    in order to avoid the overhead of a lot of procedure calls to\n-   the hashf () function.  Hashf () only exists for the sake of\n+   the hashf function.  hashf only exists for the sake of\n    politeness, for use when speed isn't so important. */\n \n #define ASSERTION_HASHSIZE 37\n@@ -2223,6 +2223,7 @@ do { ip = &instack[indepth];\t\t\\\n \n   obp = op->bufp;\n   RECACHE;\n+\n   beg_of_line = ibp;\n \n   /* Our caller must always put a null after the end of\n@@ -2270,13 +2271,14 @@ do { ip = &instack[indepth];\t\t\\\n \t}\n       }\n \n-      /* If this is expanding a macro definition, don't recognize\n-\t preprocessor directives.  */\n-      if (ip->macro != 0)\n+      /* Recognize preprocessor directives only when reading\n+\t directly from a file.  */\n+      if (ip->fname == 0)\n \tgoto randomchar;\n       if (ident_length)\n \tgoto specialchar;\n \n+      \n       /* # keyword: a # must be first nonblank char on the line */\n       if (beg_of_line == 0)\n \tgoto randomchar;"}]}