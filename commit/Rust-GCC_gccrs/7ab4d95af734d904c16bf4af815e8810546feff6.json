{"sha": "7ab4d95af734d904c16bf4af815e8810546feff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiNGQ5NWFmNzM0ZDkwNGMxNmJmNGFmODE1ZTg4MTA1NDZmZWZmNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:59:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:59:17Z"}, "message": "[multiple changes]\n\n2011-08-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-taprop-vxworks.adb (Enter_Task): Use System.Float_Control.Reset\n\tinstead of the locally imported procedure.\n\t* s-taprop-mingw.adb (Enter_Task): Ditto.\n\t* s-valrea.adb (Scan_Real): Ditto.\n\t* s-imgrea.adb (Set_Image_Real): Ditto.\n\t* s-flocon.ads: Make the package pure.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Debug_Statement, Set_Debug_Statement): Remove.\n\t* tbuild.ads, tbuild.adb (Make_Pragma): Adjust accordingly.\n\t* sinfo-cn.ads, sinfo-cn.adb (Change_Name_To_Procedure_Call_Statement):\n\tNew subprogram, moved here from...\n\t* par.adb, par-ch5.adb (P_Statement_Name): ... here.\n\t* par-prag.adb (Par.Prag, case Pragma_Debug): Do not perform any\n\trewriting of the last argument into a procedure call statement here...\n\t* sem_prag.adb (Analyze_Pragma, case Pragma_Debug): ...do it there\n\tinstead.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb: Minor reformatting.\n\nFrom-SVN: r177337", "tree": {"sha": "cfa8db7257b2bde4026bddd7892541ff750257f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa8db7257b2bde4026bddd7892541ff750257f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab4d95af734d904c16bf4af815e8810546feff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab4d95af734d904c16bf4af815e8810546feff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab4d95af734d904c16bf4af815e8810546feff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab4d95af734d904c16bf4af815e8810546feff6/comments", "author": null, "committer": null, "parents": [{"sha": "51c400f5b8edf0d9c7dd679724fa5114b700cad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c400f5b8edf0d9c7dd679724fa5114b700cad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c400f5b8edf0d9c7dd679724fa5114b700cad4"}], "stats": {"total": 379, "additions": 183, "deletions": 196}, "files": [{"sha": "9a4c24bb71bd51526045bc6d018e27c74002b2aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -1,3 +1,28 @@\n+2011-08-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-taprop-vxworks.adb (Enter_Task): Use System.Float_Control.Reset\n+\tinstead of the locally imported procedure.\n+\t* s-taprop-mingw.adb (Enter_Task): Ditto.\n+\t* s-valrea.adb (Scan_Real): Ditto.\n+\t* s-imgrea.adb (Set_Image_Real): Ditto.\n+\t* s-flocon.ads: Make the package pure.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Debug_Statement, Set_Debug_Statement): Remove.\n+\t* tbuild.ads, tbuild.adb (Make_Pragma): Adjust accordingly.\n+\t* sinfo-cn.ads, sinfo-cn.adb (Change_Name_To_Procedure_Call_Statement):\n+\tNew subprogram, moved here from...\n+\t* par.adb, par-ch5.adb (P_Statement_Name): ... here.\n+\t* par-prag.adb (Par.Prag, case Pragma_Debug): Do not perform any\n+\trewriting of the last argument into a procedure call statement here...\n+\t* sem_prag.adb (Analyze_Pragma, case Pragma_Debug): ...do it there\n+\tinstead.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb: Minor reformatting.\n+\n 2011-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* erroutc.adb: Minor reformatting."}, {"sha": "fcfb428d1f89468555ab8b90cea2478d14941e44", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 13, "deletions": 73, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,8 +24,10 @@\n ------------------------------------------------------------------------------\n \n pragma Style_Checks (All_Checks);\n---  Turn off subprogram body ordering check. Subprograms are in order\n---  by RM section rather than alphabetical\n+--  Turn off subprogram body ordering check. Subprograms are in order by RM\n+--  section rather than alphabetical.\n+\n+with Sinfo.CN; use Sinfo.CN;\n \n separate (Par)\n package body Ch5 is\n@@ -499,8 +501,8 @@ package body Ch5 is\n                   --  we want to speed up as much as possible.\n \n                   elsif Token = Tok_Semicolon then\n-                     Append_To (Statement_List,\n-                       P_Statement_Name (Id_Node));\n+                     Change_Name_To_Procedure_Call_Statement (Id_Node);\n+                     Append_To (Statement_List, Id_Node);\n                      Scan; -- past semicolon\n                      Statement_Required := False;\n \n@@ -652,8 +654,8 @@ package body Ch5 is\n                      --  means that the item we just scanned was a call.\n \n                      elsif Token = Tok_Semicolon then\n-                        Append_To (Statement_List,\n-                          P_Statement_Name (Name_Node));\n+                        Change_Name_To_Procedure_Call_Statement (Name_Node);\n+                        Append_To (Statement_List, Name_Node);\n                         Scan; -- past semicolon\n                         Statement_Required := False;\n \n@@ -727,8 +729,8 @@ package body Ch5 is\n                         --  call with no parameters.\n \n                         if Token_Is_At_Start_Of_Line then\n-                           Append_To (Statement_List,\n-                             P_Statement_Name (Id_Node));\n+                           Change_Name_To_Procedure_Call_Statement (Id_Node);\n+                           Append_To (Statement_List, Id_Node);\n                            T_Semicolon; -- to give error message\n                            Statement_Required := False;\n \n@@ -769,8 +771,8 @@ package body Ch5 is\n                      Append_To (Statement_List,\n                        P_Assignment_Statement (Name_Node));\n                   else\n-                     Append_To (Statement_List,\n-                       P_Statement_Name (Name_Node));\n+                     Change_Name_To_Procedure_Call_Statement (Name_Node);\n+                     Append_To (Statement_List, Name_Node);\n                   end if;\n \n                   TF_Semicolon;\n@@ -954,68 +956,6 @@ package body Ch5 is\n    -- 5.1  Statement --\n    --------------------\n \n-   --  Parsed by P_Sequence_Of_Statements (5.1), except for the case\n-   --  of a statement of the form of a name, which is handled here. The\n-   --  argument passed in is the tree for the name which has been scanned\n-   --  The returned value is the corresponding statement form.\n-\n-   --  This routine is also used by Par.Prag for processing the procedure\n-   --  call that appears as the second argument of a pragma Assert.\n-\n-   --  Error recovery: cannot raise Error_Resync\n-\n-   function P_Statement_Name (Name_Node : Node_Id) return Node_Id is\n-      Stmt_Node : Node_Id;\n-\n-   begin\n-      --  Case of Indexed component, which is a procedure call with arguments\n-\n-      if Nkind (Name_Node) = N_Indexed_Component then\n-         declare\n-            Prefix_Node : constant Node_Id := Prefix (Name_Node);\n-            Exprs_Node  : constant List_Id := Expressions (Name_Node);\n-\n-         begin\n-            Change_Node (Name_Node, N_Procedure_Call_Statement);\n-            Set_Name (Name_Node, Prefix_Node);\n-            Set_Parameter_Associations (Name_Node, Exprs_Node);\n-            return Name_Node;\n-         end;\n-\n-      --  Case of function call node, which is a really a procedure call\n-\n-      elsif Nkind (Name_Node) = N_Function_Call then\n-         declare\n-            Fname_Node  : constant Node_Id := Name (Name_Node);\n-            Params_List : constant List_Id :=\n-                            Parameter_Associations (Name_Node);\n-\n-         begin\n-            Change_Node (Name_Node, N_Procedure_Call_Statement);\n-            Set_Name (Name_Node, Fname_Node);\n-            Set_Parameter_Associations (Name_Node, Params_List);\n-            return Name_Node;\n-         end;\n-\n-      --  Case of call to attribute that denotes a procedure. Here we\n-      --  just leave the attribute reference unchanged.\n-\n-      elsif Nkind (Name_Node) = N_Attribute_Reference\n-        and then Is_Procedure_Attribute_Name (Attribute_Name (Name_Node))\n-      then\n-         return Name_Node;\n-\n-      --  All other cases of names are parameterless procedure calls\n-\n-      else\n-         Stmt_Node :=\n-           New_Node (N_Procedure_Call_Statement, Sloc (Name_Node));\n-         Set_Name (Stmt_Node, Name_Node);\n-         return Stmt_Node;\n-      end if;\n-\n-   end P_Statement_Name;\n-\n    ---------------------------\n    -- 5.1  Simple Statement --\n    ---------------------------"}, {"sha": "e34d99f84390017f0dcf75f6de28e3e826b0805f", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -358,42 +358,16 @@ begin\n       -- Debug --\n       -----------\n \n-      --  pragma Debug (PROCEDURE_CALL_STATEMENT);\n+      --  pragma Debug ([boolean_EXPRESSION,] PROCEDURE_CALL_STATEMENT);\n \n-      --  This has to be processed by the parser because of the very peculiar\n-      --  form of the second parameter, which is syntactically from a formal\n-      --  point of view a function call (since it must be an expression), but\n-      --  semantically we treat it as a procedure call (which has exactly the\n-      --  same syntactic form, so that's why we can get away with this!)\n-\n-      when Pragma_Debug => Debug : declare\n-         Expr : Node_Id;\n+      when Pragma_Debug =>\n+         Check_No_Identifier (Arg1);\n \n-      begin\n          if Arg_Count = 2 then\n-            Check_No_Identifier (Arg1);\n             Check_No_Identifier (Arg2);\n-            Expr := New_Copy (Expression (Arg2));\n-\n          else\n             Check_Arg_Count (1);\n-            Check_No_Identifier (Arg1);\n-            Expr := New_Copy (Expression (Arg1));\n-         end if;\n-\n-         if Nkind (Expr) /= N_Indexed_Component\n-           and then Nkind (Expr) /= N_Function_Call\n-           and then Nkind (Expr) /= N_Identifier\n-           and then Nkind (Expr) /= N_Selected_Component\n-         then\n-            Error_Msg\n-              (\"argument of pragma% is not procedure call\", Sloc (Expr));\n-            raise Error_Resync;\n-         else\n-            Set_Debug_Statement\n-              (Pragma_Node, P_Statement_Name (Expr));\n          end if;\n-      end Debug;\n \n       -------------------------------\n       -- Extensions_Allowed (GNAT) --"}, {"sha": "32276c5084b22aa50f9136d4631be56a9532b928", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -723,10 +723,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Loop_Parameter_Specification return Node_Id;\n       --  Used in loop constructs and quantified expressions.\n \n-      function P_Statement_Name (Name_Node : Node_Id) return Node_Id;\n-      --  Given a node representing a name (which is a call), converts it\n-      --  to the syntactically corresponding procedure call statement.\n-\n       function P_Sequence_Of_Statements (SS_Flags : SS_Rec) return List_Id;\n       --  The argument indicates the acceptable termination tokens.\n       --  See body in Par.Ch5 for details of the use of this parameter."}, {"sha": "b4d2a83925c9419083f89eca68f4f49d57d87fb5", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -103,11 +103,11 @@ package body Par_SCO is\n \n    procedure Process_Decisions (N : Node_Id; T : Character);\n    --  If N is Empty, has no effect. Otherwise scans the tree for the node N,\n-   --  to output any decisions it contains. T is one of IEPWX (for context of\n-   --  expression: if/exit when/pragma/while/expression). If T is other than X,\n-   --  the node N is the conditional expression involved, and a decision is\n-   --  always present (at the very least a simple decision is present at the\n-   --  top level).\n+   --  to output any decisions it contains. T is one of IEGPWX (for context of\n+   --  expression: if/exit when/entry guard/pragma/while/expression). If T is\n+   --  other than X, the node N is the conditional expression involved, and a\n+   --  decision is always present (at the very least a simple decision is\n+   --  present at the top level).\n \n    procedure Process_Decisions (L : List_Id; T : Character);\n    --  Calls above procedure for each element of the list L\n@@ -521,8 +521,8 @@ package body Par_SCO is\n       begin\n          case Nkind (N) is\n \n-               --  Logical operators, output table entries and then process\n-               --  operands recursively to deal with nested conditions.\n+            --  Logical operators, output table entries and then process\n+            --  operands recursively to deal with nested conditions.\n \n             when N_And_Then |\n                  N_Or_Else  |\n@@ -575,7 +575,7 @@ package body Par_SCO is\n             when N_Case_Expression =>\n                return OK; -- ???\n \n-            --  Conditional expression, processed like an if statement\n+            --  Conditional expression, processed like an IF statement\n \n             when N_Conditional_Expression =>\n                declare\n@@ -654,7 +654,7 @@ package body Par_SCO is\n \n       procedure Debug_Put_SCOs is new Put_SCOs;\n \n-      --  Start of processing for pscos\n+   --  Start of processing for pscos\n \n    begin\n       Debug_Put_SCOs;"}, {"sha": "c2374041877e6afa59a3d80e9e8862afa7d53340", "filename": "gcc/ada/s-flocon.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-flocon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-flocon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-flocon.ads?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -32,6 +32,9 @@\n --  Control functions for floating-point unit\n \n package System.Float_Control is\n+   pragma Pure;\n+   --  This is not fully correct, but this unit is with-ed by pure units\n+   --  (eg s-imgrea).\n \n    procedure Reset;\n    --  Reset the floating-point processor to the default state needed to get"}, {"sha": "5c5cbef24b744a8098a9997e5c644a3727d0dfd2", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,7 @@ with System.Img_LLU;        use System.Img_LLU;\n with System.Img_Uns;        use System.Img_Uns;\n with System.Powten_Table;   use System.Powten_Table;\n with System.Unsigned_Types; use System.Unsigned_Types;\n+with System.Float_Control;\n \n package body System.Img_Real is\n \n@@ -143,14 +144,6 @@ package body System.Img_Real is\n       Aft  : Natural;\n       Exp  : Natural)\n    is\n-      procedure Reset;\n-      pragma Import (C, Reset, \"__gnat_init_float\");\n-      --  We import the floating-point processor reset routine so that we can\n-      --  be sure the floating-point processor is properly set for conversion\n-      --  calls (see description of Reset in GNAT.Float_Control (g-flocon.ads).\n-      --  This is notably need on Windows, where calls to the operating system\n-      --  randomly reset the processor into 64-bit mode.\n-\n       NFrac : constant Natural := Natural'Max (Aft, 1);\n       Sign  : Character;\n       X     : aliased Long_Long_Float;\n@@ -476,7 +469,13 @@ package body System.Img_Real is\n    --  Start of processing for Set_Image_Real\n \n    begin\n-      Reset;\n+      --  We call the floating-point processor reset routine so that we can\n+      --  be sure the floating-point processor is properly set for conversion\n+      --  calls. This is notably need on Windows, where calls to the operating\n+      --  system randomly reset the processor into 64-bit mode.\n+\n+      System.Float_Control.Reset;\n+\n       Scale := 0;\n \n       --  Deal with invalid values first,"}, {"sha": "cbde1f4c90e773d4b07dc8d8ab27922d62f525b3", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,7 @@ with System.OS_Primitives;\n with System.Task_Info;\n with System.Interrupt_Management;\n with System.Win32.Ext;\n+with System.Float_Control;\n \n with System.Soft_Links;\n --  We use System.Soft_Links instead of System.Tasking.Initialization because\n@@ -791,16 +792,15 @@ package body System.Task_Primitives.Operations is\n    --  System.Task_Primitives.Operations.Create_Task during thread creation.\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n-      procedure Init_Float;\n-      pragma Import (C, Init_Float, \"__gnat_init_float\");\n-      --  Properly initializes the FPU for x86 systems\n-\n       procedure Get_Stack_Bounds (Base : Address; Limit : Address);\n       pragma Import (C, Get_Stack_Bounds, \"__gnat_get_stack_bounds\");\n       --  Get stack boundaries\n    begin\n       Specific.Set (Self_ID);\n-      Init_Float;\n+\n+      --  Properly initializes the FPU for x86 systems\n+\n+      System.Float_Control.Reset;\n \n       if Self_ID.Common.Task_Info /= null\n         and then"}, {"sha": "e1f3986e2a5d6f54deeb64af4b0f3ddf30496923", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -46,6 +46,7 @@ with Interfaces.C;\n with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n+with System.Float_Control;\n \n with System.Soft_Links;\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n@@ -793,10 +794,6 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n-      procedure Init_Float;\n-      pragma Import (C, Init_Float, \"__gnat_init_float\");\n-      --  Properly initializes the FPU for PPC/MIPS systems\n-\n    begin\n       --  Store the user-level task id in the Thread field (to be used\n       --  internally by the run-time system) and the kernel-level task id in\n@@ -807,7 +804,9 @@ package body System.Task_Primitives.Operations is\n \n       Specific.Set (Self_ID);\n \n-      Init_Float;\n+      --  Properly initializes the FPU for PPC/MIPS systems\n+\n+      System.Float_Control.Reset;\n \n       --  Install the signal handlers\n "}, {"sha": "00c6e43a3df4d1277c36e6408fff7ac9c09c3048", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,7 @@\n \n with System.Powten_Table; use System.Powten_Table;\n with System.Val_Util;     use System.Val_Util;\n+with System.Float_Control;\n \n package body System.Val_Real is\n \n@@ -43,14 +44,6 @@ package body System.Val_Real is\n       Ptr : not null access Integer;\n       Max : Integer) return Long_Long_Float\n    is\n-      procedure Reset;\n-      pragma Import (C, Reset, \"__gnat_init_float\");\n-      --  We import the floating-point processor reset routine so that we can\n-      --  be sure the floating-point processor is properly set for conversion\n-      --  calls (see description of Reset in GNAT.Float_Control (g-flocon.ads).\n-      --  This is notably need on Windows, where calls to the operating system\n-      --  randomly reset the processor into 64-bit mode.\n-\n       P : Integer;\n       --  Local copy of string pointer\n \n@@ -173,7 +166,13 @@ package body System.Val_Real is\n    --  Start of processing for System.Scan_Real\n \n    begin\n-      Reset;\n+      --  We call the floating-point processor reset routine so that we can\n+      --  be sure the floating-point processor is properly set for conversion\n+      --  calls. This is notably need on Windows, where calls to the operating\n+      --  system randomly reset the processor into 64-bit mode.\n+\n+      System.Float_Control.Reset;\n+\n       Scan_Sign (Str, Ptr, Max, Minus, Start);\n       P := Ptr.all;\n       Ptr.all := Start;"}, {"sha": "13a638707665d75e434b0c805100a01fcfffdce0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -7430,7 +7430,8 @@ package body Sem_Prag is\n          --  pragma Debug ([boolean_EXPRESSION,] PROCEDURE_CALL_STATEMENT);\n \n          when Pragma_Debug => Debug : declare\n-               Cond : Node_Id;\n+            Cond : Node_Id;\n+            Call : Node_Id;\n \n          begin\n             GNAT_Pragma;\n@@ -7443,8 +7444,39 @@ package body Sem_Prag is\n             if Arg_Count = 2 then\n                Cond :=\n                  Make_And_Then (Loc,\n-                   Left_Opnd   => Relocate_Node (Cond),\n-                   Right_Opnd  => Get_Pragma_Arg (Arg1));\n+                   Left_Opnd  => Relocate_Node (Cond),\n+                   Right_Opnd => Get_Pragma_Arg (Arg1));\n+               Call := Get_Pragma_Arg (Arg2);\n+            else\n+               Call := Get_Pragma_Arg (Arg1);\n+            end if;\n+\n+            if Nkind_In (Call,\n+                 N_Indexed_Component,\n+                 N_Function_Call,\n+                 N_Identifier,\n+                 N_Selected_Component)\n+            then\n+               --  If this pragma Debug comes from source, its argument was\n+               --  parsed as a name form (which is syntactically identical).\n+               --  Change it to a procedure call statement now.\n+\n+               Change_Name_To_Procedure_Call_Statement (Call);\n+\n+            elsif Nkind (Call) = N_Procedure_Call_Statement then\n+\n+               --  Already in the form of a procedure call statement: nothing\n+               --  to do (could happen in case of an internally generated\n+               --  pragma Debug).\n+\n+               null;\n+\n+            else\n+               --  All other cases: diagnose error\n+\n+               Error_Msg\n+                 (\"argument of pragma% is not procedure call\", Sloc (Call));\n+               return;\n             end if;\n \n             --  Rewrite into a conditional with an appropriate condition. We\n@@ -7458,8 +7490,7 @@ package body Sem_Prag is\n                    Make_Block_Statement (Loc,\n                      Handled_Statement_Sequence =>\n                        Make_Handled_Sequence_Of_Statements (Loc,\n-                         Statements => New_List (\n-                           Relocate_Node (Debug_Statement (N))))))));\n+                         Statements => New_List (Relocate_Node (Call)))))));\n             Analyze (N);\n          end Debug;\n "}, {"sha": "69b4705ba251e824853f9f8fa3d54bba7a8a6279", "filename": "gcc/ada/sinfo-cn.adb", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo-cn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo-cn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-cn.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,8 @@\n --  general manner, but in some specific cases, the fields of related nodes\n --  have been deliberately layed out in a manner that permits such alteration.\n \n-with Atree; use Atree;\n+with Atree;  use Atree;\n+with Snames; use Snames;\n \n package body Sinfo.CN is\n \n@@ -74,6 +75,58 @@ package body Sinfo.CN is\n       N := Extend_Node (N);\n    end Change_Identifier_To_Defining_Identifier;\n \n+   ---------------------------------------------\n+   -- Change_Name_To_Procedure_Call_Statement --\n+   ---------------------------------------------\n+\n+   procedure Change_Name_To_Procedure_Call_Statement (N : Node_Id) is\n+   begin\n+      --  Case of Indexed component, which is a procedure call with arguments\n+\n+      if Nkind (N) = N_Indexed_Component then\n+         declare\n+            Prefix_Node : constant Node_Id := Prefix (N);\n+            Exprs_Node  : constant List_Id := Expressions (N);\n+\n+         begin\n+            Change_Node (N, N_Procedure_Call_Statement);\n+            Set_Name (N, Prefix_Node);\n+            Set_Parameter_Associations (N, Exprs_Node);\n+         end;\n+\n+      --  Case of function call node, which is a really a procedure call\n+\n+      elsif Nkind (N) = N_Function_Call then\n+         declare\n+            Fname_Node  : constant Node_Id := Name (N);\n+            Params_List : constant List_Id := Parameter_Associations (N);\n+\n+         begin\n+            Change_Node (N, N_Procedure_Call_Statement);\n+            Set_Name (N, Fname_Node);\n+            Set_Parameter_Associations (N, Params_List);\n+         end;\n+\n+      --  Case of call to attribute that denotes a procedure. Here we just\n+      --  leave the attribute reference unchanged.\n+\n+      elsif Nkind (N) = N_Attribute_Reference\n+        and then Is_Procedure_Attribute_Name (Attribute_Name (N))\n+      then\n+         null;\n+\n+      --  All other cases of names are parameterless procedure calls\n+\n+      else\n+         declare\n+            Name_Node : constant Node_Id := Relocate_Node (N);\n+         begin\n+            Change_Node (N, N_Procedure_Call_Statement);\n+            Set_Name (N, Name_Node);\n+         end;\n+      end if;\n+   end Change_Name_To_Procedure_Call_Statement;\n+\n    --------------------------------------------------------\n    -- Change_Operator_Symbol_To_Defining_Operator_Symbol --\n    --------------------------------------------------------"}, {"sha": "c6988f466f2caf86fa6baa1771baba0f60a8e3bf", "filename": "gcc/ada/sinfo-cn.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo-cn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo-cn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-cn.ads?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,4 +65,9 @@ package Sinfo.CN is\n    --  on return the Chars field is set to a copy of the contents of the\n    --  Chars field of the Selector_Name field.\n \n+   procedure Change_Name_To_Procedure_Call_Statement (N : Node_Id);\n+   --  Some statements (procedure call statements) are in the form of a name\n+   --  and are parsed as such. This routine takes the scanned name as input\n+   --  and returns the corresponding N_Procedure_Call_Statement.\n+\n end Sinfo.CN;"}, {"sha": "b225b6b82fb88da48f79578dd5f4344bac6e1f6f", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -661,14 +661,6 @@ package body Sinfo is\n       return Node5 (N);\n    end Dcheck_Function;\n \n-   function Debug_Statement\n-      (N : Node_Id) return Node_Id is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Pragma);\n-      return Node3 (N);\n-   end Debug_Statement;\n-\n    function Declarations\n       (N : Node_Id) return List_Id is\n    begin\n@@ -3712,14 +3704,6 @@ package body Sinfo is\n       Set_Node5 (N, Val); -- semantic field, no parent set\n    end Set_Dcheck_Function;\n \n-   procedure Set_Debug_Statement\n-      (N : Node_Id; Val : Node_Id) is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Pragma);\n-      Set_Node3_With_Parent (N, Val);\n-   end Set_Debug_Statement;\n-\n    procedure Set_Declarations\n       (N : Node_Id; Val : List_Id) is\n    begin"}, {"sha": "ad81c77f841436aedb6f65f1b6bb4ecf6b5633b3", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -764,15 +764,6 @@ package Sinfo is\n    --    This field is present in an N_Variant node, It references the entity\n    --    for the discriminant checking function for the variant.\n \n-   --  Debug_Statement (Node3)\n-   --    This field is present in an N_Pragma node. It is used only for a Debug\n-   --    pragma. The parameter is of the form of an expression, as required by\n-   --    the pragma syntax, but is actually a procedure call. To simplify\n-   --    semantic processing, the parser creates a copy of the argument\n-   --    rearranged into a procedure call statement and places it in the\n-   --    Debug_Statement field. Note that this field is considered syntactic\n-   --    field, since it is created by the parser.\n-\n    --  Default_Expression (Node5-Sem)\n    --    This field is Empty if there is no default expression. If there is a\n    --    simple default expression (one with no side effects), then this field\n@@ -2069,7 +2060,6 @@ package Sinfo is\n       --  Sloc points to PRAGMA\n       --  Next_Pragma (Node1-Sem)\n       --  Pragma_Argument_Associations (List2) (set to No_List if none)\n-      --  Debug_Statement (Node3) (set to Empty if not Debug)\n       --  Pragma_Identifier (Node4)\n       --  Next_Rep_Item (Node5-Sem)\n       --  Pragma_Enabled (Flag5-Sem)\n@@ -8201,9 +8191,6 @@ package Sinfo is\n    function Dcheck_Function\n      (N : Node_Id) return Entity_Id;  -- Node5\n \n-   function Debug_Statement\n-     (N : Node_Id) return Node_Id;    -- Node3\n-\n    function Declarations\n      (N : Node_Id) return List_Id;    -- List2\n \n@@ -9173,9 +9160,6 @@ package Sinfo is\n    procedure Set_Dcheck_Function\n      (N : Node_Id; Val : Entity_Id);          -- Node5\n \n-   procedure Set_Debug_Statement\n-     (N : Node_Id; Val : Node_Id);            -- Node3\n-\n    procedure Set_Declarations\n      (N : Node_Id; Val : List_Id);            -- List2\n \n@@ -10105,7 +10089,7 @@ package Sinfo is\n      N_Pragma =>\n        (1 => False,   --  Next_Pragma (Node1-Sem)\n         2 => True,    --  Pragma_Argument_Associations (List2)\n-        3 => True,    --  Debug_Statement (Node3)\n+        3 => False,   --  unused\n         4 => True,    --  Pragma_Identifier (Node4)\n         5 => False),  --  Next_Rep_Item (Node5-Sem)\n \n@@ -11732,7 +11716,6 @@ package Sinfo is\n    pragma Inline (Corresponding_Spec);\n    pragma Inline (Corresponding_Stub);\n    pragma Inline (Dcheck_Function);\n-   pragma Inline (Debug_Statement);\n    pragma Inline (Declarations);\n    pragma Inline (Default_Expression);\n    pragma Inline (Default_Storage_Pool);\n@@ -12053,7 +12036,6 @@ package Sinfo is\n    pragma Inline (Set_Corresponding_Spec);\n    pragma Inline (Set_Corresponding_Stub);\n    pragma Inline (Set_Dcheck_Function);\n-   pragma Inline (Set_Debug_Statement);\n    pragma Inline (Set_Declarations);\n    pragma Inline (Set_Default_Expression);\n    pragma Inline (Set_Default_Storage_Pool);"}, {"sha": "be4ca8aceab86b5c98e1bd4f38049b43da9864d9", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -388,14 +388,12 @@ package body Tbuild is\n    function Make_Pragma\n      (Sloc                         : Source_Ptr;\n       Chars                        : Name_Id;\n-      Pragma_Argument_Associations : List_Id := No_List;\n-      Debug_Statement              : Node_Id := Empty) return Node_Id\n+      Pragma_Argument_Associations : List_Id := No_List) return Node_Id\n    is\n    begin\n       return\n         Make_Pragma (Sloc,\n           Pragma_Argument_Associations => Pragma_Argument_Associations,\n-          Debug_Statement              => Debug_Statement,\n           Pragma_Identifier            => Make_Identifier (Sloc, Chars));\n    end Make_Pragma;\n "}, {"sha": "0ece7bd524418aa80026fd95b60e4eed953956aa", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab4d95af734d904c16bf4af815e8810546feff6/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=7ab4d95af734d904c16bf4af815e8810546feff6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -150,8 +150,7 @@ package Tbuild is\n    function Make_Pragma\n      (Sloc                         : Source_Ptr;\n       Chars                        : Name_Id;\n-      Pragma_Argument_Associations : List_Id := No_List;\n-      Debug_Statement              : Node_Id := Empty) return Node_Id;\n+      Pragma_Argument_Associations : List_Id := No_List) return Node_Id;\n    --  A convenient form of Make_Pragma not requiring a Pragma_Identifier\n    --  argument (this argument is built from the value given for Chars).\n "}]}