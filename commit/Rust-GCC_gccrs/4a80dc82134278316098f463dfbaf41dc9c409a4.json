{"sha": "4a80dc82134278316098f463dfbaf41dc9c409a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4MGRjODIxMzQyNzgzMTYwOThmNDYzZGZiYWY0MWRjOWM0MDlhNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-03-01T18:22:07Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-03-01T18:22:07Z"}, "message": "predicates.md (branch_comparison_operator): Change to define_special_predicate.\n\n\t* config/rs6000/predicates.md (branch_comparison_operator): Change\n\tto define_special_predicate.\n\t(scc_comparison_operator): Same.\n\t(branch_positive_comparison_operator): Same.\n\nFrom-SVN: r95752", "tree": {"sha": "8b61f021d4f0aef6935f5178f39062d503e585df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b61f021d4f0aef6935f5178f39062d503e585df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a80dc82134278316098f463dfbaf41dc9c409a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a80dc82134278316098f463dfbaf41dc9c409a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a80dc82134278316098f463dfbaf41dc9c409a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a80dc82134278316098f463dfbaf41dc9c409a4/comments", "author": null, "committer": null, "parents": [{"sha": "ec1e9f7c14b1fab314544d07709ba32a58323d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1e9f7c14b1fab314544d07709ba32a58323d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1e9f7c14b1fab314544d07709ba32a58323d9b"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "642a9eddf9295a7ab436f49ab9141f11fd08c970", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a80dc82134278316098f463dfbaf41dc9c409a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a80dc82134278316098f463dfbaf41dc9c409a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a80dc82134278316098f463dfbaf41dc9c409a4", "patch": "@@ -1,3 +1,10 @@\n+2005-03-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/predicates.md (branch_comparison_operator): Change\n+\tto define_special_predicate.\n+\t(scc_comparison_operator): Same.\n+\t(branch_positive_comparison_operator): Same.\n+\n 2005-03-01  Daniel Berlin <dberlin@dberlin.org>\n \n \t* Makefile.in (tree-ssa-sink.o): New."}, {"sha": "3cb1475ffc6eaa0c7fdd4d506b51a9c182029baf", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a80dc82134278316098f463dfbaf41dc9c409a4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a80dc82134278316098f463dfbaf41dc9c409a4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=4a80dc82134278316098f463dfbaf41dc9c409a4", "patch": "@@ -678,7 +678,7 @@\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; instruction.  We only check the opcode against the mode of the CC value.\n-(define_predicate \"branch_comparison_operator\"\n+(define_special_predicate \"branch_comparison_operator\"\n   (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu,unordered,ordered,unge,unle\")\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -698,13 +698,13 @@\n \n ;; Return 1 if OP is a comparison operation that is valid for an SCC insn --\n ;; it must be a positive comparison.\n-(define_predicate \"scc_comparison_operator\"\n+(define_special_predicate \"scc_comparison_operator\"\n   (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n        (match_operand 0 \"branch_comparison_operator\")))\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; insn, which is true if the corresponding bit in the CC register is set.\n-(define_predicate \"branch_positive_comparison_operator\"\n+(define_special_predicate \"branch_positive_comparison_operator\"\n   (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n        (match_operand 0 \"branch_comparison_operator\")))\n "}]}