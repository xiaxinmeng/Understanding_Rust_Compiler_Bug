{"sha": "2efb42140524778738f6591330f7a6d6ecfa6287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmYjQyMTQwNTI0Nzc4NzM4ZjY1OTEzMzBmN2E2ZDZlY2ZhNjI4Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-25T14:48:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-25T14:48:55Z"}, "message": "i386.c (ix86_decompose_address): Do not check for register RTX when looking at index_reg or base_reg.\n\n\t* config/i386/i386.c (ix86_decompose_address): Do not check for\n\tregister RTX when looking at index_reg or base_reg.\n\t* config/i386/i386.h (INCOMING_RETURN_ADDR_RTX): Use stack_pointer_rtx.\n\nFrom-SVN: r250526", "tree": {"sha": "8f176d1c227b7486704dbdb63bd8587c7595f8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f176d1c227b7486704dbdb63bd8587c7595f8be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efb42140524778738f6591330f7a6d6ecfa6287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efb42140524778738f6591330f7a6d6ecfa6287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efb42140524778738f6591330f7a6d6ecfa6287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efb42140524778738f6591330f7a6d6ecfa6287/comments", "author": null, "committer": null, "parents": [{"sha": "a8697b270e4cf3a34dbf23c16952b070b7d73c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8697b270e4cf3a34dbf23c16952b070b7d73c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8697b270e4cf3a34dbf23c16952b070b7d73c09"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "aa3cb92b87ebc35a3ca6c78329c40cd405fc79ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2efb42140524778738f6591330f7a6d6ecfa6287", "patch": "@@ -1,3 +1,9 @@\n+2017-07-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_decompose_address): Do not check for\n+\tregister RTX when looking at index_reg or base_reg.\n+\t* config/i386/i386.h (INCOMING_RETURN_ADDR_RTX): Use stack_pointer_rtx.\n+\n 2017-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple.c (gimple_assign_set_rhs_with_ops): Do not ask gsi_replace\n@@ -96,8 +102,9 @@\n 2017-07-25  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/81520\n-\t* ipa-visibility.c (function_and_variable_visibility): Make the redirection\n-\tjust on target that do supporting aliasing.  Fix GNU coding style.\n+\t* ipa-visibility.c (function_and_variable_visibility): Make the\n+\tredirection just on target that supports aliasing.\n+\tFix GNU coding style.\n \n 2017-07-25  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n "}, {"sha": "084b4a6a0dbff37b2b24d4c90bdfe51e773fd688", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2efb42140524778738f6591330f7a6d6ecfa6287", "patch": "@@ -13594,8 +13594,7 @@ ix86_minimum_incoming_stack_boundary (bool sibcall)\n {\n   unsigned int incoming_stack_boundary;\n \n-  /* Stack of interrupt handler is aligned to 128 bits in 64bit\n-     mode.  */\n+  /* Stack of interrupt handler is aligned to 128 bits in 64bit mode.  */\n   if (cfun->machine->func_type != TYPE_NORMAL)\n     incoming_stack_boundary = TARGET_64BIT ? 128 : MIN_STACK_BOUNDARY;\n   /* Prefer the one specified at command line. */\n@@ -16187,24 +16186,21 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \n   /* Allow arg pointer and stack pointer as index if there is not scaling.  */\n   if (base_reg && index_reg && scale == 1\n-      && (index_reg == arg_pointer_rtx\n-\t  || index_reg == frame_pointer_rtx\n-\t  || (REG_P (index_reg) && REGNO (index_reg) == STACK_POINTER_REGNUM)))\n+      && (REGNO (index_reg) == ARG_POINTER_REGNUM\n+\t  || REGNO (index_reg) == FRAME_POINTER_REGNUM\n+\t  || REGNO (index_reg) == SP_REG))\n     {\n       std::swap (base, index);\n       std::swap (base_reg, index_reg);\n     }\n \n   /* Special case: %ebp cannot be encoded as a base without a displacement.\n      Similarly %r13.  */\n-  if (!disp\n-      && base_reg\n-      && (base_reg == hard_frame_pointer_rtx\n-\t  || base_reg == frame_pointer_rtx\n-\t  || base_reg == arg_pointer_rtx\n-\t  || (REG_P (base_reg)\n-\t      && (REGNO (base_reg) == HARD_FRAME_POINTER_REGNUM\n-\t\t  || REGNO (base_reg) == R13_REG))))\n+  if (!disp && base_reg\n+      && (REGNO (base_reg) == ARG_POINTER_REGNUM\n+\t  || REGNO (base_reg) == FRAME_POINTER_REGNUM\n+\t  || REGNO (base_reg) == BP_REG\n+\t  || REGNO (base_reg) == R13_REG))\n     disp = const0_rtx;\n \n   /* Special case: on K6, [%esi] makes the instruction vector decoded.\n@@ -16213,7 +16209,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n      to test cfun for being non-NULL. */\n   if (TARGET_K6 && cfun && optimize_function_for_speed_p (cfun)\n       && base_reg && !index_reg && !disp\n-      && REG_P (base_reg) && REGNO (base_reg) == SI_REG)\n+      && REGNO (base_reg) == SI_REG)\n     disp = const0_rtx;\n \n   /* Special case: encode reg+reg instead of reg*2.  */"}, {"sha": "682745ae06babc901185aa5a2b47a2b192f7e81e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efb42140524778738f6591330f7a6d6ecfa6287/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2efb42140524778738f6591330f7a6d6ecfa6287", "patch": "@@ -2165,7 +2165,7 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n \n /* Before the prologue, RA is at 0(%esp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (Pmode, stack_pointer_rtx)\n \n /* After the prologue, RA is at -4(AP) in the current frame.  */\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\\"}]}