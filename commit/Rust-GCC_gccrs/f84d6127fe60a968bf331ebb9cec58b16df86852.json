{"sha": "f84d6127fe60a968bf331ebb9cec58b16df86852", "node_id": "C_kwDOANBUbNoAKGY4NGQ2MTI3ZmU2MGE5NjhiZjMzMWViYjljZWM1OGIxNmRmODY4NTI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-20T11:46:23Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Implement FromIterator\n\nImplement FromIterator for TokenStream, from either a TokenTree iterator\nor a TokenStream iterator.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/token_stream.rs: Add internal\n\timplementation.\n\t* librust/proc_macro/rust/lib.rs: Add FromIterator\n\timplementation.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "d21f7197fb4ec5d144a3333ac0c9f2c30ba20511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21f7197fb4ec5d144a3333ac0c9f2c30ba20511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84d6127fe60a968bf331ebb9cec58b16df86852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84d6127fe60a968bf331ebb9cec58b16df86852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84d6127fe60a968bf331ebb9cec58b16df86852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84d6127fe60a968bf331ebb9cec58b16df86852/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4cd0d726ed65e34cfcb8cd6a265095d89983520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cd0d726ed65e34cfcb8cd6a265095d89983520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4cd0d726ed65e34cfcb8cd6a265095d89983520"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "7135a0fb81cbdcdb943352497530d406b912be40", "filename": "librust/proc_macro/rust/bridge/token_stream.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d6127fe60a968bf331ebb9cec58b16df86852/librust%2Fproc_macro%2Frust%2Fbridge%2Ftoken_stream.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d6127fe60a968bf331ebb9cec58b16df86852/librust%2Fproc_macro%2Frust%2Fbridge%2Ftoken_stream.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Ftoken_stream.rs?ref=f84d6127fe60a968bf331ebb9cec58b16df86852", "patch": "@@ -1,4 +1,8 @@\n use bridge::{group::Group, ident::Ident, literal::Literal, punct::Punct};\n+use std::convert::TryInto;\n+\n+type ExternalTokenTree = crate::TokenTree;\n+type ExternalTokenStream = crate::TokenStream;\n \n // TODO: There surely is a better way to achieve this. I don't like this\n // \"duplication\" of the TokenTree enumeration. But I cannot use the public\n@@ -13,23 +17,71 @@ pub enum TokenTree {\n     Literal(Literal),\n }\n \n+impl From<ExternalTokenTree> for TokenTree {\n+    fn from(value: ExternalTokenTree) -> Self {\n+        match value {\n+            ExternalTokenTree::Group(g) => TokenTree::Group(g.0),\n+            ExternalTokenTree::Ident(i) => TokenTree::Ident(i.0),\n+            ExternalTokenTree::Punct(p) => TokenTree::Punct(p.0),\n+            ExternalTokenTree::Literal(l) => TokenTree::Literal(l.0),\n+        }\n+    }\n+}\n+\n extern \"C\" {\n     fn TokenStream__new() -> TokenStream;\n+    fn TokenStream__with_capacity(capacity: u64) -> TokenStream;\n+    fn TokenStream__push(stream: *mut TokenStream, tree: TokenTree);\n }\n \n #[repr(C)]\n #[derive(Clone)]\n pub struct TokenStream {\n     pub(crate) data: *const TokenTree,\n     pub(crate) size: u64,\n+    capacity: u64,\n }\n \n impl TokenStream {\n     pub fn new() -> Self {\n         unsafe { TokenStream__new() }\n     }\n \n+    fn with_capacity(capacity: u64) -> Self {\n+        unsafe { TokenStream__with_capacity(capacity) }\n+    }\n+\n+    fn push(&mut self, tree: TokenTree) {\n+        unsafe { TokenStream__push(self as *mut TokenStream, tree) }\n+    }\n+\n     pub fn is_empty(&self) -> bool {\n         0 == self.size\n     }\n+\n+    pub fn from_iterator<I>(it: I) -> Self\n+    where\n+        I: IntoIterator<Item = ExternalTokenStream>,\n+    {\n+        let it = it.into_iter();\n+        let mut result = TokenStream::with_capacity(it.size_hint().0.try_into().unwrap());\n+        for stream in it {\n+            for item in stream.into_iter() {\n+                result.push(item.into());\n+            }\n+        }\n+        result\n+    }\n+\n+    pub fn from_tree_iterator<I>(it: I) -> Self\n+    where\n+        I: IntoIterator<Item = ExternalTokenTree>,\n+    {\n+        let it = it.into_iter();\n+        let mut result = TokenStream::with_capacity(it.size_hint().0.try_into().unwrap());\n+        for item in it {\n+            result.push(item.into());\n+        }\n+        result\n+    }\n }"}, {"sha": "4888edb16a8748757b7c9178c3042218f7244289", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d6127fe60a968bf331ebb9cec58b16df86852/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d6127fe60a968bf331ebb9cec58b16df86852/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=f84d6127fe60a968bf331ebb9cec58b16df86852", "patch": "@@ -174,14 +174,14 @@ impl FromStr for TokenStream {\n }\n \n impl iter::FromIterator<TokenTree> for TokenStream {\n-    fn from_iter<I: IntoIterator<Item = TokenTree>>(_trees: I) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {\n+        TokenStream(bridge::token_stream::TokenStream::from_tree_iterator(trees))\n     }\n }\n \n impl iter::FromIterator<TokenStream> for TokenStream {\n-    fn from_iter<I: IntoIterator<Item = TokenStream>>(_streams: I) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {\n+        TokenStream(bridge::token_stream::TokenStream::from_iterator(streams))\n     }\n }\n "}]}