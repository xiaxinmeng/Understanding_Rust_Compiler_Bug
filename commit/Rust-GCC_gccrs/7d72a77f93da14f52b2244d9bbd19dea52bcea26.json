{"sha": "7d72a77f93da14f52b2244d9bbd19dea52bcea26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3MmE3N2Y5M2RhMTRmNTJiMjI0NGQ5YmJkMTlkZWE1MmJjZWEyNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-16T11:41:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-16T11:41:19Z"}, "message": "ipa-inline-transform.c (update_noncloned_frequencies): Update also counts.\n\n\t* ipa-inline-transform.c (update_noncloned_frequencies): Update also\n\tcounts.\n\t(clone_inlined_nodes): Update.\n\nFrom-SVN: r249244", "tree": {"sha": "77051b4b87d6df7956332bd6d3707b0007772e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77051b4b87d6df7956332bd6d3707b0007772e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d72a77f93da14f52b2244d9bbd19dea52bcea26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d72a77f93da14f52b2244d9bbd19dea52bcea26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d72a77f93da14f52b2244d9bbd19dea52bcea26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d72a77f93da14f52b2244d9bbd19dea52bcea26/comments", "author": null, "committer": null, "parents": [{"sha": "8d94f9324a2c79c6f93e5eea37776b2a27c3532c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d94f9324a2c79c6f93e5eea37776b2a27c3532c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d94f9324a2c79c6f93e5eea37776b2a27c3532c"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "0fed0dce4cc65c8cc34cabaa4f8ba102bbb87f9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d72a77f93da14f52b2244d9bbd19dea52bcea26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d72a77f93da14f52b2244d9bbd19dea52bcea26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d72a77f93da14f52b2244d9bbd19dea52bcea26", "patch": "@@ -1,3 +1,9 @@\n+2017-06-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-transform.c (update_noncloned_frequencies): Update also\n+\tcounts.\n+\t(clone_inlined_nodes): Update.\n+\n 2017-06-16  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n         * config/aarch64/aarch64.c (qdf24xx_prefetch_tune): Update"}, {"sha": "dc224f7a39469abdcd6ecb1c1a955552ee07fdba", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d72a77f93da14f52b2244d9bbd19dea52bcea26/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d72a77f93da14f52b2244d9bbd19dea52bcea26/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=7d72a77f93da14f52b2244d9bbd19dea52bcea26", "patch": "@@ -54,10 +54,12 @@ int nfunctions_inlined;\n /* Scale frequency of NODE edges by FREQ_SCALE.  */\n \n static void\n-update_noncloned_frequencies (struct cgraph_node *node,\n-\t\t\t      int freq_scale)\n+update_noncloned_frequencies (struct cgraph_node *node, \n+\t\t\t      int freq_scale, profile_count num,\n+\t\t\t      profile_count den)\n {\n   struct cgraph_edge *e;\n+  bool scale = (num == profile_count::zero () || den > 0);\n \n   /* We do not want to ignore high loop nest after freq drops to 0.  */\n   if (!freq_scale)\n@@ -68,14 +70,20 @@ update_noncloned_frequencies (struct cgraph_node *node,\n       if (e->frequency > CGRAPH_FREQ_MAX)\n         e->frequency = CGRAPH_FREQ_MAX;\n       if (!e->inline_failed)\n-        update_noncloned_frequencies (e->callee, freq_scale);\n+        update_noncloned_frequencies (e->callee, freq_scale, num, den);\n+      if (scale)\n+\te->count = e->count.apply_scale (num, den);\n     }\n   for (e = node->indirect_calls; e; e = e->next_callee)\n     {\n       e->frequency = e->frequency * (gcov_type) freq_scale / CGRAPH_FREQ_BASE;\n       if (e->frequency > CGRAPH_FREQ_MAX)\n         e->frequency = CGRAPH_FREQ_MAX;\n+      if (scale)\n+\te->count = e->count.apply_scale (num, den);\n     }\n+  if (scale)\n+    node->count = node->count.apply_scale (num, den);\n }\n \n /* We removed or are going to remove the last call to NODE.\n@@ -212,7 +220,8 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n \t    }\n \t  duplicate = false;\n \t  e->callee->externally_visible = false;\n-          update_noncloned_frequencies (e->callee, e->frequency);\n+          update_noncloned_frequencies (e->callee, e->frequency,\n+\t\t\t\t\te->count, e->callee->count);\n \n \t  dump_callgraph_transformation (e->callee, inlining_into,\n \t\t\t\t\t \"inlining to\");"}]}