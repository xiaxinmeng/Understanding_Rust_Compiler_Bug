{"sha": "37cf9f4f1c3251d594468e52e41e18433130aba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjZjlmNGYxYzMyNTFkNTk0NDY4ZTUyZTQxZTE4NDMzMTMwYWJhNw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-10-13T10:54:24Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-10-13T10:54:24Z"}, "message": "tree-vect-loop.c (vectorizable_live_operation): Support handling for live variable outside loop but not in lcssa form.\n\n\t* tree-vect-loop.c (vectorizable_live_operation): Support handling\n\tfor live variable outside loop but not in lcssa form.\n\nFrom-SVN: r241096", "tree": {"sha": "56d76e56218e4754b1b1136931ad80b30c324fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d76e56218e4754b1b1136931ad80b30c324fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37cf9f4f1c3251d594468e52e41e18433130aba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf9f4f1c3251d594468e52e41e18433130aba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cf9f4f1c3251d594468e52e41e18433130aba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf9f4f1c3251d594468e52e41e18433130aba7/comments", "author": null, "committer": null, "parents": [{"sha": "d96004b805ee1ad4425b81f3a225240e2745715f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96004b805ee1ad4425b81f3a225240e2745715f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96004b805ee1ad4425b81f3a225240e2745715f"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "d51c0eb779c18598c241cbe2d56d1692a01e5a25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf9f4f1c3251d594468e52e41e18433130aba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf9f4f1c3251d594468e52e41e18433130aba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37cf9f4f1c3251d594468e52e41e18433130aba7", "patch": "@@ -1,3 +1,8 @@\n+2016-10-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-vect-loop.c (vectorizable_live_operation): Support handling\n+\tfor live variable outside loop but not in lcssa form.\n+\n 2016-10-13  Bin Cheng  <bin.cheng@arm.com>\n \n \t* cfg.c (reset_original_copy_tables): New func."}, {"sha": "7b0431ec1ffc987a99c7934386733975d231a48d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf9f4f1c3251d594468e52e41e18433130aba7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf9f4f1c3251d594468e52e41e18433130aba7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=37cf9f4f1c3251d594468e52e41e18433130aba7", "patch": "@@ -6488,14 +6488,6 @@ vectorizable_live_operation (gimple *stmt,\n \t: gimple_get_lhs (stmt);\n   lhs_type = TREE_TYPE (lhs);\n \n-  /* Find all uses of STMT outside the loop - there should be at least one.  */\n-  auto_vec<gimple *, 4> worklist;\n-  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, lhs)\n-    if (!flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n-\t&& !is_gimple_debug (use_stmt))\n-      worklist.safe_push (use_stmt);\n-  gcc_assert (worklist.length () >= 1);\n-\n   bitsize = TYPE_SIZE (TREE_TYPE (vectype));\n   vec_bitsize = TYPE_SIZE (vectype);\n \n@@ -6546,12 +6538,24 @@ vectorizable_live_operation (gimple *stmt,\n   if (stmts)\n     gsi_insert_seq_on_edge_immediate (single_exit (loop), stmts);\n \n-  /* Replace all uses of the USE_STMT in the worklist with the newly inserted\n-     statement.  */\n-  while (!worklist.is_empty ())\n+  /* Replace use of lhs with newly computed result.  If the use stmt is a\n+     single arg PHI, just replace all uses of PHI result.  It's necessary\n+     because lcssa PHI defining lhs may be before newly inserted stmt.  */\n+  use_operand_p use_p;\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, lhs)\n+    if (!flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n+\t&& !is_gimple_debug (use_stmt))\n     {\n-      use_stmt = worklist.pop ();\n-      replace_uses_by (gimple_phi_result (use_stmt), new_tree);\n+      if (gimple_code (use_stmt) == GIMPLE_PHI\n+\t  && gimple_phi_num_args (use_stmt) == 1)\n+\t{\n+\t  replace_uses_by (gimple_phi_result (use_stmt), new_tree);\n+\t}\n+      else\n+\t{\n+\t  FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t    SET_USE (use_p, new_tree);\n+\t}\n       update_stmt (use_stmt);\n     }\n "}]}