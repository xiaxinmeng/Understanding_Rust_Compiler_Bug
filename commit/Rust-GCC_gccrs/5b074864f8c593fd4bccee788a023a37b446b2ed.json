{"sha": "5b074864f8c593fd4bccee788a023a37b446b2ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwNzQ4NjRmOGM1OTNmZDRiY2NlZTc4OGEwMjNhMzdiNDQ2YjJlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-09T20:10:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-09T20:10:32Z"}, "message": "libstdc++: Add comparison operators to std::unique_ptr\n\nSome more C++20 changes from P1614R2, \"The Mothership has Landed\".\n\nThis includes the proposed resolution for LWG 3426 to fix the three-way\ncomparison with nullptr_t.\n\nThe existing tests for unique_ptr comparisons don't actually check the\nresults, only that the expressions compile and are convertible to bool.\nThis also adds a test for the results of those comparisons for C++11 and\nup.\n\n\t* include/bits/unique_ptr.h (operator<=>): Define for C++20.\n\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error line.\n\t* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/comparison/compare.cc: New test.\n\t* testsuite/20_util/unique_ptr/comparison/compare_c++20.cc: New test.", "tree": {"sha": "8e7e2ca118c67d8bc65f9c9b8bb38e7379e13e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e7e2ca118c67d8bc65f9c9b8bb38e7379e13e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b074864f8c593fd4bccee788a023a37b446b2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b074864f8c593fd4bccee788a023a37b446b2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b074864f8c593fd4bccee788a023a37b446b2ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b074864f8c593fd4bccee788a023a37b446b2ed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07432a807ede1c629f0f52aa5f8bf00012929e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07432a807ede1c629f0f52aa5f8bf00012929e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07432a807ede1c629f0f52aa5f8bf00012929e88"}], "stats": {"total": 223, "additions": 221, "deletions": 2}, "files": [{"sha": "98812f0faae5b874c1a680ff2e9a85b5638fe46e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -1,3 +1,11 @@\n+2020-04-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (operator<=>): Define for C++20.\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error line.\n+\t* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/comparison/compare.cc: New test.\n+\t* testsuite/20_util/unique_ptr/comparison/compare_c++20.cc: New test.\n+\n 2020-04-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/slice_array.h (operator==(const slice&, const slice&)):"}, {"sha": "53c8def627df19ccd7b9c00291a45b28d5a6d29b", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -37,6 +37,9 @@\n #include <tuple>\n #include <bits/stl_function.h>\n #include <bits/functional_hash.h>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -756,6 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n     { return !__x; }\n \n+#ifndef __cpp_lib_three_way_comparison\n   /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n@@ -781,6 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n     { return (bool)__x; }\n+#endif // three way comparison\n \n   /// Relational operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n@@ -878,6 +883,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return !(nullptr < __x); }\n+\n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp, typename _Dp, typename _Up, typename _Ep>\n+    requires three_way_comparable_with<typename unique_ptr<_Tp, _Dp>::pointer,\n+\t\t\t\t       typename unique_ptr<_Up, _Ep>::pointer>\n+    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer,\n+\t\t\t       typename unique_ptr<_Up, _Ep>::pointer>\n+    operator<=>(const unique_ptr<_Tp, _Dp>& __x,\n+\t\tconst unique_ptr<_Up, _Ep>& __y)\n+    { return compare_three_way()(__x.get(), __y.get()); }\n+\n+  template<typename _Tp, typename _Dp>\n+    requires three_way_comparable<typename unique_ptr<_Tp, _Dp>::pointer>\n+    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer>\n+    operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    {\n+      using pointer = typename unique_ptr<_Tp, _Dp>::pointer;\n+      return compare_three_way()(__x.get(), pointer(nullptr));\n+    }\n+#endif\n   // @} relates unique_ptr\n \n   /// @cond undocumented"}, {"sha": "6da5a52e28b05bf2df9c47fbc8c5ab0d98bbb69b", "filename": "libstdc++-v3/testsuite/20_util/default_delete/48631_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -26,4 +26,4 @@ struct D : B { };\n D d;\n std::default_delete<B[]> db;\n typedef decltype(db(&d)) type; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 112 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 115 }"}, {"sha": "149b699d1061e9c8cb3f520c74229f0643c9a363", "filename": "libstdc++-v3/testsuite/20_util/default_delete/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -25,5 +25,5 @@ void test01()\n {\n   std::default_delete<void> d;\n   d(nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 77 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 80 }\n }"}, {"sha": "e293b27904e529e158007788c657bc816bb259f2", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/comparison/compare.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare.cc?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unique_ptr<int> p0, p00;\n+  VERIFY( p0 == p00 );\n+  VERIFY( !(p0 < p00) );\n+  VERIFY( !(p0 > p00) );\n+  VERIFY( p0 <= p00 );\n+  VERIFY( p0 >= p00 );\n+\n+  std::unique_ptr<int> p1(new int(1));\n+  VERIFY( p1 == p1 );\n+  VERIFY( !(p1 < p1) );\n+  VERIFY( !(p1 > p1) );\n+  VERIFY( p1 <= p1 );\n+  VERIFY( p1 >= p1 );\n+\n+  std::unique_ptr<const int> p2(new int(1));\n+  VERIFY( p1 >= p1 );\n+  VERIFY( p1 != p2 );\n+  VERIFY( (p1 < p2) || (p1 > p2) );\n+  VERIFY( (p1 <= p2) || (p1 >= p2) );\n+\n+  VERIFY( p1 != p0 );\n+  VERIFY( !(p1 < p0) );\n+  VERIFY( p1 > p0 );\n+  VERIFY( !(p1 <= p0) );\n+  VERIFY( p1 >= p0 );\n+}\n+\n+void\n+test02()\n+{\n+  std::unique_ptr<int> p0;\n+  VERIFY( p0 == nullptr );\n+  VERIFY( !(p0 < nullptr) );\n+  VERIFY( !(p0 > nullptr) );\n+  VERIFY( p0 <= nullptr );\n+  VERIFY( p0 >= nullptr );\n+\n+  VERIFY( nullptr == p0 );\n+  VERIFY( !(nullptr < p0) );\n+  VERIFY( !(nullptr > p0) );\n+  VERIFY( nullptr <= p0 );\n+  VERIFY( nullptr >= p0 );\n+\n+  std::unique_ptr<int> p1(new int(1));\n+  VERIFY( p1 != nullptr );\n+  VERIFY( !(p1 < nullptr) );\n+  VERIFY( p1 > nullptr );\n+  VERIFY( !(p1 <= nullptr) );\n+  VERIFY( p1 >= nullptr );\n+\n+  VERIFY( nullptr != p1 );\n+  VERIFY( nullptr < p1 );\n+  VERIFY( !(nullptr > p1) );\n+  VERIFY( nullptr <= p1 );\n+  VERIFY( !(nullptr >= p1) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "be9819f8de1630b045e7b05567f22d4232efd208", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/comparison/compare_c++20.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b074864f8c593fd4bccee788a023a37b446b2ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fcompare_c%2B%2B20.cc?ref=5b074864f8c593fd4bccee788a023a37b446b2ed", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unique_ptr<int> p0, p00;\n+  VERIFY( p0 == p00 );\n+  VERIFY( !(p0 < p00) );\n+  VERIFY( !(p0 > p00) );\n+  VERIFY( p0 <= p00 );\n+  VERIFY( p0 >= p00 );\n+  VERIFY( std::is_eq(p0 <=> p00) );\n+\n+  std::unique_ptr<int> p1(new int(1));\n+  VERIFY( p1 == p1 );\n+  VERIFY( !(p1 < p1) );\n+  VERIFY( !(p1 > p1) );\n+  VERIFY( p1 <= p1 );\n+  VERIFY( p1 >= p1 );\n+  VERIFY( std::is_eq(p1 <=> p1) );\n+\n+  std::unique_ptr<const int> p2(new int(1));\n+  VERIFY( p1 >= p1 );\n+  VERIFY( p1 != p2 );\n+  VERIFY( (p1 < p2) || (p1 > p2) );\n+  VERIFY( (p1 <= p2) || (p1 >= p2) );\n+  VERIFY( std::is_neq(p1 <=> p2) );\n+\n+  VERIFY( p1 != p0 );\n+  VERIFY( !(p1 < p0) );\n+  VERIFY( p1 > p0 );\n+  VERIFY( !(p1 <= p0) );\n+  VERIFY( p1 >= p0 );\n+  VERIFY( std::is_gt(p1 <=> p0) );\n+  VERIFY( std::is_lt(p0 <=> p1) );\n+}\n+\n+void\n+test02()\n+{\n+  std::unique_ptr<int> p0;\n+  VERIFY( p0 == nullptr );\n+  VERIFY( !(p0 < nullptr) );\n+  VERIFY( !(p0 > nullptr) );\n+  VERIFY( p0 <= nullptr );\n+  VERIFY( p0 >= nullptr );\n+  VERIFY( std::is_eq(p0 <=> nullptr) );\n+\n+  VERIFY( nullptr == p0 );\n+  VERIFY( !(nullptr < p0) );\n+  VERIFY( !(nullptr > p0) );\n+  VERIFY( nullptr <= p0 );\n+  VERIFY( nullptr >= p0 );\n+  VERIFY( std::is_eq(nullptr <=> p0) );\n+\n+  std::unique_ptr<int> p1(new int(1));\n+  VERIFY( p1 != nullptr );\n+  VERIFY( !(p1 < nullptr) );\n+  VERIFY( p1 > nullptr );\n+  VERIFY( !(p1 <= nullptr) );\n+  VERIFY( p1 >= nullptr );\n+  VERIFY( std::is_gt(p1 <=> nullptr) );\n+\n+  VERIFY( nullptr != p1 );\n+  VERIFY( nullptr < p1 );\n+  VERIFY( !(nullptr > p1) );\n+  VERIFY( nullptr <= p1 );\n+  VERIFY( !(nullptr >= p1) );\n+  VERIFY( std::is_lt(nullptr <=> p1) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}