{"sha": "b816f339f40ce7d9b5d9aa404de8642598ffc205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxNmYzMzlmNDBjZTdkOWI1ZDlhYTQwNGRlODY0MjU5OGZmYzIwNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-09T15:33:47Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-09T15:33:47Z"}, "message": "final.c (FIRST_INSN_ADDRESS): Remove.\n\n\t* final.c (FIRST_INSN_ADDRESS): Remove.\n\t(shorten_branches): Don't use FIRST_INSN_ADDRESS.\n\t* system.h (FIRST_INSN_ADDRESS): Poison.\n\t* config/avr/avr.h: Remove a comment about FIRST_INSN_ADDRESS.\n\t* config/m32r/m32r-protos.h: Remove the prototype for\n\tm32r_first_insn_address.\n\t* config/m32r/m32r.c (m32r_first_insn_address): Remove.\n\t* config/m32r/m32r.h (FIRST_INSN_ADDRESS): Likewise.\n\t* doc/md.texi (FIRST_INSN_ADDRESS): Likewise.\n\nFrom-SVN: r75584", "tree": {"sha": "572f076f9b1cdef851ccfc445f75d2985f617675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572f076f9b1cdef851ccfc445f75d2985f617675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b816f339f40ce7d9b5d9aa404de8642598ffc205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b816f339f40ce7d9b5d9aa404de8642598ffc205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b816f339f40ce7d9b5d9aa404de8642598ffc205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b816f339f40ce7d9b5d9aa404de8642598ffc205/comments", "author": null, "committer": null, "parents": [{"sha": "de99511b75b9c9a8c85b77f1019041a280da45bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de99511b75b9c9a8c85b77f1019041a280da45bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de99511b75b9c9a8c85b77f1019041a280da45bf"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "9460fe1d27324635ff2f991ecd2e8407b9b85672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -1,3 +1,15 @@\n+2004-01-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* final.c (FIRST_INSN_ADDRESS): Remove.\n+\t(shorten_branches): Don't use FIRST_INSN_ADDRESS.\n+\t* system.h (FIRST_INSN_ADDRESS): Poison.\n+\t* config/avr/avr.h: Remove a comment about FIRST_INSN_ADDRESS.\n+\t* config/m32r/m32r-protos.h: Remove the prototype for\n+\tm32r_first_insn_address.\n+\t* config/m32r/m32r.c (m32r_first_insn_address): Remove.\n+\t* config/m32r/m32r.h (FIRST_INSN_ADDRESS): Likewise.\n+\t* doc/md.texi (FIRST_INSN_ADDRESS): Likewise.\n+\n 2004-01-09  J. Brobecker  <brobecker@gnat.com>\n \n \t* dwarf2out.c (gen_enumeration_type_die): Return the DIE that"}, {"sha": "c6ac5dcb674e359f452487104b40a9bd20bd1d6f", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -2301,11 +2301,6 @@ extern int avr_case_values_threshold;\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n   fprintf (FILE, \"/* profiler %d */\", (LABELNO))\n \n-/* `FIRST_INSN_ADDRESS'\n-   When the `length' insn attribute is used, this macro specifies the\n-   value to be assigned to the address of the first insn in a\n-   function.  If not specified, 0 is used.  */\n-\n #define ADJUST_INSN_LENGTH(INSN, LENGTH) (LENGTH =\\\n \t\t\t\t\t  adjust_insn_length (INSN, LENGTH))\n /* If defined, modifies the length assigned to instruction INSN as a"}, {"sha": "01bbd6d58357df1b804ffc2f87241c7f220bcb40", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -27,7 +27,6 @@ extern void   sdata_section (void);\n extern void   m32r_init (void);\n extern void   m32r_init_expanders (void);\n extern unsigned m32r_compute_frame_size (int);\n-extern int    m32r_first_insn_address (void);\n extern void   m32r_expand_prologue (void);\n extern void   m32r_finalize_pic (void);\n extern int    direct_return (void);"}, {"sha": "6bc4b9475c306f0a1b578694809a3dfab774d7f2", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -1887,19 +1887,6 @@ m32r_compute_frame_size (int size)\t/* # of var. bytes allocated.  */\n   return total_size;\n }\n \f\n-/* When the `length' insn attribute is used, this macro specifies the\n-   value to be assigned to the address of the first insn in a\n-   function.  If not specified, 0 is used.  */\n-\n-int\n-m32r_first_insn_address (void)\n-{\n-  if (! current_frame_info.initialized)\n-    m32r_compute_frame_size (get_frame_size ());\n-\n-  return 0;\n-}\n-\f\n /* The table we use to reference PIC data.  */\n static rtx global_offset_table;\n                                                                                 "}, {"sha": "b515e778bb6ec7d6e764e3580c4b6b3cc9cb80f5", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -1510,12 +1510,6 @@ L2:     .word STATIC\n    itself with an explicit address than to call an address kept in a\n    register.  */\n #define NO_RECURSIVE_FUNCTION_CSE\n-\n-/* When the `length' insn attribute is used, this macro specifies the\n-   value to be assigned to the address of the first insn in a\n-   function.  If not specified, 0 is used.  */\n-#define FIRST_INSN_ADDRESS m32r_first_insn_address ()\n-\n \f\n /* Section selection.  */\n "}, {"sha": "8c13fc1c2ed1748b97c584a089e16a6b898eb05a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -5289,12 +5289,6 @@ Lengths are measured in addressable storage units (bytes).\n The following macros can be used to refine the length computation:\n \n @table @code\n-@findex FIRST_INSN_ADDRESS\n-@item FIRST_INSN_ADDRESS\n-When the @code{length} insn attribute is used, this macro specifies the\n-value to be assigned to the address of the first insn in a function.  If\n-not specified, 0 is used.\n-\n @findex ADJUST_INSN_LENGTH\n @item ADJUST_INSN_LENGTH (@var{insn}, @var{length})\n If defined, modifies the length assigned to instruction @var{insn} as a"}, {"sha": "ea9aa4bbb48ef7ad98c204013f7f359094673a43", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -736,12 +736,6 @@ compute_alignments (void)\n /* Make a pass over all insns and compute their actual lengths by shortening\n    any branches of variable length if possible.  */\n \n-/* Give a default value for the lowest address in a function.  */\n-\n-#ifndef FIRST_INSN_ADDRESS\n-#define FIRST_INSN_ADDRESS 0\n-#endif\n-\n /* shorten_branches might be called multiple times:  for example, the SH\n    port splits out-of-range conditional branches in MACHINE_DEPENDENT_REORG.\n    In order to do this, it needs proper length information, which it obtains\n@@ -971,7 +965,7 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n #endif /* CASE_VECTOR_SHORTEN_MODE */\n \n   /* Compute initial lengths, addresses, and varying flags for each insn.  */\n-  for (insn_current_address = FIRST_INSN_ADDRESS, insn = first;\n+  for (insn_current_address = 0, insn = first;\n        insn != 0;\n        insn_current_address += insn_lengths[uid], insn = NEXT_INSN (insn))\n     {\n@@ -1072,7 +1066,7 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n     {\n       something_changed = 0;\n       insn_current_align = MAX_CODE_ALIGN - 1;\n-      for (insn_current_address = FIRST_INSN_ADDRESS, insn = first;\n+      for (insn_current_address = 0, insn = first;\n \t   insn != 0;\n \t   insn = NEXT_INSN (insn))\n \t{"}, {"sha": "10d7606ea9b5610fc14bc8b53a0610725b044251", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b816f339f40ce7d9b5d9aa404de8642598ffc205/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b816f339f40ce7d9b5d9aa404de8642598ffc205", "patch": "@@ -621,7 +621,8 @@ typedef char _Bool;\n \tEXIT_BODY OBJECT_FORMAT_ROSE MULTIBYTE_CHARS MAP_CHARACTER\t   \\\n \tLIBGCC_NEEDS_DOUBLE FINAL_PRESCAN_LABEL DEFAULT_CALLER_SAVES\t   \\\n \tLOAD_ARGS_REVERSED MAX_INTEGER_COMPUTATION_MODE\t\t\t   \\\n-\tCONVERT_HARD_REGISTER_TO_SSA_P ASM_OUTPUT_MAIN_SOURCE_FILENAME\n+\tCONVERT_HARD_REGISTER_TO_SSA_P ASM_OUTPUT_MAIN_SOURCE_FILENAME\t   \\\n+\tFIRST_INSN_ADDRESS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}