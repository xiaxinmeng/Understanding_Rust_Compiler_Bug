{"sha": "58814c7630eccb63cd24d198cfda2e8a268faa7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4MTRjNzYzMGVjY2I2M2NkMjRkMTk4Y2ZkYTJlOGEyNjhmYWE3ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-07-27T10:39:49Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-07-27T10:39:49Z"}, "message": "S/390: Fix PR81534\n\nThe HI/QI atomic_fetch_<atomic><mode>\" expander accepted symbolic\nreferences and emitted CAS patterns whose insn predicates rejected them.\n\nFixed by allowing symbolic references there as well.  Reload will get\nrid of them due to the constraint letter.\n\nRegression tested on s390x.\n\ngcc/ChangeLog:\n\n2017-07-27  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/81534\n\t* config/s390/s390.md (\"*atomic_compare_and_swap<mode>_1\")\n\t(\"*atomic_compare_and_swapdi_2\", \"*atomic_compare_and_swapsi_3\"):\n\tChange s_operand to memory_operand.\n\ngcc/testsuite/ChangeLog:\n\n2017-07-27  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/81534\n\t* gcc.target/s390/pr81534.c: New test.\n\nFrom-SVN: r250617", "tree": {"sha": "25587c3387f02df01178775dce8b6c0e0db97355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25587c3387f02df01178775dce8b6c0e0db97355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58814c7630eccb63cd24d198cfda2e8a268faa7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58814c7630eccb63cd24d198cfda2e8a268faa7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58814c7630eccb63cd24d198cfda2e8a268faa7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58814c7630eccb63cd24d198cfda2e8a268faa7e/comments", "author": null, "committer": null, "parents": [{"sha": "02d3ba0e000ad83dcb76ccccd1ea9882672d71b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d3ba0e000ad83dcb76ccccd1ea9882672d71b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02d3ba0e000ad83dcb76ccccd1ea9882672d71b1"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "ae549e7ed0d4f89ae5224bc6d3a774e89113be4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58814c7630eccb63cd24d198cfda2e8a268faa7e", "patch": "@@ -1,3 +1,10 @@\n+2017-07-27  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/81534\n+\t* config/s390/s390.md (\"*atomic_compare_and_swap<mode>_1\")\n+\t(\"*atomic_compare_and_swapdi_2\", \"*atomic_compare_and_swapsi_3\"):\n+\tChange s_operand to memory_operand.\n+\n 2017-07-27  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_emit_le_vsx_permute): Declare."}, {"sha": "d1ac0b8395da3bd08a8bb8cb471fee62e579d6d0", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=58814c7630eccb63cd24d198cfda2e8a268faa7e", "patch": "@@ -10266,7 +10266,7 @@\n ; cdsg, csg\n (define_insn \"*atomic_compare_and_swap<mode>_1\"\n   [(set (match_operand:TDI 0 \"register_operand\" \"=r\")\n-\t(match_operand:TDI 1 \"s_operand\" \"+S\"))\n+\t(match_operand:TDI 1 \"memory_operand\" \"+S\"))\n    (set (match_dup 1)\n \t(unspec_volatile:TDI\n \t  [(match_dup 1)\n@@ -10284,7 +10284,7 @@\n ; cds, cdsy\n (define_insn \"*atomic_compare_and_swapdi_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(match_operand:DI 1 \"s_operand\" \"+Q,S\"))\n+\t(match_operand:DI 1 \"memory_operand\" \"+Q,S\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_dup 1)\n@@ -10305,7 +10305,7 @@\n ; cs, csy\n (define_insn \"*atomic_compare_and_swapsi_3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operand:SI 1 \"s_operand\" \"+Q,S\"))\n+\t(match_operand:SI 1 \"memory_operand\" \"+Q,S\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI\n \t  [(match_dup 1)"}, {"sha": "cc300dc32e8901499876767b979685b729bc8bc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58814c7630eccb63cd24d198cfda2e8a268faa7e", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/81534\n+\t* gcc.target/s390/pr81534.c: New test.\n+\n 2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81555"}, {"sha": "0e1bd99b9cbaea59d5b7e7dd899cd17583da5ce0", "filename": "gcc/testsuite/gcc.target/s390/pr81534.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr81534.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58814c7630eccb63cd24d198cfda2e8a268faa7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr81534.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr81534.c?ref=58814c7630eccb63cd24d198cfda2e8a268faa7e", "patch": "@@ -0,0 +1,17 @@\n+/* PR81534 This testcase used to fail because the HI/QI\n+   \"atomic_fetch_<atomic><mode>\" expander accepted symbolic references\n+   and emitted CAS patterns whose insn definition rejected them.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=zEC12\" } */\n+\n+struct {\n+  short b;\n+  long c;\n+} a = {};\n+\n+void\n+d ()\n+{\n+  __atomic_fetch_add(&a.b, 0, 5);\n+}"}]}