{"sha": "192997cf186527359a267c1002fef67218269e2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyOTk3Y2YxODY1MjczNTlhMjY3YzEwMDJmZWY2NzIxODI2OWUyZQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-02-21T16:22:21Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-02-21T16:22:21Z"}, "message": "stormy16.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\n\t* config/stormy16/stormy16.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\t* config/stormy16/stormy16-protos.h\n\t(xstormy16_mode_dependent_address_p): Remove.\n\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n\tMake static. Change return type to bool. Change argument type to\n\tconst_rtx. Remove dead code.\n\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\nFrom-SVN: r170367", "tree": {"sha": "66a53ffeb55210da014056390eb6a3d94607f16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a53ffeb55210da014056390eb6a3d94607f16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/192997cf186527359a267c1002fef67218269e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192997cf186527359a267c1002fef67218269e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192997cf186527359a267c1002fef67218269e2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192997cf186527359a267c1002fef67218269e2e/comments", "author": null, "committer": null, "parents": [{"sha": "09eeac26667fdf5fd404d24b4b345273fcd4037d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09eeac26667fdf5fd404d24b4b345273fcd4037d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09eeac26667fdf5fd404d24b4b345273fcd4037d"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "47bca58aad14d59fa584e231a5664f836fa45363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192997cf186527359a267c1002fef67218269e2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192997cf186527359a267c1002fef67218269e2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=192997cf186527359a267c1002fef67218269e2e", "patch": "@@ -1,3 +1,13 @@\n+2011-02-21  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/stormy16/stormy16.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n+\t* config/stormy16/stormy16-protos.h\n+\t(xstormy16_mode_dependent_address_p): Remove.\n+\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n+\tMake static. Change return type to bool. Change argument type to\n+\tconst_rtx. Remove dead code.\n+\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\n 2011-02-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/47820"}, {"sha": "5b4957b99c54c31dd9e2d3ca3f3733a0d4964eae", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=192997cf186527359a267c1002fef67218269e2e", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in xstormy16.c\n-   Copyright (C) 2000, 2001, 2003, 2004, 2007, 2008, 2010\n+   Copyright (C) 2000, 2001, 2003, 2004, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -44,7 +44,6 @@ extern rtx xstormy16_function_value (const_tree, const_tree);\n extern void xstormy16_emit_cbranch (enum rtx_code, rtx, rtx, rtx);\n extern char *xstormy16_output_cbranch_hi (rtx, const char *, int, rtx);\n extern char *xstormy16_output_cbranch_si (rtx, const char *, int, rtx);\n-extern int xstormy16_mode_dependent_address_p (rtx);\n \n extern void xstormy16_print_operand (FILE *, rtx, int);\n extern void xstormy16_print_operand_address (FILE *, rtx);"}, {"sha": "120c5ec95f835a117618ff6cf4321ae28159bb04", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=192997cf186527359a267c1002fef67218269e2e", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 target functions.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n    This file is part of GCC.\n@@ -647,40 +647,27 @@ xstormy16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return false;\n }\n \n-/* Return nonzero if memory address X (an RTX) can have different\n-   meanings depending on the machine mode of the memory reference it\n-   is used for or if the address is valid for some modes but not\n-   others.\n-\n-   Autoincrement and autodecrement addresses typically have mode-dependent\n-   effects because the amount of the increment or decrement is the size of the\n-   operand being addressed.  Some machines have other mode-dependent addresses.\n-   Many RISC machines have no mode-dependent addresses.\n-\n-   You may assume that ADDR is a valid address for the machine.\n+/* Worker function for TARGET_MODE_DEPENDENT_ADDRESS_P.\n \n    On this chip, this is true if the address is valid with an offset\n    of 0 but not of 6, because in that case it cannot be used as an\n    address for DImode or DFmode, or if the address is a post-increment\n    or pre-decrement address.  */\n \n-int\n-xstormy16_mode_dependent_address_p (rtx x)\n+static bool\n+xstormy16_mode_dependent_address_p (const_rtx x)\n {\n   if (LEGITIMATE_ADDRESS_CONST_INT_P (x, 0)\n       && ! LEGITIMATE_ADDRESS_CONST_INT_P (x, 6))\n-    return 1;\n+    return true;\n \n   if (GET_CODE (x) == PLUS\n       && LEGITIMATE_ADDRESS_INTEGER_P (XEXP (x, 1), 0)\n       && ! LEGITIMATE_ADDRESS_INTEGER_P (XEXP (x, 1), 6))\n-    return 1;\n-\n-  if (GET_CODE (x) == PLUS)\n-    x = XEXP (x, 0);\n+    return true;\n \n   /* Auto-increment addresses are now treated generically in recog.c.  */\n-  return 0;\n+  return false;\n }\n \n int\n@@ -2619,6 +2606,8 @@ static const struct default_options xstorym16_option_optimization_table[] =\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\txstormy16_legitimate_address_p\n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P xstormy16_mode_dependent_address_p\n \n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE xstormy16_can_eliminate"}, {"sha": "0a2bc7690f5d720e6d353a6ed42304969e191bfa", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192997cf186527359a267c1002fef67218269e2e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=192997cf186527359a267c1002fef67218269e2e", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 cpu description.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007,\n-   2008, 2009, 2010  Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n    This file is part of GCC.\n@@ -371,14 +371,6 @@ enum reg_class\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* On this chip, this is true if the address is valid with an offset\n-   of 0 but not of 6, because in that case it cannot be used as an\n-   address for DImode or DFmode, or if the address is a post-increment\n-   or pre-decrement address.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n-  if (xstormy16_mode_dependent_address_p (ADDR))\t\t\t\\\n-    goto LABEL\n-\n #define LEGITIMATE_CONSTANT_P(X) 1\n \n \f"}]}