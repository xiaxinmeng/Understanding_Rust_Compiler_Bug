{"sha": "1529b8d9bece1721f2f12277534b4bf287ce1982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyOWI4ZDliZWNlMTcyMWYyZjEyMjc3NTM0YjRiZjI4N2NlMTk4Mg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-14T19:33:57Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-14T19:33:57Z"}, "message": "re PR fortran/30723 (Freeing memory doesn't need to call a library function)\n\n       PR fortran/30723\n\n\t* trans.h (gfor_fndecl_internal_malloc, gfor_fndecl_internal_malloc64,\n\tgfor_fndecl_internal_free): Remove prototypes.\n\t(gfor_fndecl_os_error, gfc_call_free, gfc_call_malloc): Add prototypes.\n\t* trans.c (gfc_call_malloc, gfc_call_free): New functions.\n\t* f95-lang.c (gfc_init_builtin_functions): Add __builtin_free\n\tand __builtin_malloc builtins.\n\t* trans-decl.c (gfor_fndecl_internal_malloc,\n\tgfor_fndecl_internal_malloc64, gfor_fndecl_internal_free): Remove.\n\t(gfor_fndecl_os_error): Add.\n\t(gfc_build_builtin_function_decls): Don't create internal_malloc,\n\tinternal_malloc64 and internal_free library function declaration.\n\tCreate os_error library call function declaration.\n\t* trans-array.c (gfc_trans_allocate_array_storage,\n\tgfc_trans_auto_array_allocation, gfc_trans_dummy_array_bias,\n\tgfc_conv_array_parameter, gfc_duplicate_allocatable): Use\n\tgfc_call_malloc and gfc_call_free instead of building calls to\n\tinternal_malloc and internal_free.\n\t* trans-expr.c (gfc_conv_string_tmp): Likewise.\n\t* trans-stmt.c (gfc_do_allocate, gfc_trans_assign_need_temp,\n\tgfc_trans_pointer_assign_need_temp, gfc_trans_forall_1,\n\tgfc_trans_where_2: Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime,\n\tgfc_conv_intrinsic_fdate, gfc_conv_intrinsic_ttynam,\n\tgfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_trim): Likewise.\n\n\t* runtime/memory.c (internal_malloc, internal_malloc64,\n\tinternal_free): Remove.\n\t* runtime/error.c (os_error): Export function.\n\t* intrinsics/move_alloc.c: Include stdlib.h.\n\t(move_alloc): Call free instead of internal_free.\n\t(move_alloc_c): Wrap long lines.\n\t* libgfortran.h (os_error): Export prototype.\n\t(internal_free): Remove prototype.\n\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_internal_free,\n\t_gfortran_internal_malloc and _gfortran_internal_malloc64.\n\tAdd _gfortran_os_error.\n\nFrom-SVN: r124721", "tree": {"sha": "4a299e8ff3b7b281e17a2e8950d235983d8b4c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a299e8ff3b7b281e17a2e8950d235983d8b4c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1529b8d9bece1721f2f12277534b4bf287ce1982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1529b8d9bece1721f2f12277534b4bf287ce1982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1529b8d9bece1721f2f12277534b4bf287ce1982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1529b8d9bece1721f2f12277534b4bf287ce1982/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af5627c40801eb1715b9ac1eadff50d1de46288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5627c40801eb1715b9ac1eadff50d1de46288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af5627c40801eb1715b9ac1eadff50d1de46288"}], "stats": {"total": 309, "additions": 184, "deletions": 125}, "files": [{"sha": "625e304437b3ec6f588aba8095476d4b1319f691", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -1,3 +1,31 @@\n+2007-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30723\n+\t* trans.h (gfor_fndecl_internal_malloc, gfor_fndecl_internal_malloc64,\n+\tgfor_fndecl_internal_free): Remove prototypes.\n+\t(gfor_fndecl_os_error, gfc_call_free, gfc_call_malloc): Add prototypes.\n+\t* trans.c (gfc_call_malloc, gfc_call_free): New functions.\n+\t* f95-lang.c (gfc_init_builtin_functions): Add __builtin_free\n+\tand __builtin_malloc builtins.\n+\t* trans-decl.c (gfor_fndecl_internal_malloc,\n+\tgfor_fndecl_internal_malloc64, gfor_fndecl_internal_free): Remove.\n+\t(gfor_fndecl_os_error): Add.\n+\t(gfc_build_builtin_function_decls): Don't create internal_malloc,\n+\tinternal_malloc64 and internal_free library function declaration.\n+\tCreate os_error library call function declaration.\n+\t* trans-array.c (gfc_trans_allocate_array_storage,\n+\tgfc_trans_auto_array_allocation, gfc_trans_dummy_array_bias,\n+\tgfc_conv_array_parameter, gfc_duplicate_allocatable): Use\n+\tgfc_call_malloc and gfc_call_free instead of building calls to\n+\tinternal_malloc and internal_free.\n+\t* trans-expr.c (gfc_conv_string_tmp): Likewise.\n+\t* trans-stmt.c (gfc_do_allocate, gfc_trans_assign_need_temp,\n+\tgfc_trans_pointer_assign_need_temp, gfc_trans_forall_1,\n+\tgfc_trans_where_2: Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime,\n+\tgfc_conv_intrinsic_fdate, gfc_conv_intrinsic_ttynam,\n+\tgfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_trim): Likewise.\n+\n 2007-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31725"}, {"sha": "06cea98d73a2ffb8e21ad83c3856429625d225f2", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -988,6 +988,17 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n \t\t      \"__builtin_expect\", true);\n \n+  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n+  ftype = build_function_type (void_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_free\", ftype, BUILT_IN_FREE,\n+\t\t      \"free\", false);\n+\n+  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n+  ftype = build_function_type (pvoid_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_malloc\", ftype, BUILT_IN_MALLOC,\n+\t\t      \"malloc\", false);\n+  DECL_IS_MALLOC (built_in_decls[BUILT_IN_MALLOC]) = 1;\n+\n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n   builtin_types[(int) ENUM] = VALUE;\n #define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\"}, {"sha": "61e35543fe315971ca7c362b7cf948f82dd51f86", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -533,13 +533,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n       else\n \t{\n \t  /* Allocate memory to hold the data.  */\n-\t  if (gfc_index_integer_kind == 4)\n-\t    tmp = gfor_fndecl_internal_malloc;\n-\t  else if (gfc_index_integer_kind == 8)\n-\t    tmp = gfor_fndecl_internal_malloc64;\n-\t  else\n-\t    gcc_unreachable ();\n-\t  tmp = build_call_expr (tmp, 1, size);\n+\t  tmp = gfc_call_malloc (pre, NULL, size);\n \t  tmp = gfc_evaluate_now (tmp, pre);\n \t  gfc_conv_descriptor_data_set (pre, desc, tmp);\n \t}\n@@ -555,8 +549,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n     {\n       /* Free the temporary.  */\n       tmp = gfc_conv_descriptor_data_get (desc);\n-      tmp = fold_convert (pvoid_type_node, tmp);\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmp);\n+      tmp = gfc_call_free (fold_convert (pvoid_type_node, tmp));\n       gfc_add_expr_to_block (post, tmp);\n     }\n }\n@@ -3793,7 +3786,6 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n   stmtblock_t block;\n   tree type;\n   tree tmp;\n-  tree fndecl;\n   tree size;\n   tree offset;\n   bool onstack;\n@@ -3857,14 +3849,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n   size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, tmp);\n \n   /* Allocate memory to hold the data.  */\n-  if (gfc_index_integer_kind == 4)\n-    fndecl = gfor_fndecl_internal_malloc;\n-  else if (gfc_index_integer_kind == 8)\n-    fndecl = gfor_fndecl_internal_malloc64;\n-  else\n-    gcc_unreachable ();\n-  tmp = build_call_expr (fndecl, 1, size);\n-  tmp = fold_convert (TREE_TYPE (decl), tmp);\n+  tmp = gfc_call_malloc (&block, TREE_TYPE (decl), size);\n   gfc_add_modify_expr (&block, decl, tmp);\n \n   /* Set offset of the array.  */\n@@ -3878,8 +3863,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n   gfc_add_expr_to_block (&block, fnbody);\n \n   /* Free the temporary.  */\n-  tmp = convert (pvoid_type_node, decl);\n-  tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmp);\n+  tmp = gfc_call_free (convert (pvoid_type_node, decl));\n   gfc_add_expr_to_block (&block, tmp);\n \n   return gfc_finish_block (&block);\n@@ -4235,7 +4219,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n \t}\n \n       /* Free the temporary.  */\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmpdesc);\n+      tmp = gfc_call_free (tmpdesc);\n       gfc_add_expr_to_block (&cleanup, tmp);\n \n       stmt = gfc_finish_block (&cleanup);\n@@ -4841,8 +4825,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Free the temporary.  */\n-      tmp = convert (pvoid_type_node, ptr);\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmp);\n+      tmp = gfc_call_free (convert (pvoid_type_node, ptr));\n       gfc_add_expr_to_block (&block, tmp);\n \n       stmt = gfc_finish_block (&block);\n@@ -4942,13 +4925,8 @@ gfc_duplicate_allocatable(tree dest, tree src, tree type, int rank)\n \t\t      TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n \n   /* Allocate memory to the destination.  */\n-  if (gfc_index_integer_kind == 4)\n-    tmp = build_call_expr (gfor_fndecl_internal_malloc, 1, size);\n-  else if (gfc_index_integer_kind == 8)\n-    tmp = build_call_expr (gfor_fndecl_internal_malloc64, 1, size);\n-  else\n-    gcc_unreachable ();\n-  tmp = fold_convert (TREE_TYPE (gfc_conv_descriptor_data_get (src)), tmp);\n+  tmp = gfc_call_malloc (&block, TREE_TYPE (gfc_conv_descriptor_data_get (src)),\n+\t\t\t size);\n   gfc_conv_descriptor_data_set (&block, dest, tmp);\n \n   /* We know the temporary and the value will be the same length,"}, {"sha": "8c564cbca3548ba6433a347ad138f2a3dd784930", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -74,11 +74,8 @@ tree gfc_static_ctors;\n \n /* Function declarations for builtin library functions.  */\n \n-tree gfor_fndecl_internal_malloc;\n-tree gfor_fndecl_internal_malloc64;\n tree gfor_fndecl_internal_realloc;\n tree gfor_fndecl_internal_realloc64;\n-tree gfor_fndecl_internal_free;\n tree gfor_fndecl_allocate;\n tree gfor_fndecl_allocate64;\n tree gfor_fndecl_allocate_array;\n@@ -91,6 +88,7 @@ tree gfor_fndecl_stop_string;\n tree gfor_fndecl_select_string;\n tree gfor_fndecl_runtime_error;\n tree gfor_fndecl_runtime_error_at;\n+tree gfor_fndecl_os_error;\n tree gfor_fndecl_generate_error;\n tree gfor_fndecl_set_fpe;\n tree gfor_fndecl_set_std;\n@@ -2247,18 +2245,6 @@ gfc_build_builtin_function_decls (void)\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n   tree gfc_pint4_type_node = build_pointer_type (gfc_int4_type_node);\n \n-  /* Treat these two internal malloc wrappers as malloc.  */\n-  gfor_fndecl_internal_malloc =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"internal_malloc\")),\n-\t\t\t\t     pvoid_type_node, 1, gfc_int4_type_node);\n-  DECL_IS_MALLOC (gfor_fndecl_internal_malloc) = 1;\n-\n-  gfor_fndecl_internal_malloc64 =\n-    gfc_build_library_function_decl (get_identifier\n-\t\t\t\t     (PREFIX(\"internal_malloc64\")),\n-\t\t\t\t     pvoid_type_node, 1, gfc_int8_type_node);\n-  DECL_IS_MALLOC (gfor_fndecl_internal_malloc64) = 1;\n-\n   gfor_fndecl_internal_realloc =\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t     (PREFIX(\"internal_realloc\")),\n@@ -2271,10 +2257,6 @@ gfc_build_builtin_function_decls (void)\n \t\t\t\t     pvoid_type_node, 2, pvoid_type_node,\n \t\t\t\t     gfc_int8_type_node);\n \n-  gfor_fndecl_internal_free =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"internal_free\")),\n-\t\t\t\t     void_type_node, 1, pvoid_type_node);\n-\n   gfor_fndecl_allocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate\")),\n \t\t\t\t     pvoid_type_node, 2,\n@@ -2349,6 +2331,12 @@ gfc_build_builtin_function_decls (void)\n \t\t\t\t     void_type_node, 3, pvoid_type_node,\n                                      gfc_c_int_type_node, pchar_type_node);\n \n+  gfor_fndecl_os_error =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"os_error\")),\n+\t\t\t\t     void_type_node, 1, pchar_type_node);\n+  /* The runtime_error function does not return.  */\n+  TREE_THIS_VOLATILE (gfor_fndecl_os_error) = 1;\n+\n   gfor_fndecl_set_fpe =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_fpe\")),\n \t\t\t\t    void_type_node, 1, gfc_c_int_type_node);"}, {"sha": "d5f584c2ab9d97a94d65bbd33f6c8d98f850ecbc", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -935,13 +935,11 @@ gfc_conv_string_tmp (gfc_se * se, tree type, tree len)\n     {\n       /* Allocate a temporary to hold the result.  */\n       var = gfc_create_var (type, \"pstr\");\n-      tmp = build_call_expr (gfor_fndecl_internal_malloc, 1, len);\n-      tmp = convert (type, tmp);\n+      tmp = gfc_call_malloc (&se->pre, type, len);\n       gfc_add_modify_expr (&se->pre, var, tmp);\n \n       /* Free the temporary afterwards.  */\n-      tmp = convert (pvoid_type_node, var);\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmp);\n+      tmp = gfc_call_free (convert (pvoid_type_node, var));\n       gfc_add_expr_to_block (&se->post, tmp);\n     }\n "}, {"sha": "75b5a4cffc5a9e9fc1a8031a65160240303ef4fb", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -1275,7 +1275,7 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n-  tmp = build_call_expr (gfor_fndecl_internal_free, 1, var);\n+  tmp = gfc_call_free (var);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -1310,7 +1310,7 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n-  tmp = build_call_expr (gfor_fndecl_internal_free, 1, var);\n+  tmp = gfc_call_free (var);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -1347,7 +1347,7 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n-  tmp = build_call_expr (gfor_fndecl_internal_free, 1, var);\n+  tmp = gfc_call_free (var);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n \n@@ -2866,8 +2866,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \n \t  /* Free the temporary.  */\n \t  gfc_start_block (&block);\n-\t  tmp = convert (pvoid_type_node, source);\n-\t  tmp = build_call_expr (gfor_fndecl_internal_free, 1, tmp);\n+\t  tmp = gfc_call_free (convert (pvoid_type_node, source));\n \t  gfc_add_expr_to_block (&block, tmp);\n \t  stmt = gfc_finish_block (&block);\n \n@@ -3364,7 +3363,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n \t\t build_int_cst (TREE_TYPE (len), 0));\n-  tmp = build_call_expr (gfor_fndecl_internal_free, 1, var);\n+  tmp = gfc_call_free (var);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&se->post, tmp);\n "}, {"sha": "d0af66e60b46b4081621f41c2298fa50885dd437", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -1712,14 +1712,7 @@ gfc_do_allocate (tree bytesize, tree size, tree * pdata, stmtblock_t * pblock,\n       tmpvar = gfc_create_var (build_pointer_type (type), \"temp\");\n       *pdata = convert (pvoid_type_node, tmpvar);\n \n-      if (gfc_index_integer_kind == 4)\n-\ttmp = gfor_fndecl_internal_malloc;\n-      else if (gfc_index_integer_kind == 8)\n-\ttmp = gfor_fndecl_internal_malloc64;\n-      else\n-\tgcc_unreachable ();\n-      tmp = build_call_expr (tmp, 1, bytesize);\n-      tmp = convert (TREE_TYPE (tmpvar), tmp);\n+      tmp = gfc_call_malloc (pblock, TREE_TYPE (tmpvar), bytesize);\n       gfc_add_modify_expr (pblock, tmpvar, tmp);\n     }\n   return tmpvar;\n@@ -2230,7 +2223,7 @@ gfc_trans_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2,\n   if (ptemp1)\n     {\n       /* Free the temporary.  */\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, ptemp1);\n+      tmp = gfc_call_free (ptemp1);\n       gfc_add_expr_to_block (block, tmp);\n     }\n }\n@@ -2388,7 +2381,7 @@ gfc_trans_pointer_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2,\n   /* Free the temporary.  */\n   if (ptemp1)\n     {\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, ptemp1);\n+      tmp = gfc_call_free (ptemp1);\n       gfc_add_expr_to_block (block, tmp);\n     }\n }\n@@ -2723,7 +2716,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   if (pmask)\n     {\n       /* Free the temporary for the mask.  */\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, pmask);\n+      tmp = gfc_call_free (pmask);\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   if (maskindex)\n@@ -3320,14 +3313,14 @@ gfc_trans_where_2 (gfc_code * code, tree mask, bool invert,\n   /* If we allocated a pending mask array, deallocate it now.  */\n   if (ppmask)\n     {\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, ppmask);\n+      tmp = gfc_call_free (ppmask);\n       gfc_add_expr_to_block (block, tmp);\n     }\n \n   /* If we allocated a current mask array, deallocate it now.  */\n   if (pcmask)\n     {\n-      tmp = build_call_expr (gfor_fndecl_internal_free, 1, pcmask);\n+      tmp = gfc_call_free (pcmask);\n       gfc_add_expr_to_block (block, tmp);\n     }\n }"}, {"sha": "97336b68f6133d027d57db46267dc7b5ee317b35", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"toplev.h\"\n #include \"defaults.h\"\n #include \"real.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"trans.h\"\n #include \"trans-stmt.h\"\n@@ -372,6 +373,86 @@ gfc_trans_runtime_check (tree cond, const char * msgid, stmtblock_t * pblock,\n }\n \n \n+/* Call malloc to allocate size bytes of memory, with special conditions:\n+      + if size < 0, generate a runtime error,\n+      + if size == 0, return a NULL pointer,\n+      + if malloc returns NULL, issue a runtime error.  */\n+tree\n+gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n+{\n+  tree tmp, msg, negative, zero, malloc_result, null_result, res;\n+  stmtblock_t block2;\n+\n+  size = gfc_evaluate_now (size, block);\n+\n+  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n+    size = fold_convert (size_type_node, size);\n+\n+  /* Create a variable to hold the result.  */\n+  res = gfc_create_var (pvoid_type_node, NULL);\n+\n+  /* size < 0 ?  */\n+  negative = fold_build2 (LT_EXPR, boolean_type_node, size,\n+\t\t\t  build_int_cst (size_type_node, 0));\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+      (\"Attempt to allocate a negative amount of memory.\"));\n+  tmp = fold_build3 (COND_EXPR, void_type_node, negative,\n+\t\t     build_call_expr (gfor_fndecl_runtime_error, 1, msg),\n+\t\t     build_empty_stmt ());\n+  gfc_add_expr_to_block (block, tmp);\n+\n+  /* Call malloc and check the result.  */\n+  gfc_start_block (&block2);\n+  gfc_add_modify_expr (&block2, res,\n+\t\t       build_call_expr (built_in_decls[BUILT_IN_MALLOC], 1,\n+\t\t       size));\n+  null_result = fold_build2 (EQ_EXPR, boolean_type_node, res,\n+\t\t\t     build_int_cst (pvoid_type_node, 0));\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+      (\"Memory allocation failed\"));\n+  tmp = fold_build3 (COND_EXPR, void_type_node, null_result,\n+\t\t     build_call_expr (gfor_fndecl_os_error, 1, msg),\n+\t\t     build_empty_stmt ());\n+  gfc_add_expr_to_block (&block2, tmp);\n+  malloc_result = gfc_finish_block (&block2);\n+\n+  /* size == 0  */\n+  zero = fold_build2 (EQ_EXPR, boolean_type_node, size,\n+\t\t      build_int_cst (size_type_node, 0));\n+  tmp = fold_build2 (MODIFY_EXPR, pvoid_type_node, res,\n+\t\t     build_int_cst (pvoid_type_node, 0));\n+  tmp = fold_build3 (COND_EXPR, void_type_node, zero, tmp, malloc_result);\n+  gfc_add_expr_to_block (block, tmp);\n+\n+  if (type != NULL)\n+    res = fold_convert (type, res);\n+  return res;\n+}\n+\n+\n+/* Free a given variable, if it's not NULL.  */\n+tree\n+gfc_call_free (tree var)\n+{\n+  stmtblock_t block;\n+  tree tmp, cond, call;\n+\n+  if (TREE_TYPE (var) != TREE_TYPE (pvoid_type_node))\n+    var = fold_convert (pvoid_type_node, var);\n+\n+  gfc_start_block (&block);\n+  var = gfc_evaluate_now (var, &block);\n+  cond = fold_build2 (NE_EXPR, boolean_type_node, var,\n+\t\t      build_int_cst (pvoid_type_node, 0));\n+  call = build_call_expr (built_in_decls[BUILT_IN_FREE], 1, var);\n+  tmp = fold_build3 (COND_EXPR, void_type_node, cond, call,\n+\t\t     build_empty_stmt ());\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Add a statement to a block.  */\n \n void"}, {"sha": "da4b0c103527372ed38042a24ff05d7e22f9b575", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -439,6 +439,12 @@ bool get_array_ctor_strlen (gfc_constructor *, tree *);\n /* Generate a runtime error check.  */\n void gfc_trans_runtime_check (tree, const char *, stmtblock_t *, locus *);\n \n+/* Generate a call to free() after checking that its arg is non-NULL.  */\n+tree gfc_call_free (tree);\n+\n+/* Allocate memory after performing a few checks.  */\n+tree gfc_call_malloc (stmtblock_t *, tree, tree);\n+\n /* Generate code for an assignment, includes scalarization.  */\n tree gfc_trans_assignment (gfc_expr *, gfc_expr *, bool);\n \n@@ -472,11 +478,8 @@ struct gimplify_omp_ctx;\n void gfc_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *, tree);\n \n /* Runtime library function decls.  */\n-extern GTY(()) tree gfor_fndecl_internal_malloc;\n-extern GTY(()) tree gfor_fndecl_internal_malloc64;\n extern GTY(()) tree gfor_fndecl_internal_realloc;\n extern GTY(()) tree gfor_fndecl_internal_realloc64;\n-extern GTY(()) tree gfor_fndecl_internal_free;\n extern GTY(()) tree gfor_fndecl_allocate;\n extern GTY(()) tree gfor_fndecl_allocate64;\n extern GTY(()) tree gfor_fndecl_allocate_array;\n@@ -489,6 +492,7 @@ extern GTY(()) tree gfor_fndecl_stop_string;\n extern GTY(()) tree gfor_fndecl_select_string;\n extern GTY(()) tree gfor_fndecl_runtime_error;\n extern GTY(()) tree gfor_fndecl_runtime_error_at;\n+extern GTY(()) tree gfor_fndecl_os_error;\n extern GTY(()) tree gfor_fndecl_generate_error;\n extern GTY(()) tree gfor_fndecl_set_fpe;\n extern GTY(()) tree gfor_fndecl_set_std;"}, {"sha": "a90c7160cd16aed197fbb5e12f86fa55c6ba37f6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -1,3 +1,18 @@\n+2007-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30723\n+\t* runtime/memory.c (internal_malloc, internal_malloc64,\n+\tinternal_free): Remove.\n+\t* runtime/error.c (os_error): Export function.\n+\t* intrinsics/move_alloc.c: Include stdlib.h.\n+\t(move_alloc): Call free instead of internal_free.\n+\t(move_alloc_c): Wrap long lines.\n+\t* libgfortran.h (os_error): Export prototype.\n+\t(internal_free): Remove prototype.\n+\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_internal_free,\n+\t_gfortran_internal_malloc and _gfortran_internal_malloc64.\n+\tAdd _gfortran_os_error.\n+\n 2007-05-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/31880"}, {"sha": "f67192db1d8e133531c70df6d9c627282ab389dc", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -166,9 +166,6 @@ GFORTRAN_1.0 {\n     _gfortran_idate_i8;\n     _gfortran_ierrno_i4;\n     _gfortran_ierrno_i8;\n-    _gfortran_internal_free;\n-    _gfortran_internal_malloc;\n-    _gfortran_internal_malloc64;\n     _gfortran_internal_pack;\n     _gfortran_internal_realloc;\n     _gfortran_internal_realloc64;\n@@ -502,6 +499,7 @@ GFORTRAN_1.0 {\n     _gfortran_nearest_r16;\n     _gfortran_nearest_r4;\n     _gfortran_nearest_r8;\n+    _gfortran_os_error;\n     _gfortran_pack;\n     _gfortran_pack_char;\n     _gfortran_pack_s;"}, {"sha": "24baf3971cddfa691099f0014ca29691bf8ece62", "filename": "libgfortran/intrinsics/move_alloc.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fintrinsics%2Fmove_alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fintrinsics%2Fmove_alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fmove_alloc.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -28,8 +28,13 @@ License along with libgfortran; see the file COPYING.  If not,\n write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n+#include \"config.h\"\n #include \"libgfortran.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n extern void move_alloc (gfc_array_char *, gfc_array_char *);\n export_proto(move_alloc);\n \n@@ -38,7 +43,8 @@ move_alloc (gfc_array_char * from, gfc_array_char * to)\n {\n   int i;\n \n-  internal_free (to->data);\n+  if (to->data)\n+    free (to->data);\n \n   for (i = 0; i < GFC_DESCRIPTOR_RANK (from); i++)\n     {\n@@ -60,8 +66,10 @@ extern void move_alloc_c (gfc_array_char *, GFC_INTEGER_4,\n export_proto(move_alloc_c);\n \n void\n-move_alloc_c (gfc_array_char * from, GFC_INTEGER_4 from_length __attribute__((unused)),\n-\t      gfc_array_char * to, GFC_INTEGER_4 to_length __attribute__((unused)))\n+move_alloc_c (gfc_array_char * from,\n+\t      GFC_INTEGER_4 from_length __attribute__((unused)),\n+\t      gfc_array_char * to,\n+\t      GFC_INTEGER_4 to_length __attribute__((unused)))\n {\n   move_alloc (from, to);\n }"}, {"sha": "fd510ee5fa15092f442a51b7dae5210885fd3bc6", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -583,7 +583,7 @@ extern const char *xtoa (GFC_UINTEGER_LARGEST, char *, size_t);\n internal_proto(xtoa);\n \n extern void os_error (const char *) __attribute__ ((noreturn));\n-internal_proto(os_error);\n+iexport_proto(os_error);\n \n extern void show_locus (st_parameter_common *);\n internal_proto(show_locus);\n@@ -634,9 +634,6 @@ internal_proto(free_mem);\n extern void *internal_malloc_size (size_t);\n internal_proto(internal_malloc_size);\n \n-extern void internal_free (void *);\n-iexport_proto(internal_free);\n-\n /* environ.c */\n \n extern int check_buffered (int);"}, {"sha": "bd3c306bc2f4e3b8e00d1729953d59e7fd55e1bf", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -285,6 +285,7 @@ os_error (const char *message)\n   st_printf (\"Operating system error: %s\\n%s\\n\", get_oserror (), message);\n   sys_exit (1);\n }\n+iexport(os_error);\n \n \n /* void runtime_error()-- These are errors associated with an"}, {"sha": "fe76675c9ad0f9f038e5d402135eddb13ab5b32e", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1529b8d9bece1721f2f12277534b4bf287ce1982/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=1529b8d9bece1721f2f12277534b4bf287ce1982", "patch": "@@ -77,46 +77,6 @@ internal_malloc_size (size_t size)\n   return get_mem (size);\n }\n \n-extern void *internal_malloc (GFC_INTEGER_4);\n-export_proto(internal_malloc);\n-\n-void *\n-internal_malloc (GFC_INTEGER_4 size)\n-{\n-#ifdef GFC_CHECK_MEMORY\n-  /* Under normal circumstances, this is _never_ going to happen!  */\n-  if (size < 0)\n-    runtime_error (\"Attempt to allocate a negative amount of memory.\");\n-\n-#endif\n-  return internal_malloc_size ((size_t) size);\n-}\n-\n-extern void *internal_malloc64 (GFC_INTEGER_8);\n-export_proto(internal_malloc64);\n-\n-void *\n-internal_malloc64 (GFC_INTEGER_8 size)\n-{\n-#ifdef GFC_CHECK_MEMORY\n-  /* Under normal circumstances, this is _never_ going to happen!  */\n-  if (size < 0)\n-    runtime_error (\"Attempt to allocate a negative amount of memory.\");\n-#endif\n-  return internal_malloc_size ((size_t) size);\n-}\n-\n-\n-/* Free internally allocated memory.  Pointer is NULLified.  Also used to\n-   free user allocated memory.  */\n-\n-void\n-internal_free (void *mem)\n-{\n-  if (mem != NULL)\n-    free (mem);\n-}\n-iexport(internal_free);\n \n /* Reallocate internal memory MEM so it has SIZE bytes of data.\n    Allocate a new block if MEM is zero, and free the block if"}]}