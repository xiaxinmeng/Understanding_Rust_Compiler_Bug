{"sha": "f3d0f304ff5dc9bd1836b1a1329038558ea572be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkMGYzMDRmZjVkYzliZDE4MzZiMWExMzI5MDM4NTU4ZWE1NzJiZQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-04-14T21:07:59Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-04-14T21:07:59Z"}, "message": "vms_data.ads: Fix typo in constant.\n\ngcc/ada/\n\n\t* vms_data.ads: Fix typo in constant.\n\t* gen-soccon.c: Fix typo in error string.\n\t* gnat_rm.texi (Pragma Optimize_Alignment, Pragma Postcondition):\n\tFix typos.\n\t* a-calcon.ads, a-calend-vms.adb, a-calend.adb, a-crdlli.ads,\n\tbcheck.adb, checks.adb, einfo.ads, errout.adb, erroutc.adb,\n\terroutc.ads, exp_attr.adb, exp_ch11.adb, exp_ch2.adb,\n\texp_ch5.adb, exp_ch9.adb, exp_ch9.ads, exp_pakd.adb,\n\texp_util.adb, fmap.adb, g-soccon-linux-mips.ads,\n\tg-soccon-rtems.ads, g-timsta.adb, g-timsta.ads, lib-writ.ads,\n\tmlib-tgt-specific-linux.adb, mlib-tgt-specific-tru64.adb,\n\ts-interr-vxworks.adb, s-interr.adb, s-osinte-lynxos.ads,\n\ts-rident.ads, s-taprop-solaris.adb, s-tassta.adb, s-win32.ads,\n\tsem_aggr.adb, sem_attr.ads, sem_ch10.adb, sem_ch13.ads,\n\tsem_ch3.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_ch9.adb,\n\tsem_prag.ads, sem_res.adb, sem_util.adb, sem_util.ads,\n\tsinfo.ads: Fix typos in comments.\n\nFrom-SVN: r134291", "tree": {"sha": "3f86f334592314b53781112a469770f9d9d72b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f86f334592314b53781112a469770f9d9d72b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d0f304ff5dc9bd1836b1a1329038558ea572be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d0f304ff5dc9bd1836b1a1329038558ea572be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d0f304ff5dc9bd1836b1a1329038558ea572be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d0f304ff5dc9bd1836b1a1329038558ea572be/comments", "author": null, "committer": null, "parents": [{"sha": "682db6f9c015c7c4abf53493ac87b25b6ea95046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682db6f9c015c7c4abf53493ac87b25b6ea95046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682db6f9c015c7c4abf53493ac87b25b6ea95046"}], "stats": {"total": 162, "additions": 91, "deletions": 71}, "files": [{"sha": "abb4fadfde722b9018086480c4c08ecf8cd40202", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1,3 +1,23 @@\n+2008-04-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* vms_data.ads: Fix typo in constant.\n+\t* gen-soccon.c: Fix typo in error string.\n+\t* gnat_rm.texi (Pragma Optimize_Alignment, Pragma Postcondition):\n+\tFix typos.\n+\t* a-calcon.ads, a-calend-vms.adb, a-calend.adb, a-crdlli.ads,\n+\tbcheck.adb, checks.adb, einfo.ads, errout.adb, erroutc.adb,\n+\terroutc.ads, exp_attr.adb, exp_ch11.adb, exp_ch2.adb,\n+\texp_ch5.adb, exp_ch9.adb, exp_ch9.ads, exp_pakd.adb,\n+\texp_util.adb, fmap.adb, g-soccon-linux-mips.ads,\n+\tg-soccon-rtems.ads, g-timsta.adb, g-timsta.ads, lib-writ.ads,\n+\tmlib-tgt-specific-linux.adb, mlib-tgt-specific-tru64.adb,\n+\ts-interr-vxworks.adb, s-interr.adb, s-osinte-lynxos.ads,\n+\ts-rident.ads, s-taprop-solaris.adb, s-tassta.adb, s-win32.ads,\n+\tsem_aggr.adb, sem_attr.ads, sem_ch10.adb, sem_ch13.ads,\n+\tsem_ch3.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_ch9.adb,\n+\tsem_prag.ads, sem_res.adb, sem_util.adb, sem_util.ads,\n+\tsinfo.ads: Fix typos in comments.\n+\n 2008-04-14  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma, Linker_Section case): Extend error"}, {"sha": "c0178a092a6b7ed83eb994e6e8081197750e33f4", "filename": "gcc/ada/a-calcon.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calcon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calcon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calcon.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -68,7 +68,7 @@ package Ada.Calendar.Conversions is\n    --  The returned value is in UTC and may or may not contain leap seconds\n    --  depending on whether binder flag \"-y\" was used. Raises Time_Error if\n    --  the input values are out of the defined ranges or if tm_sec equals 60\n-   --  and the instance in time is not a leap second occurence.\n+   --  and the instance in time is not a leap second occurrence.\n \n    function To_Duration\n      (tv_sec  : Interfaces.C.long;"}, {"sha": "6cbc7288d237ab5a95a8a8e408c782e1bcdde087", "filename": "gcc/ada/a-calend-vms.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calend-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calend-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-vms.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -920,7 +920,7 @@ package body Ada.Calendar is\n          tm_year := Year - 1900;\n          tm_mon  := Month - 1;\n \n-         --  Step 3: Handle leap second occurences\n+         --  Step 3: Handle leap second occurrences\n \n          if Leap_Sec then\n             tm_sec := 60;"}, {"sha": "d543cd85939064e9b6033bf574c5f10fd1630984", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -939,7 +939,7 @@ package body Ada.Calendar is\n          tm_year := Year - 1900;\n          tm_mon  := Month - 1;\n \n-         --  Step 3: Handle leap second occurences\n+         --  Step 3: Handle leap second occurrences\n \n          if Leap_Sec then\n             tm_sec := 60;"}, {"sha": "ca78cb526b9acee2c86489e020835c272e8fe013", "filename": "gcc/ada/a-crdlli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-crdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fa-crdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crdlli.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -253,7 +253,7 @@ package Ada.Containers.Restricted_Doubly_Linked_Lists is\n       Position  : Cursor := No_Element) return Cursor;\n    --  Searches for the node whose element is equal to Item, starting from\n    --  Position and continuing to the last end of the list. If Position equals\n-   --  No_Element, the seach starts from the first node. If Position is\n+   --  No_Element, the search starts from the first node. If Position is\n    --  associated with a list object different from Container, then\n    --  Program_Error is raised. If no node is found having an element equal to\n    --  Item, then Find returns No_Element.\n@@ -264,7 +264,7 @@ package Ada.Containers.Restricted_Doubly_Linked_Lists is\n       Position  : Cursor := No_Element) return Cursor;\n    --  Searches in reverse for the node whose element is equal to Item,\n    --  starting from Position and continuing to the first end of the list. If\n-   --  Position equals No_Element, the seach starts from the last node. If\n+   --  Position equals No_Element, the search starts from the last node. If\n    --  Position is associated with a list object different from Container, then\n    --  Program_Error is raised. If no node is found having an element equal to\n    --  Item, then Reverse_Find returns No_Element."}, {"sha": "a1edd067979b4894ffd80bbedc97775a1818c995", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -703,7 +703,7 @@ package body Bcheck is\n    -----------------------------------------\n \n    --  The rule is that all units which depend on the global default setting\n-   --  of Optimize_Alignment must be compiled with the same settinng for this\n+   --  of Optimize_Alignment must be compiled with the same setting for this\n    --  default. Units which specify an explicit local value for this setting\n    --  are exempt from the consistency rule (this includes all internal units).\n "}, {"sha": "38512547e7f2aa8ffc61565b86db547a7138875f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -2769,7 +2769,7 @@ package body Checks is\n \n       --  Check that a null-excluding component, formal or object is not being\n       --  assigned a null value. Otherwise generate a warning message and\n-      --  replace Expression (N) by an N_Contraint_Error node.\n+      --  replace Expression (N) by an N_Constraint_Error node.\n \n       if K /= N_Function_Specification then\n          Expr := Expression (N);"}, {"sha": "852d9966ddf9871aced9bd74f41462210955d65a", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -457,7 +457,7 @@ package Einfo is\n --       for finalization purposes, The block entity has an implicit label\n --       declaration in the enclosing declarative part, and has otherwise\n --       no direct connection in the tree with the block statement. The\n---       link is to the identifier (which is an occurence of the entity)\n+--       link is to the identifier (which is an occurrence of the entity)\n --       and not to the block_statement itself, because the statement may\n --       be rewritten, e.g. in the process of removing dead code.\n \n@@ -559,7 +559,7 @@ package Einfo is\n --       component clause applies to the component. First bit position of\n --       given component, computed from the first bit and position values\n --       given in the component clause. A value of No_Uint means that the\n---       value is not yet known. The value can be set by the appearence of\n+--       value is not yet known. The value can be set by the appearance of\n --       an explicit component clause in a record representation clause,\n --       or it can be set by the front-end in package Layout, or it can be\n --       set by the backend. By the time backend processing is completed,\n@@ -873,7 +873,7 @@ package Einfo is\n --    Elaboration_Entity (Node13)\n --       Present in generic and non-generic package and subprogram\n --       entities. This is a boolean entity associated with the unit that\n---       is initiallly set to False, and is set True when the unit is\n+--       is initially set to False, and is set True when the unit is\n --       elaborated. This is used for two purposes. First, it is used to\n --       implement required access before elaboration checks (the flag\n --       must be true to call a subprogram at elaboration time). Second,\n@@ -3534,7 +3534,7 @@ package Einfo is\n --       Present in subprogram entities. Points to a list of Precondition\n --       and Postcondition N_Pragma nodes for preconditions and postconditions\n --       declared in the spec. The last pragma encountered is at the head of\n---       this list, so it is in reverse order of textual appearence.\n+--       this list, so it is in reverse order of textual appearance.\n \n --    Storage_Size_Variable (Node15) [implementation base type only]\n --       Present in access types and task type entities. This flag is set\n@@ -5645,7 +5645,7 @@ package Einfo is\n    --  required discriminant values. The expander creates a set of declarations\n    --  of the form:\n \n-   --      discr_nameD : constant disrc_type renames _task.discr_name;\n+   --      discr_nameD : constant discr_type renames _task.discr_name;\n \n    --  where discr_nameD is the discriminal entity referenced by the task\n    --  discriminant, and _task is the task value passed in as the parameter."}, {"sha": "8d1a2c14573ca48d767740beed33f27a832e64ab", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -191,8 +191,8 @@ package body Errout is\n    procedure VMS_Convert;\n    --  This procedure has no effect if called when the host is not OpenVMS.\n    --  If the host is indeed OpenVMS, then the error message stored in\n-   --  Msg_Buffer is scanned for appearences of switch names which need\n-   --  converting to corresponding VMS qualifer names. See Gnames/Vnames\n+   --  Msg_Buffer is scanned for appearances of switch names which need\n+   --  converting to corresponding VMS qualifier names. See Gnames/Vnames\n    --  table in Errout spec for precise definition of the conversion that\n    --  is performed by this routine in OpenVMS mode.\n "}, {"sha": "f255ac00e9e7436e935a7a8c9d185a6cb26085c4", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -504,7 +504,7 @@ package body Erroutc is\n          else\n             Start := Ptr;\n \n-            --  First scan forward looing for a hard end of line\n+            --  First scan forward looking for a hard end of line\n \n             for Scan in Ptr .. Ptr + Max - 1 loop\n                if Txt (Scan) = ASCII.LF then"}, {"sha": "ba212eeb42bbcadb0f56f95c3a8534c4549c8689", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -52,7 +52,7 @@ package Erroutc is\n \n    Is_Style_Msg : Boolean := False;\n    --  Set True to indicate if the current message is a style message\n-   --  (i.e. a message whose text starts with the cahracters \"(style)\").\n+   --  (i.e. a message whose text starts with the characters \"(style)\").\n \n    Is_Serious_Error : Boolean := False;\n    --  Set by Set_Msg_Text to indicate if current message is serious error"}, {"sha": "1637863cf455bde79e3a0203a920a5fbee8f2dd5", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -2212,7 +2212,7 @@ package body Exp_Attr is\n \n             --     sourcetyp (streamread (strmtyp'Input (stream)));\n \n-            --  where stmrearead is the given Read function that converts an\n+            --  where streamread is the given Read function that converts an\n             --  argument of type strmtyp to type sourcetyp or a type from which\n             --  it is derived (extra conversion required for the derived case).\n \n@@ -2810,7 +2810,7 @@ package body Exp_Attr is\n          --    result is modulus + value, where the value might be as small as\n          --    -modulus. The trouble is what type do we use to do the subtract.\n          --    No type will do, since modulus can be as big as 2**64, and no\n-         --    integer type accomodates this value. Let's do bit of algebra\n+         --    integer type accommodates this value. Let's do bit of algebra\n \n          --         modulus + value\n          --      =  modulus - (-value)"}, {"sha": "2cfde4df912f3a414903e6f0ec472746cec080f9", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -849,7 +849,7 @@ package body Exp_Ch11 is\n \n       begin\n          --  If we have no Entity, then we are probably in no run time mode\n-         --  or some weird error has occured. In either case do do nothing!\n+         --  or some weird error has occurred. In either case do do nothing!\n \n          if Present (Ent) then\n             declare"}, {"sha": "c3716c387fac230573239830447165855c1282fe", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -184,7 +184,7 @@ package body Exp_Ch2 is\n          end if;\n \n          --  If constant value is an occurrence of an enumeration literal,\n-         --  then we just make another occurence of the same literal.\n+         --  then we just make another occurrence of the same literal.\n \n          if Is_Entity_Name (Val)\n            and then Ekind (Entity (Val)) = E_Enumeration_Literal\n@@ -469,7 +469,7 @@ package body Exp_Ch2 is\n          --  we also generate an extra parameter to hold the Constrained\n          --  attribute of the actual. No renaming is generated for this flag.\n \n-         --  Calling Node_Posssible_Modifications in the expander is dubious,\n+         --  Calling Node_Possible_Modifications in the expander is dubious,\n          --  because this generates a cross-reference entry, and should be\n          --  done during semantic processing so it is called in -gnatc mode???\n "}, {"sha": "c8cb1a4e44a2bcd45b46e6277e34c65c30ccb109", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -3467,7 +3467,7 @@ package body Exp_Ch5 is\n \n    procedure Expand_N_Simple_Return_Statement (N : Node_Id) is\n    begin\n-      --  Defend agains previous errors (ie. the return statement calls a\n+      --  Defend against previous errors (i.e. the return statement calls a\n       --  function that is not available in configurable runtime).\n \n       if Present (Expression (N))"}, {"sha": "ca4d70b2c02c7281cbc1b458274431afbc264ffd", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -195,7 +195,7 @@ package body Exp_Ch9 is\n      (Loc    : Source_Ptr;\n       Def_Id : Entity_Id;\n       Ent_Id : Entity_Id) return Node_Id;\n-   --  Build a specification for the procedure implementing the statemens of\n+   --  Build a specification for the procedure implementing the statements of\n    --  the specified entry body. Add attributes associating it with the entry\n    --  defining identifier Ent_Id.\n \n@@ -2027,7 +2027,7 @@ package body Exp_Ch9 is\n       Add_Object_Pointer (Loc, Pid, Op_Decls);\n \n       --  Add renamings for all formals, the Protection object, discriminals,\n-      --  privals and the entry indix constant for use by debugger.\n+      --  privals and the entry index constant for use by debugger.\n \n       Add_Formal_Renamings (Espec, Op_Decls, Ent, Loc);\n       Debug_Private_Data_Declarations (Decls);\n@@ -3429,7 +3429,7 @@ package body Exp_Ch9 is\n \n    begin\n       --  Add renamings for the Protection object, discriminals, privals and\n-      --  the entry indix constant for use by debugger.\n+      --  the entry index constant for use by debugger.\n \n       Debug_Private_Data_Declarations (Decls);\n "}, {"sha": "2628e150ca147b5a9ebffdf45793a0d0da9be3f4", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -321,7 +321,7 @@ package Exp_Ch9 is\n \n    procedure Set_Discriminals (Dec : Node_Id);\n    --  Replace discriminals in a protected type for use by the next protected\n-   --  operation on the type. Each operation needs a new set of discirminals,\n+   --  operation on the type. Each operation needs a new set of discriminals,\n    --  since it needs a unique renaming of the discriminant fields in the\n    --  record used to implement the protected type.\n "}, {"sha": "e04d723e79f65c48a20b049cdd8cc8df772b0465", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1774,7 +1774,7 @@ package body Exp_Pakd is\n       Ltyp := Etype (L);\n       Rtyp := Etype (R);\n \n-      --  Deeal with silly case of XOR where the subcomponent has a range\n+      --  Deal with silly case of XOR where the subcomponent has a range\n       --  True .. True where an exception must be raised.\n \n       if Nkind (N) = N_Op_Xor then"}, {"sha": "fd9fe26dd150cc56439ea70a85a39594ad2749bc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -967,7 +967,7 @@ package body Exp_Util is\n             --  A protected type without entries that covers an interface and\n             --  overrides the abstract routines with protected procedures is\n             --  considered equivalent to a protected type with entries in the\n-            --  context of dispatching select statements. It is sufficent to\n+            --  context of dispatching select statements. It is sufficient to\n             --  check for the presence of an interface list in the declaration\n             --  node to recognize this case.\n \n@@ -3066,7 +3066,7 @@ package body Exp_Util is\n \n       --  Most predefined primitives have internally generated names. Equality\n       --  must be treated differently; the predefined operation is recognized\n-      --  as a homgeneous binary operator that returns Boolean.\n+      --  as a homogeneous binary operator that returns Boolean.\n \n       if Name_Len > TSS_Name_Type'Last then\n          TSS_Name := TSS_Name_Type (Name_Buffer (Name_Len - TSS_Name'Length + 1"}, {"sha": "6770ee96ecb865adc8ce0e74b0a4a4b66f11389c", "filename": "gcc/ada/fmap.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ffmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Ffmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -39,7 +39,7 @@ package body Fmap is\n \n    No_Mapping_File : Boolean := False;\n    --  Set to True when the specified mapping file cannot be read in\n-   --  procedure Initialize, so that no attempt is made to oopen the mapping\n+   --  procedure Initialize, so that no attempt is made to open the mapping\n    --  file in procedure Update_Mapping_File.\n \n    function To_Big_String_Ptr is new Unchecked_Conversion"}, {"sha": "0f8822e2a07736c88fa90dd9e8a6c2e865860456", "filename": "gcc/ada/g-soccon-linux-mips.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-soccon-linux-mips.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-soccon-linux-mips.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-linux-mips.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@\n --  This is the version for mips-linux, manually edited for the first shot\n --  no mips hardware at hand\n --  using http://www.gelato.unsw.edu.au/lxr/source/include/asm-mips/socket.h\n---  in order to find differents values\n+--  in order to find different values.\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n@@ -80,7 +80,7 @@ package GNAT.Sockets.Constants is\n    EINVAL             : constant :=           22; --  Invalid argument\n    EIO                : constant :=            5; --  Input output error\n    EISCONN            : constant :=          106; --  Socket already connected\n-   ELOOP              : constant :=           40; --  Too many symbolic lynks\n+   ELOOP              : constant :=           40; --  Too many symbolic links\n    EMFILE             : constant :=           24; --  Too many open files\n    EMSGSIZE           : constant :=           90; --  Message too long\n    ENAMETOOLONG       : constant :=           36; --  Name too long"}, {"sha": "a404eec9b33f78db8f97f1c9ca1fc6621c07448d", "filename": "gcc/ada/g-soccon-rtems.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-soccon-rtems.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-soccon-rtems.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-rtems.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,7 +77,7 @@ package GNAT.Sockets.Constants is\n    EINVAL             : constant :=          22; --  Invalid argument\n    EIO                : constant :=           5; --  Input output error\n    EISCONN            : constant :=         127; --  Socket already connected\n-   ELOOP              : constant :=          92; --  Too many symbolic lynks\n+   ELOOP              : constant :=          92; --  Too many symbolic links\n    EMFILE             : constant :=          24; --  Too many open files\n    EMSGSIZE           : constant :=         122; --  Message too long\n    ENAMETOOLONG       : constant :=          91; --  Name too long"}, {"sha": "31130c060713f48d9c29a38ff2999ef3b2780b8b", "filename": "gcc/ada/g-timsta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-timsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-timsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-timsta.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -39,7 +39,7 @@ package body GNAT.Time_Stamp is\n    type time_stamp_ptr is access all time_stamp;\n    --  The desired ISO 8601 string format has exactly 22 characters. We add\n    --  one additional character for '\\0'. The indexing starts from zero to\n-   --  accomodate the C layout.\n+   --  accommodate the C layout.\n \n    procedure gnat_current_time_string (Value : time_stamp_ptr);\n    pragma Import (C, gnat_current_time_string, \"__gnat_current_time_string\");"}, {"sha": "460b7e5eb093d34bb03073e7f6518e40c7e4da2d", "filename": "gcc/ada/g-timsta.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-timsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fg-timsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-timsta.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides a lighweight mechanism for obtaining time stamps\n+--  This package provides a lightweight mechanism for obtaining time stamps\n \n package GNAT.Time_Stamp is\n "}, {"sha": "0d0a037320d9cad74957957439dba9bd8028bc1e", "filename": "gcc/ada/gen-soccon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fgen-soccon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fgen-soccon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen-soccon.c?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -267,7 +267,7 @@ CND(EISCONN, \"Socket already connected\")\n #ifndef ELOOP\n #define ELOOP -1\n #endif\n-CND(ELOOP, \"Too many symbolic lynks\")\n+CND(ELOOP, \"Too many symbolic links\")\n \n #ifndef EMFILE\n #define EMFILE -1"}, {"sha": "f8d5939b70889e00fcc78c6480f37def2f575a69", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -3551,7 +3551,7 @@ optimization setting. This would normally be achieved by use of a configuration\n pragma file containing the appropriate setting. The exception to this rule is\n that units with an explicit configuration pragma in the same file as the source\n unit are excluded from the consistency check, as are all predefined units. The\n-latter are commpiled by default in pragma Optimize_Alignment (Off) mode if no\n+latter are compiled by default in pragma Optimize_Alignment (Off) mode if no\n pragma appears at the start of the file.\n \n @node Pragma Passive\n@@ -3740,7 +3740,7 @@ will be used as the exception message. If no message\n argument was supplied, then the default message has\n the form \"Postcondition failed at file:line\". The\n exception is raised in the context of the subprogram\n-body, so it is posssible to catch postcondition failures\n+body, so it is possible to catch postcondition failures\n within the subprogram body itself.\n \n Within a package spec, normal visibility rules"}, {"sha": "e0c0f34427d9594a2ac4c60b39218c76fde6b015", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -472,7 +472,7 @@ package Lib.Writ is\n    --             elaboration code is required. Set if N_Compilation_Unit\n    --             node has flag Has_No_Elaboration_Code set.\n    --\n-   --         OL   The units in this file are commpiled with a local pragma\n+   --         OL   The units in this file are compiled with a local pragma\n    --              Optimize_Alignment, so no consistency requirement applies\n    --              to these units. All internal units have this status since\n    --              they have an automatic default of Optimize_Alignment (Off).\n@@ -481,11 +481,11 @@ package Lib.Writ is\n    --              units in this file. All files in the partition that specify\n    --              a default must specify the same default.\n    --\n-   --         OS   Optimize_Alignment (Space) is the default settinng for all\n+   --         OS   Optimize_Alignment (Space) is the default setting for all\n    --              units in this file. All files in the partition that specify\n    --              a default must specify the same default.\n    --\n-   --         OT   Optimize_Alignment (Time) is the default settinng for all\n+   --         OT   Optimize_Alignment (Time) is the default setting for all\n    --              units in this file. All files in the partition that specify\n    --              a default must specify the same default.\n    --"}, {"sha": "8559966bfe56dcdd6a060a4ab626a7406f3cd5e2", "filename": "gcc/ada/mlib-tgt-specific-linux.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fmlib-tgt-specific-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fmlib-tgt-specific-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-linux.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,7 +68,7 @@ package body MLib.Tgt.Specific is\n       pragma Unreferenced (Interfaces);\n       pragma Unreferenced (Symbol_Data);\n       pragma Unreferenced (Auto_Init);\n-      --  Initialization is done through the contructor mechanism\n+      --  Initialization is done through the constructor mechanism\n \n       Lib_File : constant String :=\n                    \"lib\" & Fil.Append_To (Lib_Filename, DLL_Ext);"}, {"sha": "b5f5a13712253e49af39747be8b8e235cc0adc77", "filename": "gcc/ada/mlib-tgt-specific-tru64.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fmlib-tgt-specific-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fmlib-tgt-specific-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-tru64.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -24,7 +24,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the True64 version of the body\n+--  This is the Tru64 version of the body\n \n with MLib.Fil;\n with MLib.Utl;"}, {"sha": "a752b2dbd4c5c27851e8fe67fb622802dbe747ff", "filename": "gcc/ada/s-interr-vxworks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-interr-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-interr-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vxworks.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -607,7 +607,7 @@ package body System.Interrupts is\n    --  signals and exceptions).  As opposed to the signal implementation,\n    --  this handler is installed in the vector table when the first Ada\n    --  handler is attached to the interrupt.  However because VxWorks don't\n-   --  support disconnecting handlers, this subprogram always test wether\n+   --  support disconnecting handlers, this subprogram always test whether\n    --  or not an Ada handler is effectively attached.\n \n    --  Otherwise, the handler that existed prior to program startup is"}, {"sha": "4cb2ccc57d4aaa400d4bb855bda778425c3d845d", "filename": "gcc/ada/s-interr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1244,7 +1244,7 @@ package body System.Interrupts is\n \n       --  There are two Interrupt interrupts that this task catch through\n       --  \"sigwait.\" One is the Interrupt this task is designated to catch\n-      --  in order to execure user handler or entry. The other one is the\n+      --  in order to execute user handler or entry. The other one is the\n       --  Abort_Task_Interrupt. This interrupt is being sent from the\n       --  Interrupt_Manager to inform status changes (e.g: become Blocked,\n       --  Handler or Entry is to be detached)."}, {"sha": "6acb132011f1bd5c521e0e93cc726e4df8b90a01", "filename": "gcc/ada/s-osinte-lynxos.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-osinte-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-osinte-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -173,7 +173,7 @@ package System.OS_Interface is\n    SA_SIGINFO : constant := 16#80#;\n \n    SA_ONSTACK : constant := 16#00#;\n-   --  SA_ONSTACK is not defined on LynxOS, but it is refered to in the POSIX\n+   --  SA_ONSTACK is not defined on LynxOS, but it is referred to in the POSIX\n    --  implementation of System.Interrupt_Management. Therefore we define a\n    --  dummy value of zero here so that setting this flag is a nop.\n "}, {"sha": "2c5ffb6083277fd47216d08452b79f73d628b784", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -282,7 +282,7 @@ package System.Rident is\n       --  If an entry for a parameter restriction is True in Violated, the\n       --  corresponding entry in the Unknown array may record additional\n       --  information. If the actual count is not known by the compiler (but\n-      --  is nown to be non-zero), then the entry in Unknown will be True.\n+      --  is known to be non-zero), then the entry in Unknown will be True.\n       --  This indicates that the value in Count is not known to be exact,\n       --  and the actual violation count may be higher.\n "}, {"sha": "7792232fdd8963894e945757e307866d51a8d28c", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -115,7 +115,7 @@ package body System.Task_Primitives.Operations is\n    --  and priority handling.\n \n    Using_Real_Time_Class : Boolean := False;\n-   --  indicates whether the real time class is being used (i.e the process\n+   --  indicates whether the real time class is being used (i.e. the process\n    --  has root privileges).\n \n    Prio_Param : aliased struct_pcparms;"}, {"sha": "d3c6739fb3d82248ab682be7ff979bc4653138f3", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1193,7 +1193,7 @@ package body System.Tasking.Stages is\n    -- Terminate_Task --\n    --------------------\n \n-   --  Before we allow the thread to exit, we must clean up. This is a a\n+   --  Before we allow the thread to exit, we must clean up. This is a\n    --  delicate job. We must wake up the task's master, who may immediately try\n    --  to deallocate the ATCB out from under the current task WHILE IT IS STILL\n    --  EXECUTING."}, {"sha": "298984cb3b3d7a38b5942e8fdef611b8cbe9fc0d", "filename": "gcc/ada/s-win32.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-win32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fs-win32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-win32.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -32,7 +32,7 @@\n ------------------------------------------------------------------------------\n \n --  This package plus its child provide the low level interface to the Win32\n---  API. The core part of the Win32 API (commont to RTX and Win32) is in this\n+--  API. The core part of the Win32 API (common to RTX and Win32) is in this\n --  package, and an additional part of the Win32 API which is not supported by\n --  RTX is in package System.Win33.Ext.\n "}, {"sha": "051a650f9c26943e20288ec240ad0cb6bb61ea1d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1937,7 +1937,7 @@ package body Sem_Aggr is\n                   end if;\n                end if;\n \n-               --  If no others, aggregate bounds come from aggegate\n+               --  If no others, aggregate bounds come from aggregate\n \n                Aggr_Low  := Choices_Low;\n                Aggr_High := Choices_High;"}, {"sha": "126c358be9f0da130f3785c5f2fa353c7b2e5b23", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -297,7 +297,7 @@ package Sem_Attr is\n       --  is identical to the value that would be set if Initialize_Scalars\n       --  mode were in effect (including the behavior of its value on\n       --  environment variables or binder switches). The intended use is\n-      --  to set a value where intialization is required (e.g. as a result of\n+      --  to set a value where initialization is required (e.g. as a result of\n       --  the coding standards in use), but logically no initialization is\n       --  needed, and the value should never be accessed.\n "}, {"sha": "540b2a6d85dc11ce248ffa8c51a00be50a11cc68", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -3969,7 +3969,7 @@ package body Sem_Ch10 is\n             end loop;\n \n             --  Now check incomplete declarations to locate Taft amendment\n-            --  types. This can be done by examing the defining identifiers\n+            --  types. This can be done by examining the defining identifiers\n             --  of  type declarations without real semantic analysis.\n \n             declare"}, {"sha": "e7c20bc8e1284f86a00cfb3ab9150732b6c0808c", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -122,7 +122,7 @@ package Sem_Ch13 is\n    --  attributes, clearly should not be subject to the para 10 restrictions\n    --  (see AI95-00137). Similarly, we also skip the para 10 restrictions for\n    --  the Storage_Size case where they also clearly do not apply, and for\n-   --  Stream_Convert which is in the same category as the strem attributes.\n+   --  Stream_Convert which is in the same category as the stream attributes.\n    --\n    --  If the rep item is too late, an appropriate message is output and\n    --  True is returned, which is a signal that the caller should abandon"}, {"sha": "103eb75fbe52a2326ebd96e4ab830c24486707a3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -2308,7 +2308,7 @@ package body Sem_Ch3 is\n \n                --  The current object is a discriminal generated for an entry\n                --  family index. Even though the index is a constant, in this\n-               --  particular context there is no true contant redeclaration.\n+               --  particular context there is no true constant redeclaration.\n                --  Enter_Name will handle the visibility.\n \n                or else\n@@ -8153,7 +8153,7 @@ package body Sem_Ch3 is\n             if Present (Alias_Subp) then\n \n                --  Only perform the check for a derived subprogram when the\n-               --  type has an explicit record extension. This avoids incorect\n+               --  type has an explicit record extension. This avoids incorrect\n                --  flagging of abstract subprograms for the case of a type\n                --  without an extension that is derived from a formal type\n                --  with a tagged actual (can occur within a private part).\n@@ -11798,7 +11798,7 @@ package body Sem_Ch3 is\n \n       --  If we are creating a renaming for a primitive operation of an\n       --  actual of a generic derived type, we must examine the signature\n-      --  of the actual primive, not that of the generic formal, which for\n+      --  of the actual primitive, not that of the generic formal, which for\n       --  example may be an interface. However the name and initial value\n       --  of the inherited operation are those of the formal primitive.\n "}, {"sha": "fbac48cd1af0436c0f65641617d74b32a1712545", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -2020,7 +2020,7 @@ package body Sem_Ch6 is\n \n       Process_PPCs (N, Spec_Id, Body_Id);\n \n-      --  Add a declaration for the Protection objcect, renaming declarations\n+      --  Add a declaration for the Protection object, renaming declarations\n       --  for discriminals and privals and finally a declaration for the entry\n       --  family index (if applicable). This form of early expansion is done\n       --  when the Expander is active because Install_Private_Data_Declarations"}, {"sha": "fe1bcb5f24f018f96b5b38bb53031c6bdffebc1a", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1002,7 +1002,7 @@ package body Sem_Ch7 is\n                --  is both unnecessary and wrong, because it would cause the\n                --  clauses to be chained to themselves in the use clauses\n                --  list of the scope stack entry. That in turn would cause\n-               --  an endless loop from End_Use_Clauses upon sccope exit.\n+               --  an endless loop from End_Use_Clauses upon scope exit.\n \n                --  The parent is now fully visible. It may be a hidden open\n                --  scope if we are currently compiling some child instance\n@@ -1383,7 +1383,7 @@ package body Sem_Ch7 is\n       begin\n          --  If the full view is a scalar type, the type is the anonymous\n          --  base type, but the operation mentions the first subtype, so\n-         --  check the signature againt the base type.\n+         --  check the signature against the base type.\n \n          if Base_Type (Etype (S)) = Base_Type (T) then\n             return True;"}, {"sha": "2d4d7fe463503bb7e88f2030bed753d15daaca5e", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -4110,7 +4110,7 @@ package body Sem_Ch8 is\n                --  If the renamed entity is a private protected component,\n                --  reference the original component as well. This needs to be\n                --  done because the private renamings are installed before any\n-               --  analysis has occured. Reference to a private component will\n+               --  analysis has occurred. Reference to a private component will\n                --  resolve to the renaming and the original component will be\n                --  left unreferenced, hence the following.\n "}, {"sha": "fe3634e8fe91a87d3d0879ea7ed6010b1177521a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1113,7 +1113,7 @@ package body Sem_Ch9 is\n       --  all itypes within are frozen. This ensures that no freeze nodes\n       --  will be generated for them.\n       --\n-      --  On the other hand, components of the correesponding record are\n+      --  On the other hand, components of the corresponding record are\n       --  frozen (or receive itype references) as for other records.\n \n       --------------------"}, {"sha": "b5e843a62b0e0d22b2cb4475368b3758f5c34b8b", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -51,7 +51,7 @@ package Sem_Prag is\n    --  Precondition, and Postcondition to determine if Check pragmas (or\n    --  corresponding Assert, Precondition, or Postcondition pragmas) are\n    --  currently active, as determined by the presence of -gnata on the\n-   --  command line (which sets the default), and the appearence of pragmas\n+   --  command line (which sets the default), and the appearance of pragmas\n    --  Check_Policy and Assertion_Policy as configuration pragmas either in\n    --  a configuration pragma file, or at the start of the current unit.\n    --  True is returned if the specified check is enabled."}, {"sha": "39cd89514fb3fed4fb30522139c2483c6f9e1996", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -396,7 +396,7 @@ package body Sem_Res is\n       D    : Node_Id;\n \n    begin\n-      --  Any use in a a spec-expression is legal\n+      --  Any use in a spec-expression is legal\n \n       if In_Spec_Expression then\n          null;"}, {"sha": "1be22cf7df0ec4c234d4c2d716c065a0e32fa396", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -492,7 +492,7 @@ package body Sem_Util is\n       if In_Spec_Expression then\n          return Empty;\n \n-      --  More commments for the rest of this body would be good ???\n+      --  More comments for the rest of this body would be good ???\n \n       elsif Nkind (N) = N_Explicit_Dereference then\n          if Is_Composite_Type (T)"}, {"sha": "a14d6a0149fe49e80a2d86f5f6c9756a954f42b1", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1089,7 +1089,7 @@ package Sem_Util is\n \n    procedure Set_Optimize_Alignment_Flags (E : Entity_Id);\n    pragma Inline (Set_Optimize_Alignment_Flags);\n-   --  Sets Optimize_Aliignment_Space/Time flags in E from current settings\n+   --  Sets Optimize_Alignment_Space/Time flags in E from current settings\n \n    procedure Set_Public_Status (Id : Entity_Id);\n    --  If an entity (visible or otherwise) is defined in a library"}, {"sha": "4686a7ac09670f7cf2f9479e11a0d6d3c09d3d79", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -1369,7 +1369,7 @@ package Sinfo is\n \n    --  Next_Pragma (Node1-Sem)\n    --    Present in N_Pragma nodes. Used to create a linked list of pragma\n-   --    nodes. Curently used for two purposes:\n+   --    nodes. Currently used for two purposes:\n    --\n    --      Create a list of linked Check_Policy pragmas. The head of this list\n    --      is stored in Opt.Check_Policy_List (which has further details)."}, {"sha": "4a48396aec7d57ea056c3ef2fa086cd6a63558ec", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d0f304ff5dc9bd1836b1a1329038558ea572be/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=f3d0f304ff5dc9bd1836b1a1329038558ea572be", "patch": "@@ -5152,7 +5152,7 @@ package VMS_Data is\n                                            \"ALL_ON \"                          &\n                                            \"--coupling-all \"                  &\n                                            \"ALL_OFF \"                         &\n-                                           \"--no-counling-all \"               &\n+                                           \"--no-coupling-all \"               &\n                                            \"PACKAGE_EFFERENT_ON \"             &\n                                            \"--package-efferent-coupling \"     &\n                                            \"PACKAGE_EFFERENT_OFF \"            &"}]}