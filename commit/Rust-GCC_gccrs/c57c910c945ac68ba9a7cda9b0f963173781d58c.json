{"sha": "c57c910c945ac68ba9a7cda9b0f963173781d58c", "node_id": "C_kwDOANBUbNoAKGM1N2M5MTBjOTQ1YWM2OGJhOWE3Y2RhOWIwZjk2MzE3Mzc4MWQ1OGM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-04T10:02:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-04T10:02:15Z"}, "message": "c++: Allow indeterminate unsigned char or std::byte in bit_cast - P1272R4\n\nP1272R4 has added to the std::byteswap new stuff to me quite unrelated\nclarification for std::bit_cast.\nThe patch treats it as DR, applying to all languages.\nWe no longer diagnose if padding bits are stored into unsigned char\nor std::byte result, fields or bitfields, instead arrange for that result,\nthose fields or bitfields to get indeterminate value (empty\nCONSTRUCTOR with CONSTRUCTOR_NO_ZEROING or just leaving the member's\ninitializer out and setting CONSTRUCTOR_NO_ZEROING on parent).\n\nWe still have a bug that we don't diagnose in lots of places lvalue-to-rvalue\nconversions of indeterminate values or class objects with some indeterminate\nmembers.\n\n2021-12-04  Jakub Jelinek <jakub@redhat.com>\n\n\t* cp-tree.h (is_byte_access_type_not_plain_char): Declare.\n\t* tree.c (is_byte_access_type_not_plain_char): New function.\n\t* constexpr.c (clear_uchar_or_std_byte_in_mask): New function.\n\t(cxx_eval_bit_cast): Don't error about padding bits if target\n\ttype is unsigned char or std::byte, instead return no clearing\n\tctor.  Use clear_uchar_or_std_byte_in_mask.\n\n\t* g++.dg/cpp2a/bit-cast11.C: New test.\n\t* g++.dg/cpp2a/bit-cast12.C: New test.\n\t* g++.dg/cpp2a/bit-cast13.C: New test.\n\t* g++.dg/cpp2a/bit-cast14.C: New test.", "tree": {"sha": "32117623ca59d79f56b51c0f039a0081802a184d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32117623ca59d79f56b51c0f039a0081802a184d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c57c910c945ac68ba9a7cda9b0f963173781d58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57c910c945ac68ba9a7cda9b0f963173781d58c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c57c910c945ac68ba9a7cda9b0f963173781d58c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57c910c945ac68ba9a7cda9b0f963173781d58c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55dfce4d5cb4a366ced7e1194a1c7f04389e3087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dfce4d5cb4a366ced7e1194a1c7f04389e3087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55dfce4d5cb4a366ced7e1194a1c7f04389e3087"}], "stats": {"total": 413, "additions": 411, "deletions": 2}, "files": [{"sha": "d851fae66813ea9253f5f367ce564c29950d27a8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -4275,6 +4275,118 @@ check_bit_cast_type (const constexpr_ctx *ctx, location_t loc, tree type,\n   return false;\n }\n \n+/* Helper function for cxx_eval_bit_cast.  For unsigned char or\n+   std::byte members of CONSTRUCTOR (recursively) if they contain\n+   some indeterminate bits (as set in MASK), remove the ctor elts,\n+   mark the CONSTRUCTOR as CONSTRUCTOR_NO_CLEARING and clear the\n+   bits in MASK.  */\n+\n+static void\n+clear_uchar_or_std_byte_in_mask (location_t loc, tree t, unsigned char *mask)\n+{\n+  if (TREE_CODE (t) != CONSTRUCTOR)\n+    return;\n+\n+  unsigned i, j = 0;\n+  tree index, value;\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, index, value)\n+    {\n+      tree type = TREE_TYPE (value);\n+      if (TREE_CODE (TREE_TYPE (t)) != ARRAY_TYPE\n+\t  && DECL_BIT_FIELD_TYPE (index) != NULL_TREE)\n+\t{\n+\t  if (is_byte_access_type_not_plain_char (DECL_BIT_FIELD_TYPE (index)))\n+\t    {\n+\t      HOST_WIDE_INT fldsz = TYPE_PRECISION (TREE_TYPE (index));\n+\t      gcc_assert (fldsz != 0);\n+\t      HOST_WIDE_INT pos = int_byte_position (index);\n+\t      HOST_WIDE_INT bpos\n+\t\t= tree_to_uhwi (DECL_FIELD_BIT_OFFSET (index));\n+\t      bpos %= BITS_PER_UNIT;\n+\t      HOST_WIDE_INT end\n+\t\t= ROUND_UP (bpos + fldsz, BITS_PER_UNIT) / BITS_PER_UNIT;\n+\t      gcc_assert (end == 1 || end == 2);\n+\t      unsigned char *p = mask + pos;\n+\t      unsigned char mask_save[2];\n+\t      mask_save[0] = mask[pos];\n+\t      mask_save[1] = end == 2 ? mask[pos + 1] : 0;\n+\t      if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+\t\tsorry_at (loc, \"PDP11 bit-field handling unsupported\"\n+\t\t\t       \" in %qs\", \"__builtin_bit_cast\");\n+\t      else if (BYTES_BIG_ENDIAN)\n+\t\t{\n+\t\t  /* Big endian.  */\n+\t\t  if (bpos + fldsz <= BITS_PER_UNIT)\n+\t\t    *p &= ~(((1 << fldsz) - 1)\n+\t\t\t    << (BITS_PER_UNIT - bpos - fldsz));\n+\t\t  else\n+\t\t    {\n+\t\t      gcc_assert (bpos);\n+\t\t      *p &= ~(((1U << BITS_PER_UNIT) - 1) >> bpos);\n+\t\t      p++;\n+\t\t      fldsz -= BITS_PER_UNIT - bpos;\n+\t\t      gcc_assert (fldsz && fldsz < BITS_PER_UNIT);\n+\t\t      *p &= ((1U << BITS_PER_UNIT) - 1) >> fldsz;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Little endian.  */\n+\t\t  if (bpos + fldsz <= BITS_PER_UNIT)\n+\t\t    *p &= ~(((1 << fldsz) - 1) << bpos);\n+\t\t  else\n+\t\t    {\n+\t\t      gcc_assert (bpos);\n+\t\t      *p &= ~(((1 << BITS_PER_UNIT) - 1) << bpos);\n+\t\t      p++;\n+\t\t      fldsz -= BITS_PER_UNIT - bpos;\n+\t\t      gcc_assert (fldsz && fldsz < BITS_PER_UNIT);\n+\t\t      *p &= ~((1 << fldsz) - 1);\n+\t\t    }\n+\t\t}\n+\t      if (mask_save[0] != mask[pos]\n+\t\t  || (end == 2 && mask_save[1] != mask[pos + 1]))\n+\t\t{\n+\t\t  CONSTRUCTOR_NO_CLEARING (t) = 1;\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t}\n+      else if (is_byte_access_type_not_plain_char (type))\n+\t{\n+\t  HOST_WIDE_INT pos;\n+\t  if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n+\t    pos = tree_to_shwi (index);\n+\t  else\n+\t    pos = int_byte_position (index);\n+\t  if (mask[pos])\n+\t    {\n+\t      CONSTRUCTOR_NO_CLEARING (t) = 1;\n+\t      mask[pos] = 0;\n+\t      continue;\n+\t    }\n+\t}\n+      if (TREE_CODE (value) == CONSTRUCTOR)\n+\t{\n+\t  HOST_WIDE_INT pos;\n+\t  if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n+\t    pos = tree_to_shwi (index)\n+\t\t  * tree_to_shwi (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (t))));\n+\t  else\n+\t    pos = int_byte_position (index);\n+\t  clear_uchar_or_std_byte_in_mask (loc, value, mask + pos);\n+\t}\n+      if (i != j)\n+\t{\n+\t  CONSTRUCTOR_ELT (t, j)->index = index;\n+\t  CONSTRUCTOR_ELT (t, j)->value = value;\n+\t}\n+      ++j;\n+    }\n+  if (CONSTRUCTOR_NELTS (t) != j)\n+    vec_safe_truncate (CONSTRUCTOR_ELTS (t), j);\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Attempt to evaluate a BIT_CAST_EXPR.  */\n \n@@ -4351,12 +4463,27 @@ cxx_eval_bit_cast (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n \n   tree r = NULL_TREE;\n   if (can_native_interpret_type_p (TREE_TYPE (t)))\n-    r = native_interpret_expr (TREE_TYPE (t), ptr, len);\n+    {\n+      r = native_interpret_expr (TREE_TYPE (t), ptr, len);\n+      if (is_byte_access_type_not_plain_char (TREE_TYPE (t)))\n+\t{\n+\t  gcc_assert (len == 1);\n+\t  if (mask[0])\n+\t    {\n+\t      memset (mask, 0, len);\n+\t      r = build_constructor (TREE_TYPE (r), NULL);\n+\t      CONSTRUCTOR_NO_CLEARING (r) = 1;\n+\t    }\n+\t}\n+    }\n   else if (TREE_CODE (TREE_TYPE (t)) == RECORD_TYPE)\n     {\n       r = native_interpret_aggregate (TREE_TYPE (t), ptr, 0, len);\n       if (r != NULL_TREE)\n-\tclear_type_padding_in_mask (TREE_TYPE (t), mask);\n+\t{\n+\t  clear_type_padding_in_mask (TREE_TYPE (t), mask);\n+\t  clear_uchar_or_std_byte_in_mask (loc, r, mask);\n+\t}\n     }\n \n   if (r != NULL_TREE)"}, {"sha": "3510512d75195da45d92c8b6421f9b30e0135328", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -7791,6 +7791,7 @@ extern tree build_dummy_object\t\t\t(tree);\n extern tree maybe_dummy_object\t\t\t(tree, tree *);\n extern bool is_dummy_object\t\t\t(const_tree);\n extern bool is_byte_access_type\t\t\t(tree);\n+extern bool is_byte_access_type_not_plain_char\t(tree);\n extern const struct attribute_spec cxx_attribute_table[];\n extern tree make_ptrmem_cst\t\t\t(tree, tree);\n extern tree cp_build_type_attribute_variant     (tree, tree);"}, {"sha": "52c56831f98eabf1b60682413e5ef709399f9da3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -4311,6 +4311,18 @@ is_byte_access_type (tree type)\n \t  && !strcmp (\"byte\", TYPE_NAME_STRING (type)));\n }\n \n+/* Returns true if TYPE is unsigned char or std::byte.  */\n+\n+bool\n+is_byte_access_type_not_plain_char (tree type)\n+{\n+  type = TYPE_MAIN_VARIANT (type);\n+  if (type == char_type_node)\n+    return false;\n+\n+  return is_byte_access_type (type);\n+}\n+\n /* Returns 1 iff type T is something we want to treat as a scalar type for\n    the purpose of deciding whether it is trivial/POD/standard-layout.  */\n "}, {"sha": "a3eb31bc6c7ba15d38127f7fbf5a021baa6317d7", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast11.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast11.C?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -0,0 +1,63 @@\n+// P1272R4\n+// { dg-do compile { target c++14 } }\n+\n+struct S { unsigned char a[2]; alignas(sizeof 0) int b; };\n+struct T { char a; alignas(sizeof 0) int b; };\n+struct U { char a : 1; char : 6; char b : 1; };\n+struct V { int a; S b; };\n+struct W { unsigned a; T b; };\n+\n+constexpr bool\n+f1 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\n+  return s.a[0] == 1;\n+}\n+\n+constexpr bool\n+f2 ()\n+{\n+  U u = { 0, 0 };\n+  unsigned char a = __builtin_bit_cast (unsigned char, u);\n+  return true;\n+}\n+\n+constexpr bool\n+f3 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\n+  return s.a[1] == 0;\n+}\n+\n+constexpr bool\n+f4 ()\n+{\n+  U u = { 0, 0 };\n+  unsigned char a = __builtin_bit_cast (unsigned char, u);\n+  return a == 0;\t\t// { dg-error \"is not a constant expression\" }\n+}\n+\n+constexpr bool\n+f5 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\n+  return s.b.a[0] == 1;\n+}\n+\n+constexpr bool\n+f6 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\n+  return s.b.a[1] == 1;\n+}\n+\n+constexpr bool a = f1 ();\n+constexpr bool b = f2 ();\n+constexpr bool c = f3 ();\t// { dg-error \"accessing uninitialized array element\" }\n+constexpr bool d = f4 ();\n+constexpr bool e = f5 ();\n+constexpr bool f = f6 ();\t// { dg-error \"accessing uninitialized array element\" }"}, {"sha": "9c699dd55f08262c4d4e1dc6a447a4a481714c82", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast12.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast12.C?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -0,0 +1,68 @@\n+// P1272R4\n+// { dg-do compile { target c++14 } }\n+\n+namespace std\n+{\n+  enum class byte : unsigned char {};\n+}\n+\n+struct S { unsigned char a[2]; alignas(sizeof 0) int b; };\n+struct T { char a; alignas(sizeof 0) int b; };\n+struct U { char a : 1; char : 6; char b : 1; };\n+struct V { int a; S b; };\n+struct W { unsigned a; T b; };\n+\n+constexpr bool\n+f1 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\n+  return s.a[0] == 1;\n+}\n+\n+constexpr bool\n+f2 ()\n+{\n+  U u = { 0, 0 };\n+  unsigned char a = __builtin_bit_cast (unsigned char, u);\n+  return true;\n+}\n+\n+constexpr bool\n+f3 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\n+  return s.a[1] == 0;\n+}\n+\n+constexpr bool\n+f4 ()\n+{\n+  U u = { 0, 0 };\n+  unsigned char a = __builtin_bit_cast (unsigned char, u);\n+  return a == 0;\t\t// { dg-error \"is not a constant expression\" }\n+}\n+\n+constexpr bool\n+f5 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\n+  return s.b.a[0] == 1;\n+}\n+\n+constexpr bool\n+f6 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\n+  return s.b.a[1] == 1;\n+}\n+\n+constexpr bool a = f1 ();\n+constexpr bool b = f2 ();\n+constexpr bool c = f3 ();\t// { dg-error \"accessing uninitialized array element\" }\n+constexpr bool d = f4 ();\n+constexpr bool e = f5 ();\n+constexpr bool f = f6 ();\t// { dg-error \"accessing uninitialized array element\" }"}, {"sha": "f3bae59241cfa74cfa6b8eb3784c07faf44d08af", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast13.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast13.C?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -0,0 +1,63 @@\n+// P1272R4\n+// { dg-do compile { target c++14 } }\n+\n+struct S { char a[2]; alignas(sizeof 0) int b; };\n+struct T { char a; alignas(sizeof 0) int b; };\n+struct U { char a : 1; char : 6; char b : 1; };\n+struct V { int a; S b; };\n+struct W { unsigned a; T b; };\n+\n+constexpr bool\n+f1 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\t// { dg-error \"accessing uninitialized byte\" }\n+  return s.a[0] == 1;\n+}\n+\n+constexpr bool\n+f2 ()\n+{\n+  U u = { 0, 0 };\n+  char a = __builtin_bit_cast (char, u);\t// { dg-error \"accessing uninitialized byte\" }\n+  return true;\n+}\n+\n+constexpr bool\n+f3 ()\n+{\n+  T t = { 1, 2 };\n+  S s = __builtin_bit_cast (S, t);\t// { dg-error \"accessing uninitialized byte\" }\n+  return s.a[1] == 0;\n+}\n+\n+constexpr bool\n+f4 ()\n+{\n+  U u = { 0, 0 };\n+  char a = __builtin_bit_cast (char, u);\t// { dg-error \"accessing uninitialized byte\" }\n+  return a == 0;\n+}\n+\n+constexpr bool\n+f5 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\t// { dg-error \"accessing uninitialized byte\" }\n+  return s.b.a[0] == 1;\n+}\n+\n+constexpr bool\n+f6 ()\n+{\n+  W t = { 1, 2 };\n+  V s = __builtin_bit_cast (V, t);\t// { dg-error \"accessing uninitialized byte\" }\n+  return s.b.a[1] == 1;\n+}\n+\n+constexpr bool a = f1 ();\n+constexpr bool b = f2 ();\n+constexpr bool c = f3 ();\n+constexpr bool d = f4 ();\n+constexpr bool e = f5 ();\n+constexpr bool f = f6 ();"}, {"sha": "5e185919be42dae16699292ff13515069b28175d", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast14.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57c910c945ac68ba9a7cda9b0f963173781d58c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast14.C?ref=c57c910c945ac68ba9a7cda9b0f963173781d58c", "patch": "@@ -0,0 +1,75 @@\n+// P1272R4\n+// { dg-do compile { target c++14 } }\n+\n+struct S { unsigned char a : 8, b : 5, c : 3, d, e; unsigned int f : 8, g : 24; };\n+struct T1 { unsigned char a : 1, : 7, b : 5, c : 3, d, e; unsigned int f : 8, g : 24; };\n+struct T2 { unsigned char a : 8, b : 1, : 4, c : 3, d, e; unsigned int f : 8, g : 24; };\n+struct T3 { unsigned char a : 8, b : 5, c : 1, : 2, d, e; unsigned int f : 8, g : 24; };\n+struct T4 { unsigned char a : 8, b : 5, c : 3, d, e; unsigned int f : 1, : 7, g : 24; };\n+\n+constexpr bool\n+f1 ()\n+{\n+  T1 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  return true;\n+}\n+\n+constexpr bool\n+f2 ()\n+{\n+  T2 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  return true;\n+}\n+\n+constexpr bool\n+f3 ()\n+{\n+  T3 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  return true;\n+}\n+\n+constexpr bool\n+f4 ()\n+{\n+  T4 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\t// { dg-error \"accessing uninitialized byte\" }\n+  return true;\n+}\n+\n+constexpr bool\n+f5 ()\n+{\n+  T1 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  unsigned char a = s.a;\n+  return true;\n+}\n+\n+constexpr bool\n+f6 ()\n+{\n+  T2 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  unsigned char b = s.b;\n+  return true;\n+}\n+\n+constexpr bool\n+f7 ()\n+{\n+  T3 t = { 0, 0, 0, 0, 0, 0, 0 };\n+  S s = __builtin_bit_cast (S, t);\n+  unsigned char c = s.c;\n+  return true;\n+}\n+\n+constexpr bool a = f1 ();\n+constexpr bool b = f2 ();\n+constexpr bool c = f3 ();\n+constexpr bool d = f4 ();\n+constexpr bool e = f5 ();\t// { dg-error \"accessing uninitialized member\" }\n+constexpr bool f = f6 ();\t// { dg-error \"accessing uninitialized member\" }\n+constexpr bool g = f7 ();\t// { dg-error \"accessing uninitialized member\" }"}]}