{"sha": "7716876bbd3ac0bb0f520105612da96883dc085d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxNjg3NmJiZDNhYzBiYjBmNTIwMTA1NjEyZGE5Njg4M2RjMDg1ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-03-11T05:01:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-03-11T05:01:30Z"}, "message": "re PR debug/39086 (ICE in decl_ultimate_origin, at dwarf2out.c:5770 when compiling with -fno-tree-sra)\n\n        PR debug/39086\n        * tree-nrv.c (tree_nrv): Don't do this optimization if the front\n        end already did.  Notice GIMPLE_CALL modifications of the result.\n        Don't copy debug information from an ignored decl or a decl from\n        another function.\n\nFrom-SVN: r144772", "tree": {"sha": "04676e346137008a23915b8a6560a1db577b4ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04676e346137008a23915b8a6560a1db577b4ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7716876bbd3ac0bb0f520105612da96883dc085d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7716876bbd3ac0bb0f520105612da96883dc085d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7716876bbd3ac0bb0f520105612da96883dc085d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7716876bbd3ac0bb0f520105612da96883dc085d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "874b0a9e6218d3645897c3b94c5c73d65d1754e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874b0a9e6218d3645897c3b94c5c73d65d1754e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874b0a9e6218d3645897c3b94c5c73d65d1754e4"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "069a96cae7d658aa86bb5c997d76a7744e7d0df6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7716876bbd3ac0bb0f520105612da96883dc085d", "patch": "@@ -1,3 +1,11 @@\n+2009-03-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/39086\n+\t* tree-nrv.c (tree_nrv): Don't do this optimization if the front\n+\tend already did.  Notice GIMPLE_CALL modifications of the result.\n+\tDon't copy debug information from an ignored decl or a decl from\n+\tanother function.\n+\n 2009-03-10  Richard Guenther  <rguenther@suse.de>\n \t    Nathan Froyd  <froydnj@codesourcery.com>\n "}, {"sha": "711eba2883c7e60590f52cd35aa15941fae4f209", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7716876bbd3ac0bb0f520105612da96883dc085d", "patch": "@@ -1,3 +1,8 @@\n+2009-03-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/39086\n+\t* g++.dg/opt/nrv15.C: New test.\n+\n 2009-03-10  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/39422"}, {"sha": "23511b284b2628ec32638e9e7c59a0934eb6ee4b", "filename": "gcc/testsuite/g++.dg/opt/nrv15.C", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv15.C?ref=7716876bbd3ac0bb0f520105612da96883dc085d", "patch": "@@ -0,0 +1,97 @@\n+// PR debug/39086\n+// { dg-options \"-g -O -fno-tree-sra\" }\n+\n+struct A { int v; };\n+\n+A ax;\n+\n+struct B\n+{\n+  static A f1 () { return ax; }\n+  static bool f2 ();\n+  static A f3 ();\n+};\n+\n+struct C\n+{\n+  A f4 ()\n+  {\n+    A x;\n+    if (__builtin_expect (this->f6 () < this->f12 (), true))\n+      x = B::f1 ();\n+    else\n+      x = this->f7 ();\n+    return x;\n+  }\n+  A f5 ()\n+  {\n+    A y;\n+    if (this->f6 () < this->f12 ())\n+      y = B::f1 ();\n+    else\n+      y = this->f7 ();\n+    return y;\n+  }\n+  void *f6 () const;\n+  void *f12 () const;\n+  virtual A f7 ();\n+};\n+\n+C *dx;\n+\n+struct D\n+{\n+  C *f8 () const;\n+};\n+\n+class E : virtual public D\n+{\n+  void f11 ();\n+  void f9 ();\n+  void f10 ();\n+};\n+\n+struct G\n+{\n+  explicit G ();\n+  operator bool () const;\n+};\n+\n+void\n+E::f11 (void)\n+{\n+  A d = B::f3 ();\n+  d = this->f8 ()->f4 ();\n+}\n+\n+void\n+E::f9 ()\n+{\n+  G c;\n+  if (c)\n+    {\n+      const A e = B::f3 ();\n+      C * f = this->f8 ();\n+      A d = f->f5 ();\n+      if (B::f2 ())\n+\t;\n+      else if (B::f2 ())\n+\tf->f4 ();\n+    }\n+}\n+\n+void\n+E::f10 ()\n+{\n+  G c;\n+  if (c)\n+    {\n+      const A e = B::f3 ();\n+      C * f = this->f8 ();\n+      A d = f->f5 ();\n+      if (B::f2 ())\n+\t;\n+      else if (B::f2 ())\n+\tf->f4 ();\n+    }\n+}"}, {"sha": "7e811cf8c9de86107f119ef178efefe0a5edb6f4", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7716876bbd3ac0bb0f520105612da96883dc085d/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=7716876bbd3ac0bb0f520105612da96883dc085d", "patch": "@@ -121,6 +121,10 @@ tree_nrv (void)\n   if (is_gimple_reg_type (result_type))\n     return 0;\n \n+  /* If the front end already did something like this, don't do it here.  */\n+  if (DECL_NAME (result))\n+    return 0;\n+\n   /* Look through each block for assignments to the RESULT_DECL.  */\n   FOR_EACH_BB (bb)\n     {\n@@ -138,8 +142,8 @@ tree_nrv (void)\n \t      if (ret_val)\n \t\tgcc_assert (ret_val == result);\n \t    }\n-\t  else if (is_gimple_assign (stmt)\n-\t\t   && gimple_assign_lhs (stmt) == result)\n+\t  else if (gimple_has_lhs (stmt)\n+\t\t   && gimple_get_lhs (stmt) == result)\n \t    {\n               tree rhs;\n \n@@ -173,9 +177,9 @@ tree_nrv (void)\n \t\t\t\t\t        TREE_TYPE (found)))\n \t\treturn 0;\n \t    }\n-\t  else if (is_gimple_assign (stmt))\n+\t  else if (gimple_has_lhs (stmt))\n \t    {\n-\t      tree addr = get_base_address (gimple_assign_lhs (stmt));\n+\t      tree addr = get_base_address (gimple_get_lhs (stmt));\n \t       /* If there's any MODIFY of component of RESULT, \n \t\t  then bail out.  */\n \t      if (addr && addr == result)\n@@ -199,10 +203,17 @@ tree_nrv (void)\n \n   /* At this point we know that all the return statements return the\n      same local which has suitable attributes for NRV.   Copy debugging\n-     information from FOUND to RESULT.  */\n-  DECL_NAME (result) = DECL_NAME (found);\n-  DECL_SOURCE_LOCATION (result) = DECL_SOURCE_LOCATION (found);\n-  DECL_ABSTRACT_ORIGIN (result) = DECL_ABSTRACT_ORIGIN (found);\n+     information from FOUND to RESULT if it will be useful.  But don't set\n+     DECL_ABSTRACT_ORIGIN to point at another function.  */\n+  if (!DECL_IGNORED_P (found)\n+      && !(DECL_ABSTRACT_ORIGIN (found)\n+\t   && DECL_CONTEXT (DECL_ABSTRACT_ORIGIN (found)) != current_function_decl))\n+    {\n+      DECL_NAME (result) = DECL_NAME (found);\n+      DECL_SOURCE_LOCATION (result) = DECL_SOURCE_LOCATION (found);\n+      DECL_ABSTRACT_ORIGIN (result) = DECL_ABSTRACT_ORIGIN (found);\n+    }\n+\n   TREE_ADDRESSABLE (result) = TREE_ADDRESSABLE (found);\n \n   /* Now walk through the function changing all references to VAR to be"}]}