{"sha": "96ef8d00f70f076933eea68124043e9ba675412d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlZjhkMDBmNzBmMDc2OTMzZWVhNjgxMjQwNDNlOWJhNjc1NDEyZA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@st.com", "date": "2019-09-10T07:50:43Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-09-10T07:50:43Z"}, "message": "[ARM/FDPIC v6 08/24] [ARM] FDPIC: Enforce local/global binding for function descriptors\n\nUse local binding rules to decide whether we can use GOTOFFFUNCDESC to\ncompute the function address.\n\n2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\n\tgcc/\n\t* config/arm/arm.c (arm_fdpic_local_funcdesc_p): New function.\n\t(legitimize_pic_address): Enforce binding rules on function\n\tpointers in FDPIC mode.\n\t(arm_assemble_integer): Likewise.\n\n\nCo-Authored-By: Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\nFrom-SVN: r275570", "tree": {"sha": "356ea63ade0ad52bc4c1e95a658f580c818c706e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356ea63ade0ad52bc4c1e95a658f580c818c706e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ef8d00f70f076933eea68124043e9ba675412d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ef8d00f70f076933eea68124043e9ba675412d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ef8d00f70f076933eea68124043e9ba675412d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ef8d00f70f076933eea68124043e9ba675412d/comments", "author": null, "committer": null, "parents": [{"sha": "4997c9aed45b4439474005c4c71fac65151d1719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4997c9aed45b4439474005c4c71fac65151d1719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4997c9aed45b4439474005c4c71fac65151d1719"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "36a20df5fa001459500aae5989fcfcbb9e68c11b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ef8d00f70f076933eea68124043e9ba675412d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ef8d00f70f076933eea68124043e9ba675412d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96ef8d00f70f076933eea68124043e9ba675412d", "patch": "@@ -1,3 +1,11 @@\n+2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\n+\t* config/arm/arm.c (arm_fdpic_local_funcdesc_p): New function.\n+\t(legitimize_pic_address): Enforce binding rules on function\n+\tpointers in FDPIC mode.\n+\t(arm_assemble_integer): Likewise.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n "}, {"sha": "6b0c95f5752bbe61d6ccb13592a08d4ec0772c92", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ef8d00f70f076933eea68124043e9ba675412d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ef8d00f70f076933eea68124043e9ba675412d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=96ef8d00f70f076933eea68124043e9ba675412d", "patch": "@@ -3754,6 +3754,42 @@ arm_options_perform_arch_sanity_checks (void)\n     }\n }\n \n+/* Test whether a local function descriptor is canonical, i.e.,\n+   whether we can use GOTOFFFUNCDESC to compute the address of the\n+   function.  */\n+static bool\n+arm_fdpic_local_funcdesc_p (rtx fnx)\n+{\n+  tree fn;\n+  enum symbol_visibility vis;\n+  bool ret;\n+\n+  if (!TARGET_FDPIC)\n+    return true;\n+\n+  if (! SYMBOL_REF_LOCAL_P (fnx))\n+    return false;\n+\n+  fn = SYMBOL_REF_DECL (fnx);\n+\n+  if (! fn)\n+    return false;\n+\n+  vis = DECL_VISIBILITY (fn);\n+\n+  if (vis == VISIBILITY_PROTECTED)\n+    /* Private function descriptors for protected functions are not\n+       canonical.  Temporarily change the visibility to global so that\n+       we can ensure uniqueness of funcdesc pointers.  */\n+    DECL_VISIBILITY (fn) = VISIBILITY_DEFAULT;\n+\n+  ret = default_binds_local_p_1 (fn, flag_pic);\n+\n+  DECL_VISIBILITY (fn) = vis;\n+\n+  return ret;\n+}\n+\n static void\n arm_add_gc_roots (void)\n {\n@@ -7534,7 +7570,9 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg, rtx pic_reg,\n \t   || (GET_CODE (orig) == SYMBOL_REF\n \t       && SYMBOL_REF_LOCAL_P (orig)\n \t       && (SYMBOL_REF_DECL (orig)\n-\t\t   ? !DECL_WEAK (SYMBOL_REF_DECL (orig)) : 1)))\n+\t\t   ? !DECL_WEAK (SYMBOL_REF_DECL (orig)) : 1)\n+\t       && (!SYMBOL_REF_FUNCTION_P (orig)\n+\t\t   || arm_fdpic_local_funcdesc_p (orig))))\n \t  && NEED_GOT_RELOC\n \t  && arm_pic_data_is_text_relative)\n \tinsn = arm_pic_static_addr (orig, reg);\n@@ -23160,7 +23198,9 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n \t      || (GET_CODE (x) == SYMBOL_REF\n \t\t  && (!SYMBOL_REF_LOCAL_P (x)\n \t\t      || (SYMBOL_REF_DECL (x)\n-\t\t\t  ? DECL_WEAK (SYMBOL_REF_DECL (x)) : 0))))\n+\t\t\t  ? DECL_WEAK (SYMBOL_REF_DECL (x)) : 0)\n+\t\t      || (SYMBOL_REF_FUNCTION_P (x)\n+\t\t\t  && !arm_fdpic_local_funcdesc_p (x)))))\n \t    {\n \t      if (TARGET_FDPIC && SYMBOL_REF_FUNCTION_P (x))\n \t\tfputs (\"(GOTFUNCDESC)\", asm_out_file);"}]}