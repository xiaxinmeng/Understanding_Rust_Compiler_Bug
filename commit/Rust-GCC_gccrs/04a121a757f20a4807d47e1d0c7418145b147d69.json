{"sha": "04a121a757f20a4807d47e1d0c7418145b147d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhMTIxYTc1N2YyMGE0ODA3ZDQ3ZTFkMGM3NDE4MTQ1YjE0N2Q2OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-10-21T12:32:56Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-10-21T12:32:56Z"}, "message": "make LABEL_REF_LABEL a rtx_insn *\n\nWhile changing LABEL_REF_LABEL it might as well become an inline\nfunction, so that its clearer what types are involved.  Unfortunately\nbecause it is still possible to use XEXP and related macros on a\nLABEL_REF rtx you can still set the field to be a non insn rtx.  The\nother unfortunate thing is that the generators actually create LABEL_REF\nrtx that refer to MATCH_x rtx, so there we actually need to use XEXP to\nbypass the checking this patch adds.\n\ngcc/ChangeLog:\n\n2016-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* rtl.h (label_ref_label): New function.\n\t(set_label_ref_label): New function.\n\t(LABEL_REF_LABEL): Delete.\n\t* alias.c (rtx_equal_for_memref_p): Adjust.\n\t* cfgbuild.c (make_edges): Likewise.\n\t(purge_dead_tablejump_edges): Likewise.\n\t* cfgexpand.c (convert_debug_memory_address): Likewise.\n\t* cfgrtl.c (patch_jump_insn): Likewise.\n\t* combine.c (distribute_notes): Likewise.\n\t* cse.c (hash_rtx_cb): Likewise.\n\t(exp_equiv_p): Likewise.\n\t(fold_rtx): Likewise.\n\t(check_for_label_ref): Likewise.\n\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n\t(cselib_hash_rtx): Likewise.\n\t* emit-rtl.c (mark_label_nuses): Likewise.\n\t* explow.c (convert_memory_address_addr_space_1): Likewise.\n\t* final.c (output_asm_label): Likewise.\n\t(output_addr_const): Likewise.\n\t* gcse.c (add_label_notes): Likewise.\n\t* genconfig.c (walk_insn_part): Likewise.\n\t* genrecog.c (validate_pattern): Likewise.\n\t* ifcvt.c (cond_exec_get_condition): Likewise.\n\t(noce_emit_store_flag): Likewise.\n\t(noce_get_alt_condition): Likewise.\n\t(noce_get_condition): Likewise.\n\t* jump.c (maybe_propagate_label_ref): Likewise.\n\t(mark_jump_label_1): Likewise.\n\t(redirect_exp_1): Likewise.\n\t(rtx_renumbered_equal_p): Likewise.\n\t* lra-constraints.c (operands_match_p): Likewise.\n\t* print-rtl.c (print_value): Likewise.\n\t* reload.c (find_reloads): Likewise.\n\t* reload1.c (set_label_offsets): Likewise.\n\t* reorg.c (get_branch_condition): Likewise.\n\t* rtl-tests.c (test_uncond_jump): Likewise.\n\t* rtl.c (rtx_equal_p_cb): Likewise.\n\t(rtx_equal_p): Likewise.\n\t* rtlanal.c (reg_mentioned_p): Likewise.\n\t(rtx_referenced_p): Likewise.\n\t(get_condition): Likewise.\n\t* varasm.c (const_hash_1): Likewise.\n\t(compare_constant): Likewise.\n\t(const_rtx_hash_1): Likewise.\n\t(output_constant_pool_1): Likewise.\n\nFrom-SVN: r241401", "tree": {"sha": "4a775485f6f8a9a86ec778a975da372fc9d35d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a775485f6f8a9a86ec778a975da372fc9d35d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a121a757f20a4807d47e1d0c7418145b147d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a121a757f20a4807d47e1d0c7418145b147d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a121a757f20a4807d47e1d0c7418145b147d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a121a757f20a4807d47e1d0c7418145b147d69/comments", "author": null, "committer": null, "parents": [{"sha": "1d64ceb0579f2da8fec5f26932d5b182653c60d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d64ceb0579f2da8fec5f26932d5b182653c60d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d64ceb0579f2da8fec5f26932d5b182653c60d7"}], "stats": {"total": 209, "additions": 134, "deletions": 75}, "files": [{"sha": "c44329da83e5b2ca80b4ac6b3acdaa899e314fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1,3 +1,51 @@\n+2016-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* rtl.h (label_ref_label): New function.\n+\t(set_label_ref_label): New function.\n+\t(LABEL_REF_LABEL): Delete.\n+\t* alias.c (rtx_equal_for_memref_p): Adjust.\n+\t* cfgbuild.c (make_edges): Likewise.\n+\t(purge_dead_tablejump_edges): Likewise.\n+\t* cfgexpand.c (convert_debug_memory_address): Likewise.\n+\t* cfgrtl.c (patch_jump_insn): Likewise.\n+\t* combine.c (distribute_notes): Likewise.\n+\t* cse.c (hash_rtx_cb): Likewise.\n+\t(exp_equiv_p): Likewise.\n+\t(fold_rtx): Likewise.\n+\t(check_for_label_ref): Likewise.\n+\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n+\t(cselib_hash_rtx): Likewise.\n+\t* emit-rtl.c (mark_label_nuses): Likewise.\n+\t* explow.c (convert_memory_address_addr_space_1): Likewise.\n+\t* final.c (output_asm_label): Likewise.\n+\t(output_addr_const): Likewise.\n+\t* gcse.c (add_label_notes): Likewise.\n+\t* genconfig.c (walk_insn_part): Likewise.\n+\t* genrecog.c (validate_pattern): Likewise.\n+\t* ifcvt.c (cond_exec_get_condition): Likewise.\n+\t(noce_emit_store_flag): Likewise.\n+\t(noce_get_alt_condition): Likewise.\n+\t(noce_get_condition): Likewise.\n+\t* jump.c (maybe_propagate_label_ref): Likewise.\n+\t(mark_jump_label_1): Likewise.\n+\t(redirect_exp_1): Likewise.\n+\t(rtx_renumbered_equal_p): Likewise.\n+\t* lra-constraints.c (operands_match_p): Likewise.\n+\t* print-rtl.c (print_value): Likewise.\n+\t* reload.c (find_reloads): Likewise.\n+\t* reload1.c (set_label_offsets): Likewise.\n+\t* reorg.c (get_branch_condition): Likewise.\n+\t* rtl-tests.c (test_uncond_jump): Likewise.\n+\t* rtl.c (rtx_equal_p_cb): Likewise.\n+\t(rtx_equal_p): Likewise.\n+\t* rtlanal.c (reg_mentioned_p): Likewise.\n+\t(rtx_referenced_p): Likewise.\n+\t(get_condition): Likewise.\n+\t* varasm.c (const_hash_1): Likewise.\n+\t(compare_constant): Likewise.\n+\t(const_rtx_hash_1): Likewise.\n+\t(output_constant_pool_1): Likewise.\n+\n 2016-10-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \tPR target/71627"}, {"sha": "ca475ff92afcd590ead37161effbef9fd9ca5f07", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1767,7 +1767,7 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n       return REGNO (x) == REGNO (y);\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n \n     case SYMBOL_REF:\n       return compare_base_symbol_refs (x, y) == 1;"}, {"sha": "6c70971528e85b9be9ede803ac70f6918910d2e5", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -275,7 +275,7 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t\t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n \t\t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n \t\tmake_label_edge (edge_cache, bb,\n-\t\t\t\t LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)), 0);\n+\t\t\t\t label_ref_label (XEXP (SET_SRC (tmp), 2)), 0);\n \t    }\n \n \t  /* If this is a computed jump, then mark it as reaching\n@@ -415,7 +415,7 @@ purge_dead_tablejump_edges (basic_block bb, rtx_jump_table_data *table)\n        && SET_DEST (tmp) == pc_rtx\n        && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n        && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n-    mark_tablejump_edge (LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)));\n+    mark_tablejump_edge (label_ref_label (XEXP (SET_SRC (tmp), 2)));\n \n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {"}, {"sha": "430ad38f09604c3b2e3c01f26808d0a25462758a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -3999,7 +3999,7 @@ convert_debug_memory_address (machine_mode mode, rtx x,\n \t    return SUBREG_REG (x);\n \t  break;\n \tcase LABEL_REF:\n-\t  temp = gen_rtx_LABEL_REF (mode, LABEL_REF_LABEL (x));\n+\t  temp = gen_rtx_LABEL_REF (mode, label_ref_label (x));\n \t  LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n \t  return temp;\n \tcase SYMBOL_REF:"}, {"sha": "67cab7133ce14ca07d7bedde109ddeb1b04db21e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1201,7 +1201,7 @@ patch_jump_insn (rtx_insn *insn, rtx_insn *old_label, basic_block new_bb)\n \t  && SET_DEST (tmp) == pc_rtx\n \t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n \t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF\n-\t  && LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)) == old_label)\n+\t  && label_ref_label (XEXP (SET_SRC (tmp), 2)) == old_label)\n \t{\n \t  XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,\n \t\t\t\t\t\t       new_label);"}, {"sha": "64413b4436ebcf238ec543ba86f95030cb9cca97", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -13874,14 +13874,14 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t  if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3))\n \t      || ((tem_note = find_reg_note (i3, REG_EQUAL, NULL_RTX))\n \t\t  && GET_CODE (XEXP (tem_note, 0)) == LABEL_REF\n-\t\t  && LABEL_REF_LABEL (XEXP (tem_note, 0)) == XEXP (note, 0)))\n+\t\t  && label_ref_label (XEXP (tem_note, 0)) == XEXP (note, 0)))\n \t    place = i3;\n \n \t  if (i2\n \t      && (reg_mentioned_p (XEXP (note, 0), PATTERN (i2))\n \t\t  || ((tem_note = find_reg_note (i2, REG_EQUAL, NULL_RTX))\n \t\t      && GET_CODE (XEXP (tem_note, 0)) == LABEL_REF\n-\t\t      && LABEL_REF_LABEL (XEXP (tem_note, 0)) == XEXP (note, 0))))\n+\t\t      && label_ref_label (XEXP (tem_note, 0)) == XEXP (note, 0))))\n \t    {\n \t      if (place)\n \t\tplace2 = i2;"}, {"sha": "4b3cd2e1df4a47db580a640e0473c6e3aaeac32e", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -2365,7 +2365,7 @@ hash_rtx_cb (const_rtx x, machine_mode mode,\n       /* We don't hash on the address of the CODE_LABEL to avoid bootstrap\n \t differences and differences between each stage's debugging dumps.  */\n \t hash += (((unsigned int) LABEL_REF << 7)\n-\t\t  + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x)));\n+\t\t  + CODE_LABEL_NUMBER (label_ref_label (x)));\n       return hash;\n \n     case SYMBOL_REF:\n@@ -2618,7 +2618,7 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n       return x == y;\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n@@ -3507,15 +3507,15 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t\t: lookup_as_function (folded_arg0, MINUS);\n \n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n-\t\t  && LABEL_REF_LABEL (XEXP (y, 1)) == LABEL_REF_LABEL (const_arg1))\n+\t\t  && label_ref_label (XEXP (y, 1)) == label_ref_label (const_arg1))\n \t\treturn XEXP (y, 0);\n \n \t      /* Now try for a CONST of a MINUS like the above.  */\n \t      if ((y = (GET_CODE (folded_arg0) == CONST ? folded_arg0\n \t\t\t: lookup_as_function (folded_arg0, CONST))) != 0\n \t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n \t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n-\t\t  && LABEL_REF_LABEL (XEXP (XEXP (y, 0), 1)) == LABEL_REF_LABEL (const_arg1))\n+\t\t  && label_ref_label (XEXP (XEXP (y, 0), 1)) == label_ref_label (const_arg1))\n \t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n@@ -3527,15 +3527,15 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t\t: lookup_as_function (folded_arg1, MINUS);\n \n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n-\t\t  && LABEL_REF_LABEL (XEXP (y, 1)) == LABEL_REF_LABEL (const_arg0))\n+\t\t  && label_ref_label (XEXP (y, 1)) == label_ref_label (const_arg0))\n \t\treturn XEXP (y, 0);\n \n \t      /* Now try for a CONST of a MINUS like the above.  */\n \t      if ((y = (GET_CODE (folded_arg1) == CONST ? folded_arg1\n \t\t\t: lookup_as_function (folded_arg1, CONST))) != 0\n \t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n \t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n-\t\t  && LABEL_REF_LABEL (XEXP (XEXP (y, 0), 1)) == LABEL_REF_LABEL (const_arg0))\n+\t\t  && label_ref_label (XEXP (XEXP (y, 0), 1)) == label_ref_label (const_arg0))\n \t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n@@ -6497,10 +6497,10 @@ check_for_label_ref (rtx_insn *insn)\n       if (GET_CODE (x) == LABEL_REF\n \t  && !LABEL_REF_NONLOCAL_P (x)\n \t  && (!JUMP_P (insn)\n-\t      || !label_is_jump_target_p (LABEL_REF_LABEL (x), insn))\n-\t  && LABEL_P (LABEL_REF_LABEL (x))\n-\t  && INSN_UID (LABEL_REF_LABEL (x)) != 0\n-\t  && !find_reg_note (insn, REG_LABEL_OPERAND, LABEL_REF_LABEL (x)))\n+\t      || !label_is_jump_target_p (label_ref_label (x), insn))\n+\t  && LABEL_P (label_ref_label (x))\n+\t  && INSN_UID (label_ref_label (x)) != 0\n+\t  && !find_reg_note (insn, REG_LABEL_OPERAND, label_ref_label (x)))\n \treturn true;\n     }\n   return false;"}, {"sha": "a35dca8d79e458e65df3663f9d741de2f9cc6bce", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -945,7 +945,7 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, machine_mode memmode)\n       return rtx_equal_p (ENTRY_VALUE_EXP (x), ENTRY_VALUE_EXP (y));\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n \n     case REG:\n       return REGNO (x) == REGNO (y);\n@@ -1154,7 +1154,7 @@ cselib_hash_rtx (rtx x, int create, machine_mode memmode)\n       /* We don't hash on the address of the CODE_LABEL to avoid bootstrap\n \t differences and differences between each stage's debugging dumps.  */\n       hash += (((unsigned int) LABEL_REF << 7)\n-\t       + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x)));\n+\t       + CODE_LABEL_NUMBER (label_ref_label (x)));\n       return hash ? hash : (unsigned int) LABEL_REF;\n \n     case SYMBOL_REF:"}, {"sha": "8afcfbec98a6a87fad7bff66c643ec7956c08879", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -3601,8 +3601,8 @@ mark_label_nuses (rtx x)\n   const char *fmt;\n \n   code = GET_CODE (x);\n-  if (code == LABEL_REF && LABEL_P (LABEL_REF_LABEL (x)))\n-    LABEL_NUSES (LABEL_REF_LABEL (x))++;\n+  if (code == LABEL_REF && LABEL_P (label_ref_label (x)))\n+    LABEL_NUSES (label_ref_label (x))++;\n \n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)"}, {"sha": "b65eee6e9218aaec6e598e79ccc26e9797e2b847", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -321,7 +321,7 @@ convert_memory_address_addr_space_1 (machine_mode to_mode ATTRIBUTE_UNUSED,\n       break;\n \n     case LABEL_REF:\n-      temp = gen_rtx_LABEL_REF (to_mode, LABEL_REF_LABEL (x));\n+      temp = gen_rtx_LABEL_REF (to_mode, label_ref_label (x));\n       LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n       return temp;\n "}, {"sha": "36ef755aec822ece44e7b9163a738e5d3c66bfaa", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -3826,7 +3826,7 @@ output_asm_label (rtx x)\n   char buf[256];\n \n   if (GET_CODE (x) == LABEL_REF)\n-    x = LABEL_REF_LABEL (x);\n+    x = label_ref_label (x);\n   if (LABEL_P (x)\n       || (NOTE_P (x)\n \t  && NOTE_KIND (x) == NOTE_INSN_DELETED_LABEL))\n@@ -3917,7 +3917,7 @@ output_addr_const (FILE *file, rtx x)\n       break;\n \n     case LABEL_REF:\n-      x = LABEL_REF_LABEL (x);\n+      x = label_ref_label (x);\n       /* Fall through.  */\n     case CODE_LABEL:\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));"}, {"sha": "652ee911e5b44ee81e8707ad33673e235971f46a", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -2643,10 +2643,10 @@ add_label_notes (rtx x, rtx_insn *insn)\n \t such a LABEL_REF, so we don't have to handle REG_LABEL_TARGET\n \t notes.  */\n       gcc_assert (!JUMP_P (insn));\n-      add_reg_note (insn, REG_LABEL_OPERAND, LABEL_REF_LABEL (x));\n+      add_reg_note (insn, REG_LABEL_OPERAND, label_ref_label (x));\n \n-      if (LABEL_P (LABEL_REF_LABEL (x)))\n-\tLABEL_NUSES (LABEL_REF_LABEL (x))++;\n+      if (LABEL_P (label_ref_label (x)))\n+\tLABEL_NUSES (label_ref_label (x))++;\n \n       return;\n     }"}, {"sha": "888fa3a39e81a43627510bfdecb9e9fb29021437", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -94,8 +94,8 @@ walk_insn_part (rtx part, int recog_p, int non_pc_set_src)\n       break;\n \n     case LABEL_REF:\n-      if (GET_CODE (LABEL_REF_LABEL (part)) == MATCH_OPERAND\n-\t  || GET_CODE (LABEL_REF_LABEL (part)) == MATCH_DUP)\n+      if (GET_CODE (XEXP (part, 0)) == MATCH_OPERAND\n+\t  || GET_CODE (XEXP (part, 0)) == MATCH_DUP)\n \tbreak;\n       return;\n "}, {"sha": "a8e8c22340cafd939ec2d06da39921b9c8fe1bda", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -732,9 +732,9 @@ validate_pattern (rtx pattern, md_rtx_info *info, rtx set, int set_code)\n       return;\n \n     case LABEL_REF:\n-      if (GET_MODE (LABEL_REF_LABEL (pattern)) != VOIDmode)\n+      if (GET_MODE (XEXP (pattern, 0)) != VOIDmode)\n \terror_at (info->loc, \"operand to label_ref %smode not VOIDmode\",\n-\t\t  GET_MODE_NAME (GET_MODE (LABEL_REF_LABEL (pattern))));\n+\t\t  GET_MODE_NAME (GET_MODE (XEXP (pattern, 0))));\n       break;\n \n     default:"}, {"sha": "dbe2485987019e06022f59b365924ae62ed94d57", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -436,7 +436,7 @@ cond_exec_get_condition (rtx_insn *jump)\n   /* If this branches to JUMP_LABEL when the condition is false,\n      reverse the condition.  */\n   if (GET_CODE (XEXP (test_if, 2)) == LABEL_REF\n-      && LABEL_REF_LABEL (XEXP (test_if, 2)) == JUMP_LABEL (jump))\n+      && label_ref_label (XEXP (test_if, 2)) == JUMP_LABEL (jump))\n     {\n       enum rtx_code rev = reversed_comparison_code (cond, jump);\n       if (rev == UNKNOWN)\n@@ -881,7 +881,7 @@ noce_emit_store_flag (struct noce_if_info *if_info, rtx x, int reversep,\n       rtx set = pc_set (if_info->jump);\n       cond = XEXP (SET_SRC (set), 0);\n       if (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-\t  && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump))\n+\t  && label_ref_label (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump))\n \treversep = !reversep;\n       if (if_info->then_else_reversed)\n \treversep = !reversep;\n@@ -2348,7 +2348,7 @@ noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n   cond = XEXP (SET_SRC (set), 0);\n   reverse\n     = GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-      && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump);\n+      && label_ref_label (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump);\n   if (if_info->then_else_reversed)\n     reverse = !reverse;\n \n@@ -2955,7 +2955,7 @@ noce_get_condition (rtx_insn *jump, rtx_insn **earliest, bool then_else_reversed\n   /* If this branches to JUMP_LABEL when the condition is false,\n      reverse the condition.  */\n   reverse = (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-\t     && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump));\n+\t     && label_ref_label (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump));\n \n   /* We may have to reverse because the caller's if block is not canonical,\n      i.e. the THEN block isn't the fallthrough block for the TEST block"}, {"sha": "fafef05f5b276330029666a0ba950de09c63807b", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -284,7 +284,7 @@ maybe_propagate_label_ref (rtx_insn *jump_insn, rtx_insn *prev_nonjump_insn)\n \t     CODE_LABEL in the LABEL_REF of the \"set\".  We can\n \t     conveniently use it for the marker function, which\n \t     requires a LABEL_REF wrapping.  */\n-\t  gcc_assert (XEXP (label_note, 0) == LABEL_REF_LABEL (SET_SRC (label_set)));\n+\t  gcc_assert (XEXP (label_note, 0) == label_ref_label (SET_SRC (label_set)));\n \n \t  mark_jump_label_1 (label_set, jump_insn, false, true);\n \n@@ -1151,7 +1151,7 @@ mark_jump_label_1 (rtx x, rtx_insn *insn, bool in_mem, bool is_target)\n \n     case LABEL_REF:\n       {\n-\trtx label = LABEL_REF_LABEL (x);\n+\trtx_insn *label = label_ref_label (x);\n \n \t/* Ignore remaining references to unreachable labels that\n \t   have been deleted.  */\n@@ -1165,7 +1165,7 @@ mark_jump_label_1 (rtx x, rtx_insn *insn, bool in_mem, bool is_target)\n \tif (LABEL_REF_NONLOCAL_P (x))\n \t  break;\n \n-\tLABEL_REF_LABEL (x) = label;\n+\tset_label_ref_label (x, label);\n \tif (! insn || ! insn->deleted ())\n \t  ++LABEL_NUSES (label);\n \n@@ -1464,7 +1464,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n   int i;\n   const char *fmt;\n \n-  if ((code == LABEL_REF && LABEL_REF_LABEL (x) == olabel)\n+  if ((code == LABEL_REF && label_ref_label (x) == olabel)\n       || x == olabel)\n     {\n       x = redirect_target (nlabel);\n@@ -1477,7 +1477,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n   if (code == SET && SET_DEST (x) == pc_rtx\n       && ANY_RETURN_P (nlabel)\n       && GET_CODE (SET_SRC (x)) == LABEL_REF\n-      && LABEL_REF_LABEL (SET_SRC (x)) == olabel)\n+      && label_ref_label (SET_SRC (x)) == olabel)\n     {\n       validate_change (insn, loc, nlabel, 1);\n       return;\n@@ -1801,16 +1801,14 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n     case LABEL_REF:\n       /* We can't assume nonlocal labels have their following insns yet.  */\n       if (LABEL_REF_NONLOCAL_P (x) || LABEL_REF_NONLOCAL_P (y))\n-\treturn LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+\treturn label_ref_label (x) == label_ref_label (y);\n \n       /* Two label-refs are equivalent if they point at labels\n \t in the same position in the instruction stream.  */\n       else\n \t{\n-\t  rtx_insn *xi = next_nonnote_nondebug_insn\n-\t    (as_a<rtx_insn *> (LABEL_REF_LABEL (x)));\n-\t  rtx_insn *yi = next_nonnote_nondebug_insn\n-\t    (as_a<rtx_insn *> (LABEL_REF_LABEL (y)));\n+\t  rtx_insn *xi = next_nonnote_nondebug_insn (label_ref_label (x));\n+\t  rtx_insn *yi = next_nonnote_nondebug_insn (label_ref_label (y));\n \t  while (xi && LABEL_P (xi))\n \t    xi = next_nonnote_nondebug_insn (xi);\n \t  while (yi && LABEL_P (yi))"}, {"sha": "b592168f00104a5b9649e3eb47e4544e78a59f8e", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -739,7 +739,7 @@ operands_match_p (rtx x, rtx y, int y_hard_regno)\n       return false;\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n "}, {"sha": "e812745d9450096af236242e93235f7f03736a64", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1432,7 +1432,7 @@ print_value (pretty_printer *pp, const_rtx x, int verbose)\n       pp_printf (pp, \"`%s'\", XSTR (x, 0));\n       break;\n     case LABEL_REF:\n-      pp_printf (pp, \"L%d\", INSN_UID (LABEL_REF_LABEL (x)));\n+      pp_printf (pp, \"L%d\", INSN_UID (label_ref_label (x)));\n       break;\n     case CONST:\n     case HIGH:"}, {"sha": "3ec4b310f50f92af84e184907e63e97eed28fcec", "filename": "gcc/reload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -2318,7 +2318,7 @@ operands_match_p (rtx x, rtx y)\n       return 0;\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n \n@@ -4218,17 +4218,17 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t     this instruction.  */\n \t  if (GET_CODE (substitution) == LABEL_REF\n \t      && !find_reg_note (insn, REG_LABEL_OPERAND,\n-\t\t\t\t LABEL_REF_LABEL (substitution))\n+\t\t\t\t label_ref_label (substitution))\n \t      /* For a JUMP_P, if it was a branch target it must have\n \t\t already been recorded as such.  */\n \t      && (!JUMP_P (insn)\n-\t\t  || !label_is_jump_target_p (LABEL_REF_LABEL (substitution),\n+\t\t  || !label_is_jump_target_p (label_ref_label (substitution),\n \t\t\t\t\t      insn)))\n \t    {\n \t      add_reg_note (insn, REG_LABEL_OPERAND,\n-\t\t\t    LABEL_REF_LABEL (substitution));\n-\t      if (LABEL_P (LABEL_REF_LABEL (substitution)))\n-\t\t++LABEL_NUSES (LABEL_REF_LABEL (substitution));\n+\t\t\t    label_ref_label (substitution));\n+\t      if (LABEL_P (label_ref_label (substitution)))\n+\t\t++LABEL_NUSES (label_ref_label (substitution));\n \t    }\n \n \t}"}, {"sha": "4b9c7c7dcaff7ef5a5a27f850f1755bdb0b35e3d", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -2319,7 +2319,7 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n       if (LABEL_REF_NONLOCAL_P (x))\n \treturn;\n \n-      x = LABEL_REF_LABEL (x);\n+      x = label_ref_label (x);\n \n       /* fall through */\n \n@@ -2421,13 +2421,13 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n \tcase IF_THEN_ELSE:\n \t  tem = XEXP (SET_SRC (x), 1);\n \t  if (GET_CODE (tem) == LABEL_REF)\n-\t    set_label_offsets (LABEL_REF_LABEL (tem), insn, initial_p);\n+\t    set_label_offsets (label_ref_label (tem), insn, initial_p);\n \t  else if (GET_CODE (tem) != PC && GET_CODE (tem) != RETURN)\n \t    break;\n \n \t  tem = XEXP (SET_SRC (x), 2);\n \t  if (GET_CODE (tem) == LABEL_REF)\n-\t    set_label_offsets (LABEL_REF_LABEL (tem), insn, initial_p);\n+\t    set_label_offsets (label_ref_label (tem), insn, initial_p);\n \t  else if (GET_CODE (tem) != PC && GET_CODE (tem) != RETURN)\n \t    break;\n \t  return;"}, {"sha": "799d27b064f3ca3e63ab0bc19d8e953ca2f3f664", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -878,20 +878,20 @@ get_branch_condition (const rtx_insn *insn, rtx target)\n     return 0;\n \n   src = SET_SRC (pat);\n-  if (GET_CODE (src) == LABEL_REF && LABEL_REF_LABEL (src) == target)\n+  if (GET_CODE (src) == LABEL_REF && label_ref_label (src) == target)\n     return const_true_rtx;\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 2) == pc_rtx\n \t   && ((GET_CODE (XEXP (src, 1)) == LABEL_REF\n-\t        && LABEL_REF_LABEL (XEXP (src, 1)) == target)\n+\t\t&& label_ref_label (XEXP (src, 1)) == target)\n \t       || (ANY_RETURN_P (XEXP (src, 1)) && XEXP (src, 1) == target)))\n     return XEXP (src, 0);\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 1) == pc_rtx\n \t   && ((GET_CODE (XEXP (src, 2)) == LABEL_REF\n-\t\t&& LABEL_REF_LABEL (XEXP (src, 2)) == target)\n+\t\t&& label_ref_label (XEXP (src, 2)) == target)\n \t       || (ANY_RETURN_P (XEXP (src, 2)) && XEXP (src, 2) == target)))\n     {\n       enum rtx_code rev;"}, {"sha": "da31fd2e45d41be2f242eabc21490030af1564a6", "filename": "gcc/rtl-tests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-tests.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -87,7 +87,7 @@ test_uncond_jump ()\n \t\t\t\t\t\t label));\n   ASSERT_EQ (SET, jump_pat->code);\n   ASSERT_EQ (LABEL_REF, SET_SRC (jump_pat)->code);\n-  ASSERT_EQ (label, LABEL_REF_LABEL (SET_SRC (jump_pat)));\n+  ASSERT_EQ (label, label_ref_label (SET_SRC (jump_pat)));\n   ASSERT_EQ (PC, SET_DEST (jump_pat)->code);\n \n   verify_print_pattern (\"pc=L0\", jump_pat);"}, {"sha": "3fac1931f3ff8ec869f3c284c5d7ec27d36cae0c", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -424,7 +424,7 @@ rtx_equal_p_cb (const_rtx x, const_rtx y, rtx_equal_p_callback_function cb)\n       return (REGNO (x) == REGNO (y));\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n@@ -561,7 +561,7 @@ rtx_equal_p (const_rtx x, const_rtx y)\n       return (REGNO (x) == REGNO (y));\n \n     case LABEL_REF:\n-      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n+      return label_ref_label (x) == label_ref_label (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);"}, {"sha": "9b223c9dcee7e4f372f921cd541fd5fb7866b8a6", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1767,8 +1767,19 @@ inline void rtx_jump_insn::set_jump_target (rtx_code_label *target)\n #define LABEL_REFS(LABEL) XCEXP (LABEL, 3, CODE_LABEL)\n \n /* Get the label that a LABEL_REF references.  */\n-#define LABEL_REF_LABEL(LABREF) XCEXP (LABREF, 0, LABEL_REF)\n+static inline rtx_insn *\n+label_ref_label (const_rtx ref)\n+{\n+  return as_a<rtx_insn *> (XCEXP (ref, 0, LABEL_REF));\n+}\n+\n+/* Set the label that LABEL_REF ref refers to.  */\n \n+static inline void\n+set_label_ref_label (rtx ref, rtx_insn *label)\n+{\n+  XCEXP (ref, 0, LABEL_REF) = label;\n+}\n \f\n /* For a REG rtx, REGNO extracts the register number.  REGNO can only\n    be used on RHS.  Use SET_REGNO to change the value.  */"}, {"sha": "90b55b6adf0f395583a27208a5169210c829bb1e", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -1001,7 +1001,7 @@ reg_mentioned_p (const_rtx reg, const_rtx in)\n     return 1;\n \n   if (GET_CODE (in) == LABEL_REF)\n-    return reg == LABEL_REF_LABEL (in);\n+    return reg == label_ref_label (in);\n \n   code = GET_CODE (in);\n \n@@ -3085,7 +3085,7 @@ rtx_referenced_p (const_rtx x, const_rtx body)\n \t/* Check if a label_ref Y refers to label X.  */\n \tif (GET_CODE (y) == LABEL_REF\n \t    && LABEL_P (x)\n-\t    && LABEL_REF_LABEL (y) == x)\n+\t    && label_ref_label (y) == x)\n \t  return true;\n \n \tif (rtx_equal_p (x, y))\n@@ -5547,7 +5547,7 @@ get_condition (rtx_insn *jump, rtx_insn **earliest, int allow_cc_mode,\n      the condition.  */\n   reverse\n     = GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-      && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump);\n+      && label_ref_label (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump);\n \n   return canonicalize_condition (jump, cond, reverse, earliest, NULL_RTX,\n \t\t\t\t allow_cc_mode, valid_at_insn_p);"}, {"sha": "6a7ffc22e2239c76fac267e9ef8abdb04c76c15f", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a121a757f20a4807d47e1d0c7418145b147d69/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=04a121a757f20a4807d47e1d0c7418145b147d69", "patch": "@@ -2983,7 +2983,7 @@ const_hash_1 (const tree exp)\n \n \t  case LABEL_REF:\n \t    hi = (value.offset\n-\t\t  + CODE_LABEL_NUMBER (LABEL_REF_LABEL (value.base)) * 13);\n+\t\t  + CODE_LABEL_NUMBER (label_ref_label (value.base)) * 13);\n \t    break;\n \n \t  default:\n@@ -3172,8 +3172,8 @@ compare_constant (const tree t1, const tree t2)\n \t    break;\n \n \t  case LABEL_REF:\n-\t    ret = (CODE_LABEL_NUMBER (LABEL_REF_LABEL (value1.base))\n-\t           == CODE_LABEL_NUMBER (LABEL_REF_LABEL (value2.base)));\n+\t    ret = (CODE_LABEL_NUMBER (label_ref_label (value1.base))\n+\t\t   == CODE_LABEL_NUMBER (label_ref_label (value2.base)));\n \t    break;\n \n \t  default:\n@@ -3611,7 +3611,7 @@ const_rtx_hash_1 (const_rtx x)\n       break;\n \n     case LABEL_REF:\n-      h = h * 251 + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x));\n+      h = h * 251 + CODE_LABEL_NUMBER (label_ref_label (x));\n       break;\n \n     case UNSPEC:\n@@ -3893,11 +3893,13 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n       /* FALLTHRU  */\n \n     case LABEL_REF:\n-      tmp = LABEL_REF_LABEL (tmp);\n-      gcc_assert (!as_a<rtx_insn *> (tmp)->deleted ());\n-      gcc_assert (!NOTE_P (tmp)\n-\t\t  || NOTE_KIND (tmp) != NOTE_INSN_DELETED);\n-      break;\n+      {\n+\trtx_insn *insn = label_ref_label (tmp);\n+\tgcc_assert (!insn->deleted ());\n+\tgcc_assert (!NOTE_P (insn)\n+\t\t    || NOTE_KIND (insn) != NOTE_INSN_DELETED);\n+\tbreak;\n+      }\n \n     default:\n       break;"}]}