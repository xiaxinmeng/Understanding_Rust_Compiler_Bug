{"sha": "54da4898cc9011de71f5458b7313e06840edeb8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkYTQ4OThjYzkwMTFkZTcxZjU0NThiNzMxM2UwNjg0MGVkZWI4ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-20T03:05:31Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-20T03:05:31Z"}, "message": "mknumeric_limits: Add static defintions, format.\n\n\n2001-06-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* mknumeric_limits: Add static defintions, format.\n\t* testsuite/18_support/numeric_limits.cc (test02): Add test.\n\n\t* include/c_std/bits/std_cwchar.h: Include ctime.\n\t* testsuite/17_intro/header_cwchar.cc : Check.\n\n\t* include/c_std/bits/std_cwctype.h: Inject wctype.\n\nFrom-SVN: r43466", "tree": {"sha": "3290a5f379f7019a16033b44dfb5dc3ee2ca1465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3290a5f379f7019a16033b44dfb5dc3ee2ca1465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54da4898cc9011de71f5458b7313e06840edeb8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54da4898cc9011de71f5458b7313e06840edeb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54da4898cc9011de71f5458b7313e06840edeb8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54da4898cc9011de71f5458b7313e06840edeb8e/comments", "author": null, "committer": null, "parents": [{"sha": "78373aded05877d7222c488f672a5f94f1ee6745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78373aded05877d7222c488f672a5f94f1ee6745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78373aded05877d7222c488f672a5f94f1ee6745"}], "stats": {"total": 269, "additions": 207, "deletions": 62}, "files": [{"sha": "0bf66e831d3d38673c97267b5c5e6dd87caabdc9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -1,3 +1,14 @@\n+2001-06-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* mknumeric_limits: Add static defintions, format.\n+\t* testsuite/18_support/numeric_limits.cc (test02): Add test.\n+\n+\t* include/c_std/bits/std_cwchar.h: Include ctime.\n+\t* testsuite/17_intro/header_cwchar.cc : Check.\n+\n+\t* include/c_std/bits/std_cwctype.h: Inject wctype.\n+\t* testsuite/17_intro/header_cwctype.cc: Update.\n+\n 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_raw_storage_iter.h: Format. Correct derivation."}, {"sha": "fffd37acdc9575766256fcba35e84a0e94be94ec", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -28,14 +28,15 @@\n // the GNU General Public License.\n \n //\n-// ISO C++ 14882: ???\n+// ISO C++ 14882: 21.4\n //\n \n #ifndef _CPP_CWCHAR\n #define _CPP_CWCHAR 1\n \n #include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n+#include <bits/std_ctime.h>\n \n #if _GLIBCPP_HAVE_WCHAR_H\n #pragma GCC system_header"}, {"sha": "53de4d3a1b8fc465c745f5b347c2c1b81899c8cc", "filename": "libstdc++-v3/include/c_std/bits/std_cwctype.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -56,6 +56,7 @@\n #undef towupper\n #undef towctrans\n #undef wctrans\n+#undef wctype\n \n namespace std\n {\n@@ -82,6 +83,7 @@ namespace std\n   using ::towupper;\n   using ::towctrans;\n   using ::wctrans;\n+  using ::wctype;\n }\n \n #endif "}, {"sha": "53d4106be45126fafcd49981d120514e03918b89", "filename": "libstdc++-v3/mknumeric_limits", "status": "modified", "additions": 151, "deletions": 57, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -99,67 +99,159 @@ cat <<EOF > $OUT_H-t\n #include <bits/c++config.h>\n #include <bits/std_cfloat.h>\n \n-namespace std {\n-\n-    enum float_round_style {\n-        round_indeterminate       = -1,\n-        round_toward_zero         = 0,\n-        round_to_nearest          = 1,\n-        round_toward_infinity     = 2,\n-        round_toward_neg_infinity = 3\n+namespace std\n+{\n+  enum float_round_style \n+  {\n+    round_indeterminate       = -1,\n+    round_toward_zero         = 0,\n+    round_to_nearest          = 1,\n+    round_toward_infinity     = 2,\n+    round_toward_neg_infinity = 3\n+  };\n+\n+  enum float_denorm_style \n+  {\n+    denorm_indeterminate = -1,\n+    denorm_absent        = 0,\n+    denorm_present       = 1\n+  };\n+\n+  template<typename _Tp> \n+    struct numeric_limits \n+    {\n+      static const bool is_specialized = false;\n+\n+      static _Tp min() throw() { return static_cast<_Tp>(0); }\n+      static _Tp max() throw() { return static_cast<_Tp>(0); }\n+\n+      static const int digits = 0;\n+      static const int digits10 = 0;\n+      static const bool is_signed = false;\n+      static const bool is_integer = false;\n+      static const bool is_exact = false;\n+      static const int radix = 0;\n+\n+      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n+      static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n+      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n+      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n+      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = false;\n+      static const bool is_modulo = false;\n+\n+      static const bool traps = false;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n     };\n \n-    enum float_denorm_style {\n-        denorm_indeterminate = -1,\n-        denorm_absent        = 0,\n-        denorm_present       = 1\n-    };\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_specialized;\n \n-    template<typename _Tp> struct numeric_limits {\n-        static const bool is_specialized = false;\n-\n-        static _Tp min() throw() { return static_cast<_Tp>(0); }\n-        static _Tp max() throw() { return static_cast<_Tp>(0); }\n-\n-        static const int digits = 0;\n-        static const int digits10 = 0;\n-        static const bool is_signed = false;\n-        static const bool is_integer = false;\n-        static const bool is_exact = false;\n-        static const int radix = 0;\n-\n-        static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n-        static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n-        static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n-        static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n-        static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = false;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::digits;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::digits10;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_signed;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_integer;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_exact;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::radix;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::min_exponent;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::min_exponent10;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::max_exponent;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::max_exponent10;\n \n-    template<typename _Tp> _Tp __limits_infinity();\n-    template<typename _Tp> _Tp __limits_quiet_NaN();\n-    template<typename _Tp> _Tp __limits_signaling_NaN();\n-    template<typename _Tp> _Tp __limits_denorm_min();\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_infinity;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_quiet_NaN;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_signaling_NaN;\n+\n+  template<typename _Tp> \n+    const float_denorm_style\n+    numeric_limits<_Tp>::has_denorm;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_denorm_loss;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_iec559;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_bounded;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_modulo;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::traps;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::tinyness_before;\n+\n+  template<typename _Tp> \n+    const float_round_style\n+    numeric_limits<_Tp>::round_style;\n+\n+  template<typename _Tp> _Tp __limits_infinity();\n+  template<typename _Tp> _Tp __limits_quiet_NaN();\n+  template<typename _Tp> _Tp __limits_signaling_NaN();\n+  template<typename _Tp> _Tp __limits_denorm_min();\n \n EOF\n \n@@ -271,3 +363,5 @@ EOF\n \n mv $OUT_C-t $OUT_C\n mv $OUT_H-t $OUT_H\n+\n+"}, {"sha": "0f9974ddb1374b351686deacc1348abcaf9ef805", "filename": "libstdc++-v3/testsuite/17_intro/header_cwchar.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -27,5 +27,8 @@ int main(void)\n {\n   // Make sure size_t is in namespace std\n   std::size_t i = 5;\n+\n+  std::tm mytime;\n+\n   return 0;\n }"}, {"sha": "ba315b49ce0dcb05b232f3a45c3f6c2f95ba3cd9", "filename": "libstdc++-v3/testsuite/17_intro/header_cwctype.cc", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -22,11 +22,33 @@\n \n #if _GLIBCPP_USE_WCHAR_T\n #include <cwctype>\n-  // Make sure wint_t is in namespace std\n-  std::wint_t i = 5;\n+// Make sure wint_t is in namespace std\n+std::wint_t i = 5;\n+\n+// Make sure table 46 is in namespace std.\n+using std::wctype_t;\n+using std::wctrans_t;\n+using std::iswalpha;\n+using std::iswupper;\n+using std::iswlower;\n+using std::iswdigit;\n+using std::iswxdigit;\n+using std::iswalnum;\n+using std::iswspace;\n+using std::iswpunct;\n+using std::iswprint;\n+using std::iswgraph;\n+using std::iswcntrl;\n+using std::iswctype;\n+using std::towctrans;\n+using std::towlower;\n+using std::towupper;\n+using std::wctrans;\n+using std::wctype;\n #endif\n \n int main(void)\n {\n   return 0;\n }\n+"}, {"sha": "4ff7f4a70591c2e585badf55f8238a0e282b34ec", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da4898cc9011de71f5458b7313e06840edeb8e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=54da4898cc9011de71f5458b7313e06840edeb8e", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-23 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation\n+// Copyright (C) 1999, 2001 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -80,9 +80,21 @@ bool test01()\n   return test;\n }\n \n+// test linkage of the generic bits\n+void test02()\n+{\n+  typedef std::numeric_limits<B> b_nl_type;\n+  \n+  // Should probably do all of them...\n+  const int* pi1 = &b_nl_type::digits;\n+  const int* pi2 = &b_nl_type::digits10;\n+  const int* pi3 = &b_nl_type::max_exponent10;\n+  const bool* pb1 = &b_nl_type::traps;\n+}\n+\n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}]}