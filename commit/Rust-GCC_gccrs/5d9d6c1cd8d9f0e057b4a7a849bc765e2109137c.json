{"sha": "5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ZDZjMWNkOGQ5ZjBlMDU3YjRhN2E4NDliYzc2NWUyMTA5MTM3Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-26T10:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-27T20:44:27Z"}, "message": "c++: Allow GNU attributes before lambda -> [PR90333]\n\nIn my 9.3/10 patch for 90333 I allowed attributes between [] and (), and\nafter the trailing return type, but not in the place that GCC 8 expected\nthem, and we've gotten several bug reports about that.  So let's allow them\nthere, as well.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90333\n\t* parser.c (cp_parser_lambda_declarator_opt): Accept GNU attributes\n\tbetween () and ->.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90333\n\t* g++.dg/ext/attr-lambda3.C: New test.", "tree": {"sha": "4a578cbc7ef322b2a6dbd134d0d8a37b3d36098b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a578cbc7ef322b2a6dbd134d0d8a37b3d36098b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a938e4616d62b020760e715902ee5edc0206498d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a938e4616d62b020760e715902ee5edc0206498d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a938e4616d62b020760e715902ee5edc0206498d"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "bb1499ab7411b7d28393bed96bdc497c2d5a034f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "patch": "@@ -11391,7 +11391,12 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       omitted_parms_loc = UNKNOWN_LOCATION;\n     }\n \n-  std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+  /* GCC 8 accepted attributes here, and this is the place for standard C++11\n+     attributes that appertain to the function type.  */\n+  if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n+    gnu_attrs = cp_parser_gnu_attributes_opt (parser);\n+  else\n+    std_attrs = cp_parser_std_attribute_spec_seq (parser);\n \n   /* Parse optional trailing return type.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n@@ -11405,8 +11410,10 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       return_type = cp_parser_trailing_type_id (parser);\n     }\n \n+  /* Also allow GNU attributes at the very end of the declaration, the usual\n+     place for GNU attributes.  */\n   if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n-    gnu_attrs = cp_parser_gnu_attributes_opt (parser);\n+    gnu_attrs = chainon (gnu_attrs, cp_parser_gnu_attributes_opt (parser));\n \n   if (has_param_list)\n     {"}, {"sha": "f9c3ec11fe9f00b465bbf3879ecf269db86a483b", "filename": "gcc/testsuite/g++.dg/ext/attr-lambda3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda3.C?ref=5d9d6c1cd8d9f0e057b4a7a849bc765e2109137c", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/90333\n+// { dg-do compile { target c++11 } }\n+\n+auto x = []() __attribute__((always_inline)) -> int { return 0; }"}]}