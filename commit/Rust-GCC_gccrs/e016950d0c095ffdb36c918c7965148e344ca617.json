{"sha": "e016950d0c095ffdb36c918c7965148e344ca617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxNjk1MGQwYzA5NWZmZGIzNmM5MThjNzk2NTE0OGUzNDRjYTYxNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-22T05:32:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-22T05:32:38Z"}, "message": "Warning fixes:\n\n        * reload1.c (reload_cse_regs): Cast first arg of `bzero' to char *.\n        * sdbout.c: Include output.h and toplev.h.\n        (PUT_SDB_INT_VAL): Use HOST_WIDE_INT_PRINT_DEV to print argument\n        `a'.  Cast `a' to HOST_WIDE_INT to force it to always be so.\n        (PUT_SDB_SIZE): Likewise.\n        * sdbout.h (sdbout_mark_begin_function): Add prototype.\n        * stmt.c (check_for_full_enumeration_handling): Cast argument of\n        `warning' to long and use %ld specifier.\n        * toplev.c (main): Likewise for `fprintf'.\n        * toplev.h (output_file_directive): Add prototype.\n        * unroll.c (unroll_loop): Use HOST_WIDE_INT_PRINT_DEC specifier in\n        call to `fprintf'.\n        (precondition_loop_p): Likewise.\n        * varasm.c Include sdbout.h.\n        (assemble_static_space): Move sometimes-unused variable `rounded'\n        into the scope in which it is used.\n\nFrom-SVN: r20651", "tree": {"sha": "cad4049526361147cf85cf7b5d756642a9cf9c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cad4049526361147cf85cf7b5d756642a9cf9c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e016950d0c095ffdb36c918c7965148e344ca617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e016950d0c095ffdb36c918c7965148e344ca617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e016950d0c095ffdb36c918c7965148e344ca617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e016950d0c095ffdb36c918c7965148e344ca617/comments", "author": null, "committer": null, "parents": [{"sha": "296433e1a9e3c644fec1f1805dd595555683d9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296433e1a9e3c644fec1f1805dd595555683d9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296433e1a9e3c644fec1f1805dd595555683d9a0"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "99b22c7a6224baf025d7f29a1d6a46a64639d14a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -21,6 +21,30 @@ Mon Jun 22 08:18:46 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \tand use %ld specifier.\n \t(adorn_decl): Likewise, twice.\n \n+\t* reload1.c (reload_cse_regs): Cast first arg of `bzero' to char *.\n+\n+\t* sdbout.c: Include output.h and toplev.h.\n+\t(PUT_SDB_INT_VAL): Use HOST_WIDE_INT_PRINT_DEV to print argument\n+\t`a'.  Cast `a' to HOST_WIDE_INT to force it to always be so.\n+\t(PUT_SDB_SIZE): Likewise.\n+\n+\t* sdbout.h (sdbout_mark_begin_function): Add prototype.\n+\n+\t* stmt.c (check_for_full_enumeration_handling): Cast argument of\n+\t`warning' to long and use %ld specifier.\n+\n+\t* toplev.c (main): Likewise for `fprintf'.\n+\n+\t* toplev.h (output_file_directive): Add prototype.\n+\n+\t* unroll.c (unroll_loop): Use HOST_WIDE_INT_PRINT_DEC specifier in\n+\tcall to `fprintf'.\n+\t(precondition_loop_p): Likewise.\n+\n+\t* varasm.c Include sdbout.h.\n+\t(assemble_static_space): Move sometimes-unused variable `rounded'\n+\tinto the scope in which it is used. \n+\n Sun Jun 21 17:05:34 1998  Dave Love  <d.love@dl.ac.uk>\n \n \t* Makefile.in (install-info): Use install-info program if"}, {"sha": "3d0c3cb1beaa0bf1121608f748c95df8ea5a0fbf", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -8171,7 +8171,7 @@ reload_cse_regs (first)\n   init_alias_analysis ();\n \n   reg_values = (rtx *) alloca (FIRST_PSEUDO_REGISTER * sizeof (rtx));\n-  bzero (reg_values, FIRST_PSEUDO_REGISTER * sizeof (rtx));\n+  bzero ((char *)reg_values, FIRST_PSEUDO_REGISTER * sizeof (rtx));\n \n   /* Create our EXPR_LIST structures on reload_obstack, so that we can\n      free them when we are done.  */"}, {"sha": "62559a93acffd8f84bf3871ac5d35366d55d828a", "filename": "gcc/sdbout.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -52,6 +52,8 @@ AT&T C compiler.  From the example below I would conclude the following:\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"reload.h\"\n+#include \"output.h\"\n+#include \"toplev.h\"\n \n /* Mips systems use the SDB functions to dump out symbols, but do not\n    supply usable syms.h include files.  Which syms.h file to use is a\n@@ -171,7 +173,13 @@ static void sdbout_reg_parms\t\tPROTO((tree));\n #endif\n \n #ifndef PUT_SDB_INT_VAL\n-#define PUT_SDB_INT_VAL(a) fprintf (asm_out_file, \"\\t.val\\t%d%s\", (a), SDB_DELIM)\n+#define PUT_SDB_INT_VAL(a) \\\n+ do {\t\t\t\t\t\t\t\t\t\\\n+   fputs (\"\\t.val\\t\", asm_out_file);\t\t       \t\t\t\\\n+   fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT)(a));\t\\\n+   fprintf (asm_out_file, \"%s\", SDB_DELIM);\t\t\t\t\\\n+ } while (0)\n+\n #endif\n \n #ifndef PUT_SDB_VAL\n@@ -201,7 +209,12 @@ do { fprintf (asm_out_file, \"\\t.def\\t\");\t\\\n #endif\n \n #ifndef PUT_SDB_SIZE\n-#define PUT_SDB_SIZE(a) fprintf(asm_out_file, \"\\t.size\\t%d%s\", a, SDB_DELIM)\n+#define PUT_SDB_SIZE(a) \\\n+ do {\t\t\t\t\t\t\t\t\t\\\n+   fputs (\"\\t.size\\t\", asm_out_file);\t\t\t\t\t\\\n+   fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT)(a));\t\\\n+   fprintf (asm_out_file, \"%s\", SDB_DELIM);\t\t\t\t\\\n+ } while(0)\n #endif\n \n #ifndef PUT_SDB_START_DIM"}, {"sha": "dcbd6c1ce76ed053bc941b3cc54c26a68ecb56ea", "filename": "gcc/sdbout.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -35,4 +35,5 @@ extern void sdbout_end_epilogue\t\tPROTO ((void));\n \n extern void sdbout_start_new_source_file \tPROTO ((char *));\n extern void sdbout_resume_previous_source_file\tPROTO ((void));\n+extern void sdbout_mark_begin_function\tPROTO ((void));\n "}, {"sha": "feeea1716936dd76f0e71ce6d81ce32833fcf2f9", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -4524,11 +4524,11 @@ check_for_full_enumeration_handling (type)\n \tif (!chain)\n \t  {\n \t    if (TYPE_NAME (type) == 0)\n-\t      warning (\"case value `%d' not in enumerated type\",\n-\t\t       TREE_INT_CST_LOW (n->low));\n+\t      warning (\"case value `%ld' not in enumerated type\",\n+\t\t       (long) TREE_INT_CST_LOW (n->low));\n \t    else\n-\t      warning (\"case value `%d' not in enumerated type `%s'\",\n-\t\t       TREE_INT_CST_LOW (n->low),\n+\t      warning (\"case value `%ld' not in enumerated type `%s'\",\n+\t\t       (long) TREE_INT_CST_LOW (n->low),\n \t\t       IDENTIFIER_POINTER ((TREE_CODE (TYPE_NAME (type))\n \t\t\t\t\t    == IDENTIFIER_NODE)\n \t\t\t\t\t   ? TYPE_NAME (type)\n@@ -4544,11 +4544,11 @@ check_for_full_enumeration_handling (type)\n \t    if (!chain)\n \t      {\n \t\tif (TYPE_NAME (type) == 0)\n-\t\t  warning (\"case value `%d' not in enumerated type\",\n-\t\t\t   TREE_INT_CST_LOW (n->high));\n+\t\t  warning (\"case value `%ld' not in enumerated type\",\n+\t\t\t   (long) TREE_INT_CST_LOW (n->high));\n \t\telse\n-\t\t  warning (\"case value `%d' not in enumerated type `%s'\",\n-\t\t\t   TREE_INT_CST_LOW (n->high),\n+\t\t  warning (\"case value `%ld' not in enumerated type `%s'\",\n+\t\t\t   (long) TREE_INT_CST_LOW (n->high),\n \t\t\t   IDENTIFIER_POINTER ((TREE_CODE (TYPE_NAME (type))\n \t\t\t\t\t\t== IDENTIFIER_NODE)\n \t\t\t\t\t       ? TYPE_NAME (type)"}, {"sha": "fb0245a0c3a287043c8e194240bc295d95bbc447", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -4410,8 +4410,7 @@ main (argc, argv, envp)\n     {\n       char *lim = (char *) sbrk (0);\n \n-      fprintf (stderr, \"Data size %d.\\n\",\n-\t       lim - (char *) &environ);\n+      fprintf (stderr, \"Data size %ld.\\n\", (long)(lim - (char *) &environ));\n       fflush (stderr);\n \n #ifndef __MSDOS__"}, {"sha": "d206000df06487ff6582f197064338335ed0d1a7", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -57,6 +57,7 @@ extern void set_float_handler PROTO((jmp_buf));\n \n #ifdef BUFSIZ\n extern void output_quoted_string\tPROTO ((FILE *, char *));\n+extern void output_file_directive\tPROTO ((FILE *, char *));\n #endif\n \n extern void fancy_abort\t\t\tPROTO ((void));"}, {"sha": "d390110073c9955056aac7fadea78d4424b3e791", "filename": "gcc/unroll.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -313,8 +313,11 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n     loop_n_iterations = 0;\n \n   if (loop_dump_stream && loop_n_iterations > 0)\n-    fprintf (loop_dump_stream,\n-\t     \"Loop unrolling: %d iterations.\\n\", loop_n_iterations);\n+    {\n+      fputs (\"Loop unrolling: \", loop_dump_stream);\n+      fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC, loop_n_iterations);\n+      fputs (\" iterations.\\n\", loop_dump_stream);\n+    }\n \n   /* Find and save a pointer to the last nonnote insn in the loop.  */\n \n@@ -1312,9 +1315,13 @@ precondition_loop_p (initial_value, final_value, increment, loop_start,\n       *final_value = GEN_INT (loop_n_iterations);\n \n       if (loop_dump_stream)\n-\tfprintf (loop_dump_stream,\n-\t\t \"Preconditioning: Success, number of iterations known, %d.\\n\",\n-\t\t loop_n_iterations);\n+\t{\n+\t  fputs (\"Preconditioning: Success, number of iterations known, \",\n+\t\t loop_dump_stream);\n+\t  fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC,\n+\t\t   loop_n_iterations);\n+\t  fputs (\".\\n\", loop_dump_stream);\n+\t}\n       return 1;\n     }\n "}, {"sha": "2d595d4786a837d33d05f80a12772b1bdbd14a56", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e016950d0c095ffdb36c918c7965148e344ca617/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e016950d0c095ffdb36c918c7965148e344ca617", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"real.h\"\n #include \"toplev.h\"\n #include \"dbxout.h\"\n+#include \"sdbout.h\"\n \n #include \"obstack.h\"\n #include \"c-pragma.h\"\n@@ -1683,13 +1684,6 @@ assemble_static_space (size)\n   char name[12];\n   char *namestring;\n   rtx x;\n-#ifndef ASM_OUTPUT_ALIGNED_LOCAL\n-  /* Round size up to multiple of BIGGEST_ALIGNMENT bits\n-     so that each uninitialized object starts on such a boundary.  */\n-  int rounded = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n-\t\t / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n-\t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n-#endif\n \n #if 0\n   if (flag_shared_data)\n@@ -1712,7 +1706,14 @@ assemble_static_space (size)\n #ifdef ASM_OUTPUT_ALIGNED_LOCAL\n   ASM_OUTPUT_ALIGNED_LOCAL (asm_out_file, name, size, BIGGEST_ALIGNMENT);\n #else\n-  ASM_OUTPUT_LOCAL (asm_out_file, name, size, rounded);\n+  {\n+    /* Round size up to multiple of BIGGEST_ALIGNMENT bits\n+       so that each uninitialized object starts on such a boundary.  */\n+    int rounded = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n+\t\t   / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n+\t\t   * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n+    ASM_OUTPUT_LOCAL (asm_out_file, name, size, rounded);\n+  }\n #endif\n #endif\n   return x;"}]}