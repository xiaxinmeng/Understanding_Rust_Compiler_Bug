{"sha": "4512b7d85184c7131e98d29255e53cd2d913ddc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxMmI3ZDg1MTg0YzcxMzFlOThkMjkyNTVlNTNjZDJkOTEzZGRjMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-11T15:08:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-11T18:56:52Z"}, "message": "libstdc++: Add a test that takes the split_view of a non-forward range\n\nThis adds a tests that verifies taking the split_view of a non-forward range\nworks correctly.  Doing so revealed a typo in one of _OuterIter's constructors.\n\nIt also revealed that the default constructor of\n__gnu_test::test_range::iterator misbehaves, because by delegating to\nIter<T>(nullptr, nullptr) we perform a null-pointer deref at runtime in\ninput_iterator_wrapper's constructor due to the ITERATOR_VERIFY check therein.\nInstead of delegating to this constructor it seems we can just inherit the\nprotected default constructor, which does not contain this ITERATOR_VERIFY\ncheck.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (split_view::_OuterIter::_OuterIter): Typo fix,\n\t'address' -> 'std::__addressof'.\n\t* testsuite/std/ranges/adaptors/split.cc: Test taking the split_view of\n\ta non-forward input_range.\n\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper): Make\n\tdefault constructor protected instead of deleted, like with\n\tinput_iterator_wrapper.\n\t(test_range::iterator): Add comment explaining that this type is used\n\tonly when the underlying wrapper is input_iterator_wrapper or\n\toutput_iterator_wrapper.  Remove delegating defaulted constructor so\n\tthat the inherited default constructor is used instead.", "tree": {"sha": "b38735150b7447dd1c41019a61b7193c8d1f0031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b38735150b7447dd1c41019a61b7193c8d1f0031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4512b7d85184c7131e98d29255e53cd2d913ddc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4512b7d85184c7131e98d29255e53cd2d913ddc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4512b7d85184c7131e98d29255e53cd2d913ddc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4512b7d85184c7131e98d29255e53cd2d913ddc2/comments", "author": null, "committer": null, "parents": [{"sha": "1c43ee69f4f6148fff4b5ace80d709d7f8b250d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c43ee69f4f6148fff4b5ace80d709d7f8b250d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c43ee69f4f6148fff4b5ace80d709d7f8b250d7"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "4ff4a0eecc9b4b0f84698ee3eaf264b61b5cc9ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4512b7d85184c7131e98d29255e53cd2d913ddc2", "patch": "@@ -1,5 +1,17 @@\n 2020-03-11  Patrick Palka  <ppalka@redhat.com>\n \n+\t* include/std/ranges (split_view::_OuterIter::_OuterIter): Typo fix,\n+\t'address' -> 'std::__addressof'.\n+\t* testsuite/std/ranges/adaptors/split.cc: Test taking the split_view of\n+\ta non-forward input_range.\n+\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper): Make\n+\tdefault constructor protected instead of deleted, like with\n+\tinput_iterator_wrapper.\n+\t(test_range::iterator): Add comment explaining that this type is used\n+\tonly when the underlying wrapper is input_iterator_wrapper or\n+\toutput_iterator_wrapper.  Remove delegating defaulted constructor so\n+\tthat the inherited default constructor is used instead.\n+\n \tLWG 3286 ranges::size is not required to be valid after a call to\n \tranges::begin on an input range\n \t* include/std/ranges (subrange::subrange): Split single-argument"}, {"sha": "8f91598c26ee05230a1658e4c17b4751db8836fe", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=4512b7d85184c7131e98d29255e53cd2d913ddc2", "patch": "@@ -2785,7 +2785,7 @@ namespace views\n \n \t  constexpr explicit\n \t  _OuterIter(_Parent& __parent) requires (!forward_range<_Base>)\n-\t    : _M_parent(address(__parent))\n+\t    : _M_parent(std::__addressof(__parent))\n \t  { }\n \n \t  constexpr"}, {"sha": "fe895827fc522cb3b753ab93ca5e2fddec2e26f9", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=4512b7d85184c7131e98d29255e53cd2d913ddc2", "patch": "@@ -27,6 +27,7 @@\n \n using __gnu_test::test_range;\n using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::input_iterator_wrapper;\n \n namespace ranges = std::ranges;\n namespace views = std::ranges::views;\n@@ -133,6 +134,24 @@ test07()\n   static_assert( noexcept(iter_swap(b, b2)) );\n }\n \n+void\n+test08()\n+{\n+  char x[] = \"the quick brown fox\";\n+  test_range<char, input_iterator_wrapper> rx(x, x+sizeof(x)-1);\n+  auto v = rx | views::split(' ');\n+  auto i = v.begin();\n+  VERIFY( ranges::equal(*i, \"the\"sv) );\n+  ++i;\n+  VERIFY( ranges::equal(*i, \"quick\"sv) );\n+  ++i;\n+  VERIFY( ranges::equal(*i, \"brown\"sv) );\n+  ++i;\n+  VERIFY( ranges::equal(*i, \"fox\"sv) );\n+  ++i;\n+  VERIFY( i == v.end() );\n+}\n+\n int\n main()\n {\n@@ -143,4 +162,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  test08();\n }"}, {"sha": "5be47f47915bdb9398c342d8ebc5585d912566ec", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4512b7d85184c7131e98d29255e53cd2d913ddc2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=4512b7d85184c7131e98d29255e53cd2d913ddc2", "patch": "@@ -124,6 +124,11 @@ namespace __gnu_test\n   struct output_iterator_wrapper\n   : public std::iterator<std::output_iterator_tag, T, std::ptrdiff_t, T*, T&>\n   {\n+  protected:\n+    output_iterator_wrapper() : ptr(0), SharedInfo(0)\n+    { }\n+\n+  public:\n     typedef OutputContainer<T> ContainerType;\n     T* ptr;\n     ContainerType* SharedInfo;\n@@ -135,8 +140,6 @@ namespace __gnu_test\n     }\n \n #if __cplusplus >= 201103L\n-    output_iterator_wrapper() = delete;\n-\n     output_iterator_wrapper(const output_iterator_wrapper&) = default;\n \n     output_iterator_wrapper&\n@@ -706,13 +709,14 @@ namespace __gnu_test\n   template<typename T, template<typename> class Iter>\n     class test_range\n     {\n-      // Adds default constructor to Iter<T> if needed\n+      // Exposes the protected default constructor of Iter<T> if needed.  This\n+      // is needed only when Iter is input_iterator_wrapper or\n+      // output_iterator_wrapper, because legacy forward iterators and beyond\n+      // are already default constructible.\n       struct iterator : Iter<T>\n       {\n \tusing Iter<T>::Iter;\n \n-\titerator() : Iter<T>(nullptr, nullptr) { }\n-\n \tusing Iter<T>::operator++;\n \n \titerator& operator++() { Iter<T>::operator++(); return *this; }"}]}