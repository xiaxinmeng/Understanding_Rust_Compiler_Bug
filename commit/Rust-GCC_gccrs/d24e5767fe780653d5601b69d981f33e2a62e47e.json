{"sha": "d24e5767fe780653d5601b69d981f33e2a62e47e", "node_id": "C_kwDOANBUbNoAKGQyNGU1NzY3ZmU3ODA2NTNkNTYwMWI2OWQ5ODFmMzNlMmE2MmU0N2U", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-11T14:16:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:04Z"}, "message": "[Ada] Expose and use type-generic GCC atomic builtins\n\ngcc/ada/\n\n\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Also propagate an\n\tinterface name on an intrinsic subprogram.  Remove obsolete comment.\n\t* libgnat/s-atopri.ads (Atomic_Load): New generic intrinsic function\n\t(Atomic_Load_8): Rewrite into instantiation.\n\t(Atomic_Load_16): Likewise.\n\t(Atomic_Load_32): Likewise.\n\t(Atomic_Load_64): Likewise.\n\t(Sync_Compare_And_Swap): New generic intrinsic function.\n\t(Sync_Compare_And_Swap_8): Rewrite into instantiation.\n\t(Sync_Compare_And_Swap_16): Likewise.\n\t(Sync_Compare_And_Swap_32): Likewise.\n\t(Sync_Compare_And_Swap_64): Likewise.\n\t(Lock_Free_Read): New generic inline function.\n\t(Lock_Free_Read_8): Rewrite into instantiation.\n\t(Lock_Free_Read_16): Likewise.\n\t(Lock_Free_Read_32): Likewise.\n\t(Lock_Free_Read_64): Likewise.\n\t(Lock_Free_Try_Write): New generic inline function.\n\t(Lock_Free_Try_Write_8): Rewrite into instantiation.\n\t(Lock_Free_Try_Write_16): Likewise.\n\t(Lock_Free_Try_Write_32): Likewise.\n\t(Lock_Free_Try_Write_64): Likewise.\n\t* libgnat/s-atopri.adb (Lock_Free_Read): New function body.\n\t(Lock_Free_Read_8): Delete.\n\t(Lock_Free_Read_16): Likewise.\n\t(Lock_Free_Read_32): Likewise.\n\t(Lock_Free_Read_64): Likewise.\n\t(Lock_Free_Try_Write): New function body.\n\t(Lock_Free_Try_Write_8): Delete.\n\t(Lock_Free_Try_Write_16): Likewise.\n\t(Lock_Free_Try_Write_32): Likewise.\n\t(Lock_Free_Try_Write_64): Likewise.\n\t* libgnat/s-aoinar.adb (Atomic_Fetch_And_Add): Use type-generic GCC\n\tatomic builtin and tidy up implementation.\n\t(Atomic_Fetch_And_Subtract): Likewise.\n\t* libgnat/s-aomoar.adb (Atomic_Fetch_And_Add): Likewise.\n\t(Atomic_Fetch_And_Subtract): Likewise.\n\t* libgnat/s-atopex.adb (Atomic_Exchange): Likewise.\n\t(Atomic_Compare_And_Exchange): Likewise.", "tree": {"sha": "df14ef47579d2801c89c23606f82ad0f49e46ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df14ef47579d2801c89c23606f82ad0f49e46ce4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24e5767fe780653d5601b69d981f33e2a62e47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24e5767fe780653d5601b69d981f33e2a62e47e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24e5767fe780653d5601b69d981f33e2a62e47e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24e5767fe780653d5601b69d981f33e2a62e47e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb540a70b05556da1b318e67f82d668b93d0824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb540a70b05556da1b318e67f82d668b93d0824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb540a70b05556da1b318e67f82d668b93d0824"}], "stats": {"total": 553, "additions": 123, "deletions": 430}, "files": [{"sha": "41d0cda2cde745e002874e92d12f3ab6d83f5cc6", "filename": "gcc/ada/libgnat/s-aoinar.adb", "status": "modified", "additions": 18, "deletions": 56, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -72,22 +72,10 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n       Value : Atomic_Type) return Atomic_Type\n    is\n       pragma Warnings (Off);\n-      function Atomic_Fetch_Add_1\n+      function Atomic_Fetch_Add\n         (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n         return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_1, \"__atomic_fetch_add_1\");\n-      function Atomic_Fetch_Add_2\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_2, \"__atomic_fetch_add_2\");\n-      function Atomic_Fetch_Add_4\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_4, \"__atomic_fetch_add_4\");\n-      function Atomic_Fetch_Add_8\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_8, \"__atomic_fetch_add_8\");\n+      pragma Import (Intrinsic, Atomic_Fetch_Add, \"__atomic_fetch_add\");\n       pragma Warnings (On);\n \n    begin\n@@ -96,21 +84,14 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n \n       if Atomic_Type'Base'Last = Atomic_Type'Last\n         and then Atomic_Type'Base'First = Atomic_Type'First\n-        and then Atomic_Type'Last\n-                  in 2 ** 7 - 1 | 2 ** 15 - 1 | 2 ** 31 - 1 | 2 ** 63 - 1\n+        and then Atomic_Type'Last = 2**(Atomic_Type'Object_Size - 1) - 1\n       then\n-         case Long_Long_Integer (Atomic_Type'Last) is\n-            when 2 ** 7 - 1  =>\n-               return Atomic_Fetch_Add_1 (Item'Address, Value);\n-            when 2 ** 15 - 1 =>\n-               return Atomic_Fetch_Add_2 (Item'Address, Value);\n-            when 2 ** 31 - 1 =>\n-               return Atomic_Fetch_Add_4 (Item'Address, Value);\n-            when 2 ** 63 - 1 =>\n-               return Atomic_Fetch_Add_8 (Item'Address, Value);\n-            when others      =>\n-               raise Program_Error;\n-         end case;\n+         if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+            return Atomic_Fetch_Add (Item'Address, Value);\n+         else\n+            raise Program_Error;\n+         end if;\n+\n       else\n          declare\n             Old_Value : aliased Atomic_Type := Item;\n@@ -138,22 +119,10 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n       Value : Atomic_Type) return Atomic_Type\n    is\n       pragma Warnings (Off);\n-      function Atomic_Fetch_Sub_1\n+      function Atomic_Fetch_Sub\n         (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n         return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_1, \"__atomic_fetch_sub_1\");\n-      function Atomic_Fetch_Sub_2\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_2, \"__atomic_fetch_sub_2\");\n-      function Atomic_Fetch_Sub_4\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_4, \"__atomic_fetch_sub_4\");\n-      function Atomic_Fetch_Sub_8\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_8, \"__atomic_fetch_sub_8\");\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub, \"__atomic_fetch_sub\");\n       pragma Warnings (On);\n \n    begin\n@@ -162,21 +131,14 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n \n       if Atomic_Type'Base'Last = Atomic_Type'Last\n         and then Atomic_Type'Base'First = Atomic_Type'First\n-        and then Atomic_Type'Last\n-                  in 2 ** 7 - 1 | 2 ** 15 - 1 | 2 ** 31 - 1 | 2 ** 63 - 1\n+        and then Atomic_Type'Last = 2**(Atomic_Type'Object_Size - 1) - 1\n       then\n-         case Long_Long_Integer (Atomic_Type'Last) is\n-            when 2 ** 7 - 1  =>\n-               return Atomic_Fetch_Sub_1 (Item'Address, Value);\n-            when 2 ** 15 - 1 =>\n-               return Atomic_Fetch_Sub_2 (Item'Address, Value);\n-            when 2 ** 31 - 1 =>\n-               return Atomic_Fetch_Sub_4 (Item'Address, Value);\n-            when 2 ** 63 - 1 =>\n-               return Atomic_Fetch_Sub_8 (Item'Address, Value);\n-            when others      =>\n-               raise Program_Error;\n-         end case;\n+         if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+            return Atomic_Fetch_Sub (Item'Address, Value);\n+         else\n+            raise Program_Error;\n+         end if;\n+\n       else\n          declare\n             Old_Value : aliased Atomic_Type := Item;"}, {"sha": "617a5b30de3a87f28eabb3acdfa21d7b8582e5ae", "filename": "gcc/ada/libgnat/s-aomoar.adb", "status": "modified", "additions": 18, "deletions": 62, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -72,48 +72,26 @@ package body System.Atomic_Operations.Modular_Arithmetic is\n       Value : Atomic_Type) return Atomic_Type\n    is\n       pragma Warnings (Off);\n-      function Atomic_Fetch_Add_1\n+      function Atomic_Fetch_Add\n         (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n         return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_1, \"__atomic_fetch_add_1\");\n-      function Atomic_Fetch_Add_2\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_2, \"__atomic_fetch_add_2\");\n-      function Atomic_Fetch_Add_4\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_4, \"__atomic_fetch_add_4\");\n-      function Atomic_Fetch_Add_8\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Add_8, \"__atomic_fetch_add_8\");\n+      pragma Import (Intrinsic, Atomic_Fetch_Add, \"__atomic_fetch_add\");\n       pragma Warnings (On);\n \n    begin\n       --  Use the direct intrinsics when possible, and fallback to\n       --  compare-and-exchange otherwise.\n-      --  Also suppress spurious warnings.\n \n-      pragma Warnings (Off);\n       if Atomic_Type'Base'Last = Atomic_Type'Last\n         and then Atomic_Type'First = 0\n-        and then Atomic_Type'Last\n-                  in 2 ** 8 - 1 | 2 ** 16 - 1 | 2 ** 32 - 1 | 2 ** 64 - 1\n+        and then Atomic_Type'Last = 2**Atomic_Type'Object_Size - 1\n       then\n-         pragma Warnings (On);\n-         case Unsigned_64 (Atomic_Type'Last) is\n-            when 2 ** 8 - 1  =>\n-               return Atomic_Fetch_Add_1 (Item'Address, Value);\n-            when 2 ** 16 - 1 =>\n-               return Atomic_Fetch_Add_2 (Item'Address, Value);\n-            when 2 ** 32 - 1 =>\n-               return Atomic_Fetch_Add_4 (Item'Address, Value);\n-            when 2 ** 64 - 1 =>\n-               return Atomic_Fetch_Add_8 (Item'Address, Value);\n-            when others      =>\n-               raise Program_Error;\n-         end case;\n+         if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+            return Atomic_Fetch_Add (Item'Address, Value);\n+         else\n+            raise Program_Error;\n+         end if;\n+\n       else\n          declare\n             Old_Value : aliased Atomic_Type := Item;\n@@ -141,48 +119,26 @@ package body System.Atomic_Operations.Modular_Arithmetic is\n       Value : Atomic_Type) return Atomic_Type\n    is\n       pragma Warnings (Off);\n-      function Atomic_Fetch_Sub_1\n+      function Atomic_Fetch_Sub\n         (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n         return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_1, \"__atomic_fetch_sub_1\");\n-      function Atomic_Fetch_Sub_2\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_2, \"__atomic_fetch_sub_2\");\n-      function Atomic_Fetch_Sub_4\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_4, \"__atomic_fetch_sub_4\");\n-      function Atomic_Fetch_Sub_8\n-        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n-        return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Fetch_Sub_8, \"__atomic_fetch_sub_8\");\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub, \"__atomic_fetch_sub\");\n       pragma Warnings (On);\n \n    begin\n       --  Use the direct intrinsics when possible, and fallback to\n       --  compare-and-exchange otherwise.\n-      --  Also suppress spurious warnings.\n \n-      pragma Warnings (Off);\n       if Atomic_Type'Base'Last = Atomic_Type'Last\n         and then Atomic_Type'First = 0\n-        and then Atomic_Type'Last\n-                  in 2 ** 8 - 1 | 2 ** 16 - 1 | 2 ** 32 - 1 | 2 ** 64 - 1\n+        and then Atomic_Type'Last = 2**Atomic_Type'Object_Size - 1\n       then\n-         pragma Warnings (On);\n-         case Unsigned_64 (Atomic_Type'Last) is\n-            when 2 ** 8 - 1  =>\n-               return Atomic_Fetch_Sub_1 (Item'Address, Value);\n-            when 2 ** 16 - 1 =>\n-               return Atomic_Fetch_Sub_2 (Item'Address, Value);\n-            when 2 ** 32 - 1 =>\n-               return Atomic_Fetch_Sub_4 (Item'Address, Value);\n-            when 2 ** 64 - 1 =>\n-               return Atomic_Fetch_Sub_8 (Item'Address, Value);\n-            when others      =>\n-               raise Program_Error;\n-         end case;\n+         if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+            return Atomic_Fetch_Sub (Item'Address, Value);\n+         else\n+            raise Program_Error;\n+         end if;\n+\n       else\n          declare\n             Old_Value : aliased Atomic_Type := Item;"}, {"sha": "65e943350dd30be03c60011fcb592507bcb05041", "filename": "gcc/ada/libgnat/s-atopex.adb", "status": "modified", "additions": 14, "deletions": 69, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopex.adb?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -43,36 +43,19 @@ package body System.Atomic_Operations.Exchange is\n       Value : Atomic_Type) return Atomic_Type\n    is\n       pragma Warnings (Off);\n-      function Atomic_Exchange_1\n+      function Atomic_Exchange\n         (Ptr   : System.Address;\n          Val   : Atomic_Type;\n          Model : Mem_Model := Seq_Cst) return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Exchange_1, \"__atomic_exchange_1\");\n-      function Atomic_Exchange_2\n-        (Ptr   : System.Address;\n-         Val   : Atomic_Type;\n-         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Exchange_2, \"__atomic_exchange_2\");\n-      function Atomic_Exchange_4\n-        (Ptr   : System.Address;\n-         Val   : Atomic_Type;\n-         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Exchange_4, \"__atomic_exchange_4\");\n-      function Atomic_Exchange_8\n-        (Ptr   : System.Address;\n-         Val   : Atomic_Type;\n-         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n-      pragma Import (Intrinsic, Atomic_Exchange_8, \"__atomic_exchange_8\");\n+      pragma Import (Intrinsic, Atomic_Exchange, \"__atomic_exchange_n\");\n       pragma Warnings (On);\n \n    begin\n-      case Atomic_Type'Object_Size is\n-         when 8      => return Atomic_Exchange_1 (Item'Address, Value);\n-         when 16     => return Atomic_Exchange_2 (Item'Address, Value);\n-         when 32     => return Atomic_Exchange_4 (Item'Address, Value);\n-         when 64     => return Atomic_Exchange_8 (Item'Address, Value);\n-         when others => raise Program_Error;\n-      end case;\n+      if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+         return Atomic_Exchange (Item'Address, Value);\n+      else\n+         raise Program_Error;\n+      end if;\n    end Atomic_Exchange;\n \n    ---------------------------------\n@@ -85,61 +68,23 @@ package body System.Atomic_Operations.Exchange is\n       Desired : Atomic_Type) return Boolean\n    is\n       pragma Warnings (Off);\n-      function Atomic_Compare_Exchange_1\n-        (Ptr           : System.Address;\n-         Expected      : System.Address;\n-         Desired       : Atomic_Type;\n-         Weak          : Boolean := False;\n-         Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n-      pragma Import\n-        (Intrinsic, Atomic_Compare_Exchange_1, \"__atomic_compare_exchange_1\");\n-      function Atomic_Compare_Exchange_2\n-        (Ptr           : System.Address;\n-         Expected      : System.Address;\n-         Desired       : Atomic_Type;\n-         Weak          : Boolean := False;\n-         Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n-      pragma Import\n-        (Intrinsic, Atomic_Compare_Exchange_2, \"__atomic_compare_exchange_2\");\n-      function Atomic_Compare_Exchange_4\n-        (Ptr           : System.Address;\n-         Expected      : System.Address;\n-         Desired       : Atomic_Type;\n-         Weak          : Boolean := False;\n-         Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n-      pragma Import\n-        (Intrinsic, Atomic_Compare_Exchange_4, \"__atomic_compare_exchange_4\");\n-      function Atomic_Compare_Exchange_8\n+      function Atomic_Compare_Exchange\n         (Ptr           : System.Address;\n          Expected      : System.Address;\n          Desired       : Atomic_Type;\n          Weak          : Boolean := False;\n          Success_Model : Mem_Model := Seq_Cst;\n          Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n       pragma Import\n-        (Intrinsic, Atomic_Compare_Exchange_8, \"__atomic_compare_exchange_8\");\n+        (Intrinsic, Atomic_Compare_Exchange, \"__atomic_compare_exchange_n\");\n       pragma Warnings (On);\n \n    begin\n-      case Atomic_Type'Object_Size is\n-         when 8 =>\n-            return\n-              Atomic_Compare_Exchange_1 (Item'Address, Prior'Address, Desired);\n-         when 16 =>\n-            return\n-              Atomic_Compare_Exchange_2 (Item'Address, Prior'Address, Desired);\n-         when 32 =>\n-            return\n-              Atomic_Compare_Exchange_4 (Item'Address, Prior'Address, Desired);\n-         when 64 =>\n-            return\n-              Atomic_Compare_Exchange_8 (Item'Address, Prior'Address, Desired);\n-         when others =>\n-            raise Program_Error;\n-      end case;\n+      if Atomic_Type'Object_Size in 8 | 16 | 32 | 64 then\n+         return Atomic_Compare_Exchange (Item'Address, Prior'Address, Desired);\n+      else\n+         raise Program_Error;\n+      end if;\n    end Atomic_Compare_And_Exchange;\n \n    ------------------"}, {"sha": "20aa6666c192010b0504e8fc5e09adaccbdcdc77", "filename": "gcc/ada/libgnat/s-atopri.adb", "status": "modified", "additions": 20, "deletions": 141, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopri.adb?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -31,103 +31,39 @@\n \n package body System.Atomic_Primitives is\n \n-   ----------------------\n-   -- Lock_Free_Read_8 --\n-   ----------------------\n+   --------------------\n+   -- Lock_Free_Read --\n+   --------------------\n \n-   function Lock_Free_Read_8 (Ptr : Address) return uint8 is\n-   begin\n-      if uint8'Atomic_Always_Lock_Free then\n-         return Atomic_Load_8 (Ptr, Acquire);\n-      else\n-         raise Program_Error;\n-      end if;\n-   end Lock_Free_Read_8;\n-\n-   -----------------------\n-   -- Lock_Free_Read_16 --\n-   -----------------------\n+   function Lock_Free_Read (Ptr : Address) return Atomic_Type is\n+      function My_Atomic_Load is new Atomic_Load (Atomic_Type);\n \n-   function Lock_Free_Read_16 (Ptr : Address) return uint16 is\n    begin\n-      if uint16'Atomic_Always_Lock_Free then\n-         return Atomic_Load_16 (Ptr, Acquire);\n+      if Atomic_Type'Atomic_Always_Lock_Free then\n+         return My_Atomic_Load (Ptr, Acquire);\n       else\n          raise Program_Error;\n       end if;\n-   end Lock_Free_Read_16;\n+   end Lock_Free_Read;\n \n-   -----------------------\n-   -- Lock_Free_Read_32 --\n-   -----------------------\n-\n-   function Lock_Free_Read_32 (Ptr : Address) return uint32 is\n-   begin\n-      if uint32'Atomic_Always_Lock_Free then\n-         return Atomic_Load_32 (Ptr, Acquire);\n-      else\n-         raise Program_Error;\n-      end if;\n-   end Lock_Free_Read_32;\n+   -------------------------\n+   -- Lock_Free_Try_Write --\n+   -------------------------\n \n-   -----------------------\n-   -- Lock_Free_Read_64 --\n-   -----------------------\n-\n-   function Lock_Free_Read_64 (Ptr : Address) return uint64 is\n-   begin\n-      if uint64'Atomic_Always_Lock_Free then\n-         return Atomic_Load_64 (Ptr, Acquire);\n-      else\n-         raise Program_Error;\n-      end if;\n-   end Lock_Free_Read_64;\n-\n-   ---------------------------\n-   -- Lock_Free_Try_Write_8 --\n-   ---------------------------\n-\n-   function Lock_Free_Try_Write_8\n+   function Lock_Free_Try_Write\n       (Ptr      : Address;\n-       Expected : in out uint8;\n-       Desired  : uint8) return Boolean\n+       Expected : in out Atomic_Type;\n+       Desired  : Atomic_Type) return Boolean\n    is\n-      Actual : uint8;\n+      function My_Sync_Compare_And_Swap is\n+        new Sync_Compare_And_Swap (Atomic_Type);\n \n-   begin\n-      if Expected /= Desired then\n-\n-         if uint8'Atomic_Always_Lock_Free then\n-            Actual := Sync_Compare_And_Swap_8 (Ptr, Expected, Desired);\n-         else\n-            raise Program_Error;\n-         end if;\n-\n-         if Actual /= Expected then\n-            Expected := Actual;\n-            return False;\n-         end if;\n-      end if;\n-\n-      return True;\n-   end Lock_Free_Try_Write_8;\n-\n-   ----------------------------\n-   -- Lock_Free_Try_Write_16 --\n-   ----------------------------\n-\n-   function Lock_Free_Try_Write_16\n-      (Ptr      : Address;\n-       Expected : in out uint16;\n-       Desired  : uint16) return Boolean\n-   is\n-      Actual : uint16;\n+      Actual : Atomic_Type;\n \n    begin\n       if Expected /= Desired then\n-\n-         if uint16'Atomic_Always_Lock_Free then\n-            Actual := Sync_Compare_And_Swap_16 (Ptr, Expected, Desired);\n+         if Atomic_Type'Atomic_Always_Lock_Free then\n+            Actual := My_Sync_Compare_And_Swap (Ptr, Expected, Desired);\n          else\n             raise Program_Error;\n          end if;\n@@ -139,63 +75,6 @@ package body System.Atomic_Primitives is\n       end if;\n \n       return True;\n-   end Lock_Free_Try_Write_16;\n-\n-   ----------------------------\n-   -- Lock_Free_Try_Write_32 --\n-   ----------------------------\n+   end Lock_Free_Try_Write;\n \n-   function Lock_Free_Try_Write_32\n-      (Ptr      : Address;\n-       Expected : in out uint32;\n-       Desired  : uint32) return Boolean\n-   is\n-      Actual : uint32;\n-\n-   begin\n-      if Expected /= Desired then\n-\n-         if uint32'Atomic_Always_Lock_Free then\n-            Actual := Sync_Compare_And_Swap_32 (Ptr, Expected, Desired);\n-         else\n-            raise Program_Error;\n-         end if;\n-\n-         if Actual /= Expected then\n-            Expected := Actual;\n-            return False;\n-         end if;\n-      end if;\n-\n-      return True;\n-   end Lock_Free_Try_Write_32;\n-\n-   ----------------------------\n-   -- Lock_Free_Try_Write_64 --\n-   ----------------------------\n-\n-   function Lock_Free_Try_Write_64\n-      (Ptr      : Address;\n-       Expected : in out uint64;\n-       Desired  : uint64) return Boolean\n-   is\n-      Actual : uint64;\n-\n-   begin\n-      if Expected /= Desired then\n-\n-         if uint64'Atomic_Always_Lock_Free then\n-            Actual := Sync_Compare_And_Swap_64 (Ptr, Expected, Desired);\n-         else\n-            raise Program_Error;\n-         end if;\n-\n-         if Actual /= Expected then\n-            Expected := Actual;\n-            return False;\n-         end if;\n-      end if;\n-\n-      return True;\n-   end Lock_Free_Try_Write_64;\n end System.Atomic_Primitives;"}, {"sha": "ea03f1a7d50880dc263627b5e33ac0b8379fd02a", "filename": "gcc/ada/libgnat/s-atopri.ads", "status": "modified", "additions": 48, "deletions": 97, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopri.ads?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains both atomic primitives defined from gcc built-in\n+--  This package contains both atomic primitives defined from GCC built-in\n --  functions and operations used by the compiler to generate the lock-free\n --  implementation of protected objects.\n \n@@ -66,71 +66,31 @@ package System.Atomic_Primitives is\n    -- GCC built-in atomic primitives --\n    ------------------------------------\n \n-   function Atomic_Load_8\n+   generic\n+      type Atomic_Type is mod <>;\n+   function Atomic_Load\n      (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint8;\n-   pragma Import (Intrinsic, Atomic_Load_8, \"__atomic_load_1\");\n+      Model : Mem_Model := Seq_Cst) return Atomic_Type;\n+   pragma Import (Intrinsic, Atomic_Load, \"__atomic_load_n\");\n \n-   function Atomic_Load_16\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint16;\n-   pragma Import (Intrinsic, Atomic_Load_16, \"__atomic_load_2\");\n-\n-   function Atomic_Load_32\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint32;\n-   pragma Import (Intrinsic, Atomic_Load_32, \"__atomic_load_4\");\n-\n-   function Atomic_Load_64\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint64;\n-   pragma Import (Intrinsic, Atomic_Load_64, \"__atomic_load_8\");\n-\n-   function Sync_Compare_And_Swap_8\n-     (Ptr      : Address;\n-      Expected : uint8;\n-      Desired  : uint8) return uint8;\n-   pragma Import (Intrinsic,\n-                  Sync_Compare_And_Swap_8,\n-                  \"__sync_val_compare_and_swap_1\");\n-\n-   function Sync_Compare_And_Swap_16\n-     (Ptr      : Address;\n-      Expected : uint16;\n-      Desired  : uint16) return uint16;\n-   pragma Import (Intrinsic,\n-                  Sync_Compare_And_Swap_16,\n-                  \"__sync_val_compare_and_swap_2\");\n+   function Atomic_Load_8  is new Atomic_Load (uint8);\n+   function Atomic_Load_16 is new Atomic_Load (uint16);\n+   function Atomic_Load_32 is new Atomic_Load (uint32);\n+   function Atomic_Load_64 is new Atomic_Load (uint64);\n \n-   function Sync_Compare_And_Swap_32\n+   generic\n+      type Atomic_Type is mod <>;\n+   function Sync_Compare_And_Swap\n      (Ptr      : Address;\n-      Expected : uint32;\n-      Desired  : uint32) return uint32;\n-   pragma Import (Intrinsic,\n-                  Sync_Compare_And_Swap_32,\n-                  \"__sync_val_compare_and_swap_4\");\n+      Expected : Atomic_Type;\n+      Desired  : Atomic_Type) return Atomic_Type;\n+   pragma Import\n+     (Intrinsic, Sync_Compare_And_Swap, \"__sync_val_compare_and_swap\");\n \n-   function Sync_Compare_And_Swap_64\n-     (Ptr      : Address;\n-      Expected : uint64;\n-      Desired  : uint64) return uint64;\n-   pragma Import (Intrinsic,\n-                  Sync_Compare_And_Swap_64,\n-                  \"__sync_val_compare_and_swap_8\");\n-\n-   --  ??? We might want to switch to the __atomic series of builtins for\n-   --  compare-and-swap operations at some point.\n-\n-   --  function Atomic_Compare_Exchange_8\n-   --    (Ptr           : Address;\n-   --     Expected      : Address;\n-   --     Desired       : uint8;\n-   --     Weak          : Boolean   := False;\n-   --     Success_Model : Mem_Model := Seq_Cst;\n-   --     Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n-   --  pragma Import (Intrinsic,\n-   --                 Atomic_Compare_Exchange_8,\n-   --                 \"__atomic_compare_exchange_1\");\n+   function Sync_Compare_And_Swap_8  is new Sync_Compare_And_Swap (uint8);\n+   function Sync_Compare_And_Swap_16 is new Sync_Compare_And_Swap (uint16);\n+   function Sync_Compare_And_Swap_32 is new Sync_Compare_And_Swap (uint32);\n+   function Sync_Compare_And_Swap_64 is new Sync_Compare_And_Swap (uint64);\n \n    function Atomic_Test_And_Set\n      (Ptr   : System.Address;\n@@ -155,46 +115,37 @@ package System.Atomic_Primitives is\n    --  The lock-free implementation uses two atomic instructions for the\n    --  expansion of protected operations:\n \n-   --  * Lock_Free_Read_N atomically loads the value of the protected component\n-   --    accessed by the current protected operation.\n-\n-   --  * Lock_Free_Try_Write_N tries to write the Desired value into Ptr only\n-   --    if Expected and Desired mismatch.\n+   --  * Lock_Free_Read atomically loads the value contained in Ptr (with the\n+   --    Acquire synchronization mode).\n \n-   function Lock_Free_Read_8 (Ptr : Address) return uint8;\n+   --  * Lock_Free_Try_Write atomically tries to write the Desired value into\n+   --    Ptr if Ptr contains the Expected value. It returns true if the value\n+   --    in Ptr was changed, or False if it was not, in which case Expected is\n+   --    updated to the unexpected value in Ptr. Note that it does nothing and\n+   --    returns true if Desired and Expected are equal.\n \n-   function Lock_Free_Read_16 (Ptr : Address) return uint16;\n+   generic\n+      type Atomic_Type is mod <>;\n+   function Lock_Free_Read (Ptr : Address) return Atomic_Type;\n \n-   function Lock_Free_Read_32 (Ptr : Address) return uint32;\n+   function Lock_Free_Read_8  is new Lock_Free_Read (uint8);\n+   function Lock_Free_Read_16 is new Lock_Free_Read (uint16);\n+   function Lock_Free_Read_32 is new Lock_Free_Read (uint32);\n+   function Lock_Free_Read_64 is new Lock_Free_Read (uint64);\n \n-   function Lock_Free_Read_64 (Ptr : Address) return uint64;\n-\n-   function Lock_Free_Try_Write_8\n-      (Ptr      : Address;\n-       Expected : in out uint8;\n-       Desired  : uint8) return Boolean;\n-\n-   function Lock_Free_Try_Write_16\n-      (Ptr      : Address;\n-       Expected : in out uint16;\n-       Desired  : uint16) return Boolean;\n-\n-   function Lock_Free_Try_Write_32\n-      (Ptr      : Address;\n-       Expected : in out uint32;\n-       Desired  : uint32) return Boolean;\n+   generic\n+      type Atomic_Type is mod <>;\n+   function Lock_Free_Try_Write\n+     (Ptr      : Address;\n+      Expected : in out Atomic_Type;\n+      Desired  : Atomic_Type) return Boolean;\n \n-   function Lock_Free_Try_Write_64\n-      (Ptr      : Address;\n-       Expected : in out uint64;\n-       Desired  : uint64) return Boolean;\n+   function Lock_Free_Try_Write_8  is new Lock_Free_Try_Write (uint8);\n+   function Lock_Free_Try_Write_16 is new Lock_Free_Try_Write (uint16);\n+   function Lock_Free_Try_Write_32 is new Lock_Free_Try_Write (uint32);\n+   function Lock_Free_Try_Write_64 is new Lock_Free_Try_Write (uint64);\n \n-   pragma Inline (Lock_Free_Read_8);\n-   pragma Inline (Lock_Free_Read_16);\n-   pragma Inline (Lock_Free_Read_32);\n-   pragma Inline (Lock_Free_Read_64);\n-   pragma Inline (Lock_Free_Try_Write_8);\n-   pragma Inline (Lock_Free_Try_Write_16);\n-   pragma Inline (Lock_Free_Try_Write_32);\n-   pragma Inline (Lock_Free_Try_Write_64);\n+private\n+   pragma Inline (Lock_Free_Read);\n+   pragma Inline (Lock_Free_Try_Write);\n end System.Atomic_Primitives;"}, {"sha": "54406e9bbc536657bd6bac7beb034f384edb733a", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24e5767fe780653d5601b69d981f33e2a62e47e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d24e5767fe780653d5601b69d981f33e2a62e47e", "patch": "@@ -5802,6 +5802,7 @@ package body Sem_Ch12 is\n \n          if Is_Intrinsic_Subprogram (Gen_Unit) then\n             Set_Is_Intrinsic_Subprogram (Anon_Id);\n+            Set_Interface_Name (Anon_Id, Interface_Name (Gen_Unit));\n          end if;\n \n          Analyze_Instance_And_Renamings;\n@@ -5818,14 +5819,13 @@ package body Sem_Ch12 is\n          end if;\n \n          --  If the generic is marked Import (Intrinsic), then so is the\n-         --  instance. This indicates that there is no body to instantiate. If\n-         --  generic is marked inline, so it the instance, and the anonymous\n-         --  subprogram it renames. If inlined, or else if inlining is enabled\n-         --  for the compilation, we generate the instance body even if it is\n-         --  not within the main unit.\n+         --  instance; this indicates that there is no body to instantiate.\n+         --  We also copy the interface name in case this is handled by the\n+         --  back-end and deal with an instance of unchecked conversion.\n \n          if Is_Intrinsic_Subprogram (Gen_Unit) then\n             Set_Is_Intrinsic_Subprogram (Act_Decl_Id);\n+            Set_Interface_Name (Act_Decl_Id, Interface_Name (Gen_Unit));\n \n             if Chars (Gen_Unit) = Name_Unchecked_Conversion then\n                Validate_Unchecked_Conversion (N, Act_Decl_Id);"}]}