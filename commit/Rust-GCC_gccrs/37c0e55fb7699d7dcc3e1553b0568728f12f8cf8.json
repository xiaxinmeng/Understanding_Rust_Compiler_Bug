{"sha": "37c0e55fb7699d7dcc3e1553b0568728f12f8cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjMGU1NWZiNzY5OWQ3ZGNjM2UxNTUzYjA1Njg3MjhmMTJmOGNmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-23T19:49:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-23T19:49:52Z"}, "message": "(reload): Initialize the previous_offset fields in reg_eliminate\nbefore calling setup_save_areas.\n\nFrom-SVN: r12781", "tree": {"sha": "c82c9e25116052bdf745a491369468885c3f5a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c82c9e25116052bdf745a491369468885c3f5a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8/comments", "author": null, "committer": null, "parents": [{"sha": "c7d13c76d5ca80718a1acdef9e42290ad97d1ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d13c76d5ca80718a1acdef9e42290ad97d1ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d13c76d5ca80718a1acdef9e42290ad97d1ece"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "cac212bba0f0d3d19408b5f92365f9845af0387e", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c0e55fb7699d7dcc3e1553b0568728f12f8cf8/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=37c0e55fb7699d7dcc3e1553b0568728f12f8cf8", "patch": "@@ -1460,19 +1460,26 @@ reload (first, global, dumpfile)\n       /* If we have caller-saves, set up the save areas and see if caller-save\n \t will need a spill register.  */\n \n-      if (caller_save_needed\n-\t  && ! setup_save_areas (&something_changed)\n-\t  && caller_save_spill_class  == NO_REGS)\n+      if (caller_save_needed)\n \t{\n-\t  /* The class we will need depends on whether the machine\n-\t     supports the sum of two registers for an address; see\n-\t     find_address_reloads for details.  */\n-\n-\t  caller_save_spill_class\n-\t    = double_reg_address_ok ? INDEX_REG_CLASS : BASE_REG_CLASS;\n-\t  caller_save_group_size\n-\t    = CLASS_MAX_NREGS (caller_save_spill_class, Pmode);\n-\t  something_changed = 1;\n+\t  /* Set the offsets for setup_save_areas.  */\n+\t  for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS];\n+\t       ep++)\n+\t    ep->previous_offset = ep->max_offset;\n+\n+\t  if ( ! setup_save_areas (&something_changed)\n+\t      && caller_save_spill_class  == NO_REGS)\n+\t    {\n+\t      /* The class we will need depends on whether the machine\n+\t\t supports the sum of two registers for an address; see\n+\t      find_address_reloads for details.  */\n+\n+\t      caller_save_spill_class\n+\t\t= double_reg_address_ok ? INDEX_REG_CLASS : BASE_REG_CLASS;\n+\t      caller_save_group_size\n+\t\t= CLASS_MAX_NREGS (caller_save_spill_class, Pmode);\n+\t      something_changed = 1;\n+\t    }\n \t}\n \n       /* See if anything that happened changes which eliminations are valid."}]}