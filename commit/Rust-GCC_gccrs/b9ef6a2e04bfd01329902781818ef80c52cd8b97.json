{"sha": "b9ef6a2e04bfd01329902781818ef80c52cd8b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllZjZhMmUwNGJmZDAxMzI5OTAyNzgxODE4ZWY4MGM1MmNkOGI5Nw==", "commit": {"author": {"name": "Jiangning Liu", "email": "jiangning.liu@amperecomputing.com", "date": "2019-07-12T16:28:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-07-12T16:28:43Z"}, "message": "re PR tree-optimization/89430 (A missing ifcvt optimization to generate csel)\n\n2019-07-12  Jiangning Liu  <jiangning.liu@amperecomputing.com>\n\n\tPR tree-optimization/89430\n\t* tree-ssa-phiopt.c (cond_store_replacement): Support conditional\n\tstore elimination for local variable without address escape.\n\n\tPR tree-optimization/89430\n\t* gcc.dg/tree-ssa/pr89430-1.c: New test.\n\t* gcc.dg/tree-ssa/pr89430-2.c: New test.\n\t* gcc.dg/tree-ssa/pr89430-3.c: New test.\n\t* gcc.dg/tree-ssa/pr89430-4.c: New test.\n\t* gcc.dg/tree-ssa/pr89430-5.c: New test.\n\t* gcc.dg/tree-ssa/pr89430-6.c: New test.\n\nFrom-SVN: r273449", "tree": {"sha": "3dca3e0cf4359649c3f8099529fdd094c137be5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dca3e0cf4359649c3f8099529fdd094c137be5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ef6a2e04bfd01329902781818ef80c52cd8b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ef6a2e04bfd01329902781818ef80c52cd8b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ef6a2e04bfd01329902781818ef80c52cd8b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ef6a2e04bfd01329902781818ef80c52cd8b97/comments", "author": null, "committer": null, "parents": [{"sha": "b979ca0ffdef2d2dee63301906db852bdf087db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b979ca0ffdef2d2dee63301906db852bdf087db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b979ca0ffdef2d2dee63301906db852bdf087db4"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "8923216198c55bec135d1a480519e30f46bf6f5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -1,3 +1,9 @@\n+2019-07-12  Jiangning Liu  <jiangning.liu@amperecomputing.com>\n+\n+\tPR tree-optimization/89430\n+\t* tree-ssa-phiopt.c (cond_store_replacement): Support conditional\n+\tstore elimination for local variable without address escape.\n+\n 2019-07-12  Jeff Law  <law@redhat.com>\n \n \t* config/c6x/c6x.c (c6x_section_type): Clear SECTION_NOTYPE"}, {"sha": "71813089358f5ca408f757129758660f3d6e85de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -1,3 +1,13 @@\n+2019-07-08  Jiangning Liu  <jiangning.liu@amperecomputing.com>\n+\n+\tPR tree-optimization/89430\n+\t* gcc.dg/tree-ssa/pr89430-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-3.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-4.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-5.c: New test.\n+\t* gcc.dg/tree-ssa/pr89430-6.c: New test.\n+\n 2019-07-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91145"}, {"sha": "8ee1850ac6327c32092c32a5680ba961a0818c0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+unsigned test(unsigned k, unsigned b) {\n+        unsigned a[2];\n+        if (b < a[k]) {\n+                a[k] = b;\n+        }\n+        return a[0]+a[1];\n+}\n+\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "9b96875ac7ab24b8beaeadedfb84eda9a136b16f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+int c;\n+unsigned test(unsigned k, unsigned b) {\n+        unsigned a[2];\n+\ta[k] = c;\n+        if (b < a[k]) {\n+                a[k] = b;\n+        }\n+        return a[0]+a[1];\n+}\n+\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "0fac9f9b9c7ea2cb5728c947be44d286b7cd3401", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-3.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+unsigned a[2];\n+unsigned test(unsigned k, unsigned b) {\n+        if (b < a[k]) {\n+                a[k] = b;\n+        }\n+        return a[0]+a[1];\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "54b8c11a407ba1e845e63d80c53605688402ce1b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-4.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+int *p;\n+unsigned test(unsigned k, unsigned b) {\n+        unsigned a[2];\n+\tp = a;\n+        if (b < a[k]) {\n+                a[k] = b;\n+        }\n+        return a[0]+a[1];\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "b2d04119381341e6e8c455d5d77c93c2cac9d53a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+int test(int b, int k) {\n+    struct {\n+        int data[2];\n+    } a;\n+\n+    if (b < a.data[k]) {\n+        a.data[k] = b;\n+    }\n+\n+    return a.data[0] + a.data[1];\n+}\n+\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "8d3c4f7cc6a3b75ba7c69ec5213a67f90ad6327c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-6.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cselim-details\" } */\n+\n+int test(int b, int k) {\n+    typedef struct {\n+\t    int x;\n+    } SS;\n+    struct {\n+        SS data[2];\n+    } a;\n+\n+    if (b < a.data[k].x) {\n+        a.data[k].x = b;\n+    }\n+\n+    return a.data[0].x + a.data[1].x;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */"}, {"sha": "a514ed81ef9968ce71e8345231bc9c604a7cbff0", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef6a2e04bfd01329902781818ef80c52cd8b97/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=b9ef6a2e04bfd01329902781818ef80c52cd8b97", "patch": "@@ -2196,7 +2196,8 @@ get_non_trapping (void)\n \n    We check that MIDDLE_BB contains only one store, that that store\n    doesn't trap (not via NOTRAP, but via checking if an access to the same\n-   memory location dominates us) and that the store has a \"simple\" RHS.  */\n+   memory location dominates us, or the store is to a local addressable\n+   object) and that the store has a \"simple\" RHS.  */\n \n static bool\n cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n@@ -2218,16 +2219,23 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n   locus = gimple_location (assign);\n   lhs = gimple_assign_lhs (assign);\n   rhs = gimple_assign_rhs1 (assign);\n-  if (TREE_CODE (lhs) != MEM_REF\n-      || TREE_CODE (TREE_OPERAND (lhs, 0)) != SSA_NAME\n+  if ((TREE_CODE (lhs) != MEM_REF\n+       && TREE_CODE (lhs) != ARRAY_REF\n+       && TREE_CODE (lhs) != COMPONENT_REF)\n       || !is_gimple_reg_type (TREE_TYPE (lhs)))\n     return false;\n \n   /* Prove that we can move the store down.  We could also check\n      TREE_THIS_NOTRAP here, but in that case we also could move stores,\n      whose value is not available readily, which we want to avoid.  */\n   if (!nontrap->contains (lhs))\n-    return false;\n+    {\n+      /* If LHS is a local variable without address-taken, we could\n+\t always safely move down the store.  */\n+      tree base = get_base_address (lhs);\n+      if (!auto_var_p (base) || TREE_ADDRESSABLE (base))\n+\treturn false;\n+    }\n \n   /* Now we've checked the constraints, so do the transformation:\n      1) Remove the single store.  */\n@@ -2280,6 +2288,14 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n   else\n     gsi_insert_before (&gsi, new_stmt, GSI_NEW_STMT);\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"\\nConditional store replacement happened!\");\n+      fprintf (dump_file, \"\\nReplaced the store with a load.\");\n+      fprintf (dump_file, \"\\nInserted a new PHI statement in joint block:\\n\");\n+      print_gimple_stmt (dump_file, new_stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n+    }\n+\n   return true;\n }\n "}]}