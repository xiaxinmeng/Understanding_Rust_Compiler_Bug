{"sha": "00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "node_id": "C_kwDOANBUbNoAKDAwY2M0MTI2NjBmZTRkNjRjMGIwNGRhOWFlMjBiMWFkNmVmOTJiYjA", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-01-10T11:26:30Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-01-16T09:22:14Z"}, "message": "Add VxWorks fixincludes hack, C99 FP classification\n\nArrange to provide missing defs for C99 FP classification functions\nand constants queried by libstdc++ configure checks (C99 support for C++98)\n\n2021-01-10  Olivier Hainque  <hainque@adacore.com>\n\n\t* inclhack.def (vxworks_math_h_fp_c99): New hack.\n\t* tests/base/math.h: Update.\n\t* fixincl.x: Regenerate.", "tree": {"sha": "12882274e7c20f56e9aff45813435aec192fc567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12882274e7c20f56e9aff45813435aec192fc567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2575586c47f56a2e75f734af42371579516f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2575586c47f56a2e75f734af42371579516f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2575586c47f56a2e75f734af42371579516f0c"}], "stats": {"total": 166, "additions": 161, "deletions": 5}, "files": [{"sha": "a83fa2f58194f3b3d21f0bce816d797a6078ceee", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  January  6, 2022 at 11:59:22 AM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  January 15, 2022 at 10:53:02 PM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Jan  6 11:59:22 UTC 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jan 15 22:53:02 UTC 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 263 fixup descriptions.\n+ * This file contains 264 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -10212,6 +10212,72 @@ static const char* apzVxworks_Ioctl_MacroPatch[] = {\n     \"extern[\\t ]+int[\\t ]+ioctl[\\t ]*\\\\([\\t ,[:alnum:]]*\\\\);\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Math_H_Fp_C99 fix\n+ */\n+tSCC zVxworks_Math_H_Fp_C99Name[] =\n+     \"vxworks_math_h_fp_c99\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Math_H_Fp_C99List[] =\n+  \"math.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Math_H_Fp_C99Machs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVxworks_Math_H_Fp_C99Select0[] =\n+       \"#define HUGE_VAL[ \\t]*_ARCH.*\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zVxworks_Math_H_Fp_C99Bypass0[] =\n+       \"#define[ \\t]+FP_INFINITE\";\n+\n+#define    VXWORKS_MATH_H_FP_C99_TEST_CT  2\n+static tTestDesc aVxworks_Math_H_Fp_C99Tests[] = {\n+  { TT_NEGREP,   zVxworks_Math_H_Fp_C99Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zVxworks_Math_H_Fp_C99Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Math_H_Fp_C99\n+ */\n+static const char* apzVxworks_Math_H_Fp_C99Patch[] = {\n+    \"format\",\n+    \"\\n\\\n+%0\\n\\n\\\n+#if _C99\\n\\n\\\n+#define FP_INFINITE  1\\n\\\n+#define FP_NAN       2\\n\\\n+#define FP_NORMAL    (-1)\\n\\\n+#define FP_SUBNORMAL (-2)\\n\\\n+#define FP_ZERO      0\\n\\n\\\n+#define fpclassify(x) \\\\\\n\\\n+  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, \\\\\\n\\\n+\\t\\t       FP_SUBNORMAL, FP_ZERO, (x))\\n\\n\\\n+#define signbit(x) __builtin_signbit(x)\\n\\\n+#define isfinite(x) __builtin_isfinite(x)\\n\\\n+#define isnormal(x) __builtin_isnormal(x)\\n\\\n+#define isnan(x) __builtin_isnan(x)\\n\\\n+#define isinf(x) __builtin_isinf(x)\\n\\n\\\n+#define isgreater(x, y) __builtin_isgreater((x),(y))\\n\\\n+#define isgreaterequal(x, y) __builtin_isgreaterequal((x),(y))\\n\\\n+#define isless(x, y) __builtin_isless((x),(y))\\n\\\n+#define islessequal(x, y) __builtin_islessequal((x),(y))\\n\\\n+#define islessgreater(x, y) __builtin_islessgreater((x),(y))\\n\\\n+#define isunordered(x, y) __builtin_isunordered((x),(y))\\n\\n\\\n+#endif /* _C99 */\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Vxworks_Posix_Mkdir fix\n@@ -10690,9 +10756,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          301\n+#define REGEX_COUNT          303\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            263\n+#define FIX_COUNT            264\n \n /*\n  *  Enumerate the fixes\n@@ -10949,6 +11015,7 @@ typedef enum {\n     VOID_NULL_FIXIDX,\n     VXWORKS_GCC_PROBLEM_FIXIDX,\n     VXWORKS_IOCTL_MACRO_FIXIDX,\n+    VXWORKS_MATH_H_FP_C99_FIXIDX,\n     VXWORKS_POSIX_MKDIR_FIXIDX,\n     VXWORKS_NEEDS_VXTYPES_FIXIDX,\n     VXWORKS_NEEDS_VXWORKS_FIXIDX,\n@@ -12219,6 +12286,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_IOCTL_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aVxworks_Ioctl_MacroTests,   apzVxworks_Ioctl_MacroPatch, 0 },\n \n+  {  zVxworks_Math_H_Fp_C99Name,    zVxworks_Math_H_Fp_C99List,\n+     apzVxworks_Math_H_Fp_C99Machs,\n+     VXWORKS_MATH_H_FP_C99_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Math_H_Fp_C99Tests,   apzVxworks_Math_H_Fp_C99Patch, 0 },\n+\n   {  zVxworks_Posix_MkdirName,    zVxworks_Posix_MkdirList,\n      apzVxworks_Posix_MkdirMachs,\n      VXWORKS_POSIX_MKDIR_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "275647885612216feef6e1f94e7696ecda012187", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "patch": "@@ -5157,6 +5157,56 @@ fix = {\n         \n     test_text   = \"extern int ioctl ( int asdf1234, int jkl , int qwerty ) ;\";\n };\n+ \n+/*\n+ * Provide C99 FP classification support in VxWorks math.h if\n+ * not already there. Note the strict expectation on #define without\n+ * whitespaces in the bypass expression, which \"works\" for\n+ * the system headers we have met and doesn't match test texts for\n+ * other hacks, found in the test baseline.\n+ */\n+fix = {\n+    hackname  = vxworks_math_h_fp_c99;\n+    mach      = \"*-*-vxworks*\";\n+    files     = math.h;\n+    bypass    = \"#define[ \\t]+FP_INFINITE\";\n+    select    = \"#define HUGE_VAL[ \\t]*_ARCH.*\";\n+    c_fix     = format;\n+    c_fix_arg = << _EOArg_\n+\n+%0\n+\n+#if _C99\n+\n+#define FP_INFINITE  1\n+#define FP_NAN       2\n+#define FP_NORMAL    (-1)\n+#define FP_SUBNORMAL (-2)\n+#define FP_ZERO      0\n+\n+#define fpclassify(x) \\\n+  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, \\\n+\t\t       FP_SUBNORMAL, FP_ZERO, (x))\n+\n+#define signbit(x) __builtin_signbit(x)\n+#define isfinite(x) __builtin_isfinite(x)\n+#define isnormal(x) __builtin_isnormal(x)\n+#define isnan(x) __builtin_isnan(x)\n+#define isinf(x) __builtin_isinf(x)\n+\n+#define isgreater(x, y) __builtin_isgreater((x),(y))\n+#define isgreaterequal(x, y) __builtin_isgreaterequal((x),(y))\n+#define isless(x, y) __builtin_isless((x),(y))\n+#define islessequal(x, y) __builtin_islessequal((x),(y))\n+#define islessgreater(x, y) __builtin_islessgreater((x),(y))\n+#define isunordered(x, y) __builtin_isunordered((x),(y))\n+\n+#endif /* _C99 */\n+\n+_EOArg_;\n+\n+    test_text  = \"#define HUGE_VAL _ARCH_HUGH_VAL\";\n+};\n \n /*\n  *  mkdir's posix interface expects two arguments.  While the RTP VxWorks"}, {"sha": "7525fd82ecf055f0ae4f81738cf7699e075a394a", "filename": "fixincludes/tests/base/math.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0/fixincludes%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmath.h?ref=00cc412660fe4d64c0b04da9ae20b1ad6ef92bb0", "patch": "@@ -104,6 +104,40 @@ extern int class();\n int foo;\n #endif\n #endif  /* STRICT_ANSI_NOT_CTD_CHECK */\n+\n+\n+#if defined( VXWORKS_MATH_H_FP_C99_CHECK )\n+\n+#define HUGE_VAL _ARCH_HUGH_VAL\n+\n+#if _C99\n+\n+#define FP_INFINITE  1\n+#define FP_NAN       2\n+#define FP_NORMAL    (-1)\n+#define FP_SUBNORMAL (-2)\n+#define FP_ZERO      0\n+\n+#define fpclassify(x) \\\n+  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, \\\n+\t\t       FP_SUBNORMAL, FP_ZERO, (x))\n+\n+#define signbit(x) __builtin_signbit(x)\n+#define isfinite(x) __builtin_isfinite(x)\n+#define isnormal(x) __builtin_isnormal(x)\n+#define isnan(x) __builtin_isnan(x)\n+#define isinf(x) __builtin_isinf(x)\n+\n+#define isgreater(x, y) __builtin_isgreater((x),(y))\n+#define isgreaterequal(x, y) __builtin_isgreaterequal((x),(y))\n+#define isless(x, y) __builtin_isless((x),(y))\n+#define islessequal(x, y) __builtin_islessequal((x),(y))\n+#define islessgreater(x, y) __builtin_islessgreater((x),(y))\n+#define isunordered(x, y) __builtin_isunordered((x),(y))\n+\n+#endif /* _C99 */\n+\n+#endif  /* VXWORKS_MATH_H_FP_C99_CHECK */\n #ifdef __cplusplus\n #undef exception\n #endif"}]}