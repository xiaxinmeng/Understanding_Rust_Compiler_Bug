{"sha": "3dc31f14c22af61d5074e9fff65049be7e7ee518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjMzFmMTRjMjJhZjYxZDUwNzRlOWZmZjY1MDQ5YmU3ZTdlZTUxOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-04T08:17:14Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-04T08:17:14Z"}, "message": "Initial revision\n\nFrom-SVN: r158", "tree": {"sha": "78301e6422ac48bdb177dffc3e44372f6d0c1e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78301e6422ac48bdb177dffc3e44372f6d0c1e13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dc31f14c22af61d5074e9fff65049be7e7ee518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc31f14c22af61d5074e9fff65049be7e7ee518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc31f14c22af61d5074e9fff65049be7e7ee518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc31f14c22af61d5074e9fff65049be7e7ee518/comments", "author": null, "committer": null, "parents": [{"sha": "524729d5c202e57e1582053d42df38966ebe4fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524729d5c202e57e1582053d42df38966ebe4fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524729d5c202e57e1582053d42df38966ebe4fce"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "7d1c5f89faa5b18e7fcafd0963f529f1612e9746", "filename": "gcc/assert.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dc31f14c22af61d5074e9fff65049be7e7ee518/gcc%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dc31f14c22af61d5074e9fff65049be7e7ee518/gcc%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fassert.h?ref=3dc31f14c22af61d5074e9fff65049be7e7ee518", "patch": "@@ -0,0 +1,42 @@\n+/* Allow this file to be included multiple times\n+   with different settings of NDEBUG.  */\n+#undef assert\n+#undef __assert\n+\n+#ifdef NDEBUG\n+#define assert(ignore) ((void) 0)\n+#else\n+\n+#ifndef __GNUC__\n+\n+#define assert(expression)  \\\n+  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))\n+\n+#define __assert(expression, file, lineno)  \\\n+  (printf (\"%s:%d: failed assertion\\n\", file, lineno),\t\\\n+   abort (), 0)\n+\n+#else\n+void __eprintf ();\t\t/* Defined in libgcc.a */\n+\n+#ifdef __STDC__\n+\n+#define assert(expression)  \\\n+  ((void) ((expression) ? 0 : __assert (#expression, __FILE__, __LINE__)))\n+\n+#define __assert(expression, file, line)  \\\n+  (__eprintf (\"%s:%d: failed assertion `%s'\\n\",\t\t\\\n+\t      file, line, expression), 0)\n+\n+#else /* no __STDC__; i.e. -traditional.  */\n+\n+#define assert(expression)  \\\n+  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))\n+\n+#define __assert(expression, file, lineno)  \\\n+  (__eprintf (\"%s:%d: failed assertion `%s'\\n\",\t\t\\\n+\t      file, lineno, \"expression\"), 0)\n+\n+#endif /* no __STDC__; i.e. -traditional.  */\n+#endif /* no __GNU__; i.e., /bin/cc.  */\n+#endif"}]}