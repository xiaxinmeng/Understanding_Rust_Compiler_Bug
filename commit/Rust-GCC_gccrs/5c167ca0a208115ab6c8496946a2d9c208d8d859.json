{"sha": "5c167ca0a208115ab6c8496946a2d9c208d8d859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxNjdjYTBhMjA4MTE1YWI2Yzg0OTY5NDZhMmQ5YzIwOGQ4ZDg1OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-21T22:23:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-21T22:23:23Z"}, "message": "compiler: Error if name defined in both package and file blocks.\n\nFrom-SVN: r194685", "tree": {"sha": "cf96cd27ec81f37394a138f6e77fc0e662004482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf96cd27ec81f37394a138f6e77fc0e662004482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c167ca0a208115ab6c8496946a2d9c208d8d859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c167ca0a208115ab6c8496946a2d9c208d8d859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c167ca0a208115ab6c8496946a2d9c208d8d859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c167ca0a208115ab6c8496946a2d9c208d8d859/comments", "author": null, "committer": null, "parents": [{"sha": "9f9957da5e219dec8a4b4580a8a416a6861cf8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9957da5e219dec8a4b4580a8a416a6861cf8e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9957da5e219dec8a4b4580a8a416a6861cf8e6"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "735b4c8120417b1a3cc5446ca536b8fabb8f024d", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c167ca0a208115ab6c8496946a2d9c208d8d859/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c167ca0a208115ab6c8496946a2d9c208d8d859/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=5c167ca0a208115ab6c8496946a2d9c208d8d859", "patch": "@@ -29,6 +29,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n     package_(NULL),\n     functions_(),\n     globals_(new Bindings(NULL)),\n+    file_block_names_(),\n     imports_(),\n     imported_unsafe_(false),\n     packages_(),\n@@ -1243,14 +1244,41 @@ Gogo::define_global_names()\n       else if (no->is_unknown())\n \tno->unknown_value()->set_real_named_object(global_no);\n     }\n+\n+  // Give an error if any name is defined in both the package block\n+  // and the file block.  For example, this can happen if one file\n+  // imports \"fmt\" and another file defines a global variable fmt.\n+  for (Bindings::const_declarations_iterator p =\n+\t this->package_->bindings()->begin_declarations();\n+       p != this->package_->bindings()->end_declarations();\n+       ++p)\n+    {\n+      if (p->second->is_unknown()\n+\t  && p->second->unknown_value()->real_named_object() == NULL)\n+\t{\n+\t  // No point in warning about an undefined name, as we will\n+\t  // get other errors later anyhow.\n+\t  continue;\n+\t}\n+      File_block_names::const_iterator pf =\n+\tthis->file_block_names_.find(p->second->name());\n+      if (pf != this->file_block_names_.end())\n+\t{\n+\t  std::string n = p->second->message_name();\n+\t  error_at(p->second->location(),\n+\t\t   \"%qs defined as both imported name and global name\",\n+\t\t   n.c_str());\n+\t  inform(pf->second, \"%qs imported here\", n.c_str());\n+\t}\n+    }\n }\n \n // Clear out names in file scope.\n \n void\n Gogo::clear_file_scope()\n {\n-  this->package_->bindings()->clear_file_scope();\n+  this->package_->bindings()->clear_file_scope(this);\n \n   // Warn about packages which were imported but not used.\n   bool quiet = saw_errors();\n@@ -4855,7 +4883,7 @@ Bindings::Bindings(Bindings* enclosing)\n // Clear imports.\n \n void\n-Bindings::clear_file_scope()\n+Bindings::clear_file_scope(Gogo* gogo)\n {\n   Contour::iterator p = this->bindings_.begin();\n   while (p != this->bindings_.end())\n@@ -4875,7 +4903,10 @@ Bindings::clear_file_scope()\n       if (keep)\n \t++p;\n       else\n-\tp = this->bindings_.erase(p);\n+\t{\n+\t  gogo->add_file_block_name(p->second->name(), p->second->location());\n+\t  p = this->bindings_.erase(p);\n+\t}\n     }\n }\n "}, {"sha": "f96ffcdfdb9fb6a7152bb6f820b639b7552f0f6e", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c167ca0a208115ab6c8496946a2d9c208d8d859/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c167ca0a208115ab6c8496946a2d9c208d8d859/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=5c167ca0a208115ab6c8496946a2d9c208d8d859", "patch": "@@ -377,6 +377,11 @@ class Gogo\n   void\n   add_named_object(Named_object*);\n \n+  // Add an identifier to the list of names seen in the file block.\n+  void\n+  add_file_block_name(const std::string& name, Location location)\n+  { this->file_block_names_[name] = location; }\n+\n   // Mark all local variables in current bindings as used.  This is\n   // used when there is a parse error to avoid useless errors.\n   void\n@@ -678,6 +683,10 @@ class Gogo\n   // This is used for initialization dependency analysis.\n   typedef std::map<Variable*, Named_object*> Var_deps;\n \n+  // Type used to map identifiers in the file block to the location\n+  // where they were defined.\n+  typedef Unordered_map(std::string, Location) File_block_names;\n+\n   // Type used to queue writing a type specific function.\n   struct Specific_type_function\n   {\n@@ -710,6 +719,8 @@ class Gogo\n   // The global binding contour.  This includes the builtin functions\n   // and the package we are compiling.\n   Bindings* globals_;\n+  // The list of names we have seen in the file block.\n+  File_block_names file_block_names_;\n   // Mapping from import file names to packages.\n   Imports imports_;\n   // Whether the magic unsafe package was imported.\n@@ -2265,7 +2276,7 @@ class Bindings\n \n   // Clear all names in file scope from the bindings.\n   void\n-  clear_file_scope();\n+  clear_file_scope(Gogo*);\n \n   // Look up a name in this binding contour and in any enclosing\n   // binding contours.  This returns NULL if the name is not found."}, {"sha": "2656757ae9e11818fedaec97a60b3a597b2b8839", "filename": "libgo/go/image/image_test.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c167ca0a208115ab6c8496946a2d9c208d8d859/libgo%2Fgo%2Fimage%2Fimage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c167ca0a208115ab6c8496946a2d9c208d8d859/libgo%2Fgo%2Fimage%2Fimage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fimage_test.go?ref=5c167ca0a208115ab6c8496946a2d9c208d8d859", "patch": "@@ -10,7 +10,7 @@ import (\n \t\"testing\"\n )\n \n-type image interface {\n+type timage interface {\n \tImage\n \tOpaque() bool\n \tSet(int, int, color.Color)\n@@ -24,7 +24,7 @@ func cmp(t *testing.T, cm color.Model, c0, c1 color.Color) bool {\n }\n \n func TestImage(t *testing.T) {\n-\ttestImage := []image{\n+\ttestImage := []timage{\n \t\tNewRGBA(Rect(0, 0, 10, 10)),\n \t\tNewRGBA64(Rect(0, 0, 10, 10)),\n \t\tNewNRGBA(Rect(0, 0, 10, 10)),\n@@ -52,11 +52,11 @@ func TestImage(t *testing.T) {\n \t\t\tt.Errorf(\"%T: at (6, 3), want a non-zero color, got %v\", m, m.At(6, 3))\n \t\t\tcontinue\n \t\t}\n-\t\tif !m.SubImage(Rect(6, 3, 7, 4)).(image).Opaque() {\n+\t\tif !m.SubImage(Rect(6, 3, 7, 4)).(timage).Opaque() {\n \t\t\tt.Errorf(\"%T: at (6, 3) was not opaque\", m)\n \t\t\tcontinue\n \t\t}\n-\t\tm = m.SubImage(Rect(3, 2, 9, 8)).(image)\n+\t\tm = m.SubImage(Rect(3, 2, 9, 8)).(timage)\n \t\tif !Rect(3, 2, 9, 8).Eq(m.Bounds()) {\n \t\t\tt.Errorf(\"%T: sub-image want bounds %v, got %v\", m, Rect(3, 2, 9, 8), m.Bounds())\n \t\t\tcontinue\n@@ -97,7 +97,7 @@ func Test16BitsPerColorChannel(t *testing.T) {\n \t\t\tcontinue\n \t\t}\n \t}\n-\ttestImage := []image{\n+\ttestImage := []timage{\n \t\tNewRGBA64(Rect(0, 0, 10, 10)),\n \t\tNewNRGBA64(Rect(0, 0, 10, 10)),\n \t\tNewAlpha16(Rect(0, 0, 10, 10)),"}]}