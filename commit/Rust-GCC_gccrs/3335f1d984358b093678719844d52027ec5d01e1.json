{"sha": "3335f1d984358b093678719844d52027ec5d01e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzNWYxZDk4NDM1OGIwOTM2Nzg3MTk4NDRkNTIwMjdlYzVkMDFlMQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-02-19T00:05:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-02-19T00:05:49Z"}, "message": "Makefile.in (rtlanal.o): Depend on hard-reg-set.h.\n\n       * Makefile.in (rtlanal.o): Depend on hard-reg-set.h.\n        ($HOST_PREFIX_1)rtlanal.o: Remove rules for building\n        (mostlyclean): Corresponding changes.\n        * rtlanal.c (hard-reg-set.h): Include.\n        (rtx_unstable_p): Do not treat the argument pointer specially\n        if it is not a fixed register.\n        (rtx_varies_p, rtx_addr_can_trap_p): Similarly.\n\nFrom-SVN: r39860", "tree": {"sha": "19d7be78d89e48bd3e789632fac7f037bd11c43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d7be78d89e48bd3e789632fac7f037bd11c43d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3335f1d984358b093678719844d52027ec5d01e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335f1d984358b093678719844d52027ec5d01e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3335f1d984358b093678719844d52027ec5d01e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335f1d984358b093678719844d52027ec5d01e1/comments", "author": null, "committer": null, "parents": [{"sha": "021921d0e44e1ab96434d8881b96306bd3df4c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021921d0e44e1ab96434d8881b96306bd3df4c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021921d0e44e1ab96434d8881b96306bd3df4c31"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "8b64e261cad5c5e6f79267212f7358b6fd71bfc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3335f1d984358b093678719844d52027ec5d01e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3335f1d984358b093678719844d52027ec5d01e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3335f1d984358b093678719844d52027ec5d01e1", "patch": "@@ -1,3 +1,13 @@\n+Sun Feb 18 17:05:50 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* Makefile.in (rtlanal.o): Depend on hard-reg-set.h.\n+\t($HOST_PREFIX_1)rtlanal.o: Remove rules for building\n+\t(mostlyclean): Corresponding changes.\n+\t* rtlanal.c (hard-reg-set.h): Include.\n+\t(rtx_unstable_p): Do not treat the argument pointer specially\n+\tif it is not a fixed register.\n+\t(rtx_varies_p, rtx_addr_can_trap_p): Similarly.\n+\n Sun Feb 18 15:45:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* sibcall.c (optimize_sibling_and_tail_recursive_call): Compare"}, {"sha": "b71ca649bca7fabf07f1f3b2277ef7a57f70c6e1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3335f1d984358b093678719844d52027ec5d01e1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3335f1d984358b093678719844d52027ec5d01e1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3335f1d984358b093678719844d52027ec5d01e1", "patch": "@@ -1352,7 +1352,7 @@ rtl.o : rtl.c $(GCONFIG_H) system.h $(RTL_H) bitmap.h $(GGC_H) toplev.h\n print-rtl.o : print-rtl.c $(GCONFIG_H) system.h $(RTL_H) hard-reg-set.h \\\n     $(BASIC_BLOCK_H)\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-rtlanal.o : rtlanal.c $(CONFIG_H) system.h toplev.h $(RTL_H)\n+rtlanal.o : rtlanal.c $(CONFIG_H) system.h toplev.h $(RTL_H) hard-reg-set.h\n errors.o : errors.c $(GCONFIG_H) system.h errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n@@ -1832,11 +1832,6 @@ $(HOST_PREFIX_1)bitmap.o: $(srcdir)/bitmap.c $(CONFIG_H) system.h $(RTL_H) \\\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/bitmap.c > $(HOST_PREFIX)bitmap.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)bitmap.c\n \n-$(HOST_PREFIX_1)rtlanal.o: $(srcdir)/rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n-\trm -f $(HOST_PREFIX)rtlanal.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c\n-\n $(HOST_PREFIX_1)alloca.o: $(srcdir)/../libiberty/alloca.c\n \trm -f $(HOST_PREFIX)alloca.c\n \t$(LN_S) $(srcdir)/../libiberty/alloca.c $(HOST_PREFIX)alloca.c\n@@ -2292,7 +2287,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f $(STAGESTUFF)\n \t-rm -rf libgcc\n # Delete the temporary source copies for cross compilation.\n-\t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n+\t-rm -f $(HOST_PREFIX_1)rtl.c\n \t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n \t-rm -f $(HOST_PREFIX_1)obstack.c\n # Delete the temp files made in the course of building libgcc.a."}, {"sha": "6e6ed8e7b2b59fcee9a417d56edd113309940fed", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3335f1d984358b093678719844d52027ec5d01e1/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3335f1d984358b093678719844d52027ec5d01e1/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3335f1d984358b093678719844d52027ec5d01e1", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"toplev.h\"\n #include \"rtl.h\"\n+#include \"hard-reg-set.h\"\n \n /* Forward declarations */\n static void set_of_1\t\tPARAMS ((rtx, rtx, void *));\n@@ -67,7 +68,9 @@ rtx_unstable_p (x)\n     case REG:\n       /* As in rtx_varies_p, we have to use the actual rtx, not reg number.  */\n       if (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t  || x == arg_pointer_rtx || RTX_UNCHANGING_P (x))\n+\t  /* The arg pointer varies if it is not a fixed register.  */\n+\t  || (x == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM])\n+\t  || RTX_UNCHANGING_P (x))\n \treturn 0;\n #ifndef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n       /* ??? When call-clobbered, the value is stable modulo the restore\n@@ -143,7 +146,8 @@ rtx_varies_p (x, for_alias)\n \t eliminated the frame and/or arg pointer and are using it\n \t for pseudos.  */\n       if (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t  || x == arg_pointer_rtx)\n+\t  /* The arg pointer varies if it is not a fixed register.  */\n+\t  || (x == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM]))\n \treturn 0;\n       if (x == pic_offset_table_rtx\n #ifdef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n@@ -211,7 +215,9 @@ rtx_addr_can_trap_p (x)\n     case REG:\n       /* As in rtx_varies_p, we have to use the actual rtx, not reg number.  */\n       return ! (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t\t|| x == stack_pointer_rtx || x == arg_pointer_rtx);\n+\t\t|| x == stack_pointer_rtx\n+\t\t/* The arg pointer varies if it is not a fixed register.  */\n+\t\t|| (x == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM]));\n \n     case CONST:\n       return rtx_addr_can_trap_p (XEXP (x, 0));"}]}