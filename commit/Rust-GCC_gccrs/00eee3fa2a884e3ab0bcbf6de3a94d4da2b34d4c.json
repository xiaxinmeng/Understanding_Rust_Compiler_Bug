{"sha": "00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlZWUzZmEyYTg4NGUzYWIwYmNiZjZkZTNhOTRkNGRhMmIzNGQ0Yw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-06-28T14:21:04Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-06-28T14:21:04Z"}, "message": "This patch fixes a failure in gcc.target/aarch64/reload-valid-spoff.c triggered...\n\nThis patch fixes a failure in gcc.target/aarch64/reload-valid-spoff.c \ntriggered by https://gcc.gnu.org/ml/gcc-patches/2017-06/msg01367.html.\n\nIn ILP32 all memory accesses must have Pmode as the base address, but\naarch64_expand_mov_immediate wasn't emitting a conversion in one case.\nBesides fixing this add an assert that flags any MEM operands that are\nnot Pmode.\n\n    gcc/\n\t* config/aarch64/aarch64 (aarch64_expand_mov_immediate):\n\tConvert memory address to Pmode.\n\t(aarch64_print_operand): Assert MEM operands are always Pmode.\n\nFrom-SVN: r249741", "tree": {"sha": "1a726e130fb2f4988169293c6da71dc094da315a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a726e130fb2f4988169293c6da71dc094da315a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c/comments", "author": null, "committer": null, "parents": [{"sha": "55994b971b02a3808f3776ce66e890ecc1c7b759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55994b971b02a3808f3776ce66e890ecc1c7b759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55994b971b02a3808f3776ce66e890ecc1c7b759"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "293671b8ff285b952aca69a1aa35ac7a72209e63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "patch": "@@ -1,3 +1,9 @@\n+2017-06-28  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64 (aarch64_expand_mov_immediate):\n+\tConvert memory address to Pmode.\n+\t(aarch64_print_operand): Assert MEM operands are always Pmode.\n+\n 2017-06-28  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/79665"}, {"sha": "593263ff9b2900be4ca2c08aa27473f0e2e2a781", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=00eee3fa2a884e3ab0bcbf6de3a94d4da2b34d4c", "patch": "@@ -2002,6 +2002,8 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t      gcc_assert (can_create_pseudo_p ());\n \t      base = gen_reg_rtx (ptr_mode);\n \t      aarch64_expand_mov_immediate (base, XEXP (mem, 0));\n+\t      if (ptr_mode != Pmode)\n+\t\tbase = convert_memory_address (Pmode, base);\n \t      mem = gen_rtx_MEM (ptr_mode, base);\n \t    }\n \n@@ -5265,6 +5267,8 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n \n \tcase MEM:\n \t  output_address (GET_MODE (x), XEXP (x, 0));\n+\t  /* Check all memory references are Pmode - even with ILP32.  */\n+\t  gcc_assert (GET_MODE (XEXP (x, 0)) == Pmode);\n \t  break;\n \n \tcase CONST:"}]}