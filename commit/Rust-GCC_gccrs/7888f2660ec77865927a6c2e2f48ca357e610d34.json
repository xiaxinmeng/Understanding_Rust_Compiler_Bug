{"sha": "7888f2660ec77865927a6c2e2f48ca357e610d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4OGYyNjYwZWM3Nzg2NTkyN2E2YzJlMmY0OGNhMzU3ZTYxMGQzNA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-03-14T17:08:03Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-03-14T17:08:03Z"}, "message": "Remove obsolete Solaris 8 support\n\n\tlibstdc++-v3:\n\t* config/os/solaris/solaris2.8: Rename to ...\n\t* config/os/solaris/solaris2.9: ... this.\n\t* config/abi/post/solaris2.8: Rename to ...\n\t* config/abi/post/solaris2.9: ... this.\n\t* configure.host (os_include_dir): Remove solaris2.8.\n\tReflect renaming.\n\t(abi_baseline_pair): Remove *-*-solaris2.8.\n\tReflect renaming.\n\n\t* configure.ac (GLIBCXX_CHECK_MATH_PROTO): Remove\n\t(GLIBCXX_CHECK_STDLIB_PROTO): Remove.\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH_PROTO): Remove\n\t(GLIBCXX_CHECK_STDLIB_PROTO): Remove.\n\t(GLIBCXX_CHECK_GTHREADS): Remove Solaris 8 handling.\n\t* crossconfig.m4 (GLIBCXX_CROSSCONFIG): Remove *-solaris2.8\n\thandling.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n\t* config/os/solaris/solaris2.9/os_defines.h\n\t(__CORRECT_ISO_CPP_MATH_H_PROTO): Define.\n\t(__CORRECT_ISO_CPP_STDLIB_H_PROTO): Define.\n\t* include/c_global/cmath: Rename __CORRECT_ISO_CPP_MATH_H_PROTO1\n\tto __CORRECT_ISO_CPP_MATH_H_PROTO.\n\t[!__CORRECT_ISO_CPP_MATH_H_PROTO2]: Remove.\n\t* include/tr1/cmath: Rename __CORRECT_ISO_CPP_MATH_H_PROTO1 to\n\t__CORRECT_ISO_CPP_MATH_H_PROTO.\n\n\t* doc/xml/manual/configure.xml (Configure, --enable-libstdcxx-threads):\n\tRemove Solaris 8 reference.\n\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n\tDon't xfail on *-*-solaris2.8.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n\tLikewise.\n\t* testsuite/ext/enc_filebuf/char/13598.cc: Don't xfail on\n\t*-*-solaris2.8.\n\n\tlibjava:\n\t* configure.ac (THREADLIBS): Remove *-*-solaris2.8 handling.\n\t* configure: Regenerate.\n\n\tlibgcc:\n\t* config/i386/sol2-unwind.h (x86_fallback_frame_state): Remove\n\tSolaris 8 handling.\n\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove\n\tSolaris 8 handling.\n\t(sparc_is_sighandler): Likewise.\n\n\tlibcpp:\n\t* lex.c: Remove Solaris 8 reference.\n\n\tgcc/testsuite:\n\t* g++.dg/warn/miss-format-1.C: Remove *-*-solaris2.8 handling.\n\t* gcc.dg/c99-stdint-6.c: Likewise.\n\t* gcc.dg/lto/20090210_0.c: Likewise.\n\t* gcc.dg/pr28796-2.c: Don't skip on sparc*-sun-solaris2.8.\n\t* gcc.dg/pragma-init-fini.c: Don't skip on i?86-*-solaris2.8.\n\t* gcc.dg/pragma-init-fini-2.c: Likewise.\n\t* gcc.dg/torture/pr47917.c: Remove *-*-solaris2.8 handling.\n\t* gcc.target/i386/pr22076.c: Remove i?86-*-solaris2.8 handling.\n\t* gcc.target/i386/pr22152.c: Likewise.\n\t* gcc.target/i386/vect8-ret.c: Likewise.\n\t* lib/target-supports.exp (add_options_for_tls): Remove Solaris 8\n\thandling.\n\n\tgcc:\n\t* config.gcc (enable_obsolete): Remove *-*-solaris2.8*.\n\t(*-*-solaris2.[0-8], *-*-solaris2.[0-8].*): Mark unsupported.\n\t(i[34567]86-*-solaris2*, x86_64-*-solaris2.1[0-9]*): Remove\n\tSolaris 8 support.\n\t* configure.ac (gcc_cv_ld_hidden): Remove *-*-solaris2.8*.\n\t(ld_tls_support): Remove Solaris 8 references.\n\t(lwp_dir, lwp_spec): Remove support for alternate thread library.\n\t* acinclude.m4 (gcc_cv_initfini_array): Remove *-*-solaris2.*\n\ttests.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\n\t* config/sol2.h (LINK_SPEC): Remove LIB_THREAD_LDFLAGS_SPEC.\n\t* config/i386/sol2.h: Remove Solaris 8 references.\n\n\t* doc/install.texi (Specific, i?86-*-solaris2.[89]): Rename to ...\n\t(i?86-*-solaris2.9): ... this.\n\tRemove Solaris 8 references.\n\t(Specific, *-*-solaris2*): Document Solaris 8 removal.\n\tRemove Solaris 8 references.\n\n\tfixincludes:\n\t* inclhack.def (math_exception): Remove duplicate.\n\t(solaris_cond_init): Remove.\n\t(solaris_sys_va_list): Remove Solaris 8 support.\n\t* fixincl.x: Regenerate.\n\t* tests/base/pthread.h [SOLARIS_COND_INIT_CHECK]: Remove.\n\nFrom-SVN: r185392", "tree": {"sha": "39b15eece6c1f4effe291a240aa3ff5c07c2fa1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b15eece6c1f4effe291a240aa3ff5c07c2fa1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7888f2660ec77865927a6c2e2f48ca357e610d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7888f2660ec77865927a6c2e2f48ca357e610d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7888f2660ec77865927a6c2e2f48ca357e610d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7888f2660ec77865927a6c2e2f48ca357e610d34/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fc4233a7f71afb113a75f62cec7f6758b05560e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc4233a7f71afb113a75f62cec7f6758b05560e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc4233a7f71afb113a75f62cec7f6758b05560e"}], "stats": {"total": 977, "additions": 245, "deletions": 732}, "files": [{"sha": "aff2eae1947e7ae57ffeb5cc57b7b56de006ea90", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,11 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (math_exception): Remove duplicate.\n+\t(solaris_cond_init): Remove.\n+\t(solaris_sys_va_list): Remove Solaris 8 support.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/pthread.h [SOLARIS_COND_INIT_CHECK]: Remove.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* inclhack.def (broken_cabs): Remove IRIX and SunOS 4 support."}, {"sha": "b6a804dcb413f52940b60881cf825076fba7f205", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 6, "deletions": 50, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Wednesday March 14, 2012 at 02:41:19 PM MET\n+ * It has been AutoGen-ed  Wednesday March 14, 2012 at 03:19:50 PM MET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Mar 14 14:41:19 MET 2012\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Mar 14 15:19:50 MET 2012\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 212 fixup descriptions.\n+ * This file contains 211 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -5718,44 +5718,6 @@ extern \\\"C\\\" {\\\\\\n\\\n #endif\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Cond_Init fix\n- */\n-tSCC zSolaris_Cond_InitName[] =\n-     \"solaris_cond_init\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Cond_InitList[] =\n-  \"pthread.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzSolaris_Cond_InitMachs[] = {\n-        \"*-*-solaris2.8\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Cond_InitSelect0[] =\n-       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-#define    SOLARIS_COND_INIT_TEST_CT  1\n-static tTestDesc aSolaris_Cond_InitTests[] = {\n-  { TT_EGREP,    zSolaris_Cond_InitSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Cond_Init\n- */\n-static const char* apzSolaris_Cond_InitPatch[] = {\n-    \"format\",\n-    \"%1, 0x4356%2\",\n-    \"^(#define[ \\t]+PTHREAD_COND_INITIALIZER[ \\t]+\\\\{.*0)(\\\\},[ \\t]*0\\\\}.*)$\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Cxx_Linkage fix\n@@ -6725,7 +6687,7 @@ tSCC zSolaris_Sys_Va_ListList[] =\n  *  Machine/OS name selection pattern\n  */\n tSCC* apzSolaris_Sys_Va_ListMachs[] = {\n-        \"*-*-solaris2.[89]\",\n+        \"*-*-solaris2.9\",\n         (const char*)NULL };\n \n /*\n@@ -8630,9 +8592,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          255\n+#define REGEX_COUNT          254\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            212\n+#define FIX_COUNT            211\n \n /*\n  *  Enumerate the fixes\n@@ -8778,7 +8740,6 @@ typedef enum {\n     SOLARIS___RESTRICT_FIXIDX,\n     SOLARIS_COMPLEX_FIXIDX,\n     SOLARIS_COMPLEX_CXX_FIXIDX,\n-    SOLARIS_COND_INIT_FIXIDX,\n     SOLARIS_CXX_LINKAGE_FIXIDX,\n     SOLARIS_GETC_STRICT_STDC_FIXIDX,\n     SOLARIS_LONGJMP_NORETURN_FIXIDX,\n@@ -9553,11 +9514,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_COMPLEX_CXX_TEST_CT, FD_MACH_ONLY,\n      aSolaris_Complex_CxxTests,   apzSolaris_Complex_CxxPatch, 0 },\n \n-  {  zSolaris_Cond_InitName,    zSolaris_Cond_InitList,\n-     apzSolaris_Cond_InitMachs,\n-     SOLARIS_COND_INIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Cond_InitTests,   apzSolaris_Cond_InitPatch, 0 },\n-\n   {  zSolaris_Cxx_LinkageName,    zSolaris_Cxx_LinkageList,\n      apzSolaris_Cxx_LinkageMachs,\n      SOLARIS_CXX_LINKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "2d632b32d0f6182c529ad2e937d3dcf7e18446a1", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2382,7 +2382,7 @@ fix = {\n     files     = math.h;\n     select    = \"struct exception\";\n     /*\n-     * This should be bypassed on __cplusplus, but some supposedly C++ C++\n+     * This should be bypassed on __cplusplus, but some supposedly C++\n      * aware headers, such as Solaris 8 and 9, don't wrap their struct\n      * exception either.  So currently we bypass only for glibc, based on a\n      * comment in the fixed glibc header.  Ick.\n@@ -2925,26 +2925,6 @@ fix = {\n };\n \n \n-/*\n- * Solaris 8 PTHREAD_COND_INITIALIZER lacks the __pthread_cond_magic field.\n- * COND_MAGIC is only defined in <synch.h> and pollutes the namespace, so\n- * use the value literally instead.\n- */\n-fix = {\n-    hackname = solaris_cond_init;\n-    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    files = pthread.h;\n-    mach = '*-*-solaris2.8';\n-    c_fix = format;\n-    c_fix_arg = \"%1, 0x4356%2\";\n-    c_fix_arg = \"^(#define[ \\t]+PTHREAD_COND_INITIALIZER[ \\t]+\"\n-                \"\\\\{.*0)(\\\\},[ \\t]*0\\\\}.*)$\";\n-    test_text =\n-    '#pragma ident\t\"@(#)pthread.h\t1.29\t01/07/07 SMI\"'\"\\n\"\n-    '#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0}, 0}\t/* = DEFAULTCV */';\n-};\n-\n-\n /*\n  *  g++ rejects functions declared with both C and C++ linkage.\n  */\n@@ -3422,13 +3402,13 @@ fix = {\n \n \n /*\n- * On Solaris 8 and 9, __va_list needs to become a typedef for\n+ * On Solaris 9, __va_list needs to become a typedef for\n  * __builtin_va_list to make -Wmissing-format-attribute work.\n  */\n fix = {\n     hackname = solaris_sys_va_list;\n     files    = sys/va_list.h;\n-    mach     = '*-*-solaris2.[89]';\n+    mach     = '*-*-solaris2.9';\n     select   = \"#if.*__STDC__.*\\n\"\n \t       \"typedef void \\\\*__va_list;\\n\"\n \t       \"#else\\n\""}, {"sha": "dc719166049e7eb3ac431ac0a6ea942aa9cbe366", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -75,16 +75,6 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #endif  /* PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK */\n \n \n-#if defined( SOLARIS_COND_INIT_CHECK )\n-#pragma ident\t\"@(#)pthread.h\t1.29\t01/07/07 SMI\"\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, 0}\t/* = DEFAULTCV */\n-#else\n-#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, {0}}\t/* = DEFAULTCV */\n-#endif\n-#endif  /* SOLARIS_COND_INIT_CHECK */\n-\n-\n #if defined( SOLARIS_MUTEX_INIT_2_CHECK )\n #ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)"}, {"sha": "91590b285c30f1f21059da4e4465c33bb98144f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,26 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (enable_obsolete): Remove *-*-solaris2.8*.\n+\t(*-*-solaris2.[0-8], *-*-solaris2.[0-8].*): Mark unsupported.\n+\t(i[34567]86-*-solaris2*, x86_64-*-solaris2.1[0-9]*): Remove\n+\tSolaris 8 support.\n+\t* configure.ac (gcc_cv_ld_hidden): Remove *-*-solaris2.8*.\n+\t(ld_tls_support): Remove Solaris 8 references.\n+\t(lwp_dir, lwp_spec): Remove support for alternate thread library.\n+\t* acinclude.m4 (gcc_cv_initfini_array): Remove *-*-solaris2.*\n+\ttests.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n+\t* config/sol2.h (LINK_SPEC): Remove LIB_THREAD_LDFLAGS_SPEC.\n+\t* config/i386/sol2.h: Remove Solaris 8 references.\n+\n+\t* doc/install.texi (Specific, i?86-*-solaris2.[89]): Rename to ...\n+\t(i?86-*-solaris2.9): ... this.\n+\tRemove Solaris 8 references.\n+\t(Specific, *-*-solaris2*): Document Solaris 8 removal.\n+\tRemove Solaris 8 references.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc (enable_obsolete): Remove mips-sgi-irix6.5."}, {"sha": "84b828fe5982d3d8e125c60482c3e8a802afc51b", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -461,23 +461,7 @@ changequote([,])dnl\n #  error The C library not known to support .init_array/.fini_array\n # endif\n #endif\n-])],[\n-    case \"${target}\" in\n-      *-*-solaris2.8*)\n-\t# .init_array/.fini_array support was introduced in Solaris 8\n-\t# patches 109147-08 (sparc) and 109148-08 (x86).  Since ld.so.1 and\n-\t# ld are guaranteed to be updated in lockstep, we can check ld -V\n-\t# instead.  Unfortunately, proper ld version numbers were only\n-\t# introduced in rev. -14, so we check for that.\n-  \tif test \"$gcc_cv_sun_ld_vers_minor\" -lt 272; then\n-\t  gcc_cv_initfini_array=no\n-\tfi\n-      ;;\n-      *-*-solaris2.9* | *-*-solaris2.1[[0-9]]*)\n-        # .init_array/.fini_array support is present since Solaris 9 FCS.\n-        ;;\n-    esac\n-], [gcc_cv_initfini_array=no]);;\n+])],, [gcc_cv_initfini_array=no]);;\n     esac\n   else\n     AC_MSG_CHECKING(cross compile... guessing)"}, {"sha": "bf05d44cc8ba60d858cef07b833ccc5b30d2f83f", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -251,7 +251,6 @@ case ${target} in\n  | arm*-*-uclinux*\t\t\t\\\n  | arm*-wince-pe*\t\t\t\\\n  | score-*\t\t\t\t\\\n- | *-*-solaris2.8*\t\t\t\\\n  )\n     if test \"x$enable_obsolete\" != xyes; then\n       echo \"*** Configuration ${target} is obsolete.\" >&2\n@@ -282,9 +281,9 @@ case ${target} in\n  | *-*-rtemsaout*\t\t\t\\\n  | *-*-rtemscoff*\t\t\t\\\n  | *-*-solaris2\t\t\t\t\\\n- | *-*-solaris2.[0-7]\t\t\t\\\n- | *-*-solaris2.[0-7].*\t\t\t\\\n- | *-*-sysv*\t\t\\\n+ | *-*-solaris2.[0-8]\t\t\t\\\n+ | *-*-solaris2.[0-8].*\t\t\t\\\n+ | *-*-sysv*\t\t\t\t\\\n  | vax-*-vms*\t\t\t\t\\\n  )\n \techo \"*** Configuration ${target} not supported\" 1>&2\n@@ -1321,9 +1320,8 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t# Set default arch_32 to pentium4, tune_32 to generic like the other\n \t# i386 targets, although config.guess defaults to i386-pc-solaris2*.\n \tcase ${target} in\n-\t*-*-solaris2.[89]*)\n-\t\t# Solaris 8 and 9/x86 cannot execute SSE/SSE2 instructions by\n-\t\t# default.\n+\t*-*-solaris2.9*)\n+\t\t# Solaris 9/x86 cannot execute SSE/SSE2 instructions by default.\n \t\twith_arch_32=${with_arch_32:-pentiumpro}\n \t\t;;\n \t*)"}, {"sha": "8806012ffed4060b62a049bf9cf0a67ef6518dca", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1606,12 +1606,6 @@\n #endif\n \n \n-/* Define to the linker flags to use for -pthread. */\n-#ifndef USED_FOR_TARGET\n-#undef LIB_THREAD_LDFLAGS_SPEC\n-#endif\n-\n-\n /* Define to the library containing __tls_get_addr/___tls_get_addr. */\n #ifndef USED_FOR_TARGET\n #undef LIB_TLS_SPEC"}, {"sha": "43b34b8bd0d06f2f8fbe41ae0fa8e6efb2d99739", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GCC for Intel 80386 running Solaris 2\n    Copyright (C) 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   2004, 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Fred Fish (fnf@cygnus.com).\n \n This file is part of GCC.\n@@ -21,7 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Augment i386/unix.h version to return 8-byte vectors in memory, matching\n    Sun Studio compilers until version 12, the only ones supported on\n-   Solaris 8 and 9.  */\n+   Solaris 9.  */\n #undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT \\\n \t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n@@ -63,7 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define ASM_CPU_SPEC \"\"\n  \n-/* Don't include ASM_PIC_SPEC.  While the Solaris 8 and 9 assembler accepts\n+/* Don't include ASM_PIC_SPEC.  While the Solaris 9 assembler accepts\n    -K PIC, it gives many warnings:\n \tR_386_32 relocation is used for symbol \"<symbol>\"\n    GNU as doesn't recognize -K at all.  */"}, {"sha": "670dbaa782fd24ba860a9646260618a336bf3f9d", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for any\n    Solaris 2 system.\n-   Copyright 2002, 2003, 2004, 2007, 2008, 2009, 2010, 2011\n+   Copyright 2002, 2003, 2004, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -173,7 +173,6 @@ along with GCC; see the file COPYING3.  If not see\n    %{static:-dn -Bstatic} \\\n    %{shared:-G -dy %{!mimpure-text:-z text}} \\\n    %{symbolic:-Bsymbolic -G -dy -z text} \\\n-   %{pthreads|pthread|fprofile-generate*:\" LIB_THREAD_LDFLAGS_SPEC \"} \\\n    %(link_arch) \\\n    %{Qy:} %{!Qn:-Qy}\"\n "}, {"sha": "9bf2298e4fc73dbc50843958816842ca99a88f06", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 71, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -22264,15 +22264,6 @@ else\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;\n-      *-*-solaris2.8*)\n-        # .hidden support was backported to Solaris 8, starting with ld\n-\t# version 1.276.\n-\tif test \"$ld_vers_minor\" -ge 276; then\n-\t  gcc_cv_ld_hidden=yes\n-\telse\n-\t  gcc_cv_ld_hidden=no\n-\tfi\n-\t;;\n       *-*-solaris2.9* | *-*-solaris2.1[0-9]*)\n \t# Support for .hidden in Sun ld appeared in Solaris 9 FCS, but\n \t# .symbolic was only added in Solaris 9 12/02.\n@@ -22470,22 +22461,6 @@ EOF\n _ACEOF\n if ac_fn_c_try_cpp \"$LINENO\"; then :\n \n-    case \"${target}\" in\n-      *-*-solaris2.8*)\n-\t# .init_array/.fini_array support was introduced in Solaris 8\n-\t# patches 109147-08 (sparc) and 109148-08 (x86).  Since ld.so.1 and\n-\t# ld are guaranteed to be updated in lockstep, we can check ld -V\n-\t# instead.  Unfortunately, proper ld version numbers were only\n-\t# introduced in rev. -14, so we check for that.\n-  \tif test \"$gcc_cv_sun_ld_vers_minor\" -lt 272; then\n-\t  gcc_cv_initfini_array=no\n-\tfi\n-      ;;\n-      *-*-solaris2.9* | *-*-solaris2.1[0-9]*)\n-        # .init_array/.fini_array support is present since Solaris 9 FCS.\n-        ;;\n-    esac\n-\n else\n   gcc_cv_initfini_array=no\n fi\n@@ -23611,10 +23586,9 @@ if test $gcc_cv_as_tls = yes; then\n fi\n fi\n case \"$target\" in\n-  # TLS was introduced in the Solaris 9 FCS release and backported to\n-  # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n-  # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n-  # ld and GCC don't support any longer.\n+  # TLS was introduced in the Solaris 9 FCS release.  Support for GNU-style\n+  # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n+  # Sun style that Sun ld and GCC don't support any longer.\n   *-*-solaris2.*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker and ld.so.1 TLS support\" >&5\n $as_echo_n \"checking linker and ld.so.1 TLS support... \" >&6; }\n@@ -23626,14 +23600,6 @@ $as_echo_n \"checking linker and ld.so.1 TLS support... \" >&6; }\n       ld_tls_support=yes\n     else\n       case \"$target\" in\n-        # Solaris 8/x86 ld has GNU style TLS support since version 1.280.\n-        i?86-*-solaris2.8)\n-          min_tls_ld_vers_minor=280\n-          ;;\n-        # Solaris 8/SPARC ld has TLS support since version 1.272.\n-        sparc*-*-solaris2.8)\n-          min_tls_ld_vers_minor=272\n-          ;;\n \t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n         i?86-*-solaris2.9)\n           min_tls_ld_vers_minor=374\n@@ -23658,33 +23624,6 @@ $as_echo \"$ld_tls_support\" >&6; }\n     LIBS=\n     LDFLAGS=\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking alternate thread library\" >&5\n-$as_echo_n \"checking alternate thread library... \" >&6; }\n-    case \"$target\" in\n-      # TLS support was backported to Solaris 8 patches, but only lives in\n-      # the alternate thread library which became the default in Solaris 9.\n-      # We want to always use that, irrespective of TLS support.\n-      *-*-solaris2.8)\n-        # Take multilib subdir into account.  There's no spec to handle\n-\t# this.  The 64 symlink exists since Solaris 8.\n-        lwp_dir=/usr/lib/lwp\n-\tlwp_spec=\"-L$lwp_dir%{m64:/64} -R$lwp_dir%{m64:/64}\"\n-        LDFLAGS=\"-L$lwp_dir -R$lwp_dir\"\n-        ;;\n-      *-*-solaris2*)\n-        lwp_dir=\"none\"\n-\tlwp_spec=\"\"\n-\t;;\n-    esac\n-    # Always define LIB_THREAD_LDFLAGS_SPEC, even without TLS support.\n-\n-cat >>confdefs.h <<_ACEOF\n-#define LIB_THREAD_LDFLAGS_SPEC \"$lwp_spec\"\n-_ACEOF\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lwp_dir\" >&5\n-$as_echo \"$lwp_dir\" >&6; }\n-\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking library containing $tga_func\" >&5\n $as_echo_n \"checking library containing $tga_func... \" >&6; }\n     # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n@@ -23754,13 +23693,6 @@ fi\n     if test $set_have_as_tls = no; then\n       LIBS=\n     fi\n-    # Even without TLS support on Solaris 8, explicitly link with libthread\n-    # to guarantee that the alternate thread library is used.\n-    case \"$target\" in\n-      *-*-solaris2.8)\n-\tLIBS=-lthread\n-\t;;\n-    esac\n     # Always define LIB_TLS_SPEC, even without TLS support.\n \n cat >>confdefs.h <<_ACEOF"}, {"sha": "807a4104dfd5cafd0df515be034e9c70045d9a12", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2345,15 +2345,6 @@ else\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;\n-      *-*-solaris2.8*)\n-        # .hidden support was backported to Solaris 8, starting with ld\n-\t# version 1.276.\n-\tif test \"$ld_vers_minor\" -ge 276; then\n-\t  gcc_cv_ld_hidden=yes\n-\telse\n-\t  gcc_cv_ld_hidden=no\n-\tfi\n-\t;;\n       *-*-solaris2.9* | *-*-solaris2.1[0-9]*)\n \t# Support for .hidden in Sun ld appeared in Solaris 9 FCS, but\n \t# .symbolic was only added in Solaris 9 12/02.\n@@ -3170,10 +3161,9 @@ else\n   [set_have_as_tls=yes])\n fi\n case \"$target\" in\n-  # TLS was introduced in the Solaris 9 FCS release and backported to\n-  # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n-  # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n-  # ld and GCC don't support any longer.\n+  # TLS was introduced in the Solaris 9 FCS release.  Support for GNU-style\n+  # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n+  # Sun style that Sun ld and GCC don't support any longer.\n   *-*-solaris2.*)\n     AC_MSG_CHECKING(linker and ld.so.1 TLS support)\n     ld_tls_support=no\n@@ -3184,14 +3174,6 @@ case \"$target\" in\n       ld_tls_support=yes\n     else\n       case \"$target\" in\n-        # Solaris 8/x86 ld has GNU style TLS support since version 1.280.\n-        i?86-*-solaris2.8)\n-          min_tls_ld_vers_minor=280\n-          ;;\n-        # Solaris 8/SPARC ld has TLS support since version 1.272.\n-        sparc*-*-solaris2.8)\n-          min_tls_ld_vers_minor=272\n-          ;;\n \t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n         i?86-*-solaris2.9)\n           min_tls_ld_vers_minor=374\n@@ -3215,28 +3197,6 @@ case \"$target\" in\n     LIBS=\n     LDFLAGS=\n \n-    AC_MSG_CHECKING(alternate thread library)\n-    case \"$target\" in\n-      # TLS support was backported to Solaris 8 patches, but only lives in\n-      # the alternate thread library which became the default in Solaris 9. \n-      # We want to always use that, irrespective of TLS support.\n-      *-*-solaris2.8)\n-        # Take multilib subdir into account.  There's no spec to handle\n-\t# this.  The 64 symlink exists since Solaris 8.\n-        lwp_dir=/usr/lib/lwp\n-\tlwp_spec=\"-L$lwp_dir%{m64:/64} -R$lwp_dir%{m64:/64}\"\n-        LDFLAGS=\"-L$lwp_dir -R$lwp_dir\"\n-        ;;\n-      *-*-solaris2*)\n-        lwp_dir=\"none\"\n-\tlwp_spec=\"\"\n-\t;;\n-    esac    \n-    # Always define LIB_THREAD_LDFLAGS_SPEC, even without TLS support.\n-    AC_DEFINE_UNQUOTED(LIB_THREAD_LDFLAGS_SPEC, \"$lwp_spec\",\n-        [Define to the linker flags to use for -pthread.])\n-    AC_MSG_RESULT($lwp_dir)\n-\n     AC_MSG_CHECKING(library containing $tga_func)\n     # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n     # (32-bit x86) only lived in libthread, so check for that.  Keep\n@@ -3246,13 +3206,6 @@ case \"$target\" in\n     if test $set_have_as_tls = no; then\n       LIBS=\n     fi\n-    # Even without TLS support on Solaris 8, explicitly link with libthread\n-    # to guarantee that the alternate thread library is used.\n-    case \"$target\" in\n-      *-*-solaris2.8)\n-\tLIBS=-lthread\n-\t;;\n-    esac\n     # Always define LIB_TLS_SPEC, even without TLS support.\n     AC_DEFINE_UNQUOTED(LIB_TLS_SPEC, \"$LIBS\",\n         [Define to the library containing __tls_get_addr/___tls_get_addr.])"}, {"sha": "ab82fea35c489ce8fe0e32497a47f754f59a4dfb", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -3014,7 +3014,7 @@ information are.\n @item\n @uref{#ix86-x-linux,,i?86-*-linux*}\n @item\n-@uref{#ix86-x-solaris289,,i?86-*-solaris2.[89]}\n+@uref{#ix86-x-solaris289,,i?86-*-solaris2.9}\n @item\n @uref{#ix86-x-solaris210,,i?86-*-solaris2.10}\n @item\n@@ -3551,8 +3551,8 @@ found on @uref{http://www.bitwizard.nl/sig11/,,www.bitwizard.nl}.\n @html\n <hr />\n @end html\n-@heading @anchor{ix86-x-solaris289}i?86-*-solaris2.[89]\n-The Sun assembler in Solaris 8 and 9 has several bugs and limitations.\n+@heading @anchor{ix86-x-solaris29}i?86-*-solaris2.9\n+The Sun assembler in Solaris 9 has several bugs and limitations.\n While GCC works around them, several features are missing, so it is\n @c FIXME: which ones?\n recommended to use the GNU assembler instead.  There is no bundled\n@@ -3562,9 +3562,9 @@ work.\n Solaris@tie{}2/x86 doesn't support the execution of SSE/SSE2 instructions\n before Solaris@tie{}9 4/04, even if the CPU supports them.  Programs will\n receive @code{SIGILL} if they try.  The fix is available both in\n-Solaris@tie{}9 Update@tie{}6 and kernel patch 112234-12 or newer.  There is no\n-corresponding patch for Solaris 8.  To avoid this problem,\n-@option{-march} defaults to @samp{pentiumpro} on Solaris 8 and 9.  If\n+Solaris@tie{}9 Update@tie{}6 and kernel patch 112234-12 or newer.  To\n+avoid this problem,\n+@option{-march} defaults to @samp{pentiumpro} on Solaris 9.  If\n you have the patch installed, you can configure GCC with an appropriate\n @option{--with-arch} option, but need GNU @command{as} for SSE2 support.\n \n@@ -4066,9 +4066,8 @@ supported as cross-compilation target only.\n @c alone is too unspecific and must be avoided.\n @heading @anchor{x-x-solaris2}*-*-solaris2*\n \n-Support for Solaris 8 has been obsoleted in GCC 4.7, but can still be\n-enabled by configuring with @option{--enable-obsolete}.  Support will be\n-removed in GCC 4.8.  Support for Solaris 7 has been removed in GCC 4.6.\n+Support for Solaris 8 has removed in GCC 4.8.  Support for Solaris 7 has\n+been removed in GCC 4.6.\n \n Sun does not ship a C compiler with Solaris 2 before Solaris 10, though\n you can download the Sun Studio compilers for free.  In Solaris 10 and\n@@ -4141,41 +4140,26 @@ newer: @command{g++} will complain that types are missing.  These headers\n assume that omitting the type means @code{int}; this assumption worked for\n C90 but is wrong for C++, and is now wrong for C99 also.\n \n-@command{g++} accepts such (invalid) constructs with the option\n-@option{-fpermissive}; it will assume that any missing type is @code{int}\n-(as defined by C90).\n-\n-There are patches for Solaris 8 (108652-24 or newer for SPARC,\n-108653-22 for Intel) that fix this bug.\n-\n Sun bug 4927647 sometimes causes random spurious testsuite failures\n related to missing diagnostic output.  This bug doesn't affect GCC\n itself, rather it is a kernel bug triggered by the @command{expect}\n program which is used only by the GCC testsuite driver.  When the bug\n causes the @command{expect} program to miss anticipated output, extra\n testsuite failures appear.\n \n-There are patches for Solaris 8 (117350-12 or newer for SPARC,\n-117351-12 or newer for Intel) and Solaris 9 (117171-11 or newer for\n+There are patches for Solaris 9 (117171-11 or newer for\n SPARC, 117172-11 or newer for Intel) that address this problem.\n \n-Solaris@tie{}8 provides an alternate implementation of the thread\n-library @samp{libthread}.  It is required for TLS support and has\n-been made the default in Solaris@tie{}9, so it is always used on\n-Solaris@tie{}8.\n-\n-Thread-local storage (TLS) is supported in Solaris@tie{}8 and 9, but requires\n+Thread-local storage (TLS) is supported in Solaris@tie{}9, but requires\n some patches.  The @samp{libthread} patches provide the\n @code{__tls_get_addr} (SPARC, 64-bit x86) resp.@ @code{___tls_get_addr}\n-(32-bit x86) functions.  On Solaris@tie{}8, you need 108993-26 or newer on\n-SPARC, 108994-26 or newer on Intel.  On Solaris@tie{}9, the necessary support\n+(32-bit x86) functions.  On Solaris@tie{}9, the necessary support\n on SPARC is present since FCS, while 114432-05 or newer is required on\n-Intel.  Additionally, on Solaris@tie{}8, patch 109147-14 or newer on SPARC or\n-109148-22 or newer on Intel are required for the Sun @command{ld} and\n-runtime linker (@command{ld.so.1}) support.  Again, Solaris@tie{}9/SPARC\n-works since FCS, while 113986-02 is required on Intel.  The linker\n+Intel.  Additionally, on Solaris@tie{}9/x86, patch 113986-02 or newer is\n+required for the Sun @command{ld} and runtime linker (@command{ld.so.1})\n+support, while Solaris@tie{}9/SPARC works since FCS.  The linker\n patches must be installed even if GNU @command{ld} is used. Sun\n-@command{as} in Solaris@tie{}8 and 9 doesn't support the necessary\n+@command{as} in Solaris@tie{}9 doesn't support the necessary\n relocations, so GNU @command{as} must be used.  The @command{configure}\n script checks for those prerequisites and automatically enables TLS\n support if they are met.  Although those minimal patch versions should"}, {"sha": "65ad68600dbc324f4bd2797c7dddf2e9d20e9e93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,18 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* g++.dg/warn/miss-format-1.C: Remove *-*-solaris2.8 handling.\n+\t* gcc.dg/c99-stdint-6.c: Likewise.\n+\t* gcc.dg/lto/20090210_0.c: Likewise.\n+\t* gcc.dg/pr28796-2.c: Don't skip on sparc*-sun-solaris2.8.\n+\t* gcc.dg/pragma-init-fini.c: Don't skip on i?86-*-solaris2.8.\n+\t* gcc.dg/pragma-init-fini-2.c: Likewise.\n+\t* gcc.dg/torture/pr47917.c: Remove *-*-solaris2.8 handling.\n+\t* gcc.target/i386/pr22076.c: Remove i?86-*-solaris2.8 handling.\n+\t* gcc.target/i386/pr22152.c: Likewise.\n+\t* gcc.target/i386/vect8-ret.c: Likewise.\n+\t* lib/target-supports.exp (add_options_for_tls): Remove Solaris 8\n+\thandling.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/other/anon5.C: Don't skip on mips-sgi-irix*."}, {"sha": "0b3f6e952c688527456ab5fa9f3cd81c546585fe", "filename": "gcc/testsuite/g++.dg/warn/miss-format-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-Wmissing-format-attribute\" } */\n /* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n /* VxWorks does not provide vscanf, either in kernel or RTP mode.  */\n-/* { dg-error \"not declared\" \"\" { target { *-*-solaris2.8 *-*-vxworks* } } 26 } */\n+/* { dg-error \"not declared\" \"\" { target *-*-vxworks* } 26 } */\n \n #include <stdio.h>\n #include <stdarg.h>\n@@ -23,7 +23,7 @@ bar (const char *fmt, ...)\n {\n   va_list ap;\n   va_start (ap, fmt);\n-  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" { xfail *-*-solaris2.8 *-*-vxworks* } } */\n+  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" { xfail *-*-vxworks* } } */\n   va_end (ap);\n }\n "}, {"sha": "b5727eebbfb311e16f8a790a9a27db698ea3d107", "filename": "gcc/testsuite/gcc.dg/c99-stdint-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2,7 +2,7 @@\n    with any system <inttypes.h> header.  */\n /* { dg-do compile { target inttypes_types } } */\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n-/* { dg-options \"-std=gnu99 -pedantic-errors -DNO_FAST_TYPES\" { target *-*-solaris2.[89]* } } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors -DNO_FAST_TYPES\" { target *-*-solaris2.9* } } */\n \n #include <inttypes.h>\n #ifndef SIGNAL_SUPPRESS"}, {"sha": "ce9dfac10956d0570fbc31dd61f66d47d5f2fc7b", "filename": "gcc/testsuite/gcc.dg/lto/20090210_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target fpic } */\n /* { dg-suppress-ld-options {-fPIC} }  */\n /* { dg-require-effective-target tls_runtime } */\n-/* { dg-extra-ld-options \"-pthread\" { target *-*-solaris2.[89] } } */\n+/* { dg-extra-ld-options \"-pthread\" { target *-*-solaris2.9 } } */\n int foo (int x)\n {\n   return x;"}, {"sha": "f56a5d4a4449fbdb2df5eac7f8ec8075c908502f", "filename": "gcc/testsuite/gcc.dg/pr28796-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2,7 +2,6 @@\n /* { dg-options \"-O2 -funsafe-math-optimizations -fno-finite-math-only -DUNSAFE\" } */\n /* { dg-add-options ieee } */\n /* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n-/* { dg-skip-if \"Bug in _Q_dtoq\" { sparc*-sun-solaris2.8 } } */\n \n #include \"tg-tests.h\"\n "}, {"sha": "91bc622a20c550e2b1bb8b24e8925ca9566559ed", "filename": "gcc/testsuite/gcc.dg/pragma-init-fini-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini-2.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -2,7 +2,6 @@\n \n /* { dg-do link { target *-*-solaris2.* } } */\n /* { dg-options \"-fpic\" } */\n-/* { dg-xfail-if \"no .pushsection/.popsection\" { i?86-*-solaris2.8 && { ! gas } } } */\n \n #include <stdio.h>\n "}, {"sha": "4013b8dd094b683c5c2c82c04028301abbab84cc", "filename": "gcc/testsuite/gcc.dg/pragma-init-fini.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-init-fini.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,7 +1,6 @@\n /* Tests for #pragma init and #pragma fini.  */\n \n /* { dg-do run { target *-*-solaris2.* } } */\n-/* { dg-skip-if \"no .pushsection/.popsection\" { i?86-*-solaris2.8 && { ! gas } } } */\n \n extern void abort ();\n "}, {"sha": "0ec78f6894ed728b5456e32017e81896121b55f7", "filename": "gcc/testsuite/gcc.dg/torture/pr47917.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-std=c99\" } */\n-/* { dg-options \"-std=c99 -D_XOPEN_SOURCE=500\" { target *-*-solaris2.[89] } } */\n+/* { dg-options \"-std=c99 -D_XOPEN_SOURCE=500\" { target *-*-solaris2.9 } } */\n /* { dg-options \"-std=gnu99\" { target *-*-hpux* } } */\n /* { dg-additional-options \"-D__USE_MINGW_ANSI_STDIO=1\" { target *-*-mingw* } } */\n /* { dg-xfail-if \"no C99 snprintf function\" { *-*-hpux10* } } */"}, {"sha": "38b40a26b57525c293c92427b4241b4ea9d5e011", "filename": "gcc/testsuite/gcc.target/i386/pr22076.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx\" } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n \n #include <mmintrin.h>\n "}, {"sha": "0b00169d0268603ad0c01f64866d31697e7c915c", "filename": "gcc/testsuite/gcc.target/i386/pr22152.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse2\" } */\n-/* { dg-options \"-O2 -msse2 -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n+/* { dg-options \"-O2 -msse2 -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n /* { dg-additional-options \"-mabi=sysv\" { target x86_64-*-mingw* } } */\n \n #include <mmintrin.h>"}, {"sha": "513369d0fa5ce9af30fc4f6133d7ab13da0e42f9", "filename": "gcc/testsuite/gcc.target/i386/vect8-ret.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-mmmx\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n+/* { dg-options \"-mmmx\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n /* { dg-options \"-mmmx -mvect8-ret-in-mem\" } */\n \n #include <mmintrin.h>"}, {"sha": "b9a6601c54d9b097358a8ea245c53b227b30f7c4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -569,11 +569,11 @@ proc check_effective_target_pcc_bitfield_type_matters { } {\n # Add to FLAGS all the target-specific flags needed to use thread-local storage.\n \n proc add_options_for_tls { flags } {\n-    # On Solaris 8 and 9, __tls_get_addr/___tls_get_addr only lives in\n+    # On Solaris 9, __tls_get_addr/___tls_get_addr only lives in\n     # libthread, so always pass -pthread for native TLS.\n     # Need to duplicate native TLS check from\n     # check_effective_target_tls_native to avoid recursion.\n-    if { [istarget *-*-solaris2.\\[89\\]*] &&\n+    if { [istarget *-*-solaris2.9*] &&\n \t [check_no_messages_and_pattern tls_native \"!emutls\" assembly {\n \t     __thread int i;\n \t     int f (void) { return i; }"}, {"sha": "97177e8991648c46468e4506f941200c1b0a6755", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lex.c: Remove Solaris 8 reference.\n+\n 2012-02-14  Walter Lee  <walt@tilera.com>\n \n \t* configure.ac: Require 64-bit hwint for tilegx and tilepro."}, {"sha": "05b9e2b0b938d142e4b78ecd45e1a7eb2061b44b", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library - lexical analysis.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010,\n-   2011 Free Software Foundation, Inc.\n+   2011, 2012 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -267,7 +267,6 @@ search_line_acc_char (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n /* Disable on Solaris 2/x86 until the following problems can be properly\n    autoconfed:\n \n-   The Solaris 8 assembler cannot assemble SSE2/SSE4.2 insns.\n    The Solaris 9 assembler cannot assemble SSE4.2 insns.\n    Before Solaris 9 Update 6, SSE insns cannot be executed.\n    The Solaris 10+ assembler tags objects with the instruction set"}, {"sha": "5184a85b033e8bb62ef2b2e666692cd12d4590d0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,11 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/i386/sol2-unwind.h (x86_fallback_frame_state): Remove\n+\tSolaris 8 handling.\n+\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove\n+\tSolaris 8 handling.\n+\t(sparc_is_sighandler): Likewise.\n+\n 2012-03-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* unwind-dw2.c (_Unwind_SetGRValue): Assert DWARF register size"}, {"sha": "176fa69a09136640df9f28dfe27b7b2b9f7fe82f", "filename": "libgcc/config/i386/sol2-unwind.h", "status": "modified", "additions": 17, "deletions": 49, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for AMD x86-64 and x86.\n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -144,55 +144,23 @@ x86_fallback_frame_state (struct _Unwind_Context *context,\n   mcontext_t *mctx;\n   long new_cfa;\n \n-  if (/* Solaris 8 - single-threaded\n+  if (/* Solaris 9 - single-threaded\n \t----------------------------\n-\t<sigacthandler+17>:  mov    0x10(%ebp),%esi\n-\t<sigacthandler+20>:  push   %esi\n-\t<sigacthandler+21>:  pushl  0xc(%ebp)\n-\t<sigacthandler+24>:  mov    0x8(%ebp),%ecx\n-\t<sigacthandler+27>:  push   %ecx\n-\t<sigacthandler+28>:  mov    offset(%ebx),%eax\n-\t<sigacthandler+34>:  call   *(%eax,%ecx,4)\n-\t<sigacthandler+37>:  add    $0xc,%esp        <--- PC\n-\t<sigacthandler+40>:  push   %esi ... */\n-      (*(unsigned long *)(pc - 20) == 0x5610758b\n-       && *(unsigned long *)(pc - 16) == 0x8b0c75ff\n-       && *(unsigned long *)(pc - 12) == 0x8b51084d\n-       && *(unsigned char *)(pc - 8)  == 0x83\n-       && *(unsigned long *)(pc - 4)  == 0x8814ff00\n-       && *(unsigned long *)(pc - 0)  == 0x560cc483)\n-\n-      || /* Solaris 8 - multi-threaded\n-\t   ---------------------------\n-\t   <__sighndlr+0>:      push   %ebp\n-\t   <__sighndlr+1>:      mov    %esp,%ebp\n-\t   <__sighndlr+3>:      pushl  0x10(%ebp)\n-\t   <__sighndlr+6>:      pushl  0xc(%ebp)\n-\t   <__sighndlr+9>:      pushl  0x8(%ebp)\n-\t   <__sighndlr+12>:     call   *0x14(%ebp)\n-\t   <__sighndlr+15>:     leave               <--- PC  */\n-\t (*(unsigned long *)(pc - 15) == 0xffec8b55\n-\t  && *(unsigned long *)(pc - 11) == 0x75ff1075\n-\t  && *(unsigned long *)(pc - 7)  == 0x0875ff0c\n-\t  && *(unsigned long *)(pc - 3)  == 0xc91455ff)\n-\n-      || /* Solaris 9 - single-threaded\n-\t   ----------------------------\n-           <sigacthandler+16>:    mov    0x244(%ebx),%ecx\n-\t   <sigacthandler+22>:    mov    0x8(%ebp),%eax\n-\t   <sigacthandler+25>:    mov    (%ecx,%eax,4),%ecx\n-\t   <sigacthandler+28>:    pushl  0x10(%ebp)\n-\t   <sigacthandler+31>:    pushl  0xc(%ebp)\n-\t   <sigacthandler+34>:    push   %eax\n-\t   <sigacthandler+35>:    call   *%ecx\n-\t   <sigacthandler+37>:    add    $0xc,%esp\t<--- PC\n-\t   <sigacthandler+40>:    pushl  0x10(%ebp) */\n-         (*(unsigned long *)(pc - 21) == 0x2448b8b\n-\t  && *(unsigned long *)(pc - 17) == 0x458b0000\n-\t  && *(unsigned long *)(pc - 13) == 0x810c8b08\n-\t  && *(unsigned long *)(pc - 9)  == 0xff1075ff\n-\t  && *(unsigned long *)(pc - 5)  == 0xff500c75\n-\t  && *(unsigned long *)(pc - 1)  == 0xcc483d1)\n+         <sigacthandler+16>:    mov    0x244(%ebx),%ecx\n+\t <sigacthandler+22>:    mov    0x8(%ebp),%eax\n+\t <sigacthandler+25>:    mov    (%ecx,%eax,4),%ecx\n+\t <sigacthandler+28>:    pushl  0x10(%ebp)\n+\t <sigacthandler+31>:    pushl  0xc(%ebp)\n+\t <sigacthandler+34>:    push   %eax\n+\t <sigacthandler+35>:    call   *%ecx\n+\t <sigacthandler+37>:    add    $0xc,%esp\t<--- PC\n+\t <sigacthandler+40>:    pushl  0x10(%ebp) */\n+      (*(unsigned long *)(pc - 21) == 0x2448b8b\n+       && *(unsigned long *)(pc - 17) == 0x458b0000\n+       && *(unsigned long *)(pc - 13) == 0x810c8b08\n+       && *(unsigned long *)(pc - 9)  == 0xff1075ff\n+       && *(unsigned long *)(pc - 5)  == 0xff500c75\n+       && *(unsigned long *)(pc - 1)  == 0xcc483d1)\n \n       || /* Solaris 9 - multi-threaded, Solaris 10\n \t   ---------------------------------------"}, {"sha": "6458ae258384cb2989640bc070230e85c68bf1a8", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 19, "deletions": 93, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -36,44 +36,25 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n static int\n sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n-  if (/* Solaris 8 - single-threaded\n+  if (/* Solaris 9 - single-threaded\n \t----------------------------\n-\t<sigacthandler+24>:  add  %g5, %o7, %o2\n-\t<sigacthandler+28>:  ldx  [ %o2 + 0xfa0 ], %g5\n-\t<sigacthandler+32>:  sra  %i0, 0, %o0\n-\t<sigacthandler+36>:  sllx  %o0, 3, %g4\n+\tThe pattern changes slightly in different versions of the\n+\toperating system, so we skip the comparison against pc[-6] for\n+\tSolaris 9.\n+\n+\t<sigacthandler+24>:  sra  %i0, 0, %l1\n+\n+\tSolaris 9 5/02:\n+\t<sigacthandler+28>:  ldx  [ %o2 + 0xf68 ], %g5\n+\tSolaris 9 9/05:\n+\t<sigacthandler+28>:  ldx  [ %o2 + 0xe50 ], %g5\n+\n+\t<sigacthandler+32>:  sllx  %l1, 3, %g4\n+\t<sigacthandler+36>:  mov  %l1, %o0\n \t<sigacthandler+40>:  ldx  [ %g4 + %g5 ], %l0\n \t<sigacthandler+44>:  call  %l0\n \t<sigacthandler+48>:  mov  %i2, %o2\n-\t<sigacthandler+52>:  cmp  %i3, 8\t<--- PC  */\n-      (   pc[-7] == 0x9401400f\n-       && pc[-6] == 0xca5aafa0\n-       && pc[-5] == 0x913e2000\n-       && pc[-4] == 0x892a3003\n-       && pc[-3] == 0xe0590005\n-       && pc[-2] == 0x9fc40000\n-       && pc[-1] == 0x9410001a\n-       && pc[ 0] == 0x80a6e008)\n-\n-      || /* Solaris 9 - single-threaded\n-\t   ----------------------------\n-\t   The pattern changes slightly in different versions of the\n-\t   operating system, so we skip the comparison against pc[-6] for\n-\t   Solaris 9.\n-\n-\t   <sigacthandler+24>:  sra  %i0, 0, %l1\n-\n-\t   Solaris 9 5/02:\n-\t   <sigacthandler+28>:  ldx  [ %o2 + 0xf68 ], %g5\n-\t   Solaris 9 9/05:\n-\t   <sigacthandler+28>:  ldx  [ %o2 + 0xe50 ], %g5\n-\n-\t   <sigacthandler+32>:  sllx  %l1, 3, %g4\n-\t   <sigacthandler+36>:  mov  %l1, %o0\n-\t   <sigacthandler+40>:  ldx  [ %g4 + %g5 ], %l0\n-\t   <sigacthandler+44>:  call  %l0\n-\t   <sigacthandler+48>:  mov  %i2, %o2\n-\t   <sigacthandler+52>:  cmp  %l1, 8\t<--- PC  */\n+\t<sigacthandler+52>:  cmp  %l1, 8\t<--- PC  */\n       (   pc[-7] == 0xa33e2000\n        /* skip pc[-6] */\n        && pc[-5] == 0x892c7003\n@@ -147,8 +128,7 @@ sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t}\n \n       else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x94100013)\n-\t/* This matches the call_user_handler pattern for Solaris 9 and\n-\t   for Solaris 8 running inside Solaris Containers respectively\n+\t/* This matches the call_user_handler pattern for Solaris 9.\n \t   We need to move up three frames:\n \n \t\t<signal handler>\t<-- context->cfa\n@@ -159,17 +139,6 @@ sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t*/\n \t*nframes = 3;\n \n-      else /* cuh_pattern == 0xe0272010 */\n-\t/* This is the default Solaris 8 case.\n-\t   We need to move up two frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tsigacthandler\n-\t\t<kernel>\n-\t*/\n-\t*nframes = 2;\n-\n       return 1;\n     }\n \n@@ -211,8 +180,8 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n static int\n sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n-  if (/* Solaris 8, 9 - single-threaded\n-        -------------------------------\n+  if (/* Solaris 9 - single-threaded\n+        ----------------------------\n \tThe pattern changes slightly in different versions of the operating\n \tsystem, so we skip the comparison against pc[-6].\n \n@@ -247,37 +216,6 @@ sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n       return 1;\n     }\n \n-  if (/* Solaris 8 - multi-threaded\n-\t---------------------------\n-\t<__libthread_segvhdlr+212>:  clr  %o2\n-\t<__libthread_segvhdlr+216>:  ld  [ %fp + -28 ], %l0\n-\t<__libthread_segvhdlr+220>:  mov  %i4, %o0\n-\t<__libthread_segvhdlr+224>:  mov  %i1, %o1\n-\t<__libthread_segvhdlr+228>:  call  %l0\n-\t<__libthread_segvhdlr+232>:  mov  %i2, %o2\n-\t<__libthread_segvhdlr+236>:  ret\t\t<--- PC\n-\t<__libthread_segvhdlr+240>:  restore\n-\t<__libthread_segvhdlr+244>:  cmp  %o1, 0  */\n-         pc[-6] == 0x94102000\n-      && pc[-5] == 0xe007bfe4\n-      && pc[-4] == 0x9010001c\n-      && pc[-3] == 0x92100019\n-      && pc[-2] == 0x9fc40000\n-      && pc[-1] == 0x9410001a\n-      && pc[ 0] == 0x81c7e008\n-      && pc[ 1] == 0x81e80000\n-      && pc[ 2] == 0x80a26000)\n-    {\n-      /* We need to move up one frame:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__libthread_segvhdlr\n-\t\t<kernel>\n-      */\n-      *nframes = 1;\n-      return 1;\n-    }\n-\n   if(/* Solaris 8+ - multi-threaded\n        ----------------------------\n        <__sighndlr>:\tsave  %sp, -96, %sp\n@@ -332,8 +270,7 @@ sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t}\n \n       else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n-\t/* This matches the call_user_handler pattern for Solaris 9 and\n-\t   for Solaris 8 running inside Solaris Containers respectively.\n+\t/* This matches the call_user_handler pattern for Solaris 9.\n \t   We need to move up three frames:\n \n \t\t<signal handler>\t<-- context->cfa\n@@ -344,17 +281,6 @@ sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t*/\n \t*nframes = 3;\n \n-      else /* cuh_pattern == 0x90100018 */\n-\t/* This is the default Solaris 8 case.\n-\t   We need to move up two frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tsigacthandler\n-\t\t<kernel>\n-\t*/\n-\t*nframes = 2;\n-\n       return 1;\n     }\n "}, {"sha": "ccce6d8965b8e9f123108a02ce51b02695619f72", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,8 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (THREADLIBS): Remove *-*-solaris2.8 handling.\n+\t* configure: Regenerate.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (libgcj_cv_exidx): Remove IRIX 6 ld workaround."}, {"sha": "43fd51f03a3d810fd6f8731e31954e5136dafacd", "filename": "libjava/configure", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -20740,16 +20740,8 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n-     *-*-solaris2.8)\n-\t# Always use alternate thread library on Solaris 8.  Need libthread\n-\t# for TLS support.\n-\t# Need -Wl,-R to get it through libtool ...\n-\tTHREADLIBS='-L/usr/lib/lwp$(MULTISUBDIR) -Wl,-R -Wl,/usr/lib/lwp$(MULTISUBDIR) -lpthread -lthread'\n-\t# ... while ld only accepts -R.\n-\tTHREADSPEC='-L/usr/lib/lwp%{m64:/64} -R/usr/lib/lwp%{m64:/64} -lpthread -lthread'\n-        ;;\n      *-*-solaris2.9)\n-\t# As on Solaris 8, need libthread for TLS support.\n+\t# Need libthread for TLS support.\n \tTHREADLIBS='-lpthread -lthread'\n \tTHREADSPEC='-lpthread -lthread'\n \t;;"}, {"sha": "351b2bd98487b6bda96f4da77ce4b1274006cee8", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1086,16 +1086,8 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n-     *-*-solaris2.8)\n-\t# Always use alternate thread library on Solaris 8.  Need libthread\n-\t# for TLS support.\n-\t# Need -Wl,-R to get it through libtool ...\n-\tTHREADLIBS='-L/usr/lib/lwp$(MULTISUBDIR) -Wl,-R -Wl,/usr/lib/lwp$(MULTISUBDIR) -lpthread -lthread'\n-\t# ... while ld only accepts -R.\n-\tTHREADSPEC='-L/usr/lib/lwp%{m64:/64} -R/usr/lib/lwp%{m64:/64} -lpthread -lthread'\n-        ;;\n      *-*-solaris2.9)\n-\t# As on Solaris 8, need libthread for TLS support.\n+\t# Need libthread for TLS support.\n \tTHREADLIBS='-lpthread -lthread'\n \tTHREADSPEC='-lpthread -lthread'\n \t;;"}, {"sha": "3da865f44d9380018f0f671f6f7818d29bbb5573", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,3 +1,43 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/os/solaris/solaris2.8: Rename to ...\n+\t* config/os/solaris/solaris2.9: ... this.\n+\t* config/abi/post/solaris2.8: Rename to ...\n+\t* config/abi/post/solaris2.9: ... this.\n+\t* configure.host (os_include_dir): Remove solaris2.8.\n+\tReflect renaming.\n+\t(abi_baseline_pair): Remove *-*-solaris2.8.\n+\tReflect renaming.\n+\n+\t* configure.ac (GLIBCXX_CHECK_MATH_PROTO): Remove\n+\t(GLIBCXX_CHECK_STDLIB_PROTO): Remove.\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH_PROTO): Remove\n+\t(GLIBCXX_CHECK_STDLIB_PROTO): Remove.\n+\t(GLIBCXX_CHECK_GTHREADS): Remove Solaris 8 handling.\n+\t* crossconfig.m4 (GLIBCXX_CROSSCONFIG): Remove *-solaris2.8\n+\thandling.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n+\t* config/os/solaris/solaris2.9/os_defines.h\n+\t(__CORRECT_ISO_CPP_MATH_H_PROTO): Define.\n+\t(__CORRECT_ISO_CPP_STDLIB_H_PROTO): Define.\n+\t* include/c_global/cmath: Rename __CORRECT_ISO_CPP_MATH_H_PROTO1\n+\tto __CORRECT_ISO_CPP_MATH_H_PROTO.\n+\t[!__CORRECT_ISO_CPP_MATH_H_PROTO2]: Remove.\n+\t* include/tr1/cmath: Rename __CORRECT_ISO_CPP_MATH_H_PROTO1 to\n+\t__CORRECT_ISO_CPP_MATH_H_PROTO.\n+\n+\t* doc/xml/manual/configure.xml (Configure, --enable-libstdcxx-threads):\n+\tRemove Solaris 8 reference.\n+\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n+\tDon't xfail on *-*-solaris2.8.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n+\tLikewise.\n+\t* testsuite/ext/enc_filebuf/char/13598.cc: Don't xfail on\n+\t*-*-solaris2.8.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.host (irix6.5*): Remove."}, {"sha": "01b06e490d7cacfa0c722f2f5d12668f83319c8d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 96, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1714,100 +1714,6 @@ AC_DEFUN([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS], [\n \t\t     [Define to the value of the SEEK_END integer constant.])\n ])\n \n-dnl\n-dnl Check whether required C++ overloads are present in <math.h>.\n-dnl\n-\n-AC_DEFUN([GLIBCXX_CHECK_MATH_PROTO], [\n-\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-\n-  case \"$host\" in\n-    *-*-solaris2.*)\n-      # Solaris 8 FCS only had an overload for double std::abs(double) in\n-      # <iso/math_iso.h>.  Patches 111721-04 (SPARC) and 112757-01 (x86)\n-      # introduced the full set also found from Solaris 9 onwards.\n-      AC_MSG_CHECKING([for float std::abs(float) overload])\n-      AC_CACHE_VAL(glibcxx_cv_abs_float, [\n-\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n-\t  [#include <math.h>\n-\t   namespace std {\n-\t     inline float abs(float __x)\n-\t     {  return __builtin_fabsf(__x); }\n-\t   }\n-\t])],\n-\t[glibcxx_cv_abs_float=no],\n-\t[glibcxx_cv_abs_float=yes]\n-      )])\n-\n-      # autoheader cannot handle indented templates.\n-      AH_VERBATIM([__CORRECT_ISO_CPP_MATH_H_PROTO1],\n-\t[/* Define if all C++ overloads are available in <math.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_MATH_H_PROTO1\n-#endif])\n-      AH_VERBATIM([__CORRECT_ISO_CPP_MATH_H_PROTO2],\n-\t[/* Define if only double std::abs(double) is available in <math.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_MATH_H_PROTO2\n-#endif])\n-\n-      if test $glibcxx_cv_abs_float = yes; then\n-\tAC_DEFINE(__CORRECT_ISO_CPP_MATH_H_PROTO1)\n-      else\n-\tAC_DEFINE(__CORRECT_ISO_CPP_MATH_H_PROTO2)\n-      fi\n-      AC_MSG_RESULT($glibcxx_cv_abs_float)\n-      ;;\n-  esac\n-\n-  AC_LANG_RESTORE\n-])\n-\n-dnl\n-dnl Check whether required C++ overloads are present in <stdlib.h>.\n-dnl\n-\n-AC_DEFUN([GLIBCXX_CHECK_STDLIB_PROTO], [\n-\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-\n-  case \"$host\" in\n-    *-*-solaris2.*)\n-      # Solaris 8 FCS lacked the overloads for long std::abs(long) and\n-      # ldiv_t std::div(long, long) in <iso/stdlib_iso.h>.  Patches 109607-02\n-      # (SPARC) and 109608-02 (x86) introduced them.\n-      AC_MSG_CHECKING([for long std::abs(long) overload])\n-      AC_CACHE_VAL(glibcxx_cv_abs_long, [\n-\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n-\t  [#include <stdlib.h>\n-\t   namespace std {\n-\t     inline long\n-\t     abs(long __i) { return labs(__i); }\n-\t   }\n-\t])],\n-\t[glibcxx_cv_abs_long=no],\n-\t[glibcxx_cv_abs_long=yes]\n-      )])\n-\n-      # autoheader cannot handle indented templates.\n-      AH_VERBATIM([__CORRECT_ISO_CPP_STDLIB_H_PROTO],\n-\t[/* Define if all C++ overloads are available in <stdlib.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n-#endif])\n-      if test $glibcxx_cv_abs_long = yes; then\n-\tAC_DEFINE(__CORRECT_ISO_CPP_STDLIB_H_PROTO, 1)\n-      fi\n-      AC_MSG_RESULT($glibcxx_cv_abs_long)\n-      ;;\n-  esac\n-\n-  AC_LANG_RESTORE\n-])\n-\n dnl\n dnl Check whether required C++ overloads are present in <stdio.h>.\n dnl\n@@ -3401,9 +3307,9 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n       #error\n       #endif\n     ], [case $target_os in\n-\t  # gthreads support breaks symbol versioning on Solaris 8/9 (PR\n+\t  # gthreads support breaks symbol versioning on Solaris 9 (PR\n \t  # libstdc++/52189).\n-          solaris2.[[89]]*)\n+          solaris2.9*)\n \t    if test x$enable_symvers = xno; then\n \t      ac_has_gthreads=yes\n \t    elif test x$enable_libstdcxx_threads = xyes; then"}, {"sha": "3a299677dbf947f40c580d44a551b3a654a79a08", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -848,21 +848,6 @@\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n \n-/* Define if all C++ overloads are available in <math.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_MATH_H_PROTO1\n-#endif\n-\n-/* Define if only double std::abs(double) is available in <math.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_MATH_H_PROTO2\n-#endif\n-\n-/* Define if all C++ overloads are available in <stdlib.h>.  */\n-#if __cplusplus >= 199711L\n-#undef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n-#endif\n-\n #if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n # define HAVE_ACOSF 1\n # define acosf _acosf"}, {"sha": "143f0f4d73cc68864479f424c61d0d3e1f13e1d6", "filename": "libstdc++-v3/config/abi/post/solaris2.9/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "previous_filename": "libstdc++-v3/config/abi/post/solaris2.8/baseline_symbols.txt"}, {"sha": "353d537411935f63d5caa607ccf002301dadd754", "filename": "libstdc++-v3/config/abi/post/solaris2.9/sparcv9/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "previous_filename": "libstdc++-v3/config/abi/post/solaris2.8/sparcv9/baseline_symbols.txt"}, {"sha": "1ae3874a6dbb1f7d2279f577225b27501b3a7fcb", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_base.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_base.h"}, {"sha": "d3519429a015b7edd7bb7b0390c1da659b23b8ef", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_configure_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_configure_char.cc"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_inline.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_inline.h"}, {"sha": "e3bed139a6b109ac13ce55e9ee80f870486aa79d", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/os_defines.h", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,7 @@\n-// Specific definitions for Solaris 8+  -*- C++ -*-\n+// Specific definitions for Solaris 9+  -*- C++ -*-\n \n-// Copyright (C) 2000, 2002, 2005, 2009, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2005, 2009, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,11 +30,8 @@\n // file will come before all others.\n \n #if __cplusplus >= 199711L\n-// Overloads in <iso/math_iso.h> and <iso/stdlib_iso.h> changed with\n-// Solaris 8 patches.  Since <bits/c++config.h> includes\n-// <bits/os_defines.h> before configure results,\n-// __CORRECT_ISO_CPP_MATH_H_PROTO[12] and __CORRECT_ISO_CPP_STDLIB_H_PROTO\n-// must be defined via acinclude.m4.\n+#define __CORRECT_ISO_CPP_MATH_H_PROTO\n+#define __CORRECT_ISO_CPP_STDLIB_H_PROTO\n #define __CORRECT_ISO_CPP_STRING_H_PROTO\n #define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n #endif", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.8/os_defines.h"}, {"sha": "727979bbe0b1c1e2d1a6714cff32a018370840dd", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 124, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -17295,127 +17295,6 @@ $as_echo \"$enable_werror\" >&6; }\n \n \n \n-  ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-\n-  case \"$host\" in\n-    *-*-solaris2.*)\n-      # Solaris 8 FCS only had an overload for double std::abs(double) in\n-      # <iso/math_iso.h>.  Patches 111721-04 (SPARC) and 112757-01 (x86)\n-      # introduced the full set also found from Solaris 9 onwards.\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for float std::abs(float) overload\" >&5\n-$as_echo_n \"checking for float std::abs(float) overload... \" >&6; }\n-      if test \"${glibcxx_cv_abs_float+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <math.h>\n-\t   namespace std {\n-\t     inline float abs(float __x)\n-\t     {  return __builtin_fabsf(__x); }\n-\t   }\n-\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_abs_float=no\n-else\n-  glibcxx_cv_abs_float=yes\n-\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-\n-\n-      # autoheader cannot handle indented templates.\n-\n-\n-\n-      if test $glibcxx_cv_abs_float = yes; then\n-\t$as_echo \"#define __CORRECT_ISO_CPP_MATH_H_PROTO1 1\" >>confdefs.h\n-\n-      else\n-\t$as_echo \"#define __CORRECT_ISO_CPP_MATH_H_PROTO2 1\" >>confdefs.h\n-\n-      fi\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_abs_float\" >&5\n-$as_echo \"$glibcxx_cv_abs_float\" >&6; }\n-      ;;\n-  esac\n-\n-  ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-\n-\n-\n-\n-  ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-\n-  case \"$host\" in\n-    *-*-solaris2.*)\n-      # Solaris 8 FCS lacked the overloads for long std::abs(long) and\n-      # ldiv_t std::div(long, long) in <iso/stdlib_iso.h>.  Patches 109607-02\n-      # (SPARC) and 109608-02 (x86) introduced them.\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for long std::abs(long) overload\" >&5\n-$as_echo_n \"checking for long std::abs(long) overload... \" >&6; }\n-      if test \"${glibcxx_cv_abs_long+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdlib.h>\n-\t   namespace std {\n-\t     inline long\n-\t     abs(long __i) { return labs(__i); }\n-\t   }\n-\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_abs_long=no\n-else\n-  glibcxx_cv_abs_long=yes\n-\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-\n-\n-      # autoheader cannot handle indented templates.\n-\n-      if test $glibcxx_cv_abs_long = yes; then\n-\t$as_echo \"#define __CORRECT_ISO_CPP_STDLIB_H_PROTO 1\" >>confdefs.h\n-\n-      fi\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_abs_long\" >&5\n-$as_echo \"$glibcxx_cv_abs_long\" >&6; }\n-      ;;\n-  esac\n-\n-  ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-\n-\n-\n-\n   ac_ext=cpp\n ac_cpp='$CXXCPP $CPPFLAGS'\n ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -63713,7 +63592,7 @@ done\n     ;;\n   *-solaris*)\n     case \"$target\" in\n-      *-solaris2.8 | *-solaris2.9 | *-solaris2.10)\n+      *-solaris2.9 | *-solaris2.10)\n \n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n@@ -65622,9 +65501,9 @@ main ()\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n   case $target_os in\n-\t  # gthreads support breaks symbol versioning on Solaris 8/9 (PR\n+\t  # gthreads support breaks symbol versioning on Solaris 9 (PR\n \t  # libstdc++/52189).\n-          solaris2.[89]*)\n+          solaris2.9*)\n \t    if test x$enable_symvers = xno; then\n \t      ac_has_gthreads=yes\n \t    elif test x$enable_libstdcxx_threads = xyes; then"}, {"sha": "3853472881512b772464d74c3d3c6ba8029fa4cf", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -134,8 +134,6 @@ GLIBCXX_ENABLE_PYTHON\n GLIBCXX_ENABLE_WERROR([yes])\n \n # Checks for operating systems support that doesn't require linking.\n-GLIBCXX_CHECK_MATH_PROTO\n-GLIBCXX_CHECK_STDLIB_PROTO\n GLIBCXX_CHECK_STDIO_PROTO\n GLIBCXX_CHECK_SYSTEM_ERROR\n "}, {"sha": "8f29bc2a28008faac5bdb2907bdfa1cbf39e8513", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -280,8 +280,8 @@ case \"${host_os}\" in\n     echo \"Please specify the full version of Solaris, ie. solaris2.9 \" 1>&2\n     exit 1\n     ;;\n-  solaris2.[89] | solaris2.1[0-9])\n-    os_include_dir=\"os/solaris/solaris2.8\"\n+  solaris2.9 | solaris2.1[0-9])\n+    os_include_dir=\"os/solaris/solaris2.9\"\n     ;;\n   tpf)\n     os_include_dir=\"os/tpf\"\n@@ -332,8 +332,8 @@ case \"${host}\" in\n   powerpc*-*-darwin*)\n     port_specific_symbol_files=\"\\$(srcdir)/../config/os/bsd/darwin/ppc-extra.ver\"\n     ;;\n-  *-*-solaris2.[89])\n-    abi_baseline_pair=solaris2.8\n+  *-*-solaris2.9)\n+    abi_baseline_pair=solaris2.9\n     abi_baseline_subdir_switch=--print-multi-os-directory\n     ;;\n   *-*-solaris2.1[0-9])"}, {"sha": "3850879b67a4fb2ccb60b1433ad56825bba3d2fa", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -198,7 +198,7 @@ case \"${host}\" in\n     ;;\n   *-solaris*)\n     case \"$target\" in\n-      *-solaris2.8 | *-solaris2.9 | *-solaris2.10)\n+      *-solaris2.9 | *-solaris2.10)\n          GLIBCXX_CHECK_LINKER_FEATURES\n          AC_DEFINE(HAVE_MBSTATE_T)\n          AC_DEFINE(HAVE_FINITE)"}, {"sha": "83443ef4c1f2f8267b2457f24e091a4108945f15", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -164,7 +164,7 @@\n  <varlistentry><term><code>--enable-libstdcxx-threads</code></term>\n  <listitem><para>Enable C++11 threads support.  If not explicitly specified,\n         the  configure process enables it if possible.  It defaults to 'off'\n-\ton Solaris 8 and 9, where it would break symbol versioning.   This\n+\ton Solaris 9, where it would break symbol versioning.   This\n \toption can change the library ABI.\n      </para>\n  </listitem></varlistentry>"}, {"sha": "d488c7740ec20ffb9b721a3ea91a76138275ebc9", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- C forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -78,14 +78,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if !defined(__CORRECT_ISO_CPP_MATH_H_PROTO1) \\\n-  && !defined(__CORRECT_ISO_CPP_MATH_H_PROTO2)\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR double\n   abs(double __x)\n   { return __builtin_fabs(__x); }\n #endif\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   abs(float __x)\n   { return __builtin_fabsf(__x); }\n@@ -104,7 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::acos;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   acos(float __x)\n   { return __builtin_acosf(__x); }\n@@ -123,7 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::asin;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   asin(float __x)\n   { return __builtin_asinf(__x); }\n@@ -142,7 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::atan;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   atan(float __x)\n   { return __builtin_atanf(__x); }\n@@ -161,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::atan2;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   atan2(float __y, float __x)\n   { return __builtin_atan2f(__y, __x); }\n@@ -182,7 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::ceil;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   ceil(float __x)\n   { return __builtin_ceilf(__x); }\n@@ -201,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::cos;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   cos(float __x)\n   { return __builtin_cosf(__x); }\n@@ -220,7 +219,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::cosh;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   cosh(float __x)\n   { return __builtin_coshf(__x); }\n@@ -239,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::exp;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   exp(float __x)\n   { return __builtin_expf(__x); }\n@@ -258,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::fabs;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }\n@@ -277,7 +276,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::floor;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   floor(float __x)\n   { return __builtin_floorf(__x); }\n@@ -296,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::fmod;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   fmod(float __x, float __y)\n   { return __builtin_fmodf(__x, __y); }\n@@ -317,7 +316,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::frexp;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline float\n   frexp(float __x, int* __exp)\n   { return __builtin_frexpf(__x, __exp); }\n@@ -336,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::ldexp;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   ldexp(float __x, int __exp)\n   { return __builtin_ldexpf(__x, __exp); }\n@@ -355,7 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::log;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   log(float __x)\n   { return __builtin_logf(__x); }\n@@ -374,7 +373,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::log10;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   log10(float __x)\n   { return __builtin_log10f(__x); }\n@@ -393,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::modf;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline float\n   modf(float __x, float* __iptr)\n   { return __builtin_modff(__x, __iptr); }\n@@ -405,7 +404,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::pow;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   pow(float __x, float __y)\n   { return __builtin_powf(__x, __y); }\n@@ -442,7 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sin;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   sin(float __x)\n   { return __builtin_sinf(__x); }\n@@ -461,7 +460,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sinh;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   sinh(float __x)\n   { return __builtin_sinhf(__x); }\n@@ -480,7 +479,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sqrt;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   sqrt(float __x)\n   { return __builtin_sqrtf(__x); }\n@@ -499,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::tan;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   tan(float __x)\n   { return __builtin_tanf(__x); }\n@@ -518,7 +517,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::tanh;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline _GLIBCXX_CONSTEXPR float\n   tanh(float __x)\n   { return __builtin_tanhf(__x); }"}, {"sha": "abfb8b141f179d12d7ea1804441907466cf7598d", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,6 +1,6 @@\n // TR1 cmath -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -563,12 +563,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Note: we deal with fabs in a special way, because an using std::fabs\n   // would bring in also the overloads for complex types, which in C++0x\n   // mode have a different return type.\n-  // With __CORRECT_ISO_CPP_MATH_H_PROTO1, math.h imports std::fabs in the\n+  // With __CORRECT_ISO_CPP_MATH_H_PROTO, math.h imports std::fabs in the\n   // global namespace after the declarations of the float / double / long\n   // double overloads but before the std::complex overloads.\n   using ::fabs;\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n   inline float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }"}, {"sha": "d746b748a9186a3b1722fd3de0be2d4ddbd681b9", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,7 +1,7 @@\n // 1999-04-12 bkoz\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009,\n-// 2010\n+// 2010, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -21,10 +21,10 @@\n \n // 27.6.1.2.2 arithmetic extractors\n \n-// XXX This test fails on Solaris 8 and 9 because of a bug in libc\n+// XXX This test fails on Solaris 9 because of a bug in libc\n // XXX sscanf for very long input.  See:\n // XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n-// { dg-do run { xfail { { *-*-solaris2.[89] } || lax_strtofp } } }\n+// { dg-do run { xfail { { *-*-solaris2.9 } || lax_strtofp } } }\n \n #include <istream>\n #include <sstream>"}, {"sha": "73384b4d9c3e2b0427dd9eaa914030fd2a00b0ef", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -18,10 +18,10 @@\n \n // 27.6.1.2.2 arithmetic extractors\n \n-// XXX This test fails on Solaris 8 and 9 because of a bug in libc\n+// XXX This test fails on Solaris 9 because of a bug in libc\n // XXX sscanf for very long input.  See:\n // XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n-// { dg-do run { xfail { { *-*-solaris2.[89] } || lax_strtofp } } }\n+// { dg-do run { xfail { { *-*-solaris2.9 } || lax_strtofp } } }\n \n #include <istream>\n #include <sstream>"}, {"sha": "e23b886ae8c0f7a8708e06c25316a9959e201fc3", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13598.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7888f2660ec77865927a6c2e2f48ca357e610d34/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc?ref=7888f2660ec77865927a6c2e2f48ca357e610d34", "patch": "@@ -1,10 +1,11 @@\n // Before Solaris 11, iconv -f ISO-8859-1 -t ISO-8859-1 fails with\n // Not supported ISO-8859-1 to ISO-8859-1\n //\n-// { dg-do run { xfail *-*-solaris2.[89] *-*-solaris2.10 } }\n+// { dg-do run { xfail *-*-solaris2.9 *-*-solaris2.10 } }\n // { dg-require-iconv \"ISO-8859-1\" }\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010, 2012\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}]}