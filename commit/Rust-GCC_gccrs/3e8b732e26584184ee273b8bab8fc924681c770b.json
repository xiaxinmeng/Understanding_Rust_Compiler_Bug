{"sha": "3e8b732e26584184ee273b8bab8fc924681c770b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4YjczMmUyNjU4NDE4NGVlMjczYjhiYWI4ZmM5MjQ2ODFjNzcwYg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-05-03T14:34:07Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-05-03T14:34:07Z"}, "message": "basic-block.h (struct rtl_bb_info, [...]): Move in front of basic_block_def.\n\n\t* basic-block.h (struct rtl_bb_info, struct gimple_bb_info): Move\n\tin front of basic_block_def.\n\t(struct basic_block_def): Make il.gimple the full struct, not a\n\tpointer.\n\t(__assert_gimple_bb_smaller_rtl_bb): Asserting typedef.\n\n\t* cfgexpand.c (expand_gimple_basic_block): Clear all il.gimple\n\tmembers.\n\t* gimple-iterator.c (gimple_stmt_iterator): Don't special case\n\tNULL il.gimple, which can't happen anymore.\n\t* gimple.h (bb_seq): il.gimple can't be NULL.\n\t(bb_seq_add): Ditto.\n\t(set_bb_seq): Adjust.\n\t(gsi_start_bb, gsi_last_bb): Tidy.\n\t* lto-streamer-in.c (make_new_block): Don't zero members that\n\tare zeroed already, don't allocate a gimple_bb_info.\n\t* tree-cfg.c (create_bb): Don't allocate a gimple_bb_info.\n\t(remove_bb): Clear all il.gimple members.\n\t(gimple_verify_flow_info): Adjust for flat il.gimple.\n\t* tree-flow-inline.h (phi_nodes, phi_nodes_ptr, set_phi_nodes): Adjust.\n\n\t* coretypes.h (const_gimple_seq): Remove typedef.\n\t* gimple.h (gimple_seq_first): Take gimple_seq.\n\t(gimple_seq_first_stmt): Ditto.\n\t(gimple_seq_last): Ditto.\n\t(gimple_seq_last_stmt): Ditto.\n\t(gimple_seq_empty_p): Ditto.\n\nFrom-SVN: r187099", "tree": {"sha": "d681839cfc46539f6a7285ab0aee7f6206b1d145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d681839cfc46539f6a7285ab0aee7f6206b1d145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e8b732e26584184ee273b8bab8fc924681c770b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8b732e26584184ee273b8bab8fc924681c770b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8b732e26584184ee273b8bab8fc924681c770b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8b732e26584184ee273b8bab8fc924681c770b/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fa2969ff66462973c073f4605d8881e40551aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa2969ff66462973c073f4605d8881e40551aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa2969ff66462973c073f4605d8881e40551aff"}], "stats": {"total": 164, "additions": 84, "deletions": 80}, "files": [{"sha": "8f3228d69987ef059491dc208d1ac49108747b92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -1,3 +1,33 @@\n+2012-05-03  Michael Matz  <matz@suse.de>\n+\n+\t* basic-block.h (struct rtl_bb_info, struct gimple_bb_info): Move\n+\tin front of basic_block_def.\n+\t(struct basic_block_def): Make il.gimple the full struct, not a\n+\tpointer.\n+\t(__assert_gimple_bb_smaller_rtl_bb): Asserting typedef.\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Clear all il.gimple\n+\tmembers.\n+\t* gimple-iterator.c (gimple_stmt_iterator): Don't special case\n+\tNULL il.gimple, which can't happen anymore.\n+\t* gimple.h (bb_seq): il.gimple can't be NULL.\n+\t(bb_seq_add): Ditto.\n+\t(set_bb_seq): Adjust.\n+\t(gsi_start_bb, gsi_last_bb): Tidy.\n+\t* lto-streamer-in.c (make_new_block): Don't zero members that\n+\tare zeroed already, don't allocate a gimple_bb_info.\n+\t* tree-cfg.c (create_bb): Don't allocate a gimple_bb_info.\n+\t(remove_bb): Clear all il.gimple members.\n+\t(gimple_verify_flow_info): Adjust for flat il.gimple.\n+\t* tree-flow-inline.h (phi_nodes, phi_nodes_ptr, set_phi_nodes): Adjust.\n+\n+\t* coretypes.h (const_gimple_seq): Remove typedef.\n+\t* gimple.h (gimple_seq_first): Take gimple_seq.\n+\t(gimple_seq_first_stmt): Ditto.\n+\t(gimple_seq_last): Ditto.\n+\t(gimple_seq_last_stmt): Ditto.\n+\t(gimple_seq_empty_p): Ditto.\n+\n 2012-05-03  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (valid_in_sets): Remove checking of trapping"}, {"sha": "99df4d8fadb01e50c02848ecc75b2a48bb016d2a", "filename": "gcc/basic-block.h", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -101,8 +101,27 @@ extern const struct gcov_ctr_summary *profile_info;\n /* Declared in cfgloop.h.  */\n struct loop;\n \n-/* Declared in tree-flow.h.  */\n-struct rtl_bb_info;\n+struct GTY(()) rtl_bb_info {\n+  /* The first and last insns of the block.  */\n+  rtx head_;\n+  rtx end_;\n+\n+  /* In CFGlayout mode points to insn notes/jumptables to be placed just before\n+     and after the block.   */\n+  rtx header;\n+  rtx footer;\n+\n+  /* This field is used by the bb-reorder pass.  */\n+  int visited;\n+};\n+\n+struct GTY(()) gimple_bb_info {\n+  /* Sequence of statements in this block.  */\n+  gimple_seq seq;\n+\n+  /* PHI nodes for this block.  */\n+  gimple_seq phi_nodes;\n+};\n \n /* A basic block is a sequence of instructions with only entry and\n    only one exit.  If any one of the instructions are executed, they\n@@ -149,7 +168,7 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   struct basic_block_def *next_bb;\n \n   union basic_block_il_dependent {\n-      struct gimple_bb_info * GTY ((tag (\"0\"))) gimple;\n+      struct gimple_bb_info GTY ((tag (\"0\"))) gimple;\n       struct rtl_bb_info * GTY ((tag (\"1\"))) rtl;\n     } GTY ((desc (\"((%1.flags & BB_RTL) != 0)\"))) il;\n \n@@ -172,27 +191,12 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   int flags;\n };\n \n-struct GTY(()) rtl_bb_info {\n-  /* The first and last insns of the block.  */\n-  rtx head_;\n-  rtx end_;\n-\n-  /* In CFGlayout mode points to insn notes/jumptables to be placed just before\n-     and after the block.   */\n-  rtx header;\n-  rtx footer;\n-\n-  /* This field is used by the bb-reorder and tracer passes.  */\n-  int visited;\n-};\n-\n-struct GTY(()) gimple_bb_info {\n-  /* Sequence of statements in this block.  */\n-  gimple_seq seq;\n-\n-  /* PHI nodes for this block.  */\n-  gimple_seq phi_nodes;\n-};\n+/* This ensures that struct gimple_bb_info is smaller than\n+   struct rtl_bb_info, so that inlining the former into basic_block_def\n+   is the better choice.  */\n+typedef int __assert_gimple_bb_smaller_rtl_bb\n+              [(int)sizeof(struct rtl_bb_info)\n+               - (int)sizeof (struct gimple_bb_info)];\n \n DEF_VEC_P(basic_block);\n DEF_VEC_ALLOC_P(basic_block,gc);"}, {"sha": "81392b64ac8525ca9a7890ecc65aaca6a517cb43", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -3730,7 +3730,8 @@ expand_gimple_basic_block (basic_block bb)\n      block to be in GIMPLE, instead of RTL.  Therefore, we need to\n      access the BB sequence directly.  */\n   stmts = bb_seq (bb);\n-  bb->il.gimple = NULL;\n+  bb->il.gimple.seq = NULL;\n+  bb->il.gimple.phi_nodes = NULL;\n   rtl_profile_for_bb (bb);\n   init_rtl_bb_info (bb);\n   bb->flags |= BB_RTL;"}, {"sha": "7e5c0480f2b9d3d6c86c5705290200ff485bd940", "filename": "gcc/coretypes.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -73,7 +73,6 @@ struct cl_option_handlers;\n struct diagnostic_context;\n typedef struct diagnostic_context diagnostic_context;\n typedef gimple gimple_seq;\n-typedef gimple const_gimple_seq;\n \n /* Address space number for named address space support.  */\n typedef unsigned char addr_space_t;"}, {"sha": "0f1d49759619da883d417801383a1d26bc55b798", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -865,6 +865,5 @@ gimple_stmt_iterator\n gsi_start_phis (basic_block bb)\n {\n   gimple_seq *pseq = phi_nodes_ptr (bb);\n-  /* XXX check only necessary because ENTRY/EXIT blocks don't have il.gimple */\n-  return pseq ? gsi_start_1 (pseq) : gsi_none ();\n+  return gsi_start_1 (pseq);\n }"}, {"sha": "80271a1e358a64f707be513ac2286ee21880b248", "filename": "gcc/gimple.h", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -1023,7 +1023,7 @@ extern bool types_compatible_p (tree, tree);\n /* Return the first node in GIMPLE sequence S.  */\n \n static inline gimple_seq_node\n-gimple_seq_first (const_gimple_seq s)\n+gimple_seq_first (gimple_seq s)\n {\n   return s;\n }\n@@ -1032,7 +1032,7 @@ gimple_seq_first (const_gimple_seq s)\n /* Return the first statement in GIMPLE sequence S.  */\n \n static inline gimple\n-gimple_seq_first_stmt (const_gimple_seq s)\n+gimple_seq_first_stmt (gimple_seq s)\n {\n   gimple_seq_node n = gimple_seq_first (s);\n   return n;\n@@ -1042,7 +1042,7 @@ gimple_seq_first_stmt (const_gimple_seq s)\n /* Return the last node in GIMPLE sequence S.  */\n \n static inline gimple_seq_node\n-gimple_seq_last (const_gimple_seq s)\n+gimple_seq_last (gimple_seq s)\n {\n   return s ? s->gsbase.prev : NULL;\n }\n@@ -1051,7 +1051,7 @@ gimple_seq_last (const_gimple_seq s)\n /* Return the last statement in GIMPLE sequence S.  */\n \n static inline gimple\n-gimple_seq_last_stmt (const_gimple_seq s)\n+gimple_seq_last_stmt (gimple_seq s)\n {\n   gimple_seq_node n = gimple_seq_last (s);\n   return n;\n@@ -1079,7 +1079,7 @@ gimple_seq_set_first (gimple_seq *ps, gimple_seq_node first)\n /* Return true if GIMPLE sequence S is empty.  */\n \n static inline bool\n-gimple_seq_empty_p (const_gimple_seq s)\n+gimple_seq_empty_p (gimple_seq s)\n {\n   return s == NULL;\n }\n@@ -1110,13 +1110,13 @@ gimple_seq_alloc_with_stmt (gimple stmt)\n static inline gimple_seq\n bb_seq (const_basic_block bb)\n {\n-  return (!(bb->flags & BB_RTL) && bb->il.gimple) ? bb->il.gimple->seq : NULL;\n+  return (!(bb->flags & BB_RTL)) ? bb->il.gimple.seq : NULL;\n }\n \n static inline gimple_seq *\n-bb_seq_addr (const_basic_block bb)\n+bb_seq_addr (basic_block bb)\n {\n-  return (!(bb->flags & BB_RTL) && bb->il.gimple) ? &bb->il.gimple->seq : NULL;\n+  return (!(bb->flags & BB_RTL)) ? &bb->il.gimple.seq : NULL;\n }\n \n /* Sets the sequence of statements in BB to SEQ.  */\n@@ -1125,7 +1125,7 @@ static inline void\n set_bb_seq (basic_block bb, gimple_seq seq)\n {\n   gcc_checking_assert (!(bb->flags & BB_RTL));\n-  bb->il.gimple->seq = seq;\n+  bb->il.gimple.seq = seq;\n }\n \n \n@@ -4975,20 +4975,9 @@ gsi_start_bb (basic_block bb)\n   gimple_seq *seq;\n \n   seq = bb_seq_addr (bb);\n-  if (!seq)\n-    /* XXX Only necessary because of ENTRY/EXIT block which don't have\n-       il.gimple */\n-    {\n-      i.ptr = NULL;\n-      i.seq = NULL;\n-      i.bb = NULL;\n-    }\n-  else\n-    {\n-      i.ptr = gimple_seq_first (*seq);\n-      i.seq = seq;\n-      i.bb = bb;\n-    }\n+  i.ptr = gimple_seq_first (*seq);\n+  i.seq = seq;\n+  i.bb = bb;\n \n   return i;\n }\n@@ -5019,20 +5008,9 @@ gsi_last_bb (basic_block bb)\n   gimple_seq *seq;\n \n   seq = bb_seq_addr (bb);\n-  if (!seq)\n-    /* XXX Only necessary because of ENTRY/EXIT block which don't have\n-       il.gimple */\n-    {\n-      i.ptr = NULL;\n-      i.seq = NULL;\n-      i.bb = NULL;\n-    }\n-  else\n-    {\n-      i.ptr = gimple_seq_last (*seq);\n-      i.seq = seq;\n-      i.bb = bb;\n-    }\n+  i.ptr = gimple_seq_last (*seq);\n+  i.seq = seq;\n+  i.bb = bb;\n \n   return i;\n }"}, {"sha": "5d617755ac41190c1fd5436790dd28c8957f10dc", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -599,10 +599,7 @@ make_new_block (struct function *fn, unsigned int index)\n   basic_block bb = alloc_block ();\n   bb->index = index;\n   SET_BASIC_BLOCK_FOR_FUNCTION (fn, index, bb);\n-  bb->il.gimple = ggc_alloc_cleared_gimple_bb_info ();\n   n_basic_blocks_for_function (fn)++;\n-  bb->flags = 0;\n-  set_bb_seq (bb, NULL);\n   return bb;\n }\n "}, {"sha": "c9f02f3d3332d74a5723d583b2a0dc9a9b9640d3", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -438,7 +438,6 @@ create_bb (void *h, void *e, basic_block after)\n \n   bb->index = last_basic_block;\n   bb->flags = BB_NEW;\n-  bb->il.gimple = ggc_alloc_cleared_gimple_bb_info ();\n   set_bb_seq (bb, h ? (gimple_seq) h : NULL);\n \n   /* Add the new block to the linked list of blocks.  */\n@@ -1918,7 +1917,8 @@ remove_bb (basic_block bb)\n     }\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n-  bb->il.gimple = NULL;\n+  bb->il.gimple.seq = NULL;\n+  bb->il.gimple.phi_nodes = NULL;\n }\n \n \n@@ -4614,13 +4614,13 @@ gimple_verify_flow_info (void)\n   edge e;\n   edge_iterator ei;\n \n-  if (ENTRY_BLOCK_PTR->il.gimple)\n+  if (ENTRY_BLOCK_PTR->il.gimple.seq || ENTRY_BLOCK_PTR->il.gimple.phi_nodes)\n     {\n       error (\"ENTRY_BLOCK has IL associated with it\");\n       err = 1;\n     }\n \n-  if (EXIT_BLOCK_PTR->il.gimple)\n+  if (EXIT_BLOCK_PTR->il.gimple.seq || EXIT_BLOCK_PTR->il.gimple.phi_nodes)\n     {\n       error (\"EXIT_BLOCK has IL associated with it\");\n       err = 1;"}, {"sha": "8627fc37250e62082ef61f026007d4cad161d3be", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8b732e26584184ee273b8bab8fc924681c770b/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=3e8b732e26584184ee273b8bab8fc924681c770b", "patch": "@@ -506,18 +506,14 @@ static inline gimple_seq\n phi_nodes (const_basic_block bb)\n {\n   gcc_checking_assert (!(bb->flags & BB_RTL));\n-  if (!bb->il.gimple)\n-    return NULL;\n-  return bb->il.gimple->phi_nodes;\n+  return bb->il.gimple.phi_nodes;\n }\n \n static inline gimple_seq *\n-phi_nodes_ptr (const_basic_block bb)\n+phi_nodes_ptr (basic_block bb)\n {\n   gcc_checking_assert (!(bb->flags & BB_RTL));\n-  if (!bb->il.gimple)\n-    return NULL;\n-  return &bb->il.gimple->phi_nodes;\n+  return &bb->il.gimple.phi_nodes;\n }\n \n /* Set PHI nodes of a basic block BB to SEQ.  */\n@@ -528,7 +524,7 @@ set_phi_nodes (basic_block bb, gimple_seq seq)\n   gimple_stmt_iterator i;\n \n   gcc_checking_assert (!(bb->flags & BB_RTL));\n-  bb->il.gimple->phi_nodes = seq;\n+  bb->il.gimple.phi_nodes = seq;\n   if (seq)\n     for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n       gimple_set_bb (gsi_stmt (i), bb);"}]}