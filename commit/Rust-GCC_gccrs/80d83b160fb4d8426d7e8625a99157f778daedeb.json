{"sha": "80d83b160fb4d8426d7e8625a99157f778daedeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkODNiMTYwZmI0ZDg0MjZkN2U4NjI1YTk5MTU3Zjc3OGRhZWRlYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-12-18T16:27:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-12-18T16:27:56Z"}, "message": "unwind-dw2-fde.c (frame_downheap): Split out from...\n\n        * unwind-dw2-fde.c (frame_downheap): Split out from...\n        (frame_heapsort): Here.\n\nFrom-SVN: r60253", "tree": {"sha": "e24b06f1be9a92ca6df09de559af58b46545513a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24b06f1be9a92ca6df09de559af58b46545513a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d83b160fb4d8426d7e8625a99157f778daedeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d83b160fb4d8426d7e8625a99157f778daedeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d83b160fb4d8426d7e8625a99157f778daedeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d83b160fb4d8426d7e8625a99157f778daedeb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15791b0c9f8ab51d4eee5cceff376f77b01e4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15791b0c9f8ab51d4eee5cceff376f77b01e4e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15791b0c9f8ab51d4eee5cceff376f77b01e4e4"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "ed8a64d3a06dd1d6509a553b4372dbc15af49041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d83b160fb4d8426d7e8625a99157f778daedeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d83b160fb4d8426d7e8625a99157f778daedeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80d83b160fb4d8426d7e8625a99157f778daedeb", "patch": "@@ -1,3 +1,8 @@\n+2002-12-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* unwind-dw2-fde.c (frame_downheap): Split out from...\n+\t(frame_heapsort): Here.\n+\n 2002-12-17  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (make_node): Don't set TREE_TYPE on 's' class nodes."}, {"sha": "b1bd8c031115de717257ef1e0b223831e1ca49aa", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d83b160fb4d8426d7e8625a99157f778daedeb/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d83b160fb4d8426d7e8625a99157f778daedeb/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=80d83b160fb4d8426d7e8625a99157f778daedeb", "patch": "@@ -467,6 +467,34 @@ fde_split (struct object *ob, fde_compare_t fde_compare,\n   erratic->count = k;\n }\n \n+#define SWAP(x,y) do { fde * tmp = x; x = y; y = tmp; } while (0)\n+\n+/* Convert a semi-heap to a heap.  A semi-heap is a heap except possibly\n+   for the first (root) node; push it down to its rightful place.  */\n+\n+static void\n+frame_downheap (struct object *ob, fde_compare_t fde_compare, fde **a,\n+\t\tint lo, int hi)\n+{\n+  int i, j;\n+\n+  for (i = lo, j = 2*i+1;\n+       j < hi;\n+       j = 2*i+1)\n+    {\n+      if (j+1 < hi && fde_compare (ob, a[j], a[j+1]) < 0)\n+\t++j;\n+\n+      if (fde_compare (ob, a[i], a[j]) < 0)\n+\t{\n+\t  SWAP (a[i], a[j]);\n+\t  i = j;\n+\t}\n+      else\n+\tbreak;\n+    }\n+}\n+\n /* This is O(n log(n)).  BSD/OS defines heapsort in stdlib.h, so we must\n    use a name that does not conflict.  */\n \n@@ -481,55 +509,22 @@ frame_heapsort (struct object *ob, fde_compare_t fde_compare,\n   /* A portion of the array is called a \"heap\" if for all i>=0:\n      If i and 2i+1 are valid indices, then a[i] >= a[2i+1].\n      If i and 2i+2 are valid indices, then a[i] >= a[2i+2].  */\n-#define SWAP(x,y) do { fde * tmp = x; x = y; y = tmp; } while (0)\n   size_t n = erratic->count;\n-  size_t m = n;\n-  size_t i;\n-\n-  while (m > 0)\n+  int m;\n+\n+  /* Expand our heap incrementally from the end of the array, heapifying\n+     each resulting semi-heap as we go.  After each step, a[m] is the top\n+     of a heap.  */\n+  for (m = n/2-1; m >= 0; --m)\n+    frame_downheap (ob, fde_compare, a, m, n);\n+\n+  /* Shrink our heap incrementally from the end of the array, first\n+     swapping out the largest element a[0] and then re-heapifying the\n+     resulting semi-heap.  After each step, a[0..m) is a heap.  */\n+  for (m = n-1; m >= 1; --m)\n     {\n-      /* Invariant: a[m..n-1] is a heap.  */\n-      m--;\n-      for (i = m; 2*i+1 < n; )\n-\t{\n-\t  if (2*i+2 < n\n-\t      && fde_compare (ob, a[2*i+2], a[2*i+1]) > 0\n-\t      && fde_compare (ob, a[2*i+2], a[i]) > 0)\n-\t    {\n-\t      SWAP (a[i], a[2*i+2]);\n-\t      i = 2*i+2;\n-\t    }\n-\t  else if (fde_compare (ob, a[2*i+1], a[i]) > 0)\n-\t    {\n-\t      SWAP (a[i], a[2*i+1]);\n-\t      i = 2*i+1;\n-\t    }\n-\t  else\n-\t    break;\n-\t}\n-    }\n-  while (n > 1)\n-    {\n-      /* Invariant: a[0..n-1] is a heap.  */\n-      n--;\n-      SWAP (a[0], a[n]);\n-      for (i = 0; 2*i+1 < n; )\n-\t{\n-\t  if (2*i+2 < n\n-\t      && fde_compare (ob, a[2*i+2], a[2*i+1]) > 0\n-\t      && fde_compare (ob, a[2*i+2], a[i]) > 0)\n-\t    {\n-\t      SWAP (a[i], a[2*i+2]);\n-\t      i = 2*i+2;\n-\t    }\n-\t  else if (fde_compare (ob, a[2*i+1], a[i]) > 0)\n-\t    {\n-\t      SWAP (a[i], a[2*i+1]);\n-\t      i = 2*i+1;\n-\t    }\n-\t  else\n-\t    break;\n-\t}\n+      SWAP (a[0], a[m]);\n+      frame_downheap (ob, fde_compare, a, 0, m);\n     }\n #undef SWAP\n }"}]}