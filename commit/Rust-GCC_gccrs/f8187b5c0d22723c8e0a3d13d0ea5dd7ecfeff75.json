{"sha": "f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "node_id": "C_kwDOANBUbNoAKGY4MTg3YjVjMGQyMjcyM2M4ZTBhM2QxM2QwZWE1ZGQ3ZWNmZWZmNzU", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-21T13:58:23Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-22T16:32:03Z"}, "message": "Fix OpenACC gang-redundant execution in 'libgomp.oacc-fortran/privatized-ref-2.f90'\n\nThis was a latent problem, and this commit here now resolves a regression that\nafter recent commit a78b1ab1df9ca44acc5638e8f9d0ae2e62bd65ed\n\"amdgcn: Tune default OpenMP/OpenACC GPU utilization\" we had (only) seen on a\nGCN offloading '-march=gfx908' system:\n\n    {+WARNING: program timed out.+}\n    [-PASS:-]{+FAIL:+} libgomp.oacc-fortran/privatized-ref-2.f90 -DACC_DEVICE_TYPE_radeon=1 -DACC_MEM_SHARED=0 -foffload=amdgcn-amdhsa  -O0  execution test\n\nSame for other optimization levels.\n\nMake sure that we're not executing non-parallelized code in gang-redundant\nmode, by putting these parts into their own 'parallel' constructs, which then\ndefault to 'num_gangs(1)'.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Fix OpenACC\n\tgang-redundant execution.", "tree": {"sha": "4b94026737aa83f6aff809f3aab56df8fe95aadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b94026737aa83f6aff809f3aab56df8fe95aadf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537c96588026aec09b9a00d6d0f3670f612428b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537c96588026aec09b9a00d6d0f3670f612428b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537c96588026aec09b9a00d6d0f3670f612428b5"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "6bd17148911b0fae96a338464fdac8ca58e4db6b", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "patch": "@@ -53,19 +53,24 @@ subroutine foo (array, nn)\n     integer :: array(nn)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     array = [(-i, i = 1, nn)]\n+    !$acc end parallel\n+    !$acc parallel copy(array)\n     !$acc loop gang private(array) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'array' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       array(i) = i\n     end do\n+    !$acc end parallel\n+    !$acc parallel copyin(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     if (any (array /= [(-i, i = 1, nn)])) error stop 1\n     !$acc end parallel\n   end subroutine foo\n@@ -74,14 +79,10 @@ subroutine bar (array)\n     integer :: array(:)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'A\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: static} \"\" { target *-*-* } l_compute$c_compute }\n     array = [(-2*i, i = 1, size(array))]\n+    !$acc end parallel\n+    !$acc parallel copy(array)\n     !$acc loop gang private(array) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'array\\.[0-9]+' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n@@ -91,6 +92,11 @@ subroutine bar (array)\n     do i = 1, 10\n       array(i) = 9*i\n     end do\n+    !$acc end parallel\n+    !$acc parallel copyin(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'A\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: static} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     if (any (array /= [(-2*i, i = 1, 10)])) error stop 2\n     !$acc end parallel\n   end subroutine bar\n@@ -100,6 +106,8 @@ subroutine foo_str(str)\n \n     !$acc parallel copyout(str)\n     str = \"abcdefghij\"\n+    !$acc end parallel\n+    !$acc parallel copy(str)\n     !$acc loop gang private(str) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'str' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n@@ -110,6 +118,8 @@ subroutine foo_str(str)\n     do i = 1, 10\n       str(i:i) = achar(ichar('A') + i)\n     end do\n+    !$acc end parallel\n+    !$acc parallel copyin(str)\n     if (str /= \"abcdefghij\") error stop 3\n     !$acc end parallel\n   end\n@@ -122,10 +132,14 @@ subroutine bar_str(str)\n ! ***************************************\n     !!$acc parallel copyout(str)\n     str = \"abcdefghij\"\n+    !!$acc end parallel\n+    !!$acc parallel copy(str)\n     !!$acc loop gang private(str)\n     !do i = 1, 10\n     !  str(i:i) = achar(ichar('A') + i)\n     !end do\n+    !!$acc end parallel\n+    !!$acc parallel copyin(str)\n     if (str /= \"abcdefghij\") error stop 5\n     !!$acc end parallel\n   end\n@@ -135,6 +149,8 @@ subroutine foobar (scalar)\n \n     !$acc parallel copyout(scalar)\n     scalar = \"abcdefghi-12345\"\n+    !$acc end parallel\n+    !$acc parallel copy(scalar)\n     !$acc loop gang private(scalar) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'scalar' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n@@ -145,19 +161,25 @@ subroutine foobar (scalar)\n       scalar(i:i) = achar(ichar('A') + i)\n     end do\n     !$acc end parallel\n+    !$acc parallel copyin(scalar)\n     if (scalar /= \"abcdefghi-12345\") error stop 6\n+    !$acc end parallel\n   end subroutine foobar\n   subroutine foobar15 (scalar)\n     integer :: i\n     character(len=15), optional, allocatable :: scalar\n \n     !$acc parallel copyout(scalar)\n     scalar = \"abcdefghi-12345\"\n+    !$acc end parallel\n+    !$acc parallel copy(scalar)\n     !$acc loop gang private(scalar)\n     do i = 1, 15\n       scalar(i:i) = achar(ichar('A') + i)\n     end do\n     !$acc end parallel\n+    !$acc parallel copyin(scalar)\n     if (scalar /= \"abcdefghi-12345\") error stop 1\n+    !$acc end parallel\n   end subroutine foobar15\n end"}]}