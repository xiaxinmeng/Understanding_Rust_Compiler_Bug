{"sha": "8f1f526b9a5b0bd27422b3392f1930f107809675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxZjUyNmI5YTViMGJkMjc0MjJiMzM5MmYxOTMwZjEwNzgwOTY3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-07T22:30:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-07T22:30:51Z"}, "message": "re PR c++/84082 (ICE with broken template function definition)\n\n\tPR c++/84082\n\t* parser.c (cp_parser_dot_deref_incomplete): New function.\n\t(cp_parser_postfix_dot_deref_expression): Use it.\n\n\t* g++.dg/template/incomplete11.C: New test.\n\t* g++.dg/parse/crash67.C: Expect an incomplete type diagnostics too.\n\nFrom-SVN: r257466", "tree": {"sha": "ec9d7e17e0ff636bc59c4d7ddabaafc047ab0a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9d7e17e0ff636bc59c4d7ddabaafc047ab0a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1f526b9a5b0bd27422b3392f1930f107809675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1f526b9a5b0bd27422b3392f1930f107809675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1f526b9a5b0bd27422b3392f1930f107809675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1f526b9a5b0bd27422b3392f1930f107809675/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b35a0ccd139f5df8262ef7ea5fed81d88074ecf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35a0ccd139f5df8262ef7ea5fed81d88074ecf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35a0ccd139f5df8262ef7ea5fed81d88074ecf8"}], "stats": {"total": 101, "additions": 80, "deletions": 21}, "files": [{"sha": "0b710e9140fc9383b12ecd85062cd8a60feceeba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f1f526b9a5b0bd27422b3392f1930f107809675", "patch": "@@ -1,3 +1,9 @@\n+2018-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84082\n+\t* parser.c (cp_parser_dot_deref_incomplete): New function.\n+\t(cp_parser_postfix_dot_deref_expression): Use it.\n+\n 2018-02-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/81610"}, {"sha": "ac5277db9ad250ca76c010ddfd66cc16d0ed12ae", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8f1f526b9a5b0bd27422b3392f1930f107809675", "patch": "@@ -7387,6 +7387,60 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n   return postfix_expression;\n }\n \n+/* A subroutine of cp_parser_postfix_dot_deref_expression.  Handle dot\n+   dereference of incomplete type, returns true if error_mark_node should\n+   be returned from caller, otherwise adjusts *SCOPE, *POSTFIX_EXPRESSION\n+   and *DEPENDENT_P.  */\n+\n+bool\n+cp_parser_dot_deref_incomplete (tree *scope, cp_expr *postfix_expression,\n+\t\t\t\tbool *dependent_p)\n+{\n+  /* In a template, be permissive by treating an object expression\n+     of incomplete type as dependent (after a pedwarn).  */\n+  diagnostic_t kind = (processing_template_decl\n+\t\t       && MAYBE_CLASS_TYPE_P (*scope) ? DK_PEDWARN : DK_ERROR);\n+\n+  switch (TREE_CODE (*postfix_expression))\n+    {\n+    case CAST_EXPR:\n+    case REINTERPRET_CAST_EXPR:\n+    case CONST_CAST_EXPR:\n+    case STATIC_CAST_EXPR:\n+    case DYNAMIC_CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n+    case VIEW_CONVERT_EXPR:\n+    case NON_LVALUE_EXPR:\n+      kind = DK_ERROR;\n+      break;\n+    case OVERLOAD:\n+      /* Don't emit any diagnostic for OVERLOADs.  */\n+      kind = DK_IGNORED;\n+      break;\n+    default:\n+      /* Avoid clobbering e.g. DECLs.  */\n+      if (!EXPR_P (*postfix_expression))\n+\tkind = DK_ERROR;\n+      break;\n+    }\n+\n+  if (kind == DK_IGNORED)\n+    return false;\n+\n+  location_t exploc = location_of (*postfix_expression);\n+  cxx_incomplete_type_diagnostic (exploc, *postfix_expression, *scope, kind);\n+  if (!MAYBE_CLASS_TYPE_P (*scope))\n+    return true;\n+  if (kind == DK_ERROR)\n+    *scope = *postfix_expression = error_mark_node;\n+  else if (processing_template_decl)\n+    {\n+      *dependent_p = true;\n+      *scope = TREE_TYPE (*postfix_expression) = NULL_TREE;\n+    }\n+  return false;\n+}\n+\n /* A subroutine of cp_parser_postfix_expression that also gets hijacked\n    by cp_parser_builtin_offsetof.  We're looking for\n \n@@ -7451,26 +7505,9 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \t{\n \t  scope = complete_type (scope);\n \t  if (!COMPLETE_TYPE_P (scope)\n-\t      /* Avoid clobbering e.g. OVERLOADs or DECLs.  */\n-\t      && EXPR_P (postfix_expression))\n-\t    {\n-\t      /* In a template, be permissive by treating an object expression\n-\t\t of incomplete type as dependent (after a pedwarn).  */\n-\t      diagnostic_t kind = (processing_template_decl\n-\t\t\t\t   && MAYBE_CLASS_TYPE_P (scope)\n-\t\t\t\t   ? DK_PEDWARN\n-\t\t\t\t   : DK_ERROR);\n-\t      cxx_incomplete_type_diagnostic\n-\t\t(location_of (postfix_expression),\n-\t\t postfix_expression, scope, kind);\n-\t      if (!MAYBE_CLASS_TYPE_P (scope))\n-\t\treturn error_mark_node;\n-\t      if (processing_template_decl)\n-\t\t{\n-\t\t  dependent_p = true;\n-\t\t  scope = TREE_TYPE (postfix_expression) = NULL_TREE;\n-\t\t}\n-\t    }\n+\t      && cp_parser_dot_deref_incomplete (&scope, &postfix_expression,\n+\t\t\t\t\t\t &dependent_p))\n+\t    return error_mark_node;\n \t}\n \n       if (!dependent_p)"}, {"sha": "6e266415765b767a87ffe3a8e0ed19fc56630295", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f1f526b9a5b0bd27422b3392f1930f107809675", "patch": "@@ -1,3 +1,9 @@\n+2018-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84082\n+\t* g++.dg/template/incomplete11.C: New test.\n+\t* g++.dg/parse/crash67.C: Expect an incomplete type diagnostics too.\n+\n 2018-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82994"}, {"sha": "dee0fc72212a01cea0b43770b96941170e1c31ae", "filename": "gcc/testsuite/g++.dg/parse/crash67.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C?ref=8f1f526b9a5b0bd27422b3392f1930f107809675", "patch": "@@ -3,4 +3,4 @@\n \n class x0;\n template <x1> x2() {  // { dg-error \"declared|type\" }\n-x0 x3 = x3.  // { dg-error \"expected\" }\n+x0 x3 = x3.  // { dg-error \"expected|incomplete type\" }"}, {"sha": "38c92e3d337660710e422c8eef237cc242cf5e3f", "filename": "gcc/testsuite/g++.dg/template/incomplete11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1f526b9a5b0bd27422b3392f1930f107809675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete11.C?ref=8f1f526b9a5b0bd27422b3392f1930f107809675", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/84082\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+struct A;\n+\n+template<typename> void foo()\n+{\n+  static int a[A().operator=(A())];\t// { dg-error \"invalid use of incomplete type 'struct A'\" }\n+}"}]}