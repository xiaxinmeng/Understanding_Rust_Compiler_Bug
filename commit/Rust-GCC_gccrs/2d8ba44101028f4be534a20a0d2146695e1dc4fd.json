{"sha": "2d8ba44101028f4be534a20a0d2146695e1dc4fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4YmE0NDEwMTAyOGY0YmU1MzRhMjBhMGQyMTQ2Njk1ZTFkYzRmZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-08-27T23:03:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-08-27T23:03:45Z"}, "message": "tree-ssa-strlen.c (printf_strlen_execute): Initialize the loop optimizer and SCEV before sizing ssa_ver_to_stridx.\n\n\t* tree-ssa-strlen.c (printf_strlen_execute): Initialize\n\tthe loop optimizer and SCEV before sizing ssa_ver_to_stridx.\n\n\t* gcc.c-torture/compile/20190827-1.c: New test.\n\nFrom-SVN: r274975", "tree": {"sha": "9ba699bb3eb8b0c9f8d88562019025d8452aea4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba699bb3eb8b0c9f8d88562019025d8452aea4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8ba44101028f4be534a20a0d2146695e1dc4fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8ba44101028f4be534a20a0d2146695e1dc4fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8ba44101028f4be534a20a0d2146695e1dc4fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8ba44101028f4be534a20a0d2146695e1dc4fd/comments", "author": null, "committer": null, "parents": [{"sha": "2bd86b95f76315f102c52a81453ef375c97e8f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd86b95f76315f102c52a81453ef375c97e8f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd86b95f76315f102c52a81453ef375c97e8f1b"}], "stats": {"total": 129, "additions": 122, "deletions": 7}, "files": [{"sha": "1d9d6cf0ff29a2e09a3c3269664f626fe616060c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d8ba44101028f4be534a20a0d2146695e1dc4fd", "patch": "@@ -1,3 +1,8 @@\n+2019-08-27  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-strlen.c (printf_strlen_execute): Initialize\n+\tthe loop optimizer and SCEV before sizing ssa_ver_to_stridx.\n+\n 2019-08-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/91528"}, {"sha": "2560faf85262192687a654a04e615eaa12504cbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d8ba44101028f4be534a20a0d2146695e1dc4fd", "patch": "@@ -1,3 +1,7 @@\n+2019-08-27  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/20190827-1.c: New test.\n+\n 2019-08-27  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/91496"}, {"sha": "f0956179b1ddfd1abb3e823fb2b3dcf7aece0a48", "filename": "gcc/testsuite/gcc.c-torture/compile/20190827-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20190827-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20190827-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20190827-1.c?ref=2d8ba44101028f4be534a20a0d2146695e1dc4fd", "patch": "@@ -0,0 +1,104 @@\n+typedef unsigned char __u8;\n+typedef __u8 u8;\n+typedef u8 u_int8_t;\n+typedef unsigned int gfp_t;\n+\n+struct list_head\n+{\n+  struct list_head *next, *prev;\n+};\n+extern int strcmp (const char *, const char *);\n+enum\n+{\n+  NFPROTO_UNSPEC = 0,\n+  NFPROTO_INET = 1,\n+  NFPROTO_IPV4 = 2,\n+  NFPROTO_ARP = 3,\n+  NFPROTO_NETDEV = 5,\n+  NFPROTO_BRIDGE = 7,\n+  NFPROTO_IPV6 = 10,\n+  NFPROTO_DECNET = 12,\n+  NFPROTO_NUMPROTO,\n+};\n+\n+struct xt_target\n+{\n+  struct list_head list;\n+  const char name[29];\n+  u_int8_t revision;\n+};\n+\n+struct xt_af\n+{\n+  struct list_head target;\n+};\n+\n+static struct xt_af *xt;\n+\n+struct xt_af * kcalloc (int, int, int);\n+\n+static int\n+target_revfn (u8 af, const char *name, u8 revision, int *bestp)\n+{\n+  const struct xt_target *t;\n+  int have_rev = 0;\n+\n+  for (t = (\n+\t     {\n+\t     void *__mptr = (void *)((&xt[af].target)->next);\n+\t     ((typeof (*t) *) (__mptr -\n+\t\t\t       __builtin_offsetof (typeof (*t), list)));}\n+       ); &t->list != (&xt[af].target); t = (\n+\t\t\t\t\t      {\n+\t\t\t\t\t      void *__mptr =\n+\t\t\t\t\t      (void *)((t)->list.next);\n+\t\t\t\t\t      ((typeof (*(t)) *) (__mptr -\n+\t\t\t\t\t\t\t\t  __builtin_offsetof\n+\t\t\t\t\t\t\t\t  (typeof\n+\t\t\t\t\t\t\t\t   (*(t)),\n+\t\t\t\t\t\t\t\t   list)));}\n+       ))\n+    {\n+      if (strcmp (t->name, name) == 0)\n+\t{\n+\t  if (t->revision > *bestp)\n+\t    *bestp = t->revision;\n+\t  if (t->revision == revision)\n+\t    have_rev = 1;\n+\t}\n+    }\n+\n+  if (af != NFPROTO_UNSPEC && !have_rev)\n+    return target_revfn (NFPROTO_UNSPEC, name, revision, bestp);\n+\n+  return have_rev;\n+}\n+\n+int\n+xt_find_revision (u8 af, const char *name, u8 revision, int target, int *err)\n+{\n+  int have_rev, best = -1;\n+\n+  have_rev = target_revfn (af, name, revision, &best);\n+\n+\n+  if (best == -1)\n+    {\n+      *err = -2;\n+      return 0;\n+    }\n+\n+}\n+\n+\n+static int __attribute__ ((__section__ (\".init.text\")))\n+  __attribute__ ((__cold__)) xt_init (void)\n+{\n+  xt =\n+    kcalloc (NFPROTO_NUMPROTO, sizeof (struct xt_af),\n+\t     (((gfp_t) (0x400u | 0x800u)) | ((gfp_t) 0x40u) |\n+\t      ((gfp_t) 0x80u)));\n+}\n+\n+int init_module (void) __attribute__ ((__copy__ (xt_init)))\n+  __attribute__ ((alias (\"xt_init\")));;"}, {"sha": "d38352a0c4cc60a4f5a7d0511103739f8e946375", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba44101028f4be534a20a0d2146695e1dc4fd/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=2d8ba44101028f4be534a20a0d2146695e1dc4fd", "patch": "@@ -4850,13 +4850,6 @@ printf_strlen_execute (function *fun, bool warn_only)\n {\n   strlen_optimize = !warn_only;\n \n-  gcc_assert (!strlen_to_stridx);\n-  if (warn_stringop_overflow || warn_stringop_truncation)\n-    strlen_to_stridx = new hash_map<tree, stridx_strlenloc> ();\n-\n-  ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n-  max_stridx = 1;\n-\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   bool use_scev = optimize > 0 && flag_printf_return_value;\n@@ -4866,6 +4859,15 @@ printf_strlen_execute (function *fun, bool warn_only)\n       scev_initialize ();\n     }\n \n+  gcc_assert (!strlen_to_stridx);\n+  if (warn_stringop_overflow || warn_stringop_truncation)\n+    strlen_to_stridx = new hash_map<tree, stridx_strlenloc> ();\n+\n+  /* This has to happen after initializing the loop optimizer\n+     and initializing SCEV as they create new SSA_NAMEs.  */\n+  ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n+  max_stridx = 1;\n+\n   /* String length optimization is implemented as a walk of the dominator\n      tree and a forward walk of statements within each block.  */\n   strlen_dom_walker walker (CDI_DOMINATORS);"}]}