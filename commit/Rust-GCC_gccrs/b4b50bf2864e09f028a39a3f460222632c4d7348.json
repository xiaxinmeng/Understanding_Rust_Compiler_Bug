{"sha": "b4b50bf2864e09f028a39a3f460222632c4d7348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRiNTBiZjI4NjRlMDlmMDI4YTM5YTNmNDYwMjIyNjMyYzRkNzM0OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-16T10:17:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-16T10:17:55Z"}, "message": "stor-layout: Create DECL_BIT_FIELD_REPRESENTATIVE even for bitfields in unions [PR101062]\n\nThe following testcase is miscompiled on x86_64-linux, the bitfield store\nis implemented as a RMW 64-bit operation at d+24 when the d variable has\nsize of only 28 bytes and scheduling moves in between the R and W part\na store to a different variable that happens to be right after the d\nvariable.\n\nThe reason for this is that we weren't creating\nDECL_BIT_FIELD_REPRESENTATIVEs for bitfields in unions.\n\nThe following patch does create them, but treats all such bitfields as if\nthey were in a structure where the particular bitfield is the only field.\n\n2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101062\n\t* stor-layout.c (finish_bitfield_representative): For fields in unions\n\tassume nextf is always NULL.\n\t(finish_bitfield_layout): Compute bit field representatives also in\n\tunions, but handle it as if each bitfield was the only field in the\n\taggregate.\n\n\t* gcc.dg/pr101062.c: New test.", "tree": {"sha": "158ad7b885e22418c2dac6cabb0002f47d740772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/158ad7b885e22418c2dac6cabb0002f47d740772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4b50bf2864e09f028a39a3f460222632c4d7348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b50bf2864e09f028a39a3f460222632c4d7348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b50bf2864e09f028a39a3f460222632c4d7348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b50bf2864e09f028a39a3f460222632c4d7348/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43fc4234ad3d9302d3460385b6fdb5e3f59b6986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fc4234ad3d9302d3460385b6fdb5e3f59b6986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fc4234ad3d9302d3460385b6fdb5e3f59b6986"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "4e3a41b34e98041dd18aca8c93a21e67f1de8f00", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b50bf2864e09f028a39a3f460222632c4d7348/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b50bf2864e09f028a39a3f460222632c4d7348/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b4b50bf2864e09f028a39a3f460222632c4d7348", "patch": "@@ -2072,9 +2072,14 @@ finish_bitfield_representative (tree repr, tree field)\n   bitsize = (bitsize + BITS_PER_UNIT - 1) & ~(BITS_PER_UNIT - 1);\n \n   /* Now nothing tells us how to pad out bitsize ...  */\n-  nextf = DECL_CHAIN (field);\n-  while (nextf && TREE_CODE (nextf) != FIELD_DECL)\n-    nextf = DECL_CHAIN (nextf);\n+  if (TREE_CODE (DECL_CONTEXT (field)) == RECORD_TYPE)\n+    {\n+      nextf = DECL_CHAIN (field);\n+      while (nextf && TREE_CODE (nextf) != FIELD_DECL)\n+\tnextf = DECL_CHAIN (nextf);\n+    }\n+  else\n+    nextf = NULL_TREE;\n   if (nextf)\n     {\n       tree maxsize;\n@@ -2167,13 +2172,6 @@ finish_bitfield_layout (tree t)\n   tree field, prev;\n   tree repr = NULL_TREE;\n \n-  /* Unions would be special, for the ease of type-punning optimizations\n-     we could use the underlying type as hint for the representative\n-     if the bitfield would fit and the representative would not exceed\n-     the union in size.  */\n-  if (TREE_CODE (t) != RECORD_TYPE)\n-    return;\n-\n   for (prev = NULL_TREE, field = TYPE_FIELDS (t);\n        field; field = DECL_CHAIN (field))\n     {\n@@ -2233,7 +2231,13 @@ finish_bitfield_layout (tree t)\n       if (repr)\n \tDECL_BIT_FIELD_REPRESENTATIVE (field) = repr;\n \n-      prev = field;\n+      if (TREE_CODE (t) == RECORD_TYPE)\n+\tprev = field;\n+      else if (repr)\n+\t{\n+\t  finish_bitfield_representative (repr, field);\n+\t  repr = NULL_TREE;\n+\t}\n     }\n \n   if (repr)"}, {"sha": "6c37ed888856e6ba1209ddd98f92b0ca5bfa784f", "filename": "gcc/testsuite/gcc.dg/pr101062.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b50bf2864e09f028a39a3f460222632c4d7348/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101062.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b50bf2864e09f028a39a3f460222632c4d7348/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101062.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101062.c?ref=b4b50bf2864e09f028a39a3f460222632c4d7348", "patch": "@@ -0,0 +1,29 @@\n+/* PR middle-end/101062 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-toplevel-reorder -frename-registers\" } */\n+\n+union U { signed b : 5; };\n+int c;\n+volatile union U d[7] = { { 8 } };\n+short e = 1;\n+\n+__attribute__((noipa)) void\n+foo ()\n+{\n+  d[6].b = 0;\n+  d[6].b = 0;\n+  d[6].b = 0;\n+  d[6].b = 0;\n+  d[6].b = 0;\n+  e = 0;\n+  c = 0;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  if (e != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}