{"sha": "d04703d6d701b2a22b11d94c6fbfa2c44a522092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0NzAzZDZkNzAxYjJhMjJiMTFkOTRjNmZiZmEyYzQ0YTUyMjA5Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-15T07:33:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-15T07:33:00Z"}, "message": "C/C++ io merge/sync.\n\n\n2000-08-14  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\tC/C++ io merge/sync.\n\t* libio/fileops.c\n\t* libio/genops.c\n\t* libio/iofclose.c\n\t* libio/iofopen.c\n\t* libio/iofwide.c\n\t* libio/libio.h\n\t* libio/libioP.h\n\t* libio/stdio.c\n\t* libio/wfileops.c\n\t* libio/wgenops.c\n\t* config/c_io_libio.cc (__basic_file): Add hacky casts to\n\t((struct _IO_FILE_plus *) in ctors.\n\t(__basic_file<wchar_t>): Adjust _wide_data->_codecvt to just _codecvt.\n\t* libio/Makefile.am: Fix copyright. Remove cleanup.c.\n\t* libio/cleanup.c: Remove.\n\t* libio/filedoalloc.c (_IO_file_doallocate): Don't call\n\t_IO_cleanup_registration_needed, even if not libc.\n\n\t* testsuite/27_io/stringstream.cc (test02): Fix.\n\nFrom-SVN: r35694", "tree": {"sha": "89ac49e996bad10bbe476c96c7b956f2cc858d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ac49e996bad10bbe476c96c7b956f2cc858d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04703d6d701b2a22b11d94c6fbfa2c44a522092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04703d6d701b2a22b11d94c6fbfa2c44a522092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04703d6d701b2a22b11d94c6fbfa2c44a522092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04703d6d701b2a22b11d94c6fbfa2c44a522092/comments", "author": null, "committer": null, "parents": [{"sha": "9f34e6e805cd37bb4c095889eafa0949d1274cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f34e6e805cd37bb4c095889eafa0949d1274cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f34e6e805cd37bb4c095889eafa0949d1274cfa"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "53e69377cc9256b0c4d4ba2360a72911540e7b33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -1,5 +1,24 @@\n 2000-08-14  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n+\tC/C++ io merge/sync.\n+\t* libio/fileops.c\n+\t* libio/genops.c\n+\t* libio/iofclose.c\n+\t* libio/iofopen.c\n+\t* libio/iofwide.c\n+\t* libio/libio.h\n+\t* libio/libioP.h\n+\t* libio/stdio.c\n+\t* libio/wfileops.c\n+\t* libio/wgenops.c\n+\t* config/c_io_libio.cc (__basic_file): Add hacky casts to\n+\t((struct _IO_FILE_plus *) in ctors.\n+\t(__basic_file<wchar_t>): Adjust _wide_data->_codecvt to just _codecvt.\n+\t* libio/Makefile.am: Fix copyright. Remove cleanup.c.\n+\t* libio/cleanup.c: Remove.\n+\t* libio/filedoalloc.c (_IO_file_doallocate): Don't call\n+\t_IO_cleanup_registration_needed, even if not libc.\n+\t\t\n \t* testsuite/27_io/stringstream.cc (test02): Fix.\n \n 2000-08-14  Brent Verner <brent@rcfile.org>"}, {"sha": "6f001b2930084485b20f3a21bfdb07d7115eac19", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -206,7 +206,7 @@ namespace std {\n #endif\n     // Don't set the orientation of the stream when initializing.\n     _IO_no_init(this, 0, 0, &_M_wfile, 0);\n-    _IO_JUMPS(this) = &_IO_file_jumps;\n+    _IO_JUMPS((_IO_FILE_plus *) this) = &_IO_file_jumps;\n     _IO_file_init((_IO_FILE_plus*)this);\n   }\n \n@@ -268,7 +268,7 @@ namespace std {\n #endif\n     // Don't set the orientation of the stream when initializing.\n     _IO_no_init(this, 0, 0, &_M_wfile, &_IO_wfile_jumps);\n-    _IO_JUMPS(this) = &_IO_wfile_jumps;\n+    _IO_JUMPS((_IO_FILE_plus *) this) = &_IO_wfile_jumps;\n     _IO_file_init((_IO_FILE_plus*)this);\n \n     // In addition, need to allocate the buffer...\n@@ -281,7 +281,7 @@ namespace std {\n     _IO_wsetp(this, _wide_data->_IO_buf_base, _wide_data->_IO_buf_base);\n     \n     // Setup codecvt bits...\n-    _wide_data->_codecvt = __c_libio_codecvt;\n+    _codecvt = &__c_libio_codecvt;\n     \n     // Do the same for narrow bits...\n     if (_IO_write_base == NULL)"}, {"sha": "d1b4b7f6f4218c4f60a72887f0fd77b6f409e28d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -1863,7 +1863,7 @@ irix5* | irix6*)\n   ;;\n \n # This must be Linux ELF.\n-linux*)\n+linux-gnu*)\n   case \"$host_cpu\" in\n   alpha* | i*86 | powerpc* | sparc* | ia64* )\n     lt_cv_deplibs_check_method=pass_all ;;\n@@ -18136,15 +18136,12 @@ else\n #include <sys/types.h>\n #include <fcntl.h>\n #include <sys/mman.h>\n-#include <stdlib.h>\n-#include <sys/stat.h>\n-\n-#ifdef HAVE_UNISTD_H\n-# include <unistd.h>\n-#endif\n \n /* This mess was copied from the GNU getpagesize.h.  */\n #ifndef HAVE_GETPAGESIZE\n+# ifdef HAVE_UNISTD_H\n+#  include <unistd.h>\n+# endif\n \n /* Assume that all systems that can run configure have sys/param.h.  */\n # ifndef HAVE_SYS_PARAM_H\n@@ -18199,7 +18196,7 @@ main()\n \t/*\n \t * First, make a file with some known garbage in it.\n \t */\n-\tdata = (char*)malloc(pagesize);\n+\tdata = malloc(pagesize);\n \tif (!data)\n \t\texit(1);\n \tfor (i = 0; i < pagesize; ++i)\n@@ -18220,7 +18217,7 @@ main()\n \tfd = open(\"conftestmmap\", O_RDWR);\n \tif (fd < 0)\n \t\texit(1);\n-\tdata2 = (char*)malloc(2 * pagesize);\n+\tdata2 = malloc(2 * pagesize);\n \tif (!data2)\n \t\texit(1);\n \tdata2 += (pagesize - ((int) data2 & (pagesize - 1))) & (pagesize - 1);\n@@ -18238,7 +18235,7 @@ main()\n \t */\n \tfor (i = 0; i < pagesize; ++i)\n \t\t*(data2 + i) = *(data2 + i) + 1;\n-\tdata3 = (char*)malloc(pagesize);\n+\tdata3 = malloc(pagesize);\n \tif (!data3)\n \t\texit(1);\n \tif (read(fd, data3, pagesize) != pagesize)\n@@ -18252,7 +18249,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:18256: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:18253: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -18315,19 +18312,19 @@ fi\n \n if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:18319: checking for LC_MESSAGES\" >&5\n+echo \"configure:18316: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18324 \"configure\"\n+#line 18321 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:18331: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18328: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else"}, {"sha": "4dc4b84622b35488ae3d9659b1599061294fb96b", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -1,3 +1,11 @@\n+2000-08-14  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* *: Merge with mainline glibc sources.\n+\t* filedoalloc.c (_IO_file_doallocate): Don't call\n+\t_IO_cleanup_registration_needed, even if not libc.\n+\t* iofwide.c (_IO_fwide): Correct placement of defines.\n+\t* cleanup.c: Remove.\n+\t\n 2000-08-04  benjamin kosnik  <bkoz@haight.constant.com>\n \n \t* genops.c (_IO_unbuffer_write): Don't call _IO_SETBUF if the"}, {"sha": "44e56cc77f53d01cd5ad90c98efe40664d812b19", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the libio subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 1999, 2000 Cygnus Solutions\n+## Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -64,14 +64,14 @@ LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n \n-#includes = \n \n libio_headers = \\\n         libio.h libioP.h iolibio.h\n \n if GLIBCPP_NEED_LIBIO\n LIBIO_SRCS = \\\n-\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n+\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c\n+#\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n else\n LIBIO_SRCS =\n endif"}, {"sha": "85f6e1acf53f4e7d6368581b9bda7dc4387a7e2b", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -142,11 +142,10 @@ LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \t$(AM_CPPFLAGS)\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n \n-#includes = \n-\n libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n+#\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n @GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n@@ -174,7 +173,6 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n@@ -193,7 +191,6 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n@@ -205,7 +202,6 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n@@ -224,7 +220,6 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\"}, {"sha": "12c1135bcbe075f79455642f38ccbc41f8d1c03c", "filename": "libstdc++-v3/libio/filedoalloc.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Ffiledoalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Ffiledoalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Ffiledoalloc.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -75,15 +75,6 @@ _IO_file_doallocate (fp)\n   char *p;\n   struct _G_stat64 st;\n \n-#ifndef _LIBC\n-  /* If _IO_cleanup_registration_needed is non-zero, we should call the\n-     function it points to.  This is to make sure _IO_cleanup gets called\n-     on exit.  We call it from _IO_file_doallocate, since that is likely\n-     to get called by any program that does buffered I/O. */\n-  if (_IO_cleanup_registration_needed)\n-    (*_IO_cleanup_registration_needed) ();\n-#endif\n-\n   if (fp->_fileno < 0 || _IO_SYSSTAT (fp, &st) < 0)\n     {\n       couldbetty = 0;"}, {"sha": "a830b5cd4395a02470067011cf079e10dcdbae98", "filename": "libstdc++-v3/libio/fileops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Ffileops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Ffileops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Ffileops.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -305,7 +305,7 @@ _IO_new_file_fopen (fp, filename, mode, is32not64)\n \t    return NULL;\n \t  }\n \n-\tcc = &fp->_wide_data->_codecvt;\n+\tcc = fp->_codecvt = &fp->_wide_data->_codecvt;\n \n \t/* The functions are always the same.  */\n \t*cc = __libio_codecvt;"}, {"sha": "b1ae5afc506fd350fc344b64ccbca13d8f2bb139", "filename": "libstdc++-v3/libio/genops.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fgenops.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -758,8 +758,9 @@ _IO_flush_all ()\n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n \t || (fp->_vtable_offset == 0\n \t     && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr\n-\t\t\t\t  > fp->_wide_data->_IO_write_base)))\n+\t\t\t\t  > fp->_wide_data->_IO_write_base))\n #endif\n+\t )\n \t&& _IO_OVERFLOW (fp, EOF) == EOF)\n       result = EOF;\n   return result;\n@@ -983,9 +984,11 @@ _IO_default_pbackfail (fp, c)\n \t  new_buf = (char *) malloc (new_size);\n \t  if (new_buf == NULL)\n \t    return EOF;\n-\t  memcpy (new_buf + old_size, fp->_IO_read_base, old_size);\n+\t  memcpy (new_buf + (new_size - old_size), fp->_IO_read_base,\n+\t\t  old_size);\n \t  free (fp->_IO_read_base);\n-\t  _IO_setg (fp, new_buf, new_buf + old_size, new_buf + new_size);\n+\t  _IO_setg (fp, new_buf, new_buf + (new_size - old_size),\n+\t\t    new_buf + new_size);\n \t  fp->_IO_backup_base = fp->_IO_read_ptr;\n \t}\n "}, {"sha": "43a3f5833fc5a916d6d7205840ca9fb29fc6f538", "filename": "libstdc++-v3/libio/iofclose.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofclose.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -32,6 +32,7 @@\n # include <shlib-compat.h>\n #else\n # define SHLIB_COMPAT(a, b, c) 0\n+# define _IO_new_fclose fclose\n #endif\n \n int\n@@ -63,7 +64,7 @@ _IO_new_fclose (fp)\n #if _LIBC\n       /* This stream has a wide orientation.  This means we have to free\n \t the conversion functions.  */\n-      struct _IO_codecvt *cc = &fp->_wide_data->_codecvt;\n+      struct _IO_codecvt *cc = fp->_codecvt;\n \n       if (cc->__cd_in.__cd.__steps->__shlib_handle != NULL)\n \t{\n@@ -93,6 +94,4 @@ _IO_new_fclose (fp)\n versioned_symbol (libc, _IO_new_fclose, _IO_fclose, GLIBC_2_1);\n strong_alias (_IO_new_fclose, __new_fclose)\n versioned_symbol (libc, __new_fclose, fclose, GLIBC_2_1);\n-#else\n-int fclose (_IO_FILE *) __attribute__ ((alias(\"_IO_new_fclose\")));\n #endif"}, {"sha": "f34fd1e51524ce2c17dc905afadedf43b49539cf", "filename": "libstdc++-v3/libio/iofopen.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -29,6 +29,8 @@\n #endif\n #ifdef _LIBC\n # include <shlib-compat.h>\n+#else\n+# define _IO_new_fopen fopen\n #endif\n \n _IO_FILE *\n@@ -71,7 +73,4 @@ _IO_new_fopen (filename, mode)\n strong_alias (_IO_new_fopen, __new_fopen)\n versioned_symbol (libc, _IO_new_fopen, _IO_fopen, GLIBC_2_1);\n versioned_symbol (libc, __new_fopen, fopen, GLIBC_2_1);\n-#else\n-int fopen (const char *,const char *)\n-     __attribute__ ((alias(\"_IO_new_fopen\")));\n #endif"}, {"sha": "886f36f2aa74b5f7244c41e5d40670fcb6581030", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -38,6 +38,7 @@\n # include <iconv/gconv_int.h>\n #endif\n \n+\n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result do_out (struct _IO_codecvt *codecvt,\n \t\t\t\t     __mbstate_t *statep,\n@@ -76,14 +77,14 @@ struct _IO_codecvt __libio_codecvt =\n };\n \n \n-/* static struct __gconv_trans_data libio_translit =*/\n #ifdef _LIBC\n-struct __gconv_trans_data libio_translit =\n+static struct __gconv_trans_data libio_translit =\n {\n   .__trans_fct = __gconv_transliterate\n };\n #endif\n \n+\n /* Return orientation of stream.  If mode is nonzero try to change\n    the orientation first.  */\n #undef _IO_fwide\n@@ -103,15 +104,12 @@ _IO_fwide (fp, mode)\n   /* Set the orientation appropriately.  */\n   if (mode > 0)\n     {\n-      struct _IO_codecvt *cc = &fp->_wide_data->_codecvt;\n+      struct _IO_codecvt *cc = fp->_codecvt;\n \n       fp->_wide_data->_IO_read_ptr = fp->_wide_data->_IO_read_end;\n       fp->_wide_data->_IO_write_ptr = fp->_wide_data->_IO_write_base;\n \n #ifdef _LIBC\n-      /* The functions are always the same.  */\n-      *cc = __libio_codecvt;\n-\n       /* Get the character conversion functions based on the currently\n \t selected locale for LC_CTYPE.  */\n       {\n@@ -123,6 +121,9 @@ _IO_fwide (fp, mode)\n \n \t__wcsmbs_clone_conv (&fcts);\n \n+\t/* The functions are always the same.  */\n+\t*cc = __libio_codecvt;\n+\n \tcc->__cd_in.__cd.__nsteps = 1; /* Only one step allowed.  */\n \tcc->__cd_in.__cd.__steps = fcts.towc;\n \n@@ -142,18 +143,13 @@ _IO_fwide (fp, mode)\n \tcc->__cd_out.__cd.__data[0].__flags = __GCONV_IS_LAST;\n \tcc->__cd_out.__cd.__data[0].__statep = &fp->_wide_data->_IO_state;\n \n-\t/* XXX For now no transliteration.  */\n-#ifdef _LIBC\n+\t/* And now the transliteration.  */\n \tcc->__cd_out.__cd.__data[0].__trans = &libio_translit;\n-#else\n-\tcc->__cd_out.__cd.__data[0].__trans = NULL;\n-#endif\n       }\n #else\n # ifdef _GLIBCPP_USE_WCHAR_T\n       {\n \t/* Determine internal and external character sets.\n-\n \t   XXX For now we make our life easy: we assume a fixed internal\n \t   encoding (as most sane systems have; hi HP/UX!).  If somebody\n \t   cares about systems which changing internal charsets they\n@@ -195,6 +191,7 @@ _IO_fwide (fp, mode)\n weak_alias (_IO_fwide, fwide)\n #endif\n \n+\n static enum __codecvt_result\n do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \tconst wchar_t *from_start, const wchar_t *from_end,\n@@ -239,7 +236,6 @@ do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n     }\n #else\n # ifdef _GLIBCPP_USE_WCHAR_T\n-\n   size_t res;\n   const char *from_start_copy = (const char *) from_start;\n   size_t from_len = from_end - from_start;\n@@ -309,7 +305,7 @@ do_unshift (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n   size_t to_len = to_end - to_start;\n \n   res = iconv (codecvt->__cd_out, NULL, NULL, &to_start_copy, &to_len);\n-  \n+\n   if (res == 0)\n     result = __codecvt_ok;\n   else if (to_len < codecvt->__codecvt_do_max_length (codecvt))\n@@ -376,7 +372,7 @@ do_in (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n   res = iconv (codecvt->__cd_in, &from_start_copy, &from_len,\n \t       &to_start_copy, &to_len);\n-  \n+\n   if (res == 0)\n     result = __codecvt_ok;\n   else if (to_len == 0)\n@@ -455,7 +451,7 @@ do_length (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n   res = iconv (codecvt->__cd_in, &from_start_copy, &from_len,\n \t       &to_start, &max);\n-  \n+\n   result = from_start_copy - (char *) from_start;\n # else\n   /* Decide what to do.  */\n@@ -476,10 +472,3 @@ do_max_length (struct _IO_codecvt *codecvt)\n   return MB_CUR_MAX;\n #endif\n }\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "d26a5e597988fd76c3160d8a0c3c535777e72349", "filename": "libstdc++-v3/libio/libio.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Flibio.h?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -227,7 +227,6 @@ struct _IO_codecvt\n   _IO_iconv_t __cd_in;\n   _IO_iconv_t __cd_out;\n };\n-#endif\n \n /* Extra data for wide character streams.  */\n struct _IO_wide_data\n@@ -249,15 +248,16 @@ struct _IO_wide_data\n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n   __mbstate_t _IO_state;\n   __mbstate_t _IO_last_state;\n-  struct _IO_codecvt _codecvt;\n #endif\n+  struct _IO_codecvt _codecvt;\n \n   wchar_t _shortbuf[1];\n \n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n   struct _IO_jump_t *_wide_vtable;\n #endif\n };\n+#endif\n \n struct _IO_FILE {\n   int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n@@ -496,5 +496,3 @@ extern void _IO_free_wbackup_area (_IO_FILE *) __THROW;\n #endif\n \n #endif /* _IO_STDIO_H */\n-\n-"}, {"sha": "4bbee9cba0a31407056777f00e0010046b38aea0", "filename": "libstdc++-v3/libio/libioP.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FlibioP.h?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -69,13 +69,13 @@ extern \"C\" {\n # define _IO_JUMPS_OFFSET 1\n #endif\n \n-#define _IO_JUMPS(THIS) ((struct _IO_FILE_plus *) (THIS))->vtable\n+#define _IO_JUMPS(THIS) (THIS)->vtable\n #define _IO_WIDE_JUMPS(THIS) ((struct _IO_FILE *) (THIS))->_wide_data->_wide_vtable\n #define _IO_CHECK_WIDE(THIS) (((struct _IO_FILE *) (THIS))->_wide_data != NULL)\n \n #if _IO_JUMPS_OFFSET\n # define _IO_JUMPS_FUNC(THIS) \\\n- (*(struct _IO_jump_t **) ((char *) &_IO_JUMPS ((struct _IO_FILE_plus *) (THIS)) \\\n+ (*(struct _IO_jump_t **) ((void *) &_IO_JUMPS ((struct _IO_FILE_plus *) (THIS)) \\\n \t\t\t   + (THIS)->_vtable_offset))\n #else\n # define _IO_JUMPS_FUNC(THIS) _IO_JUMPS ((struct _IO_FILE_plus *) (THIS))\n@@ -714,19 +714,19 @@ extern int _IO_vscanf __P ((const char *, _IO_va_list));\n # ifdef _IO_USE_OLD_IO_FILE\n #  define FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \\\n        { _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \\\n-         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (_IO_FILE *) CHAIN, FD, \\\n+\t 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n \t 0, _IO_pos_BAD, 0, 0, { 0 }, &_IO_stdfile_##FD##_lock }\n # else\n #  if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n #   define FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \\\n        { _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \\\n-         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (_IO_FILE *) CHAIN, FD, \\\n+\t 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n \t 0, _IO_pos_BAD, 0, 0, { 0 }, &_IO_stdfile_##FD##_lock, _IO_pos_BAD,\\\n \t NULL, WDP, 0 }\n #  else\n #   define FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \\\n        { _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \\\n-         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  (_IO_FILE *) CHAIN, FD, \\\n+\t 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n \t 0, _IO_pos_BAD, 0, 0, { 0 }, &_IO_stdfile_##FD##_lock, _IO_pos_BAD,\\\n \t 0 }\n #  endif\n@@ -741,13 +741,13 @@ extern int _IO_vscanf __P ((const char *, _IO_va_list));\n #  if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n #   define FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \\\n        { _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \\\n-         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n+\t 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n \t 0, _IO_pos_BAD, 0, 0, { 0 }, 0, _IO_pos_BAD, \\\n \t NULL, WDP, 0 }\n #  else\n #   define FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \\\n        { _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \\\n-         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n+\t 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \\\n \t 0, _IO_pos_BAD, 0, 0, { 0 }, 0, _IO_pos_BAD, \\\n \t 0 }\n #  endif"}, {"sha": "3b897ced1767d5f41b7da16530f6926fa0c29de7", "filename": "libstdc++-v3/libio/stdio.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fstdio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fstdio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fstdio.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -24,13 +24,14 @@\n    General Public License.  */\n \n #include \"libioP.h\"\n+#include \"stdio.h\"\n \n #undef stdin\n #undef stdout\n #undef stderr\n-_IO_FILE *stdin = (_IO_FILE *) &_IO_2_1_stdin_;\n-_IO_FILE *stdout = (_IO_FILE *) &_IO_2_1_stdout_;\n-_IO_FILE *stderr = (_IO_FILE *) &_IO_2_1_stderr_;\n+_IO_FILE *stdin = (FILE *) &_IO_2_1_stdin_;\n+_IO_FILE *stdout = (FILE *) &_IO_2_1_stdout_;\n+_IO_FILE *stderr = (FILE *) &_IO_2_1_stderr_;\n \n #undef _IO_stdin\n #undef _IO_stdout"}, {"sha": "f12cb22a7dfecf2229d96d435b17486659a817a5", "filename": "libstdc++-v3/libio/wfileops.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -76,7 +76,7 @@ _IO_wdo_write (fp, data, to_do)\n      const wchar_t *data;\n      _IO_size_t to_do;\n {\n-  struct _IO_codecvt *cc = &fp->_wide_data->_codecvt;\n+  struct _IO_codecvt *cc = fp->_codecvt;\n \n   if (to_do > 0)\n     {\n@@ -150,7 +150,7 @@ _IO_wfile_underflow (fp)\n   if (fp->_wide_data->_IO_read_ptr < fp->_wide_data->_IO_read_end)\n     return *fp->_wide_data->_IO_read_ptr;\n \n-  cd = &fp->_wide_data->_codecvt;\n+  cd = fp->_codecvt;\n \n   /* Maybe there is something left in the external buffer.  */\n   if (fp->_IO_read_ptr < fp->_IO_read_end)\n@@ -379,7 +379,7 @@ _IO_wfile_sync (fp)\n     {\n       /* We have to find out how many bytes we have to go back in the\n \t external buffer.  */\n-      struct _IO_codecvt *cv = &fp->_wide_data->_codecvt;\n+      struct _IO_codecvt *cv = fp->_codecvt;\n       _IO_off64_t new_pos;\n \n       int clen = (*cv->__codecvt_do_encoding) (cv);\n@@ -483,7 +483,7 @@ _IO_wfile_seekoff (fp, offset, dir, mode)\n       /* Adjust for read-ahead (bytes is buffer).  To do this we must\n          find out which position in the external buffer corresponds to\n          the current position in the internal buffer.  */\n-      cv = &fp->_wide_data->_codecvt;\n+      cv = fp->_codecvt;\n       clen = (*cv->__codecvt_do_encoding) (cv);\n \n       if (clen > 0)"}, {"sha": "fa0aab36af050bb7ba58724200e94450d9d9a62f", "filename": "libstdc++-v3/libio/wgenops.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04703d6d701b2a22b11d94c6fbfa2c44a522092/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c?ref=d04703d6d701b2a22b11d94c6fbfa2c44a522092", "patch": "@@ -39,6 +39,7 @@\n # define __wmemcpy(dst, src, n) wmemcpy (dst, src, n)\n #endif\n \n+\n static int save_for_wbackup __P ((_IO_FILE *fp, wchar_t *end_p))\n #ifdef _LIBC\n      internal_function"}]}