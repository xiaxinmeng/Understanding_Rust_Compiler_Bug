{"sha": "7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyNzdlMTc5NmUyYTU0ZGQzYmIwYWVhMTc5M2EyZTBlNWI0NTk2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-05-22T19:48:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-05-22T19:48:05Z"}, "message": "PR c++/86485 - simple_empty_class_p\n\nYet another tweak that would have fixed this bug: we should treat INIT_EXPR\nand MODIFY_EXPR differently for determining whether this is a simple empty\nclass copy, since a TARGET_EXPR on the RHS is direct initialization if\nINIT_EXPR but copy if MODIFY_EXPR.\n\n\t* cp-gimplify.c (simple_empty_class_p): Also true for MODIFY_EXPR.\n\nFrom-SVN: r271521", "tree": {"sha": "78bd6f4e7e1c3b93623514457ae06f3560791354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78bd6f4e7e1c3b93623514457ae06f3560791354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ee0fb4c276cc0281ce180917c1bd20600ae7e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee0fb4c276cc0281ce180917c1bd20600ae7e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee0fb4c276cc0281ce180917c1bd20600ae7e09"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "6c9869679e01538857741b08ca168dd61d003b4c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "patch": "@@ -1,3 +1,8 @@\n+2019-05-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86485 - -Wmaybe-unused with empty class ?:\n+\t* cp-gimplify.c (simple_empty_class_p): Also true for MODIFY_EXPR.\n+\n 2019-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* parser.c (cp_parser_template_declaration_after_parameters): Use"}, {"sha": "30937b1a1a3c31cd6ebb4bc091f3c146e455f9a2", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d277e1796e2a54dd3bb0aea1793a2e0e5b45962/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7d277e1796e2a54dd3bb0aea1793a2e0e5b45962", "patch": "@@ -594,19 +594,20 @@ gimplify_must_not_throw_expr (tree *expr_p, gimple_seq *pre_p)\n    return slot optimization alone because it isn't a copy.  */\n \n static bool\n-simple_empty_class_p (tree type, tree op)\n+simple_empty_class_p (tree type, tree op, tree_code code)\n {\n+  if (TREE_CODE (op) == COMPOUND_EXPR)\n+    return simple_empty_class_p (type, TREE_OPERAND (op, 1), code);\n   return\n-    ((TREE_CODE (op) == COMPOUND_EXPR\n-      && simple_empty_class_p (type, TREE_OPERAND (op, 1)))\n-     || TREE_CODE (op) == EMPTY_CLASS_EXPR\n+    (TREE_CODE (op) == EMPTY_CLASS_EXPR\n+     || code == MODIFY_EXPR\n      || is_gimple_lvalue (op)\n      || INDIRECT_REF_P (op)\n      || (TREE_CODE (op) == CONSTRUCTOR\n-\t && CONSTRUCTOR_NELTS (op) == 0\n-\t && !TREE_CLOBBER_P (op))\n+\t && CONSTRUCTOR_NELTS (op) == 0)\n      || (TREE_CODE (op) == CALL_EXPR\n \t && !CALL_EXPR_RETURN_SLOT_OPT (op)))\n+    && !TREE_CLOBBER_P (op)\n     && is_really_empty_class (type, /*ignore_vptr*/true);\n }\n \n@@ -715,7 +716,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  TREE_OPERAND (*expr_p, 1) = build1 (VIEW_CONVERT_EXPR,\n \t\t\t\t\t      TREE_TYPE (op0), op1);\n \n-\telse if (simple_empty_class_p (TREE_TYPE (op0), op1))\n+\telse if (simple_empty_class_p (TREE_TYPE (op0), op1, code))\n \t  {\n \t    /* Remove any copies of empty classes.  Also drop volatile\n \t       variables on the RHS to avoid infinite recursion from"}]}