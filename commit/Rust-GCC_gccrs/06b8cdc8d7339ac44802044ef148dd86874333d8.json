{"sha": "06b8cdc8d7339ac44802044ef148dd86874333d8", "node_id": "C_kwDOANBUbNoAKDA2YjhjZGM4ZDczMzlhYzQ0ODAyMDQ0ZWYxNDhkZDg2ODc0MzMzZDg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-02T11:23:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-02T12:35:19Z"}, "message": "middle-end/103271 - avoid VLA init of register\n\nThis avoids using VLA types to initalize a register with\n-ftrivial-auto-var-init in some cases.\n\n2021-12-02  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/103271\n\t* internal-fn.c (expand_DEFERRED_INIT): When the base\n\tof the LHS is a decl with matching constant size use\n\tthat as the initialization target instead of an\n\teventual VLA typed one.", "tree": {"sha": "ddedbdd6e0a78b9174acda8f6448c03d2ca589d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddedbdd6e0a78b9174acda8f6448c03d2ca589d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b8cdc8d7339ac44802044ef148dd86874333d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b8cdc8d7339ac44802044ef148dd86874333d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b8cdc8d7339ac44802044ef148dd86874333d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b8cdc8d7339ac44802044ef148dd86874333d8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ece2d4ca403dfc6a837d876642378a8d4d3dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ece2d4ca403dfc6a837d876642378a8d4d3dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ece2d4ca403dfc6a837d876642378a8d4d3dce"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "08f94b7a17abe619c937b979c41aa6dda5fa0d93", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b8cdc8d7339ac44802044ef148dd86874333d8/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b8cdc8d7339ac44802044ef148dd86874333d8/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=06b8cdc8d7339ac44802044ef148dd86874333d8", "patch": "@@ -3050,6 +3050,23 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n \tlhs_base = TREE_OPERAND (lhs_base, 0);\n       reg_lhs = (mem_ref_refers_to_non_mem_p (lhs_base)\n \t\t || non_mem_decl_p (lhs_base));\n+      /* If this expands to a register and the underlying decl is wrapped in\n+\t a MEM_REF that just serves as an access type change expose the decl\n+\t if it is of correct size.  This avoids a situation as in PR103271\n+\t if the target does not support a direct move to the registers mode.  */\n+      if (reg_lhs\n+\t  && TREE_CODE (lhs_base) == MEM_REF\n+\t  && TREE_CODE (TREE_OPERAND (lhs_base, 0)) == ADDR_EXPR\n+\t  && DECL_P (TREE_OPERAND (TREE_OPERAND (lhs_base, 0), 0))\n+\t  && integer_zerop (TREE_OPERAND (lhs_base, 1))\n+\t  && tree_fits_uhwi_p (var_size)\n+\t  && tree_int_cst_equal\n+\t       (var_size,\n+\t\tDECL_SIZE_UNIT (TREE_OPERAND (TREE_OPERAND (lhs_base, 0), 0))))\n+\t{\n+\t  lhs = TREE_OPERAND (TREE_OPERAND (lhs_base, 0), 0);\n+\t  var_type = TREE_TYPE (lhs);\n+\t}\n     }\n \n   if (!reg_lhs)"}]}