{"sha": "a7267237371cc978fa6e0485446af11c60e4b102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyNjcyMzczNzFjYzk3OGZhNmUwNDg1NDQ2YWYxMWM2MGU0YjEwMg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2021-03-03T12:16:35Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2021-03-03T12:16:35Z"}, "message": "libstdc++: Don't use reserved identifiers in simd headers\n\nTwo simd tests FAIL on Solaris, both SPARC and x86:\n\nFAIL: experimental/simd/standard_abi_usable.cc -msse2 -O2 -Wno-psabi (test for excess errors)\nFAIL: experimental/simd/standard_abi_usable_2.cc -msse2 -O2 -Wno-psabi (test for excess errors)\n\nThis happens because the simd headers use identifiers documented in the\nlibstdc++ manual as reserved by system headers.\n\nFixed as follows, tested on i386-pc-solaris2.11, sparc-sun-solaris2.11,\nand x86_64-pc-linux-gnu.\n\n\n2021-02-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tlibstdc++-v3:\n\t* include/experimental/bits/simd.h: Replace reserved _X, _B by\n\t_Xp, _Bp.\n\t* include/experimental/bits/simd_builtin.h: Likewise.\n\t* include/experimental/bits/simd_x86.h: Likewise.", "tree": {"sha": "08220a82fa878a374c97a52677c71e82894c70e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08220a82fa878a374c97a52677c71e82894c70e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7267237371cc978fa6e0485446af11c60e4b102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7267237371cc978fa6e0485446af11c60e4b102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7267237371cc978fa6e0485446af11c60e4b102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7267237371cc978fa6e0485446af11c60e4b102/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357c4350680bf29f0c7a115424e3da11c53b5582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357c4350680bf29f0c7a115424e3da11c53b5582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357c4350680bf29f0c7a115424e3da11c53b5582"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "59ddf3cc9581994c3387ec9ec4030d6a7e05a987", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=a7267237371cc978fa6e0485446af11c60e4b102", "patch": "@@ -201,8 +201,8 @@ template <size_t _Np>\n   inline constexpr overaligned_tag<_Np> overaligned = {};\n \n // }}}\n-template <size_t _X>\n-  using _SizeConstant = integral_constant<size_t, _X>;\n+template <size_t _Xp>\n+  using _SizeConstant = integral_constant<size_t, _Xp>;\n \n namespace __detail\n {\n@@ -4208,11 +4208,11 @@ template <template <int> class _A0, template <int> class... _Rest>\n \t      return typename __decay_abi<_A0<_Bytes>>::type{};\n \t    else\n \t      {\n-\t\tusing _B =\n+\t\tusing _Bp =\n \t\t  typename __find_next_valid_abi<_A0, _Bytes, _Tp>::type;\n-\t\tif constexpr (_B::template _S_is_valid_v<\n-\t\t\t\t_Tp> && _B::template _S_size<_Tp> <= _Np)\n-\t\t  return _B{};\n+\t\tif constexpr (_Bp::template _S_is_valid_v<\n+\t\t\t\t_Tp> && _Bp::template _S_size<_Tp> <= _Np)\n+\t\t  return _Bp{};\n \t\telse\n \t\t  return\n \t\t    typename _AbiList<_Rest...>::template _BestAbi<_Tp, _Np>{};"}, {"sha": "e986ee916208ad9a25d19ad6286e886172c3e086", "filename": "libstdc++-v3/include/experimental/bits/simd_builtin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h?ref=a7267237371cc978fa6e0485446af11c60e4b102", "patch": "@@ -894,12 +894,12 @@ template <typename _Tp, typename _Mp, typename _Abi, size_t _Np>\n     class _SimdCastType2\n     {\n       using _Ap = __intrinsic_type_t<_Tp, _Np>;\n-      using _B = __vector_type_t<_Tp, _Np>;\n+      using _Bp = __vector_type_t<_Tp, _Np>;\n       _SimdMember _M_data;\n \n     public:\n       _SimdCastType2(_Ap __a) : _M_data(__vector_bitcast<_Tp>(__a)) {}\n-      _SimdCastType2(_B __b) : _M_data(__b) {}\n+      _SimdCastType2(_Bp __b) : _M_data(__b) {}\n       operator _SimdMember() const { return _M_data; }\n     };\n "}, {"sha": "305d7a9fa54886c0227660e26a9d6c86f8a83fca", "filename": "libstdc++-v3/include/experimental/bits/simd_x86.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7267237371cc978fa6e0485446af11c60e4b102/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h?ref=a7267237371cc978fa6e0485446af11c60e4b102", "patch": "@@ -55,10 +55,10 @@ template <typename _TV,\n \n // }}}\n // __interleave128_lo {{{\n-template <typename _Ap, typename _B, typename _Tp = common_type_t<_Ap, _B>,\n+template <typename _Ap, typename _Bp, typename _Tp = common_type_t<_Ap, _Bp>,\n \t  typename _Trait = _VectorTraits<_Tp>>\n   _GLIBCXX_SIMD_INTRINSIC constexpr _Tp\n-  __interleave128_lo(const _Ap& __av, const _B& __bv)\n+  __interleave128_lo(const _Ap& __av, const _Bp& __bv)\n   {\n     const _Tp __a(__av);\n     const _Tp __b(__bv);"}]}