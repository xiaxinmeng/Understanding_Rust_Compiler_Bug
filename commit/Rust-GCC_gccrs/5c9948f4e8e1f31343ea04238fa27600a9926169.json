{"sha": "5c9948f4e8e1f31343ea04238fa27600a9926169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5OTQ4ZjRlOGUxZjMxMzQzZWEwNDIzOGZhMjc2MDBhOTkyNjE2OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-01-19T09:55:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-01-19T09:55:42Z"}, "message": "alpha.h (HARD_REGNO_MODE_OK): Disallow SImode in FP regs.\n\n        * alpha.h (HARD_REGNO_MODE_OK): Disallow SImode in FP regs.\n        * alpha.md (UNSPEC_NT_LDA): Remove.\n        (UNSPEC_CVTLQ, cvtlq): New.\n        (extendsidi2_1): Rename from extendsidi2_nofix; remove f/f.\n        (extendsidi2_fix): Remove.\n        (extendsidi2 splitter): Use cvtlq.\n        (extendsidi2 fp peepholes): Remove.\n        (cvtql): Use SFmode instead of SImode.\n        (fix_trunc?fsi): Update to match.\n        (floatsisf2_ieee, floatsisf2, floatsidf2_ieee, floatsidf2): New.\n        (movsi): Rename from movsi_nofix, remove f alternatives.\n        (movsi_nt_vms): Similarly.\n        (movsi_fix, movsi_nt_vms_fix): Remove.\n        (nt_lda): Remove.\n        * alpha.c (alpha_expand_prologue): Use adddi3, not nt_lda.\n\nFrom-SVN: r76145", "tree": {"sha": "e5b933c058bc49fc68edc155cb0d66893c2c50c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b933c058bc49fc68edc155cb0d66893c2c50c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c9948f4e8e1f31343ea04238fa27600a9926169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9948f4e8e1f31343ea04238fa27600a9926169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9948f4e8e1f31343ea04238fa27600a9926169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9948f4e8e1f31343ea04238fa27600a9926169/comments", "author": null, "committer": null, "parents": [{"sha": "9b0436b73976e82f93cd391812fb7ed802798830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0436b73976e82f93cd391812fb7ed802798830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0436b73976e82f93cd391812fb7ed802798830"}], "stats": {"total": 276, "additions": 137, "deletions": 139}, "files": [{"sha": "cec05a7e68e0ae902e01401ff032290b87576a8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c9948f4e8e1f31343ea04238fa27600a9926169", "patch": "@@ -1,3 +1,21 @@\n+2004-01-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* alpha.h (HARD_REGNO_MODE_OK): Disallow SImode in FP regs.\n+\t* alpha.md (UNSPEC_NT_LDA): Remove.\n+\t(UNSPEC_CVTLQ, cvtlq): New.\n+\t(extendsidi2_1): Rename from extendsidi2_nofix; remove f/f.\n+\t(extendsidi2_fix): Remove.\n+\t(extendsidi2 splitter): Use cvtlq.\n+\t(extendsidi2 fp peepholes): Remove.\n+\t(cvtql): Use SFmode instead of SImode.\n+\t(fix_trunc?fsi): Update to match.\n+\t(floatsisf2_ieee, floatsisf2, floatsidf2_ieee, floatsidf2): New.\n+\t(movsi): Rename from movsi_nofix, remove f alternatives.\n+\t(movsi_nt_vms): Similarly.\n+\t(movsi_fix, movsi_nt_vms_fix): Remove.\n+\t(nt_lda): Remove.\n+\t* alpha.c (alpha_expand_prologue): Use adddi3, not nt_lda.\n+\n 2004-01-19  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_remove_node): Fix removal from linked list."}, {"sha": "0cf06372f35a856c36d7283d9d38097978c9e76a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5c9948f4e8e1f31343ea04238fa27600a9926169", "patch": "@@ -7147,15 +7147,14 @@ alpha_expand_prologue (void)\n \t     and subtract it to sp. \n \n \t     Yes, that's correct -- we have to reload the whole constant\n-\t     into a temporary via ldah+lda then subtract from sp.  To\n-\t     ensure we get ldah+lda, we use a special pattern.  */\n+\t     into a temporary via ldah+lda then subtract from sp.  */\n \n \t  HOST_WIDE_INT lo, hi;\n \t  lo = ((frame_size & 0xffff) ^ 0x8000) - 0x8000;\n \t  hi = frame_size - lo;\n \n \t  emit_move_insn (ptr, GEN_INT (hi));\n-\t  emit_insn (gen_nt_lda (ptr, GEN_INT (lo)));\n+\t  emit_insn (gen_adddi3 (ptr, ptr, GEN_INT (lo)));\n \t  seq = emit_insn (gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t       ptr));\n \t}"}, {"sha": "8135b57333d212ef5f9bea295aaca64caa59eaeb", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=5c9948f4e8e1f31343ea04238fa27600a9926169", "patch": "@@ -614,12 +614,11 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On Alpha, the integer registers can hold any mode.  The floating-point\n-   registers can hold 32-bit and 64-bit integers as well, but not 16-bit\n-   or 8-bit values.  */\n+   registers can hold 64-bit integers as well, but not smaller values.  */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \t\t\t\t\\\n   ((REGNO) >= 32 && (REGNO) <= 62 \t\t\t\t\t\\\n-   ? GET_MODE_UNIT_SIZE (MODE) == 8 || GET_MODE_UNIT_SIZE (MODE) == 4\t\\\n+   ? (MODE) == SFmode || (MODE) == DFmode || (MODE) == DImode\t\t\\\n    : 1)\n \n /* Value is 1 if MODE is a supported vector mode.  */"}, {"sha": "c1b87e97ee9457be8ed43ad4e53a388f45a7c7e2", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 115, "deletions": 133, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9948f4e8e1f31343ea04238fa27600a9926169/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=5c9948f4e8e1f31343ea04238fa27600a9926169", "patch": "@@ -30,7 +30,7 @@\n    (UNSPEC_INSXH\t2)\n    (UNSPEC_MSKXH\t3)\n    (UNSPEC_CVTQL\t4)\n-   (UNSPEC_NT_LDA\t5)\n+   (UNSPEC_CVTLQ\t5)\n    (UNSPEC_UMK_LAUM\t6)\n    (UNSPEC_UMK_LALM\t7)\n    (UNSPEC_UMK_LAL\t8)\n@@ -185,41 +185,36 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*extendsidi2_nofix\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,*f,?*f\")\n-\t(sign_extend:DI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,m\")))]\n-  \"! TARGET_FIX\"\n-  \"@\n-   addl $31,%1,%0\n-   ldl %0,%1\n-   cvtlq %1,%0\n-   lds %0,%1\\;cvtlq %0,%0\"\n-  [(set_attr \"type\" \"iadd,ild,fadd,fld\")\n-   (set_attr \"length\" \"*,*,*,8\")])\n+(define_insn \"*cvtlq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n+\t(unspec:DI [(match_operand:SF 1 \"reg_or_0_operand\" \"fG\")]\n+\t\t   UNSPEC_CVTLQ))]\n+  \"\"\n+  \"cvtlq %1,%0\"\n+  [(set_attr \"type\" \"fadd\")])\n \n-(define_insn \"*extendsidi2_fix\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,?*f,?*f\")\n+(define_insn \"*extendsidi2_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,!*f\")\n \t(sign_extend:DI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,*f,m\")))]\n-  \"TARGET_FIX\"\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,m\")))]\n+  \"\"\n   \"@\n    addl $31,%1,%0\n    ldl %0,%1\n-   ftois %1,%0\n-   cvtlq %1,%0\n    lds %0,%1\\;cvtlq %0,%0\"\n-  [(set_attr \"type\" \"iadd,ild,ftoi,fadd,fld\")\n-   (set_attr \"length\" \"*,*,*,*,8\")])\n+  [(set_attr \"type\" \"iadd,ild,fld\")\n+   (set_attr \"length\" \"*,*,8\")])\n \n-;; Due to issues with CLASS_CANNOT_CHANGE_SIZE, we cannot use a subreg here.\n (define_split\n   [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"memory_operand\" \"\")))]\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (sign_extend:DI (match_dup 2)))]\n-  \"operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n+   (set (match_dup 0) (unspec:DI [(match_dup 2)] UNSPEC_CVTLQ))]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 0);\n+  operands[2] = gen_rtx_REG (SFmode, REGNO (operands[0]));\n+})\n \n ;; Optimize sign-extension of SImode loads.  This shows up in the wake of\n ;; reload when converting fp->int.\n@@ -235,28 +230,6 @@\n \t(sign_extend:DI (match_dup 1)))]\n   \"\")\n \n-(define_peephole2\n-  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n-        (match_operand:SI 1 \"hard_fp_register_operand\" \"\"))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n-        (sign_extend:DI (match_dup 0)))]\n-  \"TARGET_FIX\n-   && (true_regnum (operands[0]) == true_regnum (operands[2])\n-       || peep2_reg_dead_p (2, operands[0]))\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")\n-\n-(define_peephole2\n-  [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n-        (sign_extend:DI (match_operand:SI 1 \"hard_fp_register_operand\" \"\")))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n-        (match_dup 0))]\n-  \"TARGET_FIX && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")\n-\n ;; Don't say we have addsi3 if optimizing.  This generates better code.  We\n ;; have the anonymous addsi3 pattern below in case combine wants to make it.\n (define_expand \"addsi3\"\n@@ -2334,8 +2307,8 @@\n ;; processing, it is cheaper to do the truncation in the int regs.\n \n (define_insn \"*cvtql\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(unspec:SI [(match_operand:DI 1 \"reg_or_0_operand\" \"fG\")]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:DI 1 \"reg_or_0_operand\" \"fG\")]\n \t\t   UNSPEC_CVTQL))]\n   \"TARGET_FP\"\n   \"cvtql%/ %R1,%0\"\n@@ -2349,14 +2322,16 @@\n \t  (match_operator:DI 4 \"fix_operator\" \n \t    [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n-   (clobber (match_scratch:SI 3 \"=&f\"))]\n+   (clobber (match_scratch:SF 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_op_dup 4 [(match_dup 1)]))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 3))]\n-  \"\"\n+   (set (match_dup 3) (unspec:SF [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 5) (match_dup 3))]\n+{\n+  operands[5] = adjust_address (operands[0], SFmode, 0);\n+}\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n@@ -2370,10 +2345,12 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_op_dup 3 [(match_dup 1)]))\n-   (set (match_dup 4) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 4))]\n-  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[4] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n+   (set (match_dup 4) (unspec:SF [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 5) (match_dup 4))]\n+{\n+  operands[4] = gen_rtx_REG (SFmode, REGNO (operands[2]));\n+  operands[5] = adjust_address (operands[0], SFmode, 0);\n+}\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n@@ -2420,14 +2397,16 @@\n \t    [(float_extend:DF\n \t       (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))]) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n-   (clobber (match_scratch:SI 3 \"=&f\"))]\n+   (clobber (match_scratch:SF 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_op_dup 4 [(float_extend:DF (match_dup 1))]))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 3))]\n-  \"\"\n+   (set (match_dup 3) (unspec:SF [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 4) (match_dup 3))]\n+{\n+  operands[4] = adjust_address (operands[0], SFmode, 0);\n+}\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n@@ -2442,10 +2421,12 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_op_dup 3 [(float_extend:DF (match_dup 1))]))\n-   (set (match_dup 4) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 4))]\n-  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[4] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n+   (set (match_dup 4) (unspec:SF [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 5) (match_dup 4))]\n+{\n+  operands[4] = gen_rtx_REG (SFmode, REGNO (operands[2]));\n+  operands[5] = adjust_address (operands[0], SFmode, 0);\n+}\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n@@ -2516,6 +2497,35 @@\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"sui\")])\n \n+(define_insn_and_split \"*floatsisf2_ieee\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_scratch:DI 2 \"=&f\"))\n+   (clobber (match_scratch:SF 3 \"=&f\"))]\n+  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 2) (unspec:DI [(match_dup 3)] UNSPEC_CVTLQ))\n+   (set (match_dup 0) (float:SF (match_dup 2)))]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 0);\n+})\n+\n+(define_insn_and_split \"*floatsisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_FP\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 2) (unspec:DI [(match_dup 0)] UNSPEC_CVTLQ))\n+   (set (match_dup 0) (float:SF (match_dup 2)))]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 0);\n+  operands[2] = gen_rtx_REG (DImode, REGNO (operands[0]));\n+})\n+\n (define_insn \"*floatdidf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n@@ -2536,6 +2546,36 @@\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"sui\")])\n \n+(define_insn_and_split \"*floatsidf2_ieee\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_scratch:DI 2 \"=&f\"))\n+   (clobber (match_scratch:SF 3 \"=&f\"))]\n+  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 2) (unspec:DI [(match_dup 3)] UNSPEC_CVTLQ))\n+   (set (match_dup 0) (float:DF (match_dup 2)))]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 0);\n+})\n+\n+(define_insn_and_split \"*floatsidf2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_FP\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 2) (unspec:DI [(match_dup 3)] UNSPEC_CVTLQ))\n+   (set (match_dup 0) (float:DF (match_dup 2)))]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 0);\n+  operands[2] = gen_rtx_REG (DImode, REGNO (operands[0]));\n+  operands[3] = gen_rtx_REG (SFmode, REGNO (operands[0]));\n+})\n+\n (define_expand \"floatditf2\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))\n    (use (match_operand:DI 1 \"general_operand\" \"\"))]\n@@ -5166,66 +5206,24 @@\n     operands[1] = force_reg (TFmode, operands[1]);\n })\n \n-(define_insn \"*movsi_nofix\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*f,*f,m\")\n-\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,*fJ,m,*f\"))]\n-  \"(TARGET_ABI_OSF || TARGET_ABI_UNICOSMK) && ! TARGET_FIX\n-   && (register_operand (operands[0], SImode)\n-       || reg_or_0_operand (operands[1], SImode))\"\n-  \"@\n-   bis $31,%r1,%0\n-   lda %0,%1($31)\n-   ldah %0,%h1($31)\n-   ldl %0,%1\n-   stl %r1,%0\n-   cpys %R1,%R1,%0\n-   ld%, %0,%1\n-   st%, %R1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,ild,ist,fcpys,fld,fst\")])\n-\n-(define_insn \"*movsi_fix\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*f,*f,m,r,*f\")\n-\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,*fJ,m,*f,*f,r\"))]\n-  \"TARGET_ABI_OSF && TARGET_FIX\n+(define_insn \"*movsi\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m\")\n+\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ\"))]\n+  \"(TARGET_ABI_OSF || TARGET_ABI_UNICOSMK)\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n   \"@\n    bis $31,%r1,%0\n    lda %0,%1($31)\n    ldah %0,%h1($31)\n    ldl %0,%1\n-   stl %r1,%0\n-   cpys %R1,%R1,%0\n-   ld%, %0,%1\n-   st%, %R1,%0\n-   ftois %1,%0\n-   itofs %1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n-\n-(define_insn \"*movsi_nt_vms_nofix\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,m\")\n-\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,*fJ,m,*f\"))]\n-  \"(TARGET_ABI_WINDOWS_NT || TARGET_ABI_OPEN_VMS)\n-    && !TARGET_FIX\n-    && (register_operand (operands[0], SImode)\n-        || reg_or_0_operand (operands[1], SImode))\"\n-  \"@\n-   bis $31,%1,%0\n-   lda %0,%1\n-   ldah %0,%h1\n-   lda %0,%1\n-   ldl %0,%1\n-   stl %r1,%0\n-   cpys %R1,%R1,%0\n-   ld%, %0,%1\n-   st%, %R1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst\")])\n+   stl %r1,%0\"\n+  [(set_attr \"type\" \"ilog,iadd,iadd,ild,ist\")])\n \n-(define_insn \"*movsi_nt_vms_fix\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,m,r,*f\")\n-\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,*fJ,m,*f,*f,r\"))]\n+(define_insn \"*movsi_nt_vms\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m\")\n+\t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,s,m,rJ\"))]\n   \"(TARGET_ABI_WINDOWS_NT || TARGET_ABI_OPEN_VMS)\n-    && TARGET_FIX\n     && (register_operand (operands[0], SImode)\n         || reg_or_0_operand (operands[1], SImode))\"\n   \"@\n@@ -5234,13 +5232,8 @@\n    ldah %0,%h1\n    lda %0,%1\n    ldl %0,%1\n-   stl %r1,%0\n-   cpys %R1,%R1,%0\n-   ld%, %0,%1\n-   st%, %R1,%0\n-   ftois %1,%0\n-   itofs %1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n+   stl %r1,%0\"\n+  [(set_attr \"type\" \"ilog,iadd,iadd,ldsym,ild,ist\")])\n \n (define_insn \"*movhi_nobwx\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -6901,17 +6894,6 @@\n   DONE;\n })\n \n-;; In creating a large stack frame, NT _must_ use ldah+lda to load\n-;; the frame size into a register.  We use this pattern to ensure\n-;; we get lda instead of addq.\n-(define_insn \"nt_lda\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_dup 0)\n-\t\t    (match_operand:DI 1 \"const_int_operand\" \"n\")]\n-\t\t   UNSPEC_NT_LDA))]\n-  \"\"\n-  \"lda %0,%1(%0)\")\n-\n (define_expand \"builtin_longjmp\"\n   [(use (match_operand:DI 0 \"register_operand\" \"r\"))]\n   \"TARGET_ABI_OSF\""}]}