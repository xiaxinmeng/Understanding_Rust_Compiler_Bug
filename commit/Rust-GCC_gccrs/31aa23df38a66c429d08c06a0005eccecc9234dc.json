{"sha": "31aa23df38a66c429d08c06a0005eccecc9234dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhYTIzZGYzOGE2NmM0MjlkMDhjMDZhMDAwNWVjY2VjYzkyMzRkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-02T21:56:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-02T21:56:17Z"}, "message": "re PR target/85582 (wrong code at -O1 and above on x86_64-linux-gnu in 32-bit mode)\n\n\tPR target/85582\n\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask,\n\t*ashl<dwi>3_doubleword_mask_1, *<shift_insn><dwi>3_doubleword_mask,\n\t*<shift_insn><dwi>3_doubleword_mask_1): In condition require that\n\tthe highest significant bit of the shift count mask is clear.  In\n\tcheck whether and[sq]i3 is needed verify that all significant bits\n\tof the shift count other than the highest are set.\n\n\t* gcc.c-torture/execute/pr85582-3.c: New test.\n\nFrom-SVN: r259862", "tree": {"sha": "da4886e607b08410f158790f4f8e9ced6de28a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da4886e607b08410f158790f4f8e9ced6de28a7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31aa23df38a66c429d08c06a0005eccecc9234dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31aa23df38a66c429d08c06a0005eccecc9234dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31aa23df38a66c429d08c06a0005eccecc9234dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31aa23df38a66c429d08c06a0005eccecc9234dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "019808c95c540a830a64c132257bde018abf6a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019808c95c540a830a64c132257bde018abf6a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019808c95c540a830a64c132257bde018abf6a1e"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "9074715cf0cc3ac30a0289c544e3fb19e1dfa02d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31aa23df38a66c429d08c06a0005eccecc9234dc", "patch": "@@ -1,3 +1,13 @@\n+2018-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85582\n+\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask,\n+\t*ashl<dwi>3_doubleword_mask_1, *<shift_insn><dwi>3_doubleword_mask,\n+\t*<shift_insn><dwi>3_doubleword_mask_1): In condition require that\n+\tthe highest significant bit of the shift count mask is clear.  In\n+\tcheck whether and[sq]i3 is needed verify that all significant bits\n+\tof the shift count other than the highest are set.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/82428"}, {"sha": "3aa27331187afd65cc2b428b82ddc9a61b7de2d5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=31aa23df38a66c429d08c06a0005eccecc9234dc", "patch": "@@ -10366,7 +10366,7 @@\n \t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT) - 1\n+  \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -10385,7 +10385,8 @@\n \n   operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n-  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT) - 1)\n+  if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n+      != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n       rtx tem = gen_reg_rtx (SImode);\n       emit_insn (gen_andsi3 (tem, operands[2], operands[3]));\n@@ -10406,7 +10407,7 @@\n \t    (match_operand:QI 2 \"register_operand\" \"c\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT) - 1\n+  \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -10425,7 +10426,8 @@\n \n   operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n-  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT) - 1)\n+  if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n+      != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n       rtx tem = gen_reg_rtx (QImode);\n       emit_insn (gen_andqi3 (tem, operands[2], operands[3]));\n@@ -11126,7 +11128,7 @@\n \t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT) - 1\n+  \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -11145,7 +11147,8 @@\n \n   operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n-  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT)-1)\n+  if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n+      != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n       rtx tem = gen_reg_rtx (SImode);\n       emit_insn (gen_andsi3 (tem, operands[2], operands[3]));\n@@ -11166,7 +11169,7 @@\n \t    (match_operand:QI 2 \"register_operand\" \"c\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT) - 1\n+  \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -11185,7 +11188,8 @@\n \n   operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n-  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT) - 1)\n+  if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n+      != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n       rtx tem = gen_reg_rtx (QImode);\n       emit_insn (gen_andqi3 (tem, operands[2], operands[3]));"}, {"sha": "670845608fad4aea7fb848f05a8c6e89a303c04f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31aa23df38a66c429d08c06a0005eccecc9234dc", "patch": "@@ -1,3 +1,8 @@\n+2018-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85582\n+\t* gcc.c-torture/execute/pr85582-3.c: New test.\n+\n 2018-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "99deb47517f8a70e8d7fce669e018083d4deb3e8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr85582-3.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85582-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa23df38a66c429d08c06a0005eccecc9234dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85582-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85582-3.c?ref=31aa23df38a66c429d08c06a0005eccecc9234dc", "patch": "@@ -0,0 +1,55 @@\n+/* PR target/85582 */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef __int128 S;\n+typedef unsigned __int128 U;\n+#else\n+typedef long long S;\n+typedef unsigned long long U;\n+#endif\n+\n+__attribute__((noipa)) U\n+f1 (U x, int y)\n+{\n+  return x << (y & -2);\n+}\n+\n+__attribute__((noipa)) S\n+f2 (S x, int y)\n+{\n+  return x >> (y & -2);\n+}\n+\n+__attribute__((noipa)) U\n+f3 (U x, int y)\n+{\n+  return x >> (y & -2);\n+}\n+\n+int\n+main ()\n+{\n+  U a = (U) 1 << (sizeof (U) * __CHAR_BIT__ - 7);\n+  if (f1 (a, 5) != ((U) 1 << (sizeof (S) * __CHAR_BIT__ - 3)))\n+    __builtin_abort ();\n+  S b = (U) 0x101 << (sizeof (S) * __CHAR_BIT__ / 2 - 7);\n+  if (f1 (b, sizeof (S) * __CHAR_BIT__ / 2) != (U) 0x101 << (sizeof (S) * __CHAR_BIT__ - 7))\n+    __builtin_abort ();\n+  if (f1 (b, sizeof (S) * __CHAR_BIT__ / 2 + 2) != (U) 0x101 << (sizeof (S) * __CHAR_BIT__ - 5))\n+    __builtin_abort ();\n+  S c = (U) 1 << (sizeof (S) * __CHAR_BIT__ - 1);\n+  if ((U) f2 (c, 5) != ((U) 0x1f << (sizeof (S) * __CHAR_BIT__ - 5)))\n+    __builtin_abort ();\n+  if ((U) f2 (c, sizeof (S) * __CHAR_BIT__ / 2) != ((U) -1 << (sizeof (S) * __CHAR_BIT__ / 2 - 1)))\n+    __builtin_abort ();\n+  if ((U) f2 (c, sizeof (S) * __CHAR_BIT__ / 2 + 2) != ((U) -1 << (sizeof (S) * __CHAR_BIT__ / 2 - 3)))\n+    __builtin_abort ();\n+  U d = (U) 1 << (sizeof (S) * __CHAR_BIT__ - 1);\n+  if (f3 (c, 5) != ((U) 0x1 << (sizeof (S) * __CHAR_BIT__ - 5)))\n+    __builtin_abort ();\n+  if (f3 (c, sizeof (S) * __CHAR_BIT__ / 2) != ((U) 1 << (sizeof (S) * __CHAR_BIT__ / 2 - 1)))\n+    __builtin_abort ();\n+  if (f3 (c, sizeof (S) * __CHAR_BIT__ / 2 + 2) != ((U) 1 << (sizeof (S) * __CHAR_BIT__ / 2 - 3)))\n+    __builtin_abort ();\n+  return 0;\n+}"}]}