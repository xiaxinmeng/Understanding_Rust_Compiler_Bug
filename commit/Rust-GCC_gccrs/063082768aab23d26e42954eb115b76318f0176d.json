{"sha": "063082768aab23d26e42954eb115b76318f0176d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYzMDgyNzY4YWFiMjNkMjZlNDI5NTRlYjExNWI3NjMxOGYwMTc2ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:45:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:45:49Z"}, "message": "[AArch64] Use \"x\" predication for SVE integer arithmetic patterns\n\nThe SVE patterns used an UNSPEC_MERGE_PTRUE unspec to attach a predicate\nto an otherwise unpredicated integer arithmetic operation.  As its name\nsuggests, this was designed to be a wrapper used for merging instructions\nin which the predicate is known to be a PTRUE.\n\nThis unspec dates from the very early days of the port and nothing has\never taken advantage of the PTRUE guarantee for arithmetic (as opposed\nto comparisons).  This patch replaces it with the less stringent\nguarantee that:\n\n(a) the values of inactive lanes don't matter and\n(b) it is valid to make extra lanes active if there's a specific benefit\n\nDoing this makes the patterns suitable for the ACLE _x functions, which\nhave the above semantics.\n\nSee the block comment in the patch for more details.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.md (UNSPEC_PRED_X): New unspec.\n\t* config/aarch64/aarch64-sve.md: Add a section describing it.\n\t(@aarch64_pred_mov<mode>, @aarch64_pred_mov<mode>)\n\t(<SVE_INT_UNARY:optab><mode>2, *<SVE_INT_UNARY:optab><mode>2)\n\t(aarch64_<su>abd<mode>_3, mul<SVE_I:mode>3, *mul<SVE_I:mode>3)\n\t(<su>mul<mode>3_highpart, *<su>mul<mode>3_highpart)\n\t(<SVE_INT_BINARY:optab><mode>3, *<SVE_INT_BINARY:optab><mode>3)\n\t(*bic<mode>3, v<ASHIFT:optab><mode>3, *v<ASHIFT:optab><mode>3)\n\t(<su><maxmin><mode>3, *<su><maxmin><mode>3, *madd<SVE_I:mode>)\n\t(*msub<SVE_I:mode>3, *aarch64_sve_rev64<mode>)\n\t(*aarch64_sve_rev32<mode>, *aarch64_sve_rev16vnx16qi): Use\n\tUNSPEC_PRED_X instead of UNSPEC_MERGE_PTRUE.\n\t* config/aarch64/aarch64-sve2.md (<u>avg<mode>3_floor)\n\t(<u>avg<mode>3_ceil, *<sur>h<addsub><mode>): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_split_sve_subreg_move)\n\t(aarch64_evpc_rev_local): Update accordingly.\n\nFrom-SVN: r274425", "tree": {"sha": "763e99103541a570d92ccfc8e001d0c95280690b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/763e99103541a570d92ccfc8e001d0c95280690b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/063082768aab23d26e42954eb115b76318f0176d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063082768aab23d26e42954eb115b76318f0176d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063082768aab23d26e42954eb115b76318f0176d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063082768aab23d26e42954eb115b76318f0176d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95eb5537d8bb23b952105b46250ed4fba8766b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95eb5537d8bb23b952105b46250ed4fba8766b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95eb5537d8bb23b952105b46250ed4fba8766b84"}], "stats": {"total": 135, "additions": 106, "deletions": 29}, "files": [{"sha": "ce4c5f6986803246ebfda102b6726abffb142083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063082768aab23d26e42954eb115b76318f0176d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063082768aab23d26e42954eb115b76318f0176d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=063082768aab23d26e42954eb115b76318f0176d", "patch": "@@ -1,3 +1,22 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (UNSPEC_PRED_X): New unspec.\n+\t* config/aarch64/aarch64-sve.md: Add a section describing it.\n+\t(@aarch64_pred_mov<mode>, @aarch64_pred_mov<mode>)\n+\t(<SVE_INT_UNARY:optab><mode>2, *<SVE_INT_UNARY:optab><mode>2)\n+\t(aarch64_<su>abd<mode>_3, mul<SVE_I:mode>3, *mul<SVE_I:mode>3)\n+\t(<su>mul<mode>3_highpart, *<su>mul<mode>3_highpart)\n+\t(<SVE_INT_BINARY:optab><mode>3, *<SVE_INT_BINARY:optab><mode>3)\n+\t(*bic<mode>3, v<ASHIFT:optab><mode>3, *v<ASHIFT:optab><mode>3)\n+\t(<su><maxmin><mode>3, *<su><maxmin><mode>3, *madd<SVE_I:mode>)\n+\t(*msub<SVE_I:mode>3, *aarch64_sve_rev64<mode>)\n+\t(*aarch64_sve_rev32<mode>, *aarch64_sve_rev16vnx16qi): Use\n+\tUNSPEC_PRED_X instead of UNSPEC_MERGE_PTRUE.\n+\t* config/aarch64/aarch64-sve2.md (<u>avg<mode>3_floor)\n+\t(<u>avg<mode>3_ceil, *<sur>h<addsub><mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_split_sve_subreg_move)\n+\t(aarch64_evpc_rev_local): Update accordingly.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (VNx4SI_ONLY, VNx2DF_ONLY): New mode"}, {"sha": "4f416189663e18370c7c491d6e5f49b3056ad6d5", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 79, "deletions": 21, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=063082768aab23d26e42954eb115b76318f0176d", "patch": "@@ -24,6 +24,7 @@\n ;; == General notes\n ;; ---- Note on the handling of big-endian SVE\n ;; ---- Description of UNSPEC_PTEST\n+;; ---- Note on predicated integer arithemtic and UNSPEC_PRED_X\n ;; ---- Note on predicated FP arithmetic patterns and GP \"strictness\"\n ;;\n ;; == Moves\n@@ -230,6 +231,63 @@\n ;; - OP is the predicate we want to test, of the same mode as CAST_GP.\n ;;\n ;; -------------------------------------------------------------------------\n+;; ---- Note on predicated integer arithemtic and UNSPEC_PRED_X\n+;; -------------------------------------------------------------------------\n+;;\n+;; Many SVE integer operations are predicated.  We can generate them\n+;; from four sources:\n+;;\n+;; (1) Using normal unpredicated optabs.  In this case we need to create\n+;;     an all-true predicate register to act as the governing predicate\n+;;     for the SVE instruction.  There are no inactive lanes, and thus\n+;;     the values of inactive lanes don't matter.\n+;;\n+;; (2) Using _x ACLE functions.  In this case the function provides a\n+;;     specific predicate and some lanes might be inactive.  However,\n+;;     as for (1), the values of the inactive lanes don't matter.\n+;;     We can make extra lanes active without changing the behavior\n+;;     (although for code-quality reasons we should avoid doing so\n+;;     needlessly).\n+;;\n+;; (3) Using cond_* optabs that correspond to IFN_COND_* internal functions.\n+;;     These optabs have a predicate operand that specifies which lanes are\n+;;     active and another operand that provides the values of inactive lanes.\n+;;\n+;; (4) Using _m and _z ACLE functions.  These functions map to the same\n+;;     patterns as (3), with the _z functions setting inactive lanes to zero\n+;;     and the _m functions setting the inactive lanes to one of the function\n+;;     arguments.\n+;;\n+;; For (1) and (2) we need a way of attaching the predicate to a normal\n+;; unpredicated integer operation.  We do this using:\n+;;\n+;;   (unspec:M [pred (code:M (op0 op1 ...))] UNSPEC_PRED_X)\n+;;\n+;; where (code:M (op0 op1 ...)) is the normal integer operation and PRED\n+;; is a predicate of mode <M:VPRED>.  PRED might or might not be a PTRUE;\n+;; it always is for (1), but might not be for (2).\n+;;\n+;; The unspec as a whole has the same value as (code:M ...) when PRED is\n+;; all-true.  It is always semantically valid to replace PRED with a PTRUE,\n+;; but as noted above, we should only do so if there's a specific benefit.\n+;;\n+;; (The \"_X\" in the unspec is named after the ACLE functions in (2).)\n+;;\n+;; For (3) and (4) we can simply use the SVE port's normal representation\n+;; of a predicate-based select:\n+;;\n+;;   (unspec:M [pred (code:M (op0 op1 ...)) inactive] UNSPEC_SEL)\n+;;\n+;; where INACTIVE specifies the values of inactive lanes.\n+;;\n+;; We can also use the UNSPEC_PRED_X wrapper in the UNSPEC_SEL rather\n+;; than inserting the integer operation directly.  This is mostly useful\n+;; if we want the combine pass to merge an integer operation with an explicit\n+;; vcond_mask (in other words, with a following SEL instruction).  However,\n+;; it's generally better to merge such operations at the gimple level\n+;; using (3).\n+;;\n+;; -------------------------------------------------------------------------\n ;; ---- Note on predicated FP arithmetic patterns and GP \"strictness\"\n ;; -------------------------------------------------------------------------\n ;;\n@@ -430,7 +488,7 @@\n \t(unspec:SVE_ALL\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   (match_operand:SVE_ALL 2 \"nonimmediate_operand\" \"w, m, w\")]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[2], <MODE>mode))\"\n@@ -578,7 +636,7 @@\n \t(unspec:SVE_STRUCT\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   (match_operand:SVE_STRUCT 2 \"aarch64_sve_struct_nonimmediate_operand\" \"w, Utx, w\")]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[2], <MODE>mode))\"\n@@ -1327,7 +1385,7 @@\n \t(unspec:SVE_I\n \t  [(match_dup 2)\n \t   (SVE_INT_UNARY:SVE_I (match_operand:SVE_I 1 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1341,7 +1399,7 @@\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n \t   (SVE_INT_UNARY:SVE_I\n \t     (match_operand:SVE_I 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n )\n@@ -1600,7 +1658,7 @@\n \t     (<max_opp>:SVE_I\n \t       (match_dup 2)\n \t       (match_dup 3)))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    <su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n@@ -1623,7 +1681,7 @@\n \t   (mult:SVE_I\n \t     (match_operand:SVE_I 1 \"register_operand\")\n \t     (match_operand:SVE_I 2 \"aarch64_sve_mul_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1641,7 +1699,7 @@\n \t   (mult:SVE_I\n \t     (match_operand:SVE_I 2 \"register_operand\" \"%0, 0, w\")\n \t     (match_operand:SVE_I 3 \"aarch64_sve_mul_operand\" \"vsm, w, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    #\n@@ -1686,7 +1744,7 @@\n \t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n \t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n \t\t\t MUL_HIGHPART)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1701,7 +1759,7 @@\n \t   (unspec:SVE_I [(match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n \t\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\")]\n \t\t\t MUL_HIGHPART)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    <su>mulh\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n@@ -1727,7 +1785,7 @@\n \t   (SVE_INT_BINARY_SD:SVE_SDI\n \t     (match_operand:SVE_SDI 1 \"register_operand\")\n \t     (match_operand:SVE_SDI 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1742,7 +1800,7 @@\n \t   (SVE_INT_BINARY_SD:SVE_SDI\n \t     (match_operand:SVE_SDI 2 \"register_operand\" \"0, w, w\")\n \t     (match_operand:SVE_SDI 3 \"aarch64_sve_mul_operand\" \"w, 0, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n@@ -1864,7 +1922,7 @@\n \t  (unspec:SVE_I\n \t    [(match_operand 3)\n \t     (not:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w\"))]\n-\t    UNSPEC_MERGE_PTRUE)\n+\t    UNSPEC_PRED_X)\n \t  (match_operand:SVE_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SVE\"\n   \"bic\\t%0.d, %1.d, %2.d\"\n@@ -1918,7 +1976,7 @@\n \t   (ASHIFT:SVE_I\n \t     (match_operand:SVE_I 1 \"register_operand\")\n \t     (match_operand:SVE_I 2 \"aarch64_sve_<lr>shift_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1936,7 +1994,7 @@\n \t   (ASHIFT:SVE_I\n \t     (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w\")\n \t     (match_operand:SVE_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    #\n@@ -1978,7 +2036,7 @@\n \t  [(match_dup 3)\n \t   (MAXMIN:SVE_I (match_operand:SVE_I 1 \"register_operand\")\n \t\t\t (match_operand:SVE_I 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -1992,7 +2050,7 @@\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (MAXMIN:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n \t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    <su><maxmin>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n@@ -2549,7 +2607,7 @@\n \t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"%0, w, w\")\n \t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w, w\"))]\n-\t    UNSPEC_MERGE_PTRUE)\n+\t    UNSPEC_PRED_X)\n \t  (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w\")))]\n   \"TARGET_SVE\"\n   \"@\n@@ -2576,7 +2634,7 @@\n \t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"%0, w, w\")\n \t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w, w\"))]\n-\t    UNSPEC_MERGE_PTRUE)))]\n+\t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE\"\n   \"@\n    msb\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n@@ -3485,7 +3543,7 @@\n \t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n \t   (unspec:SVE_BHS [(match_operand:SVE_BHS 2 \"register_operand\" \"w\")]\n \t\t\t   UNSPEC_REV64)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"rev<Vesize>\\t%0.d, %1/m, %2.d\"\n )\n@@ -3497,7 +3555,7 @@\n \t  [(match_operand:VNx4BI 1 \"register_operand\" \"Upl\")\n \t   (unspec:SVE_BH [(match_operand:SVE_BH 2 \"register_operand\" \"w\")]\n \t\t\t  UNSPEC_REV32)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"rev<Vesize>\\t%0.s, %1/m, %2.s\"\n )\n@@ -3509,7 +3567,7 @@\n \t  [(match_operand:VNx8BI 1 \"register_operand\" \"Upl\")\n \t   (unspec:VNx16QI [(match_operand:VNx16QI 2 \"register_operand\" \"w\")]\n \t\t\t   UNSPEC_REV16)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"revb\\t%0.h, %1/m, %2.h\"\n )"}, {"sha": "2334e5a7b7dc524bbd1f4d0a48ba5cd991970118", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=063082768aab23d26e42954eb115b76318f0176d", "patch": "@@ -26,7 +26,7 @@\n \t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n \t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n \t\t\t HADD)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   {\n     operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n@@ -41,7 +41,7 @@\n \t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n \t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n \t\t\t RHADD)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   {\n     operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n@@ -56,10 +56,10 @@\n \t   (unspec:SVE_I [(match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n \t\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\")]\n \t\t\t HADDSUB)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   \"@\n    <sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n    movprfx\\t%0, %2\\;<sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   [(set_attr \"movprfx\" \"*,yes\")]\n-)\n\\ No newline at end of file\n+)"}, {"sha": "a936608482e8cf707c3a4a46cd7e7e7f031c1d73", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=063082768aab23d26e42954eb115b76318f0176d", "patch": "@@ -4097,16 +4097,15 @@ aarch64_split_sve_subreg_move (rtx dest, rtx ptrue, rtx src)\n \n   /* Emit:\n \n-       (set DEST (unspec [PTRUE (unspec [SRC] UNSPEC_REV<nn>)]\n-\t\t\t UNSPEC_MERGE_PTRUE))\n+       (set DEST (unspec [PTRUE (unspec [SRC] UNSPEC_REV<nn>)] UNSPEC_PRED_X))\n \n      with the appropriate modes.  */\n   ptrue = gen_lowpart (pred_mode, ptrue);\n   dest = aarch64_replace_reg_mode (dest, mode_with_narrower_elts);\n   src = aarch64_replace_reg_mode (src, mode_with_narrower_elts);\n   src = gen_rtx_UNSPEC (mode_with_narrower_elts, gen_rtvec (1, src), unspec);\n   src = gen_rtx_UNSPEC (mode_with_narrower_elts, gen_rtvec (2, ptrue, src),\n-\t\t\tUNSPEC_MERGE_PTRUE);\n+\t\t\tUNSPEC_PRED_X);\n   emit_insn (gen_rtx_SET (dest, src));\n }\n \n@@ -17434,7 +17433,7 @@ aarch64_evpc_rev_local (struct expand_vec_perm_d *d)\n     {\n       rtx pred = aarch64_ptrue_reg (pred_mode);\n       src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (2, pred, src),\n-\t\t\t    UNSPEC_MERGE_PTRUE);\n+\t\t\t    UNSPEC_PRED_X);\n     }\n   emit_set_insn (d->target, src);\n   return true;"}, {"sha": "589b4d3ae90c3ee7f9ce11e3cb0c25da14677eca", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063082768aab23d26e42954eb115b76318f0176d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=063082768aab23d26e42954eb115b76318f0176d", "patch": "@@ -220,6 +220,7 @@\n     UNSPEC_LD1_GATHER\n     UNSPEC_ST1_SCATTER\n     UNSPEC_MERGE_PTRUE\n+    UNSPEC_PRED_X\n     UNSPEC_PTEST\n     UNSPEC_UNPACKSHI\n     UNSPEC_UNPACKUHI"}]}