{"sha": "52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjNTA5MGE0Zjk0MDQ1OWFjM2UzOGJjZWUwZmQ5ZjVmODZhNGVmZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-01-11T08:53:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:53:15Z"}, "message": "[Ada] Crash on expression function as completion, with implicit dereference\n\nAn implicit dereference freezes the corresponding designated type. Most\nimplicit dereferences are made explicit during expansion, but this is not the\ncase for a dispatching call where the the controlling parameter and the\ncorresponding controlling argument are access to a tagged type. In that case,\nto enforce the rule that an expression function that is a completion freezes\ntype references within, we must locate controlling arguments of an access type\nand freeze explicitly the corresponding designated type.\n\n2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Freeze_Expr_Types): If an access value is the\n\tcontrolling argument of a dispatching call. freeze the corresponding\n\tdesignated type.\n\ngcc/testsuite/\n\n\t* gnat.dg/expr_func3.adb, gnat.dg/expr_func3.ads: New testcase.\n\nFrom-SVN: r256507", "tree": {"sha": "f6ee50a6149b595f15bbdd02da83116a39fa1a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ee50a6149b595f15bbdd02da83116a39fa1a8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e01b698bd52e3b4af71a5cb03e647d3ac8cf601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01b698bd52e3b4af71a5cb03e647d3ac8cf601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e01b698bd52e3b4af71a5cb03e647d3ac8cf601"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "fc30104ded284d665493d1f7e8702e00108def6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "patch": "@@ -1,3 +1,9 @@\n+2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Freeze_Expr_Types): If an access value is the\n+\tcontrolling argument of a dispatching call. freeze the corresponding\n+\tdesignated type.\n+\n 2018-01-11  Ben Brosgol  <brosgol@adacore.com>\n \n \t* doc/Makefile: Add Sphinx option -W to treat warnings as errors."}, {"sha": "1c0495f651200c616f0099035bda906e53e217da", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "patch": "@@ -423,6 +423,20 @@ package body Sem_Ch6 is\n                Check_And_Freeze_Type (Designated_Type (Etype (Node)));\n             end if;\n \n+            --  An implicit dereference freezes the designated type. In the\n+            --  case of a dispatching call whose controlling argument is an\n+            --  access type, the dereference is not made explicit, so we must\n+            --  check for such a call and freeze the designated type.\n+\n+            if Nkind (Node) in N_Has_Etype\n+              and then Present (Etype (Node))\n+              and then Is_Access_Type (Etype (Node))\n+              and then Nkind (Parent (Node)) = N_Function_Call\n+              and then Node = Controlling_Argument (Parent (Node))\n+            then\n+               Check_And_Freeze_Type (Designated_Type (Etype (Node)));\n+            end if;\n+\n             --  No point in posting several errors on the same expression\n \n             if Serious_Errors_Detected > 0 then"}, {"sha": "0ea0a93e0d7d1640d556d99e1da3a5ff1ad3212b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "patch": "@@ -1,3 +1,7 @@\n+2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/expr_func3.adb, gnat.dg/expr_func3.ads: New testcase.\n+\n 2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/fixedpnt2.adb, gnat.dg/fixedpnt2.ads: New testcase."}, {"sha": "3e4d58329679943614bad6f6431338e65d0e811c", "filename": "gcc/testsuite/gnat.dg/expr_func3.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.adb?ref=52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "patch": "@@ -0,0 +1,7 @@\n+--  { dg-do compile }\n+\n+package body Expr_Func3 is\n+\n+   procedure Dummy is null;\n+\n+end Expr_Func3;"}, {"sha": "45593da845caa7e3da0ba7b61f8c60c33772aad6", "filename": "gcc/testsuite/gnat.dg/expr_func3.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5090a4f940459ac3e38bcee0fd9f5f86a4eff/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func3.ads?ref=52c5090a4f940459ac3e38bcee0fd9f5f86a4eff", "patch": "@@ -0,0 +1,18 @@\n+package Expr_Func3 is\n+\n+   type Obj_T is abstract tagged null record;\n+\n+   type T is access all Obj_T'Class;\n+\n+   function Slave (Obj : access Obj_T) return T is (T(Obj));\n+\n+   function Optional_Slave (Obj : T) return T;\n+\n+   procedure Dummy;\n+\n+private\n+\n+   function Optional_Slave (Obj : T) return T is\n+    (if Obj = null then null else Slave (Obj));\n+\n+end Expr_Func3;"}]}