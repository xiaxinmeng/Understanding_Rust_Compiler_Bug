{"sha": "1a8479839e944fa2a8abd5923b4b65ce6cc96401", "node_id": "C_kwDOANBUbNoAKDFhODQ3OTgzOWU5NDRmYTJhOGFiZDU5MjNiNGI2NWNlNmNjOTY0MDE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-25T17:15:10Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-27T09:26:32Z"}, "message": "Remove assertion for has_where_clause\n\nThis assertion doesn't protect against bad pointers or behaviour, when we\naccess the where clause it is simply a wrapper over a vector of where\nclause items so we can safely iterate even when the where clause item\nvector is empty.", "tree": {"sha": "83c5fdca56f26f64346ff103bfcd06f3c8205687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c5fdca56f26f64346ff103bfcd06f3c8205687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8479839e944fa2a8abd5923b4b65ce6cc96401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8479839e944fa2a8abd5923b4b65ce6cc96401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8479839e944fa2a8abd5923b4b65ce6cc96401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8479839e944fa2a8abd5923b4b65ce6cc96401/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9746032345e1bffeb9ff2c92473bf90f843379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9746032345e1bffeb9ff2c92473bf90f843379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9746032345e1bffeb9ff2c92473bf90f843379"}], "stats": {"total": 87, "additions": 22, "deletions": 65}, "files": [{"sha": "323548a4e39db3ac872d600eb8d7cd6df5269098", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 11, "deletions": 55, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8479839e944fa2a8abd5923b4b65ce6cc96401/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8479839e944fa2a8abd5923b4b65ce6cc96401/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=1a8479839e944fa2a8abd5923b4b65ce6cc96401", "patch": "@@ -887,11 +887,7 @@ class Method : public InherentImplItem, public TraitImplItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   Identifier get_method_name () const { return method_name; }\n \n@@ -1587,11 +1583,7 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n   Identifier get_function_name () const { return function_name; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_return_type ()\n@@ -1719,11 +1711,7 @@ class TypeAlias : public VisItem, public TraitImplItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type_aliased ()\n@@ -1789,11 +1777,7 @@ class Struct : public VisItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   Identifier get_identifier () const { return struct_name; }\n \n@@ -2410,11 +2394,7 @@ class Enum : public VisItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -2520,11 +2500,7 @@ class Union : public VisItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   Identifier get_identifier () const { return union_name; }\n \n@@ -2877,11 +2853,7 @@ struct TraitFunctionDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n };\n \n // Actual trait item function declaration within traits\n@@ -3104,11 +3076,7 @@ struct TraitMethodDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   SelfParam &get_self_param () { return self_param; }\n   const SelfParam &get_self_param () const { return self_param; }\n@@ -3542,11 +3510,7 @@ class Trait : public VisItem\n     return type_param_bounds;\n   }\n \n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   void insert_implict_self (std::unique_ptr<AST::GenericParam> &&param)\n   {\n@@ -3619,11 +3583,7 @@ class Impl : public VisItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type ()\n@@ -4270,11 +4230,7 @@ class ExternalFunctionItem : public ExternalItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_return_type ()"}, {"sha": "4fdd764c03f8b78d90d33922e9d894f44bb7c753", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8479839e944fa2a8abd5923b4b65ce6cc96401/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8479839e944fa2a8abd5923b4b65ce6cc96401/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=1a8479839e944fa2a8abd5923b4b65ce6cc96401", "patch": "@@ -340,6 +340,15 @@ struct WhereClause\n   bool is_empty () const { return where_clause_items.empty (); }\n \n   std::string as_string () const;\n+\n+  std::vector<std::unique_ptr<WhereClauseItem>> &get_items ()\n+  {\n+    return where_clause_items;\n+  }\n+  const std::vector<std::unique_ptr<WhereClauseItem>> &get_items () const\n+  {\n+    return where_clause_items;\n+  }\n };\n \n // A self parameter in a method\n@@ -1205,11 +1214,7 @@ class Function : public VisItem, public ImplItem\n   Identifier get_function_name () const { return function_name; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   bool has_return_type () const { return return_type != nullptr; }\n \n@@ -1322,11 +1327,7 @@ class TypeAlias : public VisItem, public ImplItem\n     return generic_params;\n   }\n \n-  WhereClause &get_where_clause ()\n-  {\n-    rust_assert (has_where_clause ());\n-    return where_clause;\n-  }\n+  WhereClause &get_where_clause () { return where_clause; }\n \n   std::unique_ptr<Type> &get_type_aliased ()\n   {"}]}