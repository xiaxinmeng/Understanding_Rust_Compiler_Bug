{"sha": "df90f070378583f295dd972db4400f324752a240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5MGYwNzAzNzg1ODNmMjk1ZGQ5NzJkYjQ0MDBmMzI0NzUyYTI0MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-20T20:44:57Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-20T20:46:42Z"}, "message": "PR middle-end/97879 - ICE on invalid mode in attribute access\n\ngcc/c-family/ChangeLog:\n\n\tPR middle-end/97879\n\t* c-attribs.c (handle_access_attribute): Handle ATTR_FLAG_INTERNAL.\n\tError out on invalid modes.\n\ngcc/c/ChangeLog:\n\tPR middle-end/97879\n\t* c-decl.c (start_function): Set ATTR_FLAG_INTERNAL in flags.\n\ngcc/ChangeLog:\n\n\tPR middle-end/97879\n\t* tree-core.h (enum attribute_flags): Add ATTR_FLAG_INTERNAL.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/97879\n\t* gcc.dg/attr-access-3.c: New test.", "tree": {"sha": "517fce4e670892715baeefb7f19cf09f1824cabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/517fce4e670892715baeefb7f19cf09f1824cabe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df90f070378583f295dd972db4400f324752a240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df90f070378583f295dd972db4400f324752a240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df90f070378583f295dd972db4400f324752a240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df90f070378583f295dd972db4400f324752a240/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01dda3c23b836754814fab1cab949a1bbc641e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01dda3c23b836754814fab1cab949a1bbc641e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01dda3c23b836754814fab1cab949a1bbc641e8"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "1d2ab7c81eda254086fbb4e69cc699fe754c6270", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df90f070378583f295dd972db4400f324752a240/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df90f070378583f295dd972db4400f324752a240/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=df90f070378583f295dd972db4400f324752a240", "patch": "@@ -2810,9 +2810,11 @@ handle_copy_attribute (tree *node, tree name, tree args,\n   tree attrs = TYPE_ATTRIBUTES (reftype);\n \n   /* Copy type attributes from REF to DECL.  Pass in REF if it's a DECL\n-     or a type but not if it's an expression.  */\n+     or a type but not if it's an expression.  Set ATTR_FLAG_INTERNAL\n+     since the attributes' arguments may be in their internal form.  */\n   for (tree at = attrs; at; at = TREE_CHAIN (at))\n-    decl_attributes (node, at, flags, EXPR_P (ref) ? NULL_TREE : ref);\n+    decl_attributes (node, at, flags | ATTR_FLAG_INTERNAL,\n+\t\t     EXPR_P (ref) ? NULL_TREE : ref);\n \n   return NULL_TREE;\n }\n@@ -4289,8 +4291,8 @@ append_access_attr (tree node[3], tree attrs, const char *attrstr,\n    the attribute and its arguments into a string.  */\n \n static tree\n-handle_access_attribute (tree node[3], tree name, tree args,\n-\t\t\t int ARG_UNUSED (flags), bool *no_add_attrs)\n+handle_access_attribute (tree node[3], tree name, tree args, int flags,\n+\t\t\t bool *no_add_attrs)\n {\n   tree attrs = TYPE_ATTRIBUTES (*node);\n   tree type = *node;\n@@ -4336,15 +4338,19 @@ handle_access_attribute (tree node[3], tree name, tree args,\n \n \t  /* Recursively call self to \"replace\" the documented/external\n \t     form of the attribute with the condensend internal form.  */\n-\t  decl_attributes (node, axsat, flags);\n+\t  decl_attributes (node, axsat, flags | ATTR_FLAG_INTERNAL);\n \t  return NULL_TREE;\n \t}\n \n-      /* This is a recursive call to handle the condensed internal form\n-\t of the attribute (see below).  Since all validation has been\n-\t done simply return here, accepting the attribute as is.  */\n-      *no_add_attrs = false;\n-      return NULL_TREE;\n+      if (flags & ATTR_FLAG_INTERNAL)\n+\t{\n+\t  /* This is a recursive call to handle the condensed internal\n+\t     form of the attribute (see below).  Since all validation\n+\t     has been done simply return here, accepting the attribute\n+\t     as is.  */\n+\t  *no_add_attrs = false;\n+\t  return NULL_TREE;\n+\t}\n     }\n \n   /* Set to true when the access mode has the form of a function call\n@@ -4363,6 +4369,13 @@ handle_access_attribute (tree node[3], tree name, tree args,\n       access_mode = DECL_NAME (access_mode);\n       funcall = true;\n     }\n+  else if (TREE_CODE (access_mode) != IDENTIFIER_NODE)\n+    {\n+      error (\"attribute %qE mode %qE is not an identifier; expected one of \"\n+\t     \"%qs, %qs, %qs, or %qs\", name, access_mode,\n+\t     \"read_only\", \"read_write\", \"write_only\", \"none\");\n+      return NULL_TREE;\n+    }\n \n   const char* const access_str = IDENTIFIER_POINTER (access_mode);\n   const char *ps = access_str;\n@@ -4573,7 +4586,7 @@ handle_access_attribute (tree node[3], tree name, tree args,\n \n   /* Recursively call self to \"replace\" the documented/external form\n      of the attribute with the condensed internal form.  */\n-  decl_attributes (node, new_attrs, flags);\n+  decl_attributes (node, new_attrs, flags | ATTR_FLAG_INTERNAL);\n   return NULL_TREE;\n }\n "}, {"sha": "27f77224ea47f21e6a3ceb2a71e1d7afd84345b1", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df90f070378583f295dd972db4400f324752a240/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df90f070378583f295dd972db4400f324752a240/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=df90f070378583f295dd972db4400f324752a240", "patch": "@@ -9598,7 +9598,8 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   current_function_decl = pushdecl (decl1);\n \n   if (tree access = build_attr_access_from_parms (parms, false))\n-    decl_attributes (&current_function_decl, access, 0, old_decl);\n+    decl_attributes (&current_function_decl, access, ATTR_FLAG_INTERNAL,\n+\t\t     old_decl);\n \n   push_scope ();\n   declare_parm_level ();"}, {"sha": "45dd1aaad11b09b32c2d1277fdcbf82235f67d9c", "filename": "gcc/testsuite/gcc.dg/attr-access-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df90f070378583f295dd972db4400f324752a240/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df90f070378583f295dd972db4400f324752a240/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-access-3.c?ref=df90f070378583f295dd972db4400f324752a240", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/97879 - ICE on invalid mode in attribute access\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define A(...) __attribute__ ((access (__VA_ARGS__)))\n+\n+A (\" \", 1) void f1 (int *);       // { dg-error \"attribute 'access' mode '\\\" \\\"' is not an identifier; expected one of 'read_only', 'read_write', 'write_only', or 'none'\" }\n+           void f1 (int *);\n+\n+\n+A (\"none\", 1) void f2 (char *);   // { dg-error \"not an identifier\" }\n+              void f2 (char *);\n+\n+A (1) void f3 ();                 // { dg-error \"not an identifier\" }\n+\n+A (1, 2) void f4 ();              // { dg-error \"not an identifier\" }\n+A (2., 3.) void f5 ();            // { dg-error \"not an identifier\" }\n+\n+// Verify that copying a valid access attribute doesn't cause errors.\n+A (read_only, 1, 2)         void f6 (void*, int);\n+__attribute__ ((copy (f6))) void f7 (void*, int);"}, {"sha": "313a6af2253454491f1f0d743ef496e4590a11cb", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df90f070378583f295dd972db4400f324752a240/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df90f070378583f295dd972db4400f324752a240/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=df90f070378583f295dd972db4400f324752a240", "patch": "@@ -859,7 +859,10 @@ enum attribute_flags {\n      are not in fact compatible with the function type.  */\n   ATTR_FLAG_BUILT_IN = 16,\n   /* A given attribute has been parsed as a C++-11 attribute.  */\n-  ATTR_FLAG_CXX11 = 32\n+  ATTR_FLAG_CXX11 = 32,\n+  /* The attribute handler is being invoked with an internal argument\n+     that may not otherwise be valid when specified in source code.  */\n+  ATTR_FLAG_INTERNAL = 64\n };\n \n /* Types used to represent sizes.  */"}]}