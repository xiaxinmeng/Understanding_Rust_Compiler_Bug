{"sha": "6e7e772dceb2f238c2645ad4c695787fd69d381d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU3ZTc3MmRjZWIyZjIzOGMyNjQ1YWQ0YzY5NTc4N2ZkNjlkMzgxZA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2007-03-02T19:20:14Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2007-03-02T19:20:14Z"}, "message": "tree-ssa-structalias.c (could_have_pointers): Tidy.\n\n\n\t* tree-ssa-structalias.c (could_have_pointers): Tidy.\n\t(get_constraint_for): Likewise.\n\t(do_structure_copy): Likewise.\n\t(find_func_aliases): Fix references to MODIFY_EXPR.\n\t(intra_create_variable_infos): Tidy.\n\t* tree-ssa-operands.c (add_virtual_operand): Add argument\n\tIS_CALL_SITE.\n\tWhen adding members of alias sets, if IS_CALL_SITE is true and\n\tthe symbol is not call-clobbered, skip it.\n\tAdjust all callers.\n\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/tree-ssa/20070302-1.c: New test.\n\nFrom-SVN: r122484", "tree": {"sha": "d115232be79b943f236094caa9dfca2dd4373647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d115232be79b943f236094caa9dfca2dd4373647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e7e772dceb2f238c2645ad4c695787fd69d381d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7e772dceb2f238c2645ad4c695787fd69d381d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7e772dceb2f238c2645ad4c695787fd69d381d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7e772dceb2f238c2645ad4c695787fd69d381d/comments", "author": null, "committer": null, "parents": [{"sha": "0618281a42577cb71aee6013a60654e17564a410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0618281a42577cb71aee6013a60654e17564a410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0618281a42577cb71aee6013a60654e17564a410"}], "stats": {"total": 141, "additions": 114, "deletions": 27}, "files": [{"sha": "0bc6279a43027994db94cf99e72b6653d3db8053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e7e772dceb2f238c2645ad4c695787fd69d381d", "patch": "@@ -1,3 +1,16 @@\n+2007-03-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-ssa-structalias.c (could_have_pointers): Tidy.\n+\t(get_constraint_for): Likewise.\n+\t(do_structure_copy): Likewise.\n+\t(find_func_aliases): Fix references to MODIFY_EXPR.\n+\t(intra_create_variable_infos): Tidy.\n+\t* tree-ssa-operands.c (add_virtual_operand): Add argument\n+\tIS_CALL_SITE.\n+\tWhen adding members of alias sets, if IS_CALL_SITE is true and\n+\tthe symbol is not call-clobbered, skip it.\n+\tAdjust all callers.\n+\n 2007-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/alpha/alpha.c (alpha_gp_save_rtx): Insert the insns at the"}, {"sha": "88677236c68b659e2948a8b91b220610fb96ae6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e7e772dceb2f238c2645ad4c695787fd69d381d", "patch": "@@ -1,3 +1,7 @@\n+2007-03-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/20070302-1.c: New test.\n+\n 2007-03-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/powerpc/spe-unwind-1.c, g++.dg/eh/simd-5.C: New"}, {"sha": "17fcbab2580fbc9640664f4d83b692054e13c18f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20070302-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20070302-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20070302-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20070302-1.c?ref=6e7e772dceb2f238c2645ad4c695787fd69d381d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+struct A\n+{\n+  int x;\n+  float y;\n+};\n+\n+volatile float X, Y;\n+\n+int baz (struct A *z, struct A *y)\n+{\n+  z->x = (int) X;\n+  z->y = Y;\n+  y->x = (int) X;\n+  y->y = Y;\n+}\n+\n+\n+struct A B;\n+\n+float foo (int i)\n+{\n+  struct A *p, x, y, z;\n+\n+  p = (i > 10) ? &x : &z;\n+  x.y = 3.0;\n+  p->x += baz (&z, &y);\n+  X = z.y;\n+  Y = p->y;\n+\n+  /* This predicate should always evaluate to false.  The call to\n+     baz() is not a clobbering site for x.y.  The operand scanner was\n+     considering it a clobbering site for x.y because x.y is in the\n+     alias set of a call-clobbered memory tag.  */\n+  if (x.y != 3.0)\n+    link_error ();\n+}\n+\n+main(int argc, char **argv)\n+{\n+  foo (argc);\n+}"}, {"sha": "8e8ef6413f5ae21787d7538d005dbe4187310c45", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=6e7e772dceb2f238c2645ad4c695787fd69d381d", "patch": "@@ -142,6 +142,7 @@ static VEC(tree,heap) *build_vuses;\n /* Bitmap obstack for our datastructures that needs to survive across\t\n    compilations of multiple functions.  */\n static bitmap_obstack operands_bitmap_obstack;\n+\n /* Set for building all the loaded symbols.  */\n static bitmap build_loads;\n \n@@ -1433,12 +1434,13 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n    get_expr_operands.  FULL_REF is a tree that contains the entire\n    pointer dereference expression, if available, or NULL otherwise.\n    OFFSET and SIZE come from the memory access expression that\n-   generated this virtual operand.  */\n+   generated this virtual operand.  IS_CALL_SITE is true if the\n+   affected statement is a call site.  */\n \n static void \n add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t\t     tree full_ref, HOST_WIDE_INT offset,\n-\t\t     HOST_WIDE_INT size)\n+\t\t     HOST_WIDE_INT size, bool is_call_site)\n {\n   bitmap aliases = NULL;\n   tree sym;\n@@ -1480,10 +1482,12 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n   \n   if (MTAG_P (var))\n     aliases = MTAG_ALIASES (var);\n+\n   if (aliases == NULL)\n     {\n       if (s_ann && !gimple_aliases_computed_p (cfun))\n         s_ann->has_volatile_ops = true;\n+\n       /* The variable is not aliased or it is an alias tag.  */\n       if (flags & opf_def)\n \tappend_vdef (var);\n@@ -1508,7 +1512,13 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t      al = referenced_var (i);\n \t      if (!access_can_touch_variable (full_ref, al, offset, size))\n \t\tcontinue;\n-\t      \n+\n+\t      /* Call-clobbered tags may have non-call-clobbered\n+\t\t symbols in their alias sets.  Ignore them if we are\n+\t\t adding VOPs for a call site.  */\n+\t      if (is_call_site && !is_call_clobbered (al))\n+\t\tcontinue;\n+\n \t      none_added = false;\n \t      append_vdef (al);\n \t    }\n@@ -1529,6 +1539,13 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t      al = referenced_var (i);\n \t      if (!access_can_touch_variable (full_ref, al, offset, size))\n \t\tcontinue;\n+\n+\t      /* Call-clobbered tags may have non-call-clobbered\n+\t\t symbols in their alias sets.  Ignore them if we are\n+\t\t adding VOPs for a call site.  */\n+\t      if (is_call_site && !is_call_clobbered (al))\n+\t\tcontinue;\n+\n \t      none_added = false;\n \t      append_vuse (al);\n \t    }\n@@ -1575,7 +1592,7 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n \tappend_use (var_p);\n     }\n   else\n-    add_virtual_operand (var, s_ann, flags, NULL_TREE, 0, -1);\n+    add_virtual_operand (var, s_ann, flags, NULL_TREE, 0, -1, false);\n }\n \n \n@@ -1622,7 +1639,7 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \t{\n \t  /* PTR has its own memory tag.  Use it.  */\n \t  add_virtual_operand (pi->name_mem_tag, s_ann, flags,\n-\t\t\t       full_ref, offset, size);\n+\t\t\t       full_ref, offset, size, false);\n \t}\n       else\n \t{\n@@ -1651,10 +1668,12 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \n \t  if (v_ann->symbol_mem_tag)\n \t    add_virtual_operand (v_ann->symbol_mem_tag, s_ann, flags,\n-\t\t\t\t full_ref, offset, size);\n-          /* Aliasing information is missing; mark statement as volatile so we\n-             won't optimize it out too actively.  */\n-          else if (s_ann && !gimple_aliases_computed_p (cfun)\n+\t\t\t\t full_ref, offset, size, false);\n+\n+\t  /* Aliasing information is missing; mark statement as\n+\t     volatile so we won't optimize it out too actively.  */\n+          else if (s_ann\n+\t           && !gimple_aliases_computed_p (cfun)\n                    && (flags & opf_def))\n             s_ann->has_volatile_ops = true;\n \t}\n@@ -1743,12 +1762,11 @@ add_call_clobber_ops (tree stmt, tree callee)\n   if (s_ann)\n     s_ann->makes_clobbering_call = true;\n \n-  /* If we created .GLOBAL_VAR earlier, just use it.  See compute_may_aliases \n-     for the heuristic used to decide whether to create .GLOBAL_VAR or not.  */\n+  /* If we created .GLOBAL_VAR earlier, just use it.  */\n   if (gimple_global_var (cfun))\n     {\n       tree var = gimple_global_var (cfun);\n-      add_stmt_operand (&var, s_ann, opf_def);\n+      add_virtual_operand (var, s_ann, opf_def, NULL, 0, -1, true);\n       return;\n     }\n \n@@ -1772,10 +1790,13 @@ add_call_clobber_ops (tree stmt, tree callee)\n       if (TREE_CODE (var) == STRUCT_FIELD_TAG)\n \treal_var = SFT_PARENT_VAR (var);\n \n-      not_read = not_read_b ? bitmap_bit_p (not_read_b, \n-\t\t\t\t\t    DECL_UID (real_var)) : false;\n-      not_written = not_written_b ? bitmap_bit_p (not_written_b, \n-\t\t\t\t\t\t  DECL_UID (real_var)) : false;\n+      not_read = not_read_b\n+\t         ? bitmap_bit_p (not_read_b, DECL_UID (real_var))\n+\t         : false;\n+\n+      not_written = not_written_b\n+\t            ? bitmap_bit_p (not_written_b, DECL_UID (real_var))\n+\t\t    : false;\n       gcc_assert (!unmodifiable_var_p (var));\n       \n       clobber_stats.clobbered_vars++;\n@@ -1789,7 +1810,7 @@ add_call_clobber_ops (tree stmt, tree callee)\n \t  tree call = get_call_expr_in (stmt);\n \t  if (call_expr_flags (call) & (ECF_CONST | ECF_PURE))\n \t    {\n-\t      add_stmt_operand (&var, s_ann, opf_use);\n+\t      add_virtual_operand (var, s_ann, opf_use, NULL, 0, -1, true);\n \t      clobber_stats.unescapable_clobbers_avoided++;\n \t      continue;\n \t    }\n@@ -1804,12 +1825,12 @@ add_call_clobber_ops (tree stmt, tree callee)\n \t{\n \t  clobber_stats.static_write_clobbers_avoided++;\n \t  if (!not_read)\n-\t    add_stmt_operand (&var, s_ann, opf_use);\n+\t    add_virtual_operand (var, s_ann, opf_use, NULL, 0, -1, true);\n \t  else\n \t    clobber_stats.static_read_clobbers_avoided++;\n \t}\n       else\n-\tadd_virtual_operand (var, s_ann, opf_def, NULL, 0, -1);\n+\tadd_virtual_operand (var, s_ann, opf_def, NULL, 0, -1, true);\n     }\n }\n \n@@ -1831,7 +1852,7 @@ add_call_read_ops (tree stmt, tree callee)\n   if (gimple_global_var (cfun))\n     {\n       tree var = gimple_global_var (cfun);\n-      add_stmt_operand (&var, s_ann, opf_use);\n+      add_virtual_operand (var, s_ann, opf_use, NULL, 0, -1, true);\n       return;\n     }\n   \n@@ -1861,7 +1882,7 @@ add_call_read_ops (tree stmt, tree callee)\n \t  continue;\n \t}\n             \n-      add_stmt_operand (&var, s_ann, opf_use | opf_implicit);\n+      add_virtual_operand (var, s_ann, opf_use, NULL, 0, -1, true);\n     }\n }\n "}, {"sha": "fc5bee8a9206320c2138b19be286709660f690c1", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7e772dceb2f238c2645ad4c695787fd69d381d/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6e7e772dceb2f238c2645ad4c695787fd69d381d", "patch": "@@ -2312,9 +2312,11 @@ could_have_pointers (tree t)\n {\n   tree type = TREE_TYPE (t);\n \n-  if (POINTER_TYPE_P (type) || AGGREGATE_TYPE_P (type)\n+  if (POINTER_TYPE_P (type)\n+      || AGGREGATE_TYPE_P (type)\n       || TREE_CODE (type) == COMPLEX_TYPE)\n     return true;\n+\n   return false;\n }\n \n@@ -2524,6 +2526,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t      tree pttype = TREE_TYPE (TREE_TYPE (t));\n \n \t      get_constraint_for (exp, results);\n+\n \t      /* Make sure we capture constraints to all elements\n \t\t of an array.  */\n \t      if ((handled_component_p (exp)\n@@ -3001,6 +3004,7 @@ do_structure_copy (tree lhsop, tree rhsop)\n     }\n }\n \n+\n /* Update related alias information kept in AI.  This is used when\n    building name tags, alias sets and deciding grouping heuristics.\n    STMT is the statement to process.  This function also updates\n@@ -3326,9 +3330,9 @@ find_func_aliases (tree origt)\n \t}\n     }\n   /* In IPA mode, we need to generate constraints to pass call\n-     arguments through their calls.   There are two case, either a\n-     modify_expr when we are returning a value, or just a plain\n-     call_expr when we are not.   */\n+     arguments through their calls.   There are two cases, either a\n+     GIMPLE_MODIFY_STMT when we are returning a value, or just a plain\n+     CALL_EXPR when we are not.   */\n   else if (in_ipa_mode\n \t   && ((TREE_CODE (t) == GIMPLE_MODIFY_STMT\n \t\t&& TREE_CODE (GIMPLE_STMT_OPERAND (t, 1)) == CALL_EXPR\n@@ -3399,6 +3403,7 @@ find_func_aliases (tree origt)\n \t    }\n \t  i++;\n \t}\n+\n       /* If we are returning a value, assign it to the result.  */\n       if (lhsop)\n \t{\n@@ -4099,8 +4104,8 @@ intra_create_variable_infos (void)\n   tree t;\n   struct constraint_expr lhs, rhs;\n \n-  /* For each incoming pointer argument arg, ARG = ANYTHING or a\n-     dummy variable if flag_argument_noalias > 2. */\n+  /* For each incoming pointer argument arg, create the constraint ARG\n+     = ANYTHING or a dummy variable if flag_argument_noalias is set.  */\n   for (t = DECL_ARGUMENTS (current_function_decl); t; t = TREE_CHAIN (t))\n     {\n       varinfo_t p;"}]}