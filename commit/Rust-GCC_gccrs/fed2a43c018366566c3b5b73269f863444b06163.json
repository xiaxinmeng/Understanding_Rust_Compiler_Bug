{"sha": "fed2a43c018366566c3b5b73269f863444b06163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkMmE0M2MwMTgzNjY1NjZjM2I1YjczMjY5Zjg2MzQ0NGIwNjE2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-15T21:42:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-15T21:42:46Z"}, "message": "omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set max_vf to 1.\n\n\t* omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set\n\tmax_vf to 1.\n\t* omp-expand.c (expand_omp_simd): For if (0) or simdlen (1) clear\n\tsafelen_int and set loop->dont_vectorize.\n\n\t* c-c++-common/gomp/simd8.c: New test.\n\nFrom-SVN: r271270", "tree": {"sha": "d2de403c2a4b545627c84b4ad510e1c7f9b64307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2de403c2a4b545627c84b4ad510e1c7f9b64307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed2a43c018366566c3b5b73269f863444b06163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed2a43c018366566c3b5b73269f863444b06163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed2a43c018366566c3b5b73269f863444b06163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed2a43c018366566c3b5b73269f863444b06163/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c42b72a7ddc52c65a0a6b3f9127224c8770ac6da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42b72a7ddc52c65a0a6b3f9127224c8770ac6da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42b72a7ddc52c65a0a6b3f9127224c8770ac6da"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "ddcd7e258cc57d3248b9ffaaba936b4aae18ecf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2a43c018366566c3b5b73269f863444b06163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2a43c018366566c3b5b73269f863444b06163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fed2a43c018366566c3b5b73269f863444b06163", "patch": "@@ -1,3 +1,10 @@\n+2019-05-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set\n+\tmax_vf to 1.\n+\t* omp-expand.c (expand_omp_simd): For if (0) or simdlen (1) clear\n+\tsafelen_int and set loop->dont_vectorize.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "74159734fc8074026b900830034c796cde617019", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=fed2a43c018366566c3b5b73269f863444b06163", "patch": "@@ -4664,10 +4664,15 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n   tree *counts = NULL;\n   int i;\n   int safelen_int = INT_MAX;\n+  bool dont_vectorize = false;\n   tree safelen = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n \t\t\t\t  OMP_CLAUSE_SAFELEN);\n   tree simduid = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n \t\t\t\t  OMP_CLAUSE__SIMDUID_);\n+  tree ifc = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n+\t\t\t      OMP_CLAUSE_IF);\n+  tree simdlen = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n+\t\t\t\t  OMP_CLAUSE_SIMDLEN);\n   tree n1, n2;\n \n   if (safelen)\n@@ -4681,6 +4686,12 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       if (safelen_int == 1)\n \tsafelen_int = 0;\n     }\n+  if ((ifc && integer_zerop (OMP_CLAUSE_IF_EXPR (ifc)))\n+      || (simdlen && integer_onep (OMP_CLAUSE_SIMDLEN_EXPR (simdlen))))\n+    {\n+      safelen_int = 0;\n+      dont_vectorize = true;\n+    }\n   type = TREE_TYPE (fd->loop.v);\n   entry_bb = region->entry;\n   cont_bb = region->cont;\n@@ -4965,6 +4976,8 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  loop->force_vectorize = true;\n \t  cfun->has_force_vectorize_loops = true;\n \t}\n+      else if (dont_vectorize)\n+\tloop->dont_vectorize = true;\n     }\n   else if (simduid)\n     cfun->has_simduid_loops = true;"}, {"sha": "3a3d09c3b346e58186a68519b1b12b3025261deb", "filename": "gcc/omp-low.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=fed2a43c018366566c3b5b73269f863444b06163", "patch": "@@ -3811,6 +3811,14 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t      || is_variable_sized (OMP_CLAUSE_DECL (c)))\n \t    sctx.max_vf = 1;\n \t  break;\n+\tcase OMP_CLAUSE_IF:\n+\t  if (integer_zerop (OMP_CLAUSE_IF_EXPR (c)))\n+\t    sctx.max_vf = 1;\n+\t  break;\n+        case OMP_CLAUSE_SIMDLEN:\n+\t  if (integer_onep (OMP_CLAUSE_SIMDLEN_EXPR (c)))\n+\t    sctx.max_vf = 1;\n+\t  break;\n \tdefault:\n \t  continue;\n \t}"}, {"sha": "709f8b73f327bd12aec1271ce291e6fb54b61c4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fed2a43c018366566c3b5b73269f863444b06163", "patch": "@@ -1,3 +1,7 @@\n+2019-05-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/simd8.c: New test.\n+\n 2019-05-15  Marek Polacek  <polacek@redhat.com>\n \n \tCWG 2096 - constraints on literal unions."}, {"sha": "11f7411c8d773a359abff78ef72a397660b87b00", "filename": "gcc/testsuite/c-c++-common/gomp/simd8.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2a43c018366566c3b5b73269f863444b06163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd8.c?ref=fed2a43c018366566c3b5b73269f863444b06163", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O3 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops in function\" 4 \"vect\" } } */\n+\n+int a[1024];\n+\n+void\n+foo (void)\n+{\n+  #pragma omp simd if (0)\n+  for (int i = 0; i < 1024; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp simd if (0) safelen (256) simdlen (8)\n+  for (int i = 0; i < 512; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+baz (void)\n+{\n+  #pragma omp simd safelen (256) simdlen (1)\n+  for (int i = 0; i < 512; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+qux (void)\n+{\n+  #pragma omp simd simdlen (1) if (1)\n+  for (int i = 0; i < 512; ++i)\n+    a[i] = a[i] + 1;\n+}"}]}