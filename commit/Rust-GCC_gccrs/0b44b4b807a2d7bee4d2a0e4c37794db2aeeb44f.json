{"sha": "0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NGI0YjgwN2EyZDdiZWU0ZDJhMGU0YzM3Nzk0ZGIyYWVlYjQ0Zg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2018-11-30T16:12:13Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-11-30T16:12:13Z"}, "message": "Pre-emptively support P0646R1 for std container erasure.\n\n2018-11-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPre-emptively support P0646R1 for std container erasure.\n\t* include/bits/erase_if.h: Accumulate and return number of erased nodes.\n\t* include/std/forward_list (): Return number of erased items.\n\t* include/std/list (): Ditto.\n\t* include/std/map (): Ditto.\n\t* include/std/set (): Ditto.\n\t* include/std/string (): Ditto.\n\t* include/std/unordered_map (): Ditto.\n\t* include/std/unordered_set (): Ditto.\n\t* include/std/vector (): Ditto.\n\t* testsuite/21_strings/basic_string/erasure.cc: Test number of erasures.\n\t* testsuite/23_containers/deque/erasure.cc: Ditto.\n\t* testsuite/23_containers/forward_list/erasure.cc: Ditto.\n\t* testsuite/23_containers/list/erasure.cc: Ditto.\n\t* testsuite/23_containers/map/erasure.cc: Ditto.\n\t* testsuite/23_containers/set/erasure.cc: Ditto.\n\t* testsuite/23_containers/unordered_map/erasure.cc: Ditto.\n\t* testsuite/23_containers/unordered_set/erasure.cc: Ditto.\n\t* testsuite/23_containers/vector/erasure.cc: Ditto.\n\nFrom-SVN: r266672", "tree": {"sha": "f98bd7fce12f723b38ecedc523dcb4ccfc3763ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f98bd7fce12f723b38ecedc523dcb4ccfc3763ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef33afebf3351fe9f5032ebb735f4ec988e29f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef33afebf3351fe9f5032ebb735f4ec988e29f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef33afebf3351fe9f5032ebb735f4ec988e29f06"}], "stats": {"total": 174, "additions": 117, "deletions": 57}, "files": [{"sha": "7b75b10b5ce088ff20318a0a00c0ecea7564f46b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -1,3 +1,25 @@\n+2018-11-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPre-emptively support P0646R1 for std container erasure.\n+\t* include/bits/erase_if.h: Accumulate and return number of erased nodes.\n+\t* include/std/forward_list (): Return number of erased items.\n+\t* include/std/list (): Ditto.\n+\t* include/std/map (): Ditto.\n+\t* include/std/set (): Ditto.\n+\t* include/std/string (): Ditto.\n+\t* include/std/unordered_map (): Ditto.\n+\t* include/std/unordered_set (): Ditto.\n+\t* include/std/vector (): Ditto.\n+\t* testsuite/21_strings/basic_string/erasure.cc: Test number of erasures.\n+\t* testsuite/23_containers/deque/erasure.cc: Ditto.\n+\t* testsuite/23_containers/forward_list/erasure.cc: Ditto.\n+\t* testsuite/23_containers/list/erasure.cc: Ditto.\n+\t* testsuite/23_containers/map/erasure.cc: Ditto.\n+\t* testsuite/23_containers/set/erasure.cc: Ditto.\n+\t* testsuite/23_containers/unordered_map/erasure.cc: Ditto.\n+\t* testsuite/23_containers/unordered_set/erasure.cc: Ditto.\n+\t* testsuite/23_containers/vector/erasure.cc: Ditto.\n+\n 2018-11-29  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tOnly include bits/stl_algo.h for C++20."}, {"sha": "d0fd13a3049984b7773ebc70151299e23a7ea356", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -41,17 +41,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   namespace __detail\n   {\n     template<typename _Container, typename _Predicate>\n-      void\n+      typename _Container::size_type\n       __erase_nodes_if(_Container& __cont, _Predicate __pred)\n       {\n+\ttypename _Container::size_type __num = 0;\n \tfor (auto __iter = __cont.begin(), __last = __cont.end();\n \t     __iter != __last;)\n-\t{\n-\t  if (__pred(*__iter))\n-\t    __iter = __cont.erase(__iter);\n-\t  else\n-\t    ++__iter;\n-\t}\n+\t  {\n+\t    if (__pred(*__iter))\n+\t      {\n+\t\t__iter = __cont.erase(__iter);\n+\t\t++__num;\n+\t      }\n+\t    else\n+\t      ++__iter;\n+\t  }\n+\treturn __num;\n       }\n   } // namespace __detail\n "}, {"sha": "b094d88204834b0f8605d1acc70cb0d4fa2c5f8e", "filename": "libstdc++-v3/include/std/forward_list", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -66,16 +66,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n-    inline void \n+    inline typename forward_list<_Tp, _Alloc>::size_type \n     erase_if(forward_list<_Tp, _Alloc>& __cont, _Predicate __pred)\n-    { __cont.remove_if(__pred); }\n+    { return __cont.remove_if(__pred); }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n-    inline void\n+    inline typename forward_list<_Tp, _Alloc>::size_type\n     erase(forward_list<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n       using __elem_type = typename forward_list<_Tp, _Alloc>::value_type;\n-      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+      return erase_if(__cont,\n+\t\t      [&](__elem_type& __elem) { return __elem == __value; });\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "b2ced427642d5863672f57a39e205ccdbfc576c6", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -90,16 +90,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n-    inline void\n+    inline typename list<_Tp, _Alloc>::size_type\n     erase_if(list<_Tp, _Alloc>& __cont, _Predicate __pred)\n-    { __cont.remove_if(__pred); }\n+    { return __cont.remove_if(__pred); }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n-    inline void\n+    inline typename list<_Tp, _Alloc>::size_type\n     erase(list<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n       using __elem_type = typename list<_Tp, _Alloc>::value_type;\n-      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+      return erase_if(__cont,\n+\t\t      [&](__elem_type& __elem) { return __elem == __value; });\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "7b01fd19e6974ddf525b1b3ef1454e6946c43f6d", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -97,15 +97,15 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename map<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename multimap<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "2423b2f451355637bf7cb30ee23bea1050ca8785", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -93,15 +93,15 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename set<_Key, _Compare, _Alloc>::size_type\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename multiset<_Key, _Compare, _Alloc>::size_type\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "e1f0304f8b6cb190bcb730a03ac362db3219b973", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -81,19 +81,23 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n     {\n+      const auto __osz = __cont.size();\n       __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n \t\t   __cont.end());\n+      return __osz - __cont.size();\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n-    inline void\n+    inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n     {\n+      const auto __osz = __cont.size();\n       __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n \t\t   __cont.end());\n+      return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "bb1e1b3e1012d9c97f7944e70ca6234f3bc3b35d", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -84,17 +84,18 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n-    inline void\n+    inline typename unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n-    inline void\n+    inline typename unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>::\n+\t\t    size_type\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { __detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "e7441a7ba7959b3263675c2c4edb0a7a199181c4", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -84,17 +84,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename unordered_set<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n-    inline void\n+    inline typename unordered_multiset<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "167d33637ffbb6c970ae1b9a46406c3f8632e841", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -98,19 +98,23 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n-    inline void\n+    inline typename vector<_Tp, _Alloc>::size_type\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n+      const auto __osz = __cont.size();\n       __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n \t\t   __cont.end());\n+      return __osz - __cont.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n-    inline void\n+    inline typename vector<_Tp, _Alloc>::size_type\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n+      const auto __osz = __cont.size();\n       __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n \t\t   __cont.end());\n+      return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "2e928279e8930fe25226b57cc4a1d92ac081c95b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/erasure.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -30,18 +30,21 @@ test01()\n   };\n \n   std::string str(\"cute fluffy kittens\");\n-  std::erase_if(str, is_vowel);\n+  auto num = std::erase_if(str, is_vowel);\n   VERIFY( str == \"ct flffy kttns\" );\n+  VERIFY( num == 5 );\n }\n \n void\n test02()\n {\n   std::string str = \"cute fluffy kittens\";\n-  std::erase(str, 'f');\n+  auto num = std::erase(str, 'f');\n   VERIFY( str == \"cute luy kittens\" );\n-  std::erase(str, 'z');\n+  VERIFY( num == 3 );\n+  num = std::erase(str, 'z');\n   VERIFY( str == \"cute luy kittens\" );\n+  VERIFY( num == 0 );\n }\n \n int"}, {"sha": "3c28a3d70ddb4241ac1e00f6358ef72045a3b29a", "filename": "libstdc++-v3/testsuite/23_containers/deque/erasure.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -27,20 +27,23 @@ test01()\n   auto is_odd = [](const int i) { return i % 2 != 0; };\n \n   std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase_if(d, is_odd);\n+  auto num = std::erase_if(d, is_odd);\n   std::deque<int> t{ 10, 12, 14, 18 };\n   VERIFY( d == t );\n+  VERIFY( num == 4 );\n }\n \n void\n test02()\n {\n   std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase(d, 14);\n+  auto num = std::erase(d, 14);\n   std::deque<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n   VERIFY( d == t );\n-  std::erase(d, 20);\n+  VERIFY( num == 1 );\n+  num = std::erase(d, 20);\n   VERIFY( d == t );\n+  VERIFY( num == 0 );\n }\n \n int"}, {"sha": "e137716a81832ceeb868efee428181835760aa7d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/erasure.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -27,20 +27,23 @@ test01()\n   auto is_odd = [](const int i) { return i % 2 != 0; };\n \n   std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase_if(fl, is_odd);\n+  auto num = std::erase_if(fl, is_odd);\n   std::forward_list<int> t{ 10, 12, 14, 18 };\n   VERIFY( fl == t );\n+  VERIFY( num == 4 );\n }\n \n void\n test02()\n {\n   std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase(fl, 14);\n+  auto num = std::erase(fl, 14);\n   std::forward_list<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n   VERIFY( fl == t );\n-  std::erase(fl, 20);\n+  VERIFY( num == 1 );\n+  num = std::erase(fl, 20);\n   VERIFY( fl == t );\n+  VERIFY( num == 0 );\n }\n \n int"}, {"sha": "bae54421cd4faac8ba9152d683f89d477384feae", "filename": "libstdc++-v3/testsuite/23_containers/list/erasure.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -36,11 +36,13 @@ void\n test02()\n {\n   std::list<int> l{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n-  std::erase(l, 0);\n+  auto num = std::erase(l, 0);\n   std::list<int> t{ 11, 22, 33, 44 };\n   VERIFY( l == t );\n-  std::erase(l, 55);\n+  VERIFY( num == 6 );\n+  num = std::erase(l, 55);\n   VERIFY( l == t );\n+  VERIFY( num == 0 );\n }\n \n int"}, {"sha": "09d40b5cd3522c55051a43fe036d4873a742642f", "filename": "libstdc++-v3/testsuite/23_containers/map/erasure.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -33,10 +33,11 @@ test01()\n \t\t\t\t{ 12, \"C\" }, { 14, \"D\" },\n \t\t\t\t{ 15, \"E\" }, { 17, \"F\" },\n \t\t\t\t{ 18, \"G\" }, { 19, \"H\" } };\n-  std::erase_if(m, is_odd_pair);\n+  auto num = std::erase_if(m, is_odd_pair);\n   std::map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n \t\t\t\t{ 14, \"D\" }, { 18, \"G\" } };\n   VERIFY( m == t );\n+  VERIFY( num == 4 );\n }\n \n void\n@@ -46,10 +47,11 @@ test02()\n \t\t\t\t      { 22, \"U\" }, { 22, \"V\" },\n \t\t\t\t      { 23, \"W\" }, { 23, \"X\" },\n \t\t\t\t      { 24, \"Y\" }, { 25, \"Z\" } };\n-  std::erase_if(mm, is_odd_pair);\n+  auto num = std::erase_if(mm, is_odd_pair);\n   std::multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n \t\t\t\t     { 22, \"V\" }, { 24, \"Y\" } };\n   VERIFY( mm == t );\n+  VERIFY( num == 4 );\n }\n \n int"}, {"sha": "f168ad3df84ba866f3a8dff9802186ce2d679ad7", "filename": "libstdc++-v3/testsuite/23_containers/set/erasure.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -27,18 +27,20 @@ void\n test01()\n {\n   std::set<int> s{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase_if(s, is_odd);\n+  auto num = std::erase_if(s, is_odd);\n   std::set<int> t{ 10, 12, 14, 18 };\n   VERIFY( s == t );\n+  VERIFY( num == 4 );\n }\n \n void\n test02()\n {\n   std::multiset<int> ms{ 20, 21, 22, 22, 23, 23, 24, 25 };\n-  std::erase_if(ms, is_odd);\n+  auto num = std::erase_if(ms, is_odd);\n   std::multiset<int> t{ 20, 22, 22, 24 };\n   VERIFY( ms == t );\n+  VERIFY( num == 4 );\n }\n \n int"}, {"sha": "d8eb3acb98388946cf670d5272fcc013dced0ca3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erasure.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -33,10 +33,11 @@ test01()\n \t\t\t\t\t   { 12, \"C\" }, { 14, \"D\" },\n \t\t\t\t\t   { 15, \"E\" }, { 17, \"F\" },\n \t\t\t\t\t   { 18, \"G\" }, { 19, \"H\" } };\n-  std::erase_if(um, is_odd_pair);\n+  auto num = std::erase_if(um, is_odd_pair);\n   std::unordered_map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n \t\t\t\t\t  { 14, \"D\" }, { 18, \"G\" } };\n   VERIFY( um == t );\n+  VERIFY( num == 4 );\n }\n \n void\n@@ -46,10 +47,11 @@ test02()\n \t\t\t\t\t\t { 22, \"U\" }, { 22, \"V\" },\n \t\t\t\t\t\t { 23, \"W\" }, { 23, \"X\" },\n \t\t\t\t\t\t { 24, \"Y\" }, { 25, \"Z\" } };\n-  std::erase_if(umm, is_odd_pair);\n+  auto num = std::erase_if(umm, is_odd_pair);\n   std::unordered_multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n \t\t\t\t\t       { 22, \"V\" }, { 24, \"Y\" } };\n   VERIFY( umm == t );\n+  VERIFY( num == 4 );\n }\n \n int"}, {"sha": "f1c9632ad598ebf9079403d4d1d7d6fcd87ec4ed", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erasure.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -27,9 +27,10 @@ test01()\n   auto is_odd = [](const int i) { return i % 2 != 0; };\n \n   std::unordered_set<int> us{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase_if(us, is_odd);\n+  auto num = std::erase_if(us, is_odd);\n   std::unordered_set<int> t{ 10, 12, 14, 18 };\n   VERIFY( us == t );\n+  VERIFY( num == 4 );\n }\n \n void\n@@ -38,9 +39,10 @@ test02()\n   auto is_odd = [](const int i) { return i % 2 != 0; };\n \n   std::unordered_multiset<int> ums{ 20, 21, 22, 22, 23, 23, 24, 25 };\n-  std::erase_if(ums, is_odd);\n+  auto num = std::erase_if(ums, is_odd);\n   std::unordered_multiset<int> t{ 20, 22, 22, 24 };\n   VERIFY( ums == t );\n+  VERIFY( num == 4 );\n }\n \n int"}, {"sha": "8934ee5a3a11868964ab35a2cb20c54c8df672ec", "filename": "libstdc++-v3/testsuite/23_containers/vector/erasure.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ferasure.cc?ref=0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f", "patch": "@@ -27,20 +27,23 @@ test01()\n   auto is_odd = [](const int i) { return i % 2 != 0; };\n \n   std::vector<int> v{ 10, 11, 12, 14, 15, 17, 18, 19 };\n-  std::erase_if(v, is_odd);\n+  auto num = std::erase_if(v, is_odd);\n   std::vector<int> t{ 10, 12, 14, 18 };\n   VERIFY( v == t );\n+  VERIFY( num == 4 );\n }\n \n void\n test02()\n {\n   std::vector<int> v{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n-  std::erase(v, 0);\n+  auto num = std::erase(v, 0);\n   std::vector<int> t{ 11, 22, 33, 44 };\n   VERIFY( v == t );\n-  std::erase(v, 55);\n+  VERIFY( num == 6 );\n+  num = std::erase(v, 55);\n   VERIFY( v == t );\n+  VERIFY( num == 0 );\n }\n \n int"}]}