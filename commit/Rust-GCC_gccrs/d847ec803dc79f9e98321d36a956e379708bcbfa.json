{"sha": "d847ec803dc79f9e98321d36a956e379708bcbfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0N2VjODAzZGM3OWY5ZTk4MzIxZDM2YTk1NmUzNzk3MDhiY2JmYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-21T23:40:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-21T23:40:55Z"}, "message": "9780-2.cc: Avoid -Wall warnings.\n\n2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/22_locale/num_put/put/char/9780-2.cc: Avoid -Wall warnings.\n\t* testsuite/29_atomics/atomic/cons/49445.cc: Likewise.\n\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc:\n\t* Likewise.\n\t* testsuite/23_containers/unordered_map/observers.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/2.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/insert/53115.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/observers.cc: Likewise.\n\t* testsuite/23_containers/vector/debug/alloc_prop.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/observers.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/2.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/insert/53115.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/insert/multiset_range.cc:\n\t* Likewise.\n\t* testsuite/23_containers/unordered_multiset/observers.cc: Likewise.\n\nFrom-SVN: r187751", "tree": {"sha": "5298fa886dca3337e1527526a7376d7b2c24e5a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5298fa886dca3337e1527526a7376d7b2c24e5a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d847ec803dc79f9e98321d36a956e379708bcbfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d847ec803dc79f9e98321d36a956e379708bcbfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d847ec803dc79f9e98321d36a956e379708bcbfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d847ec803dc79f9e98321d36a956e379708bcbfa/comments", "author": null, "committer": null, "parents": [{"sha": "c5e0766b42ec592e5cb0de03af01eb237f25a1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e0766b42ec592e5cb0de03af01eb237f25a1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e0766b42ec592e5cb0de03af01eb237f25a1ab"}], "stats": {"total": 267, "additions": 144, "deletions": 123}, "files": [{"sha": "fd5b2464fad8681b42ae5820a0133ef645092c63", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -1,3 +1,25 @@\n+2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/22_locale/num_put/put/char/9780-2.cc: Avoid -Wall warnings.\n+\t* testsuite/29_atomics/atomic/cons/49445.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc:\n+\t* Likewise.\n+\t* testsuite/23_containers/unordered_map/observers.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/2.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/insert/53115.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/observers.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/alloc_prop.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/observers.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/2.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/insert/53115.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/insert/multiset_range.cc:\n+\t* Likewise.\n+\t* testsuite/23_containers/unordered_multiset/observers.cc: Likewise.\n+\n 2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53361"}, {"sha": "817a3a81b2adfff43129c7c0c28cf0fb16dc647b", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/9780-2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F9780-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F9780-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F9780-2.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-namedlocale \"de_DE\" }\n // { dg-require-namedlocale \"es_ES\" }\n \n-// Copyright (C) 2004, 2005, 2009, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ void test01()\n \n   locale l2 = locale(\"C\");\n   const numpunct<char>& npunct2 = use_facet<numpunct<char> >(l2);\n-  char c = npunct2.thousands_sep();\n+  char c __attribute__((unused)) = npunct2.thousands_sep();\n   string s = npunct2.grouping();\n \n   ostringstream oss;\n@@ -53,7 +53,7 @@ void test02()\n \n   locale l2 = locale(\"es_ES\");\n   const numpunct<char>& npunct3 = use_facet<numpunct<char> >(l2);\n-  char c = npunct3.thousands_sep();\n+  char c __attribute__((unused)) = npunct3.thousands_sep();\n   string s = npunct3.grouping();\n \n   ostringstream oss;\n@@ -72,7 +72,7 @@ void test02()\n int main()\n {\n   // Sanity check.\n-  char c = npunct.thousands_sep();\n+  char c __attribute__((unused)) = npunct.thousands_sep();\n   string s = npunct.grouping();\n \n   test01();"}, {"sha": "602acb94488630ffc7325c4d8efa5621ea57e09e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/1.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-02-10  Paolo Carlini  <paolo.carlini@oracle.com> \n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,19 +58,19 @@ void test01()\n   m1.insert(value_type(\"one line behind\", 10));\n   VERIFY( m1.size() == 10 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n \n   VERIFY( m1.erase(\"eeilo\") == 1 );\n   VERIFY( m1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   iterator it1 = m1.find(\"eeilo\");\n   VERIFY( it1 == m1.end() );\n \n   VERIFY( m1.erase(\"tillsammans\") == 1 );\n   VERIFY( m1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   iterator it2 = m1.find(\"tillsammans\");\n   VERIFY( it2 == m1.end() );\n \n@@ -80,22 +80,22 @@ void test01()\n   VERIFY( m1.erase(it3->first) == 1 );\n   VERIFY( m1.size() == 7 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   it3 = m1.find(\"belonging (no longer mix)\");\n   VERIFY( it3 == m1.end() );\n \n   VERIFY( !m1.erase(\"abra\") );\n   VERIFY( m1.size() == 7 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n \n   VERIFY( !m1.erase(\"eeilo\") );\n   VERIFY( m1.size() == 7 );\n \n   VERIFY( m1.erase(\"because to why\") == 1 );\n   VERIFY( m1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   iterator it4 = m1.find(\"because to why\");\n   VERIFY( it4 == m1.end() );\n \n@@ -112,14 +112,14 @@ void test01()\n   VERIFY( m1.erase(it5->first) == 1 );\n   VERIFY( m1.size() == 5 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   it5 = m1.find(\"umbra/penumbra\");\n   VERIFY( it5 == m1.end() );\n \n   VERIFY( m1.erase(it6->first) == 1 );\n   VERIFY( m1.size() == 4 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   it6 = m1.find(\"one line behind\");\n   VERIFY( it6 == m1.end() );\n \n@@ -132,7 +132,7 @@ void test01()\n   VERIFY( m1.erase(it8->first) == 1 );\n   VERIFY( m1.size() == 3 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   VERIFY( ++it7 == it9 );\n \n   iterator it10 = it9;\n@@ -141,20 +141,20 @@ void test01()\n \n   VERIFY( m1.erase(it9->first) == 1 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   VERIFY( m1.size() == 2 );\n   VERIFY( ++it10 == m1.end() );\n \n   VERIFY( m1.erase(m1.begin()) != m1.end() );  \n   VERIFY( m1.size() == 1 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   VERIFY( m1.begin() == it11 );\n \n   VERIFY( m1.erase(m1.begin()->first) == 1 );  \n   VERIFY( m1.size() == 0 );\n   VERIFY( get_nb_bucket_elems(m1) == m1.size() );\n-  VERIFY( distance(m1.begin(), m1.end()) == m1.size() );\n+  VERIFY( distance(m1.begin(), m1.end()) - m1.size() == 0 );\n   VERIFY( m1.begin() == m1.end() );\n }\n "}, {"sha": "7a467f67aa8b195146227da4192b4778f66163a4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/observers.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fobservers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fobservers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fobservers.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -25,6 +25,6 @@ test01()\n {\n   std::unordered_map<int, int> um;\n \n-  auto ke = um.key_eq();\n-  auto h = um.hash_function();\n+  auto ke __attribute__((unused)) = um.key_eq();\n+  auto h __attribute__((unused)) = um.hash_function();\n }"}, {"sha": "5935c6d67440dc249c3c8bb7d6c932421b416438", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/1.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-02-10  Paolo Carlini  <paolo.carlini@oracle.com> \n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,19 +59,19 @@ void test01()\n   mm1.insert(value_type(\"because to why\", 11));\n   VERIFY( mm1.size() == 11 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   VERIFY( mm1.erase(\"eeilo\") == 1 );\n   VERIFY( mm1.size() == 10 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   iterator it1 = mm1.find(\"eeilo\");\n   VERIFY( it1 == mm1.end() );\n \n   VERIFY( mm1.erase(\"tillsammans\") == 1 );\n   VERIFY( mm1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   iterator it2 = mm1.find(\"tillsammans\");\n   VERIFY( it2 == mm1.end() );\n \n@@ -81,22 +81,22 @@ void test01()\n   VERIFY( mm1.erase(it3->first) == 1 );\n   VERIFY( mm1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   it3 = mm1.find(\"belonging (no longer mix)\");\n   VERIFY( it3 == mm1.end() );\n \n   VERIFY( !mm1.erase(\"abra\") );\n   VERIFY( mm1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   VERIFY( !mm1.erase(\"eeilo\") );\n   VERIFY( mm1.size() == 8 );\n \n   VERIFY( mm1.erase(\"because to why\") == 2 );\n   VERIFY( mm1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   iterator it4 = mm1.find(\"because to why\");\n   VERIFY( it4 == mm1.end() );\n \n@@ -113,14 +113,14 @@ void test01()\n   VERIFY( mm1.erase(it5->first) == 1 );\n   VERIFY( mm1.size() == 5 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   it5 = mm1.find(\"umbra/penumbra\");\n   VERIFY( it5 == mm1.end() );\n \n   VERIFY( mm1.erase(it6->first) == 1 );\n   VERIFY( mm1.size() == 4 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   it6 = mm1.find(\"one line behind\");\n   VERIFY( it6 == mm1.end() );\n \n@@ -133,7 +133,7 @@ void test01()\n   VERIFY( mm1.erase(it8->first) == 1 );\n   VERIFY( mm1.size() == 3 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   VERIFY( ++it7 == it9 );\n \n   iterator it10 = it9;\n@@ -142,20 +142,20 @@ void test01()\n \n   VERIFY( mm1.erase(it9->first) == 1 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   VERIFY( mm1.size() == 2 );\n   VERIFY( ++it10 == mm1.end() );\n \n   VERIFY( mm1.erase(mm1.begin()) != mm1.end() );  \n   VERIFY( mm1.size() == 1 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   VERIFY( mm1.begin() == it11 );\n \n   VERIFY( mm1.erase(mm1.begin()->first) == 1 );  \n   VERIFY( mm1.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n   VERIFY( mm1.begin() == mm1.end() );\n }\n "}, {"sha": "15db3f4787a112967a949286623948110fceeb99", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/2.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F2.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,29 +58,29 @@ void test01()\n   mm1.insert(value_type(\"bar\", 25));\n   VERIFY( mm1.size() == 12 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   VERIFY( mm1.erase(mm1.begin()) != mm1.end() );\n   VERIFY( mm1.size() == 11 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   auto it = mm1.begin();\n   advance(it, 2);\n   VERIFY( mm1.erase(mm1.begin(), it) != mm1.end() );\n   VERIFY( mm1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   VERIFY( mm1.erase(mm1.begin()->first) == 3 );\n   VERIFY( mm1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n \n   VERIFY( mm1.erase(mm1.begin(), mm1.end()) == mm1.end() );\n   VERIFY( mm1.empty() );\n   VERIFY( get_nb_bucket_elems(mm1) == mm1.size() );\n-  VERIFY( distance(mm1.begin(), mm1.end()) == mm1.size() );\n+  VERIFY( distance(mm1.begin(), mm1.end()) - mm1.size() == 0 );\n }\n \n int main()"}, {"sha": "82f93c3088782bba60eae840c20c2beb2a1e3aa0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/insert/53115.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F53115.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F53115.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F53115.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -40,57 +40,57 @@ void test01()\n   std::unordered_multimap<int, int> umm;\n   umm.insert(make_pair(10, 1));\n   VERIFY( umm.size() == 1 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(10, 2)); \n   VERIFY( umm.size() == 2 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(10, 3));\n   VERIFY( umm.size() == 3 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(10, 4));\n   VERIFY( umm.size() == 4 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(10, 5));\n   VERIFY( umm.size() == 5 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(24, 6));\n   VERIFY( umm.size() == 6 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(25, 7));\n   VERIFY( umm.size() == 7 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(2, 8));\n   VERIFY( umm.size() == 8 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(2, 9));\n   VERIFY( umm.size() == 9 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(1, 10));\n   VERIFY( umm.size() == 10 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n \n   umm.insert(make_pair(10, 11));\n   VERIFY( umm.size() == 11 );\n-  VERIFY( std::distance(umm.begin(), umm.end()) == umm.size() );\n+  VERIFY( distance(umm.begin(), umm.end()) - umm.size() == 0 );\n   VERIFY( get_nb_bucket_elems(umm) == umm.size() );\n }\n "}, {"sha": "7b675d71f1b83934feebc6404ef60220abb9ba99", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/observers.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fobservers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fobservers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fobservers.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -25,6 +25,6 @@ test01()\n {\n   std::unordered_multimap<int, int> um;\n \n-  auto ke = um.key_eq();\n-  auto h = um.hash_function();\n+  auto ke __attribute__((unused)) = um.key_eq();\n+  auto h __attribute__((unused)) = um.hash_function();\n }"}, {"sha": "59d58f9c738d6164b633fec99fe96484db15fcfd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/1.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-02-10  Paolo Carlini  <paolo.carlini@oracle.com> \n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,19 +58,19 @@ void test01()\n   ms1.insert(\"because to why\");\n   VERIFY( ms1.size() == 11 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   VERIFY( ms1.erase(\"eeilo\") == 1 );\n   VERIFY( ms1.size() == 10 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   iterator it1 = ms1.find(\"eeilo\");\n   VERIFY( it1 == ms1.end() );\n \n   VERIFY( ms1.erase(\"tillsammans\") == 1 );\n   VERIFY( ms1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   iterator it2 = ms1.find(\"tillsammans\");\n   VERIFY( it2 == ms1.end() );\n \n@@ -80,22 +80,22 @@ void test01()\n   VERIFY( ms1.erase(*it3) == 1 );\n   VERIFY( ms1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   it3 = ms1.find(\"belonging (no longer mix)\");\n   VERIFY( it3 == ms1.end() );\n \n   VERIFY( !ms1.erase(\"abra\") );\n   VERIFY( ms1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   VERIFY( !ms1.erase(\"eeilo\") );\n   VERIFY( ms1.size() == 8 );\n \n   VERIFY( ms1.erase(\"because to why\") == 2 );\n   VERIFY( ms1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   iterator it4 = ms1.find(\"because to why\");\n   VERIFY( it4 == ms1.end() );\n \n@@ -112,14 +112,14 @@ void test01()\n   VERIFY( ms1.erase(*it5) == 1 );\n   VERIFY( ms1.size() == 5 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   it5 = ms1.find(\"umbra/penumbra\");\n   VERIFY( it5 == ms1.end() );\n \n   VERIFY( ms1.erase(*it6) == 1 );\n   VERIFY( ms1.size() == 4 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   it6 = ms1.find(\"one line behind\");\n   VERIFY( it6 == ms1.end() );\n \n@@ -132,7 +132,7 @@ void test01()\n   VERIFY( ms1.erase(*it8) == 1 );\n   VERIFY( ms1.size() == 3 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   VERIFY( ++it7 == it9 );\n \n   iterator it10 = it9;\n@@ -141,20 +141,20 @@ void test01()\n \n   VERIFY( ms1.erase(*it9) == 1 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   VERIFY( ms1.size() == 2 );\n   VERIFY( ++it10 == ms1.end() );\n \n   VERIFY( ms1.erase(ms1.begin()) != ms1.end() );  \n   VERIFY( ms1.size() == 1 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   VERIFY( ms1.begin() == it11 );\n \n   VERIFY( ms1.erase(*ms1.begin()) == 1 );  \n   VERIFY( ms1.size() == 0 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n   VERIFY( ms1.begin() == ms1.end() );\n }\n "}, {"sha": "1bfa70aa3f00d3d3fc7f199da35ae1035329b71c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/2.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F2.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,29 +57,29 @@ void test01()\n   ms1.insert(\"bar\");\n   VERIFY( ms1.size() == 12 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   VERIFY( ms1.erase(ms1.begin()) != ms1.end() );\n   VERIFY( ms1.size() == 11 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   auto it = ms1.begin();\n   advance(it, 2);\n   VERIFY( ms1.erase(ms1.begin(), it) != ms1.end() );\n   VERIFY( ms1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   VERIFY( ms1.erase(*(ms1.begin())) == 3 );\n   VERIFY( ms1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n \n   VERIFY( ms1.erase(ms1.begin(), ms1.end()) == ms1.end() );\n   VERIFY( ms1.empty() );\n   VERIFY( get_nb_bucket_elems(ms1) == ms1.size() );\n-  VERIFY( distance(ms1.begin(), ms1.end()) == ms1.size() );\n+  VERIFY( distance(ms1.begin(), ms1.end()) - ms1.size() == 0 );\n }\n \n int main()"}, {"sha": "f54ce33354ef1a5f7e065c1fe65025c59564a1f9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/insert/53115.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F53115.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F53115.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F53115.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -40,57 +40,57 @@ void test01()\n   std::unordered_multiset<int> mms;\n   mms.insert(10);\n   VERIFY( mms.size() == 1 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(10); \n   VERIFY( mms.size() == 2 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(10);\n   VERIFY( mms.size() == 3 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(10);\n   VERIFY( mms.size() == 4 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(10);\n   VERIFY( mms.size() == 5 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(24);\n   VERIFY( mms.size() == 6 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(25);\n   VERIFY( mms.size() == 7 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(2);\n   VERIFY( mms.size() == 8 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(2);\n   VERIFY( mms.size() == 9 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(1);\n   VERIFY( mms.size() == 10 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n \n   mms.insert(10);\n   VERIFY( mms.size() == 11 );\n-  VERIFY( std::distance(mms.begin(), mms.end()) == mms.size() );\n+  VERIFY( distance(mms.begin(), mms.end()) - mms.size() == 0 );\n   VERIFY( get_nb_bucket_elems(mms) == mms.size() );\n }\n "}, {"sha": "f20475826b3e1931894a98dd2e30531319bea612", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/insert/multiset_range.cc", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2Fmultiset_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2Fmultiset_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2Fmultiset_range.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,16 +50,17 @@ void test01()\n   const std::string A[N] = { \"red\", \"green\", \"blue\", \"violet\", \"cyan\",\n \t\t\t     \"magenta\", \"yellow\", \"orange\", \"pink\", \"gray\" };\n \n-  s.insert(A+0, A+N);\n+  s.insert(A + 0, A + N);\n   VERIFY( s.size() == static_cast<unsigned int>(N) );\n-  VERIFY( std::distance(s.begin(), s.end()) == N );\n-  VERIFY( get_nb_bucket_elems(s) == N );\n+  VERIFY( std::distance(s.begin(), s.end()) - N == 0 );\n+  VERIFY( get_nb_bucket_elems(s) - N == 0 );\n \n-  for (int i = 0; i < N; ++i) {\n-    std::string str = A[i];\n-    Set::iterator it = std::find(s.begin(), s.end(), str);\n-    VERIFY(it != s.end());\n-  }\n+  for (int i = 0; i < N; ++i)\n+    {\n+      std::string str = A[i];\n+      Set::iterator it = std::find(s.begin(), s.end(), str);\n+      VERIFY(it != s.end());\n+    }\n }\n \n void test02()\n@@ -74,16 +75,16 @@ void test02()\n   const int A[N] = { 3, 7, 4, 8, 2, 4, 6, 7 };\n \n   s.insert(A+0, A+N);\n-  VERIFY(s.size() == static_cast<unsigned int>(N));\n-  VERIFY(std::distance(s.begin(), s.end()) == N);\n-  VERIFY( get_nb_bucket_elems(s) == N );\n+  VERIFY( s.size() == static_cast<unsigned int>(N) );\n+  VERIFY( std::distance(s.begin(), s.end()) - N == 0 );\n+  VERIFY( get_nb_bucket_elems(s) - N == 0 );\n \n-  VERIFY(std::count(s.begin(), s.end(), 2) == 1);\n-  VERIFY(std::count(s.begin(), s.end(), 3) == 1);\n-  VERIFY(std::count(s.begin(), s.end(), 4) == 2);\n-  VERIFY(std::count(s.begin(), s.end(), 6) == 1);\n-  VERIFY(std::count(s.begin(), s.end(), 7) == 2);\n-  VERIFY(std::count(s.begin(), s.end(), 8) == 1);\n+  VERIFY( std::count(s.begin(), s.end(), 2) == 1 );\n+  VERIFY( std::count(s.begin(), s.end(), 3) == 1 );\n+  VERIFY( std::count(s.begin(), s.end(), 4) == 2 );\n+  VERIFY( std::count(s.begin(), s.end(), 6) == 1 );\n+  VERIFY( std::count(s.begin(), s.end(), 7) == 2 );\n+  VERIFY( std::count(s.begin(), s.end(), 8) == 1 );\n }\n \n int main()"}, {"sha": "51b02c7f92d1f0773bf121920ad4503329787333", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/observers.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fobservers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fobservers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fobservers.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -25,6 +25,6 @@ test01()\n {\n   std::unordered_multiset<int> us;\n \n-  auto ke = us.key_eq();\n-  auto h = us.hash_function();\n+  auto ke __attribute__((unused)) = us.key_eq();\n+  auto h __attribute__((unused)) = us.hash_function();\n }"}, {"sha": "bca9cb7058862ac8efd684644a3ffab6c0c6ae1a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/1.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-02-10  Paolo Carlini  <paolo.carlini@oracle.com> \n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,19 +57,19 @@ void test01()\n   s1.insert(\"one line behind\");\n   VERIFY( s1.size() == 10 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n \n   VERIFY( s1.erase(\"eeilo\") == 1 );\n   VERIFY( s1.size() == 9 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   iterator it1 = s1.find(\"eeilo\");\n   VERIFY( it1 == s1.end() );\n \n   VERIFY( s1.erase(\"tillsammans\") == 1 );\n   VERIFY( s1.size() == 8 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   iterator it2 = s1.find(\"tillsammans\");\n   VERIFY( it2 == s1.end() );\n \n@@ -79,22 +79,22 @@ void test01()\n   VERIFY( s1.erase(*it3) == 1 );\n   VERIFY( s1.size() == 7 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   it3 = s1.find(\"belonging (no longer mix)\");\n   VERIFY( it3 == s1.end() );\n \n   VERIFY( !s1.erase(\"abra\") );\n   VERIFY( s1.size() == 7 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n \n   VERIFY( !s1.erase(\"eeilo\") );\n   VERIFY( s1.size() == 7 );\n \n   VERIFY( s1.erase(\"because to why\") == 1 );\n   VERIFY( s1.size() == 6 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   iterator it4 = s1.find(\"because to why\");\n   VERIFY( it4 == s1.end() );\n \n@@ -111,14 +111,14 @@ void test01()\n   VERIFY( s1.erase(*it5) == 1 );\n   VERIFY( s1.size() == 5 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   it5 = s1.find(\"umbra/penumbra\");\n   VERIFY( it5 == s1.end() );\n \n   VERIFY( s1.erase(*it6) == 1 );\n   VERIFY( s1.size() == 4 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   it6 = s1.find(\"one line behind\");\n   VERIFY( it6 == s1.end() );\n \n@@ -131,7 +131,7 @@ void test01()\n   VERIFY( s1.erase(*it8) == 1 );\n   VERIFY( s1.size() == 3 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   VERIFY( ++it7 == it9 );\n \n   iterator it10 = it9;\n@@ -140,20 +140,20 @@ void test01()\n \n   VERIFY( s1.erase(*it9) == 1 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   VERIFY( s1.size() == 2 );\n   VERIFY( ++it10 == s1.end() );\n \n   VERIFY( s1.erase(s1.begin()) != s1.end() );  \n   VERIFY( s1.size() == 1 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   VERIFY( s1.begin() == it11 );\n \n   VERIFY( s1.erase(*s1.begin()) == 1 );  \n   VERIFY( s1.size() == 0 );\n   VERIFY( get_nb_bucket_elems(s1) == s1.size() );\n-  VERIFY( distance(s1.begin(), s1.end()) == s1.size() );\n+  VERIFY( distance(s1.begin(), s1.end()) - s1.size() == 0 );\n   VERIFY( s1.begin() == s1.end() );\n }\n "}, {"sha": "4e2264e7f82db246af5c41771a7a6073c89f61c0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/observers.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fobservers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fobservers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fobservers.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -25,6 +25,6 @@ test01()\n {\n   std::unordered_set<int> us;\n \n-  auto ke = us.key_eq();\n-  auto h = us.hash_function();\n+  auto ke __attribute__((unused)) = us.key_eq();\n+  auto h __attribute__((unused)) = us.hash_function();\n }"}, {"sha": "c2fa659e2e2445800de3f3d6b2839d25f2374ba5", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/alloc_prop.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Falloc_prop.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -67,8 +67,8 @@ struct X\n   ~X() { }\n   X(const X&) { }\n   X(X&&) { }\n-  X& operator=(const X&) { }\n-  X& operator=(X&&) { }\n+  X& operator=(const X&) { return *this; }\n+  X& operator=(X&&) { return *this; }\n };\n \n int main()"}, {"sha": "f44575a5e30e32baee3eba06c70a56d1c417bc31", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/49445.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2F49445.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2F49445.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2F49445.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -33,10 +33,10 @@ enum class tacos : int\n int main()\n {\n   std::atomic<float> af(0.0f);\n-  float non_af = af;\n+  float non_af __attribute__((unused)) = af;\n   \n   std::atomic<tacos> ae(tacos::sabor);\n-  tacos non_ae = ae;\n+  tacos non_ae __attribute__((unused)) = ae;\n \n   return 0;\n }"}, {"sha": "cf2a65a5548c113c70c83416a1fddbfb61a2e99b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/pointer_partial_void.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d847ec803dc79f9e98321d36a956e379708bcbfa/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc?ref=d847ec803dc79f9e98321d36a956e379708bcbfa", "patch": "@@ -26,16 +26,14 @@\n // atomic<void*> vs. explicitly specialized w/o operators, like atomic_bool?\n int main(void)\n {\n-  // bool test __attribute__((unused)) = true;\n-\n   using namespace std;\n \n   typedef int \tvalue_type;\n   const size_t n = 2;\n   value_type value = 42;\n   value_type* p = &value;\n   void* vp = p;\n-  ptrdiff_t dist(0);\n+  ptrdiff_t __attribute__((unused)) dist(0);\n \n   atomic<void*> a(vp);\n "}]}