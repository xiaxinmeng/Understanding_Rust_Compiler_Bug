{"sha": "228722248f2f6a9e32d8f761e6579c2f56cdec4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4NzIyMjQ4ZjJmNmE5ZTMyZDhmNzYxZTY1NzljMmY1NmNkZWM0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-28T13:27:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-28T13:27:16Z"}, "message": "[multiple changes]\n\n2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Is_Visible_Component): Component is visible\n\tin a derived type if inherited through an ancestor that has a\n\tpartial view of the original type holding the component, if the\n\tfull view of that original type is in scope.\n\t* sem_util.ads (Get_Body_From_Stub): Works for all kinds of stubs.\n\n2015-05-28  Bob Duff  <duff@adacore.com>\n\n\t* sem_util.adb (Requires_Transient_Scope): For definite untagged\n\tsubtypes, we should never have to use the secondary stack. This moves\n\ttoward that goal. But there are still cases that don't work.\n\tHere, we move the check for Is_Definite first, but add a\n\tspecial-purpose check for Has_Discrim_Dep_Array.\n\nFrom-SVN: r223817", "tree": {"sha": "4e9f0edd7171abe57c80eacf5fd7cb82c1c70a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9f0edd7171abe57c80eacf5fd7cb82c1c70a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/228722248f2f6a9e32d8f761e6579c2f56cdec4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228722248f2f6a9e32d8f761e6579c2f56cdec4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228722248f2f6a9e32d8f761e6579c2f56cdec4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228722248f2f6a9e32d8f761e6579c2f56cdec4f/comments", "author": null, "committer": null, "parents": [{"sha": "e65757f3598cd955c6880b2809fe5e8930bca208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65757f3598cd955c6880b2809fe5e8930bca208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65757f3598cd955c6880b2809fe5e8930bca208"}], "stats": {"total": 118, "additions": 97, "deletions": 21}, "files": [{"sha": "5fc0dd342be6d1b3d071cfa56aaada69b20da270", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=228722248f2f6a9e32d8f761e6579c2f56cdec4f", "patch": "@@ -1,3 +1,19 @@\n+2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Visible_Component): Component is visible\n+\tin a derived type if inherited through an ancestor that has a\n+\tpartial view of the original type holding the component, if the\n+\tfull view of that original type is in scope.\n+\t* sem_util.ads (Get_Body_From_Stub): Works for all kinds of stubs.\n+\n+2015-05-28  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.adb (Requires_Transient_Scope): For definite untagged\n+\tsubtypes, we should never have to use the secondary stack. This moves\n+\ttoward that goal. But there are still cases that don't work.\n+\tHere, we move the check for Is_Definite first, but add a\n+\tspecial-purpose check for Has_Discrim_Dep_Array.\n+\n 2015-05-28  Bob Duff  <duff@adacore.com>\n \n \t* sem_util.adb (Requires_Transient_Scope): Avoid returning"}, {"sha": "f163b1581b24b8f622bbb13c9c0e555e01e9d6bd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=228722248f2f6a9e32d8f761e6579c2f56cdec4f", "patch": "@@ -17946,7 +17946,7 @@ package body Sem_Ch3 is\n       N : Node_Id := Empty) return Boolean\n    is\n       Original_Comp  : Entity_Id := Empty;\n-      Original_Scope : Entity_Id;\n+      Original_Type : Entity_Id;\n       Type_Scope     : Entity_Id;\n \n       function Is_Local_Type (Typ : Entity_Id) return Boolean;\n@@ -17990,13 +17990,13 @@ package body Sem_Ch3 is\n          return False;\n \n       else\n-         Original_Scope := Scope (Original_Comp);\n+         Original_Type := Scope (Original_Comp);\n          Type_Scope     := Scope (Base_Type (Scope (C)));\n       end if;\n \n       --  This test only concerns tagged types\n \n-      if not Is_Tagged_Type (Original_Scope) then\n+      if not Is_Tagged_Type (Original_Type) then\n          return True;\n \n       --  If it is _Parent or _Tag, there is no visibility issue\n@@ -18010,7 +18010,7 @@ package body Sem_Ch3 is\n \n       elsif Ekind (Original_Comp) = E_Discriminant\n         and then\n-          (not Has_Unknown_Discriminants (Original_Scope)\n+          (not Has_Unknown_Discriminants (Original_Type)\n             or else (Present (N)\n                       and then Nkind (N) = N_Selected_Component\n                       and then Nkind (Prefix (N)) = N_Type_Conversion\n@@ -18038,11 +18038,11 @@ package body Sem_Ch3 is\n       --  visible. The latter suppression of visibility is needed for cases\n       --  that are tested in B730006.\n \n-      elsif Is_Private_Type (Original_Scope)\n+      elsif Is_Private_Type (Original_Type)\n         or else\n           (not Is_Private_Descendant (Type_Scope)\n             and then not In_Open_Scopes (Type_Scope)\n-            and then Has_Private_Declaration (Original_Scope))\n+            and then Has_Private_Declaration (Original_Type))\n       then\n          --  If the type derives from an entity in a formal package, there\n          --  are no additional visible components.\n@@ -18062,7 +18062,7 @@ package body Sem_Ch3 is\n          else\n             return\n               Is_Child_Unit (Cunit_Entity (Current_Sem_Unit))\n-                and then In_Open_Scopes (Scope (Original_Scope))\n+                and then In_Open_Scopes (Scope (Original_Type))\n                 and then Is_Local_Type (Type_Scope);\n          end if;\n \n@@ -18085,9 +18085,22 @@ package body Sem_Ch3 is\n \n          begin\n             loop\n-               if Ancestor = Original_Scope then\n+               if Ancestor = Original_Type then\n                   return True;\n+\n+               --  The ancestor may have a partial view of the original\n+               --  type, but if the full view is in scope, as in a child\n+               --  body, the component is visible.\n+\n+               elsif In_Private_Part (Scope (Original_Type))\n+                 and then Full_View (Ancestor) = Original_Type\n+               then\n+                  return True;\n+\n                elsif Ancestor = Etype (Ancestor) then\n+\n+                  --  No further ancestors to examine.\n+\n                   return False;\n                end if;\n "}, {"sha": "a29b286f717ec07e25abb8ea16905d7b8046670a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=228722248f2f6a9e32d8f761e6579c2f56cdec4f", "patch": "@@ -17103,6 +17103,11 @@ package body Sem_Util is\n       --  could be nested inside some other record that is constrained by\n       --  nondiscriminants). That is, the recursive calls are too conservative.\n \n+      function Has_Discrim_Dep_Array (Typ : Entity_Id) return Boolean;\n+      --  True if we find certain discriminant-dependent array\n+      --  subcomponents. This shouldn't be necessary, but without this check,\n+      --  we crash in gimplify. ???\n+\n       function Caller_Known_Size_Record (Typ : Entity_Id) return Boolean is\n          pragma Assert (Typ = Underlying_Type (Typ));\n \n@@ -17150,7 +17155,49 @@ package body Sem_Util is\n          return True;\n       end Caller_Known_Size_Record;\n \n-      --  Local deeclarations\n+      function Has_Discrim_Dep_Array (Typ : Entity_Id) return Boolean is\n+         pragma Assert (Typ = Underlying_Type (Typ));\n+\n+      begin\n+         if Is_Array_Type (Typ) then\n+            return Size_Depends_On_Discriminant (Typ);\n+         end if;\n+\n+         if Is_Record_Type (Typ)\n+           or else\n+           Is_Protected_Type (Typ)\n+         then\n+            declare\n+               Comp : Entity_Id := First_Entity (Typ);\n+\n+            begin\n+               while Present (Comp) loop\n+\n+                  --  Only look at E_Component entities. No need to look at\n+                  --  E_Discriminant entities, and we must ignore internal\n+                  --  subtypes generated for constrained components.\n+\n+                  if Ekind (Comp) = E_Component then\n+                     declare\n+                        Comp_Type : constant Entity_Id :=\n+                                      Underlying_Type (Etype (Comp));\n+\n+                     begin\n+                        if Has_Discrim_Dep_Array (Comp_Type) then\n+                           return True;\n+                        end if;\n+                     end;\n+                  end if;\n+\n+                  Next_Entity (Comp);\n+               end loop;\n+            end;\n+         end if;\n+\n+         return False;\n+      end Has_Discrim_Dep_Array;\n+\n+      --  Local declarations\n \n       Typ : constant Entity_Id := Underlying_Type (Id);\n \n@@ -17184,26 +17231,26 @@ package body Sem_Util is\n       elsif Is_Tagged_Type (Typ) or else Has_Controlled_Component (Typ) then\n          return not Is_Value_Type (Typ);\n \n-      --  Indefinite (discriminated) untagged record or protected type\n-\n-      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n-         return not Caller_Known_Size_Record (Typ);\n-         --  ???Should come after Is_Definite_Subtype below\n-\n       --  Untagged definite subtypes are known size. This includes all\n       --  elementary [sub]types. Tasks are known size even if they have\n       --  discriminants.\n \n       elsif Is_Definite_Subtype (Typ) or else Is_Task_Type (Typ) then\n-         if Is_Array_Type (Typ) -- ???Shouldn't be necessary\n-           and then New_Requires_Transient_Scope\n-                      (Underlying_Type (Component_Type (Typ)))\n-         then\n-            return True;\n+         if Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n+            if not Has_Discriminants (Typ) then\n+               if Has_Discrim_Dep_Array (Typ) then\n+                  return True; -- ???Shouldn't be necessary\n+               end if;\n+            end if;\n          end if;\n \n          return False;\n \n+      --  Indefinite (discriminated) untagged record or protected type\n+\n+      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n+         return not Caller_Known_Size_Record (Typ);\n+\n       --  Unconstrained array\n \n       else"}, {"sha": "650731746bfe47d48a8776ba486e26ce25830d2e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228722248f2f6a9e32d8f761e6579c2f56cdec4f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=228722248f2f6a9e32d8f761e6579c2f56cdec4f", "patch": "@@ -823,7 +823,7 @@ package Sem_Util is\n    --  returned. Otherwise the Etype of the node is returned.\n \n    function Get_Body_From_Stub (N : Node_Id) return Node_Id;\n-   --  Return the body node for a stub (subprogram or package)\n+   --  Return the body node for a stub.\n \n    function Get_Cursor_Type\n      (Aspect : Node_Id;"}]}