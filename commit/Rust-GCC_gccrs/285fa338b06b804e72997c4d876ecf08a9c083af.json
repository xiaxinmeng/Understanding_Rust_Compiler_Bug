{"sha": "285fa338b06b804e72997c4d876ecf08a9c083af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1ZmEzMzhiMDZiODA0ZTcyOTk3YzRkODc2ZWNmMDhhOWMwODNhZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-13T12:48:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-13T13:51:08Z"}, "message": "tree-optimization/92645 - avoid harmful early BIT_FIELD_REF canonicalization\n\nThis avoids canonicalizing BIT_FIELD_REF <T1> (a, <sz>, 0) to\n(T1)a on integer typed a.  This confuses the vectorizer SLP matching.\n\nWith this delayed to after vector lowering the testcase in PR92645\nfrom Skia is now finally optimized to reasonable assembly.\n\n2021-01-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92645\n\t* match.pd (BIT_FIELD_REF to conversion): Delay canonicalization\n\tuntil after vector lowering.\n\n\t* gcc.target/i386/pr92645-7.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-54.c: Adjust.\n\t* gcc.dg/pr69047.c: Likewise.", "tree": {"sha": "97ed22c7c131348831676bde0bcb4d1dc9346891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ed22c7c131348831676bde0bcb4d1dc9346891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285fa338b06b804e72997c4d876ecf08a9c083af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285fa338b06b804e72997c4d876ecf08a9c083af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285fa338b06b804e72997c4d876ecf08a9c083af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285fa338b06b804e72997c4d876ecf08a9c083af/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d04f3d2c90155bea035d7527a49bc4a6a3397b"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "60c383da13bd748ee89d5073ba74d389c9017c53", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=285fa338b06b804e72997c4d876ecf08a9c083af", "patch": "@@ -6075,6 +6075,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   /* Low-parts can be reduced to integral conversions.\n \t      ???  The following doesn't work for PDP endian.  */\n \t   || (BYTES_BIG_ENDIAN == WORDS_BIG_ENDIAN\n+\t       /* But only do this after vectorization.  */\n+\t       && canonicalize_math_after_vectorization_p ()\n \t       /* Don't even think about BITS_BIG_ENDIAN.  */\n \t       && TYPE_PRECISION (TREE_TYPE (@0)) % BITS_PER_UNIT == 0\n \t       && TYPE_PRECISION (type) % BITS_PER_UNIT == 0"}, {"sha": "d562663d86a3908aee6367d5bcb624bbbf20b993", "filename": "gcc/testsuite/gcc.dg/pr69047.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c?ref=285fa338b06b804e72997c4d876ecf08a9c083af", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+/* { dg-options \"-O -fdump-tree-forwprop4\" } */\n \n __UINT8_TYPE__\n f(__UINT16_TYPE__ b)\n@@ -15,4 +15,4 @@ f(__UINT16_TYPE__ b)\n   return a;\n }\n \n-/* { dg-final { scan-tree-dump \"_\\[0-9\\]+ = \\\\(\\[^)\\]+\\\\) b\" \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump \"_\\[0-9\\]+ = \\\\(\\[^)\\]+\\\\) b\" \"forwprop4\" } } */"}, {"sha": "02ebf068a619033119cb9a84842afb98602b9c3b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-54.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-54.c?ref=285fa338b06b804e72997c4d876ecf08a9c083af", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target int32plus } */\n-/* { dg-options \"-O -fdump-tree-fre1 -fdump-tree-dse1\" } */\n+/* { dg-options \"-O -fdump-tree-forwprop4 -fdump-tree-dse1\" } */\n \n extern void abort (void);\n \n@@ -51,6 +51,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"\\\\(char\\\\) i_\" \"fre1\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\(short int\\\\) i_\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\(char\\\\) i_\" \"forwprop4\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\(short int\\\\) i_\" \"forwprop4\" } } */\n /* { dg-final { scan-tree-dump-not \"u.i =\" \"dse1\" } } */"}, {"sha": "e4c04c2a82ab9c09a7477f36dc4d807883ec8fc7", "filename": "gcc/testsuite/gcc.target/i386/pr92645-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285fa338b06b804e72997c4d876ecf08a9c083af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-7.c?ref=285fa338b06b804e72997c4d876ecf08a9c083af", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -msse2\" } */\n+\n+typedef long v2di __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+void bar (v4si *p, __int128_t *q)\n+{\n+  union { __int128_t a; v4si b; } u;\n+  u.a = *q;\n+  (*p)[0] = u.b[0];\n+  (*p)[1] = u.b[2];\n+  (*p)[2] = u.b[1];\n+  (*p)[3] = u.b[3];\n+}\n+\n+/* The function should end up with sth like\n+     [v]pshufd $216, (%esi), %xmm0\n+     [v]movdqa %xmm0, (%edi)\n+     ret\n+   recognized by SLP vectorization involving an existing \"vector\".  */\n+/* { dg-final { scan-assembler-not \"punpck\" } } */\n+/* { dg-final { scan-assembler-times \"pshufd\" 1 } } */"}]}