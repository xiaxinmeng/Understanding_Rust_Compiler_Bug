{"sha": "e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5ZGZiZjA3ZDkzZTg5ZTkyZDhiOTViZWYyNDdmYzk1YTgwMjRlZg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-10-28T11:17:47Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-10-28T11:17:47Z"}, "message": "Remove VEC_LSHIFT_EXPR and vec_shl_optab\n\n\t* expr.c (expand_expr_real_2): Remove code handling VEC_LSHIFT_EXPR.\n\t* fold-const.c (const_binop): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n\t* optabs.c (optab_for_tree_code): Likewise.\n\t(expand_vec_shift_expr): Likewise, update comment.\n\t* tree.def: Delete VEC_LSHIFT_EXPR, remove comment.\n\t* optabs.h (expand_vec_shift_expr): Remove comment re. VEC_LSHIFT_EXPR.\n\t* optabs.def: Remove vec_shl_optab.\n\t* doc/md.texi: Remove references to vec_shr_m.\n\nFrom-SVN: r216779", "tree": {"sha": "815114050f368a772cb5c71599a28a3a4b7ef2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815114050f368a772cb5c71599a28a3a4b7ef2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/comments", "author": null, "committer": null, "parents": [{"sha": "fed4de37b870faad50374a63aa1cf68a97963da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed4de37b870faad50374a63aa1cf68a97963da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed4de37b870faad50374a63aa1cf68a97963da6"}], "stats": {"total": 68, "additions": 27, "deletions": 41}, "files": [{"sha": "536a0007dc03a03f9ca42a3a1e89cfc9c768683f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -1,3 +1,17 @@\n+2014-10-28  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* expr.c (expand_expr_real_2): Remove code handling VEC_LSHIFT_EXPR.\n+\t* fold-const.c (const_binop): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n+\t* optabs.c (optab_for_tree_code): Likewise.\n+\t(expand_vec_shift_expr): Likewise, update comment.\n+\t* tree.def: Delete VEC_LSHIFT_EXPR, remove comment.\n+\t* optabs.h (expand_vec_shift_expr): Remove comment re. VEC_LSHIFT_EXPR.\n+\t* optabs.def: Remove vec_shl_optab.\n+\t* doc/md.texi: Remove references to vec_shr_m.\n+\n 2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n \n \t* asan.c (report_error_func): Add noabort path."}, {"sha": "e889409c25b33cfdd2b9795559e9732102ae6ce3", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -4598,7 +4598,6 @@ expand_debug_expr (tree exp)\n     case REDUC_MIN_EXPR:\n     case REDUC_PLUS_EXPR:\n     case VEC_COND_EXPR:\n-    case VEC_LSHIFT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_TRUNC_EXPR:"}, {"sha": "3b5511ec39a86fb4278ebd766420eaec5eb05d8b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -4796,10 +4796,9 @@ operand 1. Add operand 1 to operand 2 and place the widened result in\n operand 0. (This is used express accumulation of elements into an accumulator\n of a wider mode.)\n \n-@cindex @code{vec_shl_@var{m}} instruction pattern\n @cindex @code{vec_shr_@var{m}} instruction pattern\n-@item @samp{vec_shl_@var{m}}, @samp{vec_shr_@var{m}}\n-Whole vector left/right shift in bits.\n+@item @samp{vec_shr_@var{m}}\n+Whole vector right shift in bits.\n Operand 1 is a vector to be shifted.\n Operand 2 is an integer shift amount in bits.\n Operand 0 is where the resulting shifted vector is stored."}, {"sha": "78bdfa24869a84c91227d73f254112ce902e3f92", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -9084,7 +9084,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n         return temp;\n       }\n \n-    case VEC_LSHIFT_EXPR:\n     case VEC_RSHIFT_EXPR:\n       {\n \ttarget = expand_vec_shift_expr (ops, target);"}, {"sha": "81660706b402e2a1fd34a331639519227e3ad804", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -1415,8 +1415,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       int count = TYPE_VECTOR_SUBPARTS (type), i;\n       tree *elts = XALLOCAVEC (tree, count);\n \n-      if (code == VEC_LSHIFT_EXPR\n-\t  || code == VEC_RSHIFT_EXPR)\n+      if (code == VEC_RSHIFT_EXPR)\n \t{\n \t  if (!tree_fits_uhwi_p (arg2))\n \t    return NULL_TREE;\n@@ -1428,11 +1427,10 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n \t  if (shiftc >= outerc || (shiftc % innerc) != 0)\n \t    return NULL_TREE;\n \t  int offset = shiftc / innerc;\n-\t  /* The direction of VEC_[LR]SHIFT_EXPR is endian dependent.\n-\t     For reductions, compiler emits VEC_RSHIFT_EXPR always,\n-\t     for !BYTES_BIG_ENDIAN picks first vector element, but\n-\t     for BYTES_BIG_ENDIAN last element from the vector.  */\n-\t  if ((code == VEC_RSHIFT_EXPR) ^ (!BYTES_BIG_ENDIAN))\n+\t  /* The direction of VEC_RSHIFT_EXPR is endian dependent.\n+\t     For reductions, if !BYTES_BIG_ENDIAN then compiler picks first\n+\t     vector element, but last element if BYTES_BIG_ENDIAN.  */\n+\t  if (BYTES_BIG_ENDIAN)\n \t    offset = -offset;\n \t  tree zero = build_zero_cst (TREE_TYPE (type));\n \t  for (i = 0; i < count; i++)"}, {"sha": "9452f991a6fb784c6288ad8501a412b83b14c92a", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -519,9 +519,6 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case REDUC_PLUS_EXPR:\n       return reduc_plus_scal_optab;\n \n-    case VEC_LSHIFT_EXPR:\n-      return vec_shl_optab;\n-\n     case VEC_RSHIFT_EXPR:\n       return vec_shr_optab;\n \n@@ -773,7 +770,7 @@ force_expand_binop (enum machine_mode mode, optab binoptab,\n   return true;\n }\n \n-/* Generate insns for VEC_LSHIFT_EXPR, VEC_RSHIFT_EXPR.  */\n+/* Generate insns for VEC_RSHIFT_EXPR.  */\n \n rtx\n expand_vec_shift_expr (sepops ops, rtx target)\n@@ -784,21 +781,10 @@ expand_vec_shift_expr (sepops ops, rtx target)\n   enum machine_mode mode = TYPE_MODE (ops->type);\n   tree vec_oprnd = ops->op0;\n   tree shift_oprnd = ops->op1;\n-  optab shift_optab;\n \n-  switch (ops->code)\n-    {\n-      case VEC_RSHIFT_EXPR:\n-\tshift_optab = vec_shr_optab;\n-\tbreak;\n-      case VEC_LSHIFT_EXPR:\n-\tshift_optab = vec_shl_optab;\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-    }\n+  gcc_assert (ops->code == VEC_RSHIFT_EXPR);\n \n-  icode = optab_handler (shift_optab, mode);\n+  icode = optab_handler (vec_shr_optab, mode);\n   gcc_assert (icode != CODE_FOR_nothing);\n \n   rtx_op1 = expand_normal (vec_oprnd);"}, {"sha": "a07e1639ed680ad49765cfe7b2df020df06f4e29", "filename": "gcc/optabs.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -276,7 +276,6 @@ OPTAB_D (vec_perm_const_optab, \"vec_perm_const$a\")\n OPTAB_D (vec_perm_optab, \"vec_perm$a\")\n OPTAB_D (vec_realign_load_optab, \"vec_realign_load_$a\")\n OPTAB_D (vec_set_optab, \"vec_set$a\")\n-OPTAB_D (vec_shl_optab, \"vec_shl_$a\")\n OPTAB_D (vec_shr_optab, \"vec_shr_$a\")\n OPTAB_D (vec_unpacks_float_hi_optab, \"vec_unpacks_float_hi_$a\")\n OPTAB_D (vec_unpacks_float_lo_optab, \"vec_unpacks_float_lo_$a\")"}, {"sha": "93db5138c90ace02612170879cdbb018579bd220", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -240,7 +240,7 @@ bool expand_vec_cond_expr_p (tree, tree);\n \n /* Generate code for VEC_COND_EXPR.  */\n extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);\n-/* Generate code for VEC_LSHIFT_EXPR and VEC_RSHIFT_EXPR.  */\n+/* Generate code for VEC_RSHIFT_EXPR.  */\n extern rtx expand_vec_shift_expr (sepops, rtx);\n \n /* Return true if target supports vector operations for VEC_PERM_EXPR.  */"}, {"sha": "a1793e81955731f12d27a19133798ef4c460816e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -3673,7 +3673,6 @@ verify_gimple_assign_binary (gimple stmt)\n \treturn false;\n       }\n \n-    case VEC_LSHIFT_EXPR:\n     case VEC_RSHIFT_EXPR:\n       {\n \tif (TREE_CODE (rhs1_type) != VECTOR_TYPE"}, {"sha": "ea62c86476807c887f2f7896b72bd2a9ddf3ff5b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -3696,7 +3696,6 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n-    case VEC_LSHIFT_EXPR:\n     case VEC_RSHIFT_EXPR:\n \n     case BIT_IOR_EXPR:"}, {"sha": "a74d85adc8111847eb652d88d4a4c876caa9d39a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -1848,7 +1848,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n-    case VEC_LSHIFT_EXPR:\n     case VEC_RSHIFT_EXPR:\n     case WIDEN_LSHIFT_EXPR:\n     case BIT_IOR_EXPR:\n@@ -3029,7 +3028,6 @@ op_code_prio (enum tree_code code)\n     case REDUC_MAX_EXPR:\n     case REDUC_MIN_EXPR:\n     case REDUC_PLUS_EXPR:\n-    case VEC_LSHIFT_EXPR:\n     case VEC_RSHIFT_EXPR:\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n@@ -3140,9 +3138,6 @@ op_symbol_code (enum tree_code code)\n     case RROTATE_EXPR:\n       return \"r>>\";\n \n-    case VEC_LSHIFT_EXPR:\n-      return \"v<<\";\n-\n     case VEC_RSHIFT_EXPR:\n       return \"v>>\";\n "}, {"sha": "28111ca258f41319e1bb569a95868806bc6267fd", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -1605,7 +1605,7 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   if (compute_type == type)\n     return;\n \n-  gcc_assert (code != VEC_LSHIFT_EXPR && code != VEC_RSHIFT_EXPR);\n+  gcc_assert (code != VEC_RSHIFT_EXPR);\n   new_rhs = expand_vector_operation (gsi, type, compute_type, stmt, code);\n \n   /* Leave expression untouched for later expansion.  */"}, {"sha": "ff6be21549fe1be338cc47d654c60bba658bc19a", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dfbf07d93e89e92d8b95bef247fc95a8024ef/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=e29dfbf07d93e89e92d8b95bef247fc95a8024ef", "patch": "@@ -1242,10 +1242,9 @@ DEFTREECODE (WIDEN_LSHIFT_EXPR, \"widen_lshift_expr\", tcc_binary, 2)\n    before adding operand three.  */\n DEFTREECODE (FMA_EXPR, \"fma_expr\", tcc_expression, 3)\n \n-/* Whole vector left/right shift in bits.\n+/* Whole vector right shift in bits.\n    Operand 0 is a vector to be shifted.\n    Operand 1 is an integer shift amount in bits.  */\n-DEFTREECODE (VEC_LSHIFT_EXPR, \"vec_lshift_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_RSHIFT_EXPR, \"vec_rshift_expr\", tcc_binary, 2)\n \f\n /* Widening vector multiplication."}]}