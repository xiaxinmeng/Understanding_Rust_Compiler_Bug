{"sha": "8a642d97fd65ebd948367a803313ec7ac2c09a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2NDJkOTdmZDY1ZWJkOTQ4MzY3YTgwMzMxM2VjN2FjMmMwOWEwMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-28T22:22:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-28T22:22:21Z"}, "message": "(emit_move_sequence): If reload in progress, replace reference to\npseudo with reference to corresponding MEM.\n\nFrom-SVN: r13056", "tree": {"sha": "8cf6cb9d36718dc7ea1a7b9939babefa08e54afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cf6cb9d36718dc7ea1a7b9939babefa08e54afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a642d97fd65ebd948367a803313ec7ac2c09a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a642d97fd65ebd948367a803313ec7ac2c09a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a642d97fd65ebd948367a803313ec7ac2c09a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a642d97fd65ebd948367a803313ec7ac2c09a03/comments", "author": null, "committer": null, "parents": [{"sha": "3c9675679a3326ed57d41190ac3f536073500ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9675679a3326ed57d41190ac3f536073500ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9675679a3326ed57d41190ac3f536073500ff8"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "74d7b8802a502018be960f7dc19dd0c45320059b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a642d97fd65ebd948367a803313ec7ac2c09a03/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a642d97fd65ebd948367a803313ec7ac2c09a03/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8a642d97fd65ebd948367a803313ec7ac2c09a03", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n+#include \"reload.h\"\n #include \"c-tree.h\"\n #include \"expr.h\"\n #include \"obstack.h\"\n@@ -1059,6 +1060,22 @@ emit_move_sequence (operands, mode, scratch_reg)\n   register rtx operand0 = operands[0];\n   register rtx operand1 = operands[1];\n \n+  if (reload_in_progress && GET_CODE (operand0) == REG\n+      && REGNO (operand0) >= FIRST_PSEUDO_REGISTER)\n+    operand0 = reg_equiv_mem[REGNO (operand0)];\n+  else if (reload_in_progress && GET_CODE (operand0) == SUBREG\n+\t   && GET_CODE (SUBREG_REG (operand0)) == REG\n+\t   && REGNO (SUBREG_REG (operand0)) >= FIRST_PSEUDO_REGISTER)\n+    SUBREG_REG (operand0) = reg_equiv_mem[REGNO (SUBREG_REG (operand0))];\n+\n+  if (reload_in_progress && GET_CODE (operand1) == REG\n+      && REGNO (operand1) >= FIRST_PSEUDO_REGISTER)\n+    operand1 = reg_equiv_mem[REGNO (operand1)];\n+  else if (reload_in_progress && GET_CODE (operand1) == SUBREG\n+\t   && GET_CODE (SUBREG_REG (operand1)) == REG\n+\t   && REGNO (SUBREG_REG (operand1)) >= FIRST_PSEUDO_REGISTER)\n+    SUBREG_REG (operand1) = reg_equiv_mem[REGNO (SUBREG_REG (operand1))];\n+\n   /* Handle secondary reloads for loads/stores of FP registers from\n      REG+D addresses where D does not fit in 5 bits, including \n      (subreg (mem (addr))) cases.  */"}]}