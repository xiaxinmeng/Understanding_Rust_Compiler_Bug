{"sha": "11860cf440198a9023135a93d781f45bc8cccc4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE4NjBjZjQ0MDE5OGE5MDIzMTM1YTkzZDc4MWY0NWJjOGNjY2M0ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-03T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-03T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "4f6dfd08914352f77aec27fb6c8866b599946052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f6dfd08914352f77aec27fb6c8866b599946052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11860cf440198a9023135a93d781f45bc8cccc4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11860cf440198a9023135a93d781f45bc8cccc4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11860cf440198a9023135a93d781f45bc8cccc4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11860cf440198a9023135a93d781f45bc8cccc4d/comments", "author": null, "committer": null, "parents": [{"sha": "7e231b2cfbfa5f99bbf581555ca74eaaba42ad7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e231b2cfbfa5f99bbf581555ca74eaaba42ad7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e231b2cfbfa5f99bbf581555ca74eaaba42ad7f"}], "stats": {"total": 573, "additions": 572, "deletions": 1}, "files": [{"sha": "b51294333138414cc1eccc1db56b7db0154d4f7f", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,11 @@\n+2020-12-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* .gitignore: Sync with binutils-gdb\n+\n+2020-12-02  Claudiu Zissulescu  <claziss@gmail.com>\n+\n+\t* MAINTAINERS: Add myself as arc port maintainer.\n+\n 2020-11-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/87788"}, {"sha": "2baa7f9fe62b1136205c3413adcc2af6d8417202", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,7 @@\n+2020-12-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* gcc-git-customization.sh: Configure sendemail.to.\n+\n 2020-11-30  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Suggest close file for"}, {"sha": "7e76b2f6852c0b2f2721c8b652f2009a6eff0b14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,222 @@\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (add_scalar_info): Only use add_AT_wide for 128-bit\n+\tconstants and only in dwarf-5 or later, where DW_FORM_data16 is\n+\tavailable.  Otherwise use DW_FORM_block*/DW_FORM_exprloc with\n+\tDW_OP_implicit_value to describe the constant.\n+\n+2020-12-02  qing zhao  <qinzhao@gcc.gnu.org>\n+\n+\tPR rtl-optimization/97777\n+\t* reg-stack.c (rest_of_handle_stack_regs): call\n+\tdf_insn_rescan_all if reg_to_stack return true.\n+\n+2020-12-02  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_const_int_pool_entry_p): New\n+\tfunction.\n+\t* config/s390/s390.c (s390_const_int_pool_entry_p): New\n+\tfunction.\n+\t* config/s390/s390.md: Add define_peephole2 that produces llihf\n+\tand oilf.\n+\n+2020-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97630\n+\t* tree-vectorizer.h (_slp_tree::next_node,\n+\t_slp_tree::prev_node): New.\n+\t(vect_slp_init): Declare.\n+\t(vect_slp_fini): Likewise.\n+\t* tree-vectorizer.c (vectorize_loops): Call vect_slp_init/fini.\n+\t(pass_slp_vectorize::execute): Likewise.\n+\t* tree-vect-slp.c (vect_slp_init): New.\n+\t(vect_slp_fini): Likewise.\n+\t(slp_first_node): New global.\n+\t(_slp_tree::_slp_tree): Link node into the SLP tree list.\n+\t(_slp_tree::~_slp_tree): Delink node from the SLP tree list.\n+\n+2020-12-02  Scott Snyder  <sss@li-snyder.org>\n+\n+\tPR plugins/98059\n+\t* vec.h (auto_delete_vec): Use\n+\tDISABLE_COPY_AND_ASSIGN(auto_delete_vec) instead of\n+\tDISABLE_COPY_AND_ASSIGN(auto_delete_vec<T>) to make it valid C++20\n+\tafter DR2237.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98075\n+\t* cgraph.c (cgraph_node::dump): Dump decl_is_malloc flag.\n+\t* ipa-pure-const.c (propagate_malloc): Do not set malloc\n+\tattribute for void functions.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/93195\n+\tPR middle-end/93197\n+\t* configure.ac (HAVE_GAS_SECTION_LINK_ORDER): New.  Define 1 if\n+\tthe assembler supports the section flag 'o' for specifying\n+\tsection with link-order.\n+\t* output.h (SECTION_LINK_ORDER): New.  Defined to 0x8000000.\n+\t(SECTION_MACH_DEP): Changed from 0x8000000 to 0x10000000.\n+\t* targhooks.c (default_print_patchable_function_entry): Pass\n+\tSECTION_LINK_ORDER to switch_to_section if the section flag 'o'\n+\tworks.  Pass current_function_decl to switch_to_section.\n+\t* varasm.c (default_elf_asm_named_section): Use 'o' flag for\n+\tSECTION_LINK_ORDER if assembler supports it.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* doc/sourcebuild.texi: Document o_flag_in_section.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386.opt: Add the missing '.' for -mneeded.\n+\n+2020-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_transform_loop_stmt): Return whether\n+\twe vectorized a stmt.\n+\t(vect_transform_loop): Only call maybe_set_vectorized_backedge_value\n+\twhen we vectorized the stmt.\n+\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* expmed.h (expand_divmod): Only declare if GCC_OPTABS_H is defined.\n+\tAdd enum optabs_method argument defaulted to OPTAB_LIB_WIDEN.\n+\t* expmed.c: Include expmed.h after optabs.h.\n+\t(expand_divmod): Add methods argument, if it is not OPTAB_{,LIB_}WIDEN,\n+\tdon't choose a wider mode, and pass it to other calls instead of\n+\thardcoded OPTAB_LIB_WIDEN.  Avoid emitting libcalls if not\n+\tOPTAB_LIB or OPTAB_LIB_WIDEN.\n+\t* optabs.c: Include expmed.h after optabs.h.\n+\t(expand_doubleword_mod, expand_doubleword_divmod): Pass OPTAB_DIRECT\n+\tas last argument to expand_divmod.\n+\t(expand_binop): Punt if {s,u}divmod_optab has handler for double-word\n+\tint_mode.\n+\t* expr.c: Include expmed.h after optabs.h.\n+\t* explow.c: Include expmed.h after optabs.h.\n+\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97459\n+\t* optabs.h (expand_doubleword_divmod): Declare.\n+\t* optabs.c (expand_doubleword_divmod): New function.\n+\t(expand_binop): Use it.\n+\t* internal-fn.c (expand_DIVMOD): Likewise.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/98087\n+\t* gimple-fold.c (clear_padding_type): Do not divide by zero.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* gdbinit.in: Write what each command calls\n+\tfor a debugging function.\n+\n+2020-12-02  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tUse OPTION_MASK_DIRECT_MOVE for Power8 target_enable instead\n+\tof OPTION_MASK_HTM.\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER):\n+\tRemove OPTION_MASK_HTM.\n+\t(RS6000_CPU): Add OPTION_MASK_HTM to power8, power9 and\n+\tpowerpc64le entries.\n+\n+2020-12-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98079\n+\t* config/i386/i386.md (abs<mode>2): Enable QImode\n+\tonly for !TARGET_PARTIAL_REG_STALL.\n+\t(*abs<mode>2_1): Ditto.\n+\t(<maxmin:code><mode>3): Ditto.\n+\t(*<maxmin:code><mode>3_1): Ditto.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* diagnostic.c (diagnostic_report_diagnostic): ICE causes to\n+\tterminate compiler immediately, so I guess it should be printed\n+\talways.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/88702\n+\t* gimple-if-to-switch.cc (pass_if_to_switch::execute):\n+\tRequire at least 2 BBs.\n+\t* gimple-if-to-switch.cc (find_conditions): Require\n+\tequal precision for low and high of a range.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98084\n+\t* gimple-if-to-switch.cc (find_conditions): Consider only\n+\tintegral types.\n+\n+2020-12-02  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/addsub.md (addqi3_clobber_flags): Rename to\n+\taddqi3_flags and annotate with a <cczn> for define_subst.\n+\t(addhi3_h8sx_clobber_flags): Likewise.\n+\t(subqi3_clobber_flags, sub<mode>3_clobber_flags): Likewise.\n+\t(neg<mode2>_clobber_flags): Similarly.\n+\t(addsi3_clobber_flags): Similarly.  Update last argument to\n+\toutput_plussi to distinguish when we need flags or do not need\n+\tflags.\n+\t(addhi3_clobber_flags): Similarly.  Twiddle code for cases\n+\t+-1, +-2 and +-4.\n+\t* config/h8300/h8300.md: Define iterators, mode attributes and\n+\tsubstitutions for use in compare/test elimination.\n+\t* config/h8300/jumpcall.md (branch, branch_1): Use H8cc mode\n+\titerator to cover the different modes for the CC register.\n+\t(branch_1_false): Likewise.\n+\n+2020-12-02  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* loop-iv.c: Fix a typo, s/bu/by/, in the `iv_analyze_expr'\n+\tdescription in the introduction.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* configure.ac (HAVE_GAS_SHF_GNU_RETAIN): New.  Define 1 if\n+\tthe assembler supports marking sections with SHF_GNU_RETAIN flag.\n+\t* output.h (SECTION_RETAIN): New.  Defined as 0x4000000.\n+\t(SECTION_MACH_DEP): Changed from 0x4000000 to 0x8000000.\n+\t(default_unique_section): Add a bool argument.\n+\t* varasm.c (get_section): Set SECTION_RETAIN for the preserved\n+\tsymbol with HAVE_GAS_SHF_GNU_RETAIN.\n+\t(resolve_unique_section): Used named section for the preserved\n+\tsymbol if assembler supports SHF_GNU_RETAIN.\n+\t(get_variable_section): Handle the preserved common symbol with\n+\tHAVE_GAS_SHF_GNU_RETAIN.\n+\t(default_elf_asm_named_section): Require the full declaration and\n+\tuse the 'R' flag for SECTION_RETAIN.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* doc/sourcebuild.texi: Document R_flag_in_section.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config.gcc: Replace cet.o with gnu-property.o.  Replace\n+\ti386/t-cet with i386/t-gnu-property.\n+\t* config/i386/cet.c: Renamed to ...\n+\t* config/i386/gnu-property.c: This.\n+\t(emit_gnu_property): New function.\n+\t(file_end_indicate_exec_stack_and_cet): Renamed to ...\n+\t(file_end_indicate_exec_stack_and_gnu_property): This.  Call\n+\temit_gnu_property to generate GNU_PROPERTY_X86_FEATURE_1_AND and\n+\tGNU_PROPERTY_X86_ISA_1_NEEDED properties.\n+\t* config/i386/i386.opt (mneeded): New.\n+\t* config/i386/linux-common.h (file_end_indicate_exec_stack_and_cet):\n+\tRenamed to ...\n+\t(file_end_indicate_exec_stack_and_gnu_property): This.\n+\t(TARGET_ASM_FILE_END): Updated.\n+\t* config/i386/t-cet: Renamed to ...\n+\t* config/i386/t-gnu-property: This.\n+\t(cet.o): Renamed to ...\n+\t(gnu-property.o): This.\n+\t* doc/invoke.texi: Document -mneeded.\n+\n 2020-12-01  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n \n \tPR tree-optimization/96708"}, {"sha": "81e21c81a488f2132a6d4c02f1676d872b95b6b8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1 +1 @@\n-20201202\n+20201203"}, {"sha": "6728ea13798ce154185326a656589739af240495", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,122 @@\n+2020-12-03  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR c++/97947\n+\t* typeck2.c (digest_init_r): Handle OPAQUE_TYPE as an aggregate type.\n+\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80780\n+\tPR c++/93093\n+\t* cp-tree.h (source_location_current_p): Declare.\n+\t* tree.c (source_location_current_p): New function.\n+\t* call.c (immediate_invocation_p): New function.\n+\t(build_over_call): Use it to resolve LWG3396.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Temporarily set\n+\tcurrent_function_decl from ctx->call->fundef->decl if any.\n+\t* cp-gimplify.c (cp_genericize_r) <case CALL_EXPR>: Fold calls\n+\tto immediate function std::source_location::current ().\n+\n+2020-12-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (grokdeclarator): Improve diagnostic for\n+\tdisallowed CTAD placeholder.\n+\n+2020-12-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (check_initializer): Also look through STMT_EXPR\n+\tand BIND_EXPR.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (comparing_typenames): Declare.\n+\t* pt.c (comparing_typenames): Define.\n+\t(spec_hasher::equal): Increment it around comparisons.\n+\t* typeck.c (structural_comptypes): Adjust TYPENAME resolution\n+\tcheck.\n+\n+2020-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97975\n+\t* constexpr.c (fold_non_dependent_init): Add a tree parameter.\n+\tUse it.\n+\t* cp-tree.h (fold_non_dependent_init): Add a tree parameter with\n+\ta default value.\n+\t* typeck2.c (store_init_value): Call fold_non_dependent_expr\n+\tonly when checking the initializer for constexpr variables.\n+\tCall fold_non_dependent_init instead of maybe_constant_init.\n+\n+2020-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97187\n+\tPR c++/97993\n+\t* pt.c (tsubst_copy_and_build) <case NEW_EXPR>: Return error_mark_node\n+\tif init is erroneous.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_MODULE_PURVIEW_P, DECL_MODULE_IMPORT_P)\n+\t(DECL_MODULE_ENTITY_P): New.\n+\t(DECL_MODULE_PENDING_SPECIALIZATIONS_P): New.\n+\t(DECL_MODULE_PENDING_MEMBERS_P): New.\n+\t(DECL_MODULE_ATTACHMENTS_P): New.\n+\t(DECL_MODULE_EXPORT_P): New.\n+\t(struct lang_decl_base): Shrink sel field.  Add new\n+\tmodule-specific fields.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_TINFO_P): Also for TYPE_DECLs.\n+\t(get_tinfo_decl_direct): Declare.\n+\t(get_pseudo_tinfo_index, get_pseudo_tinfo_type): Declare.\n+\t* rtti.c (get_tinfo_decl_direct): Externalize.\n+\t(get_tinfo_desc): Set DECL_TINFO_P on the typedef.\n+\t(get_pseudo_tinfo_index, get_pseudo_tinfo_type): New.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (maybe_add_lang_decl_raw, maybe_add_lang_type_raw):\n+\tDeclare.\n+\t* lex.c (maybe_add_lang_decl_raw, maybe_add_lang_type_raw):\n+\tExternalize, reformat.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (build_cplus_array_type): Add defaulted DEP parm.\n+\t* tree.c (set_array_type_common): Add DEP parm.\n+\t(build_cplus_array_type): Add DEP parm, determine dependency if\n+\tneeded.\n+\t(cp_build_qualified_type_real): Adjust array-building call.\n+\t(strip_typedefs): Likewise.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ptree.c (cxx_print_xnode): Increase binding-vector prefix size.\n+\n+2020-12-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.def (BINDING_VECTOR): New.\n+\t* name-lookup.h (struct binding_slot): New.\n+\t(BINDING_VECTOR_SLOTS_PER_CLUSTER): New.\n+\t(struct binding_index, struct binding_cluster): New.\n+\t(BINDING_VECTOR_ALLOC_CLUSTERS, BINDING_VECTOR_CLUSTER_BASE)\n+\t(BINDING_VECTOR_CLUSTER): New.\n+\t(struct tree_binding_vec): New.\n+\t(BINDING_VECTOR_NAME, BINDING_VECTOR_GLOBAL_DUPS_P)\n+\t(BINDING_VECTOR_PARTITION_DUPS_P): New.\n+\t(BINDING_BINDING_GLOBAL_P, BINDING_BINDING_PARTITION_P): New.\n+\t(BINDING_VECTOR_PENDING_SPECIALIZATIONS)\n+\t(BINDING_VECTOR_PENDING_IS_HEADER_P)\n+\t(BINDING_VECTOR_PENDING_IS_PARTITION_P): New.\n+\t* cp-tree.h (enum cp_tree_node_structure_enum): Add\n+\tTS_CP_BINDING_VECTOR.\n+\t(union lang_tree_node): Add binding_vec field.\n+\t(make_binding_vec): Declare.\n+\t(named_decl_hash::hash, named_decl_hash::equal): Check for binding\n+\tvector.\n+\t* decl.c (cp_tree_node_structure): Add BINDING_VECTOR case.\n+\t* ptree.c (cxx_print_xnode): Add BINDING_VECTOR case.\n+\t* tree.c (make_binding_vec): New.\n+\n 2020-12-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/98054"}, {"sha": "3339d70e5c3d0e44a06fbab710f40a0ad79c7394", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,168 @@\n+2020-12-03  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR c++/97947\n+\t* g++.target/powerpc/pr97947.C: New test.\n+\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80780\n+\tPR c++/93093\n+\t* g++.dg/cpp2a/srcloc15.C: New test.\n+\t* g++.dg/cpp2a/srcloc16.C: New test.\n+\t* g++.dg/cpp2a/srcloc17.C: New test.\n+\t* g++.dg/cpp2a/srcloc18.C: New test.\n+\n+2020-12-02  qing zhao  <qinzhao@gcc.gnu.org>\n+\n+\tPR rtl-optimization/97777\n+\tPR rtl-optimization/97777\n+\t* gcc.target/i386/pr97777.c: New test.\n+\n+2020-12-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/other/pr88187.C: Adjust expected error.\n+\t* g++.dg/cpp2a/class-deduction-abbrev1.C: New test.\n+\n+2020-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97975\n+\t* g++.dg/cpp1z/inline-var8.C: New test.\n+\n+2020-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97187\n+\tPR c++/97993\n+\t* g++.dg/eh/crash2.C: New test.\n+\t* g++.dg/template/crash132.C: New test.\n+\n+2020-12-02  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust expected warnings\n+\tto correctly reflect the maximum object size.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-11.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-18.c: Same.\n+\n+2020-12-02  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/load-imm64-1.c: New test.\n+\t* gcc.target/s390/load-imm64-2.c: New test.\n+\n+2020-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ada/acats/support/acats25.lst: Delete.\n+\t* ada/acats/support/acats26.lst: New file.\n+\t* ada/acats/support/fcndecl.ada: Minor tweak.\n+\t* ada/acats/support/impdef.a: Add commentary.\n+\t* ada/acats/support/impdefg.a (Negative_Zero return): Simplify.\n+\t* ada/acats/support/macro.dfs (TASK_STORAGE_SIZE): Bump.\n+\t* ada/acats/support/repbody.ada: Upgrade to ACATS 2.6.\n+\t* ada/acats/support/tctouch.ada: Likewise.\n+\t* ada/acats/tests/c3/c352001.a: New file.\n+\t* ada/acats/tests/c4/c433001.a: Correct error messages.\n+\t* ada/acats/tests/c4/c453001.a: New file.\n+\t* ada/acats/tests/c4/c45622a.ada: Delete.\n+\t* ada/acats/tests/c4/c45624a.ada: Likewise.\n+\t* ada/acats/tests/c4/c45624b.ada: Likewise.\n+\t* ada/acats/tests/c4/c460013.a: New file.\n+\t* ada/acats/tests/c4/c460014.a: Likewise.\n+\t* ada/acats/tests/c6/c620001.a: Likewise.\n+\t* ada/acats/tests/c6/c620002.a: Likewise.\n+\t* ada/acats/tests/c7/c761006.a: Redo Unchecked_Deallocation case.\n+\t* ada/acats/tests/c9/c96004a.ada: Adjust for Ada 2005.\n+\t* ada/acats/tests/c9/c96007a.ada: Likewise.\n+\t* ada/acats/tests/cb/cb41004.a: Adjust for AI95-0044.\n+\t* ada/acats/tests/cc/cc3016f.ada: Minor tweak.\n+\t* ada/acats/tests/cd/cd30011.a: New file.\n+\t* ada/acats/tests/cd/cd30012.a: Likewise.\n+\t* ada/acats/tests/cd/cd90001.a: Fix comparison.\n+\t* ada/acats/tests/cxa/cxa3004.a: New file.\n+\t* ada/acats/tests/cxa/cxa5013.a: Likewise.\n+\t* ada/acats/tests/cxa/cxac005.a: Adjust for return-by-reference.\n+\t* ada/acats/tests/cxb/cxb30061.am: New file.\n+\t* ada/acats/tests/cxf/cxf2001.a: Fix failure message.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98075\n+\t* g++.dg/ipa/pr98075.C: New test.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/93195\n+\t* g++.dg/pr93195a.C: New test.\n+\t* g++.dg/pr93195b.C: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_o_flag_in_section): New proc.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98084\n+\t* gcc.dg/tree-ssa/pr98094.c: New test.\n+\n+2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97459\n+\t* gcc.target/i386/pr97282.c (foo): Use 123456 divisor instead of\n+\t10.\n+\t* gcc.dg/pr97459-1.c (TESTS): Add tests for 10, 12 and\n+\t6144.\n+\t* gcc.dg/pr97459-2.c (TESTS): Likewise.\n+\t* gcc.dg/pr97459-3.c: New test.\n+\t* gcc.dg/pr97459-4.c: New test.\n+\t* gcc.dg/pr97459-5.c: New test.\n+\t* gcc.dg/pr97459-6.c: New test.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/98087\n+\t* gcc.c-torture/compile/pr98087.c: New test.\n+\n+2020-12-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98079\n+\t* gcc.target/i386/pr98079.c: New test.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/88702\n+\t* gcc.dg/tree-ssa/if-to-switch-9.c: New test.\n+\n+2020-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98084\n+\t* gcc.dg/tree-ssa/pr98084.c: New test.\n+\n+2020-12-02  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/h8300/add.c: New test.\n+\t* gcc.target/h8300/add-2.c: New test.\n+\t* gcc.target/h8300/add-3.c: New test.\n+\t* gcc.target/h8300/sub.c: New test.\n+\t* gcc.target/h8300/sub-2.c: New test.\n+\t* gcc.target/h8300/sub-3.c: New test.\n+\n+2020-12-02  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/go-test.exp (errchk): Permit trailing */ on ERROR line.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\t    Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* c-c++-common/attr-used.c: Check the 'R' flag.\n+\t* c-c++-common/attr-used-2.c: Likewise.\n+\t* c-c++-common/attr-used-3.c: New test.\n+\t* c-c++-common/attr-used-4.c: Likewise.\n+\t* gcc.c-torture/compile/attr-used-retain-1.c: Likewise.\n+\t* gcc.c-torture/compile/attr-used-retain-2.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_R_flag_in_section): New proc.\n+\n+2020-12-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/x86-needed-1.c: New test.\n+\t* gcc.target/i386/x86-needed-2.c: Likewise.\n+\t* gcc.target/i386/x86-needed-3.c: Likewise.\n+\n 2020-12-01  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n \n \t* gcc.dg/pr96708-negative.c: New test."}, {"sha": "a4de7ba566e9fd75a681c0239b2a6a0b91798dbc", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,9 @@\n+2020-12-02  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* dwarf.c (resolve_string): Use > rather than >= to check whether\n+\tstring index extends past buffer.\n+\t(resolve_addr_index): Similarly for address index.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "6b1c345ff815efde15ba2fa6526d1166556d3114", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11860cf440198a9023135a93d781f45bc8cccc4d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11860cf440198a9023135a93d781f45bc8cccc4d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11860cf440198a9023135a93d781f45bc8cccc4d", "patch": "@@ -1,3 +1,53 @@\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65480\n+\tPR libstdc++/68735\n+\t* python/libstdcxx/v6/printers.py (function_pointer_to_name):\n+\tNew helper function to get the name of a function from its\n+\taddress.\n+\t(StdExpAnyPrinter.__init__): Use it.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/dg-options.exp (add_options_for_libatomic):\n+\tReplace powerpc-ibm-aix* and powerpc*-*-darwin* with check for\n+\tpowerpc && ilp32.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_istream/ignore/char/94749.cc: Add\n+\tdg-timeout-factor for ilp32 targets.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/94749.cc:\n+\tLikewise.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/rope (rope::_S_concat_char_iter)\n+\t(rope::_S_destr_concat_char_iter): Add allocator parameter.\n+\t(rope::push_back, rope::append, rope::insert, operator+):\n+\tPass allocator.\n+\t* include/ext/ropeimpl.h (rope::_S_concat_char_iter)\n+\t(rope::_S_destr_concat_char_iter): Add allocator parameter\n+\tand use it.\n+\t(_Rope_char_ref_proxy::operator=(_CharT)): Pass allocator.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/rope: Fix indentation of access specifiers.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_timed_wait.h: Use #if instead of #ifdef.\n+\t* include/bits/semaphore_base.h: Likewise.\n+\t* include/std/version: Remove trailing whitespace.\n+\n+2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdExpPathPrinter): Store the\n+\tname of the type and pass it to the iterator.\n+\t(StdPathPrinter): Likewise.\n+\t* testsuite/libstdc++-prettyprinters/filesystem-ts.cc: New test.\n+\n 2020-12-01  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* include/bits/atomic_base.h: Replace usage of"}]}