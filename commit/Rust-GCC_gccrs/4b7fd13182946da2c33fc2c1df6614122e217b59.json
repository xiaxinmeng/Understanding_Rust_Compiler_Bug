{"sha": "4b7fd13182946da2c33fc2c1df6614122e217b59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3ZmQxMzE4Mjk0NmRhMmMzM2ZjMmMxZGY2NjE0MTIyZTIxN2I1OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T13:20:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T13:20:22Z"}, "message": "[multiple changes]\n\n2017-01-23  Justin Squirek  <squirek@adacore.com>\n\n\t* exp_strm.ads, exp_strm.ads\n\t(Build_Record_Or_Elementary_Input_Function): Add an extra parameter so\n\tas to avoid getting the underlying type by default.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Remove use of\n\tunderlying type in the Iiput and output attribute cases when\n\tbuilding their respective functions.\n\n2017-01-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* scng.adb: Minor reformatting of error message.\n\n2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Do not attempt\n\tto freeze the return type of an expression funxtion that is a\n\tcompletion, if the type is a limited view and the non-limited\n\tview is available.\n\nFrom-SVN: r244805", "tree": {"sha": "be21cdd6af3376e4f6295c7bb6682d67cfc17248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be21cdd6af3376e4f6295c7bb6682d67cfc17248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7fd13182946da2c33fc2c1df6614122e217b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7fd13182946da2c33fc2c1df6614122e217b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7fd13182946da2c33fc2c1df6614122e217b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7fd13182946da2c33fc2c1df6614122e217b59/comments", "author": null, "committer": null, "parents": [{"sha": "cffcafda6a42033a18ed8eab86ef34b867eaae1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffcafda6a42033a18ed8eab86ef34b867eaae1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffcafda6a42033a18ed8eab86ef34b867eaae1e"}], "stats": {"total": 139, "additions": 96, "deletions": 43}, "files": [{"sha": "431885486a075c8e3d9e75bb8fa292b7b72fe2a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -1,3 +1,23 @@\n+2017-01-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_strm.ads, exp_strm.ads\n+\t(Build_Record_Or_Elementary_Input_Function): Add an extra parameter so\n+\tas to avoid getting the underlying type by default.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Remove use of\n+\tunderlying type in the Iiput and output attribute cases when\n+\tbuilding their respective functions.\n+\n+2017-01-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* scng.adb: Minor reformatting of error message.\n+\n+2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Do not attempt\n+\tto freeze the return type of an expression funxtion that is a\n+\tcompletion, if the type is a limited view and the non-limited\n+\tview is available.\n+\n 2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* par-ch4.adb (P_Aggregate_Or_Parent_Expr): Recognize delta"}, {"sha": "2655b80e4bb29b7f78eebe4d17ea7a09b64bff25", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -3744,18 +3744,26 @@ package body Exp_Attr is\n                --  A special case arises if we have a defined _Read routine,\n                --  since in this case we are required to call this routine.\n \n-               if Present (TSS (Base_Type (U_Type), TSS_Stream_Read)) then\n-                  Build_Record_Or_Elementary_Input_Function\n-                    (Loc, U_Type, Decl, Fname);\n-                  Insert_Action (N, Decl);\n+               declare\n+                  Typ : Entity_Id := P_Type;\n+               begin\n+                  if Present (Full_View (Typ)) then\n+                     Typ := Full_View (Typ);\n+                  end if;\n \n-               --  For normal cases, we call the I_xxx routine directly\n+                  if Present (TSS (Base_Type (Typ), TSS_Stream_Read)) then\n+                     Build_Record_Or_Elementary_Input_Function\n+                       (Loc, Typ, Decl, Fname, Use_Underlying => False);\n+                     Insert_Action (N, Decl);\n \n-               else\n-                  Rewrite (N, Build_Elementary_Input_Call (N));\n-                  Analyze_And_Resolve (N, P_Type);\n-                  return;\n-               end if;\n+                  --  For normal cases, we call the I_xxx routine directly\n+\n+                  else\n+                     Rewrite (N, Build_Elementary_Input_Call (N));\n+                     Analyze_And_Resolve (N, P_Type);\n+                     return;\n+                  end if;\n+               end;\n \n             --  Array type case\n \n@@ -4839,18 +4847,26 @@ package body Exp_Attr is\n                --  A special case arises if we have a defined _Write routine,\n                --  since in this case we are required to call this routine.\n \n-               if Present (TSS (Base_Type (U_Type), TSS_Stream_Write)) then\n-                  Build_Record_Or_Elementary_Output_Procedure\n-                    (Loc, U_Type, Decl, Pname);\n-                  Insert_Action (N, Decl);\n+               declare\n+                  Typ : Entity_Id := P_Type;\n+               begin\n+                  if Present (Full_View (Typ)) then\n+                     Typ := Full_View (Typ);\n+                  end if;\n \n-               --  For normal cases, we call the W_xxx routine directly\n+                  if Present (TSS (Base_Type (Typ), TSS_Stream_Write)) then\n+                     Build_Record_Or_Elementary_Output_Procedure\n+                       (Loc, Typ, Decl, Pname);\n+                     Insert_Action (N, Decl);\n \n-               else\n-                  Rewrite (N, Build_Elementary_Write_Call (N));\n-                  Analyze (N);\n-                  return;\n-               end if;\n+                  --  For normal cases, we call the W_xxx routine directly\n+\n+                  else\n+                     Rewrite (N, Build_Elementary_Write_Call (N));\n+                     Analyze (N);\n+                     return;\n+                  end if;\n+               end;\n \n             --  Array type case\n "}, {"sha": "20a7a7db5d9e8d9d726f82f66cdf02a27164ec40", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1116,23 +1116,28 @@ package body Exp_Strm is\n    --  an elementary type, then no Cn constants are defined.\n \n    procedure Build_Record_Or_Elementary_Input_Function\n-     (Loc  : Source_Ptr;\n-      Typ  : Entity_Id;\n-      Decl : out Node_Id;\n-      Fnam : out Entity_Id)\n+     (Loc            : Source_Ptr;\n+      Typ            : Entity_Id;\n+      Decl           : out Node_Id;\n+      Fnam           : out Entity_Id;\n+      Use_Underlying : Boolean := True)\n    is\n-      B_Typ      : constant Entity_Id := Underlying_Type (Base_Type (Typ));\n+      B_Typ      : Entity_Id := Base_Type (Typ);\n       Cn         : Name_Id;\n       Constr     : List_Id;\n       Decls      : List_Id;\n       Discr      : Entity_Id;\n-      Discr_Elmt : Elmt_Id            := No_Elmt;\n+      Discr_Elmt : Elmt_Id   := No_Elmt;\n       J          : Pos;\n       Obj_Decl   : Node_Id;\n       Odef       : Node_Id;\n       Stms       : List_Id;\n \n    begin\n+      if Use_Underlying then\n+         B_Typ := Underlying_Type (B_Typ);\n+      end if;\n+\n       Decls  := New_List;\n       Constr := New_List;\n "}, {"sha": "397206c93fb7e39957bb3f2c8d6272551e9abffd", "filename": "gcc/ada/exp_strm.ads", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_strm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fexp_strm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.ads?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -105,14 +105,17 @@ package Exp_Strm is\n    --  the same manner as is done for 'Output.\n \n    procedure Build_Record_Or_Elementary_Input_Function\n-     (Loc  : Source_Ptr;\n-      Typ  : Entity_Id;\n-      Decl : out Node_Id;\n-      Fnam : out Entity_Id);\n-   --  Build function for Input attribute for record type or for an\n-   --  elementary type (the latter is used only in the case where a\n-   --  user defined Read routine is defined, since in other cases,\n-   --  Input calls the appropriate runtime library routine directly.\n+     (Loc            : Source_Ptr;\n+      Typ            : Entity_Id;\n+      Decl           : out Node_Id;\n+      Fnam           : out Entity_Id;\n+      Use_Underlying : Boolean := True);\n+   --  Build function for Input attribute for record type or for an elementary\n+   --  type (the latter is used only in the case where a user defined Read\n+   --  routine is defined, since in other cases, Input calls the appropriate\n+   --  runtime library routine directly. The flag Use_Underlying controls\n+   --  weither the base type or the underlying type of the base type of Typ is\n+   --  used during construction.\n \n    procedure Build_Record_Or_Elementary_Output_Procedure\n      (Loc  : Source_Ptr;"}, {"sha": "a46b80ce64b1a0641026d5d086bf772473badf72", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -1613,7 +1613,7 @@ package body Scng is\n \n          when '@' =>\n             if Ada_Version < Ada_2020 then\n-               Error_Msg (\"target_name is an Ada2020 feature\", Scan_Ptr);\n+               Error_Msg (\"target_name is an Ada 2020 feature\", Scan_Ptr);\n                Scan_Ptr := Scan_Ptr + 1;\n \n             else"}, {"sha": "5a54515c4b9631ffea7ea84065f550dc970466fb", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7fd13182946da2c33fc2c1df6614122e217b59/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4b7fd13182946da2c33fc2c1df6614122e217b59", "patch": "@@ -381,17 +381,26 @@ package body Sem_Ch6 is\n \n          --  An entity can only be frozen if it is complete, so if the type\n          --  is still unfrozen it must still be incomplete in some way, e.g.\n-         --  a privte type without a full view, or a type derived from such\n-         --  in an enclosing scope. Except in a generic context, such an\n-         --  incomplete type is an error.\n+         --  a private type without a full view, or a type derived from such\n+         --  in an enclosing scope. Except in a generic context, such use of\n+         --  an incomplete type is an error. On the other hand, if this is a\n+         --  limited view of a type, the type is declared in another unit and\n+         --  frozen there. We must be in a context seeing the nonlimited view\n+         --  of the type, which will be installed when the body is compiled.\n \n          if not Is_Frozen (Ret_Type)\n            and then not Is_Generic_Type (Ret_Type)\n            and then not Inside_A_Generic\n          then\n-            Error_Msg_NE\n-              (\"premature use of private type&\",\n-               Result_Definition (Specification (N)), Ret_Type);\n+            if From_Limited_With (Ret_Type)\n+              and then Present (Non_Limited_View (Ret_Type))\n+            then\n+               null;\n+            else\n+               Error_Msg_NE\n+                 (\"premature use of private type&\",\n+                  Result_Definition (Specification (N)), Ret_Type);\n+            end if;\n          end if;\n \n          if Is_Access_Type (Etype (Prev)) then"}]}