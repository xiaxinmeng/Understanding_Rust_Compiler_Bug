{"sha": "c3e080363d46a4dab3b466b8636a3319835a5302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlMDgwMzYzZDQ2YTRkYWIzYjQ2NmI4NjM2YTMzMTk4MzVhNTMwMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-22T00:44:54Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-22T00:44:54Z"}, "message": "reduce conditional compilation for HARD_FRAME_POINTER_IS_FRAME_POINTER\n\ngcc/ChangeLog:\n\n2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* alias.c (init_alias_target): Remove ifdef\n\t* HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* df-scan.c (df_insn_refs_collect): Likewise.\n\t(df_get_regular_block_artificial_uses): Likewise.\n\t(df_get_eh_block_artificial_uses): Likewise.\n\t(df_get_entry_block_def_set): Likewise.\n\t(df_get_exit_block_use_set): Likewise.\n\t* emit-rtl.c (gen_rtx_REG): Likewise.\n\t* ira.c (ira_setup_eliminable_regset): Likewise.\n\t* reginfo.c (init_reg_sets_1): Likewise.\n\t* regrename.c (rename_chains): Likewise.\n\t* reload1.c (reload): Likewise.\n\t(eliminate_regs_in_insn): Likewise.\n\t* resource.c (mark_referenced_resources): Likewise.\n\t(init_resource_info): Likewise.\n\nFrom-SVN: r222300", "tree": {"sha": "20d4055a690f29c4eaf7bf17c70a4ed895de949e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d4055a690f29c4eaf7bf17c70a4ed895de949e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e080363d46a4dab3b466b8636a3319835a5302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e080363d46a4dab3b466b8636a3319835a5302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e080363d46a4dab3b466b8636a3319835a5302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e080363d46a4dab3b466b8636a3319835a5302/comments", "author": null, "committer": null, "parents": [{"sha": "cbc7d031c4a563565f3351b36fbcb323567627fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc7d031c4a563565f3351b36fbcb323567627fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc7d031c4a563565f3351b36fbcb323567627fc"}], "stats": {"total": 120, "additions": 66, "deletions": 54}, "files": [{"sha": "2f39b8ce1dffd90d29efbc81101de3bf8ecf6f15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -1,3 +1,21 @@\n+2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* alias.c (init_alias_target): Remove ifdef\n+\t* HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* df-scan.c (df_insn_refs_collect): Likewise.\n+\t(df_get_regular_block_artificial_uses): Likewise.\n+\t(df_get_eh_block_artificial_uses): Likewise.\n+\t(df_get_entry_block_def_set): Likewise.\n+\t(df_get_exit_block_use_set): Likewise.\n+\t* emit-rtl.c (gen_rtx_REG): Likewise.\n+\t* ira.c (ira_setup_eliminable_regset): Likewise.\n+\t* reginfo.c (init_reg_sets_1): Likewise.\n+\t* regrename.c (rename_chains): Likewise.\n+\t* reload1.c (reload): Likewise.\n+\t(eliminate_regs_in_insn): Likewise.\n+\t* resource.c (mark_referenced_resources): Likewise.\n+\t(init_resource_info): Likewise.\n+\n 2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (MASK_RETURN_ADDR): New definition."}, {"sha": "8f486600063be2fc3a7304d5b78732349bfcd9b4", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -2765,10 +2765,9 @@ init_alias_target (void)\n     = unique_base_value (UNIQUE_BASE_VALUE_ARGP);\n   static_reg_base_value[FRAME_POINTER_REGNUM]\n     = unique_base_value (UNIQUE_BASE_VALUE_FP);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-  static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n-    = unique_base_value (UNIQUE_BASE_VALUE_HFP);\n-#endif\n+  if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+    static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n+      = unique_base_value (UNIQUE_BASE_VALUE_HFP);\n }\n \n /* Set MEMORY_MODIFIED when X modifies DATA (that is assumed"}, {"sha": "69332a838664b0bac5fd9cbb2d160186654c39cf", "filename": "gcc/df-scan.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -3247,12 +3247,11 @@ df_insn_refs_collect (struct df_collection_rec *collection_rec,\n                          regno_reg_rtx[FRAME_POINTER_REGNUM],\n                          NULL, bb, insn_info,\n                          DF_REF_REG_USE, 0);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-          df_ref_record (DF_REF_BASE, collection_rec,\n-                         regno_reg_rtx[HARD_FRAME_POINTER_REGNUM],\n-                         NULL, bb, insn_info,\n-                         DF_REF_REG_USE, 0);\n-#endif\n+\t  if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\t    df_ref_record (DF_REF_BASE, collection_rec,\n+\t\t\t   regno_reg_rtx[HARD_FRAME_POINTER_REGNUM],\n+\t\t\t   NULL, bb, insn_info,\n+\t\t\t   DF_REF_REG_USE, 0);\n           break;\n         default:\n           break;\n@@ -3442,9 +3441,9 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n \t reference of the frame pointer.  */\n       bitmap_set_bit (regular_block_artificial_uses, FRAME_POINTER_REGNUM);\n \n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-      bitmap_set_bit (regular_block_artificial_uses, HARD_FRAME_POINTER_REGNUM);\n-#endif\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\tbitmap_set_bit (regular_block_artificial_uses,\n+\t\t\tHARD_FRAME_POINTER_REGNUM);\n \n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n@@ -3494,9 +3493,9 @@ df_get_eh_block_artificial_uses (bitmap eh_block_artificial_uses)\n       if (frame_pointer_needed)\n \t{\n \t  bitmap_set_bit (eh_block_artificial_uses, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-\t  bitmap_set_bit (eh_block_artificial_uses, HARD_FRAME_POINTER_REGNUM);\n-#endif\n+\t  if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\t    bitmap_set_bit (eh_block_artificial_uses,\n+\t\t\t    HARD_FRAME_POINTER_REGNUM);\n \t}\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       if (fixed_regs[ARG_POINTER_REGNUM])\n@@ -3580,11 +3579,11 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n       /* Any reference to any pseudo before reload is a potential\n \t reference of the frame pointer.  */\n       bitmap_set_bit (entry_block_defs, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\n       /* If they are different, also mark the hard frame pointer as live.  */\n-      if (!LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t  && !LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n \tbitmap_set_bit (entry_block_defs, HARD_FRAME_POINTER_REGNUM);\n-#endif\n     }\n \n   /* These registers are live everywhere.  */\n@@ -3718,11 +3717,11 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n   if ((!reload_completed) || frame_pointer_needed)\n     {\n       bitmap_set_bit (exit_block_uses, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\n       /* If they are different, also mark the hard frame pointer as live.  */\n-      if (!LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t  && !LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n \tbitmap_set_bit (exit_block_uses, HARD_FRAME_POINTER_REGNUM);\n-#endif\n     }\n \n   /* Many architectures have a GP register even without flag_pic."}, {"sha": "b48f88b5f7cf6eb95b95eabc78e26b7d46249397", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -715,11 +715,11 @@ gen_rtx_REG (machine_mode mode, unsigned int regno)\n       if (regno == FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n \treturn frame_pointer_rtx;\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-      if (regno == HARD_FRAME_POINTER_REGNUM\n+\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t  && regno == HARD_FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n \treturn hard_frame_pointer_rtx;\n-#endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && !HARD_FRAME_POINTER_IS_ARG_POINTER\n       if (regno == ARG_POINTER_REGNUM)\n \treturn arg_pointer_rtx;"}, {"sha": "9dcbc62f1d4b31721fc945e77d927998601279db", "filename": "gcc/ira.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -2341,19 +2341,20 @@ ira_setup_eliminable_regset (void)\n       else\n \tdf_set_regs_ever_live (eliminables[i].from, true);\n     }\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-  if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))\n+  if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n     {\n-      SET_HARD_REG_BIT (eliminable_regset, HARD_FRAME_POINTER_REGNUM);\n-      if (frame_pointer_needed)\n-\tSET_HARD_REG_BIT (ira_no_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n+      if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))\n+\t{\n+\t  SET_HARD_REG_BIT (eliminable_regset, HARD_FRAME_POINTER_REGNUM);\n+\t  if (frame_pointer_needed)\n+\t    SET_HARD_REG_BIT (ira_no_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n+\t}\n+      else if (frame_pointer_needed)\n+\terror (\"%s cannot be used in asm here\",\n+\t       reg_names[HARD_FRAME_POINTER_REGNUM]);\n+      else\n+\tdf_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);\n     }\n-  else if (frame_pointer_needed)\n-    error (\"%s cannot be used in asm here\",\n-\t   reg_names[HARD_FRAME_POINTER_REGNUM]);\n-  else\n-    df_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);\n-#endif\n \n #else\n   if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))"}, {"sha": "bc2f8de5d3ae41149099666f5ad39219ce0cfe74", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -461,10 +461,9 @@ init_reg_sets_1 (void)\n \t}\n       else if (i == FRAME_POINTER_REGNUM)\n \t;\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-      else if (i == HARD_FRAME_POINTER_REGNUM)\n+      else if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t       && i == HARD_FRAME_POINTER_REGNUM)\n \t;\n-#endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n       else if (i == ARG_POINTER_REGNUM && fixed_regs[i])\n \t;"}, {"sha": "147aaa89e4e0c3cf1fe2917bc1de3cff12590dfe", "filename": "gcc/regrename.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -438,9 +438,8 @@ rename_chains (void)\n   if (frame_pointer_needed)\n     {\n       add_to_hard_reg_set (&unavailable, Pmode, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-      add_to_hard_reg_set (&unavailable, Pmode, HARD_FRAME_POINTER_REGNUM);\n-#endif\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\tadd_to_hard_reg_set (&unavailable, Pmode, HARD_FRAME_POINTER_REGNUM);\n     }\n \n   FOR_EACH_VEC_ELT (id_to_chain, i, this_head)"}, {"sha": "82b106e6bc6e6e481acfbfd4554c979cd44ffbf4", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -914,10 +914,9 @@ reload (rtx_insn *first, int global)\n \tspill_hard_reg (from, 1);\n     }\n \n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-  if (frame_pointer_needed)\n+  if (!HARD_FRAME_POINTER_IS_FRAME_POINTER && frame_pointer_needed)\n     spill_hard_reg (HARD_FRAME_POINTER_REGNUM, 1);\n-#endif\n+\n   finish_spills (global);\n \n   /* From now on, we may need to generate moves differently.  We may also\n@@ -3281,13 +3280,13 @@ eliminate_regs_in_insn (rtx_insn *insn, int replace)\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \tif (ep->from_rtx == SET_DEST (old_set) && ep->can_eliminate)\n \t  {\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t    /* If this is setting the frame pointer register to the\n \t       hardware frame pointer register and this is an elimination\n \t       that will be done (tested above), this insn is really\n \t       adjusting the frame pointer downward to compensate for\n \t       the adjustment done before a nonlocal goto.  */\n-\t    if (ep->from == FRAME_POINTER_REGNUM\n+\t    if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t\t&& ep->from == FRAME_POINTER_REGNUM\n \t\t&& ep->to == HARD_FRAME_POINTER_REGNUM)\n \t      {\n \t\trtx base = SET_SRC (old_set);\n@@ -3347,7 +3346,6 @@ eliminate_regs_in_insn (rtx_insn *insn, int replace)\n \t\t    goto done;\n \t\t  }\n \t      }\n-#endif\n \n \t    /* In this case this insn isn't serving a useful purpose.  We\n \t       will delete it in reload_as_needed once we know that this"}, {"sha": "9a013b3ec183eb08b62611d8976c3cdb0568732f", "filename": "gcc/resource.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e080363d46a4dab3b466b8636a3319835a5302/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=c3e080363d46a4dab3b466b8636a3319835a5302", "patch": "@@ -335,9 +335,8 @@ mark_referenced_resources (rtx x, struct resources *res,\n \t  if (frame_pointer_needed)\n \t    {\n \t      SET_HARD_REG_BIT (res->regs, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-\t      SET_HARD_REG_BIT (res->regs, HARD_FRAME_POINTER_REGNUM);\n-#endif\n+\t      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\t\tSET_HARD_REG_BIT (res->regs, HARD_FRAME_POINTER_REGNUM);\n \t    }\n \n \t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -1190,9 +1189,9 @@ init_resource_info (rtx_insn *epilogue_insn)\n   if (frame_pointer_needed)\n     {\n       SET_HARD_REG_BIT (end_of_function_needs.regs, FRAME_POINTER_REGNUM);\n-#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-      SET_HARD_REG_BIT (end_of_function_needs.regs, HARD_FRAME_POINTER_REGNUM);\n-#endif\n+      if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n+\tSET_HARD_REG_BIT (end_of_function_needs.regs,\n+\t\t\t  HARD_FRAME_POINTER_REGNUM);\n     }\n   if (!(frame_pointer_needed\n \t&& EXIT_IGNORE_STACK"}]}