{"sha": "b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1YjU5Nzk0NjM1YjZkNmIzZWJkZGE2YmJjN2YzMmQ4MDExMThmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-14T10:42:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-14T10:42:12Z"}, "message": "cfgloop.h (struct loop): Rename force_vect into force_vectorize.\n\n\t* cfgloop.h (struct loop): Rename force_vect into force_vectorize.\n\t* function.h (struct function): Rename has_force_vect_loops into\n\thas_force_vectorize_loops.\n\t* lto-streamer-in.c (input_cfg): Adjust for renaming.\n\t(input_struct_function_base): Likewise.\n\t* lto-streamer-out.c (output_cfg): Likewise.\n\t(output_struct_function_base): Likewise.\n\t* omp-low.c (expand_omp_simd): Likewise.\n\t* tree-cfg.c (move_sese_region_to_fn): Likewise.\n\t* tree-if-conv.c (ifcvt_can_use_mask_load_store): Likewise.\n\t(version_loop_for_if_conversion): Likewise.\n\t(tree_if_conversion): Likewise.\n\t(main_tree_if_conversion): Likewise.\n\t(gate_tree_if_conversion): Likewise.\n\t* tree-inline.c (copy_loops): Likewise.\n\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1): Likewise.\n\t* tree-ssa-loop.c (tree_loop_vectorize): Likewise.\n\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Likewise.\n\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vectorizer.c (vectorize_loops): Likewise.\n\t* tree-vectorizer.h (unlimited_cost_model): Likewise.\n\nFrom-SVN: r209362", "tree": {"sha": "4825c20c81ab8820a8e1f8fb33d540d4815b5a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4825c20c81ab8820a8e1f8fb33d540d4815b5a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/comments", "author": null, "committer": null, "parents": [{"sha": "e5b1a4bc244fd096151c1299fa5241ce0c3a222a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b1a4bc244fd096151c1299fa5241ce0c3a222a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b1a4bc244fd096151c1299fa5241ce0c3a222a"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "e3e418036d00be9f99981f8ee2cf63a077010c24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -1,3 +1,27 @@\n+2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgloop.h (struct loop): Rename force_vect into force_vectorize.\n+\t* function.h (struct function): Rename has_force_vect_loops into\n+\thas_force_vectorize_loops.\n+\t* lto-streamer-in.c (input_cfg): Adjust for renaming.\n+\t(input_struct_function_base): Likewise.\n+\t* lto-streamer-out.c (output_cfg): Likewise.\n+\t(output_struct_function_base): Likewise.\n+\t* omp-low.c (expand_omp_simd): Likewise.\n+\t* tree-cfg.c (move_sese_region_to_fn): Likewise.\n+\t* tree-if-conv.c (ifcvt_can_use_mask_load_store): Likewise.\n+\t(version_loop_for_if_conversion): Likewise.\n+\t(tree_if_conversion): Likewise.\n+\t(main_tree_if_conversion): Likewise.\n+\t(gate_tree_if_conversion): Likewise.\n+\t* tree-inline.c (copy_loops): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1): Likewise.\n+\t* tree-ssa-loop.c (tree_loop_vectorize): Likewise.\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Likewise.\n+\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vectorizer.c (vectorize_loops): Likewise.\n+\t* tree-vectorizer.h (unlimited_cost_model): Likewise.\n+\n 2014-04-14  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/60720"}, {"sha": "2e160b202bb4ee5dbee5bd2af5d6ed7629eec1bd", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -174,7 +174,7 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n   int safelen;\n \n   /* True if we should try harder to vectorize this loop.  */\n-  bool force_vect;\n+  bool force_vectorize;\n \n   /* True if this loop should never be vectorized.  */\n   bool dont_vectorize;"}, {"sha": "0aa6c9a15459919070c4096b1c5b8e97765a4ae2", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -661,8 +661,8 @@ struct GTY(()) function {\n   unsigned int is_thunk : 1;\n \n   /* Nonzero if the current function contains any loops with\n-     loop->force_vect set.  */\n-  unsigned int has_force_vect_loops : 1;\n+     loop->force_vectorize set.  */\n+  unsigned int has_force_vectorize_loops : 1;\n \n   /* Nonzero if the current function contains any loops with\n      nonzero value in loop->simduid.  */"}, {"sha": "c3fa7b62192f5c9e79d96d7d2f7082b39de3324c", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -718,7 +718,7 @@ input_cfg (struct lto_input_block *ib, struct data_in *data_in,\n \n       /* Read OMP SIMD related info.  */\n       loop->safelen = streamer_read_hwi (ib);\n-      loop->force_vect = streamer_read_hwi (ib);\n+      loop->force_vectorize = streamer_read_hwi (ib);\n       loop->simduid = stream_read_tree (ib, data_in);\n \n       place_new_loop (fn, loop);\n@@ -884,7 +884,7 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->has_nonlocal_label = bp_unpack_value (&bp, 1);\n   fn->calls_alloca = bp_unpack_value (&bp, 1);\n   fn->calls_setjmp = bp_unpack_value (&bp, 1);\n-  fn->has_force_vect_loops = bp_unpack_value (&bp, 1);\n+  fn->has_force_vectorize_loops = bp_unpack_value (&bp, 1);\n   fn->has_simduid_loops = bp_unpack_value (&bp, 1);\n   fn->va_list_fpr_size = bp_unpack_value (&bp, 8);\n   fn->va_list_gpr_size = bp_unpack_value (&bp, 8);"}, {"sha": "cd324c162bb41f916ffb78f336d52ab4b4c7b5a0", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -1693,7 +1693,7 @@ output_cfg (struct output_block *ob, struct function *fn)\n \n       /* Write OMP SIMD related info.  */\n       streamer_write_hwi (ob, loop->safelen);\n-      streamer_write_hwi (ob, loop->force_vect);\n+      streamer_write_hwi (ob, loop->force_vectorize);\n       stream_write_tree (ob, loop->simduid, true);\n     }\n \n@@ -1788,7 +1788,7 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->has_nonlocal_label, 1);\n   bp_pack_value (&bp, fn->calls_alloca, 1);\n   bp_pack_value (&bp, fn->calls_setjmp, 1);\n-  bp_pack_value (&bp, fn->has_force_vect_loops, 1);\n+  bp_pack_value (&bp, fn->has_force_vectorize_loops, 1);\n   bp_pack_value (&bp, fn->has_simduid_loops, 1);\n   bp_pack_value (&bp, fn->va_list_fpr_size, 8);\n   bp_pack_value (&bp, fn->va_list_gpr_size, 8);"}, {"sha": "ed4e218571a49a0adde9fa261cd30356e4cde078", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -6843,8 +6843,8 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  && flag_tree_loop_optimize\n \t  && loop->safelen > 1)\n \t{\n-\t  loop->force_vect = true;\n-\t  cfun->has_force_vect_loops = true;\n+\t  loop->force_vectorize = true;\n+\t  cfun->has_force_vectorize_loops = true;\n \t}\n     }\n }\n@@ -11487,9 +11487,9 @@ simd_clone_adjust (struct cgraph_node *node)\n \n   /* Mostly annotate the loop for the vectorizer (the rest is done below).  */\n   struct loop *loop = alloc_loop ();\n-  cfun->has_force_vect_loops = true;\n+  cfun->has_force_vectorize_loops = true;\n   loop->safelen = node->simdclone->simdlen;\n-  loop->force_vect = true;\n+  loop->force_vectorize = true;\n   loop->header = body_bb;\n   add_bb_to_loop (incr_bb, loop);\n "}, {"sha": "2f250da23b6a631c2fcb4ff766649ed669671abc", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -6967,7 +6967,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n     outer->num_nodes -= num_nodes;\n   loop0->num_nodes -= bbs.length () - num_nodes;\n \n-  if (saved_cfun->has_simduid_loops || saved_cfun->has_force_vect_loops)\n+  if (saved_cfun->has_simduid_loops || saved_cfun->has_force_vectorize_loops)\n     {\n       struct loop *aloop;\n       for (i = 0; vec_safe_iterate (loops->larray, i, &aloop); i++)\n@@ -6979,8 +6979,8 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \t\t\t\t\t   d.to_context);\n \t\tdest_cfun->has_simduid_loops = true;\n \t      }\n-\t    if (aloop->force_vect)\n-\t      dest_cfun->has_force_vect_loops = true;\n+\t    if (aloop->force_vectorize)\n+\t      dest_cfun->has_force_vectorize_loops = true;\n \t  }\n     }\n "}, {"sha": "7ff21329cf168325c84bd3f04d8d22c366fdd1b8", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -728,7 +728,7 @@ ifcvt_can_use_mask_load_store (gimple stmt)\n   basic_block bb = gimple_bb (stmt);\n   bool is_load;\n \n-  if (!(flag_tree_loop_vectorize || bb->loop_father->force_vect)\n+  if (!(flag_tree_loop_vectorize || bb->loop_father->force_vectorize)\n       || bb->loop_father->dont_vectorize\n       || !gimple_assign_single_p (stmt)\n       || gimple_has_volatile_ops (stmt))\n@@ -1926,7 +1926,7 @@ version_loop_for_if_conversion (struct loop *loop)\n   if (new_loop == NULL)\n     return false;\n   new_loop->dont_vectorize = true;\n-  new_loop->force_vect = false;\n+  new_loop->force_vectorize = false;\n   gsi = gsi_last_bb (cond_bb);\n   gimple_call_set_arg (g, 1, build_int_cst (integer_type_node, new_loop->num));\n   gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n@@ -1950,7 +1950,7 @@ tree_if_conversion (struct loop *loop)\n     goto cleanup;\n \n   if (any_mask_load_store\n-      && ((!flag_tree_loop_vectorize && !loop->force_vect)\n+      && ((!flag_tree_loop_vectorize && !loop->force_vectorize)\n \t  || loop->dont_vectorize))\n     goto cleanup;\n \n@@ -1998,7 +1998,7 @@ main_tree_if_conversion (void)\n   FOR_EACH_LOOP (loop, 0)\n     if (flag_tree_loop_if_convert == 1\n \t|| flag_tree_loop_if_convert_stores == 1\n-\t|| ((flag_tree_loop_vectorize || loop->force_vect)\n+\t|| ((flag_tree_loop_vectorize || loop->force_vectorize)\n \t    && !loop->dont_vectorize))\n       todo |= tree_if_conversion (loop);\n \n@@ -2018,7 +2018,7 @@ main_tree_if_conversion (void)\n static bool\n gate_tree_if_conversion (void)\n {\n-  return (((flag_tree_loop_vectorize || cfun->has_force_vect_loops)\n+  return (((flag_tree_loop_vectorize || cfun->has_force_vectorize_loops)\n \t   && flag_tree_loop_if_convert != 0)\n \t  || flag_tree_loop_if_convert == 1\n \t  || flag_tree_loop_if_convert_stores == 1);"}, {"sha": "7133c3cfc81a17587dfd8879d6f38754233cc659", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -2354,10 +2354,10 @@ copy_loops (copy_body_data *id,\n \t      dest_loop->simduid = remap_decl (src_loop->simduid, id);\n \t      cfun->has_simduid_loops = true;\n \t    }\n-\t  if (src_loop->force_vect)\n+\t  if (src_loop->force_vectorize)\n \t    {\n-\t      dest_loop->force_vect = true;\n-\t      cfun->has_force_vect_loops = true;\n+\t      dest_loop->force_vectorize = true;\n+\t      cfun->has_force_vectorize_loops = true;\n \t    }\n \t  dest_loop->safelen = src_loop->safelen;\n "}, {"sha": "cdf1559906c1bc7cc2217a861fa658a84b476358", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -1129,7 +1129,7 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n \n   /* Don't unroll #pragma omp simd loops until the vectorizer\n      attempts to vectorize those.  */\n-  if (loop->force_vect)\n+  if (loop->force_vectorize)\n     return false;\n \n   /* Try to unroll this loop.  */"}, {"sha": "4008b2bf4397e80a3e3304b065c4ac215ac05a67", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -157,7 +157,7 @@ tree_loop_vectorize (void)\n static bool\n gate_tree_loop_vectorize (void)\n {\n-  return flag_tree_loop_vectorize || cfun->has_force_vect_loops;\n+  return flag_tree_loop_vectorize || cfun->has_force_vectorize_loops;\n }\n \n namespace {"}, {"sha": "f1aa14d6eb73ad00ab6088e9e1c0a4740ce93180", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -350,7 +350,7 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n   if (!do_store_elim)\n     replace_conditional_negation\n       = ((!optimize_size && optimize >= 2)\n-\t || (((flag_tree_loop_vectorize || cfun->has_force_vect_loops)\n+\t || (((flag_tree_loop_vectorize || cfun->has_force_vectorize_loops)\n \t      && flag_tree_loop_if_convert != 0)\n \t     || flag_tree_loop_if_convert == 1\n \t     || flag_tree_loop_if_convert_stores == 1));"}, {"sha": "def3bc46174cc0950c9ed6ad7444cb3abb29570c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -2986,7 +2986,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n   /* vector version will never be profitable.  */\n   else\n     {\n-      if (LOOP_VINFO_LOOP (loop_vinfo)->force_vect)\n+      if (LOOP_VINFO_LOOP (loop_vinfo)->force_vectorize)\n \twarning_at (vect_location, OPT_Wopenmp_simd, \"vectorization \"\n \t\t    \"did not happen for a simd loop\");\n "}, {"sha": "765e38f689aba652fb329b7074c9fbe313c2b8d3", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -417,7 +417,7 @@ vectorize_loops (void)\n       any_ifcvt_loops = true;\n     else if ((flag_tree_loop_vectorize\n \t      && optimize_loop_nest_for_speed_p (loop))\n-\t     || loop->force_vect)\n+\t     || loop->force_vectorize)\n       {\n \tloop_vec_info loop_vinfo;\n \tvect_location = find_loop_location (loop);\n@@ -477,7 +477,7 @@ vectorize_loops (void)\n \tnum_vectorized_loops++;\n \t/* Now that the loop has been vectorized, allow it to be unrolled\n \t   etc.  */\n-\tloop->force_vect = false;\n+\tloop->force_vectorize = false;\n \n \tif (loop->simduid)\n \t  {"}, {"sha": "035d654e7ad6354d69972c08c6ecc64aed97b071", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b59794635b6d6b3ebdda6bbc7f32d801118f6/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "patch": "@@ -958,7 +958,7 @@ known_alignment_for_access_p (struct data_reference *data_ref_info)\n static inline bool\n unlimited_cost_model (loop_p loop)\n {\n-  if (loop != NULL && loop->force_vect\n+  if (loop != NULL && loop->force_vectorize\n       && flag_simd_cost_model != VECT_COST_MODEL_DEFAULT)\n     return flag_simd_cost_model == VECT_COST_MODEL_UNLIMITED;\n   return (flag_vect_cost_model == VECT_COST_MODEL_UNLIMITED);"}]}