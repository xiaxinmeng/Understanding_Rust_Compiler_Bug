{"sha": "4ae08f95bb712ae37974e429d6c572a2300a0581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlMDhmOTViYjcxMmFlMzc5NzRlNDI5ZDZjNTcyYTIzMDBhMDU4MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-08-24T12:08:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-24T12:08:35Z"}, "message": "c-pragma.h: Move weak_syms and weak_decls...\n\n        * c-pragma.h: Move weak_syms and weak_decls...\n        * varasm.c: ...here.  Now static.\n        (declare_weak, weak_finish, remove_from_pending_weak_list): Don't\n        depend on HANDLE_PRAGMA_WEAK.\n\nFrom-SVN: r45146", "tree": {"sha": "47e70bd01e97f65c98921799d510b40da48472f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47e70bd01e97f65c98921799d510b40da48472f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae08f95bb712ae37974e429d6c572a2300a0581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae08f95bb712ae37974e429d6c572a2300a0581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae08f95bb712ae37974e429d6c572a2300a0581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae08f95bb712ae37974e429d6c572a2300a0581/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0213a355281c1ce387d9fae4061d18f6b9bcd54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0213a355281c1ce387d9fae4061d18f6b9bcd54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0213a355281c1ce387d9fae4061d18f6b9bcd54e"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "ef1c8a94ebaf094fd75eead783e67fe159a13256", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ae08f95bb712ae37974e429d6c572a2300a0581", "patch": "@@ -1,5 +1,10 @@\n 2001-08-23  Jason Merrill  <jason_merrill@redhat.com>\n \n+\t* c-pragma.h: Move weak_syms and weak_decls...\n+\t* varasm.c: ...here.  Now static.\n+\t(declare_weak, weak_finish, remove_from_pending_weak_list): Don't\n+\tdepend on HANDLE_PRAGMA_WEAK.\n+\n \t* c-common.c (c_alignof, c_alignof_expr): Move here...\n \t* c-typeck.c: ...from here.\n \t* c-tree.h, c-common.h: Adjust."}, {"sha": "f60a5662bd4a3d827b4e4856819616d9daaf236b", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=4ae08f95bb712ae37974e429d6c572a2300a0581", "patch": "@@ -43,17 +43,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n \n #ifdef HANDLE_PRAGMA_WEAK\n-/* This structure contains any weak symbol declarations waiting to be emitted.  */\n-struct weak_syms\n-{\n-  struct weak_syms * next;\n-  const char * name;\n-  const char * value;\n-};\n-\n-/* Declared in varasm.c */\n-extern struct weak_syms * weak_decls;\n-\n extern int add_weak PARAMS ((const char *, const char *));\n #endif /* HANDLE_PRAGMA_WEAK */\n "}, {"sha": "7113d8aa8fe9a0220230ad278104e3d5165b939e", "filename": "gcc/varasm.c", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae08f95bb712ae37974e429d6c572a2300a0581/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4ae08f95bb712ae37974e429d6c572a2300a0581", "patch": "@@ -163,9 +163,7 @@ static void output_after_function_constants PARAMS ((void));\n static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n static void output_constructor\t\tPARAMS ((tree, int, unsigned));\n-#ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n-#endif\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n #ifdef ASM_OUTPUT_BSS\n@@ -4801,7 +4799,18 @@ output_constructor (exp, size, align)\n     assemble_zeros (size - total_bytes);\n }\n \n-#ifdef HANDLE_PRAGMA_WEAK\n+/* This structure contains any weak symbol declarations waiting to be\n+   emitted.  */\n+\n+struct weak_syms\n+{\n+  struct weak_syms * next;\n+  const char * name;\n+  const char * value;\n+};\n+\n+static struct weak_syms * weak_decls;\n+\n /* Add function NAME to the weak symbols list.  VALUE is a weak alias\n    associatd with NAME.  */\n    \n@@ -4812,7 +4821,7 @@ add_weak (name, value)\n {\n   struct weak_syms *weak;\n \n-  weak = (struct weak_syms *) permalloc (sizeof (struct weak_syms));\n+  weak = (struct weak_syms *) xmalloc (sizeof (struct weak_syms));\n \n   if (weak == NULL)\n     return 0;\n@@ -4824,7 +4833,6 @@ add_weak (name, value)\n \n   return 1;\n }\n-#endif /* HANDLE_PRAGMA_WEAK */\n \n /* Declare DECL to be a weak symbol.  */\n \n@@ -4837,55 +4845,62 @@ declare_weak (decl)\n   else if (TREE_ASM_WRITTEN (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must precede definition\");\n   else if (SUPPORTS_WEAK)\n-    DECL_WEAK (decl) = 1;\n-#ifdef HANDLE_PRAGMA_WEAK\n-   add_weak (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), NULL);\n-#endif\n+    add_weak (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), NULL);\n+  else\n+    warning_with_decl (decl, \"weak declaration of `%s' not supported\");\n+\n+  DECL_WEAK (decl) = 1;\n }\n \n /* Emit any pending weak declarations.  */\n \n-#ifdef HANDLE_PRAGMA_WEAK\n-struct weak_syms * weak_decls;\n-#endif\n-\n void\n weak_finish ()\n {\n-#ifdef HANDLE_PRAGMA_WEAK\n-  if (HANDLE_PRAGMA_WEAK)\n+  if (SUPPORTS_WEAK)\n     {\n       struct weak_syms *t;\n       for (t = weak_decls; t; t = t->next)\n \t{\n-\t  if (t->name)\n-\t    ASM_OUTPUT_WEAK_ALIAS (asm_out_file, t->name, t->value);\n+#ifdef ASM_OUTPUT_WEAK_ALIAS\n+\t  ASM_OUTPUT_WEAK_ALIAS (asm_out_file, t->name, t->value);\n+#else\n+#ifdef ASM_WEAKEN_LABEL\n+\t  if (t->value)\n+\t    abort ();\n+\t  ASM_WEAKEN_LABEL (asm_out_file, t->name);\n+#endif\n+#endif\n \t}\n     }\n-#endif\n }\n \n /* Remove NAME from the pending list of weak symbols.  This prevents\n    the compiler from emitting multiple .weak directives which confuses\n    some assemblers.  */\n-#ifdef ASM_WEAKEN_LABEL\n+\n static void\n remove_from_pending_weak_list (name)\n-     const char *name ATTRIBUTE_UNUSED;\n+     const char *name;\n {\n-#ifdef HANDLE_PRAGMA_WEAK\n-  if (HANDLE_PRAGMA_WEAK)\n+  struct weak_syms *t;\n+  struct weak_syms **p;\n+\n+  for (p = &weak_decls; *p; )\n     {\n-      struct weak_syms *t;\n-      for (t = weak_decls; t; t = t->next)\n+      t = *p;\n+      if (strcmp (name, t->name) == 0)\n \t{\n-\t  if (t->name && strcmp (name, t->name) == 0)\n-\t    t->name = NULL;\n+\t  *p = t->next;\n+\t  free (t);\n \t}\n+      else\n+\tp = &(t->next);\n     }\n-#endif\n }\n-#endif\n+\n+/* Emit an assembler directive to make the symbol for DECL an alias to\n+   the symbol for TARGET.  */\n \n void\n assemble_alias (decl, target)"}]}