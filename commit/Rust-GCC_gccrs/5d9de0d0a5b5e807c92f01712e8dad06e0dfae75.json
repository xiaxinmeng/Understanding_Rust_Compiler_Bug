{"sha": "5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ZGUwZDBhNWI1ZTgwN2M5MmYwMTcxMmU4ZGFkMDZlMGRmYWU3NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-09T10:01:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-09T10:01:31Z"}, "message": "re PR c++/54194 (misleading suggestion about arithmetic in operand of '|')\n\n2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54194\n\t* tree.h: Add EXPR_LOC_OR_LOC.\n\nc-family/\n2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54194\n\t* c-common.c (warn_about_parentheses): Add location_t parameter;\n\tuse EXPR_LOC_OR_LOC.\n\t* c-common.h: Update declaration.\n\nc/\n2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54194\n\t* c-typeck.c (parser_build_binary_op): Update warn_about_parentheses\n\tcall.\n\n/cp\n2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54194\n\t* typeck.c (build_x_binary_op): Update warn_about_parentheses call.\n\t* parser.c (cp_parser_binary_expression): Use SET_EXPR_LOCATION\n\ton current.lhs.\n\n/testsuite\n2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54194\n\t* g++.dg/warn/Wparentheses-26.C: Adjust.\n\t* g++.dg/warn/Wparentheses-27.C: New.\n\nFrom-SVN: r192246", "tree": {"sha": "4a7ba5472d1488e9d3da4e504e9a346b75459b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a7ba5472d1488e9d3da4e504e9a346b75459b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/comments", "author": null, "committer": null, "parents": [{"sha": "3b86789289cb2469341283dd2ee86d5c5b1bd30f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b86789289cb2469341283dd2ee86d5c5b1bd30f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b86789289cb2469341283dd2ee86d5c5b1bd30f"}], "stats": {"total": 220, "additions": 155, "deletions": 65}, "files": [{"sha": "9967ecf3f60940d365b2e83399bfc5412d039266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1,3 +1,8 @@\n+2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54194\n+\t* tree.h: Add EXPR_LOC_OR_LOC.\n+\n 2012-10-09  Nick Clifton  <nickc@redhat.com>\n \n \tPR rtl-optimization/54739"}, {"sha": "470d1b63b4b4712505add113f8c9ee2ff02a49ef", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1,3 +1,10 @@\n+2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54194\n+\t* c-common.c (warn_about_parentheses): Add location_t parameter;\n+\tuse EXPR_LOC_OR_LOC.\n+\t* c-common.h: Update declaration.\n+\n 2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/54427"}, {"sha": "b9186489a405a4847028fe350cf8336ddac0922e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 96, "deletions": 53, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -10527,7 +10527,7 @@ warn_array_subscript_with_type_char (tree index)\n    was enclosed in parentheses.  */\n \n void\n-warn_about_parentheses (enum tree_code code,\n+warn_about_parentheses (location_t loc, enum tree_code code,\n \t\t\tenum tree_code code_left, tree arg_left,\n \t\t\tenum tree_code code_right, tree arg_right)\n {\n@@ -10547,104 +10547,147 @@ warn_about_parentheses (enum tree_code code,\n   switch (code)\n     {\n     case LSHIFT_EXPR:\n-      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n-\twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around %<+%> inside %<<<%>\");\n-      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n-\twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around %<-%> inside %<<<%>\");\n+      if (code_left == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<+%> inside %<<<%>\");\n+      else if (code_right == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<+%> inside %<<<%>\");\n+      else if (code_left == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<-%> inside %<<<%>\");\n+      else if (code_right == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<-%> inside %<<<%>\");\n       return;\n \n     case RSHIFT_EXPR:\n-      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n-\twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around %<+%> inside %<>>%>\");\n-      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n-\twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around %<-%> inside %<>>%>\");\n+      if (code_left == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<+%> inside %<>>%>\");\n+      else if (code_right == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<+%> inside %<>>%>\");\n+      else if (code_left == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<-%> inside %<>>%>\");\n+      else if (code_right == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<-%> inside %<>>%>\");\n       return;\n \n     case TRUTH_ORIF_EXPR:\n-      if (code_left == TRUTH_ANDIF_EXPR || code_right == TRUTH_ANDIF_EXPR)\n-\twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around %<&&%> within %<||%>\");\n+      if (code_left == TRUTH_ANDIF_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<&&%> within %<||%>\");\n+      else if (code_right == TRUTH_ANDIF_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around %<&&%> within %<||%>\");\n       return;\n \n     case BIT_IOR_EXPR:\n       if (code_left == BIT_AND_EXPR || code_left == BIT_XOR_EXPR\n-\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n-\t  || code_right == BIT_AND_EXPR || code_right == BIT_XOR_EXPR\n-\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n-\twarning (OPT_Wparentheses,\n+\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around arithmetic in operand of %<|%>\");\n+      else if (code_right == BIT_AND_EXPR || code_right == BIT_XOR_EXPR\n+\t       || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around arithmetic in operand of %<|%>\");\n       /* Check cases like x|y==z */\n-      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n-\twarning (OPT_Wparentheses,\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<|%>\");\n+      else if (TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around comparison in operand of %<|%>\");\n       /* Check cases like !x | y */\n       else if (code_left == TRUTH_NOT_EXPR\n \t       && !APPEARS_TO_BE_BOOLEAN_EXPR_P (code_right, arg_right))\n-\twarning (OPT_Wparentheses, \"suggest parentheses around operand of \"\n-\t\t \"%<!%> or change %<|%> to %<||%> or %<!%> to %<~%>\");\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around operand of \"\n+\t\t    \"%<!%> or change %<|%> to %<||%> or %<!%> to %<~%>\");\n       return;\n \n     case BIT_XOR_EXPR:\n       if (code_left == BIT_AND_EXPR\n-\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n-\t  || code_right == BIT_AND_EXPR\n-\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n-\twarning (OPT_Wparentheses,\n+\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around arithmetic in operand of %<^%>\");\n+      else if (code_right == BIT_AND_EXPR\n+\t       || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around arithmetic in operand of %<^%>\");\n       /* Check cases like x^y==z */\n-      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n-\twarning (OPT_Wparentheses,\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<^%>\");\n+      else if (TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around comparison in operand of %<^%>\");\n       return;\n \n     case BIT_AND_EXPR:\n-      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n-\twarning (OPT_Wparentheses,\n+      if (code_left == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<+%> in operand of %<&%>\");\n+      else if (code_right == PLUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around %<+%> in operand of %<&%>\");\n-      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n-\twarning (OPT_Wparentheses,\n+      else if (code_left == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<-%> in operand of %<&%>\");\n+      else if (code_right == MINUS_EXPR)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around %<-%> in operand of %<&%>\");\n       /* Check cases like x&y==z */\n-      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n-\twarning (OPT_Wparentheses,\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<&%>\");\n+      else if (TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around comparison in operand of %<&%>\");\n       /* Check cases like !x & y */\n       else if (code_left == TRUTH_NOT_EXPR\n \t       && !APPEARS_TO_BE_BOOLEAN_EXPR_P (code_right, arg_right))\n-\twarning (OPT_Wparentheses, \"suggest parentheses around operand of \"\n-\t\t \"%<!%> or change %<&%> to %<&&%> or %<!%> to %<~%>\");\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t    \"suggest parentheses around operand of \"\n+\t\t    \"%<!%> or change %<&%> to %<&&%> or %<!%> to %<~%>\");\n       return;\n \n     case EQ_EXPR:\n-      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-          || TREE_CODE_CLASS (code_right) == tcc_comparison)\n-\twarning (OPT_Wparentheses,\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<==%>\");\n+      else if (TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around comparison in operand of %<==%>\");\n       return;\n     case NE_EXPR:\n-      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-          || TREE_CODE_CLASS (code_right) == tcc_comparison)\n-\twarning (OPT_Wparentheses,\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<!=%>\");\n+      else if (TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n \t\t \"suggest parentheses around comparison in operand of %<!=%>\");\n       return;\n \n     default:\n-      if (TREE_CODE_CLASS (code) == tcc_comparison\n-\t   && ((TREE_CODE_CLASS (code_left) == tcc_comparison\n+      if (TREE_CODE_CLASS (code) == tcc_comparison)\n+\t{\n+\t  if (TREE_CODE_CLASS (code_left) == tcc_comparison\n \t\t&& code_left != NE_EXPR && code_left != EQ_EXPR\n \t\t&& INTEGRAL_TYPE_P (TREE_TYPE (arg_left)))\n-\t       || (TREE_CODE_CLASS (code_right) == tcc_comparison\n+\t    warning_at (EXPR_LOC_OR_LOC (arg_left, loc), OPT_Wparentheses,\n+\t\t\t\"comparisons like %<X<=Y<=Z%> do not \"\n+\t\t\t\"have their mathematical meaning\");\n+\t  else if (TREE_CODE_CLASS (code_right) == tcc_comparison\n \t\t   && code_right != NE_EXPR && code_right != EQ_EXPR\n-\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (arg_right)))))\n-\twarning (OPT_Wparentheses, \"comparisons like %<X<=Y<=Z%> do not \"\n-\t\t \"have their mathematical meaning\");\n+\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (arg_right)))\n+\t    warning_at (EXPR_LOC_OR_LOC (arg_right, loc), OPT_Wparentheses,\n+\t\t\t\"comparisons like %<X<=Y<=Z%> do not \"\n+\t\t\t\"have their mathematical meaning\");\n+\t}\n       return;\n     }\n #undef NOT_A_BOOLEAN_EXPR_P"}, {"sha": "cb18b4e0747f38c441ea289e56d65ea4f36b8dce", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -989,7 +989,8 @@ extern tree builtin_type_for_size (int, bool);\n extern void c_common_mark_addressable_vec (tree);\n \n extern void warn_array_subscript_with_type_char (tree);\n-extern void warn_about_parentheses (enum tree_code,\n+extern void warn_about_parentheses (location_t,\n+\t\t\t\t    enum tree_code,\n \t\t\t\t    enum tree_code, tree,\n \t\t\t\t    enum tree_code, tree);\n extern void warn_for_unused_label (tree label);"}, {"sha": "2a3f9a09b124f48936f07a732280fd846055ee6b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1,3 +1,9 @@\n+2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54194\n+\t* c-typeck.c (parser_build_binary_op): Update warn_about_parentheses\n+\tcall.\n+\n 2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/54427"}, {"sha": "4855933c1813f23a52332199071fb091bd019526", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -3254,7 +3254,8 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   /* Check for cases such as x+y<<z which users are likely\n      to misinterpret.  */\n   if (warn_parentheses)\n-    warn_about_parentheses (code, code1, arg1.value, code2, arg2.value);\n+    warn_about_parentheses (input_location, code,\n+\t\t\t    code1, arg1.value, code2, arg2.value);\n \n   if (warn_logical_op)\n     warn_logical_operator (input_location, code, TREE_TYPE (result.value),"}, {"sha": "ab91500ab73473baee933d15db9e982f9b25ecee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1,3 +1,10 @@\n+2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54194\n+\t* typeck.c (build_x_binary_op): Update warn_about_parentheses call.\n+\t* parser.c (cp_parser_binary_expression): Use SET_EXPR_LOCATION\n+\ton current.lhs.\n+\n 2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/54427"}, {"sha": "e2b355a246f6dbc5eccf392f9440d74241ce2387", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -7472,6 +7472,8 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t\t\t\t\t rhs, rhs_type, &overload,\n \t\t\t\t\t tf_warning_or_error);\n       current.lhs_type = current.tree_type;\n+      if (EXPR_P (current.lhs))\n+\tSET_EXPR_LOCATION (current.lhs, current.loc);\n \n       /* If the binary operator required the use of an overloaded operator,\n \t then this expression cannot be an integral constant-expression."}, {"sha": "13e75ab9ebf260e45bd205b46446825fcc9b03df", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -3680,7 +3680,8 @@ build_x_binary_op (location_t loc, enum tree_code code, tree arg1,\n       && !error_operand_p (arg2)\n       && (code != LSHIFT_EXPR\n \t  || !CLASS_TYPE_P (TREE_TYPE (arg1))))\n-    warn_about_parentheses (code, arg1_code, orig_arg1, arg2_code, orig_arg2);\n+    warn_about_parentheses (loc, code, arg1_code, orig_arg1,\n+\t\t\t    arg2_code, orig_arg2);\n \n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (code, expr, orig_arg1, orig_arg2);"}, {"sha": "eb346476cc7e8fb9bd9b4e3e173bd81f7befc74a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1,3 +1,9 @@\n+2012-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54194\n+\t* g++.dg/warn/Wparentheses-26.C: Adjust.\n+\t* g++.dg/warn/Wparentheses-27.C: New.\n+\n 2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/54427"}, {"sha": "4525bfdcdf3d859c8136e71b136b914baead71d2", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-26.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-26.C?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -4,23 +4,23 @@\n template<int i, int j = ((i + 7) >> 3)> class foo1 { };\n typedef foo1<10> bar1;\n \n-template<int i, int j = (i + 7 >> 3)> class foo2 { };\n-typedef foo2<10> bar2;  // { dg-warning \"suggest parentheses around '\\\\+'\" }\n+template<int i, int j = (i + 7 >> 3)> class foo2 { };  // { dg-warning \"suggest parentheses around '\\\\+'\" }\n+typedef foo2<10> bar2;\n \n template<int i, int j = (100 >> (i + 2))> class foo3 { };\n typedef foo3<3> bar3;\n \n-template<int i, int j = (100 >> i + 2)> class foo4 { }; \n-typedef foo4<3> bar4;   // { dg-warning \"suggest parentheses around '\\\\+'\" }\n+template<int i, int j = (100 >> i + 2)> class foo4 { }; // { dg-warning \"suggest parentheses around '\\\\+'\" }\n+typedef foo4<3> bar4;\n \n template<int i, int j = (i + 7) | 3> class foo5 { };\n typedef foo5<10> bar5;\n \n-template<int i, int j = i + 7 | 3> class foo6 { };\n-typedef foo6<10> bar6;  // { dg-warning \"suggest parentheses around arithmetic\" }\n+template<int i, int j = i + 7 | 3> class foo6 { }; // { dg-warning \"suggest parentheses around arithmetic\" }\n+typedef foo6<10> bar6;\n \n template<int i, int j = 3 | (i + 7)> class foo7 { };\n typedef foo7<10> bar7;\n \n-template<int i, int j = 3 | i + 7> class foo8 { };\n-typedef foo8<10> bar8;  // { dg-warning \"suggest parentheses around arithmetic\" }\n+template<int i, int j = 3 | i + 7> class foo8 { }; // { dg-warning \"suggest parentheses around arithmetic\" } \n+typedef foo8<10> bar8;"}, {"sha": "7c05f7e806ce7f1181c85d1b56c9f634c302ad56", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-27.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-27.C?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/54194\n+// { dg-options \"-Wparentheses\" }\n+\n+int main()\n+{\n+  char in[4] = { 0 };\n+  in[1] = in[1] & 0x0F | ((in[3] & 0x3C) << 2); // { dg-warning \"17:suggest parentheses\" }\n+}"}, {"sha": "12e7948d3189b74369d5cfe48b9755757a760584", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9de0d0a5b5e807c92f01712e8dad06e0dfae75/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5d9de0d0a5b5e807c92f01712e8dad06e0dfae75", "patch": "@@ -1619,7 +1619,10 @@ struct GTY(()) tree_constructor {\n   != UNKNOWN_LOCATION)\n /* The location to be used in a diagnostic about this expression.  Do not\n    use this macro if the location will be assigned to other expressions.  */\n-#define EXPR_LOC_OR_HERE(NODE) (EXPR_HAS_LOCATION (NODE) ? (NODE)->exp.locus : input_location)\n+#define EXPR_LOC_OR_HERE(NODE) (EXPR_HAS_LOCATION (NODE) \\\n+\t\t\t\t? (NODE)->exp.locus : input_location)\n+#define EXPR_LOC_OR_LOC(NODE, LOCUS) (EXPR_HAS_LOCATION (NODE) \\\n+\t\t\t\t      ? (NODE)->exp.locus : (LOCUS))\n #define EXPR_FILENAME(NODE) LOCATION_FILE (EXPR_CHECK ((NODE))->exp.locus)\n #define EXPR_LINENO(NODE) LOCATION_LINE (EXPR_CHECK (NODE)->exp.locus)\n "}]}