{"sha": "38000232d10a651d985f247550b2e41425150852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwMDAyMzJkMTBhNjUxZDk4NWYyNDc1NTBiMmU0MTQyNTE1MDg1Mg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-04-03T12:59:46Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-04-03T12:59:46Z"}, "message": "tree-vect-stmts.c (vectorizable_store): Accept BIT_FIELD_REF.\n\n2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree-vect-stmts.c (vectorizable_store): Accept BIT_FIELD_REF.\n\t(vectorizable_load): Likewise.\n\t* tree-vect-slp.c (vect_build_slp_tree): Likewise.\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Handle VECTOR_TYPE.\n\ngcc/testsuite/\n\t* gcc.dg/vect/bb-slp-31.c: New file.\n\nFrom-SVN: r197410", "tree": {"sha": "456df88245b81a49798cdc2638114da97409edbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/456df88245b81a49798cdc2638114da97409edbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38000232d10a651d985f247550b2e41425150852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38000232d10a651d985f247550b2e41425150852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38000232d10a651d985f247550b2e41425150852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38000232d10a651d985f247550b2e41425150852/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fa352988912a70aeeea7e8cdd79466c287c18f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa352988912a70aeeea7e8cdd79466c287c18f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa352988912a70aeeea7e8cdd79466c287c18f1"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "69afaf3b25ff489365e4d0c32a057ff749497ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -1,3 +1,10 @@\n+2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree-vect-stmts.c (vectorizable_store): Accept BIT_FIELD_REF.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-slp.c (vect_build_slp_tree): Likewise.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Handle VECTOR_TYPE.\n+\n 2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* tree-flow-inline.h (get_addr_base_and_unit_offset_1): Handle"}, {"sha": "e9482cbc480a8a173d21a9d69e26ffee704507d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -1,3 +1,7 @@\n+2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/vect/bb-slp-31.c: New file.\n+\n 2013-04-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34949"}, {"sha": "9a3eac62b5233fc07b9f8f05a543958b2070ec15", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-31.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-31.c?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+\n+typedef double vec __attribute__ ((vector_size (2 * sizeof (double))));\n+vec a;\n+\n+void f(){\n+  a[0]=1+2*a[0]*a[0];\n+  a[1]=1+2*a[1]*a[1];\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block vectorized using SLP\" \"slp\" } } */"}, {"sha": "bb0b6937b8ad00ea4f6a77cdcc6cbb50c882b342", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -3613,6 +3613,8 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n       dump_generic_expr (MSG_NOTE, TDF_SLIM, aggr_type);\n       if (TREE_CODE (dr_base_type) == ARRAY_TYPE)\n         dump_printf (MSG_NOTE, \"  vectorizing an array ref: \");\n+      else if (TREE_CODE (dr_base_type) == VECTOR_TYPE)\n+        dump_printf (MSG_NOTE, \"  vectorizing a vector ref: \");\n       else if (TREE_CODE (dr_base_type) == RECORD_TYPE)\n         dump_printf (MSG_NOTE, \"  vectorizing a record based array ref: \");\n       else"}, {"sha": "a9cf6920cf68656d9867c815a9e1bfe3030368e7", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -667,6 +667,7 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t  || rhs_code != IMAGPART_EXPR)\n               && !(STMT_VINFO_GROUPED_ACCESS (vinfo_for_stmt (stmt))\n                    && (first_stmt_code == ARRAY_REF\n+                       || first_stmt_code == BIT_FIELD_REF\n                        || first_stmt_code == INDIRECT_REF\n                        || first_stmt_code == COMPONENT_REF\n                        || first_stmt_code == MEM_REF)))"}, {"sha": "a5bd819613e154429a3ccbf2c64ab83d30988cb3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38000232d10a651d985f247550b2e41425150852/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=38000232d10a651d985f247550b2e41425150852", "patch": "@@ -3851,6 +3851,7 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       && is_pattern_stmt_p (stmt_info))\n     scalar_dest = TREE_OPERAND (scalar_dest, 0);\n   if (TREE_CODE (scalar_dest) != ARRAY_REF\n+      && TREE_CODE (scalar_dest) != BIT_FIELD_REF\n       && TREE_CODE (scalar_dest) != INDIRECT_REF\n       && TREE_CODE (scalar_dest) != COMPONENT_REF\n       && TREE_CODE (scalar_dest) != IMAGPART_EXPR\n@@ -4385,6 +4386,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n   code = gimple_assign_rhs_code (stmt);\n   if (code != ARRAY_REF\n+      && code != BIT_FIELD_REF\n       && code != INDIRECT_REF\n       && code != COMPONENT_REF\n       && code != IMAGPART_EXPR"}]}