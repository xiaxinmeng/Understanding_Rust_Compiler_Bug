{"sha": "97755701afbdc34215954008d6550065631ca826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NTU3MDFhZmJkYzM0MjE1OTU0MDA4ZDY1NTAwNjU2MzFjYTgyNg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T13:09:45Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T13:09:45Z"}, "message": "[AArch64 array_mode 7/8] Combine the expanders using VSTRUCT:nregs\n\n\t* config/aarch64/aarch64-simd.md (aarch64_ld2r<mode>,\n\taarch64_ld3r<mode>, aarch64_ld4r<mode>): Combine together, making...\n\t(aarch64_simd_ld<VSTRUCT:nregs>r<VALLDIF:mode>): ...this.\n\t(aarch64_ld2_lane<mode>, aarch64_ld3_lane<mode>,\n\taarch64_ld4_lane<mode>): Combine together, making...\n\t(aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>): ...this.\n\t(aarch64_st2_lane<mode>, aarch64_st3_lane<mode>,\n\taarch64_st4_lane<mode>): Combine together, making...\n\t(aarch64_st<VSTRUCT:nregs>_lane<VALLDIF:mode>): ...this.\n\t* config/aarch64/iterators.md (nregs): Add comment.\n\nFrom-SVN: r227793", "tree": {"sha": "c2e02ba5b38b98322d501ac73433968cd021585f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2e02ba5b38b98322d501ac73433968cd021585f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97755701afbdc34215954008d6550065631ca826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97755701afbdc34215954008d6550065631ca826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97755701afbdc34215954008d6550065631ca826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97755701afbdc34215954008d6550065631ca826/comments", "author": null, "committer": null, "parents": [{"sha": "2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3bb934a1223f6f98314a7e730407e5e8ff1e68"}], "stats": {"total": 154, "additions": 39, "deletions": 115}, "files": [{"sha": "a4911a0ff6a48baa8f25edd017b904cc6d11c07e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97755701afbdc34215954008d6550065631ca826/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97755701afbdc34215954008d6550065631ca826/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97755701afbdc34215954008d6550065631ca826", "patch": "@@ -1,3 +1,16 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_ld2r<mode>,\n+\taarch64_ld3r<mode>, aarch64_ld4r<mode>): Combine together, making...\n+\t(aarch64_simd_ld<VSTRUCT:nregs>r<VALLDIF:mode>): ...this.\n+\t(aarch64_ld2_lane<mode>, aarch64_ld3_lane<mode>,\n+\taarch64_ld4_lane<mode>): Combine together, making...\n+\t(aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>): ...this.\n+\t(aarch64_st2_lane<mode>, aarch64_st3_lane<mode>,\n+\taarch64_st4_lane<mode>): Combine together, making...\n+\t(aarch64_st<VSTRUCT:nregs>_lane<VALLDIF:mode>): ...this.\n+\t* config/aarch64/iterators.md (nregs): Add comment.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_ld2r<mode>):"}, {"sha": "dbe52591b59f65d91b3968492acd3a4ba0aa8b66", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 23, "deletions": 115, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97755701afbdc34215954008d6550065631ca826/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97755701afbdc34215954008d6550065631ca826/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=97755701afbdc34215954008d6550065631ca826", "patch": "@@ -4381,42 +4381,18 @@\n     FAIL;\n })\n \n-(define_expand \"aarch64_ld2r<mode>\"\n-  [(match_operand:OI 0 \"register_operand\" \"=w\")\n+(define_expand \"aarch64_ld<VSTRUCT:nregs>r<VALLDIF:mode>\"\n+  [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n    (match_operand:DI 1 \"register_operand\" \"w\")\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n   rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<VALLDIF:MODE>mode))\n+\t\t     * <VSTRUCT:nregs>);\n \n-  emit_insn (gen_aarch64_simd_ld2r<mode> (operands[0], mem));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_ld3r<mode>\"\n-  [(match_operand:CI 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"w\")\n-   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n-\n-  emit_insn (gen_aarch64_simd_ld3r<mode> (operands[0], mem));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_ld4r<mode>\"\n-  [(match_operand:XI 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"w\")\n-   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n-\n-  emit_insn (gen_aarch64_simd_ld4r<mode> (operands[0],mem));\n+  emit_insn (gen_aarch64_simd_ld<VSTRUCT:nregs>r<VALLDIF:mode> (operands[0],\n+\t\t\t\t\t\t\t\tmem));\n   DONE;\n })\n \n@@ -4599,62 +4575,26 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_ld2_lane<mode>\"\n-  [(match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(match_operand:DI 1 \"register_operand\" \"w\")\n-\t(match_operand:OI 2 \"register_operand\" \"0\")\n-\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n-\n-  emit_insn (gen_aarch64_vec_load_lanesoi_lane<mode> (operands[0],\n-\t\t\t\t\t\t      mem,\n-\t\t\t\t\t\t      operands[2],\n-\t\t\t\t\t\t      operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_ld3_lane<mode>\"\n-  [(match_operand:CI 0 \"register_operand\" \"=w\")\n+(define_expand \"aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>\"\n+  [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n \t(match_operand:DI 1 \"register_operand\" \"w\")\n-\t(match_operand:CI 2 \"register_operand\" \"0\")\n+\t(match_operand:VSTRUCT 2 \"register_operand\" \"0\")\n \t(match_operand:SI 3 \"immediate_operand\" \"i\")\n \t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n   rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n-\n-  emit_insn (gen_aarch64_vec_load_lanesci_lane<mode> (operands[0],\n-\t\t\t\t\t\t      mem,\n-\t\t\t\t\t\t      operands[2],\n-\t\t\t\t\t\t      operands[3]));\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<VALLDIF:MODE>mode))\n+\t\t     * <VSTRUCT:nregs>);\n+\n+  aarch64_simd_lane_bounds (operands[3], 0,\n+\t\t\t    GET_MODE_NUNITS (<VALLDIF:MODE>mode),\n+\t\t\t    NULL);\n+  emit_insn (gen_aarch64_vec_load_lanes<VSTRUCT:mode>_lane<VALLDIF:mode> (\n+\toperands[0], mem, operands[2], operands[3]));\n   DONE;\n })\n \n-(define_expand \"aarch64_ld4_lane<mode>\"\n-  [(match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(match_operand:DI 1 \"register_operand\" \"w\")\n-\t(match_operand:XI 2 \"register_operand\" \"0\")\n-\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n-\n-  emit_insn (gen_aarch64_vec_load_lanesxi_lane<mode> (operands[0],\n-\t\t\t\t\t\t      mem,\n-\t\t\t\t\t\t      operands[2],\n-\t\t\t\t\t\t      operands[3]));\n-  DONE;\n-})\n-\n-\n-\n ;; Expanders for builtins to extract vector registers from large\n ;; opaque integer modes.\n \n@@ -4882,51 +4822,19 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_st2_lane<mode>\"\n- [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:OI 1 \"register_operand\" \"w\")\n-  (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n-  (match_operand:SI 2 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n-\n-  emit_insn (gen_aarch64_vec_store_lanesoi_lane<mode> (mem,\n-\t\t\t\t\t\t       operands[1],\n-\t\t\t\t\t\t       operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_st3_lane<mode>\"\n- [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:CI 1 \"register_operand\" \"w\")\n-  (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n-  (match_operand:SI 2 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 3);\n-\n-  emit_insn (gen_aarch64_vec_store_lanesci_lane<mode> (mem,\n-\t\t\t\t\t\t       operands[1],\n-\t\t\t\t\t\t       operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_st4_lane<mode>\"\n+(define_expand \"aarch64_st<VSTRUCT:nregs>_lane<VALLDIF:mode>\"\n  [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:XI 1 \"register_operand\" \"w\")\n+  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n-  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<VALLDIF:MODE>mode))\n+\t\t     * <VSTRUCT:nregs>);\n \n-  emit_insn (gen_aarch64_vec_store_lanesxi_lane<mode> (mem,\n-\t\t\t\t\t\t       operands[1],\n-\t\t\t\t\t\t       operands[2]));\n+  emit_insn (gen_aarch64_vec_store_lanes<VSTRUCT:mode>_lane<VALLDIF:mode> (\n+\t\tmem, operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "38c5a2424e4989b962165640bcb7fe122c3648e8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97755701afbdc34215954008d6550065631ca826/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97755701afbdc34215954008d6550065631ca826/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=97755701afbdc34215954008d6550065631ca826", "patch": "@@ -577,6 +577,9 @@\n \n (define_mode_attr Vendreg [(OI \"T\") (CI \"U\") (XI \"V\")])\n \n+;; This is both the number of Q-Registers needed to hold the corresponding\n+;; opaque large integer mode, and the number of elements touched by the\n+;; ld..._lane and st..._lane operations.\n (define_mode_attr nregs [(OI \"2\") (CI \"3\") (XI \"4\")])\n \n (define_mode_attr VRL2 [(V8QI \"V32QI\") (V4HI \"V16HI\")"}]}