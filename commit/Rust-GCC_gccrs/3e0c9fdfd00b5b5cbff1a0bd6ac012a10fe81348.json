{"sha": "3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "node_id": "C_kwDOANBUbNoAKDNlMGM5ZmRmZDAwYjViNWNiZmYxYTBiZDZhYzAxMmExMGZlODEzNDg", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-04-27T09:36:00Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-04-27T09:36:00Z"}, "message": "fortran: Avoid infinite self-recursion [PR105381]\n\nDummy array decls are local decls different from the argument decl\naccessible through GFC_DECL_SAVED_DESCRIPTOR.  If the argument decl has\na DECL_LANG_SPECIFIC set, it is copied over to the local decl at the\ntime the latter is created, so that the DECL_LANG_SPECIFIC object is\nshared between local dummy decl and argument decl, and thus the\nGFC_DECL_SAVED_DESCRIPTOR of the argument decl is the argument decl\nitself.\n\nThe r12-8230-g7964ab6c364c410c34efe7ca2eba797d36525349 change introduced\nthe non_negative_strides_array_p predicate which recurses through\nGFC_DECL_SAVED_DESCRIPTOR to avoid seeing dummy decls as purely local\ndecls.  As the GFC_DECL_SAVED_DESCRIPTOR of the argument decl is itself,\nthis can cause infinite recursion.\n\nThis change adds a check to avoid infinite recursion.\n\n\tPR fortran/102043\n\tPR fortran/105381\n\ngcc/fortran/ChangeLog:\n\n\t* trans-array.cc (non_negative_strides_array_p): Inline variable\n\torig_decl and merge nested if conditions.  Add condition to not\n\trecurse if the next argument is the same as the current.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/character_array_dummy_1.f90: New test.", "tree": {"sha": "9c5c72bdd1fdaf721c031867da9674962a8c5f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5c72bdd1fdaf721c031867da9674962a8c5f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348/comments", "author": null, "committer": null, "parents": [{"sha": "6c211e70eb9d89db2be630c0d5555d21e4aee144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c211e70eb9d89db2be630c0d5555d21e4aee144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c211e70eb9d89db2be630c0d5555d21e4aee144"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "05134952db43d586b83f0cb307309f90b7ce0111", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "patch": "@@ -3696,9 +3696,10 @@ non_negative_strides_array_p (tree expr)\n   /* If the array was originally a dummy with a descriptor, strides can be\n      negative.  */\n   if (DECL_P (expr)\n-      && DECL_LANG_SPECIFIC (expr))\n-    if (tree orig_decl = GFC_DECL_SAVED_DESCRIPTOR (expr))\n-      return non_negative_strides_array_p (orig_decl);\n+      && DECL_LANG_SPECIFIC (expr)\n+      && GFC_DECL_SAVED_DESCRIPTOR (expr)\n+      && GFC_DECL_SAVED_DESCRIPTOR (expr) != expr)\n+    return non_negative_strides_array_p (GFC_DECL_SAVED_DESCRIPTOR (expr));\n \n   return true;\n }"}, {"sha": "da5ed636f4f3b677991b8b2ff6cbe2b2b116b7d2", "filename": "gcc/testsuite/gfortran.dg/character_array_dummy_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_dummy_1.f90?ref=3e0c9fdfd00b5b5cbff1a0bd6ac012a10fe81348", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! PR fortran/105381\n+! Infinite recursion with array references of character dummy arguments.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+MODULE m\n+  implicit none\n+  integer,  parameter :: ncrit  =  8\n+  integer,  parameter :: nterm  =  7\n+contains\n+\n+  subroutine new_thin_rule (rule1)\n+    character(*),intent(in) ,optional :: rule1(ncrit)\n+    character(len=8) :: rules (ncrit,nterm)\n+    rules = ''\n+    if (present (rule1)) rules(:,1) = rule1  ! <-- compile time hog\n+  end subroutine new_thin_rule\n+\n+end module m"}]}