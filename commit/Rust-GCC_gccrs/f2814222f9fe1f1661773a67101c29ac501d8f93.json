{"sha": "f2814222f9fe1f1661773a67101c29ac501d8f93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4MTQyMjJmOWZlMWYxNjYxNzczYTY3MTAxYzI5YWM1MDFkOGY5Mw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-25T13:46:35Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-25T13:46:35Z"}, "message": "avr.c (STR_PREFIX_P): New Define.\n\n\t\n\t* config/avr/avr.c (STR_PREFIX_P): New Define.\n\t(avr_asm_declare_function_name): Use it.\n\t(avr_asm_named_section): Use it.\n\t(avr_section_type_flags): Use it.\n\nFrom-SVN: r178062", "tree": {"sha": "b655c0987f86694ce3fbb3eb557e0df3e230e9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b655c0987f86694ce3fbb3eb557e0df3e230e9a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2814222f9fe1f1661773a67101c29ac501d8f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2814222f9fe1f1661773a67101c29ac501d8f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2814222f9fe1f1661773a67101c29ac501d8f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2814222f9fe1f1661773a67101c29ac501d8f93/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbba4777cd63b2672085afbe50709e6892923261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbba4777cd63b2672085afbe50709e6892923261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbba4777cd63b2672085afbe50709e6892923261"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "44fd17c58a6d57507209c55c8268addbe566f850", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2814222f9fe1f1661773a67101c29ac501d8f93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2814222f9fe1f1661773a67101c29ac501d8f93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2814222f9fe1f1661773a67101c29ac501d8f93", "patch": "@@ -1,3 +1,10 @@\n+2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\t* config/avr/avr.c (STR_PREFIX_P): New Define.\n+\t(avr_asm_declare_function_name): Use it.\n+\t(avr_asm_named_section): Use it.\n+\t(avr_section_type_flags): Use it.\n+\n 2011-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* doc/md.texi (automata_option): Document collapse-ndfa."}, {"sha": "649ea0bc89f29354ab77825545e29de511135942", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2814222f9fe1f1661773a67101c29ac501d8f93/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2814222f9fe1f1661773a67101c29ac501d8f93/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f2814222f9fe1f1661773a67101c29ac501d8f93", "patch": "@@ -51,6 +51,9 @@\n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n \n+/* Return true if STR starts with PREFIX and false, otherwise.  */\n+#define STR_PREFIX_P(STR,PREFIX) (0 == strncmp (STR, PREFIX, strlen (PREFIX)))\n+\n static void avr_option_override (void);\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n@@ -4852,7 +4855,7 @@ avr_asm_declare_function_name (FILE *file, const char *name, tree decl)\n \n   if (cfun->machine->is_interrupt)\n     {\n-      if (strncmp (name, \"__vector\", strlen (\"__vector\")) != 0)\n+      if (!STR_PREFIX_P (name, \"__vector\"))\n         {\n           warning_at (DECL_SOURCE_LOCATION (decl), 0,\n                       \"%qs appears to be a misspelled interrupt handler\",\n@@ -4861,7 +4864,7 @@ avr_asm_declare_function_name (FILE *file, const char *name, tree decl)\n     }\n   else if (cfun->machine->is_signal)\n     {\n-      if (strncmp (name, \"__vector\", strlen (\"__vector\")) != 0)\n+      if (!STR_PREFIX_P (name, \"__vector\"))\n         {\n            warning_at (DECL_SOURCE_LOCATION (decl), 0,\n                        \"%qs appears to be a misspelled signal handler\",\n@@ -5116,12 +5119,12 @@ static void\n avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n {\n   if (!avr_need_copy_data_p)\n-    avr_need_copy_data_p = (0 == strncmp (name, \".data\", 5)\n-                            || 0 == strncmp (name, \".rodata\", 7)\n-                            || 0 == strncmp (name, \".gnu.linkonce.d\", 15));\n+    avr_need_copy_data_p = (STR_PREFIX_P (name, \".data\")\n+                            || STR_PREFIX_P (name, \".rodata\")\n+                            || STR_PREFIX_P (name, \".gnu.linkonce.d\"));\n   \n   if (!avr_need_clear_bss_p)\n-    avr_need_clear_bss_p = (0 == strncmp (name, \".bss\", 4));\n+    avr_need_clear_bss_p = STR_PREFIX_P (name, \".bss\");\n   \n   default_elf_asm_named_section (name, flags, decl);\n }\n@@ -5131,7 +5134,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n {\n   unsigned int flags = default_section_type_flags (decl, name, reloc);\n \n-  if (strncmp (name, \".noinit\", 7) == 0)\n+  if (STR_PREFIX_P (name, \".noinit\"))\n     {\n       if (decl && TREE_CODE (decl) == VAR_DECL\n \t  && DECL_INITIAL (decl) == NULL_TREE)\n@@ -5141,7 +5144,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n \t\t \".noinit section\");\n     }\n \n-  if (0 == strncmp (name, \".progmem.data\", strlen (\".progmem.data\")))\n+  if (STR_PREFIX_P (name, \".progmem.data\"))\n     flags &= ~SECTION_WRITE;\n   \n   return flags;"}]}