{"sha": "dfbcb149aa59ef88a254489d2c3aa9c105562490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiY2IxNDlhYTU5ZWY4OGEyNTQ0ODlkMmMzYWE5YzEwNTU2MjQ5MA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2011-08-29T14:33:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:33:59Z"}, "message": "exp_ch3.adb (Freeze_Type): Generate an accessibility check which ensures that the level of the subpool...\n\n2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Freeze_Type): Generate an accessibility check which\n\tensures that the level of the subpool access type is not deeper than\n\tthat of the pool object.\n\t* sem_util.adb (Object_Access_Level): Expand to handle defining\n\tidentifiers.\n\t* sem_res.adb (Resolve_Allocator): Add a guard to avoid examining the\n\tsubpool handle name of a rewritten allocator.\n\nFrom-SVN: r178250", "tree": {"sha": "a07b86492502d6456c8681c157ab94574bcfd064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a07b86492502d6456c8681c157ab94574bcfd064"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbcb149aa59ef88a254489d2c3aa9c105562490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbcb149aa59ef88a254489d2c3aa9c105562490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbcb149aa59ef88a254489d2c3aa9c105562490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbcb149aa59ef88a254489d2c3aa9c105562490/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1df4f514fac3b17c52bb283fcc52daf3d19c26e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df4f514fac3b17c52bb283fcc52daf3d19c26e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df4f514fac3b17c52bb283fcc52daf3d19c26e7"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "acc215bcc9b7b15e8fa6697f648464ee342587ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dfbcb149aa59ef88a254489d2c3aa9c105562490", "patch": "@@ -1,3 +1,13 @@\n+2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Freeze_Type): Generate an accessibility check which\n+\tensures that the level of the subpool access type is not deeper than\n+\tthat of the pool object.\n+\t* sem_util.adb (Object_Access_Level): Expand to handle defining\n+\tidentifiers.\n+\t* sem_res.adb (Resolve_Allocator): Add a guard to avoid examining the\n+\tsubpool handle name of a rewritten allocator.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* impunit.adb, exp_ch4.adb, s-finmas.adb: Minor reformatting."}, {"sha": "c0112b1d9b38a8d52d6b9b16fc377dfef32b75ff", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=dfbcb149aa59ef88a254489d2c3aa9c105562490", "patch": "@@ -6605,12 +6605,65 @@ package body Exp_Ch3 is\n             --    Rep Clause \"for Def_Id'Storage_Pool use a_Pool_Object\"\n             --    ---> Storage Pool is the specified one\n \n-            elsif Present (Associated_Storage_Pool (Def_Id)) then\n+            --  When compiling in Ada 2012 mode, ensure that the accessibility\n+            --  level of the subpool access type is not deeper than that of the\n+            --  pool_with_subpools.\n \n-               --  Nothing to do the associated storage pool has been attached\n-               --  when analyzing the representation clause.\n+            elsif Ada_Version >= Ada_2012\n+              and then Present (Associated_Storage_Pool (Def_Id))\n+            then\n+               declare\n+                  Loc   : constant Source_Ptr := Sloc (Def_Id);\n+                  Pool  : constant Entity_Id :=\n+                            Associated_Storage_Pool (Def_Id);\n+                  RSPWS : constant Entity_Id :=\n+                            RTE (RE_Root_Storage_Pool_With_Subpools);\n \n-               null;\n+               begin\n+                  --  It is known that the accessibility level of the access\n+                  --  type is deeper than that of the pool.\n+\n+                  if Type_Access_Level (Def_Id) > Object_Access_Level (Pool)\n+                    and then not Accessibility_Checks_Suppressed (Def_Id)\n+                    and then not Accessibility_Checks_Suppressed (Pool)\n+                  then\n+                     --  Static case: the pool is known to be a descendant of\n+                     --  Root_Storage_Pool_With_Subpools.\n+\n+                     if Is_Ancestor (RSPWS, Etype (Pool)) then\n+                        Error_Msg_N\n+                          (\"?subpool access type has deeper accessibility \" &\n+                           \"level than pool\", Def_Id);\n+\n+                        Append_Freeze_Action (Def_Id,\n+                          Make_Raise_Program_Error (Loc,\n+                            Reason => PE_Accessibility_Check_Failed));\n+\n+                     --  Dynamic case: when the pool is of a class-wide type,\n+                     --  it may or may not support subpools depending on the\n+                     --  path of derivation. Generate:\n+                     --\n+                     --    if Def_Id in RSPWS'Class then\n+                     --       raise Program_Error;\n+                     --    end if;\n+\n+                     elsif Is_Class_Wide_Type (Etype (Pool)) then\n+                        Append_Freeze_Action (Def_Id,\n+                          Make_If_Statement (Loc,\n+                            Condition =>\n+                              Make_In (Loc,\n+                                Left_Opnd =>\n+                                  New_Reference_To (Pool, Loc),\n+                                Right_Opnd =>\n+                                  New_Reference_To\n+                                    (Class_Wide_Type (RSPWS), Loc)),\n+\n+                            Then_Statements => New_List (\n+                              Make_Raise_Program_Error (Loc,\n+                                Reason => PE_Accessibility_Check_Failed))));\n+                     end if;\n+                  end if;\n+               end;\n             end if;\n \n             --  For access-to-controlled types (including class-wide types and"}, {"sha": "3670221e0bbec8d6f49f217cfa67cdf6387a5728", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=dfbcb149aa59ef88a254489d2c3aa9c105562490", "patch": "@@ -4397,9 +4397,12 @@ package body Sem_Res is\n \n       --  Ada 2012 (AI05-0111-3): Issue a warning whenever allocating a task\n       --  or a type containing tasks on a subpool since the deallocation of\n-      --  the subpool may lead to undefined task behavior.\n+      --  the subpool may lead to undefined task behavior. Perform the check\n+      --  only when the allocator has not been converted into a Program_Error\n+      --  due to a previous error.\n \n       if Ada_Version >= Ada_2012\n+        and then Nkind (N) = N_Allocator\n         and then Present (Subpool_Handle_Name (N))\n         and then Has_Task (Desig_T)\n       then"}, {"sha": "6f2ac14283d68f2f401c47cf1ea0df264491b426", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbcb149aa59ef88a254489d2c3aa9c105562490/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=dfbcb149aa59ef88a254489d2c3aa9c105562490", "patch": "@@ -10696,8 +10696,14 @@ package body Sem_Util is\n    --  Start of processing for Object_Access_Level\n \n    begin\n-      if Is_Entity_Name (Obj) then\n-         E := Entity (Obj);\n+      if Nkind (Obj) = N_Defining_Identifier\n+        or else Is_Entity_Name (Obj)\n+      then\n+         if Nkind (Obj) = N_Defining_Identifier then\n+            E := Obj;\n+         else\n+            E := Entity (Obj);\n+         end if;\n \n          if Is_Prival (E) then\n             E := Prival_Link (E);"}]}