{"sha": "0b4be7de750a66978f2244f4f2b0d9f385af192e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0YmU3ZGU3NTBhNjY5NzhmMjI0NGY0ZjJiMGQ5ZjM4NWFmMTkyZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-15T04:00:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-15T04:00:48Z"}, "message": "install.texi: Follow spelling conventions.\n\n\t* doc/install.texi: Follow spelling conventions.\n\t* doc/tm.texi: Likewise.\n\t* config/fp-bit.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/ns32k/NOTES: Likewise.\n\t* config/ns32k/STATUS: Likewise.\n\nFrom-SVN: r67962", "tree": {"sha": "54c1715cf0f53ebc910e880eaed5a6ff8cfaae4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c1715cf0f53ebc910e880eaed5a6ff8cfaae4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b4be7de750a66978f2244f4f2b0d9f385af192e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4be7de750a66978f2244f4f2b0d9f385af192e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4be7de750a66978f2244f4f2b0d9f385af192e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4be7de750a66978f2244f4f2b0d9f385af192e/comments", "author": null, "committer": null, "parents": [{"sha": "b2a67e419cf2a05ec160585e4d2945dd479de8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a67e419cf2a05ec160585e4d2945dd479de8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a67e419cf2a05ec160585e4d2945dd479de8df"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "d38c768a40923479c06360fe63a844359f4da945", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -1,3 +1,13 @@\n+2003-06-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/install.texi: Follow spelling conventions.\n+\t* doc/tm.texi: Likewise.\n+\t* config/fp-bit.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/ns32k/NOTES: Likewise.\n+\t* config/ns32k/STATUS: Likewise.\n+\n 2003-06-14  Roger Sayle  <roger@eyesopen.com>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "4a42f0b998e38611258da66924c0fec35a01dcc8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -2350,7 +2350,7 @@ arm_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n \f\n /* Addressing mode support functions.  */\n \n-/* Return non-zero if X is a legitimate immediate operand when compiling\n+/* Return nonzero if X is a legitimate immediate operand when compiling\n    for PIC.  */\n int\n legitimate_pic_operand_p (rtx x)"}, {"sha": "6640f7ad1b4ebeef6ddd09515b837d087414c576", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -371,7 +371,7 @@ pack_d ( fp_number_type *  src)\n \t       if (low >= ((halffractype)1 << HALFFRACBITS))\n \t\t /* We don't shift left, since it has just become the\n \t\t    smallest normal number, whose implicit 1 bit is\n-\t\t    now indicated by the non-zero exponent.  */\n+\t\t    now indicated by the nonzero exponent.  */\n \t\t exp++;\n \t     }\n \t }"}, {"sha": "e6640875054a80609eadad7932db3285cfc7a5f3", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -2338,8 +2338,8 @@ frv_final_prescan_insn (insn, opvec, noperands)\n \n      Printable instructions will be asm_operands or match one of the .md\n      patterns.  Since asm instructions cannot be packed -- and will\n-     therefore have TImode -- this loop terminates on any recognisable\n-     instruction, and on any unrecognisable instruction with TImode.  */\n+     therefore have TImode -- this loop terminates on any recognizable\n+     instruction, and on any unrecognizable instruction with TImode.  */\n   for (insn = NEXT_INSN (insn); insn; insn = NEXT_INSN (insn))\n     {\n       if (NOTE_P (insn))"}, {"sha": "824c80c841e73ff4307e2e66c61e26dd004ca856", "filename": "gcc/config/ns32k/NOTES", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Fns32k%2FNOTES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Fns32k%2FNOTES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2FNOTES?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -10,7 +10,7 @@ Ian Dall <ian@beware.dropbear.id.au>\n ------------------------------------\n \n The ns32x81 fpu handles most operands in hardware, but traps on NaN,\n-Inf and Denormalized numbers. The correct behaviour can be handled by\n+Inf and Denormalized numbers. The correct behavior can be handled by\n the trap handler. This is mostly transparent to the compiler, but in\n the case of floating point comparisions, the trap handler and the\n compiler must co-operate."}, {"sha": "546725580139914269b103b099328b2f19515ff5", "filename": "gcc/config/ns32k/STATUS", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Fns32k%2FSTATUS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fconfig%2Fns32k%2FSTATUS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2FSTATUS?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -28,7 +28,7 @@ correct if not ideal.\n gcc.dg/debug/debug-1.c scan-assembler xyzzy:\n At -O3 level of optimization, variable xyzzy gets eliminated. Isn't it\n reasonable that the debugging info is gone too? Indeed, the\n-documentation says this is expected behaviour.\n+documentation says this is expected behavior.\n \n gcc.dg/debug/debug-2.c scan-assembler xyzzy:\n As for the above.\n@@ -61,7 +61,7 @@ gcc.dg/uninit-A.c -O2 -Wall -S\n Bogus warnings, almost certainly not backend.\n \n gcc.dg/special/weak-1.c execution test\n-X  This fails for i386 too. I don't understand what the correct behaviour\n+X  This fails for i386 too. I don't understand what the correct behavior\n for this test is.\n \n gcc.dg/special/gcsec-1.c (test for excess errors)"}, {"sha": "546a968fd7b87f224ca9938adfb4ac3fe7f5ed48", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -2557,7 +2557,7 @@ OpenServer, you must have at least the first maintenance pack installed\n the \"Execution Environment Update\", provides updated link editors and\n assemblers, as well as updated standard C and math libraries.  The C\n startup modules are also updated to support the System V gABI draft, and\n-GCC relies on that behaviour.  OSS631 provides a collection of commonly\n+GCC relies on that behavior.  OSS631 provides a collection of commonly\n used open source libraries, some of which GCC depends on (such as GNU\n gettext and zlib).  SCO OpenServer Release 5.0.7 has all of this built\n in by default, but OSS631C and later also apply to that release.  Please"}, {"sha": "b83781642cb2c00cd162f7452674ad7ed2b1227b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4be7de750a66978f2244f4f2b0d9f385af192e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0b4be7de750a66978f2244f4f2b0d9f385af192e", "patch": "@@ -2840,9 +2840,9 @@ value @code{STARTING_FRAME_OFFSET}.\n @findex STACK_ALIGNMENT_NEEDED\n @item STACK_ALIGNMENT_NEEDED\n Define to zero to disable final alignment of the stack during reload.\n-The non-zero default for this macro is suitable for most ports.\n+The nonzero default for this macro is suitable for most ports.\n \n-On ports where @code{STARTING_FRAME_OFFSET} is non-zero or where there\n+On ports where @code{STARTING_FRAME_OFFSET} is nonzero or where there\n is a register save block following the local block that doesn't require\n alignment to @code{STACK_BOUNDARY}, it may be beneficial to disable\n stack alignment and do it in the backend."}]}