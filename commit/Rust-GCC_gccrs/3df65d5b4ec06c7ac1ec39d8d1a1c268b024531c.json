{"sha": "3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNjVkNWI0ZWMwNmM3YWMxZWMzOWQ4ZDFhMWMyNjhiMDI0NTMxYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-25T14:41:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-27T12:52:34Z"}, "message": "Support partial substitution's\n\nWhen we have a generic data type with 2 type parameters A,B but then\nadd an impl block for this type and this impl block only defines 1 Type\nparameter and substitutes the other type parameter with a concrete type\nwe need to use the passed in mappings and the existing mappings to figure\nout how to adjust the type parameters to complete the substitution.\n\nFixes: #386", "tree": {"sha": "73d105263d6fbf23eea1ea94a97af950eaf9bb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d105263d6fbf23eea1ea94a97af950eaf9bb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c6f7da67ff2417e9100e2d43c1571b482c9e82"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "d022019d5b8e32303cc300dcff6b2b094bd29576", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "patch": "@@ -133,6 +133,8 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   {\n     TyTy::SubstitutionArgumentMappings adjusted\n       = type.adjust_mappings_for_this (mappings);\n+    if (adjusted.is_error ())\n+      return;\n \n     TyTy::BaseType *concrete = type.handle_substitions (adjusted);\n     if (concrete != nullptr)\n@@ -143,6 +145,8 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   {\n     TyTy::SubstitutionArgumentMappings adjusted\n       = type.adjust_mappings_for_this (mappings);\n+    if (adjusted.is_error ())\n+      return;\n \n     TyTy::BaseType *concrete = type.handle_substitions (adjusted);\n     if (concrete != nullptr)"}, {"sha": "8cc9089d5a880f74afc630b8b8234abaac1be73e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "patch": "@@ -242,15 +242,6 @@ SubstitutionArgumentMappings\n SubstitutionRef::adjust_mappings_for_this (\n   SubstitutionArgumentMappings &mappings)\n {\n-  if (substitutions.size () > mappings.size ())\n-    {\n-      rust_error_at (mappings.get_locus (),\n-\t\t     \"not enough type arguments: subs %s vs mappings %s\",\n-\t\t     subst_as_string ().c_str (),\n-\t\t     mappings.as_string ().c_str ());\n-      return SubstitutionArgumentMappings::error ();\n-    }\n-\n   Analysis::Mappings *mappings_table = Analysis::Mappings::get ();\n \n   std::vector<SubstitutionArg> resolved_mappings;\n@@ -259,13 +250,33 @@ SubstitutionRef::adjust_mappings_for_this (\n       auto &subst = substitutions.at (i);\n \n       SubstitutionArg arg = SubstitutionArg::error ();\n-      bool ok = mappings.get_argument_at (0, &arg);\n+      if (mappings.size () == substitutions.size ())\n+\t{\n+\t  mappings.get_argument_at (i, &arg);\n+\t}\n+      else\n+\t{\n+\t  if (subst.needs_substitution ())\n+\t    {\n+\t      // get from passed in mappings\n+\t      mappings.get_argument_for_symbol (subst.get_param_ty (), &arg);\n+\t    }\n+\t  else\n+\t    {\n+\t      // we should already have this somewhere\n+\t      used_arguments.get_argument_for_symbol (subst.get_param_ty (),\n+\t\t\t\t\t\t      &arg);\n+\t    }\n+\t}\n+\n+      bool ok = !arg.is_error ();\n       if (!ok)\n \t{\n \t  rust_error_at (mappings_table->lookup_location (\n \t\t\t   subst.get_param_ty ()->get_ref ()),\n-\t\t\t \"failed to find parameter type: %s\",\n-\t\t\t subst.get_param_ty ()->as_string ().c_str ());\n+\t\t\t \"failed to find parameter type: %s vs mappings [%s]\",\n+\t\t\t subst.get_param_ty ()->as_string ().c_str (),\n+\t\t\t mappings.as_string ().c_str ());\n \t  return SubstitutionArgumentMappings::error ();\n \t}\n "}, {"sha": "f3ff60968aabdfb19a573848484c150c7eeeb711", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "patch": "@@ -408,6 +408,15 @@ class SubstitutionParamMapping\n \n   void override_context ();\n \n+  bool needs_substitution () const\n+  {\n+    auto p = get_param_ty ();\n+    if (!p->can_resolve ())\n+      return true;\n+\n+    return p->resolve ()->get_kind () == TypeKind::PARAM;\n+  }\n+\n private:\n   std::unique_ptr<HIR::GenericParam> &generic;\n   ParamType *param;\n@@ -437,6 +446,8 @@ class SubstitutionArg\n \n   static SubstitutionArg error () { return SubstitutionArg (nullptr, nullptr); }\n \n+  bool is_error () const { return param == nullptr || argument == nullptr; }\n+\n   bool is_conrete () const\n   {\n     return argument != nullptr && argument->get_kind () != TyTy::TypeKind::ERROR\n@@ -600,6 +611,17 @@ class SubstitutionRef\n     return used_arguments;\n   }\n \n+  size_t num_required_substitutions () const\n+  {\n+    size_t n = 0;\n+    for (auto &p : substitutions)\n+      {\n+\tif (p.needs_substitution ())\n+\t  n++;\n+      }\n+    return n;\n+  }\n+\n   // We are trying to subst <i32, f32> into Struct Foo<X,Y> {}\n   // in the case of Foo<i32,f32>{...}\n   //"}, {"sha": "9a5b4cb48dc8e19b4c4434b5ac76505d16492f2c", "filename": "gcc/testsuite/rust.test/compile/generics19.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics19.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics19.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics19.rs?ref=3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<X, Y>(X, Y);\n+\n+impl<T> Foo<u32, T> {\n+    fn new(a: T) -> Self {\n+        Self(123, a)\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(false);\n+}"}, {"sha": "8fe1cffdf7dadd8b3628e8a6e53308ae92dacd35", "filename": "gcc/testsuite/rust.test/compile/generics20.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics20.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics20.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics20.rs?ref=3df65d5b4ec06c7ac1ec39d8d1a1c268b024531c", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<A, B>(A, B);\n+\n+impl<T> Foo<T, T> {\n+    fn new(a: T, b: T) -> Self {\n+        Self(a, b)\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(123, 456);\n+}"}]}