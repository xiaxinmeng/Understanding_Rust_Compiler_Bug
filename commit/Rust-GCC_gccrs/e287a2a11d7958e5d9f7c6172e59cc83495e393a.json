{"sha": "e287a2a11d7958e5d9f7c6172e59cc83495e393a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4N2EyYTExZDc5NThlNWQ5ZjdjNjE3MmU1OWNjODM0OTVlMzkzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-22T10:42:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-22T10:42:03Z"}, "message": "on ARRAY_REFs sign-extend offsets only from sizetype's precision [PR98255]\n\nAs discussed in the PR, the problem here is that the routines changed in\nthis patch sign extend the difference of index and low_bound from the\nprecision of the index, so e.g. when index is unsigned int and contains\nvalue -2U, we treat it as index -2 rather than 0x00000000fffffffeU on 64-bit\narches.\nOn the other hand, get_inner_reference which is used during expansion, does:\n            if (! integer_zerop (low_bound))\n              index = fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n                                   index, low_bound);\n\n            offset = size_binop (PLUS_EXPR, offset,\n                                 size_binop (MULT_EXPR,\n                                             fold_convert (sizetype, index),\n                                             unit_size));\nwhich effectively requires that either low_bound is constant 0 and then\nindex in ARRAY_REFs can be arbitrary type which is then sign or zero\nextended to sizetype, or low_bound is something else and then index and\nlow_bound must have compatible types and it is still converted afterwards to\nsizetype and from there then a few lines later:\nexpr.c-  if (poly_int_tree_p (offset))\nexpr.c-    {\nexpr.c:      poly_offset_int tem = wi::sext (wi::to_poly_offset (offset),\nexpr.c-                               TYPE_PRECISION (sizetype));\nThe following patch makes those routines match what get_inner_reference is\ndoing.\n\n2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98255\n\t* tree-dfa.c (get_ref_base_and_extent): For ARRAY_REFs, sign\n\textend index - low_bound from sizetype's precision rather than index\n\tprecision.\n\t(get_addr_base_and_unit_offset_1): Likewise.\n\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Likewise.\n\t* gimple-fold.c (fold_const_aggregate_ref_1): Likewise.\n\n\t* gcc.dg/pr98255.c: New test.", "tree": {"sha": "ffc177370b8b199ee6f381b0ac3f1b0009ea58d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc177370b8b199ee6f381b0ac3f1b0009ea58d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e287a2a11d7958e5d9f7c6172e59cc83495e393a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287a2a11d7958e5d9f7c6172e59cc83495e393a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e287a2a11d7958e5d9f7c6172e59cc83495e393a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287a2a11d7958e5d9f7c6172e59cc83495e393a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd61ca67f97acc5462d02676380af92329c37bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd61ca67f97acc5462d02676380af92329c37bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd61ca67f97acc5462d02676380af92329c37bb2"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "de5a6c22395d8114000eea7599aba2d4a39f6c6d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e287a2a11d7958e5d9f7c6172e59cc83495e393a", "patch": "@@ -8007,7 +8007,7 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n \t      poly_offset_int woffset\n \t\t= wi::sext (wi::to_poly_offset (idx)\n \t\t\t    - wi::to_poly_offset (low_bound),\n-\t\t\t    TYPE_PRECISION (TREE_TYPE (idx)));\n+\t\t\t    TYPE_PRECISION (sizetype));\n \t      woffset *= tree_to_uhwi (unit_size);\n \t      woffset *= BITS_PER_UNIT;\n \t      if (woffset.to_shwi (&offset))"}, {"sha": "5cbed682cdef3f3c937dc927062156df9a738c07", "filename": "gcc/testsuite/gcc.dg/pr98255.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98255.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98255.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98255.c?ref=e287a2a11d7958e5d9f7c6172e59cc83495e393a", "patch": "@@ -0,0 +1,49 @@\n+/* PR tree-optimization/98255 */\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+\n+struct A { volatile unsigned b; unsigned c; };\n+int d, *e, h, k, l;\n+static struct A f;\n+long g;\n+static unsigned i = -2U;\n+volatile int j;\n+\n+long\n+foo (void)\n+{\n+  char n[4][4][3]\n+    = { { {9, 2, 8}, {9, 2, 8}, {9, 2, 8}, {9} }, { {8} }, { {8} }, { {2} } };\n+  while (d)\n+    {\n+      for (; f.c < 4; f.c++)\n+\t{\n+\t  *e = 0;\n+\t  h = n[f.c + 4][0][d];\n+\t}\n+      while (g)\n+\treturn n[0][3][i];\n+      while (1)\n+\t{\n+\t  if (k)\n+\t    {\n+\t      j = 0;\n+\t      if (j)\n+\t\tcontinue;\n+\t    }\n+\t  if (l)\n+\t    break;\n+\t}\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : \"+g\" (d), \"+g\" (g), \"+g\" (f.c));\n+  asm volatile (\"\" : \"+g\" (e), \"+g\" (k), \"+g\" (l));\n+  foo ();\n+  return 0;\n+}"}, {"sha": "0482b05e26cf9dd96a1c6df556d39f1324a68450", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=e287a2a11d7958e5d9f7c6172e59cc83495e393a", "patch": "@@ -503,7 +503,7 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \t\tpoly_offset_int woffset\n \t\t  = wi::sext (wi::to_poly_offset (index)\n \t\t\t      - wi::to_poly_offset (low_bound),\n-\t\t\t      TYPE_PRECISION (TREE_TYPE (index)));\n+\t\t\t      TYPE_PRECISION (sizetype));\n \t\twoffset *= wi::to_offset (unit_size);\n \t\twoffset <<= LOG2_BITS_PER_UNIT;\n \t\tbit_offset += woffset;\n@@ -564,7 +564,7 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \t\t      {\n \t\t\tpoly_offset_int woffset\n \t\t\t  = wi::sext (omin - lbound,\n-\t\t\t\t      TYPE_PRECISION (TREE_TYPE (index)));\n+\t\t\t\t      TYPE_PRECISION (sizetype));\n \t\t\twoffset *= wi::to_offset (unit_size);\n \t\t\twoffset <<= LOG2_BITS_PER_UNIT;\n \t\t\tbit_offset += woffset;\n@@ -822,7 +822,7 @@ get_addr_base_and_unit_offset_1 (tree exp, poly_int64_pod *poffset,\n \t    poly_offset_int woffset\n \t\t= wi::sext (wi::to_poly_offset (index)\n \t\t\t    - wi::to_poly_offset (low_bound),\n-\t\t\t    TYPE_PRECISION (TREE_TYPE (index)));\n+\t\t\t    TYPE_PRECISION (sizetype));\n \t    woffset *= wi::to_offset (unit_size);\n \t    byte_offset += woffset.force_shwi ();\n \t  }"}, {"sha": "d45aee8e502090f0af2394442c200f91e66a4355", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287a2a11d7958e5d9f7c6172e59cc83495e393a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e287a2a11d7958e5d9f7c6172e59cc83495e393a", "patch": "@@ -1108,7 +1108,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t      poly_offset_int woffset\n \t\t= wi::sext (wi::to_poly_offset (op->op0)\n \t\t\t    - wi::to_poly_offset (op->op1),\n-\t\t\t    TYPE_PRECISION (TREE_TYPE (op->op0)));\n+\t\t\t    TYPE_PRECISION (sizetype));\n \t      woffset *= wi::to_offset (op->op2) * vn_ref_op_align_unit (op);\n \t      woffset <<= LOG2_BITS_PER_UNIT;\n \t      offset += woffset;"}]}