{"sha": "4c3643a559980f84e5749f470c35badadc1c570e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzNjQzYTU1OTk4MGY4NGU1NzQ5ZjQ3MGMzNWJhZGFkYzFjNTcwZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-02T12:19:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-02T12:19:10Z"}, "message": "re PR tree-optimization/88621 (wrong code at -O1 and above on x86_64-linux-gnu in 64-bit mode (not in 32-bit mode))\n\n2019-01-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88621\n\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Fix pastos, avoid\n\tbitfields when canoncalizing.\n\n\t* gcc.dg/torture/pr88621.c: New testcase.\n\nFrom-SVN: r267510", "tree": {"sha": "8b2302c253e464ba73529be61b5ca0d09953b3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2302c253e464ba73529be61b5ca0d09953b3b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c3643a559980f84e5749f470c35badadc1c570e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3643a559980f84e5749f470c35badadc1c570e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3643a559980f84e5749f470c35badadc1c570e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3643a559980f84e5749f470c35badadc1c570e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ff59baa1c1ba8203a1b105f81b89829735d4890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff59baa1c1ba8203a1b105f81b89829735d4890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff59baa1c1ba8203a1b105f81b89829735d4890"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "1c86e22a777b54be76ae4e7543c2b83269244785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c3643a559980f84e5749f470c35badadc1c570e", "patch": "@@ -1,3 +1,9 @@\n+2019-01-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88621\n+\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Fix pastos, avoid\n+\tbitfields when canoncalizing.\n+\n 2019-01-02  Richard Biener  <rguenther@suse.de>\n \n \tPR target/87545"}, {"sha": "51ecc5380a6ec21a632cd00f8dde45fdaaa6e181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c3643a559980f84e5749f470c35badadc1c570e", "patch": "@@ -1,3 +1,8 @@\n+2019-01-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88621\n+\t* gcc.dg/torture/pr88621.c: New testcase.\n+\n 2019-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/88561"}, {"sha": "78492a34dd7702549aaa69342740553275365c4c", "filename": "gcc/testsuite/gcc.dg/torture/pr88621.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88621.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88621.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88621.c?ref=4c3643a559980f84e5749f470c35badadc1c570e", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+struct S\n+{\n+  int b:4;\n+  int c; \n+} e = { -1, 0 };\n+\n+int d, f;\n+\n+int main ()\n+{\n+  while (f)\n+    {\n+      struct S g = { 0, 0 };\n+      e = g;\n+    }\n+L:\n+  while (e.b > 0)\n+    ;\n+  e.b = 0;\n+  if (d)\n+    goto L;\n+  return 0;\n+}"}, {"sha": "0919931cec3008fa4425e0065472d2218be53c28", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3643a559980f84e5749f470c35badadc1c570e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=4c3643a559980f84e5749f470c35badadc1c570e", "patch": "@@ -1468,9 +1468,10 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n       tree mem_base;\n       if (aor.max_size_known_p ()\n \t  && aor.offset.is_constant (&offset)\n-\t  && aor.offset.is_constant (&size)\n-\t  && aor.offset.is_constant (&max_size)\n+\t  && aor.size.is_constant (&size)\n+\t  && aor.max_size.is_constant (&max_size)\n \t  && size == max_size\n+\t  && (size % BITS_PER_UNIT) == 0\n \t  && (mem_base = get_addr_base_and_unit_offset (aor.ref, &mem_off)))\n \t{\n \t  hash = iterative_hash_expr (ao_ref_base (&aor), 0);"}]}