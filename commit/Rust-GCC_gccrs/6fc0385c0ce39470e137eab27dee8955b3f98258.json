{"sha": "6fc0385c0ce39470e137eab27dee8955b3f98258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjMDM4NWMwY2UzOTQ3MGUxMzdlYWIyN2RlZTg5NTViM2Y5ODI1OA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-01-10T22:24:36Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2020-01-10T22:24:36Z"}, "message": "OpenACC 'acc_get_property' cleanup\n\n\tinclude/\n\t* gomp-constants.h (enum gomp_device_property): Remove.\n\tlibgomp/\n\t* libgomp-plugin.h (enum goacc_property): New.  Adjust all users\n\tto use this instead of 'enum gomp_device_property'.\n\t(GOMP_OFFLOAD_get_property): Rename to...\n\t(GOMP_OFFLOAD_openacc_get_property): ... this.  Adjust all users.\n\t* libgomp.h (struct gomp_device_descr): Move\n\t'GOMP_OFFLOAD_openacc_get_property'...\n\t(struct acc_dispatch_t): ... here.  Adjust all users.\n\t* plugin/plugin-hsa.c (GOMP_OFFLOAD_get_property): Remove.\n\tliboffloadmic/\n\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_get_property):\n\tRemove.\n\nFrom-SVN: r280150", "tree": {"sha": "0a95a071bafad5393c048a74bec3cdb005499f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a95a071bafad5393c048a74bec3cdb005499f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fc0385c0ce39470e137eab27dee8955b3f98258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc0385c0ce39470e137eab27dee8955b3f98258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc0385c0ce39470e137eab27dee8955b3f98258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc0385c0ce39470e137eab27dee8955b3f98258/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b75e664a619dae98571a0b3ac8034f5fa7c2be"}], "stats": {"total": 345, "additions": 163, "deletions": 182}, "files": [{"sha": "8a2feb911cbb1c76220774267afdfd3c28271cee", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -1,3 +1,7 @@\n+2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gomp-constants.h (enum gomp_device_property): Remove.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "1587e4d2ba2729b79df6a5b4aeb94f84a15c3b43", "filename": "include/gomp-constants.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -199,21 +199,6 @@ enum gomp_map_kind\n #define GOMP_DEVICE_ICV\t\t\t-1\n #define GOMP_DEVICE_HOST_FALLBACK\t-2\n \n-/* Device property codes.  Keep in sync with\n-   libgomp/{openacc.h,openacc.f90}:acc_device_property_t */\n-/* Start from 1 to catch uninitialized use.  */\n-enum gomp_device_property\n-  {\n-   GOMP_DEVICE_PROPERTY_MEMORY =\t1,\n-   GOMP_DEVICE_PROPERTY_FREE_MEMORY = \t2,\n-   GOMP_DEVICE_PROPERTY_NAME =\t\t0x10001,\n-   GOMP_DEVICE_PROPERTY_VENDOR =\t0x10002,\n-   GOMP_DEVICE_PROPERTY_DRIVER =\t0x10003\n-  };\n-\n-/* Internal property mask to tell numeric and string values apart.  */\n-#define GOMP_DEVICE_PROPERTY_STRING_MASK\t0x10000\n-\n /* GOMP_task/GOMP_taskloop* flags argument.  */\n #define GOMP_TASK_FLAG_UNTIED\t\t(1 << 0)\n #define GOMP_TASK_FLAG_FINAL\t\t(1 << 1)"}, {"sha": "de286ddac7c1da893b4336b2041a79c0dc8d3daa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -1,5 +1,14 @@\n 2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* libgomp-plugin.h (enum goacc_property): New.  Adjust all users\n+\tto use this instead of 'enum gomp_device_property'.\n+\t(GOMP_OFFLOAD_get_property): Rename to...\n+\t(GOMP_OFFLOAD_openacc_get_property): ... this.  Adjust all users.\n+\t* libgomp.h (struct gomp_device_descr): Move\n+\t'GOMP_OFFLOAD_openacc_get_property'...\n+\t(struct acc_dispatch_t): ... here.  Adjust all users.\n+\t* plugin/plugin-hsa.c (GOMP_OFFLOAD_get_property): Remove.\n+\n \t* target.c (gomp_map_vars_internal)\n \t<GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT>: Clean up/elaborate code\n \tpaths."}, {"sha": "64f138d382150aca5cf5b36ff00e37a97743060e", "filename": "libgomp/libgomp-plugin.h", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Flibgomp-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Flibgomp-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp-plugin.h?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -54,13 +54,6 @@ enum offload_target_type\n   OFFLOAD_TARGET_TYPE_GCN = 8\n };\n \n-/* Container type for passing device properties.  */\n-union gomp_device_property_value\n-{\n-  const char *ptr;\n-  size_t val;\n-};\n-\n /* Opaque type to represent plugin-dependent implementation of an\n    OpenACC asynchronous queue.  */\n struct goacc_asyncqueue;\n@@ -75,6 +68,32 @@ struct goacc_asyncqueue_list\n typedef struct goacc_asyncqueue *goacc_aq;\n typedef struct goacc_asyncqueue_list *goacc_aq_list;\n \n+\n+/* OpenACC 'acc_get_property' support.  */\n+\n+/* Device property values.  Keep in sync with\n+   'libgomp/{openacc.h,openacc.f90}:acc_device_property_t'.  */\n+enum goacc_property\n+  {\n+   /* Mask to tell numeric and string values apart.  */\n+#define GOACC_PROPERTY_STRING_MASK 0x10000\n+\n+   /* Start from 1 to catch uninitialized use.  */\n+   GOACC_PROPERTY_MEMORY =\t\t1,\n+   GOACC_PROPERTY_FREE_MEMORY =\t\t2,\n+   GOACC_PROPERTY_NAME =\t\tGOACC_PROPERTY_STRING_MASK | 1,\n+   GOACC_PROPERTY_VENDOR =\t\tGOACC_PROPERTY_STRING_MASK | 2,\n+   GOACC_PROPERTY_DRIVER =\t\tGOACC_PROPERTY_STRING_MASK | 3\n+  };\n+\n+/* Container type for passing device properties.  */\n+union goacc_property_value\n+{\n+  const char *ptr;\n+  size_t val;\n+};\n+\n+\n /* Auxiliary struct, used for transferring pairs of addresses from plugin\n    to libgomp.  */\n struct addr_pair\n@@ -101,7 +120,6 @@ extern const char *GOMP_OFFLOAD_get_name (void);\n extern unsigned int GOMP_OFFLOAD_get_caps (void);\n extern int GOMP_OFFLOAD_get_type (void);\n extern int GOMP_OFFLOAD_get_num_devices (void);\n-extern union gomp_device_property_value GOMP_OFFLOAD_get_property (int, int);\n extern bool GOMP_OFFLOAD_init_device (int);\n extern bool GOMP_OFFLOAD_fini_device (int);\n extern unsigned GOMP_OFFLOAD_version (void);\n@@ -141,6 +159,8 @@ extern void *GOMP_OFFLOAD_openacc_cuda_get_current_context (void);\n extern void *GOMP_OFFLOAD_openacc_cuda_get_stream (struct goacc_asyncqueue *);\n extern int GOMP_OFFLOAD_openacc_cuda_set_stream (struct goacc_asyncqueue *,\n \t\t\t\t\t\t void *);\n+extern union goacc_property_value\n+  GOMP_OFFLOAD_openacc_get_property (int, enum goacc_property);\n \n #ifdef __cplusplus\n }"}, {"sha": "f5415bb156c6eb24511adbfa293710620043a3ab", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -1068,6 +1068,8 @@ typedef struct acc_dispatch_t\n     __typeof (GOMP_OFFLOAD_openacc_async_host2dev) *host2dev_func;\n   } async;\n \n+  __typeof (GOMP_OFFLOAD_openacc_get_property) *get_property_func;\n+\n   /* NVIDIA target specific routines.  */\n   struct {\n     __typeof (GOMP_OFFLOAD_openacc_cuda_get_current_device)\n@@ -1113,7 +1115,6 @@ struct gomp_device_descr\n   __typeof (GOMP_OFFLOAD_get_caps) *get_caps_func;\n   __typeof (GOMP_OFFLOAD_get_type) *get_type_func;\n   __typeof (GOMP_OFFLOAD_get_num_devices) *get_num_devices_func;\n-  __typeof (GOMP_OFFLOAD_get_property) *get_property_func;\n   __typeof (GOMP_OFFLOAD_init_device) *init_device_func;\n   __typeof (GOMP_OFFLOAD_fini_device) *fini_device_func;\n   __typeof (GOMP_OFFLOAD_version) *version_func;"}, {"sha": "46387897b13b203f8f3bbe769346fc7becbe49ac", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -59,27 +59,6 @@ host_get_num_devices (void)\n   return 1;\n }\n \n-static union gomp_device_property_value\n-host_get_property (int n, int prop)\n-{\n-  union gomp_device_property_value nullval = { .val = 0 };\n-\n-  if (n >= host_get_num_devices ())\n-    return nullval;\n-\n-  switch (prop)\n-    {\n-    case GOMP_DEVICE_PROPERTY_NAME:\n-      return (union gomp_device_property_value) { .ptr = \"GOMP\" };\n-    case GOMP_DEVICE_PROPERTY_VENDOR:\n-      return (union gomp_device_property_value) { .ptr = \"GNU\" };\n-    case GOMP_DEVICE_PROPERTY_DRIVER:\n-      return (union gomp_device_property_value) { .ptr = VERSION };\n-    default:\n-      return nullval;\n-    }\n-}\n-\n static bool\n host_init_device (int n __attribute__ ((unused)))\n {\n@@ -245,6 +224,29 @@ host_openacc_async_destruct (struct goacc_asyncqueue *aq\n   return true;\n }\n \n+static union goacc_property_value\n+host_openacc_get_property (int n, enum goacc_property prop)\n+{\n+  union goacc_property_value nullval = { .val = 0 };\n+\n+  if (n >= host_get_num_devices ())\n+    return nullval;\n+\n+  switch (prop)\n+    {\n+    case GOACC_PROPERTY_NAME:\n+      return (union goacc_property_value) { .ptr = \"GOMP\" };\n+    case GOACC_PROPERTY_VENDOR:\n+      return (union goacc_property_value) { .ptr = \"GNU\" };\n+    case GOACC_PROPERTY_DRIVER:\n+      return (union goacc_property_value) { .ptr = VERSION };\n+    case GOACC_PROPERTY_MEMORY:\n+    case GOACC_PROPERTY_FREE_MEMORY:\n+    default:\n+      return nullval;\n+    }\n+}\n+\n static void *\n host_openacc_create_thread_data (int ord __attribute__ ((unused)))\n {\n@@ -269,7 +271,6 @@ static struct gomp_device_descr host_dispatch =\n     .get_caps_func = host_get_caps,\n     .get_type_func = host_get_type,\n     .get_num_devices_func = host_get_num_devices,\n-    .get_property_func = host_get_property,\n     .init_device_func = host_init_device,\n     .fini_device_func = host_fini_device,\n     .version_func = host_version,\n@@ -303,6 +304,8 @@ static struct gomp_device_descr host_dispatch =\n \t.host2dev_func = host_openacc_async_host2dev,\n       },\n \n+      .get_property_func = host_openacc_get_property,\n+\n       .cuda = {\n \t.get_current_device_func = NULL,\n \t.get_current_context_func = NULL,"}, {"sha": "89a30b3e716db201a1fe2186a34e4dee9abf1714", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -760,14 +760,14 @@ acc_set_device_num (int ord, acc_device_t d)\n \n ialias (acc_set_device_num)\n \n-static union gomp_device_property_value\n+static union goacc_property_value\n get_property_any (int ord, acc_device_t d, acc_device_property_t prop)\n {\n   goacc_lazy_initialize ();\n   struct goacc_thread *thr = goacc_thread ();\n \n   if (d == acc_device_current && thr && thr->dev)\n-    return thr->dev->get_property_func (thr->dev->target_id, prop);\n+    return thr->dev->openacc.get_property_func (thr->dev->target_id, prop);\n \n   gomp_mutex_lock (&acc_device_lock);\n \n@@ -789,7 +789,7 @@ get_property_any (int ord, acc_device_t d, acc_device_property_t prop)\n \n   assert (dev);\n \n-  return dev->get_property_func (dev->target_id, prop);\n+  return dev->openacc.get_property_func (dev->target_id, prop);\n }\n \n size_t\n@@ -798,7 +798,7 @@ acc_get_property (int ord, acc_device_t d, acc_device_property_t prop)\n   if (!known_device_type_p (d))\n     unknown_device_type_error(d);\n \n-  if (prop & GOMP_DEVICE_PROPERTY_STRING_MASK)\n+  if (prop & GOACC_PROPERTY_STRING_MASK)\n     return 0;\n   else\n     return get_property_any (ord, d, prop).val;\n@@ -812,7 +812,7 @@ acc_get_property_string (int ord, acc_device_t d, acc_device_property_t prop)\n   if (!known_device_type_p (d))\n     unknown_device_type_error(d);\n \n-  if (prop & GOMP_DEVICE_PROPERTY_STRING_MASK)\n+  if (prop & GOACC_PROPERTY_STRING_MASK)\n     return get_property_any (ord, d, prop).ptr;\n   else\n     return NULL;"}, {"sha": "6c92c7c12c97a67d409c2dea2f26493395f82005", "filename": "libgomp/openacc.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fopenacc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fopenacc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.f90?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -53,7 +53,7 @@ module openacc_kinds\n \n   integer, parameter :: acc_device_property = c_size_t\n \n-  ! Keep in sync with include/gomp-constants.h.\n+  ! Keep in sync with 'libgomp/libgomp-plugin.h:goacc_property'.\n   integer (acc_device_property), parameter :: acc_property_memory = 1\n   integer (acc_device_property), parameter :: acc_property_free_memory = 2\n   integer (acc_device_property), parameter :: acc_property_name = int(Z'10001')"}, {"sha": "62b2b0ea5596deb2717ea75966c7e178ff1cc765", "filename": "libgomp/openacc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fopenacc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fopenacc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.h?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -64,8 +64,7 @@ typedef enum acc_device_t {\n } acc_device_t;\n \n typedef enum acc_device_property_t {\n-  /* Keep in sync with include/gomp-constants.h.  */\n-  /* Start from 1 to catch uninitialized use.  */\n+  /* Keep in sync with 'libgomp/libgomp-plugin.h:goacc_property'.  */\n   acc_property_memory = 1,\n   acc_property_free_memory = 2,\n   acc_property_name = 0x10001,"}, {"sha": "16ce251f3a5600c6e067eb64eb122d4b5a98647d", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -3236,17 +3236,6 @@ GOMP_OFFLOAD_get_num_devices (void)\n   return hsa_context.agent_count;\n }\n \n-union gomp_device_property_value\n-GOMP_OFFLOAD_get_property (int device, int prop)\n-{\n-  /* Stub. Check device and return default value for unsupported properties. */\n-  /* TODO: Implement this function. */\n-  get_agent_info (device);\n-\n-  union gomp_device_property_value nullval = { .val = 0 };\n-  return nullval;\n-}\n-\n /* Initialize device (agent) number N so that it can be used for computation.\n    Return TRUE on success.  */\n \n@@ -3999,6 +3988,17 @@ GOMP_OFFLOAD_openacc_async_dev2host (int device, void *dst, const void *src,\n   return true;\n }\n \n+union goacc_property_value\n+GOMP_OFFLOAD_openacc_get_property (int device, enum goacc_property prop)\n+{\n+  /* Stub. Check device and return default value for unsupported properties. */\n+  /* TODO: Implement this function. */\n+  get_agent_info (device);\n+\n+  union goacc_property_value nullval = { .val = 0 };\n+  return nullval;\n+}\n+\n /* Set up plugin-specific thread-local-data (host-side).  */\n \n void *"}, {"sha": "abd3bc64163bb864cb05f0809c93875e3e1b24c5", "filename": "libgomp/plugin/plugin-hsa.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-hsa.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -699,32 +699,6 @@ GOMP_OFFLOAD_get_num_devices (void)\n   return hsa_context.agent_count;\n }\n \n-/* Part of the libgomp plugin interface.  Return the value of property\n-   PROP of agent number N.  */\n-\n-union gomp_device_property_value\n-GOMP_OFFLOAD_get_property (int n, int prop)\n-{\n-  union gomp_device_property_value nullval = { .val = 0 };\n-\n-  if (!init_hsa_context ())\n-    return nullval;\n-  if (n >= hsa_context.agent_count)\n-    {\n-      GOMP_PLUGIN_error\n-\t(\"Request for a property of a non-existing HSA device %i\", n);\n-      return nullval;\n-    }\n-\n-  switch (prop)\n-    {\n-    case GOMP_DEVICE_PROPERTY_VENDOR:\n-      return (union gomp_device_property_value) { .ptr = \"HSA\" };\n-    default:\n-      return nullval;\n-    }\n-}\n-\n /* Part of the libgomp plugin interface.  Initialize agent number N so that it\n    can be used for computation.  Return TRUE on success.  */\n "}, {"sha": "6033c71a9dba645896ca8746da287384b3d24ccd", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 70, "deletions": 68, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -1121,74 +1121,6 @@ GOMP_OFFLOAD_get_num_devices (void)\n   return nvptx_get_num_devices ();\n }\n \n-union gomp_device_property_value\n-GOMP_OFFLOAD_get_property (int n, int prop)\n-{\n-  union gomp_device_property_value propval = { .val = 0 };\n-\n-  pthread_mutex_lock (&ptx_dev_lock);\n-\n-  if (n >= nvptx_get_num_devices () || n < 0 || ptx_devices[n] == NULL)\n-    {\n-      pthread_mutex_unlock (&ptx_dev_lock);\n-      return propval;\n-    }\n-\n-  struct ptx_device *ptx_dev = ptx_devices[n];\n-  switch (prop)\n-    {\n-    case GOMP_DEVICE_PROPERTY_MEMORY:\n-      {\n-\tsize_t total_mem;\n-\n-\tCUDA_CALL_ERET (propval, cuDeviceTotalMem, &total_mem, ptx_dev->dev);\n-\tpropval.val = total_mem;\n-      }\n-      break;\n-    case GOMP_DEVICE_PROPERTY_FREE_MEMORY:\n-      {\n-\tsize_t total_mem;\n-\tsize_t free_mem;\n-\tCUdevice ctxdev;\n-\n-\tCUDA_CALL_ERET (propval, cuCtxGetDevice, &ctxdev);\n-\tif (ptx_dev->dev == ctxdev)\n-\t  CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n-\telse if (ptx_dev->ctx)\n-\t  {\n-\t    CUcontext old_ctx;\n-\n-\t    CUDA_CALL_ERET (propval, cuCtxPushCurrent, ptx_dev->ctx);\n-\t    CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n-\t    CUDA_CALL_ASSERT (cuCtxPopCurrent, &old_ctx);\n-\t  }\n-\telse\n-\t  {\n-\t    CUcontext new_ctx;\n-\n-\t    CUDA_CALL_ERET (propval, cuCtxCreate, &new_ctx, CU_CTX_SCHED_AUTO,\n-\t\t\t    ptx_dev->dev);\n-\t    CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n-\t    CUDA_CALL_ASSERT (cuCtxDestroy, new_ctx);\n-\t  }\n-\tpropval.val = free_mem;\n-      }\n-      break;\n-    case GOMP_DEVICE_PROPERTY_NAME:\n-      propval.ptr = ptx_dev->name;\n-      break;\n-    case GOMP_DEVICE_PROPERTY_VENDOR:\n-      propval.ptr = \"Nvidia\";\n-      break;\n-    case GOMP_DEVICE_PROPERTY_DRIVER:\n-      propval.ptr = cuda_driver_version_s;\n-      break;\n-    }\n-\n-  pthread_mutex_unlock (&ptx_dev_lock);\n-  return propval;\n-}\n-\n bool\n GOMP_OFFLOAD_init_device (int n)\n {\n@@ -1818,6 +1750,76 @@ GOMP_OFFLOAD_openacc_async_dev2host (int ord, void *dst, const void *src,\n   return true;\n }\n \n+union goacc_property_value\n+GOMP_OFFLOAD_openacc_get_property (int n, enum goacc_property prop)\n+{\n+  union goacc_property_value propval = { .val = 0 };\n+\n+  pthread_mutex_lock (&ptx_dev_lock);\n+\n+  if (n >= nvptx_get_num_devices () || n < 0 || ptx_devices[n] == NULL)\n+    {\n+      pthread_mutex_unlock (&ptx_dev_lock);\n+      return propval;\n+    }\n+\n+  struct ptx_device *ptx_dev = ptx_devices[n];\n+  switch (prop)\n+    {\n+    case GOACC_PROPERTY_MEMORY:\n+      {\n+\tsize_t total_mem;\n+\n+\tCUDA_CALL_ERET (propval, cuDeviceTotalMem, &total_mem, ptx_dev->dev);\n+\tpropval.val = total_mem;\n+      }\n+      break;\n+    case GOACC_PROPERTY_FREE_MEMORY:\n+      {\n+\tsize_t total_mem;\n+\tsize_t free_mem;\n+\tCUdevice ctxdev;\n+\n+\tCUDA_CALL_ERET (propval, cuCtxGetDevice, &ctxdev);\n+\tif (ptx_dev->dev == ctxdev)\n+\t  CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n+\telse if (ptx_dev->ctx)\n+\t  {\n+\t    CUcontext old_ctx;\n+\n+\t    CUDA_CALL_ERET (propval, cuCtxPushCurrent, ptx_dev->ctx);\n+\t    CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n+\t    CUDA_CALL_ASSERT (cuCtxPopCurrent, &old_ctx);\n+\t  }\n+\telse\n+\t  {\n+\t    CUcontext new_ctx;\n+\n+\t    CUDA_CALL_ERET (propval, cuCtxCreate, &new_ctx, CU_CTX_SCHED_AUTO,\n+\t\t\t    ptx_dev->dev);\n+\t    CUDA_CALL_ERET (propval, cuMemGetInfo, &free_mem, &total_mem);\n+\t    CUDA_CALL_ASSERT (cuCtxDestroy, new_ctx);\n+\t  }\n+\tpropval.val = free_mem;\n+      }\n+      break;\n+    case GOACC_PROPERTY_NAME:\n+      propval.ptr = ptx_dev->name;\n+      break;\n+    case GOACC_PROPERTY_VENDOR:\n+      propval.ptr = \"Nvidia\";\n+      break;\n+    case GOACC_PROPERTY_DRIVER:\n+      propval.ptr = cuda_driver_version_s;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  pthread_mutex_unlock (&ptx_dev_lock);\n+  return propval;\n+}\n+\n /* Adjust launch dimensions: pick good values for number of blocks and warps\n    and ensure that number of warps does not exceed CUDA limits as well as GCC's\n    own limits.  */"}, {"sha": "3df007283f4b92ccc803394449aebdb841f3055b", "filename": "libgomp/target.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -3028,7 +3028,6 @@ gomp_load_plugin_for_device (struct gomp_device_descr *device,\n   DLSYM (get_caps);\n   DLSYM (get_type);\n   DLSYM (get_num_devices);\n-  DLSYM (get_property);\n   DLSYM (init_device);\n   DLSYM (fini_device);\n   DLSYM (load_image);\n@@ -3061,7 +3060,8 @@ gomp_load_plugin_for_device (struct gomp_device_descr *device,\n \t\t\t openacc_async_queue_callback)\n \t  || !DLSYM_OPT (openacc.async.exec, openacc_async_exec)\n \t  || !DLSYM_OPT (openacc.async.dev2host, openacc_async_dev2host)\n-\t  || !DLSYM_OPT (openacc.async.host2dev, openacc_async_host2dev))\n+\t  || !DLSYM_OPT (openacc.async.host2dev, openacc_async_host2dev)\n+\t  || !DLSYM_OPT (openacc.get_property, openacc_get_property))\n \t{\n \t  /* Require all the OpenACC handlers if we have\n \t     GOMP_OFFLOAD_CAP_OPENACC_200.  */"}, {"sha": "eba510036270599a0e310152f76f5e201045fb77", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -1,3 +1,8 @@\n+2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_get_property):\n+\tRemove.\n+\n 2019-12-22  Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Frederik Harwath  <frederik@codesourcery.com>\n \t    Thomas Schwinge  <tschwinge@codesourcery.com>"}, {"sha": "d1678d0514e91e775fff7fe361b861f706b53782", "filename": "liboffloadmic/plugin/libgomp-plugin-intelmic.cpp", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc0385c0ce39470e137eab27dee8955b3f98258/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc0385c0ce39470e137eab27dee8955b3f98258/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp?ref=6fc0385c0ce39470e137eab27dee8955b3f98258", "patch": "@@ -174,27 +174,6 @@ GOMP_OFFLOAD_get_num_devices (void)\n   return num_devices;\n }\n \n-extern \"C\" union gomp_device_property_value\n-GOMP_OFFLOAD_get_property (int n, int prop)\n-{\n-  union gomp_device_property_value nullval = { .val = 0 };\n-\n-  if (n >= num_devices)\n-    {\n-      GOMP_PLUGIN_error\n-       (\"Request for a property of a non-existing Intel MIC device %i\", n);\n-      return nullval;\n-    }\n-\n-  switch (prop)\n-    {\n-    case GOMP_DEVICE_PROPERTY_VENDOR:\n-      return (union gomp_device_property_value) { .ptr =  \"Intel\" };\n-    default:\n-      return nullval;\n-    }\n-}\n-\n static bool\n offload (const char *file, uint64_t line, int device, const char *name,\n \t int num_vars, VarDesc *vars, const void **async_data)"}]}