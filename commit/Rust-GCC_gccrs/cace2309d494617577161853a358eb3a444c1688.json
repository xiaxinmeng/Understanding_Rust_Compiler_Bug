{"sha": "cace2309d494617577161853a358eb3a444c1688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjZTIzMDlkNDk0NjE3NTc3MTYxODUzYTM1OGViM2E0NDRjMTY4OA==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2017-09-20T13:47:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-20T13:47:30Z"}, "message": "config.gcc: Support \"knm\".\n\ngcc/\n\n        * config.gcc: Support \"knm\".\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect \"knm\".\n        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n        PROCESSOR_KNM.\n        * config/i386/i386.c (m_KNM): Define.\n        (processor_target_table): Add \"knm\".\n        (PTA_KNM): Define.\n        (ix86_option_override_internal): Add \"knm\".\n        (ix86_issue_rate): Add PROCESSOR_KNM.\n        (ix86_adjust_cost): Ditto.\n        (ia32_multipass_dfa_lookahead): Ditto.\n        (get_builtin_code_for_version): Handle PROCESSOR_KNM.\n        (fold_builtin_cpu): Add M_INTEL_KNM.\n        * config/i386/i386.h (processor_costs): Define TARGET_KNM.\n        (processor_type): Add PROCESSOR_KNM.\n         * config/i386/x86-tune.def: Add m_KNM.\n        * doc/invoke.texi: Add knm as x86 -march=/-mtune= CPU type.\n\nlibgcc/\n        * config/i386/cpuinfo.h (processor_types): Add INTEL_KNM.\n        * config/i386/cpuinfo.c (get_intel_cpu): Detect Knights Mill.\n\ngcc/testsuite/\n\n        * gcc.target/i386/builtin_target.c: Test knm.\n        * gcc.target/i386/funcspec-56.inc: Test arch=knm.\n\nFrom-SVN: r253013", "tree": {"sha": "6c3c5c54ecc5c5ab93aec514857d5e72edff0bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c3c5c54ecc5c5ab93aec514857d5e72edff0bfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cace2309d494617577161853a358eb3a444c1688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace2309d494617577161853a358eb3a444c1688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cace2309d494617577161853a358eb3a444c1688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace2309d494617577161853a358eb3a444c1688/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf"}], "stats": {"total": 170, "additions": 123, "deletions": 47}, "files": [{"sha": "1bbb3bf6eb43f1267eeabaa5994101382af78c8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -1,3 +1,23 @@\n+2017-09-20  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config.gcc: Support \"knm\".\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"knm\".\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tPROCESSOR_KNM.\n+\t* config/i386/i386.c (m_KNM): Define.\n+\t(processor_target_table): Add \"knm\".\n+\t(PTA_KNM): Define.\n+\t(ix86_option_override_internal): Add \"knm\".\n+\t(ix86_issue_rate): Add PROCESSOR_KNM.\n+\t(ix86_adjust_cost): Ditto.\n+\t(ia32_multipass_dfa_lookahead): Ditto.\n+\t(get_builtin_code_for_version): Handle PROCESSOR_KNM.\n+\t(fold_builtin_cpu): Add M_INTEL_KNM.\n+\t* config/i386/i386.h (processor_costs): Define TARGET_KNM.\n+\t(processor_type): Add PROCESSOR_KNM.\n+\t* config/i386/x86-tune.def: Add m_KNM.\n+\t* doc/invoke.texi: Add knm as x86 -march=/-mtune= CPU type.\n+\n 2017-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80213\n@@ -97,7 +117,7 @@\n \t* rtl.h (get_stack_check_protect): Prototype.\n \t* target.def (stack_clash_protection_final_dynamic_probe): New hook.\n \t* targhooks.c (default_stack_clash_protection_final_dynamic_probe): New.\n-\t* targhooks.h (default_stack_clash_protection_final_dynamic_probe): \n+\t* targhooks.h (default_stack_clash_protection_final_dynamic_probe):\n \tPrototype.\n \t* doc/tm.texi.in (TARGET_STACK_CLASH_PROTECTION_FINAL_DYNAMIC_PROBE):\n \tAdd @hook.\n@@ -312,8 +332,8 @@\n \n 2017-09-17  Daniel Santos  <daniel.santos@pobox.com>\n \n-\tconfig/i386/i386.c: (xlogue_layout::STUB_NAME_MAX_LEN): Increase to 20\n-\tbytes.\n+\t* config/i386/i386.c (xlogue_layout::STUB_NAME_MAX_LEN):\n+\tIncrease to 20 bytes.\n \t(xlogue_layout::s_stub_names): Add an additional size-2 diminsion.\n \t(xlogue_layout::get_stub_name): Modify to select the appropairate sse\n \tor avx version of the stub."}, {"sha": "555ed69e4e95db60e3d54231380561e683bf620b", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -623,7 +623,7 @@ pentium4 pentium4m pentiumpro prescott lakemont\"\n x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n-sandybridge ivybridge haswell broadwell bonnell silvermont knl \\\n+sandybridge ivybridge haswell broadwell bonnell silvermont knl knm \\\n skylake-avx512 x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor"}, {"sha": "e78cd929d6f5599f1e456348c9d368a9eb47097a", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -790,13 +790,20 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  /* Knights Landing.  */\n \t  cpu = \"knl\";\n \t  break;\n+\tcase 0x85:\n+\t  /* Knights Mill. */\n+\t  cpu = \"knm\";\n+\t  break;\n \tdefault:\n \t  if (arch)\n \t    {\n \t      /* This is unknown family 0x6 CPU.  */\n \t      /* Assume Knights Landing.  */\n \t      if (has_avx512f)\n \t\tcpu = \"knl\";\n+\t      /* Assume Knights Mill */\n+\t      else if (has_avx5124vnniw)\n+\t\tcpu = \"knm\";\n \t      /* Assume Skylake.  */\n \t      else if (has_clflushopt)\n \t\tcpu = \"skylake\";"}, {"sha": "44cbe28c8633a7ebc1e35245ebadbe010967b6ce", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -176,6 +176,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__knl\");\n       def_or_undef (parse_in, \"__knl__\");\n       break;\n+    case PROCESSOR_KNM:\n+      def_or_undef (parse_in, \"__knm\");\n+      def_or_undef (parse_in, \"__knm__\");\n+      break;\n     case PROCESSOR_SKYLAKE_AVX512:\n       def_or_undef (parse_in, \"__skylake_avx512\");\n       def_or_undef (parse_in, \"__skylake_avx512__\");\n@@ -292,6 +296,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__tune_knl__\");\n       break;\n+    case PROCESSOR_KNM:\n+      def_or_undef (parse_in, \"__tune_knm__\");\n+      break;\n     case PROCESSOR_SKYLAKE_AVX512:\n       def_or_undef (parse_in, \"__tune_skylake_avx512__\");\n       break;"}, {"sha": "aeafd0d5d21bed8ca72801634f14e1c367137f8c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -2192,6 +2192,7 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_BONNELL (1U<<PROCESSOR_BONNELL)\n #define m_SILVERMONT (1U<<PROCESSOR_SILVERMONT)\n #define m_KNL (1U<<PROCESSOR_KNL)\n+#define m_KNM (1U<<PROCESSOR_KNM)\n #define m_SKYLAKE_AVX512 (1U<<PROCESSOR_SKYLAKE_AVX512)\n #define m_INTEL (1U<<PROCESSOR_INTEL)\n \n@@ -2903,6 +2904,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"bonnell\", &atom_cost, 16, 15, 16, 7, 16},\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n+  {\"knm\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"skylake-avx512\", &core_cost, 16, 10, 16, 10, 16},\n   {\"intel\", &intel_cost, 16, 15, 16, 7, 16},\n   {\"geode\", &geode_cost, 0, 0, 0, 0, 0},\n@@ -5352,6 +5354,8 @@ ix86_option_override_internal (bool main_args_p,\n   (PTA_CORE2 | PTA_MOVBE)\n #define PTA_SILVERMONT \\\n   (PTA_WESTMERE | PTA_MOVBE)\n+#define PTA_KNM \\\n+  (PTA_KNL | PTA_AVX5124VNNIW | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ)\n \n /* if this reaches 64, need to widen struct pta flags below */\n \n@@ -5422,6 +5426,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n       {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n       {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n+      {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n       {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n       {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n \tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n@@ -30282,6 +30287,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_BONNELL:\n     case PROCESSOR_SILVERMONT:\n     case PROCESSOR_KNL:\n+    case PROCESSOR_KNM:\n     case PROCESSOR_INTEL:\n     case PROCESSOR_K6:\n     case PROCESSOR_BTVER2:\n@@ -30648,6 +30654,7 @@ ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \n     case PROCESSOR_SILVERMONT:\n     case PROCESSOR_KNL:\n+    case PROCESSOR_KNM:\n     case PROCESSOR_INTEL:\n       if (!reload_completed)\n \treturn cost;\n@@ -30719,6 +30726,7 @@ ia32_multipass_dfa_lookahead (void)\n     case PROCESSOR_BONNELL:\n     case PROCESSOR_SILVERMONT:\n     case PROCESSOR_KNL:\n+    case PROCESSOR_KNM:\n     case PROCESSOR_INTEL:\n       /* Generally, we want haifa-sched:max_issue() to look ahead as far\n \t as many instructions can be executed on a cycle, i.e.,\n@@ -33844,6 +33852,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"knl\";\n \t      priority = P_PROC_AVX512F;\n \t      break;\n+\t    case PROCESSOR_KNM:\n+\t      arg_str = \"knm\";\n+\t      priority = P_PROC_AVX512F;\n+\t      break;\n \t    case PROCESSOR_SILVERMONT:\n \t      arg_str = \"silvermont\";\n \t      priority = P_PROC_SSE4_2;\n@@ -34527,6 +34539,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMD_BTVER1,\n     M_AMD_BTVER2,    \n     M_AMDFAM17H,\n+    M_INTEL_KNM,\n     M_CPU_SUBTYPE_START,\n     M_INTEL_COREI7_NEHALEM,\n     M_INTEL_COREI7_WESTMERE,\n@@ -34570,6 +34583,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"bonnell\", M_INTEL_BONNELL},\n       {\"silvermont\", M_INTEL_SILVERMONT},\n       {\"knl\", M_INTEL_KNL},\n+      {\"knm\", M_INTEL_KNM},\n       {\"amdfam10h\", M_AMDFAM10H},\n       {\"barcelona\", M_AMDFAM10H_BARCELONA},\n       {\"shanghai\", M_AMDFAM10H_SHANGHAI},"}, {"sha": "012b85d07d7748aa66dccff6b1a0ed30a9f1dd6d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -351,6 +351,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_BONNELL (ix86_tune == PROCESSOR_BONNELL)\n #define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n #define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n+#define TARGET_KNM (ix86_tune == PROCESSOR_KNM)\n #define TARGET_SKYLAKE_AVX512 (ix86_tune == PROCESSOR_SKYLAKE_AVX512)\n #define TARGET_INTEL (ix86_tune == PROCESSOR_INTEL)\n #define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n@@ -2250,6 +2251,7 @@ enum processor_type\n   PROCESSOR_BONNELL,\n   PROCESSOR_SILVERMONT,\n   PROCESSOR_KNL,\n+  PROCESSOR_KNM,\n   PROCESSOR_SKYLAKE_AVX512,\n   PROCESSOR_INTEL,\n   PROCESSOR_GEODE,"}, {"sha": "82c853bd9394e1f51b32dd4859e04aa44f204ed1", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -41,15 +41,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* X86_TUNE_SCHEDULE: Enable scheduling.  */\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_KNL | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Preffer stores affecting whole integer register\n    over partial stores.  For example preffer MOVZBL or MOVQ to load 8bit\n    value over movb.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t  | m_KNL | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n    destinations to be 128bit to allow register renaming on 128bit SSE units,\n@@ -85,13 +85,13 @@ DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n    partial dependencies.  */\n DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_KNL | m_INTEL | m_GEODE | m_AMD_MULTIPLE  | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE  | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t  | m_KNL | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.\n@@ -125,7 +125,7 @@ DEF_TUNE (X86_TUNE_REASSOC_INT_TO_PARALLEL, \"reassoc_int_to_parallel\",\n /* X86_TUNE_REASSOC_FP_TO_PARALLEL: Try to produce parallel computations\n    during reassociation of fp computation.  */\n DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n-          m_BONNELL | m_SILVERMONT | m_HASWELL | m_KNL |m_INTEL | m_BDVER1\n+          m_BONNELL | m_SILVERMONT | m_HASWELL | m_KNL | m_KNM |m_INTEL | m_BDVER1\n \t  | m_BDVER2 | m_ZNVER1 | m_GENERIC)\n \n /*****************************************************************************/\n@@ -145,7 +145,7 @@ DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n    regression on mgrid due to IRA limitation leading to unecessary\n    use of the frame pointer in 32bit mode.  */\n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n-\t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL\n+\t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_ATHLON_K8)\n \n /* X86_TUNE_PROLOGUE_USING_MOVE: Do not use push/pop in prologues that are\n@@ -207,8 +207,8 @@ DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n-          m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL |m_INTEL |\n-\t  m_ATHLON_K8 | m_AMDFAM10)\n+          m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM\n+\t |m_INTEL | m_ATHLON_K8 | m_AMDFAM10)\n \n /*****************************************************************************/\n /* Integer instruction selection tuning                                      */\n@@ -231,22 +231,22 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n /* X86_TUNE_USE_INCDEC: Enable use of inc/dec instructions.   */\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t   |  m_KNL | m_GENERIC))\n+\t   |  m_KNL | m_KNM | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t    | m_KNL | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_KNL\n-\t  | m_INTEL)\n+\t | m_KNM | m_INTEL)\n \n /* X86_TUNE_AVOID_LEA_FOR_ADDR: Avoid lea for address computation.  */\n DEF_TUNE (X86_TUNE_AVOID_LEA_FOR_ADDR, \"avoid_lea_for_addr\",\n-\t  m_BONNELL | m_SILVERMONT | m_KNL)\n+\t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM)\n \n /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n    vector path on AMD machines.\n@@ -263,7 +263,7 @@ DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\",\n /* X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE: Try to avoid memory operands for\n    a conditional move.  */\n DEF_TUNE (X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE, \"avoid_mem_opnd_for_cmove\",\n-\t  m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL)\n+\t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n \n /* X86_TUNE_SINGLE_STRINGOP: Enable use of single string operations, such\n    as MOVS and STOS (without a REP prefix) to move/set sequences of bytes.  */\n@@ -281,17 +281,17 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n /* X86_TUNE_USE_SAHF: Controls use of SAHF.  */\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_KNL | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n+\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n \t  | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n-\t  ~(m_PENT | m_LAKEMONT | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL\n+\t  ~(m_PENT | m_LAKEMONT | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t    | m_K6))\n \n /* X86_TUNE_USE_BT: Enable use of BT (bit test) instructions.  */\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n-          m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL\n+          m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GENERIC)\n \n /*****************************************************************************/\n@@ -308,15 +308,15 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n    integer operand.  */\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n-\t    | m_SILVERMONT | m_KNL | m_INTEL | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n \n /* X86_TUNE_EXT_80387_CONSTANTS: Use fancy 80387 constants, such as PI.  */\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_KNL | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -330,13 +330,13 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL: Use movups for misaligned loads instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n@@ -375,7 +375,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n /* X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS: Try to split memory operand for\n    fp converts to destination register.  */\n DEF_TUNE (X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS, \"split_mem_opnd_for_fp_converts\",\n-          m_SILVERMONT | m_KNL | m_INTEL)\n+          m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n \n /* X86_TUNE_USE_VECTOR_FP_CONVERTS: Prefer vector packed SSE conversion\n    from FP to FP.  This form of instructions avoids partial write to the\n@@ -389,7 +389,7 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n \n /* X86_TUNE_SLOW_SHUFB: Indicates tunings with slow pshufb instruction.  */\n DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n-          m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL)\n+          m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n \n /* X86_TUNE_VECTOR_PARALLEL_EXECUTION: Indicates tunings with ability to\n    execute 2 or more vector instructions in parallel.  */\n@@ -550,4 +550,4 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n /* X86_TUNE_ONE_IF_CONV_INSNS: Restrict a number of cmov insns in\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n-\t  m_SILVERMONT | m_KNL | m_INTEL | m_CORE_ALL | m_GENERIC)\n+\t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GENERIC)"}, {"sha": "db843edd427e381cd9cb7fe67f74e6772acc1b73", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -25089,6 +25089,12 @@ SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER and\n AVX512CD instruction set support.\n \n+@item knm\n+Intel Knights Mill CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n+SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n+BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n+AVX5124VNNIW, AVX5124FMAPS and AVX512VPOPCNTDQ instruction set support.\n+\n @item skylake-avx512\n Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,"}, {"sha": "8d44116db01fa4357754c28910cade0b3b5e0333", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -1,3 +1,8 @@\n+2017-09-20  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/builtin_target.c: Test knm.\n+\t* gcc.target/i386/funcspec-56.inc: Test arch=knm.\n+\n 2017-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77362"}, {"sha": "8fa97973ef880ed34c33b19dda6e2211b5283f2d", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -42,6 +42,10 @@ check_intel_cpu_model (unsigned int family, unsigned int model,\n \t      /* Knights Landing.  */\n \t      assert (__builtin_cpu_is (\"knl\"));\n \t      break;\n+\t    case 0x85:\n+\t      /* Knights Mill */\n+\t      assert (__builtin_cpu_is (\"knm\"));\n+\t      break;\n \t    case 0x1a:\n \t    case 0x1e:\n \t    case 0x1f:"}, {"sha": "9ae74cb9581f5a557c2b26cc349412e2b21c10f6", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -142,6 +142,7 @@ extern void test_arch_corei7 (void)\t\t__attribute__((__target__(\"arch=corei7\")));\n extern void test_arch_corei7_avx (void)\t\t__attribute__((__target__(\"arch=corei7-avx\")));\n extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx2\")));\n extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n+extern void test_arch_knm (void)\t\t__attribute__((__target__(\"arch=knm\")));\n extern void test_arch_skylake_avx512 (void)\t__attribute__((__target__(\"arch=skylake-avx512\")));\n extern void test_arch_k8 (void)\t\t\t__attribute__((__target__(\"arch=k8\")));\n extern void test_arch_k8_sse3 (void)\t\t__attribute__((__target__(\"arch=k8-sse3\")));"}, {"sha": "1a627c0b86d9a6afac74f3d424003141e9411c24", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -1,30 +1,35 @@\n+2017-09-20  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/cpuinfo.h (processor_types): Add INTEL_KNM.\n+\t* config/i386/cpuinfo.c (get_intel_cpu): Detect Knights Mill.\n+\n 2017-09-17  Daniel Santos  <daniel.santos@pobox.com>\n \n-\tconfig/i386/i386-asm.h (PASTE2): New macro.\n+\t* config/i386/i386-asm.h (PASTE2): New macro.\n \t(ASMNAME): Modify to use PASTE2.\n \t(MS2SYSV_STUB_PREFIX): New macro for isa prefix.\n \t(MS2SYSV_STUB_BEGIN, MS2SYSV_STUB_END): New macros for stub headers.\n-\tconfig/i386/resms64.S: Rename to a header file, use MS2SYSV_STUB_BEGIN\n+\t* config/i386/resms64.S: Rename to a header file, use MS2SYSV_STUB_BEGIN\n \tinstead of HIDDEN_FUNC and MS2SYSV_STUB_END instead of FUNC_END.\n-\tconfig/i386/resms64f.S: Likewise.\n-\tconfig/i386/resms64fx.S: Likewise.\n-\tconfig/i386/resms64x.S: Likewise.\n-\tconfig/i386/savms64.S: Likewise.\n-\tconfig/i386/savms64f.S: Likewise.\n-\tconfig/i386/avx_resms64.S: New file that only defines a macro and\n+\t* config/i386/resms64f.S: Likewise.\n+\t* config/i386/resms64fx.S: Likewise.\n+\t* config/i386/resms64x.S: Likewise.\n+\t* config/i386/savms64.S: Likewise.\n+\t* config/i386/savms64f.S: Likewise.\n+\t* config/i386/avx_resms64.S: New file that only defines a macro and\n \tincludes it's corresponding header file.\n-\tconfig/i386/avx_resms64f.S: Likewise.\n-\tconfig/i386/avx_resms64fx.S: Likewise.\n-\tconfig/i386/avx_resms64x.S: Likewise.\n-\tconfig/i386/avx_savms64.S: Likewise.\n-\tconfig/i386/avx_savms64f.S: Likewise.\n-\tconfig/i386/sse_resms64.S: Likewise.\n-\tconfig/i386/sse_resms64f.S: Likewise.\n-\tconfig/i386/sse_resms64fx.S: Likewise.\n-\tconfig/i386/sse_resms64x.S: Likewise.\n-\tconfig/i386/sse_savms64.S: Likewise.\n-\tconfig/i386/sse_savms64f.S: Likewise.\n-\tconfig/i386/t-msabi: Modified to add avx and sse versions of stubs.\n+\t* config/i386/avx_resms64f.S: Likewise.\n+\t* config/i386/avx_resms64fx.S: Likewise.\n+\t* config/i386/avx_resms64x.S: Likewise.\n+\t* config/i386/avx_savms64.S: Likewise.\n+\t* config/i386/avx_savms64f.S: Likewise.\n+\t* config/i386/sse_resms64.S: Likewise.\n+\t* config/i386/sse_resms64f.S: Likewise.\n+\t* config/i386/sse_resms64fx.S: Likewise.\n+\t* config/i386/sse_resms64x.S: Likewise.\n+\t* config/i386/sse_savms64.S: Likewise.\n+\t* config/i386/sse_savms64f.S: Likewise.\n+\t* config/i386/t-msabi: Modified to add avx and sse versions of stubs.\n \n 2017-09-01  Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "c2ab8bed88eec5d6261bc67107fbfd8648cf6f38", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -137,6 +137,10 @@ get_intel_cpu (unsigned int family, unsigned int model, unsigned int brand_id)\n \t      /* Knights Landing.  */\n \t      __cpu_model.__cpu_type = INTEL_KNL;\n \t      break;\n+\t    case 0x85:\n+\t      /* Knights Mill. */\n+\t      __cpu_model.__cpu_type = INTEL_KNM;\n+\t      break;\n \t    case 0x1a:\n \t    case 0x1e:\n \t    case 0x1f:"}, {"sha": "397840160c08b707ac33b7704525ecc17ddf49d7", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace2309d494617577161853a358eb3a444c1688/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace2309d494617577161853a358eb3a444c1688/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=cace2309d494617577161853a358eb3a444c1688", "patch": "@@ -47,6 +47,7 @@ enum processor_types\n   AMD_BTVER1,\n   AMD_BTVER2,  \n   AMDFAM17H,\n+  INTEL_KNM,\n   CPU_TYPE_MAX\n };\n "}]}