{"sha": "e5df894b42716006a8fccd922530782b7aaeb745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkZjg5NGI0MjcxNjAwNmE4ZmNjZDkyMjUzMDc4MmI3YWFlYjc0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-10T12:03:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-10T12:03:05Z"}, "message": "(lshl_optab): Deleted.\n\n(expand_binop, init_optabs): No longer reference it.\n\nFrom-SVN: r7019", "tree": {"sha": "6d19ababce46795593e89874ac1b9ab571193597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d19ababce46795593e89874ac1b9ab571193597"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5df894b42716006a8fccd922530782b7aaeb745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df894b42716006a8fccd922530782b7aaeb745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5df894b42716006a8fccd922530782b7aaeb745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df894b42716006a8fccd922530782b7aaeb745/comments", "author": null, "committer": null, "parents": [{"sha": "9c2683afa3951f2d1eb3d48d6b5e5da533adac16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2683afa3951f2d1eb3d48d6b5e5da533adac16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c2683afa3951f2d1eb3d48d6b5e5da533adac16"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "b2a22890f061a3aa21c53a7eb8f57ab4f29dd154", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df894b42716006a8fccd922530782b7aaeb745/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df894b42716006a8fccd922530782b7aaeb745/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e5df894b42716006a8fccd922530782b7aaeb745", "patch": "@@ -57,7 +57,6 @@ optab ior_optab;\n optab xor_optab;\n optab ashl_optab;\n optab lshr_optab;\n-optab lshl_optab;\n optab ashr_optab;\n optab rotl_optab;\n optab rotr_optab;\n@@ -334,7 +333,6 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n   int commutative_op = 0;\n   int shift_op = (binoptab->code ==  ASHIFT\n \t\t  || binoptab->code == ASHIFTRT\n-\t\t  || binoptab->code == LSHIFT\n \t\t  || binoptab->code == LSHIFTRT\n \t\t  || binoptab->code == ROTATE\n \t\t  || binoptab->code == ROTATERT);\n@@ -517,17 +515,15 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t    if ((binoptab == ior_optab || binoptab == and_optab\n \t\t || binoptab == xor_optab\n \t\t || binoptab == add_optab || binoptab == sub_optab\n-\t\t || binoptab == smul_optab\n-\t\t || binoptab == ashl_optab || binoptab == lshl_optab)\n+\t\t || binoptab == smul_optab || binoptab == ashl_optab)\n \t\t&& class == MODE_INT)\n \t      no_extend = 1;\n \n \t    xop0 = widen_operand (xop0, wider_mode, mode, unsignedp, no_extend);\n \n \t    /* The second operand of a shift must always be extended.  */\n \t    xop1 = widen_operand (xop1, wider_mode, mode, unsignedp,\n-\t\t\t\t  no_extend && binoptab != ashl_optab\n-\t\t\t\t  && binoptab != lshl_optab);\n+\t\t\t\t  no_extend && binoptab != ashl_optab);\n \n \t    temp = expand_binop (wider_mode, binoptab, xop0, xop1, NULL_RTX,\n \t\t\t\t unsignedp, OPTAB_DIRECT);\n@@ -591,8 +587,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n     }\n \n   /* Synthesize double word shifts from single word shifts.  */\n-  if ((binoptab == lshl_optab || binoptab == lshr_optab\n-       || binoptab == ashl_optab || binoptab == ashr_optab)\n+  if ((binoptab == lshr_optab || binoptab == ashl_optab\n+       || binoptab == ashr_optab)\n       && class == MODE_INT\n       && GET_CODE (op1) == CONST_INT\n       && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n@@ -619,7 +615,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t they differ depending on the direction of the shift and\n \t WORDS_BIG_ENDIAN.  */\n \n-      left_shift = (binoptab == ashl_optab || binoptab == lshl_optab);\n+      left_shift = binoptab == ashl_optab;\n       outof_word = left_shift ^ ! WORDS_BIG_ENDIAN;\n \n       outof_target = operand_subword (target, outof_word, 1, mode);\n@@ -656,9 +652,6 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t     we must do a logical shift in the opposite direction of the\n \t     desired shift.  */\n \n-\t  /* We use ashl_optab instead of lshl_optab, because ashl is\n-\t     guaranteed to exist, but lshl may or may not exist.  */\n-\n \t  reverse_unsigned_shift = (left_shift ? lshr_optab : ashl_optab);\n \n \t  /* For a shift of less than BITS_PER_WORD, to compute the word\n@@ -1436,8 +1429,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t      if ((binoptab == ior_optab || binoptab == and_optab\n \t\t   || binoptab == xor_optab\n \t\t   || binoptab == add_optab || binoptab == sub_optab\n-\t\t   || binoptab == smul_optab\n-\t\t   || binoptab == ashl_optab || binoptab == lshl_optab)\n+\t\t   || binoptab == smul_optab || binoptab == ashl_optab)\n \t\t  && class == MODE_INT)\n \t\tno_extend = 1;\n \n@@ -1446,8 +1438,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n \t      /* The second operand of a shift must always be extended.  */\n \t      xop1 = widen_operand (xop1, wider_mode, mode, unsignedp,\n-\t\t\t\t    no_extend && binoptab != ashl_optab\n-\t\t\t\t    && binoptab != lshl_optab);\n+\t\t\t\t    no_extend && binoptab != ashl_optab);\n \n \t      temp = expand_binop (wider_mode, binoptab, xop0, xop1, NULL_RTX,\n \t\t\t\t   unsignedp, methods);\n@@ -3588,7 +3579,6 @@ init_optabs ()\n   xor_optab = init_optab (XOR);\n   ashl_optab = init_optab (ASHIFT);\n   ashr_optab = init_optab (ASHIFTRT);\n-  lshl_optab = init_optab (LSHIFT);\n   lshr_optab = init_optab (LSHIFTRT);\n   rotl_optab = init_optab (ROTATE);\n   rotr_optab = init_optab (ROTATERT);\n@@ -3654,7 +3644,6 @@ init_optabs ()\n   init_integral_libfuncs (xor_optab, \"xor\", '3');\n   init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n   init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n-  init_integral_libfuncs (lshl_optab, \"lshl\", '3');\n   init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n   init_integral_libfuncs (rotl_optab, \"rotl\", '3');\n   init_integral_libfuncs (rotr_optab, \"rotr\", '3');"}]}