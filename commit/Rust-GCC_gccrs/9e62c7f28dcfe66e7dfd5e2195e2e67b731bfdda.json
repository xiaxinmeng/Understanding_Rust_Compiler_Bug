{"sha": "9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2MmM3ZjI4ZGNmZTY2ZTdkZmQ1ZTIxOTVlMmU2N2I3MzFiZmRkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-12T18:09:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-12T18:09:55Z"}, "message": "(TARGET_OPTIONS): Added alignment options.\n\n(MAX_CODE_ALIGN, ASM_OUTPUT_LOOP_ALIGN, ASM_OUTPUT_ALIGN_CODE):\nNew macros.\n(FUNCTION_BOUNDARY): Use value derrived from  m68k_align_funcs\ninstead of constant.\n\nFrom-SVN: r13126", "tree": {"sha": "a2dbd287e35d68231266e7a9fd74bfc3b806d7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2dbd287e35d68231266e7a9fd74bfc3b806d7be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda/comments", "author": null, "committer": null, "parents": [{"sha": "ef1dbfb03b1a49c67edcaaff2d49454659907091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1dbfb03b1a49c67edcaaff2d49454659907091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1dbfb03b1a49c67edcaaff2d49454659907091"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "581797752a399191ddf62fcb1e2cb94f7bd9a4c2", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9e62c7f28dcfe66e7dfd5e2195e2e67b731bfdda", "patch": "@@ -158,17 +158,42 @@ extern int target_flags;\n     { \"\", TARGET_DEFAULT}}\n /* TARGET_DEFAULT is defined in sun*.h and isi.h, etc.  */\n \n-/* This is meant to be redefined in the host dependent files */\n-#define SUBTARGET_SWITCHES\n+/* This macro is similar to `TARGET_SWITCHES' but defines names of\n+   command options that have values.  Its definition is an\n+   initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   fixed part of the option name, and the address of a variable.  The\n+   variable, type `char *', is set to the variable part of the given\n+   option if the fixed part matches.  The actual option name is made\n+   by appending `-m' to the specified name.  */\n+#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n+{ { \"align-loops=\",\t&m68k_align_loops_string },\t\t\t\\\n+  { \"align-jumps=\",\t&m68k_align_jumps_string },\t\t\t\\\n+  { \"align-functions=\",\t&m68k_align_funcs_string },\t\t\t\\\n+  SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n+}\n+\n+/* Sometimes certain combinations of command options do not make\n+   sense on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   Don't use this macro to turn on various extra optimizations for\n+   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n \n #define OVERRIDE_OPTIONS\t\t\\\n {\t\t\t\t\t\\\n+  override_options();\t\t\t\\\n   if (! TARGET_68020 && flag_pic == 2)\t\\\n     error(\"-fPIC is not currently supported on the 68000 or 68010\\n\");\t\\\n   SUBTARGET_OVERRIDE_OPTIONS;\t\t\\\n }\n \n-/* This is meant to be redefined in the host dependent files */\n+/* These are meant to be redefined in the host dependent files */\n+#define SUBTARGET_SWITCHES\n+#define SUBTARGET_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\n \f\n /* target machine storage layout */\n@@ -223,7 +248,7 @@ extern int target_flags;\n #define STACK_BOUNDARY 16\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n-#define FUNCTION_BOUNDARY 16\n+#define FUNCTION_BOUNDARY (1 << (m68k_align_funcs + 3))\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 16\n@@ -235,6 +260,15 @@ extern int target_flags;\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1\n \n+/* Maximum power of 2 that code can be aligned to.  */\n+#define MAX_CODE_ALIGN\t2\t\t\t/* 4 byte alignment */\n+\n+/* Align loop starts for optimal branching.  */\n+#define ASM_OUTPUT_LOOP_ALIGN(FILE) ASM_OUTPUT_ALIGN ((FILE), m68k_align_loops)\n+\n+/* This is how to align an instruction for optimal branching. */\n+#define ASM_OUTPUT_ALIGN_CODE(FILE) ASM_OUTPUT_ALIGN ((FILE), m68k_align_jumps)\n+\n #define SELECT_RTX_SECTION(MODE, X)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (!flag_pic)\t\t\t\t\t\t\t\\\n@@ -2042,6 +2076,15 @@ extern char *output_move_const_single ();\n extern char *output_move_const_double ();\n extern char *output_btst ();\n extern char *output_scc_di ();\n+\n+/* Variables in m68k.c */\n+extern char *m68k_align_loops_string;\n+extern char *m68k_align_jumps_string;\n+extern char *m68k_align_funcs_string;\n+extern int m68k_align_loops;\n+extern int m68k_align_jumps;\n+extern int m68k_align_funcs;\n+\n \f\n /*\n Local variables:"}]}