{"sha": "005054e48e2d6c4d9b0aac7fda2e4a324886307c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1MDU0ZTQ4ZTJkNmM0ZDliMGFhYzdmZGEyZTRhMzI0ODg2MzA3Yw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-20T22:25:53Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T17:48:22Z"}, "message": "rs6000: Main function with stubs for parsing and output\n\n2021-07-20  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (rbtree.h): New #include.\n\t(num_bifs): New variable.\n\t(num_ovld_stanzas): Likewise.\n\t(num_ovlds): Likewise.\n\t(parse_codes): New enum.\n\t(bif_rbt): New variable.\n\t(ovld_rbt): Likewise.\n\t(fntype_rbt): Likewise.\n\t(bifo_rbt): Likewise.\n\t(parse_bif): New stub function.\n\t(create_bif_order): Likewise.\n\t(parse_ovld): Likewise.\n\t(write_header_file): Likewise.\n\t(write_init_file): Likewise.\n\t(write_defines_file): Likewise.\n\t(delete_output_files): New function.\n\t(main): Likewise.", "tree": {"sha": "10d7af67e36ed9a1d65012f0f8ab674fa78af1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10d7af67e36ed9a1d65012f0f8ab674fa78af1e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005054e48e2d6c4d9b0aac7fda2e4a324886307c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005054e48e2d6c4d9b0aac7fda2e4a324886307c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005054e48e2d6c4d9b0aac7fda2e4a324886307c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005054e48e2d6c4d9b0aac7fda2e4a324886307c/comments", "author": null, "committer": null, "parents": [{"sha": "7aa28dbc371cf3c09c05c68672b00d9006391595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa28dbc371cf3c09c05c68672b00d9006391595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa28dbc371cf3c09c05c68672b00d9006391595"}], "stats": {"total": 215, "additions": 215, "deletions": 0}, "files": [{"sha": "08aa76b13c46293c54a745a1b9d849a0616dce46", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005054e48e2d6c4d9b0aac7fda2e4a324886307c/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005054e48e2d6c4d9b0aac7fda2e4a324886307c/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=005054e48e2d6c4d9b0aac7fda2e4a324886307c", "patch": "@@ -163,6 +163,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <string.h>\n #include <assert.h>\n #include <unistd.h>\n+#include \"rbtree.h\"\n \n /* Input and output file descriptors and pathnames.  */\n static FILE *bif_file;\n@@ -249,6 +250,29 @@ struct typeinfo\n   char *val2;\n };\n \n+static int num_bifs;\n+static int num_ovld_stanzas;\n+static int num_ovlds;\n+\n+/* Return codes for parsing routines.  */\n+enum parse_codes\n+{\n+  PC_OK,\n+  PC_EOFILE,\n+  PC_EOSTANZA,\n+  PC_PARSEFAIL\n+};\n+\n+/* The red-black trees for built-in function identifiers, built-in\n+   overload identifiers, and function type descriptors.  */\n+static rbt_strings bif_rbt;\n+static rbt_strings ovld_rbt;\n+static rbt_strings fntype_rbt;\n+\n+/* Another red-black tree containing a mapping from built-in function\n+   identifiers to the order in which they were encountered.  */\n+static rbt_strings bifo_rbt;\n+\n /* Pointer to a diagnostic function.  */\n static void (*diag) (const char *, ...)\n   __attribute__ ((format (printf, 1, 2)));\n@@ -864,3 +888,194 @@ match_type (typeinfo *typedata, int voidok)\n \n   return 1;\n }\n+\n+/* Parse the built-in file.  */\n+static parse_codes\n+parse_bif (void)\n+{\n+  return PC_OK;\n+}\n+\n+/* Create a mapping from function IDs in their final order to the order\n+   they appear in the built-in function file.  */\n+static void\n+create_bif_order (void)\n+{\n+}\n+\n+/* Parse the overload file.  */\n+static parse_codes\n+parse_ovld (void)\n+{\n+  return PC_OK;\n+}\n+\n+/* Write everything to the header file (rs6000-builtins.h).  Return\n+   1 if successful, 0 otherwise.  */\n+static int\n+write_header_file (void)\n+{\n+  return 1;\n+}\n+\n+/* Write everything to the initialization file (rs6000-builtins.c).\n+   Return 1 if successful, 0 otherwise.  */\n+static int\n+write_init_file (void)\n+{\n+  return 1;\n+}\n+\n+/* Write everything to the include file (rs6000-vecdefines.h).\n+   Return 1 if successful, 0 otherwise.  */\n+static int\n+write_defines_file (void)\n+{\n+  return 1;\n+}\n+\n+/* Close and delete output files after any failure, so that subsequent\n+   build dependencies will fail.  */\n+static void\n+delete_output_files (void)\n+{\n+  /* Depending on whence we're called, some of these may already be\n+     closed.  Don't check for errors.  */\n+  fclose (header_file);\n+  fclose (init_file);\n+  fclose (defines_file);\n+\n+  remove (header_path);\n+  remove (init_path);\n+  remove (defines_path);\n+}\n+\n+/* Main program to convert flat files into built-in initialization code.  */\n+int\n+main (int argc, const char **argv)\n+{\n+  if (argc != 6)\n+    {\n+      fprintf (stderr,\n+\t       \"Five arguments required: two input files and three output \"\n+\t       \"files.\\n\");\n+      exit (1);\n+    }\n+\n+  pgm_path = argv[0];\n+  bif_path = argv[1];\n+  ovld_path = argv[2];\n+  header_path = argv[3];\n+  init_path = argv[4];\n+  defines_path = argv[5];\n+\n+  bif_file = fopen (bif_path, \"r\");\n+  if (!bif_file)\n+    {\n+      fprintf (stderr, \"Cannot open input built-in file '%s'.\\n\", bif_path);\n+      exit (1);\n+    }\n+  ovld_file = fopen (ovld_path, \"r\");\n+  if (!ovld_file)\n+    {\n+      fprintf (stderr, \"Cannot open input overload file '%s'.\\n\", ovld_path);\n+      exit (1);\n+    }\n+  header_file = fopen (header_path, \"w\");\n+  if (!header_file)\n+    {\n+      fprintf (stderr, \"Cannot open header file '%s' for output.\\n\",\n+\t       header_path);\n+      exit (1);\n+    }\n+  init_file = fopen (init_path, \"w\");\n+  if (!init_file)\n+    {\n+      fprintf (stderr, \"Cannot open init file '%s' for output.\\n\", init_path);\n+      exit (1);\n+    }\n+  defines_file = fopen (defines_path, \"w\");\n+  if (!defines_file)\n+    {\n+      fprintf (stderr, \"Cannot open defines file '%s' for output.\\n\",\n+\t       defines_path);\n+      exit (1);\n+    }\n+\n+  /* Initialize the balanced trees containing built-in function ids,\n+     overload function ids, and function type declaration ids.  */\n+  rbt_new (&bif_rbt);\n+  rbt_new (&ovld_rbt);\n+  rbt_new (&fntype_rbt);\n+\n+  /* Initialize another balanced tree that contains a map from built-in\n+     function ids to the order in which they were encountered.  */\n+  rbt_new (&bifo_rbt);\n+\n+  /* Parse the built-in function file.  */\n+  num_bifs = 0;\n+  line = 0;\n+  if (parse_bif () == PC_PARSEFAIL)\n+    {\n+      fprintf (stderr, \"Parsing of '%s' failed, aborting.\\n\", bif_path);\n+      delete_output_files ();\n+      exit (1);\n+    }\n+  fclose (bif_file);\n+\n+  /* Create a mapping from function IDs in their final order to\n+     the order they appear in the built-in function file.  */\n+  create_bif_order ();\n+\n+#ifdef DEBUG\n+  fprintf (stderr, \"\\nFunction ID list:\\n\");\n+  rbt_dump (&bif_rbt, bif_rbt.rbt_root);\n+  fprintf (stderr, \"\\n\");\n+#endif\n+\n+  /* Parse the overload file.  */\n+  num_ovld_stanzas = 0;\n+  num_ovlds = 0;\n+  line = 0;\n+  if (parse_ovld () == PC_PARSEFAIL)\n+    {\n+      fprintf (stderr, \"Parsing of '%s' failed, aborting.\\n\", ovld_path);\n+      delete_output_files ();\n+      exit (1);\n+    }\n+  fclose (ovld_file);\n+\n+#ifdef DEBUG\n+  fprintf (stderr, \"\\nFunction type decl list:\\n\");\n+  rbt_dump (&fntype_rbt, fntype_rbt.rbt_root);\n+  fprintf (stderr, \"\\n\");\n+#endif\n+\n+  /* Write the header file and the file containing initialization code.  */\n+  if (!write_header_file ())\n+    {\n+      fprintf (stderr, \"Output to '%s' failed, aborting.\\n\", header_path);\n+      delete_output_files ();\n+      exit (1);\n+    }\n+  if (!write_init_file ())\n+    {\n+      fprintf (stderr, \"Output to '%s' failed, aborting.\\n\", init_path);\n+      delete_output_files ();\n+      exit (1);\n+    }\n+\n+  /* Write the defines file to be included into altivec.h.  */\n+  if (!write_defines_file ())\n+    {\n+      fprintf (stderr, \"Output to '%s' failed, aborting.\\n\", defines_path);\n+      delete_output_files ();\n+      exit (1);\n+    }\n+\n+  fclose (header_file);\n+  fclose (init_file);\n+  fclose (defines_file);\n+\n+  return 0;\n+}"}]}