{"sha": "0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYwOTAyMDBlN2VlN2QxZWU5ZDZiODRiNDgyNjE4ZGNiYTE0ZDkyZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-05-21T14:50:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:50:38Z"}, "message": "[Ada] Robustify traceback symbolization from dwarf info\n\nSymbolization of traceback entries from dwarf info is\nfailing in multiple cases for addresses originating from\nshared libraries.\n\nPart of the problem is a confusion across different functions\nregarding the kind of \"address\" at hand, sometimes full process\nruntime addresses (e.g. in traceback entries), sometimes module\nrelative (e.g. in dwarf info segments).\n\nThis change fixes this by introducing the use of distinct types\nfor the two kinds of addresses, resorting to System.Address\nfor runtime addresses and to Storage_Elements.Storage_Offset\nfor module relative values. The accompanying code changes\ntidy a few places where we can now use standard operators\nto combine offets & addresses, and include a few corrections\nof consistency problems at spots where comparisons were done\nbetween runtime addresses and relative offsets.\n\n2018-05-21  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-dwalin.ads (Dwarf_Context): Change type of Load_Address to\n\tAddress, and type of Low, High to Storage_Offset.\n\t(Low): Rename as Low_Address and convey that the return value is a\n\truntime reference accounting for a load address.\n\t* libgnat/s-dwalin.adb (Read_Aranges_Entry): Adjust to the\n\taddress/offset type changes.\n\t(Aranges_Lookup): Likewise.\n\t(Symbolic_Address): Likewise.\n\t(Symbolic_Traceback): Likewise.\n\t(Dump_Cache): Likewise.\n\t(Is_Inside): Likewise.\n\t(Open): Likewise.\n\t(Set_Load_Address): Likewise.\n\t(Low_Address): Likewise, and account for C.Load_Address.\n\t* libgnat/s-trasym__dwarf.adb (Lt): Use Low_Address instead of Low.\n\t(Multi_Module_Symbolic_Traceback): Compare address in traceback\n\twith module Low_Address instead of Low.\n\nFrom-SVN: r260450", "tree": {"sha": "c72e689de22676a2278a8bc7919c766d5a8d6fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72e689de22676a2278a8bc7919c766d5a8d6fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b029cc6e6b65a4ee55fa2b8790092f6edaee2e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b029cc6e6b65a4ee55fa2b8790092f6edaee2e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b029cc6e6b65a4ee55fa2b8790092f6edaee2e71"}], "stats": {"total": 133, "additions": 79, "deletions": 54}, "files": [{"sha": "c54f4ad344c40fd5e95bf9b194435cf511eed0e3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "patch": "@@ -1,3 +1,23 @@\n+2018-04-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/s-dwalin.ads (Dwarf_Context): Change type of Load_Address to\n+\tAddress, and type of Low, High to Storage_Offset.\n+\t(Low): Rename as Low_Address and convey that the return value is a\n+\truntime reference accounting for a load address.\n+\t* libgnat/s-dwalin.adb (Read_Aranges_Entry): Adjust to the\n+\taddress/offset type changes.\n+\t(Aranges_Lookup): Likewise.\n+\t(Symbolic_Address): Likewise.\n+\t(Symbolic_Traceback): Likewise.\n+\t(Dump_Cache): Likewise.\n+\t(Is_Inside): Likewise.\n+\t(Open): Likewise.\n+\t(Set_Load_Address): Likewise.\n+\t(Low_Address): Likewise, and account for C.Load_Address.\n+\t* libgnat/s-trasym__dwarf.adb (Lt): Use Low_Address instead of Low.\n+\t(Multi_Module_Symbolic_Traceback): Compare address in traceback\n+\twith module Low_Address instead of Low.\n+\n 2018-04-04  Olivier Hainque  <hainque@adacore.com>\n \n \t* libgnat/s-dwalin.ads (Dwarf_Context): Rename Load_Slide as"}, {"sha": "a83dae707665d94f87d5e52514ee9c88340132a1", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "patch": "@@ -74,7 +74,7 @@ package body System.Dwarf_Lines is\n \n    procedure Read_Aranges_Entry\n      (C     : in out Dwarf_Context;\n-      Start :    out Integer_Address;\n+      Start :    out Storage_Offset;\n       Len   :    out Storage_Count);\n    --  Read a single .debug_aranges pair\n \n@@ -86,7 +86,7 @@ package body System.Dwarf_Lines is\n \n    procedure Aranges_Lookup\n      (C           : in out Dwarf_Context;\n-      Addr        :        Address;\n+      Addr        :        Storage_Offset;\n       Info_Offset :    out Offset;\n       Success     :    out Boolean);\n    --  Search for Addr in .debug_aranges and return offset Info_Offset in\n@@ -151,7 +151,7 @@ package body System.Dwarf_Lines is\n \n    procedure Symbolic_Address\n      (C           : in out Dwarf_Context;\n-      Addr        :        Address;\n+      Addr        :        Storage_Offset;\n       Dir_Name    :    out Str_Access;\n       File_Name   :    out Str_Access;\n       Subprg_Name :    out String_Ptr_Len;\n@@ -296,20 +296,22 @@ package body System.Dwarf_Lines is\n          return;\n       end if;\n       for I in Cache'Range loop\n-         Put (System.Address_Image (C.Low + Storage_Count (Cache (I).First)));\n-         Put (\" - \");\n-         Put\n-           (System.Address_Image\n-              (C.Low + Storage_Count (Cache (I).First + Cache (I).Size)));\n-         Put (\" l@\");\n-         Put\n-           (System.Address_Image\n-              (To_Address (Integer_Address (Cache (I).Line))));\n-         Put (\": \");\n-         S    := Read_Symbol (C.Obj.all, Offset (Cache (I).Sym));\n-         Name := Object_Reader.Name (C.Obj.all, S);\n-         Put (String (Name.Ptr (1 .. Name.Len)));\n-         New_Line;\n+         declare\n+            E : Search_Entry renames Cache (I);\n+            Base_Address : constant System.Address :=\n+              To_Address (Integer_Address (C.Low + Storage_Count (E.First)));\n+         begin\n+            Put (System.Address_Image (Base_Address));\n+            Put (\" - \");\n+            Put (System.Address_Image (Base_Address + Storage_Count (E.Size)));\n+            Put (\" l@\");\n+            Put (System.Address_Image (To_Address (Integer_Address (E.Line))));\n+            Put (\": \");\n+            S    := Read_Symbol (C.Obj.all, Offset (E.Sym));\n+            Name := Object_Reader.Name (C.Obj.all, S);\n+            Put (String (Name.Ptr (1 .. Name.Len)));\n+            New_Line;\n+         end;\n       end loop;\n    end Dump_Cache;\n \n@@ -372,18 +374,19 @@ package body System.Dwarf_Lines is\n \n    function Is_Inside (C : Dwarf_Context; Addr : Address) return Boolean is\n    begin\n-      return (Addr >= To_Address (To_Integer (C.Low) + C.Load_Address)\n-                and Addr <= To_Address (To_Integer (C.High) + C.Load_Address));\n+      return (Addr >= C.Low + C.Load_Address\n+                and then Addr <= C.High + C.Load_Address);\n    end Is_Inside;\n \n-   ---------\n-   -- Low --\n-   ---------\n+   -----------------\n+   -- Low_Address --\n+   -----------------\n \n-   function Low (C : Dwarf_Context) return Address is\n+   function Low_Address (C : Dwarf_Context)\n+      return System.Address is\n    begin\n-      return C.Low;\n-   end Low;\n+      return C.Load_Address + C.Low;\n+   end Low_Address;\n \n    ----------\n    -- Open --\n@@ -414,8 +417,8 @@ package body System.Dwarf_Lines is\n       --  Get memory bounds\n \n       Get_Memory_Bounds (C.Obj.all, Lo, Hi);\n-      C.Low  := Address (Lo);\n-      C.High := Address (Hi);\n+      C.Low  := Storage_Offset (Lo);\n+      C.High := Storage_Offset (Hi);\n \n       --  Create a stream for debug sections\n \n@@ -779,7 +782,7 @@ package body System.Dwarf_Lines is\n \n    procedure Set_Load_Address (C : in out Dwarf_Context; Addr : Address) is\n    begin\n-      C.Load_Address := To_Integer (Addr);\n+      C.Load_Address := Addr;\n    end Set_Load_Address;\n \n    ------------------\n@@ -874,7 +877,7 @@ package body System.Dwarf_Lines is\n \n    procedure Aranges_Lookup\n      (C           : in out Dwarf_Context;\n-      Addr        :        Address;\n+      Addr        :        Storage_Offset;\n       Info_Offset :    out Offset;\n       Success     :    out Boolean)\n    is\n@@ -887,13 +890,13 @@ package body System.Dwarf_Lines is\n \n          loop\n             declare\n-               Start : Integer_Address;\n+               Start : Storage_Offset;\n                Len   : Storage_Count;\n             begin\n                Read_Aranges_Entry (C, Start, Len);\n                exit when Start = 0 and Len = 0;\n-               if Addr >= To_Address (Start)\n-                 and then Addr < To_Address (Start) + Len\n+               if Addr >= Start\n+                 and then Addr < Start + Len\n                then\n                   Success := True;\n                   return;\n@@ -1160,7 +1163,7 @@ package body System.Dwarf_Lines is\n \n    procedure Read_Aranges_Entry\n      (C     : in out Dwarf_Context;\n-      Start :    out Integer_Address;\n+      Start :    out Storage_Offset;\n       Len   :    out Storage_Count)\n    is\n    begin\n@@ -1171,7 +1174,7 @@ package body System.Dwarf_Lines is\n          begin\n             S     := Read (C.Aranges);\n             L     := Read (C.Aranges);\n-            Start := Integer_Address (S);\n+            Start := Storage_Offset (S);\n             Len   := Storage_Count (L);\n          end;\n       elsif Address'Size = 64 then\n@@ -1180,7 +1183,7 @@ package body System.Dwarf_Lines is\n          begin\n             S     := Read (C.Aranges);\n             L     := Read (C.Aranges);\n-            Start := Integer_Address (S);\n+            Start := Storage_Offset (S);\n             Len   := Storage_Count (L);\n          end;\n       else\n@@ -1249,7 +1252,7 @@ package body System.Dwarf_Lines is\n          Info_Offset : Offset;\n          Line_Offset : Offset;\n          Success     : Boolean;\n-         Ar_Start    : Integer_Address;\n+         Ar_Start    : Storage_Offset;\n          Ar_Len      : Storage_Count;\n          Start, Len  : uint32;\n          First, Last : Natural;\n@@ -1270,7 +1273,7 @@ package body System.Dwarf_Lines is\n                exit when Ar_Start = 0 and Ar_Len = 0;\n \n                Len   := uint32 (Ar_Len);\n-               Start := uint32 (Ar_Start - To_Integer (C.Low));\n+               Start := uint32 (Ar_Start - C.Low);\n \n                --  Search START in the array\n                First := Cache'First;\n@@ -1319,7 +1322,7 @@ package body System.Dwarf_Lines is\n \n    procedure Symbolic_Address\n      (C           : in out Dwarf_Context;\n-      Addr        :        Address;\n+      Addr        :        Storage_Offset;\n       Dir_Name    :    out Str_Access;\n       File_Name   :    out Str_Access;\n       Subprg_Name :    out String_Ptr_Len;\n@@ -1384,7 +1387,7 @@ package body System.Dwarf_Lines is\n          Line_Num := Natural (Match.Line);\n       end Set_Result;\n \n-      Addr_Int     : constant Integer_Address := To_Integer (Addr);\n+      Addr_Int     : constant uint64 := uint64 (Addr);\n       Previous_Row : Line_Info_Registers;\n       Info_Offset  : Offset;\n       Line_Offset  : Offset;\n@@ -1431,7 +1434,7 @@ package body System.Dwarf_Lines is\n          --  Search symbol\n          S := First_Symbol (C.Obj.all);\n          while S /= Null_Symbol loop\n-            if Spans (S, uint64 (Addr_Int)) then\n+            if Spans (S, Addr_Int) then\n                Subprg_Name := Object_Reader.Name (C.Obj.all, S);\n                exit;\n             end if;\n@@ -1479,13 +1482,13 @@ package body System.Dwarf_Lines is\n \n          if C.Registers.Is_Row then\n             if not Previous_Row.End_Sequence\n-              and then Addr_Int >= Integer_Address (Previous_Row.Address)\n-              and then Addr_Int < Integer_Address (C.Registers.Address)\n+              and then Addr_Int >= Previous_Row.Address\n+              and then Addr_Int < C.Registers.Address\n             then\n                Set_Result (Previous_Row);\n                return;\n \n-            elsif Addr_Int = Integer_Address (C.Registers.Address) then\n+            elsif Addr_Int = C.Registers.Address then\n                Set_Result (C.Registers);\n                return;\n             end if;\n@@ -1526,7 +1529,7 @@ package body System.Dwarf_Lines is\n       C : Dwarf_Context := Cin;\n \n       Addr_In_Traceback : Address;\n-      Addr_To_Lookup    : Address;\n+      Offset_To_Lookup  : Storage_Offset;\n \n       Dir_Name    : Str_Access;\n       File_Name   : Str_Access;\n@@ -1547,12 +1550,11 @@ package body System.Dwarf_Lines is\n \n          Addr_In_Traceback := PC_For (Traceback (J));\n \n-         Addr_To_Lookup := To_Address\n-           (To_Integer (Addr_In_Traceback) - C.Load_Address);\n+         Offset_To_Lookup := Addr_In_Traceback - C.Load_Address;\n \n          Symbolic_Address\n            (C,\n-            Addr_To_Lookup,\n+            Offset_To_Lookup,\n             Dir_Name,\n             File_Name,\n             Subprg_Name,"}, {"sha": "8a1595b020a2d058a4787ab881c76a101a0525e9", "filename": "gcc/ada/libgnat/s-dwalin.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads?ref=0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "patch": "@@ -75,9 +75,10 @@ package System.Dwarf_Lines is\n    pragma Inline (Is_Inside);\n    --  Return true iff a run-time address Addr is within the module\n \n-   function Low (C : Dwarf_Context) return Address;\n-   pragma Inline (Low);\n-   --  Return the lowest address of C, from the module object file\n+   function Low_Address (C : Dwarf_Context)\n+      return System.Address;\n+   pragma Inline (Low_Address);\n+   --  Return the lowest address of C, accounting for the module load address\n \n    procedure Dump (C : in out Dwarf_Context);\n    --  Dump each row found in the object's .debug_lines section to standard out\n@@ -163,13 +164,15 @@ private\n    type Search_Array_Access is access Search_Array;\n \n    type Dwarf_Context (In_Exception : Boolean := False) is record\n-      Load_Address : System.Storage_Elements.Integer_Address := 0;\n-      Low, High  : Address;\n+      Low, High  : System.Storage_Elements.Storage_Offset;\n       --  Bounds of the module, per the module object file\n \n       Obj : SOR.Object_File_Access;\n       --  The object file containing dwarf sections\n \n+      Load_Address : System.Address := System.Null_Address;\n+      --  The address at which the object file was loaded at run time\n+\n       Has_Debug : Boolean;\n       --  True if all debug sections are available\n "}, {"sha": "fb35b6066482be08b6797af82fb3d8e7cc7f57ea", "filename": "gcc/ada/libgnat/s-trasym__dwarf.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f090200e7ee7d1ee9d6b84b482618dcba14d92f/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb?ref=0f090200e7ee7d1ee9d6b84b482618dcba14d92f", "patch": "@@ -263,7 +263,7 @@ package body System.Traceback.Symbolic is\n \n    function Lt (Left, Right : Module_Cache_Acc) return Boolean is\n    begin\n-      return Low (Left.C) < Low (Right.C);\n+      return Low_Address (Left.C) < Low_Address (Right.C);\n    end Lt;\n \n    -----------------------------\n@@ -469,7 +469,7 @@ package body System.Traceback.Symbolic is\n             Hi := Modules_Cache'Last;\n             while Lo <= Hi loop\n                Mid := (Lo + Hi) / 2;\n-               if Addr < Low (Modules_Cache (Mid).C) then\n+               if Addr < Low_Address (Modules_Cache (Mid).C) then\n                   Hi := Mid - 1;\n                elsif Is_Inside (Modules_Cache (Mid).C, Addr) then\n                   Multi_Module_Symbolic_Traceback"}]}