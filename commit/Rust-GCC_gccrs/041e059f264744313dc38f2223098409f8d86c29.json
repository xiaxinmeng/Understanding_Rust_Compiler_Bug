{"sha": "041e059f264744313dc38f2223098409f8d86c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxZTA1OWYyNjQ3NDQzMTNkYzM4ZjIyMjMwOTg0MDlmOGQ4NmMyOQ==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-04-08T21:03:12Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-04-08T21:03:12Z"}, "message": "FDO insane profile\n\nFrom-SVN: r172213", "tree": {"sha": "82219d1423d58d8f8c24a68e0c7c5cf69f26f652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82219d1423d58d8f8c24a68e0c7c5cf69f26f652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/041e059f264744313dc38f2223098409f8d86c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041e059f264744313dc38f2223098409f8d86c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041e059f264744313dc38f2223098409f8d86c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041e059f264744313dc38f2223098409f8d86c29/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "6d7b907317690e82b50752fc9d23f015ac7abb32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041e059f264744313dc38f2223098409f8d86c29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041e059f264744313dc38f2223098409f8d86c29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=041e059f264744313dc38f2223098409f8d86c29", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Xinliang David Li  <davidxl@google.com>\n+\n+\t* ipa-cp.c (ipcp_update_profiling): Correct\n+\t negative scale factor due to insane profile data.\n+\n 2011-04-08  Xinliang David Li  <davidxl@google.com>\n \n \t* final.c (dump_basic_block_info): New function."}, {"sha": "2b1e50dcb615d3314e8e121a6ccaa6670328e1bb", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041e059f264744313dc38f2223098409f8d86c29/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041e059f264744313dc38f2223098409f8d86c29/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=041e059f264744313dc38f2223098409f8d86c29", "patch": "@@ -1113,6 +1113,29 @@ ipcp_update_profiling (void)\n \t  scale = ipcp_get_node_scale (orig_node);\n \t  node->count = orig_node->count * scale / REG_BR_PROB_BASE;\n \t  scale_complement = REG_BR_PROB_BASE - scale;\n+\n+          /* Negative scale complement can result from insane profile data\n+             in which the total incoming edge counts in this module is\n+             larger than the callee's entry count. The insane profile data\n+             usually gets generated due to the following reasons:\n+\n+             1) in multithreaded programs, when profile data is dumped\n+             to gcda files in gcov_exit, some other threads are still running.\n+             The profile counters are dumped in bottom up order (call graph).\n+             The caller's BB counters may still be updated while the callee's\n+             counter data is already saved to disk.\n+\n+             2) Comdat functions: comdat functions' profile data are not\n+             allocated in comdat. When a comdat callee function gets inlined\n+             at some callsites after instrumentation, and the remaining calls\n+             to this function resolves to a comdat copy in another module,\n+             the profile counters for this function are split. This can\n+             result in sum of incoming edge counts from this module being\n+             larger than callee instance's entry count.  */\n+\n+          if (scale_complement < 0 && flag_profile_correction)\n+            scale_complement = 0;\n+\n \t  orig_node->count =\n \t    orig_node->count * scale_complement / REG_BR_PROB_BASE;\n \t  for (cs = node->callees; cs; cs = cs->next_callee)"}]}