{"sha": "af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2Yjc5YTYzYzk2ZjljMmM3YzhjYzI4ZjJiYjI1YTk0N2Y0ZDg5MQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T18:51:14Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T18:51:14Z"}, "message": "AttributedCharacterIterator.java, [...]: Removed redundant modifiers.\n\n2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/AttributedCharacterIterator.java,\n\tjava/text/CharacterIterator.java:\n\tRemoved redundant modifiers.\n\nFrom-SVN: r72357", "tree": {"sha": "1ae2308fedf714da04a58f210a522f51eff69b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae2308fedf714da04a58f210a522f51eff69b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/comments", "author": null, "committer": null, "parents": [{"sha": "afe6016980a9d8d8672042d53f926972a0af49c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6016980a9d8d8672042d53f926972a0af49c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6016980a9d8d8672042d53f926972a0af49c7"}], "stats": {"total": 124, "additions": 31, "deletions": 93}, "files": [{"sha": "c36685dca7ecf94d680b620a51da43cf30b1c621", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "patch": "@@ -1,3 +1,9 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/AttributedCharacterIterator.java,\n+\tjava/text/CharacterIterator.java:\n+\tRemoved redundant modifiers.\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/sql/Array.java,"}, {"sha": "85f644c325170926afc5cc2931c6a4d1518cade5", "filename": "libjava/java/text/AttributedCharacterIterator.java", "status": "modified", "additions": 10, "deletions": 47, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java?ref=af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "patch": "@@ -59,11 +59,6 @@\n   */\n public interface AttributedCharacterIterator extends CharacterIterator\n {\n-\n-/*\n- * Inner Classes\n- */\n-\n /**\n   * This class defines attribute keys that are used as text attributes.\n   */\n@@ -218,41 +213,28 @@ public static class Attribute implements Serializable\n   *\n   * @return A <code>String</code> representation of this object.\n   */\n-public String\n-toString()\n+public String toString()\n {\n   return(getClass().getName() + \"(\" + getName() + \")\");\n }\n \n } // Inner class Attribute\n \n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n /**\n   * This method returns a list of all keys that are defined for the \n   * text range.  This can be an empty list if no attributes are defined.\n   *\n   * @return A list of keys \n   */\n-public abstract Set\n-getAllAttributeKeys();\n-\n-/*************************************************************************/\n+Set getAllAttributeKeys();\n \n /**\n   * This method returns a <code>Map</code> of the attributed defined for\n   * the current character.\n   *\n   * @return A <code>Map</code> of the attributes for the current character.\n   */\n-public abstract Map\n-getAttributes();\n-\n-/*************************************************************************/\n+Map getAttributes();\n \n /**\n   * This method returns the value of the specified attribute for the\n@@ -263,21 +245,15 @@ public static class Attribute implements Serializable\n   *\n   * @return The value of the specified attribute\n   */\n-public abstract Object\n-getAttribute(AttributedCharacterIterator.Attribute attrib);\n-\n-/*************************************************************************/\n+Object getAttribute (AttributedCharacterIterator.Attribute attrib);\n \n /**\n   * This method returns the index of the first character in the run that\n   * contains all attributes defined for the current character.\n   *\n   * @return The start index of the run\n   */\n-public abstract int\n-getRunStart();\n-\n-/*************************************************************************/\n+int getRunStart();\n \n /**\n   * This method returns the index of the first character in the run that\n@@ -288,10 +264,7 @@ public static class Attribute implements Serializable\n   *\n   * @return The start index of the run.\n   */\n-public abstract int\n-getRunStart(Set attribs);\n-\n-/*************************************************************************/\n+int getRunStart (Set attribs);\n \n /**\n   * This method returns the index of the first character in the run that\n@@ -301,21 +274,15 @@ public static class Attribute implements Serializable\n   *\n   * @return The start index of the run.\n   */\n-public abstract int\n-getRunStart(AttributedCharacterIterator.Attribute attrib);\n-\n-/*************************************************************************/\n+int getRunStart (AttributedCharacterIterator.Attribute attrib);\n \n /**\n   * This method returns the index of the character after the end of the run\n   * that contains all attributed defined for the current character.\n   *\n   * @return The end index of the run.\n   */\n-public abstract int\n-getRunLimit();\n-\n-/*************************************************************************/\n+int getRunLimit();\n \n /**\n   * This method returns the index of the character after the end of the run\n@@ -326,10 +293,7 @@ public static class Attribute implements Serializable\n   *\n   * @return The end index of the run.\n   */\n-public abstract int\n-getRunLimit(Set attribs);\n-\n-/*************************************************************************/\n+int getRunLimit (Set attribs);\n \n /**\n   * This methods returns the index of the character after the end of the run\n@@ -339,8 +303,7 @@ public static class Attribute implements Serializable\n   * \n   * @return The end index of the run.\n   */\n-public abstract int\n-getRunLimit(AttributedCharacterIterator.Attribute attrib);\n+int getRunLimit (AttributedCharacterIterator.Attribute attrib);\n \n } // interface AttributedCharacterIterator\n "}, {"sha": "bcf100d7435f96bed3da3533c42def07ed8a8386", "filename": "libjava/java/text/CharacterIterator.java", "status": "modified", "additions": 15, "deletions": 46, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2Fjava%2Ftext%2FCharacterIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891/libjava%2Fjava%2Ftext%2FCharacterIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCharacterIterator.java?ref=af6b79a63c96f9c2c7c8cc28f2bb25a947f4d891", "patch": "@@ -45,71 +45,50 @@\n   * by the methods in this interface.  Additionally, various methods allow\n   * the index to be set. \n   *\n-  * @version 0.0\n-  *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n public interface CharacterIterator extends Cloneable\n {\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Static Variables\n-   */\n-\n   /**\n    * This is a special constant value that is returned when the beginning or\n    * end of the character range has been reached.\n    */\n-  public static final char DONE = '\\uFFFF';\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n+  char DONE = '\\uFFFF';\n \n   /**\n    * This method returns the character at the current index position\n    *\n    * @return The character at the current index position.\n    */\n-  public abstract char current ();\n-\n-  /*************************************************************************/\n+  char current();\n \n   /**\n    * This method increments the current index and then returns the character\n    * at the new index value.  If the index is already at <code>getEndIndex() - 1</code>,\n    * it will not be incremented.\n    *\n-   * @return The character at the position of the incremented index value, or <code>DONE</code> if the index has reached getEndIndex() - 1\n+   * @return The character at the position of the incremented index value,\n+   * or <code>DONE</code> if the index has reached getEndIndex() - 1\n    */\n-  public abstract char next ();\n-\n-  /*************************************************************************/\n+  char next();\n \n   /**\n    * This method decrements the current index and then returns the character\n    * at the new index value.  If the index value is already at the beginning\n    * index, it will not be decremented.\n    *\n-   * @return The character at the position of the decremented index value, or <code>DONE</code> if index was already equal to the beginning index value.\n+   * @return The character at the position of the decremented index value,\n+   * or <code>DONE</code> if index was already equal to the beginning index value.\n    */\n-  public abstract char previous ();\n-\n-  /*************************************************************************/\n+  char previous();\n \n   /**\n    * This method sets the index value to the beginning of the range and returns\n    * the character there.\n    *\n    * @return The character at the beginning of the range, or <code>DONE</code> if the range is empty.\n    */\n-  public abstract char first ();\n-\n-  /*************************************************************************/\n+  char first();\n \n   /**\n    * This method sets the index value to <code>getEndIndex() - 1</code> and\n@@ -118,18 +97,14 @@ public interface CharacterIterator extends Cloneable\n    *\n    * @return The character at the end of the range, or <code>DONE</code> if the range is empty.\n    */\n-  public abstract char last ();  \n-\n-  /*************************************************************************/\n+  char last();  \n \n   /**\n    * This method returns the current value of the index.\n    *\n    * @return The current index value\n    */\n-  public abstract int getIndex ();\n-\n-  /*************************************************************************/\n+  int getIndex();\n \n   /**\n    * This method sets the value of the index to the specified value, then\n@@ -139,19 +114,15 @@ public interface CharacterIterator extends Cloneable\n    *\n    * @return The character at the new index value or <code>DONE</code> if the index value is equal to <code>getEndIndex</code>.\n    */\n-  public abstract char setIndex (int index) throws IllegalArgumentException;\n-\n-  /*************************************************************************/\n+  char setIndex (int index) throws IllegalArgumentException;\n \n   /**\n    * This method returns the character position of the first character in the\n    * range.\n    *\n    * @return The index of the first character in the range.\n    */\n-  public abstract int getBeginIndex ();\n-\n-  /*************************************************************************/\n+  int getBeginIndex();\n \n   /**\n    * This method returns the character position of the end of the text range.\n@@ -161,14 +132,12 @@ public interface CharacterIterator extends Cloneable\n    *\n    * @return The index of the end of the range.\n    */\n-  public abstract int getEndIndex ();\n-\n-  /*************************************************************************/\n+  int getEndIndex();\n \n   /**\n    * This method creates a copy of this <code>CharacterIterator</code>.\n    *\n    * @return A copy of this <code>CharacterIterator</code>.\n    */\n-  public abstract Object clone ();\n+  Object clone();\n }"}]}