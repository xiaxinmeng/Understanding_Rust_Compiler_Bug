{"sha": "e389897bcd904611f78753b05a512e73ddaf15e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4OTg5N2JjZDkwNDYxMWY3ODc1M2IwNWE1MTJlNzNkZGFmMTVlNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-10-05T16:53:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-10-05T16:53:33Z"}, "message": "emit-rtl.c (gen_lowpart_common): Fix conversion from float to integral mode with HOST_BITS_PER_WIDE_INT 64.\n\n\t* emit-rtl.c (gen_lowpart_common) [REAL_ARITHMETICS]: Fix conversion\n\tfrom float to integral mode with HOST_BITS_PER_WIDE_INT 64.\n\t* dwarf2out.c (add_const_value_attribute): Divide by 4, not\n\tsizeof(long).\n\nFrom-SVN: r36728", "tree": {"sha": "b9a2bfc5cba9c5bd927e638e6f77612c2d776746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9a2bfc5cba9c5bd927e638e6f77612c2d776746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e389897bcd904611f78753b05a512e73ddaf15e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e389897bcd904611f78753b05a512e73ddaf15e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e389897bcd904611f78753b05a512e73ddaf15e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e389897bcd904611f78753b05a512e73ddaf15e7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab9b1e42390e727953c03078a31e9d31440a69f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9b1e42390e727953c03078a31e9d31440a69f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9b1e42390e727953c03078a31e9d31440a69f7"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "2b010598469b865bdbfee66366fe4f66f4d87d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e389897bcd904611f78753b05a512e73ddaf15e7", "patch": "@@ -1,3 +1,10 @@\n+2000-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* emit-rtl.c (gen_lowpart_common) [REAL_ARITHMETICS]: Fix conversion\n+\tfrom float to integral mode with HOST_BITS_PER_WIDE_INT 64.\n+\t* dwarf2out.c (add_const_value_attribute): Divide by 4, not\n+\tsizeof(long).\n+\n Thu Oct  5 09:31:31 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* fold-const.c (fold, case MINUS_EXPR, case EQ_EXPR): Perform"}, {"sha": "4e520fefc1c7f69cd657dfb89e7654fdafc44af9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e389897bcd904611f78753b05a512e73ddaf15e7", "patch": "@@ -7692,7 +7692,7 @@ add_const_value_attribute (die, rtl)\n \n \tif (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t  {\n-\t    register unsigned length = GET_MODE_SIZE (mode) / sizeof (long);\n+\t    register unsigned length = GET_MODE_SIZE (mode) / 4;\n  \t    long *array = (long *) xmalloc (sizeof (long) * length);\n \t    REAL_VALUE_TYPE rv;\n "}, {"sha": "c5ddeb081ed9809293778bd46ab94157383cc361", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e389897bcd904611f78753b05a512e73ddaf15e7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e389897bcd904611f78753b05a512e73ddaf15e7", "patch": "@@ -942,10 +942,12 @@ gen_lowpart_common (mode, x)\n \t  break;\n #if LONG_DOUBLE_TYPE_SIZE == 96\n \tcase XFmode:\n+\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, i + endian);\n+\t  i[3-3*endian] = 0;\n #else\n \tcase TFmode:\n-#endif\n \t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, i);\n+#endif\n \t  break;\n \tdefault:\n \t  abort ();\n@@ -964,13 +966,21 @@ gen_lowpart_common (mode, x)\n \n \tfor (c = 0; c < 4; c++)\n \t  i[c] &= ~ (0L);\n-      \n-\treturn immed_double_const (i[endian * 3]\n-\t\t\t\t   | (((HOST_WIDE_INT) i[1 + endian]) << 32),\n-\t\t\t\t   i[2 - endian]\n-\t\t\t\t   | (((HOST_WIDE_INT) i[3 - endian * 3])\n-\t\t\t\t      << 32),\n-\t\t\t\t   mode);\n+\n+\tswitch (GET_MODE (x))\n+\t  {\n+\t  case SFmode:\n+\t  case DFmode:\n+\t    return immed_double_const (((unsigned long) i[endian]) |\n+\t\t\t\t       (((HOST_WIDE_INT) i[1-endian]) << 32),\n+\t\t\t\t       0, mode);\n+\t  default:\n+\t    return immed_double_const (((unsigned long) i[endian*3]) |\n+\t\t\t\t       (((HOST_WIDE_INT) i[1+endian]) << 32),\n+\t\t\t\t       ((unsigned long) i[2-endian]) |\n+\t\t\t\t       (((HOST_WIDE_INT) i[3-endian*3]) << 32),\n+\t\t\t\t       mode);\n+\t  }\n       }\n #endif\n     }"}]}