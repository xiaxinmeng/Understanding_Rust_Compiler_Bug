{"sha": "5940e204bd31aacbdb3cbb2660483f18ce750593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0MGUyMDRiZDMxYWFjYmRiM2NiYjI2NjA0ODNmMThjZTc1MDU5Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-14T21:04:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-14T21:04:05Z"}, "message": "re PR ada/62019 (gnat.dg/weak2.adb fails everywhere)\n\n\tPR ada/62019\n\t* tree-eh.c (tree_could_trap) <FUNCTION_DECL>: Revamp and really\n\tdo not choke on null node.\n\t<VAR_DECL>: Likewise.\n\nFrom-SVN: r216223", "tree": {"sha": "a0f65c6a010558c61c5b8218e7f5ab8016603f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f65c6a010558c61c5b8218e7f5ab8016603f9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5940e204bd31aacbdb3cbb2660483f18ce750593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5940e204bd31aacbdb3cbb2660483f18ce750593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5940e204bd31aacbdb3cbb2660483f18ce750593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5940e204bd31aacbdb3cbb2660483f18ce750593/comments", "author": null, "committer": null, "parents": [{"sha": "9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "2ba494ac85688fd3efe50ced3637a35e19d26142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5940e204bd31aacbdb3cbb2660483f18ce750593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5940e204bd31aacbdb3cbb2660483f18ce750593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5940e204bd31aacbdb3cbb2660483f18ce750593", "patch": "@@ -1,3 +1,10 @@\n+2014-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/62019\n+\t* tree-eh.c (tree_could_trap) <FUNCTION_DECL>: Revamp and really\n+\tdo not choke on null node.\n+\t<VAR_DECL>: Likewise.\n+\n 2014-10-14  DJ Delorie  <dj@redhat.com>\n \n \t* machmode.h (int_n_data_t): New."}, {"sha": "6cfdcce6ec974b2aef78e7836e4d999021773675", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5940e204bd31aacbdb3cbb2660483f18ce750593/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5940e204bd31aacbdb3cbb2660483f18ce750593/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=5940e204bd31aacbdb3cbb2660483f18ce750593", "patch": "@@ -2657,31 +2657,25 @@ tree_could_trap_p (tree expr)\n       /* Assume that accesses to weak functions may trap, unless we know\n \t they are certainly defined in current TU or in some other\n \t LTO partition.  */\n-      if (DECL_WEAK (expr) && !DECL_COMDAT (expr))\n+      if (DECL_WEAK (expr) && !DECL_COMDAT (expr) && DECL_EXTERNAL (expr))\n \t{\n-\t  struct cgraph_node *node;\n-\t  if (!DECL_EXTERNAL (expr))\n-\t    return false;\n-\t  node = cgraph_node::get (expr)->function_symbol ();\n-\t  if (node && node->in_other_partition)\n-\t    return false;\n-\t  return true;\n+\t  cgraph_node *node = cgraph_node::get (expr);\n+\t  if (node)\n+\t    node = node->function_symbol ();\n+\t  return !(node && node->in_other_partition);\n \t}\n       return false;\n \n     case VAR_DECL:\n       /* Assume that accesses to weak vars may trap, unless we know\n \t they are certainly defined in current TU or in some other\n \t LTO partition.  */\n-      if (DECL_WEAK (expr) && !DECL_COMDAT (expr))\n+      if (DECL_WEAK (expr) && !DECL_COMDAT (expr) && DECL_EXTERNAL (expr))\n \t{\n-\t  varpool_node *node;\n-\t  if (!DECL_EXTERNAL (expr))\n-\t    return false;\n-\t  node = varpool_node::get (expr)->ultimate_alias_target ();\n-\t  if (node && node->in_other_partition)\n-\t    return false;\n-\t  return true;\n+\t  varpool_node *node = varpool_node::get (expr);\n+\t  if (node)\n+\t    node = node->ultimate_alias_target ();\n+\t  return !(node && node->in_other_partition);\n \t}\n       return false;\n "}]}