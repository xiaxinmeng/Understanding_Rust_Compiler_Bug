{"sha": "b04c399e258e686dddad879bf7e27d9e28fd6fde", "node_id": "C_kwDOANBUbNoAKGIwNGMzOTllMjU4ZTY4NmRkZGFkODc5YmY3ZTI3ZDllMjhmZDZmZGU", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-12T13:47:47Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-31T11:48:47Z"}, "message": "c++: Fix location for -Wunused-macros [PR66290]\n\nIn C++, since all tokens are lexed from libcpp up front, diagnostics generated\nby libcpp after lexing has completed do not get a valid location from libcpp\n(rather, libcpp thinks they all pertain to the end of the file.) This has long\nbeen addressed using the global variable \"done_lexing\", which the C++ frontend\nsets at the appropriate time; when done_lexing is true, then c_cpp_diagnostic(),\nwhich outputs libcpp's diagnostics, uses input_location instead of the wrong\nlibcpp location. The C++ frontend arranges that input_location will point to the\ntoken it is currently processing, so this generally works fine. However, there\nis one exception currently, which is -Wunused-macros. This gets generated at the\nend of processing in cpp_finish (), since we need to wait until then to\ndetermine whether a macro was eventually used or not. But the locations it\npasses to c_cpp_diagnostic () were remembered from the original lexing and hence\nthey should not be overridden with input_location, which is now the one\nincorrectly pointing to the end of the file.\n\nFixed by setting done_lexing=false again just prior to calling cpp_finish (). I\nalso renamed the variable from done_lexing to \"override_libcpp_locations\", since\nit's now not strictly about lexing anymore.\n\nThere is no new testcase with this patch, since we already had an xfailed\ntestcase which is now fixed.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/66290\n\t* c-common.h: Rename global done_lexing to\n\toverride_libcpp_locations.\n\t* c-common.cc (c_cpp_diagnostic): Likewise.\n\t* c-opts.cc (c_common_finish): Set override_libcpp_locations\n\t(formerly done_lexing) immediately prior to calling cpp_finish ().\n\ngcc/cp/ChangeLog:\n\n\tPR c++/66290\n\t* parser.cc (cp_lexer_new_main): Rename global done_lexing to\n\toverride_libcpp_locations.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/66290\n\t* c-c++-common/pragma-diag-15.c: Remove xfail for C++.", "tree": {"sha": "3622374d5d78bfc193a2a43e8da5304ec168143d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3622374d5d78bfc193a2a43e8da5304ec168143d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04c399e258e686dddad879bf7e27d9e28fd6fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04c399e258e686dddad879bf7e27d9e28fd6fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04c399e258e686dddad879bf7e27d9e28fd6fde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04c399e258e686dddad879bf7e27d9e28fd6fde/comments", "author": null, "committer": null, "parents": [{"sha": "351e3cad2c5d4dfe43d68ba333bde1d70fa0b807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351e3cad2c5d4dfe43d68ba333bde1d70fa0b807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351e3cad2c5d4dfe43d68ba333bde1d70fa0b807"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "6e41ceb38e92864391bbd6b82b308eaf0b8d6af9", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=b04c399e258e686dddad879bf7e27d9e28fd6fde", "patch": "@@ -284,9 +284,11 @@ int c_inhibit_evaluation_warnings;\n    be generated.  */\n bool in_late_binary_op;\n \n-/* Whether lexing has been completed, so subsequent preprocessor\n-   errors should use the compiler's input_location.  */\n-bool done_lexing = false;\n+/* Depending on which phase of processing we are in, we may need\n+   to prefer input_location to libcpp's locations.  (Specifically,\n+   after the C++ lexer is done lexing tokens, but prior to calling\n+   cpp_finish (), we need to do so.  */\n+bool override_libcpp_locations;\n \n /* Information about how a function name is generated.  */\n struct fname_var_t\n@@ -6681,7 +6683,7 @@ c_cpp_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n     default:\n       gcc_unreachable ();\n     }\n-  if (done_lexing)\n+  if (override_libcpp_locations)\n     richloc->set_range (0, input_location, SHOW_RANGE_WITH_CARET);\n   diagnostic_set_info_translated (&diagnostic, msg, ap,\n \t\t\t\t  richloc, dlevel);"}, {"sha": "c06769b6f0bd3b04b87f0662a0feea5fe448e7ca", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b04c399e258e686dddad879bf7e27d9e28fd6fde", "patch": "@@ -767,10 +767,12 @@ extern int max_tinst_depth;\n \n extern int c_inhibit_evaluation_warnings;\n \n-/* Whether lexing has been completed, so subsequent preprocessor\n-   errors should use the compiler's input_location.  */\n+/* Depending on which phase of processing we are in, we may need\n+   to prefer input_location to libcpp's locations.  (Specifically,\n+   after the C++ lexer is done lexing tokens, but prior to calling\n+   cpp_finish (), we need to do so.  */\n \n-extern bool done_lexing;\n+extern bool override_libcpp_locations;\n \n /* C types are partitioned into three subsets: object, function, and\n    incomplete types.  */"}, {"sha": "4e1463689de33f7b5ddc4e9e11f2fc5b1bfa3fae", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=b04c399e258e686dddad879bf7e27d9e28fd6fde", "patch": "@@ -1281,6 +1281,12 @@ c_common_finish (void)\n \t}\n     }\n \n+  /* When we call cpp_finish (), it may generate some diagnostics using\n+     locations it remembered from the preprocessing phase, e.g. for\n+     -Wunused-macros.  So inform c_cpp_diagnostic () not to override those\n+     locations with input_location, which would be incorrect now.  */\n+  override_libcpp_locations = false;\n+\n   /* For performance, avoid tearing down cpplib's internal structures\n      with cpp_destroy ().  */\n   cpp_finish (parse_in, deps_stream);"}, {"sha": "33926d23179f146de3acf95d02ed39506ca5108c", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=b04c399e258e686dddad879bf7e27d9e28fd6fde", "patch": "@@ -755,7 +755,7 @@ cp_lexer_new_main (void)\n \n   /* Subsequent preprocessor diagnostics should use compiler\n      diagnostic functions to get the compiler source location.  */\n-  done_lexing = true;\n+  override_libcpp_locations = true;\n \n   maybe_check_all_macros (parse_in);\n "}, {"sha": "8ffff88d5e35395963f2f8e39d616e97360d70c7", "filename": "gcc/testsuite/c-c++-common/pragma-diag-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04c399e258e686dddad879bf7e27d9e28fd6fde/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c?ref=b04c399e258e686dddad879bf7e27d9e28fd6fde", "patch": "@@ -9,5 +9,5 @@\n    because the location of the macro definition is incorrectly set.  This is a\n    separate issue, will resolve it in a later patch.  */\n \n-#define X /* { dg-warning \"-:-Wunused-macros\" {} { xfail c++ } } */\n+#define X /* { dg-warning \"-:-Wunused-macros\" } */\n #pragma GCC diagnostic ignored \"-Wunused-macros\""}]}