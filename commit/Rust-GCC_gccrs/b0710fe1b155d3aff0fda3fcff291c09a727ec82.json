{"sha": "b0710fe1b155d3aff0fda3fcff291c09a727ec82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3MTBmZTFiMTU1ZDNhZmYwZmRhM2ZjZmYyOTFjMDlhNzI3ZWM4Mg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2014-11-01T13:34:15Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2014-11-01T13:34:15Z"}, "message": "2014-11-01  Andrew MacLeod  <amacleod@redhat,com>\n\n\t* optabs.h: Flatten insn-codes.h to source files.  Move some prototypes\n\tand structs to genopinit.c.  Adjust protyoptypes to match optabs.c.\n\t* genopinit.c (main): Emit prototypes and structs into insn-opinit.h.\n\t* optabs.c: (gen_move_insn): Move to expr.c.\n\t* expr.h: Move protypes and enums to optabs.h.\n\t* expr.c: (gen_move_insn): Relocate from optabs.c.\n\t* genemit.c (main): Include insn-codes.h.\n\t* gengtype.c (open_base_files): Include insn-codes.h.\n\t* asan.c: Include insn-codes.h.\n\t* bb-reorder.c: Ditto.\n\t* builtins.c: Ditto.\n\t* calls.c: Ditto.\n\t* cfgexpand.c: Ditto.\n\t* cilk-common.c: Ditto.\n\t* combine.c: Ditto.\n\t* dojump.c: Ditto.\n\t* dse.c: Ditto.\n\t* except.c: Ditto.\n\t* explow.c: Ditto.\n\t* expmed.c: Ditto.\n\t* function.c: Ditto.\n\t* ifcvt.c: Ditto.\n\t* internal-fn.c: Ditto.\n\t* loop-unroll.c: Ditto.\n\t* lra.c: Ditto.\n\t* modulo-sched.c: Ditto.\n\t* omp-low.c: Ditto.\n\t* postreload.c: Ditto.\n\t* ree.c: Ditto.\n\t* reload.c: Ditto.\n\t* reload1.c: Ditto.\n\t* shrink-wrap.c: Ditto.\n\t* simplify-rtx.c: Ditto.\n\t* stmt.c: Ditto.\n\t* target-globals.c: Ditto.\n\t* targhooks.c: Ditto.\n\t* toplev.c: Ditto.\n\t* tree-if-conv.c: Ditto.\n\t* tree-ssa-forwprop.c: Ditto.\n\t* tree-ssa-loop-prefetch.c: Ditto.\n\t* tree-ssa-math-opts.c: Ditto.\n\t* tree-ssa-phiopt.c: Ditto.\n\t* tree-ssa-reassoc.c: Ditto.\n\t* tree-switch-conversion.c: Ditto.\n\t* tree-vect-data-refs.c: Ditto.\n\t* tree-vect-generic.c: Ditto.\n\t* tree-vect-loop.c: Ditto.\n\t* tree-vect-patterns.c: Ditto.\n\t* tree-vect-slp.c: Ditto.\n\t* tree-vect-stmts.c: Ditto.\n\t* tree-vrp.c: Ditto.\n\t* value-prof.c: Ditto.\n\t* config/aarch64/aarch64-builtins.c: Ditto.\n\t* config/alpha/alpha.c: Ditto.\n\t* config/arm/arm.c: Ditto.\n\t* config/cris/cris.c: Ditto.\n\t* config/epiphany/epiphany.c: Ditto.\n\t* config/frv/frv.c: Ditto.\n\t* config/h8300/h8300.c: Ditto.\n\t* config/ia64/ia64.c: Ditto.\n\t* config/iq2000/iq2000.c: Ditto.\n\t* config/m32c/m32c.c: Ditto.\n\t* config/mep/mep.c: Ditto.\n\t* config/microblaze/microblaze.c: Ditto.\n\t* config/mips/mips.c: Ditto.\n\t* config/mn10300/mn10300.c: Ditto.\n\t* config/moxie/moxie.c: Ditto.\n\t* config/msp430/msp430.c: Ditto.\n\t* config/nios2/nios2.c: Ditto.\n\t* config/pa/pa.c: Ditto.\n\t* config/rl78/rl78.c: Ditto.\n\t* config/rs6000/rs6000.c: Ditto.\n\t* config/rx/rx.c: Ditto.\n\t* config/s390/s390.c: Ditto.\n\t* config/sh/sh.c: Ditto.\n\t* config/sh/sh_treg_combine.cc: Ditto.\n\t* config/spu/spu.c: Ditto.\n\t* config/stormy16/stormy16.c: Ditto.\n\t* config/tilegx/mul-tables.c: Ditto.\n\t* config/tilegx/tilegx.c: Ditto.\n\t* config/tilepro/mul-tables.c: Ditto.\n\t* config/tilepro/tilepro.c: Ditto.\n\t* config/vax/vax.c: Ditto.\n\nFrom-SVN: r217005", "tree": {"sha": "a1d684f3d10d3446cf010b46c1c96adbd1c76a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d684f3d10d3446cf010b46c1c96adbd1c76a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0710fe1b155d3aff0fda3fcff291c09a727ec82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0710fe1b155d3aff0fda3fcff291c09a727ec82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0710fe1b155d3aff0fda3fcff291c09a727ec82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0710fe1b155d3aff0fda3fcff291c09a727ec82/comments", "author": null, "committer": null, "parents": [{"sha": "a5474c4cb0cd4499437eeffd7223bb7533100d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5474c4cb0cd4499437eeffd7223bb7533100d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5474c4cb0cd4499437eeffd7223bb7533100d48"}], "stats": {"total": 925, "additions": 542, "deletions": 383}, "files": [{"sha": "68c15afb19a09209ef9c8cafee54a26ae9a29c9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -1,3 +1,89 @@\n+2014-11-01  Andrew MacLeod  <amacleod@redhat,com>\n+\n+\t* optabs.h: Flatten insn-codes.h to source files.  Move some prototypes\n+\tand structs to genopinit.c.  Adjust protyoptypes to match optabs.c.\n+\t* genopinit.c (main): Emit prototypes and structs into insn-opinit.h.\n+\t* optabs.c: (gen_move_insn): Move to expr.c.\n+\t* expr.h: Move protypes and enums to optabs.h.\n+\t* expr.c: (gen_move_insn): Relocate from optabs.c.\n+\t* genemit.c (main): Include insn-codes.h.\n+\t* gengtype.c (open_base_files): Include insn-codes.h.\n+\t* asan.c: Include insn-codes.h.\n+\t* bb-reorder.c: Ditto.\n+\t* builtins.c: Ditto.\n+\t* calls.c: Ditto.\n+\t* cfgexpand.c: Ditto.\n+\t* cilk-common.c: Ditto.\n+\t* combine.c: Ditto.\n+\t* dojump.c: Ditto.\n+\t* dse.c: Ditto.\n+\t* except.c: Ditto.\n+\t* explow.c: Ditto.\n+\t* expmed.c: Ditto.\n+\t* function.c: Ditto.\n+\t* ifcvt.c: Ditto.\n+\t* internal-fn.c: Ditto.\n+\t* loop-unroll.c: Ditto.\n+\t* lra.c: Ditto.\n+\t* modulo-sched.c: Ditto.\n+\t* omp-low.c: Ditto.\n+\t* postreload.c: Ditto.\n+\t* ree.c: Ditto.\n+\t* reload.c: Ditto.\n+\t* reload1.c: Ditto.\n+\t* shrink-wrap.c: Ditto.\n+\t* simplify-rtx.c: Ditto.\n+\t* stmt.c: Ditto.\n+\t* target-globals.c: Ditto.\n+\t* targhooks.c: Ditto.\n+\t* toplev.c: Ditto.\n+\t* tree-if-conv.c: Ditto.\n+\t* tree-ssa-forwprop.c: Ditto.\n+\t* tree-ssa-loop-prefetch.c: Ditto.\n+\t* tree-ssa-math-opts.c: Ditto.\n+\t* tree-ssa-phiopt.c: Ditto.\n+\t* tree-ssa-reassoc.c: Ditto.\n+\t* tree-switch-conversion.c: Ditto.\n+\t* tree-vect-data-refs.c: Ditto.\n+\t* tree-vect-generic.c: Ditto.\n+\t* tree-vect-loop.c: Ditto.\n+\t* tree-vect-patterns.c: Ditto.\n+\t* tree-vect-slp.c: Ditto.\n+\t* tree-vect-stmts.c: Ditto.\n+\t* tree-vrp.c: Ditto.\n+\t* value-prof.c: Ditto.\n+\t* config/aarch64/aarch64-builtins.c: Ditto.\n+\t* config/alpha/alpha.c: Ditto.\n+\t* config/arm/arm.c: Ditto.\n+\t* config/cris/cris.c: Ditto.\n+\t* config/epiphany/epiphany.c: Ditto.\n+\t* config/frv/frv.c: Ditto.\n+\t* config/h8300/h8300.c: Ditto.\n+\t* config/ia64/ia64.c: Ditto.\n+\t* config/iq2000/iq2000.c: Ditto.\n+\t* config/m32c/m32c.c: Ditto.\n+\t* config/mep/mep.c: Ditto.\n+\t* config/microblaze/microblaze.c: Ditto.\n+\t* config/mips/mips.c: Ditto.\n+\t* config/mn10300/mn10300.c: Ditto.\n+\t* config/moxie/moxie.c: Ditto.\n+\t* config/msp430/msp430.c: Ditto.\n+\t* config/nios2/nios2.c: Ditto.\n+\t* config/pa/pa.c: Ditto.\n+\t* config/rl78/rl78.c: Ditto.\n+\t* config/rs6000/rs6000.c: Ditto.\n+\t* config/rx/rx.c: Ditto.\n+\t* config/s390/s390.c: Ditto.\n+\t* config/sh/sh.c: Ditto.\n+\t* config/sh/sh_treg_combine.cc: Ditto.\n+\t* config/spu/spu.c: Ditto.\n+\t* config/stormy16/stormy16.c: Ditto.\n+\t* config/tilegx/mul-tables.c: Ditto.\n+\t* config/tilegx/tilegx.c: Ditto.\n+\t* config/tilepro/mul-tables.c: Ditto.\n+\t* config/tilepro/tilepro.c: Ditto.\n+\t* config/vax/vax.c: Ditto.\n+\n 2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/tm.texi.in (MOVE_BY_PIECES_P): Remove."}, {"sha": "8f146d2ce1dc128ef3a211b950a8270b02ad0fbd", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"target.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"output.h\"\n #include \"tm_p.h\""}, {"sha": "84191e4a6f577e8a543e6067b4f149ead03346f5", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -99,6 +99,7 @@\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"params.h\"\n #include \"diagnostic-core.h\"\n #include \"toplev.h\" /* user_defined_section_attribute */"}, {"sha": "161fe8c7b3b86407acf93ea35f3df06d76df5fdd", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\""}, {"sha": "c62dba0cf7bf81b7915d23dcade9ce18c6087883", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"regs.h\""}, {"sha": "d338a7c37572b6810fdd97e5b608e95fd3e99c45", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -44,6 +44,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgbuild.h\"\n #include \"cfgcleanup.h\"\n #include \"basic-block.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n #include \"bitmap.h\""}, {"sha": "48c8aa63388db04f90cbc631fe93cbdb396dce6f", "filename": "gcc/cilk-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcilk-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcilk-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk-common.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"langhooks.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"tree-iterator.h\""}, {"sha": "40f2875d5182ccc41c5d07751a4e893dbc462bae", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -105,8 +105,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n #include \"target.h\"\n-#include \"optabs.h\"\n #include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"rtlhooks-def.h\"\n #include \"params.h\"\n #include \"tree-pass.h\""}, {"sha": "527445c5c7788bc37f41d9c3428f59a18410a93a", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -32,6 +32,7 @@\n #include \"recog.h\"\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"hash-table.h\"\n #include \"vec.h\""}, {"sha": "3fe8131a9928d853df056666ebfbee798bf9feed", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"reload.h\"\n #include \"obstack.h\""}, {"sha": "4f047076f8380cc8224f5c4f27c7d04fe0bf4dce", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -47,6 +47,7 @@\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"recog.h\""}, {"sha": "1983ae0299c82a8ec8f61b92f3913a6c81f06517", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"ggc.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"dominance.h\"\n #include \"cfg.h\""}, {"sha": "3890149f1e39b5413281b6310e83b12a55238d80", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -42,6 +42,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n #include \"recog.h\""}, {"sha": "16e0bb5e3775d6ffd7d92a3bf90ef1eb675c8033", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"predict.h\""}, {"sha": "c9494260360403b8354736a82af48ccef2e9f314", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"c-family/c-pragma.h\"\t/* ??? */"}, {"sha": "f896e101c6bb28eadb3218d104995a3714740833", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "161eaf639c0d6197a2f8ca983ceae63c0fb845a4", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\""}, {"sha": "6197b33e20df8a1cf03d101955dc9ccccc696b5e", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -40,6 +40,7 @@\n #include \"varasm.h\"\n #include \"calls.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "2a6b91531a0173620d9277ae0d2bbab8d16376c8", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"reload.h\"\n #include \"tm_p.h\""}, {"sha": "7a44396def6f978ae69b211416e0c1e0656099bc", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -61,6 +61,7 @@\n #include \"predict.h\"\n #include \"basic-block.h\"\n #include \"df.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"hash-map.h\""}, {"sha": "0498e4f2cd4073d3cee49d4873d864c0795649ac", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"flags.h\""}, {"sha": "20330f04305b47e8a3ba3cb306f486be23cf8389", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -37,6 +37,7 @@\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"hashtab.h\"\n #include \"hash-set.h\""}, {"sha": "d4688d9c2f8feb0435818c9ec1a10ef026dc7b3c", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -40,6 +40,7 @@\n #include \"varasm.h\"\n #include \"calls.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "fe97f2700901e12bf4f894f3a5988b84487bf1f1", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -40,6 +40,7 @@\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\""}, {"sha": "982112e0631275be11852f63b21af5f0d3bcc095", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -35,6 +35,7 @@\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"hashtab.h\"\n #include \"hash-set.h\""}, {"sha": "35498357d2ded06efba73d845d41baa64c508953", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbxout.h\"\n #include \"except.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"reload.h\"\n #include \"hashtab.h\""}, {"sha": "7b85cf83d9d077083f5ec3144bec581e1f66e438", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -41,6 +41,7 @@\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\""}, {"sha": "05325c24d6d0d83daeebc984168ecb6e5661cbe0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -38,6 +38,7 @@\n #include \"print-tree.h\"\n #include \"varasm.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "f3e1129c253f4564e1917a25fc5ae7627eb127c0", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -45,6 +45,7 @@\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\""}, {"sha": "31527624be40184e44cc7293d56334721b85eb7c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"debug.h\"\n #include \"langhooks.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"hash-table.h\"\n #include \"tree-ssa-alias.h\""}, {"sha": "3a4f5e9aeeae206d12fb1736764fefd3243b7cc5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"reload.h\"\n #include \"hashtab.h\""}, {"sha": "4615a2843ffeaaec51c32fbd1e065db5b6f9e4a2", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -46,6 +46,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"tree-pass.h\"\n #include \"target.h\"\n+#include \"tree-core.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n \n #include <algorithm>"}, {"sha": "2009085cdc585637dffb8926336d252e74ad741b", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -33,6 +33,7 @@\n #include \"calls.h\"\n #include \"varasm.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "7be72b92577879ba9bd2ecc22b386bb48d8cedfe", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -40,6 +40,7 @@\n #include \"varasm.h\"\n #include \"calls.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"except.h\"\n #include \"hashtab.h\""}, {"sha": "a902299d817033f4bb75598a14f3e74f5726961f", "filename": "gcc/config/tilegx/mul-tables.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilegx%2Fmul-tables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilegx%2Fmul-tables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Fmul-tables.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -22,6 +22,7 @@\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tilegx-multiply.h\"\n "}, {"sha": "0090d9035281ef2f05db5f543c6d681a68795929", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -30,6 +30,7 @@\n #include \"recog.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"dominance.h\"\n #include \"cfg.h\""}, {"sha": "c8eda94e7c16c4279b355a8e33789d4d6af8e019", "filename": "gcc/config/tilepro/mul-tables.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilepro%2Fmul-tables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilepro%2Fmul-tables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Fmul-tables.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -22,6 +22,7 @@\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tilepro-multiply.h\"\n "}, {"sha": "4eef51a5c860a3b5f389dd6169c636fcc1f74398", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -30,6 +30,7 @@\n #include \"recog.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"dominance.h\"\n #include \"cfg.h\""}, {"sha": "949a2d232f9eb95e06d772b9c5c72ccc131b79e1", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"flags.h\"\n #include \"debug.h\""}, {"sha": "40b1bf412ea5117d5600b6e977febc0802b2fe56", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr.h\"\n /* Include expr.h after insn-config.h so we get HAVE_conditional_move.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"langhooks.h\"\n #include \"ggc.h\""}, {"sha": "2555bd1d5a9ec9e6d67a4660fd905b991238f73b", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-config.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"dbgcnt.h\"\n #include \"target.h\""}, {"sha": "6288eb00fc24b6c86332ba65bbf5f22f98e482ca", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -125,6 +125,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"libfuncs.h\"\n #include \"insn-config.h\""}, {"sha": "44a1223b131dfd5758812c29ff66ba4ffc01545a", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"insn-config.h\""}, {"sha": "af14b990794fb8c61aa4cbdc6d1742cc8cfe6e16", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"langhooks.h\""}, {"sha": "f4047c418cd653e34e8180294c5e52b3ac496c18", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr.h\"\n /* Include expr.h after insn-config.h so we get HAVE_conditional_move.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\"\n@@ -3628,6 +3629,21 @@ emit_move_insn (rtx x, rtx y)\n   return last_insn;\n }\n \n+/* Generate the body of an instruction to copy Y into X.\n+   It may be a list of insns, if one insn isn't enough.  */\n+\n+rtx\n+gen_move_insn (rtx x, rtx y)\n+{\n+  rtx_insn *seq;\n+\n+  start_sequence ();\n+  emit_move_insn_1 (x, y);\n+  seq = get_insns ();\n+  end_sequence ();\n+  return seq;\n+}\n+\n /* If Y is representable exactly in a narrower mode, and the target can\n    perform the extension directly from constant or memory, then emit the\n    move as an extension.  */"}, {"sha": "5793560dd712ae4a46378daa36e3edb8b2149524", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 99, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n    ssize_int, TREE_CODE, TYPE_SIZE, int_size_in_bytes,    */\n #include \"tree-core.h\"\n /* For GET_MODE_BITSIZE, word_mode */\n+#include \"insn-config.h\"\n \n /* This is the 4th arg to `expand_expr'.\n    EXPAND_STACK_PARM means we are possibly expanding a call param onto\n@@ -71,93 +72,6 @@ typedef struct separate_ops\n   tree type;\n   tree op0, op1, op2;\n } *sepops;\n-\f\n-/* Functions from optabs.c, commonly used, and without need for the optabs\n-   tables:  */\n-\n-/* Passed to expand_simple_binop and expand_binop to say which options\n-   to try to use if the requested operation can't be open-coded on the\n-   requisite mode.  Either OPTAB_LIB or OPTAB_LIB_WIDEN says try using\n-   a library call.  Either OPTAB_WIDEN or OPTAB_LIB_WIDEN says try\n-   using a wider mode.  OPTAB_MUST_WIDEN says try widening and don't\n-   try anything else.  */\n-\n-enum optab_methods\n-{\n-  OPTAB_DIRECT,\n-  OPTAB_LIB,\n-  OPTAB_WIDEN,\n-  OPTAB_LIB_WIDEN,\n-  OPTAB_MUST_WIDEN\n-};\n-\n-/* Generate code for a simple binary or unary operation.  \"Simple\" in\n-   this case means \"can be unambiguously described by a (mode, code)\n-   pair and mapped to a single optab.\"  */\n-extern rtx expand_simple_binop (machine_mode, enum rtx_code, rtx,\n-\t\t\t\trtx, rtx, int, enum optab_methods);\n-extern rtx expand_simple_unop (machine_mode, enum rtx_code, rtx, rtx,\n-\t\t\t       int);\n-\n-/* Report whether the machine description contains an insn which can\n-   perform the operation described by CODE and MODE.  */\n-extern int have_insn_for (enum rtx_code, machine_mode);\n-\n-/* Emit code to make a call to a constant function or a library call.  */\n-extern void emit_libcall_block (rtx, rtx, rtx, rtx);\n-\n-/* Create but don't emit one rtl instruction to perform certain operations.\n-   Modes must match; operands must meet the operation's predicates.\n-   Likewise for subtraction and for just copying.  */\n-extern rtx gen_add2_insn (rtx, rtx);\n-extern rtx gen_add3_insn (rtx, rtx, rtx);\n-extern rtx gen_addptr3_insn (rtx, rtx, rtx);\n-extern rtx gen_sub2_insn (rtx, rtx);\n-extern rtx gen_sub3_insn (rtx, rtx, rtx);\n-extern rtx gen_move_insn (rtx, rtx);\n-extern int have_add2_insn (rtx, rtx);\n-extern int have_addptr3_insn (rtx, rtx, rtx);\n-extern int have_sub2_insn (rtx, rtx);\n-\n-/* Emit a pair of rtl insns to compare two rtx's and to jump\n-   to a label if the comparison is true.  */\n-extern void emit_cmp_and_jump_insns (rtx, rtx, enum rtx_code, rtx,\n-\t\t\t\t     machine_mode, int, rtx, int prob=-1);\n-\n-/* Generate code to indirectly jump to a location given in the rtx LOC.  */\n-extern void emit_indirect_jump (rtx);\n-\n-/* Generate a conditional trap instruction.  */\n-extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);\n-\n-#include \"insn-config.h\"\n-\n-#ifdef HAVE_conditional_move\n-/* Emit a conditional move operation.  */\n-rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, machine_mode,\n-\t\t\t   rtx, rtx, machine_mode, int);\n-\n-/* Return nonzero if the conditional move is supported.  */\n-int can_conditionally_move_p (machine_mode mode);\n-\n-#endif\n-rtx emit_conditional_add (rtx, enum rtx_code, rtx, rtx, machine_mode,\n-\t\t\t  rtx, rtx, machine_mode, int);\n-\n-rtx expand_sync_operation (rtx, rtx, enum rtx_code);\n-rtx expand_sync_fetch_operation (rtx, rtx, enum rtx_code, bool, rtx);\n-rtx expand_sync_lock_test_and_set (rtx, rtx, rtx);\n-\n-rtx expand_atomic_exchange (rtx, rtx, rtx, enum memmodel);\n-rtx expand_atomic_load (rtx, rtx, enum memmodel);\n-rtx expand_atomic_store (rtx, rtx, enum memmodel, bool);\n-rtx expand_atomic_fetch_op (rtx, rtx, rtx, enum rtx_code, enum memmodel, \n-\t\t\t      bool);\n-rtx expand_atomic_test_and_set (rtx, rtx, enum memmodel);\n-rtx expand_atomic_clear (rtx, enum memmodel);\n-void expand_atomic_thread_fence (enum memmodel);\n-void expand_atomic_signal_fence (enum memmodel);\n-\n \f\n /* Functions from expmed.c:  */\n \n@@ -334,6 +248,7 @@ extern rtx store_by_pieces (rtx, unsigned HOST_WIDE_INT,\n \n /* Emit insns to set X from Y.  */\n extern rtx_insn *emit_move_insn (rtx, rtx);\n+extern rtx gen_move_insn (rtx, rtx);\n \n /* Emit insns to set X from Y, with no frills.  */\n extern rtx_insn *emit_move_insn_1 (rtx, rtx);\n@@ -671,18 +586,6 @@ extern int safe_from_p (const_rtx, tree, int);\n extern bool split_comparison (enum rtx_code, machine_mode,\n \t\t\t      enum rtx_code *, enum rtx_code *);\n \n-/* Call this once to initialize the contents of the optabs\n-   appropriately for the current target machine.  */\n-extern void init_optabs (void);\n-extern void init_all_optabs (struct target_optabs *);\n-\n-/* Call this to initialize an optab function entry.  */\n-extern rtx init_one_libfunc (const char *);\n-extern rtx set_user_assembler_libfunc (const char *, const char *);\n-\n-/* Build a decl for a libfunc named NAME. */\n-extern tree build_libfunc_function (const char *);\n-\n /* Get the personality libfunc for a function decl.  */\n rtx get_personality_function (tree);\n "}, {"sha": "6d0998228d1437524761f27b471fb2f7c46a3e2a", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"regs.h\""}, {"sha": "5f30f4223afa2efba770ab884cea2197196aa41c", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -809,6 +809,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"input.h\\\"\\n\");\n   printf (\"#include \\\"function.h\\\"\\n\");\n   printf (\"#include \\\"expr.h\\\"\\n\");\n+  printf (\"#include \\\"insn-codes.h\\\"\\n\");\n   printf (\"#include \\\"optabs.h\\\"\\n\");\n   printf (\"#include \\\"dfp.h\\\"\\n\");\n   printf (\"#include \\\"flags.h\\\"\\n\");"}, {"sha": "fac83ee84d285632ec19543756ac92aac246cc86", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -1826,7 +1826,7 @@ open_base_files (void)\n   {\n     /* The order of files here matters very much.  */\n     static const char *const ifiles[] = {\n-      \"config.h\", \"system.h\", \"coretypes.h\", \"tm.h\",\n+      \"config.h\", \"system.h\", \"coretypes.h\", \"tm.h\", \"insn-codes.h\",\n       \"hashtab.h\", \"splay-tree.h\", \"obstack.h\", \"bitmap.h\", \"input.h\",\n       \"tree.h\", \"rtl.h\", \"wide-int.h\", \"hashtab.h\", \"hash-set.h\", \"vec.h\",\n       \"machmode.h\", \"tm.h\", \"hard-reg-set.h\", \"input.h\", \"predict.h\","}, {"sha": "2d14d125211aa8b4b3a40ac24b1f3ef3ef65f485", "filename": "gcc/genopinit.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -398,6 +398,68 @@ main (int argc, char **argv)\n   fprintf (h_file, \"#define NUM_OPTAB_PATTERNS  %u\\n\",\n \t   (unsigned) patterns.length ());\n \n+  fprintf (h_file, \n+\t   \"typedef enum optab_tag optab;\\n\"\n+\t   \"typedef enum optab_tag convert_optab;\\n\"\n+\t   \"typedef enum optab_tag direct_optab;\\n\"\n+\t   \"\\n\"\n+\t   \"struct optab_libcall_d\\n\"\n+\t   \"{\\n\"\n+\t   \"  char libcall_suffix;\\n\"\n+\t   \"  const char *libcall_basename;\\n\"\n+\t   \"  void (*libcall_gen) (optab, const char *name,\\n\"\n+\t   \"\t\t       char suffix, machine_mode);\\n\"\n+\t   \"};\\n\"\n+\t   \"\\n\"\n+\t   \"struct convert_optab_libcall_d\\n\"\n+\t   \"{\\n\"\n+\t   \"  const char *libcall_basename;\\n\"\n+\t   \"  void (*libcall_gen) (convert_optab, const char *name,\\n\"\n+\t   \"\t\t       machine_mode, machine_mode);\\n\"\n+\t   \"};\\n\"\n+\t   \"\\n\"\n+\t   \"/* Given an enum insn_code, access the function to construct\\n\"\n+\t   \"   the body of that kind of insn.  */\\n\"\n+\t   \"#define GEN_FCN(CODE) (insn_data[CODE].genfun)\\n\"\n+\t   \"\\n\"\n+\t   \"/* Contains the optab used for each rtx code, and vice-versa.  */\\n\"\n+\t   \"extern const optab code_to_optab_[NUM_RTX_CODE];\\n\"\n+\t   \"extern const enum rtx_code optab_to_code_[NUM_OPTABS];\\n\"\n+\t   \"\\n\"\n+\t   \"static inline optab\\n\"\n+\t   \"code_to_optab (enum rtx_code code)\\n\"\n+\t   \"{\\n\"\n+\t   \"  return code_to_optab_[code];\\n\"\n+\t   \"}\\n\"\n+\t   \"\\n\"\n+\t   \"static inline enum rtx_code\\n\"\n+\t   \"optab_to_code (optab op)\\n\"\n+\t   \"{\\n\"\n+\t   \"  return optab_to_code_[op];\\n\"\n+\t   \"}\\n\"\n+\t   \"\\n\"\n+\t   \"extern const struct convert_optab_libcall_d convlib_def[NUM_CONVLIB_OPTABS];\\n\"\n+\t   \"extern const struct optab_libcall_d normlib_def[NUM_NORMLIB_OPTABS];\\n\"\n+\t   \"\\n\"\n+\t   \"/* Returns the active icode for the given (encoded) optab.  */\\n\"\n+\t   \"extern enum insn_code raw_optab_handler (unsigned);\\n\"\n+\t   \"extern bool swap_optab_enable (optab, machine_mode, bool);\\n\"\n+\t   \"\\n\"\n+\t   \"/* Target-dependent globals.  */\\n\"\n+\t   \"struct target_optabs {\\n\"\n+\t   \"  /* Patterns that are used by optabs that are enabled for this target.  */\\n\"\n+\t   \"  bool pat_enable[NUM_OPTAB_PATTERNS];\\n\"\n+\t   \"};\\n\"\n+\t   \"extern void init_all_optabs (struct target_optabs *);\\n\"\n+\t   \"\\n\"\n+\t   \"extern struct target_optabs default_target_optabs;\\n\"\n+\t   \"extern struct target_optabs *this_fn_optabs;\\n\"\n+\t   \"#if SWITCHABLE_TARGET\\n\"\n+\t   \"extern struct target_optabs *this_target_optabs;\\n\"\n+\t   \"#else\\n\"\n+\t   \"#define this_target_optabs (&default_target_optabs)\\n\"\n+\t   \"#endif\\n\");\n+\n   fprintf (s_file,\n \t   \"#include \\\"config.h\\\"\\n\"\n \t   \"#include \\\"system.h\\\"\\n\"\n@@ -413,6 +475,7 @@ main (int argc, char **argv)\n \t   \"#include \\\"flags.h\\\"\\n\"\n \t   \"#include \\\"insn-config.h\\\"\\n\"\n \t   \"#include \\\"expr.h\\\"\\n\"\n+\t   \"#include \\\"insn-codes.h\\\"\\n\"\n \t   \"#include \\\"optabs.h\\\"\\n\"\n \t   \"\\n\"\n \t   \"struct optab_pat {\\n\""}, {"sha": "772b1841584350b65aa61566cada4e5002606ec1", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -44,6 +44,7 @@\n #include \"basic-block.h\"\n #include \"expr.h\"\n #include \"output.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"tm_p.h\""}, {"sha": "04f8b6415fb9fb2149a3c5751c806fd04e63750e", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"stor-layout.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"predict.h\"\n #include \"vec.h\""}, {"sha": "c4c6b0d9768ff7d23a7dc53fafd38405b39950a1", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"params.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"hash-table.h\"\n #include \"recog.h\""}, {"sha": "ee390db0b06eacd21fb1c6eb9710d48faf9395ac", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -112,6 +112,8 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"tree-core.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"predict.h\"\n #include \"dominance.h\""}, {"sha": "8abb8ee75534f8259abec8aba9b8be4c1bee0657", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -48,6 +48,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sched-int.h\"\n #include \"target.h\"\n #include \"cfgloop.h\"\n+#include \"tree-core.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"params.h\"\n #include \"gcov-io.h\""}, {"sha": "b59d069ac144c222911d8cfebbc0a680a8d0ae5a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"except.h\"\n #include \"splay-tree.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"cfgloop.h\"\n #include \"target.h\""}, {"sha": "7e64eacc6f703c4d0689f4100c1b7d1d9b54cd8d", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"except.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"recog.h\"\n@@ -4894,21 +4895,6 @@ have_sub2_insn (rtx x, rtx y)\n \n   return 1;\n }\n-\n-/* Generate the body of an instruction to copy Y into X.\n-   It may be a list of insns, if one insn isn't enough.  */\n-\n-rtx\n-gen_move_insn (rtx x, rtx y)\n-{\n-  rtx_insn *seq;\n-\n-  start_sequence ();\n-  emit_move_insn_1 (x, y);\n-  seq = get_insns ();\n-  end_sequence ();\n-  return seq;\n-}\n \f\n /* Return the insn code used to extend FROM_MODE to TO_MODE.\n    UNSIGNEDP specifies zero-extension instead of sign-extension.  If"}, {"sha": "91e36d61b3bc10ed8a5ba4cf5b368e7e341a3d49", "filename": "gcc/optabs.h", "status": "modified", "additions": 288, "deletions": 265, "changes": 553, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -20,244 +20,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_OPTABS_H\n #define GCC_OPTABS_H\n \n-#include \"insn-codes.h\"\n #include \"insn-opinit.h\"\n \n-typedef enum optab_tag optab;\n-typedef enum optab_tag convert_optab;\n-typedef enum optab_tag direct_optab;\n-\n-struct optab_libcall_d\n-{\n-  char libcall_suffix;\n-  const char *libcall_basename;\n-  void (*libcall_gen) (optab, const char *name,\n-\t\t       char suffix, machine_mode);\n-};\n-\n-struct convert_optab_libcall_d\n-{\n-  const char *libcall_basename;\n-  void (*libcall_gen) (convert_optab, const char *name,\n-\t\t       machine_mode, machine_mode);\n-};\n-\n-/* Given an enum insn_code, access the function to construct\n-   the body of that kind of insn.  */\n-#define GEN_FCN(CODE) (insn_data[CODE].genfun)\n-\n-/* Contains the optab used for each rtx code, and vice-versa.  */\n-extern const optab code_to_optab_[NUM_RTX_CODE];\n-extern const enum rtx_code optab_to_code_[NUM_OPTABS];\n-\n-static inline optab\n-code_to_optab (enum rtx_code code)\n-{\n-  return code_to_optab_[code];\n-}\n-\n-static inline enum rtx_code\n-optab_to_code (optab op)\n-{\n-  return optab_to_code_[op];\n-}\n-\n-extern const struct convert_optab_libcall_d convlib_def[NUM_CONVLIB_OPTABS];\n-extern const struct optab_libcall_d normlib_def[NUM_NORMLIB_OPTABS];\n-\n-/* Returns the active icode for the given (encoded) optab.  */\n-extern enum insn_code raw_optab_handler (unsigned);\n-extern bool swap_optab_enable (optab, machine_mode, bool);\n-\n-/* Target-dependent globals.  */\n-struct target_optabs {\n-  /* Patterns that are used by optabs that are enabled for this target.  */\n-  bool pat_enable[NUM_OPTAB_PATTERNS];\n-};\n-\n-extern struct target_optabs default_target_optabs;\n-extern struct target_optabs *this_fn_optabs;\n-#if SWITCHABLE_TARGET\n-extern struct target_optabs *this_target_optabs;\n-#else\n-#define this_target_optabs (&default_target_optabs)\n-#endif\n-\f\n-/* Define functions given in optabs.c.  */\n-\n-extern rtx expand_widen_pattern_expr (sepops ops, rtx op0, rtx op1, rtx wide_op,\n-                                      rtx target, int unsignedp);\n-\n-extern rtx expand_ternary_op (machine_mode mode, optab ternary_optab,\n-\t\t\t      rtx op0, rtx op1, rtx op2, rtx target,\n-\t\t\t      int unsignedp);\n-\n-/* Expand a binary operation given optab and rtx operands.  */\n-extern rtx expand_binop (machine_mode, optab, rtx, rtx, rtx, int,\n-\t\t\t enum optab_methods);\n-\n-extern rtx simplify_expand_binop (machine_mode mode, optab binoptab,\n-\t\t\t\t  rtx op0, rtx op1, rtx target, int unsignedp,\n-\t\t\t\t  enum optab_methods methods);\n-\n-extern bool force_expand_binop (machine_mode, optab, rtx, rtx, rtx, int,\n-\t\t\t\tenum optab_methods);\n-\n-/* Expand a binary operation with both signed and unsigned forms.  */\n-extern rtx sign_expand_binop (machine_mode, optab, optab, rtx, rtx,\n-\t\t\t      rtx, int, enum optab_methods);\n-\n-/* Generate code to perform an operation on one operand with two results.  */\n-extern int expand_twoval_unop (optab, rtx, rtx, rtx, int);\n-\n-/* Generate code to perform an operation on two operands with two results.  */\n-extern int expand_twoval_binop (optab, rtx, rtx, rtx, rtx, int);\n-\n-/* Generate code to perform an operation on two operands with two\n-   results, using a library function.  */\n-extern bool expand_twoval_binop_libfunc (optab, rtx, rtx, rtx, rtx,\n-\t\t\t\t\t enum rtx_code);\n-\n-/* Expand a unary arithmetic operation given optab rtx operand.  */\n-extern rtx expand_unop (machine_mode, optab, rtx, rtx, int);\n-\n-/* Expand the absolute value operation.  */\n-extern rtx expand_abs_nojump (machine_mode, rtx, rtx, int);\n-extern rtx expand_abs (machine_mode, rtx, rtx, int, int);\n-\n-/* Expand the one's complement absolute value operation.  */\n-extern rtx expand_one_cmpl_abs_nojump (machine_mode, rtx, rtx);\n-\n-/* Expand the copysign operation.  */\n-extern rtx expand_copysign (rtx, rtx, rtx);\n-\n-/* Generate an instruction with a given INSN_CODE with an output and\n-   an input.  */\n-extern void emit_unop_insn (enum insn_code, rtx, rtx, enum rtx_code);\n-extern bool maybe_emit_unop_insn (enum insn_code, rtx, rtx, enum rtx_code);\n-\n-/* Find a widening optab even if it doesn't widen as much as we want.  */\n-#define find_widening_optab_handler(A,B,C,D) \\\n-  find_widening_optab_handler_and_mode (A, B, C, D, NULL)\n-extern enum insn_code find_widening_optab_handler_and_mode (optab,\n-\t\t\t\t\t\t\t    machine_mode,\n-\t\t\t\t\t\t\t    machine_mode,\n-\t\t\t\t\t\t\t    int,\n-\t\t\t\t\t\t\t    machine_mode *);\n-extern enum insn_code widening_optab_handler (optab, machine_mode,\n-\t\t\t\t\t      machine_mode);\n-\n-/* An extra flag to control optab_for_tree_code's behavior.  This is needed to\n-   distinguish between machines with a vector shift that takes a scalar for the\n-   shift amount vs. machines that take a vector for the shift amount.  */\n-enum optab_subtype\n-{\n-  optab_default,\n-  optab_scalar,\n-  optab_vector\n-};\n-\n-/* Return the optab used for computing the given operation on the type given by\n-   the second argument.  The third argument distinguishes between the types of\n-   vector shifts and rotates */\n-extern optab optab_for_tree_code (enum tree_code, const_tree, enum optab_subtype);\n-\n-/* Given an optab that reduces a vector to a scalar, find instead the old\n-   optab that produces a vector with the reduction result in one element,\n-   for a tree with the specified type.  */\n-extern optab scalar_reduc_to_vector (optab, const_tree type);\n-\n-/* The various uses that a comparison can have; used by can_compare_p:\n-   jumps, conditional moves, store flag operations.  */\n-enum can_compare_purpose\n-{\n-  ccp_jump,\n-  ccp_cmov,\n-  ccp_store_flag\n-};\n-\n-/* Nonzero if a compare of mode MODE can be done straightforwardly\n-   (without splitting it into pieces).  */\n-extern int can_compare_p (enum rtx_code, machine_mode,\n-\t\t\t  enum can_compare_purpose);\n-\n-/* Return the INSN_CODE to use for an extend operation.  */\n-extern enum insn_code can_extend_p (machine_mode, machine_mode, int);\n-\n-/* Generate the body of an insn to extend Y (with mode MFROM)\n-   into X (with mode MTO).  Do zero-extension if UNSIGNEDP is nonzero.  */\n-extern rtx gen_extend_insn (rtx, rtx, machine_mode,\n-\t\t\t    machine_mode, int);\n-\n-/* Call this to reset the function entry for one optab.  */\n-extern void set_optab_libfunc (optab, machine_mode, const char *);\n-extern void set_conv_libfunc (convert_optab, machine_mode,\n-\t\t\t      machine_mode, const char *);\n-\n-/* Call this to install all of the __sync libcalls up to size MAX.  */\n-extern void init_sync_libfuncs (int max);\n-\n-/* Generate code for a FIXED_CONVERT_EXPR.  */\n-extern void expand_fixed_convert (rtx, rtx, int, int);\n-\n-/* Generate code for a FLOAT_EXPR.  */\n-extern void expand_float (rtx, rtx, int);\n-\n-/* Return the insn_code for a FLOAT_EXPR.  */\n-enum insn_code can_float_p (machine_mode, machine_mode, int);\n-\n-/* Return true if there is an inline compare and swap pattern.  */\n-extern bool can_compare_and_swap_p (machine_mode, bool);\n-\n-/* Return true if there is an inline atomic exchange pattern.  */\n-extern bool can_atomic_exchange_p (machine_mode, bool);\n-\n-/* Generate code for a compare and swap.  */\n-extern bool expand_atomic_compare_and_swap (rtx *, rtx *, rtx, rtx, rtx, bool,\n-\t\t\t\t\t    enum memmodel, enum memmodel);\n-\n-/* Generate memory barriers.  */\n-extern void expand_mem_thread_fence (enum memmodel);\n-extern void expand_mem_signal_fence (enum memmodel);\n-\n-/* Check whether an operation represented by the code CODE is a\n-   convert operation that is supported by the target platform in\n-   vector form */\n-bool supportable_convert_operation (enum tree_code, tree, tree, tree *, \n-                                    enum tree_code *);\n-\n-/* Generate code for a FIX_EXPR.  */\n-extern void expand_fix (rtx, rtx, int);\n-\n-/* Generate code for float to integral conversion.  */\n-extern bool expand_sfix_optab (rtx, rtx, convert_optab);\n-\n /* Generate code for a widening multiply.  */\n extern rtx expand_widening_mult (machine_mode, rtx, rtx, rtx, int, optab);\n \n-/* Return tree if target supports vector operations for COND_EXPR.  */\n-bool expand_vec_cond_expr_p (tree, tree);\n-\n-/* Generate code for VEC_COND_EXPR.  */\n-extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);\n-/* Generate code for VEC_RSHIFT_EXPR.  */\n-extern rtx expand_vec_shift_expr (sepops, rtx);\n-\n-/* Return true if target supports vector operations for VEC_PERM_EXPR.  */\n-extern bool can_vec_perm_p (machine_mode, bool, const unsigned char *);\n-\n-/* Generate code for VEC_PERM_EXPR.  */\n-extern rtx expand_vec_perm (machine_mode, rtx, rtx, rtx, rtx);\n-\n-/* Return non-zero if target supports a given highpart multiplication.  */\n-extern int can_mult_highpart_p (machine_mode, bool);\n-\n-/* Generate code for MULT_HIGHPART_EXPR.  */\n-extern rtx expand_mult_highpart (machine_mode, rtx, rtx, rtx, bool);\n-\n-/* Return true if target supports vector masked load/store for mode.  */\n-extern bool can_vec_mask_load_store_p (machine_mode, bool);\n-\n /* Return the insn used to implement mode MODE of OP, or CODE_FOR_nothing\n    if the target does not have such an insn.  */\n \n@@ -310,9 +77,7 @@ trapv_binoptab_p (optab binoptab)\n \t  || binoptab == smulv_optab);\n }\n \n-extern rtx optab_libfunc (optab optab, machine_mode mode);\n-extern rtx convert_optab_libfunc (convert_optab optab, machine_mode mode1,\n-\t\t\t          machine_mode mode2);\n+\n \n /* Describes an instruction that inserts or extracts a bitfield.  */\n struct extraction_insn\n@@ -333,21 +98,8 @@ struct extraction_insn\n   machine_mode pos_mode;\n };\n \n-/* Enumerates the possible extraction_insn operations.  */\n-enum extraction_pattern { EP_insv, EP_extv, EP_extzv };\n-\n-extern bool get_best_reg_extraction_insn (extraction_insn *,\n-\t\t\t\t\t  enum extraction_pattern,\n-\t\t\t\t\t  unsigned HOST_WIDE_INT,\n-\t\t\t\t\t  machine_mode);\n \n-extern bool get_best_mem_extraction_insn (extraction_insn *,\n-\t\t\t\t\t  enum extraction_pattern,\n-\t\t\t\t\t  HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t\t  machine_mode);\n \n-extern bool insn_operand_matches (enum insn_code icode, unsigned int opno,\n-\t\t\t\t  rtx operand);\n \n /* Describes the type of an expand_operand.  Each value is associated\n    with a create_*_operand function; see the comments above those\n@@ -452,8 +204,6 @@ create_convert_operand_from (struct expand_operand *op, rtx value,\n   create_expand_operand (op, EXPAND_CONVERT_FROM, value, mode, unsigned_p);\n }\n \n-extern void create_convert_operand_from_type (struct expand_operand *op,\n-\t\t\t\t\t      rtx value, tree type);\n \n /* Make OP describe an input Pmode address operand.  VALUE is the value\n    of the address, but it may need to be converted to Pmode first.  */\n@@ -476,24 +226,202 @@ create_integer_operand (struct expand_operand *op, HOST_WIDE_INT intval)\n   create_expand_operand (op, EXPAND_INTEGER, GEN_INT (intval), VOIDmode, false);\n }\n \n-extern bool valid_multiword_target_p (rtx);\n \n-extern bool maybe_legitimize_operands (enum insn_code icode,\n-\t\t\t\t       unsigned int opno, unsigned int nops,\n-\t\t\t\t       struct expand_operand *ops);\n-extern rtx maybe_gen_insn (enum insn_code icode, unsigned int nops,\n-\t\t\t   struct expand_operand *ops);\n-extern bool maybe_expand_insn (enum insn_code icode, unsigned int nops,\n-\t\t\t       struct expand_operand *ops);\n-extern bool maybe_expand_jump_insn (enum insn_code icode, unsigned int nops,\n-\t\t\t\t    struct expand_operand *ops);\n-extern void expand_insn (enum insn_code icode, unsigned int nops,\n-\t\t\t struct expand_operand *ops);\n-extern void expand_jump_insn (enum insn_code icode, unsigned int nops,\n-\t\t\t      struct expand_operand *ops);\n+extern rtx convert_optab_libfunc (convert_optab optab, machine_mode mode1,\n+\t\t\t          machine_mode mode2);\n+extern rtx optab_libfunc (optab optab, machine_mode mode);\n+extern enum insn_code widening_optab_handler (optab, machine_mode,\n+\t\t\t\t\t      machine_mode);\n+/* Find a widening optab even if it doesn't widen as much as we want.  */\n+#define find_widening_optab_handler(A,B,C,D) \\\n+  find_widening_optab_handler_and_mode (A, B, C, D, NULL)\n+extern enum insn_code find_widening_optab_handler_and_mode (optab,\n+\t\t\t\t\t\t\t    machine_mode,\n+\t\t\t\t\t\t\t    machine_mode,\n+\t\t\t\t\t\t\t    int,\n+\t\t\t\t\t\t\t    machine_mode *);\n+\n+/* An extra flag to control optab_for_tree_code's behavior.  This is needed to\n+   distinguish between machines with a vector shift that takes a scalar for the\n+   shift amount vs. machines that take a vector for the shift amount.  */\n+enum optab_subtype\n+{\n+  optab_default,\n+  optab_scalar,\n+  optab_vector\n+};\n+\n+/* Passed to expand_simple_binop and expand_binop to say which options\n+   to try to use if the requested operation can't be open-coded on the\n+   requisite mode.  Either OPTAB_LIB or OPTAB_LIB_WIDEN says try using\n+   a library call.  Either OPTAB_WIDEN or OPTAB_LIB_WIDEN says try\n+   using a wider mode.  OPTAB_MUST_WIDEN says try widening and don't\n+   try anything else.  */\n+\n+enum optab_methods\n+{\n+  OPTAB_DIRECT,\n+  OPTAB_LIB,\n+  OPTAB_WIDEN,\n+  OPTAB_LIB_WIDEN,\n+  OPTAB_MUST_WIDEN\n+};\n+\n+/* Return the optab used for computing the given operation on the type given by\n+   the second argument.  The third argument distinguishes between the types of\n+   vector shifts and rotates */\n+extern optab optab_for_tree_code (enum tree_code, const_tree, enum optab_subtype);\n+\n+/* Given an optab that reduces a vector to a scalar, find instead the old\n+   optab that produces a vector with the reduction result in one element,\n+   for a tree with the specified type.  */\n+extern optab scalar_reduc_to_vector (optab, const_tree type);\n+\n+extern rtx expand_widen_pattern_expr (struct separate_ops *, rtx , rtx , rtx,\n+                                      rtx, int);\n+extern rtx expand_ternary_op (machine_mode mode, optab ternary_optab,\n+\t\t\t      rtx op0, rtx op1, rtx op2, rtx target,\n+\t\t\t      int unsignedp);\n+extern rtx simplify_expand_binop (machine_mode mode, optab binoptab,\n+\t\t\t\t  rtx op0, rtx op1, rtx target, int unsignedp,\n+\t\t\t\t  enum optab_methods methods);\n+extern bool force_expand_binop (machine_mode, optab, rtx, rtx, rtx, int,\n+\t\t\t\tenum optab_methods);\n+/* Generate code for VEC_RSHIFT_EXPR.  */\n+extern rtx expand_vec_shift_expr (struct separate_ops *, rtx);\n+\n+/* Generate code for a simple binary or unary operation.  \"Simple\" in\n+   this case means \"can be unambiguously described by a (mode, code)\n+   pair and mapped to a single optab.\"  */\n+extern rtx expand_simple_binop (machine_mode, enum rtx_code, rtx,\n+\t\t\t\trtx, rtx, int, enum optab_methods);\n+\n+/* Expand a binary operation given optab and rtx operands.  */\n+extern rtx expand_binop (machine_mode, optab, rtx, rtx, rtx, int,\n+\t\t\t enum optab_methods);\n \n+/* Expand a binary operation with both signed and unsigned forms.  */\n+extern rtx sign_expand_binop (machine_mode, optab, optab, rtx, rtx,\n+\t\t\t      rtx, int, enum optab_methods);\n+\n+/* Generate code to perform an operation on one operand with two results.  */\n+extern int expand_twoval_unop (optab, rtx, rtx, rtx, int);\n+\n+/* Generate code to perform an operation on two operands with two results.  */\n+extern int expand_twoval_binop (optab, rtx, rtx, rtx, rtx, int);\n+\n+/* Generate code to perform an operation on two operands with two\n+   results, using a library function.  */\n+extern bool expand_twoval_binop_libfunc (optab, rtx, rtx, rtx, rtx,\n+\t\t\t\t\t enum rtx_code);\n+extern rtx expand_simple_unop (machine_mode, enum rtx_code, rtx, rtx,\n+\t\t\t       int);\n+\n+/* Expand a unary arithmetic operation given optab rtx operand.  */\n+extern rtx expand_unop (machine_mode, optab, rtx, rtx, int);\n+\n+/* Expand the absolute value operation.  */\n+extern rtx expand_abs_nojump (machine_mode, rtx, rtx, int);\n+extern rtx expand_abs (machine_mode, rtx, rtx, int, int);\n+\n+/* Expand the one's complement absolute value operation.  */\n+extern rtx expand_one_cmpl_abs_nojump (machine_mode, rtx, rtx);\n+\n+/* Expand the copysign operation.  */\n+extern rtx expand_copysign (rtx, rtx, rtx);\n+/* Generate an instruction with a given INSN_CODE with an output and\n+   an input.  */\n+extern bool maybe_emit_unop_insn (enum insn_code, rtx, rtx, enum rtx_code);\n+extern void emit_unop_insn (enum insn_code, rtx, rtx, enum rtx_code);\n+\n+/* Emit code to make a call to a constant function or a library call.  */\n+extern void emit_libcall_block (rtx, rtx, rtx, rtx);\n+\n+/* The various uses that a comparison can have; used by can_compare_p:\n+   jumps, conditional moves, store flag operations.  */\n+enum can_compare_purpose\n+{\n+  ccp_jump,\n+  ccp_cmov,\n+  ccp_store_flag\n+};\n+\n+/* Nonzero if a compare of mode MODE can be done straightforwardly\n+   (without splitting it into pieces).  */\n+extern int can_compare_p (enum rtx_code, machine_mode,\n+\t\t\t  enum can_compare_purpose);\n extern rtx prepare_operand (enum insn_code, rtx, int, machine_mode,\n \t\t\t    machine_mode, int);\n+/* Emit a pair of rtl insns to compare two rtx's and to jump\n+   to a label if the comparison is true.  */\n+extern void emit_cmp_and_jump_insns (rtx, rtx, enum rtx_code, rtx,\n+\t\t\t\t     machine_mode, int, rtx, int prob=-1);\n+\n+/* Generate code to indirectly jump to a location given in the rtx LOC.  */\n+extern void emit_indirect_jump (rtx);\n+\n+#include \"insn-config.h\"\n+\n+#ifndef GCC_INSN_CONFIG_H\n+#error \"insn-config.h must be included before optabs.h\"\n+#endif\n+\n+#ifdef HAVE_conditional_move\n+/* Emit a conditional move operation.  */\n+rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, machine_mode,\n+\t\t\t   rtx, rtx, machine_mode, int);\n+\n+/* Return nonzero if the conditional move is supported.  */\n+int can_conditionally_move_p (machine_mode mode);\n+\n+#endif\n+rtx emit_conditional_add (rtx, enum rtx_code, rtx, rtx, machine_mode,\n+\t\t\t  rtx, rtx, machine_mode, int);\n+\n+/* Create but don't emit one rtl instruction to perform certain operations.\n+   Modes must match; operands must meet the operation's predicates.\n+   Likewise for subtraction and for just copying.  */\n+extern rtx gen_add2_insn (rtx, rtx);\n+extern rtx gen_add3_insn (rtx, rtx, rtx);\n+extern int have_add2_insn (rtx, rtx);\n+extern rtx gen_addptr3_insn (rtx, rtx, rtx);\n+extern int have_addptr3_insn (rtx, rtx, rtx);\n+extern rtx gen_sub2_insn (rtx, rtx);\n+extern rtx gen_sub3_insn (rtx, rtx, rtx);\n+extern int have_sub2_insn (rtx, rtx);\n+\n+/* Return the INSN_CODE to use for an extend operation.  */\n+extern enum insn_code can_extend_p (machine_mode, machine_mode, int);\n+\n+/* Generate the body of an insn to extend Y (with mode MFROM)\n+   into X (with mode MTO).  Do zero-extension if UNSIGNEDP is nonzero.  */\n+extern rtx gen_extend_insn (rtx, rtx, machine_mode,\n+\t\t\t    machine_mode, int);\n+\n+/* Return the insn_code for a FLOAT_EXPR.  */\n+enum insn_code can_float_p (machine_mode, machine_mode, int);\n+\n+/* Check whether an operation represented by the code CODE is a\n+   convert operation that is supported by the target platform in\n+   vector form */\n+bool supportable_convert_operation (enum tree_code, tree, tree, tree *, \n+                                    enum tree_code *);\n+\n+/* Generate code for a FLOAT_EXPR.  */\n+extern void expand_float (rtx, rtx, int);\n+\n+/* Generate code for a FIX_EXPR.  */\n+extern void expand_fix (rtx, rtx, int);\n+\n+/* Generate code for a FIXED_CONVERT_EXPR.  */\n+extern void expand_fixed_convert (rtx, rtx, int, int);\n+\n+/* Generate code for float to integral conversion.  */\n+extern bool expand_sfix_optab (rtx, rtx, convert_optab);\n+\n+/* Report whether the machine description contains an insn which can\n+   perform the operation described by CODE and MODE.  */\n+extern int have_insn_for (enum rtx_code, machine_mode);\n \n extern void gen_int_libfunc (optab, const char *, char, machine_mode);\n extern void gen_fp_libfunc (optab, const char *, char, machine_mode);\n@@ -542,7 +470,102 @@ extern void gen_satfract_conv_libfunc (convert_optab, const char *,\n extern void gen_satfractuns_conv_libfunc (convert_optab, const char *,\n \t\t\t\t\t  machine_mode,\n \t\t\t\t\t  machine_mode);\n+\n+/* Build a decl for a libfunc named NAME. */\n+extern tree build_libfunc_function (const char *);\n+\n+/* Call this to initialize an optab function entry.  */\n+extern rtx init_one_libfunc (const char *);\n+extern rtx set_user_assembler_libfunc (const char *, const char *);\n+\n+/* Call this to reset the function entry for one optab.  */\n+extern void set_optab_libfunc (optab, machine_mode, const char *);\n+extern void set_conv_libfunc (convert_optab, machine_mode,\n+\t\t\t      machine_mode, const char *);\n+\n+/* Call this once to initialize the contents of the optabs\n+   appropriately for the current target machine.  */\n+extern void init_optabs (void);\n extern void init_tree_optimization_optabs (tree);\n+\n+/* Call this to install all of the __sync libcalls up to size MAX.  */\n+extern void init_sync_libfuncs (int max);\n+\n+/* Generate a conditional trap instruction.  */\n+extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);\n+\n+/* Return true if target supports vector operations for VEC_PERM_EXPR.  */\n+extern bool can_vec_perm_p (machine_mode, bool, const unsigned char *);\n+\n+/* Generate code for VEC_PERM_EXPR.  */\n+extern rtx expand_vec_perm (machine_mode, rtx, rtx, rtx, rtx);\n+\n+/* Return tree if target supports vector operations for COND_EXPR.  */\n+bool expand_vec_cond_expr_p (tree, tree);\n+\n+/* Generate code for VEC_COND_EXPR.  */\n+extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);\n+\n+/* Return non-zero if target supports a given highpart multiplication.  */\n+extern int can_mult_highpart_p (machine_mode, bool);\n+\n+/* Generate code for MULT_HIGHPART_EXPR.  */\n+extern rtx expand_mult_highpart (machine_mode, rtx, rtx, rtx, bool);\n+\n+/* Return true if target supports vector masked load/store for mode.  */\n+extern bool can_vec_mask_load_store_p (machine_mode, bool);\n+\n+/* Return true if there is an inline compare and swap pattern.  */\n+extern bool can_compare_and_swap_p (machine_mode, bool);\n+\n+/* Return true if there is an inline atomic exchange pattern.  */\n+extern bool can_atomic_exchange_p (machine_mode, bool);\n+\n+extern rtx expand_sync_lock_test_and_set (rtx, rtx, rtx);\n+extern rtx expand_atomic_test_and_set (rtx, rtx, enum memmodel);\n+extern rtx expand_atomic_exchange (rtx, rtx, rtx, enum memmodel);\n+extern bool expand_atomic_compare_and_swap (rtx *, rtx *, rtx, rtx, rtx, bool,\n+\t\t\t\t\t    enum memmodel, enum memmodel);\n+/* Generate memory barriers.  */\n+extern void expand_mem_thread_fence (enum memmodel);\n+extern void expand_mem_signal_fence (enum memmodel);\n+\n+rtx expand_atomic_load (rtx, rtx, enum memmodel);\n+rtx expand_atomic_store (rtx, rtx, enum memmodel, bool);\n+rtx expand_atomic_fetch_op (rtx, rtx, rtx, enum rtx_code, enum memmodel, \n+\t\t\t      bool);\n+\n+extern bool insn_operand_matches (enum insn_code icode, unsigned int opno,\n+\t\t\t\t  rtx operand);\n+extern bool valid_multiword_target_p (rtx);\n+extern void create_convert_operand_from_type (struct expand_operand *op,\n+\t\t\t\t\t      rtx value, tree type);\n+extern bool maybe_legitimize_operands (enum insn_code icode,\n+\t\t\t\t       unsigned int opno, unsigned int nops,\n+\t\t\t\t       struct expand_operand *ops);\n+extern rtx maybe_gen_insn (enum insn_code icode, unsigned int nops,\n+\t\t\t   struct expand_operand *ops);\n+extern bool maybe_expand_insn (enum insn_code icode, unsigned int nops,\n+\t\t\t       struct expand_operand *ops);\n+extern bool maybe_expand_jump_insn (enum insn_code icode, unsigned int nops,\n+\t\t\t\t    struct expand_operand *ops);\n+extern void expand_insn (enum insn_code icode, unsigned int nops,\n+\t\t\t struct expand_operand *ops);\n+extern void expand_jump_insn (enum insn_code icode, unsigned int nops,\n+\t\t\t      struct expand_operand *ops);\n+\n+/* Enumerates the possible extraction_insn operations.  */\n+enum extraction_pattern { EP_insv, EP_extv, EP_extzv };\n+\n+extern bool get_best_reg_extraction_insn (extraction_insn *,\n+\t\t\t\t\t  enum extraction_pattern,\n+\t\t\t\t\t  unsigned HOST_WIDE_INT,\n+\t\t\t\t\t  machine_mode);\n+extern bool get_best_mem_extraction_insn (extraction_insn *,\n+\t\t\t\t\t  enum extraction_pattern,\n+\t\t\t\t\t  HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t\t  machine_mode);\n+\n extern bool lshift_cheap_p (bool);\n \n #endif /* GCC_OPTABS_H */"}, {"sha": "43d4681886c45c236af32b2a4ae22cc85aa77bda", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"predict.h\""}, {"sha": "33769013760c9935789e3b64ff4256f6cf9c8be7", "filename": "gcc/ree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -242,8 +242,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n #include \"target.h\"\n-#include \"optabs.h\"\n #include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"rtlhooks-def.h\"\n #include \"params.h\"\n #include \"tree-pass.h\""}, {"sha": "9ef2c89887a2341ab53596f06165a7807aeeeb11", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -96,6 +96,7 @@ a register with any other reload.  */\n #include \"tm_p.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"dominance.h\""}, {"sha": "dab8a7532e01333c53e0b440ba9c7edd05054f1f", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"addresses.h\""}, {"sha": "aae6643343941af8c1fb11d42db0b6b1c2aa7b51", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"regs.h\""}, {"sha": "1e4ba2369d5f0aceef406a5d121a7762a53554e9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n #include \"ggc.h\""}, {"sha": "1dc11ac40f64eb01258e13e18da082926ce55597", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"langhooks.h\"\n #include \"predict.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"target.h\"\n #include \"cfganal.h\""}, {"sha": "2e03c5cb3bd482923d8dee504e1d358a73452cac", "filename": "gcc/target-globals.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"reload.h\"\n #include \"expmed.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"cfgloop.h\""}, {"sha": "d1d3119a9f001ab9b0fcc0282ea72360e25271ad", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"regs.h\"\n #include \"reload.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"intl.h\"\n@@ -78,7 +79,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"stringpool.h\"\n #include \"tree-ssanames.h\"\n-#include \"insn-codes.h\"\n \n \n bool"}, {"sha": "eb37bfe6395eea58511c4038a21973c7cc8d4151", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -95,6 +95,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-reference.h\"\n #include \"ipa-prop.h\"\n #include \"gcse.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \n #if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)"}, {"sha": "d7e9b0733dc63afff6ab7da8daa359ddf28a9815", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -125,6 +125,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \n /* List of basic blocks in if-conversion-suitable order.  */"}, {"sha": "21f089ce024a5043268bde65f57c7e3f32d9544a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"expr.h\"\n #include \"cfgloop.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-dom.h\""}, {"sha": "2efa2dd9705d99309728755de0005242cfdb0bea", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n /* FIXME: Needed for optabs, but this should all be moved to a TBD interface\n    between the GIMPLE and RTL worlds.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n "}, {"sha": "12fa4e8ca10632e6b6bd519357dbf83582828de8", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -129,6 +129,7 @@ along with GCC; see the file COPYING3.  If not see\n /* FIXME: RTL headers have to be included here for optabs.  */\n #include \"rtl.h\"\t\t/* Because optabs.h wants enum rtx_code.  */\n #include \"expr.h\"\t\t/* Because optabs.h wants sepops.  */\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \n /* This structure represents one basic block that either computes a"}, {"sha": "c7c839d29ac5d411deec8a660331e4c95ea8898e", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"insn-config.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"tree-inline.h\""}, {"sha": "748249d75138f9115ef08737cda8eab2f4d512a4", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"builtins.h\"\n #include \"gimplify.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based"}, {"sha": "13a54106c494aaf1d802a577ed0050e6340adfc4", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -71,6 +71,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n /* Need to include expr.h and optabs.h for lshift_cheap_p.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \f\n /* Maximum number of case bit tests."}, {"sha": "0bc03561cb00f45793ee60d6921bc664f7b3af18", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n /* Need to include rtl.h, expr.h, etc. for optabs.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"builtins.h\"\n #include \"varasm.h\""}, {"sha": "a0c1363eae5cba8b607415c75fa5a6e1600be544", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Need to include rtl.h, expr.h, etc. for optabs.  */\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n \n "}, {"sha": "f3f02fadb1dc505491571a53ef63f68d34b4cf06", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"params.h\"\n #include \"diagnostic-core.h\""}, {"sha": "24ebba2381b794999cf9d94a154afff9bc8c2760", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"params.h\"\n #include \"tree-data-ref.h\""}, {"sha": "de62c6d0c37fa7f54566113cce7bf81048d256d1", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"recog.h\"\t\t/* FIXME: for insn_data */\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tree-vectorizer.h\"\n #include \"langhooks.h\""}, {"sha": "2a5f23cbe0f07c9dda70dc63938763024560c121", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"expr.h\"\n #include \"recog.h\"\t\t/* FIXME: for insn_data */\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"tree-vectorizer.h\""}, {"sha": "4e4ebe030570bf5cd48f6cc0ad6efbdde8336868", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chrec.h\"\n #include \"tree-ssa-threadupdate.h\"\n #include \"expr.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"tree-ssa-threadedge.h\"\n #include \"wide-int.h\""}, {"sha": "0e4ec8aefc02f9a7933532060d2cdf672fcb8190", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0710fe1b155d3aff0fda3fcff291c09a727ec82/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=b0710fe1b155d3aff0fda3fcff291c09a727ec82", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"recog.h\"\n+#include \"insn-codes.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"tree-ssa-alias.h\""}]}