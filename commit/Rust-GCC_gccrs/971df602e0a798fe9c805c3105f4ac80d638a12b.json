{"sha": "971df602e0a798fe9c805c3105f4ac80d638a12b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxZGY2MDJlMGE3OThmZTljODA1YzMxMDVmNGFjODBkNjM4YTEyYg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-10T01:33:17Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-25T21:27:18Z"}, "message": "Fix PR c++/66590: incorrect warning \"reaches end of non-void function\" for switch\n\nSo the problem here is there is code in the C++ front-end not to add a\nbreak statement (to the IR) if the previous block does not fall through.\nThe problem is the code which does the check to see if the block\nmay fallthrough does not check a CLEANUP_STMT; it assumes it is always\nfall through.  Anyways this adds the code for the case of a CLEANUP_STMT\nthat is only for !CLEANUP_EH_ONLY (the try/finally case).\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/66590\n\t* cp-objcp-common.c (cxx_block_may_fallthru): Handle\n\tCLEANUP_STMT for the case which will be try/finally.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/66590\n\t* g++.dg/warn/Wreturn-5.C: New test.", "tree": {"sha": "bc5980d86290425b79f79dc38698b5365b37aed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5980d86290425b79f79dc38698b5365b37aed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/971df602e0a798fe9c805c3105f4ac80d638a12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971df602e0a798fe9c805c3105f4ac80d638a12b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971df602e0a798fe9c805c3105f4ac80d638a12b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971df602e0a798fe9c805c3105f4ac80d638a12b/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3de423f1694d30f9cccc0c024fb6e19e2c6323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3de423f1694d30f9cccc0c024fb6e19e2c6323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3de423f1694d30f9cccc0c024fb6e19e2c6323"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "28f2d7bee71d9596e4c389b1d10b79b54e0766f9", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971df602e0a798fe9c805c3105f4ac80d638a12b/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971df602e0a798fe9c805c3105f4ac80d638a12b/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=971df602e0a798fe9c805c3105f4ac80d638a12b", "patch": "@@ -317,6 +317,15 @@ cxx_block_may_fallthru (const_tree stmt)\n \treturn true;\n       return block_may_fallthru (ELSE_CLAUSE (stmt));\n \n+    case CLEANUP_STMT:\n+      /* Just handle the try/finally cases.  */\n+      if (!CLEANUP_EH_ONLY (stmt))\n+\t{\n+\t  return (block_may_fallthru (CLEANUP_BODY (stmt))\n+\t\t  && block_may_fallthru (CLEANUP_EXPR (stmt)));\n+\t}\n+      return true;\n+\n     default:\n       return c_block_may_fallthru (stmt);\n     }"}, {"sha": "543e33e905d9016d062ae34f96b7045b6e83d95b", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971df602e0a798fe9c805c3105f4ac80d638a12b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971df602e0a798fe9c805c3105f4ac80d638a12b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-5.C?ref=971df602e0a798fe9c805c3105f4ac80d638a12b", "patch": "@@ -0,0 +1,15 @@\n+// PR C++/66590\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+struct A{ ~A();};\n+\n+int f(int x)\n+{\n+    A a;\n+    switch (x)\n+    {\n+        case 1: { A tmp; return 1; } break;\n+        default: return 0;\n+    }\n+}\t// { dg-bogus \"control reaches end of non-void function\" }"}]}