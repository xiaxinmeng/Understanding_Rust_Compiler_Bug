{"sha": "89e02f52d86c7120046236e654e49749c4b4ecb3", "node_id": "C_kwDOANBUbNoAKDg5ZTAyZjUyZDg2YzcxMjAwNDYyMzZlNjU0ZTQ5NzQ5YzRiNGVjYjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T13:49:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T14:08:19Z"}, "message": "Update path probe with optional filter for specific associated trait\n\nSometimes when we probe for associated items we need to limit it to\nitems which are directly associated with a trait. This adds an optional\nparameter to achieve this.", "tree": {"sha": "9cff9e70ebb5ddbf6ac8bc0dfba1d94d788f6553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cff9e70ebb5ddbf6ac8bc0dfba1d94d788f6553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e02f52d86c7120046236e654e49749c4b4ecb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e02f52d86c7120046236e654e49749c4b4ecb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e02f52d86c7120046236e654e49749c4b4ecb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e02f52d86c7120046236e654e49749c4b4ecb3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795d70d7e6e107b3cde213fb78484b19c9a3a671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795d70d7e6e107b3cde213fb78484b19c9a3a671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795d70d7e6e107b3cde213fb78484b19c9a3a671"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "0c618d32e0161d0e7496ac17b309e86d79722a9e", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e02f52d86c7120046236e654e49749c4b4ecb3/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e02f52d86c7120046236e654e49749c4b4ecb3/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=89e02f52d86c7120046236e654e49749c4b4ecb3", "patch": "@@ -119,9 +119,10 @@ class PathProbeType : public TypeCheckBase\n   static std::vector<PathProbeCandidate>\n   Probe (const TyTy::BaseType *receiver,\n \t const HIR::PathIdentSegment &segment_name, bool probe_impls,\n-\t bool probe_bounds, bool ignore_mandatory_trait_items)\n+\t bool probe_bounds, bool ignore_mandatory_trait_items,\n+\t DefId specific_trait_id = UNKNOWN_DEFID)\n   {\n-    PathProbeType probe (receiver, segment_name);\n+    PathProbeType probe (receiver, segment_name, specific_trait_id);\n     if (probe_impls)\n       {\n \tif (receiver->get_kind () == TyTy::TypeKind::ADT)\n@@ -145,6 +146,13 @@ class PathProbeType : public TypeCheckBase\n \tfor (auto &candidate : probed_bounds)\n \t  {\n \t    const TraitReference *trait_ref = candidate.first;\n+\t    if (specific_trait_id != UNKNOWN_DEFID)\n+\t      {\n+\t\tif (trait_ref->get_mappings ().get_defid ()\n+\t\t    != specific_trait_id)\n+\t\t  continue;\n+\t      }\n+\n \t    HIR::ImplBlock *impl = candidate.second;\n \t    probe.process_associated_trait_for_candidates (\n \t      trait_ref, impl, ignore_mandatory_trait_items);\n@@ -154,6 +162,13 @@ class PathProbeType : public TypeCheckBase\n     for (const TyTy::TypeBoundPredicate &predicate :\n \t receiver->get_specified_bounds ())\n       {\n+\tconst TraitReference *trait_ref = predicate.get ();\n+\tif (specific_trait_id != UNKNOWN_DEFID)\n+\t  {\n+\t    if (trait_ref->get_mappings ().get_defid () != specific_trait_id)\n+\t      continue;\n+\t  }\n+\n \tprobe.process_predicate_for_candidates (predicate,\n \t\t\t\t\t\tignore_mandatory_trait_items);\n       }\n@@ -221,6 +236,9 @@ class PathProbeType : public TypeCheckBase\n protected:\n   void process_enum_item_for_candiates (const TyTy::ADTType *adt)\n   {\n+    if (specific_trait_id != UNKNOWN_DEFID)\n+      return;\n+\n     TyTy::VariantDef *v;\n     if (!adt->lookup_variant (search.as_string (), &v))\n       return;\n@@ -385,9 +403,9 @@ class PathProbeType : public TypeCheckBase\n \n protected:\n   PathProbeType (const TyTy::BaseType *receiver,\n-\t\t const HIR::PathIdentSegment &query)\n+\t\t const HIR::PathIdentSegment &query, DefId specific_trait_id)\n     : TypeCheckBase (), receiver (receiver), search (query),\n-      current_impl (nullptr)\n+      current_impl (nullptr), specific_trait_id (specific_trait_id)\n   {}\n \n   std::vector<std::pair<const TraitReference *, HIR::ImplBlock *>>\n@@ -427,6 +445,7 @@ class PathProbeType : public TypeCheckBase\n   const HIR::PathIdentSegment &search;\n   std::vector<PathProbeCandidate> candidates;\n   HIR::ImplBlock *current_impl;\n+  DefId specific_trait_id;\n };\n \n class ReportMultipleCandidateError : private TypeCheckBase\n@@ -507,7 +526,8 @@ class PathProbeImplTrait : public PathProbeType\n   PathProbeImplTrait (const TyTy::BaseType *receiver,\n \t\t      const HIR::PathIdentSegment &query,\n \t\t      const TraitReference *trait_reference)\n-    : PathProbeType (receiver, query), trait_reference (trait_reference)\n+    : PathProbeType (receiver, query, UNKNOWN_DEFID),\n+      trait_reference (trait_reference)\n   {}\n \n   const TraitReference *trait_reference;"}]}