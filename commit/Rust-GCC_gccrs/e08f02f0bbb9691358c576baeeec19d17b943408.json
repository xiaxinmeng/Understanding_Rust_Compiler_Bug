{"sha": "e08f02f0bbb9691358c576baeeec19d17b943408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4ZjAyZjBiYmI5NjkxMzU4YzU3NmJhZWVlYzE5ZDE3Yjk0MzQwOA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2007-11-01T03:06:38Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2007-11-01T03:06:38Z"}, "message": "re PR tree-optimization/33961 (gcc 4.3 causes crash valid code to crash)\n\n        PR tree-optimization/33961\n        * tree-ssa-phiopt.c (struct name_to_bb.store): New member.\n        (name_to_bb_hash, name_to_bb_eq): Consider and check it.\n        (add_or_mark_expr): New argument 'store', using it to search\n        the hash table.\n        (nt_init_block): Adjust calls to add_or_mark_expr.\n\n        * gcc.dg/pr33961.c: New test.\n\nFrom-SVN: r129817", "tree": {"sha": "39d227c4402c32d82e1058c5b1cbbaca3c445604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d227c4402c32d82e1058c5b1cbbaca3c445604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08f02f0bbb9691358c576baeeec19d17b943408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08f02f0bbb9691358c576baeeec19d17b943408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08f02f0bbb9691358c576baeeec19d17b943408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08f02f0bbb9691358c576baeeec19d17b943408/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42e2a99953cf781c937dcbb441c83faf5cc78bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e2a99953cf781c937dcbb441c83faf5cc78bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e2a99953cf781c937dcbb441c83faf5cc78bb3"}], "stats": {"total": 89, "additions": 71, "deletions": 18}, "files": [{"sha": "6c7898647d2dfcb86836a60373b59300f2bf39fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e08f02f0bbb9691358c576baeeec19d17b943408", "patch": "@@ -1,3 +1,12 @@\n+2007-11-01  Michael Matz  <matz@suse.de\n+\n+\tPR tree-optimization/33961\n+\t* tree-ssa-phiopt.c (struct name_to_bb.store): New member.\n+\t(name_to_bb_hash, name_to_bb_eq): Consider and check it.\n+\t(add_or_mark_expr): New argument 'store', using it to search\n+\tthe hash table.\n+\t(nt_init_block): Adjust calls to add_or_mark_expr.\n+\n 2007-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/31507"}, {"sha": "8332c432bebdcc2b7fe47fbf3c6bb3e7c27bf388", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e08f02f0bbb9691358c576baeeec19d17b943408", "patch": "@@ -1,3 +1,8 @@\n+2007-11-01  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/33961\n+\t* gcc.dg/pr33961.c: New test.\n+\n 2007-10-31  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33494"}, {"sha": "43403ed30a9dd8f3dd37c06aa983a6dd67841def", "filename": "gcc/testsuite/gcc.dg/pr33961.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33961.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33961.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33961.c?ref=e08f02f0bbb9691358c576baeeec19d17b943408", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/33961 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-cselim\" } */\n+\n+void decode(char *d, int len);\n+\n+void decode(char *d, int len) {\n+        int i = len - 1;\n+        while(i >= 0) {\n+                d[i];\n+                if(d[i] == 0)\n+                        d[i]=' ';\n+\t\tif(d[i] == 1)\n+\t\t\td[i]='x';\n+                i--;\n+        }\n+}\n+\n+int main(int argc, char **argv)\n+{\n+        decode(\"this bug is really weird\", 24);\n+\treturn 0;\n+}"}, {"sha": "e51bac6232c7bb9b1646de0434372fffa6b31332", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08f02f0bbb9691358c576baeeec19d17b943408/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=e08f02f0bbb9691358c576baeeec19d17b943408", "patch": "@@ -1078,9 +1078,17 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n    simply is a walk over all instructions in dominator order.  When\n    we see an INDIRECT_REF we determine if we've already seen a same\n    ref anywhere up to the root of the dominator tree.  If we do the\n-   current access can't trap.  If we don't see any dominator access\n+   current access can't trap.  If we don't see any dominating access\n    the current access might trap, but might also make later accesses\n-   non-trapping, so we remember it.  */\n+   non-trapping, so we remember it.  We need to be careful with loads\n+   or stores, for instance a load might not trap, while a store would,\n+   so if we see a dominating read access this doesn't mean that a later\n+   write access would not trap.  Hence we also need to differentiate the\n+   type of access(es) seen.\n+\n+   ??? We currently are very conservative and assume that a load might\n+   trap even if a store doesn't (write-only memory).  This probably is\n+   overly conservative.  */\n \n /* A hash-table of SSA_NAMEs, and in which basic block an INDIRECT_REF\n    through it was seen, which would constitute a no-trap region for\n@@ -1089,6 +1097,7 @@ struct name_to_bb\n {\n   tree ssa_name;\n   basic_block bb;\n+  unsigned store : 1;\n };\n \n /* The hash table for remembering what we've seen.  */\n@@ -1102,41 +1111,47 @@ static hashval_t\n name_to_bb_hash (const void *p)\n {\n   tree n = ((struct name_to_bb *)p)->ssa_name;\n-  return htab_hash_pointer (n);\n+  return htab_hash_pointer (n) ^ ((struct name_to_bb *)p)->store;\n }\n \n /* The equality function of *P1 and *P2.  SSA_NAMEs are shared, so\n    it's enough to simply compare them for equality.  */\n static int\n name_to_bb_eq (const void *p1, const void *p2)\n {\n-  tree n1 = ((struct name_to_bb *)p1)->ssa_name;\n-  tree n2 = ((struct name_to_bb *)p2)->ssa_name;\n+  const struct name_to_bb *n1 = (const struct name_to_bb *)p1;\n+  const struct name_to_bb *n2 = (const struct name_to_bb *)p2;\n \n-  return n1 == n2;\n+  return n1->ssa_name == n2->ssa_name && n1->store == n2->store;\n }\n \n /* We see a the expression EXP in basic block BB.  If it's an interesting\n    expression (an INDIRECT_REF through an SSA_NAME) possibly insert the\n-   expression into the set NONTRAP or the hash table of seen expressions.  */\n+   expression into the set NONTRAP or the hash table of seen expressions.\n+   STORE is true if this expression is on the LHS, otherwise it's on\n+   the RHS.  */\n static void\n-add_or_mark_expr (basic_block bb, tree exp, struct pointer_set_t *nontrap)\n+add_or_mark_expr (basic_block bb, tree exp,\n+\t\t  struct pointer_set_t *nontrap, bool store)\n {\n   if (INDIRECT_REF_P (exp)\n       && TREE_CODE (TREE_OPERAND (exp, 0)) == SSA_NAME)\n     {\n       tree name = TREE_OPERAND (exp, 0);\n       struct name_to_bb map;\n       void **slot;\n+      struct name_to_bb *n2bb;\n       basic_block found_bb = 0;\n \n       /* Try to find the last seen INDIRECT_REF through the same\n          SSA_NAME, which can trap.  */\n       map.ssa_name = name;\n       map.bb = 0;\n+      map.store = store;\n       slot = htab_find_slot (seen_ssa_names, &map, INSERT);\n-      if (*slot)\n-        found_bb = ((struct name_to_bb *)*slot)->bb;\n+      n2bb = (struct name_to_bb *) *slot;\n+      if (n2bb)\n+        found_bb = n2bb->bb;\n \n       /* If we've found a trapping INDIRECT_REF, _and_ it dominates EXP\n          (it's in a basic block on the path from us to the dominator root)\n@@ -1148,16 +1163,17 @@ add_or_mark_expr (basic_block bb, tree exp, struct pointer_set_t *nontrap)\n       else\n         {\n \t  /* EXP might trap, so insert it into the hash table.  */\n-\t  if (*slot)\n+\t  if (n2bb)\n \t    {\n-              ((struct name_to_bb *)*slot)->bb = bb;\n+\t      n2bb->bb = bb;\n \t    }\n \t  else\n \t    {\n-\t      struct name_to_bb *nmap = XNEW (struct name_to_bb);\n-\t      nmap->ssa_name = name;\n-\t      nmap->bb = bb;\n-\t      *slot = nmap;\n+\t      n2bb = XNEW (struct name_to_bb);\n+\t      n2bb->ssa_name = name;\n+\t      n2bb->bb = bb;\n+\t      n2bb->store = store;\n+\t      *slot = n2bb;\n \t    }\n \t}\n     }\n@@ -1180,8 +1196,8 @@ nt_init_block (struct dom_walk_data *data ATTRIBUTE_UNUSED, basic_block bb)\n \t{\n \t  tree lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n \t  tree rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n-\t  add_or_mark_expr (bb, rhs, nontrap_set);\n-\t  add_or_mark_expr (bb, lhs, nontrap_set);\n+\t  add_or_mark_expr (bb, rhs, nontrap_set, false);\n+\t  add_or_mark_expr (bb, lhs, nontrap_set, true);\n \t}\n     }\n }"}]}