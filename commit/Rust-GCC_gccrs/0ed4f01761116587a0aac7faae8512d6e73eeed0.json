{"sha": "0ed4f01761116587a0aac7faae8512d6e73eeed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkNGYwMTc2MTExNjU4N2EwYWFjN2ZhYWU4NTEyZDZlNzNlZWVkMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-02-03T19:28:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-02-03T19:28:24Z"}, "message": "jit: option-logging\n\ngcc/jit/ChangeLog:\n\t* jit-logging.h (gcc::jit::log_user::log): Make const.\n\t* jit-recording.c (gcc::jit::recording::context::set_str_option):\n\tLog the new value of the option.\n\t(gcc::jit::recording::context::set_int_option): Likewise.\n\t(gcc::jit::recording::context::set_bool_option): Likewise.\n\t(gcc::jit::recording::context::compile): Log the value of all\n\toptions.\n\t(gcc::jit::recording::context::compile_to_file): Likewise.\n\t(gcc::jit::recording::context::log_all_options): New function.\n\t(gcc::jit::recording::context::log_str_option): New function.\n\t(gcc::jit::recording::context::log_int_option): New function.\n\t(gcc::jit::recording::context::log_bool_option): New function.\n\t* jit-recording.h (gcc::jit::recording::context::log_all_options):\n\tNew function.\n\t(gcc::jit::recording::context::log_str_option): New function.\n\t(gcc::jit::recording::context::log_int_option): New function.\n\t(gcc::jit::recording::context::log_bool_option): New function.\n\t* docs/internals/test-hello-world.exe.log.txt: Update for above\n\tchanges.\n\nFrom-SVN: r220375", "tree": {"sha": "6edc51684fdc5e75f650680a6dd0c8c156d03087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6edc51684fdc5e75f650680a6dd0c8c156d03087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed4f01761116587a0aac7faae8512d6e73eeed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed4f01761116587a0aac7faae8512d6e73eeed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed4f01761116587a0aac7faae8512d6e73eeed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed4f01761116587a0aac7faae8512d6e73eeed0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "457d0ace46de02afd84f2ed5bd333a72cb0f414f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457d0ace46de02afd84f2ed5bd333a72cb0f414f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457d0ace46de02afd84f2ed5bd333a72cb0f414f"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "f99b5024b95cb495bdd3015838fb03d73a535008", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -1,3 +1,26 @@\n+2015-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-logging.h (gcc::jit::log_user::log): Make const.\n+\t* jit-recording.c (gcc::jit::recording::context::set_str_option):\n+\tLog the new value of the option.\n+\t(gcc::jit::recording::context::set_int_option): Likewise.\n+\t(gcc::jit::recording::context::set_bool_option): Likewise.\n+\t(gcc::jit::recording::context::compile): Log the value of all\n+\toptions.\n+\t(gcc::jit::recording::context::compile_to_file): Likewise.\n+\t(gcc::jit::recording::context::log_all_options): New function.\n+\t(gcc::jit::recording::context::log_str_option): New function.\n+\t(gcc::jit::recording::context::log_int_option): New function.\n+\t(gcc::jit::recording::context::log_bool_option): New function.\n+\t* jit-recording.h (gcc::jit::recording::context::log_all_options):\n+\tNew function.\n+\t(gcc::jit::recording::context::log_str_option): New function.\n+\t(gcc::jit::recording::context::log_int_option): New function.\n+\t(gcc::jit::recording::context::log_bool_option): New function.\n+\t* docs/internals/test-hello-world.exe.log.txt: Update for above\n+\tchanges.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2015-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64810"}, {"sha": "4d05587ae33292121ac9b3f83c0cef92a5ff66fa", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -13756,18 +13756,25 @@ generated via this call:\n JIT: libgccjit (GCC) version 5.0.0 20150123 (experimental) (x86_64-unknown-linux-gnu)\n JIT:\tcompiled by GNU C version 4.8.3 20140911 (Red Hat 4.8.3-7), GMP version 5.1.2, MPFR version 3.1.2, MPC version 1.0.1\n JIT: entering: gcc_jit_context_set_str_option\n+JIT:  GCC_JIT_STR_OPTION_PROGNAME: \"./test-hello-world.c.exe\"\n JIT: exiting: gcc_jit_context_set_str_option\n JIT: entering: gcc_jit_context_set_int_option\n+JIT:  GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL: 3\n JIT: exiting: gcc_jit_context_set_int_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DEBUGINFO: true\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_SELFCHECK_GC: true\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_SUMMARY: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_get_type\n JIT: exiting: gcc_jit_context_get_type\n@@ -13802,6 +13809,16 @@ JIT: exiting: gcc_jit_context_dump_reproducer_to_file\n JIT: entering: gcc_jit_context_compile\n JIT:  in-memory compile of ctxt: 0x1283e20\n JIT:  entering: gcc::jit::result* gcc::jit::recording::context::compile()\n+JIT:   GCC_JIT_STR_OPTION_PROGNAME: \"./test-hello-world.c.exe\"\n+JIT:   GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL: 3\n+JIT:   GCC_JIT_BOOL_OPTION_DEBUGINFO: true\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_SUMMARY: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING: false\n+JIT:   GCC_JIT_BOOL_OPTION_SELFCHECK_GC: true\n+JIT:   GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES: false\n JIT:   entering: void gcc::jit::recording::context::validate()\n JIT:   exiting: void gcc::jit::recording::context::validate()\n JIT:   entering: gcc::jit::playback::context::context(gcc::jit::recording::context*)"}, {"sha": "5cb3aef8e781f50857a904530cb38b6bdb79e416", "filename": "gcc/jit/docs/internals/test-hello-world.exe.log.txt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -1,18 +1,25 @@\n JIT: libgccjit (GCC) version 5.0.0 20150123 (experimental) (x86_64-unknown-linux-gnu)\n JIT:\tcompiled by GNU C version 4.8.3 20140911 (Red Hat 4.8.3-7), GMP version 5.1.2, MPFR version 3.1.2, MPC version 1.0.1\n JIT: entering: gcc_jit_context_set_str_option\n+JIT:  GCC_JIT_STR_OPTION_PROGNAME: \"./test-hello-world.c.exe\"\n JIT: exiting: gcc_jit_context_set_str_option\n JIT: entering: gcc_jit_context_set_int_option\n+JIT:  GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL: 3\n JIT: exiting: gcc_jit_context_set_int_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DEBUGINFO: true\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_SELFCHECK_GC: true\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_set_bool_option\n+JIT:  GCC_JIT_BOOL_OPTION_DUMP_SUMMARY: false\n JIT: exiting: gcc_jit_context_set_bool_option\n JIT: entering: gcc_jit_context_get_type\n JIT: exiting: gcc_jit_context_get_type\n@@ -47,6 +54,16 @@ JIT: exiting: gcc_jit_context_dump_reproducer_to_file\n JIT: entering: gcc_jit_context_compile\n JIT:  in-memory compile of ctxt: 0x1283e20\n JIT:  entering: gcc::jit::result* gcc::jit::recording::context::compile()\n+JIT:   GCC_JIT_STR_OPTION_PROGNAME: \"./test-hello-world.c.exe\"\n+JIT:   GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL: 3\n+JIT:   GCC_JIT_BOOL_OPTION_DEBUGINFO: true\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_SUMMARY: false\n+JIT:   GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING: false\n+JIT:   GCC_JIT_BOOL_OPTION_SELFCHECK_GC: true\n+JIT:   GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES: false\n JIT:   entering: void gcc::jit::recording::context::validate()\n JIT:   exiting: void gcc::jit::recording::context::validate()\n JIT:   entering: gcc::jit::playback::context::context(gcc::jit::recording::context*)"}, {"sha": "9ece0df21af259d994f41822ee2b0197c64008fb", "filename": "gcc/jit/jit-logging.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-logging.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-logging.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-logging.h?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -127,7 +127,7 @@ class log_user\n   logger * get_logger () const { return m_logger; }\n   void set_logger (logger * logger);\n \n-  void log (const char *fmt, ...)\n+  void log (const char *fmt, ...) const\n     GNU_PRINTF(2, 3);\n \n   void enter_scope (const char *scope_name);\n@@ -141,7 +141,7 @@ class log_user\n    case where the underlying logger is NULL via a no-op.  */\n \n inline void\n-log_user::log (const char *fmt, ...)\n+log_user::log (const char *fmt, ...) const\n {\n   if (m_logger)\n     {"}, {"sha": "fb0b0a9dbfa45df5c031eaf56b5d3e1c4b3fd167", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -1093,6 +1093,7 @@ recording::context::set_str_option (enum gcc_jit_str_option opt,\n     }\n   free (m_str_options[opt]);\n   m_str_options[opt] = value ? xstrdup (value) : NULL;\n+  log_str_option (opt);\n }\n \n /* Set the given integer option for this context, or add an error if\n@@ -1112,6 +1113,7 @@ recording::context::set_int_option (enum gcc_jit_int_option opt,\n       return;\n     }\n   m_int_options[opt] = value;\n+  log_int_option (opt);\n }\n \n /* Set the given boolean option for this context, or add an error if\n@@ -1131,6 +1133,7 @@ recording::context::set_bool_option (enum gcc_jit_bool_option opt,\n       return;\n     }\n   m_bool_options[opt] = value ? true : false;\n+  log_bool_option (opt);\n }\n \n /* Add the given dumpname/out_ptr pair to this context's list of requested\n@@ -1164,6 +1167,8 @@ recording::context::compile ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n \n+  log_all_options ();\n+\n   validate ();\n \n   if (errors_occurred ())\n@@ -1192,6 +1197,8 @@ recording::context::compile_to_file (enum gcc_jit_output_kind output_kind,\n {\n   JIT_LOG_SCOPE (get_logger ());\n \n+  log_all_options ();\n+\n   validate ();\n \n   if (errors_occurred ())\n@@ -1378,6 +1385,72 @@ static const char * const\n   \"GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES\"\n };\n \n+\n+/* Write the current value of all options to the log file (if any).  */\n+\n+void\n+recording::context::log_all_options () const\n+{\n+  int opt_idx;\n+\n+  if (!get_logger ())\n+    return;\n+\n+  for (opt_idx = 0; opt_idx < GCC_JIT_NUM_STR_OPTIONS; opt_idx++)\n+    log_str_option ((enum gcc_jit_str_option)opt_idx);\n+\n+  for (opt_idx = 0; opt_idx < GCC_JIT_NUM_INT_OPTIONS; opt_idx++)\n+    log_int_option ((enum gcc_jit_int_option)opt_idx);\n+\n+  for (opt_idx = 0; opt_idx < GCC_JIT_NUM_BOOL_OPTIONS; opt_idx++)\n+    log_bool_option ((enum gcc_jit_bool_option)opt_idx);\n+}\n+\n+/* Write the current value of the given string option to the\n+   log file (if any).  */\n+\n+void\n+recording::context::log_str_option (enum gcc_jit_str_option opt) const\n+{\n+  gcc_assert (opt < GCC_JIT_NUM_STR_OPTIONS);\n+  if (get_logger ())\n+    {\n+      if (m_str_options[opt])\n+\tlog (\"%s: \\\"%s\\\"\",\n+\t     str_option_reproducer_strings[opt],\n+\t     m_str_options[opt]);\n+      else\n+\tlog (\"%s: NULL\",\n+\t     str_option_reproducer_strings[opt]);\n+    }\n+}\n+\n+/* Write the current value of the given int option to the\n+   log file (if any).  */\n+\n+void\n+recording::context::log_int_option (enum gcc_jit_int_option opt) const\n+{\n+  gcc_assert (opt < GCC_JIT_NUM_INT_OPTIONS);\n+  if (get_logger ())\n+    log (\"%s: %i\",\n+\t int_option_reproducer_strings[opt],\n+\t m_int_options[opt]);\n+}\n+\n+/* Write the current value of the given bool option to the\n+   log file (if any).  */\n+\n+void\n+recording::context::log_bool_option (enum gcc_jit_bool_option opt) const\n+{\n+  gcc_assert (opt < GCC_JIT_NUM_BOOL_OPTIONS);\n+  if (get_logger ())\n+    log (\"%s: %s\",\n+\t bool_option_reproducer_strings[opt],\n+\t m_bool_options[opt] ? \"true\" : \"false\");\n+}\n+\n /* Write C source code to PATH that attempts to replay the API\n    calls made to this context (and its parents), for use in\n    minimizing test cases for libgccjit."}, {"sha": "439e7ce62d9f729ec30ac2e742d2f237d95a4caa", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f01761116587a0aac7faae8512d6e73eeed0/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=0ed4f01761116587a0aac7faae8512d6e73eeed0", "patch": "@@ -256,6 +256,11 @@ class context : public log_user\n   get_all_requested_dumps (vec <recording::requested_dump> *out);\n \n private:\n+  void log_all_options () const;\n+  void log_str_option (enum gcc_jit_str_option opt) const;\n+  void log_int_option (enum gcc_jit_int_option opt) const;\n+  void log_bool_option (enum gcc_jit_bool_option opt) const;\n+\n   void validate ();\n \n private:"}]}