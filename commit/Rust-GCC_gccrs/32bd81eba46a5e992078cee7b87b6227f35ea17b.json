{"sha": "32bd81eba46a5e992078cee7b87b6227f35ea17b", "node_id": "C_kwDOANBUbNoAKDMyYmQ4MWViYTQ2YTVlOTkyMDc4Y2VlN2I4N2I2MjI3ZjM1ZWExN2I", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-15T11:52:35Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-30T11:45:57Z"}, "message": "Do not hide asm_out_file in ASM_OUTPUT_ASCII.\n\ngcc/ChangeLog:\n\n\t* defaults.h (ASM_OUTPUT_ASCII): Do not hide global variable\n\tasm_out_file and stream directly to MYFILE.", "tree": {"sha": "53377fc3966e3e7183af2f0fcaf9c3fadabb1653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53377fc3966e3e7183af2f0fcaf9c3fadabb1653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32bd81eba46a5e992078cee7b87b6227f35ea17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bd81eba46a5e992078cee7b87b6227f35ea17b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bd81eba46a5e992078cee7b87b6227f35ea17b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bd81eba46a5e992078cee7b87b6227f35ea17b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f032c22053f178c802d83a1dea49a0d47c7cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f032c22053f178c802d83a1dea49a0d47c7cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f032c22053f178c802d83a1dea49a0d47c7cc4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "04d9bb12329c82e9315ac77199040f01c9a1e2db", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bd81eba46a5e992078cee7b87b6227f35ea17b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bd81eba46a5e992078cee7b87b6227f35ea17b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=32bd81eba46a5e992078cee7b87b6227f35ea17b", "patch": "@@ -61,36 +61,35 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n   do {\t\t\t\t\t\t\t\t\t      \\\n-    FILE *_hide_asm_out_file = (MYFILE);\t\t\t\t      \\\n+    FILE *_my_file = (MYFILE);\t\t\t\t      \\\n     const unsigned char *_hide_p = (const unsigned char *) (MYSTRING);\t      \\\n     int _hide_thissize = (MYLENGTH);\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n-      FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n       const unsigned char *p = _hide_p;\t\t\t\t\t      \\\n       int thissize = _hide_thissize;\t\t\t\t\t      \\\n       int i;\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file, \"\\t.ascii \\\"\");\t\t\t\t      \\\n+      fprintf (_my_file, \"\\t.ascii \\\"\");\t\t\t\t      \\\n \t\t\t\t\t\t\t\t\t      \\\n       for (i = 0; i < thissize; i++)\t\t\t\t\t      \\\n \t{\t\t\t\t\t\t\t\t      \\\n \t  int c = p[i];\t\t\t   \t\t\t\t      \\\n \t  if (c == '\\\"' || c == '\\\\')\t\t\t\t\t      \\\n-\t    putc ('\\\\', asm_out_file);\t\t\t\t\t      \\\n+\t    putc ('\\\\', _my_file);\t\t\t\t\t      \\\n \t  if (ISPRINT (c))\t\t\t\t\t\t      \\\n-\t    putc (c, asm_out_file);\t\t\t\t\t      \\\n+\t    putc (c, _my_file);\t\t\t\t\t\t      \\\n \t  else\t\t\t\t\t\t\t\t      \\\n \t    {\t\t\t\t\t\t\t\t      \\\n-\t      fprintf (asm_out_file, \"\\\\%o\", c);\t\t\t      \\\n+\t      fprintf (_my_file, \"\\\\%o\", c);\t\t\t\t      \\\n \t      /* After an octal-escape, if a digit follows,\t\t      \\\n \t\t terminate one string constant and start another.\t      \\\n \t\t The VAX assembler fails to stop reading the escape\t      \\\n \t\t after three digits, so this is the only way we\t\t      \\\n \t\t can get it to parse the data properly.  */\t\t      \\\n \t      if (i < thissize - 1 && ISDIGIT (p[i + 1]))\t\t      \\\n-\t\tfprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");\t\t      \\\n+\t\tfprintf (_my_file, \"\\\"\\n\\t.ascii \\\"\");\t\t\t      \\\n \t  }\t\t\t\t\t\t\t\t      \\\n \t}\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file, \"\\\"\\n\");\t\t\t\t\t      \\\n+      fprintf (_my_file, \"\\\"\\n\");\t\t\t\t\t      \\\n     }\t\t\t\t\t\t\t\t\t      \\\n   }\t\t\t\t\t\t\t\t\t      \\\n   while (0)"}]}