{"sha": "bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzYWI2MmE4YjRhMTA4ZjAxZWEyZWRkZmUzMWU5ZjczM2JkOWNiNg==", "commit": {"author": {"name": "Joe Ramsay", "email": "joe.ramsay@arm.com", "date": "2020-06-09T11:23:56Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-06-09T11:23:56Z"}, "message": "AArch64+SVE: Add support for unpacked unary ops and BIC\n\nMD patterns extended for unary ops ABS, CLS, CLZ, CNT, NEG and NOT\nto support unpacked vectors. Also extended patterns for BIC to\nsupport unpacked vectors where input elements are of the same width.\n\ngcc/ChangeLog:\n\n2020-06-09  Joe Ramsay  <joe.ramsay@arm.com>\n\n\t* config/aarch64/aarch64-sve.md (<optab><mode>2): Add support for\n\tunpacked vectors.\n\t(@aarch64_pred_<optab><mode>): Add support for unpacked vectors.\n\t(@aarch64_bic<mode>): Enable unpacked BIC.\n\t(*bic<mode>3): Enable unpacked BIC.\n\ngcc/testsuite/ChangeLog:\n\n2020-06-09  Joe Ramsay  <joe.ramsay@arm.com>\n\n\t* gcc.target/aarch64/sve/logical_unpacked_abs.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_bic_1.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_bic_2.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_bic_3.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_bic_4.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_neg.c: New test.\n\t* gcc.target/aarch64/sve/logical_unpacked_not.c: New test.", "tree": {"sha": "21c5dc2c6ab32dd3822172e36baf14dbe518a79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c5dc2c6ab32dd3822172e36baf14dbe518a79b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/comments", "author": {"login": "joeramsay", "id": 78039542, "node_id": "MDQ6VXNlcjc4MDM5NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/78039542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeramsay", "html_url": "https://github.com/joeramsay", "followers_url": "https://api.github.com/users/joeramsay/followers", "following_url": "https://api.github.com/users/joeramsay/following{/other_user}", "gists_url": "https://api.github.com/users/joeramsay/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeramsay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeramsay/subscriptions", "organizations_url": "https://api.github.com/users/joeramsay/orgs", "repos_url": "https://api.github.com/users/joeramsay/repos", "events_url": "https://api.github.com/users/joeramsay/events{/privacy}", "received_events_url": "https://api.github.com/users/joeramsay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452283bd060eb9bae41199b4b5e7266155d40e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452283bd060eb9bae41199b4b5e7266155d40e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452283bd060eb9bae41199b4b5e7266155d40e12"}], "stats": {"total": 146, "additions": 127, "deletions": 19}, "files": [{"sha": "9d06bf719b5bd2d3405db89d49f9b4a4b893cee8", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -2822,11 +2822,11 @@\n \n ;; Unpredicated integer unary arithmetic.\n (define_expand \"<optab><mode>2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_dup 2)\n-\t   (SVE_INT_UNARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 1 \"register_operand\"))]\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 1 \"register_operand\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n@@ -2836,11 +2836,11 @@\n \n ;; Integer unary arithmetic predicated with a PTRUE.\n (define_insn \"@aarch64_pred_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (SVE_INT_UNARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\"))]\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n@@ -4234,13 +4234,13 @@\n \n ;; Unpredicated BIC.\n (define_expand \"@aarch64_bic<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(and:SVE_FULL_I\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(and:SVE_I\n+\t  (unspec:SVE_I\n \t    [(match_dup 3)\n-\t     (not:SVE_FULL_I (match_operand:SVE_FULL_I 2 \"register_operand\"))]\n+\t     (not:SVE_I (match_operand:SVE_I 2 \"register_operand\"))]\n \t    UNSPEC_PRED_X)\n-\t  (match_operand:SVE_FULL_I 1 \"register_operand\")))]\n+\t  (match_operand:SVE_I 1 \"register_operand\")))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = CONSTM1_RTX (<VPRED>mode);\n@@ -4249,14 +4249,14 @@\n \n ;; Predicated BIC.\n (define_insn_and_rewrite \"*bic<mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n-\t(and:SVE_FULL_I\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(and:SVE_I\n+\t  (unspec:SVE_I\n \t    [(match_operand 3)\n-\t     (not:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\"))]\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w\"))]\n \t    UNSPEC_PRED_X)\n-\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SVE\"\n   \"bic\\t%0.d, %1.d, %2.d\"\n   \"&& !CONSTANT_P (operands[3])\""}, {"sha": "814e44cfbb99bca732bbb5d6243d396a90e1ed46", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_abs.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_abs.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void\n+f (uint32_t *restrict dst, int8_t *restrict src)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] = (int8_t) abs(src[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-9]+/m, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 1 } } */"}, {"sha": "2460305630d1b0987290c9080de0f5451a46aea5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_bic_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_1.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint64_t *restrict dst, uint32_t *restrict src1, uint32_t *restrict src2)\n+{\n+  for (int i = 0; i < 3; ++i)\n+    dst[i] = (uint32_t) (src1[i] & ~src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "61066a940f5ff0ceb2ea79a7ab3fd70631caf360", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_bic_2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_2.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint64_t *restrict dst, uint8_t *restrict src1, uint8_t *restrict src2)\n+{\n+  for (int i = 0; i < 3; ++i)\n+    dst[i] = (uint8_t) (src1[i] & ~src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "2c9586a36f650d0fa7a83927b3e4b8eb004ef4b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_bic_3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_3.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint32_t *restrict dst, uint16_t *restrict src1, uint16_t *restrict src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] = (uint16_t) (src1[i] & ~src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 1 } } */"}, {"sha": "5fca214435516a8e0cf1958297467680549afaf1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_bic_4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_bic_4.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint16_t *restrict dst, uint8_t *restrict src1, uint8_t *restrict src2)\n+{\n+  for (int i = 0; i < 15; ++i)\n+    dst[i] = (uint8_t) (src1[i] & ~src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 1 } } */"}, {"sha": "1f8b3d349f3ffde90a9db37f8a0fbca0213fe6a9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_neg.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_neg.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void\n+f (uint32_t *restrict dst, int8_t *restrict src)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] = (int8_t) -src[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-9]+/m, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 1 } } */"}, {"sha": "a9d36b842c5007cb6c2f1fc4c5b553bd0ca44b47", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_unpacked_not.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_not.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_not.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_unpacked_not.c?ref=bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void\n+f (uint32_t *restrict dst, int8_t *restrict src)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] = (int8_t) ~src[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-9]+/m, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 1 } } */"}]}