{"sha": "bb5ecf29592e396bce6f8b793430d094d65c5309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1ZWNmMjk1OTJlMzk2YmNlNmY4Yjc5MzQzMGQwOTRkNjVjNTMwOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-15T03:22:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-15T03:22:19Z"}, "message": "re PR c++/17324 (Error: symbol `bRKNS0_IT_SD_EE' is already defined)\n\n\tPR c++/17324\n\t* mangle.c (partially_mangled_name): New variable.\n\t(partially_mangled_name_len): Likewise.\n\t(save_partially_mangled_name): New function.\n\t(restore_partially_mangled_name): Likewise.\n\t(write_encoding): Save and restore partially mangled names around\n\tcalls to get_mostly_instantiated_function_type.\n\t(write_unqualified_name): Likewise.\n\n\tPR c++/17324\n\t* g++.dg/template/mangle1.C: New test.\n\nFrom-SVN: r87530", "tree": {"sha": "6e613c96b5981e4ad2d16f09f4f2e2c54a8bfdd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e613c96b5981e4ad2d16f09f4f2e2c54a8bfdd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb5ecf29592e396bce6f8b793430d094d65c5309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5ecf29592e396bce6f8b793430d094d65c5309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5ecf29592e396bce6f8b793430d094d65c5309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5ecf29592e396bce6f8b793430d094d65c5309/comments", "author": null, "committer": null, "parents": [{"sha": "391f9afbd2d6ac8dd691c6d79a8817c63a637ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391f9afbd2d6ac8dd691c6d79a8817c63a637ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391f9afbd2d6ac8dd691c6d79a8817c63a637ca8"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "e623148e275ef8922926becd55db77bd9e88ced6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb5ecf29592e396bce6f8b793430d094d65c5309", "patch": "@@ -1,3 +1,14 @@\n+2004-09-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17324\n+\t* mangle.c (partially_mangled_name): New variable.\n+\t(partially_mangled_name_len): Likewise.\n+\t(save_partially_mangled_name): New function.\n+\t(restore_partially_mangled_name): Likewise.\n+\t(write_encoding): Save and restore partially mangled names around\n+\tcalls to get_mostly_instantiated_function_type.\n+\t(write_unqualified_name): Likewise.\n+\n 2004-09-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (unify): Replace gcc_unreachable with gcc_assert."}, {"sha": "41c381d45c1d99fa3bc76b531dad00592fe0a10a", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=bb5ecf29592e396bce6f8b793430d094d65c5309", "patch": "@@ -115,10 +115,17 @@ static struct obstack *mangle_obstack;\n    be IDENTIFIER_NODEs.  */\n static struct obstack name_obstack;\n \n-  /* The first object on the name_obstack; we use this to free memory\n-     allocated on the name_obstack.  */\n+/* The first object on the name_obstack; we use this to free memory\n+   allocated on the name_obstack.  */\n static void *name_base;\n \n+/* An incomplete mangled name.  There will be no NUL terminator.  If\n+   there is no incomplete mangled name, this variable is NULL.  */\n+static char *partially_mangled_name;\n+\n+/* The number of characters in the PARTIALLY_MANGLED_NAME.  */\n+static size_t partially_mangled_name_len;\n+\n /* Indices into subst_identifiers.  These are identifiers used in\n    special substitution rules.  */\n typedef enum\n@@ -254,6 +261,42 @@ static void write_java_integer_type_codes (const tree);\n #define write_unsigned_number(NUMBER) \\\n   write_number ((NUMBER), /*unsigned_p=*/1, 10)\n \n+/* Save the current (incomplete) mangled name and release the obstack\n+   storage holding it.  This function should be used during mangling\n+   when making a call that could result in a call to get_identifier,\n+   as such a call will clobber the same obstack being used for\n+   mangling.  This function may not be called twice without an\n+   intervening call to restore_partially_mangled_name.  */\n+\n+static void\n+save_partially_mangled_name (void)\n+{\n+  if (mangle_obstack == &ident_hash->stack)\n+    {\n+      gcc_assert (!partially_mangled_name);\n+      partially_mangled_name_len = obstack_object_size (mangle_obstack);\n+      partially_mangled_name = xmalloc (partially_mangled_name_len);\n+      memcpy (partially_mangled_name, obstack_base (mangle_obstack),\n+\t      partially_mangled_name_len);\n+      obstack_free (mangle_obstack, obstack_finish (mangle_obstack));\n+    }\n+}\n+\n+/* Restore the incomplete mangled name saved with\n+   save_partially_mangled_name.  */\n+\n+static void\n+restore_partially_mangled_name (void)\n+{\n+  if (partially_mangled_name)\n+    {\n+      obstack_grow (mangle_obstack, partially_mangled_name,\n+\t\t    partially_mangled_name_len);\n+      free (partially_mangled_name);\n+      partially_mangled_name = NULL;\n+    }\n+}\n+\n /* If DECL is a template instance, return nonzero and, if\n    TEMPLATE_INFO is non-NULL, set *TEMPLATE_INFO to its template info.\n    Otherwise return zero.  */\n@@ -702,7 +745,9 @@ write_encoding (const tree decl)\n \n       if (decl_is_template_id (decl, NULL))\n \t{\n+\t  save_partially_mangled_name ();\n \t  fn_type = get_mostly_instantiated_function_type (decl);\n+\t  restore_partially_mangled_name ();\n \t  /* FN_TYPE will not have parameter types for in-charge or\n \t     VTT parameters.  Therefore, we pass NULL_TREE to\n \t     write_bare_function_type -- otherwise, it will get\n@@ -1063,7 +1108,10 @@ write_unqualified_name (const tree decl)\n       tree type;\n       if (decl_is_template_id (decl, NULL))\n \t{\n-\t  tree fn_type = get_mostly_instantiated_function_type (decl);\n+\t  tree fn_type;\n+\t  save_partially_mangled_name ();\n+\t  fn_type = get_mostly_instantiated_function_type (decl);\n+\t  restore_partially_mangled_name ();\n \t  type = TREE_TYPE (fn_type);\n \t}\n       else"}, {"sha": "3f28435ffff58426e6ce5d276d1c86d2ae9c5923", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb5ecf29592e396bce6f8b793430d094d65c5309", "patch": "@@ -1,3 +1,8 @@\n+2004-09-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17324\n+\t* g++.dg/template/mangle1.C: New test.\n+\n 2004-09-14  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/17252"}, {"sha": "96d064723416e296d52f08be1f5183343f874fbf", "filename": "gcc/testsuite/g++.dg/template/mangle1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5ecf29592e396bce6f8b793430d094d65c5309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmangle1.C?ref=bb5ecf29592e396bce6f8b793430d094d65c5309", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/17324\n+// { dg-do assemble }\n+\n+template<int, typename T> struct A\n+{\n+  template<int I> void foo(const A<I,T>&) {}\n+};\n+\n+template<typename> struct B\n+{\n+  template<int J> void bar(const A<J,B>&);\n+  void baz() { A<0,B>().foo(A<0,B>()); }\n+};\n+\n+template struct B<void>;\n+template struct B<int>;"}]}