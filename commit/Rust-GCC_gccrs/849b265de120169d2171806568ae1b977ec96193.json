{"sha": "849b265de120169d2171806568ae1b977ec96193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5YjI2NWRlMTIwMTY5ZDIxNzE4MDY1NjhhZTFiOTc3ZWM5NjE5Mw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-29T08:59:09Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-29T08:59:09Z"}, "message": "avr-related reload fix from Senthil Kumar Selvaraj\n\n\tPR target/60040\n\t* reload1.c (reload): Call finish_spills before\n\trestarting reload loop. Skip select_reload_regs\n\tif update_eliminables_and_spill returns true.\n\ntestsuite/\n\tPR target/60040\n\t* gcc.target/avr/pr60040-1.c: New.\n\t* gcc.target/avr/pr60040-2.c: New.\n\nFrom-SVN: r235625", "tree": {"sha": "60f090609b425a9db96f82080a5d8874885d6a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f090609b425a9db96f82080a5d8874885d6a81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849b265de120169d2171806568ae1b977ec96193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849b265de120169d2171806568ae1b977ec96193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849b265de120169d2171806568ae1b977ec96193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849b265de120169d2171806568ae1b977ec96193/comments", "author": null, "committer": null, "parents": [{"sha": "1390536b5144f4bfc41d17eb4644276090bbd546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1390536b5144f4bfc41d17eb4644276090bbd546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1390536b5144f4bfc41d17eb4644276090bbd546"}], "stats": {"total": 169, "additions": 164, "deletions": 5}, "files": [{"sha": "0ed967ce77a2eb56db3dec994631ece0b8c27a77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849b265de120169d2171806568ae1b977ec96193/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849b265de120169d2171806568ae1b977ec96193/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=849b265de120169d2171806568ae1b977ec96193", "patch": "@@ -1,3 +1,10 @@\n+2016-04-29  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/60040\n+\t* reload1.c (reload): Call finish_spills before\n+\trestarting reload loop. Skip select_reload_regs\n+\tif update_eliminables_and_spill returns true.\n+\n 2016-04-29  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.h (UNSIGNED_INT12, UNSIGNED_INT16): Define."}, {"sha": "d6fcece1b7338614032f47e5b4ae50e892d0c9ca", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849b265de120169d2171806568ae1b977ec96193/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849b265de120169d2171806568ae1b977ec96193/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=849b265de120169d2171806568ae1b977ec96193", "patch": "@@ -981,7 +981,8 @@ reload (rtx_insn *first, int global)\n       /* If we allocated another stack slot, redo elimination bookkeeping.  */\n       if (something_was_spilled || starting_frame_size != get_frame_size ())\n \t{\n-\t  update_eliminables_and_spill ();\n+\t  if (update_eliminables_and_spill ())\n+\t    finish_spills (global);\n \t  continue;\n \t}\n \n@@ -1021,10 +1022,12 @@ reload (rtx_insn *first, int global)\n \t  did_spill = 1;\n \t  something_changed = 1;\n \t}\n-\n-      select_reload_regs ();\n-      if (failure)\n-\tgoto failed;\n+      else\n+\t{\n+\t  select_reload_regs ();\n+\t  if (failure)\n+\t    goto failed;\n+\t}\n \n       if (insns_need_reload != 0 || did_spill)\n \tsomething_changed |= finish_spills (global);"}, {"sha": "e6850db9ef665ed70764fe2c967770e3c8a0c728", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=849b265de120169d2171806568ae1b977ec96193", "patch": "@@ -1,3 +1,11 @@\n+2016-04-29  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\t    Matthijs Kooijman  <matthijs@stdin.nl>\n+\t    Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/60040\n+\t* gcc.target/avr/pr60040-1.c: New.\n+\t* gcc.target/avr/pr60040-2.c: New.\n+\n 2016-04-29  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/pr18589-10.c: Adjust."}, {"sha": "4fe296b37df5ddd4950878d51c8fa75fc20ba6c5", "filename": "gcc/testsuite/gcc.target/avr/pr60040-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-1.c?ref=849b265de120169d2171806568ae1b977ec96193", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+float dhistory[10];\n+float test;\n+\n+float getSlope(float history[]) {\n+  float sumx = 0;\n+  float sumy = 0;\n+  float sumxy = 0;\n+  float sumxsq = 0;\n+  float rate = 0;\n+  int n = 10;\n+\n+  int i;\n+  for (i=1; i< 11; i++) {\n+    sumx = sumx + i;\n+    sumy = sumy + history[i-1];\n+    sumy = sumy + history[i-1];\n+    sumxsq = sumxsq + (i*i);\n+  }\n+\n+  rate = sumy+sumx+sumxsq;\n+  return rate;\n+}\n+\n+void loop() {\n+  test = getSlope(dhistory);\n+}"}, {"sha": "c40d49f9631afcb6334589a8f0948882754f3637", "filename": "gcc/testsuite/gcc.target/avr/pr60040-2.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849b265de120169d2171806568ae1b977ec96193/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr60040-2.c?ref=849b265de120169d2171806568ae1b977ec96193", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned char __uint8_t;\n+typedef short unsigned int __uint16_t;\n+typedef long unsigned int __uint32_t;\n+typedef __uint8_t uint8_t ;\n+typedef __uint16_t uint16_t ;\n+typedef __uint32_t uint32_t ;\n+typedef __builtin_va_list __gnuc_va_list;\n+typedef __gnuc_va_list va_list;\n+typedef enum rtems_blkdev_request_op {\n+  RTEMS_BLKDEV_REQ_READ,\n+} rtems_fdisk_segment_desc;\n+typedef struct rtems_fdisk_driver_handlers\n+{\n+  int (*blank) (const rtems_fdisk_segment_desc* sd,\n+                uint32_t device,\n+                uint32_t segment,\n+                uint32_t offset,\n+                uint32_t size);\n+} rtems_fdisk_driver_handlers;\n+typedef struct rtems_fdisk_page_desc\n+{\n+  uint16_t flags;\n+  uint32_t block;\n+} rtems_fdisk_page_desc;\n+typedef struct rtems_fdisk_segment_ctl\n+{\n+  rtems_fdisk_page_desc* page_descriptors;\n+  uint32_t pages_active;\n+} rtems_fdisk_segment_ctl;\n+typedef struct rtems_fdisk_segment_ctl_queue\n+{\n+} rtems_fdisk_segment_ctl_queue;\n+typedef struct rtems_fdisk_device_ctl\n+{\n+  uint32_t flags;\n+  uint8_t* copy_buffer;\n+} rtems_flashdisk;\n+\n+extern void rtems_fdisk_error (const char *, ...);\n+extern int rtems_fdisk_seg_write(const rtems_flashdisk*,\n+                                 rtems_fdisk_segment_ctl*,\n+                                 uint32_t,\n+                                 const rtems_fdisk_page_desc* page_desc,\n+\t\t\t\t uint32_t);\n+\n+void rtems_fdisk_printf (const rtems_flashdisk* fd, const char *format, ...)\n+{\n+  {\n+    va_list args;\n+    __builtin_va_start(args,format);\n+  }\n+}\n+static int\n+rtems_fdisk_seg_blank_check (const rtems_flashdisk* fd,\n+                             rtems_fdisk_segment_ctl* sc,\n+                             uint32_t offset,\n+                             uint32_t size)\n+{\n+  uint32_t device;\n+  uint32_t segment;\n+  const rtems_fdisk_segment_desc* sd;\n+  const rtems_fdisk_driver_handlers* ops;\n+  return ops->blank (sd, device, segment, offset, size);\n+}\n+static int\n+rtems_fdisk_seg_write_page_desc (const rtems_flashdisk* fd,\n+                                 rtems_fdisk_segment_ctl* sc,\n+                                 uint32_t page,\n+                                 const rtems_fdisk_page_desc* page_desc)\n+{\n+  uint32_t offset = page * sizeof (rtems_fdisk_page_desc);\n+  if ((fd->flags & (1 << 3)))\n+  {\n+    int ret = rtems_fdisk_seg_blank_check (fd, sc,\n+                                           offset,\n+                                           sizeof (rtems_fdisk_page_desc));\n+  }\n+  return rtems_fdisk_seg_write (fd, sc, offset,\n+                                page_desc, sizeof (rtems_fdisk_page_desc));\n+}\n+void\n+rtems_fdisk_recycle_segment (rtems_flashdisk* fd,\n+                                    rtems_fdisk_segment_ctl* ssc,\n+                                    rtems_fdisk_segment_ctl* dsc,\n+                                    uint32_t *pages)\n+{\n+  int ret;\n+  uint32_t spage;\n+  uint32_t used = 0;\n+  uint32_t active = 0;\n+  {\n+    rtems_fdisk_page_desc* spd = &ssc->page_descriptors[spage];\n+    {\n+      rtems_fdisk_page_desc* dpd;\n+      uint32_t dpage;\n+      dpd = &dsc->page_descriptors[dpage];\n+      *dpd = *spd;\n+      ret = rtems_fdisk_seg_write_page_desc (fd,\n+                                             dsc,\n+                                             dpage, dpd);\n+    }\n+  }\n+  rtems_fdisk_printf (fd, \"ssc end: %d-%d: p=%ld, a=%ld, u=%ld\",\n+                      pages, active, used);\n+  {\n+    rtems_fdisk_error (\"compacting: ssc pages not 0: %d\",\n+                       ssc->pages_active);\n+  }\n+}"}]}