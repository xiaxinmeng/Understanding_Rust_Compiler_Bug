{"sha": "655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1ZGM2ZWViZmQzOWYwOGM3ODg3YTU1YTdjMDg5NWFjNWU0NGI2ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-06-22T20:54:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-22T20:54:48Z"}, "message": "pt.c (tsubst_decl, [...]): Clear DECL_SAVED_TREE.\n\n        * pt.c (tsubst_decl, case FUNCTION_DECL): Clear DECL_SAVED_TREE.\n        (tsubst_friend_function): Copy it here.\n\n        * decl.c (grok_op_properties): Fix typo.\n\n        * decl2.c (delete_sanity): Clarify warning, avoid failure on\n        deleting void*.\n\n        * pt.c (check_explicit_specialization): Clarify error.\n\n        * decl.c (pushdecl): Also pull out one of the FUNCTION_DECLs from\n        an old OVERLOAD when we're declaring a non-function.\n        (pushdecl, destroy_local_var): Check for error_mark_node.\n        (warn_extern_redeclared_static): Also bail early if\n        we're a CONST_DECL.\n        (push_overloaded_decl): Ignore an old error_mark_node.\n\nFrom-SVN: r34652", "tree": {"sha": "a9d13ba02c4103d59a41ecf0eaa05e6157457e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9d13ba02c4103d59a41ecf0eaa05e6157457e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be05b708246e30cb94ee4df510b07bb0a70e9469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be05b708246e30cb94ee4df510b07bb0a70e9469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be05b708246e30cb94ee4df510b07bb0a70e9469"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "1f655b34bb2f1827ed1ae7537519a82f00f4b391", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "patch": "@@ -1,3 +1,22 @@\n+2000-06-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (tsubst_decl, case FUNCTION_DECL): Clear DECL_SAVED_TREE.\n+\t(tsubst_friend_function): Copy it here.\n+\n+\t* decl.c (grok_op_properties): Fix typo.\n+\n+\t* decl2.c (delete_sanity): Clarify warning, avoid failure on\n+\tdeleting void*.\n+\n+\t* pt.c (check_explicit_specialization): Clarify error.\n+\n+\t* decl.c (pushdecl): Also pull out one of the FUNCTION_DECLs from\n+\tan old OVERLOAD when we're declaring a non-function.\n+\t(pushdecl, destroy_local_var): Check for error_mark_node.\n+\t(warn_extern_redeclared_static): Also bail early if \n+\twe're a CONST_DECL.\n+\t(push_overloaded_decl): Ignore an old error_mark_node.\n+\n 2000-06-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (build_x_va_arg): Check if in a template decl."}, {"sha": "5451306cc085ae0ee929d244280071095a1b7788", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "patch": "@@ -3092,7 +3092,8 @@ warn_extern_redeclared_static (newdecl, olddecl)\n   tree name;\n \n   if (TREE_CODE (newdecl) == TYPE_DECL\n-      || TREE_CODE (newdecl) == TEMPLATE_DECL)\n+      || TREE_CODE (newdecl) == TEMPLATE_DECL\n+      || TREE_CODE (newdecl) == CONST_DECL)\n     return;\n \n   /* Don't get confused by static member functions; that's a different\n@@ -3863,14 +3864,20 @@ pushdecl (x)\n \t actually the same as the function we are declaring.  (If\n \t there is one, we have to merge our declaration with the\n \t previous declaration.)  */\n-      if (t && TREE_CODE (t) == OVERLOAD && TREE_CODE (x) == FUNCTION_DECL)\n+      if (t && TREE_CODE (t) == OVERLOAD)\n \t{\n \t  tree match;\n \n-\t  for (match = t; match; match = OVL_NEXT (match))\n-\t    if (DECL_ASSEMBLER_NAME (OVL_CURRENT (t))\n-\t\t== DECL_ASSEMBLER_NAME (x))\n-\t      break;\n+\t  if (TREE_CODE (x) == FUNCTION_DECL)\n+\t    for (match = t; match; match = OVL_NEXT (match))\n+\t      {\n+\t\tif (DECL_ASSEMBLER_NAME (OVL_CURRENT (t))\n+\t\t    == DECL_ASSEMBLER_NAME (x))\n+\t\t  break;\n+\t      }\n+\t  else\n+\t    /* Just choose one.  */\n+\t    match = t;\n \n \t  if (match)\n \t    t = OVL_CURRENT (match);\n@@ -3972,7 +3979,7 @@ pushdecl (x)\n       if (TREE_CODE (x) == TYPE_DECL)\n \t{\n \t  tree type = TREE_TYPE (x);\n-          if (DECL_SOURCE_LINE (x) == 0)\n+\t  if (DECL_SOURCE_LINE (x) == 0)\n             {\n \t      if (TYPE_NAME (type) == 0)\n \t        TYPE_NAME (type) = x;\n@@ -4010,6 +4017,7 @@ pushdecl (x)\n \t  tree decl;\n \n \t  if (IDENTIFIER_NAMESPACE_VALUE (name) != NULL_TREE\n+\t      && IDENTIFIER_NAMESPACE_VALUE (name) != error_mark_node\n \t      && (DECL_EXTERNAL (IDENTIFIER_NAMESPACE_VALUE (name))\n \t\t  || TREE_PUBLIC (IDENTIFIER_NAMESPACE_VALUE (name))))\n \t    decl = IDENTIFIER_NAMESPACE_VALUE (name);\n@@ -4577,6 +4585,9 @@ push_overloaded_decl (decl, flags)\n \t\treturn fn;\n \t    }\n \t}\n+      else if (old == error_mark_node)\n+\t/* Ignore the undefined symbol marker.  */\n+\told = NULL_TREE;\n       else\n \t{\n \t  cp_error_at (\"previous non-function declaration `%#D'\", old);\n@@ -8022,7 +8033,8 @@ destroy_local_var (decl)\n     return;\n \n   /* And only things with destructors need cleaning up.  */\n-  if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n+  if (type == error_mark_node\n+      || TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n     return;\n \n   if (TREE_CODE (decl) == VAR_DECL &&\n@@ -12583,7 +12595,7 @@ grok_op_properties (decl, virtualp, friendp)\n \t\t  break;\n \n \t\tcase PREDECREMENT_EXPR:\n-\t\t  operator_code = PREDECREMENT_EXPR;\n+\t\t  operator_code = POSTDECREMENT_EXPR;\n \t\t  break;\n \n \t\tdefault:"}, {"sha": "b034d7858ae1a076e1c07180d2826f7bd12c5aeb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "patch": "@@ -1283,8 +1283,11 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n \n   /* Deleting ptr to void is undefined behaviour [expr.delete/3].  */\n   if (TREE_CODE (TREE_TYPE (type)) == VOID_TYPE)\n-    cp_warning (\"`%T' is not a pointer-to-object type\", type);\n-  \n+    {\n+      cp_warning (\"deleting `%T' is undefined\", type);\n+      doing_vec = 0;\n+    }\n+\n   /* An array can't have been allocated by new, so complain.  */\n   if (TREE_CODE (t) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (t, 0)) == VAR_DECL"}, {"sha": "af0c7c484f92a0f712d4f34206aa0db38287dfe5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dc6eebfd39f08c7887a55a7c0895ac5e44b6e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=655dc6eebfd39f08c7887a55a7c0895ac5e44b6e", "patch": "@@ -1300,8 +1300,12 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t  /* This case handles bogus declarations like template <>\n \t     template <class T> void f<int>(); */\n \n-\t  cp_error (\"template-id `%D' in declaration of primary template\",\n-\t\t    declarator);\n+\t  if (uses_template_parms (declarator))\n+\t    cp_error (\"partial specialization `%D' of function template\",\n+\t\t      declarator);\n+\t  else\n+\t    cp_error (\"template-id `%D' in declaration of primary template\",\n+\t\t      declarator);\n \t  return decl;\n \t}\n \n@@ -4507,7 +4511,11 @@ tsubst_friend_function (decl, args)\n      instantiation of anything.  */\n   DECL_USE_TEMPLATE (new_friend) = 0;\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n-    DECL_USE_TEMPLATE (DECL_TEMPLATE_RESULT (new_friend)) = 0;\n+    {\n+      DECL_USE_TEMPLATE (DECL_TEMPLATE_RESULT (new_friend)) = 0;\n+      DECL_SAVED_TREE (DECL_TEMPLATE_RESULT (new_friend))\n+\t= DECL_SAVED_TREE (DECL_TEMPLATE_RESULT (decl));\n+    }\n \n   /* The mangled name for the NEW_FRIEND is incorrect.  The call to\n      tsubst will have resulted in a call to\n@@ -5727,6 +5735,7 @@ tsubst_decl (t, args, type, in_decl)\n \tTREE_CHAIN (r) = NULL_TREE;\n \tDECL_PENDING_INLINE_INFO (r) = 0;\n \tDECL_PENDING_INLINE_P (r) = 0;\n+\tDECL_SAVED_TREE (r) = NULL_TREE;\n \tTREE_USED (r) = 0;\n \tif (DECL_CLONED_FUNCTION (r))\n \t  {"}]}