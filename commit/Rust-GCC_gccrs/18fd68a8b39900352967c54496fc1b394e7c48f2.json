{"sha": "18fd68a8b39900352967c54496fc1b394e7c48f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmZDY4YThiMzk5MDAzNTI5NjdjNTQ0OTZmYzFiMzk0ZTdjNDhmMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-10-22T02:08:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-10-22T02:08:47Z"}, "message": "re PR c++/11962 (ICE in type_dependent_expression on omitted second operand to ?: in template argument expression)\n\n\tPR c++/11962\n\t* typeck.c (build_x_conditional_expr): Handle missing middle\n\toperands in templates.\n\t* mangle.c (write_expression): Issue errors about attempts to\n\tmangle a non-existant middle operator to the ?: operator.\n\n\tPR c++/11962\n\t* g++.dg/template/cond2.C: New test.\n\nFrom-SVN: r72785", "tree": {"sha": "43df86f21401b1fb9baf02d37d1b647fbbf75cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43df86f21401b1fb9baf02d37d1b647fbbf75cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fd68a8b39900352967c54496fc1b394e7c48f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd68a8b39900352967c54496fc1b394e7c48f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fd68a8b39900352967c54496fc1b394e7c48f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd68a8b39900352967c54496fc1b394e7c48f2/comments", "author": null, "committer": null, "parents": [{"sha": "4f52529432143a89cbbf6344de2758b9a7d443f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f52529432143a89cbbf6344de2758b9a7d443f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f52529432143a89cbbf6344de2758b9a7d443f2"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "ba2ee1a2acf5f8d278252357e37056f45073d1e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18fd68a8b39900352967c54496fc1b394e7c48f2", "patch": "@@ -1,3 +1,11 @@\n+2003-10-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11962\n+\t* typeck.c (build_x_conditional_expr): Handle missing middle\n+\toperands in templates.\n+\t* mangle.c (write_expression): Issue errors about attempts to\n+\tmangle a non-existant middle operator to the ?: operator.\n+\n 2003-10-21  Robert Bowdidge   <bowdidge@apple.com>\n \t* decl.c (cp_finish_decl): Remove clause intended for asm directives \n           in struct or class fields: this code is never executed."}, {"sha": "15334f321e328d555b306cd5e3b9661c1c5594fa", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=18fd68a8b39900352967c54496fc1b394e7c48f2", "patch": "@@ -2041,7 +2041,21 @@ write_expression (tree expr)\n \n \tdefault:\n \t  for (i = 0; i < TREE_CODE_LENGTH (code); ++i)\n-\t    write_expression (TREE_OPERAND (expr, i));\n+\t    {\n+\t      tree operand = TREE_OPERAND (expr, i);\n+\t      /* As a GNU expression, the middle operand of a\n+\t\t conditional may be omitted.  Since expression\n+\t\t manglings are supposed to represent the input token\n+\t\t stream, there's no good way to mangle such an\n+\t\t expression without extending the C++ ABI.  */\n+\t      if (code == COND_EXPR && i == 1 && !operand)\n+\t\t{\n+\t\t  error (\"omitted middle operand to `?:' operand \"\n+\t\t\t \"cannot be mangled\");\n+\t\t  continue;\n+\t\t}\n+\t      write_expression (operand);\n+\t    }\n \t}\n     }\n }"}, {"sha": "e469a5ace7e5a7e3e764a312bd6e7862050a8710", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=18fd68a8b39900352967c54496fc1b394e7c48f2", "patch": "@@ -4284,11 +4284,13 @@ build_x_conditional_expr (tree ifexp, tree op1, tree op2)\n \t IFEXP is type-dependent, even though the eventual type of the\n \t expression doesn't dependent on IFEXP.  */\n       if (type_dependent_expression_p (ifexp)\n-\t  || type_dependent_expression_p (op1)\n+\t  /* As a GNU extension, the middle operand may be omitted.  */\n+\t  || (op1 && type_dependent_expression_p (op1))\n \t  || type_dependent_expression_p (op2))\n \treturn build_min_nt (COND_EXPR, ifexp, op1, op2);\n       ifexp = build_non_dependent_expr (ifexp);\n-      op1 = build_non_dependent_expr (op1);\n+      if (op1)\n+\top1 = build_non_dependent_expr (op1);\n       op2 = build_non_dependent_expr (op2);\n     }\n "}, {"sha": "5153e07640098686e9cfeea9e67cd702b5014579", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18fd68a8b39900352967c54496fc1b394e7c48f2", "patch": "@@ -1,3 +1,8 @@\n+2003-10-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11962\n+\t* g++.dg/template/cond2.C: New test.\n+\n 2003-10-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/builtins-28.c: New test."}, {"sha": "abb6ebb5d4676a0497c6386a5fa5222601d85e88", "filename": "gcc/testsuite/g++.dg/template/cond2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd68a8b39900352967c54496fc1b394e7c48f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C?ref=18fd68a8b39900352967c54496fc1b394e7c48f2", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/11962\n+// { dg-options \"\" }\n+\n+template<int X> class c;\n+\n+template<int X, int Y> int test(c<X ? : Y>&);\n+\n+void test(c<2>*c2) {\n+\ttest<0, 2>(*c2); // { dg-error \"omitted\" }\n+}"}]}