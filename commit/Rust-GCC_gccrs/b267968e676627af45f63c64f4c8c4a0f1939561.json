{"sha": "b267968e676627af45f63c64f4c8c4a0f1939561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2Nzk2OGU2NzY2MjdhZjQ1ZjYzYzY0ZjRjOGM0YTBmMTkzOTU2MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-18T13:55:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-18T13:55:47Z"}, "message": "re PR tree-optimization/81410 (-O3 breaks code)\n\n2017-06-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81410\n\t* tree-vect-stmts.c (vectorizable_load): Properly adjust for\n\tthe gap in the ! slp_perm SLP case after each group.\n\n\t* gcc.dg/vect/pr81410.c: New testcase.\n\nFrom-SVN: r250312", "tree": {"sha": "447b3b0ba83194cb5a0e7331a140782c5554c865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/447b3b0ba83194cb5a0e7331a140782c5554c865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b267968e676627af45f63c64f4c8c4a0f1939561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b267968e676627af45f63c64f4c8c4a0f1939561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b267968e676627af45f63c64f4c8c4a0f1939561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b267968e676627af45f63c64f4c8c4a0f1939561/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35896b18ecb8ac88c4c21b2b21c01e9d435a5ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35896b18ecb8ac88c4c21b2b21c01e9d435a5ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35896b18ecb8ac88c4c21b2b21c01e9d435a5ebe"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "d6ffb757d01d55b43807050b3be8833f9a566c2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b267968e676627af45f63c64f4c8c4a0f1939561", "patch": "@@ -1,3 +1,9 @@\n+2017-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81410\n+\t* tree-vect-stmts.c (vectorizable_load): Properly adjust for\n+\tthe gap in the ! slp_perm SLP case after each group.\n+\n 2017-07-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/81463"}, {"sha": "80d57b8773dca16b3025ad55a11191c7d556a409", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b267968e676627af45f63c64f4c8c4a0f1939561", "patch": "@@ -1,3 +1,8 @@\n+2017-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81410\n+\t* gcc.dg/vect/pr81410.c: New testcase.\n+\n 2017-07-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/81462"}, {"sha": "929850f23913340617208f226e0f832c88f3e7b0", "filename": "gcc/testsuite/gcc.dg/vect/pr81410.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81410.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81410.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81410.c?ref=b267968e676627af45f63c64f4c8c4a0f1939561", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vect_long_long } */\n+\n+#include \"tree-vect.h\"\n+\n+typedef long long uint64_t;\n+uint64_t x[24];\n+uint64_t y[16];\n+uint64_t z[8];\n+\n+void __attribute__((noinline)) foo()\n+{\n+  for (int i = 0; i < 8; ++i)\n+    {\n+      y[2*i] = x[3*i];\n+      y[2*i + 1] = x[3*i + 1];\n+      z[i] = 1;\n+    }\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 24; ++i)\n+    {\n+      x[i] = i;\n+      __asm__ volatile (\"\" : : : \"memory\");\n+    }\n+  foo ();\n+  for (int i = 0; i < 8; ++i)\n+    if (y[2*i] != 3*i || y[2*i+1] != 3*i + 1)\n+      __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "c50555499d295cec663cf32d29f43bdcb3d8da99", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b267968e676627af45f63c64f4c8c4a0f1939561/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b267968e676627af45f63c64f4c8c4a0f1939561", "patch": "@@ -7118,6 +7118,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n     {\n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n       group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));\n+      int group_gap = GROUP_GAP (vinfo_for_stmt (first_stmt));\n       /* For SLP vectorization we directly vectorize a subchain\n          without permutation.  */\n       if (slp && ! SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n@@ -7153,10 +7154,15 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t     not only the number of vector stmts the permutation result\n \t     fits in.  */\n \t  if (slp_perm)\n-\t    vec_num = (group_size * vf + nunits - 1) / nunits;\n+\t    {\n+\t      vec_num = (group_size * vf + nunits - 1) / nunits;\n+\t      group_gap_adj = vf * group_size - nunits * vec_num;\n+\t    }\n \t  else\n-\t    vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-\t  group_gap_adj = vf * group_size - nunits * vec_num;\n+\t    {\n+\t      vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+\t      group_gap_adj = group_gap;\n+\t    }\n     \t}\n       else\n \tvec_num = group_size;\n@@ -7316,6 +7322,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n     aggr_type = vectype;\n \n   prev_stmt_info = NULL;\n+  int group_elt = 0;\n   for (j = 0; j < ncopies; j++)\n     {\n       /* 1. Create the vector or array pointer update chain.  */\n@@ -7603,10 +7610,27 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t      /* Store vector loads in the corresponding SLP_NODE.  */\n \t      if (slp && !slp_perm)\n \t\tSLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n+\n+\t      /* With SLP permutation we load the gaps as well, without\n+\t         we need to skip the gaps after we manage to fully load\n+\t\t all elements.  group_gap_adj is GROUP_SIZE here.  */\n+\t      group_elt += nunits;\n+\t      if (group_gap_adj != 0 && ! slp_perm\n+\t\t  && group_elt == group_size - group_gap_adj)\n+\t\t{\n+\t\t  bool ovf;\n+\t\t  tree bump\n+\t\t    = wide_int_to_tree (sizetype,\n+\t\t\t\t\twi::smul (TYPE_SIZE_UNIT (elem_type),\n+\t\t\t\t\t\t  group_gap_adj, &ovf));\n+\t\t  dataref_ptr = bump_vector_ptr (dataref_ptr, ptr_incr, gsi,\n+\t\t\t\t\t\t stmt, bump);\n+\t\t  group_elt = 0;\n+\t\t}\n \t    }\n \t  /* Bump the vector pointer to account for a gap or for excess\n \t     elements loaded for a permuted SLP load.  */\n-\t  if (group_gap_adj != 0)\n+\t  if (group_gap_adj != 0 && slp_perm)\n \t    {\n \t      bool ovf;\n \t      tree bump"}]}