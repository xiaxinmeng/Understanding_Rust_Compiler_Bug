{"sha": "80f33d06a3c11890c664c8936e29dade49dfd7f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmMzNkMDZhM2MxMTg5MGM2NjRjODkzNmUyOWRhZGU0OWRmZDdmMg==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-12-30T01:34:44Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-12-30T01:34:44Z"}, "message": "i386.c (ix86_asm_dialect): Fix enum type.\n\n\n        * config/i386/i386.c (ix86_asm_dialect): Fix enum type.\n\n        (override_options): Delete abs macro unused.\n\n        (output_pic_addr_const): Use ASM_ATT/ASM_INTEL enumerations\n        when testing ASSEMBLER_DIALECT.\n\n        (print_reg): Likewise.\n        (print_operand): Likewise.\n        (print_operand_address): Likewise.\n        (print_operand): abort if ASSEMBLER_DIALECT is unknown dialect.\n\n        * config/i386/i386.h (ix86_asm_dialect): Fix enum type.\n\n        (FIND_BASE_TERM): Fix typo.\n\nFrom-SVN: r48393", "tree": {"sha": "25afad6e751aa5e97f10d6281484c938884bfbdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25afad6e751aa5e97f10d6281484c938884bfbdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f33d06a3c11890c664c8936e29dade49dfd7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f33d06a3c11890c664c8936e29dade49dfd7f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f33d06a3c11890c664c8936e29dade49dfd7f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f33d06a3c11890c664c8936e29dade49dfd7f2/comments", "author": null, "committer": null, "parents": [{"sha": "0023400b9c799a153a9809b21099d07310ddb229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0023400b9c799a153a9809b21099d07310ddb229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0023400b9c799a153a9809b21099d07310ddb229"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "a72bef281123a818107c9ea06c747e2f13a50160", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f33d06a3c11890c664c8936e29dade49dfd7f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f33d06a3c11890c664c8936e29dade49dfd7f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=80f33d06a3c11890c664c8936e29dade49dfd7f2", "patch": "@@ -590,11 +590,11 @@ struct ix86_frame\n const char *ix86_debug_arg_string, *ix86_debug_addr_string;\n /* Code model option as passed by user.  */\n const char *ix86_cmodel_string;\n-/* Asm dialect.  */\n-const char *ix86_asm_string;\n-enum cmodel ix86_asm_dialect = ASM_ATT;\n /* Parsed value.  */\n enum cmodel ix86_cmodel;\n+/* Asm dialect.  */\n+const char *ix86_asm_string;\n+enum asm_dialect ix86_asm_dialect = ASM_ATT;\n \n /* which cpu are we scheduling for */\n enum processor_type ix86_cpu;\n@@ -1062,7 +1062,6 @@ override_options ()\n     }\n \n   /* Default align_* from the processor table.  */\n-#define abs(n) (n < 0 ? -n : n)\n   if (align_loops == 0)\n     {\n       align_loops = processor_target_table[ix86_cpu].align_loop;\n@@ -5288,11 +5287,11 @@ output_pic_addr_const (file, x, code)\n       break;\n \n     case MINUS:\n-      putc (ASSEMBLER_DIALECT ? '(' : '[', file);\n+      putc (ASSEMBLER_DIALECT == ASM_INTEL ? '(' : '[', file);\n       output_pic_addr_const (file, XEXP (x, 0), code);\n       putc ('-', file);\n       output_pic_addr_const (file, XEXP (x, 1), code);\n-      putc (ASSEMBLER_DIALECT ? ')' : ']', file);\n+      putc (ASSEMBLER_DIALECT == ASM_INTEL ? ')' : ']', file);\n       break;\n \n      case UNSPEC:\n@@ -5488,7 +5487,7 @@ print_reg (x, code, file)\n       || REGNO (x) == FPSR_REG)\n     abort ();\n \n-  if (ASSEMBLER_DIALECT == 0 || USER_LABEL_PREFIX[0] == 0)\n+  if (ASSEMBLER_DIALECT == ASM_ATT  || USER_LABEL_PREFIX[0] == 0)\n     putc ('%', file);\n \n   if (code == 'w' || MMX_REG_P (x))\n@@ -5600,14 +5599,14 @@ print_operand (file, x, code)\n       switch (code)\n \t{\n \tcase '*':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('*', file);\n \t  return;\n \n \tcase 'A':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('*', file);\n-\t  else if (ASSEMBLER_DIALECT == 1)\n+\t  else if (ASSEMBLER_DIALECT == ASM_INTEL)\n \t    {\n \t      /* Intel syntax. For absolute addresses, registers should not\n \t\t be surrounded by braces.  */\n@@ -5619,38 +5618,40 @@ print_operand (file, x, code)\n \t\t  return;\n \t\t}\n \t    }\n+\t  else\n+\t    abort ();\n \n \t  PRINT_OPERAND (file, x, 0);\n \t  return;\n \n \n \tcase 'L':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('l', file);\n \t  return;\n \n \tcase 'W':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('w', file);\n \t  return;\n \n \tcase 'B':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('b', file);\n \t  return;\n \n \tcase 'Q':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('l', file);\n \t  return;\n \n \tcase 'S':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('s', file);\n \t  return;\n \n \tcase 'T':\n-\t  if (ASSEMBLER_DIALECT == 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('t', file);\n \t  return;\n \n@@ -5833,7 +5834,7 @@ print_operand (file, x, code)\n   else if (GET_CODE (x) == MEM)\n     {\n       /* No `byte ptr' prefix for call instructions.  */\n-      if (ASSEMBLER_DIALECT != 0 && code != 'X' && code != 'P')\n+      if (ASSEMBLER_DIALECT == ASM_INTEL && code != 'X' && code != 'P')\n \t{\n \t  const char * size;\n \t  switch (GET_MODE_SIZE (GET_MODE (x)))\n@@ -5879,7 +5880,7 @@ print_operand (file, x, code)\n       REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n       REAL_VALUE_TO_TARGET_SINGLE (r, l);\n \n-      if (ASSEMBLER_DIALECT == 0)\n+      if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('$', file);\n       fprintf (file, \"0x%lx\", l);\n     }\n@@ -5911,13 +5912,13 @@ print_operand (file, x, code)\n \t{\n \t  if (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)\n \t    {\n-\t      if (ASSEMBLER_DIALECT == 0)\n+\t      if (ASSEMBLER_DIALECT == ASM_ATT)\n \t\tputc ('$', file);\n \t    }\n \t  else if (GET_CODE (x) == CONST || GET_CODE (x) == SYMBOL_REF\n \t\t   || GET_CODE (x) == LABEL_REF)\n \t    {\n-\t      if (ASSEMBLER_DIALECT == 0)\n+\t      if (ASSEMBLER_DIALECT == ASM_ATT)\n \t\tputc ('$', file);\n \t      else\n \t\tfputs (\"OFFSET FLAT:\", file);\n@@ -5957,7 +5958,7 @@ print_operand_address (file, addr)\n \n       if (GET_CODE (disp) == CONST_INT)\n \t{\n-\t  if (ASSEMBLER_DIALECT != 0)\n+\t  if (ASSEMBLER_DIALECT == ASM_INTEL)\n \t    {\n \t      if (USER_LABEL_PREFIX[0] == 0)\n \t\tputc ('%', file);\n@@ -5976,7 +5977,7 @@ print_operand_address (file, addr)\n     }\n   else\n     {\n-      if (ASSEMBLER_DIALECT == 0)\n+      if (ASSEMBLER_DIALECT == ASM_ATT)\n \t{\n \t  if (disp)\n \t    {"}, {"sha": "41112b8b90bb16b3bb4eda5729faf6a3af67ecaa", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f33d06a3c11890c664c8936e29dade49dfd7f2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f33d06a3c11890c664c8936e29dade49dfd7f2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=80f33d06a3c11890c664c8936e29dade49dfd7f2", "patch": "@@ -3118,8 +3118,8 @@ enum asm_dialect {\n   ASM_INTEL\n };\n extern const char *ix86_asm_string;\n-extern enum cmodel ix86_asm_dialect;\n-/* Valud of -mcmodel specified by user.  */\n+extern enum asm_dialect ix86_asm_dialect;\n+/* Value of -mcmodel specified by user.  */\n extern const char *ix86_cmodel_string;\n extern enum cmodel ix86_cmodel;\n \f"}]}