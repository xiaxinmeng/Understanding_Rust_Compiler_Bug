{"sha": "762397797c7ad0027a174c3dded91b08c6e1fa58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyMzk3Nzk3YzdhZDAwMjdhMTc0YzNkZGVkOTFiMDhjNmUxZmE1OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-12-05T21:33:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-12-05T21:33:20Z"}, "message": "re PR c++/29728 (ICE on invalid initializer in template function)\n\n\tPR c++/29728\n\t* decl.c (check_array_designated_initializer): New function.\n\t(maybe_deduce_size_from_array_init): Use it.\n\t(reshape_init_array): Likewise.\n\tPR c++/29728\n\t* g++.dg/template/crash62.C: New test.\n\nFrom-SVN: r119558", "tree": {"sha": "615ab278e6376f78e4fd3323c4d3270ec787283e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/615ab278e6376f78e4fd3323c4d3270ec787283e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762397797c7ad0027a174c3dded91b08c6e1fa58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762397797c7ad0027a174c3dded91b08c6e1fa58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762397797c7ad0027a174c3dded91b08c6e1fa58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762397797c7ad0027a174c3dded91b08c6e1fa58/comments", "author": null, "committer": null, "parents": [{"sha": "8424e0d8b1ab427cd5801a6774109bff1860bfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8424e0d8b1ab427cd5801a6774109bff1860bfa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8424e0d8b1ab427cd5801a6774109bff1860bfa0"}], "stats": {"total": 113, "additions": 82, "deletions": 31}, "files": [{"sha": "d9de3612f7430d316be3e82ed058fc4db41baa9f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=762397797c7ad0027a174c3dded91b08c6e1fa58", "patch": "@@ -1,3 +1,10 @@\n+2006-12-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29728\n+\t* decl.c (check_array_designated_initializer): New function.\n+\t(maybe_deduce_size_from_array_init): Use it.\n+\t(reshape_init_array): Likewise.\n+\n 2006-12-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \tMerge from gimple-tuples-branch."}, {"sha": "1edd7ea9d700bf6a17493418b48d340af1cfafd6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 64, "deletions": 31, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=762397797c7ad0027a174c3dded91b08c6e1fa58", "patch": "@@ -4092,6 +4092,30 @@ grok_reference_init (tree decl, tree type, tree init, tree *cleanup)\n   return NULL_TREE;\n }\n \n+/* Designated initializers in arrays are not supported in GNU C++.\n+   The parser cannot detect this error since it does not know whether\n+   a given brace-enclosed initializer is for a class type or for an\n+   array.  This function checks that CE does not use a designated\n+   initializer.  If it does, an error is issued.  Returns true if CE\n+   is valid, i.e., does not have a designated initializer.  */\n+\n+static bool\n+check_array_designated_initializer (const constructor_elt *ce)\n+{\n+  /* Designated initializers for array elements arenot supported.  */\n+  if (ce->index)\n+    {\n+      /* The parser only allows identifiers as designated\n+\t intializers.  */\n+      gcc_assert (TREE_CODE (ce->index) == IDENTIFIER_NODE);\n+      error (\"name %qD used in a GNU-style designated \"\n+\t     \"initializer for an array\", ce->index);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* When parsing `int a[] = {1, 2};' we don't know the size of the\n    array until we finish parsing the initializer.  If that's the\n    situation we're in, update DECL accordingly.  */\n@@ -4109,32 +4133,52 @@ maybe_deduce_size_from_array_init (tree decl, tree init)\n \t But let's leave it here to ease the eventual merge.  */\n       int do_default = !DECL_EXTERNAL (decl);\n       tree initializer = init ? init : DECL_INITIAL (decl);\n-      int failure = cp_complete_array_type (&TREE_TYPE (decl), initializer,\n-\t\t\t\t\t    do_default);\n+      int failure = 0;\n \n-      if (failure == 1)\n+      /* Check that there are no designated initializers in INIT, as\n+\t those are not supported in GNU C++, and as the middle-end\n+\t will crash if presented with a non-numeric designated\n+\t initializer.  */\n+      if (initializer && TREE_CODE (initializer) == CONSTRUCTOR)\n \t{\n-\t  error (\"initializer fails to determine size of %qD\", decl);\n-\t  TREE_TYPE (decl) = error_mark_node;\n+\t  VEC(constructor_elt,gc) *v = CONSTRUCTOR_ELTS (initializer);\n+\t  constructor_elt *ce;\n+\t  HOST_WIDE_INT i;\n+\t  for (i = 0; \n+\t       VEC_iterate (constructor_elt, v, i, ce);\n+\t       ++i)\n+\t    if (!check_array_designated_initializer (ce))\n+\t      failure = 1;\n \t}\n-      else if (failure == 2)\n+\n+      if (!failure)\n \t{\n-\t  if (do_default)\n+\t  failure = cp_complete_array_type (&TREE_TYPE (decl), initializer,\n+\t\t\t\t\t    do_default);\n+\t  if (failure == 1)\n \t    {\n-\t      error (\"array size missing in %qD\", decl);\n+\t      error (\"initializer fails to determine size of %qD\", decl);\n+\t      TREE_TYPE (decl) = error_mark_node;\n+\t    }\n+\t  else if (failure == 2)\n+\t    {\n+\t      if (do_default)\n+\t\t{\n+\t\t  error (\"array size missing in %qD\", decl);\n+\t\t  TREE_TYPE (decl) = error_mark_node;\n+\t\t}\n+\t      /* If a `static' var's size isn't known, make it extern as\n+\t\t well as static, so it does not get allocated.  If it's not\n+\t\t `static', then don't mark it extern; finish_incomplete_decl\n+\t\t will give it a default size and it will get allocated.  */\n+\t      else if (!pedantic && TREE_STATIC (decl) && !TREE_PUBLIC (decl))\n+\t\tDECL_EXTERNAL (decl) = 1;\n+\t    }\n+\t  else if (failure == 3)\n+\t    {\n+\t      error (\"zero-size array %qD\", decl);\n \t      TREE_TYPE (decl) = error_mark_node;\n \t    }\n-\t  /* If a `static' var's size isn't known, make it extern as\n-\t     well as static, so it does not get allocated.  If it's not\n-\t     `static', then don't mark it extern; finish_incomplete_decl\n-\t     will give it a default size and it will get allocated.  */\n-\t  else if (!pedantic && TREE_STATIC (decl) && !TREE_PUBLIC (decl))\n-\t    DECL_EXTERNAL (decl) = 1;\n-\t}\n-      else if (failure == 3)\n-\t{\n-\t  error (\"zero-size array %qD\", decl);\n-\t  TREE_TYPE (decl) = error_mark_node;\n \t}\n \n       cp_apply_type_quals_to_decl (cp_type_quals (TREE_TYPE (decl)), decl);\n@@ -4346,18 +4390,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d)\n     {\n       tree elt_init;\n \n-      if (d->cur->index)\n-\t{\n-\t  /* Handle array designated initializers (GNU extension).  */\n-\t  if (TREE_CODE (d->cur->index) == IDENTIFIER_NODE)\n-\t    {\n-\t      error (\"name %qD used in a GNU-style designated \"\n-\t\t     \"initializer for an array\", d->cur->index);\n-\t    }\n-\t  else\n-\t    gcc_unreachable ();\n-\t}\n-\n+      check_array_designated_initializer (d->cur);\n       elt_init = reshape_init_r (elt_type, d, /*first_initializer_p=*/false);\n       if (elt_init == error_mark_node)\n \treturn error_mark_node;"}, {"sha": "d7bae48f0a102725c2209eee2dfc8c5a9144f4fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=762397797c7ad0027a174c3dded91b08c6e1fa58", "patch": "@@ -1,3 +1,8 @@\n+2006-12-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29728\n+\t* g++.dg/template/crash62.C: New test.\n+\n 2006-12-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30003"}, {"sha": "bd8a0f40e05895cd9d93530ca3abe9b427510ceb", "filename": "gcc/testsuite/g++.dg/template/crash62.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762397797c7ad0027a174c3dded91b08c6e1fa58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash62.C?ref=762397797c7ad0027a174c3dded91b08c6e1fa58", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/29728\n+\n+template<int> void foo()\n+{\n+  int a[] = { X: 0 }; // { dg-error \"designated initializer\" }\n+}"}]}