{"sha": "b64e82394fd4ad74220946bdab73bee9ad63bc0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ZTgyMzk0ZmQ0YWQ3NDIyMDk0NmJkYWI3M2JlZTlhZDYzYmMwYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-18T11:02:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-18T11:02:24Z"}, "message": "tree-vrp.c (evrp_dom_walker::before_dom_children): Handle not visited but non-executable predecessors.\n\n2016-10-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Handle\n\tnot visited but non-executable predecessors.  Return taken edge.\n\tSimplify conditions and refactor propagation vs. folding step.\n\n\t* gcc.dg/tree-ssa/pr20318.c: Disable EVRP.\n\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21090.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21294.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21563.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23744.c: Likewise.\n\t* gcc.dg/tree-ssa/pr25382.c: Likewise.\n\t* gcc.dg/tree-ssa/pr68431.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp03.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp06.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp09.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp19.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp20.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp92.c: Likewise.\n\t* gcc.dg/pr68217.c: Likewise.\n\t* gcc.dg/predict-9.c: Likewise.\n\t* gcc.dg/tree-prof/val-prof-5.c: Adjust.\n\t* gcc.dg/predict-1.c: Likewise.\n\nFrom-SVN: r241300", "tree": {"sha": "ee785220139c62f78bae92ec76136fb5c4dc8db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee785220139c62f78bae92ec76136fb5c4dc8db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64e82394fd4ad74220946bdab73bee9ad63bc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64e82394fd4ad74220946bdab73bee9ad63bc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64e82394fd4ad74220946bdab73bee9ad63bc0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64e82394fd4ad74220946bdab73bee9ad63bc0a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f784f6bde1ff14f73bc8337e5f250209a6831d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f784f6bde1ff14f73bc8337e5f250209a6831d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f784f6bde1ff14f73bc8337e5f250209a6831d8"}], "stats": {"total": 201, "additions": 119, "deletions": 82}, "files": [{"sha": "80c9870e7cbd812b1c692f136ded78f72cad8d1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,3 +1,9 @@\n+2016-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Handle\n+\tnot visited but non-executable predecessors.  Return taken edge.\n+\tSimplify conditions and refactor propagation vs. folding step.\n+\n 2016-10-18  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_savres_strategy): Do not select"}, {"sha": "0ad84587141a8c30b995397f387aeee4120559f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,3 +1,25 @@\n+2016-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr20318.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21090.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21294.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21563.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23744.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr25382.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr68431.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp03.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp06.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp09.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp19.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp20.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp92.c: Likewise.\n+\t* gcc.dg/pr68217.c: Likewise.\n+\t* gcc.dg/predict-9.c: Likewise.\n+\t* gcc.dg/tree-prof/val-prof-5.c: Adjust.\n+\t* gcc.dg/predict-1.c: Likewise.\n+\n 2016-10-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/dtio_17.f90: New test."}, {"sha": "c5b0d1ff199dc1bb0962e4c28655281d5044dbd6", "filename": "gcc/testsuite/gcc.dg/pr68217.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68217.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68217.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68217.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,6 +1,5 @@\n-\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n int foo (void)\n {"}, {"sha": "65f6bad9d7c9595cdd90f7a83d0601d274a28a66", "filename": "gcc/testsuite/gcc.dg/predict-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -23,4 +23,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"guess loop iv compare heuristics of edge\\[^:\\]*: 2.0%\" 5 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"guess loop iv compare heuristics of edge\\[^:\\]*: 2.0%\" 4 \"profile_estimate\"} } */"}, {"sha": "ec4675195042ea82abc95dff6081adac90f6844d", "filename": "gcc/testsuite/gcc.dg/predict-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-profile_estimate\" } */\n \n extern int global;\n extern int global2;"}, {"sha": "7f4a15b778626edc244ff932c715c7a90525b198", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -6,7 +6,7 @@ main()\n {\n \tint i;\n \tfor (i = 0; i < 1000; i++)\n-\t\tif (a[i])\n+\t\tif (a[i] != 1)\n \t\t\ta[i]/=b;\n \t\telse\n \t\t\ta[i]/=b;"}, {"sha": "80fd72668715909ce45f57553db5e9601ce1adf7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20318.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n-/* { dg-options \"-O2 -fdump-tree-original -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-original -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp\" } */\n \n extern int* f(int) __attribute__((returns_nonnull));\n extern void eliminate ();"}, {"sha": "719360a015f9041ef61225870beaa0271e05bfdc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21001.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -5,7 +5,7 @@\n    range information out of the conditional.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n int\n foo (int a)"}, {"sha": "3909adb72d43bd161f2d195688c0f57811b20210", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21090.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n int g, h;\n "}, {"sha": "cc7d4cdf3381bf3d356eb9adcda8580cdb95a175", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21294.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -4,7 +4,7 @@\n    allows us to eliminate the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n struct f {\n   int i;"}, {"sha": "9c67a3acb46a75ca8558a487cd8edc885d0ba2dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21563.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -2,7 +2,7 @@\n    Make sure VRP folds the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n int\n foo (int a)"}, {"sha": "3385aa1e42483cf5089b55b2f6c608ba0bfa863c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23744.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n void h (void);\n "}, {"sha": "d74765551c2a137aeb4db7d3e009f2bff8d157f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr25382.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -3,7 +3,7 @@\n    Check that VRP now gets ranges from BIT_AND_EXPRs.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n int\n foo (int a)"}, {"sha": "9c42563b67b91ca13deff4f7335fed17323f2eb5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68431.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68431.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* PR tree-optimization/68431 */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n unsigned int x = 1;\n int"}, {"sha": "bafb65a53d63e5d1f2c94a5aca7f08de60e473c6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp03.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n struct A\n {"}, {"sha": "a872bc4373123a8d40878dc9afbf0df40e484f20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp06.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n int baz (void);\n "}, {"sha": "0f3f280e4e15c5ba82b8ee14e2d1bca7b9769090", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n int\n foo (int i, int *p)"}, {"sha": "56cc50c5f1d69e1b2397617bd3233d502cef7775", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp09.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1 -std=gnu89\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1 -std=gnu89\" } */\n \n foo (int *p)\n {"}, {"sha": "40373fde163bee41af7947d2d38663bfbd45200b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -O1 -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-fwrapv -O1 -ftree-vrp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n #include <limits.h>\n extern void abort ();"}, {"sha": "4a3b0d73648a775a0b807d5f41b07e6bfe848cad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -O1 -fno-tree-fre -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-fwrapv -O1 -fno-tree-fre -fdisable-tree-evrp -ftree-vrp -fdump-tree-vrp1\" } */\n \n extern void abort ();\n extern void exit (int);"}, {"sha": "213aa47609a359e5e618e2380a37b716376c3f5a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp92.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdisable-tree-ethread\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1-details -fdisable-tree-ethread\" } */\n \n void bar (void);\n int foo (int i, int j)"}, {"sha": "6a7adaeff83edf32b310124feaea767cab486111", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 72, "deletions": 62, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64e82394fd4ad74220946bdab73bee9ad63bc0a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b64e82394fd4ad74220946bdab73bee9ad63bc0a", "patch": "@@ -10747,12 +10747,13 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n   gimple_stmt_iterator gsi;\n   edge e;\n   edge_iterator ei;\n-  bool has_unvisived_preds = false;\n+  bool has_unvisited_preds = false;\n \n   FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (!(e->src->flags & BB_VISITED))\n+    if (e->flags & EDGE_EXECUTABLE\n+\t&& !(e->src->flags & BB_VISITED))\n       {\n-\thas_unvisived_preds = true;\n+\thas_unvisited_preds = true;\n \tbreak;\n       }\n \n@@ -10762,97 +10763,106 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       gphi *phi = gpi.phi ();\n       tree lhs = PHI_RESULT (phi);\n       value_range vr_result = VR_INITIALIZER;\n-      if (!has_unvisived_preds\n+      if (!has_unvisited_preds\n \t  && stmt_interesting_for_vrp (phi))\n \textract_range_from_phi_node (phi, &vr_result);\n       else\n \tset_value_range_to_varying (&vr_result);\n       update_value_range (lhs, &vr_result);\n     }\n \n+  edge taken_edge = NULL;\n+\n   /* Visit all other stmts and discover any new VRs possible.  */\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple *stmt = gsi_stmt (gsi);\n-      edge taken_edge;\n       tree output = NULL_TREE;\n       gimple *old_stmt = stmt;\n       bool was_noreturn = (is_gimple_call (stmt)\n \t\t\t   && gimple_call_noreturn_p (stmt));\n \n-      /* TODO, if found taken_edge, we should visit (return it) and travel\n-\t again to improve VR as done in DOM/SCCVN optimizations.  It should\n-\t be done carefully as stmts might prematurely leave a BB like\n-\t in EH.  */\n-      if (stmt_interesting_for_vrp (stmt))\n+      if (gcond *cond = dyn_cast <gcond *> (stmt))\n+\t{\n+\t  vrp_visit_cond_stmt (cond, &taken_edge);\n+\t  if (taken_edge)\n+\t    {\n+\t      if (taken_edge->flags & EDGE_TRUE_VALUE)\n+\t\tgimple_cond_make_true (cond);\n+\t      else if (taken_edge->flags & EDGE_FALSE_VALUE)\n+\t\tgimple_cond_make_false (cond);\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n+\t}\n+      else if (stmt_interesting_for_vrp (stmt))\n \t{\n+\t  edge taken_edge;\n \t  value_range vr = VR_INITIALIZER;\n \t  extract_range_from_stmt (stmt, &taken_edge, &output, &vr);\n \t  if (output\n \t      && (vr.type == VR_RANGE || vr.type == VR_ANTI_RANGE))\n-\t    update_value_range (output, &vr);\n-\t  else\n-\t    set_defs_to_varying (stmt);\n+\t    {\n+\t      update_value_range (output, &vr);\n+\t      vr = *get_value_range (output);\n \n-\t  /* Try folding stmts with the VR discovered.  */\n-\t  bool did_replace\n-\t    = replace_uses_in (stmt,\n-\t\t\t       op_with_constant_singleton_value_range);\n-\t  if (fold_stmt (&gsi, follow_single_use_edges)\n-\t      || did_replace)\n-\t    update_stmt (gsi_stmt (gsi));\n \n-\t  if (did_replace)\n-\t    {\n-\t      /* If we cleaned up EH information from the statement,\n-\t\t remove EH edges.  */\n-\t      if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n-\t\tbitmap_set_bit (need_eh_cleanup, bb->index);\n-\n-\t      /* If we turned a not noreturn call into a noreturn one\n-\t\t schedule it for fixup.  */\n-\t      if (!was_noreturn\n-\t\t  && is_gimple_call (stmt)\n-\t\t  && gimple_call_noreturn_p (stmt))\n-\t\tstmts_to_fixup.safe_push (stmt);\n-\n-\t      if (gimple_assign_single_p (stmt))\n+\t      /* Set the SSA with the value range.  */\n+\t      if (INTEGRAL_TYPE_P (TREE_TYPE (output)))\n \t\t{\n-\t\t  tree rhs = gimple_assign_rhs1 (stmt);\n-\t\t  if (TREE_CODE (rhs) == ADDR_EXPR)\n-\t\t    recompute_tree_invariant_for_addr_expr (rhs);\n+\t\t  if ((vr.type == VR_RANGE\n+\t\t       || vr.type == VR_ANTI_RANGE)\n+\t\t      && (TREE_CODE (vr.min) == INTEGER_CST)\n+\t\t      && (TREE_CODE (vr.max) == INTEGER_CST))\n+\t\t    set_range_info (output, vr.type, vr.min, vr.max);\n \t\t}\n+\t      else if (POINTER_TYPE_P (TREE_TYPE (output))\n+\t\t       && ((vr.type == VR_RANGE\n+\t\t\t    && range_includes_zero_p (vr.min,\n+\t\t\t\t\t\t      vr.max) == 0)\n+\t\t\t   || (vr.type == VR_ANTI_RANGE\n+\t\t\t       && range_includes_zero_p (vr.min,\n+\t\t\t\t\t\t\t vr.max) == 1)))\n+\t\tset_ptr_nonnull (output);\n \t    }\n+\t  else\n+\t    set_defs_to_varying (stmt);\n+\t}\n+      else\n+\tset_defs_to_varying (stmt);\n+\n+      /* Try folding stmts with the VR discovered.  */\n+      bool did_replace\n+\t= replace_uses_in (stmt, op_with_constant_singleton_value_range);\n+      if (fold_stmt (&gsi, follow_single_use_edges)\n+\t  || did_replace)\n+\tupdate_stmt (gsi_stmt (gsi));\n+\n+      if (did_replace)\n+\t{\n+\t  /* If we cleaned up EH information from the statement,\n+\t     remove EH edges.  */\n+\t  if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n+\t    bitmap_set_bit (need_eh_cleanup, bb->index);\n \n-\t  def_operand_p def_p = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_DEF);\n-\t  /* Set the SSA with the value range.  */\n-\t  if (def_p\n-\t      && TREE_CODE (DEF_FROM_PTR (def_p)) == SSA_NAME)\n+\t  /* If we turned a not noreturn call into a noreturn one\n+\t     schedule it for fixup.  */\n+\t  if (!was_noreturn\n+\t      && is_gimple_call (stmt)\n+\t      && gimple_call_noreturn_p (stmt))\n+\t    stmts_to_fixup.safe_push (stmt);\n+\n+\t  if (gimple_assign_single_p (stmt))\n \t    {\n-\t      tree def = DEF_FROM_PTR (def_p);\n-\t      value_range *vr = get_value_range (def);\n-\n-\t      if (INTEGRAL_TYPE_P (TREE_TYPE (DEF_FROM_PTR (def_p)))\n-\t\t  && (vr->type == VR_RANGE\n-\t\t      || vr->type == VR_ANTI_RANGE)\n-\t\t  && (TREE_CODE (vr->min) == INTEGER_CST)\n-\t\t  && (TREE_CODE (vr->max) == INTEGER_CST))\n-\t\tset_range_info (def, vr->type, vr->min, vr->max);\n-\t      else if (POINTER_TYPE_P (TREE_TYPE (DEF_FROM_PTR (def_p)))\n-\t\t       && ((vr->type == VR_RANGE\n-\t\t\t    && range_includes_zero_p (vr->min,\n-\t\t\t\t\t\t      vr->max) == 0)\n-\t\t\t   || (vr->type == VR_ANTI_RANGE\n-\t\t\t       && range_includes_zero_p (vr->min,\n-\t\t\t\t\t\t\t vr->max) == 1)))\n-\t\tset_ptr_nonnull (def);\n+\t      tree rhs = gimple_assign_rhs1 (stmt);\n+\t      if (TREE_CODE (rhs) == ADDR_EXPR)\n+\t\trecompute_tree_invariant_for_addr_expr (rhs);\n \t    }\n \t}\n-      else\n-\tset_defs_to_varying (stmt);\n     }\n   bb->flags |= BB_VISITED;\n-  return NULL;\n+\n+  return taken_edge;\n }\n \n /* Restore/pop VRs valid only for BB when we leave BB.  */"}]}