{"sha": "dc6a0b2d949256fbdcdc7301044067e2cf45289f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2YTBiMmQ5NDkyNTZmYmRjZGM3MzAxMDQ0MDY3ZTJjZjQ1Mjg5Zg==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gandalf@gcc.gnu.org", "date": "2009-02-25T21:40:28Z"}, "committer": {"name": "Andrew John Hughes", "email": "gandalf@gcc.gnu.org", "date": "2009-02-25T21:40:28Z"}, "message": "Sync libgcj with GNU Classpath 0.98.\n\n2009-02-13  Andrew John Hughes  <ahughes@redhat.com>\n\n\tImport GNU Classpath (classpath-0_98-release).\n\n\t* Makefile.am: Add natVMSecureRandom.cc.\n\t* Makefile.in: Regenerated.\n\t* classpath/ChangeLog,\n\t* classpath/Makefile.am: Merged.\n\t* classpath/Makefile.in: Regenerated.\n\t* classpath/NEWS: Merged.\n\t* classpath/config.guess,\n\t* classpath/config.sub,\n\t* classpath/configure: Regenerated.\n\t* classpath/configure.ac: Merged.\n\t* classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java,\n\t* classpath/gnu/java/security/jce/prng/SecureRandomAdapter.java,\n\t* classpath/gnu/javax/crypto/jce/prng/ARCFourRandomSpi.java,\n\t* classpath/gnu/javax/crypto/jce/prng/CSPRNGSpi.java,\n\t* classpath/gnu/javax/crypto/jce/prng/FortunaImpl.java,\n\t* classpath/gnu/javax/crypto/jce/prng/ICMRandomSpi.java,\n\t* classpath/gnu/javax/crypto/jce/prng/UMacRandomSpi.java,\n\t* classpath/gnu/javax/crypto/prng/ICMGenerator.java,\n\t* classpath/gnu/xml/stream/XMLParser.java,\n\t* classpath/java/security/SecureRandom.java,\n\t* classpath/native/jni/native-lib/cpproc.c,\n\t* classpath/native/plugin/gcjwebplugin.cc,\n\t* classpath/tools/gnu/classpath/tools/gjdoc/Main.java: Merged.\n\t* configure: Regenerated.\n\t* configure.ac: Add symlink for natVMSecureRandomPosix.cc to natVMSecureRandom.cc\n\t* gnu/classpath/Configuration.java: Change version to 0.98.\n\t* gnu/java/security/jce/prng/SecureRandomAdapter.h: Regenerated.\n\t* gnu/java/security/jce/prng/VMSecureRandom.h: Generated.\n\t* gnu/java/security/jce/prng/VMSecureRandom.java: Added native implementation.\n\t* gnu/java/security/jce/prng/natVMSecureRandomPosix.cc: Wrapper around /dev/random.\n\t* gnu/javax/crypto/jce/prng/CSPRNGSpi.h,\n\t* gnu/javax/crypto/jce/prng/FortunaImpl.h,\n\t* java/security/SecureRandom.h: Regenerated.\n\t* java/security/VMSecureRandom$Spinner.h,\n\t* java/security/VMSecureRandom.h,\n\t* java/security/VMSecureRandom.java: Removed.\n\t* sources.am: Move VMSecureRandom to gnu.java.security.jce.prng.\n\nFrom-SVN: r144434", "tree": {"sha": "2c27a4aaca5b8d4062c3ad863f71e3765d25905e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c27a4aaca5b8d4062c3ad863f71e3765d25905e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6a0b2d949256fbdcdc7301044067e2cf45289f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6a0b2d949256fbdcdc7301044067e2cf45289f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6a0b2d949256fbdcdc7301044067e2cf45289f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6a0b2d949256fbdcdc7301044067e2cf45289f/comments", "author": null, "committer": null, "parents": [{"sha": "a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9"}], "stats": {"total": 861, "additions": 612, "deletions": 249}, "files": [{"sha": "4eab8c23820640e5a63defdd5aea077c828a73a7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1,3 +1,45 @@\n+2009-02-13  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\tImport GNU Classpath (classpath-0_98-release).\n+\n+\t* Makefile.am: Add natVMSecureRandom.cc.\n+\t* Makefile.in: Regenerated.\n+\t* classpath/ChangeLog,\n+\t* classpath/Makefile.am: Merged.\n+\t* classpath/Makefile.in: Regenerated.\n+\t* classpath/NEWS: Merged.\n+\t* classpath/config.guess,\n+\t* classpath/config.sub,\n+\t* classpath/configure: Regenerated.\n+\t* classpath/configure.ac: Merged.\n+\t* classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java,\n+\t* classpath/gnu/java/security/jce/prng/SecureRandomAdapter.java,\n+\t* classpath/gnu/javax/crypto/jce/prng/ARCFourRandomSpi.java,\n+\t* classpath/gnu/javax/crypto/jce/prng/CSPRNGSpi.java,\n+\t* classpath/gnu/javax/crypto/jce/prng/FortunaImpl.java,\n+\t* classpath/gnu/javax/crypto/jce/prng/ICMRandomSpi.java,\n+\t* classpath/gnu/javax/crypto/jce/prng/UMacRandomSpi.java,\n+\t* classpath/gnu/javax/crypto/prng/ICMGenerator.java,\n+\t* classpath/gnu/xml/stream/XMLParser.java,\n+\t* classpath/java/security/SecureRandom.java,\n+\t* classpath/native/jni/native-lib/cpproc.c,\n+\t* classpath/native/plugin/gcjwebplugin.cc,\n+\t* classpath/tools/gnu/classpath/tools/gjdoc/Main.java: Merged.\n+\t* configure: Regenerated.\n+\t* configure.ac: Add symlink for natVMSecureRandomPosix.cc to natVMSecureRandom.cc\n+\t* gnu/classpath/Configuration.java: Change version to 0.98.\n+\t* gnu/java/security/jce/prng/SecureRandomAdapter.h: Regenerated.\n+\t* gnu/java/security/jce/prng/VMSecureRandom.h: Generated.\n+\t* gnu/java/security/jce/prng/VMSecureRandom.java: Added native implementation.\n+\t* gnu/java/security/jce/prng/natVMSecureRandomPosix.cc: Wrapper around /dev/random.\n+\t* gnu/javax/crypto/jce/prng/CSPRNGSpi.h,\n+\t* gnu/javax/crypto/jce/prng/FortunaImpl.h,\n+\t* java/security/SecureRandom.h: Regenerated.\n+\t* java/security/VMSecureRandom$Spinner.h,\n+\t* java/security/VMSecureRandom.h,\n+\t* java/security/VMSecureRandom.java: Removed.\n+\t* sources.am: Move VMSecureRandom to gnu.java.security.jce.prng.\n+\n 2009-02-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.am (AM_MAKEFLAGS): Pass down datadir."}, {"sha": "496858968789b4c8b70ab48f59cb096b5ea07271", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1091,6 +1091,7 @@ gnu/java/nio/natVMSelector.cc \\\n gnu/java/nio/natNIOServerSocket.cc \\\n gnu/java/nio/natVMChannel.cc \\\n gnu/java/nio/channels/natFileChannelImpl.cc \\\n+gnu/java/security/jce/prng/natVMSecureRandom.cc \\\n java/io/natFile.cc \\\n java/io/natVMObjectInputStream.cc \\\n java/io/natVMObjectStreamClass.cc \\"}, {"sha": "c7b22721c7f3bdaffe1054458d4119dcd5a16ed7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -117,7 +117,8 @@ CONFIG_CLEAN_FILES = libgcj.pc libgcj.spec libgcj-test.spec \\\n \tgnu/java/net/natPlainSocketImpl.cc \\\n \tgnu/java/net/natPlainDatagramSocketImpl.cc \\\n \tgnu/java/nio/natVMPipe.cc gnu/java/nio/natVMSelector.cc \\\n-\tgnu/java/nio/channels/natFileChannelImpl.cc sysdep/locks.h \\\n+\tgnu/java/nio/channels/natFileChannelImpl.cc \\\n+\tgnu/java/security/jce/prng/natVMSecureRandom.cc sysdep/locks.h \\\n \tsysdep/backtrace.h sysdep/descriptor.h\n am__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\n am__vpath_adj = case $$p in \\\n@@ -342,8 +343,9 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/java/nio/natVMPipe.cc gnu/java/nio/natVMSelector.cc \\\n \tgnu/java/nio/natNIOServerSocket.cc \\\n \tgnu/java/nio/natVMChannel.cc \\\n-\tgnu/java/nio/channels/natFileChannelImpl.cc java/io/natFile.cc \\\n-\tjava/io/natVMObjectInputStream.cc \\\n+\tgnu/java/nio/channels/natFileChannelImpl.cc \\\n+\tgnu/java/security/jce/prng/natVMSecureRandom.cc \\\n+\tjava/io/natFile.cc java/io/natVMObjectInputStream.cc \\\n \tjava/io/natVMObjectStreamClass.cc java/lang/natCharacter.cc \\\n \tjava/lang/natClass.cc java/lang/natClassLoader.cc \\\n \tjava/lang/natConcreteProcess.cc java/lang/natVMDouble.cc \\\n@@ -406,8 +408,9 @@ am__objects_5 = $(am__objects_3) gnu/classpath/natConfiguration.lo \\\n \tgnu/java/nio/natVMPipe.lo gnu/java/nio/natVMSelector.lo \\\n \tgnu/java/nio/natNIOServerSocket.lo \\\n \tgnu/java/nio/natVMChannel.lo \\\n-\tgnu/java/nio/channels/natFileChannelImpl.lo java/io/natFile.lo \\\n-\tjava/io/natVMObjectInputStream.lo \\\n+\tgnu/java/nio/channels/natFileChannelImpl.lo \\\n+\tgnu/java/security/jce/prng/natVMSecureRandom.lo \\\n+\tjava/io/natFile.lo java/io/natVMObjectInputStream.lo \\\n \tjava/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n \tjava/lang/natClass.lo java/lang/natClassLoader.lo \\\n \tjava/lang/natConcreteProcess.lo java/lang/natVMDouble.lo \\\n@@ -2267,6 +2270,7 @@ classpath/gnu/java/security/jce/prng/Sha256RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/Sha384RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/Sha512RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/TigerRandomSpi.java \\\n+gnu/java/security/jce/prng/VMSecureRandom.java \\\n classpath/gnu/java/security/jce/prng/WhirlpoolRandomSpi.java\n \n gnu_java_security_jce_prng_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_java_security_jce_prng_source_files)))\n@@ -4748,8 +4752,7 @@ classpath/java/security/Signer.java \\\n classpath/java/security/UnrecoverableKeyException.java \\\n classpath/java/security/UnresolvedPermission.java \\\n java/security/VMAccessControlState.java \\\n-java/security/VMAccessController.java \\\n-java/security/VMSecureRandom.java\n+java/security/VMAccessController.java\n \n java_security_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(java_security_source_files)))\n java_security_acl_source_files = \\\n@@ -8513,6 +8516,7 @@ gnu/java/nio/natVMSelector.cc \\\n gnu/java/nio/natNIOServerSocket.cc \\\n gnu/java/nio/natVMChannel.cc \\\n gnu/java/nio/channels/natFileChannelImpl.cc \\\n+gnu/java/security/jce/prng/natVMSecureRandom.cc \\\n java/io/natFile.cc \\\n java/io/natVMObjectInputStream.cc \\\n java/io/natVMObjectStreamClass.cc \\\n@@ -9006,6 +9010,15 @@ gnu/java/nio/channels/$(DEPDIR)/$(am__dirstamp):\n gnu/java/nio/channels/natFileChannelImpl.lo:  \\\n \tgnu/java/nio/channels/$(am__dirstamp) \\\n \tgnu/java/nio/channels/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/security/jce/prng/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/java/security/jce/prng\n+\t@: > gnu/java/security/jce/prng/$(am__dirstamp)\n+gnu/java/security/jce/prng/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/java/security/jce/prng/$(DEPDIR)\n+\t@: > gnu/java/security/jce/prng/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/security/jce/prng/natVMSecureRandom.lo:  \\\n+\tgnu/java/security/jce/prng/$(am__dirstamp) \\\n+\tgnu/java/security/jce/prng/$(DEPDIR)/$(am__dirstamp)\n java/io/$(am__dirstamp):\n \t@$(mkdir_p) java/io\n \t@: > java/io/$(am__dirstamp)\n@@ -9471,6 +9484,8 @@ mostlyclean-compile:\n \t-rm -f gnu/java/nio/natVMPipe.lo\n \t-rm -f gnu/java/nio/natVMSelector.$(OBJEXT)\n \t-rm -f gnu/java/nio/natVMSelector.lo\n+\t-rm -f gnu/java/security/jce/prng/natVMSecureRandom.$(OBJEXT)\n+\t-rm -f gnu/java/security/jce/prng/natVMSecureRandom.lo\n \t-rm -f java/io/natFile.$(OBJEXT)\n \t-rm -f java/io/natFile.lo\n \t-rm -f java/io/natVMObjectInputStream.$(OBJEXT)\n@@ -9645,6 +9660,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/nio/$(DEPDIR)/natVMPipe.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/nio/$(DEPDIR)/natVMSelector.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/nio/channels/$(DEPDIR)/natFileChannelImpl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/security/jce/prng/$(DEPDIR)/natVMSecureRandom.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/io/$(DEPDIR)/natFile.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/io/$(DEPDIR)/natVMObjectInputStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/io/$(DEPDIR)/natVMObjectStreamClass.Plo@am__quote@\n@@ -9951,6 +9967,7 @@ clean-libtool:\n \t-rm -rf gnu/java/net/protocol/core/.libs gnu/java/net/protocol/core/_libs\n \t-rm -rf gnu/java/nio/.libs gnu/java/nio/_libs\n \t-rm -rf gnu/java/nio/channels/.libs gnu/java/nio/channels/_libs\n+\t-rm -rf gnu/java/security/jce/prng/.libs gnu/java/security/jce/prng/_libs\n \t-rm -rf java/io/.libs java/io/_libs\n \t-rm -rf java/lang/.libs java/lang/_libs\n \t-rm -rf java/lang/ref/.libs java/lang/ref/_libs\n@@ -10359,6 +10376,8 @@ distclean-generic:\n \t-rm -f gnu/java/nio/$(am__dirstamp)\n \t-rm -f gnu/java/nio/channels/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/java/nio/channels/$(am__dirstamp)\n+\t-rm -f gnu/java/security/jce/prng/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/java/security/jce/prng/$(am__dirstamp)\n \t-rm -f java/io/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f java/io/$(am__dirstamp)\n \t-rm -f java/lang/$(DEPDIR)/$(am__dirstamp)\n@@ -10400,7 +10419,7 @@ clean-am: clean-binPROGRAMS clean-dbexecLTLIBRARIES clean-generic \\\n \n distclean: distclean-multi distclean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n-\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/security/jce/prng/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)\n \t-rm -f Makefile\n distclean-am: clean-am distclean-compile distclean-generic \\\n \tdistclean-libtool distclean-local distclean-tags\n@@ -10433,7 +10452,7 @@ installcheck-am:\n maintainer-clean: maintainer-clean-multi maintainer-clean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n \t-rm -rf $(top_srcdir)/autom4te.cache\n-\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/security/jce/prng/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)\n \t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n "}, {"sha": "169c2f64c7bf8bcb858da17910cdee5631ad7664", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1,10 +1,96 @@\n+2009-02-05  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\t* NEWS: Add VM updates.\n+\t\n+2009-02-05  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\t* NEWS: Updated.\n+\t* configure.ac:\n+\tBump to 0.98 proper.\n+\n 2009-02-05  Andrew Haley  <aph@redhat.com>\n \n+\tPR libgcj/38861\n \t* native/plugin/gcjwebplugin.cc: Cope with the changed header file\n \tformat.  https://bugzilla.mozilla.org/show_bug.cgi?id=455458\n \t(GCJ_GetJavaClass): Likewise.\n \t(NP_Initialize): Likewise.\n \n+2009-02-05  Mark Wielaard  <mark@klomp.org>\n+\n+\tPR classpath/38912:\n+\t* gnu/xml/stream/XMLParser.java:\n+\t(getLocalName()): Respect stringInterning.\n+\t(getName()): Likewise.\n+\t(getPrefix()): Likewise.\n+\n+2009-02-04  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\t* native/jni/native-lib/cpproc.c:\n+\t(cpproc_forkAndExec): Don't return on a -1\n+\tresult from chdir as this may be valid in\n+\tsome cases.  A better fix is needed.\n+\t\n+2009-02-03  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\t* native/jni/native-lib/cpproc.c:\n+\t(cpproc_forkAndExec): Handle return of\n+\tchdir.\n+\t\n+2009-02-03  Andrew John Hughes  <ahughes@redhat.com>\n+\n+\tPR classpath/38417:\n+\t* gnu/java/security/jce/prng/SecureRandomAdapter.java:\n+\tRemove unneeded import.\n+\t* gnu/javax/crypto/jce/prng/FortunaImpl.java:\n+\tFix typo.\n+\t* java/security/SecureRandom.java:\n+\tRemove duplicate use of VMSecureRandom,\n+\tcall SecureRandomAdapter instead.\n+\t* vm/reference/gnu/java/security/jce/prng/VMSecureRandom.java:\n+\tMoved from java/security so SecureRandomAdapter can\n+\taccess it.\n+\n+2009-01-22  Mario Torre  <neugens@aicas.com>\n+\n+\tPR classpath/38417:\n+\t* gnu/java/security/jce/prng/SecureRandomAdapter.java:\n+\t(getSeed(int)): New; retrieve seed from source specified\n+\tby securerandom.source property or failing that, use\n+\tVMSecureRandom.\n+\t* gnu/javax/crypto/jce/prng/ARCFourRandomSpi.java:\n+\t(engineGenerateSeed(int)): Use SecureRandomAdapter.\n+\t(engineNextBytes(byte[])): Initialise using new seed.\n+\t* gnu/javax/crypto/jce/prng/CSPRNGSpi.java:\n+\t(engineGenerateSeed(int)): Use SecureRandomAdapter.\n+\t(engineNextBytes(byte[])): Initialise using new seed.\n+\t* gnu/javax/crypto/jce/prng/FortunaImpl.java:\n+\t(engineSetSeed(byte[])): Initialise with new seed if unused.\n+\t(engineGenerateSeed(int)): Use SecureRandomAdapter.\t\n+\t* gnu/javax/crypto/jce/prng/ICMRandomSpi.java:\n+\t(engineGenerateSeed(int)): Use SecureRandomAdapter.\t\n+\t(engineNextBytes(byte[])): Initialise using new seed.\n+\t* gnu/javax/crypto/jce/prng/UMacRandomSpi.java:\n+\t(engineGenerateSeed(int)): Use SecureRandomAdapter.\t\n+\t(engineNextBytes(byte[])): Initialise using new seed.\n+\t* gnu/javax/crypto/prng/ICMGenerator.java:\n+\t(setup(Map)): Call fillBlock().\n+\n+2009-01-22  Mark Wielaard  <mark@klomp.org>\n+\n+\t* tools/gnu/classpath/tools/gjdoc/Main.java (getGjdocVersion):\n+\tRead version.properties from package.\n+\n+2009-01-05  Robert Schuster  <robertschuster@fsfe.org>\n+\n+\t* gnu/java/awt/peer/gtk/CairoGraphics2D.java:\n+\t(drawPolyline): Rewritten.\n+\n+2009-01-05  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* Makefile.am:\n+\tAdd ChangeLog-2008 to EXTRA_DIST.\n+\t\n 2009-01-02  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n \n \t* ChangeLog-2008: New file."}, {"sha": "454b2e9602363c44be385ddaffb34e9e56ae338c", "filename": "libjava/classpath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FMakefile.am?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -14,7 +14,7 @@ native: lib\n EXTRA_DIST = HACKING BUGS THANKYOU mauve-classpath LICENSE ChangeLog-2007 \\\n              ChangeLog-2003 ChangeLog-2004 ChangeLog-2005 ChangeLog-2006 \\\n              ChangeLog.gnujaxp.1 ChangeLog.gnujaxp.2 ChangeLog.libxmlj \\\n-\t     autogen.sh\n+\t     autogen.sh ChangeLog-2008\n \n DISTCHECK_CONFIGURE_FLAGS = --with-gjdoc --enable-gstreamer-peer \\\n \t--enable-xmlj --enable-qt-peer"}, {"sha": "35f1dd788e51268eeea4900920401ca250376f59", "filename": "libjava/classpath/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FMakefile.in?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -395,7 +395,7 @@ ACLOCAL_AMFLAGS = -I m4 -I ../.. -I ../../config ${LOCAL_AUTORECONF_FLAGS}\n EXTRA_DIST = HACKING BUGS THANKYOU mauve-classpath LICENSE ChangeLog-2007 \\\n              ChangeLog-2003 ChangeLog-2004 ChangeLog-2005 ChangeLog-2006 \\\n              ChangeLog.gnujaxp.1 ChangeLog.gnujaxp.2 ChangeLog.libxmlj \\\n-\t     autogen.sh\n+\t     autogen.sh ChangeLog-2008\n \n DISTCHECK_CONFIGURE_FLAGS = --with-gjdoc --enable-gstreamer-peer \\\n \t--enable-xmlj --enable-qt-peer"}, {"sha": "4ae10d710d9348fe4157bc9a605ab8529bd159b7", "filename": "libjava/classpath/NEWS", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FNEWS?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1,4 +1,4 @@\n-New in release 0.98\n+New in release 0.98 (Feb 05, 2009)\n \n * Native support for BigInteger is now provided using the GMP\n library.  A new option, --enable/disable-gmp is provided, and\n@@ -11,8 +11,41 @@ always retain their own array, which is only altered during resizing,\n CPStringBuilder gives away its array when the result is generated\n by toString()/substring() and starts afresh.  The default capacity of\n CPStringBuilder can also be configured using the\n-gnu.classpath.cpstringbuilder.capacity property.\n+gnu.classpath.cpstringbuilder.capacity property. (PR21869)\n * gjdoc is now built as part of tools.zip.\n+* Import of the Java Activation Framework from ClasspathX to provide\n+javax.activation (part of 1.6).\n+* Preliminary version of java.util.Scanner (PR30436)\n+* Reduce cost of ThreadLocal(s) to improve Jython performance (PR33690)\n+* Updated to use CLDR 1.5.1 (PR35237)\n+* Many bug fixes including:\n+  - PR22851: zoneStrings in gnu/java/locale/LocaleInformation*\n+  - PR31895: setCurrency(Currency) does not actually change the currency.\n+  - PR32028: Make fails at gjdoc\n+  - PR34840: Mismatch between Sun and Classpath's java.lang.Appendable\n+  - PR35487: gcj causes ConcurrentModificationException during tomcat5\n+  - PR35690: javax.tools.FileObject.toUri is in wrong case\n+  - PR36085: java.util.regex escape-sequence handling \n+  - PR36147: Apache Tomcat fails to read descriptors using GNU XML\n+  - PR36219: gnu.xml.transform.SortKey isn't subclass\n+  - PR36220: NPEs in gnu.xml.transform.* clone methods \n+  - PR36221: DomDOMException running SPEC jvm 2008 xml.transform\n+  - PR36477: OOME in CPStringBuilder when running Eclipse\n+  - PR36522: Policy file is not read at all\n+  - PR36636: gjar -u doesn't work\n+  - PR36637: --without-fastjar doesn't wor\n+  - PR36677: Omission bug in JDWP VirtualMachineCommandSet \n+  - PR38417: gnu.java.security.util.PRNG produces easily predictable values\n+  - PR38473: Segmentation fault in retrieving font outline decomposition \n+  - PR38861: Support XULRunner 1.9.1.\n+  - PR38912: XMLParser not interning element names \n+\n+Runtime interface changes:\n+\n+  * VMSecureRandom has moved to gnu.java.security.jce.prng.VMSecureRandom\n+  as part of the fix for PR38417.\n+  * gnu.java.lang.VMCPStringBuilder has been added and should be added to\n+  avoid the inefficency of reflection when creating non-copied String objects.\n \n Bug fixes in release 0.97.2 (Jun 06, 2007)\n "}, {"sha": "aeb53233ecbee901697c4a833dd7dc1aca3b77fd", "filename": "libjava/classpath/config.guess", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfig.guess", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfig.guess", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfig.guess?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -4,7 +4,7 @@\n #   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n #   Free Software Foundation, Inc.\n \n-timestamp='2008-04-14'\n+timestamp='2008-12-18'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -331,7 +331,20 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\techo i386-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\teval $set_cc_for_build\n+\tSUN_ARCH=\"i386\"\n+\t# If there is a compiler, see if it is configured for 64-bit objects.\n+\t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n+\t# This test works for both compilers.\n+\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n+\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\tgrep IS_64BIT_ARCH >/dev/null\n+\t    then\n+\t\tSUN_ARCH=\"x86_64\"\n+\t    fi\n+\tfi\n+\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n@@ -796,7 +809,7 @@ EOF\n \t    x86)\n \t\techo i586-pc-interix${UNAME_RELEASE}\n \t\texit ;;\n-\t    EM64T | authenticamd)\n+\t    EM64T | authenticamd | genuineintel)\n \t\techo x86_64-unknown-interix${UNAME_RELEASE}\n \t\texit ;;\n \t    IA64)\n@@ -935,6 +948,9 @@ EOF\n \tif test \"$?\" = 0 ; then LIBC=\"libc1\" ; else LIBC=\"\" ; fi\n \techo ${UNAME_MACHINE}-unknown-linux-gnu${LIBC}\n \texit ;;\n+    padre:Linux:*:*)\n+\techo sparc-unknown-linux-gnu\n+\texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in"}, {"sha": "9489dc7867b2850efa0907b6a625fdc143761fe9", "filename": "libjava/classpath/config.sub", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfig.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfig.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfig.sub?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -4,7 +4,7 @@\n #   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n #   Free Software Foundation, Inc.\n \n-timestamp='2008-04-14'\n+timestamp='2008-12-11'\n \n # This file is (in principle) common to ALL GNU software.\n # The presence of a machine in this file suggests that SOME GNU software\n@@ -249,6 +249,7 @@ case $basic_machine in\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| i370 | i860 | i960 | ia64 \\\n \t| ip2k | iq2000 \\\n+\t| lm32 \\\n \t| m32c | m32r | m32rle | m68000 | m68k | m88k \\\n \t| maxq | mb | microblaze | mcore | mep | metag \\\n \t| mips | mipsbe | mipseb | mipsel | mipsle \\\n@@ -279,7 +280,7 @@ case $basic_machine in\n \t| powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \\\n \t| pyramid \\\n \t| score \\\n-\t| sh | sh[1234] | sh[24]a | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n+\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n \t| sh64 | sh64le \\\n \t| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \\\n \t| sparcv8 | sparcv9 | sparcv9b | sparcv9v \\\n@@ -288,7 +289,7 @@ case $basic_machine in\n \t| v850 | v850e \\\n \t| we32k \\\n \t| x86 | xc16x | xscale | xscalee[bl] | xstormy16 | xtensa \\\n-\t| z8k)\n+\t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n \t\t;;\n \tm6811 | m68hc11 | m6812 | m68hc12)\n@@ -331,6 +332,7 @@ case $basic_machine in\n \t| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\\n \t| i*86-* | i860-* | i960-* | ia64-* \\\n \t| ip2k-* | iq2000-* \\\n+\t| lm32-* \\\n \t| m32c-* | m32r-* | m32rle-* \\\n \t| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \\\n \t| m88110-* | m88k-* | maxq-* | mcore-* | metag-* \\\n@@ -362,7 +364,7 @@ case $basic_machine in\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \\\n \t| pyramid-* \\\n \t| romp-* | rs6000-* \\\n-\t| sh-* | sh[1234]-* | sh[24]a-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \\\n+\t| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \\\n \t| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\\n \t| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \\\n \t| sparclite-* \\\n@@ -375,7 +377,7 @@ case $basic_machine in\n \t| x86-* | x86_64-* | xc16x-* | xps100-* | xscale-* | xscalee[bl]-* \\\n \t| xstormy16-* | xtensa*-* \\\n \t| ymp-* \\\n-\t| z8k-*)\n+\t| z8k-* | z80-*)\n \t\t;;\n \t# Recognize the basic CPU types without company name, with glob match.\n \txtensa*)\n@@ -463,6 +465,10 @@ case $basic_machine in\n \t\tbasic_machine=c90-cray\n \t\tos=-unicos\n \t\t;;\n+        cegcc)\n+\t\tbasic_machine=arm-unknown\n+\t\tos=-cegcc\n+\t\t;;\n \tconvex-c1)\n \t\tbasic_machine=c1-convex\n \t\tos=-bsd\n@@ -1136,6 +1142,10 @@ case $basic_machine in\n \t\tbasic_machine=z8k-unknown\n \t\tos=-sim\n \t\t;;\n+\tz80-*-coff)\n+\t\tbasic_machine=z80-unknown\n+\t\tos=-sim\n+\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1174,7 +1184,7 @@ case $basic_machine in\n \twe32k)\n \t\tbasic_machine=we32k-att\n \t\t;;\n-\tsh[1234] | sh[24]a | sh[34]eb | sh[1234]le | sh[23]ele)\n+\tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n \tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n@@ -1256,7 +1266,7 @@ case $os in\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n \t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n-\t      | -chorusos* | -chorusrdb* \\\n+\t      | -chorusos* | -chorusrdb* | -cegcc* \\\n \t      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n \t      | -mingw32* | -linux-gnu* | -linux-newlib* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* \\"}, {"sha": "8f520cdcf53dc5810f1ba4af4feefc33fa879eda", "filename": "libjava/classpath/configure", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfigure?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1,6 +1,6 @@\n #! /bin/sh\n # Guess values for system-dependent variables and create Makefiles.\n-# Generated by GNU Autoconf 2.59 for GNU Classpath 0.98-pre.\n+# Generated by GNU Autoconf 2.59 for GNU Classpath 0.98.\n #\n # Report bugs to <classpath@gnu.org>.\n #\n@@ -418,8 +418,8 @@ SHELL=${CONFIG_SHELL-/bin/sh}\n # Identity of this package.\n PACKAGE_NAME='GNU Classpath'\n PACKAGE_TARNAME='classpath'\n-PACKAGE_VERSION='0.98-pre'\n-PACKAGE_STRING='GNU Classpath 0.98-pre'\n+PACKAGE_VERSION='0.98'\n+PACKAGE_STRING='GNU Classpath 0.98'\n PACKAGE_BUGREPORT='classpath@gnu.org'\n \n ac_unique_file=\"java/lang/System.java\"\n@@ -943,7 +943,7 @@ if test \"$ac_init_help\" = \"long\"; then\n   # Omit some internal or obsolete options to make the list less imposing.\n   # This message is too long to be a string in the A/UX 3.1 sh.\n   cat <<_ACEOF\n-\\`configure' configures GNU Classpath 0.98-pre to adapt to many kinds of systems.\n+\\`configure' configures GNU Classpath 0.98 to adapt to many kinds of systems.\n \n Usage: $0 [OPTION]... [VAR=VALUE]...\n \n@@ -1014,7 +1014,7 @@ fi\n \n if test -n \"$ac_init_help\"; then\n   case $ac_init_help in\n-     short | recursive ) echo \"Configuration of GNU Classpath 0.98-pre:\";;\n+     short | recursive ) echo \"Configuration of GNU Classpath 0.98:\";;\n    esac\n   cat <<\\_ACEOF\n \n@@ -1231,7 +1231,7 @@ fi\n test -n \"$ac_init_help\" && exit 0\n if $ac_init_version; then\n   cat <<\\_ACEOF\n-GNU Classpath configure 0.98-pre\n+GNU Classpath configure 0.98\n generated by GNU Autoconf 2.59\n \n Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -1245,7 +1245,7 @@ cat >&5 <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n \n-It was created by GNU Classpath $as_me 0.98-pre, which was\n+It was created by GNU Classpath $as_me 0.98, which was\n generated by GNU Autoconf 2.59.  Invocation command line was\n \n   $ $0 $@\n@@ -2117,7 +2117,7 @@ fi\n \n # Define the identity of the package.\n  PACKAGE='classpath'\n- VERSION='0.98-pre'\n+ VERSION='0.98'\n \n \n cat >>confdefs.h <<_ACEOF\n@@ -30773,7 +30773,7 @@ _ASBOX\n } >&5\n cat >&5 <<_CSEOF\n \n-This file was extended by GNU Classpath $as_me 0.98-pre, which was\n+This file was extended by GNU Classpath $as_me 0.98, which was\n generated by GNU Autoconf 2.59.  Invocation command line was\n \n   CONFIG_FILES    = $CONFIG_FILES\n@@ -30839,7 +30839,7 @@ _ACEOF\n \n cat >>$CONFIG_STATUS <<_ACEOF\n ac_cs_version=\"\\\\\n-GNU Classpath config.status 0.98-pre\n+GNU Classpath config.status 0.98\n configured by $0, generated by GNU Autoconf 2.59,\n   with options \\\\\"`echo \"$ac_configure_args\" | sed 's/[\\\\\"\"\\`\\$]/\\\\\\\\&/g'`\\\\\"\n "}, {"sha": "faf3ab7ce363507110d06de79ef94b13c9e1eac7", "filename": "libjava/classpath/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfigure.ac?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -6,7 +6,7 @@ dnl -----------------------------------------------------------\n dnl define([AC_CACHE_LOAD], )dnl\n dnl define([AC_CACHE_SAVE], )dnl\n \n-AC_INIT([GNU Classpath],[0.98-pre],[classpath@gnu.org],[classpath])\n+AC_INIT([GNU Classpath],[0.98],[classpath@gnu.org],[classpath])\n AC_CONFIG_SRCDIR(java/lang/System.java)\n \n dnl GCJ LOCAL"}, {"sha": "8f8d7ea8bbbf1f99146a96df88a1756362031771", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1246,7 +1246,9 @@ public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints)\n \n   public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints)\n   {\n-    draw(new Polygon(xPoints, yPoints, nPoints));\n+    for (int i = 1; i < nPoints; i++)\n+      draw(new Line2D.Double(xPoints[i - 1], yPoints[i - 1],\n+                             xPoints[i], yPoints[i]));\n   }\n \n   public void drawOval(int x, int y, int width, int height)"}, {"sha": "5877e3edb6cfd4e5110f831d4adf6acc0b0eb192", "filename": "libjava/classpath/gnu/java/security/jce/prng/SecureRandomAdapter.java", "status": "modified", "additions": 99, "deletions": 22, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -38,59 +38,135 @@\n \n package gnu.java.security.jce.prng;\n \n+import gnu.java.security.action.GetSecurityPropertyAction;\n+import gnu.classpath.SystemProperties;\n import gnu.java.security.prng.LimitReachedException;\n import gnu.java.security.prng.MDGenerator;\n \n+import java.security.AccessController;\n+import java.security.SecureRandom;\n import java.security.SecureRandomSpi;\n+\n import java.util.Collections;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n /**\n- * The implementation of a generic {@link java.security.SecureRandom} adapter\n- * class to wrap GNU PRNG instances based on Message Digest algorithms.\n- * <p>\n- * This class defines the <i>Service Provider Interface</i> (<b>SPI</b>) for\n+ * <p>The implementation of a generic {@link java.security.SecureRandom} adapter\n+ * class to wrap gnu.crypto prng instances based on Message Digest algorithms.</p>\n+ *\n+ * <p>This class defines the <i>Service Provider Interface</i> (<b>SPI</b>) for\n  * the {@link java.security.SecureRandom} class, which provides the\n- * functionality of a cryptographically strong pseudo-random number generator.\n- * <p>\n- * All the abstract methods in the {@link SecureRandomSpi} class are implemented\n- * by this class and all its sub-classes.\n+ * functionality of a cryptographically strong pseudo-random number generator.</p>\n+ *\n+ * <p>All the abstract methods in the {@link SecureRandomSpi} class are\n+ * implemented by this class and all its sub-classes.</p>\n  */\n-abstract class SecureRandomAdapter\n-    extends SecureRandomSpi\n+public abstract class SecureRandomAdapter \n+  extends SecureRandomSpi\n {\n+\n+  private boolean isSeeded = false;\n+\n   /** Our underlying prng instance. */\n   private MDGenerator adaptee = new MDGenerator();\n \n   /** The name of the message digest algorithm used by the adaptee. */\n   private String mdName;\n \n+  private static final Logger logger =\n+    Logger.getLogger(SecureRandom.class.getName());\n+\n+  private static final String SECURERANDOM_SOURCE = \"securerandom.source\";\n+  private static final String JAVA_SECURITY_EGD = \"java.security.egd\";\n+\n   /**\n-   * Trivial protected constructor.\n-   * \n+   * <p>Trivial protected constructor.</p>\n+   *\n    * @param mdName the canonical name of the underlying hash algorithm.\n    */\n   protected SecureRandomAdapter(String mdName)\n   {\n     super();\n \n     this.mdName = mdName;\n-    adaptee.init(Collections.singletonMap(MDGenerator.MD_NAME, mdName));\n+    adaptee.init (Collections.singletonMap (MDGenerator.MD_NAME, mdName));\n+  }\n+\n+  public static final byte[] getSeed(int numBytes)\n+  {  \n+    URL sourceUrl = null;\n+    String urlStr = null;\n+\n+    byte[] buffer = new byte[numBytes];\n+\n+    GetSecurityPropertyAction action =\n+      new GetSecurityPropertyAction(SECURERANDOM_SOURCE);\n+    try\n+      {\n+        urlStr = (String) AccessController.doPrivileged(action);\n+        if (urlStr != null)\n+          sourceUrl = new URL(urlStr);\n+      }\n+    catch (MalformedURLException ignored)\n+      {\n+        logger.log(Level.WARNING,\n+\t\t   SECURERANDOM_SOURCE + \" property is malformed: {0}\", \n+                   urlStr);\n+      }\n+\n+    if (sourceUrl == null)\n+      {\n+        try\n+          {\n+            urlStr = SystemProperties.getProperty(JAVA_SECURITY_EGD);\n+            if (urlStr != null)\n+              sourceUrl = new URL(urlStr);\n+          }\n+        catch (MalformedURLException mue)\n+          {\n+            logger.log(Level.WARNING,\n+\t\t       JAVA_SECURITY_EGD + \" property is malformed: {0}\",\n+                       urlStr);\n+          }\n+      }\n+\n+    if (sourceUrl != null)\n+      {\n+        try\n+          {\n+            InputStream in = sourceUrl.openStream();\n+            in.read(buffer);\n+            return buffer;\n+          }\n+        catch (IOException ioe)\n+          {\n+            logger.log(Level.FINE, \"error reading random bytes\", ioe);\n+          }\n+      }\n+\n+    // If we get here, we did not get any seed from a property URL.\n+    VMSecureRandom.generateSeed(buffer, 0, buffer.length);\n+    return buffer;\n   }\n \n   public byte[] engineGenerateSeed(int numBytes)\n   {\n-    if (numBytes < 1)\n-      return new byte[0];\n-\n-    byte[] result = new byte[numBytes];\n-    this.engineNextBytes(result);\n-    return result;\n+    return getSeed(numBytes);\n   }\n \n   public void engineNextBytes(byte[] bytes)\n   {\n-    if (! adaptee.isInitialised())\n-      this.engineSetSeed(new byte[0]);\n+    if (!isSeeded)\n+      {\n+        engineSetSeed(engineGenerateSeed(32));\n+      }\n     try\n       {\n         adaptee.nextBytes(bytes, 0, bytes.length);\n@@ -102,6 +178,7 @@ public void engineNextBytes(byte[] bytes)\n \n   public void engineSetSeed(byte[] seed)\n   {\n-    adaptee.addRandomBytes(seed);\n+    adaptee.addRandomBytes (seed);\n+    isSeeded = true;\n   }\n }"}, {"sha": "1129d5dfb1b4478154c287962dc81eec2e9552ca", "filename": "libjava/classpath/gnu/javax/crypto/jce/prng/ARCFourRandomSpi.java", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -39,12 +39,17 @@\n package gnu.javax.crypto.jce.prng;\n \n import gnu.java.security.Registry;\n-import gnu.javax.crypto.prng.ARCFour;\n+\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n+\n import gnu.java.security.prng.IRandom;\n import gnu.java.security.prng.LimitReachedException;\n+\n+import gnu.javax.crypto.prng.ARCFour;\n import gnu.javax.crypto.prng.PRNGFactory;\n \n import java.security.SecureRandomSpi;\n+\n import java.util.HashMap;\n \n /**\n@@ -71,17 +76,13 @@ public ARCFourRandomSpi()\n \n   public byte[] engineGenerateSeed(int numBytes)\n   {\n-    if (numBytes < 1)\n-      return new byte[0];\n-    byte[] result = new byte[numBytes];\n-    this.engineNextBytes(result);\n-    return result;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n \n   public void engineNextBytes(byte[] bytes)\n   {\n     if (virgin)\n-      this.engineSetSeed(new byte[0]);\n+      this.engineSetSeed(engineGenerateSeed(32));\n     try\n       {\n         adaptee.nextBytes(bytes, 0, bytes.length);"}, {"sha": "96d66f05200fdbb6a0f3f04280f2de211c55b88e", "filename": "libjava/classpath/gnu/javax/crypto/jce/prng/CSPRNGSpi.java", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -40,6 +40,7 @@\n \n import gnu.java.security.prng.IRandom;\n import gnu.java.security.prng.LimitReachedException;\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n import gnu.javax.crypto.prng.CSPRNG;\n \n import java.net.MalformedURLException;\n@@ -53,6 +54,7 @@\n     extends SecureRandomSpi\n {\n   private final IRandom adaptee;\n+  private boolean virgin = true;\n \n   public CSPRNGSpi() throws ClassNotFoundException, MalformedURLException,\n       NumberFormatException\n@@ -62,21 +64,19 @@ public CSPRNGSpi() throws ClassNotFoundException, MalformedURLException,\n     adaptee = CSPRNG.getSystemInstance();\n   }\n \n-  protected byte[] engineGenerateSeed(final int count)\n+  protected byte[] engineGenerateSeed(final int numBytes)\n   {\n-    if (count < 0)\n-      throw new IllegalArgumentException(\"count must be nonnegative\");\n-    byte[] buf = new byte[count];\n-    if (count == 0)\n-      return buf;\n-    engineNextBytes(buf);\n-    return buf;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n \n   protected void engineNextBytes(final byte[] buffer)\n   {\n     if (buffer == null)\n       throw new NullPointerException();\n+    if (virgin)\n+      {\n+        engineSetSeed(engineGenerateSeed(32));\n+      }\n     try\n       {\n         adaptee.nextBytes(buffer, 0, buffer.length);\n@@ -92,5 +92,6 @@ protected void engineSetSeed(final byte[] seed)\n     if (seed == null)\n       throw new NullPointerException();\n     adaptee.addRandomBytes(seed, 0, seed.length);\n+    virgin = false;\n   }\n }"}, {"sha": "b18410c09f0b4adc1665b96db557ff57dadff154", "filename": "libjava/classpath/gnu/javax/crypto/jce/prng/FortunaImpl.java", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -39,6 +39,9 @@\n package gnu.javax.crypto.jce.prng;\n \n import gnu.java.security.prng.LimitReachedException;\n+\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n+\n import gnu.javax.crypto.prng.Fortuna;\n \n import java.security.SecureRandomSpi;\n@@ -47,26 +50,38 @@\n public final class FortunaImpl\n     extends SecureRandomSpi\n {\n+  private boolean virgin = true;\n   private final Fortuna adaptee;\n \n   public FortunaImpl()\n   {\n     adaptee = new Fortuna();\n-    adaptee.init(Collections.singletonMap(Fortuna.SEED, new byte[0]));\n   }\n \n   protected void engineSetSeed(byte[] seed)\n   {\n     synchronized (adaptee)\n       {\n-        adaptee.addRandomBytes(seed);\n+\tif (virgin)\n+\t  {\n+            adaptee.init (Collections.singletonMap (Fortuna.SEED, seed));\n+            virgin = false;\n+          }\n+        else\n+          {\n+            adaptee.addRandomBytes (seed);\n+          }\n       }\n   }\n \n   protected void engineNextBytes(byte[] buffer)\n   {\n     synchronized (adaptee)\n       {\n+        if (virgin)\n+          {\n+            this.engineSetSeed(engineGenerateSeed(32));\n+          }\n         try\n           {\n             adaptee.nextBytes(buffer);\n@@ -78,10 +93,8 @@ protected void engineNextBytes(byte[] buffer)\n       }\n   }\n \n-  protected byte[] engineGenerateSeed(int numbytes)\n+  protected byte[] engineGenerateSeed(int numBytes)\n   {\n-    byte[] seed = new byte[numbytes];\n-    engineNextBytes(seed);\n-    return seed;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n }"}, {"sha": "a02fd147e89c01ecd5e77f0163309c6768a73109", "filename": "libjava/classpath/gnu/javax/crypto/jce/prng/ICMRandomSpi.java", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -40,6 +40,7 @@\n \n import gnu.java.security.Configuration;\n import gnu.java.security.Registry;\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n import gnu.java.security.prng.LimitReachedException;\n import gnu.javax.crypto.cipher.IBlockCipher;\n import gnu.javax.crypto.prng.ICMGenerator;\n@@ -107,27 +108,15 @@ private static void resetLocalPRNG()\n \n   public byte[] engineGenerateSeed(int numBytes)\n   {\n-    if (Configuration.DEBUG)\n-      log.entering(this.getClass().getName(), \"engineGenerateSeed\");\n-    if (numBytes < 1)\n-      {\n-        if (Configuration.DEBUG)\n-          log.exiting(this.getClass().getName(), \"engineGenerateSeed\");\n-        return new byte[0];\n-      }\n-    byte[] result = new byte[numBytes];\n-    this.engineNextBytes(result);\n-    if (Configuration.DEBUG)\n-      log.exiting(this.getClass().getName(), \"engineGenerateSeed\");\n-    return result;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n \n   public void engineNextBytes(byte[] bytes)\n   {\n     if (Configuration.DEBUG)\n       log.entering(this.getClass().getName(), \"engineNextBytes\");\n     if (! adaptee.isInitialised())\n-      this.engineSetSeed(new byte[0]);\n+      this.engineSetSeed(engineGenerateSeed(32));\n     while (true)\n       {\n         try\n@@ -207,8 +196,8 @@ public void engineSetSeed(byte[] seed)\n     System.arraycopy(material, 16, offset, 0, 16);\n     attributes.put(ICMGenerator.OFFSET, offset);\n     // specify the index\n-    byte[] index = new byte[8];\n-    System.arraycopy(material, 32, index, 0, 8);\n+    byte[] index = new byte[4];\n+    System.arraycopy(material, 32, index, 0, 4);\n     attributes.put(ICMGenerator.SEGMENT_INDEX, new BigInteger(1, index));\n     adaptee.init(attributes);\n     if (Configuration.DEBUG)"}, {"sha": "2faebe8eb04c2077ba8777bbf6975b8560b80f70", "filename": "libjava/classpath/gnu/javax/crypto/jce/prng/UMacRandomSpi.java", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -41,6 +41,7 @@\n import gnu.java.security.Configuration;\n import gnu.java.security.Registry;\n import gnu.java.security.prng.LimitReachedException;\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n import gnu.javax.crypto.cipher.IBlockCipher;\n import gnu.javax.crypto.prng.UMacGenerator;\n \n@@ -57,6 +58,7 @@\n     extends SecureRandomSpi\n {\n   private static final Logger log = Logger.getLogger(UMacRandomSpi.class.getName());\n+\n   /** Class-wide prng to generate random material for the underlying prng. */\n   private static final UMacGenerator prng; // blank final\n   static\n@@ -88,17 +90,13 @@ private static void resetLocalPRNG()\n \n   public byte[] engineGenerateSeed(int numBytes)\n   {\n-    if (numBytes < 1)\n-      return new byte[0];\n-    byte[] result = new byte[numBytes];\n-    this.engineNextBytes(result);\n-    return result;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n \n   public void engineNextBytes(byte[] bytes)\n   {\n     if (! adaptee.isInitialised())\n-      this.engineSetSeed(new byte[0]);\n+      engineSetSeed(engineGenerateSeed(32));\n     while (true)\n       {\n         try"}, {"sha": "d8205cfb4adc50db47ad468e8ab077bf1c41fa77", "filename": "libjava/classpath/gnu/javax/crypto/prng/ICMGenerator.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -263,6 +263,15 @@ else if ((wantSegmentNdxLength + wantBlockNdxLength) > limit)\n     // C[0] = (s * (256^BLOCK_INDEX_LENGTH) + r) modulo (256^BLOCK_LENGTH)\n     C0 = segmentNdx.multiply(TWO_FIFTY_SIX.pow(blockNdxLength))\n                    .add(r).modPow(BigInteger.ONE, counterRange);\n+    try\n+      {\n+        fillBlock();\n+      }\n+    catch (LimitReachedException impossible)\n+      {\n+\tthrow (InternalError)\n+\t  new InternalError().initCause(impossible);\n+      }\n   }\n \n   public void fillBlock() throws LimitReachedException"}, {"sha": "6072a9c730f4ecdbf5d6b94b92d381755614beca", "filename": "libjava/classpath/gnu/xml/stream/XMLParser.java", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLParser.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -725,7 +725,10 @@ public String getLocalName()\n       case XMLStreamConstants.END_ELEMENT:\n         String qName = buf.toString();\n         int ci = qName.indexOf(':');\n-        return (ci == -1) ? qName : qName.substring(ci + 1);\n+        String localName = (ci == -1) ? qName : qName.substring(ci + 1);\n+        if (stringInterning)\n+          localName = localName.intern();\n+        return localName;\n       default:\n         return null;\n       }\n@@ -745,9 +748,13 @@ public QName getName()\n         String qName = buf.toString();\n         int ci = qName.indexOf(':');\n         String localName = (ci == -1) ? qName : qName.substring(ci + 1);\n+        if (stringInterning)\n+          localName = localName.intern();\n         String prefix = (ci == -1) ?\n           (namespaceAware ? XMLConstants.DEFAULT_NS_PREFIX : null) :\n           qName.substring(0, ci);\n+        if (stringInterning && prefix != null)\n+          prefix = prefix.intern();\n         String namespaceURI = getNamespaceURI(prefix);\n         return new QName(namespaceURI, localName, prefix);\n       default:\n@@ -831,9 +838,12 @@ public String getPrefix()\n       case XMLStreamConstants.END_ELEMENT:\n         String qName = buf.toString();\n         int ci = qName.indexOf(':');\n-        return (ci == -1) ?\n+        String prefix = (ci == -1) ?\n           (namespaceAware ? XMLConstants.DEFAULT_NS_PREFIX : null) :\n           qName.substring(0, ci);\n+        if (stringInterning && prefix != null)\n+          prefix = prefix.intern();\n+        return prefix;\n       default:\n         return null;\n       }"}, {"sha": "0c7183879cec6fc01d9eb681036448cf0ad986ed", "filename": "libjava/classpath/java/security/SecureRandom.java", "status": "modified", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Fsecurity%2FSecureRandom.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -42,6 +42,7 @@\n import gnu.java.lang.CPStringBuilder;\n import gnu.java.security.Engine;\n import gnu.java.security.action.GetSecurityPropertyAction;\n+import gnu.java.security.jce.prng.SecureRandomAdapter;\n import gnu.java.security.jce.prng.Sha160RandomSpi;\n \n import java.io.IOException;\n@@ -401,9 +402,7 @@ protected final int next(int numBits)\n    */\n   public static byte[] getSeed(int numBytes)\n   {\n-    byte[] tmp = new byte[numBytes];\n-    generateSeed(tmp);\n-    return tmp;\n+    return SecureRandomAdapter.getSeed(numBytes);\n   }\n \n   /**\n@@ -418,64 +417,4 @@ public byte[] generateSeed(int numBytes)\n     return secureRandomSpi.engineGenerateSeed(numBytes);\n   }\n \n-  // Seed methods.\n-\n-  private static final String SECURERANDOM_SOURCE = \"securerandom.source\";\n-  private static final String JAVA_SECURITY_EGD = \"java.security.egd\";\n-  private static final Logger logger = Logger.getLogger(SecureRandom.class.getName());\n-\n-  private static int generateSeed(byte[] buffer)\n-  {\n-    return generateSeed(buffer, 0, buffer.length);\n-  }\n-\n-  private static int generateSeed(byte[] buffer, int offset, int length)\n-  {\n-    URL sourceUrl = null;\n-    String urlStr = null;\n-\n-    GetSecurityPropertyAction action = new GetSecurityPropertyAction(SECURERANDOM_SOURCE);\n-    try\n-      {\n-        urlStr = (String) AccessController.doPrivileged(action);\n-        if (urlStr != null)\n-          sourceUrl = new URL(urlStr);\n-      }\n-    catch (MalformedURLException ignored)\n-      {\n-        logger.log(Level.WARNING, SECURERANDOM_SOURCE + \" property is malformed: {0}\", \n-                   urlStr);\n-      }\n-\n-    if (sourceUrl == null)\n-      {\n-        try\n-          {\n-            urlStr = SystemProperties.getProperty(JAVA_SECURITY_EGD);\n-            if (urlStr != null)\n-              sourceUrl = new URL(urlStr);\n-          }\n-        catch (MalformedURLException mue)\n-          {\n-            logger.log(Level.WARNING, JAVA_SECURITY_EGD + \" property is malformed: {0}\",\n-                       urlStr);\n-          }\n-      }\n-\n-    if (sourceUrl != null)\n-      {\n-        try\n-          {\n-            InputStream in = sourceUrl.openStream();\n-            return in.read(buffer, offset, length);\n-          }\n-        catch (IOException ioe)\n-          {\n-            logger.log(Level.FINE, \"error reading random bytes\", ioe);\n-          }\n-      }\n-\n-    // If we get here, we did not get any seed from a property URL.\n-    return VMSecureRandom.generateSeed(buffer, offset, length);\n-  }\n }"}, {"sha": "27c31f26e17ee33ae6db0183ed3c2348c5e51894", "filename": "libjava/classpath/lib/gnu/classpath/Configuration.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FConfiguration.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FConfiguration.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FConfiguration.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "b0359303db5d22b4f5e2ad3084d63007ae98126e", "filename": "libjava/classpath/lib/gnu/classpath/SystemProperties.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FSystemProperties.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FSystemProperties.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2FSystemProperties.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "15917dba993a99bd5dbaa4937dafd7508cb3fc4e", "filename": "libjava/classpath/lib/gnu/gcj/convert/Convert.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fconvert%2FConvert.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fconvert%2FConvert.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fconvert%2FConvert.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "a11c8f974c3c5651f8540d753cad99f716cd9c12", "filename": "libjava/classpath/lib/gnu/gcj/tools/gcj_dbtool/Main.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "017314c5b0bc928444ba688fb97873f66e86ee17", "filename": "libjava/classpath/lib/gnu/java/awt/peer/gtk/CairoGraphics2D.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "d8b3cae4250b1e75d8e434e882a6517cfa92d5a2", "filename": "libjava/classpath/lib/gnu/java/rmi/registry/RegistryImpl.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "c781278a65996e864faab7b3306f2bcb4ef238e2", "filename": "libjava/classpath/lib/gnu/java/security/jce/prng/SecureRandomAdapter.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "6993b3a0f3e692281949b11385261a7eb15c1505", "filename": "libjava/classpath/lib/gnu/javax/crypto/jce/prng/ARCFourRandomSpi.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FARCFourRandomSpi.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "b73add563099af0671c97b6343d6ac5f2cc9be20", "filename": "libjava/classpath/lib/gnu/javax/crypto/jce/prng/CSPRNGSpi.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "bf61fb49fb8234840b30baa79958733fdd5a830b", "filename": "libjava/classpath/lib/gnu/javax/crypto/jce/prng/FortunaImpl.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "5fca78ef17735fe3c7885914b4a12546ab62f5eb", "filename": "libjava/classpath/lib/gnu/javax/crypto/jce/prng/ICMRandomSpi.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FICMRandomSpi.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "9c760ea3324cfd9b141b9538ad6693d7e8198397", "filename": "libjava/classpath/lib/gnu/javax/crypto/jce/prng/UMacRandomSpi.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FUMacRandomSpi.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "53776d6de501c780d90d019c091856527176d628", "filename": "libjava/classpath/lib/gnu/javax/crypto/prng/ICMGenerator.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fcrypto%2Fprng%2FICMGenerator.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "31381bdd6a42c35e73031ebddf6e24f8717ad2c7", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$AnyContentModel.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AnyContentModel.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AnyContentModel.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AnyContentModel.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "bc9f56ce98fe330fca9a045311859fe54f8a5492", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$Attribute.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Attribute.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Attribute.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Attribute.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "7c578d44bcaf6884e10d7e455bc054d45a9aba1b", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$AttributeDecl.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AttributeDecl.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AttributeDecl.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24AttributeDecl.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "5d2f991887981fe6246425bdace80eea0b05b095", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$ContentModel.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentModel.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentModel.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentModel.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "4ced06152ab47541cc34fe366f273d6c24193bb4", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$ContentParticle.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentParticle.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentParticle.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ContentParticle.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "f05bfcae5453cfead0c8a9f2062080f317c98133", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$Doctype.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Doctype.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Doctype.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Doctype.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "5ee2d8cff10807148083f2306df66aba267e644b", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$ElementContentModel.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ElementContentModel.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ElementContentModel.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ElementContentModel.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "64ba55704fc435d0933729e8f5fdfe7ef49f5666", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$EmptyContentModel.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24EmptyContentModel.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24EmptyContentModel.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24EmptyContentModel.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "97ac508cfdf6be68daeed5bdb730eb005de16f6a", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$ExternalIds.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ExternalIds.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ExternalIds.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24ExternalIds.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "2e283aee151c675803ea93af8b4df7eeab577d57", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$Input.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Input.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Input.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24Input.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "f5309b07ab696125ad675beeaa7a4d0efdd843b0", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser$MixedContentModel.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24MixedContentModel.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24MixedContentModel.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser%24MixedContentModel.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "84113a5baab03749c584c989f802eefeab71dc4c", "filename": "libjava/classpath/lib/gnu/xml/stream/XMLParser.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fxml%2Fstream%2FXMLParser.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "ef74e5aae7b9bbfa9cf91e3f0663f3f0192be0a0", "filename": "libjava/classpath/lib/java/security/SecureRandom.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fjava%2Fsecurity%2FSecureRandom.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Flib%2Fjava%2Fsecurity%2FSecureRandom.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Fsecurity%2FSecureRandom.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "0c80703d636618bca2c83818adae94834802e797", "filename": "libjava/classpath/native/jni/native-lib/cpproc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fnative%2Fjni%2Fnative-lib%2Fcpproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fnative%2Fjni%2Fnative-lib%2Fcpproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Fjni%2Fnative-lib%2Fcpproc.c?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -86,7 +86,8 @@ int cpproc_forkAndExec (char * const *commandLine, char * const * newEnviron,\n \n       close_all_fds(local_fds, pipe_count * 2);\n \n-      chdir(wd);\n+      i = chdir(wd);\n+      /* FIXME: Handle the return value */\n       if (newEnviron == NULL)\n \texecvp(commandLine[0], commandLine);\n       else"}, {"sha": "67c15788fc2c4243f422ffc74b00651f75cd562a", "filename": "libjava/classpath/tools/classes/gnu/classpath/tools/common/ClasspathToolParser.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fcommon%2FClasspathToolParser.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fcommon%2FClasspathToolParser.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fcommon%2FClasspathToolParser.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "1ce24d1d49ce9b642f443d5b7279fb9b40a3c3ab", "filename": "libjava/classpath/tools/classes/gnu/classpath/tools/gjdoc/Main.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "6608af7770b74140bfd95d4f1a418743a9cb23da", "filename": "libjava/classpath/tools/classes/gnu/classpath/tools/orbd/Main.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Forbd%2FMain.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Forbd%2FMain.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fclasses%2Fgnu%2Fclasspath%2Ftools%2Forbd%2FMain.class?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f"}, {"sha": "d1316b3418318119d4c6b9eb49e54d348626753d", "filename": "libjava/classpath/tools/gnu/classpath/tools/gjdoc/Main.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Ftools%2Fgnu%2Fclasspath%2Ftools%2Fgjdoc%2FMain.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1827,7 +1827,7 @@ public String getGjdocVersion()\n     if (null == gjdocVersion) {\n       try {\n         Properties versionProperties = new Properties();\n-        versionProperties.load(getClass().getResourceAsStream(\"/version.properties\"));\n+        versionProperties.load(getClass().getResourceAsStream(\"version.properties\"));\n         gjdocVersion = versionProperties.getProperty(\"gjdoc.version\");\n       }\n       catch (IOException ignore) {"}, {"sha": "28a02102706cc37e92376ffd3f204025d52b74cd", "filename": "libjava/classpath/vm/reference/gnu/java/security/jce/prng/VMSecureRandom.java", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -36,7 +36,7 @@\n exception statement from your version.  */\n \n \n-package java.security;\n+package gnu.java.security.jce.prng;\n \n /**\n  * VM-specific methods for generating real (or almost real) random", "previous_filename": "libjava/java/security/VMSecureRandom.java"}, {"sha": "7d1baad8a05a596328a3984ea77c3617da73652f", "filename": "libjava/configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -19140,6 +19140,11 @@ test -d gnu/java/nio/channels || mkdir gnu/java/nio/channels\n           ac_config_links=\"$ac_config_links gnu/java/nio/channels/natFileChannelImpl.cc:gnu/java/nio/channels/natFileChannel${FILE-${PLATFORM}}.cc\"\n \n \n+# Likewise for natVMSecureRandom.cc\n+test -d gnu/java/security/jce/prng || mkdir gnu/java/security/jce/prng\n+          ac_config_links=\"$ac_config_links gnu/java/security/jce/prng/natVMSecureRandom.cc:gnu/java/security/jce/prng/natVMSecureRandom${FILE-${PLATFORM}}.cc\"\n+\n+\n case \"${host}\" in\n     *mingw*)\n       SYSTEMSPEC=\"-lgdi32 -lws2_32\"\n@@ -29568,6 +29573,7 @@ do\n   \"gnu/java/nio/natVMPipe.cc\" ) CONFIG_LINKS=\"$CONFIG_LINKS gnu/java/nio/natVMPipe.cc:gnu/java/nio/natVMPipe${PLATFORM}.cc\" ;;\n   \"gnu/java/nio/natVMSelector.cc\" ) CONFIG_LINKS=\"$CONFIG_LINKS gnu/java/nio/natVMSelector.cc:gnu/java/nio/natVMSelector${PLATFORM}.cc\" ;;\n   \"gnu/java/nio/channels/natFileChannelImpl.cc\" ) CONFIG_LINKS=\"$CONFIG_LINKS gnu/java/nio/channels/natFileChannelImpl.cc:gnu/java/nio/channels/natFileChannel${FILE-${PLATFORM}}.cc\" ;;\n+  \"gnu/java/security/jce/prng/natVMSecureRandom.cc\" ) CONFIG_LINKS=\"$CONFIG_LINKS gnu/java/security/jce/prng/natVMSecureRandom.cc:gnu/java/security/jce/prng/natVMSecureRandom${FILE-${PLATFORM}}.cc\" ;;\n   \"include/java-gc.h\" ) CONFIG_LINKS=\"$CONFIG_LINKS include/java-gc.h:include/$GCHDR\" ;;\n   \"include/java-threads.h\" ) CONFIG_LINKS=\"$CONFIG_LINKS include/java-threads.h:include/$THREADH\" ;;\n   \"sysdep/locks.h\" ) CONFIG_LINKS=\"$CONFIG_LINKS sysdep/locks.h:sysdep/$sysdeps_dir/locks.h\" ;;"}, {"sha": "5d9fd1e849da10889bbb104b76c6f47f3c8c9674", "filename": "libjava/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -833,6 +833,10 @@ AC_CONFIG_LINKS(gnu/java/nio/natVMSelector.cc:gnu/java/nio/natVMSelector${PLATFO\n test -d gnu/java/nio/channels || mkdir gnu/java/nio/channels\n AC_CONFIG_LINKS(gnu/java/nio/channels/natFileChannelImpl.cc:gnu/java/nio/channels/natFileChannel${FILE-${PLATFORM}}.cc)\n \n+# Likewise for natVMSecureRandom.cc\n+test -d gnu/java/security/jce/prng || mkdir gnu/java/security/jce/prng\n+AC_CONFIG_LINKS(gnu/java/security/jce/prng/natVMSecureRandom.cc:gnu/java/security/jce/prng/natVMSecureRandom${FILE-${PLATFORM}}.cc)\n+\n case \"${host}\" in\n     *mingw*)\n       SYSTEMSPEC=\"-lgdi32 -lws2_32\""}, {"sha": "b0c57332ddcb9eefde4a10fbe8763c0e8f4d51d6", "filename": "libjava/gnu/classpath/Configuration.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fclasspath%2FConfiguration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fclasspath%2FConfiguration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FConfiguration.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -66,7 +66,7 @@ private Configuration()\n    * It is set according to the value of 'version' in the configure[.in] file\n    * and used to set the System property gnu.classpath.version.\n    */\n-  public static final String CLASSPATH_VERSION = \"0.98-pre\";\n+  public static final String CLASSPATH_VERSION = \"0.98\";\n \n   /**\n    * The value of DEBUG is substituted according to whether the"}, {"sha": "7495038c73532e4f2e76da20f0a1d254e06a0c10", "filename": "libjava/gnu/java/security/jce/prng/SecureRandomAdapter.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FSecureRandomAdapter.h?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -39,12 +39,17 @@ class gnu::java::security::jce::prng::SecureRandomAdapter : public ::java::secur\n public: // actually protected\n   SecureRandomAdapter(::java::lang::String *);\n public:\n+  static JArray< jbyte > * getSeed(jint);\n   virtual JArray< jbyte > * engineGenerateSeed(jint);\n   virtual void engineNextBytes(JArray< jbyte > *);\n   virtual void engineSetSeed(JArray< jbyte > *);\n private:\n-  ::gnu::java::security::prng::MDGenerator * __attribute__((aligned(__alignof__( ::java::security::SecureRandomSpi)))) adaptee;\n+  jboolean __attribute__((aligned(__alignof__( ::java::security::SecureRandomSpi)))) isSeeded;\n+  ::gnu::java::security::prng::MDGenerator * adaptee;\n   ::java::lang::String * mdName;\n+  static ::java::util::logging::Logger * logger;\n+  static ::java::lang::String * SECURERANDOM_SOURCE;\n+  static ::java::lang::String * JAVA_SECURITY_EGD;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "b24c805141ac12f0e0d243cd3efac85a7a430006", "filename": "libjava/gnu/java/security/jce/prng/VMSecureRandom.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.h?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -0,0 +1,43 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_java_security_jce_prng_VMSecureRandom__\n+#define __gnu_java_security_jce_prng_VMSecureRandom__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+#include <gcj/array.h>\n+\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace java\n+    {\n+      namespace security\n+      {\n+        namespace jce\n+        {\n+          namespace prng\n+          {\n+              class VMSecureRandom;\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::java::security::jce::prng::VMSecureRandom : public ::java::lang::Object\n+{\n+\n+public: // actually package-private\n+  VMSecureRandom();\n+  static jint generateSeed(JArray< jbyte > *, jint, jint);\n+  static jint natGenerateSeed(JArray< jbyte > *, jint, jint);\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_java_security_jce_prng_VMSecureRandom__"}, {"sha": "62ff8b7aa93fadd0f5f922e2bc12139b2a204506", "filename": "libjava/gnu/java/security/jce/prng/VMSecureRandom.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FVMSecureRandom.java?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -0,0 +1,78 @@\n+/* VMSecureRandom.java -- random seed generator.\n+   Copyright (C) 2006, 2009  Free Software Foundation, Inc.\n+\n+This file is a part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2 of the License, or (at\n+your option) any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; if not, write to the Free Software\n+Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301\n+USA\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version.  */\n+\n+\n+package gnu.java.security.jce.prng;\n+\n+/**\n+ * VM-specific methods for generating real (or almost real) random\n+ * seeds. VM implementors should write a version of this class that\n+ * reads random bytes from some system source.\n+ */\n+final class VMSecureRandom\n+{\n+\n+  /**\n+   * <p>\n+   * Generate a random seed. Implementations are free to generate\n+   * fewer random bytes than are requested, and leave the remaining\n+   * bytes of the destination buffer as zeros. Implementations SHOULD,\n+   * however, make a best-effort attempt to satisfy the request.\n+   * </p>\n+   * <p>\n+   * The GCJ implementation uses a native method to read bytes from\n+   * a system random source (e.g. /dev/random).\n+   * </p>\n+   *\n+   * @param buffer The destination buffer.\n+   * @param offset The offset in the buffer to start putting bytes.\n+   * @param length The number of random bytes to generate.\n+   * @return the number of bytes generated.\n+   */\n+  static int generateSeed(byte[] buffer, int offset, int length)\n+  {\n+    if (length < 0)\n+      throw new IllegalArgumentException(\"length must be nonnegative\");\n+    if (offset < 0 || offset + length > buffer.length)\n+      throw new IndexOutOfBoundsException();\n+\n+    return natGenerateSeed(buffer, offset, length);\n+  }\n+\n+  static native int natGenerateSeed(byte[] buffer, int offset, int length);\n+ \n+}\n\\ No newline at end of file"}, {"sha": "a44f3f4573bb2238a3d10628d73efac6f96b531f", "filename": "libjava/gnu/java/security/jce/prng/natVMSecureRandomPosix.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FnatVMSecureRandomPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FnatVMSecureRandomPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fjce%2Fprng%2FnatVMSecureRandomPosix.cc?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -0,0 +1,54 @@\n+// natVMSecureRandomPosix.cc - Native part of VMSecureRandom class for POSIX.\n+\n+/* Copyright (C) 2009 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <string.h>\n+#include <errno.h>\n+\n+#include <gcj/cni.h>\n+#include <java/lang/InternalError.h>\n+#include <gnu/java/security/jce/prng/VMSecureRandom.h>\n+\n+jint\n+gnu::java::security::jce::prng::VMSecureRandom::natGenerateSeed(jbyteArray byte_array, jint offset, jint length)\n+{\n+  int a, fd;\n+  jbyte *bytes = elements (byte_array);\n+  ssize_t count;\n+\n+  for (a = 0; a < offset; ++a)\n+    bytes++;\n+  fd = open (\"/dev/random\", O_RDONLY);\n+  \n+  if (fd == -1)\n+    {\n+      jstring oserr = JvNewStringLatin1 (strerror (errno));\n+      throw new ::java::lang::InternalError \n+\t(JvNewStringLatin1 (\"Error opening /dev/random: \")->concat(oserr));\n+    }\n+\n+  count = read (fd, bytes, length);\n+  close (fd);\n+\n+  if (count == -1)\n+    {\n+      jstring oserr = JvNewStringLatin1 (strerror (errno));\n+      throw new ::java::lang::InternalError \n+\t(JvNewStringLatin1 (\"Error reading /dev/random: \")->concat(oserr));\n+    }\n+\n+  return count;\n+}\n+"}, {"sha": "6abf9be9e3b253ba3947174659e55d402f168d03", "filename": "libjava/gnu/javax/crypto/jce/prng/CSPRNGSpi.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FCSPRNGSpi.h?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -50,6 +50,7 @@ class gnu::javax::crypto::jce::prng::CSPRNGSpi : public ::java::security::Secure\n   virtual void engineSetSeed(JArray< jbyte > *);\n private:\n   ::gnu::java::security::prng::IRandom * __attribute__((aligned(__alignof__( ::java::security::SecureRandomSpi)))) adaptee;\n+  jboolean virgin;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "d684e366a1b8e067d82c28ca868da73f1855142f", "filename": "libjava/gnu/javax/crypto/jce/prng/FortunaImpl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fcrypto%2Fjce%2Fprng%2FFortunaImpl.h?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -43,7 +43,8 @@ class gnu::javax::crypto::jce::prng::FortunaImpl : public ::java::security::Secu\n   void engineNextBytes(JArray< jbyte > *);\n   JArray< jbyte > * engineGenerateSeed(jint);\n private:\n-  ::gnu::javax::crypto::prng::Fortuna * __attribute__((aligned(__alignof__( ::java::security::SecureRandomSpi)))) adaptee;\n+  jboolean __attribute__((aligned(__alignof__( ::java::security::SecureRandomSpi)))) virgin;\n+  ::gnu::javax::crypto::prng::Fortuna * adaptee;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "b54318c4406a1cca736166d74ff018048d7face2", "filename": "libjava/java/security/SecureRandom.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fjava%2Fsecurity%2FSecureRandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fjava%2Fsecurity%2FSecureRandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.h?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -47,8 +47,6 @@ class java::security::SecureRandom : public ::java::util::Random\n   static JArray< jbyte > * getSeed(jint);\n   virtual JArray< jbyte > * generateSeed(jint);\n private:\n-  static jint generateSeed(JArray< jbyte > *);\n-  static jint generateSeed(JArray< jbyte > *, jint, jint);\n   static ::java::lang::String * SECURE_RANDOM;\n   static const jlong serialVersionUID = 4940670005562187LL;\n public: // actually package-private\n@@ -61,9 +59,6 @@ class java::security::SecureRandom : public ::java::util::Random\n private:\n   ::java::lang::String * algorithm;\n   jboolean isSeeded;\n-  static ::java::lang::String * SECURERANDOM_SOURCE;\n-  static ::java::lang::String * JAVA_SECURITY_EGD;\n-  static ::java::util::logging::Logger * logger;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "0013a3fc8ca9fe9024ad373c76e83cd19176d107", "filename": "libjava/java/security/VMSecureRandom$Spinner.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h?ref=a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9", "patch": "@@ -1,38 +0,0 @@\n-\n-// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n-\n-#ifndef __java_security_VMSecureRandom$Spinner__\n-#define __java_security_VMSecureRandom$Spinner__\n-\n-#pragma interface\n-\n-#include <java/lang/Object.h>\n-extern \"Java\"\n-{\n-  namespace java\n-  {\n-    namespace security\n-    {\n-        class VMSecureRandom$Spinner;\n-    }\n-  }\n-}\n-\n-class java::security::VMSecureRandom$Spinner : public ::java::lang::Object\n-{\n-\n-public: // actually package-private\n-  VMSecureRandom$Spinner(jbyte);\n-public:\n-  virtual void run();\n-private:\n-  void stop();\n-public: // actually package-private\n-  static void access$0(::java::security::VMSecureRandom$Spinner *);\n-  jbyte volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n-  jboolean volatile running;\n-public:\n-  static ::java::lang::Class class$;\n-};\n-\n-#endif // __java_security_VMSecureRandom$Spinner__"}, {"sha": "982bc0f1a888ed7d72f218e54afd371d167c1602", "filename": "libjava/java/security/VMSecureRandom.h", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9/libjava%2Fjava%2Fsecurity%2FVMSecureRandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9/libjava%2Fjava%2Fsecurity%2FVMSecureRandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMSecureRandom.h?ref=a16b68bb66854ca9bbe5e11a8ddda7dcde3744e9", "patch": "@@ -1,33 +0,0 @@\n-\n-// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n-\n-#ifndef __java_security_VMSecureRandom__\n-#define __java_security_VMSecureRandom__\n-\n-#pragma interface\n-\n-#include <java/lang/Object.h>\n-#include <gcj/array.h>\n-\n-extern \"Java\"\n-{\n-  namespace java\n-  {\n-    namespace security\n-    {\n-        class VMSecureRandom;\n-    }\n-  }\n-}\n-\n-class java::security::VMSecureRandom : public ::java::lang::Object\n-{\n-\n-public: // actually package-private\n-  VMSecureRandom();\n-  static jint generateSeed(JArray< jbyte > *, jint, jint);\n-public:\n-  static ::java::lang::Class class$;\n-};\n-\n-#endif // __java_security_VMSecureRandom__"}, {"sha": "3f33a905738e0d8a2926e0b817c69b57a326ce46", "filename": "libjava/sources.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6a0b2d949256fbdcdc7301044067e2cf45289f/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=dc6a0b2d949256fbdcdc7301044067e2cf45289f", "patch": "@@ -1748,6 +1748,7 @@ classpath/gnu/java/security/jce/prng/Sha256RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/Sha384RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/Sha512RandomSpi.java \\\n classpath/gnu/java/security/jce/prng/TigerRandomSpi.java \\\n+gnu/java/security/jce/prng/VMSecureRandom.java \\\n classpath/gnu/java/security/jce/prng/WhirlpoolRandomSpi.java\n \n gnu_java_security_jce_prng_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_java_security_jce_prng_source_files)))\n@@ -5246,8 +5247,7 @@ classpath/java/security/Signer.java \\\n classpath/java/security/UnrecoverableKeyException.java \\\n classpath/java/security/UnresolvedPermission.java \\\n java/security/VMAccessControlState.java \\\n-java/security/VMAccessController.java \\\n-java/security/VMSecureRandom.java\n+java/security/VMAccessController.java\n \n java_security_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(java_security_source_files)))\n "}]}