{"sha": "07f37402ebf4619b09f8a2886e08ea0dd44b5089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmMzc0MDJlYmY0NjE5YjA5ZjhhMjg4NmUwOGVhMGRkNDRiNTA4OQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@gnat.com", "date": "2004-10-27T13:05:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:05:35Z"}, "message": "init.c (__gnat_error_handler): Instead of trying to read the memory before the faulting page we properly test...\n\n2004-10-26  Pascal Obry  <obry@gnat.com>\n\n\t* init.c (__gnat_error_handler) [Win32]: Instead of trying to read the\n\tmemory before the faulting page we properly test the process read\n\taccess for this address using appropriate Win32 routine.\n\t(HPUX sections): guard with \"__hpux__\" instead of \"hpux\".\n\nFrom-SVN: r89656", "tree": {"sha": "e94e3096571848eaacf452edaaf1c147ce78e966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e94e3096571848eaacf452edaaf1c147ce78e966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07f37402ebf4619b09f8a2886e08ea0dd44b5089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f37402ebf4619b09f8a2886e08ea0dd44b5089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f37402ebf4619b09f8a2886e08ea0dd44b5089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f37402ebf4619b09f8a2886e08ea0dd44b5089/comments", "author": null, "committer": null, "parents": [{"sha": "3f02ce5de478bdaf2769969d37c2e7c0d5a03ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f02ce5de478bdaf2769969d37c2e7c0d5a03ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f02ce5de478bdaf2769969d37c2e7c0d5a03ce9"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "30a2098cb4c2383827953ff43bef0dd833ea25e9", "filename": "gcc/ada/init.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f37402ebf4619b09f8a2886e08ea0dd44b5089/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f37402ebf4619b09f8a2886e08ea0dd44b5089/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=07f37402ebf4619b09f8a2886e08ea0dd44b5089", "patch": "@@ -575,7 +575,7 @@ __gnat_machine_state_length (void)\n /* __gnat_initialize (HPUX Version) */\n /************************************/\n \n-#elif defined (hpux)\n+#elif defined (__hpux__)\n \n #include <signal.h>\n \n@@ -824,28 +824,25 @@ static LONG WINAPI __gnat_error_handler (PEXCEPTION_POINTERS);\n static LONG WINAPI\n __gnat_error_handler (PEXCEPTION_POINTERS info)\n {\n-  static int recurse;\n   struct Exception_Data *exception;\n   const char *msg;\n \n   switch (info->ExceptionRecord->ExceptionCode)\n     {\n     case EXCEPTION_ACCESS_VIOLATION:\n-      /* If the failing address isn't maximally-aligned or if we've\n-\t recursed, this is a program error.  */\n+      /* If the failing address isn't maximally-aligned or if the page\n+\t before the faulting page is not accessible, this is a program error.\n+      */\n       if ((info->ExceptionRecord->ExceptionInformation[1] & 3) != 0\n-\t  || recurse)\n+\t  || IsBadCodePtr\n+\t  ((void *)(info->ExceptionRecord->ExceptionInformation[1] + 4096)))\n \t{\n \t  exception = &program_error;\n \t  msg = \"EXCEPTION_ACCESS_VIOLATION\";\n \t}\n       else\n \t{\n-\t  /* See if the page before the faulting page is accessible.  Do that\n-\t     by trying to access it. */\n-\t  recurse++;\n-\t  * ((volatile char *) (info->ExceptionRecord->ExceptionInformation[1]\n-\t\t\t\t+ 4096));\n+\t  /* otherwise it is a stack overflow  */\n \t  exception = &storage_error;\n \t  msg = \"stack overflow (or erroneous memory access)\";\n \t}\n@@ -931,7 +928,6 @@ __gnat_error_handler (PEXCEPTION_POINTERS info)\n       msg = \"unhandled signal\";\n     }\n \n-  recurse = 0;\n   Raise_From_Signal_Handler (exception, msg);\n   return 0; /* This is never reached, avoid compiler warning */\n }"}]}