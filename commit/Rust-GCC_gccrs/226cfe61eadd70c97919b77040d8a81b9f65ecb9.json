{"sha": "226cfe61eadd70c97919b77040d8a81b9f65ecb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2Y2ZlNjFlYWRkNzBjOTc5MTliNzcwNDBkOGE4MWI5ZjY1ZWNiOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-11T23:53:01Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-11T23:53:01Z"}, "message": "simplify-rtx.c (simplify_subreg): Handle floating point CONST_DOUBLEs.\n\ngcc:\nThu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n\n\t* simplify-rtx.c (simplify_subreg): Handle floating point\n\tCONST_DOUBLEs.  When an integer subreg of a smaller mode than\n\tthe element mode is requested, compute a subreg with an\n\tinteger mode of the same size as the element mode first.\n\ntestsuite:\nThu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n                          Andrew Pinski  <pinskia@physics.uc.edu>\n\n\tgcc.c-torture/compile/simd-2.c: New testcase.\n\tgcc.c-torture/compile/simd-3.c: Likewise.\n\nCo-Authored-By: Andrew Pinski <pinskia@physics.uc.edu>\n\nFrom-SVN: r55410", "tree": {"sha": "1fb2c564da28735bf50b88b6f3009be6cea0918c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb2c564da28735bf50b88b6f3009be6cea0918c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/226cfe61eadd70c97919b77040d8a81b9f65ecb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226cfe61eadd70c97919b77040d8a81b9f65ecb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226cfe61eadd70c97919b77040d8a81b9f65ecb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226cfe61eadd70c97919b77040d8a81b9f65ecb9/comments", "author": null, "committer": null, "parents": [{"sha": "f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "6df98f2a8687d6f5412b576223827fc42e6afad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=226cfe61eadd70c97919b77040d8a81b9f65ecb9", "patch": "@@ -1,3 +1,10 @@\n+Fri Jul 12 00:49:36 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* simplify-rtx.c (simplify_subreg): Handle floating point\n+\tCONST_DOUBLEs.  When an integer subreg of a smaller mode than\n+\tthe element mode is requested, compute a subreg with an\n+\tinteger mode of the same size as the element mode first.\n+\n Thu Jul 11 22:02:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* combine.c (try_combine): When converting a paradoxical subreg"}, {"sha": "95a2af09dc280de370e3a0aaaa45525a03ada558", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=226cfe61eadd70c97919b77040d8a81b9f65ecb9", "patch": "@@ -2307,6 +2307,14 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  for (; n_elts--; i += step)\n \t    {\n \t      elt = CONST_VECTOR_ELT (op, i);\n+\t      if (GET_CODE (elt) == CONST_DOUBLE\n+\t\t  && GET_MODE_CLASS (GET_MODE (elt)) == MODE_FLOAT)\n+\t\t{\n+\t\t  elt = gen_lowpart_common (int_mode_for_mode (GET_MODE (elt)),\n+\t\t\t\t\t    elt);\n+\t\t  if (! elt)\n+\t\t    return NULL_RTX;\n+\t\t}\n \t      if (GET_CODE (elt) != CONST_INT)\n \t\treturn NULL_RTX;\n \t      high = high << shift | sum >> (HOST_BITS_PER_WIDE_INT - shift);\n@@ -2319,6 +2327,18 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  else\n \t    return NULL_RTX;\n \t}\n+      else if (GET_MODE_CLASS (outermode) == MODE_INT\n+\t       && (elt_size % GET_MODE_SIZE (outermode) == 0))\n+\t{\n+\t  enum machine_mode new_mode\n+\t    = int_mode_for_mode (GET_MODE_INNER (innermode));\n+\t  int subbyte = byte % elt_size;\n+\n+\t  op = simplify_subreg (new_mode, op, innermode, byte - subbyte);\n+\t    if (! op)\n+\t      return NULL_RTX;\n+\t  return simplify_subreg (outermode, op, new_mode, subbyte);\n+\t}\n       else if (GET_MODE_CLASS (outermode) != MODE_VECTOR_INT\n \t       && GET_MODE_CLASS (outermode) != MODE_VECTOR_FLOAT)\n         /* This shouldn't happen, but let's not do anything stupid.  */"}, {"sha": "f9f6bb64997016386b7509acd4f3c61c7633b6d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=226cfe61eadd70c97919b77040d8a81b9f65ecb9", "patch": "@@ -1,3 +1,9 @@\n+Thu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+                          Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tgcc.c-torture/compile/simd-2.c: New testcase.\n+\tgcc.c-torture/compile/simd-3.c: Likewise.\n+\n 2002-07-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7224"}, {"sha": "694e94f0105733b99cb0b83a5e986a224180d1e6", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c?ref=226cfe61eadd70c97919b77040d8a81b9f65ecb9", "patch": "@@ -0,0 +1,17 @@\n+typedef float floatvect2 __attribute__((mode(V2SF)));\n+\n+typedef union\n+{\n+    floatvect2 vector;\n+    float f[2];\n+}resfloatvect2;\n+\n+void tempf(float *x, float *y)\n+{\n+        floatvect2 temp={x[0],x[1]};\n+        floatvect2 temp1={y[0],y[1]};\n+        resfloatvect2 temp2;\n+        temp2.vector=temp+temp1;\n+        x[0]=temp2.f[0];\n+        x[1]=temp2.f[1];\n+}"}, {"sha": "24d2f489e8c61ee0ee1783427830b88de7505b51", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226cfe61eadd70c97919b77040d8a81b9f65ecb9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c?ref=226cfe61eadd70c97919b77040d8a81b9f65ecb9", "patch": "@@ -0,0 +1,17 @@\n+typedef float floatvect2 __attribute__((mode(V2DF)));\n+\n+typedef union\n+{\n+    floatvect2 vector;\n+    double f[2];\n+}resfloatvect2;\n+\n+void tempf(double *x, double *y)\n+{\n+        floatvect2 temp={x[0],x[1]};\n+        floatvect2 temp1={y[0],y[1]};\n+        resfloatvect2 temp2;\n+        temp2.vector=temp+temp1;\n+        x[0]=temp2.f[0];\n+        x[1]=temp2.f[1];\n+}"}]}