{"sha": "25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmMDYwOWIyMWZlNzViMWU0YjRhMjBkZGVlOGM4ZjkzNjMxOGI4MQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-08-03T19:05:45Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-08-03T19:05:45Z"}, "message": "re PR middle-end/71876 (longjmp is miscompiled with -ffreestanding)\n\n2016-08-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/71876\n        * calls.c (special_function_p): Remove special handling of\n        \"setjmp_syscall\", \"qsetjmp\", \"longjmp\", \"siglongjmp\" and the\n        prefix \"__x\".  Recognize \"savectx\", \"vfork\" and \"getcontext\" only\n        without prefix.  Remove potentially unsafe ECF_LEAF and ECF_NORETURN.\n\nFrom-SVN: r239092", "tree": {"sha": "1df4a1a5f069e959429b836f860cb5433edf8479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1df4a1a5f069e959429b836f860cb5433edf8479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f0609b21fe75b1e4b4a20ddee8c8f936318b81/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73c77563c6409ad46357e083f378716defd9b1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c77563c6409ad46357e083f378716defd9b1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c77563c6409ad46357e083f378716defd9b1a7"}], "stats": {"total": 59, "additions": 22, "deletions": 37}, "files": [{"sha": "fd09ec1c96c45562024f84b11b8dcaf6b6b6c3f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f0609b21fe75b1e4b4a20ddee8c8f936318b81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f0609b21fe75b1e4b4a20ddee8c8f936318b81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "patch": "@@ -1,3 +1,11 @@\n+2016-08-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/71876\n+\t* calls.c (special_function_p): Remove special handling of\n+\t\"setjmp_syscall\", \"qsetjmp\", \"longjmp\", \"siglongjmp\" and the\n+\tprefix \"__x\".  Recognize \"savectx\", \"vfork\" and \"getcontext\" only\n+\twithout prefix.  Remove potentially unsafe ECF_LEAF and ECF_NORETURN.\n+\n 2016-08-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/72778"}, {"sha": "949a92e3fe3417e77b339bf55abd57e7c34ecbac", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f0609b21fe75b1e4b4a20ddee8c8f936318b81/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f0609b21fe75b1e4b4a20ddee8c8f936318b81/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=25f0609b21fe75b1e4b4a20ddee8c8f936318b81", "patch": "@@ -468,15 +468,13 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n     anti_adjust_stack (GEN_INT (n_popped));\n }\n \n-/* Determine if the function identified by NAME and FNDECL is one with\n-   special properties we wish to know about.\n+/* Determine if the function identified by FNDECL is one with\n+   special properties we wish to know about.  Modify FLAGS accordingly.\n \n    For example, if the function might return more than one time (setjmp), then\n-   set RETURNS_TWICE to a nonzero value.\n+   set ECF_RETURNS_TWICE.\n \n-   Similarly set NORETURN if the function is in the longjmp family.\n-\n-   Set MAY_BE_ALLOCA for any memory allocation function that might allocate\n+   Set ECF_MAY_BE_ALLOCA for any memory allocation function that might allocate\n    space from the stack such as alloca.  */\n \n static int\n@@ -491,7 +489,7 @@ special_function_p (const_tree fndecl, int flags)\n     name_decl = DECL_NAME (cgraph_node::get (fndecl)->orig_decl);\n \n   if (fndecl && name_decl\n-      && IDENTIFIER_LENGTH (name_decl) <= 17\n+      && IDENTIFIER_LENGTH (name_decl) <= 11\n       /* Exclude functions not at the file scope, or not `extern',\n \t since they are not the magic functions we would otherwise\n \t think they are.\n@@ -514,43 +512,22 @@ special_function_p (const_tree fndecl, int flags)\n \t  && ! strcmp (name, \"alloca\"))\n \tflags |= ECF_MAY_BE_ALLOCA;\n \n-      /* Disregard prefix _, __ or __x.  */\n+      /* Disregard prefix _ or __.  */\n       if (name[0] == '_')\n \t{\n-\t  if (name[1] == '_' && name[2] == 'x')\n-\t    tname += 3;\n-\t  else if (name[1] == '_')\n+\t  if (name[1] == '_')\n \t    tname += 2;\n \t  else\n \t    tname += 1;\n \t}\n \n-      if (tname[0] == 's')\n-\t{\n-\t  if ((tname[1] == 'e'\n-\t       && (! strcmp (tname, \"setjmp\")\n-\t\t   || ! strcmp (tname, \"setjmp_syscall\")))\n-\t      || (tname[1] == 'i'\n-\t\t  && ! strcmp (tname, \"sigsetjmp\"))\n-\t      || (tname[1] == 'a'\n-\t\t  && ! strcmp (tname, \"savectx\")))\n-\t    flags |= ECF_RETURNS_TWICE | ECF_LEAF;\n-\n-\t  if (tname[1] == 'i'\n-\t      && ! strcmp (tname, \"siglongjmp\"))\n-\t    flags |= ECF_NORETURN;\n-\t}\n-      else if ((tname[0] == 'q' && tname[1] == 's'\n-\t\t&& ! strcmp (tname, \"qsetjmp\"))\n-\t       || (tname[0] == 'v' && tname[1] == 'f'\n-\t\t   && ! strcmp (tname, \"vfork\"))\n-\t       || (tname[0] == 'g' && tname[1] == 'e'\n-\t\t   && !strcmp (tname, \"getcontext\")))\n-\tflags |= ECF_RETURNS_TWICE | ECF_LEAF;\n-\n-      else if (tname[0] == 'l' && tname[1] == 'o'\n-\t       && ! strcmp (tname, \"longjmp\"))\n-\tflags |= ECF_NORETURN;\n+      /* ECF_RETURNS_TWICE is safe even for -ffreestanding.  */\n+      if (! strcmp (tname, \"setjmp\")\n+\t  || ! strcmp (tname, \"sigsetjmp\")\n+\t  || ! strcmp (name, \"savectx\")\n+\t  || ! strcmp (name, \"vfork\")\n+\t  || ! strcmp (name, \"getcontext\"))\n+\tflags |= ECF_RETURNS_TWICE;\n     }\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)"}]}