{"sha": "fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "node_id": "C_kwDOANBUbNoAKGZkMWIwYWVmZGE1YjY1ZjNmODQxY2E2ZTYxY2NlYTZhNzJkYWEwNjA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-23T15:12:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-23T15:12:21Z"}, "message": "tree-ssa-dom: can_infer_simple_equiv fixes [PR108068]\n\nAs reported in the PR, tree-ssa-dom.cc uses real_zerop call to find\nif a floating point constant is zero and it shouldn't try to infer\nequivalences from comparison against it if signed zeros are honored.\nThis doesn't work at all for decimal types, because real_zerop always\nreturns false for them (one can have different representations of decimal\nzero beyond -0/+0), and it doesn't work for vector compares either,\nas real_zerop checks if all elements are zero, while we need to avoid\ninfering equivalences from comparison against vector constants which have\nat least one zero element in it (if signed zeros are honored).\nFurthermore, as mentioned by Joseph, for decimal types many other values\naren't singleton.\n\nSo, this patch stops infering anything if element mode is decimal, and\notherwise uses instead of real_zerop a new function, real_maybe_zerop,\nwhich will work even for decimal types and for complex or vector will\nreturn true if any element is or might be zero (so it returns true\nfor anything but constants for now).\n\n2022-12-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108068\n\t* tree.h (real_maybe_zerop): Declare.\n\t* tree.cc (real_maybe_zerop): Define.\n\t* tree-ssa-dom.cc (record_edge_info): Use it instead of\n\treal_zerop or TREE_CODE (op1) == SSA_NAME || real_zerop.  Always set\n\tcan_infer_simple_equiv to false for decimal floating point types.\n\n\t* gcc.dg/dfp/pr108068.c: New test.", "tree": {"sha": "c0c08e3cb221571f2716170b5d6716e5f1eeba48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0c08e3cb221571f2716170b5d6716e5f1eeba48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "6cbb0fbe6026a432f5b3d2e845c5ac16ebbbdef7", "filename": "gcc/testsuite/gcc.dg/dfp/pr108068.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr108068.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr108068.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr108068.c?ref=fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/108068 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+main ()\n+{\n+  _Decimal64 x = -1;\n+  while (x != 0)\n+    x /= 10;\n+  double d = x;\n+  if (!__builtin_signbit (d))\n+    __builtin_abort ();\n+}"}, {"sha": "76834fdbef4341fb8756e917c4e48a9c0975a63f", "filename": "gcc/tree-ssa-dom.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree-ssa-dom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree-ssa-dom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.cc?ref=fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "patch": "@@ -615,9 +615,9 @@ record_edge_info (basic_block bb)\n             {\n               tree cond = build2 (code, boolean_type_node, op0, op1);\n               tree inverted = invert_truthvalue_loc (loc, cond);\n-              bool can_infer_simple_equiv\n-                = !(HONOR_SIGNED_ZEROS (op0)\n-                    && real_zerop (op0));\n+\t      bool can_infer_simple_equiv\n+\t\t= !(HONOR_SIGNED_ZEROS (op0) && real_maybe_zerop (op0))\n+\t\t  && !DECIMAL_FLOAT_MODE_P (element_mode (TREE_TYPE (op0)));\n \t      class edge_info *edge_info;\n \n \t      edge_info = new class edge_info (true_edge);\n@@ -639,9 +639,9 @@ record_edge_info (basic_block bb)\n             {\n               tree cond = build2 (code, boolean_type_node, op0, op1);\n               tree inverted = invert_truthvalue_loc (loc, cond);\n-              bool can_infer_simple_equiv\n-                = !(HONOR_SIGNED_ZEROS (op1)\n-                    && (TREE_CODE (op1) == SSA_NAME || real_zerop (op1)));\n+\t      bool can_infer_simple_equiv\n+\t\t= !(HONOR_SIGNED_ZEROS (op1) && real_maybe_zerop (op1))\n+\t\t  && !DECIMAL_FLOAT_MODE_P (element_mode (TREE_TYPE (op1)));\n \t      class edge_info *edge_info;\n \n \t      edge_info = new class edge_info (true_edge);"}, {"sha": "6b3273e8997ffc7d7d42397b68851d142e60dbb7", "filename": "gcc/tree.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "patch": "@@ -3180,6 +3180,35 @@ real_minus_onep (const_tree expr)\n     }\n }\n \n+/* Return true if T could be a floating point zero.  */\n+\n+bool\n+real_maybe_zerop (const_tree expr)\n+{\n+  switch (TREE_CODE (expr))\n+    {\n+    case REAL_CST:\n+      /* Can't use real_zerop here, as it always returns false for decimal\n+\t floats.  And can't use TREE_REAL_CST (expr).cl == rvc_zero\n+\t either, as decimal zeros are rvc_normal.  */\n+      return real_equal (&TREE_REAL_CST (expr), &dconst0);\n+    case COMPLEX_CST:\n+      return (real_maybe_zerop (TREE_REALPART (expr))\n+\t      || real_maybe_zerop (TREE_IMAGPART (expr)));\n+    case VECTOR_CST:\n+      {\n+\tunsigned count = vector_cst_encoded_nelts (expr);\n+\tfor (unsigned int i = 0; i < count; ++i)\n+\t  if (real_maybe_zerop (VECTOR_CST_ENCODED_ELT (expr, i)))\n+\t    return true;\n+\treturn false;\n+      }\n+    default:\n+      /* Perhaps for SSA_NAMEs we could query frange.  */\n+      return true;\n+    }\n+}\n+\n /* Nonzero if EXP is a constant or a cast of a constant.  */\n \n bool"}, {"sha": "7e26e726bc59a24f4eb95cc851b9eee1e66aee18", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1b0aefda5b65f3f841ca6e61ccea6a72daa060/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fd1b0aefda5b65f3f841ca6e61ccea6a72daa060", "patch": "@@ -5497,6 +5497,7 @@ extern bool needs_to_live_in_memory (const_tree);\n extern tree reconstruct_complex_type (tree, tree);\n extern bool real_onep (const_tree);\n extern bool real_minus_onep (const_tree);\n+extern bool real_maybe_zerop (const_tree);\n extern void init_ttree (void);\n extern void build_common_tree_nodes (bool);\n extern void build_common_builtin_nodes (void);"}]}