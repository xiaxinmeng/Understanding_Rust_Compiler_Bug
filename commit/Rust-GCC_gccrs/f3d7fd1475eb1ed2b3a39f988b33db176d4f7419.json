{"sha": "f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkN2ZkMTQ3NWViMWVkMmIzYTM5Zjk4OGIzM2RiMTc2ZDRmNzQxOQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-12T18:18:17Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-12T18:18:52Z"}, "message": "PR c/99055 - memory leak in warn_parm_array_mismatch\n\ngcc/c-family/ChangeLog:\n\n\tPR c/99055\n\t* c-warn.c (warn_parm_array_mismatch): Free strings returned from\n\tprint_generic_expr_to_str.\n\ngcc/ChangeLog:\n\n\t* tree-pretty-print.c (print_generic_expr_to_str): Update comment.", "tree": {"sha": "f74f6efb9920e4f76d0dff24993adf4917e026b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74f6efb9920e4f76d0dff24993adf4917e026b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0631e008adc759cc801d0d034224ee6b4bcf31aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0631e008adc759cc801d0d034224ee6b4bcf31aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0631e008adc759cc801d0d034224ee6b4bcf31aa"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "2347e0b2e5d64ee869da32f6c85cc1211e8ae67e", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "patch": "@@ -3319,6 +3319,19 @@ warn_parm_ptrarray_mismatch (location_t origloc, tree curparms, tree newparms)\n     }\n }\n \n+/* Format EXPR if nonnull and return the formatted string.  If EXPR is\n+   null return DFLT.  */\n+\n+static inline const char*\n+expr_to_str (pretty_printer &pp, tree expr, const char *dflt)\n+{\n+  if (!expr)\n+    return dflt;\n+\n+  dump_generic_node (&pp, expr, 0, TDF_VOPS | TDF_MEMSYMS, false);\n+  return pp_formatted_text (&pp);\n+}\n+\n /* Detect and diagnose a mismatch between an attribute access specification\n    on the original declaration of FNDECL and that on the parameters NEWPARMS\n    from its refeclaration.  ORIGLOC is the location of the first declaration\n@@ -3585,10 +3598,9 @@ warn_parm_array_mismatch (location_t origloc, tree fndecl, tree newparms)\n \t       the same.  */\n \t    continue;\n \n-\t  const char* const newbndstr =\n-\t    newbnd ? print_generic_expr_to_str (newbnd) : \"*\";\n-\t  const char* const curbndstr =\n-\t    curbnd ? print_generic_expr_to_str (curbnd) : \"*\";\n+\t  pretty_printer pp1, pp2;\n+\t  const char* const newbndstr = expr_to_str (pp1, newbnd, \"*\");\n+\t  const char* const curbndstr = expr_to_str (pp2, curbnd, \"*\");\n \n \t  if (!newpos != !curpos\n \t      || (newpos && !tree_int_cst_equal (newpos, curpos)))"}, {"sha": "986f75d1d5fe58981fc7c9aaef3cd2486ae764ed", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7fd1475eb1ed2b3a39f988b33db176d4f7419/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=f3d7fd1475eb1ed2b3a39f988b33db176d4f7419", "patch": "@@ -169,7 +169,8 @@ print_generic_expr (FILE *file, tree t, dump_flags_t flags)\n   pp_flush (tree_pp);\n }\n \n-/* Print a single expression T to string, and return it.  */\n+/* Print a single expression T to string, and return it.  The caller\n+   must free the returned memory.  */\n \n char *\n print_generic_expr_to_str (tree t)"}]}