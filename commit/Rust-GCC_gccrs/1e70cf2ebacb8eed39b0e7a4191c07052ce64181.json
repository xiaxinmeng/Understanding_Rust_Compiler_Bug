{"sha": "1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3MGNmMmViYWNiOGVlZDM5YjBlN2E0MTkxYzA3MDUyY2U2NDE4MQ==", "commit": {"author": {"name": "Vasiliy Fofanov", "email": "fofanov@adacore.com", "date": "2019-07-05T07:03:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:03:35Z"}, "message": "[Ada] Ada.Wide_Wide_Characters.Handling: fix comments\n\n2019-07-05  Vasiliy Fofanov  <fofanov@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-wichha.ads (Is_Alphanumeric): Replace comment with\n\tthe correct one.  Also capitalize references to False\n\tthroughout.\n\nFrom-SVN: r273125", "tree": {"sha": "d3b2a37b04a4065f68e34a549ec230567572e197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b2a37b04a4065f68e34a549ec230567572e197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e70cf2ebacb8eed39b0e7a4191c07052ce64181/comments", "author": {"login": "t-14", "id": 18482303, "node_id": "MDQ6VXNlcjE4NDgyMzAz", "avatar_url": "https://avatars.githubusercontent.com/u/18482303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-14", "html_url": "https://github.com/t-14", "followers_url": "https://api.github.com/users/t-14/followers", "following_url": "https://api.github.com/users/t-14/following{/other_user}", "gists_url": "https://api.github.com/users/t-14/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-14/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-14/subscriptions", "organizations_url": "https://api.github.com/users/t-14/orgs", "repos_url": "https://api.github.com/users/t-14/repos", "events_url": "https://api.github.com/users/t-14/events{/privacy}", "received_events_url": "https://api.github.com/users/t-14/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d21328a0d42f1b6a92f777acf4972e3c1c5d330c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21328a0d42f1b6a92f777acf4972e3c1c5d330c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21328a0d42f1b6a92f777acf4972e3c1c5d330c"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "eb040231d9522dfa09b6afa587ec50dcce3ee404", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70cf2ebacb8eed39b0e7a4191c07052ce64181/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70cf2ebacb8eed39b0e7a4191c07052ce64181/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "patch": "@@ -1,3 +1,9 @@\n+2019-07-05  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* libgnat/a-wichha.ads (Is_Alphanumeric): Replace comment with\n+\tthe correct one.  Also capitalize references to False\n+\tthroughout.\n+\n 2019-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Indexed_Component): Do not expand actual"}, {"sha": "a906e02d799125006be5a1036e4a37b50b2496ed", "filename": "gcc/ada/libgnat/a-wichha.ads", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e70cf2ebacb8eed39b0e7a4191c07052ce64181/gcc%2Fada%2Flibgnat%2Fa-wichha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e70cf2ebacb8eed39b0e7a4191c07052ce64181/gcc%2Fada%2Flibgnat%2Fa-wichha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wichha.ads?ref=1e70cf2ebacb8eed39b0e7a4191c07052ce64181", "patch": "@@ -25,80 +25,80 @@ package Ada.Wide_Characters.Handling is\n    function Is_Control (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Control);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  other_control, otherwise returns false.\n+   --  other_control, otherwise returns False.\n \n    function Is_Letter (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Letter);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n    --  letter_uppercase, letter_lowercase, letter_titlecase, letter_modifier,\n-   --  letter_other, or number_letter. Otherwise returns false.\n+   --  letter_other, or number_letter. Otherwise returns False.\n \n    function Is_Lower (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Lower);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  letter_lowercase, otherwise returns false.\n+   --  letter_lowercase, otherwise returns False.\n \n    function Is_Upper (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Upper);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  letter_uppercase, otherwise returns false.\n+   --  letter_uppercase, otherwise returns False.\n \n    function Is_Digit (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Digit);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  number_decimal, otherwise returns false.\n+   --  number_decimal, otherwise returns False.\n \n    function Is_Decimal_Digit (Item : Wide_Character) return Boolean\n      renames Is_Digit;\n \n    function Is_Hexadecimal_Digit (Item : Wide_Character) return Boolean;\n    --  Returns True if the Wide_Character designated by Item is categorized as\n    --  number_decimal, or is in the range 'A' .. 'F' or 'a' .. 'f', otherwise\n-   --  returns false.\n+   --  returns False.\n \n    function Is_Alphanumeric (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Alphanumeric);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  number_decimal, or is in the range 'A' .. 'F' or 'a' .. 'f', otherwise\n-   --  returns false.\n+   --  letter_uppercase, letter_lowercase, letter_titlecase, letter_modifier,\n+   --  letter_other, number_letter, or number_decimal; otherwise returns False.\n \n    function Is_Special (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Special);\n    --  Returns True if the Wide_Character designated by Item is categorized\n    --  as graphic_character, but not categorized as letter_uppercase,\n    --  letter_lowercase, letter_titlecase, letter_modifier, letter_other,\n-   --  number_letter, or number_decimal. Otherwise returns false.\n+   --  number_letter, or number_decimal. Otherwise returns False.\n \n    function Is_Line_Terminator (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Line_Terminator);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n    --  separator_line or separator_paragraph, or if Item is a conventional line\n-   --  terminator character (CR, LF, VT, or FF). Otherwise returns false.\n+   --  terminator character (CR, LF, VT, or FF). Otherwise returns False.\n \n    function Is_Mark (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Mark);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  mark_non_spacing or mark_spacing_combining, otherwise returns false.\n+   --  mark_non_spacing or mark_spacing_combining, otherwise returns False.\n \n    function Is_Other_Format (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Other_Format);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  other_format, otherwise returns false.\n+   --  other_format, otherwise returns False.\n \n    function Is_Punctuation_Connector (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Punctuation_Connector);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  punctuation_connector, otherwise returns false.\n+   --  punctuation_connector, otherwise returns False.\n \n    function Is_Space (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Space);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  separator_space, otherwise returns false.\n+   --  separator_space, otherwise returns False.\n \n    function Is_Graphic (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Graphic);\n    --  Returns True if the Wide_Character designated by Item is categorized as\n-   --  graphic_character, otherwise returns false.\n+   --  graphic_character, otherwise returns False.\n \n    function To_Lower (Item : Wide_Character) return Wide_Character;\n    pragma Inline (To_Lower);"}]}