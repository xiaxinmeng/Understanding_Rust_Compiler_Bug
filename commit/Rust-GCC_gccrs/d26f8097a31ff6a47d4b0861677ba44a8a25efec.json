{"sha": "d26f8097a31ff6a47d4b0861677ba44a8a25efec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2ZjgwOTdhMzFmZjZhNDdkNGIwODYxNjc3YmE0NGE4YTI1ZWZlYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-11-12T16:52:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-11-12T16:52:08Z"}, "message": "tree.h (SAVE_EXPR_PERSISTENT_P): New macro.\n\n\t* tree.h (SAVE_EXPR_PERSISTENT_P): New macro.\n\t* tree.c (array_type_nelts): Don't handle SAVE_EXPRs specially.\n\t(unsave_expr_now): Don't unsave SAVE_EXPR_PERSISTENT_P\n\texpressions.\n\t* stor-layout.c (variable_size): Set SAVE_EXPR_PERSISTENT_P on\n\tvariable-sized array bounds.\n\nFrom-SVN: r30503", "tree": {"sha": "ca4319d8b6458e57f5d5a32ce72a5dfb816338ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca4319d8b6458e57f5d5a32ce72a5dfb816338ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26f8097a31ff6a47d4b0861677ba44a8a25efec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26f8097a31ff6a47d4b0861677ba44a8a25efec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26f8097a31ff6a47d4b0861677ba44a8a25efec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26f8097a31ff6a47d4b0861677ba44a8a25efec/comments", "author": null, "committer": null, "parents": [{"sha": "109cceda875779c29ee0ed68cf8ad0d4d5d44ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109cceda875779c29ee0ed68cf8ad0d4d5d44ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109cceda875779c29ee0ed68cf8ad0d4d5d44ce5"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "fd09377553641b674a125d81ac42a277ad3fa631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d26f8097a31ff6a47d4b0861677ba44a8a25efec", "patch": "@@ -1,3 +1,12 @@\n+Fri Nov 12 08:54:22 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (SAVE_EXPR_PERSISTENT_P): New macro.\n+\t* tree.c (array_type_nelts): Don't handle SAVE_EXPRs specially.\n+\t(unsave_expr_now): Don't unsave SAVE_EXPR_PERSISTENT_P\n+\texpressions.\n+\t* stor-layout.c (variable_size): Set SAVE_EXPR_PERSISTENT_P on\n+\tvariable-sized array bounds.\n+\t\n Fri Nov 12 08:04:45 1999  Catherine Moore  <clm@cygnus.com>\n \n \t* defaults.h (ASM_OUTPUT_ALTERNATE_LABEL_NAME):  Use"}, {"sha": "1433e8b439d96bfec5123f2bb7cb51ddc88b7ee9", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d26f8097a31ff6a47d4b0861677ba44a8a25efec", "patch": "@@ -97,6 +97,17 @@ variable_size (size)\n \n   size = save_expr (size);\n \n+  /* If an array with a variable number of elements is declared, and\n+     the elements require destruction, we will emit a cleanup for the\n+     array.  That cleanup is run both on normal exit from the block\n+     and in the exception-handler for the block.  Normally, when code\n+     is used in both ordinary code and in an exception handler it is\n+     `unsaved', i.e., all SAVE_EXPRs are recalculated.  However, we do\n+     not wish to do that here; the array-size is the same in both\n+     places.  */\n+  if (TREE_CODE (size) == SAVE_EXPR)\n+    SAVE_EXPR_PERSISTENT_P (size) = 1;\n+\n   if (global_bindings_p ())\n     {\n       if (TREE_CONSTANT (size))"}, {"sha": "a96d5c3e9fd4bf32612981d04e8c74482b7ea405", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d26f8097a31ff6a47d4b0861677ba44a8a25efec", "patch": "@@ -2236,10 +2236,7 @@ int_size_in_bytes (type)\n }\n \f\n /* Return, as a tree node, the number of elements for TYPE (which is an\n-   ARRAY_TYPE) minus one. This counts only elements of the top array.\n-\n-   Don't let any SAVE_EXPRs escape; if we are called as part of a cleanup\n-   action, they would get unsaved.  */\n+   ARRAY_TYPE) minus one. This counts only elements of the top array.  */\n \n tree\n array_type_nelts (type)\n@@ -2256,26 +2253,6 @@ array_type_nelts (type)\n   min = TYPE_MIN_VALUE (index_type);\n   max = TYPE_MAX_VALUE (index_type);\n \n-  if (! TREE_CONSTANT (min))\n-    {\n-      STRIP_NOPS (min);\n-      if (TREE_CODE (min) == SAVE_EXPR && SAVE_EXPR_RTL (min))\n-\tmin = build (RTL_EXPR, TREE_TYPE (TYPE_MIN_VALUE (index_type)), 0,\n-\t\t     SAVE_EXPR_RTL (min));\n-      else\n-\tmin = TYPE_MIN_VALUE (index_type);\n-    }\n-\n-  if (! TREE_CONSTANT (max))\n-    {\n-      STRIP_NOPS (max);\n-      if (TREE_CODE (max) == SAVE_EXPR && SAVE_EXPR_RTL (max))\n-\tmax = build (RTL_EXPR, TREE_TYPE (TYPE_MAX_VALUE (index_type)), 0,\n-\t\t     SAVE_EXPR_RTL (max));\n-      else\n-\tmax = TYPE_MAX_VALUE (index_type);\n-    }\n-\n   return (integer_zerop (min)\n \t  ? max\n \t  : fold (build (MINUS_EXPR, TREE_TYPE (max), max, min)));\n@@ -2465,7 +2442,8 @@ unsave_expr_now (expr)\n   switch (code)\n     {\n     case SAVE_EXPR:\n-      SAVE_EXPR_RTL (expr) = 0;\n+      if (!SAVE_EXPR_PERSISTENT_P (expr))\n+\tSAVE_EXPR_RTL (expr) = 0;\n       break;\n \n     case TARGET_EXPR:"}, {"sha": "1aa72d725e2f72f54678757534dc218e4f1523e4", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26f8097a31ff6a47d4b0861677ba44a8a25efec/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d26f8097a31ff6a47d4b0861677ba44a8a25efec", "patch": "@@ -717,6 +717,11 @@ struct tree_vec\n #define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND(NODE, 1)\n #define SAVE_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])\n #define SAVE_EXPR_NOPLACEHOLDER(NODE) TREE_UNSIGNED (NODE)\n+/* Nonzero if the SAVE_EXPRs value should be kept, even if it occurs\n+   both in normal code and in a handler.  (Normally, in a handler, all\n+   SAVE_EXPRs are unsaved, meaning that there values are\n+   recalculated.)  */\n+#define SAVE_EXPR_PERSISTENT_P(NODE) TREE_ASM_WRITTEN (NODE)\n \n /* In a RTL_EXPR node.  */\n #define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[0])"}]}