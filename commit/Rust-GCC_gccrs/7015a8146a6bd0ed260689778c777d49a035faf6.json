{"sha": "7015a8146a6bd0ed260689778c777d49a035faf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxNWE4MTQ2YTZiZDBlZDI2MDY4OTc3OGM3NzdkNDlhMDM1ZmFmNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-19T17:00:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-19T17:00:01Z"}, "message": "Fix typo in last change\n\nFrom-SVN: r29510", "tree": {"sha": "0cc2a3eb42fe9ed506190db480803d0131ec00fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc2a3eb42fe9ed506190db480803d0131ec00fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7015a8146a6bd0ed260689778c777d49a035faf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7015a8146a6bd0ed260689778c777d49a035faf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7015a8146a6bd0ed260689778c777d49a035faf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7015a8146a6bd0ed260689778c777d49a035faf6/comments", "author": null, "committer": null, "parents": [{"sha": "3b10cf4be76c929ba27a62c3dfd70b8017155635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b10cf4be76c929ba27a62c3dfd70b8017155635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b10cf4be76c929ba27a62c3dfd70b8017155635"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "5512a43320f1ef6dbd4389ec627c73401d252b6d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7015a8146a6bd0ed260689778c777d49a035faf6/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7015a8146a6bd0ed260689778c777d49a035faf6/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7015a8146a6bd0ed260689778c777d49a035faf6", "patch": "@@ -2298,7 +2298,11 @@ auto_inc_p (x)\n    to and including TO is safe to move.  If NEW_TO is non-NULL, and\n    the sequence is not already safe to move, but can be easily\n    extended to a sequence which is safe, then NEW_TO will point to the\n-   end of the extended sequence.  */\n+   end of the extended sequence.  \n+ \n+   For now, this function only checks that the region contains whole\n+   exception regiongs, but it could be extended to check additional\n+   conditions as well.  */\n \n int\n insns_safe_to_move_p (from, to, new_to)\n@@ -2310,6 +2314,11 @@ insns_safe_to_move_p (from, to, new_to)\n   int past_to_p = 0;\n   rtx r = from;\n \n+  /* By default, assume the end of the region will be what was\n+     suggested.  */\n+  if (new_to)\n+    *new_to = to;\n+\n   while (r)\n     {\n       if (GET_CODE (r) == NOTE)"}]}