{"sha": "01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkZGViZjIwODQyZTNlNmI5YjkzNDlhMmU2OGNkNzAyYmZjYzI3Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-07-30T23:54:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-07-30T23:54:56Z"}, "message": "re PR ada/36554 (verify_flow_info ICE can not throw but has EH edges)\n\n        PR ada/36554\n        * dwarf2out.c (is_subrange_type): Deal with BOOLEAN_TYPE.\nada/\n        * back_end.adb (Call_Back_End): Pass Standard_Boolean to gigi.\n        * gcc-interface/gigi.h (gigi): Take new standard_boolean parameter.\n        * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Subtype>:\n        Set precision to 1 for subtype of BOOLEAN_TYPE.\n        (set_rm_size): Set TYPE_RM_SIZE_NUM for BOOLEAN_TYPE.\n        (make_type_from_size): Deal with BOOLEAN_TYPE.\n        * gcc-interface/misc.c (gnat_print_type): Likewise.\n        * gcc-interface/trans.c (gigi): Take new standard_boolean parameter.\n        Set boolean_type_node as its translation in the table, as well\n        as boolean_false_node for False and boolean_true_node for True.\n        * gcc-interface/utils.c (gnat_init_decl_processing): Create custom\n        8-bit boolean_type_node and set its TYPE_RM_SIZE_NUM.\n        (create_param_decl): Deal with BOOLEAN_TYPE.\n        (build_vms_descriptor): Likewise.\n        (build_vms_descriptor64): Likewise.\n        (convert): Deal with BOOLEAN_TYPE like with ENUMERAL_TYPE.\n\nFrom-SVN: r138348", "tree": {"sha": "87a4eb9f676e3356453c46961c4ca3f72f9bd2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87a4eb9f676e3356453c46961c4ca3f72f9bd2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/comments", "author": null, "committer": null, "parents": [{"sha": "b8c71e40e0eecc003533b7f294fbe2d29e641326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c71e40e0eecc003533b7f294fbe2d29e641326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c71e40e0eecc003533b7f294fbe2d29e641326"}], "stats": {"total": 156, "additions": 138, "deletions": 18}, "files": [{"sha": "3584c53ca45a960554904e9eccd347ec7a2a5427", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -1,3 +1,8 @@\n+2008-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/36554\n+\t* dwarf2out.c (is_subrange_type): Deal with BOOLEAN_TYPE.\n+\n 2008-07-30  Rafael Avila de Espindola  <espindola@google.com>\n \n \tPR 36974"}, {"sha": "36c493e7ab507e4dbbc14232a32c24344925dca4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -1,3 +1,23 @@\n+2008-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/36554\n+\t* back_end.adb (Call_Back_End): Pass Standard_Boolean to gigi.\n+\t* gcc-interface/gigi.h (gigi): Take new standard_boolean parameter.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Subtype>:\n+\tSet precision to 1 for subtype of BOOLEAN_TYPE.\n+\t(set_rm_size): Set TYPE_RM_SIZE_NUM for BOOLEAN_TYPE.\n+\t(make_type_from_size): Deal with BOOLEAN_TYPE.\n+\t* gcc-interface/misc.c (gnat_print_type): Likewise.\n+\t* gcc-interface/trans.c (gigi): Take new standard_boolean parameter.\n+\tSet boolean_type_node as its translation in the table, as well\n+\tas boolean_false_node for False and boolean_true_node for True.\n+\t* gcc-interface/utils.c (gnat_init_decl_processing): Create custom\n+\t8-bit boolean_type_node and set its TYPE_RM_SIZE_NUM.\n+\t(create_param_decl): Deal with BOOLEAN_TYPE.\n+\t(build_vms_descriptor): Likewise.\n+\t(build_vms_descriptor64): Likewise.\n+\t(convert): Deal with BOOLEAN_TYPE like with ENUMERAL_TYPE.\n+\n 2008-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch9.adb: Minor reformatting\n@@ -16948,7 +16968,7 @@ PR ada/10768\n \t* utils.c (create_var_decl): Use have_global_bss_p when deciding\n \twhether to make the decl common.\n \n-2006-02-20  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2006-02-20  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in (Ada): Remove.\n \t(.PHONY): Remove Ada\n@@ -19406,11 +19426,11 @@ PR ada/10768\n \n \t* s-bitops.adb: Clarify comment for Bits_Array\n \n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in (ada.install-normal): Remove.\n \n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in: Remove all dependencies on s-gtype.\n "}, {"sha": "7a4e4dadf0ff24a299a611ea6b0e1b39e3b5236c", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -76,6 +76,7 @@ package body Back_End is\n          number_file                   : Nat;\n \n          file_info_ptr                 : Address;\n+         gigi_standard_boolean         : Entity_Id;\n          gigi_standard_integer         : Entity_Id;\n          gigi_standard_long_long_float : Entity_Id;\n          gigi_standard_exception_type  : Entity_Id;\n@@ -112,6 +113,7 @@ package body Back_End is\n          number_file        => Num_Source_Files,\n \n          file_info_ptr                 => File_Info_Array'Address,\n+         gigi_standard_boolean         => Standard_Boolean,\n          gigi_standard_integer         => Standard_Integer,\n          gigi_standard_long_long_float => Standard_Long_Long_Float,\n          gigi_standard_exception_type  => Standard_Exception_Type,"}, {"sha": "b02b9a041326af652afaaf568798f56cabc7eaea", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -1536,15 +1536,20 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t    gnu_expr, 0);\n \n       gnu_type = make_node (INTEGER_TYPE);\n+      TREE_TYPE (gnu_type) = get_unpadded_type (Etype (gnat_entity));\n+\n+      /* Set the precision to the Esize except for bit-packed arrays and\n+\t subtypes of Standard.Boolean.  */\n       if (Is_Packed_Array_Type (gnat_entity)\n \t  && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)))\n \t{\n \t  esize = UI_To_Int (RM_Size (gnat_entity));\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type) = 1;\n \t}\n+      else if (TREE_CODE (TREE_TYPE (gnu_type)) == BOOLEAN_TYPE)\n+        esize = 1;\n \n       TYPE_PRECISION (gnu_type) = esize;\n-      TREE_TYPE (gnu_type) = get_unpadded_type (Etype (gnat_entity));\n \n       TYPE_MIN_VALUE (gnu_type)\n \t= convert (TREE_TYPE (gnu_type),\n@@ -1596,7 +1601,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t are uninitialized.  Both goals are accomplished by wrapping the\n \t modular value in an enclosing struct.  */\n       if (Is_Packed_Array_Type (gnat_entity)\n-\t    && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)))\n+\t  && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)))\n \t{\n \t  tree gnu_field_type = gnu_type;\n \t  tree gnu_field;\n@@ -7106,7 +7111,8 @@ set_rm_size (Uint uint_size, tree gnu_type, Entity_Id gnat_entity)\n   if (TREE_CODE (gnu_type) == INTEGER_TYPE\n       && Is_Discrete_Or_Fixed_Point_Type (gnat_entity))\n     TYPE_RM_SIZE_NUM (gnu_type) = size;\n-  else if (TREE_CODE (gnu_type) == ENUMERAL_TYPE)\n+  else if (TREE_CODE (gnu_type) == ENUMERAL_TYPE\n+\t   || TREE_CODE (gnu_type) == BOOLEAN_TYPE)\n     TYPE_RM_SIZE_NUM (gnu_type) = size;\n   else if ((TREE_CODE (gnu_type) == RECORD_TYPE\n \t    || TREE_CODE (gnu_type) == UNION_TYPE\n@@ -7124,7 +7130,7 @@ static tree\n make_type_from_size (tree type, tree size_tree, bool for_biased)\n {\n   unsigned HOST_WIDE_INT size;\n-  bool biased_p;\n+  bool biased_p, boolean_p;\n   tree new_type;\n \n   /* If size indicates an error, just return TYPE to avoid propagating\n@@ -7138,13 +7144,23 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n     {\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       biased_p = (TREE_CODE (type) == INTEGER_TYPE\n \t\t  && TYPE_BIASED_REPRESENTATION_P (type));\n \n+      boolean_p = (TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t   || (TREE_CODE (type) == INTEGER_TYPE\n+\t\t       && TREE_TYPE (type)\n+\t\t       && TREE_CODE (TREE_TYPE (type)) == BOOLEAN_TYPE));\n+\n+      if (boolean_p)\n+\tsize = round_up_to_align (size, BITS_PER_UNIT);\n+\n       /* Only do something if the type is not a packed array type and\n \t doesn't already have the proper size.  */\n       if (TYPE_PACKED_ARRAY_TYPE_P (type)\n-\t  || (TYPE_PRECISION (type) == size && biased_p == for_biased))\n+\t  || (biased_p == for_biased && TYPE_PRECISION (type) == size)\n+\t  || (boolean_p && compare_tree_int (TYPE_SIZE (type), size) == 0))\n \tbreak;\n \n       biased_p |= for_biased;\n@@ -7154,13 +7170,18 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n \tnew_type = make_unsigned_type (size);\n       else\n \tnew_type = make_signed_type (size);\n+      if (boolean_p)\n+\tTYPE_PRECISION (new_type) = 1;\n       TREE_TYPE (new_type) = TREE_TYPE (type) ? TREE_TYPE (type) : type;\n       TYPE_MIN_VALUE (new_type)\n \t= convert (TREE_TYPE (new_type), TYPE_MIN_VALUE (type));\n       TYPE_MAX_VALUE (new_type)\n \t= convert (TREE_TYPE (new_type), TYPE_MAX_VALUE (type));\n       TYPE_BIASED_REPRESENTATION_P (new_type) = biased_p;\n-      TYPE_RM_SIZE_NUM (new_type) = bitsize_int (size);\n+      if (boolean_p)\n+\tTYPE_RM_SIZE_NUM (new_type) = bitsize_int (1);\n+      else\n+\tTYPE_RM_SIZE_NUM (new_type) = bitsize_int (size);\n       return new_type;\n \n     case RECORD_TYPE:"}, {"sha": "8055359863c38cbce0cb21b93da0a55690f4245e", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -218,6 +218,7 @@ extern void gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n                   struct List_Header *list_headers_ptr,\n                   Nat number_file,\n                   struct File_Info_Type *file_info_ptr,\n+                  Entity_Id standard_boolean,\n                   Entity_Id standard_integer,\n                   Entity_Id standard_long_long_float,\n                   Entity_Id standard_exception_type,"}, {"sha": "47d249a4578e0eab412fde58873f7bbdfc9a3640", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -544,6 +544,7 @@ gnat_print_type (FILE *file, tree node, int indent)\n       break;\n \n     case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       print_node (file, \"RM size\", TYPE_RM_SIZE_NUM (node), indent + 4);\n       break;\n "}, {"sha": "9d3f807c6e671377b47519a83024fdc39b548c11", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -231,12 +231,12 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n       struct Elist_Header *elists_ptr, struct Elmt_Item *elmts_ptr,\n       struct String_Entry *strings_ptr, Char_Code *string_chars_ptr,\n       struct List_Header *list_headers_ptr, Nat number_file,\n-      struct File_Info_Type *file_info_ptr,\n+      struct File_Info_Type *file_info_ptr, Entity_Id standard_boolean,\n       Entity_Id standard_integer, Entity_Id standard_long_long_float,\n       Entity_Id standard_exception_type, Int gigi_operating_mode)\n {\n-  tree gnu_standard_long_long_float;\n-  tree gnu_standard_exception_type;\n+  Entity_Id gnat_literal;\n+  tree gnu_standard_long_long_float, gnu_standard_exception_type, t;\n   struct elab_info *info;\n   int i;\n \n@@ -311,13 +311,35 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   /* Give names and make TYPE_DECLs for common types.  */\n   create_type_decl (get_identifier (SIZE_TYPE), sizetype,\n \t\t    NULL, false, true, Empty);\n+  create_type_decl (get_identifier (\"boolean\"), boolean_type_node,\n+\t\t    NULL, false, true, Empty);\n   create_type_decl (get_identifier (\"integer\"), integer_type_node,\n \t\t    NULL, false, true, Empty);\n   create_type_decl (get_identifier (\"unsigned char\"), char_type_node,\n \t\t    NULL, false, true, Empty);\n   create_type_decl (get_identifier (\"long integer\"), long_integer_type_node,\n \t\t    NULL, false, true, Empty);\n \n+  /* Save the type we made for boolean as the type for Standard.Boolean.  */\n+  save_gnu_tree (Base_Type (standard_boolean), TYPE_NAME (boolean_type_node),\n+\t\t false);\n+  gnat_literal = First_Literal (Base_Type (standard_boolean));\n+  t = UI_To_gnu (Enumeration_Rep (gnat_literal), boolean_type_node);\n+  gcc_assert (t == boolean_false_node);\n+  t = create_var_decl (get_entity_name (gnat_literal), NULL_TREE,\n+\t\t       boolean_type_node, t, true, false, false, false,\n+\t\t       NULL, gnat_literal);\n+  DECL_IGNORED_P (t) = 1;\n+  save_gnu_tree (gnat_literal, t, false);\n+  gnat_literal = Next_Literal (gnat_literal);\n+  t = UI_To_gnu (Enumeration_Rep (gnat_literal), boolean_type_node);\n+  gcc_assert (t == boolean_true_node);\n+  t = create_var_decl (get_entity_name (gnat_literal), NULL_TREE,\n+\t\t       boolean_type_node, t, true, false, false, false,\n+\t\t       NULL, gnat_literal);\n+  DECL_IGNORED_P (t) = 1;\n+  save_gnu_tree (gnat_literal, t, false);\n+\n   /* Save the type we made for integer as the type for Standard.Integer.\n      Then make the rest of the standard types.  Note that some of these\n      may be subtypes.  */"}, {"sha": "882293895ccfe349428748c5c883791626fa1087", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -523,6 +523,13 @@ gnat_init_decl_processing (void)\n      this before we can expand the GNAT types.  */\n   size_type_node = gnat_type_for_size (GET_MODE_BITSIZE (Pmode), 0);\n   set_sizetype (size_type_node);\n+\n+  /* In Ada, we use an unsigned 8-bit type for the default boolean type.  */\n+  boolean_type_node = make_node (BOOLEAN_TYPE);\n+  TYPE_PRECISION (boolean_type_node) = 1;\n+  fixup_unsigned_type (boolean_type_node);\n+  TYPE_RM_SIZE_NUM (boolean_type_node) = bitsize_int (1);\n+\n   build_common_tree_nodes_2 (0);\n \n   ptr_void_type_node = build_pointer_type (void_type_node);\n@@ -1762,7 +1769,8 @@ create_param_decl (tree param_name, tree param_type, bool readonly)\n      lead to various ABI violations.  */\n   if (targetm.calls.promote_prototypes (param_type)\n       && (TREE_CODE (param_type) == INTEGER_TYPE\n-\t  || TREE_CODE (param_type) == ENUMERAL_TYPE)\n+\t  || TREE_CODE (param_type) == ENUMERAL_TYPE\n+\t  || TREE_CODE (param_type) == BOOLEAN_TYPE)\n       && TYPE_PRECISION (param_type) < TYPE_PRECISION (integer_type_node))\n     {\n       /* We have to be careful about biased types here.  Make a subtype\n@@ -2690,6 +2698,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     {\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       if (TYPE_VAX_FLOATING_POINT_P (type))\n \tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n \t  {\n@@ -2992,6 +3001,7 @@ build_vms_descriptor64 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     {\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       if (TYPE_VAX_FLOATING_POINT_P (type))\n \tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n \t  {\n@@ -4035,9 +4045,6 @@ convert (tree type, tree expr)\n     case VOID_TYPE:\n       return fold_build1 (CONVERT_EXPR, type, expr);\n \n-    case BOOLEAN_TYPE:\n-      return fold_convert (type, gnat_truthvalue_conversion (expr));\n-\n     case INTEGER_TYPE:\n       if (TYPE_HAS_ACTUAL_BOUNDS_P (type)\n \t  && (ecode == ARRAY_TYPE || ecode == UNCONSTRAINED_ARRAY_TYPE\n@@ -4052,6 +4059,7 @@ convert (tree type, tree expr)\n       /* ... fall through ... */\n \n     case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       /* If we are converting an additive expression to an integer type\n \t with lower precision, be wary of the optimization that can be\n \t applied by convert_to_integer.  There are 2 problematic cases:"}, {"sha": "f553f2e454ac25022e2914d165e6d7b15044f954", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -8846,7 +8846,8 @@ is_subrange_type (const_tree type)\n     return false;\n \n   if (TREE_CODE (subtype) != INTEGER_TYPE\n-      && TREE_CODE (subtype) != ENUMERAL_TYPE)\n+      && TREE_CODE (subtype) != ENUMERAL_TYPE\n+      && TREE_CODE (subtype) != BOOLEAN_TYPE)\n     return false;\n \n   if (TREE_CODE (type) == TREE_CODE (subtype)"}, {"sha": "a40252920598dff2b32e2a3f66193a06aa69894f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -1,3 +1,7 @@\n+2008-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/boolean_expr.ad[sb]: New test.\n+\n 2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Joey Ye  <joey.ye@intel.com>\n \n@@ -3666,7 +3670,7 @@\n \tPR fortran/35780\n \t* gfortran.dg/simplify_argN_1.f90: New test.\n \n-2008-04-06  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+2008-04-06  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \tPR fortran/35832\n \t* gfortran.dg/io_constraints_2.f90: Adapt to new error message."}, {"sha": "6ac086dfe6d4eda183e41d6ec5cf9d027f48d4cd", "filename": "gcc/testsuite/gnat.dg/boolean_expr.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.adb?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -0,0 +1,30 @@\n+-- PR middle-end/36554\n+-- Origin: Laurent Guerby <laurent@guerby.net>\n+\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+package body Boolean_Expr is\n+\n+   function Long_Float_Is_Valid (X : in Long_Float) return Boolean is\n+      Is_Nan : constant Boolean := X /= X;\n+      Is_P_Inf : constant Boolean := X > Long_Float'Last;\n+      Is_M_Inf : constant Boolean := X < Long_Float'First;\n+      Is_Invalid : constant Boolean := Is_Nan or Is_P_Inf or Is_M_Inf;\n+   begin\n+      return not Is_Invalid;\n+   end Long_Float_Is_Valid;\n+\n+   function S (V : in Long_Float) return String is\n+   begin\n+      if not Long_Float_Is_Valid (V) then\n+         return \"INVALID\";\n+      else\n+         return \"OK\";\n+      end if;\n+   exception\n+      when others =>\n+         return \"ERROR\";\n+   end S;\n+\n+end Boolean_Expr;"}, {"sha": "8190ce77bd5996d8869e78b7d12bf0478ed5a483", "filename": "gcc/testsuite/gnat.dg/boolean_expr.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ddebf20842e3e6b9b9349a2e68cd702bfcc27b/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fboolean_expr.ads?ref=01ddebf20842e3e6b9b9349a2e68cd702bfcc27b", "patch": "@@ -0,0 +1,5 @@\n+package Boolean_Expr is\n+\n+   function S (V : in Long_Float) return String;\n+\n+end Boolean_Expr;"}]}