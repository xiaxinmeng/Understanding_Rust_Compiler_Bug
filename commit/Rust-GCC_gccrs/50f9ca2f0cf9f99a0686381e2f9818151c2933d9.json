{"sha": "50f9ca2f0cf9f99a0686381e2f9818151c2933d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmOWNhMmYwY2Y5Zjk5YTA2ODYzODFlMmY5ODE4MTUxYzI5MzNkOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-29T11:57:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-29T11:57:30Z"}, "message": "New test.\n\nFrom-SVN: r38533", "tree": {"sha": "43a75131386ccafbe89e39ecd102dc93f7cd00cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a75131386ccafbe89e39ecd102dc93f7cd00cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f9ca2f0cf9f99a0686381e2f9818151c2933d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f9ca2f0cf9f99a0686381e2f9818151c2933d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f9ca2f0cf9f99a0686381e2f9818151c2933d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f9ca2f0cf9f99a0686381e2f9818151c2933d9/comments", "author": null, "committer": null, "parents": [{"sha": "c17f08e1a828b0d08b13c72a0a327cd51ddfb500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17f08e1a828b0d08b13c72a0a327cd51ddfb500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17f08e1a828b0d08b13c72a0a327cd51ddfb500"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "fecf1978e84445082890174a9cbefd4258d398bd", "filename": "gcc/testsuite/gcc.c-torture/execute/20001229-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f9ca2f0cf9f99a0686381e2f9818151c2933d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001229-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f9ca2f0cf9f99a0686381e2f9818151c2933d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001229-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001229-1.c?ref=50f9ca2f0cf9f99a0686381e2f9818151c2933d9", "patch": "@@ -0,0 +1,48 @@\n+/* This testcase originally provoked an unaligned access fault on Alpha.\n+\n+   Since Digital Unix and Linux (and probably others) by default fix\n+   these up in the kernel, the failure was not visible unless one \n+   is sitting at the console examining logs.\n+\n+   So: If we know how, ask the kernel to deliver SIGBUS instead so\n+   that the test case visibly fails.  */\n+   \n+#if defined(__alpha__) && (defined(__linux__) || defined(__osf__))\n+#ifdef __linux__\n+#include <asm/sysinfo.h>\n+#include <asm/unistd.h>\n+\n+static inline int\n+setsysinfo(unsigned long op, void *buffer, unsigned long size,\n+           int *start, void *arg, unsigned long flag)\n+{\n+  syscall(__NR_osf_setsysinfo, op, buffer, size, start, arg, flag);\n+}\n+\n+#else\n+#include <sys/sysinfo.h>\n+#endif\n+   \n+static void __attribute__((constructor))\n+trap_unaligned(void)\n+{\n+  unsigned int buf[2];\n+  buf[0] = SSIN_UACPROC;\n+  buf[1] = UAC_SIGBUS | UAC_NOPRINT;\n+  setsysinfo(SSI_NVPAIRS, buf, 1, 0, 0, 0);\n+}\n+#endif /* alpha */\n+\n+void foo(char *a, char *b) { }\n+\n+void showinfo()\n+{\n+    char uname[33] = \"\", tty[38] = \"/dev/\";\n+    foo(uname, tty);\n+}\n+\n+int main()\n+{\n+  showinfo ();\n+  exit (0);\n+}"}]}