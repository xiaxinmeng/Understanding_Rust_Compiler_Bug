{"sha": "4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExNWQ4NDIyOGVlMjlkNTVjZDAxMTA5NGY4MmM4ZDRmYTlhNWE3Ng==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-07-23T08:41:35Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-07-23T08:41:35Z"}, "message": "re PR libstdc++/81064 (Inline namespace regression)\n\n2017-07-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/81064\n\t* include/bits/algorithmfwd.h: Reorganize versioned namespace.\n\t* include/bits/basic_string.h: Likewise.\n\t* include/bits/c++config: Likewise.\n\t* include/bits/deque.tcc: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/forward_list.tcc: Likewise.\n\t* include/bits/hashtable_policy.h: Likewise.\n\t* include/bits/list.tcc: Likewise.\n\t* include/bits/move.h: Likewise.\n\t* include/bits/quoted_string.h: Likewise.\n\t* include/bits/random.h: Likewise.\n\t* include/bits/random.tcc: Likewise.\n\t* include/bits/regex.h: Likewise.\n\t* include/bits/regex.tcc: Likewise.\n\t* include/bits/regex_automaton.h: Likewise.\n\t* include/bits/regex_automaton.tcc: Likewise.\n\t* include/bits/regex_compiler.h: Likewise.\n\t* include/bits/regex_compiler.tcc: Likewise.\n\t* include/bits/regex_constants.h: Likewise.\n\t* include/bits/regex_error.h: Likewise.\n\t* include/bits/regex_executor.h: Likewise.\n\t* include/bits/regex_executor.tcc: Likewise.\n\t* include/bits/regex_scanner.h: Likewise.\n\t* include/bits/regex_scanner.tcc: Likewise.\n\t* include/bits/specfun.h: Likewise.\n\t* include/bits/stl_algo.h: Likewise.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_iterator.h: Likewise.\n\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_relops.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/uniform_int_dist.h: Likewise.\n\t* include/bits/unordered_map.h: Likewise.\n\t* include/bits/unordered_set.h: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\t* include/c_global/cmath: Likewise.\n\t* include/c_std/cmath: Likewise.\n\t* include/decimal/decimal: Likewise.\n\t* include/decimal/decimal.h: Likewise.\n\t* include/experimental/algorithm: Likewise.\n\t* include/experimental/any: Likewise.\n\t* include/experimental/array: Likewise.\n\t* include/experimental/bits/erase_if.h: Likewise.\n\t* include/experimental/bits/fs_dir.h: Likewise.\n\t* include/experimental/bits/fs_fwd.h: Likewise.\n\t* include/experimental/bits/fs_ops.h: Likewise.\n\t* include/experimental/bits/fs_path.h: Likewise.\n\t* include/experimental/bits/lfts_config.h: Likewise.\n\t* include/experimental/bits/shared_ptr.h: Likewise.\n\t* include/experimental/bits/string_view.tcc: Likewise.\n\t* include/experimental/chrono: Likewise.\n\t* include/experimental/deque: Likewise.\n\t* include/experimental/filesystem: Likewise.\n\t* include/experimental/forward_list: Likewise.\n\t* include/experimental/functional: Likewise.\n\t* include/experimental/iterator: Likewise.\n\t* include/experimental/list: Likewise.\n\t* include/experimental/map: Likewise.\n\t* include/experimental/memory: Likewise.\n\t* include/experimental/memory_resource: Likewise.\n\t* include/experimental/numeric: Likewise.\n\t* include/experimental/optional: Likewise.\n\t* include/experimental/propagate_const: Likewise.\n\t* include/experimental/random: Likewise.\n\t* include/experimental/ratio: Likewise.\n\t* include/experimental/regex: Likewise.\n\t* include/experimental/set: Likewise.\n\t* include/experimental/source_location: Likewise.\n\t* include/experimental/string: Likewise.\n\t* include/experimental/string_view: Likewise.\n\t* include/experimental/system_error: Likewise.\n\t* include/experimental/tuple: Likewise.\n\t* include/experimental/type_traits: Likewise.\n\t* include/experimental/unordered_map: Likewise.\n\t* include/experimental/unordered_set: Likewise.\n\t* include/experimental/utility: Likewise.\n\t* include/experimental/vector: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/codecvt_specializations.h: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/typelist.h: Likewise.\n\t* include/std/chrono: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/std/functional: Likewise.\n\t* include/std/numeric: Likewise.\n\t* include/std/string_view: Likewise.\n\t* include/std/thread: Likewise.\n\t* include/std/variant: Likewise.\n\t* include/tr1/array: Likewise.\n\t* include/tr1/bessel_function.tcc: Likewise.\n\t* include/tr1/beta_function.tcc: Likewise.\n\t* include/tr1/cmath: Likewise.\n\t* include/tr1/complex: Likewise.\n\t* include/tr1/ell_integral.tcc: Likewise.\n\t* include/tr1/exp_integral.tcc: Likewise.\n\t* include/tr1/functional: Likewise.\n\t* include/tr1/functional_hash.h: Likewise.\n\t* include/tr1/gamma.tcc: Likewise.\n\t* include/tr1/hashtable.h: Likewise.\n\t* include/tr1/hashtable_policy.h: Likewise.\n\t* include/tr1/hypergeometric.tcc: Likewise.\n\t* include/tr1/legendre_function.tcc: Likewise.\n\t* include/tr1/modified_bessel_func.tcc: Likewise.\n\t* include/tr1/poly_hermite.tcc: Likewise.\n\t* include/tr1/poly_laguerre.tcc: Likewise.\n\t* include/tr1/random.h: Likewise.\n\t* include/tr1/random.tcc: Likewise.\n\t* include/tr1/regex: Likewise.\n\t* include/tr1/riemann_zeta.tcc: Likewise.\n\t* include/tr1/shared_ptr.h: Likewise.\n\t* include/tr1/special_function_util.h: Likewise.\n\t* include/tr1/tuple: Likewise.\n\t* include/tr1/type_traits: Likewise.\n\t* include/tr1/unordered_map.h: Likewise.\n\t* include/tr1/unordered_set.h: Likewise.\n\t* include/tr1/utility: Likewise.\n\t* include/tr2/bool_set: Likewise.\n\t* include/tr2/bool_set.tcc: Likewise.\n\t* include/tr2/dynamic_bitset: Likewise.\n\t* include/tr2/dynamic_bitset.tcc: Likewise.\n\t* include/tr2/ratio: Likewise.\n\t* include/tr2/type_traits: Likewise.\n\t* src/c++11/chrono.cc: Likewise.\n\t* src/c++11/compatibility-c++0x.cc: Likewise.\n\t* src/c++11/compatibility-chrono.cc: Likewise.\n\t* src/c++11/cxx11-shim_facets.cc: Likewise.\n\t* src/c++11/hashtable_c++0x.cc: Likewise.\n\t* src/c++11/placeholders.cc: Likewise.\n\t* src/c++11/thread.cc: Likewise.\n\t* src/c++98/bitmap_allocator.cc: Likewise.\n\t* src/c++98/hashtable_tr1.cc: Likewise.\n\t* src/c++98/list.cc: Likewise.\n\t* src/shared/hashtable-aux.cc: Likewise.\n\t* testsuite/20_util/duration/literals/range.cc: Adapt line number.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n\t* testsuite/26_numerics/gcd/gcd_neg.cc: Likewise.\n\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Likewise.\n\t* python/libstdcxx/v6/printers.py: Adapt.\n\nFrom-SVN: r250458", "tree": {"sha": "a69d765d4e4329c2f05c93f016dce503324d9641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69d765d4e4329c2f05c93f016dce503324d9641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/comments", "author": null, "committer": null, "parents": [{"sha": "ab45a34c442b338c08537f0ca8ce1c1eca65cfd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab45a34c442b338c08537f0ca8ce1c1eca65cfd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab45a34c442b338c08537f0ca8ce1c1eca65cfd3"}], "stats": {"total": 1728, "additions": 797, "deletions": 931}, "files": [{"sha": "edd6f3ffbac19412576f40cf65fdd52b061da5e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -1,3 +1,157 @@\n+2017-07-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/81064\n+\t* include/bits/algorithmfwd.h: Reorganize versioned namespace.\n+\t* include/bits/basic_string.h: Likewise.\n+\t* include/bits/c++config: Likewise.\n+\t* include/bits/deque.tcc: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/forward_list.tcc: Likewise.\n+\t* include/bits/hashtable_policy.h: Likewise.\n+\t* include/bits/list.tcc: Likewise.\n+\t* include/bits/move.h: Likewise.\n+\t* include/bits/quoted_string.h: Likewise.\n+\t* include/bits/random.h: Likewise.\n+\t* include/bits/random.tcc: Likewise.\n+\t* include/bits/regex.h: Likewise.\n+\t* include/bits/regex.tcc: Likewise.\n+\t* include/bits/regex_automaton.h: Likewise.\n+\t* include/bits/regex_automaton.tcc: Likewise.\n+\t* include/bits/regex_compiler.h: Likewise.\n+\t* include/bits/regex_compiler.tcc: Likewise.\n+\t* include/bits/regex_constants.h: Likewise.\n+\t* include/bits/regex_error.h: Likewise.\n+\t* include/bits/regex_executor.h: Likewise.\n+\t* include/bits/regex_executor.tcc: Likewise.\n+\t* include/bits/regex_scanner.h: Likewise.\n+\t* include/bits/regex_scanner.tcc: Likewise.\n+\t* include/bits/specfun.h: Likewise.\n+\t* include/bits/stl_algo.h: Likewise.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_iterator.h: Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_relops.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/uniform_int_dist.h: Likewise.\n+\t* include/bits/unordered_map.h: Likewise.\n+\t* include/bits/unordered_set.h: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\t* include/c_global/cmath: Likewise.\n+\t* include/c_std/cmath: Likewise.\n+\t* include/decimal/decimal: Likewise.\n+\t* include/decimal/decimal.h: Likewise.\n+\t* include/experimental/algorithm: Likewise.\n+\t* include/experimental/any: Likewise.\n+\t* include/experimental/array: Likewise.\n+\t* include/experimental/bits/erase_if.h: Likewise.\n+\t* include/experimental/bits/fs_dir.h: Likewise.\n+\t* include/experimental/bits/fs_fwd.h: Likewise.\n+\t* include/experimental/bits/fs_ops.h: Likewise.\n+\t* include/experimental/bits/fs_path.h: Likewise.\n+\t* include/experimental/bits/lfts_config.h: Likewise.\n+\t* include/experimental/bits/shared_ptr.h: Likewise.\n+\t* include/experimental/bits/string_view.tcc: Likewise.\n+\t* include/experimental/chrono: Likewise.\n+\t* include/experimental/deque: Likewise.\n+\t* include/experimental/filesystem: Likewise.\n+\t* include/experimental/forward_list: Likewise.\n+\t* include/experimental/functional: Likewise.\n+\t* include/experimental/iterator: Likewise.\n+\t* include/experimental/list: Likewise.\n+\t* include/experimental/map: Likewise.\n+\t* include/experimental/memory: Likewise.\n+\t* include/experimental/memory_resource: Likewise.\n+\t* include/experimental/numeric: Likewise.\n+\t* include/experimental/optional: Likewise.\n+\t* include/experimental/propagate_const: Likewise.\n+\t* include/experimental/random: Likewise.\n+\t* include/experimental/ratio: Likewise.\n+\t* include/experimental/regex: Likewise.\n+\t* include/experimental/set: Likewise.\n+\t* include/experimental/source_location: Likewise.\n+\t* include/experimental/string: Likewise.\n+\t* include/experimental/string_view: Likewise.\n+\t* include/experimental/system_error: Likewise.\n+\t* include/experimental/tuple: Likewise.\n+\t* include/experimental/type_traits: Likewise.\n+\t* include/experimental/unordered_map: Likewise.\n+\t* include/experimental/unordered_set: Likewise.\n+\t* include/experimental/utility: Likewise.\n+\t* include/experimental/vector: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/codecvt_specializations.h: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/typelist.h: Likewise.\n+\t* include/std/chrono: Likewise.\n+\t* include/std/complex: Likewise.\n+\t* include/std/functional: Likewise.\n+\t* include/std/numeric: Likewise.\n+\t* include/std/string_view: Likewise.\n+\t* include/std/thread: Likewise.\n+\t* include/std/variant: Likewise.\n+\t* include/tr1/array: Likewise.\n+\t* include/tr1/bessel_function.tcc: Likewise.\n+\t* include/tr1/beta_function.tcc: Likewise.\n+\t* include/tr1/cmath: Likewise.\n+\t* include/tr1/complex: Likewise.\n+\t* include/tr1/ell_integral.tcc: Likewise.\n+\t* include/tr1/exp_integral.tcc: Likewise.\n+\t* include/tr1/functional: Likewise.\n+\t* include/tr1/functional_hash.h: Likewise.\n+\t* include/tr1/gamma.tcc: Likewise.\n+\t* include/tr1/hashtable.h: Likewise.\n+\t* include/tr1/hashtable_policy.h: Likewise.\n+\t* include/tr1/hypergeometric.tcc: Likewise.\n+\t* include/tr1/legendre_function.tcc: Likewise.\n+\t* include/tr1/modified_bessel_func.tcc: Likewise.\n+\t* include/tr1/poly_hermite.tcc: Likewise.\n+\t* include/tr1/poly_laguerre.tcc: Likewise.\n+\t* include/tr1/random.h: Likewise.\n+\t* include/tr1/random.tcc: Likewise.\n+\t* include/tr1/regex: Likewise.\n+\t* include/tr1/riemann_zeta.tcc: Likewise.\n+\t* include/tr1/shared_ptr.h: Likewise.\n+\t* include/tr1/special_function_util.h: Likewise.\n+\t* include/tr1/tuple: Likewise.\n+\t* include/tr1/type_traits: Likewise.\n+\t* include/tr1/unordered_map.h: Likewise.\n+\t* include/tr1/unordered_set.h: Likewise.\n+\t* include/tr1/utility: Likewise.\n+\t* include/tr2/bool_set: Likewise.\n+\t* include/tr2/bool_set.tcc: Likewise.\n+\t* include/tr2/dynamic_bitset: Likewise.\n+\t* include/tr2/dynamic_bitset.tcc: Likewise.\n+\t* include/tr2/ratio: Likewise.\n+\t* include/tr2/type_traits: Likewise.\n+\t* src/c++11/chrono.cc: Likewise.\n+\t* src/c++11/compatibility-c++0x.cc: Likewise.\n+\t* src/c++11/compatibility-chrono.cc: Likewise.\n+\t* src/c++11/cxx11-shim_facets.cc: Likewise.\n+\t* src/c++11/hashtable_c++0x.cc: Likewise.\n+\t* src/c++11/placeholders.cc: Likewise.\n+\t* src/c++11/thread.cc: Likewise.\n+\t* src/c++98/bitmap_allocator.cc: Likewise.\n+\t* src/c++98/hashtable_tr1.cc: Likewise.\n+\t* src/c++98/list.cc: Likewise.\n+\t* src/shared/hashtable-aux.cc: Likewise.\n+\t* testsuite/20_util/duration/literals/range.cc: Adapt line number.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n+\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n+\t* testsuite/26_numerics/gcd/gcd_neg.cc: Likewise.\n+\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Likewise.\n+\t* python/libstdcxx/v6/printers.py: Adapt.\n+\n 2017-07-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/allocator/malloc_allocator_base.h [__SANITIZE_ADDRESS__]"}, {"sha": "673b98e7867d96b93938038f4bb7fc55bd50cb30", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -615,8 +615,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _FIter\n     upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _FIter>\n@@ -845,6 +843,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n \n _GLIBCXX_END_NAMESPACE_ALGO\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #ifdef _GLIBCXX_PARALLEL"}, {"sha": "a343d7b16286709cfff817450115dddd585a520f", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -6470,8 +6470,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n #if __cplusplus > 201103L\n \n #define __cpp_lib_string_udls 201304\n@@ -6480,8 +6478,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n   {\n   inline namespace string_literals\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char>\n     operator\"\"s(const char* __str, size_t __len)\n@@ -6506,12 +6502,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string<char32_t>{__str, __len}; }\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n   } // inline namespace string_literals\n   } // inline namespace literals\n \n #endif // __cplusplus > 201103L\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "d5d1d24ee1a1a8293536cacb6ba4cf3bf5490766", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 23, "deletions": 55, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -267,88 +267,58 @@ namespace __gnu_cxx\n # define _GLIBCXX_DEFAULT_ABI_TAG\n #endif\n \n-\n // Defined if inline namespaces are used for versioning.\n #define _GLIBCXX_INLINE_VERSION \n \n // Inline namespace for symbol versioning.\n #if _GLIBCXX_INLINE_VERSION\n+# define _GLIBCXX_BEGIN_NAMESPACE_VERSION namespace __8 {\n+# define _GLIBCXX_END_NAMESPACE_VERSION }\n \n namespace std\n {\n-  inline namespace __8 { }\n-\n-  namespace rel_ops { inline namespace __8 { } }\n-\n-  namespace tr1\n-  {\n-    inline namespace __8 { }\n-    namespace placeholders { inline namespace __8 { } }\n-    namespace regex_constants { inline namespace __8 { } }\n-    namespace __detail { inline namespace __8 { } }\n-  }\n-\n-  namespace tr2\n-  { inline namespace __8 { } }\n-\n-  namespace decimal { inline namespace __8 { } }\n-\n-#if __cplusplus >= 201103L\n-  namespace chrono { inline namespace __8 { } }\n-  namespace placeholders { inline namespace __8 { } }\n-  namespace regex_constants { inline namespace __8 { } }\n-  namespace this_thread { inline namespace __8 { } }\n-\n+inline _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n   inline namespace literals {\n-    inline namespace chrono_literals { inline namespace __8 { } }\n-    inline namespace complex_literals { inline namespace __8 { } }\n-    inline namespace string_literals { inline namespace __8 { } }\n+    inline namespace chrono_literals { }\n+    inline namespace complex_literals { }\n+    inline namespace string_literals { }\n #if __cplusplus > 201402L\n-    inline namespace string_view_literals { inline namespace __8 { } }\n+    inline namespace string_view_literals { }\n #endif // C++17\n   }\n #endif // C++14\n-#endif // C++11\n-\n-  namespace __detail {\n-    inline namespace __8 { }\n-#if __cplusplus > 201402L\n-    namespace __variant { inline namespace __8 { } }\n-#endif\n-  }\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n namespace __gnu_cxx\n {\n-  inline namespace __8 { }\n-  namespace __detail { inline namespace __8 { } }\n+inline _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n-# define _GLIBCXX_BEGIN_NAMESPACE_VERSION namespace __8 {\n-# define _GLIBCXX_END_NAMESPACE_VERSION }\n+\n #else\n # define _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # define _GLIBCXX_END_NAMESPACE_VERSION\n #endif\n \n-\n // Inline namespaces for special modes: debug, parallel, profile.\n #if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PARALLEL) \\\n     || defined(_GLIBCXX_PROFILE)\n namespace std\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // Non-inline namespace for components replaced by alternates in active mode.\n   namespace __cxx1998\n   {\n-# if _GLIBCXX_INLINE_VERSION\n-  inline namespace __8 { }\n-# endif\n-\n # if _GLIBCXX_USE_CXX11_ABI\n   inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n # endif\n   }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n   // Inline namespace for debug mode.\n # ifdef _GLIBCXX_DEBUG\n   inline namespace __debug { }\n@@ -396,25 +366,23 @@ namespace std\n #if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PROFILE)\n # define _GLIBCXX_STD_C __cxx1998\n # define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER \\\n-\t namespace _GLIBCXX_STD_C { _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_END_NAMESPACE_CONTAINER \\\n-\t _GLIBCXX_END_NAMESPACE_VERSION }\n+\t namespace _GLIBCXX_STD_C {\n+# define _GLIBCXX_END_NAMESPACE_CONTAINER }\n #else\n # define _GLIBCXX_STD_C std\n-# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX_END_NAMESPACE_VERSION\n+# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+# define _GLIBCXX_END_NAMESPACE_CONTAINER\n #endif\n \n #ifdef _GLIBCXX_PARALLEL\n # define _GLIBCXX_STD_A __cxx1998\n # define _GLIBCXX_BEGIN_NAMESPACE_ALGO \\\n-\t namespace _GLIBCXX_STD_A { _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_END_NAMESPACE_ALGO \\\n-\t _GLIBCXX_END_NAMESPACE_VERSION }\n+\t namespace _GLIBCXX_STD_A {\n+# define _GLIBCXX_END_NAMESPACE_ALGO }\n #else\n # define _GLIBCXX_STD_A std\n-# define _GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX_END_NAMESPACE_VERSION\n+# define _GLIBCXX_BEGIN_NAMESPACE_ALGO\n+# define _GLIBCXX_END_NAMESPACE_ALGO\n #endif\n \n // GLIBCXX_ABI Deprecated"}, {"sha": "d25ad690178aff65fdf661d934592fb945a63846", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -58,6 +58,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #if __cplusplus >= 201103L\n@@ -1107,6 +1108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif"}, {"sha": "9d86fcc1568e957a74edd9822ff00d0a73a26aec", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,6 +43,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n@@ -1440,6 +1441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { __lx.swap(__ly); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _FORWARD_LIST_H"}, {"sha": "64bd9c4bf134eeabd3bee0f5540e1b01ee2d23ca", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,6 +32,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n@@ -493,6 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n  \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _FORWARD_LIST_TCC */"}, {"sha": "a3a31d1fb1197d8ab96b3c484e3398774210dd94", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,12 +43,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _RehashPolicy, typename _Traits>\n     class _Hashtable;\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n namespace __detail\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    *  @defgroup hashtable-detail Base and Implementation Classes\n    *  @ingroup unordered_associative_containers\n@@ -2122,8 +2118,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n  //@} hashtable-detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _HASHTABLE_POLICY_H"}, {"sha": "e21dab5426387f598c05f6a649fc0e7053d91e04", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -58,6 +58,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n@@ -594,6 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _LIST_TCC */"}, {"sha": "373f955652449c142344aea008301c0d32cb1a13", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -47,10 +47,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT\n     { return __builtin_addressof(__r); }\n \n+#if __cplusplus >= 201103L\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if __cplusplus >= 201103L\n #include <type_traits> // Brings in std::declval too.\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -153,8 +154,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// @} group utilities\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n \n #define _GLIBCXX_MOVE(__val) std::move(__val)\n #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)\n@@ -163,10 +162,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #define _GLIBCXX_FORWARD(_Tp, __val) (__val)\n #endif\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    *  @addtogroup utilities\n    *  @{"}, {"sha": "0e51c2234335521d8a05fd00d484d21592910f92", "filename": "libstdc++-v3/include/bits/quoted_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fquoted_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fquoted_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fquoted_string.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -39,9 +39,9 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  namespace __detail {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  namespace __detail {\n     /**\n      * @brief Struct for delimited strings.\n      */\n@@ -155,9 +155,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n \treturn __is;\n       }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "2b022b2f4693474ed712da6649317c3db0427a2a", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -58,15 +58,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _RealType\n     generate_canonical(_UniformRandomNumberGenerator& __g);\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n   /*\n    * Implementation-space details.\n    */\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     template<typename _UIntType, size_t __w,\n \t     bool = __w < static_cast<size_t>\n \t\t\t  (std::numeric_limits<_UIntType>::digits)>\n@@ -189,11 +185,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t_Engine& _M_g;\n       };\n \n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @addtogroup random_generators Random Number Generators\n    * @ingroup random"}, {"sha": "95bcf0a163e48bd04871cdf44e1f82bab99e5b32", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -34,13 +34,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /*\n    * (Further) implementation-space details.\n    */\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // General case for x = (ax + c) mod m -- use Schrage's algorithm\n     // to avoid integer overflow.\n     //\n@@ -89,11 +89,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \treturn __result;\n       }\n \n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     constexpr _UIntType\n     linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;"}, {"sha": "32e7159eec916640ae3a4781ad682cfc4f0fdedf", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 65, "deletions": 77, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -39,12 +39,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     class match_results;\n \n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n namespace __detail\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   enum class _RegexExecutorPolicy : int\n     { _S_auto, _S_alternate };\n \n@@ -53,19 +50,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   _RegexExecutorPolicy __policy,\n \t   bool __match_mode>\n     bool\n-    __regex_algo_impl(_BiIter                              __s,\n-\t\t      _BiIter                              __e,\n+    __regex_algo_impl(_BiIter\t\t\t      __s,\n+\t\t      _BiIter\t\t\t      __e,\n \t\t      match_results<_BiIter, _Alloc>&      __m,\n \t\t      const basic_regex<_CharT, _TraitsT>& __re,\n \t\t      regex_constants::match_flag_type     __flags);\n \n   template<typename, typename, typename, bool>\n     class _Executor;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   /**\n@@ -87,9 +81,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     struct regex_traits\n     {\n     public:\n-      typedef _Ch_type                     \tchar_type;\n-      typedef std::basic_string<char_type> \tstring_type;\n-      typedef std::locale                  \tlocale_type;\n+      typedef _Ch_type\t\t\t\tchar_type;\n+      typedef std::basic_string<char_type>\tstring_type;\n+      typedef std::locale\t\t\tlocale_type;\n     private:\n       struct _RegexMask\n \t{\n@@ -397,8 +391,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t    \"regex traits class must have the same char_type\");\n \n       // types:\n-      typedef _Ch_type                            value_type;\n-      typedef _Rx_traits                          traits_type;\n+      typedef _Ch_type\t\t\t\t  value_type;\n+      typedef _Rx_traits\t\t\t  traits_type;\n       typedef typename traits_type::string_type   string_type;\n       typedef regex_constants::syntax_option_type flag_type;\n       typedef typename traits_type::locale_type   locale_type;\n@@ -771,20 +765,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n-\tfriend bool __detail::\n-#if _GLIBCXX_INLINE_VERSION\n-        __8:: // Required due to PR c++/59256\n-#endif\n-\t__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-                          const basic_regex<_Cp, _Rp>&,\n-                          regex_constants::match_flag_type);\n+\tfriend bool\n+\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n+\t\t\t\t    regex_constants::match_flag_type);\n \n       template<typename, typename, typename, bool>\n \tfriend class __detail::_Executor;\n \n-      flag_type              _M_flags;\n-      locale_type            _M_loc;\n-      _AutomatonPtr          _M_automaton;\n+      flag_type\t      _M_flags;\n+      locale_type\t    _M_loc;\n+      _AutomatonPtr\t  _M_automaton;\n     };\n \n #if __cpp_deduction_guides >= 201606\n@@ -837,8 +828,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     public:\n       typedef typename __iter_traits::value_type      \tvalue_type;\n       typedef typename __iter_traits::difference_type \tdifference_type;\n-      typedef _BiIter                                   iterator;\n-      typedef std::basic_string<value_type>             string_type;\n+      typedef _BiIter\t\t\t\t   iterator;\n+      typedef std::basic_string<value_type>\t     string_type;\n \n       bool matched;\n \n@@ -923,14 +914,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n \n   /** @brief Standard regex submatch over a C-style null-terminated string. */\n-  typedef sub_match<const char*>             csub_match;\n+  typedef sub_match<const char*>\t     csub_match;\n \n   /** @brief Standard regex submatch over a standard string. */\n   typedef sub_match<string::const_iterator>  ssub_match;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   /** @brief Regex submatch over a C-style null-terminated wide string. */\n-  typedef sub_match<const wchar_t*>          wcsub_match;\n+  typedef sub_match<const wchar_t*>\t  wcsub_match;\n \n   /** @brief Regex submatch over a standard wide string. */\n   typedef sub_match<wstring::const_iterator> wssub_match;\n@@ -1548,16 +1539,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @name 10.? Public Types\n        */\n       //@{\n-      typedef sub_match<_Bi_iter>                          value_type;\n-      typedef const value_type&                            const_reference;\n-      typedef const_reference                              reference;\n-      typedef typename _Base_type::const_iterator          const_iterator;\n-      typedef const_iterator                               iterator;\n+      typedef sub_match<_Bi_iter>\t\t\t   value_type;\n+      typedef const value_type&\t\t\t\t   const_reference;\n+      typedef const_reference\t\t\t\t   reference;\n+      typedef typename _Base_type::const_iterator\t   const_iterator;\n+      typedef const_iterator\t\t\t\t   iterator;\n       typedef typename __iter_traits::difference_type\t   difference_type;\n       typedef typename allocator_traits<_Alloc>::size_type size_type;\n-      typedef _Alloc                                       allocator_type;\n+      typedef _Alloc\t\t\t\t\t   allocator_type;\n       typedef typename __iter_traits::value_type \t   char_type;\n-      typedef std::basic_string<char_type>                 string_type;\n+      typedef std::basic_string<char_type>\t\t   string_type;\n       //@}\n \n     public:\n@@ -1872,13 +1863,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n-\tfriend bool __detail::\n-#if _GLIBCXX_INLINE_VERSION\n-        __8:: // Required due to PR c++/59256\n-#endif\n-\t__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-                          const basic_regex<_Cp, _Rp>&,\n-                          regex_constants::match_flag_type);\n+\tfriend bool\n+\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n+\t\t\t\t    regex_constants::match_flag_type);\n \n       void\n       _M_resize(unsigned int __size)\n@@ -1911,10 +1899,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _Bi_iter _M_begin;\n     };\n \n-  typedef match_results<const char*>             cmatch;\n-  typedef match_results<string::const_iterator>  smatch;\n+  typedef match_results<const char*>\t\t cmatch;\n+  typedef match_results<string::const_iterator>\t smatch;\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  typedef match_results<const wchar_t*>          wcmatch;\n+  typedef match_results<const wchar_t*>\t\t wcmatch;\n   typedef match_results<wstring::const_iterator> wsmatch;\n #endif\n \n@@ -1994,11 +1982,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   template<typename _Bi_iter, typename _Alloc,\n \t   typename _Ch_type, typename _Rx_traits>\n     inline bool\n-    regex_match(_Bi_iter                                 __s,\n-\t\t_Bi_iter                                 __e,\n-\t\tmatch_results<_Bi_iter, _Alloc>&         __m,\n+    regex_match(_Bi_iter\t\t\t\t __s,\n+\t\t_Bi_iter\t\t\t\t __e,\n+\t\tmatch_results<_Bi_iter, _Alloc>&\t __m,\n \t\tconst basic_regex<_Ch_type, _Rx_traits>& __re,\n-\t\tregex_constants::match_flag_type         __flags\n+\t\tregex_constants::match_flag_type\t __flags\n \t\t\t       = regex_constants::match_default)\n     {\n       return __detail::__regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n@@ -2452,11 +2440,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     public:\n       typedef basic_regex<_Ch_type, _Rx_traits>  regex_type;\n-      typedef match_results<_Bi_iter>            value_type;\n-      typedef std::ptrdiff_t                     difference_type;\n-      typedef const value_type*                  pointer;\n-      typedef const value_type&                  reference;\n-      typedef std::forward_iterator_tag          iterator_category;\n+      typedef match_results<_Bi_iter>\t    value_type;\n+      typedef std::ptrdiff_t\t\t     difference_type;\n+      typedef const value_type*\t\t  pointer;\n+      typedef const value_type&\t\t  reference;\n+      typedef std::forward_iterator_tag\t  iterator_category;\n \n       /**\n        * @brief Provides a singular iterator, useful for indicating\n@@ -2543,18 +2531,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n     private:\n-      _Bi_iter                         _M_begin;\n-      _Bi_iter                         _M_end;\n-      const regex_type*                _M_pregex;\n-      regex_constants::match_flag_type _M_flags;\n-      match_results<_Bi_iter>          _M_match;\n+      _Bi_iter\t\t\t\t_M_begin;\n+      _Bi_iter\t\t\t\t_M_end;\n+      const regex_type*\t\t\t_M_pregex;\n+      regex_constants::match_flag_type\t_M_flags;\n+      match_results<_Bi_iter>\t\t_M_match;\n     };\n \n-  typedef regex_iterator<const char*>             cregex_iterator;\n-  typedef regex_iterator<string::const_iterator>  sregex_iterator;\n+  typedef regex_iterator<const char*>\t\t\tcregex_iterator;\n+  typedef regex_iterator<string::const_iterator>\tsregex_iterator;\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  typedef regex_iterator<const wchar_t*>          wcregex_iterator;\n-  typedef regex_iterator<wstring::const_iterator> wsregex_iterator;\n+  typedef regex_iterator<const wchar_t*>\t\twcregex_iterator;\n+  typedef regex_iterator<wstring::const_iterator>\twsregex_iterator;\n #endif\n \n   // [7.12.2] Class template regex_token_iterator\n@@ -2571,12 +2559,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     class regex_token_iterator\n     {\n     public:\n-      typedef basic_regex<_Ch_type, _Rx_traits> regex_type;\n-      typedef sub_match<_Bi_iter>               value_type;\n-      typedef std::ptrdiff_t                    difference_type;\n-      typedef const value_type*                 pointer;\n-      typedef const value_type&                 reference;\n-      typedef std::forward_iterator_tag         iterator_category;\n+      typedef basic_regex<_Ch_type, _Rx_traits>\tregex_type;\n+      typedef sub_match<_Bi_iter>\t\tvalue_type;\n+      typedef std::ptrdiff_t\t\t\tdifference_type;\n+      typedef const value_type*\t\t\tpointer;\n+      typedef const value_type&\t\t\treference;\n+      typedef std::forward_iterator_tag\t\titerator_category;\n \n     public:\n       /**\n@@ -2778,25 +2766,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  _M_result = nullptr;\n       }\n \n-      _Position         _M_position;\n-      std::vector<int>  _M_subs;\n-      value_type        _M_suffix;\n-      std::size_t       _M_n;\n-      const value_type* _M_result;\n+      _Position\t\t_M_position;\n+      std::vector<int>\t_M_subs;\n+      value_type\t_M_suffix;\n+      std::size_t\t_M_n;\n+      const value_type*\t_M_result;\n \n       // Show whether _M_subs contains -1\n-      bool              _M_has_m1;\n+      bool\t\t_M_has_m1;\n     };\n \n   /** @brief Token iterator for C-style NULL-terminated strings. */\n-  typedef regex_token_iterator<const char*>             cregex_token_iterator;\n+  typedef regex_token_iterator<const char*>\t\tcregex_token_iterator;\n \n   /** @brief Token iterator for standard strings. */\n-  typedef regex_token_iterator<string::const_iterator>  sregex_token_iterator;\n+  typedef regex_token_iterator<string::const_iterator>\tsregex_token_iterator;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   /** @brief Token iterator for C-style NULL-terminated wide strings. */\n-  typedef regex_token_iterator<const wchar_t*>          wcregex_token_iterator;\n+  typedef regex_token_iterator<const wchar_t*>\t\twcregex_token_iterator;\n \n   /** @brief Token iterator for standard wide-character strings. */\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;"}, {"sha": "fc2d5846c4675b33fbbc9f02d1a3a66b589d4769", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,10 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   // Result of merging regex_match and regex_search.\n   //\n   // __policy now can be _S_auto (auto dispatch) and _S_alternate (use\n@@ -118,12 +118,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return __ret;\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Ch_type>\n   template<typename _Fwd_iter>\n     typename regex_traits<_Ch_type>::string_type\n@@ -663,4 +659,3 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-"}, {"sha": "00d1bd295cd9eb5888c16d122ff4378d0b1197a2", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,10 +35,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   /**\n    *  @defgroup regex-detail Base and Implementation Classes\n    *  @ingroup regex\n@@ -393,8 +393,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n  //@} regex-detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/regex_automaton.tcc>"}, {"sha": "573b059a25195a76032ec03f88f4461706c68818", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,10 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n #ifdef _GLIBCXX_DEBUG\n   inline std::ostream&\n   _State_base::_M_print(std::ostream& ostr) const\n@@ -233,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return _StateSeq(_M_nfa, __m[_M_start], __m[_M_end]);\n     }\n+} // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __detail\n } // namespace"}, {"sha": "5d46cd43bd30d69f41111da8bf6a34c35b7f16c1", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -37,12 +37,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     class regex_traits;\n \n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n namespace __detail\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @addtogroup regex-detail\n    * @{\n@@ -575,8 +572,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n  //@} regex-detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/regex_compiler.tcc>"}, {"sha": "1f7dd91b643b97983150609e0b3508b4f05b5cd0", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -55,10 +55,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   template<typename _TraitsT>\n     _Compiler<_TraitsT>::\n     _Compiler(_IterT __b, _IterT __e,\n@@ -633,7 +633,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n       }() ^ _M_is_non_matching;\n     }\n+} // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __detail\n } // namespace"}, {"sha": "12c9eea4985cb65294330d146edb43b5ce0c1dd4", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,6 +32,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n /**\n  * @defgroup regex Regular Expressions\n  *\n@@ -45,8 +47,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n  */\n namespace regex_constants\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @name 5.1 Regular Expression Syntax Options\n    */\n@@ -408,10 +408,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __a = __a ^ __b; }\n \n   //@}\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace regex_constants\n-\n /* @} */ // group regex\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "f2a3389e984a81fe1e1a42f3a5c2a669c5f9f79a", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,15 +32,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n /**\n  * @addtogroup regex\n  * @{\n  */\n \n namespace regex_constants\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @name 5.3 Error Types\n    */\n@@ -120,11 +120,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr error_type error_stack(_S_error_stack);\n \n   //@}\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace regex_constants\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // [7.8] Class regex_error\n   /**\n    * @brief A regular expression exception class."}, {"sha": "3d1f2516f50024bf2864cd73739c00e8066637ba", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,10 +32,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   /**\n    * @addtogroup regex-detail\n    * @{\n@@ -251,8 +251,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n  //@} regex-detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/regex_executor.tcc>"}, {"sha": "226e05856e151e76b59658cf8c419b09a34034c8", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,10 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   template<typename _BiIter, typename _Alloc, typename _TraitsT,\n \t   bool __dfs_mode>\n     bool _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n@@ -513,7 +513,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       return __left_is_word != __right_is_word;\n     }\n+} // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __detail\n } // namespace"}, {"sha": "670efeda69f4381e0e01535003ba4c78096b048f", "filename": "libstdc++-v3/include/bits/regex_scanner.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,10 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   /**\n    * @addtogroup regex-detail\n    * @{\n@@ -265,8 +265,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n  //@} regex-detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/regex_scanner.tcc>"}, {"sha": "c65bfe2f68d9d611cc7cad5cf079767d750e5cc8", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -48,10 +48,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   template<typename _CharT>\n     _Scanner<_CharT>::\n     _Scanner(typename _Scanner::_IterT __begin,\n@@ -584,6 +584,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "0aaebeab7ace2c22138c6b79c96a7281564dad6a", "filename": "libstdc++-v3/include/bits/specfun.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -1203,6 +1203,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Confluent hypergeometric functions\n \n@@ -1302,6 +1303,7 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n       return std::__detail::__hyperg<__type>(__a, __b, __c, __x);\n     }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n \n #pragma GCC visibility pop"}, {"sha": "ea413b1b155f81331ba417558e6115499474a1ec", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -3857,8 +3857,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif // C++11\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   /**\n@@ -5839,6 +5837,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #endif // C++14\n \n _GLIBCXX_END_NAMESPACE_ALGO\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_ALGO_H */"}, {"sha": "f68ecb22b8211532a279e920ce6a6db4b43a74f6", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -1020,8 +1020,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __lg(unsigned long long __n)\n   { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   /**\n@@ -1411,6 +1409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #endif\n \n _GLIBCXX_END_NAMESPACE_ALGO\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n // NB: This file is included within many other C++ includes, as a way"}, {"sha": "d24e760d01b6d366216c61119a08f814925ce842", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -62,6 +62,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   typedef unsigned long _Bit_type;\n@@ -552,13 +553,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     };\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n // Declare a partial specialization of vector<T, Alloc>.\n #include <bits/stl_vector.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n@@ -1305,6 +1308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   };\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #if __cplusplus >= 201103L"}, {"sha": "48b2bc7f5ebb952fe143301b09bcc39b93b4c59c", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -67,6 +67,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n@@ -2325,6 +2326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #undef _GLIBCXX_DEQUE_BUF_SIZE\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_DEQUE_H */"}, {"sha": "88667a568c3d72221980589af0beb38339ef82b6", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -984,15 +984,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)\n     { return __it.base(); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #if __cplusplus >= 201103L\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @addtogroup iterators\n    * @{\n@@ -1243,9 +1236,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     -> decltype(__miter_base(__it.base()))\n     { return __miter_base(__it.base()); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)\n #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \\\n   std::__make_move_if_noexcept_iterator(_Iter)\n@@ -1254,6 +1244,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)\n #endif // C++11\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n #ifdef _GLIBCXX_DEBUG\n # include <debug/stl_iterator.h>\n #endif"}, {"sha": "86a93d34fa14a34103bb348fb09497e82c9fdcfa", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -66,14 +66,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   // Forward declaration for the overloads of __distance.\n   template <typename> struct _List_iterator;\n   template <typename> struct _List_const_iterator;\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _InputIterator>\n     inline _GLIBCXX14_CONSTEXPR\n     typename iterator_traits<_InputIterator>::difference_type"}, {"sha": "cef94f728ef971bd8688bd4684ecc110589d9a6c", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -66,10 +66,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // Supporting structures are split into common and templated\n     // types; the latter publicly inherits from the former in an\n     // effort to reduce code duplication.  This results in some\n@@ -157,8 +157,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     private:\n       _List_node_base* _M_base() { return this; }\n     };\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace detail\n \n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n@@ -1992,7 +1990,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if _GLIBCXX_USE_CXX11_ABI\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Detect when distance is used to compute the size of the whole list.\n   template<typename _Tp>\n@@ -2026,9 +2023,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return __n;\n     }\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-#endif\n } // namespace std\n \n #endif /* _STL_LIST_H */"}, {"sha": "0e8a98a96c1d6ef190358aa6ad75bb068a0f7167", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -65,6 +65,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n@@ -1437,7 +1438,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::map access to internals of compatible maps.\n   template<typename _Key, typename _Val, typename _Cmp1, typename _Alloc,\n \t   typename _Cmp2>\n@@ -1456,9 +1456,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_tree(_GLIBCXX_STD_C::multimap<_Key, _Val, _Cmp2, _Alloc>& __map)\n       { return __map._M_t; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_MAP_H */"}, {"sha": "7e3cea48a476c1806d967871a22db38831ec770e", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -63,6 +63,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n@@ -1102,7 +1103,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::multimap access to internals of compatible maps.\n   template<typename _Key, typename _Val, typename _Cmp1, typename _Alloc,\n \t   typename _Cmp2>\n@@ -1121,9 +1121,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_tree(_GLIBCXX_STD_C::multimap<_Key, _Val, _Cmp2, _Alloc>& __map)\n       { return __map._M_t; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_MULTIMAP_H */"}, {"sha": "517e77e93726be7e5073e289de29054122954316", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -63,6 +63,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Key, typename _Compare, typename _Alloc>\n@@ -953,7 +954,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::multiset access to internals of compatible sets.\n   template<typename _Val, typename _Cmp1, typename _Alloc, typename _Cmp2>\n     struct\n@@ -971,9 +971,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_tree(_GLIBCXX_STD_C::multiset<_Val, _Cmp2, _Alloc>& __set)\n       { return __set._M_t; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_MULTISET_H */"}, {"sha": "e2a0e25ca31b80295f72af67d474576da16d8ab1", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -66,10 +66,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace rel_ops\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /** @namespace std::rel_ops\n      *  @brief  The generated relational operators are sequestered here.\n      */\n@@ -125,10 +125,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       inline bool\n       operator>=(const _Tp& __x, const _Tp& __y)\n       { return !(__x < __y); }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace rel_ops\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_RELOPS_H */"}, {"sha": "e804a7cae709bbb96318e6caea46b84efa6ac36a", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -63,6 +63,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Key, typename _Compare, typename _Alloc>\n@@ -969,7 +970,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::set access to internals of compatible sets.\n   template<typename _Val, typename _Cmp1, typename _Alloc, typename _Cmp2>\n     struct\n@@ -986,8 +986,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_tree(_GLIBCXX_STD_C::multiset<_Val, _Cmp2, _Alloc>& __set)\n       { return __set._M_t; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } //namespace std\n #endif /* _STL_SET_H */"}, {"sha": "69cb8030208287370e4bde4a33c071ae27e99e01", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -73,6 +73,7 @@ __sanitizer_annotate_contiguous_container(const void*, const void*,\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// See bits/stl_deque.h's _Deque_base for an explanation.\n@@ -313,7 +314,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n     };\n \n-\n   /**\n    *  @brief A standard container which offers fixed time access to\n    *  individual elements in any order.\n@@ -1789,6 +1789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _STL_VECTOR_H */"}, {"sha": "16509c4ef8af18e01247a33b7a9111736db0c7b5", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -36,22 +36,19 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace __detail\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /* Determine whether number is a power of 2.  */\n     template<typename _Tp>\n       inline bool\n       _Power_of_2(_Tp __x)\n       {\n \treturn ((__x - 1) & __x) == 0;\n       };\n-_GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @brief Uniform discrete distribution for random numbers.\n    * A discrete random distribution on the range @f$[min, max]@f$ with equal"}, {"sha": "df1302c80c0ae68086e67e09f42ad71ad0508fbb", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,6 +32,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// Base types for unordered_map.\n@@ -1911,7 +1912,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::unordered_map access to internals of compatible maps.\n   template<typename _Key, typename _Val, typename _Hash1, typename _Eq1,\n \t   typename _Alloc, typename _Hash2, typename _Eq2>\n@@ -1959,9 +1959,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_table(unordered_multimap<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map)\n       { return __map._M_h; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _UNORDERED_MAP_H */"}, {"sha": "df57915f31a9b5e676e9cc6ee29a2c4aea6d97f2", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,6 +32,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// Base types for unordered_set.\n@@ -1557,7 +1558,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n \n #if __cplusplus > 201402L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Allow std::unordered_set access to internals of compatible sets.\n   template<typename _Val, typename _Hash1, typename _Eq1, typename _Alloc,\n \t   typename _Hash2, typename _Eq2>\n@@ -1604,9 +1604,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_get_table(unordered_multiset<_Val, _Hash2, _Eq2, _Alloc>& __set)\n       { return __set._M_h; }\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _UNORDERED_SET_H */"}, {"sha": "f14caaa713fb321f2df44bd8059bf2675bd61e7b", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -58,6 +58,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n@@ -897,6 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #if __cplusplus >= 201103L"}, {"sha": "71f70ce6b73b742eed387de64fa87c6b1e2ff5bd", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -513,9 +513,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n \n@@ -533,10 +530,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #undef islessgreater\n #undef isunordered\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #if __cplusplus >= 201103L\n \n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n@@ -952,13 +945,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isunordered(__type(__f1), __type(__f2));\n     }\n \n-#endif\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n+#endif // C++11\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n-#endif\n+#endif /* _GLIBCXX_USE_C99_MATH */\n \n #if __cplusplus >= 201103L\n \n@@ -1072,10 +1061,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #undef truncf\n #undef truncl\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // types\n   using ::double_t;\n   using ::float_t;\n@@ -1856,17 +1841,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __builtin_trunc(__x); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #endif // _GLIBCXX_USE_C99_MATH_TR1\n-\n #endif // C++11\n \n #if __cplusplus > 201402L\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [c.math.hypot3], three-dimensional hypotenuse\n #define __cpp_lib_hypot 201603\n@@ -1905,10 +1883,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __type = typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type;\n       return std::__hypot3<__type>(__x, __y, __z);\n     }\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n #endif // C++17\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #  include <bits/specfun.h>"}, {"sha": "8fc5736601da65087a02bb66ddd796b1158c6121", "filename": "libstdc++-v3/include/c_std/cmath", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -449,9 +449,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n \n@@ -469,10 +466,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #undef islessgreater\n #undef isunordered\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n \t\t\t\t\t   int>::__type\n@@ -582,10 +575,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isunordered(__type(__f1), __type(__f2));\n     }\n \n+#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n+#endif /* _GLIBCXX_USE_C99_MATH */\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n-#endif\n-\n #endif"}, {"sha": "adc4619d944c67a7fb17d0721808ed5490fe2f33", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -42,6 +42,8 @@ that is currently not available.\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n     * @defgroup decimal Decimal Floating-Point Arithmetic\n     * @ingroup numerics\n@@ -55,8 +57,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     */\n namespace decimal\n {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   class decimal32;\n   class decimal64;\n   class decimal128;\n@@ -483,10 +483,10 @@ namespace decimal\n   };\n \n #define _GLIBCXX_USE_DECIMAL_ 1\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace decimal\n   // @} group decimal\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <decimal/decimal.h>"}, {"sha": "d4118962614d47853452ce3c8acb79d5377494f6", "filename": "libstdc++-v3/include/decimal/decimal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -37,10 +37,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace decimal\n {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // ISO/IEC TR 24733  3.2.[234].1  Construct/copy/destroy.\n \n   inline decimal32::decimal32(decimal64 __r)\t: __val(__r.__getval()) {}\n@@ -461,8 +461,9 @@ namespace decimal\n #undef _DEFINE_DECIMAL_COMPARISON_LHS\n #undef _DEFINE_DECIMAL_COMPARISON_RHS\n #undef _DEFINE_DECIMAL_COMPARISONS\n-  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace decimal\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif /* _GLIBCXX_DECIMAL_IMPL */"}, {"sha": "15391b1e9f27975cbfc8538e2999e6a779aa6257", "filename": "libstdc++-v3/include/experimental/algorithm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,12 +40,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _ForwardIterator, typename _Searcher>\n     inline _ForwardIterator\n     search(_ForwardIterator __first, _ForwardIterator __last,\n@@ -81,10 +81,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   __d,\n \t\t\t   std::forward<_UniformRandomNumberGenerator>(__g));\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "984306dfce852ab6e234d8797b636c91f2251379", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,12 +43,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @defgroup any Type-safe container of any type\n    * @ingroup experimental\n@@ -520,9 +520,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // @} group any\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "9d758f7d1490d70eb0196fed5dc444159e5888ba", "filename": "libstdc++-v3/include/experimental/array", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,12 +40,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_make_array 201505\n   /**\n    * @defgroup make_array Array creation functions\n@@ -104,10 +104,10 @@ template <typename _Tp, size_t _Nm>\n   }\n \n   // @} group make_array\n-  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "cc89ffad900d526e07c753f5228b1933271493c6", "filename": "libstdc++-v3/include/experimental/bits/erase_if.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -39,13 +39,14 @@\n \n namespace std\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n   namespace __detail\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Container, typename _Predicate>\n       void\n       __erase_nodes_if(_Container& __cont, _Predicate __pred)\n@@ -59,10 +60,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ++__iter;\n \t}\n       }\n-_GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n } // inline namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "1ff0d9b6def0a6619cdfd0439013b352a0b8f21b", "filename": "libstdc++-v3/include/experimental/bits/fs_dir.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,14 +40,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n namespace filesystem\n {\n inline namespace v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @ingroup filesystem\n    * @{\n@@ -352,10 +352,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n \n   // @} group filesystem\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "7b851a3d4a87fbc078927d67b9272682684e5b8a", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,17 +40,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n namespace filesystem\n {\n inline namespace v1\n {\n-#if _GLIBCXX_INLINE_VERSION\n-inline namespace __8 { }\n-#endif\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #if _GLIBCXX_USE_CXX11_ABI\n inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n #endif\n@@ -282,10 +279,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   bool is_symlink(file_status) noexcept;\n \n   // @} group filesystem\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "387537260e0e6145bcacd81418d1e4243804727c", "filename": "libstdc++-v3/include/experimental/bits/fs_ops.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -38,14 +38,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n namespace filesystem\n {\n inline namespace v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @ingroup filesystem\n    * @{\n@@ -286,10 +286,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   path temp_directory_path(error_code& __ec);\n \n   // @} group filesystem\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "cde3897b8e5226aa13508de219e991e2309772b8", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -55,13 +55,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n namespace filesystem\n {\n inline namespace v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n #if __cplusplus == 201402L\n@@ -1080,10 +1081,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // @} group filesystem\n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "3b832706da03ef24ca1e9f1623c811393985f265", "filename": "libstdc++-v3/include/experimental/bits/lfts_config.h", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,30 +35,25 @@\n #if _GLIBCXX_INLINE_VERSION\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace chrono\n {\n namespace experimental\n {\n-inline namespace fundamentals_v1 { inline namespace __8 { } }\n-inline namespace fundamentals_v2 { inline namespace __8 { } }\n+inline namespace fundamentals_v1 { }\n+inline namespace fundamentals_v2 { }\n } // namespace experimental\n } // namespace chrono\n \n namespace experimental\n {\n-inline namespace fundamentals_v1 {\n-  inline namespace __8 { }\n-  namespace __detail { inline namespace __8 { } }\n-}\n-inline namespace fundamentals_v2 {\n-  inline namespace __8 { }\n-  namespace pmr { inline namespace __8 { } }\n-  namespace __detail { inline namespace __8 { } }\n-} // namespace fundamentals_v2\n-inline namespace literals { inline namespace string_view_literals {\n-  inline namespace __8 { }\n-} } // namespace literals::string_view_literals\n+inline namespace fundamentals_v1 { }\n+inline namespace fundamentals_v2 { }\n+inline namespace literals { inline namespace string_view_literals { } }\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif\n #endif"}, {"sha": "ef391eb641fec6cd7420ad2d39696e7a82d6d026", "filename": "libstdc++-v3/include/experimental/bits/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // 8.2.1\n \n   template<typename _Tp> class shared_ptr;\n@@ -659,13 +659,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       mutable weak_ptr<_Tp> _M_weak_this;\n     };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /// std::hash specialization for shared_ptr.\n   template<typename _Tp>\n     struct hash<experimental::shared_ptr<_Tp>>"}, {"sha": "e66932d1ac0e2e3f0b5eb6573cc978d60768cd5c", "filename": "libstdc++-v3/include/experimental/bits/string_view.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -42,12 +42,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _CharT, typename _Traits>\n     typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n@@ -222,10 +222,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return npos;\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "71e36d2d86d3e6b7984037411eda262a63242632", "filename": "libstdc++-v3/include/experimental/chrono", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,20 +44,21 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace chrono {\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n // See C++14 \u00a720.12.4, customization traits\n template <typename _Rep>\n    constexpr bool treat_as_floating_point_v =\n      treat_as_floating_point<_Rep>::value;\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n } // namespace chrono\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "0180a7508839d012860ab148dd858c3a2066fba6", "filename": "libstdc++-v3/include/experimental/deque", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n     void\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n@@ -63,19 +63,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __cont.end());\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Tp>\n-    using deque = std::deque<_Tp, polymorphic_allocator<_Tp>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+  namespace pmr {\n+    template<typename _Tp>\n+      using deque = std::deque<_Tp, polymorphic_allocator<_Tp>>;\n \n+  } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "7953c802cd39a253446c581d47530294e06f9379", "filename": "libstdc++-v3/include/experimental/filesystem", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffilesystem", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffilesystem", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffilesystem?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,14 +44,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n namespace filesystem\n {\n inline namespace v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @ingroup filesystem\n    */\n@@ -65,11 +65,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __what += \" [\" + _M_path2.string() + ']';\n       return __what;\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "5109cb57ade9a23e8b38d5141fa4cf415c6e92a2", "filename": "libstdc++-v3/include/experimental/forward_list", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,12 +40,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n     inline void \n     erase_if(forward_list<_Tp, _Alloc>& __cont, _Predicate __pred)\n@@ -59,19 +59,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Tp>\n-    using forward_list = std::forward_list<_Tp, polymorphic_allocator<_Tp>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+  namespace pmr {\n+    template<typename _Tp>\n+      using forward_list = std::forward_list<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "3327399b4d4fcdf8c52b676dd3b83081d7464166", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -49,12 +49,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // See C++14 \u00a720.9.9, Function object binders\n \n   /// Variable template for std::is_bind_expression\n@@ -368,14 +368,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return __last;\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n \n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_not_fn 201406\n \n   /// [func.not_fn] Function template not_fn\n@@ -386,10 +382,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return std::_Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn), 0};\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "553009c92b04dfc5f6bf8161ce6ec60a0c7a8df8", "filename": "libstdc++-v3/include/experimental/iterator", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fiterator?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -45,12 +45,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_ostream_joiner 201411\n \n   /// Output iterator that inserts a delimiter between elements.\n@@ -105,10 +105,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_ostream_joiner(basic_ostream<_CharT, _Traits>& __os,\n \t\t\t_DelimT&& __delimiter)\n     { return { __os, std::forward<_DelimT>(__delimiter) }; }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "94663ad030a0af05bc8e087d444848edf5796da7", "filename": "libstdc++-v3/include/experimental/list", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,12 +40,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp, typename _Alloc, typename _Predicate>\n     inline void\n     erase_if(list<_Tp, _Alloc>& __cont, _Predicate __pred)\n@@ -59,19 +59,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp>\n     using list = std::list<_Tp, polymorphic_allocator<_Tp>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "85055967fa5e7f674b418836acf45e4362de824f", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n@@ -59,26 +59,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n-    using map\n+  namespace pmr {\n+    template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n+      using map\n       = std::map<_Key, _Tp, _Compare,\n \t\t polymorphic_allocator<pair<const _Key, _Tp>>>;\n \n-  template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n-    using multimap\n+    template<typename _Key, typename _Tp, typename _Compare = less<_Key>>\n+      using multimap\n       = std::multimap<_Key, _Tp, _Compare,\n \t\t      polymorphic_allocator<pair<const _Key, _Tp>>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n-\n+  } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "33a154bf50c320bd5014dc10755dca2114b717b9", "filename": "libstdc++-v3/include/experimental/memory", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -47,12 +47,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_observer_ptr 201411\n \n   template <typename _Tp>\n@@ -231,8 +231,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return !(__p1 < __p2);\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n \n@@ -250,6 +248,8 @@ template <typename _Tp>\n     }\n   };\n \n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "f4ecc5ab1d3a6d5fe01b134f6874ac0720dc3f08", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -37,11 +37,11 @@\n #include <experimental/bits/lfts_config.h>\n \n namespace std {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental {\n inline namespace fundamentals_v2 {\n namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_memory_resources 201402L\n \n   class memory_resource;\n@@ -379,11 +379,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r = new_delete_resource();\n     return __get_default_resource().exchange(__r);\n   }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif"}, {"sha": "33e7b55ef90b425f1697818353ca773ea65bbe2a", "filename": "libstdc++-v3/include/experimental/numeric", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,12 +44,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_gcd_lcm 201411\n \n   /// Greatest common divisor\n@@ -75,10 +75,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(!is_same<_Nn, bool>::value, \"lcm arguments are not bools\");\n       return std::__detail::__lcm(__m, __n);\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "d4c58a600bfba2b21a891d14160c8c1d0b51dc3b", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -57,12 +57,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @defgroup optional Optional values\n    * @ingroup experimental\n@@ -980,9 +980,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n \n   // @} group optional\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n-}\n+} // namespace experimental\n \n   // [X.Y.12]\n   template<typename _Tp>\n@@ -1001,7 +1000,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n         return __t ? hash<_Tp> {}(*__t) : __magic_disengaged_hash;\n       }\n     };\n-}\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif // C++14\n "}, {"sha": "639f21a979e3fa1288404aa41978a4501decfb0b", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,12 +43,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @defgroup propagate_const Const-propagating wrapper\n    * @ingroup experimental\n@@ -424,7 +424,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // @} group propagate_const\n-  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n \n@@ -533,6 +532,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      typedef experimental::propagate_const<_Tp> second_argument_type;\n      typedef bool result_type;\n    };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "2d22544e9ca33ffbc816c90a8e2274d122a81bf8", "filename": "libstdc++-v3/include/experimental/random", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -33,10 +33,10 @@\n #include <experimental/bits/lfts_config.h>\n \n namespace std {\n-namespace experimental {\n-inline namespace fundamentals_v2 {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace experimental {\n+inline namespace fundamentals_v2 {\n #define __cpp_lib_experimental_randint 201511\n \n   inline std::default_random_engine&\n@@ -71,10 +71,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     _S_randint_engine().seed(__value);\n   }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif"}, {"sha": "bc2d0f267b29f0fb66dd9ba3567821856092b020", "filename": "libstdc++-v3/include/experimental/ratio", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,12 +44,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n // See C++14 \u00a720.11.5, ratio comparison\n template <typename _R1, typename _R2>\n   constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;\n@@ -63,10 +63,10 @@ template <typename _R1, typename _R2>\n   constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;\n template <typename _R1, typename _R2>\n   constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "bfcaf6b85c3e45e378f548af247686459536f50f", "filename": "libstdc++-v3/include/experimental/regex", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -40,13 +40,14 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n namespace pmr\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   template<typename _BidirectionalIterator>\n@@ -60,11 +61,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   typedef match_results<wstring::const_iterator> wsmatch;\n \n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "fba136c90c5559a92fa74f53ea7798d2c01fdc49", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n@@ -59,23 +59,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Compare = less<_Key>>\n-    using set = std::set<_Key, _Compare, polymorphic_allocator<_Key>>;\n-\n-  template<typename _Key, typename _Compare = less<_Key>>\n-    using multiset = std::multiset<_Key, _Compare,\n-\t\t\t\t   polymorphic_allocator<_Key>>;\n+  namespace pmr {\n+    template<typename _Key, typename _Compare = less<_Key>>\n+      using set = std::set<_Key, _Compare, polymorphic_allocator<_Key>>;\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+    template<typename _Key, typename _Compare = less<_Key>>\n+      using multiset = std::multiset<_Key, _Compare,\n+\t\t\t\t     polymorphic_allocator<_Key>>;\n+  } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "a7fa95549b3116b8482066869c5607f509333ee8", "filename": "libstdc++-v3/include/experimental/source_location", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsource_location?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,10 +32,10 @@\n #include <cstdint>\n \n namespace std {\n-namespace experimental {\n-inline namespace fundamentals_v2 {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace experimental {\n+inline namespace fundamentals_v2 {\n #define __cpp_lib_experimental_source_location 201505\n \n   struct source_location\n@@ -77,10 +77,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     uint_least32_t _M_line;\n     uint_least32_t _M_col;\n   };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif"}, {"sha": "893013b1869cbc36bd533393eeb16cc13c801da7", "filename": "libstdc++-v3/include/experimental/string", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n@@ -64,30 +64,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __cont.end());\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n+  namespace pmr {\n+  _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+    // basic_string using polymorphic allocator in namespace pmr\n+    template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+      using basic_string =\n+\tstd::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;\n \n-  // basic_string using polymorphic allocator in namespace pmr\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>>\n-   using basic_string =\n-     std::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;\n-\n-  // basic_string typedef names using polymorphic allocator in namespace\n-  // std::experimental::pmr\n-  typedef basic_string<char> string;\n-  typedef basic_string<char16_t> u16string;\n-  typedef basic_string<char32_t> u32string;\n-  typedef basic_string<wchar_t> wstring;\n-\n-_GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+    // basic_string typedef names using polymorphic allocator in namespace\n+    // std::experimental::pmr\n+    typedef basic_string<char> string;\n+    typedef basic_string<char16_t> u16string;\n+    typedef basic_string<char32_t> u32string;\n+    typedef basic_string<wchar_t> wstring;\n \n+    _GLIBCXX_END_NAMESPACE_CXX11\n+  } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "5cec5597744ffef6c78a7505f29683f272085575", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -45,12 +45,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_string_view 201411\n \n   /**\n@@ -434,23 +434,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _CharT* _M_str;\n     };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n   // [string.view.comparison], non-member basic_string_view comparison functions\n \n   namespace __detail\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Identity transform to create a non-deduced context, so that only one\n     // argument participates in template argument deduction and the other\n     // argument gets implicitly converted to the deduced type. See n3766.html.\n     template<typename _Tp>\n       using __idt = common_type_t<_Tp>;\n-_GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _CharT, typename _Traits>\n     inline bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n@@ -577,15 +571,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using u16string_view = basic_string_view<char16_t>;\n   using u32string_view = basic_string_view<char32_t>;\n #endif\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n \n \n   // [string.view.hash], hash support:\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct hash;\n \n@@ -647,7 +637,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<experimental::u32string_view>> : std::false_type\n     { };\n #endif\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n namespace experimental\n {\n@@ -656,8 +645,6 @@ namespace experimental\n   {\n   inline namespace string_view_literals\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len)\n     { return basic_string_view<char>{__str, __len}; }\n@@ -677,11 +664,11 @@ namespace experimental\n     operator\"\"sv(const char32_t* __str, size_t __len)\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace string_literals\n   } // namespace literals\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <experimental/bits/string_view.tcc>"}, {"sha": "2bad7503b2f0036964cce5d0fa367b0bdb957e8c", "filename": "libstdc++-v3/include/experimental/system_error", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,22 +44,22 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n // See C++14 \u00a719.5, System error support\n template <typename _Tp>\n   constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;\n template <typename _Tp>\n   constexpr bool is_error_condition_enum_v =\n     is_error_condition_enum<_Tp>::value;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "a12fa0a3327847aa2b22463f36fbaa244e586a3a", "filename": "libstdc++-v3/include/experimental/tuple", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // See C++14 \u00a720.4.2.5, tuple helper classes\n   template <typename _Tp>\n     constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n@@ -71,10 +71,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\tstd::forward<_Tuple>(__t),\n \t\t\t\t\t_Indices{});\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "3885c168e3174f237f0aa8a40cb2428c48d3f46d", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,12 +44,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_type_trait_variable_templates 201402\n \n // See C++14 \u00a720.10.4.1, primary type categories\n@@ -218,13 +218,10 @@ template <typename _From, typename _To>\n   // raw_invocation_type (still unimplemented)\n   // invocation_type_t (still unimplemented)\n   // raw_invocation_type_t (still unimplemented)\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n \n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_detect 201505\n \n // [meta.detect]\n@@ -299,10 +296,10 @@ template<typename... _Bn>\n template<typename _Pp>\n   constexpr bool negation_v\n     = negation<_Pp>::value;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // __cplusplus <= 201103L"}, {"sha": "cddd5b3d78c154f4e41f9b4b46e29b3a92404bb0", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline void\n@@ -61,28 +61,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     _Predicate __pred)\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n-\t   typename _Pred = equal_to<_Key>>\n-    using unordered_map\n+  namespace pmr {\n+    template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t     typename _Pred = equal_to<_Key>>\n+      using unordered_map\n       = std::unordered_map<_Key, _Tp, _Hash, _Pred,\n \t\t polymorphic_allocator<pair<const _Key, _Tp>>>;\n \n-  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n-\t   typename _Pred = equal_to<_Key>>\n-    using unordered_multimap\n+    template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t     typename _Pred = equal_to<_Key>>\n+      using unordered_multimap\n       = std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\n \t\t      polymorphic_allocator<pair<const _Key, _Tp>>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+  } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "816327f9ba7207366dd90f2c5b2100b137f1e28a", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n@@ -61,27 +61,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     _Predicate __pred)\n     { __detail::__erase_nodes_if(__cont, __pred); }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Hash = hash<_Key>,\n-\t   typename _Pred = equal_to<_Key>>\n-    using unordered_set\n+  namespace pmr {\n+    template<typename _Key, typename _Hash = hash<_Key>,\n+\t     typename _Pred = equal_to<_Key>>\n+      using unordered_set\n       = std::unordered_set<_Key, _Hash, _Pred, polymorphic_allocator<_Key>>;\n \n-  template<typename _Key, typename _Hash = hash<_Key>,\n-\t   typename _Pred = equal_to<_Key>>\n-    using unordered_multiset\n+    template<typename _Key, typename _Hash = hash<_Key>,\n+\t     typename _Pred = equal_to<_Key>>\n+      using unordered_multiset\n       = std::unordered_multiset<_Key, _Hash, _Pred,\n \t\t\t\tpolymorphic_allocator<_Key>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+  } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "5d21d67e387d97d238cbdf17f813b6dce735878b", "filename": "libstdc++-v3/include/experimental/utility", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -34,16 +34,16 @@\n #include <experimental/bits/lfts_config.h>\n \n namespace std {\n-namespace experimental {\n-inline namespace fundamentals_v2 {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace experimental {\n+inline namespace fundamentals_v2 {\n   // 3.1.2, erased-type placeholder\n   using erased_type = std::__erased_type;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif"}, {"sha": "e77dd2e477106efe7389d6e40bf528a88f9d7d57", "filename": "libstdc++-v3/include/experimental/vector", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,12 +41,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_experimental_erase_if 201411\n \n   template<typename _Tp, typename _Alloc, typename _Predicate>\n@@ -65,19 +65,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __cont.end());\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n-namespace pmr {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Tp>\n-    using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace pmr\n+  namespace pmr {\n+    template<typename _Tp>\n+      using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n \n } // namespace fundamentals_v2\n } // namespace experimental\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++14"}, {"sha": "65541a499ebaa6edf36d70595312db02f72c003a", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,12 +44,13 @@\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   using std::size_t;\n   using std::ptrdiff_t;\n \n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /** @class  __mini_vector bitmap_allocator.h bitmap_allocator.h\n      *\n      *  @brief  __mini_vector<> is a stripped down version of the\n@@ -501,12 +502,8 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n       size_t __mask = 1 << __pos;\n       *__pbmap |= __mask;\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /** @brief  Generic Version of the bsf instruction.\n    */\n   inline size_t \n@@ -1134,4 +1131,3 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n \n #endif \n-"}, {"sha": "fdc5c5b98bff1a2185e24d9a289e486e9ee96225", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,8 +41,8 @@\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n-_GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   /// Extension to use iconv for dealing with character encodings.\n   // This includes conversions and comparisons between various character\n@@ -215,8 +215,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename std::fpos<state_type>\t\tpos_type;\n     };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n "}, {"sha": "9f707a75960ddee1fa3c7d5a5f2cdd709e4d49d2", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -65,6 +65,8 @@\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace __detail\n   {\n     enum { _S_max_rope_depth = 45 };\n@@ -76,8 +78,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n   using std::allocator;\n   using std::_Destroy;\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // See libstdc++/36832.\n   template<typename _ForwardIterator, typename _Allocator>\n     void\n@@ -2937,10 +2937,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace std _GLIBCXX_VISIBILITY(default)\n { \n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   template<>\n     struct hash<__gnu_cxx::crope>\n     {\n@@ -2967,9 +2967,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn 13 * __str[0] + 5 * __str[__size - 1] + __size;\n       }\n     };\n+} // namespace tr1\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace tr1\n } // namespace std\n \n # include <ext/ropeimpl.h>"}, {"sha": "3999c1535010228a61a3747d8393609fb4901410", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -127,18 +127,7 @@ namespace typelist\n   template<typename T1, typename T2, typename T3,\n \t   typename T4, typename T5, typename T6>\n     struct create6;\n-} // namespace typelist\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n \n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-namespace typelist\n-{\n namespace detail\n {\n   template<typename Fn, typename Typelist_Chain>\n@@ -366,10 +355,6 @@ namespace detail\n       typedef typename append_type::type::root \t\t\ttype;\n     };\n } // namespace detail\n-} // namespace typelist\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n \n #define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>\n #define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n@@ -392,12 +377,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #define _GLIBCXX_TYPELIST_CHAIN19(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN18(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) >\n #define _GLIBCXX_TYPELIST_CHAIN20(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN19(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) >\n \n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-namespace typelist\n-{\n   template<typename Fn, typename Typelist>\n     void\n     apply(Fn& fn, Typelist)"}, {"sha": "1bcbf524a7b6b074a7b2a5dd0c85e7547cd07291", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -45,6 +45,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    * @defgroup chrono Time\n    * @ingroup utilities\n@@ -58,19 +60,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n    */\n   namespace chrono\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     template<typename _Rep, typename _Period = ratio<1>>\n       struct duration;\n \n     template<typename _Clock, typename _Dur = typename _Clock::duration>\n       struct time_point;\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)\n \n   template<typename _CT, typename _Period1, typename _Period2>\n@@ -117,12 +113,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n              common_type<_Duration1, _Duration2>>::type, _Clock>::type\n     { };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n   namespace chrono\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // Primary template for duration_cast impl.\n     template<typename _ToDur, typename _CF, typename _CR,\n \t     bool _NumIsOne = false, bool _DenIsOne = false>\n@@ -871,8 +863,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     using high_resolution_clock = system_clock;\n \n     } // end inline namespace _V2\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace chrono\n \n #if __cplusplus > 201103L\n@@ -883,8 +873,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n   {\n   inline namespace chrono_literals\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     template<typename _Rep, unsigned long long _Val>\n       struct _Checked_integral_constant\n       : integral_constant<_Rep, static_cast<_Rep>(_Val)>\n@@ -959,22 +947,19 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       operator\"\"ns()\n       { return __check_overflow<chrono::nanoseconds, _Digits...>(); }\n \n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // inline namespace chrono_literals\n   } // inline namespace literals\n \n   namespace chrono\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  using namespace literals::chrono_literals;\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n+    using namespace literals::chrono_literals;\n   } // namespace chrono\n \n #endif // __cplusplus > 201103L\n \n   // @} group chrono\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "bd8b09d84f0d99b1225e72bcf5639f4478f640ed", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -1937,14 +1937,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::complex<__type>(__x, -__type());\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n #if __cplusplus > 201103L\n \n inline namespace literals {\n inline namespace complex_literals {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n #define __cpp_lib_complex_udls 201309\n \n   constexpr std::complex<float>\n@@ -1971,12 +1967,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   operator\"\"il(unsigned long long __num)\n   { return std::complex<long double>{0.0L, static_cast<long double>(__num)}; }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // inline namespace complex_literals\n } // inline namespace literals\n \n #endif // C++14\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n #endif  // C++11"}, {"sha": "a6d121bb1507678561d00af6028b8d02c0a13b39", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -259,15 +259,12 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n    */\n   template<int _Num> struct _Placeholder { };\n \n-  _GLIBCXX_END_NAMESPACE_VERSION\n-\n   /** @namespace std::placeholders\n    *  @brief ISO C++11 entities sub-namespace for functional.\n    *  @ingroup binders\n    */\n   namespace placeholders\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /* Define a large number of placeholders. There is no way to\n    * simplify this with variadic templates, because we're introducing\n    * unique names for each.\n@@ -301,11 +298,8 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     extern const _Placeholder<27> _27;\n     extern const _Placeholder<28> _28;\n     extern const _Placeholder<29> _29;\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    *  Partial specialization of is_placeholder that provides the placeholder\n    *  number for the placeholder objects defined by libstdc++."}, {"sha": "17d629db81d89e6d9280b357914e82794980e8e2", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -79,10 +79,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __detail\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   // std::abs is not constexpr and doesn't support unsigned integers.\n   template<typename _Tp>\n     constexpr\n@@ -117,11 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  * __detail::__abs_integral(__n)\n \t: 0;\n     }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-}\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+} // namespace __detail\n \n #if __cplusplus > 201402L\n "}, {"sha": "88a7686618c77b6f9ed7d99443474a76146707b6", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -427,23 +427,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t\t    _M_len;\n       const _CharT* _M_str;\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n   // [string.view.comparison], non-member basic_string_view comparison function\n \n   namespace __detail\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Identity transform to create a non-deduced context, so that only one\n     // argument participates in template argument deduction and the other\n     // argument gets implicitly converted to the deduced type. See n3766.html.\n     template<typename _Tp>\n       using __idt = common_type_t<_Tp>;\n-_GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _CharT, typename _Traits>\n     inline bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n@@ -634,14 +629,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<u32string_view>> : std::false_type\n     { };\n #endif\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n   inline namespace literals\n   {\n   inline namespace string_view_literals\n   {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len)\n     { return basic_string_view<char>{__str, __len}; }\n@@ -661,11 +653,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator\"\"sv(const char32_t* __str, size_t __len)\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace string_literals\n   } // namespace literals\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/string_view.tcc>"}, {"sha": "17db5ce87ae7fd7e73c603379e52e142b78c5fd9", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -321,16 +321,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __out << __id._M_thread;\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n   /** @namespace std::this_thread\n    *  @brief ISO C++ 2011 entities sub-namespace for thread.\n    *  30.3.2 Namespace this_thread.\n    */\n   namespace this_thread\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /// get_id\n     inline thread::id\n     get_id() noexcept\n@@ -398,12 +394,11 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t    __now = _Clock::now();\n \t  }\n       }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n   // @} group threads\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "d0c22e35d0f2d3a3e21055c809b62b40a2f67124", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 44, "deletions": 61, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -50,12 +50,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace __detail\n {\n namespace __variant\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<size_t _Np, typename... _Types>\n     struct _Nth_type;\n \n@@ -67,12 +67,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Nth_type<0, _First, _Rest...>\n     { using type = _First; };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __variant\n } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename... _Types> class tuple;\n   template<typename... _Types> class variant;\n   template <typename> struct hash;\n@@ -141,13 +138,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&\n     get(const variant<_Types...>&&);\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n namespace __detail\n {\n namespace __variant\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Returns the first apparence of _Tp in _Types.\n   // Returns sizeof...(_Types) if _Tp is not in _Types.\n   template<typename _Tp, typename... _Types>\n@@ -299,40 +293,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Traits\n     {\n       static constexpr bool _S_default_ctor =\n-          is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;\n+\t  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;\n       static constexpr bool _S_copy_ctor =\n-          (is_copy_constructible_v<_Types> && ...);\n+\t  (is_copy_constructible_v<_Types> && ...);\n       static constexpr bool _S_move_ctor =\n-          (is_move_constructible_v<_Types> && ...);\n+\t  (is_move_constructible_v<_Types> && ...);\n       static constexpr bool _S_copy_assign =\n-          _S_copy_ctor && _S_move_ctor\n-          && (is_copy_assignable_v<_Types> && ...);\n+\t  _S_copy_ctor && _S_move_ctor\n+\t  && (is_copy_assignable_v<_Types> && ...);\n       static constexpr bool _S_move_assign =\n-          _S_move_ctor\n-          && (is_move_assignable_v<_Types> && ...);\n+\t  _S_move_ctor\n+\t  && (is_move_assignable_v<_Types> && ...);\n \n       static constexpr bool _S_trivial_dtor =\n-          (is_trivially_destructible_v<_Types> && ...);\n+\t  (is_trivially_destructible_v<_Types> && ...);\n       static constexpr bool _S_trivial_copy_ctor =\n-          (is_trivially_copy_constructible_v<_Types> && ...);\n+\t  (is_trivially_copy_constructible_v<_Types> && ...);\n       static constexpr bool _S_trivial_move_ctor =\n-          (is_trivially_move_constructible_v<_Types> && ...);\n+\t  (is_trivially_move_constructible_v<_Types> && ...);\n       static constexpr bool _S_trivial_copy_assign =\n-          _S_trivial_dtor && (is_trivially_copy_assignable_v<_Types> && ...);\n+\t  _S_trivial_dtor && (is_trivially_copy_assignable_v<_Types> && ...);\n       static constexpr bool _S_trivial_move_assign =\n-          _S_trivial_dtor && (is_trivially_move_assignable_v<_Types> && ...);\n+\t  _S_trivial_dtor && (is_trivially_move_assignable_v<_Types> && ...);\n \n       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs\n       // are always nothrow.\n       static constexpr bool _S_nothrow_default_ctor =\n-          is_nothrow_default_constructible_v<\n-              typename _Nth_type<0, _Types...>::type>;\n+\t  is_nothrow_default_constructible_v<\n+\t      typename _Nth_type<0, _Types...>::type>;\n       static constexpr bool _S_nothrow_copy_ctor = false;\n       static constexpr bool _S_nothrow_move_ctor =\n-          (is_nothrow_move_constructible_v<_Types> && ...);\n+\t  (is_nothrow_move_constructible_v<_Types> && ...);\n       static constexpr bool _S_nothrow_copy_assign = false;\n       static constexpr bool _S_nothrow_move_assign =\n-          _S_nothrow_move_ctor && (is_nothrow_move_assignable_v<_Types> && ...);\n+\t  _S_nothrow_move_ctor && (is_nothrow_move_assignable_v<_Types> && ...);\n     };\n \n   // Defines members and ctors.\n@@ -452,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     using _Variant_storage_alias =\n-        _Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;\n+\t_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;\n \n   // The following are (Copy|Move) (ctor|assign) layers for forwarding\n   // triviality and handling non-trivial SMF behaviors.\n@@ -464,7 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Base::_Base;\n \n       _Copy_ctor_base(const _Copy_ctor_base& __rhs)\n-          noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)\n+\t  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)\n       {\n \tif (__rhs._M_valid())\n \t  {\n@@ -489,7 +483,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     using _Copy_ctor_alias =\n-        _Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;\n+\t_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;\n \n   template<bool, typename... _Types>\n     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>\n@@ -498,7 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Base::_Base;\n \n       _Move_ctor_base(_Move_ctor_base&& __rhs)\n-          noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)\n+\t  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)\n       {\n \tif (__rhs._M_valid())\n \t  {\n@@ -523,7 +517,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     using _Move_ctor_alias =\n-        _Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;\n+\t_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;\n \n   template<bool, typename... _Types>\n     struct _Copy_assign_base : _Move_ctor_alias<_Types...>\n@@ -533,7 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Copy_assign_base&\n       operator=(const _Copy_assign_base& __rhs)\n-          noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)\n+\t  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)\n       {\n \tif (this->_M_index == __rhs._M_index)\n \t  {\n@@ -576,8 +570,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     using _Copy_assign_alias =\n-        _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign,\n-                          _Types...>;\n+\t_Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign,\n+\t\t\t  _Types...>;\n \n   template<bool, typename... _Types>\n     struct _Move_assign_base : _Copy_assign_alias<_Types...>\n@@ -601,7 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Move_assign_base&\n       operator=(_Move_assign_base&& __rhs)\n-          noexcept(_Traits<_Types...>::_S_nothrow_move_assign)\n+\t  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)\n       {\n \tif (this->_M_index == __rhs._M_index)\n \t  {\n@@ -644,8 +638,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     using _Move_assign_alias =\n-        _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign,\n-                          _Types...>;\n+\t_Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign,\n+\t\t\t  _Types...>;\n \n   template<typename... _Types>\n     struct _Variant_base : _Move_assign_alias<_Types...>\n@@ -654,7 +648,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr\n       _Variant_base()\n-          noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)\n+\t  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)\n       : _Variant_base(in_place_index<0>) { }\n \n       template<size_t _Np, typename... _Args>\n@@ -879,12 +873,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      std::index_sequence<__indices...>>\n     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __variant\n } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _Tp, typename... _Types>\n     inline constexpr bool holds_alternative(const variant<_Types...>& __v)\n     noexcept\n@@ -1041,13 +1032,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class variant\n     : private __detail::__variant::_Variant_base<_Types...>,\n       private _Enable_default_constructor<\n-        __detail::__variant::_Traits<_Types...>::_S_default_ctor,\n+\t__detail::__variant::_Traits<_Types...>::_S_default_ctor,\n \t  variant<_Types...>>,\n       private _Enable_copy_move<\n-        __detail::__variant::_Traits<_Types...>::_S_copy_ctor,\n-        __detail::__variant::_Traits<_Types...>::_S_copy_assign,\n-        __detail::__variant::_Traits<_Types...>::_S_move_ctor,\n-        __detail::__variant::_Traits<_Types...>::_S_move_assign,\n+\t__detail::__variant::_Traits<_Types...>::_S_copy_ctor,\n+\t__detail::__variant::_Traits<_Types...>::_S_copy_assign,\n+\t__detail::__variant::_Traits<_Types...>::_S_move_ctor,\n+\t__detail::__variant::_Traits<_Types...>::_S_move_assign,\n \tvariant<_Types...>>\n     {\n     private:\n@@ -1060,9 +1051,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using _Base = __detail::__variant::_Variant_base<_Types...>;\n       using _Default_ctor_enabler =\n-        _Enable_default_constructor<\n-          __detail::__variant::_Traits<_Types...>::_S_default_ctor,\n-            variant<_Types...>>;\n+\t_Enable_default_constructor<\n+\t  __detail::__variant::_Traits<_Types...>::_S_default_ctor,\n+\t    variant<_Types...>>;\n \n       template<typename _Tp>\n \tstatic constexpr bool\n@@ -1108,7 +1099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvariant(_Tp&& __t)\n \tnoexcept(is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n \t: variant(in_place_index<__accepted_index<_Tp&&>>,\n-                  std::forward<_Tp>(__t))\n+\t\t  std::forward<_Tp>(__t))\n \t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n \n       template<typename _Tp, typename... _Args,\n@@ -1117,7 +1108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, _Args&&... __args)\n \t: variant(in_place_index<__index_of<_Tp>>,\n-                  std::forward<_Args>(__args)...)\n+\t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<typename _Tp, typename _Up, typename... _Args,\n@@ -1288,7 +1279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic constexpr bool \\\n \t(*_S_erased_##__NAME[])(const variant&, const variant&) = \\\n \t  { &__detail::__variant::__erased_##__NAME< \\\n-                const variant&, __indices>... }; \\\n+\t\tconst variant&, __indices>... }; \\\n       template<size_t... __indices> \\\n \tconstexpr inline bool \\\n \t_M_##__NAME(const variant& __rhs, \\\n@@ -1312,18 +1303,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n \n       template<size_t _Np, typename _Vp>\n-\tfriend constexpr decltype(auto) __detail::__variant::\n-#if _GLIBCXX_INLINE_VERSION\n-        __8:: // Required due to PR c++/59256\n-#endif\n-\t__get(_Vp&& __v);\n+\tfriend constexpr decltype(auto) __detail::__variant::__get(_Vp&& __v);\n \n       template<typename _Vp>\n-\tfriend void* __detail::__variant::\n-#if _GLIBCXX_INLINE_VERSION\n-        __8:: // Required due to PR c++/59256\n-#endif\n-        __get_storage(_Vp&& __v);\n+\tfriend void* __detail::__variant::__get_storage(_Vp&& __v);\n \n #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \\\n       template<typename... _Tp> \\\n@@ -1434,7 +1417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename... _Types>\n     struct hash<variant<_Types...>>\n     : private __detail::__variant::_Variant_hash_base<\n-        variant<_Types...>, std::index_sequence_for<_Types...>>,\n+\tvariant<_Types...>, std::index_sequence_for<_Types...>>,\n       public __variant_hash_call_base<_Types...>\n     {\n       using result_type = size_t;"}, {"sha": "04c43411941eb1ba0f3241b093a06b915405d1f6", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,10 +35,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   /**\n    *  @brief A standard container for storing a fixed size sequence of elements.\n    *\n@@ -243,9 +243,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline const _Tp&\n     get(const array<_Tp, _Nm>& __arr)\n     { return __arr[_Int]; }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_ARRAY"}, {"sha": "7ac733d73b8e755cfb04ffe2420496c5441cfbea", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -50,6 +50,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -64,8 +66,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief Compute the gamma functions required by the Temme series\n      *          expansions of @f$ N_\\nu(x) @f$ and @f$ K_\\nu(x) @f$.\n@@ -626,13 +626,13 @@ namespace tr1\n           return __n_n;\n         }\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_BESSEL_FUNCTION_TCC"}, {"sha": "7463356906f5e7e21e23cd4f69bee4d76cc40e43", "filename": "libstdc++-v3/include/tr1/beta_function.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -48,6 +48,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -62,8 +64,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief  Return the beta function: \\f$B(x,y)\\f$.\n      * \n@@ -195,13 +195,13 @@ namespace tr1\n       else\n         return __beta_lgamma(__x, __y);\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_BETA_FUNCTION_TCC"}, {"sha": "720452e4f5aeac15686ba16d853b1790b65873a9", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -145,10 +145,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n #if _GLIBCXX_USE_C99_MATH_TR1\n \n   // Using declarations to bring names from libc's <math.h> into std::tr1.\n@@ -1059,16 +1059,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // @}\n \n-#endif\n-_GLIBCXX_END_NAMESPACE_VERSION\n-}\n-}\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-namespace tr1\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+#endif /* _GLIBCXX_USE_C99_MATH_TR1 */\n \n   // DR 550. What should the return type of pow(float,int) be?\n   // NB: C++11 and TR1 != C++03.\n@@ -1135,20 +1126,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif // C++11\n \n-\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-}\n-}\n-\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-namespace tr1\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @defgroup tr1_math_spec_func Mathematical Special Functions\n    * @ingroup numerics\n@@ -1250,12 +1229,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::sph_neumann;\n \n   /* @} */ // tr1_math_spec_func\n-_GLIBCXX_END_NAMESPACE_VERSION\n-}\n-}\n \n #else // ! _GLIBCXX_USE_STD_SPEC_FUNCS\n \n+} // namespace tr1\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n #include <bits/stl_algobase.h>\n #include <limits>\n #include <tr1/type_traits>\n@@ -1274,10 +1255,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   /**\n    * @defgroup tr1_math_spec_func Mathematical Special Functions\n    * @ingroup numerics\n@@ -1680,9 +1661,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /* @} */ // tr1_math_spec_func\n-_GLIBCXX_END_NAMESPACE_VERSION\n-}\n-}\n #endif // _GLIBCXX_USE_STD_SPEC_FUNCS\n \n+} // namespace tr1\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n #endif // _GLIBCXX_TR1_CMATH"}, {"sha": "2e7d05cf227061100db69e745e60481bde30df7c", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,10 +35,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   /**\n    * @addtogroup complex_numbers\n    * @{\n@@ -412,9 +412,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return std::pow(__x, __y); }\n \n // @} group complex_numbers\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_COMPLEX"}, {"sha": "4bd22e5eebcae0af498729cf12ae2788493d6f97", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,6 +44,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n@@ -56,8 +58,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief Return the Carlson elliptic function @f$ R_F(x,y,z) @f$\n      *          of the first kind.\n@@ -745,12 +745,12 @@ namespace tr1\n             return __Pi + _Tp(2) * __n * __comp_ellint_3(__k, __nu);\n         }\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_ELL_INTEGRAL_TCC"}, {"sha": "663b2ce2f73bea2f322835c0d3d59d2d02365958", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -49,6 +49,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n@@ -61,8 +63,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     template<typename _Tp> _Tp __expint_E1(_Tp);\n \n     /**\n@@ -522,12 +522,12 @@ namespace tr1\n       else\n         return __expint_Ei(__x);\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_EXP_INTEGRAL_TCC"}, {"sha": "cb40e90e255fc286f51a251422705120acc0bfaa", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -48,18 +48,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-#if __cplusplus >= 201103L\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+#if __cplusplus >= 201103L\n   template<int> struct _Placeholder;\n   template<typename> class _Bind;\n   template<typename, typename> class _Bind_result;\n-_GLIBCXX_END_NAMESPACE_VERSION\n #endif\n \n namespace tr1\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<typename _MemberPointer>\n     class _Mem_fn;\n   template<typename _Tp, typename _Class>\n@@ -855,14 +852,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// The type of placeholder objects defined by libstdc++.\n   template<int _Num> struct _Placeholder { };\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n   /** @namespace std::tr1::placeholders\n    *  @brief Sub-namespace for tr1/functional.\n    */\n   namespace placeholders \n   { \n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /*  Define a large number of placeholders. There is no way to\n      *  simplify this with variadic templates, because we're introducing\n      *  unique names for each.\n@@ -899,10 +893,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       _Placeholder<28> _28;\n       _Placeholder<29> _29;\n     } \n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  Partial specialization of is_placeholder that provides the placeholder\n    *  number for the placeholder objects defined by libstdc++.\n@@ -2247,12 +2239,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     swap(function<_Signature>& __x, function<_Signature>& __y)\n     { __x.swap(__y); }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #if __cplusplus >= 201103L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename> struct is_placeholder;\n \n@@ -2301,8 +2290,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                                                                _Signature>>\n     : true_type { };\n \n+#endif // C++11\n _GLIBCXX_END_NAMESPACE_VERSION\n-#endif\n }\n \n #endif // _GLIBCXX_TR1_FUNCTIONAL"}, {"sha": "f8cff25257f8a4f13ef9fc6f002df443b930b0df", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -34,10 +34,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   /// Class template hash.\n   // Declaration of default hash functor std::tr1::hash.  The types for\n   // which std::tr1::hash<T> is well-defined is in clause 6.3.3. of the PDTR.\n@@ -192,9 +192,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_PURE size_t\n     hash<const wstring&>::operator()(const wstring&) const;\n #endif\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_FUNCTIONAL_HASH_H"}, {"sha": "7c4a664e5c9252cc3dd6097d249617e04930a1f6", "filename": "libstdc++-v3/include/tr1/gamma.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -50,6 +50,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -62,8 +64,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief This returns Bernoulli numbers from a table or by summation\n      *          for larger values.\n@@ -466,13 +466,13 @@ namespace tr1\n           return __result;\n         }\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _GLIBCXX_TR1_GAMMA_TCC"}, {"sha": "6e798cfd1dd3ee23cb5fc7f0435401132eaac94b", "filename": "libstdc++-v3/include/tr1/hashtable.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -37,10 +37,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   // Class template _Hashtable, class definition.\n \n   // Meaning of class template _Hashtable's template parameters\n@@ -1173,9 +1173,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __throw_exception_again;\n \t}\n     }\n+} // namespace tr1\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace tr1\n } // namespace std\n \n #endif // _GLIBCXX_TR1_HASHTABLE_H"}, {"sha": "9a75443ccb6f724ab4a28022292423077789b820", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,12 +30,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n { \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace tr1\n {\n namespace __detail\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // Helper function: return distance(first, last) for forward\n   // iterators, or 0 for input iterators.\n   template<class _Iterator>\n@@ -772,7 +772,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _H1          _M_h1;\n       _H2          _M_h2;\n     };\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail\n }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "dc9f176e27ad8264a6b0441abe61e9d199398a9a", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,6 +43,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -57,8 +59,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief This routine returns the confluent hypergeometric function\n      *          by series expansion.\n@@ -773,13 +773,13 @@ namespace tr1\n       else\n         return __hyperg_luke(__a, __b, __c, __x);\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_HYPERGEOMETRIC_TCC"}, {"sha": "16fee54e9c4432c24cbcd8848931bbab714c4e0c", "filename": "libstdc++-v3/include/tr1/legendre_function.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -48,6 +48,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -62,8 +64,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief  Return the Legendre polynomial by recursion on order\n      *           @f$ l @f$.\n@@ -301,13 +301,13 @@ namespace tr1\n             }\n         }\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_LEGENDRE_FUNCTION_TCC"}, {"sha": "79d7d7578fa903a3ada306d6bc7cab056da4b927", "filename": "libstdc++-v3/include/tr1/modified_bessel_func.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -50,6 +50,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n@@ -62,8 +64,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief  Compute the modified Bessel functions @f$ I_\\nu(x) @f$ and\n      *           @f$ K_\\nu(x) @f$ and their first derivatives\n@@ -430,12 +430,12 @@ namespace tr1\n \n       return;\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_MODIFIED_BESSEL_FUNC_TCC"}, {"sha": "8136284310c03f515eef36c339475f18466eb203", "filename": "libstdc++-v3/include/tr1/poly_hermite.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,6 +41,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n@@ -53,8 +55,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief This routine returns the Hermite polynomial\n      *          of order n: \\f$ H_n(x) \\f$ by recursion on n.\n@@ -120,12 +120,12 @@ namespace tr1\n       else\n         return __poly_hermite_recursion(__n, __x);\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_POLY_HERMITE_TCC"}, {"sha": "420b1f34db458f40ccf019e65d06123e83b7c45e", "filename": "libstdc++-v3/include/tr1/poly_laguerre.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -43,6 +43,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -57,8 +59,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief This routine returns the associated Laguerre polynomial \n      *          of order @f$ n @f$, degree @f$ \\alpha @f$ for large n.\n@@ -317,13 +317,13 @@ namespace tr1\n     inline _Tp\n     __laguerre(unsigned int __n, _Tp __x)\n     { return __poly_laguerre<unsigned int, _Tp>(__n, 0, __x); }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_POLY_LAGUERRE_TCC"}, {"sha": "79a5b8f8cd496f51e7ed449e6a9c7738a22eabc9", "filename": "libstdc++-v3/include/tr1/random.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,6 +35,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace tr1\n {\n   // [5.1] Random number generation\n@@ -50,8 +52,6 @@ namespace tr1\n    */\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     template<typename _UIntType, int __w, \n \t     bool = __w < std::numeric_limits<_UIntType>::digits>\n       struct _Shift\n@@ -212,12 +212,8 @@ namespace tr1\n       private:\n \t_Engine* _M_g;\n       };\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * Produces random numbers on a given distribution function using a\n    * non-uniform random number generation engine.\n@@ -2410,8 +2406,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /* @} */ // group tr1_random_distributions_continuous\n   /* @} */ // group tr1_random_distributions\n   /* @} */ // group tr1_random\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_RANDOM_H"}, {"sha": "25f444a1644eb16c85cc3a2019f358589ab07c55", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -33,15 +33,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace tr1\n {\n   /*\n    * (Further) implementation-space details.\n    */\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // General case for x = (ax + c) mod m -- use Schrage's algorithm to avoid\n     // integer overflow.\n     //\n@@ -92,11 +92,8 @@ namespace tr1\n \t__calc(_Tp __x)\n \t{ return __a * __x + __c; }\n       };\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     const _UIntType\n     linear_congruential<_UIntType, __a, __c, __m>::multiplier;\n@@ -1713,9 +1710,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __os.precision(__precision);\n       return __os;\n     }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif"}, {"sha": "6cb8c154e86da4fe7c3b0dc7a5ff7fed05b2a320", "filename": "libstdc++-v3/include/tr1/regex", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -45,6 +45,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace tr1\n {\n /**\n@@ -58,8 +60,6 @@ namespace tr1\n  */\n namespace regex_constants\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   /**\n    * @name 5.1 Regular Expression Syntax Options\n    */\n@@ -397,11 +397,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   static const error_type error_stack(_S_error_stack);\n \n   //@}\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // [7.8] Class regex_error\n   /**\n    *  @brief A regular expression exception class.\n@@ -2722,9 +2719,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   \n   //@}\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_REGEX"}, {"sha": "130cef63c455fc6dce0d0dd8410be11849328e8e", "filename": "libstdc++-v3/include/tr1/riemann_zeta.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -46,6 +46,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n # define _GLIBCXX_MATH_NS ::std\n #elif defined(_GLIBCXX_TR1_CMATH)\n@@ -60,8 +62,6 @@ namespace tr1\n   // Implementation-space details.\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /**\n      *   @brief  Compute the Riemann zeta function @f$ \\zeta(s) @f$\n      *           by summation for s > 1.\n@@ -431,13 +431,13 @@ namespace tr1\n     inline _Tp\n     __hurwitz_zeta(_Tp __a, _Tp __s)\n     { return __hurwitz_zeta_glob(__a, __s); }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #undef _GLIBCXX_MATH_NS\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_RIEMANN_ZETA_TCC"}, {"sha": "95ac9775b9bec45bd57955a05c00ec5b2947908f", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -51,10 +51,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n  /**\n    *  @brief  Exception possibly thrown by @c shared_ptr.\n    *  @ingroup exceptions\n@@ -1162,9 +1162,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       mutable weak_ptr<_Tp>  _M_weak_this;\n     };\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _TR1_SHARED_PTR_H"}, {"sha": "c4e9c476150d504f8dab10cda3c4cab216b5204f", "filename": "libstdc++-v3/include/tr1/special_function_util.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -38,6 +38,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #if _GLIBCXX_USE_STD_SPEC_FUNCS\n #elif defined(_GLIBCXX_TR1_CMATH)\n namespace tr1\n@@ -47,8 +49,6 @@ namespace tr1\n #endif\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     /// A class to encapsulate type dependent floating point\n     /// constants.  Not everything will be able to be expressed as\n     /// type logic.\n@@ -130,12 +130,12 @@ namespace tr1\n     { return __builtin_isnanl(__x); }\n \n #endif\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n #if ! _GLIBCXX_USE_STD_SPEC_FUNCS && defined(_GLIBCXX_TR1_CMATH)\n } // namespace tr1\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n #endif // _GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H"}, {"sha": "997542d241b2e68863b15808061147c796fa90c1", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -38,10 +38,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   // Adds a const reference to a non-reference type.\n   template<typename _Tp>\n     struct __add_c_ref\n@@ -418,9 +418,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     _Swallow_assign ignore;\n   }; // anonymous namespace\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_TUPLE"}, {"sha": "83dd7b7dcf24c455bdd36eb7c86d8bad6a008ca2", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,10 +35,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   /**\n    * @addtogroup metaprogramming\n    * @{\n@@ -679,9 +679,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #undef _DEFINE_SPEC\n \n   /// @} group metaprogramming\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_TYPE_TRAITS"}, {"sha": "a27654a45d2e0d17a5f9517745d9e9c2d67c6bd9", "filename": "libstdc++-v3/include/tr1/unordered_map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -29,10 +29,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   // NB: When we get typedef templates these class definitions\n   // will be unnecessary.\n   template<class _Key, class _Tp,\n@@ -272,7 +272,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}"}, {"sha": "df24ca6b299e547d744fe23a375741a34823ab0e", "filename": "libstdc++-v3/include/tr1/unordered_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -29,10 +29,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   // NB: When we get typedef templates these class definitions\n   // will be unnecessary.\n   template<class _Value,\n@@ -261,7 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}"}, {"sha": "f114160005f435906a9a799e6a5fec3a9db75693", "filename": "libstdc++-v3/include/tr1/utility", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -37,10 +37,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr1\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr1\n+{\n   template<class _Tp>\n     class tuple_size;\n \n@@ -100,9 +100,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n     get(const std::pair<_Tp1, _Tp2>& __in)\n     { return __pair_get<_Int>::__const_get(__in); }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR1_UTILITY"}, {"sha": "f89a865893246bad79944597254cf3a6ee6452e7", "filename": "libstdc++-v3/include/tr2/bool_set", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -36,10 +36,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   /**\n    *  bool_set\n    *\n@@ -310,10 +310,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline bool_set\n   operator!=(bool_set __s, bool_set __t)\n   { return ! (__s == __t); }\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #include <tr2/bool_set.tcc>\n "}, {"sha": "1ffcccac901b2c281f113aa1965d2f76f2366919", "filename": "libstdc++-v3/include/tr2/bool_set.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -33,10 +33,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   bool_set::_Bool_set_val\n   bool_set::_S_not[4] =\n   { _S_true_, _S_false, _S_indet, _S_empty };\n@@ -68,10 +68,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { _S_false, _S_true_, _S_indet, _S_empty },\n     { _S_indet, _S_indet, _S_indet, _S_empty },\n     { _S_empty, _S_empty, _S_empty, _S_empty } };\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n //  I object to these things.\n //  The stuff in locale facets are for basic types."}, {"sha": "4d16f8178b696d1cd030326a30af7a4745f188dd", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -42,10 +42,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   /**\n    *  @defgroup dynamic_bitset Dynamic Bitset.\n    *  @ingroup extensions\n@@ -1220,9 +1220,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @}\n    */\n+} // tr2\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // tr2\n } // std\n \n #include <tr2/dynamic_bitset.tcc>"}, {"sha": "c2875e5425712d978e8e859e80168517daa7a315", "filename": "libstdc++-v3/include/tr2/dynamic_bitset.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -34,10 +34,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   // Definitions of non-inline functions from __dynamic_bitset_base.\n   template<typename _WordT, typename _Alloc>\n     void\n@@ -272,9 +272,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__is.setstate(__state);\n       return __is;\n     }\n+} // tr2\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // tr2\n } // std\n \n #endif /* _GLIBCXX_TR2_DYNAMIC_BITSET_TCC */"}, {"sha": "a9b71c8f12155bef739bfa8fc0b01dd29ed27213", "filename": "libstdc++-v3/include/tr2/ratio", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fratio?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,10 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   template<intmax_t _Pn, size_t _Bit,\n \t     bool = _Bit < static_cast<size_t>\n \t\t\t  (std::numeric_limits<intmax_t>::digits)>\n@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   typedef ratio<__safe_lshift<1, 60>::__value, 1> exbi;\n   //typedef ratio<__safe_lshift<1, 70>::__value, 1> zebi;\n   //typedef ratio<__safe_lshift<1, 80>::__value, 1> yobi;\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}"}, {"sha": "b442ba5dc6445740024cba93d47f1dd83573afa7", "filename": "libstdc++-v3/include/tr2/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -35,10 +35,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace tr2\n-{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace tr2\n+{\n   /**\n    * @addtogroup metaprogramming\n    * @{\n@@ -98,9 +98,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// @} group metaprogramming\n+}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-}\n \n #endif // _GLIBCXX_TR2_TYPE_TRAITS"}, {"sha": "04f413adf0477af4d8d7ee6987e13346ccc8564d", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -1555,15 +1555,15 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_container('std::', 'forward_list',\n                                     StdForwardListPrinter)\n \n-    libstdcxx_printer.add_version('std::tr1::', 'shared_ptr', SharedPointerPrinter)\n-    libstdcxx_printer.add_version('std::tr1::', 'weak_ptr', SharedPointerPrinter)\n-    libstdcxx_printer.add_version('std::tr1::', 'unordered_map',\n+    libstdcxx_printer.add_version('std::', 'tr1::shared_ptr', SharedPointerPrinter)\n+    libstdcxx_printer.add_version('std::', 'tr1::weak_ptr', SharedPointerPrinter)\n+    libstdcxx_printer.add_version('std::', 'tr1::unordered_map',\n                                   Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add_version('std::tr1::', 'unordered_set',\n+    libstdcxx_printer.add_version('std::', 'tr1::unordered_set',\n                                   Tr1UnorderedSetPrinter)\n-    libstdcxx_printer.add_version('std::tr1::', 'unordered_multimap',\n+    libstdcxx_printer.add_version('std::', 'tr1::unordered_multimap',\n                                   Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add_version('std::tr1::', 'unordered_multiset',\n+    libstdcxx_printer.add_version('std::', 'tr1::unordered_multiset',\n                                   Tr1UnorderedSetPrinter)\n \n     # These are the C++11 printer registrations for -D_GLIBCXX_DEBUG cases."}, {"sha": "337860c23d864adb7f3493bbb58d874ce3d7de22", "filename": "libstdc++-v3/src/c++11/chrono.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -41,10 +41,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace chrono\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // XXX GLIBCXX_ABI Deprecated\n     inline namespace _V2 {\n \n@@ -97,9 +97,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n   } // end inline namespace _V2\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace chrono\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "811ccb5f1209de0d18ed52cd8d5d0d1c043f1ff2", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -44,6 +44,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // gcc-4.4.0\n   // <mutex> exported std::lock_error\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n@@ -130,7 +132,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     constexpr bool system_clock::is_monotonic;\n   } // namespace chrono\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // gcc-5 replaces this with _V2::error_category\n   class error_category\n   {\n@@ -169,7 +170,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const error_category& __other) const noexcept\n     { return this != &__other; }\n   };\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n   // gcc-4.9.0\n   // LWG 2145 changes this constructor to constexpr i.e. inline\n@@ -215,7 +215,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     const system_error_category system_category_instance{};\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const error_category&\n   system_category() noexcept { return system_category_instance; }\n \n@@ -227,7 +226,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_CONST const error_categoryxx& system_category() noexcept;\n     _GLIBCXX_CONST const error_categoryxx& generic_category() noexcept;\n   }\n-_GLIBCXX_END_NAMESPACE_VERSION\n \n   error_condition\n   error_category::default_error_condition(int __i) const noexcept\n@@ -254,5 +252,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     return false;\n   }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n }\n #endif"}, {"sha": "941eaf83556663cf67a16f4de4de3890526fac5c", "filename": "libstdc++-v3/src/c++11/compatibility-chrono.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -38,10 +38,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace chrono\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     // NB: Default configuration was no realtime.\n     struct system_clock\n     {\n@@ -84,9 +84,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \t     (__from(chrono::seconds(__sec)));\n #endif\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace chrono\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "fbff59eb5f00531b8dd42a3c69179688a2106628", "filename": "libstdc++-v3/src/c++11/cxx11-shim_facets.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -45,6 +45,8 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // Base class of facet shims, holds a reference to the underlying facet\n   // that the shim forwards to.\n   class locale::facet::__shim\n@@ -67,8 +69,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n namespace __facet_shims\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   namespace // unnamed\n   {\n     template<typename C>\n@@ -777,10 +777,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tbool, ios_base&, wchar_t, long double, const __any_string*);\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __facet_shims\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Create a new shim facet of type WHICH that forwards calls to F.\n   // F is the replacement facet provided by the user, WHICH is the ID of\n   // F's \"other ABI twin\" which we are replacing with a shim."}, {"sha": "3ddc10c72f7e7aa48f4de8f705b124ef8ca77f0b", "filename": "libstdc++-v3/src/c++11/hashtable_c++0x.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -34,12 +34,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #include \"../shared/hashtable-aux.cc\"\n \n namespace __detail\n {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // Return a prime no smaller than n.\n   std::size_t\n   _Prime_rehash_policy::_M_next_bkt(std::size_t __n) const\n@@ -111,7 +111,7 @@ namespace __detail\n     else\n       return std::make_pair(false, 0);\n   }\n+} // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __detail\n } // namespace std"}, {"sha": "48a05fab3656bbc29d79abd7a245d2b4f271fa0c", "filename": "libstdc++-v3/src/c++11/placeholders.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,9 +30,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace placeholders\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     extern const _Placeholder<1> _1{};\n     extern const _Placeholder<2> _2{};\n     extern const _Placeholder<3> _3{};\n@@ -62,6 +63,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     extern const _Placeholder<27> _27{};\n     extern const _Placeholder<28> _28{};\n     extern const _Placeholder<29> _29{};\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "cd6d9fe6635c93a19e2ee9554f6339c7297da905", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -180,12 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __n;\n   }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n namespace this_thread\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   void\n   __sleep_for(chrono::seconds __s, chrono::nanoseconds __ns)\n   {\n@@ -217,10 +213,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ::Sleep(chrono::milliseconds(__s).count() + ms);\n #endif\n   }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "b16c29143f1a333f626066d83b5f5097aa219e8c", "filename": "libstdc++-v3/src/c++98/bitmap_allocator.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -26,9 +26,10 @@\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template class __mini_vector<\n       std::pair<bitmap_allocator<char>::_Alloc_block*,\n \t\tbitmap_allocator<char>::_Alloc_block*> >;\n@@ -41,11 +42,8 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n \n     template size_t** __lower_bound(size_t**, size_t**, size_t const&,\n \t\t\t\t    free_list::_LT_pointer_compare);\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   size_t*\n   free_list::\n   _M_get(size_t __sz) throw(std::bad_alloc)"}, {"sha": "ac320696ad2e65a240276beee68ad4af5cab7ab7", "filename": "libstdc++-v3/src/c++98/hashtable_tr1.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -26,8 +26,12 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace tr1\n   {\n #include \"../shared/hashtable-aux.cc\"\n   }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "25e72717ecaf63fc22151a23d8f56a829de79607", "filename": "libstdc++-v3/src/c++98/list.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flist.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -52,10 +52,10 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   namespace __detail\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n     void\n     _List_node_base::swap(_List_node_base& __x,\n \t\t\t  _List_node_base& __y) _GLIBCXX_USE_NOEXCEPT\n@@ -141,7 +141,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       __prev_node->_M_next = __next_node;\n       __next_node->_M_prev = __prev_node;\n     }\n-\n-  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "f1d19974bd7b5b8808a1b41d13df17a445fae204", "filename": "libstdc++-v3/src/shared/hashtable-aux.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -24,7 +24,6 @@\n \n namespace __detail\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // The sentinel value is kept only for abi backward compatibility.\n   extern const unsigned long __prime_list[] = // 256 + 1 or 256 + 48 + 1\n   {\n@@ -90,5 +89,4 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     18446744073709551557ul, 18446744073709551557ul\n #endif\n   };\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail"}, {"sha": "b5105dff38bca69bda613d80324b39b36b1444e0", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 892 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 880 }\n }\n // { dg-prune-output \"in constexpr expansion\" } // needed for -O0"}, {"sha": "17f741870984e41066521556baa027db09161db5", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -30,4 +30,4 @@ void test01()\n   test_type d; // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 308 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 300 }"}, {"sha": "282a9dbdc851fe65bd200cc23c2b1205be7db67f", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 309 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 301 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "c57f9d947a541b5d69fed45ce0be48b038b9720d", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -32,4 +32,4 @@ void test01()\n   test_type d;  // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 311 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 303 }"}, {"sha": "d098164c0f7d631996b88f91dd6f252154590ccd", "filename": "libstdc++-v3/testsuite/20_util/forward/c_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 86 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 87 }\n \n #include <list>\n "}, {"sha": "0ca36d4b5a681212a4cef7a57f785a693b58e7c3", "filename": "libstdc++-v3/testsuite/20_util/forward/f_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 86 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 87 }\n \n #include <utility>\n "}, {"sha": "8c3494d70418793fcad35840a58ebc232b6c4cca", "filename": "libstdc++-v3/testsuite/26_numerics/gcd/gcd_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2Fgcd_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2Fgcd_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2Fgcd_neg.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -31,9 +31,9 @@ test01()\n   std::gcd(0.1, 0.1);   // { dg-error \"from here\" }\n }\n \n-// { dg-error \"integers\" \"\" { target *-*-* } 134 }\n-// { dg-error \"integers\" \"\" { target *-*-* } 135 }\n-// { dg-error \"not bools\" \"\" { target *-*-* } 136 }\n-// { dg-error \"not bools\" \"\" { target *-*-* } 137 }\n+// { dg-error \"integers\" \"\" { target *-*-* } 130 }\n+// { dg-error \"integers\" \"\" { target *-*-* } 131 }\n+// { dg-error \"not bools\" \"\" { target *-*-* } 132 }\n+// { dg-error \"not bools\" \"\" { target *-*-* } 133 }\n // { dg-prune-output \"deleted function\" }\n // { dg-prune-output \"invalid operands\" }"}, {"sha": "abcac4f18c1f6e2b4fbce8820e1fac22d016ed27", "filename": "libstdc++-v3/testsuite/26_numerics/lcm/lcm_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2Flcm_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2Flcm_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2Flcm_neg.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -31,9 +31,9 @@ test01()\n   std::lcm(0.1, 0.1);   // { dg-error \"from here\" }\n }\n \n-// { dg-error \"integers\" \"\" { target *-*-* } 147 }\n-// { dg-error \"integers\" \"\" { target *-*-* } 148 }\n-// { dg-error \"not bools\" \"\" { target *-*-* } 149 }\n-// { dg-error \"not bools\" \"\" { target *-*-* } 150 }\n+// { dg-error \"integers\" \"\" { target *-*-* } 143 }\n+// { dg-error \"integers\" \"\" { target *-*-* } 144 }\n+// { dg-error \"not bools\" \"\" { target *-*-* } 145 }\n+// { dg-error \"not bools\" \"\" { target *-*-* } 146 }\n // { dg-prune-output \"deleted function\" }\n // { dg-prune-output \"invalid operands\" }"}, {"sha": "22485222f28904fe87ecee983f048a5e4e7864fb", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a15d84228ee29d55cd011094f82c8d4fa9a5a76/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=4a15d84228ee29d55cd011094f82c8d4fa9a5a76", "patch": "@@ -9,6 +9,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 160 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 156 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3314 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3311 }"}]}