{"sha": "6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyYmQ2MWUzYWY1NmJjZGU1MTkzYmRjY2QzZDhjY2FlNmM5NmJkMw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-05-02T23:49:19Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-05-02T23:49:19Z"}, "message": "Don't write out static consts now, unless we need them.\n\nFrom-SVN: r7194", "tree": {"sha": "6869ef3251dbeca3729b2d9cb40e27ff120b9c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6869ef3251dbeca3729b2d9cb40e27ff120b9c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3/comments", "author": null, "committer": null, "parents": [{"sha": "e6b538e1d5c758b5cbf22b98b2fd80e9f487d379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b538e1d5c758b5cbf22b98b2fd80e9f487d379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b538e1d5c758b5cbf22b98b2fd80e9f487d379"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "5d516e6536691b752bdc8ca92633b9efa9499e78", "filename": "gcc/toplev.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6b2bd61e3af56bcde5193bdccd3d8ccae6c96bd3", "patch": "@@ -2274,14 +2274,33 @@ compile_file (name)\n \tif (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n \t    && ! TREE_ASM_WRITTEN (decl))\n \t  {\n-\t    /* Don't write out static consts, unless we used them.\n-\t       (This used to write them out only if the address was\n-\t       taken, but that was wrong; if the variable was simply\n-\t       referred to, it still needs to exist or else it will\n-\t       be undefined in the linker.)  */\n+\t    /* Don't write out static consts, unless we still need them.\n+\n+\t       We also keep static consts if not optimizing (for debugging).\n+\t       ??? They might be better written into the debug information.\n+\t       This is possible when using DWARF.\n+\n+\t       A language processor that wants static constants to be always\n+\t       written out (even if it is not used) is responsible for\n+\t       calling rest_of_decl_compilation itself.  E.g. the C front-end\n+\t       calls rest_of_decl_compilation from finish_decl.\n+\t       One motivation for this is that is conventional in some\n+\t       environments to write things like:\n+\t           static const char rcsid[] = \"... version string ...\";\n+\t       intending to force the string to be in the executable.\n+\n+\t       A language processor that would prefer to have unneeded\n+\t       static constants \"optimized away\" would just defer writing\n+\t       them out until here.  E.g. C++ does this, because static\n+\t       constants are often defined in header files.\n+\n+\t       ??? A tempting alternative (for both C and C++) would be\n+\t       to force a constant to be written if and only if it is\n+\t       defined in a main file, as opposed to an include file. */\n+\n \t    if (! TREE_READONLY (decl)\n \t\t|| TREE_PUBLIC (decl)\n-\t\t|| TREE_USED (decl)\n+\t\t|| !optimize\n \t\t|| TREE_ADDRESSABLE (decl)\n \t\t|| TREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (decl)))\n \t      rest_of_decl_compilation (decl, NULL_PTR, 1, 1);"}]}