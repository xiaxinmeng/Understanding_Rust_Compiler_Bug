{"sha": "ae6fa899e7000352aa8573a23b1e92c225337ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2ZmE4OTllNzAwMDM1MmFhODU3M2EyM2IxZTkyYzIyNTMzN2VhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-13T11:04:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-13T11:04:26Z"}, "message": "re PR tree-optimization/45216 (Rotate expressions not recognized at tree level)\n\n\tPR tree-optimization/45216\n\tPR tree-optimization/57157\n\t* tree-ssa-forwprop.c (simplify_rotate): Only recognize\n\tthe (-Y) & (B - 1) variant if OP is |.\n\t* expmed.c (expand_shift_1): For rotations by const0_rtx just\n\treturn shifted.  Use (-op1) & (prec - 1) as other_amount\n\tinstead of prec - op1.\n\n\t* c-c++-common/rotate-1.c: Add 32 tests with +.\n\t* c-c++-common/rotate-1a.c: Adjust.\n\t* c-c++-common/rotate-2.c: Add 32 tests with +, expect\n\tonly 48 rotates.\n\t* c-c++-common/rotate-2b.c: New test.\n\t* c-c++-common/rotate-3.c: Add 32 tests with +.\n\t* c-c++-common/rotate-4.c: Add 32 tests with +, expect\n\tonly 48 rotates.\n\t* c-c++-common/rotate-4b.c: New test.\n\t* c-c++-common/rotate-5.c: New test.\n\nFrom-SVN: r198823", "tree": {"sha": "6346bea605532f76d3b46ee9bfb0d6588ee811de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6346bea605532f76d3b46ee9bfb0d6588ee811de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae6fa899e7000352aa8573a23b1e92c225337ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6fa899e7000352aa8573a23b1e92c225337ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6fa899e7000352aa8573a23b1e92c225337ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6fa899e7000352aa8573a23b1e92c225337ea1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4502fe8dfcb1cc2c59b50b868ac75fb5cdd742fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4502fe8dfcb1cc2c59b50b868ac75fb5cdd742fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4502fe8dfcb1cc2c59b50b868ac75fb5cdd742fc"}], "stats": {"total": 887, "additions": 871, "deletions": 16}, "files": [{"sha": "785b0907e3f46f63526f5e02f818183212b6920a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,3 +1,13 @@\n+2013-05-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45216\n+\tPR tree-optimization/57157\n+\t* tree-ssa-forwprop.c (simplify_rotate): Only recognize\n+\tthe (-Y) & (B - 1) variant if OP is |.\n+\t* expmed.c (expand_shift_1): For rotations by const0_rtx just\n+\treturn shifted.  Use (-op1) & (prec - 1) as other_amount\n+\tinstead of prec - op1.\n+\n 2013-05-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/42371"}, {"sha": "6e61e9a402eb4640f63efa6b04b0aa08559a2e51", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -2166,7 +2166,8 @@ expand_shift_1 (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t    {\n \t      /* If we have been unable to open-code this by a rotation,\n \t\t do it as the IOR of two shifts.  I.e., to rotate A\n-\t\t by N bits, compute (A << N) | ((unsigned) A >> (C - N))\n+\t\t by N bits, compute\n+\t\t (A << N) | ((unsigned) A >> ((-N) & (C - 1)))\n \t\t where C is the bitsize of A.\n \n \t\t It is theoretically possible that the target machine might\n@@ -2181,14 +2182,22 @@ expand_shift_1 (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t      rtx temp1;\n \n \t      new_amount = op1;\n-\t      if (CONST_INT_P (op1))\n+\t      if (op1 == const0_rtx)\n+\t\treturn shifted;\n+\t      else if (CONST_INT_P (op1))\n \t\tother_amount = GEN_INT (GET_MODE_BITSIZE (mode)\n \t\t\t\t\t- INTVAL (op1));\n \t      else\n-\t\tother_amount\n-\t\t  = simplify_gen_binary (MINUS, GET_MODE (op1),\n-\t\t\t\t\t GEN_INT (GET_MODE_PRECISION (mode)),\n-\t\t\t\t\t op1);\n+\t\t{\n+\t\t  other_amount\n+\t\t    = simplify_gen_unary (NEG, GET_MODE (op1),\n+\t\t\t\t\t  op1, GET_MODE (op1));\n+\t\t  other_amount\n+\t\t    = simplify_gen_binary (AND, GET_MODE (op1),\n+\t\t\t\t\t   other_amount,\n+\t\t\t\t\t   GEN_INT (GET_MODE_PRECISION (mode)\n+\t\t\t\t\t\t    - 1));\n+\t\t}\n \n \t      shifted = force_reg (mode, shifted);\n "}, {"sha": "cd39744c4f5805dbb7170b30e186bfd66bbf33a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,3 +1,18 @@\n+2013-05-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45216\n+\tPR tree-optimization/57157\n+\t* c-c++-common/rotate-1.c: Add 32 tests with +.\n+\t* c-c++-common/rotate-1a.c: Adjust.\n+\t* c-c++-common/rotate-2.c: Add 32 tests with +, expect\n+\tonly 48 rotates.\n+\t* c-c++-common/rotate-2b.c: New test.\n+\t* c-c++-common/rotate-3.c: Add 32 tests with +.\n+\t* c-c++-common/rotate-4.c: Add 32 tests with +, expect\n+\tonly 48 rotates.\n+\t* c-c++-common/rotate-4b.c: New test.\n+\t* c-c++-common/rotate-5.c: New test.\n+\n 2013-05-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/42371"}, {"sha": "afdaa289a394096ae573f503384ef25fc702dae8", "filename": "gcc/testsuite/c-c++-common/rotate-1.c", "status": "modified", "additions": 193, "deletions": 1, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,7 +1,7 @@\n /* Check rotate pattern detection.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n-/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 96 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n unsigned int\n@@ -387,3 +387,195 @@ f64 (unsigned char x, unsigned long int y)\n {\n   return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n }\n+\n+unsigned int\n+f65 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f82 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) + (x >> y);\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f87 (unsigned char x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f88 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f89 (unsigned int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f90 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) + (x >> y);\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f95 (unsigned char x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f96 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) + (x >> y);\n+}"}, {"sha": "07f65e54098eafcdd7f8c736bd0f0ac37ea60813", "filename": "gcc/testsuite/c-c++-common/rotate-1a.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -21,13 +21,18 @@ unsigned int expected[] = {\n 0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n 0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n 0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n 0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf };\n \n #define F(n) __typeof (f##n) f##n __attribute__((noinline, noclone));\n #define D(n) F(n##0) F(n##1) F(n##2) F(n##3) F(n##4) F(n##5) F(n##6) F(n##7) F(n##8) F(n##9)\n #define ALL \\\n F(1) F(2) F(3) F(4) F(5) F(6) F(7) F(8) F(9) \\\n-D(1) D(2) D(3) D(4) D(5) F(60) F(61) F(62) F(63) F(64)\n+D(1) D(2) D(3) D(4) D(5) D(6) D(7) D(8) \\\n+F(90) F(91) F(92) F(93) F(94) F(95) F(96)\n ALL\n \n int"}, {"sha": "109fd32bc7d609d2cfe3dd544f4a72e7b8cb6fce", "filename": "gcc/testsuite/c-c++-common/rotate-2.c", "status": "modified", "additions": 195, "deletions": 1, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,7 +1,9 @@\n /* Check rotate pattern detection.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n-/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* Rotates should be recognized only in functions with | instead of + or ^,\n+   or in functions that have constant shift counts (unused attribute on y).  */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 48 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n unsigned int\n@@ -387,3 +389,195 @@ f64 (unsigned char x, unsigned long int y)\n {\n   return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n }\n+\n+unsigned int\n+f65 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f82 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> y);\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f87 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f88 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f89 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f90 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> y);\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f95 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f96 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> y);\n+}"}, {"sha": "8dc8313ee2a0fb8b0f8ce260a1b73ea99b6ee645", "filename": "gcc/testsuite/c-c++-common/rotate-3.c", "status": "modified", "additions": 193, "deletions": 1, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,7 +1,7 @@\n /* Check rotate pattern detection.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n-/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 96 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n unsigned int\n@@ -387,3 +387,195 @@ f64 (unsigned char x, long int y)\n {\n   return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n }\n+\n+unsigned int\n+f65 (unsigned int x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, long int y)\n+{\n+  return (x << y) + (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f82 (unsigned int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) + (x >> y);\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f87 (unsigned char x, int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f88 (unsigned char x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f89 (unsigned int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f90 (unsigned int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) + (x >> y);\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) + (x >> y);\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f95 (unsigned char x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) + (x >> y);\n+}\n+\n+unsigned char\n+f96 (unsigned char x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) + (x >> y);\n+}"}, {"sha": "2f433b33272c500d32916e8dfb9556e199628a58", "filename": "gcc/testsuite/c-c++-common/rotate-4.c", "status": "modified", "additions": 195, "deletions": 1, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -1,7 +1,9 @@\n /* Check rotate pattern detection.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n-/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* Rotates should be recognized only in functions with | instead of + or ^,\n+   or in functions that have constant shift counts (unused attribute on y).  */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 48 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n unsigned int\n@@ -387,3 +389,195 @@ f64 (unsigned char x, long int y)\n {\n   return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n }\n+\n+unsigned int\n+f65 (unsigned int x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, long int y)\n+{\n+  return (x << y) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f82 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> y);\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f87 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f88 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f89 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f90 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> y);\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> y);\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f95 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> y);\n+}\n+\n+unsigned char\n+f96 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> y);\n+}"}, {"sha": "35b14b86c3afd0c6ef19d328c972fa5b1c9db449", "filename": "gcc/testsuite/c-c++-common/rotate-5.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+\n+#if __CHAR_BIT__ * __SIZEOF_LONG_LONG__ == 64\n+__attribute__((noinline, noclone))\n+unsigned long long\n+f1 (unsigned long long x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & 63));\n+}\n+\n+#if __CHAR_BIT__ * __SIZEOF_INT128__ == 128\n+__attribute__((noinline, noclone))\n+unsigned __int128\n+f2 (unsigned __int128 x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & 128));\n+}\n+#endif\n+#endif\n+\n+int\n+main ()\n+{\n+#if __CHAR_BIT__ * __SIZEOF_LONG_LONG__ == 64\n+  if (f1 (0x123456789abcdef0ULL, 0) != 0x123456789abcdef0ULL)\n+    abort ();\n+#if __CHAR_BIT__ * __SIZEOF_INT128__ == 128\n+  if (f2 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 0)\n+      != ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+          | 0x0fedcba987654321ULL))\n+    abort ();\n+#endif\n+#endif\n+  return 0;\n+}"}, {"sha": "6043d318d71a1351ad7be1e8c3bcb3ed06f29d8d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6fa899e7000352aa8573a23b1e92c225337ea1/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ae6fa899e7000352aa8573a23b1e92c225337ea1", "patch": "@@ -2135,10 +2135,10 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n    (X << (int) Y) OP (X >> (int) (B - Y))\n    ((T) ((T2) X << Y)) OP ((T) ((T2) X >> (B - Y)))\n    ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) (B - Y)))\n-   (X << Y) OP (X >> ((-Y) & (B - 1)))\n-   (X << (int) Y) OP (X >> (int) ((-Y) & (B - 1)))\n-   ((T) ((T2) X << Y)) OP ((T) ((T2) X >> ((-Y) & (B - 1))))\n-   ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n+   (X << Y) | (X >> ((-Y) & (B - 1)))\n+   (X << (int) Y) | (X >> (int) ((-Y) & (B - 1)))\n+   ((T) ((T2) X << Y)) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n+   ((T) ((T2) X << (int) Y)) | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n \n    and transform these into:\n    X r<< CNT1\n@@ -2293,7 +2293,8 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t\t && host_integerp (cdef_arg2[i], 0)\n \t\t && tree_low_cst (cdef_arg2[i], 0)\n \t\t    == TYPE_PRECISION (rtype) - 1\n-\t\t && TREE_CODE (cdef_arg1[i]) == SSA_NAME)\n+\t\t && TREE_CODE (cdef_arg1[i]) == SSA_NAME\n+\t\t && gimple_assign_rhs_code (stmt) == BIT_IOR_EXPR)\n \t  {\n \t    tree tem;\n \t    enum tree_code code;"}]}