{"sha": "9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "node_id": "C_kwDOANBUbNoAKDlhMWI0ZjFkM2RjMjliZTg2NzNmNmY0ZDk2YWFmNDkwMjE2MTRiODI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-25T10:03:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-25T10:03:24Z"}, "message": "Daily bump.", "tree": {"sha": "05621c18606dd341bf3d97665f7f3e1aa4d04d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05621c18606dd341bf3d97665f7f3e1aa4d04d44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/comments", "author": null, "committer": null, "parents": [{"sha": "a5878983d53db7513edb0e6bd99250dbb0c7d147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5878983d53db7513edb0e6bd99250dbb0c7d147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5878983d53db7513edb0e6bd99250dbb0c7d147"}], "stats": {"total": 454, "additions": 453, "deletions": 1}, "files": [{"sha": "b31579d4909d221f19167820fb8ca2b289f5e125", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,8 @@\n+2022-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Temporarily disable\n+\tcheck_line.start.\n+\n 2022-11-21  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "5d7a95a01abf2f6ca1d640813465db2a17b04931", "filename": "gcc/ChangeLog", "status": "modified", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,248 @@\n+2022-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* range-op.cc (operator_bitwise_xor::op1_range): Fix thinko.\n+\n+2022-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107865\n+\t* tree-cfg.cc (move_sese_region_to_fn): Free the number of\n+\titerations of moved loops.\n+\n+2022-11-25  Kewen.Lin  <linkw@gcc.gnu.org>\n+\n+\tPR target/99889\n+\t* config/rs6000/rs6000.cc (rs6000_print_patchable_function_entry):\n+\tAdjust to call function default_print_patchable_function_entry.\n+\t* targhooks.cc (default_print_patchable_function_entry_1): Remove and\n+\tmove the flags preparation ...\n+\t(default_print_patchable_function_entry): ... here, adjust to use\n+\tcurrent_function_funcdef_no for label no.\n+\t* targhooks.h (default_print_patchable_function_entry_1): Remove.\n+\t* varasm.cc (default_elf_asm_named_section): Adjust code for\n+\t__patchable_function_entries section support with LPFE label.\n+\n+2022-11-24  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\tPR tree-optimization/107413\n+\t* config/aarch64/aarch64.cc (struct tune_params): Add\n+\tfma_reassoc_width to all CPU tuning structures.\n+\t(aarch64_reassociation_width): Use fma_reassoc_width.\n+\t* config/aarch64/aarch64-protos.h (struct tune_params): Add\n+\tfma_reassoc_width.\n+\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/107317\n+\t* asan.cc: Include diagnostic-core.h.\n+\t(asan_emit_stack_protection): Return NULL early if seen_error ().\n+\n+2022-11-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.cc (simplify_using_ranges::compare_names): Remove.\n+\t(vrp_evaluate_conditional_warnv_with_ops): Remove call to\n+\tcompare_names.\n+\t(simplify_using_ranges::vrp_visit_cond_stmt): Remove use_equiv_p\n+\targument to vrp_evaluate_conditional_warnv_with_ops.\n+\t* vr-values.h (class simplify_using_ranges): Remove\n+\tcompare_names.\n+\tRemove use_equiv_p to vrp_evaluate_conditional_warnv_with_ops.\n+\n+2022-11-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.cc (overflow_comparison_p_1): Remove follow_assert_exprs.\n+\t(overflow_comparison_p): Remove use_equiv_p.\n+\t* tree-vrp.h (overflow_comparison_p): Same.\n+\t* vr-values.cc (vrp_evaluate_conditional_warnv_with_ops): Remove\n+\tuse_equiv_p argument to overflow_comparison_p.\n+\n+2022-11-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/gimple.texi: Remove ASSERT_EXPR references.\n+\t* fold-const.cc (tree_expr_nonzero_warnv_p): Same.\n+\t(fold_binary_loc): Same.\n+\t(tree_expr_nonnegative_warnv_p): Same.\n+\t* gimple-array-bounds.cc (get_base_decl): Same.\n+\t* gimple-pretty-print.cc (dump_unary_rhs): Same.\n+\t* gimple.cc (get_gimple_rhs_num_ops): Same.\n+\t* pointer-query.cc (handle_ssa_name): Same.\n+\t* tree-cfg.cc (verify_gimple_assign_single): Same.\n+\t* tree-pretty-print.cc (dump_generic_node): Same.\n+\t* tree-scalar-evolution.cc (scev_dfs::follow_ssa_edge_expr):Same.\n+\t(interpret_rhs_expr): Same.\n+\t* tree-ssa-operands.cc (operands_scanner::get_expr_operands): Same.\n+\t* tree-ssa-propagate.cc\n+\t(substitute_and_fold_dom_walker::before_dom_children): Same.\n+\t* tree-ssa-threadedge.cc: Same.\n+\t* tree-vrp.cc (overflow_comparison_p): Same.\n+\t* tree.def (ASSERT_EXPR): Add note.\n+\t* tree.h (ASSERT_EXPR_VAR): Remove.\n+\t(ASSERT_EXPR_COND): Remove.\n+\t* vr-values.cc (simplify_using_ranges::vrp_visit_cond_stmt):\n+\tRemove comment.\n+\n+2022-11-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in: Remove value-range-equiv.o\n+\t* gimple-array-bounds.cc\n+\t(array_bounds_checker::array_bounds_checker): Remove comment.\n+\t* tree-vrp.cc (supported_types_p): Remove use of value_range_equiv.\n+\t* value-query.cc (class equiv_allocator): Same.\n+\t(range_query::allocate_value_range_equiv): Remove.\n+\t(range_query::free_value_range_equiv): Remove.\n+\t(range_query::get_value_range): Remove.\n+\t* value-query.h (class range_query): Remove get_value_range.\n+\tRemove allocate_value_range_equiv.\n+\tRemove free_value_range_equiv.\n+\t* vr-values.cc (compare_ranges): Replace value_range_equiv with\n+\tvalue_range.\n+\t(simplify_using_ranges::get_vr_for_comparison): Same.\n+\t(simplify_using_ranges::compare_names): Same.\n+\t* vr-values.h: Remove value_range_equiv references.\n+\t* value-range-equiv.cc: Removed.\n+\t* value-range-equiv.h: Removed.\n+\n+2022-11-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/invoke.texi: Remove docs for max-vrp-switch-assertions,\n+\tvrp1-mode, and vrp2-mode.\n+\t* params.opt: Same.\n+\t* range-op.cc (masked_increment): Move from tree-vrp.cc.\n+\t* tree-vrp.cc (class live_names): Remove.\n+\t(live_names::init_bitmap_if_needed): Remove.\n+\t(live_names::block_has_live_names_p): Remove.\n+\t(live_names::clear_block): Remove.\n+\t(live_names::merge): Remove.\n+\t(live_names::set): Remove.\n+\t(live_names::clear): Remove.\n+\t(live_names::live_names): Remove.\n+\t(live_names::~live_names): Remove.\n+\t(live_names::live_on_block_p): Remove.\n+\t(live_names::live_on_edge_p): Remove.\n+\t(get_single_symbol): Make static.\n+\t(build_symbolic_expr): Remove.\n+\t(adjust_symbolic_bound): Remove.\n+\t(combine_bound): Remove.\n+\t(set_value_range_with_overflow): Remove.\n+\t(extract_range_from_pointer_plus_expr): Remove.\n+\t(extract_range_from_plus_minus_expr): Remove.\n+\t(drop_undefines_to_varying): Remove.\n+\t(range_fold_binary_symbolics_p): Remove.\n+\t(range_fold_unary_symbolics_p): Remove.\n+\t(range_fold_binary_expr): Remove.\n+\t(infer_value_range): Remove.\n+\t(dump_assert_info): Remove.\n+\t(dump_asserts_info): Remove.\n+\t(add_assert_info): Remove.\n+\t(extract_code_and_val_from_cond_with_ops): Remove.\n+\t(masked_increment): Move to range-op.cc.\n+\t(register_edge_assert_for_2): Remove.\n+\t(find_case_label_index): Remove.\n+\t(find_case_label_range): Remove.\n+\t(register_edge_assert_for_1): Remove.\n+\t(is_masked_range_test): Remove.\n+\t(register_edge_assert_for): Remove.\n+\t(stmt_interesting_for_vrp): Remove.\n+\t(struct case_info): Remove.\n+\t(struct assert_locus): Remove.\n+\t(class vrp_asserts): Remove.\n+\t(vrp_asserts::build_assert_expr_for): Remove.\n+\t(vrp_asserts::dump): Remove.\n+\t(vrp_asserts::register_new_assert_for): Remove.\n+\t(vrp_asserts::finish_register_edge_assert_for): Remove.\n+\t(vrp_asserts::find_conditional_asserts): Remove.\n+\t(vrp_asserts::compare_case_labels): Remove.\n+\t(vrp_asserts::find_switch_asserts): Remove.\n+\t(vrp_asserts::find_assert_locations_in_bb): Remove.\n+\t(vrp_asserts::find_assert_locations): Remove.\n+\t(vrp_asserts::process_assert_insertions_for): Remove.\n+\t(vrp_asserts::compare_assert_loc): Remove.\n+\t(vrp_asserts::process_assert_insertions): Remove.\n+\t(vrp_asserts::insert_range_assertions): Remove.\n+\t(vrp_asserts::all_imm_uses_in_stmt_or_feed_cond): Remove.\n+\t(vrp_asserts::remove_range_assertions): Remove.\n+\t(class vrp_prop): Remove.\n+\t(vrp_prop::initialize): Remove.\n+\t(enum ssa_prop_result): Remove.\n+\t(vrp_prop::visit_stmt): Remove.\n+\t(vrp_prop::visit_phi): Remove.\n+\t(vrp_prop::finalize): Remove.\n+\t(class vrp_folder): Remove.\n+\t(vrp_folder::fold_predicate_in): Remove.\n+\t(vrp_folder::fold_stmt): Remove.\n+\t(vrp_folder::simplify_casted_conds): Remove.\n+\t(execute_vrp): Remove.\n+\t* tree-vrp.h (struct assert_info): Remove.\n+\t(register_edge_assert_for): Remove.\n+\t(stmt_interesting_for_vrp): Remove.\n+\t(infer_value_range): Remove.\n+\t(get_single_symbol): Remove.\n+\t(masked_increment): Remove.\n+\t(execute_ranger_vrp): Remove.\n+\t* vr-values.cc (set_value_range_to_nonnegative): Remove.\n+\t(set_value_range_to_truthvalue): Remove.\n+\t(vr_values::get_lattice_entry): Remove.\n+\t(vr_values::get_value_range): Remove.\n+\t(vr_values::range_of_expr): Remove.\n+\t(vr_values::value_of_expr): Remove.\n+\t(vr_values::value_on_edge): Remove.\n+\t(vr_values::value_of_stmt): Remove.\n+\t(vr_values::set_def_to_varying): Remove.\n+\t(vr_values::set_defs_to_varying): Remove.\n+\t(vr_values::update_value_range): Remove.\n+\t(symbolic_range_based_on_p): Remove.\n+\t(gimple_assign_nonzero_p): Remove.\n+\t(gimple_stmt_nonzero_p): Remove.\n+\t(vr_values::vrp_stmt_computes_nonzero): Remove.\n+\t(vr_values::op_with_constant_singleton_value_range): Remove.\n+\t(vr_values::extract_range_for_var_from_comparison_expr): Remove.\n+\t(vr_values::extract_range_from_assert): Remove.\n+\t(vr_values::extract_range_from_ssa_name): Remove.\n+\t(vr_values::extract_range_from_binary_expr): Remove.\n+\t(vr_values::extract_range_from_unary_expr): Remove.\n+\t(vr_values::extract_range_from_cond_expr): Remove.\n+\t(vr_values::extract_range_from_comparison): Remove.\n+\t(vr_values::extract_range_from_ubsan_builtin): Remove.\n+\t(vr_values::extract_range_basic): Remove.\n+\t(vr_values::extract_range_from_assignment): Remove.\n+\t(vr_values::adjust_range_with_scev): Remove.\n+\t(vr_values::dump): Remove.\n+\t(vr_values::vr_values): Remove.\n+\t(vr_values::~vr_values): Remove.\n+\t(vrp_valueize): Remove.\n+\t(vrp_valueize_1): Remove.\n+\t(get_output_for_vrp): Remove.\n+\t(vr_values::vrp_visit_assignment_or_call): Remove.\n+\t(simplify_using_ranges::vrp_evaluate_conditional): Remove.\n+\t(vr_values::vrp_visit_switch_stmt): Remove.\n+\t(vr_values::extract_range_from_stmt): Remove.\n+\t(vr_values::extract_range_from_phi_node): Remove.\n+\t(simplify_using_ranges::fold_cond): Add FIXME note.\n+\t(vr_values::set_vr_value): Remove.\n+\t(vr_values::swap_vr_value): Remove.\n+\t* vr-values.h (class vr_values): Remove.\n+\t(get_output_for_vrp): Remove.\n+\n+2022-11-24  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/107692\n+\t* common/config/i386/i386-common.cc (ix86_optimization_table):\n+\tEnable loop unroll O2, disable -fweb and -frename-registers\n+\tby default.\n+\t* config/i386/i386-options.cc\n+\t(ix86_override_options_after_change):\n+\tDisable small loop unroll when funroll-loops enabled, reset\n+\tcunroll_grow_size when it is not explicitly enabled.\n+\t(ix86_option_override_internal): Call\n+\tix86_override_options_after_change instead of calling\n+\tix86_recompute_optlev_based_flags and ix86_default_align\n+\tseparately.\n+\t* config/i386/i386.cc (ix86_loop_unroll_adjust): Adjust unroll\n+\tfactor if -munroll-only-small-loops enabled.\n+\t* loop-init.cc (pass_rtl_unroll_loops::gate): Do not enable\n+\tloop unrolling for -O2-speed.\n+\t(pass_rtl_unroll_loops::execute): Rmove\n+\ttargetm.loop_unroll_adjust check.\n+\n 2022-11-23  Ramana Radhakrishnan  <ramana.gcc@gmail.com>\n \n \t* config/arm/types.md: Update comment."}, {"sha": "9fb04058de4921aa026ecf97397c16d2833ffbbf", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1 +1 @@\n-20221124\n+20221125"}, {"sha": "34a26957249472dd0449343c41ec9c77a55b6409", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,18 @@\n+2022-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Assignment_Statement>: Add\n+\tassertion that memset is not supposed to be used when the target has\n+\ta storage model with Copy_To routine.\n+\n+2022-11-24  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb\n+\t(Find_Direct_Name): Remove bypass to reanalyze incorrectly\n+\tanalyzed discriminals.\n+\t(Set_Entity_Or_Discriminal): Avoid resetting the entity field of a\n+\tdiscriminant reference to be the internally generated renaming\n+\twhen we are in strict preanalysis mode.\n+\n 2022-11-22  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_prag.adb (Analyze_Depends_Global): Accept aspects on"}, {"sha": "aa7ce88cdf698f8f72c5faa4c828b23541fc9bf4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,91 @@\n+2022-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* varargs.cc: Fix Clang warnings.\n+\n+2022-11-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106473\n+\t* call-summary.cc\n+\t(call_summary_replay::convert_region_from_summary_1): Update for\n+\tchange to creation of heap-allocated regions.\n+\t* program-state.cc (test_program_state_1): Likewise.\n+\t(test_program_state_merging): Likewise.\n+\t* region-model-impl-calls.cc (kf_calloc::impl_call_pre): Likewise.\n+\t(kf_malloc::impl_call_pre): Likewise.\n+\t(kf_operator_new::impl_call_pre): Likewise.\n+\t(kf_realloc::impl_call_postsuccess_with_move::update_model): Likewise.\n+\t* region-model-manager.cc\n+\t(region_model_manager::create_region_for_heap_alloc): Convert\n+\tto...\n+\t(region_model_manager::get_or_create_region_for_heap_alloc):\n+\t...this, reusing an existing region if it's unreferenced in the\n+\tclient state.\n+\t* region-model-manager.h (region_model_manager::get_num_regions): New.\n+\t (region_model_manager::create_region_for_heap_alloc): Convert to...\n+\t (region_model_manager::get_or_create_region_for_heap_alloc): ...this.\n+\t* region-model.cc (region_to_value_map::can_merge_with_p): Reject\n+\tmerger when the values are different.\n+\t(region_model::create_region_for_heap_alloc): Convert to...\n+\t(region_model::get_or_create_region_for_heap_alloc): ...this.\n+\t(region_model::get_referenced_base_regions): New.\n+\t(selftest::test_state_merging):  Update for change to creation of\n+\theap-allocated regions.\n+\t(selftest::test_malloc_constraints): Likewise.\n+\t(selftest::test_malloc): Likewise.\n+\t* region-model.h: Include \"sbitmap.h\".\n+\t(region_model::create_region_for_heap_alloc): Convert to...\n+\t(region_model::get_or_create_region_for_heap_alloc): ...this.\n+\t(region_model::get_referenced_base_regions): New decl.\n+\t* store.cc (store::canonicalize): Don't purge a heap-allocated region\n+\tthat's been marked as escaping.\n+\n+2022-11-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (checker_path::inject_any_inlined_call_events):\n+\tDon't dump the address of the block when -fdump-noaddr.\n+\n+2022-11-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.h (region_model::on_socket): Delete decl.\n+\t(region_model::on_bind): Likewise.\n+\t(region_model::on_listen): Likewise.\n+\t(region_model::on_accept): Likewise.\n+\t(region_model::on_connect): Likewise.\n+\t* sm-fd.cc (kf_socket::outcome_of_socket::update_model): Move body\n+\tof region_model::on_socket into here, ...\n+\t(region_model::on_socket): ...eliminating this function.\n+\t(kf_bind::outcome_of_bind::update_model): Likewise for on_bind...\n+\t(region_model::on_bind): ...eliminating this function.\n+\t(kf_listen::outcome_of_listen::update_model): Likewise fo\n+\ton_listen...\n+\t(region_model::on_listen): ...eliminating this function.\n+\t(kf_accept::outcome_of_accept::update_model): Likewise fo\n+\ton_accept...\n+\t(region_model::on_accept): ...eliminating this function.\n+\t(kf_connect::outcome_of_connect::update_model): Likewise fo\n+\ton_connect...\n+\t(region_model::on_connect): ...eliminating this function.\n+\n+2022-11-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (register_known_fd_functions): New decl.\n+\t* region-model-impl-calls.cc (class kf_accept): Move to sm-fd.cc.\n+\t(class kf_bind): Likewise.\n+\t(class kf_connect): Likewise.\n+\t(class kf_listen): Likewise.\n+\t(class kf_pipe): Likewise.\n+\t(class kf_socket): Likewise.\n+\t(register_known_functions): Remove registration of the above\n+\tfunctions, instead calling register_known_fd_functions.\n+\t* sm-fd.cc: Include \"analyzer/call-info.h\".\n+\t(class kf_socket): Move here from region-model-impl-calls.cc.\n+\t(class kf_bind): Likewise.\n+\t(class kf_listen): Likewise.\n+\t(class kf_accept): Likewise.\n+\t(class kf_connect): Likewise.\n+\t(class kf_pipe): Likewise.\n+\t(register_known_fd_functions): New.\n+\n 2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107788"}, {"sha": "e53acbd0518de1c1998482b74eba6bc312227f01", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,8 @@\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (fcontract-role=, fcontract-semantic=): Terminate descriptions\n+\twith a dot.\n+\n 2022-11-23  Andrew Pinski  <apinski@marvell.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "956e47ccb437b34298ce2bbc1d985bd69ad032db", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,9 @@\n+2022-11-24  Florian Weimer  <fweimer@redhat.com>\n+\n+\tPR c/107805\n+\t* c-decl.cc (declspecs_add_type): Propagate error_mark_bode\n+\tfrom type to specs.\n+\n 2022-11-17  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* c-decl.cc (start_function): Set the result decl source"}, {"sha": "a0f0b9e3e5fcba6c00c70cad6ac511f6f8eba9e9", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,9 @@\n+2022-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/107829\n+\t* lto.cc (materialize_cgraph): Call timevar_push before\n+\t  materialization starts.\n+\n 2022-10-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* lang.opt: Better separate 'LTO' vs. 'LTODump'."}, {"sha": "a43b6ff5f55c6b6af5dad34474912b317279c045", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,58 @@\n+2022-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt100.adb: New test.\n+\t* gnat.dg/opt100_pkg.adb, gnat.dg/opt100_pkg.ads: New helper.\n+\n+2022-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107865\n+\t* gfortran.dg/graphite/pr107865.f90: New testcase.\n+\n+2022-11-25  Kewen.Lin  <linkw@gcc.gnu.org>\n+\n+\tPR target/99889\n+\t* g++.dg/pr93195a.C: Remove the skip on powerpc*-*-* 64-bit.\n+\t* gcc.target/aarch64/pr92424-2.c: Adjust LPFE1 with LPFE0.\n+\t* gcc.target/aarch64/pr92424-3.c: Likewise.\n+\t* gcc.target/i386/pr93492-2.c: Likewise.\n+\t* gcc.target/i386/pr93492-3.c: Likewise.\n+\t* gcc.target/i386/pr93492-4.c: Likewise.\n+\t* gcc.target/i386/pr93492-5.c: Likewise.\n+\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/107317\n+\t* gcc.dg/asan/pr107317.c: New test.\n+\n+2022-11-24  Florian Weimer  <fweimer@redhat.com>\n+\n+\tPR c/107805\n+\t* gcc.dg/pr107805-1.c: New test.\n+\t* gcc.dg/pr107805-2.c: Likewise.\n+\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/107127\n+\t* gcc.dg/pr107127.c (foo): Add missing closing }.\n+\n+2022-11-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106473\n+\t* gcc.dg/analyzer/aliasing-pr106473.c: New test.\n+\t* gcc.dg/analyzer/allocation-size-2.c: Add\n+\t-fanalyzer-fine-grained\".\n+\t* gcc.dg/analyzer/allocation-size-3.c: Likewise.\n+\t* gcc.dg/analyzer/explode-1.c: Mark leak with XFAIL.\n+\t* gcc.dg/analyzer/explode-3.c: New test.\n+\t* gcc.dg/analyzer/malloc-reuse.c: New test.\n+\n+2022-11-24  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/107692\n+\t* gcc.dg/guality/loop-1.c: Remove additional option for ia32.\n+\t* gcc.target/i386/pr86270.c: Add -fno-unroll-loops.\n+\t* gcc.target/i386/pr93002.c: Likewise.\n+\n 2022-11-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/analyzer/call-summaries-2.c (uses_alloca): Use"}, {"sha": "7c02e4442e5e1166023c374cbc733e25f71066a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1b4f1d3dc29be8673f6f4d96aaf49021614b82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a1b4f1d3dc29be8673f6f4d96aaf49021614b82", "patch": "@@ -1,3 +1,30 @@\n+2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\t* doc/xml/manual/intro.xml: Document LWG 3656 change.\n+\t* include/std/bit (__bit_width, bit_width): Return int.\n+\t* testsuite/26_numerics/bit/bit.pow.two/lwg3656.cc: New test.\n+\n+2022-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106201\n+\t* testsuite/27_io/filesystem/iterators/106201.cc: Improve test.\n+\t* testsuite/experimental/filesystem/iterators/106201.cc: New test.\n+\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/107468\n+\t* src/c++17/fast_float/MERGE: Adjust for merge from upstream.\n+\t* src/c++17/fast_float/fast_float.h: Merge from fast_float\n+\t2ef9abbcf6a11958b6fa685a89d0150022e82e78 commit.\n+\n+2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/107815\n+\t* testsuite/20_util/to_chars/float128_c++23.cc (test): Disable\n+\t__FLT128_MAX__ test on Solaris.  Fix up commented out debugging\n+\tprintouts.\n+\n 2022-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/107811"}]}