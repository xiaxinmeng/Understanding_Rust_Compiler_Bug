{"sha": "e292f64de0810c8efff20aef58bbb57c17541225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5MmY2NGRlMDgxMGM4ZWZmZjIwYWVmNThiYmI1N2MxNzU0MTIyNQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-06T23:10:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-06T23:10:14Z"}, "message": "Fix C++ side of PR c/70436 (missing -Wparentheses warnings)\n\ngcc/cp/ChangeLog:\n\n\tPR c/70436\n\t* parser.c (cp_parser_iteration_statement): New parameter IF_P.\n\tPass it through to cp_parser_already_scoped_statement.\n\t(cp_parser_already_scoped_statement): New parameter IF_P.  Pass\n\tit through to cp_parser_statement.\n\t(cp_parser_statement): Pass IF_P through to\n\tcp_parser_iteration_statement.\n\t(cp_parser_pragma): Adjust call to\n\tcp_parser_iteration_statement.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/70436\n\t* g++.dg/warn/Wparentheses-29.C: New test.\n\nFrom-SVN: r234802", "tree": {"sha": "746779eeffa9deaffac5cdb423008dd0494556d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746779eeffa9deaffac5cdb423008dd0494556d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e292f64de0810c8efff20aef58bbb57c17541225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292f64de0810c8efff20aef58bbb57c17541225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e292f64de0810c8efff20aef58bbb57c17541225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292f64de0810c8efff20aef58bbb57c17541225/comments", "author": null, "committer": null, "parents": [{"sha": "6b37bdaff18303bdc1042d9b99f11f83ac836c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b37bdaff18303bdc1042d9b99f11f83ac836c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b37bdaff18303bdc1042d9b99f11f83ac836c13"}], "stats": {"total": 172, "additions": 162, "deletions": 10}, "files": [{"sha": "4ce1a5ab33c56cff172a1955c88091c94a972a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e292f64de0810c8efff20aef58bbb57c17541225", "patch": "@@ -1,3 +1,15 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* parser.c (cp_parser_iteration_statement): New parameter IF_P.\n+\tPass it through to cp_parser_already_scoped_statement.\n+\t(cp_parser_already_scoped_statement): New parameter IF_P.  Pass\n+\tit through to cp_parser_statement.\n+\t(cp_parser_statement): Pass IF_P through to\n+\tcp_parser_iteration_statement.\n+\t(cp_parser_pragma): Adjust call to\n+\tcp_parser_iteration_statement.\n+\n 2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c/70436"}, {"sha": "28e01afc57232dc6d4fddbdaaf60c697c3301aee", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e292f64de0810c8efff20aef58bbb57c17541225", "patch": "@@ -2104,7 +2104,7 @@ static tree cp_parser_selection_statement\n static tree cp_parser_condition\n   (cp_parser *);\n static tree cp_parser_iteration_statement\n-  (cp_parser *, bool);\n+  (cp_parser *, bool *, bool);\n static bool cp_parser_for_init_statement\n   (cp_parser *, tree *decl);\n static tree cp_parser_for\n@@ -2127,7 +2127,7 @@ static void cp_parser_declaration_statement\n static tree cp_parser_implicitly_scoped_statement\n   (cp_parser *, bool *, const token_indent_info &, vec<tree> * = NULL);\n static void cp_parser_already_scoped_statement\n-  (cp_parser *, const token_indent_info &);\n+  (cp_parser *, bool *, const token_indent_info &);\n \n /* Declarations [gram.dcl.dcl] */\n \n@@ -10392,7 +10392,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \tcase RID_WHILE:\n \tcase RID_DO:\n \tcase RID_FOR:\n-\t  statement = cp_parser_iteration_statement (parser, false);\n+\t  statement = cp_parser_iteration_statement (parser, if_p, false);\n \t  break;\n \n \tcase RID_CILK_FOR:\n@@ -10947,7 +10947,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    else\n \t      {\n \t\t/* This if statement does not have an else clause.  If\n-\t\t   NESTED_IF is true, then the then-clause is an if\n+\t\t   NESTED_IF is true, then the then-clause has an if\n \t\t   statement which does have an else clause.  We warn\n \t\t   about the potential ambiguity.  */\n \t\tif (nested_if)\n@@ -11544,7 +11544,7 @@ cp_parser_range_for_member_function (tree range, tree identifier)\n    Returns the new WHILE_STMT, DO_STMT, FOR_STMT or RANGE_FOR_STMT.  */\n \n static tree\n-cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n+cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep)\n {\n   cp_token *token;\n   enum rid keyword;\n@@ -11582,7 +11582,7 @@ cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t/* Parse the dependent statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n-\tcp_parser_already_scoped_statement (parser, guard_tinfo);\n+\tcp_parser_already_scoped_statement (parser, if_p, guard_tinfo);\n \tparser->in_statement = in_statement;\n \t/* We're done with the while-statement.  */\n \tfinish_while_stmt (statement);\n@@ -11627,7 +11627,7 @@ cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n \n \t/* Parse the body of the for-statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n-\tcp_parser_already_scoped_statement (parser, guard_tinfo);\n+\tcp_parser_already_scoped_statement (parser, if_p, guard_tinfo);\n \tparser->in_statement = in_statement;\n \n \t/* We're done with the for-statement.  */\n@@ -11937,7 +11937,7 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n    scope.  */\n \n static void\n-cp_parser_already_scoped_statement (cp_parser* parser,\n+cp_parser_already_scoped_statement (cp_parser* parser, bool *if_p,\n \t\t\t\t    const token_indent_info &guard_tinfo)\n {\n   /* If the token is a `{', then we must take special action.  */\n@@ -11946,7 +11946,7 @@ cp_parser_already_scoped_statement (cp_parser* parser,\n       token_indent_info body_tinfo\n \t= get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n \n-      cp_parser_statement (parser, NULL_TREE, false, NULL);\n+      cp_parser_statement (parser, NULL_TREE, false, if_p);\n       token_indent_info next_tinfo\n \t= get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n       warn_for_misleading_indentation (guard_tinfo, body_tinfo, next_tinfo);\n@@ -37310,7 +37310,7 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n \t    cp_parser_error (parser, \"for, while or do statement expected\");\n \t    return false;\n \t  }\n-\tcp_parser_iteration_statement (parser, true);\n+\tcp_parser_iteration_statement (parser, NULL, true);\n \treturn true;\n       }\n "}, {"sha": "d3c74edc9704301c0a7ceb0c1c5a34b025c2aecc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e292f64de0810c8efff20aef58bbb57c17541225", "patch": "@@ -1,3 +1,8 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* g++.dg/warn/Wparentheses-29.C: New test.\n+\n 2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c/70436"}, {"sha": "7832415f1ed706a8ea1631eeba6270bb83ace7ce", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-29.C", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292f64de0810c8efff20aef58bbb57c17541225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-29.C?ref=e292f64de0810c8efff20aef58bbb57c17541225", "patch": "@@ -0,0 +1,135 @@\n+/* PR c/70436  */\n+/* { dg-options \"-Wparentheses\" }  */\n+\n+int a, b, c;\n+void bar (void);\n+void baz (void);\n+\n+void\n+foo (void)\n+{\n+  int i, j;\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      for (;;)\n+        if (b)\n+          bar ();\n+        else\n+          baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    while (1)\n+      while (1)\n+        if (b)\n+          bar ();\n+  else\n+    baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        if (b)\n+          bar ();\n+  else\n+    baz ();\n+\n+  if (a)\n+    for (i = 0; i < 10; i++)\n+      if (b) /* { dg-warning \"ambiguous\" }  */\n+        for (j = 0; j < 10; j++)\n+          if (c)\n+            bar ();\n+      else\n+        baz ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (i = 0; i < 10; i++)\n+      if (b)\n+        for (j = 0; j < 10; j++)\n+          if (c)\n+            bar ();\n+          else\n+            baz ();\n+  else\n+    bar ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        while (1)\n+          if (a)\n+            bar ();\n+          else\n+            baz ();\n+      else\n+        bar ();\n+\n+  if (a) /* { dg-warning \"ambiguous\" }  */\n+    for (;;)\n+      if (b)\n+        while (1)\n+          {\n+            if (a) { bar (); } else { baz (); }\n+          }\n+      else\n+        bar ();\n+\n+  if (a)\n+    for (;;)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+  else bar ();\n+\n+  if (a)\n+    while (1)\n+      if (b)\n+        bar ();\n+      else\n+        baz ();\n+  else bar ();\n+\n+  if (a)\n+    for (;;)\n+      {\n+        if (b)\n+          bar ();\n+        else\n+          baz ();\n+      }\n+\n+  if (a)\n+    {\n+      for (;;)\n+        if (b)\n+          bar ();\n+    }\n+  else baz ();\n+\n+  if (a)\n+    do\n+      if (b) bar (); else baz ();\n+    while (b);\n+\n+  if (a)\n+    do\n+      if (b) bar ();\n+    while (b);\n+  else baz ();\n+}"}]}