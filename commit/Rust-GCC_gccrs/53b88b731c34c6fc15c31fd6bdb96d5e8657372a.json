{"sha": "53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiODhiNzMxYzM0YzZmYzE1YzMxZmQ2YmRiOTZkNWU4NjU3MzcyYQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-12-29T16:42:51Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-12-29T16:42:51Z"}, "message": "Makefile.tpl (GCC_STRAP_TARGETS, [...]): Remove.\n\n2006-12-29  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.tpl (GCC_STRAP_TARGETS, all-prebootstrap): Remove.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r120270", "tree": {"sha": "b54b9f217b6e7eb4d579261b3f8c9b0ba686f430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54b9f217b6e7eb4d579261b3f8c9b0ba686f430"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fb233742c0ca9b911b13039efa5253f8955c30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb233742c0ca9b911b13039efa5253f8955c30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb233742c0ca9b911b13039efa5253f8955c30b"}], "stats": {"total": 159, "additions": 11, "deletions": 148}, "files": [{"sha": "f8b8e726ffaac4ef8250becbe0fc70cd86222464", "filename": "ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "patch": "@@ -1,3 +1,8 @@\n+2006-12-29  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.tpl (GCC_STRAP_TARGETS, all-prebootstrap): Remove.\n+\t* Makefile.in: Regenerate.\n+\n 2006-12-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in: Warn that MPFR 2.2.0 is buggy.\n@@ -18,6 +23,12 @@\n         * configure.in: add AC_SUBST for *_FOR_TARGET.\n         * configure: Regenerate.\n \n+2006-12-19  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.in: Simplify logic for rejecting languages that cannot\n+\tbe built.  Separate the case when a language is unsupported,\n+\tfrom the case when the user chooses not to build a language.\n+\n 2006-12-19  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.in: Remove \"$build\" case for powerpc-*-darwin* since"}, {"sha": "d51580adf51e3d7098a6a4efe3369dd0f3c4a293", "filename": "Makefile.in", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "patch": "@@ -41713,60 +41713,6 @@ maintainer-clean-target-libgomp:\n # ----------\n \n @if gcc-no-bootstrap\n-# GCC has some more recursive targets, which trigger the old\n-# (but still current, until the toplevel bootstrap project\n-# is finished) compiler bootstrapping rules.\n-\n-GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap\n-.PHONY: $(GCC_STRAP_TARGETS)\n-$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Bootstrapping the compiler\"; \\\n-\t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $@\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tcase \"$@\" in \\\n-\t  *bootstrap4-lean ) \\\n-\t    msg=\"Comparing stage3 and stage4 of the compiler\"; \\\n-\t    compare=compare3-lean ;; \\\n-\t  *bootstrap4 ) \\\n-\t    msg=\"Comparing stage3 and stage4 of the compiler\"; \\\n-\t    compare=compare3 ;; \\\n-\t  *-lean ) \\\n-\t    msg=\"Comparing stage2 and stage3 of the compiler\"; \\\n-\t    compare=compare-lean ;; \\\n-\t  * ) \\\n-\t    msg=\"Comparing stage2 and stage3 of the compiler\"; \\\n-\t    compare=compare ;; \\\n-\tesac; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"$$msg\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $$compare\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n-\n-profiledbootstrap: all-prebootstrap configure-gcc\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n-\techo \"Bootstrapping training compiler\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stageprofile_build\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Building feedback based compiler\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stagefeedback_build\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n-\n .PHONY: cross\n cross: all-build all-gas all-ld\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -43337,7 +43283,6 @@ all-stage3-gcc: maybe-all-build-texinfo\n all-stage4-gcc: maybe-all-build-texinfo\n all-stageprofile-gcc: maybe-all-build-texinfo\n all-stagefeedback-gcc: maybe-all-build-texinfo\n-all-prebootstrap: maybe-all-build-texinfo\n all-gcc: maybe-all-build-bison\n \n all-stage1-gcc: maybe-all-build-bison\n@@ -43346,7 +43291,6 @@ all-stage3-gcc: maybe-all-build-bison\n all-stage4-gcc: maybe-all-build-bison\n all-stageprofile-gcc: maybe-all-build-bison\n all-stagefeedback-gcc: maybe-all-build-bison\n-all-prebootstrap: maybe-all-build-bison\n all-gcc: maybe-all-build-byacc\n \n all-stage1-gcc: maybe-all-build-byacc\n@@ -43355,7 +43299,6 @@ all-stage3-gcc: maybe-all-build-byacc\n all-stage4-gcc: maybe-all-build-byacc\n all-stageprofile-gcc: maybe-all-build-byacc\n all-stagefeedback-gcc: maybe-all-build-byacc\n-all-prebootstrap: maybe-all-build-byacc\n all-gcc: maybe-all-build-flex\n \n all-stage1-gcc: maybe-all-build-flex\n@@ -43364,7 +43307,6 @@ all-stage3-gcc: maybe-all-build-flex\n all-stage4-gcc: maybe-all-build-flex\n all-stageprofile-gcc: maybe-all-build-flex\n all-stagefeedback-gcc: maybe-all-build-flex\n-all-prebootstrap: maybe-all-build-flex\n all-gcc: maybe-all-build-libiberty\n \n all-stage1-gcc: maybe-all-build-libiberty\n@@ -43373,7 +43315,6 @@ all-stage3-gcc: maybe-all-build-libiberty\n all-stage4-gcc: maybe-all-build-libiberty\n all-stageprofile-gcc: maybe-all-build-libiberty\n all-stagefeedback-gcc: maybe-all-build-libiberty\n-all-prebootstrap: maybe-all-build-libiberty\n all-gcc: maybe-all-build-fixincludes\n \n all-stage1-gcc: maybe-all-build-fixincludes\n@@ -43382,7 +43323,6 @@ all-stage3-gcc: maybe-all-build-fixincludes\n all-stage4-gcc: maybe-all-build-fixincludes\n all-stageprofile-gcc: maybe-all-build-fixincludes\n all-stagefeedback-gcc: maybe-all-build-fixincludes\n-all-prebootstrap: maybe-all-build-fixincludes\n all-gcc: maybe-all-zlib\n \n all-stage1-gcc: maybe-all-stage1-zlib\n@@ -43538,7 +43478,6 @@ all-stage3-binutils: maybe-all-build-flex\n all-stage4-binutils: maybe-all-build-flex\n all-stageprofile-binutils: maybe-all-build-flex\n all-stagefeedback-binutils: maybe-all-build-flex\n-all-prebootstrap: maybe-all-build-flex\n all-binutils: maybe-all-build-bison\n \n all-stage1-binutils: maybe-all-build-bison\n@@ -43547,7 +43486,6 @@ all-stage3-binutils: maybe-all-build-bison\n all-stage4-binutils: maybe-all-build-bison\n all-stageprofile-binutils: maybe-all-build-bison\n all-stagefeedback-binutils: maybe-all-build-bison\n-all-prebootstrap: maybe-all-build-bison\n all-binutils: maybe-all-build-byacc\n \n all-stage1-binutils: maybe-all-build-byacc\n@@ -43556,7 +43494,6 @@ all-stage3-binutils: maybe-all-build-byacc\n all-stage4-binutils: maybe-all-build-byacc\n all-stageprofile-binutils: maybe-all-build-byacc\n all-stagefeedback-binutils: maybe-all-build-byacc\n-all-prebootstrap: maybe-all-build-byacc\n all-binutils: maybe-all-intl\n \n all-stage1-binutils: maybe-all-stage1-intl\n@@ -43652,7 +43589,6 @@ all-stage3-ld: maybe-all-build-bison\n all-stage4-ld: maybe-all-build-bison\n all-stageprofile-ld: maybe-all-build-bison\n all-stagefeedback-ld: maybe-all-build-bison\n-all-prebootstrap: maybe-all-build-bison\n all-ld: maybe-all-build-byacc\n \n all-stage1-ld: maybe-all-build-byacc\n@@ -43661,7 +43597,6 @@ all-stage3-ld: maybe-all-build-byacc\n all-stage4-ld: maybe-all-build-byacc\n all-stageprofile-ld: maybe-all-build-byacc\n all-stagefeedback-ld: maybe-all-build-byacc\n-all-prebootstrap: maybe-all-build-byacc\n all-ld: maybe-all-build-flex\n \n all-stage1-ld: maybe-all-build-flex\n@@ -43670,7 +43605,6 @@ all-stage3-ld: maybe-all-build-flex\n all-stage4-ld: maybe-all-build-flex\n all-stageprofile-ld: maybe-all-build-flex\n all-stagefeedback-ld: maybe-all-build-flex\n-all-prebootstrap: maybe-all-build-flex\n all-ld: maybe-all-intl\n \n all-stage1-ld: maybe-all-stage1-intl\n@@ -43799,22 +43733,6 @@ all-target-winsup: maybe-all-target-libiberty\n all-target-winsup: maybe-all-target-libtermcap\n \n \n-# Non-toplevel bootstrap rules must depend on several packages, to be built\n-# before gcc.  Another wart that will go away, hopefully soon.\n-@if gcc-no-bootstrap\n-\n-all-prebootstrap: maybe-all-bfd\n-all-prebootstrap: maybe-all-opcodes\n-all-prebootstrap: maybe-all-binutils\n-all-prebootstrap: maybe-all-gas\n-all-prebootstrap: maybe-all-intl\n-all-prebootstrap: maybe-all-ld\n-all-prebootstrap: maybe-all-libcpp\n-all-prebootstrap: maybe-all-libdecnumber\n-all-prebootstrap: maybe-all-libiberty\n-all-prebootstrap: maybe-all-zlib\n-@endif gcc-no-bootstrap\n-\n CONFIGURE_GDB_TK = @CONFIGURE_GDB_TK@\n GDB_TK = @GDB_TK@\n INSTALL_GDB_TK = @INSTALL_GDB_TK@"}, {"sha": "6768b22f98aa6054f0fc82c3c422e95fe9a53da6", "filename": "Makefile.tpl", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b88b731c34c6fc15c31fd6bdb96d5e8657372a/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=53b88b731c34c6fc15c31fd6bdb96d5e8657372a", "patch": "@@ -1115,60 +1115,6 @@ ENDIF raw_cxx +]\n # ----------\n \n @if gcc-no-bootstrap\n-# GCC has some more recursive targets, which trigger the old\n-# (but still current, until the toplevel bootstrap project\n-# is finished) compiler bootstrapping rules.\n-\n-GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap\n-.PHONY: $(GCC_STRAP_TARGETS)\n-$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Bootstrapping the compiler\"; \\\n-\t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $@\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tcase \"$@\" in \\\n-\t  *bootstrap4-lean ) \\\n-\t    msg=\"Comparing stage3 and stage4 of the compiler\"; \\\n-\t    compare=compare3-lean ;; \\\n-\t  *bootstrap4 ) \\\n-\t    msg=\"Comparing stage3 and stage4 of the compiler\"; \\\n-\t    compare=compare3 ;; \\\n-\t  *-lean ) \\\n-\t    msg=\"Comparing stage2 and stage3 of the compiler\"; \\\n-\t    compare=compare-lean ;; \\\n-\t  * ) \\\n-\t    msg=\"Comparing stage2 and stage3 of the compiler\"; \\\n-\t    compare=compare ;; \\\n-\tesac; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"$$msg\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $$compare\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n-\n-profiledbootstrap: all-prebootstrap configure-gcc\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n-\techo \"Bootstrapping training compiler\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stageprofile_build\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Building feedback based compiler\"; \\\n-\tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stagefeedback_build\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n-\n .PHONY: cross\n cross: all-build all-gas all-ld\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1554,25 +1500,13 @@ configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss\n      +][+ FOR bootstrap_stage +]\n [+ (make-dep (dep-stage) \"\") +][+\n        ENDFOR bootstrap_stage +]\n-all-prebootstrap: [+ (dep-target \"\" \"on\" (exist? \"hard\")) +]\n [+ == \"bootstrap\"\n      +][+ FOR bootstrap_stage +]\n [+ (make-dep (dep-stage) (dep-stage)) +][+\n        ENDFOR bootstrap_stage +]\n [+ ESAC +][+\n ENDFOR dependencies +]\n \n-# Non-toplevel bootstrap rules must depend on several packages, to be built\n-# before gcc.  Another wart that will go away, hopefully soon.\n-@if gcc-no-bootstrap\n-[+ FOR host_modules +][+\n-   IF (and (not (= (get \"module\") \"gcc\"))\n-\t   (hash-ref boot-modules (get \"module\"))) +]\n-all-prebootstrap: maybe-all-[+module+][+\n-   ENDIF +][+\n-ENDFOR host_modules +]\n-@endif gcc-no-bootstrap\n-\n CONFIGURE_GDB_TK = @CONFIGURE_GDB_TK@\n GDB_TK = @GDB_TK@\n INSTALL_GDB_TK = @INSTALL_GDB_TK@"}]}