{"sha": "9ba5971590cfc51a55c277c61aad4ec64bd2507d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhNTk3MTU5MGNmYzUxYTU1YzI3N2M2MWFhZDRlYzY0YmQyNTA3ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-17T22:51:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-17T22:51:51Z"}, "message": "re PR c++/43075 (20_util/bind/ref2.cc FAILs)\n\n\tPR c++/43075\n\t* call.c (build_over_call): Don't create zero-sized assignments.\n\t* cp-gimplify.c (cp_genericize_r): Don't remove them here.\n\t* cp-objcp-common.c (cp_expr_size): Remove.\n\t* cp-tree.h: Remove prototype.\n\nFrom-SVN: r156842", "tree": {"sha": "2e7d21f1a571171af5e129b32829cd1f539a3818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7d21f1a571171af5e129b32829cd1f539a3818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ba5971590cfc51a55c277c61aad4ec64bd2507d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba5971590cfc51a55c277c61aad4ec64bd2507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba5971590cfc51a55c277c61aad4ec64bd2507d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba5971590cfc51a55c277c61aad4ec64bd2507d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77278f4acb960227639ab6ad6ded471f82503f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77278f4acb960227639ab6ad6ded471f82503f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77278f4acb960227639ab6ad6ded471f82503f51"}], "stats": {"total": 83, "additions": 28, "deletions": 55}, "files": [{"sha": "9ebc6095b1d6c3faef4637c8cb9bf443d4df1af3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ba5971590cfc51a55c277c61aad4ec64bd2507d", "patch": "@@ -1,5 +1,11 @@\n 2010-02-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/43075\n+\t* call.c (build_over_call): Don't create zero-sized assignments.\n+\t* cp-gimplify.c (cp_genericize_r): Don't remove them here.\n+\t* cp-objcp-common.c (cp_expr_size): Remove.\n+\t* cp-tree.h: Remove prototype.\n+\n \tPR c++/43069\n \t* name-lookup.c (set_decl_namespace): Don't copy DECL_CONTEXT if the\n \tdecl we looked up doesn't match."}, {"sha": "5e66c625295adf627d55eb77871d85ba69e3ecc0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9ba5971590cfc51a55c277c61aad4ec64bd2507d", "patch": "@@ -5782,8 +5782,20 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t{\n \t  tree to = stabilize_reference (cp_build_indirect_ref (fa, RO_NULL,\n \t\t\t\t\t\t\t\tcomplain));\n+\t  tree type = TREE_TYPE (to);\n \n-\t  val = build2 (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n+\t  if (TREE_CODE (arg) != TARGET_EXPR\n+\t      && TREE_CODE (arg) != AGGR_INIT_EXPR\n+\t      && is_really_empty_class (type))\n+\t    {\n+\t      /* Avoid copying empty classes.  */\n+\t      val = build2 (COMPOUND_EXPR, void_type_node, to, arg);\n+\t      TREE_NO_WARNING (val) = 1;\n+\t      val = build2 (COMPOUND_EXPR, type, val, to);\n+\t      TREE_NO_WARNING (val) = 1;\n+\t    }\n+\t  else\n+\t    val = build2 (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n \t  return val;\n \t}\n     }\n@@ -5797,7 +5809,15 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       tree as_base = CLASSTYPE_AS_BASE (type);\n       tree arg = argarray[1];\n \n-      if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n+      if (is_really_empty_class (type))\n+\t{\n+\t  /* Avoid copying empty classes.  */\n+\t  val = build2 (COMPOUND_EXPR, void_type_node, to, arg);\n+\t  TREE_NO_WARNING (val) = 1;\n+\t  val = build2 (COMPOUND_EXPR, type, val, to);\n+\t  TREE_NO_WARNING (val) = 1;\n+\t}\n+      else if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n \t{\n \t  arg = cp_build_indirect_ref (arg, RO_NULL, complain);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);"}, {"sha": "533d2d18384c7185869d18ec3257c21a42125afa", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=9ba5971590cfc51a55c277c61aad4ec64bd2507d", "patch": "@@ -884,15 +884,6 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       *walk_subtrees = 0;\n     }\n \n-  else if (TREE_CODE (stmt) == MODIFY_EXPR\n-\t   && (integer_zerop (cp_expr_size (TREE_OPERAND (stmt, 0)))\n-\t       || integer_zerop (cp_expr_size (TREE_OPERAND (stmt, 1)))))\n-    {\n-      *stmt_p = build2 (COMPOUND_EXPR, TREE_TYPE (stmt),\n-\t\t\tTREE_OPERAND (stmt, 0),\n-\t\t\tTREE_OPERAND (stmt, 1));\n-    }\n-\n   pointer_set_insert (p_set, *stmt_p);\n \n   return NULL;"}, {"sha": "460f32fe13db3e15e73ff9cd7e0d41494bc034a5", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=9ba5971590cfc51a55c277c61aad4ec64bd2507d", "patch": "@@ -69,49 +69,6 @@ cxx_warn_unused_global_decl (const_tree decl)\n   return true;\n }\n \n-/* Langhook for expr_size: Tell the back end that the value of an expression\n-   of non-POD class type does not include any tail padding; a derived class\n-   might have allocated something there.  */\n-\n-tree\n-cp_expr_size (const_tree exp)\n-{\n-  tree type = TREE_TYPE (exp);\n-\n-  if (CLASS_TYPE_P (type))\n-    {\n-      /* The back end should not be interested in the size of an expression\n-\t of a type with both of these set; all copies of such types must go\n-\t through a constructor or assignment op.  */\n-      if (!TYPE_HAS_COMPLEX_INIT_REF (type)\n-\t  || !TYPE_HAS_COMPLEX_ASSIGN_REF (type)\n-\t  /* But storing a CONSTRUCTOR isn't a copy.  */\n-\t  || TREE_CODE (exp) == CONSTRUCTOR\n-\t  /* And, the gimplifier will sometimes make a copy of\n-\t     an aggregate.  In particular, for a case like:\n-\n-\t\tstruct S { S(); };\n-\t\tstruct X { int a; S s; };\n-\t\tX x = { 0 };\n-\n-\t     the gimplifier will create a temporary with\n-\t     static storage duration, perform static\n-\t     initialization of the temporary, and then copy\n-\t     the result.  Since the \"s\" subobject is never\n-\t     constructed, this is a valid transformation.  */\n-\t  || CP_AGGREGATE_TYPE_P (type))\n-\t/* This would be wrong for a type with virtual bases.  */\n-\treturn (is_really_empty_class (type)\n-\t\t? size_zero_node\n-\t\t: CLASSTYPE_SIZE_UNIT (type));\n-      else\n-\treturn NULL_TREE;\n-    }\n-  else\n-    /* Use the default code.  */\n-    return tree_expr_size (exp);\n-}\n-\n /* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */\n size_t\n cp_tree_size (enum tree_code code)"}, {"sha": "b5330a3ab8b6f9fedf954082e18c8a5eb1056453", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba5971590cfc51a55c277c61aad4ec64bd2507d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9ba5971590cfc51a55c277c61aad4ec64bd2507d", "patch": "@@ -5445,7 +5445,6 @@ extern bool cp_dump_tree\t\t\t(void *, tree);\n \n extern alias_set_type cxx_get_alias_set\t\t(tree);\n extern bool cxx_warn_unused_global_decl\t\t(const_tree);\n-extern tree cp_expr_size\t\t\t(const_tree);\n extern size_t cp_tree_size\t\t\t(enum tree_code);\n extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n extern void cxx_initialize_diagnostics\t\t(struct diagnostic_context *);"}]}