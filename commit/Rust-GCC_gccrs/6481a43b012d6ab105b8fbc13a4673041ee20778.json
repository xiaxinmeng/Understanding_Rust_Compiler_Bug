{"sha": "6481a43b012d6ab105b8fbc13a4673041ee20778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4MWE0M2IwMTJkNmFiMTA1YjhmYmMxM2E0NjczMDQxZWUyMDc3OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-07T21:22:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-07T21:22:35Z"}, "message": "Handle predeclared names used as fields in struct composite literals.\n\nFrom-SVN: r170754", "tree": {"sha": "a08a279f57b1f065c8db0750f4601b2a4551cec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08a279f57b1f065c8db0750f4601b2a4551cec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6481a43b012d6ab105b8fbc13a4673041ee20778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6481a43b012d6ab105b8fbc13a4673041ee20778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6481a43b012d6ab105b8fbc13a4673041ee20778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6481a43b012d6ab105b8fbc13a4673041ee20778/comments", "author": null, "committer": null, "parents": [{"sha": "27062604920c7180050961af306f45b262aba93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27062604920c7180050961af306f45b262aba93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27062604920c7180050961af306f45b262aba93b"}], "stats": {"total": 60, "additions": 25, "deletions": 35}, "files": [{"sha": "8660c755abbc580e1665260ac074ecb5ef0b4c87", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6481a43b012d6ab105b8fbc13a4673041ee20778/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6481a43b012d6ab105b8fbc13a4673041ee20778/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6481a43b012d6ab105b8fbc13a4673041ee20778", "patch": "@@ -936,14 +936,6 @@ Var_expression::do_lower(Gogo* gogo, Named_object* function, int)\n   return this;\n }\n \n-// Return the name of the variable.\n-\n-const std::string&\n-Var_expression::name() const\n-{\n-  return this->variable_->name();\n-}\n-\n // Return the type of a reference to a variable.\n \n Type*\n@@ -1125,14 +1117,6 @@ Expression::make_sink(source_location location)\n // a function seems like it could work, though there might be little\n // point to it.\n \n-// Return the name of the function.\n-\n-const std::string&\n-Func_expression::name() const\n-{\n-  return this->function_->name();\n-}\n-\n // Traversal.\n \n int\n@@ -2359,10 +2343,6 @@ class Const_expression : public Expression\n   named_object()\n   { return this->constant_; }\n \n-  const std::string&\n-  name() const\n-  { return this->constant_->name(); }\n-\n   // Check that the initializer does not refer to the constant itself.\n   void\n   check_for_init_loop();\n@@ -11645,7 +11625,7 @@ class Composite_literal_expression : public Parser_expression\n \n  private:\n   Expression*\n-  lower_struct(Type*);\n+  lower_struct(Gogo*, Type*);\n \n   Expression*\n   lower_array(Type*);\n@@ -11706,7 +11686,7 @@ Composite_literal_expression::do_lower(Gogo* gogo, Named_object* function, int)\n   if (type->is_error_type())\n     return Expression::make_error(this->location());\n   else if (type->struct_type() != NULL)\n-    return this->lower_struct(type);\n+    return this->lower_struct(gogo, type);\n   else if (type->array_type() != NULL)\n     return this->lower_array(type);\n   else if (type->map_type() != NULL)\n@@ -11723,7 +11703,7 @@ Composite_literal_expression::do_lower(Gogo* gogo, Named_object* function, int)\n // Lower a struct composite literal.\n \n Expression*\n-Composite_literal_expression::lower_struct(Type* type)\n+Composite_literal_expression::lower_struct(Gogo* gogo, Type* type)\n {\n   source_location location = this->location();\n   Struct_type* st = type->struct_type();\n@@ -11751,14 +11731,15 @@ Composite_literal_expression::lower_struct(Type* type)\n \n       bool bad_key = false;\n       std::string name;\n+      const Named_object* no = NULL;\n       switch (name_expr->classification())\n \t{\n \tcase EXPRESSION_UNKNOWN_REFERENCE:\n \t  name = name_expr->unknown_expression()->name();\n \t  break;\n \n \tcase EXPRESSION_CONST_REFERENCE:\n-\t  name = static_cast<Const_expression*>(name_expr)->name();\n+\t  no = static_cast<Const_expression*>(name_expr)->named_object();\n \t  break;\n \n \tcase EXPRESSION_TYPE:\n@@ -11768,16 +11749,16 @@ Composite_literal_expression::lower_struct(Type* type)\n \t    if (nt == NULL)\n \t      bad_key = true;\n \t    else\n-\t      name = nt->name();\n+\t      no = nt->named_object();\n \t  }\n \t  break;\n \n \tcase EXPRESSION_VAR_REFERENCE:\n-\t  name = name_expr->var_expression()->name();\n+\t  no = name_expr->var_expression()->named_object();\n \t  break;\n \n \tcase EXPRESSION_FUNC_REFERENCE:\n-\t  name = name_expr->func_expression()->name();\n+\t  no = name_expr->func_expression()->named_object();\n \t  break;\n \n \tcase EXPRESSION_UNARY:\n@@ -11825,6 +11806,23 @@ Composite_literal_expression::lower_struct(Type* type)\n \t  return Expression::make_error(location);\n \t}\n \n+      if (no != NULL)\n+\t{\n+\t  name = no->name();\n+\n+\t  // A predefined name won't be packed.  If it starts with a\n+\t  // lower case letter we need to check for that case, because\n+\t  // the field name will be packed.\n+\t  if (!Gogo::is_hidden_name(name)\n+\t      && name[0] >= 'a'\n+\t      && name[0] <= 'z')\n+\t    {\n+\t      Named_object* gno = gogo->lookup_global(name.c_str());\n+\t      if (gno == no)\n+\t\tname = gogo->pack_hidden_name(name, false);\n+\t    }\n+\t}\n+\n       unsigned int index;\n       const Struct_field* sf = st->find_local_field(name, &index);\n       if (sf == NULL)"}, {"sha": "1dc408d557f22e8ceb9179d86ea8d1fac0559563", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6481a43b012d6ab105b8fbc13a4673041ee20778/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6481a43b012d6ab105b8fbc13a4673041ee20778/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=6481a43b012d6ab105b8fbc13a4673041ee20778", "patch": "@@ -903,10 +903,6 @@ class Var_expression : public Expression\n   named_object() const\n   { return this->variable_; }\n \n-  // Return the name of the variable.\n-  const std::string&\n-  name() const;\n-\n  protected:\n   Expression*\n   do_lower(Gogo*, Named_object*, int);\n@@ -1314,10 +1310,6 @@ class Func_expression : public Expression\n   named_object() const\n   { return this->function_; }\n \n-  // Return the name of the function.\n-  const std::string&\n-  name() const;\n-\n   // Return the closure for this function.  This will return NULL if\n   // the function has no closure, which is the normal case.\n   Expression*"}]}