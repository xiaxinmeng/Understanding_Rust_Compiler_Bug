{"sha": "71ff3d1820751c2e0f5dd265603ab8640b0cea63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmZjNkMTgyMDc1MWMyZTBmNWRkMjY1NjAzYWI4NjQwYjBjZWE2Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:02:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:02:55Z"}, "message": "[multiple changes]\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Do not check component size\n\tif its type is generic.\n\n2014-10-31  Bob Duff  <duff@adacore.com>\n\n\t* gnat_rm.texi: Fix documentation w.r.t -gnatw.w.\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Try_Container_Indexing): Use Check_Implicit_Dereference.\n\t* sem_util.adb (Check_Implicit_Dereference): a)\tHandle generalized\n\tindexing as well as function calls.  b)  If the context is a\n\tselected component and whe are in an instance, remove entity from\n\tselector name to force resolution of the node, so that explicit\n\tdereferences can be generated in the instance if they were in\n\tthe generic unit.\n\n2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Back_End_Cannot_Inline): Delete.\n\t(Add_Inlined_Subprogram): Do not call it.\n\nFrom-SVN: r216956", "tree": {"sha": "88c849bf8a2e08f492881bf9d2fb1ce284b34edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c849bf8a2e08f492881bf9d2fb1ce284b34edf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71ff3d1820751c2e0f5dd265603ab8640b0cea63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ff3d1820751c2e0f5dd265603ab8640b0cea63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ff3d1820751c2e0f5dd265603ab8640b0cea63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ff3d1820751c2e0f5dd265603ab8640b0cea63/comments", "author": null, "committer": null, "parents": [{"sha": "26b043e041529af951b20d4e94841e6433d9cc1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b043e041529af951b20d4e94841e6433d9cc1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b043e041529af951b20d4e94841e6433d9cc1c"}], "stats": {"total": 206, "additions": 96, "deletions": 110}, "files": [{"sha": "7b9be963e399ccc0499abd3e26e87d81ae97b853", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -1,3 +1,27 @@\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Do not check component size\n+\tif its type is generic.\n+\n+2014-10-31  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_rm.texi: Fix documentation w.r.t -gnatw.w.\n+\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): Use Check_Implicit_Dereference.\n+\t* sem_util.adb (Check_Implicit_Dereference): a)\tHandle generalized\n+\tindexing as well as function calls.  b)  If the context is a\n+\tselected component and whe are in an instance, remove entity from\n+\tselector name to force resolution of the node, so that explicit\n+\tdereferences can be generated in the instance if they were in\n+\tthe generic unit.\n+\n+2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Back_End_Cannot_Inline): Delete.\n+\t(Add_Inlined_Subprogram): Do not call it.\n+\n 2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch3.ads (Make_Tag_Assignment): New function, used to"}, {"sha": "bccec208e45a9701233ac2f325befa52fff36c48", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -3356,6 +3356,14 @@ package body Freeze is\n                      elsif CodePeer_Mode then\n                         null;\n \n+                     --  Omit check if component has a generic type. This can\n+                     --  happen in an instantiation within a generic in ASIS\n+                     --  mode, where we force freeze actions without full\n+                     --  expansion.\n+\n+                     elsif Is_Generic_Type (Etype (Comp)) then\n+                        null;\n+\n                      --  Do the check\n \n                      elsif not"}, {"sha": "e7bd8bf489c8b8cbd75bc012628769dc1948c176", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -7974,14 +7974,16 @@ pragma Warnings (On, Pattern);\n @end smallexample\n \n @noindent\n-In this usage, the pattern string must match in the Off and On pragmas,\n-and at least one matching warning must be suppressed.\n+In this usage, the pattern string must match in the Off and On\n+pragmas, and (if @option{-gnatw.w} is given) at least one matching\n+warning must be suppressed.\n \n Note: to write a string that will match any warning, use the string\n-@code{\"***\"}. It will not work to use a single asterisk or two asterisks\n-since this looks like an operator name. This form with three asterisks\n-is similar in effect to specifying @code{pragma Warnings (Off)} except that a\n-matching @code{pragma Warnings (On, \"***\")} will be required. This can be\n+@code{\"***\"}. It will not work to use a single asterisk or two\n+asterisks since this looks like an operator name. This form with three\n+asterisks is similar in effect to specifying @code{pragma Warnings\n+(Off)} except (if @option{-gnatw.w} is given) that a matching\n+@code{pragma Warnings (On, \"***\")} will be required. This can be\n helpful in avoiding forgetting to turn warnings back on.\n \n Note: the debug flag -gnatd.i (@code{/NOWARNINGS_PRAGMAS} in VMS) can be"}, {"sha": "0b9427742f384451d70c0a6a585cd0fe0c366b4a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 72, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -445,73 +445,13 @@ package body Inline is\n       E    : constant Entity_Id := Inlined.Table (Index).Name;\n       Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n-      function Back_End_Cannot_Inline (Subp : Entity_Id) return Boolean;\n-      --  There are various conditions under which back-end inlining cannot\n-      --  be done reliably:\n-      --\n-      --    a) If a body has handlers, it must not be inlined, because this\n-      --    may violate program semantics, and because in zero-cost exception\n-      --    mode it will lead to undefined symbols at link time.\n-      --\n-      --    b) If a body contains inlined function instances, it cannot be\n-      --    inlined under ZCX because the numeric suffix generated by gigi\n-      --    will be different in the body and the place of the inlined call.\n-      --\n-      --  This procedure must be carefully coordinated with the back end.\n-\n       procedure Register_Backend_Inlined_Subprogram (Subp : Entity_Id);\n       --  Append Subp to the list of subprograms inlined by the backend\n \n       procedure Register_Backend_Not_Inlined_Subprogram (Subp : Entity_Id);\n       --  Append Subp to the list of subprograms that cannot be inlined by\n       --  the backend.\n \n-      ----------------------------\n-      -- Back_End_Cannot_Inline --\n-      ----------------------------\n-\n-      function Back_End_Cannot_Inline (Subp : Entity_Id) return Boolean is\n-         Decl     : constant Node_Id := Unit_Declaration_Node (Subp);\n-         Body_Ent : Entity_Id;\n-         Ent      : Entity_Id;\n-\n-      begin\n-         if Nkind (Decl) = N_Subprogram_Declaration\n-           and then Present (Corresponding_Body (Decl))\n-         then\n-            Body_Ent := Corresponding_Body (Decl);\n-         else\n-            return False;\n-         end if;\n-\n-         --  If subprogram is marked Inline_Always, inlining is mandatory\n-\n-         if Has_Pragma_Inline_Always (Subp) then\n-            return False;\n-         end if;\n-\n-         if Present\n-              (Exception_Handlers\n-                 (Handled_Statement_Sequence\n-                    (Unit_Declaration_Node (Corresponding_Body (Decl)))))\n-         then\n-            return True;\n-         end if;\n-\n-         Ent := First_Entity (Body_Ent);\n-         while Present (Ent) loop\n-            if Is_Subprogram (Ent)\n-              and then Is_Generic_Instance (Ent)\n-            then\n-               return True;\n-            end if;\n-\n-            Next_Entity (Ent);\n-         end loop;\n-\n-         return False;\n-      end Back_End_Cannot_Inline;\n-\n       -----------------------------------------\n       -- Register_Backend_Inlined_Subprogram --\n       -----------------------------------------\n@@ -547,21 +487,15 @@ package body Inline is\n         and then not Is_Nested (E)\n         and then not Has_Initialized_Type (E)\n       then\n-         if Back_End_Cannot_Inline (E) then\n-            Set_Is_Inlined (E, False);\n-            Register_Backend_Not_Inlined_Subprogram (E);\n+         Register_Backend_Inlined_Subprogram (E);\n \n+         if No (Last_Inlined) then\n+            Set_First_Inlined_Subprogram (Cunit (Main_Unit), E);\n          else\n-            Register_Backend_Inlined_Subprogram (E);\n-\n-            if No (Last_Inlined) then\n-               Set_First_Inlined_Subprogram (Cunit (Main_Unit), E);\n-            else\n-               Set_Next_Inlined_Subprogram (Last_Inlined, E);\n-            end if;\n-\n-            Last_Inlined := E;\n+            Set_Next_Inlined_Subprogram (Last_Inlined, E);\n          end if;\n+\n+         Last_Inlined := E;\n       else\n          Register_Backend_Not_Inlined_Subprogram (E);\n       end if;"}, {"sha": "7df725d800fd3370e95d9455e362088b88ac69ef", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -7036,7 +7036,6 @@ package body Sem_Ch4 is\n       Loc       : constant Source_Ptr := Sloc (N);\n       C_Type    : Entity_Id;\n       Assoc     : List_Id;\n-      Disc      : Entity_Id;\n       Func      : Entity_Id;\n       Func_Name : Node_Id;\n       Indexing  : Node_Id;\n@@ -7149,21 +7148,7 @@ package body Sem_Ch4 is\n          --  discriminant is not the first discriminant.\n \n          if Has_Discriminants (Etype (Func)) then\n-            Disc := First_Discriminant (Etype (Func));\n-            while Present (Disc) loop\n-               declare\n-                  Elmt_Type : Entity_Id;\n-               begin\n-                  if Has_Implicit_Dereference (Disc) then\n-                     Elmt_Type := Designated_Type (Etype (Disc));\n-                     Add_One_Interp (Indexing, Disc, Elmt_Type);\n-                     Add_One_Interp (N, Disc, Elmt_Type);\n-                     exit;\n-                  end if;\n-               end;\n-\n-               Next_Discriminant (Disc);\n-            end loop;\n+            Check_Implicit_Dereference (N, Etype (Func));\n          end if;\n \n       else\n@@ -7194,18 +7179,7 @@ package body Sem_Ch4 is\n                   --  Add implicit dereference interpretation\n \n                   if Has_Discriminants (Etype (It.Nam)) then\n-                     Disc := First_Discriminant (Etype (It.Nam));\n-                     while Present (Disc) loop\n-                        if Has_Implicit_Dereference (Disc) then\n-                           Add_One_Interp\n-                             (Indexing, Disc, Designated_Type (Etype (Disc)));\n-                           Add_One_Interp\n-                             (N, Disc, Designated_Type (Etype (Disc)));\n-                           exit;\n-                        end if;\n-\n-                        Next_Discriminant (Disc);\n-                     end loop;\n+                     Check_Implicit_Dereference (N, Etype (It.Nam));\n                   end if;\n \n                   exit;"}, {"sha": "09afaaaafa54d491356510d183ef4e2d245f2800", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -2673,17 +2673,29 @@ package body Sem_Util is\n    -- Check_Implicit_Dereference --\n    --------------------------------\n \n-   procedure Check_Implicit_Dereference (Nam : Node_Id;  Typ : Entity_Id) is\n+   procedure Check_Implicit_Dereference (N : Node_Id;  Typ : Entity_Id) is\n       Disc  : Entity_Id;\n       Desig : Entity_Id;\n+      Nam   : Node_Id;\n \n    begin\n+      if Nkind (N) = N_Indexed_Component\n+        and then Present (Generalized_Indexing (N))\n+      then\n+         Nam := Generalized_Indexing (N);\n+\n+      else\n+         Nam := N;\n+      end if;\n+\n       if Ada_Version < Ada_2012\n         or else not Has_Implicit_Dereference (Base_Type (Typ))\n       then\n          return;\n \n-      elsif not Comes_From_Source (Nam) then\n+      elsif not Comes_From_Source (N)\n+        and then Nkind (N) /= N_Indexed_Component\n+      then\n          return;\n \n       elsif Is_Entity_Name (Nam) and then Is_Type (Entity (Nam)) then\n@@ -2695,6 +2707,26 @@ package body Sem_Util is\n             if Has_Implicit_Dereference (Disc) then\n                Desig := Designated_Type (Etype (Disc));\n                Add_One_Interp (Nam, Disc, Desig);\n+\n+               --  If the node is a generalized indexing, add interpretation\n+               --  to that node as well, for subsequent resolution.\n+\n+               if Nkind (N) = N_Indexed_Component then\n+                  Add_One_Interp (N, Disc, Desig);\n+               end if;\n+\n+               --  If the operation comes from a generic unit and the context\n+               --  is a selected component, the selector name may be global\n+               --  and set in the instance already. Remove the entity to\n+               --  force resolution of the selected component, and the\n+               --  generation of an explicit dereference if needed.\n+\n+               if In_Instance\n+                 and then Nkind (Parent (Nam)) = N_Selected_Component\n+               then\n+                  Set_Entity (Selector_Name (Parent (Nam)), Empty);\n+               end if;\n+\n                exit;\n             end if;\n \n@@ -16543,11 +16575,21 @@ package body Sem_Util is\n    begin\n       --  Nothing to do if argument is Empty or has Debug_Info_Off set, which\n       --  indicates that Debug_Info_Needed is never required for the entity.\n+      --  Nothing to do if entity comes from a predefined file. Library files\n+      --  are compiled without debug information, but inlined bodies of these\n+      --  routines may appear in user code, and debug information on them ends\n+      --  up complicating debugging the user code.\n \n       if No (T)\n         or else Debug_Info_Off (T)\n       then\n          return;\n+\n+      elsif In_Inlined_Body\n+        and then Is_Predefined_File_Name\n+           (Unit_File_Name (Get_Source_Unit (Sloc (T))))\n+      then\n+         Set_Needs_Debug_Info (T, False);\n       end if;\n \n       --  Set flag in entity itself. Note that we will go through the following"}, {"sha": "bd3a4e9a7a016fb447d08588bfe8ad927feeaae7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ff3d1820751c2e0f5dd265603ab8640b0cea63/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=71ff3d1820751c2e0f5dd265603ab8640b0cea63", "patch": "@@ -285,10 +285,12 @@ package Sem_Util is\n    --  the one containing C2, that is known to refer to the same object (RM\n    --  6.4.1(6.17/3)).\n \n-   procedure Check_Implicit_Dereference (Nam : Node_Id; Typ : Entity_Id);\n+   procedure Check_Implicit_Dereference (N : Node_Id; Typ : Entity_Id);\n    --  AI05-139-2: Accessors and iterators for containers. This procedure\n    --  checks whether T is a reference type, and if so it adds an interprettion\n-   --  to Expr whose type is the designated type of the reference_discriminant.\n+   --  to N whose type is the designated type of the reference_discriminant.\n+   --  If N is a generalized indexing operation, the interpretation is added\n+   --  both to the corresponding function call, and to the indexing node.\n \n    procedure Check_Internal_Protected_Use (N : Node_Id; Nam : Entity_Id);\n    --  Within a protected function, the current object is a constant, and"}]}