{"sha": "d42a3bae0faadc14581321d391afd8ccbd18aa44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyYTNiYWUwZmFhZGMxNDU4MTMyMWQzOTFhZmQ4Y2NiZDE4YWE0NA==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2007-09-06T14:30:19Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-09-06T14:30:19Z"}, "message": "Fix offsettable memory reference for 750CL\n\nFrom-SVN: r128184", "tree": {"sha": "9c6769be19e736a2d786170b58a354183bd08f40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6769be19e736a2d786170b58a354183bd08f40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42a3bae0faadc14581321d391afd8ccbd18aa44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42a3bae0faadc14581321d391afd8ccbd18aa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42a3bae0faadc14581321d391afd8ccbd18aa44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42a3bae0faadc14581321d391afd8ccbd18aa44/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd379f7328b2ff3b17f5845dbe49796f97a79c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd379f7328b2ff3b17f5845dbe49796f97a79c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd379f7328b2ff3b17f5845dbe49796f97a79c25"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "b1956008a8a39c39855291dd5ea59b65684f1613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42a3bae0faadc14581321d391afd8ccbd18aa44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42a3bae0faadc14581321d391afd8ccbd18aa44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d42a3bae0faadc14581321d391afd8ccbd18aa44", "patch": "@@ -1,3 +1,8 @@\n+2007-09-06  Revital Eres  <eres@il.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_offset_address_p):\n+\tFix offsettable memory reference for 750CL.\n+\n 2007-09-06  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* reload.c (find_reloads_address_1): Try to preserve original"}, {"sha": "be82c3f644286c487ddcfc0b9bc1cd39b72937a6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42a3bae0faadc14581321d391afd8ccbd18aa44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42a3bae0faadc14581321d391afd8ccbd18aa44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d42a3bae0faadc14581321d391afd8ccbd18aa44", "patch": "@@ -3203,6 +3203,11 @@ rs6000_legitimate_offset_address_p (enum machine_mode mode, rtx x, int strict)\n     case V2SImode:\n     case V1DImode:\n     case V2SFmode:\n+       /* Paired vector modes.  Only reg+reg addressing is valid and\n+         constant offset zero should not occur due to canonicalization.\n+         Allow any offset when not strict before reload.  */\n+      if (TARGET_PAIRED_FLOAT)\n+        return !strict;\n       /* SPE vector modes.  */\n       return SPE_CONST_OFFSET_OK (offset);\n "}]}