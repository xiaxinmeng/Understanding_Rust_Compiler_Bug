{"sha": "7a08d81307ef1a69bbdcb061e21881ab5def593a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwOGQ4MTMwN2VmMWE2OWJiZGNiMDYxZTIxODgxYWI1ZGVmNTkzYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-10-16T09:56:41Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-10-16T09:56:41Z"}, "message": "2017-10-16  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_types_quadopu_lane_qualifiers): New.\n\t(TYPES_QUADOPU_LANE): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>dot<vsi2qi>): New.\n\t(<sur>dot_prod<vsi2qi>, aarch64_<sur>dot_lane<vsi2qi>): New.\n\t(aarch64_<sur>dot_laneq<vsi2qi>): New.\n\t* config/aarch64/aarch64-simd-builtins.def (sdot, udot): New.\n\t(sdot_lane, udot_lane, sdot_laneq, udot_laneq): New.\n\t* config/aarch64/iterators.md (sur): Add UNSPEC_SDOT, UNSPEC_UDOT.\n\t(Vdottype, DOTPROD): New.\n\t(sur): Add SDOT and UDOT.\n\nFrom-SVN: r253783", "tree": {"sha": "a592454f07b6d574bcdfdbe64b8d990dd6a614ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a592454f07b6d574bcdfdbe64b8d990dd6a614ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a08d81307ef1a69bbdcb061e21881ab5def593a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08d81307ef1a69bbdcb061e21881ab5def593a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a08d81307ef1a69bbdcb061e21881ab5def593a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08d81307ef1a69bbdcb061e21881ab5def593a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ddc47c05e80aed3c3ec5b636dd706c0d0264dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddc47c05e80aed3c3ec5b636dd706c0d0264dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddc47c05e80aed3c3ec5b636dd706c0d0264dbc"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "bf6c3d82907112201361d7c39a14b3b1f48a188d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a08d81307ef1a69bbdcb061e21881ab5def593a", "patch": "@@ -1,3 +1,17 @@\n+2017-10-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_types_quadopu_lane_qualifiers): New.\n+\t(TYPES_QUADOPU_LANE): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>dot<vsi2qi>): New.\n+\t(<sur>dot_prod<vsi2qi>, aarch64_<sur>dot_lane<vsi2qi>): New.\n+\t(aarch64_<sur>dot_laneq<vsi2qi>): New.\n+\t* config/aarch64/aarch64-simd-builtins.def (sdot, udot): New.\n+\t(sdot_lane, udot_lane, sdot_laneq, udot_laneq): New.\n+\t* config/aarch64/iterators.md (sur): Add UNSPEC_SDOT, UNSPEC_UDOT.\n+\t(Vdottype, DOTPROD): New.\n+\t(sur): Add SDOT and UDOT.\n+\n 2017-10-16  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_FL_DOTPROD): New."}, {"sha": "242b2e3dc31e1792eac5106a2ddb639d3b3f7001", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=7a08d81307ef1a69bbdcb061e21881ab5def593a", "patch": "@@ -168,6 +168,11 @@ aarch64_types_quadop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none,\n       qualifier_none, qualifier_lane_index };\n #define TYPES_QUADOP_LANE (aarch64_types_quadop_lane_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_quadopu_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_lane_index };\n+#define TYPES_QUADOPU_LANE (aarch64_types_quadopu_lane_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_binop_imm_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]"}, {"sha": "52d01342372e518b1238ea14097e8f0574e9a605", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=7a08d81307ef1a69bbdcb061e21881ab5def593a", "patch": "@@ -205,6 +205,14 @@\n   BUILTIN_VSDQ_I_DI (BINOP, srshl, 0)\n   BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0)\n \n+  /* Implemented by aarch64_<sur><dotprod>{_lane}{q}<dot_mode>.  */\n+  BUILTIN_VB (TERNOP, sdot, 0)\n+  BUILTIN_VB (TERNOPU, udot, 0)\n+  BUILTIN_VB (QUADOP_LANE, sdot_lane, 0)\n+  BUILTIN_VB (QUADOPU_LANE, udot_lane, 0)\n+  BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0)\n+  BUILTIN_VB (QUADOPU_LANE, udot_laneq, 0)\n+\n   BUILTIN_VDQ_I (SHIFTIMM, ashr, 3)\n   VAR1 (SHIFTIMM, ashr_simd, 0, di)\n   BUILTIN_VDQ_I (SHIFTIMM, lshr, 3)"}, {"sha": "49f615cfdbf7083d17169e72330c8985fc8efde7", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=7a08d81307ef1a69bbdcb061e21881ab5def593a", "patch": "@@ -393,6 +393,87 @@\n }\n )\n \n+;; These instructions map to the __builtins for the Dot Product operations.\n+(define_insn \"aarch64_<sur>dot<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n+\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:<VSI2QI> 3 \"register_operand\" \"w\")]\n+\t\tDOTPROD)))]\n+  \"TARGET_DOTPROD\"\n+  \"<sur>dot\\\\t%0.<Vtype>, %2.<Vdottype>, %3.<Vdottype>\"\n+  [(set_attr \"type\" \"neon_dot\")]\n+)\n+\n+;; These expands map to the Dot Product optab the vectorizer checks for.\n+;; The auto-vectorizer expects a dot product builtin that also does an\n+;; accumulation into the provided register.\n+;; Given the following pattern\n+;;\n+;; for (i=0; i<len; i++) {\n+;;     c = a[i] * b[i];\n+;;     r += c;\n+;; }\n+;; return result;\n+;;\n+;; This can be auto-vectorized to\n+;; r  = a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3];\n+;;\n+;; given enough iterations.  However the vectorizer can keep unrolling the loop\n+;; r += a[4]*b[4] + a[5]*b[5] + a[6]*b[6] + a[7]*b[7];\n+;; r += a[8]*b[8] + a[9]*b[9] + a[10]*b[10] + a[11]*b[11];\n+;; ...\n+;;\n+;; and so the vectorizer provides r, in which the result has to be accumulated.\n+(define_expand \"<sur>dot_prod<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\")\n+\t(plus:VS (unspec:VS [(match_operand:<VSI2QI> 1 \"register_operand\")\n+\t\t\t    (match_operand:<VSI2QI> 2 \"register_operand\")]\n+\t\t DOTPROD)\n+\t\t(match_operand:VS 3 \"register_operand\")))]\n+  \"TARGET_DOTPROD\"\n+{\n+  emit_insn (\n+    gen_aarch64_<sur>dot<vsi2qi> (operands[3], operands[3], operands[1],\n+\t\t\t\t    operands[2]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+  DONE;\n+})\n+\n+;; These instructions map to the __builtins for the Dot Product\n+;; indexed operations.\n+(define_insn \"aarch64_<sur>dot_lane<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n+\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:V8QI 3 \"register_operand\" \"<h_con>\")\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\tDOTPROD)))]\n+  \"TARGET_DOTPROD\"\n+  {\n+    operands[4]\n+      = GEN_INT (ENDIAN_LANE_N (V8QImode, INTVAL (operands[4])));\n+    return \"<sur>dot\\\\t%0.<Vtype>, %2.<Vdottype>, %3.4b[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_dot\")]\n+)\n+\n+(define_insn \"aarch64_<sur>dot_laneq<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n+\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:V16QI 3 \"register_operand\" \"<h_con>\")\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\tDOTPROD)))]\n+  \"TARGET_DOTPROD\"\n+  {\n+    operands[4]\n+      = GEN_INT (ENDIAN_LANE_N (V16QImode, INTVAL (operands[4])));\n+    return \"<sur>dot\\\\t%0.<Vtype>, %2.<Vdottype>, %3.4b[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_dot\")]\n+)\n+\n (define_expand \"copysign<mode>3\"\n   [(match_operand:VHSDF 0 \"register_operand\")\n    (match_operand:VHSDF 1 \"register_operand\")"}, {"sha": "48cedbe84a6b33a7df86c3a7424bf83d1fdcbb7b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08d81307ef1a69bbdcb061e21881ab5def593a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=7a08d81307ef1a69bbdcb061e21881ab5def593a", "patch": "@@ -354,6 +354,8 @@\n     UNSPEC_SQRDMLSH     ; Used in aarch64-simd.md.\n     UNSPEC_FMAXNM       ; Used in aarch64-simd.md.\n     UNSPEC_FMINNM       ; Used in aarch64-simd.md.\n+    UNSPEC_SDOT\t\t; Used in aarch64-simd.md.\n+    UNSPEC_UDOT\t\t; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -800,6 +802,10 @@\n (define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")])\n (define_mode_attr VSI2QI [(V2SI \"V8QI\") (V4SI \"V16QI\")])\n \n+\n+;; Register suffix for DOTPROD input types from the return type.\n+(define_mode_attr Vdottype [(V2SI \"8b\") (V4SI \"16b\")])\n+\n ;; Sum of lengths of instructions needed to move vector registers of a mode.\n (define_mode_attr insn_count [(OI \"8\") (CI \"12\") (XI \"16\")])\n \n@@ -1029,6 +1035,7 @@\n \t\t\t      UNSPEC_SHSUB UNSPEC_UHSUB\n \t\t\t      UNSPEC_SRHSUB UNSPEC_URHSUB])\n \n+(define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n \t\t\t       UNSPEC_SUBHN UNSPEC_RSUBHN])\n@@ -1166,6 +1173,7 @@\n \t\t      (UNSPEC_USHLL  \"u\")  (UNSPEC_SSHLL \"s\")\n \t\t      (UNSPEC_URSHL  \"ur\") (UNSPEC_SRSHL  \"sr\")\n \t\t      (UNSPEC_UQRSHL  \"u\") (UNSPEC_SQRSHL  \"s\")\n+\t\t      (UNSPEC_SDOT \"s\") (UNSPEC_UDOT \"u\")\n ])\n \n (define_int_attr r [(UNSPEC_SQDMULH \"\") (UNSPEC_SQRDMULH \"r\")"}]}