{"sha": "40bf935e85b60e7d110d028bf975558589abef8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiZjkzNWU4NWI2MGU3ZDExMGQwMjhiZjk3NTU1ODU4OWFiZWY4Yw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-03-31T18:37:35Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-03-31T18:37:35Z"}, "message": "Add a verbosity parameter to clean up the comments of pretty printers.\n\n2010-03-23  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-dependences.c (print_pddr): Call print_pdr with an\n\textra argument.\n\t* graphite-poly.c (debug_pdr): Add an extra argument for the\n\tverbosity level.\n\t(print_pdr): Same.\n\t(print_pbb_domain): Same.\n\t(print_pbb): Same.\n\t(print_scop_context): Same.\n\t(print_scop): Same.\n\t(print_cloog): Same.\n\t(debug_pbb_domain): Same.\n\t(debug_pbb): Same.\n\t(print_pdrs): Same.\n\t(debug_pdrs): Same.\n\t(debug_scop_context): Same.\n\t(debug_scop): Same.\n\t(debug_cloog): Same.\n\t(print_scop_params): Same.\n\t(debug_scop_params): Same.\n\t(print_iteration_domain): Same.\n\t(print_iteration_domains): Same.\n\t(debug_iteration_domain): Same.\n\t(debug_iteration_domains): Same.\n\t(print_scattering_function): Same.\n\t(print_scattering_functions): Same.\n\t(debug_scattering_function): Same.\n\t(debug_scattering_functions): Same.\n\t* graphite-poly.h (debug_pdr): Update declaration.\n\t(print_pdr): Same.\n\t(print_pbb_domain): Same.\n\t(print_pbb): Same.\n\t(print_scop_context): Same.\n\t(print_scop): Same.\n\t(print_cloog): Same.\n\t(debug_pbb_domain): Same.\n\t(debug_pbb): Same.\n\t(print_pdrs): Same.\n\t(debug_pdrs): Same.\n\t(debug_scop_context): Same.\n\t(debug_scop): Same.\n\t(debug_cloog): Same.\n\t(print_scop_params): Same.\n\t(debug_scop_params): Same.\n\t(print_iteration_domain): Same.\n\t(print_iteration_domains): Same.\n\t(debug_iteration_domain): Same.\n\t(debug_iteration_domains): Same.\n\t(print_scattering_function): Same.\n\t(print_scattering_functions): Same.\n\t(debug_scattering_function): Same.\n\t(debug_scattering_functions): Same.\n\nFrom-SVN: r157888", "tree": {"sha": "3112ba2d75744ec0c4f5aedffd5fab03d5e8e1c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3112ba2d75744ec0c4f5aedffd5fab03d5e8e1c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40bf935e85b60e7d110d028bf975558589abef8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf935e85b60e7d110d028bf975558589abef8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf935e85b60e7d110d028bf975558589abef8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf935e85b60e7d110d028bf975558589abef8c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730a98461a93b4e9a302fbaafc190bdf87f2b132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730a98461a93b4e9a302fbaafc190bdf87f2b132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730a98461a93b4e9a302fbaafc190bdf87f2b132"}], "stats": {"total": 583, "additions": 389, "deletions": 194}, "files": [{"sha": "3cfb29bc73bd0855fcb8ba288579163965227404", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=40bf935e85b60e7d110d028bf975558589abef8c", "patch": "@@ -1,3 +1,57 @@\n+2010-03-23  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (print_pddr): Call print_pdr with an\n+\textra argument.\n+\t* graphite-poly.c (debug_pdr): Add an extra argument for the\n+\tverbosity level.\n+\t(print_pdr): Same.\n+\t(print_pbb_domain): Same.\n+\t(print_pbb): Same.\n+\t(print_scop_context): Same.\n+\t(print_scop): Same.\n+\t(print_cloog): Same.\n+\t(debug_pbb_domain): Same.\n+\t(debug_pbb): Same.\n+\t(print_pdrs): Same.\n+\t(debug_pdrs): Same.\n+\t(debug_scop_context): Same.\n+\t(debug_scop): Same.\n+\t(debug_cloog): Same.\n+\t(print_scop_params): Same.\n+\t(debug_scop_params): Same.\n+\t(print_iteration_domain): Same.\n+\t(print_iteration_domains): Same.\n+\t(debug_iteration_domain): Same.\n+\t(debug_iteration_domains): Same.\n+\t(print_scattering_function): Same.\n+\t(print_scattering_functions): Same.\n+\t(debug_scattering_function): Same.\n+\t(debug_scattering_functions): Same.\n+\t* graphite-poly.h (debug_pdr): Update declaration.\n+\t(print_pdr): Same.\n+\t(print_pbb_domain): Same.\n+\t(print_pbb): Same.\n+\t(print_scop_context): Same.\n+\t(print_scop): Same.\n+\t(print_cloog): Same.\n+\t(debug_pbb_domain): Same.\n+\t(debug_pbb): Same.\n+\t(print_pdrs): Same.\n+\t(debug_pdrs): Same.\n+\t(debug_scop_context): Same.\n+\t(debug_scop): Same.\n+\t(debug_cloog): Same.\n+\t(print_scop_params): Same.\n+\t(debug_scop_params): Same.\n+\t(print_iteration_domain): Same.\n+\t(print_iteration_domains): Same.\n+\t(debug_iteration_domain): Same.\n+\t(debug_iteration_domains): Same.\n+\t(print_scattering_function): Same.\n+\t(print_scattering_functions): Same.\n+\t(debug_scattering_function): Same.\n+\t(debug_scattering_functions): Same.\n+\n 2010-03-23  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-poly.c (print_scattering_function_1): New."}, {"sha": "385b46265be99e9012e0a267107971c7227433ea", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=40bf935e85b60e7d110d028bf975558589abef8c", "patch": "@@ -184,10 +184,10 @@ print_pddr (FILE *file, poly_ddr_p pddr)\n     fprintf (file, \"has_dependence\");\n \n   fprintf (file, \"\\n  source \");\n-  print_pdr (file, PDDR_SOURCE (pddr));\n+  print_pdr (file, PDDR_SOURCE (pddr), 2);\n \n   fprintf (file, \"\\n  sink \");\n-  print_pdr (file, PDDR_SINK (pddr));\n+  print_pdr (file, PDDR_SINK (pddr), 2);\n \n   if (PDDR_KIND (pddr) == has_dependence)\n     {"}, {"sha": "6d316a024992a1e87cbe34368ecdcaecf2cb74a9", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 309, "deletions": 168, "changes": 477, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=40bf935e85b60e7d110d028bf975558589abef8c", "patch": "@@ -135,29 +135,33 @@ unify_scattering_dimensions (scop_p scop)\n   return max_scattering;\n }\n \n-/* Prints to FILE the scattering function of PBB.  */\n+/* Prints to FILE the scattering function of PBB, at some VERBOSITY\n+   level.  */\n \n static void\n-print_scattering_function_1 (FILE *file, poly_bb_p pbb)\n+print_scattering_function_1 (FILE *file, poly_bb_p pbb, int verbosity)\n {\n   graphite_dim_t i;\n \n-  fprintf (file, \"# scattering bb_%d (\\n\", pbb_index (pbb));\n-  fprintf (file, \"#  eq\");\n+  if (verbosity > 0)\n+    {\n+      fprintf (file, \"# scattering bb_%d (\\n\", pbb_index (pbb));\n+      fprintf (file, \"#  eq\");\n \n-  for (i = 0; i < pbb_nb_scattering_transform (pbb); i++)\n-    fprintf (file, \"     s%d\", (int) i);\n+      for (i = 0; i < pbb_nb_scattering_transform (pbb); i++)\n+\tfprintf (file, \"     s%d\", (int) i);\n \n-  for (i = 0; i < pbb_nb_local_vars (pbb); i++)\n-    fprintf (file, \"    lv%d\", (int) i);\n+      for (i = 0; i < pbb_nb_local_vars (pbb); i++)\n+\tfprintf (file, \"    lv%d\", (int) i);\n \n-  for (i = 0; i < pbb_dim_iter_domain (pbb); i++)\n-    fprintf (file, \"     i%d\", (int) i);\n+      for (i = 0; i < pbb_dim_iter_domain (pbb); i++)\n+\tfprintf (file, \"     i%d\", (int) i);\n \n-  for (i = 0; i < pbb_nb_params (pbb); i++)\n-    fprintf (file, \"     p%d\", (int) i);\n+      for (i = 0; i < pbb_nb_params (pbb); i++)\n+\tfprintf (file, \"     p%d\", (int) i);\n \n-  fprintf (file, \"    cst\\n\");\n+      fprintf (file, \"    cst\\n\");\n+    }\n \n   /* Number of disjunct components.  Remove this when\n      PBB_TRANSFORMED_SCATTERING will be a pointset_powerset.  */\n@@ -166,93 +170,110 @@ print_scattering_function_1 (FILE *file, poly_bb_p pbb)\n \t\t\t       ? PBB_TRANSFORMED_SCATTERING (pbb)\n \t\t\t       : PBB_ORIGINAL_SCATTERING (pbb));\n \n-  fprintf (file, \"#)\\n\");\n+  if (verbosity > 0)\n+    fprintf (file, \"#)\\n\");\n }\n \n-/* Prints to FILE the scattering function of PBB.  */\n+/* Prints to FILE the scattering function of PBB, at some VERBOSITY\n+   level.  */\n \n void\n-print_scattering_function (FILE *file, poly_bb_p pbb)\n+print_scattering_function (FILE *file, poly_bb_p pbb, int verbosity)\n {\n   if (!PBB_TRANSFORMED (pbb))\n     return;\n \n   if (PBB_TRANSFORMED_SCATTERING (pbb)\n       || PBB_ORIGINAL_SCATTERING (pbb))\n-    fprintf (file, \"# Scattering function is provided\\n1\\n\");\n+    {\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Scattering function is provided\\n\");\n+\n+      fprintf (file, \"1\\n\");\n+    }\n   else\n     {\n-      fprintf (file, \"# Scattering function is not provided\\n0\\n\");\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Scattering function is not provided\\n\");\n+\n+      fprintf (file, \"0\\n\");\n       return;\n     }\n \n-  print_scattering_function_1 (file, pbb);\n+  print_scattering_function_1 (file, pbb, verbosity);\n }\n \n-/* Prints to FILE the iteration domain of PBB.  */\n+/* Prints to FILE the iteration domain of PBB, at some VERBOSITY\n+   level.  */\n \n void\n-print_iteration_domain (FILE *file, poly_bb_p pbb)\n+print_iteration_domain (FILE *file, poly_bb_p pbb, int verbosity)\n {\n-  print_pbb_domain (file, pbb);\n+  print_pbb_domain (file, pbb, verbosity);\n }\n \n /* Prints to FILE the scattering functions of every PBB of SCOP.  */\n \n void\n-print_scattering_functions (FILE *file, scop_p scop)\n+print_scattering_functions (FILE *file, scop_p scop, int verbosity)\n {\n   int i;\n   poly_bb_p pbb;\n \n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n-    print_scattering_function (file, pbb);\n+    print_scattering_function (file, pbb, verbosity);\n }\n \n-/* Prints to FILE the iteration domains of every PBB of SCOP.  */\n+/* Prints to FILE the iteration domains of every PBB of SCOP, at some\n+   VERBOSITY level.  */\n \n void\n-print_iteration_domains (FILE *file, scop_p scop)\n+print_iteration_domains (FILE *file, scop_p scop, int verbosity)\n {\n   int i;\n   poly_bb_p pbb;\n \n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n-    print_iteration_domain (file, pbb);\n+    print_iteration_domain (file, pbb, verbosity);\n }\n \n-/* Prints to STDERR the scattering function of PBB.  */\n+/* Prints to STDERR the scattering function of PBB, at some VERBOSITY\n+   level.  */\n \n void\n-debug_scattering_function (poly_bb_p pbb)\n+debug_scattering_function (poly_bb_p pbb, int verbosity)\n {\n-  print_scattering_function (stderr, pbb);\n+  print_scattering_function (stderr, pbb, verbosity);\n }\n \n-/* Prints to STDERR the iteration domain of PBB.  */\n+/* Prints to STDERR the iteration domain of PBB, at some VERBOSITY\n+   level.  */\n \n void\n-debug_iteration_domain (poly_bb_p pbb)\n+debug_iteration_domain (poly_bb_p pbb, int verbosity)\n {\n-  print_iteration_domain (stderr, pbb);\n+  print_iteration_domain (stderr, pbb, verbosity);\n }\n \n-/* Prints to STDERR the scattering functions of every PBB of SCOP.  */\n+/* Prints to STDERR the scattering functions of every PBB of SCOP, at\n+   some VERBOSITY level.  */\n \n void\n-debug_scattering_functions (scop_p scop)\n+debug_scattering_functions (scop_p scop, int verbosity)\n {\n-  print_scattering_functions (stderr, scop);\n+  print_scattering_functions (stderr, scop, verbosity);\n }\n \n-/* Prints to STDERR the iteration domains of every PBB of SCOP.  */\n+/* Prints to STDERR the iteration domains of every PBB of SCOP, at\n+   some VERBOSITY level.  */\n \n void\n-debug_iteration_domains (scop_p scop)\n+debug_iteration_domains (scop_p scop, int verbosity)\n {\n-  print_iteration_domains (stderr, scop);\n+  print_iteration_domains (stderr, scop, verbosity);\n }\n \n+\n /* Apply graphite transformations to all the basic blocks of SCOP.  */\n \n bool\n@@ -428,47 +449,59 @@ print_pdr_access_layout (FILE *file, poly_dr_p pdr)\n   fprintf (file, \"    cst\\n\");\n }\n \n-/* Prints to FILE the polyhedral data reference PDR.  */\n+/* Prints to FILE the polyhedral data reference PDR, at some VERBOSITY\n+   level.  */\n \n void\n-print_pdr (FILE *file, poly_dr_p pdr)\n+print_pdr (FILE *file, poly_dr_p pdr, int verbosity)\n {\n-  fprintf (file, \"# pdr_%d (\", PDR_ID (pdr));\n-\n-  switch (PDR_TYPE (pdr))\n+  if (verbosity > 1)\n     {\n-    case PDR_READ:\n-      fprintf (file, \"read \\n\");\n-      break;\n+      fprintf (file, \"# pdr_%d (\", PDR_ID (pdr));\n+\n+      switch (PDR_TYPE (pdr))\n+\t{\n+\tcase PDR_READ:\n+\t  fprintf (file, \"read \\n\");\n+\t  break;\n+\n+\tcase PDR_WRITE:\n+\t  fprintf (file, \"write \\n\");\n+\t  break;\n \n-    case PDR_WRITE:\n-      fprintf (file, \"write \\n\");\n-      break;\n+\tcase PDR_MAY_WRITE:\n+\t  fprintf (file, \"may_write \\n\");\n+\t  break;\n \n-    case PDR_MAY_WRITE:\n-      fprintf (file, \"may_write \\n\");\n-      break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n-    default:\n-      gcc_unreachable ();\n+      dump_data_reference (file, (data_reference_p) PDR_CDR (pdr));\n     }\n \n-  dump_data_reference (file, (data_reference_p) PDR_CDR (pdr));\n+  if (verbosity > 0)\n+    {\n+      fprintf (file, \"# data accesses (\\n\");\n+      print_pdr_access_layout (file, pdr);\n+    }\n \n-  fprintf (file, \"# data accesses (\\n\");\n-  print_pdr_access_layout (file, pdr);\n   ppl_print_powerset_matrix (file, PDR_ACCESSES (pdr));\n-  fprintf (file, \"#)\\n\");\n \n-  fprintf (file, \"#)\\n\");\n+  if (verbosity > 0)\n+    fprintf (file, \"#)\\n\");\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n }\n \n-/* Prints to STDERR the polyhedral data reference PDR.  */\n+/* Prints to STDERR the polyhedral data reference PDR, at some\n+   VERBOSITY level.  */\n \n void\n-debug_pdr (poly_dr_p pdr)\n+debug_pdr (poly_dr_p pdr, int verbosity)\n {\n-  print_pdr (stderr, pdr);\n+  print_pdr (stderr, pdr, verbosity);\n }\n \n /* Creates a new SCOP containing REGION.  */\n@@ -514,34 +547,38 @@ free_scop (scop_p scop)\n   XDELETE (scop);\n }\n \n-/* Print to FILE the domain of PBB.  */\n+/* Print to FILE the domain of PBB, at some VERBOSITY level.  */\n \n void\n-print_pbb_domain (FILE *file, poly_bb_p pbb)\n+print_pbb_domain (FILE *file, poly_bb_p pbb, int verbosity)\n {\n   graphite_dim_t i;\n   gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n \n   if (!PBB_DOMAIN (pbb))\n     return;\n \n-  fprintf (file, \"# Iteration domain of bb_%d (\\n\", GBB_BB (gbb)->index);\n-  fprintf (file, \"#  eq\");\n+  if (verbosity > 0)\n+    {\n+      fprintf (file, \"# Iteration domain of bb_%d (\\n\", GBB_BB (gbb)->index);\n+      fprintf (file, \"#  eq\");\n \n-  for (i = 0; i < pbb_dim_iter_domain (pbb); i++)\n-    fprintf (file, \"     i%d\", (int) i);\n+      for (i = 0; i < pbb_dim_iter_domain (pbb); i++)\n+\tfprintf (file, \"     i%d\", (int) i);\n \n-  for (i = 0; i < pbb_nb_params (pbb); i++)\n-    fprintf (file, \"     p%d\", (int) i);\n+      for (i = 0; i < pbb_nb_params (pbb); i++)\n+\tfprintf (file, \"     p%d\", (int) i);\n \n-  fprintf (file, \"    cst\\n\");\n+      fprintf (file, \"    cst\\n\");\n+    }\n \n   if (PBB_DOMAIN (pbb))\n     ppl_print_powerset_matrix (file, PBB_DOMAIN (pbb));\n   else\n     fprintf (file, \"0\\n\");\n \n-  fprintf (file, \"#)\\n\");\n+  if (verbosity > 0)\n+    fprintf (file, \"#)\\n\");\n }\n \n /* Dump the cases of a graphite basic block GBB on FILE.  */\n@@ -598,10 +635,11 @@ dump_gbb_conditions (FILE *file, gimple_bb_p gbb)\n   fprintf (file, \"#)\\n\");\n }\n \n-/* Print to FILE all the data references of PBB.  */\n+/* Print to FILE all the data references of PBB, at some VERBOSITY\n+   level.  */\n \n void\n-print_pdrs (FILE *file, poly_bb_p pbb)\n+print_pdrs (FILE *file, poly_bb_p pbb, int verbosity)\n {\n   int i;\n   poly_dr_p pdr;\n@@ -610,173 +648,264 @@ print_pdrs (FILE *file, poly_bb_p pbb)\n \n   if (VEC_length (poly_dr_p, PBB_DRS (pbb)) == 0)\n     {\n-      fprintf (file, \"# Access informations are not provided\\n0\\n\");\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Access informations are not provided\\n\");\\\n+      fprintf (file, \"0\\n\");\n       return;\n     }\n \n-  fprintf (file, \"# Data references (\\n\");\n-  fprintf (file, \"# Access informations are provided\\n1\\n\");\n+  if (verbosity > 1)\n+    fprintf (file, \"# Data references (\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Access informations are provided\\n\");\n+  fprintf (file, \"1\\n\");\n \n   for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb), i, pdr); i++)\n     if (PDR_TYPE (pdr) == PDR_READ)\n       nb_reads++;\n     else\n       nb_writes++;\n \n-  fprintf (file, \"# Read data references (\\n\");\n-  fprintf (file, \"# Read access informations\\n%d\\n\", nb_reads);\n+  if (verbosity > 1)\n+    fprintf (file, \"# Read data references (\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Read access informations\\n\");\n+  fprintf (file, \"%d\\n\", nb_reads);\n+\n   for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb), i, pdr); i++)\n     if (PDR_TYPE (pdr) == PDR_READ)\n-      print_pdr (file, pdr);\n-  fprintf (file, \"#)\\n\");\n+      print_pdr (file, pdr, verbosity);\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"# Write data references (\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Write access informations\\n\");\n+  fprintf (file, \"%d\\n\", nb_writes);\n \n-  fprintf (file, \"# Write data references (\\n\");\n-  fprintf (file, \"# Write access informations\\n%d\\n\", nb_writes);\n   for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb), i, pdr); i++)\n     if (PDR_TYPE (pdr) != PDR_READ)\n-      print_pdr (file, pdr);\n-  fprintf (file, \"#)\\n\");\n-  fprintf (file, \"#)\\n\");\n+      print_pdr (file, pdr, verbosity);\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n }\n \n /* Print to STDERR all the data references of PBB.  */\n \n void\n-debug_pdrs (poly_bb_p pbb)\n+debug_pdrs (poly_bb_p pbb, int verbosity)\n {\n-  print_pdrs (stderr, pbb);\n+  print_pdrs (stderr, pbb, verbosity);\n }\n \n-/* Print to FILE the body of PBB.  */\n+/* Print to FILE the body of PBB, at some VERBOSITY level.  */\n \n static void\n-print_pbb_body (FILE *file, poly_bb_p pbb)\n+print_pbb_body (FILE *file, poly_bb_p pbb, int verbosity)\n {\n-  fprintf (file, \"# Body (\\n\");\n-  fprintf (file, \"# Statement body is provided\\n1\\n\");\n-  fprintf (file, \"# Original iterator names\\n# Iterator names are not provided yet.\\n\");\n-  fprintf (file, \"# Statement body\\n\");\n+  if (verbosity > 1)\n+    fprintf (file, \"# Body (\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Statement body is provided\\n\");\n+  fprintf (file, \"1\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Original iterator names\\n# Iterator names are not provided yet.\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Statement body\\n\");\n+\n   fprintf (file, \"{\\n\");\n   dump_bb (pbb_bb (pbb), file, 0);\n   fprintf (file, \"}\\n\");\n-  fprintf (file, \"#)\\n\");\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n }\n \n-/* Print to FILE the domain and scattering function of PBB.  */\n+/* Print to FILE the domain and scattering function of PBB, at some\n+   VERBOSITY level.  */\n \n void\n-print_pbb (FILE *file, poly_bb_p pbb)\n+print_pbb (FILE *file, poly_bb_p pbb, int verbosity)\n {\n-  fprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n-  dump_gbb_conditions (file, PBB_BLACK_BOX (pbb));\n-  dump_gbb_cases (file, PBB_BLACK_BOX (pbb));\n-  print_pbb_domain (file, pbb);\n-  print_scattering_function (file, pbb);\n-  print_pdrs (file, pbb);\n-  print_pbb_body (file, pbb);\n-  fprintf (file, \"#)\\n\");\n+  if (verbosity > 1)\n+    {\n+      fprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n+      dump_gbb_conditions (file, PBB_BLACK_BOX (pbb));\n+      dump_gbb_cases (file, PBB_BLACK_BOX (pbb));\n+    }\n+\n+  print_pbb_domain (file, pbb, verbosity);\n+  print_scattering_function (file, pbb, verbosity);\n+  print_pdrs (file, pbb, verbosity);\n+  print_pbb_body (file, pbb, verbosity);\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n }\n \n-/* Print to FILE the parameters of SCOP.  */\n+/* Print to FILE the parameters of SCOP, at some VERBOSITY level.  */\n \n void\n-print_scop_params (FILE *file, scop_p scop)\n+print_scop_params (FILE *file, scop_p scop, int verbosity)\n {\n   int i;\n   tree t;\n \n-  fprintf (file, \"# parameters (\\n\");\n+  if (verbosity > 1)\n+    fprintf (file, \"# parameters (\\n\");\n \n   if (VEC_length (tree, SESE_PARAMS (SCOP_REGION (scop))))\n-    fprintf (file, \"# Parameter names are provided\\n1\\n# Parameter names\\n\");\n+    {\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Parameter names are provided\\n\");\n+\n+      fprintf (file, \"1\\n\");\n+\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Parameter names\\n\");\n+    }\n   else\n-    fprintf (file, \"# Parameter names are not provided\\n0\\n\");\n+    {\n+      if (verbosity > 0)\n+\tfprintf (file, \"# Parameter names are not provided\\n\");\n+      fprintf (file, \"0\\n\");\n+    }\n \n   for (i = 0; VEC_iterate (tree, SESE_PARAMS (SCOP_REGION (scop)), i, t); i++)\n     {\n       print_generic_expr (file, t, 0);\n       fprintf (file, \" \");\n     }\n-  fprintf (file, \"#)\\n\");\n+\n+  fprintf (file, \"\\n\");\n+\n+  if (verbosity > 1)\n+    fprintf (file, \"#)\\n\");\n }\n \n-/* Print to FILE the context of SCoP.  */\n+/* Print to FILE the context of SCoP, at some VERBOSITY level.  */\n+\n void\n-print_scop_context (FILE *file, scop_p scop)\n+print_scop_context (FILE *file, scop_p scop, int verbosity)\n {\n   graphite_dim_t i;\n \n-  fprintf (file, \"# Context (\\n\");\n-  fprintf (file, \"#  eq\");\n+  if (verbosity > 0)\n+    {\n+      fprintf (file, \"# Context (\\n\");\n+      fprintf (file, \"#  eq\");\n \n-  for (i = 0; i < scop_nb_params (scop); i++)\n-    fprintf (file, \"     p%d\", (int) i);\n+      for (i = 0; i < scop_nb_params (scop); i++)\n+\tfprintf (file, \"     p%d\", (int) i);\n \n-  fprintf (file, \"    cst\\n\");\n+      fprintf (file, \"    cst\\n\");\n+    }\n \n   if (SCOP_CONTEXT (scop))\n     ppl_print_powerset_matrix (file, SCOP_CONTEXT (scop));\n   else\n     fprintf (file, \"0 %d\\n\", (int) scop_nb_params (scop) + 2);\n \n-  fprintf (file, \"# )\\n\");\n+  if (verbosity > 0)\n+    fprintf (file, \"# )\\n\");\n }\n \n-/* Print to FILE the SCOP.  */\n+/* Print to FILE the SCOP, at some VERBOSITY level.  */\n \n void\n-print_scop (FILE *file, scop_p scop)\n+print_scop (FILE *file, scop_p scop, int verbosity)\n {\n   int i;\n   poly_bb_p pbb;\n \n   fprintf (file, \"SCoP #(\\n\");\n   fprintf (file, \"# Language\\nGimple\\n\");\n-  print_scop_context (file, scop);\n-  print_scop_params (file, scop);\n-  fprintf (file, \"# Number of statements\\n%d\\n\",\n-\t   VEC_length (poly_bb_p, SCOP_BBS (scop)));\n+  print_scop_context (file, scop, verbosity);\n+  print_scop_params (file, scop, verbosity);\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Number of statements\\n\");\n+\n+  fprintf (file, \"%d\\n\",VEC_length (poly_bb_p, SCOP_BBS (scop)));\n \n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n-    print_pbb (file, pbb);\n+    print_pbb (file, pbb, verbosity);\n \n-  fprintf (file, \"# original_lst (\\n\");\n-  print_lst (file, SCOP_ORIGINAL_SCHEDULE (scop), 0);\n-  fprintf (file, \"\\n#)\\n\");\n+  if (verbosity > 1)\n+    {\n+      fprintf (file, \"# original_lst (\\n\");\n+      print_lst (file, SCOP_ORIGINAL_SCHEDULE (scop), 0);\n+      fprintf (file, \"\\n#)\\n\");\n \n-  fprintf (file, \"# transformed_lst (\\n\");\n-  print_lst (file, SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n-  fprintf (file, \"\\n#)\\n\");\n+      fprintf (file, \"# transformed_lst (\\n\");\n+      print_lst (file, SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n+      fprintf (file, \"\\n#)\\n\");\n+    }\n \n   fprintf (file, \"#)\\n\");\n }\n \n-/* Print to FILE the input file that CLooG would expect as input.  */\n+/* Print to FILE the input file that CLooG would expect as input, at\n+   some VERBOSITY level.  */\n \n void\n-print_cloog (FILE *file, scop_p scop)\n+print_cloog (FILE *file, scop_p scop, int verbosity)\n {\n   int i;\n   poly_bb_p pbb;\n \n   fprintf (file, \"# SCoP (generated by GCC/Graphite\\n\");\n-  fprintf (file, \"# CLooG output language\\nc\\n\");\n-  print_scop_context (file, scop);\n-  print_scop_params (file, scop);\n-  fprintf (file, \"# Number of statements\\n%d\\n\",\n-\t   VEC_length (poly_bb_p, SCOP_BBS (scop)));\n+  if (verbosity > 0)\n+    fprintf (file, \"# CLooG output language\\n\");\n+  fprintf (file, \"c\\n\");\n+\n+  print_scop_context (file, scop, verbosity);\n+  print_scop_params (file, scop, verbosity);\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Number of statements\\n\");\n+\n+  fprintf (file, \"%d\\n\", VEC_length (poly_bb_p, SCOP_BBS (scop)));\n \n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n     {\n-      fprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n-      print_pbb_domain (file, pbb);\n-      fprintf (file, \"0 0 0 # For future CLooG options.\\n#)\\n\");\n+      if (verbosity > 1)\n+\tfprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n+\n+      print_pbb_domain (file, pbb, verbosity);\n+      fprintf (file, \"0 0 0\");\n+\n+      if (verbosity > 0)\n+\tfprintf (file, \"# For future CLooG options.\\n\");\n+      else\n+\tfprintf (file, \"\\n\");\n+\n+      if (verbosity > 1)\n+\tfprintf (file, \"#)\\n\");\n     }\n \n-  fprintf (file, \"0 # Don't set the iterator names.\\n\");\n+  fprintf (file, \"0\");\n+  if (verbosity > 0)\n+    fprintf (file, \"# Don't set the iterator names.\\n\");\n+  else\n+    fprintf (file, \"\\n\");\n+\n+  if (verbosity > 0)\n+    fprintf (file, \"# Number of scattering functions\\n\");\n \n-  fprintf (file, \"# Number of scattering functions\\n%d\\n\",\n-\t   VEC_length (poly_bb_p, SCOP_BBS (scop)));\n+  fprintf (file, \"%d\\n\", VEC_length (poly_bb_p, SCOP_BBS (scop)));\n   unify_scattering_dimensions (scop);\n \n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n@@ -786,61 +915,73 @@ print_cloog (FILE *file, scop_p scop)\n \t       || PBB_ORIGINAL_SCATTERING (pbb)))\n \tcontinue;\n \n-      fprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n-      print_scattering_function_1 (file, pbb);\n-      fprintf (file, \"#)\\n\");\n+      if (verbosity > 1)\n+\tfprintf (file, \"# pbb_%d (\\n\", pbb_index (pbb));\n+\n+      print_scattering_function_1 (file, pbb, verbosity);\n+\n+      if (verbosity > 1)\n+\tfprintf (file, \"#)\\n\");\n     }\n \n-  fprintf (file, \"0 # Don't set the scattering dimension names.\\n\");\n+  fprintf (file, \"0\");\n+  if (verbosity > 0)\n+    fprintf (file, \"# Don't set the scattering dimension names.\\n\");\n+  else\n+    fprintf (file, \"\\n\");\n+\n   fprintf (file, \"#)\\n\");\n }\n \n-/* Print to STDERR the domain of PBB.  */\n+/* Print to STDERR the domain of PBB, at some VERBOSITY level.  */\n \n void\n-debug_pbb_domain (poly_bb_p pbb)\n+debug_pbb_domain (poly_bb_p pbb, int verbosity)\n {\n-  print_pbb_domain (stderr, pbb);\n+  print_pbb_domain (stderr, pbb, verbosity);\n }\n \n-/* Print to FILE the domain and scattering function of PBB.  */\n+/* Print to FILE the domain and scattering function of PBB, at some\n+   VERBOSITY level.  */\n \n void\n-debug_pbb (poly_bb_p pbb)\n+debug_pbb (poly_bb_p pbb, int verbosity)\n {\n-  print_pbb (stderr, pbb);\n+  print_pbb (stderr, pbb, verbosity);\n }\n \n-/* Print to STDERR the context of SCOP.  */\n+/* Print to STDERR the context of SCOP, at some VERBOSITY level.  */\n \n void\n-debug_scop_context (scop_p scop)\n+debug_scop_context (scop_p scop, int verbosity)\n {\n-  print_scop_context (stderr, scop);\n+  print_scop_context (stderr, scop, verbosity);\n }\n \n-/* Print to STDERR the SCOP.  */\n+/* Print to STDERR the SCOP, at some VERBOSITY level.  */\n \n void\n-debug_scop (scop_p scop)\n+debug_scop (scop_p scop, int verbosity)\n {\n-  print_scop (stderr, scop);\n+  print_scop (stderr, scop, verbosity);\n }\n \n-/* Print to STDERR the SCOP under CLooG format.  */\n+/* Print to STDERR the SCOP under CLooG format, at some VERBOSITY\n+   level.  */\n \n void\n-debug_cloog (scop_p scop)\n+debug_cloog (scop_p scop, int verbosity)\n {\n-  print_cloog (stderr, scop);\n+  print_cloog (stderr, scop, verbosity);\n }\n \n-/* Print to STDERR the parameters of SCOP.  */\n+/* Print to STDERR the parameters of SCOP, at some VERBOSITY\n+   level.  */\n \n void\n-debug_scop_params (scop_p scop)\n+debug_scop_params (scop_p scop, int verbosity)\n {\n-  print_scop_params (stderr, scop);\n+  print_scop_params (stderr, scop, verbosity);\n }\n \n "}, {"sha": "23e18908f58d4292e55cc998c3dcbdb45cb91213", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf935e85b60e7d110d028bf975558589abef8c/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=40bf935e85b60e7d110d028bf975558589abef8c", "patch": "@@ -155,8 +155,8 @@ struct poly_dr\n void new_poly_dr (poly_bb_p, int, ppl_Pointset_Powerset_C_Polyhedron_t,\n \t\t  enum poly_dr_type, void *, graphite_dim_t);\n void free_poly_dr (poly_dr_p);\n-void debug_pdr (poly_dr_p);\n-void print_pdr (FILE *, poly_dr_p);\n+void debug_pdr (poly_dr_p, int);\n+void print_pdr (FILE *, poly_dr_p, int);\n static inline scop_p pdr_scop (poly_dr_p pdr);\n \n /* The dimension of the PDR_ACCESSES polyhedron of PDR.  */\n@@ -346,24 +346,24 @@ extern void new_poly_bb (scop_p, void *, bool);\n extern void free_poly_bb (poly_bb_p);\n extern void debug_loop_vec (poly_bb_p);\n extern void schedule_to_scattering (poly_bb_p, int);\n-extern void print_pbb_domain (FILE *, poly_bb_p);\n-extern void print_pbb (FILE *, poly_bb_p);\n-extern void print_scop_context (FILE *, scop_p);\n-extern void print_scop (FILE *, scop_p);\n-extern void print_cloog (FILE *, scop_p);\n-extern void debug_pbb_domain (poly_bb_p);\n-extern void debug_pbb (poly_bb_p);\n-extern void print_pdrs (FILE *, poly_bb_p);\n-extern void debug_pdrs (poly_bb_p);\n-extern void debug_scop_context (scop_p);\n-extern void debug_scop (scop_p);\n-extern void debug_cloog (scop_p);\n-extern void print_scop_params (FILE *, scop_p);\n-extern void debug_scop_params (scop_p);\n-extern void print_iteration_domain (FILE *, poly_bb_p);\n-extern void print_iteration_domains (FILE *, scop_p);\n-extern void debug_iteration_domain (poly_bb_p);\n-extern void debug_iteration_domains (scop_p);\n+extern void print_pbb_domain (FILE *, poly_bb_p, int);\n+extern void print_pbb (FILE *, poly_bb_p, int);\n+extern void print_scop_context (FILE *, scop_p, int);\n+extern void print_scop (FILE *, scop_p, int);\n+extern void print_cloog (FILE *, scop_p, int);\n+extern void debug_pbb_domain (poly_bb_p, int);\n+extern void debug_pbb (poly_bb_p, int);\n+extern void print_pdrs (FILE *, poly_bb_p, int);\n+extern void debug_pdrs (poly_bb_p, int);\n+extern void debug_scop_context (scop_p, int);\n+extern void debug_scop (scop_p, int);\n+extern void debug_cloog (scop_p, int);\n+extern void print_scop_params (FILE *, scop_p, int);\n+extern void debug_scop_params (scop_p, int);\n+extern void print_iteration_domain (FILE *, poly_bb_p, int);\n+extern void print_iteration_domains (FILE *, scop_p, int);\n+extern void debug_iteration_domain (poly_bb_p, int);\n+extern void debug_iteration_domains (scop_p, int);\n extern bool scop_do_interchange (scop_p);\n extern bool scop_do_strip_mine (scop_p);\n extern bool scop_do_block (scop_p);\n@@ -1338,10 +1338,10 @@ extern void free_scop (scop_p);\n extern void free_scops (VEC (scop_p, heap) *);\n extern void print_generated_program (FILE *, scop_p);\n extern void debug_generated_program (scop_p);\n-extern void print_scattering_function (FILE *, poly_bb_p);\n-extern void print_scattering_functions (FILE *, scop_p);\n-extern void debug_scattering_function (poly_bb_p);\n-extern void debug_scattering_functions (scop_p);\n+extern void print_scattering_function (FILE *, poly_bb_p, int);\n+extern void print_scattering_functions (FILE *, scop_p, int);\n+extern void debug_scattering_function (poly_bb_p, int);\n+extern void debug_scattering_functions (scop_p, int);\n extern int scop_max_loop_depth (scop_p);\n extern int unify_scattering_dimensions (scop_p);\n extern bool apply_poly_transforms (scop_p);"}]}