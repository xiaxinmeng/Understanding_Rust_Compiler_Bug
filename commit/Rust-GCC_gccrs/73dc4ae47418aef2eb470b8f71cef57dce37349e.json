{"sha": "73dc4ae47418aef2eb470b8f71cef57dce37349e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkYzRhZTQ3NDE4YWVmMmViNDcwYjhmNzFjZWY1N2RjZTM3MzQ5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T12:56:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T12:56:47Z"}, "message": "combine: Fix find_split_point handling of constant store into ZERO_EXTRACT [PR93908]\n\ngit is miscompiled on s390x-linux with -O2 -march=zEC12 -mtune=z13.\nI've managed to reduce it into the following testcase.  The problem is that\nduring combine we see the s->k = -1; bitfield store and change the SET_SRC\nfrom a pseudo into a constant:\n(set (zero_extract:DI (mem/j:HI (plus:DI (reg/v/f:DI 60 [ s ])\n                (const_int 10 [0xa])) [0 +0 S2 A16])\n        (const_int 2 [0x2])\n        (const_int 7 [0x7]))\n    (const_int -1 [0xffffffffffffffff]))\nThis on s390x with the above option isn't recognized as valid instruction,\nso find_split_point decides to handle it as IOR or IOR/AND.\nsrc is -1, mask is 3 and pos is 7.\nsrc != mask (this is also incorrect, we want to set all (both) bits in the\nbitfield), so we go for IOR/AND, but instead of trying\nmem = (mem & ~0x180) | ((-1 << 7) & 0x180)\nwe actually try\nmem = (mem & ~0x180) | (-1 << 7)\nand that is further simplified into:\nmem = mem | (-1 << 7)\naka\nmem = mem | 0xff80\nwhich doesn't set just the 2-bit bitfield, but also many other bitfields\nthat shouldn't be touched.\nWe really should do:\nmem = mem | 0x180\ninstead.\nThe problem is that we assume that no bits but those low len (2 here) will\nbe set in the SET_SRC, but there is nothing that can prevent that, we just\nshould ignore the other bits.\n\nThe following patch fixes it by masking src with mask, this way already\nthe src == mask test will DTRT, and as the code for or_mask uses\ngen_int_mode, if the most significant bit is set after shifting it left by\npos, it will be properly sign-extended.\n\n2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/93908\n\t* combine.c (find_split_point): For store into ZERO_EXTRACT, and src\n\twith mask.\n\n\t* gcc.c-torture/execute/pr93908.c: New test.", "tree": {"sha": "677689f5c0083720bb8ef142a25d1089268d251e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/677689f5c0083720bb8ef142a25d1089268d251e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73dc4ae47418aef2eb470b8f71cef57dce37349e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc4ae47418aef2eb470b8f71cef57dce37349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73dc4ae47418aef2eb470b8f71cef57dce37349e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc4ae47418aef2eb470b8f71cef57dce37349e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de946e65c9558515a2c31be76853ae7653d4fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de946e65c9558515a2c31be76853ae7653d4fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de946e65c9558515a2c31be76853ae7653d4fc9"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "78a8d94eab9ce6ba144a9359a7fed2878bdb3f07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73dc4ae47418aef2eb470b8f71cef57dce37349e", "patch": "@@ -1,3 +1,9 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/93908\n+\t* combine.c (find_split_point): For store into ZERO_EXTRACT, and src\n+\twith mask.\n+\n 2019-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (dwarf2out_size_function): Run in early-DWARF mode."}, {"sha": "58366a6d3316eb10c96a810e1275f90a6c878f03", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=73dc4ae47418aef2eb470b8f71cef57dce37349e", "patch": "@@ -5130,10 +5130,9 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \t{\n \t  HOST_WIDE_INT pos = INTVAL (XEXP (SET_DEST (x), 2));\n \t  unsigned HOST_WIDE_INT len = INTVAL (XEXP (SET_DEST (x), 1));\n-\t  unsigned HOST_WIDE_INT src = INTVAL (SET_SRC (x));\n \t  rtx dest = XEXP (SET_DEST (x), 0);\n-\t  unsigned HOST_WIDE_INT mask\n-\t    = (HOST_WIDE_INT_1U << len) - 1;\n+\t  unsigned HOST_WIDE_INT mask = (HOST_WIDE_INT_1U << len) - 1;\n+\t  unsigned HOST_WIDE_INT src = INTVAL (SET_SRC (x)) & mask;\n \t  rtx or_mask;\n \n \t  if (BITS_BIG_ENDIAN)"}, {"sha": "922ae5c4b7a4a3eced048525d504ffb9387c8151", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73dc4ae47418aef2eb470b8f71cef57dce37349e", "patch": "@@ -1,3 +1,8 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/93908\n+\t* gcc.c-torture/execute/pr93908.c: New test.\n+\n 2019-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/lto24.adb: New test."}, {"sha": "cb6e3dda2eaf4e8888de3c5d59bc894d8c4a6ba2", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93908.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93908.c?ref=73dc4ae47418aef2eb470b8f71cef57dce37349e", "patch": "@@ -0,0 +1,54 @@\n+/* PR rtl-optimization/93908 */\n+\n+struct T\n+{\n+  int b;\n+  int c;\n+  unsigned short d;\n+  unsigned e:1, f:1, g:1, h:2, i:1, j:1;\n+  signed int k:2;\n+};\n+\n+struct S\n+{\n+  struct T s;\n+  char c[64];\n+} buf[2];\n+\n+__attribute__ ((noipa)) void *\n+baz (void)\n+{\n+  static int cnt;\n+  return (void *) &buf[cnt++];\n+}\n+\n+static inline __attribute__ ((always_inline)) struct T *\n+bar (const char *a)\n+{\n+  struct T *s;\n+  s = baz ();\n+  s->b = 1;\n+  s->k = -1;\n+  return s;\n+}\n+\n+__attribute__ ((noipa)) void\n+foo (const char *x, struct T **y)\n+{\n+  struct T *l = bar (x);\n+  struct T *m = bar (x);\n+  y[0] = l;\n+  y[1] = m;\n+}\n+\n+int\n+main ()\n+{\n+  struct T *r[2];\n+  foo (\"foo\", r);\n+  if (r[0]->e || r[0]->f || r[0]->g || r[0]->h || r[0]->i || r[0]->j || r[0]->k != -1)\n+    __builtin_abort ();\n+  if (r[1]->e || r[1]->f || r[1]->g || r[1]->h || r[1]->i || r[1]->j || r[1]->k != -1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e5949050a08fb9320d703d3e8a68a429a0318683", "filename": "gcc/testsuite/gcc.target/s390/pr93908.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr93908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc4ae47418aef2eb470b8f71cef57dce37349e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr93908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr93908.c?ref=73dc4ae47418aef2eb470b8f71cef57dce37349e", "patch": "@@ -0,0 +1,5 @@\n+/* PR rtl-optimization/93908 */\n+/* { dg-do run { target s390_zEC12_hw } } */\n+/* { dg-options \"-O2 -march=zEC12 -mtune=z13\" } */\n+\n+#include \"../../gcc.c-torture/execute/pr93908.c\""}]}