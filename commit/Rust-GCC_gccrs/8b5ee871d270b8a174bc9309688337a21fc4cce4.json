{"sha": "8b5ee871d270b8a174bc9309688337a21fc4cce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZWU4NzFkMjcwYjhhMTc0YmM5MzA5Njg4MzM3YTIxZmM0Y2NlNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-07-06T18:19:41Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-07-06T18:19:41Z"}, "message": "match.pd: Remove element_mode inside HONOR_*.\n\n2015-07-06  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* match.pd: Remove element_mode inside HONOR_*.\n\t(~ (-A) -> A - 1, ~ (A - 1) -> -A): Handle complex types.\n\t(~X | X -> -1, ~X ^ X -> -1): Merge.\n\t* tree.c (build_each_one_cst): New function.\n\t* tree.h (build_each_one_cst): Likewise.\n\nFrom-SVN: r225473", "tree": {"sha": "9b00cc78be393b3fe6c2a7993ef46913e3db86b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b00cc78be393b3fe6c2a7993ef46913e3db86b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5ee871d270b8a174bc9309688337a21fc4cce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5ee871d270b8a174bc9309688337a21fc4cce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5ee871d270b8a174bc9309688337a21fc4cce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5ee871d270b8a174bc9309688337a21fc4cce4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45cef0e94d10063aa847530d5e8ba79bb320be28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45cef0e94d10063aa847530d5e8ba79bb320be28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45cef0e94d10063aa847530d5e8ba79bb320be28"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "2eeb6c555a9ce7fb6d514459694cb5d766b7580c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b5ee871d270b8a174bc9309688337a21fc4cce4", "patch": "@@ -1,3 +1,11 @@\n+2015-07-06  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd: Remove element_mode inside HONOR_*.\n+\t(~ (-A) -> A - 1, ~ (A - 1) -> -A): Handle complex types.\n+\t(~X | X -> -1, ~X ^ X -> -1): Merge.\n+\t* tree.c (build_each_one_cst): New function.\n+\t* tree.h (build_each_one_cst): Likewise.\n+\n 2015-07-06  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* config.gcc <mips*-*-*>: Add fused-madd.opt."}, {"sha": "53e911a20aa649a2f4ea7e7754fd5a982c127d55", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8b5ee871d270b8a174bc9309688337a21fc4cce4", "patch": "@@ -101,23 +101,23 @@ along with GCC; see the file COPYING3.  If not see\n    negative value by 0 gives -0, not +0.  */\n (simplify\n  (mult @0 real_zerop@1)\n- (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (element_mode (type)))\n+ (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))\n   @1))\n \n /* In IEEE floating point, x*1 is not equivalent to x for snans.\n    Likewise for complex arithmetic with signed zeros.  */\n (simplify\n  (mult @0 real_onep)\n- (if (!HONOR_SNANS (element_mode (type))\n-      && (!HONOR_SIGNED_ZEROS (element_mode (type))\n+ (if (!HONOR_SNANS (type)\n+      && (!HONOR_SIGNED_ZEROS (type)\n           || !COMPLEX_FLOAT_TYPE_P (type)))\n   (non_lvalue @0)))\n \n /* Transform x * -1.0 into -x.  */\n (simplify\n  (mult @0 real_minus_onep)\n-  (if (!HONOR_SNANS (element_mode (type))\n-       && (!HONOR_SIGNED_ZEROS (element_mode (type))\n+  (if (!HONOR_SNANS (type)\n+       && (!HONOR_SIGNED_ZEROS (type)\n            || !COMPLEX_FLOAT_TYPE_P (type)))\n    (negate @0)))\n \n@@ -165,7 +165,7 @@ along with GCC; see the file COPYING3.  If not see\n  (rdiv @0 @0)\n  (if (FLOAT_TYPE_P (type)\n       && ! HONOR_NANS (type)\n-      && ! HONOR_INFINITIES (element_mode (type)))\n+      && ! HONOR_INFINITIES (type))\n   { build_one_cst (type); }))\n \n /* Optimize -A / A to -1.0 if we don't care about\n@@ -174,19 +174,19 @@ along with GCC; see the file COPYING3.  If not see\n  (rdiv:c @0 (negate @0))\n  (if (FLOAT_TYPE_P (type)\n       && ! HONOR_NANS (type)\n-      && ! HONOR_INFINITIES (element_mode (type)))\n+      && ! HONOR_INFINITIES (type))\n   { build_minus_one_cst (type); }))\n \n /* In IEEE floating point, x/1 is not equivalent to x for snans.  */\n (simplify\n  (rdiv @0 real_onep)\n- (if (!HONOR_SNANS (element_mode (type)))\n+ (if (!HONOR_SNANS (type))\n   (non_lvalue @0)))\n \n /* In IEEE floating point, x/-1 is not equivalent to -x for snans.  */\n (simplify\n  (rdiv @0 real_minus_onep)\n- (if (!HONOR_SNANS (element_mode (type)))\n+ (if (!HONOR_SNANS (type))\n   (negate @0)))\n \n /* If ARG1 is a constant, we can convert this to a multiply by the\n@@ -297,9 +297,12 @@ along with GCC; see the file COPYING3.  If not see\n   @1)\n \n /* ~x | x -> -1 */\n-(simplify\n- (bit_ior:c (convert? @0) (convert? (bit_not @0)))\n- (convert { build_all_ones_cst (TREE_TYPE (@0)); }))\n+/* ~x ^ x -> -1 */\n+/* ~x + x -> -1 */\n+(for op (bit_ior bit_xor plus)\n+ (simplify\n+  (op:c (convert? @0) (convert? (bit_not @0)))\n+  (convert { build_all_ones_cst (TREE_TYPE (@0)); })))\n \n /* x ^ x -> 0 */\n (simplify\n@@ -311,11 +314,6 @@ along with GCC; see the file COPYING3.  If not see\n   (bit_xor @0 integer_all_onesp@1)\n   (bit_not @0))\n \n-/* ~X ^ X is -1.  */\n-(simplify\n- (bit_xor:c (bit_not @0) @0)\n- { build_all_ones_cst (type); })\n-\n /* x & ~0 -> x  */\n (simplify\n  (bit_and @0 integer_all_onesp)\n@@ -604,11 +602,11 @@ along with GCC; see the file COPYING3.  If not see\n (simplify\n  (bit_not (convert? (negate @0)))\n  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n-  (convert (minus @0 { build_one_cst (TREE_TYPE (@0)); }))))\n+  (convert (minus @0 { build_each_one_cst (TREE_TYPE (@0)); }))))\n \n /* Convert ~ (A - 1) or ~ (A + -1) to -A.  */\n (simplify\n- (bit_not (convert? (minus @0 integer_onep)))\n+ (bit_not (convert? (minus @0 integer_each_onep)))\n  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n   (convert (negate @0))))\n (simplify"}, {"sha": "c0e2b0a2f13a06e38a6adea0ecf905f535deacd7", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8b5ee871d270b8a174bc9309688337a21fc4cce4", "patch": "@@ -1968,6 +1968,21 @@ build_complex (tree type, tree real, tree imag)\n   return t;\n }\n \n+/* Return the constant 1 in type TYPE.  If TYPE has several elements, each\n+   element is set to 1.  In particular, this is 1 + i for complex types.  */\n+\n+tree\n+build_each_one_cst (tree type)\n+{\n+  if (TREE_CODE (type) == COMPLEX_TYPE)\n+    {\n+      tree scalar = build_one_cst (TREE_TYPE (type));\n+      return build_complex (type, scalar, scalar);\n+    }\n+  else\n+    return build_one_cst (type);\n+}\n+\n /* Return a constant of arithmetic type TYPE which is the\n    multiplicative identity of the set TYPE.  */\n "}, {"sha": "6df22177fc22bb0209d119434c1931228908b59c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5ee871d270b8a174bc9309688337a21fc4cce4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8b5ee871d270b8a174bc9309688337a21fc4cce4", "patch": "@@ -3772,6 +3772,7 @@ extern tree build_constructor_from_list (tree, tree);\n extern tree build_constructor_va (tree, int, ...);\n extern tree build_real_from_int_cst (tree, const_tree);\n extern tree build_complex (tree, tree, tree);\n+extern tree build_each_one_cst (tree);\n extern tree build_one_cst (tree);\n extern tree build_minus_one_cst (tree);\n extern tree build_all_ones_cst (tree);"}]}