{"sha": "ad4677300609cb5013481c5d0902da1ffda1ccc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0Njc3MzAwNjA5Y2I1MDEzNDgxYzVkMDkwMmRhMWZmZGExY2NjNg==", "commit": {"author": {"name": "Neil Vachharajani", "email": "nvachhar@google.com", "date": "2009-10-02T20:21:43Z"}, "committer": {"name": "Neil Vachharajani", "email": "nvachhar@gcc.gnu.org", "date": "2009-10-02T20:21:43Z"}, "message": "gcov-io.c (gcov_open): Open files read-only when MODE < 0\n\n2009-10-02  Neil Vachharajani  <nvachhar@google.com>\n\n       * gcov-io.c (gcov_open): Open files read-only when MODE < 0\n\nFrom-SVN: r152419", "tree": {"sha": "4c3eae413ad3771ef681630614a5c1d96393a415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3eae413ad3771ef681630614a5c1d96393a415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4677300609cb5013481c5d0902da1ffda1ccc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4677300609cb5013481c5d0902da1ffda1ccc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4677300609cb5013481c5d0902da1ffda1ccc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4677300609cb5013481c5d0902da1ffda1ccc6/comments", "author": null, "committer": null, "parents": [{"sha": "5004b2347d2b300302d11dcf95e53e610c6c33aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5004b2347d2b300302d11dcf95e53e610c6c33aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5004b2347d2b300302d11dcf95e53e610c6c33aa"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "c13fe4fa87b88f8c5d54e64a1977104a2786c60a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4677300609cb5013481c5d0902da1ffda1ccc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4677300609cb5013481c5d0902da1ffda1ccc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad4677300609cb5013481c5d0902da1ffda1ccc6", "patch": "@@ -1,3 +1,7 @@\n+2009-10-02  Neil Vachharajani  <nvachhar@google.com>\n+\n+\t* gcov-io.c (gcov_open): Open files read-only when MODE < 0\n+\n 2009-10-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (divmod<mode>4) Macroize expander from"}, {"sha": "d736cf853d4dc194fabd09f7f2fa52720e75e1b3", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4677300609cb5013481c5d0902da1ffda1ccc6/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4677300609cb5013481c5d0902da1ffda1ccc6/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=ad4677300609cb5013481c5d0902da1ffda1ccc6", "patch": "@@ -46,11 +46,13 @@ static inline gcov_unsigned_t from_file (gcov_unsigned_t value)\n \n /* Open a gcov file. NAME is the name of the file to open and MODE\n    indicates whether a new file should be created, or an existing file\n-   opened for modification. If MODE is >= 0 an existing file will be\n-   opened, if possible, and if MODE is <= 0, a new file will be\n-   created. Use MODE=0 to attempt to reopen an existing file and then\n-   fall back on creating a new one.  Return zero on failure, >0 on\n-   opening an existing file and <0 on creating a new one.  */\n+   opened. If MODE is >= 0 an existing file will be opened, if\n+   possible, and if MODE is <= 0, a new file will be created. Use\n+   MODE=0 to attempt to reopen an existing file and then fall back on\n+   creating a new one.  If MODE < 0, the file will be opened in\n+   read-only mode.  Otherwise it will be opened for modification.\n+   Return zero on failure, >0 on opening an existing file and <0 on\n+   creating a new one.  */\n \n GCOV_LINKAGE int\n #if IN_LIBGCOV\n@@ -66,7 +68,6 @@ gcov_open (const char *name, int mode)\n   struct flock s_flock;\n   int fd;\n \n-  s_flock.l_type = F_WRLCK;\n   s_flock.l_whence = SEEK_SET;\n   s_flock.l_start = 0;\n   s_flock.l_len = 0; /* Until EOF.  */\n@@ -83,16 +84,25 @@ gcov_open (const char *name, int mode)\n #endif\n #if GCOV_LOCKED\n   if (mode > 0)\n-    fd = open (name, O_RDWR);\n+    {\n+      /* Read-only mode - acquire a read-lock.  */\n+      s_flock.l_type = F_RDLCK;\n+      fd = open (name, O_RDONLY);\n+    }\n   else\n-    fd = open (name, O_RDWR | O_CREAT, 0666);\n+    {\n+      /* Write mode - acquire a write-lock.  */\n+      s_flock.l_type = F_WRLCK;\n+      fd = open (name, O_RDWR | O_CREAT, 0666);\n+    }\n   if (fd < 0)\n     return 0;\n \n   while (fcntl (fd, F_SETLKW, &s_flock) && errno == EINTR)\n     continue;\n \n-  gcov_var.file = fdopen (fd, \"r+b\");\n+  gcov_var.file = fdopen (fd, (mode > 0) ? \"rb\" : \"r+b\");\n+\n   if (!gcov_var.file)\n     {\n       close (fd);\n@@ -120,7 +130,8 @@ gcov_open (const char *name, int mode)\n     gcov_var.mode = mode * 2 + 1;\n #else\n   if (mode >= 0)\n-    gcov_var.file = fopen (name, \"r+b\");\n+    gcov_var.file = fopen (name, (mode > 0) ? \"rb\" : \"r+b\");\n+\n   if (gcov_var.file)\n     gcov_var.mode = 1;\n   else if (mode <= 0)"}]}