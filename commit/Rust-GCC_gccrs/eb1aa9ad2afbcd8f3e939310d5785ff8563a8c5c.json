{"sha": "eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxYWE5YWQyYWZiY2Q4ZjNlOTM5MzEwZDU3ODVmZjg1NjNhOGM1Yw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-06T13:11:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-06T13:11:44Z"}, "message": "libstdc++: Implement LWG 3533 changes to foo_view::iterator::base()\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (filter_view::_Iterator::base): Make the\n\tconst& overload unconstrained and return a const reference as\n\tper LWG 3533.  Make unconditionally noexcept.\n\t(transform_view::_Iterator::base): Likewise.\n\t(elements_view::_Iterator::base): Likewise.", "tree": {"sha": "dcc6d294f6a689914d75b6feeb693ca03a6b8f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc6d294f6a689914d75b6feeb693ca03a6b8f41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c/comments", "author": null, "committer": null, "parents": [{"sha": "08f3287eefea1d7c244db795d018870e8148d1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f3287eefea1d7c244db795d018870e8148d1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f3287eefea1d7c244db795d018870e8148d1c8"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "48100e9d7f2fcc6be3fc694c218a15b42cd905fa", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=eb1aa9ad2afbcd8f3e939310d5785ff8563a8c5c", "patch": "@@ -1182,9 +1182,8 @@ namespace views::__adaptor\n \t    _M_parent(__parent)\n \t{ }\n \n-\tconstexpr _Vp_iter\n-\tbase() const &\n-\t  requires copyable<_Vp_iter>\n+\tconstexpr const _Vp_iter&\n+\tbase() const & noexcept\n \t{ return _M_current; }\n \n \tconstexpr _Vp_iter\n@@ -1450,9 +1449,8 @@ namespace views::__adaptor\n \t    : _M_current(std::move(__i._M_current)), _M_parent(__i._M_parent)\n \t  { }\n \n-\t  constexpr _Base_iter\n-\t  base() const &\n-\t    requires copyable<_Base_iter>\n+\t  constexpr const _Base_iter&\n+\t  base() const & noexcept\n \t  { return _M_current; }\n \n \t  constexpr _Base_iter\n@@ -3386,8 +3384,8 @@ namespace views::__adaptor\n \t: _M_base(std::move(base))\n       { }\n \n-      constexpr _Vp\n-      base() const& requires copy_constructible<_Vp>\n+      constexpr const _Vp&\n+      base() const & noexcept\n       { return _M_base; }\n \n       constexpr _Vp"}]}