{"sha": "410675cb63466d8de9ad590521f0766b012d2475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwNjc1Y2I2MzQ2NmQ4ZGU5YWQ1OTA1MjFmMDc2NmIwMTJkMjQ3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T09:26:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T09:26:22Z"}, "message": "builtins: Avoid useless char/short -> int promotions before atomics [PR96176]\n\nAs mentioned in the PR, we generate a useless movzbl insn before lock cmpxchg.\nThe problem is that the builtin for the char/short cases has the arguments\npromoted to int and combine gives up, because the instructions have\nMEM_VOLATILE_P arguments and recog in that case doesn't recognize anything\nwhen volatile_ok is false, and nothing afterwards optimizes the\n(reg:SI a) = (zero_extend:SI (reg:QI a))\n... (subreg:QI (reg:SI a) 0) ...\n\nThe following patch fixes it at expansion time, we already have a function\nthat is meant to undo the promotion, so this just adds the very common case\nto that.\n\n2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96176\n\t* builtins.c: Include gimple-ssa.h, tree-ssa-live.h and\n\ttree-outof-ssa.h.\n\t(expand_expr_force_mode): If exp is a SSA_NAME with different mode\n\tfrom MODE and get_gimple_for_ssa_name is a cast from MODE, use the\n\tcast's rhs.\n\n\t* gcc.target/i386/pr96176.c: New test.", "tree": {"sha": "7abbcf66e3de58b3bf89a06714571c0f37a4570f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abbcf66e3de58b3bf89a06714571c0f37a4570f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410675cb63466d8de9ad590521f0766b012d2475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410675cb63466d8de9ad590521f0766b012d2475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410675cb63466d8de9ad590521f0766b012d2475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410675cb63466d8de9ad590521f0766b012d2475/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9fd18598e638b55c591624e753fb7a88abe1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9fd18598e638b55c591624e753fb7a88abe1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9fd18598e638b55c591624e753fb7a88abe1ab"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "eb662112b32e5ad377d2a865d9977c64dc12cc93", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410675cb63466d8de9ad590521f0766b012d2475/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410675cb63466d8de9ad590521f0766b012d2475/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=410675cb63466d8de9ad590521f0766b012d2475", "patch": "@@ -73,6 +73,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"omp-general.h\"\n #include \"tree-dfa.h\"\n+#include \"gimple-ssa.h\"\n+#include \"tree-ssa-live.h\"\n+#include \"tree-outof-ssa.h\"\n \n struct target_builtins default_target_builtins;\n #if SWITCHABLE_TARGET\n@@ -6671,6 +6674,27 @@ expand_expr_force_mode (tree exp, machine_mode mode)\n   rtx val;\n   machine_mode old_mode;\n \n+  if (TREE_CODE (exp) == SSA_NAME\n+      && TYPE_MODE (TREE_TYPE (exp)) != mode)\n+    {\n+      /* Undo argument promotion if possible, as combine might not\n+\t be able to do it later due to MEM_VOLATILE_P uses in the\n+\t patterns.  */\n+      gimple *g = get_gimple_for_ssa_name (exp);\n+      if (g && gimple_assign_cast_p (g))\n+\t{\n+\t  tree rhs = gimple_assign_rhs1 (g);\n+\t  tree_code code = gimple_assign_rhs_code (g);\n+\t  if (CONVERT_EXPR_CODE_P (code)\n+\t      && TYPE_MODE (TREE_TYPE (rhs)) == mode\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (exp))\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs))\n+\t      && (TYPE_PRECISION (TREE_TYPE (exp))\n+\t\t  > TYPE_PRECISION (TREE_TYPE (rhs))))\n+\t    exp = rhs;\n+\t}\n+    }\n+\n   val = expand_expr (exp, NULL_RTX, mode, EXPAND_NORMAL);\n   /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n      of CONST_INTs, where we know the old_mode only from the call argument.  */"}, {"sha": "b8df136034b90d867edfae10cf5eefc6c0023d1b", "filename": "gcc/testsuite/gcc.target/i386/pr96176.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410675cb63466d8de9ad590521f0766b012d2475/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96176.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410675cb63466d8de9ad590521f0766b012d2475/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96176.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96176.c?ref=410675cb63466d8de9ad590521f0766b012d2475", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/96176 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tmovzbl\\t\" } } */\n+\n+unsigned char v;\n+\n+void\n+foo (unsigned char *x, unsigned char y, unsigned char z)\n+{\n+  __atomic_compare_exchange_n (x, &y, z, 0, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\n+  v = y;\n+}"}]}