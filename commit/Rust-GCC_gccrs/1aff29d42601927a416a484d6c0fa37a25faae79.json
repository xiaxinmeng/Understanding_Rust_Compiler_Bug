{"sha": "1aff29d42601927a416a484d6c0fa37a25faae79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmZjI5ZDQyNjAxOTI3YTQxNmE0ODRkNmMwZmEzN2EyNWZhYWU3OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-18T15:19:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-18T15:19:30Z"}, "message": "analyzer: add region_model_manager::get_or_create_int_cst\n\ngcc/analyzer/ChangeLog:\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_int_cst): New.\n\t(region_model_manager::maybe_undo_optimize_bit_field_compare): Use\n\tit to simplify away a local tree.\n\t* region-model.cc (region_model::on_setjmp): Likewise.\n\t(region_model::on_longjmp): Likewise.\n\t* region-model.h (region_model_manager::get_or_create_int_cst):\n\tNew decl.\n\t* store.cc (binding_cluster::zero_fill_region): Use it to simplify\n\taway a local tree.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "9d1c84febcf6985eff780649f6e2f07bf672395b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1c84febcf6985eff780649f6e2f07bf672395b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aff29d42601927a416a484d6c0fa37a25faae79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aff29d42601927a416a484d6c0fa37a25faae79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aff29d42601927a416a484d6c0fa37a25faae79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aff29d42601927a416a484d6c0fa37a25faae79/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86606d2ab731a4b8dbbe1e5318a1920210abd65d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86606d2ab731a4b8dbbe1e5318a1920210abd65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86606d2ab731a4b8dbbe1e5318a1920210abd65d"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "1ee6663f05e76bbfe5ae6f9219f939113dee0c2c", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=1aff29d42601927a416a484d6c0fa37a25faae79", "patch": "@@ -210,6 +210,17 @@ region_model_manager::get_or_create_constant_svalue (tree cst_expr)\n   return cst_sval;\n }\n \n+/* Return the svalue * for a constant_svalue for the INTEGER_CST\n+   for VAL of type TYPE, creating it if necessary.  */\n+\n+const svalue *\n+region_model_manager::get_or_create_int_cst (tree type, poly_int64 val)\n+{\n+  gcc_assert (type);\n+  tree tree_cst = build_int_cst (type, val);\n+  return get_or_create_constant_svalue (tree_cst);\n+}\n+\n /* Return the svalue * for a unknown_svalue for TYPE (which can be NULL),\n    creating it if necessary.\n    The unknown_svalue instances are reused, based on pointer equality\n@@ -475,8 +486,7 @@ maybe_undo_optimize_bit_field_compare (tree type,\n      shift it by the correct number of bits.  */\n   const svalue *lhs = get_or_create_cast (type, sval);\n   HOST_WIDE_INT bit_offset = bits.get_start_bit_offset ().to_shwi ();\n-  tree shift_amt = build_int_cst (type, bit_offset);\n-  const svalue *shift_sval = get_or_create_constant_svalue (shift_amt);\n+  const svalue *shift_sval = get_or_create_int_cst (type, bit_offset);\n   const svalue *shifted_sval = get_or_create_binop (type, LSHIFT_EXPR,\n \t\t\t\t\t\t    lhs, shift_sval);\n   /* Reapply the mask (needed for negative"}, {"sha": "462fe6d8b3c32abf1ecfc16defb79bf9c98514ec", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=1aff29d42601927a416a484d6c0fa37a25faae79", "patch": "@@ -1259,8 +1259,8 @@ region_model::on_setjmp (const gcall *call, const exploded_node *enode,\n   /* Direct calls to setjmp return 0.  */\n   if (tree lhs = gimple_call_lhs (call))\n     {\n-      tree zero = build_int_cst (TREE_TYPE (lhs), 0);\n-      const svalue *new_sval = m_mgr->get_or_create_constant_svalue (zero);\n+      const svalue *new_sval\n+\t= m_mgr->get_or_create_int_cst (TREE_TYPE (lhs), 0);\n       const region *lhs_reg = get_lvalue (lhs, ctxt);\n       set_value (lhs_reg, new_sval, ctxt);\n     }\n@@ -1291,15 +1291,14 @@ region_model::on_longjmp (const gcall *longjmp_call, const gcall *setjmp_call,\n   if (tree lhs = gimple_call_lhs (setjmp_call))\n     {\n       /* Passing 0 as the val to longjmp leads to setjmp returning 1.  */\n-      tree t_zero = build_int_cst (TREE_TYPE (fake_retval), 0);\n-      const svalue *zero_sval = m_mgr->get_or_create_constant_svalue (t_zero);\n+      const svalue *zero_sval\n+\t= m_mgr->get_or_create_int_cst (TREE_TYPE (fake_retval), 0);\n       tristate eq_zero = eval_condition (fake_retval_sval, EQ_EXPR, zero_sval);\n       /* If we have 0, use 1.  */\n       if (eq_zero.is_true ())\n \t{\n-\t  tree t_one = build_int_cst (TREE_TYPE (fake_retval), 1);\n \t  const svalue *one_sval\n-\t    = m_mgr->get_or_create_constant_svalue (t_one);\n+\t    = m_mgr->get_or_create_int_cst (TREE_TYPE (fake_retval), 1);\n \t  fake_retval_sval = one_sval;\n \t}\n       else"}, {"sha": "a4b584d186e258e46c3c563a7264d6f3ef9598dd", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=1aff29d42601927a416a484d6c0fa37a25faae79", "patch": "@@ -238,6 +238,7 @@ class region_model_manager\n \n   /* svalue consolidation.  */\n   const svalue *get_or_create_constant_svalue (tree cst_expr);\n+  const svalue *get_or_create_int_cst (tree type, poly_int64);\n   const svalue *get_or_create_unknown_svalue (tree type);\n   const svalue *get_or_create_setjmp_svalue (const setjmp_record &r,\n \t\t\t\t\t     tree type);"}, {"sha": "b643b63186353773eb4b7ffc753d9039c63312c9", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aff29d42601927a416a484d6c0fa37a25faae79/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=1aff29d42601927a416a484d6c0fa37a25faae79", "patch": "@@ -1043,8 +1043,8 @@ binding_cluster::zero_fill_region (store_manager *mgr, const region *reg)\n \n   /* Add a default binding to zero.  */\n   region_model_manager *sval_mgr = mgr->get_svalue_manager ();\n-  tree cst_zero = build_int_cst (integer_type_node, 0);\n-  const svalue *cst_sval = sval_mgr->get_or_create_constant_svalue (cst_zero);\n+  const svalue *cst_sval\n+    = sval_mgr->get_or_create_int_cst (integer_type_node, 0);\n   const svalue *bound_sval = cst_sval;\n   if (reg->get_type ())\n     bound_sval = sval_mgr->get_or_create_unaryop (reg->get_type (), NOP_EXPR,"}]}