{"sha": "5c846a81ffb1fa4464f89d2884c85a690d75adf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4NDZhODFmZmIxZmE0NDY0Zjg5ZDI4ODRjODVhNjkwZDc1YWRmMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-29T12:12:56Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-29T12:12:56Z"}, "message": "Mark -fstack-protect as optimization flag.\n\n\tPR middle-end/71585\n\t* common.opt (flag_stack_protect): Mark the flag as optimization\n\tflag.\n\t* ipa-inline-transform.c (inline_call): Remove unnecessary call\n\tof build_optimization_node.\n\t* gcc.dg/pr71585.c: New test.\n\t* gcc.dg/pr71585-2.c: New test.\n\t* gcc.dg/pr71585-3.c: New test.\n\nFrom-SVN: r237845", "tree": {"sha": "4f5aeff2bf657ac79726ca12e33177d042abbe77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f5aeff2bf657ac79726ca12e33177d042abbe77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c846a81ffb1fa4464f89d2884c85a690d75adf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c846a81ffb1fa4464f89d2884c85a690d75adf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c846a81ffb1fa4464f89d2884c85a690d75adf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c846a81ffb1fa4464f89d2884c85a690d75adf0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fafe9318b735a4b3276b39a73c42aef7a69249d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe9318b735a4b3276b39a73c42aef7a69249d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafe9318b735a4b3276b39a73c42aef7a69249d1"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "1c63e41f51559baa3784a3ece7ac04fe14dcb752", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -1,3 +1,11 @@\n+2016-06-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/71585\n+\t* common.opt (flag_stack_protect): Mark the flag as optimization\n+\tflag.\n+\t* ipa-inline-transform.c (inline_call): Remove unnecessary call\n+\tof build_optimization_node.\n+\n 2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/70729"}, {"sha": "a7c5125bf08141524e5782d85b94f2028f9f3dd4", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -2221,19 +2221,19 @@ Common RejectNegative Joined Var(common_deferred_options) Defer\n -fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>.\n \n fstack-protector\n-Common Report Var(flag_stack_protect, 1) Init(-1)\n+Common Report Var(flag_stack_protect, 1) Init(-1) Optimization\n Use propolice as a stack protection method.\n \n fstack-protector-all\n-Common Report RejectNegative Var(flag_stack_protect, 2) Init(-1)\n+Common Report RejectNegative Var(flag_stack_protect, 2) Init(-1) Optimization\n Use a stack protection method for every function.\n \n fstack-protector-strong\n-Common Report RejectNegative Var(flag_stack_protect, 3) Init(-1)\n+Common Report RejectNegative Var(flag_stack_protect, 3) Init(-1) Optimization\n Use a smart stack protection method for certain functions.\n \n fstack-protector-explicit\n-Common Report RejectNegative Var(flag_stack_protect, 4)\n+Common Report RejectNegative Var(flag_stack_protect, 4) Optimization\n Use stack protection method only for functions with the stack_protect attribute.\n \n fstack-usage"}, {"sha": "9ac1efc91920d66d64f5ddd4898fa048836a7bc4", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -342,10 +342,10 @@ inline_call (struct cgraph_edge *e, bool update_original,\n       if (dump_file)\n \tfprintf (dump_file, \"Dropping flag_strict_aliasing on %s:%i\\n\",\n \t\t to->name (), to->order);\n-      build_optimization_node (&opts);\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (to->decl)\n \t = build_optimization_node (&opts);\n     }\n+\n   inline_summary *caller_info = inline_summaries->get (to);\n   inline_summary *callee_info = inline_summaries->get (callee);\n   if (!caller_info->fp_expressions && callee_info->fp_expressions)\n@@ -402,7 +402,6 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Copying FP flags from %s:%i to %s:%i\\n\",\n \t\t     callee->name (), callee->order, to->name (), to->order);\n-\t  build_optimization_node (&opts);\n \t  DECL_FUNCTION_SPECIFIC_OPTIMIZATION (to->decl)\n \t     = build_optimization_node (&opts);\n \t}"}, {"sha": "6e132a25448bd6cef205130574a0e42667e8a824", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -1,3 +1,9 @@\n+2016-06-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/pr71585.c: New test.\n+\t* gcc.dg/pr71585-2.c: New test.\n+\t* gcc.dg/pr71585-3.c: New test.\n+\n 2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/70729"}, {"sha": "c3010daf49437078253947089fc1df7f763e3042", "filename": "gcc/testsuite/gcc.dg/pr71585-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-2.c?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -0,0 +1,23 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* rs6000-*-* s390x-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-all\" } */\n+\n+/* This test checks the presence of __stack_chk_fail function in assembler.\n+ * Compiler generates _stack_chk_fail_local (wrapper) calls instead for PIC.\n+ */\n+/* { dg-require-effective-target nonpic } */\n+\n+static int foo()\n+{\n+  return 0;\n+}\n+\n+#pragma GCC push_options\n+#pragma GCC optimize (\"-fno-stack-protector\")\n+\n+int main() { foo (); }\n+\n+#pragma GCC pop_options\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 0 } } */"}, {"sha": "563291563120cf1a3b1d132b86b296aafffdd769", "filename": "gcc/testsuite/gcc.dg/pr71585-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585-3.c?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -0,0 +1,24 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* rs6000-*-* s390x-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-all\" } */\n+\n+/* This test checks the presence of __stack_chk_fail function in assembler.\n+ * Compiler generates _stack_chk_fail_local (wrapper) calls instead for PIC.\n+ */\n+/* { dg-require-effective-target nonpic } */\n+\n+\n+#pragma GCC push_options\n+#pragma GCC optimize (\"-fno-stack-protector\")\n+\n+int foo()\n+{\n+  return 0;\n+}\n+\n+#pragma GCC pop_options\n+\n+int main() { foo (); }\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 1 } } */"}, {"sha": "444aaa1c35fb72688d9f65b4164fcbe71880e36a", "filename": "gcc/testsuite/gcc.dg/pr71585.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c846a81ffb1fa4464f89d2884c85a690d75adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71585.c?ref=5c846a81ffb1fa4464f89d2884c85a690d75adf0", "patch": "@@ -0,0 +1,23 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* rs6000-*-* s390x-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-all\" } */\n+\n+/* This test checks the presence of __stack_chk_fail function in assembler.\n+ * Compiler generates _stack_chk_fail_local (wrapper) calls instead for PIC.\n+ */\n+/* { dg-require-effective-target nonpic } */\n+\n+#pragma GCC push_options\n+\n+#pragma GCC optimize (\"-fno-stack-protector\")\n+__attribute__((constructor)) void foo()\n+{\n+  asm (\"\");\n+}\n+\n+#pragma GCC pop_options\n+\n+int main() { return 0; }\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 1 } } */"}]}