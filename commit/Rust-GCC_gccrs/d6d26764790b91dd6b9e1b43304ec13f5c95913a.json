{"sha": "d6d26764790b91dd6b9e1b43304ec13f5c95913a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkMjY3NjQ3OTBiOTFkZDZiOWUxYjQzMzA0ZWMxM2Y1Yzk1OTEzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-11-08T11:33:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-08T11:33:32Z"}, "message": "dwarf2asm.c (mark_indirect_pool_entry, [...]): New.\n\n\t* dwarf2asm.c (mark_indirect_pool_entry, mark_indirect_pool): New.\n\t(USE_LINKONCE_INDIRECT): Define.\n\t(dw2_output_indirect_constant_1): Try to output indirect constants\n\tinto linkonce sections if possible.\n\t(dw2_force_const_mem): Likewise.  Register indirect_pool with GGC.\n\t(dw2_output_indirect_constants): Likewise.\n\nFrom-SVN: r46843", "tree": {"sha": "f8c40eb049844ec521555e262d8d9140abc0c07f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c40eb049844ec521555e262d8d9140abc0c07f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d26764790b91dd6b9e1b43304ec13f5c95913a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d26764790b91dd6b9e1b43304ec13f5c95913a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d26764790b91dd6b9e1b43304ec13f5c95913a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d26764790b91dd6b9e1b43304ec13f5c95913a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c71541c273a96d2fe39b3c3de3268c28b3c874a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71541c273a96d2fe39b3c3de3268c28b3c874a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71541c273a96d2fe39b3c3de3268c28b3c874a5"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "e8389e108319c56d13c7754c7f7033a6a9aadf91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d26764790b91dd6b9e1b43304ec13f5c95913a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d26764790b91dd6b9e1b43304ec13f5c95913a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6d26764790b91dd6b9e1b43304ec13f5c95913a", "patch": "@@ -1,3 +1,12 @@\n+2001-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2asm.c (mark_indirect_pool_entry, mark_indirect_pool): New.\n+\t(USE_LINKONCE_INDIRECT): Define.\n+\t(dw2_output_indirect_constant_1): Try to output indirect constants\n+\tinto linkonce sections if possible.\n+\t(dw2_force_const_mem): Likewise.  Register indirect_pool with GGC.\n+\t(dw2_output_indirect_constants): Likewise.\n+\n 2001-11-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.h (REG_ALLOC_ORDER): Add vrsave."}, {"sha": "b51eb7e71f3f322f5acf2b0e68562051ef2a16f3", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d26764790b91dd6b9e1b43304ec13f5c95913a/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d26764790b91dd6b9e1b43304ec13f5c95913a/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=d6d26764790b91dd6b9e1b43304ec13f5c95913a", "patch": "@@ -720,11 +720,39 @@ dw2_asm_output_delta_sleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n   VA_CLOSE (ap);\n }\n \f\n+static int mark_indirect_pool_entry PARAMS ((splay_tree_node, void *));\n+static void mark_indirect_pool PARAMS ((PTR arg));\n static rtx dw2_force_const_mem PARAMS ((rtx));\n static int dw2_output_indirect_constant_1 PARAMS ((splay_tree_node, void *));\n \n static splay_tree indirect_pool;\n \n+#if defined(HAVE_GAS_HIDDEN) && defined(SUPPORTS_ONE_ONLY)\n+# define USE_LINKONCE_INDIRECT 1\n+#else\n+# define USE_LINKONCE_INDIRECT 0\n+#endif\n+\n+/* Mark all indirect constants for GC.  */\n+\n+static int\n+mark_indirect_pool_entry (node, data)\n+     splay_tree_node node;\n+     void* data ATTRIBUTE_UNUSED;\n+{\n+  ggc_mark_nonnull_tree ((tree) node->value);\n+  return 0;\n+}\n+\n+/* Mark all indirect constants for GC.  */\n+\n+static void\n+mark_indirect_pool (arg)\n+     PTR arg ATTRIBUTE_UNUSED;\n+{\n+  splay_tree_foreach (indirect_pool, mark_indirect_pool_entry, NULL);\n+}\n+\n /* Put X, a SYMBOL_REF, in memory.  Return a SYMBOL_REF to the allocated\n    memory.  Differs from force_const_mem in that a single pool is used for\n    the entire unit of translation, and the memory is not guaranteed to be\n@@ -735,35 +763,56 @@ dw2_force_const_mem (x)\n      rtx x;\n {\n   splay_tree_node node;\n-  const char *const_sym;\n+  tree decl;\n \n   if (! indirect_pool)\n-    indirect_pool = splay_tree_new (splay_tree_compare_pointers, NULL, NULL);\n+    {\n+      indirect_pool = splay_tree_new (splay_tree_compare_pointers, NULL, NULL);\n+      ggc_add_root (&indirect_pool, 1, sizeof indirect_pool, mark_indirect_pool);\n+    }\n \n   if (GET_CODE (x) != SYMBOL_REF)\n     abort ();\n   node = splay_tree_lookup (indirect_pool, (splay_tree_key) XSTR (x, 0));\n   if (node)\n-    const_sym = (const char *) node->value;\n+    decl = (tree) node->value;\n   else\n     {\n-      extern int const_labelno;\n-      char label[32];\n       tree id;\n \n-      ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n-      ++const_labelno;\n-      const_sym = ggc_strdup (label);\n+      if (USE_LINKONCE_INDIRECT)\n+\t{\n+\t  char *ref_name = alloca (strlen (XSTR (x, 0) + sizeof \"DW.ref.\"));\n+\n+\t  sprintf (ref_name, \"DW.ref.%s\", XSTR (x, 0));\n+\t  id = get_identifier (ref_name);\n+\t  decl = build_decl (VAR_DECL, id, ptr_type_node);\n+\t  DECL_ARTIFICIAL (decl) = 1;\n+\t  DECL_INITIAL (decl) = decl;\n+\t  make_decl_one_only (decl);\n+\t}\n+      else\n+\t{\n+\t  extern int const_labelno;\n+\t  char label[32];\n+\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n+\t  ++const_labelno;\n+\t  id = get_identifier (label);\n+\t  decl = build_decl (VAR_DECL, id, ptr_type_node);\n+\t  DECL_ARTIFICIAL (decl) = 1;\n+\t  DECL_INITIAL (decl) = decl;\n+\t}\n \n       id = maybe_get_identifier (XSTR (x, 0));\n       if (id)\n \tTREE_SYMBOL_REFERENCED (id) = 1;\n \n       splay_tree_insert (indirect_pool, (splay_tree_key) XSTR (x, 0),\n-\t\t\t (splay_tree_value) const_sym);\n+\t\t\t (splay_tree_value) decl);\n     }\n \n-  return gen_rtx_SYMBOL_REF (Pmode, const_sym);\n+  return XEXP (DECL_RTL (decl), 0);\n }\n \n /* A helper function for dw2_output_indirect_constants called through\n@@ -774,14 +823,14 @@ dw2_output_indirect_constant_1 (node, data)\n      splay_tree_node node;\n      void* data ATTRIBUTE_UNUSED;\n {\n-  const char *label, *sym;\n+  const char *sym;\n   rtx sym_ref;\n \n-  label = (const char *) node->value;\n   sym = (const char *) node->key;\n   sym_ref = gen_rtx_SYMBOL_REF (Pmode, sym);\n-\n-  ASM_OUTPUT_LABEL (asm_out_file, label);\n+  if (USE_LINKONCE_INDIRECT)\n+    fprintf (asm_out_file, \"\\t.hidden DW.ref.%s\\n\", sym);\n+  assemble_variable ((tree) node->value, 1, 1, 1);\n   assemble_integer (sym_ref, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n   return 0;\n@@ -792,19 +841,8 @@ dw2_output_indirect_constant_1 (node, data)\n void\n dw2_output_indirect_constants ()\n {\n-  if (! indirect_pool)\n-    return;\n-\n-  /* Assume that the whole reason we're emitting these symbol references\n-     indirectly is that they contain dynamic relocations, and are thus\n-     read-write.  If there was no possibility of a dynamic relocation, we\n-     might as well have used a direct relocation.  */\n-  data_section ();\n-\n-  /* Everything we're emitting is a pointer.  Align appropriately.  */\n-  assemble_align (POINTER_SIZE);\n-\n-  splay_tree_foreach (indirect_pool, dw2_output_indirect_constant_1, NULL);\n+  if (indirect_pool)\n+    splay_tree_foreach (indirect_pool, dw2_output_indirect_constant_1, NULL);\n }\n \n /* Like dw2_asm_output_addr_rtx, but encode the pointer as directed.  */"}]}