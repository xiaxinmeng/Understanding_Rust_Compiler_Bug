{"sha": "58d6eea0e0754351b399a4b85562f81326a184ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkNmVlYTBlMDc1NDM1MWIzOTlhNGI4NTU2MmY4MTMyNmExODRhZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-26T07:24:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-28T07:45:00Z"}, "message": "Add expander for movp2hi and movp2qi.\n\n2020-08-30  Uros Bizjak    <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/96744\n\t* config/i386/i386-expand.c (split_double_mode): Also handle\n\tE_P2HImode and E_P2QImode.\n\t* config/i386/sse.md (MASK_DWI): New define_mode_iterator.\n\t(mov<mode>): New expander for P2HI,P2QI.\n\t(*mov<mode>_internal): New define_insn_and_split to split\n\tmovement of P2QI/P2HI to 2 movqi/movhi patterns after reload.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/double_mask_reg-1.c: New test.", "tree": {"sha": "8219043e1921967f14659e8d02b1d1dd8e5b6ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8219043e1921967f14659e8d02b1d1dd8e5b6ebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58d6eea0e0754351b399a4b85562f81326a184ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d6eea0e0754351b399a4b85562f81326a184ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d6eea0e0754351b399a4b85562f81326a184ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d6eea0e0754351b399a4b85562f81326a184ad/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba09730375b47c0442b3638d02d75fb3430425c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba09730375b47c0442b3638d02d75fb3430425c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba09730375b47c0442b3638d02d75fb3430425c"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "e6f8b314f186a91aa700c538e36b8eceb5d3f44c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=58d6eea0e0754351b399a4b85562f81326a184ad", "patch": "@@ -116,6 +116,12 @@ split_double_mode (machine_mode mode, rtx operands[],\n     case E_DImode:\n       half_mode = SImode;\n       break;\n+    case E_P2HImode:\n+      half_mode = HImode;\n+      break;\n+    case E_P2QImode:\n+      half_mode = QImode;\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "44aa61d87fbd55e7e6abd93073bc70ba09bc9eb7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=58d6eea0e0754351b399a4b85562f81326a184ad", "patch": "@@ -23463,6 +23463,30 @@\n   (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n   (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator MASK_DWI [P2QI P2HI])\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:MASK_DWI 0 \"nonimmediate_operand\")\n+\t(match_operand:MASK_DWI 1 \"nonimmediate_operand\"))]\n+  \"TARGET_AVX512VP2INTERSECT\"\n+{\n+  if (MEM_P (operands[1]) && MEM_P (operands[2]))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+})\n+\n+(define_insn_and_split \"*mov<mode>_internal\"\n+  [(set (match_operand:MASK_DWI 0 \"nonimmediate_operand\" \"=k,o\")\n+\t(match_operand:MASK_DWI 1 \"nonimmediate_operand\" \"ko,k\"))]\n+  \"TARGET_AVX512VP2INTERSECT\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 2) (match_dup 3))]\n+{\n+  split_double_mode (<MODE>mode, &operands[0], 2, &operands[0], &operands[2]);\n+})\n+\n (define_insn \"avx512vp2intersect_2intersect<mode>\"\n   [(set (match_operand:P2QI 0 \"register_operand\" \"=k\")\n \t(unspec:P2QI"}, {"sha": "79ba1ce29266d81c40a415cd76448c3286501506", "filename": "gcc/testsuite/gcc.target/i386/double_mask_reg-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdouble_mask_reg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d6eea0e0754351b399a4b85562f81326a184ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdouble_mask_reg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdouble_mask_reg-1.c?ref=58d6eea0e0754351b399a4b85562f81326a184ad", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/96744  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vp2intersect -O2\" } */\n+\n+#include<immintrin.h>\n+void\n+_mm512_2intersect_epi64_cut (__m512i __A, __m512i __B, __mmask8 *__U,\n+    __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectq512 (__U, __M, (__v8di) __A, (__v8di) __B);\n+}\n+\n+void\n+_mm512_2intersect_epi32_cut (__m512i __A, __m512i __B, __mmask16 *__U,\n+    __mmask16 *__M)\n+{\n+  __builtin_ia32_2intersectd512 (__U, __M, (__v16si) __A, (__v16si) __B);\n+}\n+"}]}