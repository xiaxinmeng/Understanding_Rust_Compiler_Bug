{"sha": "52e18cdfd21c3a9868ee685f26ba95836945a928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlMThjZGZkMjFjM2E5ODY4ZWU2ODVmMjZiYTk1ODM2OTQ1YTkyOA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-09-21T13:12:36Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2018-09-21T13:12:36Z"}, "message": "config.gcc: factorize and comment inclusion of vxworks-dummy.h\n\n2018-09-21  Olivier Hainque  <hainque@adacore.com>\n\n\t* gcc/config.gcc: Factorize and comment inclusion of\n\tvxworks-dummy.h.\n\nFrom-SVN: r264480", "tree": {"sha": "8c874a986c5d2392ebbd46cefb7359ef865d1962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c874a986c5d2392ebbd46cefb7359ef865d1962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e18cdfd21c3a9868ee685f26ba95836945a928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e18cdfd21c3a9868ee685f26ba95836945a928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e18cdfd21c3a9868ee685f26ba95836945a928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e18cdfd21c3a9868ee685f26ba95836945a928/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5244089f1518bed96b73dfd52bbdc436f180696d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5244089f1518bed96b73dfd52bbdc436f180696d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5244089f1518bed96b73dfd52bbdc436f180696d"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "e9b8e96552e494d53f225ab65b38dbcd74a85505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e18cdfd21c3a9868ee685f26ba95836945a928/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e18cdfd21c3a9868ee685f26ba95836945a928/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52e18cdfd21c3a9868ee685f26ba95836945a928", "patch": "@@ -1,3 +1,7 @@\n+2018-09-21  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc: Factorize and comment inclusion of vxworks-dummy.h.\n+\n 2018-09-21  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vxworks.h (CLEAR_INSN_CACHE): #define to 1."}, {"sha": "0c579d1f5eade45329c60b0bdfe4dd46675acf10", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e18cdfd21c3a9868ee685f26ba95836945a928/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e18cdfd21c3a9868ee685f26ba95836945a928/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=52e18cdfd21c3a9868ee685f26ba95836945a928", "patch": "@@ -588,7 +588,6 @@ i[34567]86-*-*)\n \tif test \"x$enable_frame_pointer\" = xyes; then\n \t\ttm_defines=\"${tm_defines} USE_IX86_FRAME_POINTER=1\"\n \tfi\n-\ttm_file=\"vxworks-dummy.h ${tm_file}\"\n \t;;\n x86_64-*-*)\n \tcase ${with_abi} in\n@@ -615,14 +614,9 @@ x86_64-*-*)\n \tif test \"x$enable_frame_pointer\" = xyes; then\n \t\ttm_defines=\"${tm_defines} USE_IX86_FRAME_POINTER=1\"\n \tfi\n-\ttm_file=\"vxworks-dummy.h ${tm_file}\"\n \t;;\n arm*-*-*)\n \ttm_p_file=\"arm/arm-flags.h ${tm_p_file} arm/aarch-common-protos.h\"\n-\ttm_file=\"vxworks-dummy.h ${tm_file}\"\n-\t;;\n-mips*-*-* | powerpc*-*-* | sh*-*-* | sparc*-*-*)\n-\ttm_file=\"vxworks-dummy.h ${tm_file}\"\n \t;;\n esac\n \n@@ -1149,7 +1143,7 @@ arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n \t    ;;\n \tesac\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi\"\n-\ttm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h arm/aout.h vxworks-dummy.h arm/arm.h\"\n+\ttm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h arm/aout.h arm/arm.h\"\n \t# Generation of floating-point instructions requires at least ARMv5te.\n \tif [ \"$with_float\" = \"hard\" -o \"$with_float\" = \"softfp\" ] ; then\n \t    target_cpu_cname=\"arm10e\"\n@@ -1169,7 +1163,7 @@ arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n arm*-*-uclinux*eabi*)\t\t# ARM ucLinux\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h glibc-stdint.h\"\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi\"\n-\ttm_file=\"$tm_file arm/bpabi.h arm/uclinux-eabi.h arm/aout.h vxworks-dummy.h arm/arm.h\"\n+\ttm_file=\"$tm_file arm/bpabi.h arm/uclinux-eabi.h arm/aout.h arm/arm.h\"\n \ttarget_cpu_cname=\"arm7tdmi\"\n \t# The EABI requires the use of __cxa_atexit.\n \tdefault_use_cxa_atexit=yes\n@@ -1213,7 +1207,7 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)\n \t  target_cpu_cname=\"arm10tdmi\"\n \t  ;;\n \tesac\n-\ttm_file=\"${tm_file} arm/aout.h vxworks-dummy.h arm/arm.h\"\n+\ttm_file=\"${tm_file} arm/aout.h arm/arm.h\"\n \t;;\n avr-*-*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr-arch.h avr/avr.h avr/specs.h dbxelf.h avr/avr-stdint.h\"\n@@ -4739,6 +4733,18 @@ case \"${target}\" in\n \t\t;;\n esac\n \n+# Targets for which there is at least one VxWorks port should include\n+# vxworks-dummy.h to allow safe references to various TARGET_VXWORKS kinds\n+# of markers from other files in the port, including the vxworks*.h files to\n+# distinguish VxWorks variants such as VxWorks 7 or 64).\n+\n+case ${target} in\n+arm*-*-* | i[34567]86-*-* | mips*-*-* | powerpc*-*-* | sh*-*-* \\\n+| sparc*-*-* | x86_64-*-*)\n+\ttm_file=\"vxworks-dummy.h ${tm_file}\"\n+\t;;\n+esac\n+\n # Set some miscellaneous flags for particular targets.\n target_cpu_default2=\n case ${target} in"}]}