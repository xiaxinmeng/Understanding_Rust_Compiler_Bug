{"sha": "462027293874eb55bf0da3468f5635bc9f550ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyMDI3MjkzODc0ZWI1NWJmMGRhMzQ2OGY1NjM1YmM5ZjU1MGVkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:23:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:23:10Z"}, "message": "[multiple changes]\n\n2010-10-19  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c: On Alpha/VMS, only adjust PC for HPARITH.\n\n2010-10-19  Tristan Gingold  <gingold@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Handle Attribute_Ref, which can be\n\tevaluated on VMS.\n\n2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Check_Generic_Child_Unit): Handle properly the case of\n\tan instantiation of a renaming of the implicit generic child that\n\tappears within an instance of its parent.\n\n2010-10-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch9.adb: Minor reformatting.\n\t* einfo.adb, einfo.ads, atree.adb, atree.ads, exp_dist.adb, atree.h:\n\t(Referenced_Object): Remove unused entity attribute.\n\t(Direct_Primitive_Operations): Move to Elist10, this is set for all\n\ttagged types, including synchronous ones, so can't use field15 which is\n\tused as Storage_Size_Variable for task types and Entry_Bodies_Array for\n\tprotected types.\n\t(Add_RACW_Primitive_Declarations_And_Bodies): Remove bogus guard\n\tagainst Concurrent_Types (we must handle the case of a RACW designating\n\ta class-wide private synchronous type).\n\tUse Direct_Primitive_Operations, not Primitive_Operations, since we\n\treally want the former.\n\n2010-10-19  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch8.adb (Pop_Scope): Change \"return;\" to \"raise Program_Error;\".\n\n2010-10-19  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch4.adb (Expand_Set_Membership.Make_Cond): Add missing support\n\tfor N_Range nodes.\n\nFrom-SVN: r165689", "tree": {"sha": "6dd5b3cd3d0d61fd317c6e454f8441d066577898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd5b3cd3d0d61fd317c6e454f8441d066577898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462027293874eb55bf0da3468f5635bc9f550ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462027293874eb55bf0da3468f5635bc9f550ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462027293874eb55bf0da3468f5635bc9f550ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462027293874eb55bf0da3468f5635bc9f550ed3/comments", "author": null, "committer": null, "parents": [{"sha": "6c946a9fc31118ae37f00dbb168e17dec1ac9a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c946a9fc31118ae37f00dbb168e17dec1ac9a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c946a9fc31118ae37f00dbb168e17dec1ac9a7b"}], "stats": {"total": 227, "additions": 143, "deletions": 84}, "files": [{"sha": "52d61914731a56da3f99d23282e073aa5c7d717d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -1,3 +1,42 @@\n+2010-10-19  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c: On Alpha/VMS, only adjust PC for HPARITH.\n+\n+2010-10-19  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Handle Attribute_Ref, which can be\n+\tevaluated on VMS.\n+\n+2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Child_Unit): Handle properly the case of\n+\tan instantiation of a renaming of the implicit generic child that\n+\tappears within an instance of its parent.\n+\n+2010-10-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch9.adb: Minor reformatting.\n+\t* einfo.adb, einfo.ads, atree.adb, atree.ads, exp_dist.adb, atree.h:\n+\t(Referenced_Object): Remove unused entity attribute.\n+\t(Direct_Primitive_Operations): Move to Elist10, this is set for all\n+\ttagged types, including synchronous ones, so can't use field15 which is\n+\tused as Storage_Size_Variable for task types and Entry_Bodies_Array for\n+\tprotected types.\n+\t(Add_RACW_Primitive_Declarations_And_Bodies): Remove bogus guard\n+\tagainst Concurrent_Types (we must handle the case of a RACW designating\n+\ta class-wide private synchronous type).\n+\tUse Direct_Primitive_Operations, not Primitive_Operations, since we\n+\treally want the former.\n+\n+2010-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch8.adb (Pop_Scope): Change \"return;\" to \"raise Program_Error;\".\n+\n+2010-10-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Set_Membership.Make_Cond): Add missing support\n+\tfor N_Range nodes.\n+\n 2010-10-19  Thomas Quinot  <quinot@adacore.com>\n \n \t* einfo.ads, atree.ads: Minor comment fixes."}, {"sha": "957cca5b84c2a348eeaea27c6cade464494b6391", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -2455,6 +2455,17 @@ package body Atree is\n          end if;\n       end Elist8;\n \n+      function Elist10 (N : Node_Id) return Elist_Id is\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Value : constant Union_Id := Nodes.Table (N + 1).Field10;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n+      end Elist10;\n+\n       function Elist13 (N : Node_Id) return Elist_Id is\n          pragma Assert (Nkind (N) in N_Entity);\n          Value : constant Union_Id := Nodes.Table (N + 2).Field6;\n@@ -4672,6 +4683,12 @@ package body Atree is\n          Nodes.Table (N + 1).Field8 := Union_Id (Val);\n       end Set_Elist8;\n \n+      procedure Set_Elist10 (N : Node_Id; Val : Elist_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 1).Field10 := Union_Id (Val);\n+      end Set_Elist10;\n+\n       procedure Set_Elist13 (N : Node_Id; Val : Elist_Id) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);"}, {"sha": "904c637fc0c5d25f827be867a768226b8c78864a", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -193,8 +193,8 @@ package Atree is\n    --   Uint6         Synonym for Field6 typed as Uint (Empty = Uint_0)\n \n    --   Similar definitions for Field7 to Field28 (and Node7-Node28,\n-   --   Elist7-Elist28, Uint7-Uint28, Ureal7-Ureal28). Note that not all\n-   --   these functions are defined, only the ones that are actually used.\n+   --   Elist7-Elist28, Uint7-Uint28, Ureal7-Ureal28). Note that not all these\n+   --   functions are defined, only the ones that are actually used.\n \n    function Last_Node_Id return Node_Id;\n    pragma Inline (Last_Node_Id);\n@@ -1112,6 +1112,9 @@ package Atree is\n       function Elist8 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist8);\n \n+      function Elist10 (N : Node_Id) return Elist_Id;\n+      pragma Inline (Elist10);\n+\n       function Elist13 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist13);\n \n@@ -2172,6 +2175,9 @@ package Atree is\n       procedure Set_Elist8 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist8);\n \n+      procedure Set_Elist10 (N : Node_Id; Val : Elist_Id);\n+      pragma Inline (Set_Elist10);\n+\n       procedure Set_Elist13 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist13);\n "}, {"sha": "454ed146ec7a4bfc217ad0560d8493e3ec5bafc6", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -427,6 +427,7 @@ extern Node_Id Current_Error_Node;\n #define Elist3(N)     Field3  (N)\n #define Elist4(N)     Field4  (N)\n #define Elist8(N)     Field8  (N)\n+#define Elist10(N)    Field10 (N)\n #define Elist13(N)    Field13 (N)\n #define Elist15(N)    Field15 (N)\n #define Elist16(N)    Field16 (N)"}, {"sha": "48672cf6e2234148035e815cecbb497ee4cbb147", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -85,10 +85,10 @@ package body Einfo is\n    --    Current_Value                   Node9\n    --    Renaming_Map                    Uint9\n \n+   --    Direct_Primitive_Operations     Elist10\n    --    Discriminal_Link                Node10\n    --    Handler_Records                 List10\n    --    Normalized_Position_Max         Uint10\n-   --    Referenced_Object               Node10\n \n    --    Component_Bit_Offset            Uint11\n    --    Full_View                       Node11\n@@ -121,7 +121,6 @@ package body Einfo is\n    --    Entry_Parameters_Type           Node15\n    --    Extra_Formal                    Node15\n    --    Lit_Indexes                     Node15\n-   --    Direct_Primitive_Operations     Elist15\n    --    Related_Instance                Node15\n    --    Scale_Value                     Uint15\n    --    Storage_Size_Variable           Node15\n@@ -819,9 +818,8 @@ package body Einfo is\n \n    function Direct_Primitive_Operations (Id : E) return L is\n    begin\n-      pragma Assert (Is_Tagged_Type (Id)\n-        and then not Is_Concurrent_Type (Id));\n-      return Elist15 (Id);\n+      pragma Assert (Is_Tagged_Type (Id));\n+      return Elist10 (Id);\n    end Direct_Primitive_Operations;\n \n    function Directly_Designated_Type (Id : E) return E is\n@@ -2429,12 +2427,6 @@ package body Einfo is\n       return Flag227 (Id);\n    end Referenced_As_Out_Parameter;\n \n-   function Referenced_Object (Id : E) return N is\n-   begin\n-      pragma Assert (Is_Type (Id));\n-      return Node10 (Id);\n-   end Referenced_Object;\n-\n    function Register_Exception_Call (Id : E) return N is\n    begin\n       pragma Assert (Ekind (Id) = E_Exception);\n@@ -4832,15 +4824,8 @@ package body Einfo is\n \n    procedure Set_Direct_Primitive_Operations (Id : E; V : L) is\n    begin\n-      pragma Assert\n-        (Is_Tagged_Type (Id)\n-           and then\n-             (Is_Record_Type (Id)\n-                or else\n-              Is_Incomplete_Type (Id)\n-                or else\n-              Ekind_In (Id, E_Private_Type, E_Private_Subtype)));\n-      Set_Elist15 (Id, V);\n+      pragma Assert (Is_Tagged_Type (Id));\n+      Set_Elist10 (Id, V);\n    end Set_Direct_Primitive_Operations;\n \n    procedure Set_Prival (Id : E; V : E) is\n@@ -4908,12 +4893,6 @@ package body Einfo is\n       Set_Flag227 (Id, V);\n    end Set_Referenced_As_Out_Parameter;\n \n-   procedure Set_Referenced_Object (Id : E; V : N) is\n-   begin\n-      pragma Assert (Is_Type (Id));\n-      Set_Node10 (Id, V);\n-   end Set_Referenced_Object;\n-\n    procedure Set_Register_Exception_Call (Id : E; V : N) is\n    begin\n       pragma Assert (Ekind (Id) = E_Exception);\n@@ -7432,8 +7411,13 @@ package body Einfo is\n    procedure Write_Field10_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when Type_Kind                                    =>\n-            Write_Str (\"Referenced_Object\");\n+         when Class_Wide_Kind                              |\n+              Incomplete_Kind                              |\n+              E_Record_Type                                |\n+              E_Record_Subtype                             |\n+              Private_Kind                                 |\n+              Concurrent_Kind                              =>\n+            Write_Str (\"Direct_Primitive_Operations\");\n \n          when E_In_Parameter                               |\n               E_Constant                                   =>\n@@ -7616,13 +7600,6 @@ package body Einfo is\n               Task_Kind                                    =>\n             Write_Str (\"Storage_Size_Variable\");\n \n-         when Class_Wide_Kind                              |\n-              Incomplete_Kind                              |\n-              E_Record_Type                                |\n-              E_Record_Subtype                             |\n-              Private_Kind                                 =>\n-            Write_Str (\"Direct_Primitive_Operations\");\n-\n          when E_Component                                  =>\n             Write_Str (\"DT_Entry_Count\");\n "}, {"sha": "de37ed3f86f654fe52319f795a0db09322ff588b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -769,7 +769,7 @@ package Einfo is\n --       Present in floating point types and subtypes and decimal types and\n --       subtypes. Contains the Digits value specified in the declaration.\n \n---    Direct_Primitive_Operations (Elist15)\n+--    Direct_Primitive_Operations (Elist10)\n --       Present in tagged types and subtypes (including synchronized types),\n --       in tagged private types and in tagged incomplete types. Element list\n --       of entities for primitive operations of the tagged type. Not present\n@@ -3308,12 +3308,6 @@ package Einfo is\n --       we have a separate warning for variables that are only assigned and\n --       never read, and out parameters are a special case.\n \n---    Referenced_Object (Node10)\n---       Present in all type entities. Set non-Empty only for type entities\n---       constructed for unconstrained objects, or objects that depend on\n---       discriminants. Points to the expression from which the actual\n---       subtype of the object can be evaluated.\n-\n --    Register_Exception_Call (Node20)\n --       Present in exception entities. When an exception is declared,\n --       a call is expanded to Register_Exception. This field points to\n@@ -4697,7 +4691,6 @@ package Einfo is\n \n    --    Associated_Node_For_Itype           (Node8)\n    --    Class_Wide_Type                     (Node9)\n-   --    Referenced_Object                   (Node10)\n    --    Full_View                           (Node11)\n    --    Esize                               (Uint12)\n    --    RM_Size                             (Uint13)\n@@ -4854,6 +4847,7 @@ package Einfo is\n \n    --  E_Class_Wide_Type\n    --  E_Class_Wide_Subtype\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Cloned_Subtype                      (Node16)   (subtype case only)\n    --    First_Entity                        (Node17)\n    --    Equivalent_Type                     (Node18)   (always Empty for type)\n@@ -5126,6 +5120,7 @@ package Einfo is\n \n    --  E_Incomplete_Type\n    --  E_Incomplete_Subtype\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Non_Limited_View                    (Node17)\n    --    Private_Dependents                  (Elist18)\n    --    Discriminant_Constraint             (Elist21)\n@@ -5280,7 +5275,7 @@ package Einfo is\n \n    --  E_Private_Type\n    --  E_Private_Subtype\n-   --    Direct_Primitive_Operations         (Elist15)\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    First_Entity                        (Node17)\n    --    Private_Dependents                  (Elist18)\n    --    Underlying_Full_View                (Node19)\n@@ -5369,6 +5364,7 @@ package Einfo is\n \n    --  E_Protected_Type\n    --  E_Protected_Subtype\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Entry_Bodies_Array                  (Node15)\n    --    First_Private_Entity                (Node16)\n    --    First_Entity                        (Node17)\n@@ -5387,7 +5383,7 @@ package Einfo is\n \n    --  E_Record_Type\n    --  E_Record_Subtype\n-   --    Direct_Primitive_Operations         (Elist15)\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Access_Disp_Table                   (Elist16)  (base type only)\n    --    Dispatch_Table_Wrappers             (Elist26)  (base type only)\n    --    Cloned_Subtype                      (Node16)   (subtype case only)\n@@ -5420,7 +5416,7 @@ package Einfo is\n \n    --  E_Record_Type_With_Private\n    --  E_Record_Subtype_With_Private\n-   --    Direct_Primitive_Operations         (Elist15)\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Access_Disp_Table                   (Elist16)  (base type only)\n    --    Dispatch_Table_Wrappers             (Elist26)  (base type only)\n    --    First_Entity                        (Node17)\n@@ -5494,6 +5490,7 @@ package Einfo is\n \n    --  E_Task_Type\n    --  E_Task_Subtype\n+   --    Direct_Primitive_Operations         (Elist10)\n    --    Storage_Size_Variable               (Node15)   (base type only)\n    --    First_Private_Entity                (Node16)\n    --    First_Entity                        (Node17)\n@@ -6104,7 +6101,6 @@ package Einfo is\n    function Referenced                          (Id : E) return B;\n    function Referenced_As_LHS                   (Id : E) return B;\n    function Referenced_As_Out_Parameter         (Id : E) return B;\n-   function Referenced_Object                   (Id : E) return N;\n    function Register_Exception_Call             (Id : E) return N;\n    function Related_Array_Object                (Id : E) return E;\n    function Related_Expression                  (Id : E) return N;\n@@ -6287,7 +6283,7 @@ package Einfo is\n    --  predicate is true only if the value is set (Known) and is set to a\n    --  compile time known value. Note that in the case of Alignment and\n    --  Normalized_First_Bit, dynamic values are not possible, so we do not\n-   --  need a separate Known_Static calls in these cases. The not set (unknown\n+   --  need a separate Known_Static calls in these cases. The not set (unknown)\n    --  values are as follows:\n \n    --    Alignment               Uint_0 or No_Uint\n@@ -6675,7 +6671,6 @@ package Einfo is\n    procedure Set_Referenced                      (Id : E; V : B := True);\n    procedure Set_Referenced_As_LHS               (Id : E; V : B := True);\n    procedure Set_Referenced_As_Out_Parameter     (Id : E; V : B := True);\n-   procedure Set_Referenced_Object               (Id : E; V : N);\n    procedure Set_Register_Exception_Call         (Id : E; V : N);\n    procedure Set_Related_Array_Object            (Id : E; V : E);\n    procedure Set_Related_Expression              (Id : E; V : N);\n@@ -7393,7 +7388,6 @@ package Einfo is\n    pragma Inline (Referenced);\n    pragma Inline (Referenced_As_LHS);\n    pragma Inline (Referenced_As_Out_Parameter);\n-   pragma Inline (Referenced_Object);\n    pragma Inline (Register_Exception_Call);\n    pragma Inline (Related_Array_Object);\n    pragma Inline (Related_Expression);\n@@ -7784,7 +7778,6 @@ package Einfo is\n    pragma Inline (Set_Referenced);\n    pragma Inline (Set_Referenced_As_LHS);\n    pragma Inline (Set_Referenced_As_Out_Parameter);\n-   pragma Inline (Set_Referenced_Object);\n    pragma Inline (Set_Register_Exception_Call);\n    pragma Inline (Set_Related_Array_Object);\n    pragma Inline (Set_Related_Expression);"}, {"sha": "efa0e741a19f7080f46435a0136d2a42eb0190aa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -3351,7 +3351,7 @@ package body Exp_Ch4 is\n \n          --    number-of-elements * component_type'Max_Size_In_Storage_Elements\n \n-         --  which avoids this problem. All this is a big bogus, but it does\n+         --  which avoids this problem. All this is a bit bogus, but it does\n          --  mean we catch common cases of trying to allocate arrays that\n          --  are too large, and which in the absence of a check results in\n          --  undetected chaos ???\n@@ -4348,8 +4348,9 @@ package body Exp_Ch4 is\n             R    : constant Node_Id := Relocate_Node (Alt);\n \n          begin\n-            if Is_Entity_Name (Alt)\n-              and then Is_Type (Entity (Alt))\n+            if (Is_Entity_Name (Alt)\n+                  and then Is_Type (Entity (Alt)))\n+              or else Nkind (Alt) = N_Range\n             then\n                Cond :=\n                  Make_In (Sloc (Alt),"}, {"sha": "171c81cc48d08cfc962549aca58bf2cfcfa4636d", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -7420,11 +7420,10 @@ package body Exp_Ch9 is\n          --  Generate a specification without a letter suffix in order to\n          --  override an interface function or procedure.\n \n-         Spec :=\n-           Build_Protected_Sub_Specification (N, Pid, Dispatching_Mode);\n+         Spec := Build_Protected_Sub_Specification (N, Pid, Dispatching_Mode);\n \n-         --  The formal parameters become the actuals of the protected\n-         --  function or procedure call.\n+         --  The formal parameters become the actuals of the protected function\n+         --  or procedure call.\n \n          Actuals := New_List;\n          Formal  := First (Parameter_Specifications (Spec));\n@@ -7457,8 +7456,8 @@ package body Exp_Ch9 is\n \n          return\n            Make_Subprogram_Body (Loc,\n-             Declarations  => Empty_List,\n-             Specification => Spec,\n+             Declarations               => Empty_List,\n+             Specification              => Spec,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc, Stmts));\n       end Build_Dispatching_Subprogram_Body;"}, {"sha": "84cba490b55af30b7c6cb816f5974f28958e3e03", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -1314,15 +1314,17 @@ package body Exp_Dist is\n       end if;\n \n       --  Build callers, receivers for every primitive operations and a RPC\n-      --  receiver for this type.\n+      --  receiver for this type. Note that we use Direct_Primitive_Operations,\n+      --  not Primitive_Operations, because we really want just the primitives\n+      --  of the tagged type itself, and in the case of a tagged synchronized\n+      --  type we do not want to get the primitives of the corresponding\n+      --  record type).\n \n-      if not Is_Concurrent_Type (Designated_Type)\n-        and then Present (Primitive_Operations (Designated_Type))\n-      then\n+      if Present (Direct_Primitive_Operations (Designated_Type)) then\n          Overload_Counter_Table.Reset;\n \n          Current_Primitive_Elmt :=\n-           First_Elmt (Primitive_Operations (Designated_Type));\n+           First_Elmt (Direct_Primitive_Operations (Designated_Type));\n          while Current_Primitive_Elmt /= No_Elmt loop\n             Current_Primitive := Node (Current_Primitive_Elmt);\n "}, {"sha": "60b7cfd0c32b1de6fa98a1d57ea55007dd934564", "filename": "gcc/ada/init.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -1396,13 +1396,13 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n \t    exception = &storage_error;\n \t    msg = \"stack overflow (or erroneous memory access)\";\n \t  }\n-\t__gnat_adjust_context_for_raise (0, (void *)mechargs);\n+\t__gnat_adjust_context_for_raise (SS$_ACCVIO, (void *)mechargs);\n \tbreak;\n \n       case SS$_STKOVF:\n \texception = &storage_error;\n \tmsg = \"stack overflow\";\n-\t__gnat_adjust_context_for_raise (0, (void *)mechargs);\n+\t__gnat_adjust_context_for_raise (SS$_STKOVF, (void *)mechargs);\n \tbreak;\n \n       case SS$_HPARITH:\n@@ -1411,11 +1411,7 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n #else\n \texception = &constraint_error;\n \tmsg = \"arithmetic error\";\n-#ifndef __alpha__\n-\t/* No need to adjust pc on Alpha: the pc is already on the instruction\n-\t   after the trapping one.  */\n-\t__gnat_adjust_context_for_raise (0, (void *)mechargs);\n-#endif\n+\t__gnat_adjust_context_for_raise (SS$_HPARITH, (void *)mechargs);\n #endif\n \tbreak;\n \n@@ -1491,17 +1487,20 @@ __gnat_install_handler (void)\n void\n __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n {\n-  /* Add one to the address of the instruction signaling the condition,\n-     located in the sigargs array.  */\n+  if (signo == SS$_HPARITH)\n+    {\n+      /* Sub one to the address of the instruction signaling the condition,\n+         located in the sigargs array.  */\n \n-  CHF$MECH_ARRAY * mechargs = (CHF$MECH_ARRAY *) ucontext;\n-  CHF$SIGNAL_ARRAY * sigargs\n-    = (CHF$SIGNAL_ARRAY *) mechargs->chf$q_mch_sig_addr;\n+      CHF$MECH_ARRAY * mechargs = (CHF$MECH_ARRAY *) ucontext;\n+      CHF$SIGNAL_ARRAY * sigargs\n+        = (CHF$SIGNAL_ARRAY *) mechargs->chf$q_mch_sig_addr;\n \n-  int vcount = sigargs->chf$is_sig_args;\n-  int * pc_slot = & (&sigargs->chf$l_sig_name)[vcount-2];\n+      int vcount = sigargs->chf$is_sig_args;\n+      int * pc_slot = & (&sigargs->chf$l_sig_name)[vcount-2];\n \n-  (*pc_slot) ++;\n+      (*pc_slot)--;\n+    }\n }\n \n #endif"}, {"sha": "f520b4b6a1216261be66b0ab85e6b59dd8fe5cac", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -6910,6 +6910,13 @@ package body Sem_Attr is\n             end case;\n          end;\n \n+      ---------\n+      -- Ref --\n+      ---------\n+\n+      when Attribute_Ref =>\n+         Fold_Uint (N, Expr_Value (E1), True);\n+\n       ---------------\n       -- Remainder --\n       ---------------\n@@ -7679,7 +7686,6 @@ package body Sem_Attr is\n            Attribute_Position                 |\n            Attribute_Priority                 |\n            Attribute_Read                     |\n-           Attribute_Ref                      |\n            Attribute_Result                   |\n            Attribute_Storage_Pool             |\n            Attribute_Storage_Size             |"}, {"sha": "4b156440fd3201bdcd8042324c98f46a3c1bbf5f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -5309,6 +5309,25 @@ package body Sem_Ch12 is\n             then\n                Install_Parent (Inst_Par);\n                Parent_Installed := True;\n+\n+            --  The generic unit may be the renaming of the implicit child\n+            --  present in an instance. In that case the parent instance is\n+            --  obtained from the name of the renamed entity.\n+\n+            elsif Ekind (Entity (Gen_Id)) = E_Generic_Package\n+              and then Present (Renamed_Entity (Entity (Gen_Id)))\n+              and then Is_Child_Unit (Renamed_Entity (Entity (Gen_Id)))\n+            then\n+               declare\n+                  Renamed_Package : constant Node_Id :=\n+                    Name (Parent (Entity (Gen_Id)));\n+               begin\n+                  if Nkind (Renamed_Package) = N_Expanded_Name then\n+                     Inst_Par := Entity (Prefix (Renamed_Package));\n+                     Install_Parent (Inst_Par);\n+                     Parent_Installed := True;\n+                  end if;\n+               end;\n             end if;\n          end if;\n "}, {"sha": "0e9d0b4f8891c1174d1fbc03e235c5517ba20d1f", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462027293874eb55bf0da3468f5635bc9f550ed3/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=462027293874eb55bf0da3468f5635bc9f550ed3", "patch": "@@ -6683,7 +6683,7 @@ package body Sem_Ch8 is\n            or else\n          SST.Actions_To_Be_Wrapped_After  /= No_List\n       then\n-         return;\n+         raise Program_Error;\n       end if;\n \n       --  Free last subprogram name if allocated, and pop scope"}]}