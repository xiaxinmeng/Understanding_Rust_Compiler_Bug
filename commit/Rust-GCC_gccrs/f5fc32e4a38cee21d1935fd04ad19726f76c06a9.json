{"sha": "f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmYzMyZTRhMzhjZWUyMWQxOTM1ZmQwNGFkMTk3MjZmNzZjMDZhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-02T23:23:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-02T23:23:51Z"}, "message": "init.c (build_new): Use cp_expr_loc_or_input_loc in two places.\n\n/cp\n2019-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* init.c (build_new): Use cp_expr_loc_or_input_loc in two places.\n\t* name-lookup.c (do_pushdecl): Use DECL_SOURCE_LOCATION.\n\t(push_class_level_binding_1): Likewise.\n\t(set_decl_namespace): Likewise.\n\n/testsuite\n2019-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/integral-array-size-1.C: New.\n\t* g++.dg/cpp0x/alias-decl-1.C: Test location(s) too.\n\t* g++.dg/init/new43.C: Likewise.\n\t* g++.dg/lookup/friend12.C: Likewise.\n\t* g++.dg/lookup/pr79766.C: Likewise.\n\t* g++.dg/lookup/pr84375.C: Likewise.\n\t* g++.dg/other/new-size-type.C: Likewise.\n\nFrom-SVN: r276496", "tree": {"sha": "095ec074070c367b73e2026a1792245507ffbfa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095ec074070c367b73e2026a1792245507ffbfa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/comments", "author": null, "committer": null, "parents": [{"sha": "775eaa4d83458393a34aa6197ff823b63d6078fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775eaa4d83458393a34aa6197ff823b63d6078fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775eaa4d83458393a34aa6197ff823b63d6078fd"}], "stats": {"total": 232, "additions": 130, "deletions": 102}, "files": [{"sha": "bd3592a47254f1ffd96d5babc65cc774451c7489", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -1,3 +1,10 @@\n+2019-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* init.c (build_new): Use cp_expr_loc_or_input_loc in two places.\n+\t* name-lookup.c (do_pushdecl): Use DECL_SOURCE_LOCATION.\n+\t(push_class_level_binding_1): Likewise.\n+\t(set_decl_namespace): Likewise.\n+\n 2019-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_STMT>: If"}, {"sha": "857f360c761ed2dc79d9c9153c8d5f496824a29b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -3754,7 +3754,8 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n       if (!build_expr_type_conversion (WANT_INT | WANT_ENUM, nelts, false))\n         {\n           if (complain & tf_error)\n-            permerror (input_location, \"size in array new must have integral type\");\n+\t    permerror (cp_expr_loc_or_input_loc (nelts),\n+\t\t       \"size in array new must have integral type\");\n           else\n             return error_mark_node;\n         }\n@@ -3769,7 +3770,8 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t less than zero. ... If the expression is a constant expression,\n \t the program is ill-fomed.  */\n       if (TREE_CODE (cst_nelts) == INTEGER_CST\n-\t  && !valid_array_size_p (input_location, cst_nelts, NULL_TREE,\n+\t  && !valid_array_size_p (cp_expr_loc_or_input_loc (nelts),\n+\t\t\t\t  cst_nelts, NULL_TREE,\n \t\t\t\t  complain & tf_error))\n \treturn error_mark_node;\n "}, {"sha": "ff6d5ee698443122ee65684afb7bf618819ee810", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -3080,8 +3080,9 @@ do_pushdecl (tree decl, bool is_friend)\n \t\t  /* In a local class, a friend function declaration must\n \t\t     find a matching decl in the innermost non-class scope.\n \t\t     [class.friend/11] */\n-\t\t  error (\"friend declaration %qD in local class without \"\n-\t\t\t \"prior local declaration\", decl);\n+\t\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t    \"friend declaration %qD in local class without \"\n+\t\t\t    \"prior local declaration\", decl);\n \t\t  /* Don't attempt to push it.  */\n \t\t  return error_mark_node;\n \t\t}\n@@ -4451,9 +4452,9 @@ push_class_level_binding_1 (tree name, tree x)\n       tree scope = context_for_name_lookup (x);\n       if (TYPE_P (scope) && same_type_p (scope, current_class_type))\n \t{\n-\t  error (\"%qD has the same name as the class in which it is \"\n-\t\t \"declared\",\n-\t\t x);\n+\t  error_at (DECL_SOURCE_LOCATION (x),\n+\t\t    \"%qD has the same name as the class in which it is \"\n+\t\t    \"declared\", x);\n \t  return false;\n \t}\n     }\n@@ -4757,7 +4758,8 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n       /* Writing \"N::i\" to declare something directly in \"N\" is invalid.  */\n       if (CP_DECL_CONTEXT (decl) == current_namespace\n \t  && at_namespace_scope_p ())\n-\terror (\"explicit qualification in declaration of %qD\", decl);\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"explicit qualification in declaration of %qD\", decl);\n       return;\n     }\n "}, {"sha": "27659f4bb4ee062540f325fc0aa18529a522e5a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -1,3 +1,13 @@\n+2019-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/integral-array-size-1.C: New.\n+\t* g++.dg/cpp0x/alias-decl-1.C: Test location(s) too.\n+\t* g++.dg/init/new43.C: Likewise.\n+\t* g++.dg/lookup/friend12.C: Likewise.\n+\t* g++.dg/lookup/pr79766.C: Likewise.\n+\t* g++.dg/lookup/pr84375.C: Likewise.\n+\t* g++.dg/other/new-size-type.C: Likewise.\n+\n 2019-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/ext/constexpr-attr-cleanup1.C: New test."}, {"sha": "24b052092237b30abe4b9bd5edfa6b19d71663a5", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -12,5 +12,5 @@ template<class U> struct Ptr<U*> {}; // { dg-error \"specialization\" }\n \n struct A {\n     using A = int;  // { dg-error \"11:ISO C\\\\+\\\\+ forbids nested type .A.\" }\n-// { dg-error \"same name as\" \"\" { target c++11 } .-1 }  \n+// { dg-error \"11:.using A = int. has the same name as\" \"\" { target c++11 } .-1 }  \n };"}, {"sha": "31d67c58d613b4da3865fe92531b4567cbfb7fb9", "filename": "gcc/testsuite/g++.dg/diagnostic/integral-array-size-1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fintegral-array-size-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fintegral-array-size-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fintegral-array-size-1.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -0,0 +1,7 @@\n+template<typename T>\n+void foo(T a)\n+{\n+  new int[a];  // { dg-error \"11:size in array new must have integral type\" }\n+}\n+\n+template void foo(float);"}, {"sha": "880e330907f8c92c51b930d6363601135989d7d9", "filename": "gcc/testsuite/g++.dg/init/new43.C", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -30,36 +30,36 @@ void test_literal ()\n     B b;\n \n     // Verify integer literal.\n-    p = new char [-1];           // { dg-error \"size .-1. of array is negative\" }\n-    p = new char [2][-3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new char [-4][5];        // { dg-error \"size .-4. of array is negative\" }\n-    p = new char [-6][-7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) char [-1];       // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) char [2][-3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) char [-4][5];    // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) char [-6][-7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) A [-1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) A [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) A [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) A [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) B [-1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) B [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) B [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) B [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (&b) B [-1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (&b) B [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (&b) B [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (&b) B [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new char [1 - 2];         // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) char [2 - 3];     // { dg-error \"size .-1. of array is negative\" }\n-    p = new A [2 < 1 ? -1 : -2];  // { dg-error \"size .-2. of array is negative\" }\n-    p = new (p) B [2 - 3 * 2];    // { dg-error \"size .-4. of array is negative\" }\n-    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"size .-4. of array|narrowing conversion\" }\n+    p = new char [-1];           // { dg-error \"19:size .-1. of array is negative\" }\n+    p = new char [2][-3];        // { dg-error \"22:size .-3. of array|narrowing conversion\" }\n+    p = new char [-4][5];        // { dg-error \"19:size .-4. of array is negative\" }\n+    p = new char [-6][-7];       // { dg-error \"19:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"23:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) char [-1];       // { dg-error \"23:size .-1. of array is negative\" }\n+    p = new (p) char [2][-3];    // { dg-error \"26:size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [-4][5];    // { dg-error \"23:size .-4. of array is negative\" }\n+    p = new (p) char [-6][-7];   // { dg-error \"23:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"27:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) A [-1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) A [2][-3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [-4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) A [-6][-7];      // { dg-error \"20:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) B [-1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) B [2][-3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [-4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) B [-6][-7];      // { dg-error \"size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (&b) B [-1];          // { dg-error \"21:size .-1. of array is negative\" }\n+    p = new (&b) B [2][-3];       // { dg-error \"24:size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [-4][5];       // { dg-error \"21:size .-4. of array is negative\" }\n+    p = new (&b) B [-6][-7];      // { dg-error \"21:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"25:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new char [1 - 2];         // { dg-error \"21:size .-1. of array is negative\" }\n+    p = new (p) char [2 - 3];     // { dg-error \"25:size .-1. of array is negative\" }\n+    p = new A [2 < 1 ? -1 : -2];  // { dg-error \"22:size .-2. of array is negative\" }\n+    p = new (p) B [2 - 3 * 2];    // { dg-error \"22:size .-4. of array is negative\" }\n+    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"26:size .-4. of array|narrowing conversion\" }\n }\n \n void test_constant_expression ()\n@@ -78,36 +78,36 @@ void test_constant_expression ()\n     static const int i7 = -7;\n \n     // Verify constant expression.\n-    p = new char [i1];           // { dg-error \"size .-1. of array is negative\" }\n-    p = new char [2][i3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new char [i4][5];        // { dg-error \"size .-4. of array is negative\" }\n-    p = new char [i6][i7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) char [i1];       // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) char [2][i3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) char [i4][5];    // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) char [i6][i7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) A [i1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) A [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) A [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) A [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) B [i1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) B [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) B [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) B [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (&b) B [i1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (&b) B [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (&b) B [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (&b) B [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new short [i1 - 2];       // { dg-error \"size .-3. of array is negative\" }\n-    p = new (p) bool [i2 - 3];    // { dg-error \"size .-5. of array is negative\" }\n-    p = new A [2 < 1 ? i1 : i2];  // { dg-error \"size .-2. of array is negative\" }\n-    p = new (p) B [2 + i3 * 2];   // { dg-error \"size .-4. of array is negative\" }\n-    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"size .-7. of array|narrowing conversion\" }\n+    p = new char [i1];           // { dg-error \"19:size .-1. of array is negative\" }\n+    p = new char [2][i3];        // { dg-error \"22:size .-3. of array|narrowing conversion\" }\n+    p = new char [i4][5];        // { dg-error \"19:size .-4. of array is negative\" }\n+    p = new char [i6][i7];       // { dg-error \"19:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"23:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) char [i1];       // { dg-error \"23:size .-1. of array is negative\" }\n+    p = new (p) char [2][i3];    // { dg-error \"26:size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [i4][5];    // { dg-error \"23:size .-4. of array is negative\" }\n+    p = new (p) char [i6][i7];   // { dg-error \"23:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"27:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) A [i1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) A [2][i3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [i4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) A [i6][i7];      // { dg-error \"20:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) B [i1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) B [2][i3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [i4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) B [i6][i7];      // { dg-error \"20:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (&b) B [i1];          // { dg-error \"21:size .-1. of array is negative\" }\n+    p = new (&b) B [2][i3];       // { dg-error \"24:size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [i4][5];       // { dg-error \"21:size .-4. of array is negative\" }\n+    p = new (&b) B [i6][i7];      // { dg-error \"21:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"25:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new short [i1 - 2];       // { dg-error \"23:size .-3. of array is negative\" }\n+    p = new (p) bool [i2 - 3];    // { dg-error \"26:size .-5. of array is negative\" }\n+    p = new A [2 < 1 ? i1 : i2];  // { dg-error \"22:size .-2. of array is negative\" }\n+    p = new (p) B [2 + i3 * 2];   // { dg-error \"22:size .-4. of array is negative\" }\n+    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"27:size .-7. of array|narrowing conversion\" }\n }\n \n void test_constexpr ()\n@@ -131,36 +131,36 @@ void test_constexpr ()\n #endif\n \n     // Verify constant expression.\n-    p = new char [s1];           // { dg-error \"size .-1. of array is negative\" }\n-    p = new char [2][s3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new char [s4][5];        // { dg-error \"size .-4. of array is negative\" }\n-    p = new char [s6][s7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) char [s1];       // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) char [2][s3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) char [s4][5];    // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) char [s6][s7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) A [s1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) A [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) A [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) A [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (p) B [s1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) B [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (p) B [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (p) B [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new (&b) B [s1];          // { dg-error \"size .-1. of array is negative\" }\n-    p = new (&b) B [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n-    p = new (&b) B [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n-    p = new (&b) B [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n-\n-    p = new int [s1 + s2];           // { dg-error \"size .-3. of array is negative\" }\n-    p = new (p) long [2 * s3];       // { dg-error \"size .-6. of array is negative\" }\n+    p = new char [s1];           // { dg-error \"19:size .-1. of array is negative\" }\n+    p = new char [2][s3];        // { dg-error \"22:size .-3. of array|narrowing conversion\" }\n+    p = new char [s4][5];        // { dg-error \"19:size .-4. of array is negative\" }\n+    p = new char [s6][s7];       // { dg-error \"19:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"23:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) char [s1];       // { dg-error \"23:size .-1. of array is negative\" }\n+    p = new (p) char [2][s3];    // { dg-error \"26:size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [s4][5];    // { dg-error \"23:size .-4. of array is negative\" }\n+    p = new (p) char [s6][s7];   // { dg-error \"23:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"27:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) A [s1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) A [2][s3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [s4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) A [s6][s7];      // { dg-error \"20:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (p) B [s1];          // { dg-error \"20:size .-1. of array is negative\" }\n+    p = new (p) B [2][s3];       // { dg-error \"23:size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [s4][5];       // { dg-error \"20:size .-4. of array is negative\" }\n+    p = new (p) B [s6][s7];      // { dg-error \"20:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"24:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new (&b) B [s1];          // { dg-error \"21:size .-1. of array is negative\" }\n+    p = new (&b) B [2][s3];       // { dg-error \"24:size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [s4][5];       // { dg-error \"21:size .-4. of array is negative\" }\n+    p = new (&b) B [s6][s7];      // { dg-error \"21:size .-6. of array|narrowing conversion\" }\n+    // { dg-error \"25:size .-7. of array\" \"\" { target *-*-* } .-1 }\n+    p = new int [s1 + s2];           // { dg-error \"21:size .-3. of array is negative\" }\n+    p = new (p) long [2 * s3];       // { dg-error \"25:size .-6. of array is negative\" }\n     p = new A [s2 < s1 ? s1 : s2];   // { dg-error \"size .-1. of array is negative\" }\n-    p = new (p) B [s7 - s2 * 2];     // { dg-error \"size .-3. of array is negative\" }\n-    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"size .-2. of array|narrowing conversion\" }\n+    p = new (p) B [s7 - s2 * 2];     // { dg-error \"23:size .-3. of array is negative\" }\n+    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"27:size .-2. of array|narrowing conversion\" }\n }\n \n /* Prune out pedantic warnins (turned into errors via -pedantic-errors)."}, {"sha": "612b0da02996b7c3540dcc7faf61cf62740f0acc", "filename": "gcc/testsuite/g++.dg/lookup/friend12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -5,6 +5,6 @@ void foo()\n   extern void bar (int); // not the bar we are looking for\n   struct A\n   {\n-    friend void bar();\t// { dg-error \"without prior local declaration\" }\n+    friend void bar();\t// { dg-error \"17:friend declaration .void bar\\\\(\\\\). in local class without prior local declaration\" }\n   };\n }"}, {"sha": "09f09fa67d4f7bf57f3d0ab1125c067a02374e66", "filename": "gcc/testsuite/g++.dg/lookup/pr79766.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -24,6 +24,6 @@ void ::R () // OK -> Z::R\n \n void S ();\n \n-void ::S () // { dg-error \"explicit qualification\" }\n+void ::S () // { dg-error \"6:explicit qualification\" }\n {\n }"}, {"sha": "1b086e15694811df62fda053e46fd9a3fd8cd870", "filename": "gcc/testsuite/g++.dg/lookup/pr84375.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84375.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84375.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84375.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -4,6 +4,6 @@ void foo()\n {\n   struct A\n   {\n-    friend void A(); // { dg-error \"local class without prior local\" }\n+    friend void A(); // { dg-error \"17:friend declaration .void A\\\\(\\\\). in local class without prior local\" }\n   };\n }"}, {"sha": "3411641e041fe17b54234566bd503cce15916bc4", "filename": "gcc/testsuite/g++.dg/other/new-size-type.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc32e4a38cee21d1935fd04ad19726f76c06a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C?ref=f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "patch": "@@ -5,5 +5,5 @@\n const char*\n foo()\n {\n-    return new char[~static_cast<size_t>(0)];// { dg-error \"exceeds maximum object size\" }\n+    return new char[~static_cast<size_t>(0)];// { dg-error \"21:exceeds maximum object size\" }\n }"}]}