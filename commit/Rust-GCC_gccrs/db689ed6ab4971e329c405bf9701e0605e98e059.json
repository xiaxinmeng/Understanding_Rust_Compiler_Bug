{"sha": "db689ed6ab4971e329c405bf9701e0605e98e059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2ODllZDZhYjQ5NzFlMzI5YzQwNWJmOTcwMWUwNjA1ZTk4ZTA1OQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-09-11T13:32:31Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-09-11T13:32:31Z"}, "message": "From Jie Zhang <jie.zhang@analog.com>:\n\n\t* config/bfin/bfin.c (bfin_expand_call): Handle L2 functions.\n\t(bfin_handle_l2_attribute): New.\n\t(bfin_attribute_table): Add l2 attribute.\n\nFrom-SVN: r151634", "tree": {"sha": "03d7967b4a1953f9beb2cb557b6a7071be9a608c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d7967b4a1953f9beb2cb557b6a7071be9a608c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db689ed6ab4971e329c405bf9701e0605e98e059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db689ed6ab4971e329c405bf9701e0605e98e059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db689ed6ab4971e329c405bf9701e0605e98e059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db689ed6ab4971e329c405bf9701e0605e98e059/comments", "author": null, "committer": null, "parents": [{"sha": "7c9162b24d65e29eae707659e7c953dd1d425578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9162b24d65e29eae707659e7c953dd1d425578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9162b24d65e29eae707659e7c953dd1d425578"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "cb345ba38d37082feb95459881a26aeb303c4168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db689ed6ab4971e329c405bf9701e0605e98e059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db689ed6ab4971e329c405bf9701e0605e98e059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db689ed6ab4971e329c405bf9701e0605e98e059", "patch": "@@ -1,3 +1,10 @@\n+2009-09-11  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\tFrom Jie Zhang <jie.zhang@analog.com>:\n+\t* config/bfin/bfin.c (bfin_expand_call): Handle L2 functions.\n+\t(bfin_handle_l2_attribute): New.\n+\t(bfin_attribute_table): Add l2 attribute.\n+\n 2009-09-11  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/41275"}, {"sha": "ed51006fd7766728ba51dd00d2441d9d61802b1f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db689ed6ab4971e329c405bf9701e0605e98e059/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db689ed6ab4971e329c405bf9701e0605e98e059/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=db689ed6ab4971e329c405bf9701e0605e98e059", "patch": "@@ -2255,28 +2255,38 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n \n   if (TARGET_FDPIC)\n     {\n-      int caller_has_l1_text, callee_has_l1_text;\n+      int caller_in_sram, callee_in_sram;\n \n-      caller_has_l1_text = callee_has_l1_text = 0;\n+      /* 0 is not in sram, 1 is in L1 sram, 2 is in L2 sram.  */\n+      caller_in_sram = callee_in_sram = 0;\n \n       if (lookup_attribute (\"l1_text\",\n \t\t\t    DECL_ATTRIBUTES (cfun->decl)) != NULL_TREE)\n-\tcaller_has_l1_text = 1;\n+\tcaller_in_sram = 1;\n+      else if (lookup_attribute (\"l2\",\n+\t\t\t\t DECL_ATTRIBUTES (cfun->decl)) != NULL_TREE)\n+\tcaller_in_sram = 2;\n \n       if (GET_CODE (callee) == SYMBOL_REF\n-\t  && SYMBOL_REF_DECL (callee) && DECL_P (SYMBOL_REF_DECL (callee))\n-\t  && lookup_attribute\n-\t       (\"l1_text\",\n-\t\tDECL_ATTRIBUTES (SYMBOL_REF_DECL (callee))) != NULL_TREE)\n-\tcallee_has_l1_text = 1;\n+\t  && SYMBOL_REF_DECL (callee) && DECL_P (SYMBOL_REF_DECL (callee)))\n+\t{\n+\t  if (lookup_attribute\n+\t      (\"l1_text\",\n+\t       DECL_ATTRIBUTES (SYMBOL_REF_DECL (callee))) != NULL_TREE)\n+\t    callee_in_sram = 1;\n+\t  else if (lookup_attribute\n+\t\t   (\"l2\",\n+\t\t    DECL_ATTRIBUTES (SYMBOL_REF_DECL (callee))) != NULL_TREE)\n+\t    callee_in_sram = 2;\n+\t}\n \n       if (GET_CODE (callee) != SYMBOL_REF\n \t  || bfin_longcall_p (callee, INTVAL (cookie))\n \t  || (GET_CODE (callee) == SYMBOL_REF\n \t      && !SYMBOL_REF_LOCAL_P (callee)\n \t      && TARGET_INLINE_PLT)\n-\t  || caller_has_l1_text != callee_has_l1_text\n-\t  || (caller_has_l1_text && callee_has_l1_text\n+\t  || caller_in_sram != callee_in_sram\n+\t  || (caller_in_sram && callee_in_sram\n \t      && (GET_CODE (callee) != SYMBOL_REF\n \t\t  || !SYMBOL_REF_LOCAL_P (callee))))\n \t{\n@@ -5663,6 +5673,45 @@ bfin_handle_l1_data_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n  return NULL_TREE;\n }\n \n+/* Handle a \"l2\" attribute; arguments as in struct attribute_spec.handler.  */\n+\n+static tree\n+bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t  tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\t  bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      if (DECL_SECTION_NAME (decl) != NULL_TREE\n+\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t     \".l2.text\") != 0)\n+\t{\n+\t  error (\"section of %q+D conflicts with previous declaration\",\n+\t\t decl);\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+\tDECL_SECTION_NAME (decl) = build_string (9, \".l2.text\");\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      if (DECL_SECTION_NAME (decl) != NULL_TREE\n+\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t     \".l2.data\") != 0)\n+\t{\n+\t  error (\"section of %q+D conflicts with previous declaration\",\n+\t\t decl);\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+\tDECL_SECTION_NAME (decl) = build_string (9, \".l2.data\");\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Table of valid machine attributes.  */\n static const struct attribute_spec bfin_attribute_table[] =\n {\n@@ -5679,6 +5728,7 @@ static const struct attribute_spec bfin_attribute_table[] =\n   { \"l1_data\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n   { \"l1_data_A\", 0, 0, true, false, false, bfin_handle_l1_data_attribute },\n   { \"l1_data_B\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n+  { \"l2\", 0, 0, true, false, false,  bfin_handle_l2_attribute },\n   { NULL, 0, 0, false, false, false, NULL }\n };\n \f"}]}