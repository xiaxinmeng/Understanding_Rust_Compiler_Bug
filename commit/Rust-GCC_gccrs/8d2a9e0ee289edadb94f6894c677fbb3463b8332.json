{"sha": "8d2a9e0ee289edadb94f6894c677fbb3463b8332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyYTllMGVlMjg5ZWRhZGI5NGY2ODk0YzY3N2ZiYjM0NjNiODMzMg==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-09-17T22:18:13Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-09-17T22:18:13Z"}, "message": "fixed-obj.mk: New file to support fine-grain fixed-point functions.\n\n\t* fixed-obj.mk: New file to support fine-grain fixed-point functions.\n\t* Makefile.in (fixed_point): Define.\n\tCheck if fixed_point is yes to build support functions.\n\t* configure.ac: Check for fixed_point support.\n\t* configure: Regenerated.\n\t* gen-fixed.sh: New file to generate lists of fixed-point labels,\n\tfuncs, modes, from, to.\n\nCo-Authored-By: Nigel Stephens <nigel@mips.com>\n\nFrom-SVN: r128557", "tree": {"sha": "b78141d7b773b125dccacd9b26b68b4b0ab15643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b78141d7b773b125dccacd9b26b68b4b0ab15643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2a9e0ee289edadb94f6894c677fbb3463b8332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2a9e0ee289edadb94f6894c677fbb3463b8332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2a9e0ee289edadb94f6894c677fbb3463b8332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2a9e0ee289edadb94f6894c677fbb3463b8332/comments", "author": null, "committer": null, "parents": [{"sha": "154e4a0a8d367972b61eb3fd96cc8e4bb7572ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e4a0a8d367972b61eb3fd96cc8e4bb7572ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154e4a0a8d367972b61eb3fd96cc8e4bb7572ea9"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "59ccf6a79342f9ed16f76a76a916a8b1aae2e560", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -1,3 +1,14 @@\n+2007-09-17  Chao-ying Fu  <fu@mips.com>\n+\t    Nigel Stephens  <nigel@mips.com>\n+\n+\t* fixed-obj.mk: New file to support fine-grain fixed-point functions.\n+\t* Makefile.in (fixed_point): Define.\n+\tCheck if fixed_point is yes to build support functions.\n+\t* configure.ac: Check for fixed_point support.\n+\t* configure: Regenerated.\n+\t* gen-fixed.sh: New file to generate lists of fixed-point labels,\n+\tfuncs, modes, from, to.\n+\n 2007-09-11  Janis Johnson  <janis187@us.ibm.com\n \n \t* Makefile.in (dfp-filenames): Add bid128_noncomp."}, {"sha": "77c5f1ebed8a73538375f4c98f097b7e5565913c", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -38,6 +38,7 @@ SHELL = @SHELL@\n enable_shared = @enable_shared@\n decimal_float = @decimal_float@\n enable_decimal_float = @enable_decimal_float@\n+fixed_point = @fixed_point@\n \n host_noncanonical = @host_noncanonical@\n \n@@ -575,6 +576,48 @@ endif\n \n endif\n \n+# Build fixed-point support.\n+ifeq ($(fixed_point),yes)\n+\n+# Generate permutations of function name and mode\n+fixed-labels := $(shell $(SHELL) $(srcdir)/gen-fixed.sh arith labels)\n+fixed-funcs := $(shell $(SHELL) $(srcdir)/gen-fixed.sh arith funcs)\n+fixed-modes := $(shell $(SHELL) $(srcdir)/gen-fixed.sh arith modes)\n+\n+# Generate the rules for each arithmetic function\n+iter-items := $(fixed-funcs)\n+iter-labels := $(fixed-labels)\n+iter-from := $(fixed-modes)\n+iter-to := $(fixed-modes)\n+include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n+\n+# Add arithmetic functions to list of objects to be built\n+libgcc-objects += $(patsubst %,%$(objext),$(fixed-funcs))\n+ifeq ($(enable_shared),yes)\n+libgcc-s-objects += $(patsubst %,%_s$(objext),$(fixed-funcs))\n+endif\n+\n+# Convert from or to fractional\n+fixed-conv-funcs := $(shell $(SHELL) $(srcdir)/gen-fixed.sh conv funcs)\n+fixed-conv-labels := $(shell $(SHELL) $(srcdir)/gen-fixed.sh conv labels)\n+fixed-conv-from := $(shell $(SHELL) $(srcdir)/gen-fixed.sh conv from)\n+fixed-conv-to :=  $(shell $(SHELL) $(srcdir)/gen-fixed.sh conv to)\n+\n+# Generate the make rules for each conversion function\n+iter-items := $(fixed-conv-funcs)\n+iter-labels := $(fixed-conv-labels)\n+iter-from := $(fixed-conv-from)\n+iter-to := $(fixed-conv-to)\n+include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n+\n+# Add conversion functions to list of objects to be built\n+libgcc-objects += $(patsubst %,%$(objext),$(fixed-conv-funcs))\n+ifeq ($(enable_shared),yes)\n+libgcc-s-objects += $(patsubst %,%_s$(objext),$(fixed-conv-funcs))\n+endif\n+\n+endif\n+\n # Build LIB2ADD and LIB2ADD_ST.\n ifneq ($(filter-out %.c %.S %.asm,$(LIB2ADD) $(LIB2ADD_ST)),)\n $(error Unsupported files in LIB2ADD or LIB2ADD_ST.)"}, {"sha": "e6bbd7230a61df3ab0254106a59afce621863b56", "filename": "libgcc/configure", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING='GNU C Runtime Library 1.0'\n PACKAGE_BUGREPORT=''\n \n ac_unique_file=\"static-object.mk\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float enable_decimal_float vis_hide set_have_cc_tls tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float enable_decimal_float fixed_point vis_hide set_have_cc_tls tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -3330,6 +3330,51 @@ if test x$enable_decimal_float = xyes; then\n fi\n \n \n+# Check for fixed-point support.\n+echo \"$as_me:$LINENO: checking whether fixed-point is supported\" >&5\n+echo $ECHO_N \"checking whether fixed-point is supported... $ECHO_C\" >&6\n+if test \"${libgcc_cv_fixed_point+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+_Sat _Fract x;\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  libgcc_cv_fixed_point=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+libgcc_cv_fixed_point=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $libgcc_cv_fixed_point\" >&5\n+echo \"${ECHO_T}$libgcc_cv_fixed_point\" >&6\n+fixed_point=$libgcc_cv_fixed_point\n+\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n \n@@ -4152,6 +4197,7 @@ s,@OBJEXT@,$OBJEXT,;t t\n s,@CPP@,$CPP,;t t\n s,@decimal_float@,$decimal_float,;t t\n s,@enable_decimal_float@,$enable_decimal_float,;t t\n+s,@fixed_point@,$fixed_point,;t t\n s,@vis_hide@,$vis_hide,;t t\n s,@set_have_cc_tls@,$set_have_cc_tls,;t t\n s,@tmake_file@,$tmake_file,;t t"}, {"sha": "6ab7ebf3948a5e313b6871ab8df42a3ba3072bb3", "filename": "libgcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -145,6 +145,13 @@ if test x$enable_decimal_float = xyes; then\n fi\n AC_SUBST(enable_decimal_float)\n \n+# Check for fixed-point support.\n+AC_CACHE_CHECK([whether fixed-point is supported], [libgcc_cv_fixed_point],\n+\t       [AC_COMPILE_IFELSE([_Sat _Fract x;], [libgcc_cv_fixed_point=yes],\n+\t\t\t\t  [libgcc_cv_fixed_point=no])])\n+fixed_point=$libgcc_cv_fixed_point\n+AC_SUBST(fixed_point)\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}, {"sha": "3c7c2f3173eed82e3dcd64c1bd3fd8536a1fe9ff", "filename": "libgcc/fixed-obj.mk", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Ffixed-obj.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Ffixed-obj.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffixed-obj.mk?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -0,0 +1,31 @@\n+# This file is included several times in a row, once for each element of\n+# $(iter-items).  On each inclusion, we advance $o to the next element.\n+# $(iter-labels) and $(iter-from) and $(iter-to) are also advanced.\n+\n+o := $(firstword $(iter-items))\n+iter-items := $(filter-out $o,$(iter-items))\n+\n+$o-label := $(firstword $(iter-labels))\n+iter-labels := $(wordlist 2,$(words $(iter-labels)),$(iter-labels))\n+\n+$o-from := $(firstword $(iter-from))\n+iter-from := $(wordlist 2,$(words $(iter-from)),$(iter-from))\n+\n+$o-to := $(firstword $(iter-to))\n+iter-to := $(wordlist 2,$(words $(iter-to)),$(iter-to))\n+\n+ifeq ($($o-from),$($o-to))\n+$o-opt := -D$($o-from)_MODE\n+else\n+$o-opt := -DFROM_$($o-from) -DTO_$($o-to)\n+endif\n+\n+#$(info $o$(objext): -DL$($o-label) $($o-opt))\n+\n+$o$(objext): %$(objext): $(gcc_srcdir)/config/fixed-bit.c\n+\t$(gcc_compile) -DL$($*-label) $($*-opt) -c $(gcc_srcdir)/config/fixed-bit.c $(vis_hide)\n+\n+ifeq ($(enable_shared),yes)\n+$(o)_s$(objext): %_s$(objext): $(gcc_srcdir)/config/fixed-bit.c\n+\t$(gcc_s_compile) -DL$($*-label) $($*-opt) -c $(gcc_srcdir)/config/fixed-bit.c\n+endif"}, {"sha": "774996110706da973de9026b7c2f7091fedfe62c", "filename": "libgcc/gen-fixed.sh", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fgen-fixed.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a9e0ee289edadb94f6894c677fbb3463b8332/libgcc%2Fgen-fixed.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgen-fixed.sh?ref=8d2a9e0ee289edadb94f6894c677fbb3463b8332", "patch": "@@ -0,0 +1,105 @@\n+#!/bin/sh\n+\n+# Worker script for libgcc/Makefile.in\n+# Generate lists of fixed-point labels, funcs, modes, from, to.\n+# Usage:\n+#    gen-fixed.sh arith labels\n+#    gen-fixed.sh arith funcs\n+#    gen-fixed.sh arith modes\n+#    gen-fixed.sh conv labels\n+#    gen-fixed.sh conv funcs\n+#    gen-fixed.sh conv from\n+#    gen-fixed.sh conv to\n+\n+fixed_sfract_modes=\"QQ HQ SQ DQ TQ HA SA DA TA\"\n+fixed_ufract_modes=\"UQQ UHQ USQ UDQ UTQ UHA USA UDA UTA\"\n+fixed_fract_modes=\"$fixed_sfract_modes $fixed_ufract_modes\"\n+\n+fixed_signed_modes=\"QI HI SI DI TI SF DF\"\n+fixed_unsigned_modes=\"UQI UHI USI UDI UTI\"\n+\n+fixed_func_names=\"_add _sub _neg _mul _mulhelper _divhelper _ashl _ashlhelper _cmp _saturate1 _saturate2\"\n+fixed_sfunc_names=\"_ssadd _sssub _ssneg _ssmul _ssdiv _div _ssashl _ashr\"\n+fixed_ufunc_names=\"_usadd _ussub _usneg _usmul _usdiv _udiv _usashl _lshr\"\n+\n+# emit the function information\n+# $1 = output type selector\n+# $2 = base function name\n+# $3 = from mode\n+# $4 = to mode\n+emit ()\n+{\n+    if [ \"$3\" != \"$4\" ]; then\n+\tcase \"$1\" in\n+\t  labels)\n+            echo $2 ;;\n+\t  from | modes)\n+\t    echo $3 ;;\n+\t  to)\n+\t    echo $4 ;;\n+\t  funcs)\n+\t    echo $2$3$4 ;;\n+\tesac\n+    fi\n+}\n+\n+case \"$1\" in\n+  arith)\n+    for n in $fixed_func_names; do\n+\tfor m in $fixed_fract_modes; do\n+\t    emit $2 $n $m\n+\tdone\n+    done\n+\n+    for n in $fixed_sfunc_names; do\n+\tfor m in $fixed_sfract_modes; do\n+\t    emit $2 $n $m\n+\tdone\n+    done\n+\n+    for n in $fixed_ufunc_names; do\n+\tfor m in $fixed_ufract_modes; do\n+\t    emit $2 $n $m\n+\tdone\n+    done\n+    ;;\n+\n+  conv)\n+    for f in $fixed_fract_modes; do\n+\tfor t in $fixed_fract_modes $fixed_signed_modes; do\n+\t    emit $2 _fract $f $t\n+\tdone\n+    done\n+\n+    for f in $fixed_signed_modes; do\n+\tfor t in $fixed_fract_modes; do\n+\t    emit $2 _fract $f $t\n+\tdone\n+    done\n+\n+    for f in $fixed_fract_modes $fixed_signed_modes; do\n+\tfor t in $fixed_fract_modes; do\n+\t    emit $2 _satfract $f $t\n+\tdone\n+    done\n+\n+    for f in $fixed_fract_modes; do\n+\tfor t in $fixed_unsigned_modes; do\n+\t    emit $2 _fractuns $f $t\n+\tdone\n+    done\n+\n+    for f in $fixed_unsigned_modes; do\n+\tfor t in $fixed_fract_modes; do\n+\t    emit $2 _fractuns $f $t\n+\tdone\n+    done\n+\n+    for f in $fixed_unsigned_modes; do\n+\tfor t in $fixed_fract_modes; do\n+\t    emit $2 _satfractuns $f $t\n+\tdone\n+    done\n+    ;;\n+\n+esac"}]}