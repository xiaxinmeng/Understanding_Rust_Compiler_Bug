{"sha": "57e2f6ad9f1af35a539be51006a00436e34923f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlMmY2YWQ5ZjFhZjM1YTUzOWJlNTEwMDZhMDA0MzZlMzQ5MjNmMA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-13T06:50:18Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-13T06:50:18Z"}, "message": "tree-vect-stmts.c (vectorizable_mask_load_store): Check types of stored value and storage are compatible.\n\ngcc/\n\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): Check\n\ttypes of stored value and storage are compatible.\n\ngcc/testsuite/\n\n\t* g++.dg/vect/simd-mask-store-bool.cc: New test.\n\nFrom-SVN: r230289", "tree": {"sha": "28ebc516cd400d8a9ca476cb9e644a7600b1bcb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ebc516cd400d8a9ca476cb9e644a7600b1bcb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e2f6ad9f1af35a539be51006a00436e34923f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2f6ad9f1af35a539be51006a00436e34923f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e2f6ad9f1af35a539be51006a00436e34923f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2f6ad9f1af35a539be51006a00436e34923f0/comments", "author": null, "committer": null, "parents": [{"sha": "54985c70aa21fe6cf49f2d109a6bd51f0a4c964f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54985c70aa21fe6cf49f2d109a6bd51f0a4c964f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54985c70aa21fe6cf49f2d109a6bd51f0a4c964f"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "34afa9a9e8a7f5a22a605c4ed4b2a0f02a3ecada", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57e2f6ad9f1af35a539be51006a00436e34923f0", "patch": "@@ -1,3 +1,8 @@\n+2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): Check\n+\ttypes of stored value and storage are compatible.\n+\n 2015-11-13  Andris Pavenis  <andris.pavenis@iki.fi>\n \n \t* gcc.c (POST_LINK_SPEC): Define if not already defined."}, {"sha": "60b50873dab5f8bd3ddc3f1a7dff1754dbc869d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57e2f6ad9f1af35a539be51006a00436e34923f0", "patch": "@@ -1,3 +1,7 @@\n+2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* g++.dg/vect/simd-mask-store-bool.cc: New test.\n+\n 2015-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR driver/67613"}, {"sha": "c5f0458ea752f56a787d4d25408685fe3b570810", "filename": "gcc/testsuite/g++.dg/vect/simd-mask-store-bool.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-mask-store-bool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-mask-store-bool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-mask-store-bool.cc?ref=57e2f6ad9f1af35a539be51006a00436e34923f0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_condition } */\n+/* { dg-additional-options \"-mavx512bw\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+#define N 1024\n+\n+int a[N], b[N], c[N];\n+bool d[N];\n+\n+void\n+test (void)\n+{\n+  int i;\n+#pragma omp simd safelen(64)\n+  for (i = 0; i < N; i++)\n+    if (a[i] > 0)\n+      d[i] = b[i] > c[i];\n+}"}, {"sha": "7870b29eab55e5e6ef54483cf7fd8b08e0769ff9", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e2f6ad9f1af35a539be51006a00436e34923f0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=57e2f6ad9f1af35a539be51006a00436e34923f0", "patch": "@@ -1688,6 +1688,7 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n   bool nested_in_vect_loop = nested_in_vect_loop_p (loop, stmt);\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  tree rhs_vectype = NULL_TREE;\n   tree mask_vectype;\n   tree elem_type;\n   gimple *new_stmt;\n@@ -1757,6 +1758,13 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!mask_vectype)\n     return false;\n \n+  if (is_store)\n+    {\n+      tree rhs = gimple_call_arg (stmt, 3);\n+      if (!vect_is_simple_use (rhs, loop_vinfo, &def_stmt, &dt, &rhs_vectype))\n+\treturn false;\n+    }\n+\n   if (STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n     {\n       gimple *def_stmt;\n@@ -1790,16 +1798,11 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n   else if (!VECTOR_MODE_P (TYPE_MODE (vectype))\n \t   || !can_vec_mask_load_store_p (TYPE_MODE (vectype),\n \t\t\t\t\t  TYPE_MODE (mask_vectype),\n-\t\t\t\t\t  !is_store))\n+\t\t\t\t\t  !is_store)\n+\t   || (rhs_vectype\n+\t       && !useless_type_conversion_p (vectype, rhs_vectype)))\n     return false;\n \n-  if (is_store)\n-    {\n-      tree rhs = gimple_call_arg (stmt, 3);\n-      if (!vect_is_simple_use (rhs, loop_vinfo, &def_stmt, &dt))\n-\treturn false;\n-    }\n-\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       STMT_VINFO_TYPE (stmt_info) = call_vec_info_type;"}]}