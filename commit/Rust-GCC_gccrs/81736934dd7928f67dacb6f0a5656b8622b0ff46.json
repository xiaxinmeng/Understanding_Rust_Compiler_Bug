{"sha": "81736934dd7928f67dacb6f0a5656b8622b0ff46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3MzY5MzRkZDc5MjhmNjdkYWNiNmYwYTU2NTZiODYyMmIwZmY0Ng==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-04-02T21:31:38Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-16T16:52:54Z"}, "message": "rs6000: Add functions for matching types, part 2 of 3\n\n2021-04-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (match_basetype): Implement.", "tree": {"sha": "4ff4e6098f08b597399562897edf392aa08d34a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ff4e6098f08b597399562897edf392aa08d34a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81736934dd7928f67dacb6f0a5656b8622b0ff46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81736934dd7928f67dacb6f0a5656b8622b0ff46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81736934dd7928f67dacb6f0a5656b8622b0ff46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81736934dd7928f67dacb6f0a5656b8622b0ff46/comments", "author": null, "committer": null, "parents": [{"sha": "0d685dfbb603b631c0e1d121dd73e73d33573ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d685dfbb603b631c0e1d121dd73e73d33573ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d685dfbb603b631c0e1d121dd73e73d33573ec5"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "44d6e8ae6edb0a60ffd0387e58edf9cdb16e0c86", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81736934dd7928f67dacb6f0a5656b8622b0ff46/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81736934dd7928f67dacb6f0a5656b8622b0ff46/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=81736934dd7928f67dacb6f0a5656b8622b0ff46", "patch": "@@ -385,6 +385,70 @@ handle_pointer (typeinfo *typedata)\n static int\n match_basetype (typeinfo *typedata)\n {\n+  consume_whitespace ();\n+  int oldpos = pos;\n+  char *token = match_identifier ();\n+  if (!token)\n+    {\n+      (*diag) (\"missing base type in return type at column %d\\n\", pos + 1);\n+      return 0;\n+    }\n+\n+  if (!strcmp (token, \"char\"))\n+    typedata->base = BT_CHAR;\n+  else if (!strcmp (token, \"short\"))\n+    typedata->base = BT_SHORT;\n+  else if (!strcmp (token, \"int\"))\n+    typedata->base = BT_INT;\n+  else if (!strcmp (token, \"long\"))\n+    {\n+      consume_whitespace ();\n+      oldpos = pos;\n+      char *mustbelongordbl = match_identifier ();\n+      if (!mustbelongordbl)\n+\ttypedata->base = BT_LONG;\n+      else if (!strcmp (mustbelongordbl, \"long\"))\n+\ttypedata->base = BT_LONGLONG;\n+      else if (!strcmp (mustbelongordbl, \"double\"))\n+\ttypedata->base = BT_LONGDOUBLE;\n+      else\n+\t/* Speculatively accept \"long\" here and push back the token.\n+\t   This occurs when \"long\" is a return type and the next token\n+\t   is the function name.  */\n+\t{\n+\t  typedata->base = BT_LONG;\n+\t  pos = oldpos;\n+\t}\n+    }\n+  else if (!strcmp (token, \"float\"))\n+    typedata->base = BT_FLOAT;\n+  else if (!strcmp (token, \"double\"))\n+    typedata->base = BT_DOUBLE;\n+  else if (!strcmp (token, \"__int128\"))\n+    typedata->base = BT_INT128;\n+  else if (!strcmp (token, \"_Float128\"))\n+    typedata->base = BT_FLOAT128;\n+  else if (!strcmp (token, \"bool\"))\n+    typedata->base = BT_BOOL;\n+  /* A \"string\" is a special \"const char *\" -- we need it because it\n+     cannot match either signed or unsigned char *.  */\n+  else if (!strcmp (token, \"string\"))\n+    typedata->base = BT_STRING;\n+  else if (!strcmp (token, \"_Decimal32\"))\n+    typedata->base = BT_DECIMAL32;\n+  else if (!strcmp (token, \"_Decimal64\"))\n+    typedata->base = BT_DECIMAL64;\n+  else if (!strcmp (token, \"_Decimal128\"))\n+    typedata->base = BT_DECIMAL128;\n+  else if (!strcmp (token, \"__ibm128\"))\n+    typedata->base = BT_IBM128;\n+  else\n+    {\n+      (*diag) (\"unrecognized base type at column %d\\n\", oldpos + 1);\n+      return 0;\n+    }\n+\n+  handle_pointer (typedata);\n   return 1;\n }\n "}]}