{"sha": "fd177738f3dc11a93cea8eaf816eee4461704911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQxNzc3MzhmM2RjMTFhOTNjZWE4ZWFmODE2ZWVlNDQ2MTcwNDkxMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-24T20:37:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-24T20:37:30Z"}, "message": "PR c++/90227 - error with template parameter packs.\n\nIf require_all_args, we aren't waiting for more args to be deduced later.\n\n\t* pt.c (coerce_template_parms): Do add empty pack when\n\trequire_all_args.\n\nFrom-SVN: r270556", "tree": {"sha": "170b31626ab82e04e23fc853336e33486b3f29b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/170b31626ab82e04e23fc853336e33486b3f29b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd177738f3dc11a93cea8eaf816eee4461704911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd177738f3dc11a93cea8eaf816eee4461704911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd177738f3dc11a93cea8eaf816eee4461704911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd177738f3dc11a93cea8eaf816eee4461704911/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58990c4d3a94334bcf1cd4f8dd7c2ba2888263e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58990c4d3a94334bcf1cd4f8dd7c2ba2888263e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58990c4d3a94334bcf1cd4f8dd7c2ba2888263e1"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "059a7fd0ea6600ecc379a83ae61e59c17b5915df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd177738f3dc11a93cea8eaf816eee4461704911", "patch": "@@ -1,3 +1,9 @@\n+2019-04-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90227 - error with template parameter packs.\n+\t* pt.c (coerce_template_parms): Do add empty pack when\n+\trequire_all_args.\n+\n 2019-04-24  Richard Biener  <rguenther@suse.de>\n \n \t* call.c (null_ptr_cst_p): Order checks according to expensiveness."}, {"sha": "e682b6d51be3608dea7b3a9a4d7c54c8158b8873", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fd177738f3dc11a93cea8eaf816eee4461704911", "patch": "@@ -8477,7 +8477,7 @@ coerce_template_parms (tree parms,\n \targ = NULL_TREE;\n \n       if (template_parameter_pack_p (TREE_VALUE (parm))\n-\t  && (arg || !(complain & tf_partial))\n+\t  && (arg || require_all_args || !(complain & tf_partial))\n \t  && !(arg && ARGUMENT_PACK_P (arg)))\n         {\n \t  /* Some arguments will be placed in the"}, {"sha": "f78ca858ce9669307cd02f1c309ad9be2e34ec05", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ62.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd177738f3dc11a93cea8eaf816eee4461704911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ62.C?ref=fd177738f3dc11a93cea8eaf816eee4461704911", "patch": "@@ -0,0 +1,80 @@\n+// PR c++/90227\n+// { dg-do compile { target c++14 } }\n+\n+template <int b> struct c { static constexpr int d = b; typedef c e; };\n+template <bool, typename a> using f = a;\n+template <bool g> using h = c<g>;\n+template <int g> using i = c<g>;\n+template <typename...> struct ab {};\n+template <typename... j> struct k { using e = ab<j...>; };\n+template <typename> struct ad;\n+template <typename j, typename... l> struct ad<ab<j, l...>> { using e = ab<l...>; };\n+template <typename> struct ae;\n+template <typename... m> struct ae<ab<m...>> : i<sizeof...(m)> {};\n+template <typename af, int, int = ae<af>::d> struct ag;\n+template <typename... m> struct ag<ab<m...>, 0, 0> { using e = ab<>; };\n+template <typename... m, int ah>\n+struct ag<ab<m...>, 0, ah> : k<typename ag<typename ad<ab<m...>>::e, ah - 1>::e> {};\n+template <typename... m, int ai, int ah>\n+struct ag<ab<m...>, ai, ah> : ag<typename ad<ab<m...>>::e, ai - 1> {};\n+template <typename, template <typename> class> struct aj;\n+template <typename... j, template <typename> class ak> struct aj<ab<j...>, ak> {\n+  using e = ab<typename ak<j>::e...>;\n+};\n+template <unsigned long> struct an;\n+struct ao { typedef an<0> ap; };\n+template <typename a, a...> struct aq {};\n+template <typename, typename = ao::ap> struct as;\n+template <typename a, unsigned long... at> struct as<a, an<at...>> { typedef aq<a> ap; };\n+template <typename a, a> using au = typename as<a>::ap;\n+template <long... at> using av = aq<unsigned long, at...>;\n+template <long ar> using aw = au<unsigned long, ar>;\n+struct ay { using e = h<c<false>::d>; };\n+template <typename, template <typename> class, typename...>\n+struct bb : ay::e {};\n+struct bd { using e = av<>; };\n+struct bg { using e = bd::e; };\n+namespace bi {\n+enum bj { bk };\n+struct bo { enum n { bp }; };\n+struct bq { bool br; static const bo::n bs = bo::bp; };\n+template <typename bv> struct bw { using e = bv; };\n+template <typename, bj, int, typename...> class bx;\n+template <typename bv, bj by, int bz, typename... j, long... anchors>\n+struct bx<bv, by, bz, ab<j...>, av<anchors...>> : bo {\n+  static const n bs = bv::bs;\n+  static const long ca = sizeof bv::br;\n+  using cb = int;\n+  using cc = ab<j...>;\n+  using cd = typename ag<cc, bz>::e;\n+  using ce = typename ag<cc, bz>::e;\n+  using cf = aw<ca>;\n+  using cg = typename bw<bv>::e;\n+  using ch = decltype(cg()(cb(), cd(), ce(), cf()));\n+};\n+class ck;\n+template <typename> struct cl : c<false> {};\n+template <typename bv, bj by, int bz, typename... j>\n+struct bx<bv, by, bz, ab<j...>> : public bx<bv, by, bz, typename aj<ab<j...>, cl>::e, bg::e> {};\n+}\n+using bi::bj;\n+using bi::ck;\n+template <typename cn> class co {\n+  template <typename p> co(p) { c<cn::bs>(); }\n+  static co o;\n+};\n+namespace bi {\n+template <typename> class cp;\n+template <typename j> using cq = bb<j, cp>;\n+template <typename, typename cr> void cs(cr, f<cq<cr>::d, void *> = nullptr);\n+}\n+using bi::cs;\n+struct cu : bi::bq {\n+  template <typename... cw, typename... cx>\n+  auto operator()(int q, ab<cw...>, ab<cx...>, av<>) {\n+    cs<cw...>(q);\n+  }\n+};\n+template <>\n+co<bi::bx<cu, bj::bk, 1, ab<int, ck>>>\n+co<bi::bx<cu, bj::bk, 1, ab<int, ck>>>::o(0);"}]}