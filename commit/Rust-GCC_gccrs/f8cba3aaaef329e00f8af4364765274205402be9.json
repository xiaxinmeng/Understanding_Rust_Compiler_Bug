{"sha": "f8cba3aaaef329e00f8af4364765274205402be9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjYmEzYWFhZWYzMjllMDBmOGFmNDM2NDc2NTI3NDIwNTQwMmJlOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-05-11T13:21:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-05-11T13:21:07Z"}, "message": "PR libstdc++/80285 optimize std::make_shared for -fno-rtti\n\n\tPR libstdc++/80285\n\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti): Define\n\tfunction to get unique fake std::type_info reference.\n\t(_Sp_counted_ptr_inplace::_M_get_deleter) [!__cpp_rtti]: Compare to\n\t_S_ti() fake reference.\n\t(__shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...)): Share\n\tsingle implementation with or without RTTI enable.\n\t[!__cpp_rtti]: Pass fake reference to _M_get_deleter.\n\t* testsuite/20_util/shared_ptr/creation/alloc.cc: Change expected\n\tallocation and deallocation counts.\n\t* testsuite/20_util/shared_ptr/creation/single_allocation.cc: New.\n\t* testsuite/20_util/shared_ptr/creation/single_allocation_no_rtti.cc:\n\tNew.\n\nFrom-SVN: r247905", "tree": {"sha": "764714d31d91c426d61f6a43b855c705c688f52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764714d31d91c426d61f6a43b855c705c688f52e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8cba3aaaef329e00f8af4364765274205402be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cba3aaaef329e00f8af4364765274205402be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cba3aaaef329e00f8af4364765274205402be9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cba3aaaef329e00f8af4364765274205402be9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b871ec5e1da82a58a6f58b575395dd07ff0050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b871ec5e1da82a58a6f58b575395dd07ff0050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b871ec5e1da82a58a6f58b575395dd07ff0050"}], "stats": {"total": 197, "additions": 158, "deletions": 39}, "files": [{"sha": "298d35182e67ef5eaf89bbe81e5ee6c5a58dc24d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f8cba3aaaef329e00f8af4364765274205402be9", "patch": "@@ -1,3 +1,19 @@\n+2017-05-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/80285\n+\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti): Define\n+\tfunction to get unique fake std::type_info reference.\n+\t(_Sp_counted_ptr_inplace::_M_get_deleter) [!__cpp_rtti]: Compare to\n+\t_S_ti() fake reference.\n+\t(__shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...)): Share\n+\tsingle implementation with or without RTTI enable.\n+\t[!__cpp_rtti]: Pass fake reference to _M_get_deleter.\n+\t* testsuite/20_util/shared_ptr/creation/alloc.cc: Change expected\n+\tallocation and deallocation counts.\n+\t* testsuite/20_util/shared_ptr/creation/single_allocation.cc: New.\n+\t* testsuite/20_util/shared_ptr/creation/single_allocation_no_rtti.cc:\n+\tNew.\n+\n 2017-05-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tBump version namespace."}, {"sha": "69185794a855afdf268527a88a102d48e15e798d", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 28, "deletions": 36, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f8cba3aaaef329e00f8af4364765274205402be9", "patch": "@@ -68,6 +68,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #pragma GCC diagnostic pop\n #endif\n \n+#if !__cpp_rtti\n+  class type_info;\n+#endif\n+\n  /**\n    *  @brief  Exception possibly thrown by @c shared_ptr.\n    *  @ingroup exceptions\n@@ -498,7 +502,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // helpers for make_shared / allocate_shared\n \n-  struct _Sp_make_shared_tag { };\n+  struct _Sp_make_shared_tag\n+  {\n+#if !__cpp_rtti\n+  private:\n+    template<typename _Tp, _Lock_policy _Lp>\n+      friend class __shared_ptr;\n+    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n+      friend class _Sp_counted_ptr_inplace;\n+\n+    static const type_info&\n+    _S_ti() noexcept\n+    {\n+      static constexpr _Sp_make_shared_tag __tag;\n+      return reinterpret_cast<const type_info&>(__tag);\n+    }\n+#endif\n+  };\n \n   template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n     class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>\n@@ -551,8 +571,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n #if __cpp_rtti\n \tif (__ti == typeid(_Sp_make_shared_tag))\n-\t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n+#else\n+\tif (&__ti == &_Sp_make_shared_tag::_S_ti())\n #endif\n+\t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n \treturn nullptr;\n       }\n \n@@ -1295,7 +1317,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \towner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n \n-#if __cpp_rtti\n     protected:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n@@ -1306,43 +1327,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  // _M_ptr needs to point to the newly constructed object.\n \t  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.\n+#if __cpp_rtti\n \t  void* __p = _M_refcount._M_get_deleter(typeid(__tag));\n-\t  _M_ptr = static_cast<_Tp*>(__p);\n-\t  _M_enable_shared_from_this_with(_M_ptr);\n-\t}\n #else\n-      template<typename _Alloc>\n-        struct _Deleter\n-        {\n-          void operator()(typename _Alloc::value_type* __ptr)\n-          {\n-\t    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };\n-\t    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());\n-          }\n-          _Alloc _M_alloc;\n-        };\n-\n-      template<typename _Alloc, typename... _Args>\n-\t__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n-\t\t     _Args&&... __args)\n-\t: _M_ptr(), _M_refcount()\n-\t{\n-\t  typedef typename allocator_traits<_Alloc>::template\n-\t    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;\n-\t  _Deleter<typename __traits::allocator_type> __del = { __a };\n-\t  auto __guard = std::__allocate_guarded(__del._M_alloc);\n-\t  auto __ptr = __guard.get();\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 2070. allocate_shared should use allocator_traits<A>::construct\n-\t  __traits::construct(__del._M_alloc, __ptr,\n-\t\t\t      std::forward<_Args>(__args)...);\n-\t  __guard = nullptr;\n-\t  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);\n-\t  _M_refcount._M_swap(__count);\n-\t  _M_ptr = __ptr;\n+\t  void* __p = _M_refcount._M_get_deleter(_Sp_make_shared_tag::_S_ti());\n+#endif\n+\t  _M_ptr = static_cast<_Tp*>(__p);\n \t  _M_enable_shared_from_this_with(_M_ptr);\n \t}\n-#endif\n \n       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,\n \t       typename... _Args>"}, {"sha": "7e53e41a72fdc7caf8c1737a3490da75435a0247", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/alloc.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc?ref=f8cba3aaaef329e00f8af4364765274205402be9", "patch": "@@ -63,7 +63,7 @@ test01()\n     VERIFY( p1.get() != 0 );\n     VERIFY( p1.use_count() == 1 );\n     VERIFY( A::ctor_count == 1 );\n-    VERIFY( tracker_allocator_counter::get_allocation_count() > 0 );\n+    VERIFY( tracker_allocator_counter::get_allocation_count() > sizeof(A) );\n   }\n   VERIFY( A::ctor_count == A::dtor_count );\n   VERIFY( tracker_allocator_counter::get_allocation_count()\n@@ -79,12 +79,12 @@ test02()\n   \n   p1 = std::allocate_shared<A>(tracker_allocator<A>(), 1);\n   VERIFY( A::ctor_count == 1 );\n-  VERIFY( tracker_allocator_counter::get_allocation_count() > 0 );\n+  VERIFY( tracker_allocator_counter::get_allocation_count() > sizeof(A) );\n \n   p1 = std::allocate_shared<A>(tracker_allocator<A>(), 1, 2.0);\n   VERIFY( A::ctor_count == 2 );\n   VERIFY( A::dtor_count == 1 );\n-  VERIFY( tracker_allocator_counter::get_deallocation_count() > 0 );\n+  VERIFY( tracker_allocator_counter::get_deallocation_count() > sizeof(A) );\n \n   p1 = std::allocate_shared<A>(tracker_allocator<A>(), 1, 2.0, '3');\n   VERIFY( A::ctor_count == 3 );"}, {"sha": "51b6b1bc75117024483ab3604ec3e073072a081d", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/single_allocation.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation.cc?ref=f8cba3aaaef329e00f8af4364765274205402be9", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+int counter = 0;\n+\n+template<typename T>\n+struct Alloc : std::allocator<T>\n+{\n+  template<typename U>\n+    struct rebind { using other = Alloc<U>; };\n+\n+  Alloc() = default;\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  T* allocate(std::size_t n)\n+  {\n+    ++counter;\n+    return std::allocator<T>::allocate(n);\n+  }\n+};\n+\n+\n+void\n+test01()\n+{\n+  std::allocate_shared<int>(Alloc<int>());\n+  VERIFY( counter == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "ba94f3cb90ec917994187741a67fd94e19072d69", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/single_allocation_no_rtti.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation_no_rtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cba3aaaef329e00f8af4364765274205402be9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation_no_rtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fsingle_allocation_no_rtti.cc?ref=f8cba3aaaef329e00f8af4364765274205402be9", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-fno-rtti\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+int counter = 0;\n+\n+template<typename T>\n+struct Alloc : std::allocator<T>\n+{\n+  template<typename U>\n+    struct rebind { using other = Alloc<U>; };\n+\n+  Alloc() = default;\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  T* allocate(std::size_t n)\n+  {\n+    ++counter;\n+    return std::allocator<T>::allocate(n);\n+  }\n+};\n+\n+\n+void\n+test01()\n+{\n+  std::allocate_shared<int>(Alloc<int>());\n+  VERIFY( counter == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}