{"sha": "95cb33a561ceaa41888f19f43e3f46d221543034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjYjMzYTU2MWNlYWE0MTg4OGYxOWY0M2UzZjQ2ZDIyMTU0MzAzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T13:29:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T13:29:52Z"}, "message": "[multiple changes]\n\n2010-01-27  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb: When there is only one main specified, the package\n\tsupport Switches (<main>) and attribute Switches is specified for the\n\tmain, use these switches, instead of Default_Switches (\"Ada\").\n\n2010-01-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb, par-prag.adb, snames.ads-tmpl: pragma Dimension initial\n\timplementation.\n\t* exp_disp.adb: Minor reformatting\n\nFrom-SVN: r156283", "tree": {"sha": "9de3c80f0084379d6950602b4c24ba0057eb2554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de3c80f0084379d6950602b4c24ba0057eb2554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95cb33a561ceaa41888f19f43e3f46d221543034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb33a561ceaa41888f19f43e3f46d221543034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95cb33a561ceaa41888f19f43e3f46d221543034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb33a561ceaa41888f19f43e3f46d221543034/comments", "author": null, "committer": null, "parents": [{"sha": "4f6fee0ff25a3667f8ec307ae0150cf38224266c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6fee0ff25a3667f8ec307ae0150cf38224266c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6fee0ff25a3667f8ec307ae0150cf38224266c"}], "stats": {"total": 112, "additions": 89, "deletions": 23}, "files": [{"sha": "10cf7299dc04eefee324cc38866e5f7850bfd889", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -1,3 +1,15 @@\n+2010-01-27  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb: When there is only one main specified, the package\n+\tsupport Switches (<main>) and attribute Switches is specified for the\n+\tmain, use these switches, instead of Default_Switches (\"Ada\").\n+\n+2010-01-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb, par-prag.adb, snames.ads-tmpl: pragma Dimension initial\n+\timplementation.\n+\t* exp_disp.adb: Minor reformatting\n+\n 2010-01-27  Tristan Gingold  <gingold@adacore.com>\n \n \t* seh_init.c: Use __ImageBase instead of _ImageBase."}, {"sha": "11ae6dff5c78d4459904694301315bcb114d0c5c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -1443,11 +1443,11 @@ package body Exp_Disp is\n       Thunk_Id   : out Entity_Id;\n       Thunk_Code : out Node_Id)\n    is\n-      Loc             : constant Source_Ptr := Sloc (Prim);\n-      Actuals         : constant List_Id    := New_List;\n-      Decl            : constant List_Id    := New_List;\n-      Formals         : constant List_Id    := New_List;\n-      Target          : constant Entity_Id  := Ultimate_Alias (Prim);\n+      Loc     : constant Source_Ptr := Sloc (Prim);\n+      Actuals : constant List_Id    := New_List;\n+      Decl    : constant List_Id    := New_List;\n+      Formals : constant List_Id    := New_List;\n+      Target  : constant Entity_Id  := Ultimate_Alias (Prim);\n \n       Controlling_Typ : Entity_Id;\n       Decl_1          : Node_Id;\n@@ -1464,8 +1464,8 @@ package body Exp_Disp is\n       Thunk_Id   := Empty;\n       Thunk_Code := Empty;\n \n-      --  In case of primitives that are functions without formals and\n-      --  a controlling result there is no need to build the thunk.\n+      --  In case of primitives that are functions without formals and a\n+      --  controlling result there is no need to build the thunk.\n \n       if not Present (First_Formal (Target)) then\n          pragma Assert (Ekind (Target) = E_Function\n@@ -1477,8 +1477,8 @@ package body Exp_Disp is\n       --  of the controlling formal is the covered interface type (instead of\n       --  the target tagged type). Done to avoid problems with discriminated\n       --  tagged types because, if the controlling type has discriminants with\n-      --  default values, then the type conversions done inside the body of the\n-      --  thunk (after the displacement of the pointer to the base of the\n+      --  default values, then the type conversions done inside the body of\n+      --  the thunk (after the displacement of the pointer to the base of the\n       --  actual object) generate code that modify its contents.\n \n       --  Note: This special management is not done for predefined primitives\n@@ -1493,7 +1493,7 @@ package body Exp_Disp is\n          Ftyp := Etype (Formal);\n \n          --  Use the interface type as the type of the controlling formal (see\n-         --  comment above)\n+         --  comment above).\n \n          if not Is_Controlling_Formal (Formal)\n            or else Is_Predefined_Dispatching_Operation (Prim)\n@@ -1547,7 +1547,6 @@ package body Exp_Disp is\n            and then Ftyp = Controlling_Typ\n          then\n             --  Generate:\n-\n             --     type T is access all <<type of the target formal>>\n             --     S : Storage_Offset := Storage_Offset!(Formal)\n             --                            - Offset_To_Top (address!(Formal))\n@@ -1608,8 +1607,8 @@ package body Exp_Disp is\n                  New_Reference_To (Defining_Identifier (Decl_1), Loc)));\n \n          elsif Ftyp = Controlling_Typ then\n-            --  Generate:\n \n+            --  Generate:\n             --     S1 : Storage_Offset := Storage_Offset!(Formal'Address)\n             --                             - Offset_To_Top (Formal'Address)\n             --     S2 : Addr_Ptr := Addr_Ptr!(S1)\n@@ -1690,6 +1689,8 @@ package body Exp_Disp is\n \n       Set_Is_Thunk (Thunk_Id);\n \n+      --  Procedure case\n+\n       if Ekind (Target) = E_Procedure then\n          Thunk_Code :=\n            Make_Subprogram_Body (Loc,\n@@ -1705,8 +1706,9 @@ package body Exp_Disp is\n                       Name => New_Occurrence_Of (Target, Loc),\n                       Parameter_Associations => Actuals))));\n \n-      else pragma Assert (Ekind (Target) = E_Function);\n+      --  Function case\n \n+      else pragma Assert (Ekind (Target) = E_Function);\n          Thunk_Code :=\n            Make_Subprogram_Body (Loc,\n               Specification =>"}, {"sha": "6ab6821a63d360bb0f7ea8e87cd2fa2859e5a292", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -1807,12 +1807,14 @@ begin\n \n             Element : Package_Element;\n \n-            Default_Switches_Array : Array_Element_Id;\n+            Switches_Array : Array_Element_Id;\n \n             The_Switches : Prj.Variable_Value;\n             Current      : Prj.String_List_Id;\n             The_String   : String_Element;\n \n+            Main : String_Access := null;\n+\n          begin\n             if Pkg /= No_Package then\n                Element := Project_Tree.Packages.Table (Pkg);\n@@ -1838,16 +1840,45 @@ begin\n                --  name of the programming language.\n \n                else\n+                  --  First check if there is a single main\n+\n+                  for J in 1 .. Last_Switches.Last loop\n+                     if Last_Switches.Table (J) (1) /= '-' then\n+                        if Main = null then\n+                           Main := Last_Switches.Table (J);\n+\n+                        else\n+                           Main := null;\n+                           exit;\n+                        end if;\n+                     end if;\n+                  end loop;\n+\n+                  if Main /= null then\n+                     Switches_Array :=\n+                       Prj.Util.Value_Of\n+                         (Name      => Name_Switches,\n+                          In_Arrays => Element.Decl.Arrays,\n+                          In_Tree   => Project_Tree);\n+                     Name_Len := 0;\n+                     Add_Str_To_Name_Buffer (Main.all);\n+                     The_Switches := Prj.Util.Value_Of\n+                       (Index     => Name_Find,\n+                        Src_Index => 0,\n+                        In_Array  => Switches_Array,\n+                        In_Tree   => Project_Tree);\n+                  end if;\n+\n                   if The_Switches.Kind = Prj.Undefined then\n-                     Default_Switches_Array :=\n+                     Switches_Array :=\n                        Prj.Util.Value_Of\n                          (Name      => Name_Default_Switches,\n                           In_Arrays => Element.Decl.Arrays,\n                           In_Tree   => Project_Tree);\n                      The_Switches := Prj.Util.Value_Of\n                        (Index     => Name_Ada,\n                         Src_Index => 0,\n-                        In_Array  => Default_Switches_Array,\n+                        In_Array  => Switches_Array,\n                         In_Tree   => Project_Tree);\n                   end if;\n                end if;"}, {"sha": "9b5b0ab76a377f35cfced890035040f6b6b435dd", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -1081,6 +1081,7 @@ begin\n            Pragma_Convention                    |\n            Pragma_Debug_Policy                  |\n            Pragma_Detect_Blocking               |\n+           Pragma_Dimension                     |\n            Pragma_Discard_Names                 |\n            Pragma_Eliminate                     |\n            Pragma_Elaborate                     |"}, {"sha": "29b4cdf7db69762c83b635ed5496e6e2d2f920b5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -6490,6 +6490,24 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n             Detect_Blocking := True;\n \n+         ---------------\n+         -- Dimension --\n+         ---------------\n+\n+         when Pragma_Dimension =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (4);\n+            Check_No_Identifiers;\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            if not Is_Type (Arg1) then\n+               Error_Pragma (\"first argument for pragma% must be subtype\");\n+            end if;\n+\n+            Check_Arg_Is_Static_Expression (Arg2, Standard_Integer);\n+            Check_Arg_Is_Static_Expression (Arg3, Standard_Integer);\n+            Check_Arg_Is_Static_Expression (Arg4, Standard_Integer);\n+\n          -------------------\n          -- Discard_Names --\n          -------------------\n@@ -12450,14 +12468,13 @@ package body Sem_Prag is\n    -----------------------------------------\n \n    --  This function makes use of the following static table which indicates\n-   --  whether a given pragma is significant. A value of -1 in this table\n-   --  indicates that the reference is significant. A value of zero indicates\n-   --  than appearance as any argument is insignificant, a positive value\n-   --  indicates that appearance in that parameter position is significant.\n+   --  whether a given pragma is significant.\n \n-   --  A value of 99 flags a special case requiring a special check (this is\n-   --  used for cases not covered by this standard encoding, e.g. pragma Check\n-   --  where the first argument is not significant, but the others are).\n+   --  -1  indicates that references in any argument position are significant\n+   --  0   indicates that appearence in any argument is not significant\n+   --  +n  indicates that appearence as argument n is significant, but all\n+   --      other arguments are not significant\n+   --  99  special processing required (e.g. for pragma Check)\n \n    Sig_Flags : constant array (Pragma_Id) of Int :=\n      (Pragma_AST_Entry                     => -1,\n@@ -12498,6 +12515,7 @@ package body Sem_Prag is\n       Pragma_Debug                         => -1,\n       Pragma_Debug_Policy                  =>  0,\n       Pragma_Detect_Blocking               => -1,\n+      Pragma_Dimension                     => -1,\n       Pragma_Discard_Names                 =>  0,\n       Pragma_Elaborate                     => -1,\n       Pragma_Elaborate_All                 => -1,"}, {"sha": "89bbe4c7e408b91cd675b04c29af0086cff5c740", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb33a561ceaa41888f19f43e3f46d221543034/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=95cb33a561ceaa41888f19f43e3f46d221543034", "patch": "@@ -428,6 +428,7 @@ package Snames is\n    Name_CPP_Virtual                    : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Vtable                     : constant Name_Id := N + $; -- GNAT\n    Name_Debug                          : constant Name_Id := N + $; -- GNAT\n+   Name_Dimension                      : constant Name_Id := N + $; -- GNAT\n    Name_Elaborate                      : constant Name_Id := N + $; -- Ada 83\n    Name_Elaborate_All                  : constant Name_Id := N + $;\n    Name_Elaborate_Body                 : constant Name_Id := N + $;\n@@ -1494,6 +1495,7 @@ package Snames is\n       Pragma_CPP_Virtual,\n       Pragma_CPP_Vtable,\n       Pragma_Debug,\n+      Pragma_Dimension,\n       Pragma_Elaborate,\n       Pragma_Elaborate_All,\n       Pragma_Elaborate_Body,"}]}