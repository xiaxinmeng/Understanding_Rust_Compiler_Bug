{"sha": "eb7528db9d7fb96d9ca69ae196e884915e13d761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NTI4ZGI5ZDdmYjk2ZDljYTY5YWUxOTZlODg0OTE1ZTEzZDc2MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T07:16:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T07:16:30Z"}, "message": "entered into RCS\n\nFrom-SVN: r899", "tree": {"sha": "d2347ef79ed4adb3675887373f486bb40a6ccf3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2347ef79ed4adb3675887373f486bb40a6ccf3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7528db9d7fb96d9ca69ae196e884915e13d761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7528db9d7fb96d9ca69ae196e884915e13d761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7528db9d7fb96d9ca69ae196e884915e13d761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7528db9d7fb96d9ca69ae196e884915e13d761/comments", "author": null, "committer": null, "parents": [{"sha": "1b6c8b1231b2825c1de1d8649d83285f567418f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6c8b1231b2825c1de1d8649d83285f567418f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6c8b1231b2825c1de1d8649d83285f567418f2"}], "stats": {"total": 161, "additions": 71, "deletions": 90}, "files": [{"sha": "becf406d981f4b9a4a07c09325a1b26ea6ef614d", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 71, "deletions": 90, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7528db9d7fb96d9ca69ae196e884915e13d761/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7528db9d7fb96d9ca69ae196e884915e13d761/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=eb7528db9d7fb96d9ca69ae196e884915e13d761", "patch": "@@ -38,102 +38,76 @@ void\n trace (s, s1, s2)\n      char *s, *s1, *s2;\n {\n-    fprintf (stderr, s, s1, s2);\n+  fprintf (stderr, s, s1, s2);\n }\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE. */ \n \n int\n-hard_regno_mode_ok( regno, mode )\n-int regno;\n-int mode;\n+hard_regno_mode_ok (regno, mode)\n+     int regno;\n+     int mode;\n {\n-\tswitch( mode ) {\n-\t\tcase QImode:\n-\t\tcase HImode:\n-\t\tcase PSImode:\n-\t\tcase SImode:\n-\t\tcase PDImode:\n-\t\tcase VOIDmode:\n-\t\tcase BLKmode:\n-\t\t\tif( (regno < 8) || (regno == 16) || (regno == 17) ) {\n-\t\t\t\treturn( 1 );\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn( 0 );\n-\t\t\t}\n-\n-\t\tcase DImode:\n-\t\t\tif( (regno < 8) && ((regno & 1) == 0) ) {\n-\t\t\t\treturn( 1 );\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn( 0 );\n-\t\t\t}\n-\n-\n-\t\tcase SFmode:\n-\t\tcase SCmode:\n-\t\t\tif( TARGET_32081 ) {\n-\t\t\t\tif( regno < 16 ) {\n-\t\t\t\t\treturn( 1 );\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn( 0 );\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tif( regno < 8 ) {\n-\t\t\t\t\treturn( 1 );\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn( 0 );\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\tcase DFmode:\n-\t\tcase DCmode:\n-\t\t\tif( (regno & 1) == 0 ) {\n-\t\t\t\tif( TARGET_32081 ) {\n-\t\t\t\t\tif( regno < 16 ) {\n-\t\t\t\t\t\treturn( 1 );\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\treturn( 0 );\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tif( regno < 8 ) {\n-\t\t\t\t\t\treturn( 1 );\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\treturn( 0 );\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn( 0 );\n-\t\t\t}\n- \n-\t\tcase XFmode:\n-\t\t\tabort( 0 );\n-\t\tcase CCmode:\n-\t\t\tabort( 0 );\n-\t\tcase TImode:\n-\t\t\tabort( 0 );\n-\t\tcase XCmode:\t\n-\t\t\tabort( 0 );\n-\t\tcase TFmode:\n-\t\t\tabort( 0 );\n-\t\tcase TCmode:\n-\t\t\tabort( 0 );\n-\n-\n-\t\tdefault:\n-\t\t\tfprintf( stderr, \"cant match mode %d\\n\", mode );\n-\t\t\tabort( 0 );\n+  switch (mode)\n+    {\n+    case QImode:\n+    case HImode:\n+    case PSImode:\n+    case SImode:\n+    case PDImode:\n+    case VOIDmode:\n+    case BLKmode:\n+      if (regno < 8 || regno == 16 || regno == 17)\n+\treturn 1;\n+      else\n+\treturn 0;\n+\n+    case DImode:\n+      if (regno < 8 && (regno & 1) == 0)\n+\treturn 1;\n+      else\n+\treturn 0;\n+\n+    case SFmode:\n+    case SCmode:\n+      if (TARGET_32081)\n+\t{\n+\t  if (regno < 16)\n+\t    return 1;\n+\t  else\n+\t    return 0;\n+\t}\n+      else\n+\t{\n+\t  if (regno < 8)\n+\t    return 1;\n+\t  else \n+\t    return 0;\n+\t}\n+\n+    case DFmode:\n+    case DCmode:\n+      if ((regno & 1) == 0)\n+\t{\t\n+\t  if (TARGET_32081)\n+\t    {\n+\t      if (regno < 16)\n+\t\treturn 1;\n+\t      else\n+\t\treturn 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (regno < 8)\n+\t\treturn 1;\n+\t      else\n+\t\treturn 0;\n+\t    }\n \t}\n-\tabort(0);\n+      else\n+\treturn 0;\n+    }\n+  abort(0);\n }\n \n /* ADDRESS_COST calls this.  This function is not optimal\n@@ -201,10 +175,17 @@ secondary_reload_class (class, mode, in)\n   if (class == GENERAL_REGS || (regno >= 0 && regno < 8))\n     return NO_REGS;\n \n-  /* Constants, memory, and FP registers can go into FP registers */\n+  /* Constants, memory, and FP registers can go into FP registers.  */\n   if ((regno == -1 || (regno >= 8 && regno < 16)) && (class == FLOAT_REGS))\n     return NO_REGS;\n \n+#if 0 /* This isn't strictly true (can't move fp to sp or vice versa),\n+\t so it's cleaner to use PREFERRED_RELOAD_CLASS\n+\t to make the right things happen.  */\n+  if (regno >= 16 && class == GEN_AND_MEM_REGS)\n+    return NO_REGS;\n+#endif\n+\n   /* Otherwise, we need GENERAL_REGS. */\n   return GENERAL_REGS;\n }"}]}