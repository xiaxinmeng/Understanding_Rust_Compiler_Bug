{"sha": "8238b660fb6204b3e6968e9a6ed550b16c86b25e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIzOGI2NjBmYjYyMDRiM2U2OTY4ZTlhNmVkNTUwYjE2Yzg2YjI1ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T22:07:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T22:07:40Z"}, "message": "libgo: add Debugging section to README\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/176001\n\nFrom-SVN: r271019", "tree": {"sha": "7bfaa7fe072ad6c8c54ae38f056999f57ad7980b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bfaa7fe072ad6c8c54ae38f056999f57ad7980b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8238b660fb6204b3e6968e9a6ed550b16c86b25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8238b660fb6204b3e6968e9a6ed550b16c86b25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8238b660fb6204b3e6968e9a6ed550b16c86b25e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8238b660fb6204b3e6968e9a6ed550b16c86b25e/comments", "author": null, "committer": null, "parents": [{"sha": "6328ce1f83c260ac7728f9490870c326944b17d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6328ce1f83c260ac7728f9490870c326944b17d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6328ce1f83c260ac7728f9490870c326944b17d8"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "7c884a988dae279acd752f0e2b2ab95251b81878", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8238b660fb6204b3e6968e9a6ed550b16c86b25e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8238b660fb6204b3e6968e9a6ed550b16c86b25e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8238b660fb6204b3e6968e9a6ed550b16c86b25e", "patch": "@@ -1,4 +1,4 @@\n-859e8ed3d632d9fe43d03fb81f6abefecf5fe3a6\n+f813c670deb8e0454c3f64de74bedb5dcedd10b4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a39d524df96d309f51d2cd08cebb5cd026edbe0d", "filename": "libgo/README", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8238b660fb6204b3e6968e9a6ed550b16c86b25e/libgo%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8238b660fb6204b3e6968e9a6ed550b16c86b25e/libgo%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FREADME?ref=8238b660fb6204b3e6968e9a6ed550b16c86b25e", "patch": "@@ -42,3 +42,28 @@ http://code.google.com/legal/corporate-cla-v1.0.html.\n If the copyright holder for your code has already completed the\n agreement in connection with another Google open source project, it\n does not need to be completed again.\n+\n+Debugging\n+=========\n+\n+This describes how to test libgo when built as part of gccgo.\n+\n+To test a specific package, cd to the libgo build directory\n+(TARGET/libgo) and run `make PKG/check`.  For example, `make\n+bytes/check`.\n+\n+To see the exact commands that it runs, including how the compiler is\n+invoked, run `make GOTESTFLAGS=--trace bytes/check`.  This will\n+display the commands if the test fails.  If the test passes, the\n+commands and other output will be visible in a file named\n+check-testlog in a subdirectory with the name of the package being\n+checked.  In the case of bytes/check, this will create\n+bytes/check-testlog.\n+\n+To leave the test program behind, run `make GOTESTFLAGS=--keep\n+bytes/check`.  That will leave a gotestNNNN/test directory in the\n+libgo build directory.  In that directory you can run\n+`LD_LIBRARY_PATH=../../.libs ./a.out -test.short` to run the tests.\n+You can run specific failing tests using a -test.run option.  You can\n+see the tests being run with the -test.v option.  You can run the\n+program under a debugger such as gdb."}]}