{"sha": "bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MzEwMWViNjYwYWQ2NGU1ZjYzZjgwNzBiN2FiNGM4MTRlNTJiNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-14T23:51:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-14T23:51:34Z"}, "message": "except.c (expand_eh_region_start_for_decl): Use NOTE_EH_HANDLER, not NOTE_BLOCK_NUMBER.\n\n\t* except.c (expand_eh_region_start_for_decl): Use NOTE_EH_HANDLER,\n\tnot NOTE_BLOCK_NUMBER.\n\t(expand_eh_region_end): Likewise.\n\t(find_exception_handler_labels): Likewise.\n\t(scan_region): Likewise.\n\t(exception_optimize): Likewise.\n\t(update_rethrow_references): Likewise.\n\t(set_insn_eh_region): Likewise.\n\t* final.c (final_scan_insn): Likewise.\n\t* flow.c (make_edges): Likewise.\n\t* integrate.c (expand_inline_function): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\nFrom-SVN: r29418", "tree": {"sha": "8265802fe38fd0aedf6ff678f8e5899e057f140b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8265802fe38fd0aedf6ff678f8e5899e057f140b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/comments", "author": null, "committer": null, "parents": [{"sha": "8411a9039968cd745e26d796136e290518e2ef9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8411a9039968cd745e26d796136e290518e2ef9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8411a9039968cd745e26d796136e290518e2ef9f"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "6b1d3a0a99fa77adeea22006f2e442476f74fb0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -1,3 +1,18 @@\n+Tue Sep 14 16:47:08 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* except.c (expand_eh_region_start_for_decl): Use NOTE_EH_HANDLER,\n+\tnot NOTE_BLOCK_NUMBER.\n+\t(expand_eh_region_end): Likewise.\n+\t(find_exception_handler_labels): Likewise.\n+\t(scan_region): Likewise.\n+\t(exception_optimize): Likewise.\n+\t(update_rethrow_references): Likewise.\n+\t(set_insn_eh_region): Likewise.\n+\t* final.c (final_scan_insn): Likewise.\n+\t* flow.c (make_edges): Likewise.\n+\t* integrate.c (expand_inline_function): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\n Tue Sep 14 16:30:16 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* ginclude/stdarg.h, ginclude/varargs.h: Implement in"}, {"sha": "9a190c7513d58023131aad2462bf37dc339d6c6f", "filename": "gcc/except.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -1437,7 +1437,7 @@ expand_eh_region_start_for_decl (decl)\n \n   push_eh_entry (&ehstack);\n   note = emit_note (NULL_PTR, NOTE_INSN_EH_REGION_BEG);\n-  NOTE_BLOCK_NUMBER (note)\n+  NOTE_EH_HANDLER (note)\n     = CODE_LABEL_NUMBER (ehstack.top->entry->exception_handler_label);\n   if (exceptions_via_longjmp)\n     start_dynamic_handler ();\n@@ -1476,7 +1476,7 @@ expand_eh_region_end (handler)\n   entry = pop_eh_entry (&ehstack);\n \n   note = emit_note (NULL_PTR, NOTE_INSN_EH_REGION_END);\n-  ret = NOTE_BLOCK_NUMBER (note)\n+  ret = NOTE_EH_HANDLER (note)\n     = CODE_LABEL_NUMBER (entry->exception_handler_label);\n   if (exceptions_via_longjmp == 0 && ! flag_new_exceptions\n       /* We share outer_context between regions; only emit it once.  */\n@@ -1498,7 +1498,7 @@ expand_eh_region_end (handler)\n   entry->finalization = handler;\n \n   /* create region entry in final exception table */\n-  r = new_eh_region_entry (NOTE_BLOCK_NUMBER (note), entry->rethrow_label);\n+  r = new_eh_region_entry (NOTE_EH_HANDLER (note), entry->rethrow_label);\n \n   enqueue_eh_entry (&ehqueue, entry);\n \n@@ -2018,7 +2018,7 @@ static int eh_table_max_size = 0;\n \n    Called from final_scan_insn when a NOTE_INSN_EH_REGION_BEG is seen.\n    (Or NOTE_INSN_EH_REGION_END sometimes)\n-   N is the NOTE_BLOCK_NUMBER of the note, which comes from the code\n+   N is the NOTE_EH_HANDLER of the note, which comes from the code\n    label number of the exception handler for the region.  */\n \n void\n@@ -2289,7 +2289,7 @@ find_exception_handler_labels ()\n       if (GET_CODE (insn) == NOTE\n \t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n \t{\n-          ptr = get_first_handler (NOTE_BLOCK_NUMBER (insn));\n+          ptr = get_first_handler (NOTE_EH_HANDLER (insn));\n           for ( ; ptr; ptr = ptr->next) \n             {\n               /* make sure label isn't in the list already */\n@@ -2560,7 +2560,7 @@ scan_region (insn, n, delete_outer)\n   if (insn == NULL_RTX\n       || GET_CODE (insn) != NOTE\n       || NOTE_LINE_NUMBER (insn) != NOTE_INSN_EH_REGION_BEG\n-      || NOTE_BLOCK_NUMBER (insn) != n\n+      || NOTE_EH_HANDLER (insn) != n\n       || delete_outer == NULL)\n     abort ();\n \n@@ -2580,14 +2580,14 @@ scan_region (insn, n, delete_outer)\n       if (GET_CODE (insn) == NOTE\n \t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n \t{\n-\t  insn = scan_region (insn, NOTE_BLOCK_NUMBER (insn), &delete);\n+\t  insn = scan_region (insn, NOTE_EH_HANDLER (insn), &delete);\n \t}\n \n       insn = NEXT_INSN (insn);\n     }\n \n   /* The _BEG/_END NOTEs must match and nest.  */\n-  if (NOTE_BLOCK_NUMBER (insn) != n)\n+  if (NOTE_EH_HANDLER (insn) != n)\n     abort ();\n \n   /* If anything in this exception region can throw, we can throw.  */\n@@ -2665,7 +2665,7 @@ exception_optimize ()\n \t     inbetween. We are also guaranteed that the value of insn\n \t     returned will be valid, as otherwise scan_region won't\n \t     return.  */\n-\t  insn = scan_region (insn, NOTE_BLOCK_NUMBER (insn), &n);\n+\t  insn = scan_region (insn, NOTE_EH_HANDLER (insn), &n);\n \t}\n     }\n }\n@@ -2706,7 +2706,7 @@ update_rethrow_references ()\n         {\n \t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n \t    {\n-\t      region = find_func_region (NOTE_BLOCK_NUMBER (insn));\n+\t      region = find_func_region (NOTE_EH_HANDLER (insn));\n \t      saw_region[region] = 1;\n \t    }\n \t}\n@@ -2946,10 +2946,10 @@ set_insn_eh_region (first, region_num)\n \n   for (insn = *first; insn; insn = NEXT_INSN (insn))\n     {\n-      if ((GET_CODE (insn) == NOTE) && \n-                        (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG))\n+      if ((GET_CODE (insn) == NOTE)\n+\t  && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG))\n         {\n-          rnum = NOTE_BLOCK_NUMBER (insn);\n+          rnum = NOTE_EH_HANDLER (insn);\n           insn_eh_region[INSN_UID (insn)] =  rnum;\n           insn = NEXT_INSN (insn);\n           set_insn_eh_region (&insn, rnum);\n@@ -3147,12 +3147,12 @@ init_eh_nesting_info ()\n \t{\n           if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n             {\n-\t      int block = NOTE_BLOCK_NUMBER (insn);\n+\t      int block = NOTE_EH_HANDLER (insn);\n \t      region_count++;\n \t      info->region_index[block] = region_count;\n               if (eh_note)\n                 nested_eh_region [block] =\n-                                     NOTE_BLOCK_NUMBER (XEXP (eh_note, 0));\n+                                     NOTE_EH_HANDLER (XEXP (eh_note, 0));\n               else\n                 nested_eh_region [block] = 0;\n               eh_note = gen_rtx_EXPR_LIST (VOIDmode, insn, eh_note);"}, {"sha": "d3b3579d0811d539e6a0d779ff05b970992f2966", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -2099,23 +2099,23 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG\n \t  && ! exceptions_via_longjmp)\n \t{\n-\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHB\", NOTE_BLOCK_NUMBER (insn));\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHB\", NOTE_EH_HANDLER (insn));\n           if (! flag_new_exceptions)\n-            add_eh_table_entry (NOTE_BLOCK_NUMBER (insn));\n+            add_eh_table_entry (NOTE_EH_HANDLER (insn));\n #ifdef ASM_OUTPUT_EH_REGION_BEG\n-\t  ASM_OUTPUT_EH_REGION_BEG (file, NOTE_BLOCK_NUMBER (insn));\n+\t  ASM_OUTPUT_EH_REGION_BEG (file, NOTE_EH_HANDLER (insn));\n #endif\n \t  break;\n \t}\n \n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END\n \t  && ! exceptions_via_longjmp)\n \t{\n-\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHE\", NOTE_BLOCK_NUMBER (insn));\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHE\", NOTE_EH_HANDLER (insn));\n           if (flag_new_exceptions)\n-            add_eh_table_entry (NOTE_BLOCK_NUMBER (insn));\n+            add_eh_table_entry (NOTE_EH_HANDLER (insn));\n #ifdef ASM_OUTPUT_EH_REGION_END\n-\t  ASM_OUTPUT_EH_REGION_END (file, NOTE_BLOCK_NUMBER (insn));\n+\t  ASM_OUTPUT_EH_REGION_END (file, NOTE_EH_HANDLER (insn));\n #endif\n \t  break;\n \t}"}, {"sha": "5bd8453ce49d972c5390b5b4ccd23829ae8c661a", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -990,7 +990,7 @@ make_edges (label_value_list, bb_eh_end)\n \t  int num;\n \n \t  if (eh_list)\n-\t    eh_region = NOTE_BLOCK_NUMBER (XEXP (eh_list, 0));\n+\t    eh_region = NOTE_EH_HANDLER (XEXP (eh_list, 0));\n \n \t  num = reachable_handlers (eh_region, eh_nest_info,\n \t\t\t\t    insn, &handler_list);"}, {"sha": "0ffa2b3565b021bf7b80c95d66a8e8839f26e63f", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -1217,22 +1217,22 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \t\t      || NOTE_LINE_NUMBER (copy) == NOTE_INSN_EH_REGION_END))\n \t\t{\n \t\t  rtx label\n-\t\t    = get_label_from_map (map, NOTE_BLOCK_NUMBER (copy));\n+\t\t    = get_label_from_map (map, NOTE_EH_HANDLER (copy));\n \n                   /* we have to duplicate the handlers for the original */\n                   if (NOTE_LINE_NUMBER (copy) == NOTE_INSN_EH_REGION_BEG)\n                     {\n                       /* We need to duplicate the handlers for the EH region\n                          and we need to indicate where the label map is */\n                       eif_eh_map = map;\n-                      duplicate_eh_handlers (NOTE_BLOCK_NUMBER (copy), \n+                      duplicate_eh_handlers (NOTE_EH_HANDLER (copy), \n                                              CODE_LABEL_NUMBER (label),\n                                              expand_inline_function_eh_labelmap);\n                     }\n \n \t\t  /* We have to forward these both to match the new exception\n \t\t     region.  */\n-\t\t  NOTE_BLOCK_NUMBER (copy) = CODE_LABEL_NUMBER (label);\n+\t\t  NOTE_EH_HANDLER (copy) = CODE_LABEL_NUMBER (label);\n \t\t}\n \t    }\n \t  else"}, {"sha": "862999a8c75aa9c5a789897f4e3e7a3fbfce7fc6", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf43101eb660ad64e5f63f8070b7ab4c814e52b6/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=bf43101eb660ad64e5f63f8070b7ab4c814e52b6", "patch": "@@ -162,9 +162,13 @@ print_rtx (in_rtx)\n \tif (i == 3 && GET_CODE (in_rtx) == NOTE)\n \t  {\n \t    if (NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_EH_REGION_BEG\n-\t\t|| NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_EH_REGION_END\n-\t\t|| NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_BLOCK_BEG\n-\t\t|| NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_BLOCK_END)\n+\t\t|| NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_EH_REGION_END)\n+\t      {\n+\t\tfprintf (outfile, \" %d\", NOTE_EH_HANDLER (in_rtx));\n+\t\tsawclose = 1;\n+\t      }\n+\t    else if (NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_BLOCK_BEG\n+\t\t     || NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_BLOCK_END)\n \t      {\n \t\tfprintf (outfile, \" %d\", NOTE_BLOCK_NUMBER (in_rtx));\n \t\tsawclose = 1;"}]}