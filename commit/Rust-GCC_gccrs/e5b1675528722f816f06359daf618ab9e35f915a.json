{"sha": "e5b1675528722f816f06359daf618ab9e35f915a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViMTY3NTUyODcyMmY4MTZmMDYzNTlkYWY2MThhYjllMzVmOTE1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-04T09:19:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-04T09:19:55Z"}, "message": "f95-lang.c (current_translation_unit): New global variable.\n\n2010-10-04  Richard Guenther  <rguenther@suse.de>\n\n\t* f95-lang.c (current_translation_unit): New global variable.\n\t(gfc_create_decls): Build a translation-unit decl.\n\t(pushdecl): In the global binding-level use the\n\ttranslation-unit decl as DECL_CONTEXT.\n\t* trans-decl.c (gfc_get_symbol_decl): Use DECL_FILE_SCOPE_P.\n\t(build_function_decl): Likewise.  Delay setting the assembler\n\tname, leave setting of DECL_CONTEXT to pushdecl.\n\t(trans_function_start): Use DECL_FILE_SCOPE_P.\n\t(gfc_create_module_variable): Likewise.  Remove questionable\n\tasserts.\n\t* trans.c (gfc_generate_module_code): Likewise.\n\nFrom-SVN: r164928", "tree": {"sha": "3df5663a777d19ca33ed5257ae33e1e30b4836fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df5663a777d19ca33ed5257ae33e1e30b4836fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5b1675528722f816f06359daf618ab9e35f915a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b1675528722f816f06359daf618ab9e35f915a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b1675528722f816f06359daf618ab9e35f915a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b1675528722f816f06359daf618ab9e35f915a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "f8606c8b074e8e4962c9337dfb06f00f0f58af4d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e5b1675528722f816f06359daf618ab9e35f915a", "patch": "@@ -1,3 +1,17 @@\n+2010-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* f95-lang.c (current_translation_unit): New global variable.\n+\t(gfc_create_decls): Build a translation-unit decl.\n+\t(pushdecl): In the global binding-level use the\n+\ttranslation-unit decl as DECL_CONTEXT.\n+\t* trans-decl.c (gfc_get_symbol_decl): Use DECL_FILE_SCOPE_P.\n+\t(build_function_decl): Likewise.  Delay setting the assembler\n+\tname, leave setting of DECL_CONTEXT to pushdecl.\n+\t(trans_function_start): Use DECL_FILE_SCOPE_P.\n+\t(gfc_create_module_variable): Likewise.  Remove questionable\n+\tasserts.\n+\t* trans.c (gfc_generate_module_code): Likewise.\n+\n 2010-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* cpp.c (cpp_define_builtins): Call functions from cppbuiltin.c"}, {"sha": "55280bd2c7618fd20a77ecf150ed140f1df4edf7", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e5b1675528722f816f06359daf618ab9e35f915a", "patch": "@@ -172,6 +172,9 @@ tree *ridpointers = NULL;\n /* True means we've initialized exception handling.  */\n bool gfc_eh_initialized_p;\n \n+/* The current translation unit.  */\n+static GTY(()) tree current_translation_unit;\n+\n \n /* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n    or validate its data type for an `if' or `while' statement or ?..: exp.\n@@ -229,6 +232,9 @@ gfc_create_decls (void)\n   gfc_build_builtin_function_decls ();\n \n   gfc_init_constants ();\n+\n+  /* Build our translation-unit decl.  */\n+  current_translation_unit = build_translation_unit_decl (NULL_TREE);\n }\n \n \n@@ -491,8 +497,10 @@ tree\n pushdecl (tree decl)\n {\n   /* External objects aren't nested, other objects may be.  */\n-  if ((DECL_EXTERNAL (decl)) || (decl == current_function_decl))\n-    DECL_CONTEXT (decl) = 0;\n+  if (DECL_EXTERNAL (decl))\n+    DECL_CONTEXT (decl) = NULL_TREE;\n+  else if (global_bindings_p ())\n+    DECL_CONTEXT (decl) = current_translation_unit;\n   else\n     DECL_CONTEXT (decl) = current_function_decl;\n "}, {"sha": "ddcc735b57260129508248a66b81c21dd636b688", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e5b1675528722f816f06359daf618ab9e35f915a", "patch": "@@ -1090,7 +1090,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  else\n \t    length = sym->ts.u.cl->backend_decl;\n \t  if (TREE_CODE (length) == VAR_DECL\n-\t      && DECL_CONTEXT (length) == NULL_TREE)\n+\t      && DECL_FILE_SCOPE_P (length))\n \t    {\n \t      /* Add the string length to the same context as the symbol.  */\n \t      if (DECL_CONTEXT (sym->backend_decl) == current_function_decl)\n@@ -1646,9 +1646,9 @@ build_function_decl (gfc_symbol * sym, bool global)\n \n   /* Allow only one nesting level.  Allow public declarations.  */\n   gcc_assert (current_function_decl == NULL_TREE\n-\t      || DECL_CONTEXT (current_function_decl) == NULL_TREE\n-\t      || TREE_CODE (DECL_CONTEXT (current_function_decl))\n-\t\t == NAMESPACE_DECL);\n+\t      || DECL_FILE_SCOPE_P (current_function_decl)\n+\t      || (TREE_CODE (DECL_CONTEXT (current_function_decl))\n+\t\t  == NAMESPACE_DECL));\n \n   type = gfc_get_function_type (sym);\n   fndecl = build_decl (input_location,\n@@ -1659,10 +1659,6 @@ build_function_decl (gfc_symbol * sym, bool global)\n   attributes = add_attributes_to_decl (attr, NULL_TREE);\n   decl_attributes (&fndecl, attributes, 0);\n \n-  /* Perform name mangling if this is a top level or module procedure.  */\n-  if (current_function_decl == NULL_TREE)\n-    gfc_set_decl_assembler_name (fndecl, gfc_sym_mangled_function_id (sym));\n-\n   /* Figure out the return type of the declared function, and build a\n      RESULT_DECL for it.  If this is a subroutine with alternate\n      returns, build a RESULT_DECL for it.  */\n@@ -1710,12 +1706,11 @@ build_function_decl (gfc_symbol * sym, bool global)\n      layout_decl (result_decl, 0);  */\n \n   /* Set up all attributes for the function.  */\n-  DECL_CONTEXT (fndecl) = current_function_decl;\n   DECL_EXTERNAL (fndecl) = 0;\n \n   /* This specifies if a function is globally visible, i.e. it is\n      the opposite of declaring static in C.  */\n-  if (DECL_CONTEXT (fndecl) == NULL_TREE\n+  if (!current_function_decl\n       && !sym->attr.entry_master && !sym->attr.is_main_program)\n     TREE_PUBLIC (fndecl) = 1;\n \n@@ -1744,6 +1739,10 @@ build_function_decl (gfc_symbol * sym, bool global)\n   else\n     pushdecl (fndecl);\n \n+  /* Perform name mangling if this is a top level or module procedure.  */\n+  if (current_function_decl == NULL_TREE)\n+    gfc_set_decl_assembler_name (fndecl, gfc_sym_mangled_function_id (sym));\n+\n   sym->backend_decl = fndecl;\n }\n \n@@ -1991,7 +1990,7 @@ trans_function_start (gfc_symbol * sym)\n   /* Let the world know what we're about to do.  */\n   announce_function (fndecl);\n \n-  if (DECL_CONTEXT (fndecl) == NULL_TREE)\n+  if (DECL_FILE_SCOPE_P (fndecl))\n     {\n       /* Create RTL for function declaration.  */\n       rest_of_decl_compilation (fndecl, 1, 0);\n@@ -3598,7 +3597,7 @@ gfc_create_module_variable (gfc_symbol * sym)\n   if ((sym->attr.in_common || sym->attr.in_equivalence) && sym->backend_decl)\n     {\n       decl = sym->backend_decl;\n-      gcc_assert (DECL_CONTEXT (decl) == NULL_TREE);\n+      gcc_assert (DECL_FILE_SCOPE_P (decl));\n       gcc_assert (sym->ns->proc_name->attr.flavor == FL_MODULE);\n       DECL_CONTEXT (decl) = sym->ns->proc_name->backend_decl;\n       gfc_module_add_decl (cur_module, decl);\n@@ -3625,7 +3624,6 @@ gfc_create_module_variable (gfc_symbol * sym)\n \n   /* Create the variable.  */\n   pushdecl (decl);\n-  gcc_assert (DECL_CONTEXT (decl) == NULL_TREE);\n   gcc_assert (sym->ns->proc_name->attr.flavor == FL_MODULE);\n   DECL_CONTEXT (decl) = sym->ns->proc_name->backend_decl;\n   rest_of_decl_compilation (decl, 1, 0);"}, {"sha": "117d345644979e105b4afd096ce65deca03b3ac3", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b1675528722f816f06359daf618ab9e35f915a/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=e5b1675528722f816f06359daf618ab9e35f915a", "patch": "@@ -1414,12 +1414,10 @@ gfc_generate_module_code (gfc_namespace * ns)\n         continue;\n \n       gfc_create_function_decl (n, false);\n-      gcc_assert (DECL_CONTEXT (n->proc_name->backend_decl) == NULL_TREE);\n       DECL_CONTEXT (n->proc_name->backend_decl) = ns->proc_name->backend_decl;\n       gfc_module_add_decl (entry, n->proc_name->backend_decl);\n       for (el = ns->entries; el; el = el->next)\n \t{\n-\t  gcc_assert (DECL_CONTEXT (el->sym->backend_decl) == NULL_TREE);\n \t  DECL_CONTEXT (el->sym->backend_decl) = ns->proc_name->backend_decl;\n \t  gfc_module_add_decl (entry, el->sym->backend_decl);\n \t}"}]}