{"sha": "3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzMWQ2NGI1ZTNlNGU2MDBmOTgzYWNiNzIxM2JkOWIzOWRkZmFkMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-03-15T21:17:35Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-03-15T21:17:35Z"}, "message": "re PR target/79038 (Improve PowerPC ISA 3.0 conversion between integers and hardware _Float128)\n\n[gcc]\n2017-03-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/79038\n\t* config/rs6000/rs6000.md (float<QHI:mode><IEEE128:mode>2): Define\n\tinsns to convert from signed/unsigned char/short to IEEE 128-bit\n\tfloating point.\n\t(floatuns<QHI:mode><IEEE128:mode>2): Likewise.\n\n[gcc/testsuite]\n2017-03-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/79038\n\t* gcc.target/powerpc/pr79038-1.c: New test.\n\nFrom-SVN: r246178", "tree": {"sha": "861ee3cc128b0f9449feba8f808a28a4df4dd3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861ee3cc128b0f9449feba8f808a28a4df4dd3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/comments", "author": null, "committer": null, "parents": [{"sha": "ae623a87a251d01293e429326c8647ee6a5fa2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae623a87a251d01293e429326c8647ee6a5fa2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae623a87a251d01293e429326c8647ee6a5fa2b3"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "c01d583faede943a5eb07077936ba402c4b52505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "patch": "@@ -1,3 +1,11 @@\n+2017-03-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/79038\n+\t* config/rs6000/rs6000.md (float<QHI:mode><IEEE128:mode>2): Define\n+\tinsns to convert from signed/unsigned char/short to IEEE 128-bit\n+\tfloating point.\n+\t(floatuns<QHI:mode><IEEE128:mode>2): Likewise.\n+\n 2017-03-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80019"}, {"sha": "000d84033c3faf5df7de941b14d32e40c66f3aaa", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "patch": "@@ -14467,6 +14467,43 @@\n     operands[2] = gen_reg_rtx (DImode);\n })\n \n+(define_insn_and_split \"float<QHI:mode><IEEE128:mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v,v,v\")\n+\t(float:IEEE128 (match_operand:QHI 1 \"nonimmediate_operand\" \"v,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=X,r,X\"))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<IEEE128:MODE>mode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx dest = operands[0];\n+  rtx src = operands[1];\n+  rtx dest_di = gen_rtx_REG (DImode, REGNO (dest));\n+\n+  if (altivec_register_operand (src, <QHI:MODE>mode))\n+    emit_insn (gen_extend<QHI:mode>di2 (dest_di, src));\n+  else if (int_reg_operand (src, <QHI:MODE>mode))\n+    {\n+      rtx ext_di = operands[2];\n+      emit_insn (gen_extend<QHI:mode>di2 (ext_di, src));\n+      emit_move_insn (dest_di, ext_di);\n+    }\n+  else if (MEM_P (src))\n+    {\n+      rtx dest_qhi = gen_rtx_REG (<QHI:MODE>mode, REGNO (dest));\n+      emit_move_insn (dest_qhi, src);\n+      emit_insn (gen_extend<QHI:mode>di2 (dest_di, dest_qhi));\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  emit_insn (gen_float_<IEEE128:mode>di2_hw (dest, dest_di));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"8,12,12\")\n+   (set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n (define_insn \"floatuns_<mode>di2_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n \t(unsigned_float:IEEE128\n@@ -14493,6 +14530,38 @@\n     operands[2] = gen_reg_rtx (DImode);\n })\n \n+(define_insn_and_split \"floatuns<QHI:mode><IEEE128:mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v,v,v\")\n+\t(unsigned_float:IEEE128\n+\t (match_operand:QHI 1 \"nonimmediate_operand\" \"v,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=X,r,X\"))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<IEEE128:MODE>mode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx dest = operands[0];\n+  rtx src = operands[1];\n+  rtx dest_di = gen_rtx_REG (DImode, REGNO (dest));\n+\n+  if (altivec_register_operand (src, <QHI:MODE>mode) || MEM_P (src))\n+    emit_insn (gen_zero_extend<QHI:mode>di2 (dest_di, src));\n+  else if (int_reg_operand (src, <QHI:MODE>mode))\n+    {\n+      rtx ext_di = operands[2];\n+      emit_insn (gen_zero_extend<QHI:mode>di2 (ext_di, src));\n+      emit_move_insn (dest_di, ext_di);\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  emit_insn (gen_floatuns_<IEEE128:mode>di2_hw (dest, dest_di));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"8,12,8\")\n+   (set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n ;; IEEE 128-bit instructions with round to odd semantics\n (define_insn \"*trunc<mode>df2_odd\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=v\")"}, {"sha": "3ca7b5fc48397450ed1de9863156a11c29fd7414", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "patch": "@@ -1,3 +1,8 @@\n+2017-03-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/79038\n+\t* gcc.target/powerpc/pr79038-1.c: New test.\n+\n 2017-03-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR fortran/33271"}, {"sha": "0b1fa5d87bdc20428bd34aa9d7e8a21b08f3cde2", "filename": "gcc/testsuite/gcc.target/powerpc/pr79038-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79038-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3231d64b5e3e4e600f983acb7213bd9b39ddfad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79038-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79038-1.c?ref=3231d64b5e3e4e600f983acb7213bd9b39ddfad3", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2 -mfloat128\" } */\n+\n+#ifndef TYPE\n+#define TYPE _Float128\n+#endif\n+\n+TYPE\n+return_convert_uchar_to_float128_mem (unsigned char *p_uc)\n+{\n+  return (TYPE) p_uc[10];\n+}\n+\n+TYPE\n+return_convert_schar_to_float128_mem (signed char *p_sc)\n+{\n+  return (TYPE) p_sc[10];\n+}\n+\n+TYPE\n+return_convert_ushort_to_float128_mem (unsigned short *p_us)\n+{\n+  return (TYPE) p_us[10];\n+}\n+\n+TYPE\n+return_convert_sshort_to_float128_mem (short *p_ss)\n+{\n+  return (TYPE) p_ss[10];\n+}\n+\n+/* { dg-final { scan-assembler     {\\mlxsi[bh]zx\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mvexts[bh]2d\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mextsb\\M}       } } */\n+/* { dg-final { scan-assembler-not {\\ml[bh][az]\\M}   } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrw[az]\\M}  } } */\n+"}]}