{"sha": "cb99630f254aaec6591e0a200b79905b31d24eb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5OTYzMGYyNTRhYWVjNjU5MWUwYTIwMGI3OTkwNWIzMWQyNGViMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-11T14:34:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-11T14:35:51Z"}, "message": "fold undefined pointer offsetting\n\nThis avoids breaking the old broken pointer offsetting via\n(T)(ptr - ((T)0)->x) which should have used offsetof.  Breakage\nwas exposed by the introduction of POINTER_DIFF_EXPR and making\nPTA not considering that producing a pointer.  The mitigation\nfor simple cases is to canonicalize\n\n  _2 = _1 - 8B;\n  o_9 = (struct obj *) _2;\n\nto\n\n  o_9 = &MEM[_1 + -8B];\n\neliding one statement and the offending pointer subtraction.\n\n2020-03-11  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd ((T *)(ptr - ptr-cst) -> &MEM[ptr + -ptr-cst]):\n\tNew pattern.\n\n\t* gcc.dg/torture/20200311-1.c: New testcase.", "tree": {"sha": "dc528f98350f3bac9c438420b4d2032bdbd7ca2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc528f98350f3bac9c438420b4d2032bdbd7ca2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb99630f254aaec6591e0a200b79905b31d24eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb99630f254aaec6591e0a200b79905b31d24eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb99630f254aaec6591e0a200b79905b31d24eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb99630f254aaec6591e0a200b79905b31d24eb3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d564c5e254df744a470a658690753dc193a4fa78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d564c5e254df744a470a658690753dc193a4fa78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d564c5e254df744a470a658690753dc193a4fa78"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "73339dc2c2cffa9e40ff8ed64b71b2decd9d13e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb99630f254aaec6591e0a200b79905b31d24eb3", "patch": "@@ -1,3 +1,8 @@\n+2020-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd ((T *)(ptr - ptr-cst) -> &MEM[ptr + -ptr-cst]):\n+\tNew pattern.\n+\n 2020-03-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/93961"}, {"sha": "9cb37740f1e3427a0bca0bb1a037947c5fd1cbf7", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=cb99630f254aaec6591e0a200b79905b31d24eb3", "patch": "@@ -1864,6 +1864,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (ptr_difference_const (@0, @1, &diff))\n     { build_int_cst_type (type, diff); }))))\n \n+/* Canonicalize (T *)(ptr - ptr-cst) to &MEM[ptr + -ptr-cst].  */\n+(simplify\n+ (convert (pointer_diff @0 INTEGER_CST@1))\n+ (if (POINTER_TYPE_P (type))\n+  { build_fold_addr_expr_with_type\n+      (build2 (MEM_REF, char_type_node, @0,\n+\t       wide_int_to_tree (ptr_type_node, wi::neg (wi::to_wide (@1)))),\n+\t       type); }))\n+\n /* If arg0 is derived from the address of an object or function, we may\n    be able to fold this expression using the object or function's\n    alignment.  */"}, {"sha": "11061adaf18ab74da41cb95230c835520aad8905", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb99630f254aaec6591e0a200b79905b31d24eb3", "patch": "@@ -1,3 +1,7 @@\n+2020-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/20200311-1.c: New testcase.\n+\n 2020-03-11  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* lib/scanasm.exp (parse_function_bodies): Lines starting with '@' also"}, {"sha": "ac82b6b7a0b0be70b2e337fbb227cd7f431a9a24", "filename": "gcc/testsuite/gcc.dg/torture/20200311-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20200311-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb99630f254aaec6591e0a200b79905b31d24eb3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20200311-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20200311-1.c?ref=cb99630f254aaec6591e0a200b79905b31d24eb3", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+struct list { struct list *n; };\n+\n+struct obj {\n+    int n;\n+    struct list l;\n+} _o;\n+\n+struct list _l = { .n = &_o.l };\n+\n+int main(int argc, char *argv[])\n+{\n+  struct obj *o = &_o;\n+  _o.l.n = &_l;\n+  while (&o->l != &_l)\n+    /* Note the following is invoking undefined behavior but in\n+       this kind of \"obvious\" cases we don't want to break things\n+       unnecessarily and thus we avoid analyzing o as pointing\n+       to nothing via the undefined pointer subtraction.  Instead\n+       we canonicalize the pointer subtraction followed by the\n+       pointer conversion to pointer offsetting.  */\n+    o = ((struct obj *)((const char *)(o->l.n)\n+\t\t\t- (const char *)&((struct obj *)0)->l));\n+  return 0;\n+}"}]}