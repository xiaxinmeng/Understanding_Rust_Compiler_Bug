{"sha": "582d9b50ed4166d1e561b76db84e73298a1429a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyZDliNTBlZDQxNjZkMWU1NjFiNzZkYjg0ZTczMjk4YTE0MjlhOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-12T17:38:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-12T17:38:47Z"}, "message": "c-common.c (c_common_reswords): Add _Thread_local.\n\nc-family:\n\t* c-common.c (c_common_reswords): Add _Thread_local.\n\nc:\n\t* c-tree.h (struct c_declspecs): Add thread_gnu_p field.\n\t* c-parser.c (c_parser_declspecs): Mention _Thread_local in\n\tcomment.\n\t* c-decl.c (shadow_tag_warned, grokdeclarator): Mention __thread\n\tor _Thread_local as appropriate in diagnostics.\n\t(build_null_declspecs): Initialize ret->thread_gnu_p.\n\t(declspecs_add_scspec): Handle either __thread or _Thread_local\n\tfor RID_THREAD.  Diagnose _Thread_local for pre-C11 standards if\n\tpedantic.  Do not disallow _Thread_local extern and _Thread_local\n\tstatic.\n\ntestsuite:\n\t* gcc.dg/c90-thread-local-1.c, gcc.dg/c99-thread-local-1.c,\n\tgcc.dg/c11-thread-local-1.c, gcc.dg/c11-thread-local-2.c: New\n\ttests.\n\t* gcc.dg/tls/diag-2.c, objc.dg/tls/diag-2.m: Update expected\n\tdiagnostics.\n\nFrom-SVN: r204711", "tree": {"sha": "dc4dfcb336fe8a6bf6fab451a6d9be16fbe15ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4dfcb336fe8a6bf6fab451a6d9be16fbe15ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582d9b50ed4166d1e561b76db84e73298a1429a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d9b50ed4166d1e561b76db84e73298a1429a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582d9b50ed4166d1e561b76db84e73298a1429a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d9b50ed4166d1e561b76db84e73298a1429a9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9dc054758a019d3687d1b7e4e188bd5d2468444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dc054758a019d3687d1b7e4e188bd5d2468444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9dc054758a019d3687d1b7e4e188bd5d2468444"}], "stats": {"total": 168, "additions": 154, "deletions": 14}, "files": [{"sha": "1a38bd4d301bd444c165efebb0820b2c129ed307", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_reswords): Add _Thread_local.\n+\n 2013-11-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (atomic_size_supported_p): New function."}, {"sha": "1c317439b0b983edf881ae390944192cef4b5fb4", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -424,6 +424,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"_Static_assert\",   RID_STATIC_ASSERT, D_CONLY },\n   { \"_Noreturn\",        RID_NORETURN,  D_CONLY },\n   { \"_Generic\",         RID_GENERIC,   D_CONLY },\n+  { \"_Thread_local\",    RID_THREAD,    D_CONLY },\n   { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n   { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n   { \"__alignof\",\tRID_ALIGNOF,\t0 },"}, {"sha": "1cf5883c84815a98e8b5df3d450a60f0d4c53651", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -1,3 +1,16 @@\n+2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-tree.h (struct c_declspecs): Add thread_gnu_p field.\n+\t* c-parser.c (c_parser_declspecs): Mention _Thread_local in\n+\tcomment.\n+\t* c-decl.c (shadow_tag_warned, grokdeclarator): Mention __thread\n+\tor _Thread_local as appropriate in diagnostics.\n+\t(build_null_declspecs): Initialize ret->thread_gnu_p.\n+\t(declspecs_add_scspec): Handle either __thread or _Thread_local\n+\tfor RID_THREAD.  Diagnose _Thread_local for pre-C11 standards if\n+\tpedantic.  Do not disallow _Thread_local extern and _Thread_local\n+\tstatic.\n+\n 2013-11-07  Joseph Myers  <joseph@codesourcery.com>\n \t    Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "6fe418e9e4cf225853ac64b6c5ca91808c369028", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -3805,7 +3805,8 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \n   if (!warned && !in_system_header && declspecs->thread_p)\n     {\n-      warning (0, \"useless %<__thread%> in empty declaration\");\n+      warning (0, \"useless %qs in empty declaration\",\n+\t       declspecs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");\n       warned = 2;\n     }\n \n@@ -5164,7 +5165,8 @@ grokdeclarator (const struct c_declarator *declarator,\n       if (storage_class == csc_typedef)\n \terror_at (loc, \"function definition declared %<typedef%>\");\n       if (threadp)\n-\terror_at (loc, \"function definition declared %<__thread%>\");\n+\terror_at (loc, \"function definition declared %qs\",\n+\t\t  declspecs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");\n       threadp = false;\n       if (storage_class == csc_auto\n \t  || storage_class == csc_register\n@@ -5233,8 +5235,8 @@ grokdeclarator (const struct c_declarator *declarator,\n       else if (threadp && storage_class == csc_none)\n \t{\n \t  error_at (loc, \"function-scope %qE implicitly auto and declared \"\n-\t\t    \"%<__thread%>\",\n-\t\t    name);\n+\t\t    \"%qs\", name,\n+\t\t    declspecs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");\n \t  threadp = false;\n \t}\n     }\n@@ -8980,6 +8982,7 @@ build_null_declspecs (void)\n   ret->inline_p = false;\n   ret->noreturn_p = false;\n   ret->thread_p = false;\n+  ret->thread_gnu_p = false;\n   ret->const_p = false;\n   ret->volatile_p = false;\n   ret->atomic_p = false;\n@@ -9773,14 +9776,29 @@ declspecs_add_scspec (source_location loc,\n     case RID_THREAD:\n       dupe = specs->thread_p;\n       if (specs->storage_class == csc_auto)\n-\terror (\"%<__thread%> used with %<auto%>\");\n+\terror (\"%qE used with %<auto%>\", scspec);\n       else if (specs->storage_class == csc_register)\n-\terror (\"%<__thread%> used with %<register%>\");\n+\terror (\"%qE used with %<register%>\", scspec);\n       else if (specs->storage_class == csc_typedef)\n-\terror (\"%<__thread%> used with %<typedef%>\");\n+\terror (\"%qE used with %<typedef%>\", scspec);\n       else\n \t{\n \t  specs->thread_p = true;\n+\t  specs->thread_gnu_p = (strcmp (IDENTIFIER_POINTER (scspec),\n+\t\t\t\t\t \"__thread\") == 0);\n+\t  /* A diagnostic is not required for the use of this\n+\t     identifier in the implementation namespace; only diagnose\n+\t     it for the C11 spelling because of existing code using\n+\t     the other spelling.  */\n+\t  if (!flag_isoc11 && !specs->thread_gnu_p)\n+\t    {\n+\t      if (flag_isoc99)\n+\t\tpedwarn (loc, OPT_Wpedantic,\n+\t\t\t \"ISO C99 does not support %qE\", scspec);\n+\t      else\n+\t\tpedwarn (loc, OPT_Wpedantic,\n+\t\t\t \"ISO C90 does not support %qE\", scspec);\n+\t    }\n \t  specs->locations[cdw_thread] = loc;\n \t}\n       break;\n@@ -9790,7 +9808,7 @@ declspecs_add_scspec (source_location loc,\n     case RID_EXTERN:\n       n = csc_extern;\n       /* Diagnose \"__thread extern\".  */\n-      if (specs->thread_p)\n+      if (specs->thread_p && specs->thread_gnu_p)\n \terror (\"%<__thread%> before %<extern%>\");\n       break;\n     case RID_REGISTER:\n@@ -9799,7 +9817,7 @@ declspecs_add_scspec (source_location loc,\n     case RID_STATIC:\n       n = csc_static;\n       /* Diagnose \"__thread static\".  */\n-      if (specs->thread_p)\n+      if (specs->thread_p && specs->thread_gnu_p)\n \terror (\"%<__thread%> before %<static%>\");\n       break;\n     case RID_TYPEDEF:\n@@ -9811,7 +9829,12 @@ declspecs_add_scspec (source_location loc,\n   if (n != csc_none && n == specs->storage_class)\n     dupe = true;\n   if (dupe)\n-    error (\"duplicate %qE\", scspec);\n+    {\n+      if (i == RID_THREAD)\n+\terror (\"duplicate %<_Thread_local%> or %<__thread%>\");\n+      else\n+\terror (\"duplicate %qE\", scspec);\n+    }\n   if (n != csc_none)\n     {\n       if (specs->storage_class != csc_none && n != specs->storage_class)\n@@ -9824,7 +9847,9 @@ declspecs_add_scspec (source_location loc,\n \t  specs->locations[cdw_storage_class] = loc;\n \t  if (n != csc_extern && n != csc_static && specs->thread_p)\n \t    {\n-\t      error (\"%<__thread%> used with %qE\", scspec);\n+\t      error (\"%qs used with %qE\",\n+\t\t     specs->thread_gnu_p ? \"__thread\" : \"_Thread_local\",\n+\t\t     scspec);\n \t      specs->thread_p = false;\n \t    }\n \t}"}, {"sha": "5b4665a2a8dd99672c6765e61d60747517a0490e", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -1969,6 +1969,9 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n      static\n      auto\n      register\n+     _Thread_local\n+\n+   (_Thread_local is new in C11.)\n \n    C99 6.7.4:\n    function-specifier:"}, {"sha": "502fdca4d7ed644b2e18aadb801522eb38847714", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -320,8 +320,10 @@ struct c_declspecs {\n   BOOL_BITFIELD inline_p : 1;\n   /* Whether \"_Noreturn\" was speciied.  */\n   BOOL_BITFIELD noreturn_p : 1;\n-  /* Whether \"__thread\" was specified.  */\n+  /* Whether \"__thread\" or \"_Thread_local\" was specified.  */\n   BOOL_BITFIELD thread_p : 1;\n+  /* Whether \"__thread\" rather than \"_Thread_local\" was specified.  */\n+  BOOL_BITFIELD thread_gnu_p : 1;\n   /* Whether \"const\" was specified.  */\n   BOOL_BITFIELD const_p : 1;\n   /* Whether \"volatile\" was specified.  */"}, {"sha": "d3be7aa7c69555dc931e4e54a87bcc5ed44addea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -1,3 +1,11 @@\n+2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c90-thread-local-1.c, gcc.dg/c99-thread-local-1.c,\n+\tgcc.dg/c11-thread-local-1.c, gcc.dg/c11-thread-local-2.c: New\n+\ttests.\n+\t* gcc.dg/tls/diag-2.c, objc.dg/tls/diag-2.m: Update expected\n+\tdiagnostics.\n+\n 2013-11-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* gnat.dg/aggr21.adb: New test."}, {"sha": "b21209aecd15721c7ce86fb8f62566042d260c8e", "filename": "gcc/testsuite/gcc.dg/c11-thread-local-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-1.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -0,0 +1,28 @@\n+/* Test for _Thread_local in C11.  Test of valid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+_Thread_local int a;\n+static _Thread_local long b;\n+extern _Thread_local int c, a;\n+_Thread_local static int d;\n+long _Thread_local extern b;\n+_Thread_local int extern a;\n+_Thread_local struct s; /* { dg-warning \"useless\" } */\n+_Thread_local int a = 1;\n+extern _Thread_local int c = 2; /* { dg-warning \"initialized and\" } */\n+void\n+f (void)\n+{\n+  static _Thread_local int x;\n+  extern _Thread_local long b;\n+  _Thread_local extern int a;\n+}\n+\n+inline void\n+fi (void)\n+{\n+  static _Thread_local const int v;\n+  (void) a;\n+  static _Thread_local int (*const p)[a];\n+}"}, {"sha": "33872261689a9e782d577885c59cfab090d589af", "filename": "gcc/testsuite/gcc.dg/c11-thread-local-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-thread-local-2.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -0,0 +1,46 @@\n+/* Test for _Thread_local in C11.  Test of invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+_Thread_local void f (void); /* { dg-error \"storage class\" } */\n+_Thread_local void g (void) {} /* { dg-error \"_Thread_local\" } */\n+typedef _Thread_local int t1; /* { dg-error \"_Thread_local\" } */\n+_Thread_local typedef int t2; /* { dg-error \"_Thread_local\" } */\n+\n+void\n+h (void)\n+{\n+  _Thread_local auto int a; /* { dg-error \"_Thread_local\" } */\n+  _Thread_local register int b; /* { dg-error \"_Thread_local\" } */\n+  auto _Thread_local int c; /* { dg-error \"_Thread_local\" } */\n+  register _Thread_local int d; /* { dg-error \"_Thread_local\" } */\n+  _Thread_local int e; /* { dg-error \"_Thread_local\" } */\n+}\n+\n+_Thread_local int v; /* { dg-message \"previous\" } */\n+extern int v; /* { dg-error \"thread\" } */\n+int w; /* { dg-message \"previous\" } */\n+extern _Thread_local int w; /* { dg-error \"thread\" } */\n+\n+_Thread_local int x; /* { dg-message \"previous\" } */\n+int y; /* { dg-message \"previous\" } */\n+\n+int vv;\n+\n+void\n+i (void)\n+{\n+  extern int x; /* { dg-error \"thread\" } */\n+  extern _Thread_local int y; /* { dg-error \"thread\" } */\n+  static _Thread_local int a[vv]; /* { dg-error \"storage size\" } */\n+  static _Thread_local int vi = vv; /* { dg-error \"not constant\" } */\n+}\n+\n+static _Thread_local int sv;\n+\n+inline void\n+j (void)\n+{\n+  static _Thread_local int vj; /* { dg-error \"static but declared\" } */\n+  (void) sv; /* { dg-error \"static but used in inline\" } */\n+}"}, {"sha": "92bf57a90bc0f57415c8e48789196c34d6e7acf8", "filename": "gcc/testsuite/gcc.dg/c90-thread-local-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-thread-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-thread-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-thread-local-1.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -0,0 +1,5 @@\n+/* Test for _Thread_local: not in C90.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c90 -pedantic-errors\" } */\n+\n+static _Thread_local int x; /* { dg-error \"_Thread_local\" } */"}, {"sha": "ff531252c86dee2b7818dd19a65cfac3a3eda108", "filename": "gcc/testsuite/gcc.dg/c99-thread-local-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-thread-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-thread-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-thread-local-1.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -0,0 +1,5 @@\n+/* Test for _Thread_local: not in C99.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+static _Thread_local int x; /* { dg-error \"_Thread_local\" } */"}, {"sha": "854824385a50f6ac677552fe2fee21fb87224b49", "filename": "gcc/testsuite/gcc.dg/tls/diag-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -3,7 +3,7 @@\n \n __thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n __thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n-__thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate\" } */\n typedef __thread int g4;\t/* { dg-error \"'__thread' used with 'typedef'\" } */\n \n void foo()"}, {"sha": "58cca01494bbe014efcfa6549e7b759218a4fa87", "filename": "gcc/testsuite/objc.dg/tls/diag-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582d9b50ed4166d1e561b76db84e73298a1429a9/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m?ref=582d9b50ed4166d1e561b76db84e73298a1429a9", "patch": "@@ -3,7 +3,7 @@\n \n __thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n __thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n-__thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate\" } */\n typedef __thread int g4;\t/* { dg-error \" '__thread' used with 'typedef'\" } */\n \n void foo()"}]}