{"sha": "a27b6b1a783673217cb6ff0154f9563051ccaf5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3YjZiMWE3ODM2NzMyMTdjYjZmZjAxNTRmOTU2MzA1MWNjYWY1Yg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-17T01:46:00Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-17T01:46:00Z"}, "message": "dr101.C, [...]: New tests.\n\n\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\n\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C, g++.dg/tc1/dr161.C,\n\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C, g++.dg/tc1/dr188.C,\n\tg++.dg/tc1/dr193.C, g++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\n\tg++.dg/tc1/dr48.C, g++.dg/tc1/dr56.C, g++.dg/tc1/dr68.C,\n\tg++.dg/tc1/dr76.C, g++.dg/tc1/dr80.C, g++.dg/tc1/dr94.C: New tests.\n\nFrom-SVN: r77943", "tree": {"sha": "c35717809966de461b682390fb756898bed44883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c35717809966de461b682390fb756898bed44883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27b6b1a783673217cb6ff0154f9563051ccaf5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27b6b1a783673217cb6ff0154f9563051ccaf5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27b6b1a783673217cb6ff0154f9563051ccaf5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27b6b1a783673217cb6ff0154f9563051ccaf5b/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0a661cfa277a99fc61a33d7a28f7f50d8cb467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0a661cfa277a99fc61a33d7a28f7f50d8cb467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0a661cfa277a99fc61a33d7a28f7f50d8cb467"}], "stats": {"total": 493, "additions": 493, "deletions": 0}, "files": [{"sha": "35b9eb848a85e7e5d7e5e660829e71de5c7f0a27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -1,3 +1,12 @@\n+2004-02-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\r\n+\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C, g++.dg/tc1/dr161.C,\r\n+\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C, g++.dg/tc1/dr188.C,\r\n+\tg++.dg/tc1/dr193.C, g++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\r\n+\tg++.dg/tc1/dr48.C, g++.dg/tc1/dr56.C, g++.dg/tc1/dr68.C,\r\n+\tg++.dg/tc1/dr76.C, g++.dg/tc1/dr80.C, g++.dg/tc1/dr94.C: New tests.\n+\n 2004-02-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/execute/20020720-1.x: XFAIL on SPARC with -fPIC."}, {"sha": "79cb1b0ebe3d18e179a2f3cb06643348b5b75ef3", "filename": "gcc/testsuite/g++.dg/tc1/dr101.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR101: Redeclaration of extern \"C\" names via using-declarations \r\n+\r\n+namespace Test1 {\r\n+\r\n+  typedef unsigned int X;\r\n+  extern \"C\" void f1();\r\n+  namespace N {\r\n+    typedef unsigned int X;\r\n+    extern \"C\" void f1();\r\n+  }\r\n+  using N::f1; // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n+  using N::X;  // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n+}\r\n+\r\n+\r\n+namespace Test2 {\r\n+\r\n+  typedef unsigned int X;\r\n+  extern \"C\" int f2();\r\n+  namespace N {\r\n+    typedef unsigned int X;\r\n+    extern \"C\" int f2();\r\n+  }\r\n+  using namespace N;\r\n+  int i = f2(); // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n+  X x;          // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" { xfail *-*-* } }\r\n+\r\n+}\r\n+\r"}, {"sha": "91a7727e37577bd91b19914848ff890fa23c8047", "filename": "gcc/testsuite/g++.dg/tc1/dr135.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR135: Class type in in-class member function definitions \r\n+\r\n+struct S {\r\n+  S f() { return S(); }  // { dg-bogus \"\" \"incomplete class type is allowed as return type\" }\r\n+  void g(S) { }          // { dg-bogus \"\" \"incomplete class type is allowed as parameter type\" }\r\n+};\r"}, {"sha": "6043c3d87e2bfa415d60e1c51cb4b76e0fe3a56a", "filename": "gcc/testsuite/g++.dg/tc1/dr142.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR142: Injection-related errors in access example \r\n+\r\n+class B {                 // { dg-error \"inaccessible\" }\r\n+public:\r\n+  int mi;                 // { dg-error \"inaccessible\" }\r\n+  static int si;          // { dg-error \"inaccessible\" }\r\n+};\r\n+\r\n+class D: private B {\r\n+};\r\n+\r\n+class DD: public D {\r\n+  void f();\r\n+};\r\n+\r\n+void DD::f() {\r\n+  mi = 3;          // { dg-error \"within this context\" \"\" }\r\n+  si = 3;          // { dg-error \"within this context\" \"\" }\r\n+  ::B b;\r\n+  b.mi = 3;\r\n+  b.si = 3;\r\n+  ::B::si = 3;\r\n+  ::B* bp1 = this;        // { dg-error \"inaccessible base\" \"\" }\r\n+  ::B* bp2 = (::B*)this;\r\n+  bp2->mi = 3;\r\n+\r\n+\r\n+  B b2;                   // { dg-error \"within this context\" \"\" }\r\n+  B::si = 3;              // { dg-error \"within this context\" \"\" }\r\n+}\r"}, {"sha": "23c73b5e4e3f48162cd2452b9c4fcf9c4fb69b62", "filename": "gcc/testsuite/g++.dg/tc1/dr152.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR152: explicit copy constructors \r\n+\n+namespace N1 {\r\n+  struct X {\r\n+    X();\r\n+    explicit X(const X&);\r\n+  };\r\n+  void f(X);\r\n+  int foo() \r\n+  { \r\n+    X x; \r\n+    f(x);     // { dg-error \"\" \"\" }\r\n+  }\r\n+}\n+\n+namespace N2 {\r\n+  template <class T>\r\n+  struct X {\r\n+    X();\r\n+    explicit X(const X&);\r\n+  };\r\n+\r\n+  template <class T>\r\n+  void f(T ) {}\r\n+  \r\n+  template <class T>\r\n+  int foo() \r\n+  { \r\n+    X<T> x; \r\n+    N2::f(x);   // { dg-error \"\" \"\" }\r\n+  }\r\n+\r\n+  template int foo<float>();  // { dg-error \"instantiated from here\" }\r\n+}"}, {"sha": "6d04921f7cd5ac70a58603f72348176e732c2a1e", "filename": "gcc/testsuite/g++.dg/tc1/dr159.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR159: Namespace qualification in declarators \r\n+\r\n+namespace N {\r\n+  namespace M {\r\n+    void f();\r\n+    void g();\r\n+  }\r\n+  void M::f(){}\r\n+  void N::M::g(){}\r\n+}\r"}, {"sha": "f08935354f8995991924213bd5d2250eff84b6dc", "filename": "gcc/testsuite/g++.dg/tc1/dr161.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR161: Access to protected nested type \r\n+\r\n+namespace N1 {\r\n+  struct A \r\n+  {\r\n+  protected:\r\n+    typedef int type;\r\n+  };\r\n+\r\n+  struct B : public A\r\n+  {\r\n+    void test(void)\r\n+    {\r\n+      A::type t;\r\n+    }\r\n+\r\n+    friend void ftest(void)\r\n+    {\r\n+      A::type t;\r\n+    }\r\n+  };\r\n+}\r\n+\r\n+\r\n+namespace N2 {\r\n+  template <class T>\r\n+  struct A \r\n+  {\r\n+  protected:\r\n+    typedef int type;\r\n+  };\r\n+\r\n+  template <class T>\r\n+  struct B : public A<T>\r\n+  {\r\n+    void test(B b)\r\n+    {\r\n+      typename A<T>::type t;\r\n+    }\r\n+\r\n+    friend void ftest(B b)\r\n+    {\r\n+      typename A<T>::type t;\r\n+    }\r\n+  };\r\n+\r\n+  template struct B<void>;\r\n+}\r"}, {"sha": "6f2a26df501cc7fad09d6bb6b87c6c2f13ba8771", "filename": "gcc/testsuite/g++.dg/tc1/dr166.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR166: Friend declarations of template-ids \r\n+\r\n+namespace N {\r\n+  template <class T> void f(T);\r\n+  void g();\r\n+\r\n+  namespace M {\r\n+    class A {\r\n+      friend void f<int>(int); // N::f\r\n+      static int x;   // { dg-error \"private\" }\r\n+    };\r\n+    \r\n+    class B {\r\n+      template <class T> friend void f(T);  // M::f\r\n+      static int x;   // { dg-error \"private\" }\r\n+    };\r\n+\r\n+    class C {\r\n+      friend void g(); // M::g\r\n+      static int x;   // { dg-error \"private\" }\r\n+    };\r\n+\r\n+    template <class T> void f(T)  // will be instantiated as f<long>\r\n+    {\r\n+      M::A::x = 0;    // { dg-error \"within this context\" }\r\n+      M::B::x = 0;\r\n+    }\r\n+    template <> void f<int>(int)\r\n+    { M::A::x = 0; }      // { dg-error \"within this context\" }\r\n+    template <> void f<double>(double )\r\n+    { \r\n+      M::B::x = 0; \r\n+      M::f<long>(0);   // { dg-error \"instantiated\" }\r\n+    }\r\n+\r\n+    void g(void)\r\n+    { M::C::x = 0; }\r\n+  }\r\n+\r\n+  template <class T> void f(T)  // will be instantiated as f<long>\r\n+  { \r\n+    M::A::x = 0;       // { dg-error \"within this context\" }\r\n+    M::B::x = 0;       // { dg-error \"within this context\" }\r\n+  }\r\n+\r\n+  template <> void f<int>(int )\r\n+  { \r\n+    N::f<long>(0);        // { dg-error \"instantiated\" }\r\n+    M::A::x = 0; \r\n+    M::B::x = 0;       // { dg-error \"within this context\" }\r\n+  }\r\n+\r\n+  template <> void f<char>(char )\r\n+  { M::A::x = 0; }      // { dg-error \"within this context\" }\r\n+\r\n+  void g(void)\r\n+  { M::C::x = 0; }      // { dg-error \"within this context\" }\r\n+}\r"}, {"sha": "b308ad8693b2e5cede6a41c9a2aa562a0f2b135c", "filename": "gcc/testsuite/g++.dg/tc1/dr176.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR176: Name injection and templates \r\n+\r\n+namespace N1 {\r\n+  template <class T> struct Base {\r\n+    Base* p;\r\n+    Base<T*>* p2;\r\n+    ::Base* p3;    // { dg-error \"\" \"\" }\r\n+  };\r\n+\r\n+  template <class T> struct Derived: public Base<T> {\r\n+    Base* p;     // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\r\n+    Base<T*>* p2;\r\n+    typename Derived::Base* p3;   // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\r\n+  };\r\n+\r\n+  template struct Derived<void>;  // { dg-bogus \"instantiated from here\" \"everything should be looked up at parsing time (after DR224)\" { xfail *-*-* } }\r\n+}\r\n+\r\n+\r\n+namespace N2 {\r\n+  template <class T> struct Base {};\r\n+  template <class T> struct Derived: public Base<T> {\r\n+    typename Derived::template Base<double>* p1;  // { dg-bogus \"\" \"\" { xfail *-*-* } }\r\n+  }\r\n+\r\n+  template struct Derived<void>;\r\n+}\r"}, {"sha": "3a10fa476263ad9dbb03687cafa830d71e5497d8", "filename": "gcc/testsuite/g++.dg/tc1/dr188.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr188.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr188.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr188.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR188: Comma operator and rvalue conversion\n+\n+template <bool> struct StaticAssert;\n+template <> struct StaticAssert<true> {};\n+\n+char arr[100];\n+StaticAssert<(sizeof(0,arr) == 100)> check;"}, {"sha": "1319b884aa782a79bef56c5697f92dfef5ef3998", "filename": "gcc/testsuite/g++.dg/tc1/dr193.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR193: Order of destruction of local automatics of destructor \r\n+\r\n+extern \"C\" void abort(void);\r\n+\r\n+namespace N1 {\r\n+  bool a_done = false;\r\n+  struct A\r\n+  { \r\n+    ~A()\r\n+    {\r\n+      a_done = true;\r\n+    }\r\n+  };\r\n+\r\n+  struct B\r\n+  { \r\n+    ~B()\r\n+    {\r\n+      if (!a_done)\r\n+        abort();\r\n+    }\r\n+  };\r\n+\r\n+  struct C {\r\n+    B x;\r\n+    ~C() {\r\n+      A y;\r\n+    };\r\n+  };\r\n+}\r\n+\r\n+\r\n+namespace N2 {\r\n+  bool a_done = false;\r\n+\r\n+  template <class>\r\n+  struct A\r\n+  { \r\n+    ~A()\r\n+    {\r\n+      a_done = true;\r\n+    }\r\n+  };\r\n+\r\n+  template <class>\r\n+  struct B\r\n+  { \r\n+    ~B()\r\n+    {\r\n+      if (!a_done)\r\n+        abort();\r\n+    }\r\n+  };\r\n+\r\n+  template <class T>\r\n+  struct C {\r\n+    B<T> x;\r\n+    ~C() {\r\n+      A<T> y;\r\n+    };\r\n+  };\r\n+}\r\n+\r\n+\r\n+int main(void)\r\n+{\r\n+  N1::C c1;\r\n+  N2::C<void> c2;\r\n+  return 0;\r\n+}\r"}, {"sha": "3491468b74e84c05af1ea715327829ccc202b88f", "filename": "gcc/testsuite/g++.dg/tc1/dr194.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR194: Identifying constructors \n+\n+struct A\n+{\r\n+  inline explicit A();\r\n+};\n+\n+template <class>\n+struct B\n+{\r\n+  inline explicit B();\r\n+};\n+\n+template struct B<void>;"}, {"sha": "1fb3ce29ba8df89f6c778a13c6fe8261ac785bc6", "filename": "gcc/testsuite/g++.dg/tc1/dr217.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR217: Default arguments for non-template member functions of class \r\n+//  templates \r\n+\r\n+template <class T>\r\n+struct S\r\n+{\r\n+  void foo (int);\r\n+};\r\n+\r\n+template <class T>\r\n+void S<T>::foo (int = 0)  // { dg-error \"\" \"default arguments for parameters of member functions of class templates can be specified in the initial declaration only\" { xfail *-*-* } }\r\n+{ }\r"}, {"sha": "16732d2dad2270f58f109067aaf9694a202c38aa", "filename": "gcc/testsuite/g++.dg/tc1/dr48.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do link }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR48: Definitions of unused static members \r\n+\r\n+struct A {\r\n+  static const int size = 10;\r\n+  int array[size];\r\n+};\r\n+\r\n+int main() {\r\n+  A a;\r\n+  return 0;\r\n+}\r"}, {"sha": "1451ce8cf9324d7726754ffc6ff0a0064192895b", "filename": "gcc/testsuite/g++.dg/tc1/dr56.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR56: Redeclaring typedefs within classes \r\n+\r\n+class X { \r\n+  typedef int I; \r\n+  typedef int I;  // { dg-error \"\" \"Cannot redeclare a typedef in a class scope\" { xfail *-*-* } }\r\n+};\r\n+\r\n+// In non-class scope, they are allowed.\r\n+typedef int A;\r\n+typedef int A;\r"}, {"sha": "60b2c6b6c84b18cec3d7a39a10e6568dd9c9f64e", "filename": "gcc/testsuite/g++.dg/tc1/dr68.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR68: Grammar does not allow \"friend class A<int>;\" \r\n+\r\n+namespace A{\r\n+  class B{};\r\n+}\r\n+\r\n+namespace B{\r\n+  class A{};\r\n+  class C{\r\n+    friend class ::A::B;\r\n+  };\r\n+}\r\n+\r\n+\r\n+template <typename> class K;\r\n+class J {\r\n+  friend class K<int>;\r\n+};\r"}, {"sha": "dfe7ecf80c2d630f15531030697ddf599b302305", "filename": "gcc/testsuite/g++.dg/tc1/dr76.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR76: Are const volatile variables considered \"constant expressions\"? \r\n+\r\n+volatile const int a = 5;\r\n+\r\n+template <int> struct K;\r\n+template struct K<a>;\t// { dg-error \"non-constant\" }\r"}, {"sha": "e7d373169be6c43141b6a466f794382866550a29", "filename": "gcc/testsuite/g++.dg/tc1/dr80.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR80: Class members with same name as class \r\n+\r\n+struct A \r\n+{\r\n+  int A;\r\n+};\r\n+\r\n+struct A2\r\n+{\r\n+  static int A2;  // { dg-error \"same name as\" }\r\n+};\r\n+\r\n+\r\n+template <class>\r\n+struct A3\r\n+{\r\n+  int A3;\r\n+};\r\n+\r\n+template <class>\r\n+struct A4\r\n+{\r\n+  static int A4;  // { dg-error \"same name as\" }\r\n+};\r\n+\r\n+\r\n+struct B\r\n+{\r\n+  B();\r\n+  int B;  // { dg-error \"same name as\" }\r\n+};\r\n+\r\n+struct B2\r\n+{\r\n+  B2();\r\n+  static int B2;  // { dg-error \"same name as\" }\r\n+};\r\n+\r\n+template <class>\r\n+struct B3\r\n+{\r\n+  B3();\r\n+  int B3;  // { dg-error \"same name as\" \"this error should appear at parsing time\" { xfail *-*-* } }\r\n+};\r\n+\r\n+template <class>\r\n+struct B4\r\n+{\r\n+  B4();\r\n+  static int B4;  // { dg-error \"same name as\" }\r\n+};\r"}, {"sha": "3909c6554533cd907a05dda67a8c8013283caa5a", "filename": "gcc/testsuite/g++.dg/tc1/dr94.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b6b1a783673217cb6ff0154f9563051ccaf5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C?ref=a27b6b1a783673217cb6ff0154f9563051ccaf5b", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR94: Inconsistencies in the descriptions of constant expressions \r\n+\r\n+struct S {\r\n+  static const int c = 5;\r\n+};\r\n+int a[S::c];\r\n+\r"}]}