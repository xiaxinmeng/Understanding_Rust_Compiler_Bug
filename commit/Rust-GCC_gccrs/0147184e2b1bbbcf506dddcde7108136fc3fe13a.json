{"sha": "0147184e2b1bbbcf506dddcde7108136fc3fe13a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0NzE4NGUyYjFiYmJjZjUwNmRkZGNkZTcxMDgxMzZmYzNmZTEzYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-06T08:41:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-06T08:41:44Z"}, "message": "re PR tree-optimization/38884 (missed FRE with __real and __imag)\n\n2011-10-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38884\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle partial\n\treads from aggregate SSA names.\n\n\t* gcc.dg/tree-ssa/ssa-fre-34.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-35.c: Likewise.\n\nFrom-SVN: r179593", "tree": {"sha": "9aaf2ceb683800a50a7b14521c41a3b6dd79d8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aaf2ceb683800a50a7b14521c41a3b6dd79d8e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0147184e2b1bbbcf506dddcde7108136fc3fe13a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0147184e2b1bbbcf506dddcde7108136fc3fe13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0147184e2b1bbbcf506dddcde7108136fc3fe13a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0147184e2b1bbbcf506dddcde7108136fc3fe13a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1fc143dd6800922a285a57d4c3aea068f7c128d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fc143dd6800922a285a57d4c3aea068f7c128d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fc143dd6800922a285a57d4c3aea068f7c128d"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "31b6af7e2287074751a74ed7142e8b1755aae564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0147184e2b1bbbcf506dddcde7108136fc3fe13a", "patch": "@@ -1,3 +1,9 @@\n+2011-10-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38884\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle partial\n+\treads from aggregate SSA names.\n+\n 2011-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-patterns.c (vect_pattern_recog_1): Add stmts_to_replace"}, {"sha": "458bacb456c2cf1d9b20c639ef9d339e780c51eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0147184e2b1bbbcf506dddcde7108136fc3fe13a", "patch": "@@ -1,3 +1,9 @@\n+2011-10-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38884\n+\t* gcc.dg/tree-ssa/ssa-fre-34.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-35.c: Likewise.\n+\n 2011-10-05  David S. Miller  <davem@davemloft.net>\n \n \t* gcc.target/sparc/lzd.c: New test."}, {"sha": "b0b54a228650dea4984e1adaca8291f4a592f0ca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-34.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-34.c?ref=0147184e2b1bbbcf506dddcde7108136fc3fe13a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+struct {\n+    float i;\n+    vector float global_res;\n+} s;\n+float foo(float f)\n+{\n+  vector float res = (vector float){0.0f,f,0.0f,1.0f};\n+  s.global_res = res;\n+  return *((float*)&s.global_res + 1);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced BIT_FIELD_REF.*with f\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "dfbd7c1bb4812c1f684411436bbb96fdc18a9574", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-35.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-35.c?ref=0147184e2b1bbbcf506dddcde7108136fc3fe13a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+struct s { _Complex float i; };\n+void g(struct s *);\n+\n+float a1 (float dd)\n+{\n+  struct s sv;\n+  sv.i = dd;\n+  float d = __real__ sv.i;\n+  g(&sv);\n+  return d;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced REALPART_EXPR.*with dd\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "c33b87dd7fe29e9d5053e318b510ad13fc7230bc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0147184e2b1bbbcf506dddcde7108136fc3fe13a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=0147184e2b1bbbcf506dddcde7108136fc3fe13a", "patch": "@@ -1489,7 +1489,66 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t}\n     }\n \n-  /* 4) For aggregate copies translate the reference through them if\n+  /* 4) Assignment from an SSA name which definition we may be able\n+     to access pieces from.  */\n+  else if (ref->size == maxsize\n+\t   && is_gimple_reg_type (vr->type)\n+\t   && gimple_assign_single_p (def_stmt)\n+\t   && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME)\n+    {\n+      tree rhs1 = gimple_assign_rhs1 (def_stmt);\n+      gimple def_stmt2 = SSA_NAME_DEF_STMT (rhs1);\n+      if (is_gimple_assign (def_stmt2)\n+\t  && (gimple_assign_rhs_code (def_stmt2) == COMPLEX_EXPR\n+\t      || gimple_assign_rhs_code (def_stmt2) == CONSTRUCTOR)\n+\t  && types_compatible_p (vr->type, TREE_TYPE (TREE_TYPE (rhs1))))\n+\t{\n+\t  tree base2;\n+\t  HOST_WIDE_INT offset2, size2, maxsize2, off;\n+\t  base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n+\t\t\t\t\t   &offset2, &size2, &maxsize2);\n+\t  off = offset - offset2;\n+\t  if (maxsize2 != -1\n+\t      && maxsize2 == size2\n+\t      && operand_equal_p (base, base2, 0)\n+\t      && offset2 <= offset\n+\t      && offset2 + size2 >= offset + maxsize)\n+\t    {\n+\t      tree val = NULL_TREE;\n+\t      HOST_WIDE_INT elsz\n+\t\t= TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (TREE_TYPE (rhs1))));\n+\t      if (gimple_assign_rhs_code (def_stmt2) == COMPLEX_EXPR)\n+\t\t{\n+\t\t  if (off == 0)\n+\t\t    val = gimple_assign_rhs1 (def_stmt2);\n+\t\t  else if (off == elsz)\n+\t\t    val = gimple_assign_rhs2 (def_stmt2);\n+\t\t}\n+\t      else if (gimple_assign_rhs_code (def_stmt2) == CONSTRUCTOR\n+\t\t       && off % elsz == 0)\n+\t\t{\n+\t\t  tree ctor = gimple_assign_rhs1 (def_stmt2);\n+\t\t  unsigned i = off / elsz;\n+\t\t  if (i < CONSTRUCTOR_NELTS (ctor))\n+\t\t    {\n+\t\t      constructor_elt *elt = CONSTRUCTOR_ELT (ctor, i);\n+\t\t      if (compare_tree_int (elt->index, i) == 0)\n+\t\t\tval = elt->value;\n+\t\t    }\n+\t\t}\n+\t      if (val)\n+\t\t{\n+\t\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n+\t\t  return vn_reference_insert_pieces\n+\t\t           (vuse, vr->set, vr->type,\n+\t\t\t    VEC_copy (vn_reference_op_s, heap, vr->operands),\n+\t\t\t    val, value_id);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* 5) For aggregate copies translate the reference through them if\n      the copy kills ref.  */\n   else if (vn_walk_kind == VN_WALKREWRITE\n \t   && gimple_assign_single_p (def_stmt)\n@@ -1587,7 +1646,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       return NULL;\n     }\n \n-  /* 5) For memcpy copies translate the reference through them if\n+  /* 6) For memcpy copies translate the reference through them if\n      the copy kills ref.  */\n   else if (vn_walk_kind == VN_WALKREWRITE\n \t   && is_gimple_reg_type (vr->type)"}]}