{"sha": "68729b062d576417d74f9b807e2d9e8f659d2d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3MjliMDYyZDU3NjQxN2Q3NGY5YjgwN2UyZDllOGY2NTlkMmQwNg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-09-22T09:41:15Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-09-22T09:41:15Z"}, "message": "[AArch64] Use atomic load-operate instructions for update-fetch patterns.\n\n2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_gen_atomic_ldop):\n\tAdjust declaration.\n\t* config/aarch64/aarch64.c (aarch64_emit_bic): New.\n\t(aarch64_gen_atomic_ldop): Adjust comment.  Add parameter\n\tout_result.  Update to support update-fetch operations.\n\t* config/aarch64/atomics.md (aarch64_atomic_exchange<mode>_lse):\n\tAdjust for change to aarch64_gen_atomic_ldop.\n\t(aarch64_atomic_<atomic_optab><mode>_lse): Likewise.\n\t(aarch64_atomic_fetch_<atomic_optab><mode>_lse): Likewise.\n\t(atomic_<atomic_optab>_fetch<mode>): Change to an expander.\n\t(aarch64_atomic_<atomic_optab>_fetch<mode>): New.\n\t(aarch64_atomic_<atomic_optab>_fetch<mode>_lse): New.\n\ngcc/testsuite\n2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/aarch64/atomic-inst-ldadd.c: Add tests for\n\tupdate-fetch operations.\n\t* gcc.target/aarch64/atomic-inst-ldlogic.c: Likewise.\n\nFrom-SVN: r228002", "tree": {"sha": "59c5a33c77435f868488239bdf21d29239bee1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c5a33c77435f868488239bdf21d29239bee1be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68729b062d576417d74f9b807e2d9e8f659d2d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68729b062d576417d74f9b807e2d9e8f659d2d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68729b062d576417d74f9b807e2d9e8f659d2d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68729b062d576417d74f9b807e2d9e8f659d2d06/comments", "author": null, "committer": null, "parents": [{"sha": "641c2f8b69f799a00d0fda696d480e10505257c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641c2f8b69f799a00d0fda696d480e10505257c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641c2f8b69f799a00d0fda696d480e10505257c3"}], "stats": {"total": 321, "additions": 262, "deletions": 59}, "files": [{"sha": "50a950ec3f02a2f79d7e172a91b9eb861d235639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -1,3 +1,18 @@\n+2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_gen_atomic_ldop):\n+\tAdjust declaration.\n+\t* config/aarch64/aarch64.c (aarch64_emit_bic): New.\n+\t(aarch64_gen_atomic_ldop): Adjust comment.  Add parameter\n+\tout_result.  Update to support update-fetch operations.\n+\t* config/aarch64/atomics.md (aarch64_atomic_exchange<mode>_lse):\n+\tAdjust for change to aarch64_gen_atomic_ldop.\n+\t(aarch64_atomic_<atomic_optab><mode>_lse): Likewise.\n+\t(aarch64_atomic_fetch_<atomic_optab><mode>_lse): Likewise.\n+\t(atomic_<atomic_optab>_fetch<mode>): Change to an expander.\n+\t(aarch64_atomic_<atomic_optab>_fetch<mode>): New.\n+\t(aarch64_atomic_<atomic_optab>_fetch<mode>_lse): New.\n+\n 2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64-protos.h"}, {"sha": "dd8ebcca16718b54ca0f32208d074162f0f021a6", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -380,7 +380,7 @@ void aarch64_split_compare_and_swap (rtx op[]);\n void aarch64_gen_atomic_cas (rtx, rtx, rtx, rtx, rtx);\n \n bool aarch64_atomic_ldop_supported_p (enum rtx_code);\n-void aarch64_gen_atomic_ldop (enum rtx_code, rtx, rtx, rtx, rtx);\n+void aarch64_gen_atomic_ldop (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n void aarch64_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n \n bool aarch64_gen_adjusted_ldpstp (rtx *, bool, enum machine_mode, RTX_CODE);"}, {"sha": "3c8c058edda824799cc844350d973634566e8485", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -11018,6 +11018,25 @@ aarch64_split_compare_and_swap (rtx operands[])\n     aarch64_emit_post_barrier (model);\n }\n \n+/* Emit a BIC instruction.  */\n+\n+static void\n+aarch64_emit_bic (machine_mode mode, rtx dst, rtx s1, rtx s2, int shift)\n+{\n+  rtx shift_rtx = GEN_INT (shift);\n+  rtx (*gen) (rtx, rtx, rtx, rtx);\n+\n+  switch (mode)\n+    {\n+    case SImode: gen = gen_and_one_cmpl_lshrsi3; break;\n+    case DImode: gen = gen_and_one_cmpl_lshrdi3; break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  emit_insn (gen (dst, s2, shift_rtx, s1));\n+}\n+\n /* Emit an atomic swap.  */\n \n static void\n@@ -11112,13 +11131,14 @@ aarch64_emit_atomic_load_op (enum aarch64_atomic_load_op_code code,\n }\n \n /* Emit an atomic load+operate.  CODE is the operation.  OUT_DATA is the\n-   location to store the data read from memory.  MEM is the memory location to\n-   read and modify.  MODEL_RTX is the memory ordering to use.  VALUE is the\n-   second operand for the operation.  Either OUT_DATA or OUT_RESULT, but not\n-   both, can be NULL.  */\n+   location to store the data read from memory.  OUT_RESULT is the location to\n+   store the result of the operation.  MEM is the memory location to read and\n+   modify.  MODEL_RTX is the memory ordering to use.  VALUE is the second\n+   operand for the operation.  Either OUT_DATA or OUT_RESULT, but not both, can\n+   be NULL.  */\n \n void\n-aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data,\n+aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data, rtx out_result,\n \t\t\t rtx mem, rtx value, rtx model_rtx)\n {\n   machine_mode mode = GET_MODE (mem);\n@@ -11131,12 +11151,15 @@ aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data,\n   if (out_data)\n     out_data = gen_lowpart (mode, out_data);\n \n+  if (out_result)\n+    out_result = gen_lowpart (mode, out_result);\n+\n   /* Make sure the value is in a register, putting it into a destination\n      register if it needs to be manipulated.  */\n   if (!register_operand (value, mode)\n       || code == AND || code == MINUS)\n     {\n-      src = out_data;\n+      src = out_result ? out_result : out_data;\n       emit_move_insn (src, gen_lowpart (mode, value));\n     }\n   else\n@@ -11202,6 +11225,43 @@ aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data,\n     }\n \n   aarch64_emit_atomic_load_op (ldop_code, mode, out_data, src, mem, model_rtx);\n+\n+  /* If necessary, calculate the data in memory after the update by redoing the\n+     operation from values in registers.  */\n+  if (!out_result)\n+    return;\n+\n+  if (short_mode)\n+    {\n+      src = gen_lowpart (wmode, src);\n+      out_data = gen_lowpart (wmode, out_data);\n+      out_result = gen_lowpart (wmode, out_result);\n+    }\n+\n+  x = NULL_RTX;\n+\n+  switch (code)\n+    {\n+    case MINUS:\n+    case PLUS:\n+      x = gen_rtx_PLUS (wmode, out_data, src);\n+      break;\n+    case IOR:\n+      x = gen_rtx_IOR (wmode, out_data, src);\n+      break;\n+    case XOR:\n+      x = gen_rtx_XOR (wmode, out_data, src);\n+      break;\n+    case AND:\n+      aarch64_emit_bic (wmode, out_result, out_data, src, 0);\n+      return;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  emit_set_insn (out_result, x);\n+\n+  return;\n }\n \n /* Split an atomic operation.  */"}, {"sha": "e7ac5f6fc1c78f77375ec8ccce6d2409470d90b1", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -219,7 +219,7 @@\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-    aarch64_gen_atomic_ldop (SET, operands[0], operands[1],\n+    aarch64_gen_atomic_ldop (SET, operands[0], NULL, operands[1],\n \t\t\t     operands[2], operands[3]);\n     DONE;\n   }\n@@ -280,7 +280,7 @@\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-    aarch64_gen_atomic_ldop (<CODE>, operands[3], operands[0],\n+    aarch64_gen_atomic_ldop (<CODE>, operands[3], NULL, operands[0],\n \t\t\t     operands[1], operands[2]);\n     DONE;\n   }\n@@ -368,7 +368,7 @@\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-    aarch64_gen_atomic_ldop (<CODE>, operands[0], operands[1],\n+    aarch64_gen_atomic_ldop (<CODE>, operands[0], NULL, operands[1],\n \t\t\t     operands[2], operands[3]);\n     DONE;\n   }\n@@ -398,7 +398,31 @@\n   }\n )\n \n-(define_insn_and_split \"atomic_<atomic_optab>_fetch<mode>\"\n+;; Load-operate-store, returning the original memory data.\n+\n+(define_expand \"atomic_<atomic_optab>_fetch<mode>\"\n+ [(match_operand:ALLI 0 \"register_operand\" \"\")\n+  (atomic_op:ALLI\n+   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n+   (match_operand:ALLI 2 \"<atomic_op_operand>\" \"\"))\n+  (match_operand:SI 3 \"const_int_operand\")]\n+ \"\"\n+{\n+  rtx (*gen) (rtx, rtx, rtx, rtx);\n+  rtx value = operands[2];\n+\n+  /* Use an atomic load-operate instruction when possible.  */\n+  if (aarch64_atomic_ldop_supported_p (<CODE>))\n+    gen = gen_aarch64_atomic_<atomic_optab>_fetch<mode>_lse;\n+  else\n+    gen = gen_aarch64_atomic_<atomic_optab>_fetch<mode>;\n+\n+  emit_insn (gen (operands[0], operands[1], value, operands[3]));\n+\n+  DONE;\n+})\n+\n+(define_insn_and_split \"aarch64_atomic_<atomic_optab>_fetch<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n     (atomic_op:ALLI\n       (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")\n@@ -421,6 +445,29 @@\n   }\n )\n \n+(define_insn_and_split \"aarch64_atomic_<atomic_optab>_fetch<mode>_lse\"\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n+    (atomic_op:ALLI\n+     (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")\n+     (match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<const_atomic>\")))\n+   (set (match_dup 1)\n+    (unspec_volatile:ALLI\n+      [(match_dup 1)\n+       (match_dup 2)\n+       (match_operand:SI 3 \"const_int_operand\")]\n+      UNSPECV_ATOMIC_LDOP))\n+     (clobber (match_scratch:ALLI 4 \"=r\"))]\n+  \"TARGET_LSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    aarch64_gen_atomic_ldop (<CODE>, operands[4], operands[0], operands[1],\n+\t\t\t     operands[2], operands[3]);\n+    DONE;\n+  }\n+)\n+\n (define_insn_and_split \"atomic_nand_fetch<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n     (not:ALLI"}, {"sha": "9f0686b96e224f7c06216279a0690ebc6c07017f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -1,3 +1,9 @@\n+2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/atomic-inst-ldadd.c: Add tests for\n+\tupdate-fetch operations.\n+\t* gcc.target/aarch64/atomic-inst-ldlogic.c: Likewise.\n+\n 2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/aarch64/atomic-inst-ldadd.c: New."}, {"sha": "4b2282c6861f01c96c2a0e02a40849bbef429a64", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-ldadd.c", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldadd.c?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -31,27 +31,56 @@\n     __atomic_fetch_sub (val, foo, MODEL);\t\t\t\t\\\n   }\n \n+#define ADD_LOAD(FN, TY, MODEL)\t\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_add_fetch (val, foo, MODEL);\t\t\t\\\n+  }\n+\n+#define ADD_LOAD_NORETURN(FN, TY, MODEL)\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_add_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n+\n+#define SUB_LOAD(FN, TY, MODEL)\t\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_sub_fetch (val, foo, MODEL);\t\t\t\\\n+  }\n+\n+#define SUB_LOAD_NORETURN(FN, TY, MODEL)\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_sub_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n \n TEST (load_add, LOAD_ADD)\n TEST (load_add_notreturn, LOAD_ADD_NORETURN)\n \n TEST (load_sub, LOAD_SUB)\n TEST (load_sub_notreturn, LOAD_SUB_NORETURN)\n \n-/* { dg-final { scan-assembler-times \"ldaddb\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldaddab\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldaddlb\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldaddalb\\t\" 16} } */\n+TEST (add_load, ADD_LOAD)\n+TEST (add_load_notreturn, ADD_LOAD_NORETURN)\n+\n+TEST (sub_load, SUB_LOAD)\n+TEST (sub_load_notreturn, SUB_LOAD_NORETURN)\n+\n+/* { dg-final { scan-assembler-times \"ldaddb\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldaddab\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldaddlb\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldaddalb\\t\" 32} } */\n \n-/* { dg-final { scan-assembler-times \"ldaddh\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldaddah\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldaddlh\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldaddalh\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldaddh\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldaddah\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldaddlh\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldaddalh\\t\" 32} } */\n \n-/* { dg-final { scan-assembler-times \"ldadd\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldadda\\t\" 32} } */\n-/* { dg-final { scan-assembler-times \"ldaddl\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldaddal\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldadd\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldadda\\t\" 64} } */\n+/* { dg-final { scan-assembler-times \"ldaddl\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldaddal\\t\" 64} } */\n \n /* { dg-final { scan-assembler-not \"ldaxr\\t\" } } */\n /* { dg-final { scan-assembler-not \"stlxr\\t\" } } */"}, {"sha": "4879d52b9b4f88fb32209cd995fff7f5b7e46ce7", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-ldlogic.c", "status": "modified", "additions": 82, "deletions": 36, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldlogic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68729b062d576417d74f9b807e2d9e8f659d2d06/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldlogic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ldlogic.c?ref=68729b062d576417d74f9b807e2d9e8f659d2d06", "patch": "@@ -43,6 +43,42 @@\n     __atomic_fetch_xor (val, foo, MODEL);\t\t\t\t\\\n   }\n \n+#define OR_LOAD(FN, TY, MODEL)\t\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_or_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n+\n+#define OR_LOAD_NORETURN(FN, TY, MODEL)\t\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_or_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n+\n+#define AND_LOAD(FN, TY, MODEL)\t\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_and_fetch (val, foo, MODEL);\t\t\t\\\n+  }\n+\n+#define AND_LOAD_NORETURN(FN, TY, MODEL)\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_and_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n+\n+#define XOR_LOAD(FN, TY, MODEL)\t\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_xor_fetch (val, foo, MODEL);\t\t\t\\\n+  }\n+\n+#define XOR_LOAD_NORETURN(FN, TY, MODEL)\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_xor_fetch (val, foo, MODEL);\t\t\t\t\\\n+  }\n+\n \n TEST (load_or, LOAD_OR)\n TEST (load_or_notreturn, LOAD_OR_NORETURN)\n@@ -53,56 +89,66 @@ TEST (load_and_notreturn, LOAD_AND_NORETURN)\n TEST (load_xor, LOAD_XOR)\n TEST (load_xor_notreturn, LOAD_XOR_NORETURN)\n \n+TEST (or_load, OR_LOAD)\n+TEST (or_load_notreturn, OR_LOAD_NORETURN)\n+\n+TEST (and_load, AND_LOAD)\n+TEST (and_load_notreturn, AND_LOAD_NORETURN)\n+\n+TEST (xor_load, XOR_LOAD)\n+TEST (xor_load_notreturn, XOR_LOAD_NORETURN)\n+\n+\n /* Load-OR.  */\n \n-/* { dg-final { scan-assembler-times \"ldsetb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldsetab\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldsetlb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldsetalb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldsetb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldsetab\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldsetlb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldsetalb\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldseth\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldsetah\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldsetlh\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldsetalh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldseth\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldsetah\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldsetlh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldsetalh\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldset\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldseta\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldsetl\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldsetal\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldset\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldseta\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldsetl\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldsetal\\t\" 32} } */\n \n /* Load-AND.  */\n \n-/* { dg-final { scan-assembler-times \"ldclrb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldclrab\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldclrlb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldclralb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclrb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclrab\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldclrlb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclralb\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldclrh\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldclrah\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldclrlh\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldclralh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclrh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclrah\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldclrlh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldclralh\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldclr\\t\" 8} */\n-/* { dg-final { scan-assembler-times \"ldclra\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldclrl\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldclral\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldclr\\t\" 16} */\n+/* { dg-final { scan-assembler-times \"ldclra\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldclrl\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldclral\\t\" 32} } */\n \n /* Load-XOR.  */\n \n-/* { dg-final { scan-assembler-times \"ldeorb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldeorab\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldeorlb\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldeoralb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeorb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeorab\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldeorlb\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeoralb\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldeorh\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldeorah\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldeorlh\\t\" 4} } */\n-/* { dg-final { scan-assembler-times \"ldeoralh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeorh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeorah\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldeorlh\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"ldeoralh\\t\" 16} } */\n \n-/* { dg-final { scan-assembler-times \"ldeor\\t\" 8} */\n-/* { dg-final { scan-assembler-times \"ldeora\\t\" 16} } */\n-/* { dg-final { scan-assembler-times \"ldeorl\\t\" 8} } */\n-/* { dg-final { scan-assembler-times \"ldeoral\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldeor\\t\" 16} */\n+/* { dg-final { scan-assembler-times \"ldeora\\t\" 32} } */\n+/* { dg-final { scan-assembler-times \"ldeorl\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"ldeoral\\t\" 32} } */\n \n /* { dg-final { scan-assembler-not \"ldaxr\\t\" } } */\n /* { dg-final { scan-assembler-not \"stlxr\\t\" } } */"}]}