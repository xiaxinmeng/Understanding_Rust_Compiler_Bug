{"sha": "42e02b207fdf71f09020eef2bba3e25f5f57a946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJlMDJiMjA3ZmRmNzFmMDkwMjBlZWYyYmJhM2UyNWY1ZjU3YTk0Ng==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:14:07Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:14:07Z"}, "message": "[Patch 1/17] Add a new target hook for describing excess precision intentions\n\ngcc/\n\n\t* target.def (excess_precision): New hook.\n\t* target.h (flt_eval_method): New.\n\t(excess_precision_type): Likewise.\n\t* targhooks.c (default_excess_precision): New.\n\t* targhooks.h (default_excess_precision): New.\n\t* doc/tm.texi.in (TARGET_C_EXCESS_PRECISION): New.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r242771", "tree": {"sha": "c7ee3fc4890a00af4ef7dfacfa95f70282c9cdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ee3fc4890a00af4ef7dfacfa95f70282c9cdd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42e02b207fdf71f09020eef2bba3e25f5f57a946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e02b207fdf71f09020eef2bba3e25f5f57a946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e02b207fdf71f09020eef2bba3e25f5f57a946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e02b207fdf71f09020eef2bba3e25f5f57a946/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aecc521b46ac451c0547d8693bfcfabfb3832401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecc521b46ac451c0547d8693bfcfabfb3832401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecc521b46ac451c0547d8693bfcfabfb3832401"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "7cf97207916fd3e6523d5fd36337619ff04071a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -1,3 +1,13 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* target.def (excess_precision): New hook.\n+\t* target.h (flt_eval_method): New.\n+\t(excess_precision_type): Likewise.\n+\t* targhooks.c (default_excess_precision): New.\n+\t* targhooks.h (default_excess_precision): New.\n+\t* doc/tm.texi.in (TARGET_C_EXCESS_PRECISION): New.\n+\t* doc/tm.texi: Regenerate.\n+\n 2016-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78461"}, {"sha": "706b9d2f95c4c734f365573852069cb94d453512", "filename": "gcc/coretypes.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -332,6 +332,24 @@ enum symbol_visibility\n   VISIBILITY_INTERNAL\n };\n \n+/* enums used by the targetm.excess_precision hook.  */\n+\n+enum flt_eval_method\n+{\n+  FLT_EVAL_METHOD_UNPREDICTABLE = -1,\n+  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,\n+  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,\n+  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,\n+  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16\n+};\n+\n+enum excess_precision_type\n+{\n+  EXCESS_PRECISION_TYPE_IMPLICIT,\n+  EXCESS_PRECISION_TYPE_STANDARD,\n+  EXCESS_PRECISION_TYPE_FAST\n+};\n+\n /* Support for user-provided GGC and PCH markers.  The first parameter\n    is a pointer to a pointer, the second a cookie.  */\n typedef void (*gt_pointer_operator) (void *, void *);"}, {"sha": "144e63f4ccf5a71ef469e582879c5d2e96a32777", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -947,6 +947,10 @@ sign-extend the result to 64 bits.  On such machines, set\n Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n+@deftypefn {Target Hook} {enum flt_eval_method} TARGET_C_EXCESS_PRECISION (enum excess_precision_type @var{type})\n+Return a value, with the same meaning as @code{FLT_EVAL_METHOD} C that describes which excess precision should be applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT}, @code{EXCESS_PRECISION_TYPE_FAST}, or @code{EXCESS_PRECISION_TYPE_STANDARD}.  For @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which precision and range operations will be implictly evaluated in regardless of the excess precision explicitly added.  For @code{EXCESS_PRECISION_TYPE_STANDARD} and @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the explicit excess precision that should be added depending on the value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} machine_mode TARGET_PROMOTE_FUNCTION_MODE (const_tree @var{type}, machine_mode @var{mode}, int *@var{punsignedp}, const_tree @var{funtype}, int @var{for_return})\n Like @code{PROMOTE_MODE}, but it is applied to outgoing function arguments or\n function return values.  The target hook should return the new mode"}, {"sha": "7d8dcff14ea8efb75b3b0df5e1a42b9a97cfbde2", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -921,6 +921,8 @@ sign-extend the result to 64 bits.  On such machines, set\n Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n+@hook TARGET_C_EXCESS_PRECISION\n+\n @hook TARGET_PROMOTE_FUNCTION_MODE\n \n @defmac PARM_BOUNDARY"}, {"sha": "efcc336593b04bcfeb7712dbd9c154f1a440f193", "filename": "gcc/target.def", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -5464,6 +5464,23 @@ DEFHOOK_UNDOC\n  machine_mode, (char c),\n  default_mode_for_suffix)\n \n+DEFHOOK\n+(excess_precision,\n+ \"Return a value, with the same meaning as @code{FLT_EVAL_METHOD} C that\\\n+ describes which excess precision should be applied.  @var{type} is\\\n+ either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\\n+ @code{EXCESS_PRECISION_TYPE_FAST}, or\\\n+ @code{EXCESS_PRECISION_TYPE_STANDARD}.  For\\\n+ @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\\\n+ precision and range operations will be implictly evaluated in regardless\\\n+ of the excess precision explicitly added.  For\\\n+ @code{EXCESS_PRECISION_TYPE_STANDARD} and\\\n+ @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\\\n+ explicit excess precision that should be added depending on the\\\n+ value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\",\n+ enum flt_eval_method, (enum excess_precision_type type),\n+ default_excess_precision)\n+\n HOOK_VECTOR_END (c)\n \n /* Functions specific to the C++ frontend.  */"}, {"sha": "73e1c2584ae7abe58af3e65a04cee4caf57f7789", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -2135,4 +2135,12 @@ default_min_arithmetic_precision (void)\n   return WORD_REGISTER_OPERATIONS ? BITS_PER_WORD : BITS_PER_UNIT;\n }\n \n+/* Default implementation of TARGET_C_EXCESS_PRECISION.  */\n+\n+enum flt_eval_method\n+default_excess_precision (enum excess_precision_type ATTRIBUTE_UNUSED)\n+{\n+  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "e00da602ec76d8101ecd529dd939262c6265cf5b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e02b207fdf71f09020eef2bba3e25f5f57a946/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=42e02b207fdf71f09020eef2bba3e25f5f57a946", "patch": "@@ -263,4 +263,7 @@ extern bool default_optab_supported_p (int, machine_mode, machine_mode,\n extern unsigned int default_max_noce_ifcvt_seq_cost (edge);\n extern unsigned int default_min_arithmetic_precision (void);\n \n+extern enum flt_eval_method\n+default_excess_precision (enum excess_precision_type ATTRIBUTE_UNUSED);\n+\n #endif /* GCC_TARGHOOKS_H */"}]}