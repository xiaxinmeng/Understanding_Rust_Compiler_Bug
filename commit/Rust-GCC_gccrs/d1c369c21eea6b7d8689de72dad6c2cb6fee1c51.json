{"sha": "d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjMzY5YzIxZWVhNmI3ZDg2ODlkZTcyZGFkNmMyY2I2ZmVlMWM1MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-15T08:46:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-15T08:46:54Z"}, "message": "lto-streamer-in.c (input function): Call cgraph_create_node if cgraph_get_node failed.\n\n\t* lto-streamer-in.c (input function): Call cgraph_create_node if\n\tcgraph_get_node failed.\n\nFrom-SVN: r204836", "tree": {"sha": "2ee67c1d000ab70c095c824802e9c6b17abbd790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee67c1d000ab70c095c824802e9c6b17abbd790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51/comments", "author": null, "committer": null, "parents": [{"sha": "54848ff84bd0932500f915b5477d50eafa121ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54848ff84bd0932500f915b5477d50eafa121ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54848ff84bd0932500f915b5477d50eafa121ba1"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "0cbc2c72c7a6137e36446a94607f389b1d4bd86f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "patch": "@@ -1,3 +1,8 @@\n+2013-11-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lto-streamer-in.c (input function): Call cgraph_create_node if\n+\tcgraph_get_node failed.\n+\n 2013-11-14   Olivier Hainque  <hainque@adacore.com>\n \n \t* cfgexpand.c (defer_stack_allocation): When optimization is enabled,\n@@ -46,7 +51,8 @@\n \t* gimplify.c (force_gimple_operand_1, force_gimple_operand,\n \tforce_gimple_operand_gsi_1, force_gimple_operand_gsi,\n \tgimple_regimplify_operands): Move to gimplify-me.c.\n-\t(gimplify_hasher::hash, gimplify_hasher::equal): Relocate from gimple.h.\n+\t(gimplify_hasher::hash, gimplify_hasher::equal): Relocate\n+\tfrom gimple.h.\n \t* Makefile.in (OBJS): Add gimplify-me.o\n \t* asan.c: Include only gimplify.h, gimplify-me.h, and/or gimple.h as\n \trequired.\n@@ -226,8 +232,7 @@\n \n \t(rs6000_trampoline_size): Update for ABI_ELFv2 trampolines.\n \t(rs6000_trampoline_init): Likewise.\n-\t(rs6000_elf_file_end): Call file_end_indicate_exec_stack\n-\tfor ABI_ELFv2.\n+\t(rs6000_elf_file_end): Call file_end_indicate_exec_stack for ABI_ELFv2.\n \n \t(rs6000_call_aix): Handle ELFv2 indirect calls.  Do not check\n \tfor function descriptors in ABI_ELFv2.\n@@ -455,9 +460,8 @@\n \n 2013-11-14  Jeff Law  <law@redhat.com>\n \n-\t* tree-ssa-threadedge.c (thread_through_normal_block): Only push\n-\tthe EDGE_START_JUMP_THREAD marker if the jump threading path is\n-\tempty.\n+\t* tree-ssa-threadedge.c (thread_through_normal_block): Only push the\n+\tEDGE_START_JUMP_THREAD marker if the jump threading path is empty.\n \n 2013-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n \n@@ -507,17 +511,14 @@\n \t(cpu_rtx_cost_table): Remove.\n \n 2013-11-14  Julian Brown  <julian@codesourcery.com>\n-\tJoey Ye  <joey.ye@arm.com>\n+\t    Joey Ye  <joey.ye@arm.com>\n \n \t* config/arm/arm.c (arm_cortex_m_branch_cost): New.\n \t(arm_v7m_tune): New.\n-\t(arm_slowmul_tune, arm_fastmul_tune,\n-\tarm_strongarm_tune, arm_9e_tune, arm_v6t2_tune,\n-\tarm_cortex_tune, arm_cortex_a15_tune,\n-\tarm_cortex_a5_tune, arm_v6m_tune): Add comments\n-\tfor Sched adj cost.\n-\t* config/arm/arm-cores.def (cortex-m4, cortex-m3):\n-\tUse arm_v7m_tune.\n+\t(arm_slowmul_tune, arm_fastmul_tune, arm_strongarm_tune, arm_9e_tune,\n+\tarm_v6t2_tune, arm_cortex_tune, arm_cortex_a15_tune,\n+\tarm_cortex_a5_tune, arm_v6m_tune): Add comments for Sched adj cost.\n+\t* config/arm/arm-cores.def (cortex-m4, cortex-m3): Use arm_v7m_tune.\n \n 2013-11-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n@@ -571,7 +572,7 @@\n \n \t* tree-ssa-tail-merge.c (gimple_equal_p): Remove equal variable.\n \n-2013-11-13  Andrew MacLeod  <amacleod@redhat,com>\n+2013-11-13  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-walk.h: New File.  Relocate prototypes from gimple.h.\n \t(struct walk_stmt_info):  Relocate here from gimple.h.\n@@ -759,8 +760,7 @@\n \t* ira-color.c (struct allocno_color_data): Add new members\n \tfirst_thread_allocno, next_thread_allocno, thread_freq.\n \t(sorted_copies): New static var.\n-\t(allocnos_conflict_by_live_ranges_p, copy_freq_compare_func): Move\n-\tup.\n+\t(allocnos_conflict_by_live_ranges_p, copy_freq_compare_func): Move up.\n \t(allocno_thread_conflict_p, merge_threads)\n \t(form_threads_from_copies, form_threads_from_bucket)\n \t(form_threads_from_colorable_allocno, init_allocno_threads): New\n@@ -769,12 +769,11 @@\n \tand threads.\n \t(add_allocno_to_ordered_bucket): Rename to\n \tadd_allocno_to_ordered_colorable_bucket.  Remove parameter.\n-        (push_only_colorable): Call form_threads_from_bucket.\n+\t(push_only_colorable): Call form_threads_from_bucket.\n \t(color_pass): Call init_allocno_threads.  Use\n \tconsideration_allocno_bitmap instead of coloring_allocno_bitmap\n \tfor nuillify allocno color data.\n-\t(ira_initiate_assign, ira_finish_assign): Allocate/free\n-\tsorted_copies.\n+\t(ira_initiate_assign, ira_finish_assign): Allocate/free sorted_copies.\n \t(coalesce_allocnos): Use static sorted copies.\n \n 2013-11-13  Jakub Jelinek  <jakub@redhat.com>\n@@ -820,9 +819,8 @@\n \n \t* gimple-streamer-out.c (output_gimple_stmt): Also wrap\n \tdecls in ADDR_EXPR operands inside a MEM_REF and optimize that.\n-\t* gimple-streamer-in.c (input_gimple_stmt): Remove now dead\n-\tcode dealing with type mismatches inside component reference\n-\tchains.\n+\t* gimple-streamer-in.c (input_gimple_stmt): Remove now dead code\n+\tdealing with type mismatches inside component reference chains.\n \n 2013-11-13  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -857,7 +855,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-\t* config/i386/i386.c (ix86_print_operand): Support z-masking\n+\t* config/i386/i386.c (ix86_print_operand): Support z-masking.\n \t* config/i386/predicate.md (const_0_to_4_operand): New.\n \t(const_0_to_5_operand): Ditto.\n \t* config/i386/sse.md (UNSPEC_COMPRESS): New.\n@@ -1019,9 +1017,8 @@\n \n 2013-11-12  Jeff Law  <law@redhat.com>\n \n-\t* tree-ssa-threadedge.c (thread_around_empty_blocks): New\n-\targument backedge_seen_p.  Set, use and pass it to children\n-\tappropriately.\n+\t* tree-ssa-threadedge.c (thread_around_empty_blocks): New argument\n+\tbackedge_seen_p.  Set, use and pass it to children appropriately.\n \t(thread_through_normal_block): Similarly.\n \t(thread_across_edge): Similarly.\n \n@@ -1065,9 +1062,9 @@\n \tis_gimple_reg_rhs) Relocate from gimplify.c.\n \t* gimplify.c (mark_addressable): Move to gimple-expr.c.\n \t(gimple_seq_add_stmt_without_update): Move to gimple.c.\n-\t(remove_suffix, tmp_var_id_num, create_tmp_var_name, create_tmp_var_raw,\n-\tcreate_tmp_var, create_tmp_reg, is_gimple_reg_rhs): Move to \n-\tgimple-expr.c.\n+\t(remove_suffix, tmp_var_id_num, create_tmp_var_name,\n+\tcreate_tmp_var_raw, create_tmp_var, create_tmp_reg,\n+\tis_gimple_reg_rhs): Move to gimple-expr.c.\n \t(should_carry_location_p): Move to gimple.c.\n \t(gimple_do_not_emit_location_p, gimple_set_do_not_emit_location): Move\n \tto gimple.h.\n@@ -1235,7 +1232,7 @@\n \tHandle type conversion.\n \n 2013-11-11  Martin Liska  <marxin.liska@gmail.com>\n-\t\t\t\t\t\tJan Hubicka  <jh@suse.cz>\n+\t    Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (dump_cgraph_node): Profile dump added.\n \t* cgraph.h (struct cgraph_node): New time profile variable added.\n@@ -1247,7 +1244,8 @@\n \t* profile.c (instrument_values): New case for time profiler added.\n \t(compute_value_histograms): Read of time profile.\n \t* tree-pretty-print.c (dump_function_header): Time profiler is dumped.\n-\t* tree-profile.c (init_ic_make_global_vars): Time profiler function added.\n+\t* tree-profile.c (init_ic_make_global_vars): Time profiler\n+\tfunction added.\n \t(gimple_init_edge_profiler): TP function instrumentation.\n \t(gimple_gen_time_profiler): New.\n \t* value-prof.c (gimple_add_histogram_value): Support for time profiler\n@@ -1324,7 +1322,7 @@\n \tthreading paths first, then perform PHI node checks if applicable.\n \n 2013-11-10  Karlson2k  <k2k@narod.ru>\n-            Kai Tietz  <ktietz@redhat.com>\n+\t    Kai Tietz  <ktietz@redhat.com>\n \n \tPR plugin/52872\n \t* configure.ac: Adding for exported symbols check\n@@ -4710,8 +4708,7 @@\n \t* ipa-reference.h: Include cgraph.h instead of tree.h.\n \t* cgraph.h: Include basic-block.h instead of tree.h.\n \t* tree-streamer.h: Do not include tree.h.\n-\t* genattrtab.c (write_header): Generate inclusion of\n-\ttree.h.\n+\t* genattrtab.c (write_header): Generate inclusion of tree.h.\n \t* genautomata.c (main): Likewise.\n \t* genemit.c: Likewise.\n \t* genopinit.c: Likewise."}, {"sha": "4a31b05d52ec5603839da337a26c6af0875b8763", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "patch": "@@ -917,7 +917,8 @@ input_function (tree fn_decl, struct data_in *data_in,\n   gimple_register_cfg_hooks ();\n \n   node = cgraph_get_node (fn_decl);\n-  gcc_checking_assert (node);\n+  if (!node)\n+    node = cgraph_create_node (fn_decl);\n   input_struct_function_base (fn, data_in, ib);\n   input_cfg (ib_cfg, fn, node->count_materialization_scale);\n "}]}