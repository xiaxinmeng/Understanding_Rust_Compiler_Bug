{"sha": "30abf79348ff8927f4069bf8c48693afd658556f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhYmY3OTM0OGZmODkyN2Y0MDY5YmY4YzQ4NjkzYWZkNjU4NTU2Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-17T14:58:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-17T14:58:20Z"}, "message": "tree-vrp.c (compare_values): Check that VAL1 and VAL2 are both pointers or both integers.\n\n\t* tree-vrp.c (compare_values): Check that VAL1 and VAL2 are\n\tboth pointers or both integers.\n\nFrom-SVN: r98273", "tree": {"sha": "603886208f6dc46c6797854e6aebdb6cb74efdb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603886208f6dc46c6797854e6aebdb6cb74efdb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30abf79348ff8927f4069bf8c48693afd658556f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30abf79348ff8927f4069bf8c48693afd658556f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30abf79348ff8927f4069bf8c48693afd658556f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30abf79348ff8927f4069bf8c48693afd658556f/comments", "author": null, "committer": null, "parents": [{"sha": "101c5bc507e0067fe0c97a2eefd0192d5092b0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101c5bc507e0067fe0c97a2eefd0192d5092b0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101c5bc507e0067fe0c97a2eefd0192d5092b0d0"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "8cf5ee382d869ede999bfd9124599d0a8a481639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30abf79348ff8927f4069bf8c48693afd658556f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30abf79348ff8927f4069bf8c48693afd658556f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30abf79348ff8927f4069bf8c48693afd658556f", "patch": "@@ -1,3 +1,8 @@\n+2005-04-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-vrp.c (compare_values): Check that VAL1 and VAL2 are\n+\tboth pointers or both integers.\n+\n 2005-04-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/iris6.h (DRIVER_SELF_SPECS): Check -march as well as"}, {"sha": "3bb4a6b0cb02506eaa0a03703443827341c8708a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30abf79348ff8927f4069bf8c48693afd658556f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30abf79348ff8927f4069bf8c48693afd658556f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=30abf79348ff8927f4069bf8c48693afd658556f", "patch": "@@ -286,14 +286,13 @@ compare_values (tree val1, tree val2)\n   if (val1 == val2)\n     return 0;\n \n+  /* Below we rely on the fact that VAL1 and VAL2 are both pointers or\n+     both integers.  */\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (val1))\n+\t      == POINTER_TYPE_P (TREE_TYPE (val2)));\n+\n   /* Do some limited symbolic comparisons.  */\n-  /* FIXME: The second check of POINTER_TYPE_P should not be necessary\n-     because we should be comparing values of the same type here, but\n-     for whatever reason, the front end throws us a type mismatched\n-     comparison.  For now, work around the problem by checking both\n-     types.  See PR 21021 and PR 21024.  */\n-  if (!POINTER_TYPE_P (TREE_TYPE (val1))\n-      && !POINTER_TYPE_P (TREE_TYPE (val2)))\n+  if (!POINTER_TYPE_P (TREE_TYPE (val1)))\n     {\n       /* We can determine some comparisons against +INF and -INF even\n \t if the other value is an expression.  */\n@@ -406,13 +405,7 @@ compare_values (tree val1, tree val2)\n   if (!is_gimple_min_invariant (val1) || !is_gimple_min_invariant (val2))\n     return -2;\n \n-  /* FIXME: The second check of POINTER_TYPE_P should not be necessary\n-     because we should be comparing values of the same type here, but\n-     for whatever reason, the front end throws us a type mismatched\n-     comparison.  For now, work around the problem by checking both\n-     types.  See PR 21021 and PR 21024.  */\n-  if (!POINTER_TYPE_P (TREE_TYPE (val1))\n-      && !POINTER_TYPE_P (TREE_TYPE (val2)))\n+  if (!POINTER_TYPE_P (TREE_TYPE (val1)))\n     return tree_int_cst_compare (val1, val2);\n   else\n     {"}]}