{"sha": "7f0b305c5a35094bc999835d1ab1fa942e6d7ebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwYjMwNWM1YTM1MDk0YmM5OTk4MzVkMWFiMWZhOTQyZTZkN2ViZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-10T10:49:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-10T10:49:13Z"}, "message": "(fold): Avoid infinite recursion caused by last change.\n\nFrom-SVN: r8730", "tree": {"sha": "e96a08980bab3483aba8b666e5a050992badd375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e96a08980bab3483aba8b666e5a050992badd375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf/comments", "author": null, "committer": null, "parents": [{"sha": "dddd8006abd2dc2a30a9a8323c2363803716b21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddd8006abd2dc2a30a9a8323c2363803716b21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddd8006abd2dc2a30a9a8323c2363803716b21f"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "42723367389356cbe60848c76225bcce42b48820", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0b305c5a35094bc999835d1ab1fa942e6d7ebf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7f0b305c5a35094bc999835d1ab1fa942e6d7ebf", "patch": "@@ -3366,17 +3366,17 @@ fold (expr)\n \t  tree inter_type = TREE_TYPE (TREE_OPERAND (t, 0));\n \t  tree final_type = TREE_TYPE (t);\n \t  int inside_int = INTEGRAL_TYPE_P (inside_type);\n-\t  int inside_ptr = TREE_CODE (inside_type) == POINTER_TYPE;\n+\t  int inside_ptr = POINTER_TYPE_P (inside_type);\n \t  int inside_float = FLOAT_TYPE_P (inside_type);\n \t  int inside_prec = TYPE_PRECISION (inside_type);\n \t  int inside_unsignedp = TREE_UNSIGNED (inside_type);\n \t  int inter_int = INTEGRAL_TYPE_P (inter_type);\n-\t  int inter_ptr = TREE_CODE (inter_type) == POINTER_TYPE;\n+\t  int inter_ptr = POINTER_TYPE_P (inter_type);\n \t  int inter_float = FLOAT_TYPE_P (inter_type);\n \t  int inter_prec = TYPE_PRECISION (inter_type);\n \t  int inter_unsignedp = TREE_UNSIGNED (inter_type);\n \t  int final_int = INTEGRAL_TYPE_P (final_type);\n-\t  int final_ptr = TREE_CODE (final_type) == POINTER_TYPE;\n+\t  int final_ptr = POINTER_TYPE_P (final_type);\n \t  int final_float = FLOAT_TYPE_P (final_type);\n \t  int final_prec = TYPE_PRECISION (final_type);\n \t  int final_unsignedp = TREE_UNSIGNED (final_type);\n@@ -3393,11 +3393,13 @@ fold (expr)\n \t  /* Likewise, if the intermediate and final types are either both\n \t     float or both integer, we don't need the middle conversion if\n \t     it is wider than the final type and doesn't change the signedness\n-\t     (for integers).  */\n+\t     (for integers).  Avoid this if the final type is a pointer\n+\t     since then we sometimes need the inner conversion.  */\n \t  if ((((inter_int || inter_ptr) && (inside_int || inside_ptr))\n \t       || (inter_float && inside_float))\n \t      && inter_prec >= inside_prec\n-\t      && (inter_float || inter_unsignedp == inside_unsignedp))\n+\t      && (inter_float || inter_unsignedp == inside_unsignedp)\n+\t      && ! final_ptr)\n \t    return convert (final_type, TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n \n \t  /* Two conversions in a row are not needed unless:"}]}