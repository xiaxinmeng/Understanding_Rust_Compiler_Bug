{"sha": "b75255a9b11ae672e569966860090d70ff10ffca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1MjU1YTliMTFhZTY3MmU1Njk5NjY4NjAwOTBkNzBmZjEwZmZjYQ==", "commit": {"author": {"name": "Michael Ploujnikov", "email": "michael.ploujnikov@oracle.com", "date": "2018-11-30T22:20:43Z"}, "committer": {"name": "Michael Ploujnikov", "email": "plouj@gcc.gnu.org", "date": "2018-11-30T22:20:43Z"}, "message": "Make function assembly more independent.\n\nThis is achieved by having clone_function_name assign unique clone\nnumbers for each function independently.\n\ngcc:\n\n\t* cgraphclones.c: Replaced clone_fn_id_num with clone_fn_ids;\n\thash map.\n\t(clone_function_name_numbered): Use clone_fn_ids.\n\ngcc/testsuite:\n\n\t* gcc.dg/independent-cloneids-1.c: New test.\n\nFrom-SVN: r266691", "tree": {"sha": "55a027d11ff28e72cff913ce39f05def9cd7cd11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55a027d11ff28e72cff913ce39f05def9cd7cd11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75255a9b11ae672e569966860090d70ff10ffca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75255a9b11ae672e569966860090d70ff10ffca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75255a9b11ae672e569966860090d70ff10ffca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75255a9b11ae672e569966860090d70ff10ffca/comments", "author": {"login": "plouj-oracle", "id": 7086511, "node_id": "MDQ6VXNlcjcwODY1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7086511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plouj-oracle", "html_url": "https://github.com/plouj-oracle", "followers_url": "https://api.github.com/users/plouj-oracle/followers", "following_url": "https://api.github.com/users/plouj-oracle/following{/other_user}", "gists_url": "https://api.github.com/users/plouj-oracle/gists{/gist_id}", "starred_url": "https://api.github.com/users/plouj-oracle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plouj-oracle/subscriptions", "organizations_url": "https://api.github.com/users/plouj-oracle/orgs", "repos_url": "https://api.github.com/users/plouj-oracle/repos", "events_url": "https://api.github.com/users/plouj-oracle/events{/privacy}", "received_events_url": "https://api.github.com/users/plouj-oracle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5b5f5ad904650d992b4acc967c6dd94d1dc4f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b5f5ad904650d992b4acc967c6dd94d1dc4f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5b5f5ad904650d992b4acc967c6dd94d1dc4f12"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "e47e2b17cb8be17b376b17b55e226696386c0a64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b75255a9b11ae672e569966860090d70ff10ffca", "patch": "@@ -1,3 +1,13 @@\n+2018-11-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\tMake function assembly more independent.\n+\n+\tThis is achieved by having clone_function_name assign unique clone\n+\tnumbers for each function independently.\n+\n+\t* cgraphclones.c: Replaced clone_fn_id_num with clone_fn_ids;\n+\thash map.\n+\t(clone_function_name_numbered): Use clone_fn_ids.\n+\n 2018-11-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/88179"}, {"sha": "a45722f1fc72f4e6973b26dd8f18714f8a1b6124", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=b75255a9b11ae672e569966860090d70ff10ffca", "patch": "@@ -517,7 +517,7 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n   return new_node;\n }\n \n-static GTY(()) unsigned int clone_fn_id_num;\n+static GTY(()) hash_map<const char *, unsigned> *clone_fn_ids;\n \n /* Return a new assembler name for a clone of decl named NAME.  Apart\n    from the string SUFFIX, the new name will end with a unique (for\n@@ -529,7 +529,13 @@ static GTY(()) unsigned int clone_fn_id_num;\n tree\n clone_function_name_numbered (const char *name, const char *suffix)\n {\n-  return clone_function_name (name, suffix, clone_fn_id_num++);\n+  /* Initialize the function->counter mapping the first time it's\n+     needed.  */\n+  if (!clone_fn_ids)\n+    clone_fn_ids = hash_map<const char *, unsigned int>::create_ggc (64);\n+  unsigned int &suffix_counter = clone_fn_ids->get_or_insert (\n+\t\t\t\t   IDENTIFIER_POINTER (get_identifier (name)));\n+  return clone_function_name (name, suffix, suffix_counter++);\n }\n \n /* Return a new assembler name for a clone of DECL.  Apart from string"}, {"sha": "1c6a9561378c02223cd23b16701495e0e46278a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b75255a9b11ae672e569966860090d70ff10ffca", "patch": "@@ -1,3 +1,7 @@\n+2018-11-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\n+\t* gcc.dg/independent-cloneids-1.c: New test.\n+\n 2018-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/85550"}, {"sha": "32038954929679627d16804eb7756a0c75f3d91b", "filename": "gcc/testsuite/gcc.dg/independent-cloneids-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75255a9b11ae672e569966860090d70ff10ffca/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c?ref=b75255a9b11ae672e569966860090d70ff10ffca", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone\"  } */\n+\n+extern int printf (const char *, ...);\n+\n+static int __attribute__ ((noinline))\n+foo (int arg)\n+{\n+  return 7 * arg;\n+}\n+\n+static int __attribute__ ((noinline))\n+bar (int arg)\n+{\n+  return arg * arg;\n+}\n+\n+int\n+baz (int arg)\n+{\n+  printf(\"%d\\n\", bar (3));\n+  printf(\"%d\\n\", bar (4));\n+  printf(\"%d\\n\", foo (5));\n+  printf(\"%d\\n\", foo (6));\n+  /* adding or removing the following call should not affect foo\n+     function's clone numbering */\n+  printf(\"%d\\n\", bar (7));\n+  return foo (8);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)\\m_*bar[.$_]constprop[.$_]0:} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)\\m_*bar[.$_]constprop[.$_]1:} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)\\m_*bar[.$_]constprop[.$_]2:} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)\\m_*foo[.$_]constprop[.$_]0:} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)\\m_*foo[.$_]constprop[.$_]1:} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)\\m_*foo[.$_]constprop[.$_]2:} 1 } } */\n+/* { dg-final { scan-assembler-not {(?n)\\m_*foo[.$_]constprop[.$_]3:} } } */\n+/* { dg-final { scan-assembler-not {(?n)\\m_*foo[.$_]constprop[.$_]4:} } } */"}]}