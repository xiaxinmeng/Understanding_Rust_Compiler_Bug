{"sha": "3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0NGNhZGY2YTlkNWE1Y2Q4ZTgzYjAxMjMzMTZjZjE4NGZhNGUzZQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-07-26T13:13:48Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-07-26T13:13:48Z"}, "message": "AArch64: Make processing less fragile in config.gcc\n\nDue to config.gcc all the options need to be on one line because of the grep\nlines which would select only the first line of the option.\n\nThis causes it not to select the right bits on options that are spread over\nmultiple lines when the --with-arch configure option is used.  The issue happens\nsilently and you just get a compiler with an incorrect set of default flags.\n\nThe current rules are quite rigid:\n\n   1) No space between the AARCH64_OPT_EXTENSION and the opening (.\n   2) No space between the opening ( and the extension name.\n   3) No space after the extension name before the ,.\n   4) Spaces are only allowed after a , and around |.\n\nThis patch makes this a lot less fragile by using the C pre-processor to flatten\nthe list and then provides much more flexible regex using group matching to\nprocess the options instead of string replacement.  This removes all the\nrestrictions above and makes the code a bit more readable.\n\ngcc/ChangeLog:\n\n\tPR target/89517\n\t* config.gcc: Relax parsing of AARCH64_OPT_EXTENSION.\n\t* config/aarch64/aarch64-option-extensions.def: Add new comments\n\tand restore easier to read options.\n\nFrom-SVN: r273827", "tree": {"sha": "16d58da2e9d42bb99ef86c2625cdcf4161f5f0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d58da2e9d42bb99ef86c2625cdcf4161f5f0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f5331b25250d488910f62120f6b268486e99fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5331b25250d488910f62120f6b268486e99fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5331b25250d488910f62120f6b268486e99fbf"}], "stats": {"total": 142, "additions": 97, "deletions": 45}, "files": [{"sha": "41b20bc0158be562b04b2214cc578bb4c02aa220", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "patch": "@@ -1,3 +1,10 @@\n+2019-07-26  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/89517\n+\t* config.gcc: Relax parsing of AARCH64_OPT_EXTENSION.\n+\t* config/aarch64/aarch64-option-extensions.def: Add new comments\n+\tand restore easier to read options.\n+\n 2019-07-26  Tamar Christina  <tamar.christina@arm.com>\n \n \t* convert.c (convert_to_real_1): Move part of conversion code..."}, {"sha": "caab0a486ea898a69d0f2c80dc9163a5e6aeea3e", "filename": "gcc/config.gcc", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "patch": "@@ -3902,32 +3902,40 @@ case \"${target}\" in\n \t\t\t\t  sed -e 's/,.*$//'`\n \t\t\t  fi\n \n+\t\t\t  # Use the pre-processor to strip flatten the options.\n+\t\t\t  # This makes the format less rigid than if we use\n+\t\t\t  # grep and sed directly here.\n+\t\t\t  opt_macro=\"AARCH64_OPT_EXTENSION(A, B, C, D, E, F)=A, B, C, D, E, F\"\n+\t\t\t  options_parsed=\"`$ac_cv_prog_CPP -D\"$opt_macro\" -x c \\\n+\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def`\"\n+\n+\t\t\t  # Match one element inside AARCH64_OPT_EXTENSION, we\n+\t\t\t  # consume anything that's not a ,.\n+\t\t\t  elem=\"[ \t]*\\([^,]\\+\\)[ \t]*\"\n+\n+\t\t\t  # Repeat the pattern for the number of entries in the\n+\t\t\t  # AARCH64_OPT_EXTENSION, currently 6 times.\n+\t\t\t  sed_patt=\"^$elem,$elem,$elem,$elem,$elem,$elem\"\n+\n \t\t\t  while [ x\"$ext_val\" != x ]\n \t\t\t  do\n \t\t\t\text_val=`echo $ext_val | sed -e 's/\\+//'`\n \t\t\t\text=`echo $ext_val | sed -e 's/\\+.*//'`\n \t\t\t\tbase_ext=`echo $ext | sed -e 's/^no//'`\n+\t\t\t\topt_line=`echo -e \"$options_parsed\" | \\\n+\t\t\t\t\tgrep \"^\\\"$base_ext\\\"\"`\n \n \t\t\t\tif [ x\"$base_ext\" = x ] \\\n-\t\t\t\t    || grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n-\t\t\t\t    ${srcdir}/config/aarch64/aarch64-option-extensions.def \\\n-\t\t\t\t    > /dev/null; then\n-\n-\t\t\t\t  ext_canon=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n-\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n-\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*//' | \\\n-\t\t\t\t\tsed -e 's/,.*$//'`\n-\t\t\t\t  ext_on=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n-\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n-\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*[^,]*,[ \t]*//' | \\\n-\t\t\t\t\tsed -e 's/,.*$//' | \\\n-\t\t\t\t\tsed -e 's/).*$//'`\n-\t\t\t\t  ext_off=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n-\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n-\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*[^,]*,[ \t]*[^,]*,[ \t]*//' | \\\n-\t\t\t\t\tsed -e 's/,.*$//' | \\\n-\t\t\t\t\tsed -e 's/).*$//'`\n-\n+\t\t\t\t    || [[ -n $opt_line ]]; then\n+\n+\t\t\t\t  # These regexp extract the elements based on\n+\t\t\t\t  # their group match index in the regexp.\n+\t\t\t\t  ext_canon=`echo -e \"$opt_line\" | \\\n+\t\t\t\t\tsed -e \"s/$sed_patt/\\2/\"`\n+\t\t\t\t  ext_on=`echo -e \"$opt_line\" | \\\n+\t\t\t\t\tsed -e \"s/$sed_patt/\\3/\"`\n+\t\t\t\t  ext_off=`echo -e \"$opt_line\" | \\\n+\t\t\t\t\tsed -e \"s/$sed_patt/\\4/\"`\n \n \t\t\t\t  if [ $ext = $base_ext ]; then\n \t\t\t\t\t# Adding extension"}, {"sha": "d427de25046f632c7987421fbdca56172c38cd6a", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=3644cadf6a9d5a5cd8e83b0123316cf184fa4e3e", "patch": "@@ -45,32 +45,43 @@\n      entries: aes, pmull, sha1, sha2 being present).  In that case this field\n      should contain a space (\" \") separated list of the strings in 'Features'\n      that are required.  Their order is not important.  An empty string means\n-     do not detect this feature during auto detection.  */\n+     do not detect this feature during auto detection.\n \n-/* NOTE: This file is being parsed by config.gcc and so the\n-   AARCH64_OPT_EXTENSION must adhere to a strict format:\n-   1) No space between the AARCH64_OPT_EXTENSION and the opening (.\n-   2) No space between the opening ( and the extension name.\n-   3) No space after the extension name before the ,.\n-   4) Spaces are only allowed after a , and around |.\n-   5) Everything must be on one line.  */\n+     NOTE: Any changes to the AARCH64_OPT_EXTENSION macro need to be mirrored in\n+     config.gcc.  */\n \n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n    \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n    \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"fp\")\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | \\\n+\t\t      AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | \\\n+\t\t      AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n+\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n+\t\t      AARCH64_FL_SVE2_BITPERM, false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n    \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n    \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"asimd\")\n+AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, \\\n+\t\t      AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | \\\n+\t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | \\\n+\t\t      AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n+\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \\\n+\t\t      \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n    Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\",\n    \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\".  */\n-AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_AES | AARCH64_FL_SHA2, AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4, true, \"aes pmull sha1 sha2\")\n+AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_AES | AARCH64_FL_SHA2, \\\n+\t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | \\\n+\t\t      AARCH64_FL_SM4 | AARCH64_FL_SVE2_AES | \\\n+\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4, true, \\\n+\t\t      \"aes pmull sha1 sha2\")\n \n /* Enabling or disabling \"crc\" only changes \"crc\".  */\n AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, false, \"crc32\")\n@@ -80,44 +91,59 @@ AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, false, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n    Disabling \"fp16\" disables \"fp16\", \"fp16fml\", \"sve\", \"sve2\", \"sve2-aes\",\n-   \"sve2-sha3\", \"sve2-sm4\", and \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"fphp asimdhp\")\n+   \"sve2-sha3\", \"sve2-sm4\", and \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, \\\n+\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n+\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \\\n+\t\t      \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n AARCH64_OPT_EXTENSION(\"rcpc\", AARCH64_FL_RCPC, 0, 0, false, \"lrcpc\")\n \n /* Enabling \"rdma\" also enables \"fp\", \"simd\".\n    Disabling \"rdma\" just disables \"rdma\".  */\n-AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, false, \"asimdrdm\")\n+AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, \\\n+\t\t      AARCH64_FL_FP | AARCH64_FL_SIMD, 0, false, \"asimdrdm\")\n \n /* Enabling \"dotprod\" also enables \"simd\".\n    Disabling \"dotprod\" only disables \"dotprod\".  */\n-AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, false, \"asimddp\")\n+AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, \\\n+\t\t      false, \"asimddp\")\n \n /* Enabling \"aes\" also enables \"simd\".\n    Disabling \"aes\" disables \"aes\" and \"sve2-aes'.  */\n-AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, AARCH64_FL_SVE2_AES, false, \"aes\")\n+AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, \\\n+\t\t      AARCH64_FL_SVE2_AES, false, \"aes\")\n \n /* Enabling \"sha2\" also enables \"simd\".\n    Disabling \"sha2\" just disables \"sha2\".  */\n-AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, false, \"sha1 sha2\")\n+AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, false, \\\n+\t\t      \"sha1 sha2\")\n \n /* Enabling \"sha3\" enables \"simd\" and \"sha2\".\n    Disabling \"sha3\" disables \"sha3\" and \"sve2-sha3\".  */\n-AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, AARCH64_FL_SVE2_SHA3, false, \"sha3 sha512\")\n+AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | \\\n+\t\t      AARCH64_FL_SHA2, AARCH64_FL_SVE2_SHA3, false, \\\n+\t\t      \"sha3 sha512\")\n \n /* Enabling \"sm4\" also enables \"simd\".\n    Disabling \"sm4\" disables \"sm4\" and \"sve2-sm4\".  */\n-AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, AARCH64_FL_SVE2_SM4, false, \"sm3 sm4\")\n+AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, \\\n+\t\t      AARCH64_FL_SVE2_SM4, false, \"sm3 sm4\")\n \n /* Enabling \"fp16fml\" also enables \"fp\" and \"fp16\".\n    Disabling \"fp16fml\" just disables \"fp16fml\".  */\n-AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfml\")\n+AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, \\\n+\t\t      AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfml\")\n \n /* Enabling \"sve\" also enables \"fp16\", \"fp\" and \"simd\".\n    Disabling \"sve\" disables \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\"\n    and \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"sve\")\n+AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | \\\n+\t\t      AARCH64_FL_F16, AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n+\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n+\t\t      AARCH64_FL_SVE2_BITPERM, false, \"sve\")\n \n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, false, \"\")\n@@ -140,22 +166,33 @@ AARCH64_OPT_EXTENSION(\"predres\", AARCH64_FL_PREDRES, 0, 0, false, \"\")\n /* Enabling \"sve2\" also enables \"sve\", \"fp16\", \"fp\", and \"simd\".\n    Disabling \"sve2\" disables \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n    \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"sve2\", AARCH64_FL_SVE2, AARCH64_FL_SVE | AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"\")\n+AARCH64_OPT_EXTENSION(\"sve2\", AARCH64_FL_SVE2, AARCH64_FL_SVE | \\\n+\t\t      AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, \\\n+\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"\")\n \n /* Enabling \"sve2-sm4\" also enables \"sm4\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n    \"sve2\". Disabling \"sve2-sm4\" just disables \"sve2-sm4\".  */\n-AARCH64_OPT_EXTENSION(\"sve2-sm4\", AARCH64_FL_SVE2_SM4, AARCH64_FL_SM4 | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+AARCH64_OPT_EXTENSION(\"sve2-sm4\", AARCH64_FL_SVE2_SM4, AARCH64_FL_SM4 | \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n \n /* Enabling \"sve2-aes\" also enables \"aes\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n    \"sve2\". Disabling \"sve2-aes\" just disables \"sve2-aes\".  */\n-AARCH64_OPT_EXTENSION(\"sve2-aes\", AARCH64_FL_SVE2_AES, AARCH64_FL_AES | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+AARCH64_OPT_EXTENSION(\"sve2-aes\", AARCH64_FL_SVE2_AES, AARCH64_FL_AES | \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n \n /* Enabling \"sve2-sha3\" also enables \"sha3\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n    \"sve2\". Disabling \"sve2-sha3\" just disables \"sve2-sha3\".  */\n-AARCH64_OPT_EXTENSION(\"sve2-sha3\", AARCH64_FL_SVE2_SHA3, AARCH64_FL_SHA3 | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+AARCH64_OPT_EXTENSION(\"sve2-sha3\", AARCH64_FL_SVE2_SHA3, AARCH64_FL_SHA3 | \\\n+\t\t      AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n \n /* Enabling \"sve2-bitperm\" also enables \"simd\", \"fp16\", \"fp\", \"sve\", and\n    \"sve2\".  Disabling \"sve2-bitperm\" just disables \"sve2-bitperm\".  */\n-AARCH64_OPT_EXTENSION(\"sve2-bitperm\", AARCH64_FL_SVE2_BITPERM, AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+AARCH64_OPT_EXTENSION(\"sve2-bitperm\", AARCH64_FL_SVE2_BITPERM, AARCH64_FL_SIMD | \\\n+\t\t      AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | \\\n+\t\t      AARCH64_FL_SVE2, 0, false, \"\")\n \n #undef AARCH64_OPT_EXTENSION"}]}