{"sha": "50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhODdjMWMwYzcyYmM1ZDIzOGU0ZTVhN2ZhOTM2NzFjMGJhNDcwMg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-08-09T19:11:03Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-08-09T19:11:03Z"}, "message": "fold-vec-pack-double.c: New.\n\n[gcc/testsuite]\n\n2017-08-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-pack-double.c: New.\n\t* gcc.target/powerpc/fold-vec-pack-int.c: New.\n\t* gcc.target/powerpc/fold-vec-pack-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-pack-short.c: New.\n\nFrom-SVN: r250998", "tree": {"sha": "e4de3c90280e44dc07704d9f4a308ee2aebfcd54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4de3c90280e44dc07704d9f4a308ee2aebfcd54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d9a180f7d5719f4bfcd96df8188ea3a5e24550a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9a180f7d5719f4bfcd96df8188ea3a5e24550a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9a180f7d5719f4bfcd96df8188ea3a5e24550a"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "47a4536800e8ca79c5a629df00cd29ae0fbdee98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "patch": "@@ -1,3 +1,10 @@\n+2017-08-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-pack-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-pack-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-pack-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-pack-short.c: New.\n+\n 2017-08-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-msum-char.c: New."}, {"sha": "29d049abe8016791c126911ed2ef2e0e03d0281e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-pack-double.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-double.c?ref=50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_pack with\n+   double inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mvsx -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+// vector float vec_pack (vector double, vector double);\n+\n+vector float\n+test_pack (vector double vd2, vector double vd3)\n+{\n+  return vec_pack (vd2, vd3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpkudum\" 1 } } */"}, {"sha": "940faf36755d89a966f03f5056cc77cab54c60a5", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-pack-int.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-int.c?ref=50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_pack with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+testbi_h (vector bool int vbi2, vector bool int vbi3)\n+{\n+  return vec_pack (vbi2, vbi3);\n+}\n+\n+vector signed short\n+testsi_h (vector signed int vsi2, vector signed int vsi3)\n+{\n+  return vec_pack (vsi2, vsi3);\n+}\n+\n+vector unsigned short\n+testui_h (vector unsigned int vui2, vector unsigned int vui3)\n+{\n+  return vec_pack (vui2, vui3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpkuwum\" 3 } } */"}, {"sha": "d8acc3cf03675f7947246a4219d10aa43fba35c9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-pack-longlong.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-longlong.c?ref=50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_pack with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mvsx -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+testbl_h (vector bool long long vbl2, vector bool long long vbl3)\n+{\n+  return vec_pack (vbl2, vbl3);\n+}\n+\n+vector signed int\n+testsl_h (vector signed long long vsl2, vector signed long long vsl3)\n+{\n+  return vec_pack (vsl2, vsl3);\n+}\n+\n+vector unsigned int\n+testul_h (vector unsigned long vul2, vector unsigned long vul3)\n+{\n+  return vec_pack (vul2, vul3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpkudum\" 3 } } */"}, {"sha": "37cd191dbd8197030b8f03304b9a1824bd6995b7", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-pack-short.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-pack-short.c?ref=50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_pack with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+testbi_eh (vector bool short vbs2, vector bool short vbs3)\n+{\n+  return vec_pack (vbs2, vbs3);\n+}\n+\n+vector signed char\n+testsi_eh (vector signed short vss2, vector signed short vss3)\n+{\n+  return vec_pack (vss2, vss3);\n+}\n+\n+vector unsigned char\n+testui_eh (vector unsigned short vus2, vector unsigned short vus3)\n+{\n+  return vec_pack (vus2, vus3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpkuhum\" 3 } } */"}]}