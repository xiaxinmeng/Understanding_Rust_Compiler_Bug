{"sha": "84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "node_id": "C_kwDOANBUbNoAKDg0YzIxMzFkMmM1OTZkZGY5MDUwMGIzZjBhZDRhYTQzYWJlNjUwZjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-25T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-25T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "2f2ad004d35eb2fc0acd2f9dc431f4918d8fdc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f2ad004d35eb2fc0acd2f9dc431f4918d8fdc26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/comments", "author": null, "committer": null, "parents": [{"sha": "113844d68e94f4e9c0e946db351ba7d3d4a1335a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113844d68e94f4e9c0e946db351ba7d3d4a1335a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113844d68e94f4e9c0e946db351ba7d3d4a1335a"}], "stats": {"total": 523, "additions": 522, "deletions": 1}, "files": [{"sha": "51cb9ec39c483353c872e4223deb1e463dd8fa6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,148 @@\n+2022-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\tPR c++/20423\n+\t* doc/invoke.texi: Document changes.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/tilepro/gen-mul-tables.cc (tilegx_emit): Adjust loop\n+\tcondition to avoid overflow.\n+\n+2022-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/aix71.h (MASK_PPC_GPOPT, MASK_PPC_GFXOPT): Replace with\n+\tOPTION_MASK_PPC_GPOPT, OPTION_MASK_PPC_GFXOPT.\n+\t* config/rs6000/darwin.h (MASK_PPC_GFXOPT): Replace with\n+\tOPTION_MASK_PPC_GFXOPT.\n+\t* config/rs6000/darwin64-biarch.h (MASK_PPC_GFXOPT): Same.\n+\t* config/rs6000/default64.h (MASK_PPC_GPOPT, MASK_PPC_GFXOPT): Replace with\n+\tOPTION_MASK_PPC_GPOPT, OPTION_MASK_PPC_GFXOPT.\n+\t* config/rs6000/rs6000-c.cc: Update comment.\n+\t* config/rs6000/rs6000-cpus.def: Update RS6000_CPU macro calls.\n+\t* config/rs6000/rs6000.cc (rs6000_darwin_file_start): Replace\n+\tMASK_PPC_GPOPT with OPTION_MASK_PPC_GPOPT.\n+\t(rs6000_builtin_mask_names): Replace MASK_PPC_GFXOPT, MASK_POPCNTB\n+\twith OPTION_MASK_PPC_GFXOPT, OPTION_MASK_POPCNTB.\n+\t* config/rs6000/rs6000.h: (MASK_P8_VECTOR, MASK_P9_VECTOR,\n+\tMASK_P9_MISC, MASK_POPCNTB, MASK_POPCNTD, MASK_PPC_GFXOPT,\n+\tMASK_PPC_GPOPT, MASK_RECIP_PRECISION, MASK_SOFT_FLOAT,\n+\tMASK_VSX, MASK_POWER10, MASK_P10_FUSION): Delete.\n+\n+2022-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/aix71.h (TARGET_DEFAULT): Replace MASK_MFCRF with\n+\tOPTION_MASK_MFCRF.\n+\t* config/rs6000/darwin.h (TARGET_DEFAULT): Replace MASK_MULTIPLE with\n+\tOPTION_MASK_MULTIPLE.\n+\t* config/rs6000/darwin64-biarch.h (TARGET_DEFAULT): Same.\n+\t* config/rs6000/default64.h (TARGET_DEFAULT): Replace MASK_MFCRF with\n+\tOPTION_MASK_MFCRF.\n+\t* config/rs6000/eabi.h (TARGET_DEFAULT): Replace MASK_EABI with\n+\tOPTION_MASK_EABI.\n+\t* config/rs6000/eabialtivec.h (TARGET_DEFAULT): Same.\n+\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Replace\n+\tMASK_ALTIVEC with OPTION_MASK_ALTIVEC.\n+\t* config/rs6000/rs6000-cpus.def (MASK_ALTIVEC, MASK_CMPB,\n+\tMASK_CRYPTO, MASK_DFP, MASK_DIRECT_MOVE, MASK_DLMZB, MASK_EABI,\n+\tMASK_FLOAT128_KEYWORD, MASK_FLOAT128_HW, MASK_FPRND,\n+\tMASK_P8_FUSION, MASK_HARD_FLOAT, MASK_HTM, MASK_ISEL, MASK_MFCRF,\n+\tMASK_MMA, MASK_MULHW, MASK_MULTIPLE, MASK_NO_UPDATE):\n+\tReplace with\n+\tOPTION_MASK_ALTIVEC, OPTION_MASK_CMPB, OPTION_MASK_CRYPTO,\n+\tOPTION_MASK_DFP, OPTION_MASK_DIRECT_MOVE, OPTION_MASK_DLMZB,\n+\tOPTION_MASK_EABI, OPTION_MASK_FLOAT128_KEYWORD,\n+\tOPTION_MASK_FLOAT128_HW, OPTION_MASK_FPRND, OPTION_MASK_P8_FUSION,\n+\tOPTION_MASK_HARD_FLOAT, OPTION_MASK_HTM, OPTION_MASK_ISEL,\n+\tOPTION_MASK_MFCRF, OPTION_MASK_MMA, OPTION_MASK_MULHW,\n+\tOPTION_MASK_MULTIPLE, OPTION_MASK_NO_UPDATE.\n+\t* config/rs6000/rs6000.cc (rs6000_darwin_file_start): Replace\n+\tMASK_MFCRF, MASK_ALTIVEC with OPTION_MASK_MFCRF, OPTION_MASK_ALTIVEC.\n+\t* config/rs6000/rs6000.h (TARGET_DEFAULT): Replace MASK_MULTIPLE\n+\twith OPTION_MASK_MULTIPLE.\n+\t(MASK_ALTIVEC, MASK_CMPB, MASK_CRYPTO, MASK_DFP,\n+\tMASK_DIRECT_MOVE, MASK_DLMZB, MASK_EABI, MASK_FLOAT128_KEYWORD,\n+\tMASK_FLOAT128_HW, MASK_FPRND, MASK_P8_FUSION, MASK_HARD_FLOAT,\n+\tMASK_HTM, MASK_ISEL, MASK_MFCRF, MASK_MMA, MASK_MULHW,\n+\tMASK_MULTIPLE, MASK_NO_UPDATE): Delete.\n+\t* config/rs6000/vxworks.h (TARGET_DEFAULT): Replace MASK_EABI\n+\twith OPTION_MASK_EABI.\n+\n+2022-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.cc (RS6000_BTM_ALTIVEC, RS6000_BTM_CMPB,\n+\tRS6000_BTM_VSX, RS6000_BTM_FRE, RS6000_BTM_P8_VECTOR,\n+\tRS6000_BTM_P9_VECTOR, RS6000_BTM_P9_MISC, RS6000_BTM_MODULO,\n+\tRS6000_BTM_CRYPTO, RS6000_BTM_HTM): Replace with OPTION_MASK_ALTIVEC,\n+\tOPTION_MASK_CMPB, OPTION_MASK_VSX, OPTION_MASK_POPCNTB,\n+\tOPTION_MASK_P8_VECTOR, OPTION_MASK_P9_VECTOR, OPTION_MASK_P9_MISC,\n+\tOPTION_MASK_MODULO, OPTION_MASK_CRYPTO, OPTION_MASK_HTM.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_MODULO, RS6000_BTM_ALTIVEC,\n+\tRS6000_BTM_CMPB, RS6000_BTM_VSX, RS6000_BTM_P8_VECTOR,\n+\tRS6000_BTM_P9_VECTOR, RS6000_BTM_P9_MISC, RS6000_BTM_CRYPTO,\n+\tRS6000_BTM_HTM, RS6000_BTM_FRE): Remove.\n+\n+2022-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.cc: Update comments.\n+\t* config/rs6000/rs6000.cc (RS6000_BTM_FRES, RS6000_BTM_FRSQRTE,\n+\tRS6000_BTM_FRSQRTES, RS6000_BTM_POPCNTD, RS6000_BTM_CELL,\n+\tRS6000_BTM_64BIT, RS6000_BTM_POWERPC64, RS6000_BTM_DFP,\n+\tRS6000_BTM_HARD_FLOAT,RS6000_BTM_LDBL128, RS6000_BTM_FLOAT128,\n+\tRS6000_BTM_FLOAT128_HW, RS6000_BTM_MMA, RS6000_BTM_P10): Replace\n+\twith OPTION_MASK_PPC_GFXOPT, OPTION_MASK_PPC_GFXOPT,\n+\tOPTION_MASK_POPCNTB, OPTION_MASK_POPCNTD,\n+\tOPTION_MASK_FPRND, MASK_64BIT, MASK_POWERPC64,\n+\tOPTION_MASK_DFP, OPTION_MASK_SOFT_FLOAT, OPTION_MASK_MULTIPLE,\n+\tOPTION_MASK_FLOAT128_KEYWORD, OPTION_MASK_FLOAT128_HW,\n+\tOPTION_MASK_MMA, OPTION_MASK_POWER10.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_FRES, RS6000_BTM_FRSQRTE,\n+\tRS6000_BTM_FRSQRTES, RS6000_BTM_POPCNTD, RS6000_BTM_CELL,\n+\tRS6000_BTM_DFP, RS6000_BTM_HARD_FLOAT, RS6000_BTM_LDBL128,\n+\tRS6000_BTM_64BIT, RS6000_BTM_POWERPC64, RS6000_BTM_FLOAT128,\n+\tRS6000_BTM_FLOAT128_HW, RS6000_BTM_MMA, RS6000_BTM_P10): Delete.\n+\n+2022-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.h (RS6000_BTM_COMMON, RS6000_BTM_ALWAYS,\n+\tMASK_REGNAMES, OPTION_MASK_REGNAMES, MASK_PROTOTYPE,\n+\tOPTION_MASK_PROTOTYPE, MASK_UPDATE, OPTION_MASK_UPDATE): Remove.\n+\n+2022-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106070\n+\t* match.pd (a != b ? a : b): Fix translation of\n+\toperand_equal_for_comparison_p.\n+\n+2022-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/106057\n+\t* tree-ssa-alias.cc (stmt_kills_ref_p): Check for external throw.\n+\n+2022-06-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/106059\n+\t* profile-count.h: *= and /= operators need to modify this\n+\tobject.\n+\n+2022-06-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/105930\n+\t* config/i386/i386.md (*<any_or>di3_doubleword): Split after\n+\treload.  Use rtx_equal_p to avoid creating memory-to-memory moves,\n+\tand emit NOTE_INSN_DELETED if operand[2] is zero (i.e. with -O0).\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* common.opt (nostdlib++): New.\n+\t* doc/invoke.texi (-nostdlib++): Document it.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/sourcebuild.texi (Environment attributes): Document\n+\ttwo_plus_gigs.\n+\n 2022-06-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* common.opt (fdiagnostics-show-rules): New option."}, {"sha": "e66783e036744024affdd3ad5863644bb23391fb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1 +1 @@\n-20220624\n+20220625"}, {"sha": "bf58d575e4dcd6f5589f6ee1c653d6b916060502", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,126 @@\n+2022-06-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-string.cc: Add includes of \"analyzer/analyzer.h\"\n+\tand \"analyzer/analyzer-logging.h\".\n+\t(call_string::call_string): Delete copy ctor.\n+\t(call_string::operator=): Delete.\n+\t(call_string::operator==): Delete.\n+\t(call_string::hash): Delete.\n+\t(call_string::push_call): Make const, returning the resulting\n+\tcall_string.\n+\t(call_string::pop): Delete.\n+\t(call_string::cmp_ptr_ptr): New.\n+\t(call_string::validate): Assert that m_parent is non-NULL, or\n+\tm_elements is empty.\n+\t(call_string::call_string): Move default ctor here from\n+\tcall-string.h and reimplement.  Add ctor taking a parent\n+\tand an element.\n+\t(call_string::~call_string): New.\n+\t(call_string::recursive_log): New.\n+\t* call-string.h (call_string::call_string): Move default ctor's\n+\tdefn to call-string.cc.  Delete copy ctor.  Add ctor taking a\n+\tparent and an element.\n+\t(call_string::operator=): Delete.\n+\t(call_string::operator==): Delete.\n+\t(call_string::hash): Delete.\n+\t(call_string::push_call): Make const, returning the resulting\n+\tcall_string.\n+\t(call_string::pop): Delete decl.\n+\t(call_string::get_parent): New.\n+\t(call_string::cmp_ptr_ptr): New decl.\n+\t(call_string::get_top_of_stack): New.\n+\t(struct call_string::hashmap_traits_t): New.\n+\t(class call_string): Add friend class region_model_manager.  Add\n+\tDISABLE_COPY_AND_ASSIGN.\n+\t(call_string::~call_string): New decl.\n+\t(call_string::recursive_log): New decl.\n+\t(call_string::m_parent): New field.\n+\t(call_string::m_children): New field.\n+\t* constraint-manager.cc (selftest::test_many_constants): Pass\n+\tmodel manager to program_point::origin.\n+\t* engine.cc (exploded_graph::exploded_graph): Likewise.\n+\t(exploded_graph::add_function_entry): Likewise for\n+\tprogram_point::from_function_entry.\n+\t(add_tainted_args_callback): Likewise.\n+\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n+\tUpdate for change to program_point.get_call_string.\n+\t(exploded_graph::process_node): Likewise.\n+\t(class function_call_string_cluster): Convert m_cs from a\n+\tcall_string to a const call_string &.\n+\t(struct function_call_string): Likewise.\n+\t(pod_hash_traits<function_call_string>::hash): Use pointer_hash\n+\tfor m_cs.\n+\t(pod_hash_traits<function_call_string>::equal): Update for change\n+\tto m_cs.\n+\t(root_cluster::add_node): Update for change to\n+\tfunction_call_string.\n+\t(viz_callgraph_node::dump_dot): Update for change to call_string.\n+\t* exploded-graph.h (per_call_string_data::m_key): Convert to a\n+\treference.\n+\t(struct eg_call_string_hash_map_traits): Delete.\n+\t(exploded_graph::call_string_data_map_t): Remove traits class.\n+\t* program-point.cc: Move include of \"analyzer/call-string.h\" to\n+\tafter \"analyzer/analyzer-logging.h\".\n+\t(program_point::print): Update for conversion of m_call_string to\n+\ta pointer.\n+\t(program_point::to_json): Likewise.\n+\t(program_point::push_to_call_stack): Update for immutability of\n+\tcall strings.\n+\t(program_point::pop_from_call_stack): Likewise.\n+\t(program_point::hash): Use pointer hashing for m_call_string.\n+\t(program_point::get_function_at_depth): Update for change to\n+\tm_call_string.\n+\t(program_point::validate): Update for changes to call_string.\n+\t(program_point::on_edge): Likewise.\n+\t(program_point::origin): Move here from call-string.h.  Add\n+\tregion_model_manager param and use it to get empty call string.\n+\t(program_point::from_function_entry): Likewise.\n+\t(selftest::test_function_point_ordering): Likewise.\n+\t(selftest::test_function_point_ordering): Likewise.\n+\t* program-point.h (program_point::program_point): Update for\n+\tchange to m_call_string.\n+\t(program_point::get_call_string): Likewise.\n+\t(program_point::get_stack_depth): Likewise.\n+\t(program_point::origin): Add region_model_manager param, and move\n+\tdefn to call-string.cc.\n+\t(program_point::from_function_entry): Likewise.\n+\t(program_point::empty): Drop call_string.\n+\t(program_point::deleted): Likewise.\n+\t(program_point::program_point): New private ctor.\n+\t(program_point::m_call_string): Convert from call_string to const\n+\tcall_string *.\n+\t* program-state.cc (selftest::test_program_state_merging): Update\n+\tfor call_string changes.\n+\t(selftest::test_program_state_merging_2): Likewise.\n+\t* region-model-manager.cc\n+\t(region_model_manager::region_model_manager): Construct\n+\tm_empty_call_string.\n+\t(region_model_manager::log_stats): Log the call strings.\n+\t* region-model.cc (assert_region_models_merge): Pass the\n+\tregion_model_manager when creating program_point instances.\n+\t(selftest::test_state_merging): Likewise.\n+\t(selftest::test_constraint_merging): Likewise.\n+\t(selftest::test_widening_constraints): Likewise.\n+\t(selftest::test_iteration_1): Likewise.\n+\t* region-model.h (region_model_manager::get_empty_call_string):\n+\tNew.\n+\t(region_model_manager::m_empty_call_string): New.\n+\t* sm-signal.cc (register_signal_handler::impl_transition): Update\n+\tfor changes to call_string.\n+\n+2022-06-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-string.cc (call_string::calc_recursion_depth): Whitespace\n+\tcleanups.\n+\t(call_string::cmp): Likewise.\n+\t(call_string::get_caller_node): Likewise.\n+\t(call_string::validate): Likewise.\n+\t* engine.cc (dynamic_call_info_t::add_events_to_path): Likewise.\n+\t(exploded_graph::get_per_function_data): Likewise.\n+\t(exploded_graph::maybe_create_dynamic_call): Likewise.\n+\t(exploded_graph::maybe_create_dynamic_call): Likewise.\n+\t(exploded_graph::process_node): Likewise.\n+\n 2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* varargs.cc (va_arg_type_mismatch::emit): Associate the warning"}, {"sha": "8a22e7e92694be656a7065e2e1fa4d8ea75ed559", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,9 @@\n+2022-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\tPR c++/20423\n+\t* c.opt (Woverloaded-virtual): Add levels, include in -Wall.\n+\n 2022-06-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ubsan.cc (ubsan_instrument_division, ubsan_instrument_shift):"}, {"sha": "a50f5eb047c55bd033b040ac45eb83a83ba1d38b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,13 @@\n+2022-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\tPR c++/20423\n+\t* class.cc (warn_hidden): Handle -Woverloaded-virtual=1.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* g++spec.cc (lang_specific_driver): Implement -nostdlib++.\n+\n 2022-06-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105925"}, {"sha": "cea195e8925f3f06a838b1d0d8ef8876da8bfb07", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,43 @@\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_handle_section_attribute): Update error message.\n+\t(d_handle_symver_attribute): Likewise.\n+\t(d_handle_no_sanitize_attribute): Likewise.\n+\t(d_handle_visibility_attribute): Likewise.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105413\n+\t* d-attribs.cc (d_handle_register_attribute): New function.\n+\t(d_langhook_attribute_table): Add register attribute.\n+\t* d-codegen.cc (d_mark_addressable): Error if taken address of\n+\tregister variable.\n+\t(build_frame_type): Error if register variable has non-local\n+\treferences.\n+\t* d-tree.h (d_mark_addressable): Add complain parameter.\n+\t* decl.cc (get_symbol_decl): Mark register varibles DECL_REGISTER.\n+\tError when register variable declared thread-local or extern.\n+\t* expr.cc (ExprVisitor::visit (IndexExp *)): Don't complain about\n+\tmarking register vectors as addressable in an ARRAY_REF.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_array_index): Rename to...\n+\t(build_pointer_index): ...this.\n+\t* d-tree.h (build_array_index): Rename declaration to...\n+\t(build_pointer_index): ...this.\n+\t* expr.cc (ExprVisitor::visit (IndexExp *)): Construct indexes of\n+\tARRAY_TYPE using ARRAY_REF.\n+\t(ExprVisitor::visit (SliceExp *)): Update.\n+\t* intrinsics.cc (expand_intrinsic_bt): Update.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 529110f66.\n+\t* decl.cc (DeclVisitor::visit (TupleDeclaration *)): Update for new\n+\tfront-end interface.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\n 2022-06-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 6203135dc."}, {"sha": "f89e0882e0a45d9efee53c26a4cb2a44505f18dc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,10 @@\n+2022-06-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105813\n+\t* check.cc (gfc_check_unpack): Try to simplify MASK argument to\n+\tUNPACK so that checking of the VECTOR argument can work when MASK\n+\tis a variable.\n+\n 2022-06-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/105986"}, {"sha": "105a540d84e6382fced23d3aa8b88bce6e4d5442", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,66 @@\n+2022-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\tPR c++/20423\n+\t* g++.dg/warn/Woverloaded-virt1.C: New test.\n+\t* g++.dg/warn/Woverloaded-virt2.C: New test.\n+\n+2022-06-24  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/debug/btf/btf-bitfields-1.c: Skip if int is less than\n+\t32-bits.\n+\n+2022-06-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105813\n+\t* gfortran.dg/unpack_vector_1.f90: New test.\n+\n+2022-06-24  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/builtin-object-size-20.c: Remove cases which\n+\twork on default_packed targets.\n+\t* gcc.dg/builtin-object-size-22.c: New test with the cases\n+\tremoved above.\n+\n+2022-06-24  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/sso/memcpy-1.c (__big_endian__, __little_endian__):\n+\tRename macros to avoid conflicts with predefined ones.\n+\n+2022-06-24  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\tPR tree-optimization/101868\n+\t* gcc.dg/lto/pr101868_0.c (zero): New volatile variable.\n+\t(main): Use it instead of argc.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/attr_section1.d: Update dg-error.\n+\t* gdc.dg/attr_visibility1.d: Likewise.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105413\n+\t* gdc.dg/attr_register1.d: New test.\n+\t* gdc.dg/attr_register2.d: New test.\n+\t* gdc.dg/attr_register3.d: New test.\n+\n+2022-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106070\n+\t* gcc.dg/torture/pr106070.c: New testcase.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* g++.dg/abi/pure-virtual1.C: Use -nostdlib++.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_two_plus_gigs): New.\n+\t* gcc.target/aarch64/symbol-range.c: Link only on\n+\ttwo_plus_gigs targets, compile otherwise.\n+\n 2022-06-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105925"}, {"sha": "8361a334ee62d43844474e249e808a7644c7d232", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,12 @@\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105413\n+\t* libdruntime/gcc/attributes.d (register): Define.\n+\n+2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 148608b7.\n+\n 2022-06-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime e150cca1."}, {"sha": "f153c81d61555673141d9ff338b2b593ca9fe1f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c2131d2c596ddf90500b3f0ad4aa43abe650f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84c2131d2c596ddf90500b3f0ad4aa43abe650f2", "patch": "@@ -1,3 +1,121 @@\n+2022-06-24  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* scripts/extract_symvers.in: Use grep -E instead of egrep.\n+\t* scripts/run_doxygen: Likewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for\n+\topenat.\n+\t* configure, config.h.in: Rebuilt.\n+\t* src/filesystem/dir-common.h (openat): Use ::openat if\n+\t_GLIBCXX_HAVE_OPENAT.\n+\t* src/filesystem/dir.cc (dir_and_pathname): Use dirfd if\n+\t_GLIBCXX_HAVE_OPENAT.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/27_io/filesystem/operations/rename.cc: xfail on\n+\trtems.\n+\t* testsuite/experimental/filesystem/operations/rename.cc:\n+\tLikewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/util/testsuite_fs.h (NO_LAST_WRITE_TIME): Define\n+\twhen appropriate.\n+\t* testsuite/lib/libstdc++.exp\n+\t(check_v3_target_fs_last_write_time): New.\n+\t* testsuite/lib/dg-options.exp (dg-require-target-fs-lwt):\n+\tNew.\n+\t* testsuite/27_io/filesystem/operations/last_write_time.cc:\n+\tSkip the test if the features are unavailable.\n+\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n+\tLikewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/util/testsuite_fs.h (NO_SPACE): Define if\n+\tappropriate.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_fs_space): New.\n+\t* testsuite/lib/dg-options.exp (dg-require-target-fs-space):\n+\tNew.\n+\t* testsuite/27_io/filesystem/operations/space.cc: Require\n+\ttarget-fs-space.\n+\t* testsuite/experimental/filesystem/operations/space.cc:\n+\tLikewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/util/testsuite_fs.h (NO_SYMLINKS): Define on\n+\tmingw and when create_symlink is a dummy.\n+\t* testsuite/27_io/filesystem/operations/symlink_status.cc:\n+\tDrop mingw xfail.\n+\t(test01, test02): Don't create symlinks when NO_SYMLINKS is\n+\tdefined.\n+\t* testsuite/27_io/filesystem/operations/canonical.cc (test03):\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/copy.cc (test02):\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/create_directories.cc\n+\t(test04): Likewise.\n+\t* testsuite/27_io/filesystem/operations/create_directory.cc\n+\t(test01): Likewise.\n+\t* testsuite/27_io/filesystem/operations/permissions.cc\n+\t(test03, test04): Likewise.\n+\t* testsuite/27_io/filesystem/operations/remove.cc (test01):\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc (test01):\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/rename.cc\n+\t(test_symlinks): Likewise.\n+\t* testsuite/27_io/filesystem/operations/weakly_canonical.cc\n+\t(test01): Likewise.\n+\t* testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc\n+\t(test06): Likewise.\n+\t* testsuite/experimental/filesystem/operations/copy.cc\n+\t(test01): Likewise.\n+\t* testsuite/experimental/filesystem/operations/create_directories.cc\n+\t(test04): Likewise.\n+\t* testsuite/experimental/filesystem/operations/create_directory.cc\n+\t(test01): Likewise.\n+\t* testsuite/experimental/filesystem/operations/permissions.cc\n+\t(test03, test04): Likewise.\n+\t* testsuite/experimental/filesystem/operations/remove.cc\n+\t(test01): Likewise.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc\n+\t(test01): Likewise.\n+\t* testsuite/experimental/filesystem/operations/rename.cc\n+\t(test01): Likewise.\n+\t* testsuite/lib/libstdc++.exp\n+\t(v3_check_preprocessor_condition): Add optional inc parameter.\n+\tAdd it to the test program after include bits/c++config.h.\n+\t(check_v3_target_fs_symlinks): New.\n+\t* testsuite/lib/dg-options.exp\n+\t(dg-require-target-fs-symlinks): New.\n+\t* testsuite/27_io/filesystem/operations/read_symlink.cc:\n+\tReplace mingw xfail with require target-fs-symlinks.\n+\t* testsuite/experimental/filesystem/operations/read_symlink.cc:\n+\tLikewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/27_io/filesystem/operations/copy.cc (test02):\n+\tSelect TO after creating FROM.\n+\t(test03, test04): Likewise.\n+\t* testsuite/experimental/filesystem/operations/copy.cc\n+\t(test02, test03, test04): Likewise.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/30_threads/thread/native_handle/cancel.cc: Add an\n+\texplicit cancellation point in case sleep_for lacks one.\n+\n+2022-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/lib/dg-options.exp (add_options_for_net_ts): Add\n+\t-lbsd for RTEMS targets.\n+\n 2022-06-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/27_io/filesystem/iterators/error_reporting.cc: Use"}]}