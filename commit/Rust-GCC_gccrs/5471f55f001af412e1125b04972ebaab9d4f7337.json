{"sha": "5471f55f001af412e1125b04972ebaab9d4f7337", "node_id": "C_kwDOANBUbNoAKDU0NzFmNTVmMDAxYWY0MTJlMTEyNWIwNDk3MmViYWFiOWQ0ZjczMzc", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-08-08T13:37:42Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-08-08T13:37:42Z"}, "message": "AArch32: Fix 128-bit sequential consistency atomic operations.\n\nSimilar to AArch64 the Arm implementation of 128-bit atomics is broken.\n\nFor 128-bit atomics we rely on pthread barriers to correct guard the address\nin the pointer to get correct memory ordering.  However for 128-bit atomics the\naddress under the lock is different from the original pointer.\n\nThis means that one of the values under the atomic operation is not protected\nproperly and so we fail during when the user has requested sequential\nconsistency as there's no barrier to enforce this requirement.\n\nAs such users have resorted to adding an\n\n#ifdef GCC\n<emit barrier>\n#endif\n\naround the use of these atomics.\n\nThis corrects the issue by issuing a barrier only when __ATOMIC_SEQ_CST was\nrequested.  I have hand verified that the barriers are inserted\nfor atomic seq cst.\n\nlibatomic/ChangeLog:\n\n\tPR target/102218\n\t* config/arm/host-config.h (pre_seq_barrier, post_seq_barrier,\n\tpre_post_seq_barrier): Require barrier on __ATOMIC_SEQ_CST.", "tree": {"sha": "d9e8fe8daf896f3984fda1914d521d51aa7fbfff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9e8fe8daf896f3984fda1914d521d51aa7fbfff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5471f55f001af412e1125b04972ebaab9d4f7337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5471f55f001af412e1125b04972ebaab9d4f7337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5471f55f001af412e1125b04972ebaab9d4f7337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5471f55f001af412e1125b04972ebaab9d4f7337/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a8ae900b4141bbce1451da8f173d441662782d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a8ae900b4141bbce1451da8f173d441662782d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a8ae900b4141bbce1451da8f173d441662782d"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "ef16fad2a35ec9055e918849e69a1a0e23b62838", "filename": "libatomic/config/arm/host-config.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5471f55f001af412e1125b04972ebaab9d4f7337/libatomic%2Fconfig%2Farm%2Fhost-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5471f55f001af412e1125b04972ebaab9d4f7337/libatomic%2Fconfig%2Farm%2Fhost-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Farm%2Fhost-config.h?ref=5471f55f001af412e1125b04972ebaab9d4f7337", "patch": "@@ -1,4 +1,23 @@\n /* Avoiding the DMB (or kernel helper) can be a good thing.  */\n #define WANT_SPECIALCASE_RELAXED\n \n+/* Glibc, at least, uses acq_rel in its pthread mutex\n+   implementation.  If the user is asking for seq_cst,\n+   this is insufficient.  */\n+\n+static inline void __attribute__((always_inline, artificial))\n+pre_seq_barrier(int model)\n+{\n+  if (model == __ATOMIC_SEQ_CST)\n+    __atomic_thread_fence (__ATOMIC_SEQ_CST);\n+}\n+\n+static inline void __attribute__((always_inline, artificial))\n+post_seq_barrier(int model)\n+{\n+  pre_seq_barrier(model);\n+}\n+\n+#define pre_post_seq_barrier 1\n+\n #include_next <host-config.h>"}]}