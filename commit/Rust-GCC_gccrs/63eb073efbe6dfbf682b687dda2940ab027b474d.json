{"sha": "63eb073efbe6dfbf682b687dda2940ab027b474d", "node_id": "C_kwDOANBUbNoAKDYzZWIwNzNlZmJlNmRmYmY2ODJiNjg3ZGRhMjk0MGFiMDI3YjQ3NGQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-22T11:16:47Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-22T11:17:25Z"}, "message": "docs: docs: use ';' for function declarations. (part 3)\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Unify all function declarations in examples\n\twhere some miss trailing ';'.", "tree": {"sha": "39461891ccf550b5f942199c55fa416d59c3cb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39461891ccf550b5f942199c55fa416d59c3cb05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63eb073efbe6dfbf682b687dda2940ab027b474d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eb073efbe6dfbf682b687dda2940ab027b474d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eb073efbe6dfbf682b687dda2940ab027b474d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eb073efbe6dfbf682b687dda2940ab027b474d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3892cfee77ebe949ff640d9759a4b5cead67e3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3892cfee77ebe949ff640d9759a4b5cead67e3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3892cfee77ebe949ff640d9759a4b5cead67e3a8"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "1f6af5d773e535d3b1811ecbeef7c9fa9aa9b3b6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb073efbe6dfbf682b687dda2940ab027b474d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb073efbe6dfbf682b687dda2940ab027b474d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=63eb073efbe6dfbf682b687dda2940ab027b474d", "patch": "@@ -14682,7 +14682,7 @@ void __builtin_stbio (volatile void *, int);\n void __builtin_sthio (volatile void *, int);\n void __builtin_stwio (volatile void *, int);\n void __builtin_sync (void);\n-int __builtin_rdctl (int) \n+int __builtin_rdctl (int);\n int __builtin_rdprs (int, int);\n void __builtin_wrctl (int, int);\n void __builtin_flushd (volatile void *);\n@@ -15478,28 +15478,28 @@ output values to non-contiguous port layouts. Some examples:\n \n @smallexample\n // same as val, bits is unused\n-__builtin_avr_insert_bits (0xffffffff, bits, val)\n+__builtin_avr_insert_bits (0xffffffff, bits, val);\n @end smallexample\n \n @smallexample\n // same as bits, val is unused\n-__builtin_avr_insert_bits (0x76543210, bits, val)\n+__builtin_avr_insert_bits (0x76543210, bits, val);\n @end smallexample\n \n @smallexample\n // same as rotating bits by 4\n-__builtin_avr_insert_bits (0x32107654, bits, 0)\n+__builtin_avr_insert_bits (0x32107654, bits, 0);\n @end smallexample\n \n @smallexample\n // high nibble of result is the high nibble of val\n // low nibble of result is the low nibble of bits\n-__builtin_avr_insert_bits (0xffff3210, bits, val)\n+__builtin_avr_insert_bits (0xffff3210, bits, val);\n @end smallexample\n \n @smallexample\n // reverse the bit order of bits\n-__builtin_avr_insert_bits (0x01234567, bits, 0)\n+__builtin_avr_insert_bits (0x01234567, bits, 0);\n @end smallexample\n \n @item void __builtin_avr_nops (unsigned count)\n@@ -19751,33 +19751,33 @@ PowerPC family of processors, starting with ISA 3.1 (@option{-mcpu=power10}):\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_cfuge (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_cfuge (vector unsigned long long int, vector unsigned long long int);\n @end smallexample\n Perform a vector centrifuge operation, as if implemented by the\n @code{vcfuged} instruction.\n @findex vec_cfuge\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_cntlzm (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_cntlzm (vector unsigned long long int, vector unsigned long long int);\n @end smallexample\n Perform a vector count leading zeros under bit mask operation, as if\n implemented by the @code{vclzdm} instruction.\n @findex vec_cntlzm\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_cnttzm (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_cnttzm (vector unsigned long long int, vector unsigned long long int);\n @end smallexample\n Perform a vector count trailing zeros under bit mask operation, as if\n implemented by the @code{vctzdm} instruction.\n @findex vec_cnttzm\n \n @smallexample\n @exdent vector signed char\n-@exdent vec_clrl (vector signed char a, unsigned int n)\n+@exdent vec_clrl (vector signed char a, unsigned int n);\n @exdent vector unsigned char\n-@exdent vec_clrl (vector unsigned char a, unsigned int n)\n+@exdent vec_clrl (vector unsigned char a, unsigned int n);\n @end smallexample\n Clear the left-most @code{(16 - n)} bytes of vector argument @code{a}, as if\n implemented by the @code{vclrlb} instruction on a big-endian target\n@@ -19787,9 +19787,9 @@ value of @code{n} that is greater than 16 is treated as if it equaled 16.\n \n @smallexample\n @exdent vector signed char\n-@exdent vec_clrr (vector signed char a, unsigned int n)\n+@exdent vec_clrr (vector signed char a, unsigned int n);\n @exdent vector unsigned char\n-@exdent vec_clrr (vector unsigned char a, unsigned int n)\n+@exdent vec_clrr (vector unsigned char a, unsigned int n);\n @end smallexample\n Clear the right-most @code{(16 - n)} bytes of vector argument @code{a}, as if\n implemented by the @code{vclrrb} instruction on a big-endian target\n@@ -19799,7 +19799,7 @@ value of @code{n} that is greater than 16 is treated as if it equaled 16.\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_gnb (vector unsigned __int128, const unsigned char)\n+@exdent vec_gnb (vector unsigned __int128, const unsigned char);\n @end smallexample\n Perform a 128-bit vector gather  operation, as if implemented by the\n @code{vgnb} instruction.  The second argument must be a literal\n@@ -19811,13 +19811,13 @@ Vector Extract\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_extractl (vector unsigned char, vector unsigned char, unsigned int)\n+@exdent vec_extractl (vector unsigned char, vector unsigned char, unsigned int);\n @exdent vector unsigned long long int\n-@exdent vec_extractl (vector unsigned short, vector unsigned short, unsigned int)\n+@exdent vec_extractl (vector unsigned short, vector unsigned short, unsigned int);\n @exdent vector unsigned long long int\n-@exdent vec_extractl (vector unsigned int, vector unsigned int, unsigned int)\n+@exdent vec_extractl (vector unsigned int, vector unsigned int, unsigned int);\n @exdent vector unsigned long long int\n-@exdent vec_extractl (vector unsigned long long, vector unsigned long long, unsigned int)\n+@exdent vec_extractl (vector unsigned long long, vector unsigned long long, unsigned int);\n @end smallexample\n Extract an element from two concatenated vectors starting at the given byte index\n in natural-endian order, and place it zero-extended in doubleword 1 of the result\n@@ -19838,15 +19838,15 @@ consistent with the limitation on @code{vec_perm}.\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_extracth (vector unsigned char, vector unsigned char, unsigned int)\n+@exdent vec_extracth (vector unsigned char, vector unsigned char, unsigned int);\n @exdent vector unsigned long long int\n @exdent vec_extracth (vector unsigned short, vector unsigned short,\n-unsigned int)\n+unsigned int);\n @exdent vector unsigned long long int\n-@exdent vec_extracth (vector unsigned int, vector unsigned int, unsigned int)\n+@exdent vec_extracth (vector unsigned int, vector unsigned int, unsigned int);\n @exdent vector unsigned long long int\n @exdent vec_extracth (vector unsigned long long, vector unsigned long long,\n-unsigned int)\n+unsigned int);\n @end smallexample\n Extract an element from two concatenated vectors starting at the given byte\n index.  The index is based on big endian order for a little endian system.\n@@ -19869,7 +19869,7 @@ limitation on @code{vec_perm}.\n @findex vec_extracth\n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_pdep (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_pdep (vector unsigned long long int, vector unsigned long long int);\n @end smallexample\n Perform a vector parallel bits deposit operation, as if implemented by\n the @code{vpdepd} instruction.\n@@ -20147,17 +20147,17 @@ contained in the first two arguments.\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_pext (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_pext (vector unsigned long long int, vector unsigned long long int);\n @end smallexample\n Perform a vector parallel bit extract operation, as if implemented by\n the @code{vpextd} instruction.\n @findex vec_pext\n \n @smallexample\n-@exdent vector unsigned char vec_stril (vector unsigned char)\n-@exdent vector signed char vec_stril (vector signed char)\n-@exdent vector unsigned short vec_stril (vector unsigned short)\n-@exdent vector signed short vec_stril (vector signed short)\n+@exdent vector unsigned char vec_stril (vector unsigned char);\n+@exdent vector signed char vec_stril (vector signed char);\n+@exdent vector unsigned short vec_stril (vector unsigned short);\n+@exdent vector signed short vec_stril (vector signed short);\n @end smallexample\n Isolate the left-most non-zero elements of the incoming vector argument,\n replacing all elements to the right of the left-most zero element\n@@ -20168,10 +20168,10 @@ little-endian targets.\n @findex vec_stril\n \n @smallexample\n-@exdent int vec_stril_p (vector unsigned char)\n-@exdent int vec_stril_p (vector signed char)\n-@exdent int short vec_stril_p (vector unsigned short)\n-@exdent int vec_stril_p (vector signed short)\n+@exdent int vec_stril_p (vector unsigned char);\n+@exdent int vec_stril_p (vector signed char);\n+@exdent int short vec_stril_p (vector unsigned short);\n+@exdent int vec_stril_p (vector signed short);\n @end smallexample\n Return a non-zero value if and only if the argument contains a zero\n element.  The typical implementation uses\n@@ -20182,10 +20182,10 @@ zero element if the same argument is also passed to @code{vec_stril}.\n @findex vec_stril_p\n \n @smallexample\n-@exdent vector unsigned char vec_strir (vector unsigned char)\n-@exdent vector signed char vec_strir (vector signed char)\n-@exdent vector unsigned short vec_strir (vector unsigned short)\n-@exdent vector signed short vec_strir (vector signed short)\n+@exdent vector unsigned char vec_strir (vector unsigned char);\n+@exdent vector signed char vec_strir (vector signed char);\n+@exdent vector unsigned short vec_strir (vector unsigned short);\n+@exdent vector signed short vec_strir (vector signed short);\n @end smallexample\n Isolate the right-most non-zero elements of the incoming vector argument,\n replacing all elements to the left of the right-most zero element\n@@ -20196,10 +20196,10 @@ little-endian targets.\n @findex vec_strir\n \n @smallexample\n-@exdent int vec_strir_p (vector unsigned char)\n-@exdent int vec_strir_p (vector signed char)\n-@exdent int short vec_strir_p (vector unsigned short)\n-@exdent int vec_strir_p (vector signed short)\n+@exdent int vec_strir_p (vector unsigned char);\n+@exdent int vec_strir_p (vector signed char);\n+@exdent int short vec_strir_p (vector unsigned short);\n+@exdent int vec_strir_p (vector signed short);\n @end smallexample\n Return a non-zero value if and only if the argument contains a zero\n element.  The typical implementation uses\n@@ -20212,40 +20212,40 @@ zero element if the same argument is also passed to @code{vec_strir}.\n @smallexample\n @exdent vector unsigned char\n @exdent vec_ternarylogic (vector unsigned char, vector unsigned char,\n-            vector unsigned char, const unsigned int)\n+            vector unsigned char, const unsigned int);\n @exdent vector unsigned short\n @exdent vec_ternarylogic (vector unsigned short, vector unsigned short,\n-            vector unsigned short, const unsigned int)\n+            vector unsigned short, const unsigned int);\n @exdent vector unsigned int\n @exdent vec_ternarylogic (vector unsigned int, vector unsigned int,\n-            vector unsigned int, const unsigned int)\n+            vector unsigned int, const unsigned int);\n @exdent vector unsigned long long int\n @exdent vec_ternarylogic (vector unsigned long long int, vector unsigned long long int,\n-            vector unsigned long long int, const unsigned int)\n+            vector unsigned long long int, const unsigned int);\n @exdent vector unsigned __int128\n @exdent vec_ternarylogic (vector unsigned __int128, vector unsigned __int128,\n-            vector unsigned __int128, const unsigned int)\n+            vector unsigned __int128, const unsigned int);\n @end smallexample\n Perform a 128-bit vector evaluate operation, as if implemented by the\n @code{xxeval} instruction.  The fourth argument must be a literal\n integer value between 0 and 255 inclusive.\n @findex vec_ternarylogic\n \n @smallexample\n-@exdent vector unsigned char vec_genpcvm (vector unsigned char, const int)\n-@exdent vector unsigned short vec_genpcvm (vector unsigned short, const int)\n-@exdent vector unsigned int vec_genpcvm (vector unsigned int, const int)\n+@exdent vector unsigned char vec_genpcvm (vector unsigned char, const int);\n+@exdent vector unsigned short vec_genpcvm (vector unsigned short, const int);\n+@exdent vector unsigned int vec_genpcvm (vector unsigned int, const int);\n @exdent vector unsigned int vec_genpcvm (vector unsigned long long int,\n-                                         const int)\n+                                         const int);\n @end smallexample\n \n Vector Integer Multiply/Divide/Modulo\n \n @smallexample\n @exdent vector signed int\n-@exdent vec_mulh (vector signed int a, vector signed int b)\n+@exdent vec_mulh (vector signed int a, vector signed int b);\n @exdent vector unsigned int\n-@exdent vec_mulh (vector unsigned int a, vector unsigned int b)\n+@exdent vec_mulh (vector unsigned int a, vector unsigned int b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 3, do the following. The integer\n@@ -20255,9 +20255,9 @@ into word element @code{i} of the vector returned.\n \n @smallexample\n @exdent vector signed long long\n-@exdent vec_mulh (vector signed long long a, vector signed long long b)\n+@exdent vec_mulh (vector signed long long a, vector signed long long b);\n @exdent vector unsigned long long\n-@exdent vec_mulh (vector unsigned long long a, vector unsigned long long b)\n+@exdent vec_mulh (vector unsigned long long a, vector unsigned long long b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 1, do the following. The integer\n@@ -20267,9 +20267,9 @@ are placed into doubleword element @code{i} of the vector returned.\n \n @smallexample\n @exdent vector unsigned long long\n-@exdent vec_mul (vector unsigned long long a, vector unsigned long long b)\n+@exdent vec_mul (vector unsigned long long a, vector unsigned long long b);\n @exdent vector signed long long\n-@exdent vec_mul (vector signed long long a, vector signed long long b)\n+@exdent vec_mul (vector signed long long a, vector signed long long b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 1, do the following. The integer\n@@ -20279,9 +20279,9 @@ are placed into doubleword element @code{i} of the vector returned.\n \n @smallexample\n @exdent vector signed int\n-@exdent vec_div (vector signed int a, vector signed int b)\n+@exdent vec_div (vector signed int a, vector signed int b);\n @exdent vector unsigned int\n-@exdent vec_div (vector unsigned int a, vector unsigned int b)\n+@exdent vec_div (vector unsigned int a, vector unsigned int b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 3, do the following. The integer in\n@@ -20292,9 +20292,9 @@ the vector returned. If an attempt is made to perform any of the divisions\n \n @smallexample\n @exdent vector signed long long\n-@exdent vec_div (vector signed long long a, vector signed long long b)\n+@exdent vec_div (vector signed long long a, vector signed long long b);\n @exdent vector unsigned long long\n-@exdent vec_div (vector unsigned long long a, vector unsigned long long b)\n+@exdent vec_div (vector unsigned long long a, vector unsigned long long b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 1, do the following. The integer in\n@@ -20306,9 +20306,9 @@ the quotient is undefined.\n \n @smallexample\n @exdent vector signed int\n-@exdent vec_dive (vector signed int a, vector signed int b)\n+@exdent vec_dive (vector signed int a, vector signed int b);\n @exdent vector unsigned int\n-@exdent vec_dive (vector unsigned int a, vector unsigned int b)\n+@exdent vec_dive (vector unsigned int a, vector unsigned int b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 3, do the following. The integer in\n@@ -20320,9 +20320,9 @@ divisions <anything> \u00f7 0 then the quotient is undefined.\n \n @smallexample\n @exdent vector signed long long\n-@exdent vec_dive (vector signed long long a, vector signed long long b)\n+@exdent vec_dive (vector signed long long a, vector signed long long b);\n @exdent vector unsigned long long\n-@exdent vec_dive (vector unsigned long long a, vector unsigned long long b)\n+@exdent vec_dive (vector unsigned long long a, vector unsigned long long b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 1, do the following. The integer in\n@@ -20334,9 +20334,9 @@ quotient cannot be represented in 64 bits, or if an attempt is made to perform\n \n @smallexample\n @exdent vector signed int\n-@exdent vec_mod (vector signed int a, vector signed int b)\n+@exdent vec_mod (vector signed int a, vector signed int b);\n @exdent vector unsigned int\n-@exdent vec_mod (vector unsigned int a, vector unsigned int b)\n+@exdent vec_mod (vector unsigned int a, vector unsigned int b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 3, do the following. The integer in\n@@ -20347,9 +20347,9 @@ the vector returned.  If an attempt is made to perform any of the divisions\n \n @smallexample\n @exdent vector signed long long\n-@exdent vec_mod (vector signed long long a, vector signed long long b)\n+@exdent vec_mod (vector signed long long a, vector signed long long b);\n @exdent vector unsigned long long\n-@exdent vec_mod (vector unsigned long long a, vector unsigned long long b)\n+@exdent vec_mod (vector unsigned long long a, vector unsigned long long b);\n @end smallexample\n \n For each integer value @code{i} from 0 to 1, do the following. The integer in"}]}