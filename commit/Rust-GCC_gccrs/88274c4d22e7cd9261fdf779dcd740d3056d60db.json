{"sha": "88274c4d22e7cd9261fdf779dcd740d3056d60db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyNzRjNGQyMmU3Y2Q5MjYxZmRmNzc5ZGNkNzQwZDMwNTZkNjBkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-21T06:06:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-21T06:06:27Z"}, "message": "re PR c++/9335 (repeated diagnostic when maximum template depth is exceeded)\n\n\tPR c++/9335\ngcc/cp:\n\t* init.c (constant_value_1): Treat error_mark_node as a constant\n\tif DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P is set.\n\t* cvt.c (ocp_convert): Handle getting error_mark_node from\n\tintegral_constant_value.\n\t* decl.c (compute_array_index_type): Likewise.\ngcc/testsuite:\n\t* lib/prune.exp: Prune \"skipping N instantiation contexts\".\n\nFrom-SVN: r158586", "tree": {"sha": "631ba0c2a3cd0765b80dd1f410e73be5326be1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631ba0c2a3cd0765b80dd1f410e73be5326be1dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88274c4d22e7cd9261fdf779dcd740d3056d60db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88274c4d22e7cd9261fdf779dcd740d3056d60db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88274c4d22e7cd9261fdf779dcd740d3056d60db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88274c4d22e7cd9261fdf779dcd740d3056d60db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4811db8d424dfb3527a921504c800520ca89ad36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4811db8d424dfb3527a921504c800520ca89ad36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4811db8d424dfb3527a921504c800520ca89ad36"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "6dec7c38cade37422aeb823bd30efe99a0be5ab8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -1,3 +1,12 @@\n+2010-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/9335\n+\t* init.c (constant_value_1): Treat error_mark_node as a constant\n+\tif DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P is set.\n+\t* cvt.c (ocp_convert): Handle getting error_mark_node from\n+\tintegral_constant_value.\n+\t* decl.c (compute_array_index_type): Likewise.\n+\n 2010-04-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/43800"}, {"sha": "1f87c5f8c263f623c1e4f277f3dc077fe7ed915a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -610,6 +610,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n     }\n \n   e = integral_constant_value (e);\n+  if (error_operand_p (e))\n+    return error_mark_node;\n \n   if (MAYBE_CLASS_TYPE_P (type) && (convtype & CONV_FORCE_TEMP))\n     /* We need a new temporary; don't take this shortcut.  */;"}, {"sha": "580f6f820fbea9a7ea1c6620f8043cea811e235b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -7319,6 +7319,8 @@ compute_array_index_type (tree name, tree size)\n \n   /* It might be a const variable or enumeration constant.  */\n   size = integral_constant_value (size);\n+  if (error_operand_p (size))\n+    return error_mark_node;\n \n   /* Normally, the array-bound will be a constant.  */\n   if (TREE_CODE (size) == INTEGER_CST)"}, {"sha": "e1dee1d10dcb3187c809e6ee5ea28291525efb8e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -1658,7 +1658,14 @@ constant_value_1 (tree decl, bool integral_p)\n \t  init = DECL_INITIAL (decl);\n \t}\n       if (init == error_mark_node)\n-\treturn decl;\n+\t{\n+\t  if (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))\n+\t    /* Treat the error as a constant to avoid cascading errors on\n+\t       excessively recursive template instantiation (c++/9335).  */\n+\t    return init;\n+\t  else\n+\t    return decl;\n+\t}\n       /* Initializers in templates are generally expanded during\n \t instantiation, so before that for const int i(2)\n \t INIT is a TREE_LIST with the actual initializer as"}, {"sha": "9750baa23597a91f2de29999ea21871c815d76bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -1,3 +1,12 @@\n+2010-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/9335\n+\t* g++.dg/template/recurse2.C: New.\n+\t* g++.dg/parse/crash36.C: Adjust.\n+\t* g++.dg/other/fold1.C: Adjust.\n+\t* g++.dg/init/member1.C: Adjust.\n+\t* lib/prune.exp: Prune \"skipping N instantiation contexts\".\n+\n 2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-cproj-1.c: Test more cases."}, {"sha": "aededf23e7b72043720c50a5c6e307538b6d3dda", "filename": "gcc/testsuite/g++.dg/init/member1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -11,7 +11,7 @@ template<int> struct B {};\n template<typename T> struct C\n {\n   static const int i = A<T>::i;  // { dg-error \"incomplete\" }\n-  static const int j = i;  // { dg-error \"non-constant expression\" }\n+  static const int j = i;\n   B<j> b;  // { dg-error \"not a valid template arg\" }\n };\n "}, {"sha": "b075fc10c8002cfee3e5229bd66cd2d4747c5e2e", "filename": "gcc/testsuite/g++.dg/other/fold1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -4,5 +4,5 @@\n struct A\n {\n     static const int i = i;  // { dg-error \"not declared\" }\n-    int x[i];                // { dg-error \"integral constant-expression\" }\n+    int x[i];\n };"}, {"sha": "6116eb0f9ebe6b099567f8cd6c1b706c4fa0bdd7", "filename": "gcc/testsuite/g++.dg/parse/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -9,4 +9,4 @@ template <typename... T> struct A\t// { dg-warning \"variadic templates\" }\n   static const int i = sizeof (++t);\t// { dg-error \"was not declared in this scope\" }\n };\n \n-int x[A <int>::i];\t// { dg-error \"is not an integral constant-expression\" }\n+int x[A <int>::i];"}, {"sha": "cf085e0d553bbd72837bb55239f7d9daa04613f6", "filename": "gcc/testsuite/g++.dg/template/recurse2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/9335\n+// We should not see an error about non-constant initialization.\n+\n+template <int N> struct X {\n+    static const int value = X<N-1>::value; // { dg-error \"instantiation|incomplete\" }\n+};\n+template struct X<1000>;"}, {"sha": "160f651b6e768e95d35a94c82ae0b5255f9a8f67", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88274c4d22e7cd9261fdf779dcd740d3056d60db/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=88274c4d22e7cd9261fdf779dcd740d3056d60db", "patch": "@@ -23,6 +23,7 @@ proc prune_gcc_output { text } {\n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect: re(compiling|linking)\\[^\\n\\]*\" $text \"\" text"}]}