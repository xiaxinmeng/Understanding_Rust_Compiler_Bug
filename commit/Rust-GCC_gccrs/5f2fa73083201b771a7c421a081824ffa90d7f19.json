{"sha": "5f2fa73083201b771a7c421a081824ffa90d7f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZmE3MzA4MzIwMWI3NzFhN2M0MjFhMDgxODI0ZmZhOTBkN2YxOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-12T06:17:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-12T06:17:31Z"}, "message": "exception.cc: Include unwind-pe.h.\n\n        * exception.cc: Include unwind-pe.h.  Remove all pointer\n        encoding logic.\n\nFrom-SVN: r41983", "tree": {"sha": "b83ca930ae0749abba0dde179a269c1545a59ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83ca930ae0749abba0dde179a269c1545a59ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2fa73083201b771a7c421a081824ffa90d7f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2fa73083201b771a7c421a081824ffa90d7f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2fa73083201b771a7c421a081824ffa90d7f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2fa73083201b771a7c421a081824ffa90d7f19/comments", "author": null, "committer": null, "parents": [{"sha": "817e741108999531687895c00045f1db798ea9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817e741108999531687895c00045f1db798ea9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817e741108999531687895c00045f1db798ea9e8"}], "stats": {"total": 174, "additions": 6, "deletions": 168}, "files": [{"sha": "ba6ba9878c15bf831175023e8765118a59c3cfde", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fa73083201b771a7c421a081824ffa90d7f19/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fa73083201b771a7c421a081824ffa90d7f19/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5f2fa73083201b771a7c421a081824ffa90d7f19", "patch": "@@ -1,3 +1,8 @@\n+2001-05-11  Richard Henderson  <rth@redhat.com>\n+\n+        * exception.cc: Include unwind-pe.h.  Remove all pointer\n+\tencoding logic.\n+\n 2001-05-10  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "d7349068841e6f4a95253f03cc0377f83c9688fe", "filename": "libjava/exception.cc", "status": "modified", "additions": 1, "deletions": 168, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fa73083201b771a7c421a081824ffa90d7f19/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fa73083201b771a7c421a081824ffa90d7f19/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=5f2fa73083201b771a7c421a081824ffa90d7f19", "patch": "@@ -115,174 +115,7 @@ _Jv_Throw (jthrowable value)\n }\n \n \f\n-// ??? These ought to go somewhere else dwarf2 or dwarf2eh related.\n-\n-// Pointer encodings.\n-#define DW_EH_PE_absptr         0x00\n-#define DW_EH_PE_omit           0xff\n-\n-#define DW_EH_PE_uleb128        0x01\n-#define DW_EH_PE_udata2         0x02\n-#define DW_EH_PE_udata4         0x03\n-#define DW_EH_PE_udata8         0x04\n-#define DW_EH_PE_sleb128        0x09\n-#define DW_EH_PE_sdata2         0x0A\n-#define DW_EH_PE_sdata4         0x0B\n-#define DW_EH_PE_sdata8         0x0C\n-#define DW_EH_PE_signed         0x08\n-\n-#define DW_EH_PE_pcrel          0x10\n-#define DW_EH_PE_textrel        0x20\n-#define DW_EH_PE_datarel        0x30\n-#define DW_EH_PE_funcrel        0x40\n-\n-static unsigned int\n-size_of_encoded_value (unsigned char encoding)\n-{\n-  switch (encoding & 0x07)\n-    {\n-    case DW_EH_PE_absptr:\n-      return sizeof (void *);\n-    case DW_EH_PE_udata2:\n-      return 2;\n-    case DW_EH_PE_udata4:\n-      return 4;\n-    case DW_EH_PE_udata8:\n-      return 8;\n-    }\n-  abort ();\n-}\n-\n-static const unsigned char *\n-read_encoded_value (_Unwind_Context *context, unsigned char encoding,\n-\t\t    const unsigned char *p, _Unwind_Ptr *val)\n-{\n-  union unaligned\n-    {\n-      void *ptr;\n-      unsigned u2 __attribute__ ((mode (HI)));\n-      unsigned u4 __attribute__ ((mode (SI)));\n-      unsigned u8 __attribute__ ((mode (DI)));\n-      signed s2 __attribute__ ((mode (HI)));\n-      signed s4 __attribute__ ((mode (SI)));\n-      signed s8 __attribute__ ((mode (DI)));\n-    } __attribute__((__packed__));\n-\n-  union unaligned *u = (union unaligned *) p;\n-  _Unwind_Ptr result;\n-\n-  switch (encoding & 0x0f)\n-    {\n-    case DW_EH_PE_absptr:\n-      result = (_Unwind_Ptr) u->ptr;\n-      p += sizeof (void *);\n-      break;\n-\n-    case DW_EH_PE_uleb128:\n-      {\n-\tunsigned int shift = 0;\n-\tunsigned char byte;\n-\n-\tresult = 0;\n-\tdo\n-\t  {\n-\t    byte = *p++;\n-\t    result |= (_Unwind_Ptr)(byte & 0x7f) << shift;\n-\t    shift += 7;\n-\t  }\n-\twhile (byte & 0x80);\n-      }\n-      break;\n-\n-    case DW_EH_PE_sleb128:\n-      {\n-\tunsigned int shift = 0;\n-\tunsigned char byte;\n-\n-\tresult = 0;\n-\tdo\n-\t  {\n-\t    byte = *p++;\n-\t    result |= (_Unwind_Ptr)(byte & 0x7f) << shift;\n-\t    shift += 7;\n-\t  }\n-\twhile (byte & 0x80);\n-\n-\tif (shift < 8 * sizeof(result) && (byte & 0x40) != 0)\n-\t  result |= -(1L << shift);\n-      }\n-      break;\n-\n-    case DW_EH_PE_udata2:\n-      result = u->u2;\n-      p += 2;\n-      break;\n-    case DW_EH_PE_udata4:\n-      result = u->u4;\n-      p += 4;\n-      break;\n-    case DW_EH_PE_udata8:\n-      result = u->u8;\n-      p += 8;\n-      break;\n-\n-    case DW_EH_PE_sdata2:\n-      result = u->s2;\n-      p += 2;\n-      break;\n-    case DW_EH_PE_sdata4:\n-      result = u->s4;\n-      p += 4;\n-      break;\n-    case DW_EH_PE_sdata8:\n-      result = u->s8;\n-      p += 8;\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-\n-  if (result != 0)\n-    switch (encoding & 0xf0)\n-      {\n-      case DW_EH_PE_absptr:\n-\tbreak;\n-\n-      case DW_EH_PE_pcrel:\n-\t// Define as relative to the beginning of the pointer.\n-\tresult += (_Unwind_Ptr) u;\n-\tbreak;\n-\n-      case DW_EH_PE_textrel:\n-      case DW_EH_PE_datarel:\n-\t// FIXME.\n-\tabort ();\n-\n-      case DW_EH_PE_funcrel:\n-\tresult += _Unwind_GetRegionStart (context);\n-\tbreak;\n-\n-      default:\n-\tabort ();\n-      }\n-\n-  *val = result;\n-  return p;\n-}\n-\n-static inline const unsigned char *\n-read_uleb128 (const unsigned char *p, _Unwind_Ptr *val)\n-{\n-  return read_encoded_value (0, DW_EH_PE_uleb128, p, val);\n-}\n-\n-static inline const unsigned char *\n-read_sleb128 (const unsigned char *p, _Unwind_Ptr *val)\n-{\n-  return read_encoded_value (0, DW_EH_PE_sleb128, p, val);\n-}\n-\n+#include \"unwind-pe.h\"\n \f\n struct lsda_header_info\n {"}]}