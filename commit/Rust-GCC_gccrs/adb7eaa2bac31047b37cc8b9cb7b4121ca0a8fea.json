{"sha": "adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiN2VhYTJiYWMzMTA0N2IzN2NjOGI5Y2I3YjQxMjFjYTBhOGZlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-19T07:26:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-19T07:26:50Z"}, "message": "tree-ssa-loop-niter.h (estimate_numbers_of_iterations): Take struct function as arg.\n\n2017-06-19  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-niter.h (estimate_numbers_of_iterations): Take\n\tstruct function as arg.\n\t(estimate_numbers_of_iterations): Export overload with loop arg.\n\t(free_numbers_of_iterations_estimates_loop): Use an overload of\n\tfree_numbers_of_iterations_estimates instead.\n\t* tree-cfg.c (remove_bb): Adjust.\n\t* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Likewise.\n\t* tree-parloops.c (gen_parallel_loop): Likewise.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables):\n\tLikewise.\n\t(tree_unroll_loops_completely): Likewise.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n\tUse an overload instead and export.\n\t(estimated_loop_iterations): Adjust.\n\t(max_loop_iterations): Likewise.\n\t(likely_max_loop_iterations): Likewise.\n\t(estimate_numbers_of_iterations): Take struct function as arg\n\tand adjust.\n\t(loop_exits_before_overflow): Adjust.\n\t(free_numbers_of_iterations_estimates_loop): Use an overload.\n\t* tree-vect-loop.c (vect_analyze_loop_form): Adjust.\n\t* tree-vectorizer.c (vect_free_loop_info_assumptions): Likewise.\n\nFrom-SVN: r249358", "tree": {"sha": "45140d490b96fcec2f3b954c5e0f7d1496ea0b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45140d490b96fcec2f3b954c5e0f7d1496ea0b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9bbdeca441e21f50b12cbfc2ff34992242b4f3"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "49a8109df1d247c079e6df26126ed1cf27a62bb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -1,3 +1,28 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-niter.h (estimate_numbers_of_iterations): Take\n+\tstruct function as arg.\n+\t(estimate_numbers_of_iterations): Export overload with loop arg.\n+\t(free_numbers_of_iterations_estimates_loop): Use an overload of\n+\tfree_numbers_of_iterations_estimates instead.\n+\t* tree-cfg.c (remove_bb): Adjust.\n+\t* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Likewise.\n+\t* tree-parloops.c (gen_parallel_loop): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables):\n+\tLikewise.\n+\t(tree_unroll_loops_completely): Likewise.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n+\tUse an overload instead and export.\n+\t(estimated_loop_iterations): Adjust.\n+\t(max_loop_iterations): Likewise.\n+\t(likely_max_loop_iterations): Likewise.\n+\t(estimate_numbers_of_iterations): Take struct function as arg\n+\tand adjust.\n+\t(loop_exits_before_overflow): Adjust.\n+\t(free_numbers_of_iterations_estimates_loop): Use an overload.\n+\t* tree-vect-loop.c (vect_analyze_loop_form): Adjust.\n+\t* tree-vectorizer.c (vect_free_loop_info_assumptions): Likewise.\n+\n 2017-06-19  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/81112"}, {"sha": "589508df0443df378899a8307375f89af2f1cf87", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -2177,7 +2177,7 @@ remove_bb (basic_block bb)\n \t with it.  */\n       if (loop->latch == bb\n \t  || loop->header == bb)\n-\tfree_numbers_of_iterations_estimates_loop (loop);\n+\tfree_numbers_of_iterations_estimates (loop);\n     }\n \n   /* Remove all the instructions in the block.  */"}, {"sha": "4cab592ee772f6d5847fba9979ef07996de15793", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -959,7 +959,7 @@ remove_forwarder_block_with_phi (basic_block bb)\n \t    {\n \t      dest->loop_father->any_upper_bound = false;\n \t      dest->loop_father->any_likely_upper_bound = false;\n-\t      free_numbers_of_iterations_estimates_loop (dest->loop_father);\n+\t      free_numbers_of_iterations_estimates (dest->loop_father);\n \t    }\n \t}\n "}, {"sha": "79d616b760ad48560740efd18405c9e218ecd423", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -2436,8 +2436,7 @@ gen_parallel_loop (struct loop *loop,\n \n   /* Free loop bound estimations that could contain references to\n      removed statements.  */\n-  FOR_EACH_LOOP (loop, 0)\n-    free_numbers_of_iterations_estimates_loop (loop);\n+  free_numbers_of_iterations_estimates (cfun);\n }\n \n /* Returns true when LOOP contains vector phi nodes.  */"}, {"sha": "b6ac765aac697d893f7da1a601de232f19c45369", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -1215,7 +1215,7 @@ canonicalize_induction_variables (void)\n   bool irred_invalidated = false;\n   bitmap loop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n-  estimate_numbers_of_iterations ();\n+  estimate_numbers_of_iterations (cfun);\n \n   FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n     {\n@@ -1361,6 +1361,8 @@ tree_unroll_loops_completely (bool may_increase_size, bool unroll_outer)\n   int iteration = 0;\n   bool irred_invalidated = false;\n \n+  estimate_numbers_of_iterations (cfun);\n+\n   do\n     {\n       changed = false;\n@@ -1370,7 +1372,7 @@ tree_unroll_loops_completely (bool may_increase_size, bool unroll_outer)\n \tloop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n       free_numbers_of_iterations_estimates (cfun);\n-      estimate_numbers_of_iterations ();\n+      estimate_numbers_of_iterations (cfun);\n \n       changed = tree_unroll_loops_completely_1 (may_increase_size,\n \t\t\t\t\t\tunroll_outer, father_bbs,\n@@ -1588,7 +1590,6 @@ pass_complete_unrolli::execute (function *fun)\n     {\n       scev_initialize ();\n       ret = tree_unroll_loops_completely (optimize >= 3, false);\n-      free_numbers_of_iterations_estimates (fun);\n       scev_finalize ();\n     }\n   loop_optimizer_finalize ();"}, {"sha": "848e812cb96b4efd24b0d831176e41a347730994", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -3786,8 +3786,8 @@ maybe_lower_iteration_bound (struct loop *loop)\n /* Records estimates on numbers of iterations of LOOP.  If USE_UNDEFINED_P\n    is true also use estimates derived from undefined behavior.  */\n \n-static void\n-estimate_numbers_of_iterations_loop (struct loop *loop)\n+void\n+estimate_numbers_of_iterations (struct loop *loop)\n {\n   vec<edge> exits;\n   tree niter, type;\n@@ -3876,7 +3876,7 @@ estimated_loop_iterations (struct loop *loop, widest_int *nit)\n   /* When SCEV information is available, try to update loop iterations\n      estimate.  Otherwise just return whatever we recorded earlier.  */\n   if (scev_initialized_p ())\n-    estimate_numbers_of_iterations_loop (loop);\n+    estimate_numbers_of_iterations (loop);\n \n   return (get_estimated_loop_iterations (loop, nit));\n }\n@@ -3912,7 +3912,7 @@ max_loop_iterations (struct loop *loop, widest_int *nit)\n   /* When SCEV information is available, try to update loop iterations\n      estimate.  Otherwise just return whatever we recorded earlier.  */\n   if (scev_initialized_p ())\n-    estimate_numbers_of_iterations_loop (loop);\n+    estimate_numbers_of_iterations (loop);\n \n   return get_max_loop_iterations (loop, nit);\n }\n@@ -3947,7 +3947,7 @@ likely_max_loop_iterations (struct loop *loop, widest_int *nit)\n   /* When SCEV information is available, try to update loop iterations\n      estimate.  Otherwise just return whatever we recorded earlier.  */\n   if (scev_initialized_p ())\n-    estimate_numbers_of_iterations_loop (loop);\n+    estimate_numbers_of_iterations (loop);\n \n   return get_likely_max_loop_iterations (loop, nit);\n }\n@@ -4051,18 +4051,16 @@ estimated_stmt_executions (struct loop *loop, widest_int *nit)\n /* Records estimates on numbers of iterations of loops.  */\n \n void\n-estimate_numbers_of_iterations (void)\n+estimate_numbers_of_iterations (function *fn)\n {\n   struct loop *loop;\n \n   /* We don't want to issue signed overflow warnings while getting\n      loop iteration estimates.  */\n   fold_defer_overflow_warnings ();\n \n-  FOR_EACH_LOOP (loop, 0)\n-    {\n-      estimate_numbers_of_iterations_loop (loop);\n-    }\n+  FOR_EACH_LOOP_FN (fn, loop, 0)\n+    estimate_numbers_of_iterations (loop);\n \n   fold_undefer_and_ignore_overflow_warnings ();\n }\n@@ -4235,7 +4233,7 @@ loop_exits_before_overflow (tree base, tree step,\n \n   valid_niter = fold_build2 (FLOOR_DIV_EXPR, unsigned_type, delta, step_abs);\n \n-  estimate_numbers_of_iterations_loop (loop);\n+  estimate_numbers_of_iterations (loop);\n \n   if (max_loop_iterations (loop, &niter)\n       && wi::fits_to_tree_p (niter, TREE_TYPE (valid_niter))\n@@ -4502,7 +4500,7 @@ scev_probably_wraps_p (tree var, tree base, tree step,\n /* Frees the information on upper bounds on numbers of iterations of LOOP.  */\n \n void\n-free_numbers_of_iterations_estimates_loop (struct loop *loop)\n+free_numbers_of_iterations_estimates (struct loop *loop)\n {\n   struct control_iv *civ;\n   struct nb_iter_bound *bound;\n@@ -4534,9 +4532,7 @@ free_numbers_of_iterations_estimates (function *fn)\n   struct loop *loop;\n \n   FOR_EACH_LOOP_FN (fn, loop, 0)\n-    {\n-      free_numbers_of_iterations_estimates_loop (loop);\n-    }\n+    free_numbers_of_iterations_estimates (loop);\n }\n \n /* Substitute value VAL for ssa name NAME inside expressions held"}, {"sha": "8161cc76fd738ce009888a998f40dba7bb2d38eb", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -45,13 +45,13 @@ extern HOST_WIDE_INT estimated_stmt_executions_int (struct loop *);\n extern bool max_stmt_executions (struct loop *, widest_int *);\n extern bool likely_max_stmt_executions (struct loop *, widest_int *);\n extern bool estimated_stmt_executions (struct loop *, widest_int *);\n-extern void estimate_numbers_of_iterations (void);\n+extern void estimate_numbers_of_iterations (function *);\n+extern void estimate_numbers_of_iterations (struct loop *);\n extern bool stmt_dominates_stmt_p (gimple *, gimple *);\n extern bool nowrap_type_p (tree);\n extern bool scev_probably_wraps_p (tree, tree, tree, gimple *,\n \t\t\t\t   struct loop *, bool);\n-extern void free_loop_control_ivs (struct loop *);\n-extern void free_numbers_of_iterations_estimates_loop (struct loop *);\n+extern void free_numbers_of_iterations_estimates (struct loop *);\n extern void free_numbers_of_iterations_estimates (function *);\n extern void substitute_in_loop_info (struct loop *, tree, tree);\n "}, {"sha": "d601296ab3e4280773184ce25cd249bf7c424957", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -1570,7 +1570,7 @@ vect_analyze_loop_form (struct loop *loop)\n \t some assumptions.  In order to do this, we need to clear\n \t existing information computed by scev and niter analyzer.  */\n       scev_reset_htab ();\n-      free_numbers_of_iterations_estimates_loop (loop);\n+      free_numbers_of_iterations_estimates (loop);\n       /* Also set flag for this loop so that following scev and niter\n \t analysis are done under the assumptions.  */\n       loop_constraint_set (loop, LOOP_C_FINITE);"}, {"sha": "0d62c829ef5875f7ce6732d82e64601e79b2b130", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea", "patch": "@@ -380,10 +380,10 @@ vect_free_loop_info_assumptions (struct loop *loop)\n {\n   scev_reset_htab ();\n   /* We need to explicitly reset upper bound information since they are\n-     used even after free_numbers_of_iterations_estimates_loop.  */\n+     used even after free_numbers_of_iterations_estimates.  */\n   loop->any_upper_bound = false;\n   loop->any_likely_upper_bound = false;\n-  free_numbers_of_iterations_estimates_loop (loop);\n+  free_numbers_of_iterations_estimates (loop);\n   loop_constraint_clear (loop, LOOP_C_FINITE);\n }\n "}]}