{"sha": "d1ad84c20452e63a38a6b414a6eb7001711c520a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhZDg0YzIwNDUyZTYzYTM4YTZiNDE0YTZlYjcwMDE3MTFjNTIwYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-02-03T16:13:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-02-03T16:13:23Z"}, "message": "builtins.c (fold_builtin_cabs): Fold cabs(x+xi) into fabs(x)*sqrt(2).\n\n\t* builtins.c (fold_builtin_cabs): Fold cabs(x+xi) into\n\tfabs(x)*sqrt(2).\n\t* fold-const.c (fold_binary): Fix comment typos.  Fold complex\n\t(x,0)-(0,y) into (x,-y).  Likewise (0,y)-(x,0) into (-x,y).\n\ntestsuite:\n\t* gcc.dg/builtins-54.c: Add more cases.\n\nFrom-SVN: r121542", "tree": {"sha": "6f5c23e0e626e6b83e80b93c1170d1bf55370b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5c23e0e626e6b83e80b93c1170d1bf55370b71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ad84c20452e63a38a6b414a6eb7001711c520a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ad84c20452e63a38a6b414a6eb7001711c520a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ad84c20452e63a38a6b414a6eb7001711c520a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ad84c20452e63a38a6b414a6eb7001711c520a/comments", "author": null, "committer": null, "parents": [{"sha": "36f7dcae093c3ed596010a4bf88ce731a7d6236e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f7dcae093c3ed596010a4bf88ce731a7d6236e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f7dcae093c3ed596010a4bf88ce731a7d6236e"}], "stats": {"total": 197, "additions": 182, "deletions": 15}, "files": [{"sha": "6fa2af1860f46d1afa6cdb1dbc6f2d5d5ad7cc05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1ad84c20452e63a38a6b414a6eb7001711c520a", "patch": "@@ -1,3 +1,10 @@\n+2007-02-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_cabs): Fold cabs(x+xi) into\n+\tfabs(x)*sqrt(2).\n+\t* fold-const.c (fold_binary): Fix comment typos.  Fold complex\n+\t(x,0)-(0,y) into (x,-y).  Likewise (0,y)-(x,0) into (-x,y).\n+\n 2007-02-02  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin9.h (DARWIN_LINKER_GENERATES_ISLANDS): Add."}, {"sha": "b7ce1e4c5d822107ba635918483cbc28e690146e", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d1ad84c20452e63a38a6b414a6eb7001711c520a", "patch": "@@ -7143,13 +7143,30 @@ fold_builtin_cabs (tree arglist, tree type, tree fndecl)\n \t\t\t      type, mpfr_hypot)))\n     return res;\n   \n-  /* If either part is zero, cabs is fabs of the other.  */\n-  if (TREE_CODE (arg) == COMPLEX_EXPR\n-      && real_zerop (TREE_OPERAND (arg, 0)))\n-    return fold_build1 (ABS_EXPR, type, TREE_OPERAND (arg, 1));\n-  if (TREE_CODE (arg) == COMPLEX_EXPR\n-      && real_zerop (TREE_OPERAND (arg, 1)))\n-    return fold_build1 (ABS_EXPR, type, TREE_OPERAND (arg, 0));\n+  if (TREE_CODE (arg) == COMPLEX_EXPR)\n+    {\n+      tree real = TREE_OPERAND (arg, 0);\n+      tree imag = TREE_OPERAND (arg, 1);\n+      \n+      /* If either part is zero, cabs is fabs of the other.  */\n+      if (real_zerop (real))\n+\treturn fold_build1 (ABS_EXPR, type, imag);\n+      if (real_zerop (imag))\n+\treturn fold_build1 (ABS_EXPR, type, real);\n+\n+      /* cabs(x+xi) -> fabs(x)*sqrt(2).  */\n+      if (flag_unsafe_math_optimizations\n+\t  && operand_equal_p (real, imag, OEP_PURE_SAME))\n+        {\n+\t  REAL_VALUE_TYPE sqrt2;\n+\n+\t  real_sqrt (&sqrt2, TYPE_MODE (type), &dconst2);\n+\t  STRIP_NOPS (real);\n+\t  return fold_build2 (MULT_EXPR, type,\n+\t\t\t      fold_build1 (ABS_EXPR, type, real),\n+\t\t\t      build_real (type, sqrt2));\n+\t}\n+    }\n \n   /* Optimize cabs(-z) and cabs(conj(z)) as cabs(z).  */\n   if (TREE_CODE (arg) == NEGATE_EXPR"}, {"sha": "085fcd8275be533be27593e214838e167d59f2b3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d1ad84c20452e63a38a6b414a6eb7001711c520a", "patch": "@@ -8923,7 +8923,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \n \t  /* Fold __complex__ ( x, 0 ) + __complex__ ( 0, y )\n \t     to __complex__ ( x, y ).  This is not the same for SNaNs or\n-\t     if singed zeros are involved.  */\n+\t     if signed zeros are involved.  */\n \t  if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n               && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n \t      && COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0)))\n@@ -9231,6 +9231,43 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       else if (fold_real_zero_addition_p (TREE_TYPE (arg1), arg0, 0))\n \treturn negate_expr (fold_convert (type, arg1));\n \n+      /* Fold __complex__ ( x, 0 ) - __complex__ ( 0, y ) to\n+\t __complex__ ( x, -y ).  This is not the same for SNaNs or if\n+\t signed zeros are involved.  */\n+      if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t  && COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0)))\n+        {\n+\t  tree rtype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tree arg0r = fold_unary (REALPART_EXPR, rtype, arg0);\n+\t  tree arg0i = fold_unary (IMAGPART_EXPR, rtype, arg0);\n+\t  bool arg0rz = false, arg0iz = false;\n+\t  if ((arg0r && (arg0rz = real_zerop (arg0r)))\n+\t      || (arg0i && (arg0iz = real_zerop (arg0i))))\n+\t    {\n+\t      tree arg1r = fold_unary (REALPART_EXPR, rtype, arg1);\n+\t      tree arg1i = fold_unary (IMAGPART_EXPR, rtype, arg1);\n+\t      if (arg0rz && arg1i && real_zerop (arg1i))\n+\t        {\n+\t\t  tree rp = fold_build1 (NEGATE_EXPR, rtype,\n+\t\t\t\t\t arg1r ? arg1r\n+\t\t\t\t\t : build1 (REALPART_EXPR, rtype, arg1));\n+\t\t  tree ip = arg0i ? arg0i\n+\t\t    : build1 (IMAGPART_EXPR, rtype, arg0);\n+\t\t  return fold_build2 (COMPLEX_EXPR, type, rp, ip);\n+\t\t}\n+\t      else if (arg0iz && arg1r && real_zerop (arg1r))\n+\t        {\n+\t\t  tree rp = arg0r ? arg0r\n+\t\t    : build1 (REALPART_EXPR, rtype, arg0);\n+\t\t  tree ip = fold_build1 (NEGATE_EXPR, rtype,\n+\t\t\t\t\t arg1i ? arg1i\n+\t\t\t\t\t : build1 (IMAGPART_EXPR, rtype, arg1));\n+\t\t  return fold_build2 (COMPLEX_EXPR, type, rp, ip);\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Fold &x - &x.  This can happen from &x.foo - &x.\n \t This is unsafe for certain floats even in non-IEEE formats.\n \t In IEEE, it is unsafe because it does wrong for NaNs.\n@@ -9410,7 +9447,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    }\n \n \t  /* Fold z * +-I to __complex__ (-+__imag z, +-__real z).\n-\t     This is not the same for NaNs or if singed zeros are\n+\t     This is not the same for NaNs or if signed zeros are\n \t     involved.  */\n \t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n               && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))"}, {"sha": "7ec593780d244cca9fcb46d27c3288c17f17e709", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1ad84c20452e63a38a6b414a6eb7001711c520a", "patch": "@@ -1,3 +1,7 @@\n+2007-02-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-54.c: Add more cases.\n+\n 2007-02-03  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30514"}, {"sha": "2713a3b1d57565248d64908baa92f765452abd7a", "filename": "gcc/testsuite/gcc.dg/builtins-54.c", "status": "modified", "additions": 108, "deletions": 6, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ad84c20452e63a38a6b414a6eb7001711c520a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-54.c?ref=d1ad84c20452e63a38a6b414a6eb7001711c520a", "patch": "@@ -1,44 +1,146 @@\n /* { dg-do link } */\n /* { dg-options \"-O2 -ffast-math\" } */\n \n+double fabs(double);\n+float fabsf(float);\n+long double fabsl(long double);\n double cabs(__complex__ double);\n float cabsf(__complex__ float);\n long double cabsl(__complex__ long double);\n \n void link_error (void);\n \n-void test(__complex__ double x)\n+void test(__complex__ double x, double a, double b)\n {\n   if (cabs(x) != cabs(-x))\n     link_error();\n \n   if (cabs(x) != cabs(~x))\n     link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (a+a*1i))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (a*1i+a))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (-a+a*-1i))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (-a+-a*1i))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (-a-a*1i))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (a*-1i-a))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (-a*1i-a))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (a*-1i+-a))\n+    link_error();\n+\n+  if (fabs(a) * __builtin_sqrt(2) != cabs (-a*1i+-a))\n+    link_error();\n+\n+  if (fabs(a*b) * __builtin_sqrt(2) != cabs (a*b-(-b*a*1i)))\n+    link_error();\n+\n+  if (fabs(a*b) * __builtin_sqrt(2) != cabs (a*b*1i-a*-b))\n+    link_error();\n }\n \n-void testf(__complex__ float x)\n+void testf(__complex__ float x, float a, float b)\n {\n   if (cabsf(x) != cabsf(-x))\n     link_error();\n \n   if (cabsf(x) != cabsf(~x))\n     link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (a+a*1i))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (a*1i+a))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (-a+a*-1i))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (-a+-a*1i))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (-a-a*1i))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (a*-1i-a))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (-a*1i-a))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (a*-1i+-a))\n+    link_error();\n+\n+  if (fabsf(a) * __builtin_sqrtf(2) != cabsf (-a*1i+-a))\n+    link_error();\n+\n+  if (fabsf(a*b) * __builtin_sqrtf(2) != cabsf (a*b-(-b*a*1i)))\n+    link_error();\n+\n+  if (fabsf(a*b) * __builtin_sqrtf(2) != cabsf (a*b*1i-a*-b))\n+    link_error();\n }\n \n-void testl(__complex__ long double x)\n+void testl(__complex__ long double x, long double a, long double b)\n {\n   if (cabsl(x) != cabsl(-x))\n     link_error();\n \n   if (cabsl(x) != cabsl(~x))\n     link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (a+a*1i))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (a*1i+a))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (-a+a*-1i))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (-a+-a*1i))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (-a-a*1i))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (a*-1i-a))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (-a*1i-a))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (a*-1i+-a))\n+    link_error();\n+\n+  if (fabsl(a) * __builtin_sqrtl(2) != cabsl (-a*1i+-a))\n+    link_error();\n+\n+  if (fabsl(a*b) * __builtin_sqrtl(2) != cabsl (a*b-(-b*a*1i)))\n+    link_error();\n+\n+  if (fabsl(a*b) * __builtin_sqrtl(2) != cabsl (a*b*1i-a*-b))\n+    link_error();\n }\n \n int main()\n {\n-  test(0.0);\n-  testf(0.0);\n-  testl(0.0);\n+  test(0, 0, 0);\n+  testf(0, 0, 0);\n+  testl(0, 0, 0);\n   return 0;\n }\n "}]}