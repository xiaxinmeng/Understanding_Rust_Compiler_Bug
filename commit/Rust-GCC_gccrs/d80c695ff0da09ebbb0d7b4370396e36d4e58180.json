{"sha": "d80c695ff0da09ebbb0d7b4370396e36d4e58180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwYzY5NWZmMGRhMDllYmJiMGQ3YjQzNzAzOTZlMzZkNGU1ODE4MA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2009-03-29T17:15:48Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2009-03-29T17:15:48Z"}, "message": "re PR fortran/38507 (Bogus Warning: Deleted feature: GOTO jumps to END of construct)\n\nfortran/\nPR fortran/38507\n* gfortran.h (gfc_st_label): Fix comment.\n(gfc_exec_op): Add statement code EXEC_END_BLOCK for end of block.\n* parse.c (accept_statement): Use EXEC_END_BLOCK for END IF and\nEND SELECT with labels.\n(check_do_closure): Fix formatting.\n(parse_do_block): Fix typo in error message.\n* resolve.c (code_stack): Remove tail member.  Update comment to\nnew use of reachable_labels.\n(reachable_labels): Rename to ...\n(find_reachable_labels): ... this.  Overhaul.  Update preceding\ncomment.\n(resolve_branch): Fix comment preceding function.  Rewrite.\n(resolve_code): Update call to find_reachable_labels.  Add code to\ndeal with EXEC_END_BLOCK.\n* st.c (gfc_free_statement): Add code to deal with EXEC_END_BLOCK.\n* trans.c (gfc_trans_code): Likewise.\ntestsuite/\n* do_4.f: New.\n* goto_2.f90: Correct expected warnings.\n* goto_4.f90: Likewise.\n* goto_5.f90: New.\n\nFrom-SVN: r145245", "tree": {"sha": "932f0cbc2ec95ee8d7f4af821c8414255f18bcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932f0cbc2ec95ee8d7f4af821c8414255f18bcaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80c695ff0da09ebbb0d7b4370396e36d4e58180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c695ff0da09ebbb0d7b4370396e36d4e58180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80c695ff0da09ebbb0d7b4370396e36d4e58180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c695ff0da09ebbb0d7b4370396e36d4e58180/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeae74a1a98590abc9eda18b198ff92f473f2e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae74a1a98590abc9eda18b198ff92f473f2e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeae74a1a98590abc9eda18b198ff92f473f2e36"}], "stats": {"total": 215, "additions": 145, "deletions": 70}, "files": [{"sha": "373ffb8e7b25fae1e0cdce39a04380d4c0296778", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1,3 +1,24 @@\n+2008-03-29  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/38507\n+\t* gfortran.h (gfc_st_label): Fix comment.\n+\t(gfc_exec_op): Add statement code EXEC_END_BLOCK for end of block.\n+\t* parse.c (accept_statement): Use EXEC_END_BLOCK for END IF and\n+\tEND SELECT with labels.\n+\t(check_do_closure): Fix formatting.\n+\t(parse_do_block): Fix typo in error message.\n+\t* resolve.c (code_stack): Remove tail member.  Update comment to\n+\tnew use of reachable_labels.\n+\t(reachable_labels): Rename to ...\n+\t(find_reachable_labels): ... this.  Overhaul.  Update preceding\n+\tcomment.\n+\t(resolve_branch): Fix comment preceding function.  Rewrite.\n+\t(resolve_code): Update call to find_reachable_labels.  Add code to\n+\tdeal with EXEC_END_BLOCK.\n+\t* st.c (gfc_free_statement): Add code to deal with EXEC_END_BLOCK.\n+\tAdd 2009 to copyright years.\n+\t* trans.c (gfc_trans_code): Likewise on both counts.\n+\n 2009-03-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34656"}, {"sha": "22c5776b0bfebe20b604cd3f24628688ae960434", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -954,10 +954,9 @@ gfc_omp_clauses;\n #define gfc_get_omp_clauses() XCNEW (gfc_omp_clauses)\n \n \n-/* The gfc_st_label structure is a doubly linked list attached to a\n-   namespace that records the usage of statement labels within that\n-   space.  */\n-/* TODO: Make format/statement specifics a union.  */\n+/* The gfc_st_label structure is a BBT attached to a namespace that\n+   records the usage of statement labels within that space.  */\n+\n typedef struct gfc_st_label\n {\n   BBT_HEADER(gfc_st_label);\n@@ -1861,7 +1860,8 @@ gfc_forall_iterator;\n /* Executable statements that fill gfc_code structures.  */\n typedef enum\n {\n-  EXEC_NOP = 1, EXEC_ASSIGN, EXEC_LABEL_ASSIGN, EXEC_POINTER_ASSIGN,\n+  EXEC_NOP = 1, EXEC_END_BLOCK, EXEC_ASSIGN, EXEC_LABEL_ASSIGN,\n+  EXEC_POINTER_ASSIGN,\n   EXEC_GOTO, EXEC_CALL, EXEC_COMPCALL, EXEC_ASSIGN_CALL, EXEC_RETURN,\n   EXEC_ENTRY, EXEC_PAUSE, EXEC_STOP, EXEC_CONTINUE, EXEC_INIT_ASSIGN,\n   EXEC_IF, EXEC_ARITHMETIC_IF, EXEC_DO, EXEC_DO_WHILE, EXEC_SELECT,"}, {"sha": "0800fc1ec6807c6fd5c9e26ae5c72d0995c41755", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1465,16 +1465,23 @@ accept_statement (gfc_statement st)\n \n       /* If the statement is the end of a block, lay down a special code\n \t that allows a branch to the end of the block from within the\n-\t construct.  */\n+\t construct.  IF and SELECT are treated differently from DO\n+\t (where EXEC_NOP is added inside the loop) for two\n+\t reasons:\n+         1. END DO has a meaning in the sense that after a GOTO to\n+\t    it, the loop counter must be increased.\n+         2. IF blocks and SELECT blocks can consist of multiple\n+\t    parallel blocks (IF ... ELSE IF ... ELSE ... END IF).\n+\t    Putting the label before the END IF would make the jump\n+\t    from, say, the ELSE IF block to the END IF illegal.  */\n \n     case ST_ENDIF:\n     case ST_END_SELECT:\n       if (gfc_statement_label != NULL)\n \t{\n-\t  new_st.op = EXEC_NOP;\n+\t  new_st.op = EXEC_END_BLOCK;\n \t  add_statement ();\n \t}\n-\n       break;\n \n       /* The end-of-program unit statements do not get the special\n@@ -2817,7 +2824,6 @@ check_do_closure (void)\n \n   if (p->ext.end_do_label == gfc_statement_label)\n     {\n-\n       if (p == gfc_state_stack)\n \treturn 1;\n \n@@ -2895,7 +2901,7 @@ parse_do_block (void)\n \tname, but in that case we must have seen ST_ENDDO first).\n \tWe only complain about this in pedantic mode.  */\n      if (gfc_current_block () != NULL)\n-\tgfc_error_now (\"named block DO at %L requires matching ENDDO name\",\n+\tgfc_error_now (\"Named block DO at %L requires matching ENDDO name\",\n \t\t       &gfc_current_block()->declared_at);\n \n       break;"}, {"sha": "7f7a806dc817828be3f547c5b16ed8d0d819ec81", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 27, "deletions": 43, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -43,11 +43,12 @@ seq_type;\n \n typedef struct code_stack\n {\n-  struct gfc_code *head, *current, *tail;\n+  struct gfc_code *head, *current;\n   struct code_stack *prev;\n \n   /* This bitmap keeps track of the targets valid for a branch from\n-     inside this block.  */\n+     inside this block except for END {IF|SELECT}s of enclosing\n+     blocks.  */\n   bitmap reachable_labels;\n }\n code_stack;\n@@ -5978,11 +5979,10 @@ resolve_transfer (gfc_code *code)\n /*********** Toplevel code resolution subroutines ***********/\n \n /* Find the set of labels that are reachable from this block.  We also\n-   record the last statement in each block so that we don't have to do\n-   a linear search to find the END DO statements of the blocks.  */\n+   record the last statement in each block.  */\n      \n static void\n-reachable_labels (gfc_code *block)\n+find_reachable_labels (gfc_code *block)\n {\n   gfc_code *c;\n \n@@ -5991,14 +5991,13 @@ reachable_labels (gfc_code *block)\n \n   cs_base->reachable_labels = bitmap_obstack_alloc (&labels_obstack);\n \n-  /* Collect labels in this block.  */\n+  /* Collect labels in this block.  We don't keep those corresponding\n+     to END {IF|SELECT}, these are checked in resolve_branch by going\n+     up through the code_stack.  */\n   for (c = block; c; c = c->next)\n     {\n-      if (c->here)\n+      if (c->here && c->op != EXEC_END_BLOCK)\n \tbitmap_set_bit (cs_base->reachable_labels, c->here->value);\n-\n-      if (!c->next && cs_base->prev)\n-\tcs_base->prev->tail = c;\n     }\n \n   /* Merge with labels from parent block.  */\n@@ -6010,7 +6009,7 @@ reachable_labels (gfc_code *block)\n     }\n }\n \n-/* Given a branch to a label and a namespace, if the branch is conforming.\n+/* Given a branch to a label, see if the branch is conforming.\n    The code node describes where the branch is located.  */\n \n static void\n@@ -6049,46 +6048,30 @@ resolve_branch (gfc_st_label *label, gfc_code *code)\n      branching statement.  The hard work has been done by setting up\n      the bitmap reachable_labels.  */\n \n-  if (!bitmap_bit_p (cs_base->reachable_labels, label->value))\n-    {\n-      /* The label is not in an enclosing block, so illegal.  This was\n-\t allowed in Fortran 66, so we allow it as extension.  No\n-\t further checks are necessary in this case.  */\n-      gfc_notify_std (GFC_STD_LEGACY, \"Label at %L is not in the same block \"\n-\t\t      \"as the GOTO statement at %L\", &label->where,\n-\t\t      &code->loc);\n-      return;\n-    }\n+  if (bitmap_bit_p (cs_base->reachable_labels, label->value))\n+    return;\n \n-  /* Step four: Make sure that the branching target is legal if\n-     the statement is an END {SELECT,IF}.  */\n+  /* Step four:  If we haven't found the label in the bitmap, it may\n+    still be the label of the END of the enclosing block, in which\n+    case we find it by going up the code_stack.  */\n \n   for (stack = cs_base; stack; stack = stack->prev)\n     if (stack->current->next && stack->current->next->here == label)\n       break;\n \n-  if (stack && stack->current->next->op == EXEC_NOP)\n+  if (stack)\n     {\n-      gfc_notify_std (GFC_STD_F95_DEL, \"Deleted feature: GOTO at %L jumps to \"\n-\t\t      \"END of construct at %L\", &code->loc,\n-\t\t      &stack->current->next->loc);\n-      return;  /* We know this is not an END DO.  */\n+      gcc_assert (stack->current->next->op == EXEC_END_BLOCK);\n+      return;\n     }\n \n-  /* Step five: Make sure that we're not jumping to the end of a DO\n-     loop from within the loop.  */\n-\n-  for (stack = cs_base; stack; stack = stack->prev)\n-    if ((stack->current->op == EXEC_DO\n-\t || stack->current->op == EXEC_DO_WHILE)\n-\t&& stack->tail->here == label && stack->tail->op == EXEC_NOP)\n-      {\n-\tgfc_notify_std (GFC_STD_F95_DEL, \"Deleted feature: GOTO at %L jumps \"\n-\t\t\t\"to END of construct at %L\", &code->loc,\n-\t\t\t&stack->tail->loc);\n-\treturn;\n-\n-      }\n+  /* The label is not in an enclosing block, so illegal.  This was\n+     allowed in Fortran 66, so we allow it as extension.  No\n+     further checks are necessary in this case.  */\n+  gfc_notify_std (GFC_STD_LEGACY, \"Label at %L is not in the same block \"\n+\t\t  \"as the GOTO statement at %L\", &label->where,\n+\t\t  &code->loc);\n+  return;\n }\n \n \n@@ -6669,7 +6652,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n   frame.head = code;\n   cs_base = &frame;\n \n-  reachable_labels (code);\n+  find_reachable_labels (code);\n \n   for (; code; code = code->next)\n     {\n@@ -6727,6 +6710,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n       switch (code->op)\n \t{\n \tcase EXEC_NOP:\n+\tcase EXEC_END_BLOCK:\n \tcase EXEC_CYCLE:\n \tcase EXEC_PAUSE:\n \tcase EXEC_STOP:"}, {"sha": "4f82050bcc0efb84ed07e9548e9cd8511edf361e", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1,5 +1,5 @@\n /* Build executable statement trees.\n-   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -88,6 +88,7 @@ gfc_free_statement (gfc_code *p)\n   switch (p->op)\n     {\n     case EXEC_NOP:\n+    case EXEC_END_BLOCK:\n     case EXEC_ASSIGN:\n     case EXEC_INIT_ASSIGN:\n     case EXEC_GOTO:"}, {"sha": "827f54eaa206460e5e69b39793e2fe86375be65a", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1,6 +1,6 @@\n /* Code translation -- generate GCC trees from gfc_code.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software\n-   Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free\n+   Software Foundation, Inc.\n    Contributed by Paul Brook\n \n This file is part of GCC.\n@@ -1055,6 +1055,7 @@ gfc_trans_code (gfc_code * code)\n       switch (code->op)\n \t{\n \tcase EXEC_NOP:\n+\tcase EXEC_END_BLOCK:\n \t  res = NULL_TREE;\n \t  break;\n "}, {"sha": "d33a95e91d668ee866db3e60c1d3fd3df8029431", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1,3 +1,11 @@\n+2008-03-29  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/38507\n+\t* gfortran.dg/do_4.f: New.\n+\t* gfortran.dg/goto_2.f90: Correct expected warnings.\n+\t* gfortran.dg/goto_4.f90: Likewise.\n+\t* gfortran.dg/goto_5.f90: New.\n+\n 2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39545"}, {"sha": "6d688a0a32381fa83325efd9934cc53fecd852d0", "filename": "gcc/testsuite/gfortran.dg/do_4.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_4.f?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! Verify that the loop not terminated on an action-stmt is correctly rejected\n+       do10i=1,20\n+       if(i.eq.5)then\n+          goto 10\n+ 10    endif           ! { dg-error \"is within another block\" }\n+       end\n+! { dg-excess-errors \"\" }\n+"}, {"sha": "fc5e8d83008cd7773eea988cdf3bf7c15f0799eb", "filename": "gcc/testsuite/gfortran.dg/goto_2.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_2.f90?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -2,51 +2,51 @@\n ! Checks for corrects warnings if branching to then end of a\n ! construct at various nesting levels\n   subroutine check_if(i)\n-    goto 10\n+    goto 10  ! { dg-warning \"Label at ... is not in the same block\" }\n     if (i > 0) goto 40\n     if (i < 0) then\n        goto 40\n-10  end if\n+10  end if    ! { dg-warning \"Label at ... is not in the same block\" }\n     if (i == 0) then\n        i = i+1\n-       goto 20  ! { dg-warning \"jumps to END of construct\" }\n+       goto 20\n        goto 40\n-20  end if   ! { dg-warning \"jumps to END of construct\" }\n+20  end if\n     if (i == 1) then\n        i = i+1\n        if (i == 2) then\n-          goto 30 ! { dg-warning \"jumps to END of construct\" }\n+          goto 30\n        end if\n        goto 40\n-30  end if    ! { dg-warning \"jumps to END of construct\" }\n+30  end if\n     return\n 40  i = -1\n   end subroutine check_if\n   \n   subroutine check_select(i)\n-    goto 10\n+    goto 10  ! { dg-warning \"Label at ... is not in the same block\" }\n     select case (i)\n     case default\n        goto 999\n-10  end select\n+10  end select  ! { dg-warning \"Label at ... is not in the same block\" }\n     select case (i)\n     case (2)\n        i = 1\n-       goto 20  ! { dg-warning \"jumps to END of construct\" }\n+       goto 20\n        goto 999\n     case default\n        goto 999\n-20  end select   ! { dg-warning \"jumps to END of construct\" }\n+20  end select\n     j = i\n     select case (j)\n     case default\n        select case (i)\n        case (1)\n           i = 2\n-          goto 30  ! { dg-warning \"jumps to END of construct\" }\n+          goto 30\n        end select\n        goto 999\n-30  end select    ! { dg-warning \"jumps to END of construct\" }\n+30  end select\n     return    \n 999 i = -1\n   end subroutine check_select"}, {"sha": "7340814cc0196dd54a14713196f4c4ae36811df6", "filename": "gcc/testsuite/gfortran.dg/goto_4.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_4.f90?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -1,10 +1,11 @@\n ! { dg-do run }\n ! PR 17708: Jumping to END DO statements didn't do the right thing\n+! PR 38507: The warning we used to give was wrong\n       program test\n         j = 0\n         do 10 i=1,3\n-           if(i == 2) goto 10 ! { dg-warning \"jumps to END\" }\n+           if(i == 2) goto 10\n            j = j+1\n-10      enddo                 ! { dg-warning \"jumps to END\" }\n+10      enddo\n         if (j/=2) call abort\n       end"}, {"sha": "44ba697249246670543d20ad7ba589d824ede6cd", "filename": "gcc/testsuite/gfortran.dg/goto_5.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c695ff0da09ebbb0d7b4370396e36d4e58180/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_5.f90?ref=d80c695ff0da09ebbb0d7b4370396e36d4e58180", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! PR 38507\n+! Verify that we correctly flag invalid gotos, while not flagging valid gotos.\n+integer i,j\n+\n+do i=1,10\n+   goto 20\n+20 end do   ! { dg-warning \"is not in the same block\" }\n+\n+goto 20   ! { dg-warning \"is not in the same block\" }\n+goto 25   ! { dg-warning \"is not in the same block\" }\n+goto 40   ! { dg-warning \"is not in the same block\" }\n+goto 50   ! { dg-warning \"is not in the same block\" }\n+\n+goto 222\n+goto 333\n+goto 444\n+\n+222 if (i < 0) then\n+25 end if      ! { dg-warning \"is not in the same block\" }\n+\n+333 if (i > 0) then\n+   do j = 1,20\n+      goto 30\n+   end do\n+else if (i == 0) then\n+   goto 30\n+else\n+   goto 30\n+30 end if\n+\n+444 select case(i)\n+case(0)\n+   goto 50\n+   goto 60  ! { dg-warning \"is not in the same block\" }\n+case(1)\n+   goto 40\n+   goto 50\n+   40 continue  ! { dg-warning \"is not in the same block\" }\n+   60 continue    ! { dg-warning \"is not in the same block\" }\n+50 end select   ! { dg-warning \"is not in the same block\" }\n+continue \n+\n+end"}]}