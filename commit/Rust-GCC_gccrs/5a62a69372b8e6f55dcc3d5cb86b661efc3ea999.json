{"sha": "5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2MmE2OTM3MmI4ZTZmNTVkY2MzZDVjYjg2YjY2MWVmYzNlYTk5OQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-04T18:08:36Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-04T18:08:36Z"}, "message": "m68hc11.h (CONST_COSTS): Make the cost of constants cheap after reload.\n\n\t* config/m68hc11/m68hc11.h (CONST_COSTS): Make the cost of\n\tconstants cheap after reload.\n\t* config/m68hc11/m68hc11.c (m68hc11_shift_cost): Shift by 16 and 32\n\tare cheap.\n\t(m68hc11_rtx_costs): Cost of multiplication by 65536 is expensive\n\tso that gcc prefers a shift by 16.\n\t(m6811_cost, m6812_cost): Make the shift cheap compared to an add.\n\nFrom-SVN: r41834", "tree": {"sha": "e21f57e84640d794b482cb5e02f4cb70b1d5cab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21f57e84640d794b482cb5e02f4cb70b1d5cab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/comments", "author": null, "committer": null, "parents": [{"sha": "30506ece757ccb765160740e59a90be165226110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30506ece757ccb765160740e59a90be165226110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30506ece757ccb765160740e59a90be165226110"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "47cdf869779d779e3022774b0a557613c971cdbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "patch": "@@ -1,3 +1,13 @@\n+2001-05-04  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.h (CONST_COSTS): Make the cost of\n+\tconstants cheap after reload.\n+\t* config/m68hc11/m68hc11.c (m68hc11_shift_cost): Shift by 16 and 32\n+\tare cheap.\n+\t(m68hc11_rtx_costs): Cost of multiplication by 65536 is expensive\n+\tso that gcc prefers a shift by 16.\n+\t(m6811_cost, m6812_cost): Make the shift cheap compared to an add.\n+\n 2001-05-04  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* config/arm/elf.h (ASM_OUTPUT_ALIGNED_COMMON): Define."}, {"sha": "f649b9f1ce7e580090a32d1aca5bdae60880ff3f", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "patch": "@@ -136,7 +136,7 @@ struct processor_costs m6811_cost = {\n     COSTS_N_INSNS (2), COSTS_N_INSNS (1) },\n \n   /* shiftHI const */\n-  { COSTS_N_INSNS (0), COSTS_N_INSNS (2), COSTS_N_INSNS (4),\n+  { COSTS_N_INSNS (0), COSTS_N_INSNS (1), COSTS_N_INSNS (4),\n     COSTS_N_INSNS (6), COSTS_N_INSNS (8), COSTS_N_INSNS (6),\n     COSTS_N_INSNS (4), COSTS_N_INSNS (2),\n     COSTS_N_INSNS (2), COSTS_N_INSNS (4),\n@@ -171,7 +171,7 @@ struct processor_costs m6812_cost = {\n     COSTS_N_INSNS (2), COSTS_N_INSNS (1) },\n \n   /* shiftHI const */\n-  { COSTS_N_INSNS (0), COSTS_N_INSNS (2), COSTS_N_INSNS (4),\n+  { COSTS_N_INSNS (0), COSTS_N_INSNS (1), COSTS_N_INSNS (4),\n     COSTS_N_INSNS (6), COSTS_N_INSNS (8), COSTS_N_INSNS (6),\n     COSTS_N_INSNS (4), COSTS_N_INSNS (2),\n     COSTS_N_INSNS (2), COSTS_N_INSNS (4), COSTS_N_INSNS (6),\n@@ -4975,7 +4975,7 @@ m68hc11_shift_cost (mode, x, shift)\n     }\n \n   /* For SI and others, the cost is higher.  */\n-  if (GET_MODE_SIZE (mode) > 2)\n+  if (GET_MODE_SIZE (mode) > 2 && (shift % 16) != 0)\n     total *= GET_MODE_SIZE (mode) / 2;\n \n   /* When optimizing for size, make shift more costly so that\n@@ -5081,10 +5081,6 @@ m68hc11_rtx_costs (x, code, outer_code)\n           break;\n \n         case SImode:\n-          if (GET_CODE (XEXP (x, 1)) == CONST_INT\n-              && INTVAL (XEXP (x, 1)) == 65536)\n-            break;\n-\n         default:\n           total += m68hc11_cost->multSI;\n           break;"}, {"sha": "3114a47c5cbceede22a54d99dfbe1e414b910d02", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a62a69372b8e6f55dcc3d5cb86b661efc3ea999/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=5a62a69372b8e6f55dcc3d5cb86b661efc3ea999", "patch": "@@ -1481,14 +1481,16 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n      /* with two registers.  */\t\t\t\t\t\\\n      /* 'clr' is slow */\t\t\t\t\t\\\n    if ((OUTER_CODE) == SET && (RTX) == const0_rtx)\t\t\\\n-     return 1;\t\t\t\t\t\t\t\\\n+     /* After reload, the reload_cse pass checks the cost */    \\\n+     /* to change a SET into a PLUS.  Make const0 cheap.  */    \\\n+     return 1 - reload_completed;\t\t\t\t\\\n    else\t\t\t\t\t\t\t\t\\\n      return 0;\t\t\t\t\t\t\t\\\n  case CONST:\t\t\t\t\t\t\t\\\n  case LABEL_REF:\t\t\t\t\t\t\\\n  case SYMBOL_REF:\t\t\t\t\t\t\\\n    if ((OUTER_CODE) == SET)\t\t\t\t\t\\\n-      return 1;\t\t\t\t\t\t\t\\\n+      return 1 - reload_completed;\t\t\t\t\\\n    return 0;\t\t\t\t\t\t\t\\\n  case CONST_DOUBLE:\t\t\t\t\t\t\\\n    return 0;"}]}