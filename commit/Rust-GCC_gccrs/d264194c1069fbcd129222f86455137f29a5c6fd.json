{"sha": "d264194c1069fbcd129222f86455137f29a5c6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2NDE5NGMxMDY5ZmJjZDEyOTIyMmY4NjQ1NTEzN2YyOWE1YzZmZA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-04-16T14:24:31Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-04-16T14:24:31Z"}, "message": "PR fortran/63797 - Bogus ambiguous reference to 'sqrt'\n\nThe interface of an intrinsic procedure is automatically explicit.\nDo not write it to the module file to prevent wrong ambiguities on USE.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/63797\n\t* module.c (write_symtree): Do not write interface of intrinsic\n\tprocedure to module file for F2003 and newer.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/63797\n\t* gfortran.dg/pr63797.f90: New test.\n\nCo-authored-by: Paul Thomas <pault@gcc.gnu.org>", "tree": {"sha": "1b9bcf6ca249556709dcc5f15969d0405d796053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9bcf6ca249556709dcc5f15969d0405d796053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d264194c1069fbcd129222f86455137f29a5c6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d264194c1069fbcd129222f86455137f29a5c6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d264194c1069fbcd129222f86455137f29a5c6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d264194c1069fbcd129222f86455137f29a5c6fd/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "330ae1e54305f4755258d89469c1ad0d8479ef4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330ae1e54305f4755258d89469c1ad0d8479ef4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330ae1e54305f4755258d89469c1ad0d8479ef4c"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "089453caa03ba52b48cdfee19bb8dfd3005d37a8", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d264194c1069fbcd129222f86455137f29a5c6fd/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d264194c1069fbcd129222f86455137f29a5c6fd/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d264194c1069fbcd129222f86455137f29a5c6fd", "patch": "@@ -6218,6 +6218,17 @@ write_symtree (gfc_symtree *st)\n   if (check_unique_name (st->name))\n     return;\n \n+  /* From F2003 onwards, intrinsic procedures are no longer subject to\n+     the restriction, \"that an elemental intrinsic function here be of\n+     type integer or character and each argument must be an initialization\n+     expr of type integer or character\" is lifted so that intrinsic\n+     procedures can be over-ridden. This requires that the intrinsic\n+     symbol not appear in the module file, thereby preventing ambiguity\n+     when USEd.  */\n+  if (strcmp (sym->module, \"(intrinsic)\") == 0\n+      && (gfc_option.allow_std & GFC_STD_F2003))\n+    return;\n+\n   p = find_pointer (sym);\n   if (p == NULL)\n     gfc_internal_error (\"write_symtree(): Symbol not written\");"}, {"sha": "1131e8167b1a01702c192284f601d8870c14879d", "filename": "gcc/testsuite/gfortran.dg/pr63797.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d264194c1069fbcd129222f86455137f29a5c6fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr63797.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d264194c1069fbcd129222f86455137f29a5c6fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr63797.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr63797.f90?ref=d264194c1069fbcd129222f86455137f29a5c6fd", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do compile }\n+! PR63797 - Bogus ambiguous reference to 'sqrt'\n+\n+module mod1\n+  implicit none\n+  real, parameter :: z = sqrt (0.0)\n+  real            :: w = sqrt (1.0)\n+  interface\n+     pure real function sqrt_ifc (x)\n+       real, intent(in) :: x\n+     end function sqrt_ifc\n+  end interface\n+contains\n+  pure function myroot () result (f)\n+    procedure(sqrt_ifc), pointer :: f\n+    intrinsic :: sqrt\n+    f => sqrt\n+  end function myroot\n+end module mod1\n+\n+module mod2\n+  implicit none\n+  type t\n+     real :: a = 0.\n+  end type\n+  interface sqrt\n+     module procedure sqrt\n+  end interface\n+contains\n+  elemental function sqrt (a)\n+    type(t), intent(in) :: a\n+    type(t)             :: sqrt\n+    sqrt% a = a% a\n+  end function sqrt\n+end module mod2\n+\n+module mod3\n+  implicit none\n+  abstract interface\n+     function real_func (x)\n+       real              :: real_func\n+       real, intent (in) :: x\n+     end function real_func\n+  end interface\n+  intrinsic :: sqrt\n+  procedure(real_func), pointer :: real_root => sqrt\n+end module mod3\n+\n+program test\n+  use mod1\n+  use mod2\n+  use mod3\n+  implicit none\n+  type(t) :: x, y\n+  procedure(sqrt_ifc), pointer :: root\n+  root => myroot ()\n+  y    = sqrt (x)\n+  y% a = sqrt (x% a) + z - w + root (x% a)\n+  y% a = real_root (x% a)\n+end program test"}]}