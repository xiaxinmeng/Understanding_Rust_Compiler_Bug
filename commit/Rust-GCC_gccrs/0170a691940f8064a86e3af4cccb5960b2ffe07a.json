{"sha": "0170a691940f8064a86e3af4cccb5960b2ffe07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MGE2OTE5NDBmODA2NGE4NmUzYWY0Y2NjYjU5NjBiMmZmZTA3YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:13:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:13:48Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Aspect_Loop): when an aspect X and its classwise\n\tcorresponding aspect X'Class are allowed, proceed with analysis of the\n\taspect instead of skipping it.\n\n2011-08-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-flocon.adb, s-flocon.ads: Add a body for s-flocon.ads\n\tThis will allow to have an Ada implementation for the subprogram.\n\nFrom-SVN: r177341", "tree": {"sha": "f738736655765520696568a446cfc132b7965d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f738736655765520696568a446cfc132b7965d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0170a691940f8064a86e3af4cccb5960b2ffe07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0170a691940f8064a86e3af4cccb5960b2ffe07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0170a691940f8064a86e3af4cccb5960b2ffe07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0170a691940f8064a86e3af4cccb5960b2ffe07a/comments", "author": null, "committer": null, "parents": [{"sha": "deb4f5ba328e83f81427014132325c7a1d59b7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb4f5ba328e83f81427014132325c7a1d59b7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb4f5ba328e83f81427014132325c7a1d59b7bb"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "e9a56978c9438da753cd85ad6e4d40b6c420056e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0170a691940f8064a86e3af4cccb5960b2ffe07a", "patch": "@@ -1,3 +1,14 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Aspect_Loop): when an aspect X and its classwise\n+\tcorresponding aspect X'Class are allowed, proceed with analysis of the\n+\taspect instead of skipping it.\n+\n+2011-08-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-flocon.adb, s-flocon.ads: Add a body for s-flocon.ads\n+\tThis will allow to have an Ada implementation for the subprogram.\n+\n 2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Full_Type_Declaration): If the declaration is a"}, {"sha": "970d5563abd1a88a90f5f49f5158c8071eb6fce9", "filename": "gcc/ada/s-flocon.adb", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fs-flocon.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fs-flocon.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-flocon.adb?ref=0170a691940f8064a86e3af4cccb5960b2ffe07a", "patch": "@@ -0,0 +1,47 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                 S Y S T E M . F L O A T _ C O N T R O L                  --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                       Copyright (C) 2011, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This implementation calls an imported function.\n+\n+package body System.Float_Control is\n+\n+   -----------\n+   -- Reset --\n+   -----------\n+\n+   procedure Reset is\n+      procedure Init_Float;\n+      pragma Import (C, Init_Float, \"__gnat_init_float\");\n+   begin\n+      Init_Float;\n+   end Reset;\n+\n+end System.Float_Control;"}, {"sha": "fca271c46bc9ca67b874cfa95c6d5330640f60a0", "filename": "gcc/ada/s-flocon.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fs-flocon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fs-flocon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-flocon.ads?ref=0170a691940f8064a86e3af4cccb5960b2ffe07a", "patch": "@@ -37,6 +37,7 @@ package System.Float_Control is\n    --  (eg s-imgrea).\n \n    procedure Reset;\n+   pragma Inline (Reset);\n    --  Reset the floating-point processor to the default state needed to get\n    --  correct Ada semantics for the target. Some third party tools change\n    --  the settings for the floating-point processor. Reset can be called\n@@ -55,8 +56,4 @@ package System.Float_Control is\n    --\n    --  The call to Reset simply has no effect if the target environment\n    --  does not give rise to such concerns.\n-\n-private\n-   pragma Import (C, Reset, \"__gnat_init_float\");\n-\n end System.Float_Control;"}, {"sha": "ffc4723a4d9165117f0461e5ed25a449c1c546a5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0170a691940f8064a86e3af4cccb5960b2ffe07a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0170a691940f8064a86e3af4cccb5960b2ffe07a", "patch": "@@ -854,7 +854,7 @@ package body Sem_Ch13 is\n                      end if;\n                   end if;\n \n-                  goto Continue;\n+                  --  Allowed case of X and X'Class both specified\n                end if;\n \n                Next (Anod);"}]}