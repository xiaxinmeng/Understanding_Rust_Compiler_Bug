{"sha": "0b29309adf64a5545445c15b772eae3a615df81f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyOTMwOWFkZjY0YTU1NDU0NDVjMTViNzcyZWFlM2E2MTVkZjgxZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-27T20:09:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-27T20:09:27Z"}, "message": "config.gcc (m68hc11-*-*, [...]): Convert to new tm.h inclusion style.\n\n\t* config.gcc (m68hc11-*-*, m68hc12-*-*): Convert to new tm.h\n\tinclusion style.  xm-m68hc11.h no longer exists.\n\t* config/m68hc11/xm-m68hc11.h: Delete file.\n\t* config/m68hc11/m68hc12.h: Convert to new tm.h inclusion style.\n\n\t* config/m68hc11/m68hc11.h: Convert to new tm.h inclusion style.\n\tDon't define GCC_VERSION, N_, or PARAMS; don't include\n\tgansidecl.h or stdio.h.  Define inhibit_libc here.\n\tMake code conditioned on #if GCC_VERSION > 2095 unconditional.\n\tDelete code conditioned on #if GCC_VERSION == 2095.\n\n\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c:\n\tMake code conditioned on #if GCC_VERSION > 2095 unconditional.\n\tDelete code conditioned on #if GCC_VERSION == 2095.\n\nFrom-SVN: r40878", "tree": {"sha": "89486751bfd4edb64848cf6834fbe7b6f3cef570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89486751bfd4edb64848cf6834fbe7b6f3cef570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b29309adf64a5545445c15b772eae3a615df81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b29309adf64a5545445c15b772eae3a615df81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b29309adf64a5545445c15b772eae3a615df81f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b29309adf64a5545445c15b772eae3a615df81f/comments", "author": null, "committer": null, "parents": [{"sha": "ec0104b3bc0c3adcda826a1a8c6749e076a597e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0104b3bc0c3adcda826a1a8c6749e076a597e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0104b3bc0c3adcda826a1a8c6749e076a597e3"}], "stats": {"total": 197, "additions": 30, "deletions": 167}, "files": [{"sha": "19c4205afdd5dda9573cb46484b21179d109cc22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -1,3 +1,20 @@\n+2001-03-27  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* config.gcc (m68hc11-*-*, m68hc12-*-*): Convert to new tm.h\n+\tinclusion style.  xm-m68hc11.h no longer exists.\n+\t* config/m68hc11/xm-m68hc11.h: Delete file.\n+\t* config/m68hc11/m68hc12.h: Convert to new tm.h inclusion style.\n+\n+\t* config/m68hc11/m68hc11.h: Convert to new tm.h inclusion style.\n+\tDon't define GCC_VERSION, N_, or PARAMS; don't include\n+\tgansidecl.h or stdio.h.  Define inhibit_libc here.\n+\tMake code conditioned on #if GCC_VERSION > 2095 unconditional.\n+\tDelete code conditioned on #if GCC_VERSION == 2095.\n+\n+\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c:\n+\tMake code conditioned on #if GCC_VERSION > 2095 unconditional.\n+\tDelete code conditioned on #if GCC_VERSION == 2095.\n+\n 2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h: Include symcat.h.\n@@ -42,7 +59,7 @@\n \tflag_no_inline is on.\n \t* tree.h (DECL_FRAME_SIZE): Remove.\n \t(tree_decl): Adjust accordingly.\n-\t\n+\n 2001-03-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* combine.c (try_combine): Use memcpy, not bcopy.\n@@ -95,7 +112,7 @@ Mon Mar 26 14:35:18 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tSet xm_defines to MACRO=value instead.\n \n \t* i370/xm-mvs.h: Delete.\n-\t\n+\n \t* ns32k/xm-pc532-min.h: Likewise.\n \n Sun Mar 25 15:01:40 CEST 2001  Jan Hubicka  <jh@suse.cz>\n@@ -202,7 +219,7 @@ Sat Mar 24 21:13:28 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* varasm.c (make_decl_rtl): Add TREE_PUBLIC check to abort test.\n \t(assemble_alias): Call make_decl_rtl.\n-\t\n+\n Fri Mar 23 16:59:08 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* stor-layout.c (layout_type): Give OFFSET_TYPE a MODE_INT type.\n@@ -343,7 +360,7 @@ Wed Mar 21 20:33:26 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t(ix86_expand_branch): DImode comparison is simple for x86_64.\n \t(memory_address_length): Recognize memory addresses formed using\n \tPRE/POST modify.\n-\t(ix86_data_alignment, ix86_local_alignment): Align arrays to 16 bytes \n+\t(ix86_data_alignment, ix86_local_alignment): Align arrays to 16 bytes\n \tfor x86_64.\n \t* i386.h (TARGET_USE_SAHF): Disable for 64bit.\n \n@@ -411,7 +428,7 @@ Tue Mar 20 20:15:06 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \ti386_pe_mark_dllimport.\n \n 2001-03-20  David Billinghurst <David.Billinghurst@riotinto.com>\n-  \n+\n \t* config/i386/cygwin.h: Include <stdio.h> Declare and constify\n \tfunctions i386_pe_*.\n \n@@ -487,7 +504,7 @@ Mon Mar 19 18:53:54 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-03-16  Andrew Haley  <aph@cambridge.redhat.com>\n \n-        * config/ia64/libgcc-ia64.ver: Add __ia64_backtrace.\n+\t* config/ia64/libgcc-ia64.ver: Add __ia64_backtrace.\n \n 2001-03-19  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "7fe802b95f0376aae9cd49a0c5f0925d024380f1", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -1595,17 +1595,15 @@ m32r-*-elf*)\n \t;;\n # m68hc11 and m68hc12 share the same machine description.\n m68hc11-*-*|m6811-*-*)\n-\ttm_file=\"m68hc11/m68hc11.h\"\n-        xm_file=\"m68hc11/xm-m68hc11.h\"\n+\ttm_file=\"elfos.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n \ttmake_file=\"m68hc11/t-m68hc11-gas\"\n         ;;\n m68hc12-*-*|m6812-*-*)\n-\ttm_file=\"m68hc11/m68hc12.h\"\n+\ttm_file=\"m68hc11/m68hc12.h elfos.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n-        xm_file=\"m68hc11/xm-m68hc11.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n \ttmake_file=\"m68hc11/t-m68hc11-gas\""}, {"sha": "952e12b29cee74bb1424b61e055cd1923daeed97", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -53,11 +53,8 @@ extern void m68hc11_encode_section_info PARAMS((tree));\n #endif\n \n #ifdef RTX_CODE\n-#if GCC_VERSION > 2095\n extern rtx m68hc11_compare_op0;\n extern rtx m68hc11_compare_op1;\n-#endif\n-\n extern rtx m68hc11_soft_tmp_reg;\n extern rtx iy_reg;\n extern rtx d_reg;\n@@ -165,10 +162,9 @@ extern void m68hc11_function_epilogue PARAMS((FILE*,int));\n \n #endif /* TREE_CODE */\n \n-#if GCC_VERSION > 2095\n extern HOST_WIDE_INT m68hc11_min_offset;\n extern HOST_WIDE_INT m68hc11_max_offset;\n-#endif\n+\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */\n "}, {"sha": "b1cf541b4c2e7a68030f8a71d07d005d3f91b39a", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -37,9 +37,7 @@ Boston, MA 02111-1307, USA.\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n-#if GCC_VERSION > 2095\n #include \"tm_p.h\"\n-#endif\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n@@ -52,16 +50,8 @@ Boston, MA 02111-1307, USA.\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n-#if GCC_VERSION > 2095\n #include \"function.h\"\n #include \"ggc.h\"\n-#else\n-#include \"m68hc11-protos.h\"\n-#endif\n-\n-#if GCC_VERSION == 2095\n-extern char *version_string;\n-#endif\n \n static void print_options PARAMS ((FILE *));\n static void emit_move_after_reload PARAMS ((rtx, rtx, rtx));\n@@ -140,7 +130,6 @@ static void m68hc11_add_gc_roots PARAMS ((void));\n \n static int nb_soft_regs;\n \n-#if GCC_VERSION > 2095\n /* Flag defined in c-decl.c\n \n    Nonzero means don't recognize the non-ANSI builtin functions.\n@@ -151,16 +140,13 @@ static int nb_soft_regs;\n    conflict with newlib definition.  Don't define as external to\n    avoid a link problem for f77.  */\n int flag_no_nonansi_builtin;\n-#endif\n \n int\n m68hc11_override_options ()\n {\n   m68hc11_add_gc_roots ();\n \n-#if GCC_VERSION > 2095\n   flag_no_nonansi_builtin = 1;\n-#endif\n   \n   memset (m68hc11_reg_valid_for_index, 0,\n \t  sizeof (m68hc11_reg_valid_for_index));\n@@ -1324,8 +1310,6 @@ m68hc11_function_arg (cum, mode, type, named)\n   return NULL_RTX;\n }\n \n-#if GCC_VERSION > 2095\n-\n /* The \"standard\" implementation of va_start: just assign `nextarg' to\n    the variable.  */\n void\n@@ -1393,7 +1377,6 @@ m68hc11_va_arg (valist, type)\n \n   return addr;\n }\n-#endif\n \n /* If defined, a C expression which determines whether, and in which direction,\n    to pad out an argument with extra space.  The value should be of type\n@@ -4588,49 +4571,6 @@ m68hc11_reassign_regs (first)\n     }\n }\n \n-#if GCC_VERSION == 2095\n-/* Split all insns in the function.  If UPD_LIFE, update life info after.  */\n-\n-static int\n-m68hc11_split_all_insns (first)\n-     rtx first;\n-{\n-  rtx insn;\n-  int split_done = 0;\n-\n-  for (insn = first; insn; insn = NEXT_INSN (insn))\n-    {\n-      rtx last;\n-\n-      if (INSN_DELETED_P (insn))\n-\tcontinue;\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n-\tcontinue;\n-\n-      last = try_split (PATTERN (insn), insn, 1);\n-\n-      /* When not optimizing, the old insn will be still left around\n-         with only the 'deleted' bit set.  Transform it into a note\n-         to avoid confusion of subsequent processing.  */\n-      if (INSN_DELETED_P (insn))\n-\t{\n-\t  PUT_CODE (insn, NOTE);\n-\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-\t  NOTE_SOURCE_FILE (insn) = 0;\n-\t  split_done = 1;\n-\t}\n-\n-      if (last != insn)\n-\t{\n-\t  PUT_CODE (insn, NOTE);\n-\t  NOTE_SOURCE_FILE (insn) = 0;\n-\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-\t  split_done = 1;\n-\t}\n-    }\n-  return split_done;\n-}\n-#endif /* GCC_VERSION == 2095 */\n \n void\n m68hc11_reorg (first)\n@@ -4641,20 +4581,14 @@ m68hc11_reorg (first)\n   z_replacement_completed = 0;\n   z_reg = gen_rtx (REG, HImode, HARD_Z_REGNUM);\n \n-#if GCC_VERSION > 2095\n   /* Some RTX are shared at this point.  This breaks the Z register\n      replacement, unshare everything.  */\n   unshare_all_rtl_again (first);\n-#endif\n \n   /* Force a split of all splitable insn.  This is necessary for the\n      Z register replacement mechanism because we end up with basic insns.  */\n-#if GCC_VERSION > 2095\n   split_all_insns (0);\n   split_done = 1;\n-#else\n-  split_done = m68hc11_split_all_insns (first);\n-#endif\n \n   z_replacement_completed = 1;\n   m68hc11_reassign_regs (first);\n@@ -4668,14 +4602,8 @@ m68hc11_reorg (first)\n      description to use the best assembly directives.  */\n   if (optimize)\n     {\n-#if GCC_VERSION > 2095\n       find_basic_blocks (first, max_reg_num (), 0);\n       life_analysis (first, 0, PROP_REG_INFO | PROP_DEATH_NOTES);\n-#else\n-      find_basic_blocks (first, max_reg_num (), 0, 1);\n-      life_analysis (first, max_reg_num (), 0,\n-\t\t     1 /* SCz: dead code elim fails. Must investigate. */ );\n-#endif\n     }\n \n   z_replacement_completed = 2;\n@@ -4684,11 +4612,7 @@ m68hc11_reorg (first)\n      split after Z register replacement.  This gives more opportunities\n      for peephole (in particular for consecutives xgdx/xgdy).  */\n   if (optimize > 0)\n-#if GCC_VERSION > 2095\n     split_all_insns (0);\n-#else\n-    m68hc11_split_all_insns (first);\n-#endif\n \n   /* Once insns are split after the z_replacement_completed == 2,\n      we must not re-run the life_analysis.  The xgdx/xgdy patterns\n@@ -4996,9 +4920,6 @@ m68hc11_rtx_costs (x, code, outer_code)\n /* print_options - called at the start of the code generation for a\n    module. */\n \n-#if GCC_VERSION == 2095\n-extern char *main_input_filename;\n-#endif\n extern char *asm_file_name;\n \n #include <time.h>\n@@ -5052,7 +4973,6 @@ m68hc11_asm_file_start (out, main_file)\n static void\n m68hc11_add_gc_roots ()\n {\n-#if GCC_VERSION > 2095\n   ggc_add_rtx_root (&m68hc11_soft_tmp_reg, 1);\n   ggc_add_rtx_root (&ix_reg, 1);\n   ggc_add_rtx_root (&iy_reg, 1);\n@@ -5062,5 +4982,4 @@ m68hc11_add_gc_roots ()\n   ggc_add_rtx_root (&z_reg_qi, 1);\n   ggc_add_rtx_root (&stack_push_word, 1);\n   ggc_add_rtx_root (&stack_pop_word, 1);\n-#endif\n }"}, {"sha": "ba4eac7fe83d28a15079f176e459f03b2cccd7e9", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -33,18 +33,6 @@ Boston, MA 02111-1307, USA.\n \n */\n \n-#undef GCC_VERSION\n-#if 1 /* def N_*/\n-# define GCC_VERSION 2096\n-#else\n-# define GCC_VERSION 2095\n-\n-/* NLS support in 2.96 */\n-# define N_(X) X\n-#endif\n-\n-#include \"elfos.h\"\n-\n /*****************************************************************************\n **\n ** Controlling the Compilation Driver, `gcc'\n@@ -86,21 +74,8 @@ Boston, MA 02111-1307, USA.\n /* Names to predefine in the preprocessor for this target machine.  */\n #define CPP_PREDEFINES\t\t\"-Dmc68hc1x\"\n \n-\n-#ifndef IN_LIBGCC2\n-#  include <stdio.h>\n-#endif\n-\n-#include \"gansidecl.h\"\n-\n-#if GCC_VERSION == 2095\n-#ifndef PARAMS\n-#if defined(ANSI_PROTOTYPES) || defined(__cplusplus)\n-#define PARAMS(args) args\n-#else\n-#define PARAMS(args) ()\n-#endif\n-#endif\n+/* As an embedded target, we have no libc.  */\n+#define inhibit_libc\n \n /* Forward type declaration for prototypes definitions.\n    rtx_ptr is equivalent to rtx. Can't use the same name. */\n@@ -113,9 +88,7 @@ typedef union tree_node *tree_ptr;\n /* We can't declare enum machine_mode forward nor include 'machmode.h' here.\n    Prototypes defined here will use an int instead. It's better than no\n    prototype at all. */\n-\n typedef int enum_machine_mode;\n-#endif\n \n /*****************************************************************************\n **\n@@ -1297,11 +1270,7 @@ extern enum reg_class m68hc11_index_reg_class;\n \n \n /* Internal macro, return 1 if REGNO is a valid base register.  */\n-#if GCC_VERSION == 2095\n-# define REG_VALID_P(REGNO) ((REGNO) >= 0)\n-#else\n-# define REG_VALID_P(REGNO) (1)\t/* ? */\n-#endif\n+#define REG_VALID_P(REGNO) (1)\t/* ? */\n \n extern unsigned char m68hc11_reg_valid_for_base[FIRST_PSEUDO_REGISTER];\n #define REG_VALID_FOR_BASE_P(REGNO) \\\n@@ -1882,14 +1851,3 @@ extern int debug_m6811;\n extern int z_replacement_completed;\n extern int current_function_interrupt;\n extern int current_function_trap;\n-\n-#if GCC_VERSION == 2095\n-extern rtx_ptr iy_reg;\n-extern rtx_ptr iy_reg;\n-extern rtx_ptr d_reg;\n-extern rtx_ptr m68hc11_soft_tmp_reg;\n-extern rtx_ptr m68hc11_compare_op0;\n-extern rtx_ptr m68hc11_compare_op1;\n-extern long m68hc11_min_offset;\n-extern long m68hc11_max_offset;\n-#endif"}, {"sha": "7cd4dddc46875fe815c7314f9c067e02c730a716", "filename": "gcc/config/m68hc11/m68hc12.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29309adf64a5545445c15b772eae3a615df81f/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h?ref=0b29309adf64a5545445c15b772eae3a615df81f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for m68hc12.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr).\n \n This file is part of GNU CC.\n@@ -38,6 +38,3 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT\t\t(MASK_M6812)\n \n #define TARGET_M68HC12\n-\n-#include \"m68hc11/m68hc11.h\"\n-"}, {"sha": "9a21e5d729843035b5c00eb2efc94faa8af10687", "filename": "gcc/config/m68hc11/xm-m68hc11.h", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0104b3bc0c3adcda826a1a8c6749e076a597e3/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0104b3bc0c3adcda826a1a8c6749e076a597e3/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h?ref=ec0104b3bc0c3adcda826a1a8c6749e076a597e3", "patch": "@@ -1,22 +0,0 @@\n-/* Configuration for GNU C-compiler for Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-   Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define inhibit_libc"}]}