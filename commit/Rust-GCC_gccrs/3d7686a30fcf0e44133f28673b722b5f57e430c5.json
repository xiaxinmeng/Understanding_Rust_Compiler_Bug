{"sha": "3d7686a30fcf0e44133f28673b722b5f57e430c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3Njg2YTMwZmNmMGU0NDEzM2YyODY3M2I3MjJiNWY1N2U0MzBjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T12:56:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-19T08:02:14Z"}, "message": "Remove gimple_expr_type\n\nThis removes the transitional gimple_expr_type API.\n\n2021-07-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple.h (gimple_expr_type): Remove.\n\t* doc/gimple.texi: Remove gimple_expr_type documentation.", "tree": {"sha": "be689523b33c9e40321cb2aae46b35c4ffa957d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be689523b33c9e40321cb2aae46b35c4ffa957d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d7686a30fcf0e44133f28673b722b5f57e430c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7686a30fcf0e44133f28673b722b5f57e430c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7686a30fcf0e44133f28673b722b5f57e430c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7686a30fcf0e44133f28673b722b5f57e430c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce20b6be543824a07c3367253188d754b58667e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce20b6be543824a07c3367253188d754b58667e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce20b6be543824a07c3367253188d754b58667e"}], "stats": {"total": 50, "additions": 0, "deletions": 50}, "files": [{"sha": "5d89dbcc68d58b4cc715a60271ef4ac8ac6e908b", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7686a30fcf0e44133f28673b722b5f57e430c5/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7686a30fcf0e44133f28673b722b5f57e430c5/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=3d7686a30fcf0e44133f28673b722b5f57e430c5", "patch": "@@ -868,14 +868,6 @@ Return the basic block to which statement @code{G} belongs to.\n Return the lexical scope block holding statement @code{G}.\n @end deftypefn\n \n-@deftypefn {GIMPLE function} tree gimple_expr_type (gimple stmt)\n-Return the type of the main expression computed by @code{STMT}. Return\n-@code{void_type_node} if @code{STMT} computes nothing. This will only return\n-something meaningful for @code{GIMPLE_ASSIGN}, @code{GIMPLE_COND} and\n-@code{GIMPLE_CALL}.  For all other tuple codes, it will return\n-@code{void_type_node}.\n-@end deftypefn\n-\n @deftypefn {GIMPLE function} {enum tree_code} gimple_expr_code (gimple stmt)\n Return the tree code for the expression computed by @code{STMT}.  This\n is only meaningful for @code{GIMPLE_CALL}, @code{GIMPLE_ASSIGN} and"}, {"sha": "29da9198547eede4cf62d726bcbdc3d7899ff9e1", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7686a30fcf0e44133f28673b722b5f57e430c5/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7686a30fcf0e44133f28673b722b5f57e430c5/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3d7686a30fcf0e44133f28673b722b5f57e430c5", "patch": "@@ -6608,48 +6608,6 @@ is_gimple_resx (const gimple *gs)\n   return gimple_code (gs) == GIMPLE_RESX;\n }\n \n-/* Return the type of the main expression computed by STMT.  Return\n-   void_type_node if the statement computes nothing.  */\n-\n-static inline tree\n-gimple_expr_type (const gimple *stmt)\n-{\n-  enum gimple_code code = gimple_code (stmt);\n-  /* In general we want to pass out a type that can be substituted\n-     for both the RHS and the LHS types if there is a possibly\n-     useless conversion involved.  That means returning the\n-     original RHS type as far as we can reconstruct it.  */\n-  if (code == GIMPLE_CALL)\n-    {\n-      const gcall *call_stmt = as_a <const gcall *> (stmt);\n-      if (gimple_call_internal_p (call_stmt))\n-\tswitch (gimple_call_internal_fn (call_stmt))\n-\t  {\n-\t  case IFN_MASK_STORE:\n-\t  case IFN_SCATTER_STORE:\n-\t    return TREE_TYPE (gimple_call_arg (call_stmt, 3));\n-\t  case IFN_MASK_SCATTER_STORE:\n-\t    return TREE_TYPE (gimple_call_arg (call_stmt, 4));\n-\t  default:\n-\t    break;\n-\t  }\n-      return gimple_call_return_type (call_stmt);\n-    }\n-  else if (code == GIMPLE_ASSIGN)\n-    {\n-      if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n-        return TREE_TYPE (gimple_assign_rhs1 (stmt));\n-      else\n-        /* As fallback use the type of the LHS.  */\n-        return TREE_TYPE (gimple_get_lhs (stmt));\n-    }\n-  else if (code == GIMPLE_COND)\n-    return boolean_type_node;\n-  else if (code == GIMPLE_PHI)\n-    return TREE_TYPE (gimple_phi_result (stmt));\n-  else\n-    return void_type_node;\n-}\n \n /* Enum and arrays used for allocation stats.  Keep in sync with\n    gimple.c:gimple_alloc_kind_names.  */"}]}