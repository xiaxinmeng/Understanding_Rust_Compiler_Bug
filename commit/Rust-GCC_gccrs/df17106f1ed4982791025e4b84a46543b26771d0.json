{"sha": "df17106f1ed4982791025e4b84a46543b26771d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxNzEwNmYxZWQ0OTgyNzkxMDI1ZTRiODRhNDY1NDNiMjY3NzFkMA==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@codesourcery.com", "date": "2016-10-14T14:21:06Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "2016-10-14T14:21:06Z"}, "message": "mips.c (mips_prepare_pch_save): Initialize micromips_globals to zero.\n\n2016-10-13  Catherine Moore  <clm@codesourcery.com>\n\n\t* gcc/config/mips/mips.c (mips_prepare_pch_save): Initialize\n\tmicromips_globals to zero.\n\nFrom-SVN: r241165", "tree": {"sha": "102aa118fa263a36b4d75e3b22e244b4dbf789ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102aa118fa263a36b4d75e3b22e244b4dbf789ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df17106f1ed4982791025e4b84a46543b26771d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df17106f1ed4982791025e4b84a46543b26771d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df17106f1ed4982791025e4b84a46543b26771d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df17106f1ed4982791025e4b84a46543b26771d0/comments", "author": {"login": "CatherineMoore", "id": 15636327, "node_id": "MDQ6VXNlcjE1NjM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/15636327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CatherineMoore", "html_url": "https://github.com/CatherineMoore", "followers_url": "https://api.github.com/users/CatherineMoore/followers", "following_url": "https://api.github.com/users/CatherineMoore/following{/other_user}", "gists_url": "https://api.github.com/users/CatherineMoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/CatherineMoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CatherineMoore/subscriptions", "organizations_url": "https://api.github.com/users/CatherineMoore/orgs", "repos_url": "https://api.github.com/users/CatherineMoore/repos", "events_url": "https://api.github.com/users/CatherineMoore/events{/privacy}", "received_events_url": "https://api.github.com/users/CatherineMoore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1558d39e1cb361736d5b9515a135f4c13a578b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1558d39e1cb361736d5b9515a135f4c13a578b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1558d39e1cb361736d5b9515a135f4c13a578b04"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "efa78dd8e0a36ca00fbbe9081a98bcb4f53d6bb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df17106f1ed4982791025e4b84a46543b26771d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df17106f1ed4982791025e4b84a46543b26771d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df17106f1ed4982791025e4b84a46543b26771d0", "patch": "@@ -1,3 +1,8 @@\n+2016-10-14  Catherine Moore  <clm@codesourcery.com>\n+\n+\t* gcc/config/mips/mips.c (mips_prepare_pch_save): Initialize\n+\tmicromips_globals to zero.\n+\n 2016-10-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77979"}, {"sha": "ebec68eea94e52cd2cc7ce93757be68b374cb72b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df17106f1ed4982791025e4b84a46543b26771d0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df17106f1ed4982791025e4b84a46543b26771d0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=df17106f1ed4982791025e4b84a46543b26771d0", "patch": "@@ -20856,28 +20856,30 @@ mips_shift_truncation_mask (machine_mode mode)\n static void\n mips_prepare_pch_save (void)\n {\n-  /* We are called in a context where the current MIPS16 vs. non-MIPS16\n-     setting should be irrelevant.  The question then is: which setting\n-     makes most sense at load time?\n+  /* We are called in a context where the current compression vs.\n+     non-compression setting should be irrelevant.  The question then is:\n+     which setting makes most sense at load time?\n \n-     The PCH is loaded before the first token is read.  We should never\n-     have switched into MIPS16 mode by that point, and thus should not\n-     have populated mips16_globals.  Nor can we load the entire contents\n-     of mips16_globals from the PCH file, because mips16_globals contains\n-     a combination of GGC and non-GGC data.\n+     The PCH is loaded before the first token is read.  We should never have\n+     switched into a compression mode by that point, and thus should not have\n+     populated mips16_globals or micromips_globals.  Nor can we load the\n+     entire contents of mips16_globals or micromips_globals from the PCH file,\n+     because they contain a combination of GGC and non-GGC data.\n \n      There is therefore no point in trying save the GGC part of\n-     mips16_globals to the PCH file, or to preserve MIPS16ness across\n-     the PCH save and load.  The loading compiler would not have access\n-     to the non-GGC parts of mips16_globals (either from the PCH file,\n-     or from a copy that the loading compiler generated itself) and would\n-     have to call target_reinit anyway.\n-\n-     It therefore seems best to switch back to non-MIPS16 mode at\n-     save time, and to ensure that mips16_globals remains null after\n-     a PCH load.  */\n+     mips16_globals/micromips_globals to the PCH file, or to preserve a\n+     compression setting across the PCH save and load.  The loading compiler\n+     would not have access to the non-GGC parts of mips16_globals or\n+     micromips_globals (either from the PCH file, or from a copy that the\n+     loading compiler generated itself) and would have to call target_reinit\n+     anyway.\n+\n+     It therefore seems best to switch back to non-MIPS16 mode and\n+     non-microMIPS mode to save time, and to ensure that mips16_globals and\n+     micromips_globals remain null after a PCH load.  */\n   mips_set_compression_mode (0);\n   mips16_globals = 0;\n+  micromips_globals = 0;\n }\n \f\n /* Generate or test for an insn that supports a constant permutation.  */"}]}