{"sha": "e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2OGE4NDA2ZDhkMzc2MzVlMGRkYzlhOThhYjJjMjRiNjNlYzlmZg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-12-05T03:39:17Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1998-12-05T03:39:17Z"}, "message": "c4x.c (valid_parallel_load_store): Flog functionality from old valid_parallel_operands_4.\n\n\t* config/c4x/c4x.c (valid_parallel_load_store): Flog functionality\n\tfrom old valid_parallel_operands_4.\n\t(valid_parallel_operands_4): Check that operands for 4 operand\n\tparallel insns are valid, excluding load/store insns.\n\t* config/c4x/c4x.h (valid_parallel_load_store): Add prototype.\n\t* config/c4x/c4x.md (*movqf_parallel, *movqi_parallel): Use\n\tvalid_parallel_load_store instead of valid_parallel_operands_4.\n\t(*absqf2_movqf_clobber, *floatqiqf2_movqf_clobber,\n\t*negqf2_movqf_clobber, *absqi2_movqi_clobber,\n\t*fixqfqi2_movqi_clobber, *negqi2_movqi_clobber,\n\t*notqi_movqi_clobber): Use valid_parallel_operands_4.\n\t(*subqf3_movqf_clobber, *ashlqi3_movqi_clobber,\n\t*ashrqi3_movqi_clobber, *lshrqi3_movqi_clobber,\n\t*subqi3_movqi_clobber): Use valid_parallel_operands_5.\n\nFrom-SVN: r24108", "tree": {"sha": "5e6abb468904fd6efcd5265732002aaa7f1f7d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e6abb468904fd6efcd5265732002aaa7f1f7d82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/comments", "author": null, "committer": null, "parents": [{"sha": "cd20cc860bb0166c1673ef4ab14aa42a1c0be8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd20cc860bb0166c1673ef4ab14aa42a1c0be8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd20cc860bb0166c1673ef4ab14aa42a1c0be8fd"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "56b7cce8a59790999b5e718d9a27e29aff753274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "patch": "@@ -1,3 +1,20 @@\n+Sun Dec  6 00:28:16 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (valid_parallel_load_store): Flog functionality\n+\tfrom old valid_parallel_operands_4.\n+\t(valid_parallel_operands_4): Check that operands for 4 operand\n+\tparallel insns are valid, excluding load/store insns.\n+\t* config/c4x/c4x.h (valid_parallel_load_store): Add prototype.\n+\t* config/c4x/c4x.md (*movqf_parallel, *movqi_parallel): Use\n+\tvalid_parallel_load_store instead of valid_parallel_operands_4.\n+\t(*absqf2_movqf_clobber, *floatqiqf2_movqf_clobber, \n+\t*negqf2_movqf_clobber, *absqi2_movqi_clobber,\n+\t*fixqfqi2_movqi_clobber, *negqi2_movqi_clobber,\n+\t*notqi_movqi_clobber): Use valid_parallel_operands_4.\n+\t(*subqf3_movqf_clobber, *ashlqi3_movqi_clobber,\n+\t*ashrqi3_movqi_clobber, *lshrqi3_movqi_clobber,\n+\t*subqi3_movqi_clobber): Use valid_parallel_operands_5.\n+\n Sat Dec  5 23:52:01 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (iteration_info): Delete extern."}, {"sha": "a814c977f2f3ff92a47ca69dfd7b3ed2c3faf427", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "patch": "@@ -3209,8 +3209,7 @@ c4x_label_conflict (insn, jump, db)\n \n /* Validate combination of operands for parallel load/store instructions.  */\n \n-int\n-valid_parallel_operands_4 (operands, mode)\n+valid_parallel_load_store (operands, mode)\n      rtx *operands;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n@@ -3233,11 +3232,11 @@ valid_parallel_operands_4 (operands, mode)\n      should be REGs and the other 2 should be MEMs.  */\n \n   /* This test prevents the multipack pass from using this pattern if\n-     op0 is used as an index or base register in op3, since this combination\n-     will require reloading.  */\n+     op0 is used as an index or base register in op2 or op3, since\n+     this combination will require reloading.  */\n   if (GET_CODE (op0) == REG\n-      && GET_CODE (op3) == MEM\n-      && reg_mentioned_p (op0, XEXP (op3, 0)))\n+      && ((GET_CODE (op2) == MEM && reg_mentioned_p (op0, XEXP (op2, 0)))\n+\t  || (GET_CODE (op3) == MEM && reg_mentioned_p (op0, XEXP (op3, 0)))))\n     return 0;\n \n   /* LDI||LDI  */\n@@ -3265,27 +3264,54 @@ valid_parallel_operands_4 (operands, mode)\n }\n \n \n-/* We only use this to check operands 1 and 2 since these may be\n-   commutative.  It will need extending for the C32 opcodes.  */\n+int\n+valid_parallel_operands_4 (operands, mode)\n+     rtx *operands;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  int regs = 0;\n+  rtx op0 = operands[0];\n+  rtx op2 = operands[2];\n+\n+  if (GET_CODE (op0) == SUBREG)\n+    op0 = SUBREG_REG (op0);\n+  if (GET_CODE (op2) == SUBREG)\n+    op2 = SUBREG_REG (op2);\n+\n+  /* This test prevents the multipack pass from using this pattern if\n+     op0 is used as an index or base register in op2, since this combination\n+     will require reloading.  */\n+  if (GET_CODE (op0) == REG\n+      && GET_CODE (op2) == MEM\n+      && reg_mentioned_p (op0, XEXP (op2, 0)))\n+    return 0;\n+\n+  return 1;\n+}\n+\n+\n int\n valid_parallel_operands_5 (operands, mode)\n      rtx *operands;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int regs = 0;\n   rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n   rtx op2 = operands[2];\n   rtx op3 = operands[3];\n \n   if (GET_CODE (op0) == SUBREG)\n     op0 = SUBREG_REG (op0);\n+  if (GET_CODE (op1) == SUBREG)\n+    op1 = SUBREG_REG (op1);\n   if (GET_CODE (op2) == SUBREG)\n     op2 = SUBREG_REG (op2);\n \n   /* The patterns should only allow ext_low_reg_operand() or\n-     par_ind_operand() operands. */\n-\n-  if (GET_CODE (op0) == REG)\n+     par_ind_operand() operands.  Operands 1 and 2 may be commutative\n+     but only one of them can be a register.  */\n+  if (GET_CODE (op1) == REG)\n     regs++;\n   if (GET_CODE (op2) == REG)\n     regs++;"}, {"sha": "b2295516c5d8efc96cd6db47c57e172a994c3d40", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "patch": "@@ -2663,6 +2663,8 @@ extern int legitimize_operands ();\n \n extern int valid_operands ();\n \n+extern int valid_parallel_load_store ();\n+\n extern int valid_parallel_operands_4 ();\n \n extern int valid_parallel_operands_5 ();"}, {"sha": "380435c59f1f9081fb01efc367954bfc77869c71", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=e868a8406d8d37635e0ddc9a98ab2c24b63ec9ff", "patch": "@@ -1262,7 +1262,7 @@\n         (match_operand:QI 1 \"parallel_operand\" \"S<>,q,S<>,q\"))\n    (set (match_operand:QI 2 \"parallel_operand\" \"=q,S<>,S<>,q\")\n         (match_operand:QI 3 \"parallel_operand\" \"S<>,q,q,S<>\"))]\n-  \"valid_parallel_operands_4 (operands, QImode)\"\n+  \"valid_parallel_load_store (operands, QImode)\"\n   \"@\n    ldi1\\\\t%1,%0\\\\n||\\\\tldi2\\\\t%3,%2\n    sti1\\\\t%1,%0\\\\n||\\\\tsti2\\\\t%3,%2\n@@ -2952,7 +2952,7 @@\n        (match_operand:QF 1 \"parallel_operand\" \"S<>,q,S<>,q\"))\n   (set (match_operand:QF 2 \"parallel_operand\" \"=q,S<>,S<>,q\")\n        (match_operand:QF 3 \"parallel_operand\" \"S<>,q,q,S<>\"))]\n- \"valid_parallel_operands_4 (operands, QFmode)\"\n+ \"valid_parallel_load_store (operands, QFmode)\"\n  \"@\n   ldf1\\\\t%1,%0\\\\n||\\\\tldf2\\\\t%3,%2\n   stf1\\\\t%1,%0\\\\n||\\\\tstf2\\\\t%3,%2\n@@ -3800,7 +3800,7 @@\n    (set (match_operand:QF 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QF 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC_NOOV 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QFmode)\"\n   \"absf\\\\t%1,%0\\\\n||\\\\tstf\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3823,13 +3823,13 @@\n ; FLOAT/STF\n ;\n \n-(define_insn \"*floatqiqf_movqf_clobber\"\n+(define_insn \"*floatqiqf2_movqf_clobber\"\n   [(set (match_operand:QF 0 \"ext_low_reg_operand\" \"=q\")\n         (float:QF (match_operand:QI 1 \"par_ind_operand\" \"S<>\")))\n    (set (match_operand:QF 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QF 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QFmode)\"\n   \"float\\\\t%1,%0\\\\n||\\\\tstf\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3891,7 +3891,7 @@\n    (set (match_operand:QF 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QF 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QFmode)\"\n   \"negf\\\\t%1,%0\\\\n||\\\\tstf\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3902,11 +3902,11 @@\n (define_insn \"*subqf3_movqf_clobber\"\n   [(set (match_operand:QF 0 \"ext_low_reg_operand\" \"=q\")\n         (minus:QF (match_operand:QF 1 \"ext_low_reg_operand\" \"q\")\n-                 (match_operand:QF 2 \"par_ind_operand\" \"S<>\")))\n+                  (match_operand:QF 2 \"par_ind_operand\" \"S<>\")))\n    (set (match_operand:QF 3 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QF 4 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_5 (operands, QFmode)\"\n   \"subf3\\\\t%2,%1,%0\\\\n||\\\\tstf\\\\t%4,%3\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3925,7 +3925,7 @@\n    (set (match_operand:QI 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC_NOOV 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QImode)\"\n   \"absi\\\\t%1,%0\\\\n||\\\\tsti\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3970,22 +3970,22 @@\n    (set (match_operand:QI 3 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 4 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_5 (operands, QImode)\"\n   \"ash3\\\\t%2,%1,%0\\\\n||\\\\tsti\\\\t%4,%3\"\n   [(set_attr \"type\" \"binarycc\")])\n \n ;\n ; ASH(right)/STI \n ;\n \n-(define_insn \"*ashlqi3_movqi_clobber\"\n+(define_insn \"*ashrqi3_movqi_clobber\"\n   [(set (match_operand:QI 0 \"ext_low_reg_operand\" \"=q\")\n         (ashiftrt:QI (match_operand:QI 1 \"par_ind_operand\" \"S<>\")\n                      (neg:QI (match_operand:QI 2 \"ext_low_reg_operand\" \"q\"))))\n    (set (match_operand:QI 3 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 4 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_5 (operands, QImode)\"\n   \"ash3\\\\t%2,%1,%0\\\\n||\\\\tsti\\\\t%4,%3\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -3999,7 +3999,7 @@\n    (set (match_operand:QI 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QImode)\"\n   \"fix\\\\t%1,%0\\\\n||\\\\tsti\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -4014,7 +4014,7 @@\n    (set (match_operand:QI 3 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 4 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_5 (operands, QImode)\"\n   \"lsh3\\\\t%2,%1,%0\\\\n||\\\\tsti\\\\t%4,%3\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -4078,7 +4078,7 @@\n    (set (match_operand:QI 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QImode)\"\n   \"negi\\\\t%1,%0\\\\n||\\\\tsti\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -4092,7 +4092,7 @@\n    (set (match_operand:QI 2 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 3 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_4 (operands, QImode)\"\n   \"not\\\\t%1,%0\\\\n||\\\\tsti\\\\t%3,%2\"\n   [(set_attr \"type\" \"binarycc\")])\n \n@@ -4122,7 +4122,7 @@\n    (set (match_operand:QI 3 \"par_ind_operand\" \"=S<>\")\n         (match_operand:QI 4 \"ext_low_reg_operand\" \"q\"))\n    (clobber (reg:CC 21))]\n-  \"TARGET_PARALLEL\"\n+  \"TARGET_PARALLEL && valid_parallel_operands_5 (operands, QImode)\"\n   \"subi3\\\\t%2,%1,%0\\\\n||\\\\tsti\\\\t%4,%3\"\n   [(set_attr \"type\" \"binarycc\")])\n "}]}