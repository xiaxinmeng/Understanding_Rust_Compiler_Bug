{"sha": "9d1470857bd6726bc7f3613d79dcf9113da36283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQxNDcwODU3YmQ2NzI2YmM3ZjM2MTNkNzlkY2Y5MTEzZGEzNjI4Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-17T23:53:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-17T23:53:38Z"}, "message": "configure.in (HAVE_AS_DWARF2_DEBUG_LINE): New.\n\n        * configure.in (HAVE_AS_DWARF2_DEBUG_LINE): New.  Detect\n        whether as accepts .file/.loc and produces dwarf2 line info.\n        * dwarf2out.c (DWARF2_ASM_LINE_DEBUG_INFO): Default on if\n        the assembler supports it.\n        * config.in, configure: Regenerate.\n\nFrom-SVN: r37534", "tree": {"sha": "f71aaf32418bdb5d774b9090aea6ac661b94971b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f71aaf32418bdb5d774b9090aea6ac661b94971b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d1470857bd6726bc7f3613d79dcf9113da36283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1470857bd6726bc7f3613d79dcf9113da36283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1470857bd6726bc7f3613d79dcf9113da36283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1470857bd6726bc7f3613d79dcf9113da36283/comments", "author": null, "committer": null, "parents": [{"sha": "5b87e928be9fb73c2af33310bf110452f2fdd98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b87e928be9fb73c2af33310bf110452f2fdd98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b87e928be9fb73c2af33310bf110452f2fdd98f"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "1c5978c0338abe0d8f9ac9540187d300df8593b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d1470857bd6726bc7f3613d79dcf9113da36283", "patch": "@@ -1,3 +1,11 @@\n+2000-11-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.in (HAVE_AS_DWARF2_DEBUG_LINE): New.  Detect\n+\twhether as accepts .file/.loc and produces dwarf2 line info.\n+\t* dwarf2out.c (DWARF2_ASM_LINE_DEBUG_INFO): Default on if\n+\tthe assembler supports it.\n+\t* config.in, configure: Regenerate.\n+\n 2000-11-17  Richard Henderson  <rth@redhat.com>\n \n \t* fixinc/mkfixinc.sh: Don't disable fixincludes for any linux*."}, {"sha": "c710b1760d6a2910e81bd0d06f96fd1c2de53de9", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9d1470857bd6726bc7f3613d79dcf9113da36283", "patch": "@@ -443,6 +443,9 @@\n /* Define if your assembler supports offsetable %lo(). */\n #undef HAVE_AS_OFFSETABLE_LO10\n \n+/* Define if your assembler supports dwarf2 .file/.loc directives. */\n+#undef HAVE_AS_DWARF2_DEBUG_LINE\n+\n /* Define if you want to always select the new-abi for g++. */\n #undef ENABLE_NEW_GXX_ABI\n "}, {"sha": "2b93377595b3ab8508460ffb4ae3a460fa682f1f", "filename": "gcc/configure", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9d1470857bd6726bc7f3613d79dcf9113da36283", "patch": "@@ -5851,7 +5851,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n echo \"configure:5854: checking assembler alignment features\" >&5\n-gcc_cv_as_alignment_features=\n+gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n \t# bytes to skip when using .p2align.\n@@ -5899,7 +5899,7 @@ echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n echo \"configure:5902: checking assembler subsection support\" >&5\n-gcc_cv_as_subsections=\n+gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n     gcc_cv_as_subsections=\"working .subsection -1\"\n@@ -5939,7 +5939,7 @@ echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n echo \"configure:5942: checking assembler weak support\" >&5\n-gcc_cv_as_weak=\n+gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n     gcc_cv_as_weak=\"yes\"\n@@ -5962,7 +5962,7 @@ echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n echo \"configure:5965: checking assembler hidden support\" >&5\n-gcc_cv_as_hidden=\n+gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n     gcc_cv_as_hidden=\"yes\"\n@@ -6157,6 +6157,50 @@ EOF\n     ;;\n esac\n \n+echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n+echo \"configure:6162: checking assembler dwarf2 debug_line support\" >&5\n+gcc_cv_as_dwarf2_debug_line=no\n+# ??? Not all targets support dwarf2 debug_line, even within a version\n+# of gas.  Moreover, we need to emit a valid instruction to trigger any\n+# info to the output file.  So, as supported targets are added to gas 2.11,\n+# add some instruction here to (also) show we expect this might work.\n+# ??? Once 2.11 is released, probably need to add first known working\n+# version to the per-target configury.\n+case \"$target\" in\n+  i?86*-*-* | mips*-*-* | alpha*-*-*)\n+    insn=\"nop\"\n+    ;;\n+  ia64*-*-*)\n+    insn=\"nop 0\"\n+    ;;\n+  esac\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_dwarf2_debug_line=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '\t.file 0 \"conftest.s\"' > conftest.s\n+\techo '\t.loc 0 3 0' >> conftest.s\n+\techo \"\t$insn\" >> conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t   && grep debug_line conftest.o > /dev/null 2>&1 ; then\n+\t\tgcc_cv_as_dwarf2_debug_line=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+if test x\"$gcc_cv_as_dwarf2_debug_line\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_DWARF2_DEBUG_LINE 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n+\n # Figure out what language subdirectories are present.\n # Look if the user specified --enable-languages=\"...\"; if not, use\n # the environment variable $LANGUAGES if defined. $LANGUAGES might\n@@ -6285,7 +6329,7 @@ EOF\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:6289: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:6333: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "0dae0e046c76f388cfb03805150fbf7e4d4acf36", "filename": "gcc/configure.in", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=9d1470857bd6726bc7f3613d79dcf9113da36283", "patch": "@@ -1210,7 +1210,7 @@ AC_MSG_RESULT($gcc_cv_nm)\n \n # Figure out what assembler alignment features are present.\n AC_MSG_CHECKING(assembler alignment features)\n-gcc_cv_as_alignment_features=\n+gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n \t# bytes to skip when using .p2align.\n@@ -1245,7 +1245,7 @@ fi\n AC_MSG_RESULT($gcc_cv_as_alignment_features)\n \n AC_MSG_CHECKING(assembler subsection support)\n-gcc_cv_as_subsections=\n+gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n     gcc_cv_as_subsections=\"working .subsection -1\"\n@@ -1283,7 +1283,7 @@ fi\n AC_MSG_RESULT($gcc_cv_as_subsections)\n \n AC_MSG_CHECKING(assembler weak support)\n-gcc_cv_as_weak=\n+gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n     gcc_cv_as_weak=\"yes\"\n@@ -1302,7 +1302,7 @@ fi\n AC_MSG_RESULT($gcc_cv_as_weak)\n \n AC_MSG_CHECKING(assembler hidden support)\n-gcc_cv_as_hidden=\n+gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n     gcc_cv_as_hidden=\"yes\"\n@@ -1457,6 +1457,47 @@ changequote([,])dnl\n     ;;\n esac\n \n+AC_MSG_CHECKING(assembler dwarf2 debug_line support)\n+gcc_cv_as_dwarf2_debug_line=no\n+# ??? Not all targets support dwarf2 debug_line, even within a version\n+# of gas.  Moreover, we need to emit a valid instruction to trigger any\n+# info to the output file.  So, as supported targets are added to gas 2.11,\n+# add some instruction here to (also) show we expect this might work.\n+# ??? Once 2.11 is released, probably need to add first known working\n+# version to the per-target configury.\n+case \"$target\" in\n+  i?86*-*-* | mips*-*-* | alpha*-*-*)\n+    insn=\"nop\"\n+    ;;\n+  ia64*-*-*)\n+    insn=\"nop 0\"\n+    ;;\n+  esac\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_dwarf2_debug_line=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '\t.file 0 \"conftest.s\"' > conftest.s\n+\techo '\t.loc 0 3 0' >> conftest.s\n+\techo \"\t$insn\" >> conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t   && grep debug_line conftest.o > /dev/null 2>&1 ; then\n+\t\tgcc_cv_as_dwarf2_debug_line=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+if test x\"$gcc_cv_as_dwarf2_debug_line\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_DWARF2_DEBUG_LINE, 1,\n+\t  [Define if your assembler supports dwarf2 .file/.loc directives.])\n+fi\n+AC_MSG_RESULT($gcc_cv_as_dwarf2_debug_line)\n+\n # Figure out what language subdirectories are present.\n # Look if the user specified --enable-languages=\"...\"; if not, use\n # the environment variable $LANGUAGES if defined. $LANGUAGES might"}, {"sha": "dba0147989411b4897dd8e4af6182ed0555c2860", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1470857bd6726bc7f3613d79dcf9113da36283/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9d1470857bd6726bc7f3613d79dcf9113da36283", "patch": "@@ -3127,10 +3127,14 @@ extern int flag_traditional;\n   (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, DWARF2_ADDR_SIZE * 2) \\\n    - (2 * DWARF_OFFSET_SIZE + 4))\n \n-/* The default is to have gcc emit the line number tables.  */\n+/* Use assembler line directives if available.  */\n #ifndef DWARF2_ASM_LINE_DEBUG_INFO\n+#ifdef HAVE_AS_DWARF2_DEBUG_LINE\n+#define DWARF2_ASM_LINE_DEBUG_INFO 1\n+#else\n #define DWARF2_ASM_LINE_DEBUG_INFO 0\n #endif\n+#endif\n \n /* Define the architecture-dependent minimum instruction length (in bytes).\n    In this implementation of DWARF, this field is used for information"}]}