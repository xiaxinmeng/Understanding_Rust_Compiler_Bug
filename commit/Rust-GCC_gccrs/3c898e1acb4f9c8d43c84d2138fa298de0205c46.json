{"sha": "3c898e1acb4f9c8d43c84d2138fa298de0205c46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4OThlMWFjYjRmOWM4ZDQzYzg0ZDIxMzhmYTI5OGRlMDIwNWM0Ng==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-02-20T06:32:21Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-02-20T06:32:21Z"}, "message": "re PR target/60204 (struct with __m512i is mishandled in function parameter passing and return)\n\ngcc/\n\tPR target/60204\n\t* config/i386/i386.c (classify_argument): Pass structures of size\n\t64 bytes or less in register.\n\ntessuite/gcc/\n\tPR target/60204\n\t* gcc.target/x86_64/abi/avx512f/test_passing_structs.c: Update to\n\treflect abi fix.\n\t* gcc.target/x86_64/abi/avx512f/test_passing_unions.c: Ditto.\n\nFrom-SVN: r207933", "tree": {"sha": "79b5f86cacee6f99df78880a36cc5e1184e0a5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b5f86cacee6f99df78880a36cc5e1184e0a5ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c898e1acb4f9c8d43c84d2138fa298de0205c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c898e1acb4f9c8d43c84d2138fa298de0205c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c898e1acb4f9c8d43c84d2138fa298de0205c46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c898e1acb4f9c8d43c84d2138fa298de0205c46/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df62b4af2e7f921ee6adb2a70f62f6c3846139d0"}], "stats": {"total": 107, "additions": 25, "deletions": 82}, "files": [{"sha": "a401d853ed82df6888fb3e6cd4cd736f3a07d1f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c898e1acb4f9c8d43c84d2138fa298de0205c46", "patch": "@@ -1,3 +1,9 @@\n+2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\tPR target/60204\n+\t* config/i386/i386.c (classify_argument): Pass structures of size\n+\t64 bytes or less in register.\n+\n 2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n             Kirill Yukhin  <kirill.yukhin@intel.com>\n "}, {"sha": "cd14e520bc23b704083269f0d89256036d26823e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3c898e1acb4f9c8d43c84d2138fa298de0205c46", "patch": "@@ -6421,8 +6421,8 @@ classify_argument (enum machine_mode mode, const_tree type,\n       tree field;\n       enum x86_64_reg_class subclasses[MAX_CLASSES];\n \n-      /* On x86-64 we pass structures larger than 32 bytes on the stack.  */\n-      if (bytes > 32)\n+      /* On x86-64 we pass structures larger than 64 bytes on the stack.  */\n+      if (bytes > 64)\n \treturn 0;\n \n       for (i = 0; i < words; i++)"}, {"sha": "46ef4dc32cbad9a055496d64df42ae99e73fc0f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c898e1acb4f9c8d43c84d2138fa298de0205c46", "patch": "@@ -1,3 +1,10 @@\n+2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\tPR target/60204\n+\t* gcc.target/x86_64/abi/avx512f/test_passing_structs.c: Update to\n+\treflect abi fix.\n+\t* gcc.target/x86_64/abi/avx512f/test_passing_unions.c: Ditto.\n+\n 2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n "}, {"sha": "8daa676e7eb2f809571712b96dae1da775b3120b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512f/test_passing_structs.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_structs.c?ref=3c898e1acb4f9c8d43c84d2138fa298de0205c46", "patch": "@@ -26,16 +26,8 @@ check_struct_passing1 (struct m512_struct ms1 ATTRIBUTE_UNUSED,\n \t\t       struct m512_struct ms7 ATTRIBUTE_UNUSED,\n \t\t       struct m512_struct ms8 ATTRIBUTE_UNUSED)\n {\n-  /* Check the passing on the stack by comparing the address of the\n-     stack elements to the expected place on the stack.  */\n-  assert ((unsigned long)&ms1.x == rsp+8);\n-  assert ((unsigned long)&ms2.x == rsp+72);\n-  assert ((unsigned long)&ms3.x == rsp+136);\n-  assert ((unsigned long)&ms4.x == rsp+200);\n-  assert ((unsigned long)&ms5.x == rsp+264);\n-  assert ((unsigned long)&ms6.x == rsp+328);\n-  assert ((unsigned long)&ms7.x == rsp+392);\n-  assert ((unsigned long)&ms8.x == rsp+456);\n+  /* Check register contents.  */\n+  check_m512_arguments;\n }\n \n void"}, {"sha": "370d15b6273b101ac60fef23244e97fd56f77d7b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512f/test_passing_unions.c", "status": "modified", "additions": 8, "deletions": 70, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_unions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c898e1acb4f9c8d43c84d2138fa298de0205c46/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_unions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Ftest_passing_unions.c?ref=3c898e1acb4f9c8d43c84d2138fa298de0205c46", "patch": "@@ -52,24 +52,8 @@ check_union_passing1(union un1 u1 ATTRIBUTE_UNUSED,\n \t\t     union un1 u7 ATTRIBUTE_UNUSED,\n \t\t     union un1 u8 ATTRIBUTE_UNUSED)\n {\n-   /* Check the passing on the stack by comparing the address of the\n-      stack elements to the expected place on the stack.  */\n-  assert ((unsigned long)&u1.x == rsp+8);\n-  assert ((unsigned long)&u1.f == rsp+8);\n-  assert ((unsigned long)&u2.x == rsp+72);\n-  assert ((unsigned long)&u2.f == rsp+72);\n-  assert ((unsigned long)&u3.x == rsp+136);\n-  assert ((unsigned long)&u3.f == rsp+136);\n-  assert ((unsigned long)&u4.x == rsp+200);\n-  assert ((unsigned long)&u4.f == rsp+200);\n-  assert ((unsigned long)&u5.x == rsp+264);\n-  assert ((unsigned long)&u5.f == rsp+264);\n-  assert ((unsigned long)&u6.x == rsp+328);\n-  assert ((unsigned long)&u6.f == rsp+328);\n-  assert ((unsigned long)&u7.x == rsp+392);\n-  assert ((unsigned long)&u7.f == rsp+392);\n-  assert ((unsigned long)&u8.x == rsp+456);\n-  assert ((unsigned long)&u8.f == rsp+456);\n+  /* Check register contents.  */\n+  check_m512_arguments;\n }\n \n void\n@@ -82,24 +66,8 @@ check_union_passing2(union un2 u1 ATTRIBUTE_UNUSED,\n \t\t     union un2 u7 ATTRIBUTE_UNUSED,\n \t\t     union un2 u8 ATTRIBUTE_UNUSED)\n {\n-   /* Check the passing on the stack by comparing the address of the\n-      stack elements to the expected place on the stack.  */\n-  assert ((unsigned long)&u1.x == rsp+8);\n-  assert ((unsigned long)&u1.d == rsp+8);\n-  assert ((unsigned long)&u2.x == rsp+72);\n-  assert ((unsigned long)&u2.d == rsp+72);\n-  assert ((unsigned long)&u3.x == rsp+136);\n-  assert ((unsigned long)&u3.d == rsp+136);\n-  assert ((unsigned long)&u4.x == rsp+200);\n-  assert ((unsigned long)&u4.d == rsp+200);\n-  assert ((unsigned long)&u5.x == rsp+264);\n-  assert ((unsigned long)&u5.d == rsp+264);\n-  assert ((unsigned long)&u6.x == rsp+328);\n-  assert ((unsigned long)&u6.d == rsp+328);\n-  assert ((unsigned long)&u7.x == rsp+392);\n-  assert ((unsigned long)&u7.d == rsp+392);\n-  assert ((unsigned long)&u8.x == rsp+456);\n-  assert ((unsigned long)&u8.d == rsp+456);\n+  /* Check register contents.  */\n+  check_m512_arguments;\n }\n \n void\n@@ -112,24 +80,8 @@ check_union_passing3(union un3 u1 ATTRIBUTE_UNUSED,\n \t\t     union un3 u7 ATTRIBUTE_UNUSED,\n \t\t     union un3 u8 ATTRIBUTE_UNUSED)\n {\n-   /* Check the passing on the stack by comparing the address of the\n-      stack elements to the expected place on the stack.  */\n-  assert ((unsigned long)&u1.x == rsp+8);\n-  assert ((unsigned long)&u1.v == rsp+8);\n-  assert ((unsigned long)&u2.x == rsp+72);\n-  assert ((unsigned long)&u2.v == rsp+72);\n-  assert ((unsigned long)&u3.x == rsp+136);\n-  assert ((unsigned long)&u3.v == rsp+136);\n-  assert ((unsigned long)&u4.x == rsp+200);\n-  assert ((unsigned long)&u4.v == rsp+200);\n-  assert ((unsigned long)&u5.x == rsp+264);\n-  assert ((unsigned long)&u5.v == rsp+264);\n-  assert ((unsigned long)&u6.x == rsp+328);\n-  assert ((unsigned long)&u6.v == rsp+328);\n-  assert ((unsigned long)&u7.x == rsp+392);\n-  assert ((unsigned long)&u7.v == rsp+392);\n-  assert ((unsigned long)&u8.x == rsp+456);\n-  assert ((unsigned long)&u8.v == rsp+456);\n+  /* Check register contents.  */\n+  check_m512_arguments;\n }\n \n void\n@@ -160,22 +112,8 @@ check_union_passing6(union un6 u1 ATTRIBUTE_UNUSED,\n \t\t     union un6 u7 ATTRIBUTE_UNUSED,\n \t\t     union un6 u8 ATTRIBUTE_UNUSED)\n {\n-  assert ((unsigned long)&u1.x == rsp+8);\n-  assert ((unsigned long)&u1.v == rsp+8);\n-  assert ((unsigned long)&u2.x == rsp+72);\n-  assert ((unsigned long)&u2.v == rsp+72);\n-  assert ((unsigned long)&u3.x == rsp+136);\n-  assert ((unsigned long)&u3.v == rsp+136);\n-  assert ((unsigned long)&u4.x == rsp+200);\n-  assert ((unsigned long)&u4.v == rsp+200);\n-  assert ((unsigned long)&u5.x == rsp+264);\n-  assert ((unsigned long)&u5.v == rsp+264);\n-  assert ((unsigned long)&u6.x == rsp+328);\n-  assert ((unsigned long)&u6.v == rsp+328);\n-  assert ((unsigned long)&u7.x == rsp+392);\n-  assert ((unsigned long)&u7.v == rsp+392);\n-  assert ((unsigned long)&u8.x == rsp+456);\n-  assert ((unsigned long)&u8.v == rsp+456);\n+  /* Check register contents.  */\n+  check_m512_arguments;\n }\n \n #define check_union_passing1 WRAP_CALL(check_union_passing1)"}]}