{"sha": "99988b0e8b57b360719ce334fb6d278cb6722bec", "node_id": "C_kwDOANBUbNoAKDk5OTg4YjBlOGI1N2IzNjA3MTljZTMzNGZiNmQyNzhjYjY3MjJiZWM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-11T21:24:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-11T21:24:42Z"}, "message": "analyzer: fix memory leaks\n\nThese leaks all relate to logging within -fdump-analyzer[-stderr]\nor are one-time leaks; seen with valgrind.\n\ngcc/analyzer/ChangeLog:\n\t* checker-path.cc (state_change_event::get_desc): Call maybe_free\n\ton label_text temporaries.\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::prune_for_sm_diagnostic): Likewise.\n\t* engine.cc (exploded_graph::~exploded_graph): Fix leak of\n\tm_per_point_data and m_per_call_string_data values.  Simplify\n\tcleanup of m_per_function_stats and m_per_point_data values.\n\t(feasibility_state::maybe_update_for_edge): Fix leak of result of\n\tsuperedge::get_description.\n\t* region-model-manager.cc\n\t(region_model_manager::~region_model_manager): Move cleanup of\n\tm_setjmp_values to match the ordering of the fields within\n\tregion_model_manager.  Fix leak of values within\n\tm_repeated_values_map, m_bits_within_values_map,\n\tm_asm_output_values_map, and m_const_fn_result_values_map.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "ef9eceddeae90971712f6d181ab0def3561b9c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef9eceddeae90971712f6d181ab0def3561b9c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99988b0e8b57b360719ce334fb6d278cb6722bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99988b0e8b57b360719ce334fb6d278cb6722bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99988b0e8b57b360719ce334fb6d278cb6722bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99988b0e8b57b360719ce334fb6d278cb6722bec/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25addf8352e590fab926e9d16c2cd4a7ea0963b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25addf8352e590fab926e9d16c2cd4a7ea0963b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25addf8352e590fab926e9d16c2cd4a7ea0963b9"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "a61b3ee06750762a2ef76e83aa5e121199b476bf", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=99988b0e8b57b360719ce334fb6d278cb6722bec", "patch": "@@ -323,24 +323,28 @@ state_change_event::get_desc (bool can_colorize) const\n   if (m_sval)\n     {\n       label_text sval_desc = m_sval->get_desc ();\n+      label_text result;\n       if (m_origin)\n \t{\n \t  label_text origin_desc = m_origin->get_desc ();\n-\t  return make_label_text\n+\t  result = make_label_text\n \t    (can_colorize,\n \t     \"state of %qs: %qs -> %qs (origin: %qs)\",\n \t     sval_desc.m_buffer,\n \t     m_from->get_name (),\n \t     m_to->get_name (),\n \t     origin_desc.m_buffer);\n+\t  origin_desc.maybe_free ();\n \t}\n       else\n-\treturn make_label_text\n+\tresult = make_label_text\n \t  (can_colorize,\n \t   \"state of %qs: %qs -> %qs (NULL origin)\",\n \t   sval_desc.m_buffer,\n \t   m_from->get_name (),\n \t   m_to->get_name ());\n+      sval_desc.maybe_free ();\n+      return result;\n     }\n   else\n     {"}, {"sha": "2d49a3bc6ad1b1c44b1496d7490aebf440413155", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=99988b0e8b57b360719ce334fb6d278cb6722bec", "patch": "@@ -2171,6 +2171,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t  log (\"considering event %i (%s), with sval: %qs, state: %qs\",\n \t\t       idx, event_kind_to_string (base_event->m_kind),\n \t\t       sval_desc.m_buffer, state->get_name ());\n+\t\t  sval_desc.maybe_free ();\n \t\t}\n \t      else\n \t\tlog (\"considering event %i (%s), with global state: %qs\",\n@@ -2238,6 +2239,8 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t     \" switching var of interest from %qs to %qs\",\n \t\t\t     idx, sval_desc.m_buffer,\n \t\t\t     origin_sval_desc.m_buffer);\n+\t\t\tsval_desc.maybe_free ();\n+\t\t\torigin_sval_desc.maybe_free ();\n \t\t      }\n \t\t    sval = state_change->m_origin;\n \t\t  }\n@@ -2265,6 +2268,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\telse\n \t\t\t  log (\"filtering event %i: state change to %qs\",\n \t\t\t       idx, change_sval_desc.m_buffer);\n+\t\t\tchange_sval_desc.maybe_free ();\n \t\t      }\n \t\t    else\n \t\t      log (\"filtering event %i: global state change\", idx);\n@@ -2334,6 +2338,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t \" recording critical state for %qs at call\"\n \t\t\t \" from %qE in callee to %qE in caller\",\n \t\t\t idx, sval_desc.m_buffer, callee_var, caller_var);\n+\t\t    sval_desc.maybe_free ();\n \t\t  }\n \t\tif (expr.param_p ())\n \t\t  event->record_critical_state (caller_var, state);\n@@ -2377,6 +2382,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t     \" recording critical state for %qs at return\"\n \t\t\t     \" from %qE in caller to %qE in callee\",\n \t\t\t     idx, sval_desc.m_buffer, callee_var, callee_var);\n+\t\t\tsval_desc.maybe_free ();\n \t\t      }\n \t\t    if (expr.return_value_p ())\n \t\t      event->record_critical_state (callee_var, state);"}, {"sha": "033293243466867571bd9e8c01fd939e6850b664", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=99988b0e8b57b360719ce334fb6d278cb6722bec", "patch": "@@ -2340,15 +2340,14 @@ exploded_graph::exploded_graph (const supergraph &sg, logger *logger,\n \n exploded_graph::~exploded_graph ()\n {\n-  for (function_stat_map_t::iterator iter = m_per_function_stats.begin ();\n-       iter != m_per_function_stats.end ();\n-       ++iter)\n-    delete (*iter).second;\n-\n-  for (point_map_t::iterator iter = m_per_point_data.begin ();\n-       iter != m_per_point_data.end ();\n-       ++iter)\n-    delete (*iter).second;\n+  for (auto iter : m_per_point_data)\n+    delete iter.second;\n+  for (auto iter : m_per_function_data)\n+    delete iter.second;\n+  for (auto iter : m_per_function_stats)\n+    delete iter.second;\n+  for (auto iter : m_per_call_string_data)\n+    delete iter.second;\n }\n \n /* Subroutine for use when implementing __attribute__((tainted_args))\n@@ -4538,10 +4537,14 @@ feasibility_state::maybe_update_for_edge (logger *logger,\n   if (sedge)\n     {\n       if (logger)\n-\tlogger->log (\"  sedge: SN:%i -> SN:%i %s\",\n-\t\t     sedge->m_src->m_index,\n-\t\t     sedge->m_dest->m_index,\n-\t\t     sedge->get_description (false));\n+\t{\n+\t  char *desc = sedge->get_description (false);\n+\t  logger->log (\"  sedge: SN:%i -> SN:%i %s\",\n+\t\t       sedge->m_src->m_index,\n+\t\t       sedge->m_dest->m_index,\n+\t\t       desc);\n+\t  free (desc);\n+\t}\n \n       const gimple *last_stmt = src_point.get_supernode ()->get_last_stmt ();\n       if (!m_model.maybe_update_for_edge (*sedge, last_stmt, NULL, out_rc))"}, {"sha": "6d248c98fcfc87b684192b41e946de18fa83f541", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99988b0e8b57b360719ce334fb6d278cb6722bec/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=99988b0e8b57b360719ce334fb6d278cb6722bec", "patch": "@@ -97,12 +97,12 @@ region_model_manager::~region_model_manager ()\n        iter != m_unknowns_map.end (); ++iter)\n     delete (*iter).second;\n   delete m_unknown_NULL;\n-  for (setjmp_values_map_t::iterator iter = m_setjmp_values_map.begin ();\n-       iter != m_setjmp_values_map.end (); ++iter)\n-    delete (*iter).second;\n   for (poisoned_values_map_t::iterator iter = m_poisoned_values_map.begin ();\n        iter != m_poisoned_values_map.end (); ++iter)\n     delete (*iter).second;\n+  for (setjmp_values_map_t::iterator iter = m_setjmp_values_map.begin ();\n+       iter != m_setjmp_values_map.end (); ++iter)\n+    delete (*iter).second;\n   for (initial_values_map_t::iterator iter = m_initial_values_map.begin ();\n        iter != m_initial_values_map.end (); ++iter)\n     delete (*iter).second;\n@@ -118,6 +118,10 @@ region_model_manager::~region_model_manager ()\n   for (sub_values_map_t::iterator iter = m_sub_values_map.begin ();\n        iter != m_sub_values_map.end (); ++iter)\n     delete (*iter).second;\n+  for (auto iter : m_repeated_values_map)\n+    delete iter.second;\n+  for (auto iter : m_bits_within_values_map)\n+    delete iter.second;\n   for (unmergeable_values_map_t::iterator iter\n \t = m_unmergeable_values_map.begin ();\n        iter != m_unmergeable_values_map.end (); ++iter)\n@@ -131,6 +135,10 @@ region_model_manager::~region_model_manager ()\n   for (conjured_values_map_t::iterator iter = m_conjured_values_map.begin ();\n        iter != m_conjured_values_map.end (); ++iter)\n     delete (*iter).second;\n+  for (auto iter : m_asm_output_values_map)\n+    delete iter.second;\n+  for (auto iter : m_const_fn_result_values_map)\n+    delete iter.second;\n \n   /* Delete consolidated regions.  */\n   for (fndecls_map_t::iterator iter = m_fndecls_map.begin ();"}]}