{"sha": "5c1eb617e427a417dd7e1f79eee15b38362dbf53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxZWI2MTdlNDI3YTQxN2RkN2UxZjc5ZWVlMTViMzgzNjJkYmY1Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-10-04T11:23:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-04T11:23:18Z"}, "message": "re PR lto/47788 (New LTO failures)\n\n2012-10-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/47788\n\t* tree-streamer-out.c (write_ts_block_tree_pointers): For\n\tinlined functions outer scopes write the ultimate origin\n\tas BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION.\n\tDo not stream the fragment chains.\n\t* tree-streamer-in.c (lto_input_ts_block_tree_pointers): Likewise.\n\t* dwarf2out.c (gen_subprogram_die): Handle NULL DECL_INITIAL.\n\t(dwarf2out_decl): Always output DECL_ABSTRACT function decls.\n\nFrom-SVN: r192075", "tree": {"sha": "8bbabc4c74321f88facd411646c5cf2e47605c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bbabc4c74321f88facd411646c5cf2e47605c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1eb617e427a417dd7e1f79eee15b38362dbf53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1eb617e427a417dd7e1f79eee15b38362dbf53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1eb617e427a417dd7e1f79eee15b38362dbf53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1eb617e427a417dd7e1f79eee15b38362dbf53/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cb62ce3c795fe9991d20a294a53c1bbeadf2751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb62ce3c795fe9991d20a294a53c1bbeadf2751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb62ce3c795fe9991d20a294a53c1bbeadf2751"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "da28a560969c3ac3adcdde8a3bf4b0ac8bb5805e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c1eb617e427a417dd7e1f79eee15b38362dbf53", "patch": "@@ -1,3 +1,14 @@\n+2012-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/47788\n+\t* tree-streamer-out.c (write_ts_block_tree_pointers): For\n+\tinlined functions outer scopes write the ultimate origin\n+\tas BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION.\n+\tDo not stream the fragment chains.\n+\t* tree-streamer-in.c (lto_input_ts_block_tree_pointers): Likewise.\n+\t* dwarf2out.c (gen_subprogram_die): Handle NULL DECL_INITIAL.\n+\t(dwarf2out_decl): Always output DECL_ABSTRACT function decls.\n+\n 2012-10-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* dumpfile.h, dumpfile.c: Remove TDI_ada."}, {"sha": "95fc130c3dbf42bbdbdacc2224a0f4280f379220", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5c1eb617e427a417dd7e1f79eee15b38362dbf53", "patch": "@@ -17329,7 +17329,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n      a BLOCK node representing the function's outermost pair of curly braces,\n      and any blocks used for the base and member initializers of a C++\n      constructor function.  */\n-  if (! declaration && TREE_CODE (outer_scope) != ERROR_MARK)\n+  if (! declaration && outer_scope && TREE_CODE (outer_scope) != ERROR_MARK)\n     {\n       int call_site_note_count = 0;\n       int tail_call_site_note_count = 0;\n@@ -19622,8 +19622,14 @@ dwarf2out_decl (tree decl)\n \t inline\" functions as DECL_EXTERNAL, but we need to generate DWARF for\n \t them anyway. Note that the C++ front-end also plays some similar games\n \t for inline function definitions appearing within include files which\n-\t also contain `#pragma interface' pragmas.  */\n-      if (DECL_INITIAL (decl) == NULL_TREE)\n+\t also contain `#pragma interface' pragmas.\n+\n+\t If we are called from dwarf2out_abstract_function output a DIE\n+\t anyway.  We can end up here this way with early inlining and LTO\n+\t where the inlined function is output in a different LTRANS unit\n+\t or not at all.  */\n+      if (DECL_INITIAL (decl) == NULL_TREE\n+\t  && ! DECL_ABSTRACT (decl))\n \treturn;\n \n       /* If we're a nested function, initially use a parent of NULL; if we're"}, {"sha": "fc6984583e84edc4781eeb1f89365a459f336f6b", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=5c1eb617e427a417dd7e1f79eee15b38362dbf53", "patch": "@@ -792,22 +792,22 @@ static void\n lto_input_ts_block_tree_pointers (struct lto_input_block *ib,\n \t\t\t\t  struct data_in *data_in, tree expr)\n {\n-  /* Do not stream BLOCK_SOURCE_LOCATION.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n-     dwarf2out.c.  */\n   BLOCK_VARS (expr) = streamer_read_chain (ib, data_in);\n \n-  /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n-     dwarf2out.c.  */\n-\n   BLOCK_SUPERCONTEXT (expr) = stream_read_tree (ib, data_in);\n \n-  /* Do not stream BLOCK_ABSTRACT_ORIGIN.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n+  /* Stream BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION for\n+     the limited cases we can handle - those that represent inlined\n+     function scopes.  For the rest them on the floor instead of ICEing in\n      dwarf2out.c.  */\n-  BLOCK_FRAGMENT_ORIGIN (expr) = stream_read_tree (ib, data_in);\n-  BLOCK_FRAGMENT_CHAIN (expr) = stream_read_tree (ib, data_in);\n+  BLOCK_ABSTRACT_ORIGIN (expr) = stream_read_tree (ib, data_in);\n+  BLOCK_SOURCE_LOCATION (expr) = lto_input_location (ib, data_in);\n+  /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n+     for early inlined BLOCKs so drop it on the floor instead of ICEing in\n+     dwarf2out.c.  */\n+\n+  /* BLOCK_FRAGMENT_ORIGIN and BLOCK_FRAGMENT_CHAIN is not live at LTO\n+     streaming time.  */\n \n   /* We re-compute BLOCK_SUBBLOCKS of our parent here instead\n      of streaming it.  For non-BLOCK BLOCK_SUPERCONTEXTs we still"}, {"sha": "4fccd7720d2ef19f23b2ab73fe2b17ea6efd083a", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1eb617e427a417dd7e1f79eee15b38362dbf53/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=5c1eb617e427a417dd7e1f79eee15b38362dbf53", "patch": "@@ -685,21 +685,32 @@ write_ts_exp_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n static void\n write_ts_block_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n {\n-  /* Do not stream BLOCK_SOURCE_LOCATION.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n-     dwarf2out.c.  */\n   streamer_write_chain (ob, BLOCK_VARS (expr), ref_p);\n \n+  stream_write_tree (ob, BLOCK_SUPERCONTEXT (expr), ref_p);\n+\n+  /* Stream BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION for\n+     the limited cases we can handle - those that represent inlined\n+     function scopes.  For the rest them on the floor instead of ICEing in\n+     dwarf2out.c.  */\n+  if (inlined_function_outer_scope_p (expr))\n+    {\n+      tree ultimate_origin = block_ultimate_origin (expr);\n+      stream_write_tree (ob, ultimate_origin, ref_p);\n+      lto_output_location (ob, BLOCK_SOURCE_LOCATION (expr));\n+    }\n+  else\n+    {\n+      stream_write_tree (ob, NULL_TREE, ref_p);\n+      lto_output_location (ob, UNKNOWN_LOCATION);\n+    }\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n+     for early inlined BLOCKs so drop it on the floor instead of ICEing in\n      dwarf2out.c.  */\n \n-  stream_write_tree (ob, BLOCK_SUPERCONTEXT (expr), ref_p);\n-  /* Do not stream BLOCK_ABSTRACT_ORIGIN.  We cannot handle debug information\n-     for early inlining so drop it on the floor instead of ICEing in\n-     dwarf2out.c.  */\n-  stream_write_tree (ob, BLOCK_FRAGMENT_ORIGIN (expr), ref_p);\n-  stream_write_tree (ob, BLOCK_FRAGMENT_CHAIN (expr), ref_p);\n+  /* BLOCK_FRAGMENT_ORIGIN and BLOCK_FRAGMENT_CHAIN is not live at LTO\n+     streaming time.  */\n+\n   /* Do not output BLOCK_SUBBLOCKS.  Instead on streaming-in this\n      list is re-constructed from BLOCK_SUPERCONTEXT.  */\n }"}]}