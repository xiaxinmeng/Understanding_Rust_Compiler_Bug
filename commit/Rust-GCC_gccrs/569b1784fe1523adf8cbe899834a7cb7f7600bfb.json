{"sha": "569b1784fe1523adf8cbe899834a7cb7f7600bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5YjE3ODRmZTE1MjNhZGY4Y2JlODk5ODM0YTdjYjdmNzYwMGJmYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-20T07:09:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-20T07:09:27Z"}, "message": "cgraph.h (struct symtab_node): Add field in_init_priority_hash (set_init_priority...\n\n\t* cgraph.h (struct symtab_node): Add field in_init_priority_hash\n\t(set_init_priority, get_init_priority, set_fini_priority,\n\tget_fini_priority): New methods.\n\t* tree.c (init_priority_for_decl): Remove.\n\t(init_ttree): Do not initialize init priority.\n\t(decl_init_priority_lookup, decl_fini_priority_lookup): Rewrite.\n\t(decl_priority_info): Remove.\n\t(decl_init_priority_insert): Rewrite.\n\t(decl_fini_priority_insert): Rewrite.\n\t* tree.h (tree_priority_map_eq, tree_priority_map_hash,\n\ttree_priority_map_marked_p): Remove.\n\t* lto-cgraph.c (lto_output_node, input_node): Stream init priorities.\n\t* lto-streamer-out.c (hash_tree): Do not hash priorities.\n\t* tree-streamer-out.c (pack_ts_decl_with_vis_value_fields): Do\n\tnot output priorities.\n\t(pack_ts_function_decl_value_fields): Likewise.\n\t* tree-streamer-in.c (unpack_ts_decl_with_vis_value_fields): Do\n\tnot input priorities.\n\t(unpack_ts_function_decl_value_fields): Likewise.\n\t* symtab.c (symbol_priority_map): Declare.\n\t(init_priority_hash): Declare.\n\t(symtab_unregister_node): Unregister from priority hash, too.\n\t(symtab_node::get_init_priority, cgraph_node::get_fini_priority):\n\tNew methods.\n\t(symbol_priority_map_eq, symbol_priority_map_hash): New functions.\n\t(symbol_priority_info): New function.\n\t(symtab_node::set_init_priority, cgraph_node::set_fini_priority):\n\tNew methods.\n\t* tree-core.h (tree_priority_map): Remove.\n\n\t* lto.c (compare_tree_sccs_1): Do not compare priorities.\n\nFrom-SVN: r211838", "tree": {"sha": "913b51a061c1f0c708a012298e04dcb6036dec74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/913b51a061c1f0c708a012298e04dcb6036dec74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/569b1784fe1523adf8cbe899834a7cb7f7600bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b1784fe1523adf8cbe899834a7cb7f7600bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569b1784fe1523adf8cbe899834a7cb7f7600bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b1784fe1523adf8cbe899834a7cb7f7600bfb/comments", "author": null, "committer": null, "parents": [{"sha": "88f5cfcd2bdc48b3def09453babc02d2821f9a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f5cfcd2bdc48b3def09453babc02d2821f9a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f5cfcd2bdc48b3def09453babc02d2821f9a60"}], "stats": {"total": 309, "additions": 220, "deletions": 89}, "files": [{"sha": "387d9dcfdb27ae26b6c098183216e766c7954837", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -1,3 +1,35 @@\n+2014-06-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (struct symtab_node): Add field in_init_priority_hash\n+\t(set_init_priority, get_init_priority, set_fini_priority,\n+\tget_fini_priority): New methods.\n+\t* tree.c (init_priority_for_decl): Remove.\n+\t(init_ttree): Do not initialize init priority.\n+\t(decl_init_priority_lookup, decl_fini_priority_lookup): Rewrite.\n+\t(decl_priority_info): Remove.\n+\t(decl_init_priority_insert): Rewrite.\n+\t(decl_fini_priority_insert): Rewrite.\n+\t* tree.h (tree_priority_map_eq, tree_priority_map_hash,\n+\ttree_priority_map_marked_p): Remove.\n+\t* lto-cgraph.c (lto_output_node, input_node): Stream init priorities.\n+\t* lto-streamer-out.c (hash_tree): Do not hash priorities.\n+\t* tree-streamer-out.c (pack_ts_decl_with_vis_value_fields): Do\n+\tnot output priorities.\n+\t(pack_ts_function_decl_value_fields): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_decl_with_vis_value_fields): Do\n+\tnot input priorities.\n+\t(unpack_ts_function_decl_value_fields): Likewise.\n+\t* symtab.c (symbol_priority_map): Declare.\n+\t(init_priority_hash): Declare.\n+\t(symtab_unregister_node): Unregister from priority hash, too.\n+\t(symtab_node::get_init_priority, cgraph_node::get_fini_priority):\n+\tNew methods.\n+\t(symbol_priority_map_eq, symbol_priority_map_hash): New functions.\n+\t(symbol_priority_info): New function.\n+\t(symtab_node::set_init_priority, cgraph_node::set_fini_priority):\n+\tNew methods.\n+\t* tree-core.h (tree_priority_map): Remove.\n+\n 2014-06-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa-math-opts.c (do_shift_rotate, find_bswap_or_nop_1): Cast"}, {"sha": "8f8deae56c62a68c091941a8f55cd39a665549e2", "filename": "gcc/cgraph.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -130,6 +130,8 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \n   /* Set when symbol has address taken. */\n   unsigned address_taken : 1;\n+  /* Set when init priority is set.  */\n+  unsigned in_init_priority_hash : 1;\n \n \n   /* Ordering of all symtab entries.  */\n@@ -163,6 +165,7 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n       return x_comdat_group;\n     }\n \n+  /* Return comdat group as identifier_node.  */\n   tree get_comdat_group_id ()\n     {\n       if (x_comdat_group && TREE_CODE (x_comdat_group) != IDENTIFIER_NODE)\n@@ -208,6 +211,9 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Set section for symbol and its aliases.  */\n   void set_section (const char *section);\n   void set_section_for_node (const char *section);\n+\n+  void set_init_priority (priority_type priority);\n+  priority_type get_init_priority ();\n };\n \n enum availability\n@@ -497,6 +503,9 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n   /* True if this decl calls a COMDAT-local function.  This is set up in\n      compute_inline_parameters and inline_call.  */\n   unsigned calls_comdat_local : 1;\n+\n+  void set_fini_priority (priority_type priority);\n+  priority_type get_fini_priority ();\n };\n \n "}, {"sha": "54942cf9e364db211e975f9c49017d2567409352", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -557,6 +557,10 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n       streamer_write_uhwi_stream (ob->main_stream, node->thunk.virtual_value);\n     }\n   streamer_write_hwi_stream (ob->main_stream, node->profile_id);\n+  if (DECL_STATIC_CONSTRUCTOR (node->decl))\n+    streamer_write_hwi_stream (ob->main_stream, DECL_INIT_PRIORITY (node->decl));\n+  if (DECL_STATIC_DESTRUCTOR (node->decl))\n+    streamer_write_hwi_stream (ob->main_stream, DECL_FINI_PRIORITY (node->decl));\n }\n \n /* Output the varpool NODE to OB. \n@@ -1210,6 +1214,10 @@ input_node (struct lto_file_decl_data *file_data,\n   if (node->alias && !node->analyzed && node->weakref)\n     node->alias_target = get_alias_symbol (node->decl);\n   node->profile_id = streamer_read_hwi (ib);\n+  if (DECL_STATIC_CONSTRUCTOR (node->decl))\n+    SET_DECL_INIT_PRIORITY (node->decl, streamer_read_hwi (ib));\n+  if (DECL_STATIC_DESTRUCTOR (node->decl))\n+    SET_DECL_FINI_PRIORITY (node->decl, streamer_read_hwi (ib));\n   return node;\n }\n "}, {"sha": "05b2384a2281fd38014e24e4fc8643f50aee9006", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -827,8 +827,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t\t\t\t\t  | (DECL_CXX_CONSTRUCTOR_P (t) << 1)\n \t\t\t\t\t  | (DECL_CXX_DESTRUCTOR_P (t) << 2),\n \t\t\t\t\t  v);\n-      if (VAR_OR_FUNCTION_DECL_P (t))\n-\tv = iterative_hash_host_wide_int (DECL_INIT_PRIORITY (t), v);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n@@ -852,8 +850,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t\t\t\t\t| (DECL_LOOPING_CONST_OR_PURE_P (t) << 15), v);\n       if (DECL_BUILT_IN_CLASS (t) != NOT_BUILT_IN)\n \tv = iterative_hash_host_wide_int (DECL_FUNCTION_CODE (t), v);\n-      if (DECL_STATIC_DESTRUCTOR (t))\n-\tv = iterative_hash_host_wide_int (DECL_FINI_PRIORITY (t), v);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))"}, {"sha": "e9ff1beae69704d3e62720e4e0807180b2542572", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -1,3 +1,7 @@\n+2014-06-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (compare_tree_sccs_1): Do not compare priorities.\n+\n 2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (compare_tree_sccs_1): Do not compare DECL_TLS_MODEL."}, {"sha": "9cee3701e05ccbde5b2ab3f5a93281cda062d2ba", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -1300,8 +1300,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n           /* DECL_IN_TEXT_SECTION is set during final asm output only.  */\n \t  compare_values (DECL_IN_CONSTANT_POOL);\n \t}\n-      if (VAR_OR_FUNCTION_DECL_P (t1))\n-\tcompare_values (DECL_INIT_PRIORITY);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n@@ -1328,8 +1326,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_CXX_DESTRUCTOR_P);\n       if (DECL_BUILT_IN_CLASS (t1) != NOT_BUILT_IN)\n \tcompare_values (DECL_FUNCTION_CODE);\n-      if (DECL_STATIC_DESTRUCTOR (t1))\n-\tcompare_values (DECL_FINI_PRIORITY);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))"}, {"sha": "13895657856edb73009de8ce0cfd1a4468439103", "filename": "gcc/symtab.c", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -64,6 +64,17 @@ static GTY((param_is (section_hash_entry))) htab_t section_hash;\n /* Hash table used to convert assembler names into nodes.  */\n static GTY((param_is (symtab_node))) htab_t assembler_name_hash;\n \n+/* Map from a symbol to initialization/finalization priorities.  */\n+struct GTY(()) symbol_priority_map {\n+  symtab_node *symbol;\n+  priority_type init;\n+  priority_type fini;\n+};\n+\n+/* Hash table used to hold init priorities.  */\n+static GTY ((param_is (struct symbol_priority_map)))\n+  htab_t init_priority_hash;\n+\n /* Linked list of symbol table nodes.  */\n symtab_node *symtab_nodes;\n \n@@ -337,6 +348,16 @@ symtab_unregister_node (symtab_node *node)\n     }\n   if (!is_a <varpool_node *> (node) || !DECL_HARD_REGISTER (node->decl))\n     unlink_from_assembler_name_hash (node, false);\n+  if (node->in_init_priority_hash)\n+    {\n+      struct symbol_priority_map in;\n+      void **slot;\n+      in.symbol = node;\n+\n+      slot = htab_find_slot (init_priority_hash, &in, NO_INSERT);\n+      if (slot)\n+\thtab_clear_slot (init_priority_hash, slot);\n+    }\n }\n \n \n@@ -1176,6 +1197,122 @@ symtab_node::set_section (const char *section)\n   symtab_for_node_and_aliases (this, set_section_1, const_cast<char *>(section), true);\n }\n \n+/* Return the initialization priority.  */\n+\n+priority_type\n+symtab_node::get_init_priority ()\n+{\n+  struct symbol_priority_map *h;\n+  struct symbol_priority_map in;\n+\n+  if (!this->in_init_priority_hash)\n+    return DEFAULT_INIT_PRIORITY;\n+  in.symbol = this;\n+  h = (struct symbol_priority_map *) htab_find (init_priority_hash, &in);\n+  return h ? h->init : DEFAULT_INIT_PRIORITY;\n+}\n+\n+/* Return the finalization priority.  */\n+\n+priority_type\n+cgraph_node::get_fini_priority ()\n+{\n+  struct symbol_priority_map *h;\n+  struct symbol_priority_map in;\n+\n+  if (!this->in_init_priority_hash)\n+    return DEFAULT_INIT_PRIORITY;\n+  in.symbol = this;\n+  h = (struct symbol_priority_map *) htab_find (init_priority_hash, &in);\n+  return h ? h->fini : DEFAULT_INIT_PRIORITY;\n+}\n+\n+/* Return true if the from tree in both priority maps are equal.  */\n+\n+int\n+symbol_priority_map_eq (const void *va, const void *vb)\n+{\n+  const struct symbol_priority_map *const a = (const struct symbol_priority_map *) va,\n+    *const b = (const struct symbol_priority_map *) vb;\n+  return (a->symbol == b->symbol);\n+}\n+\n+/* Hash a from symbol in a symbol_priority_map.  */\n+\n+unsigned int\n+symbol_priority_map_hash (const void *item)\n+{\n+  return htab_hash_pointer (((const struct symbol_priority_map *)item)->symbol);\n+}\n+\n+/* Return the initialization and finalization priority information for\n+   DECL.  If there is no previous priority information, a freshly\n+   allocated structure is returned.  */\n+\n+static struct symbol_priority_map *\n+symbol_priority_info (struct symtab_node *symbol)\n+{\n+  struct symbol_priority_map in;\n+  struct symbol_priority_map *h;\n+  void **loc;\n+\n+  in.symbol = symbol;\n+  if (!init_priority_hash)\n+    init_priority_hash = htab_create_ggc (512, symbol_priority_map_hash,\n+                                          symbol_priority_map_eq, 0);\n+\n+  loc = htab_find_slot (init_priority_hash, &in, INSERT);\n+  h = (struct symbol_priority_map *) *loc;\n+  if (!h)\n+    {\n+      h = ggc_cleared_alloc<symbol_priority_map> ();\n+      *loc = h;\n+      h->symbol = symbol;\n+      h->init = DEFAULT_INIT_PRIORITY;\n+      h->fini = DEFAULT_INIT_PRIORITY;\n+      symbol->in_init_priority_hash = true;\n+    }\n+\n+  return h;\n+}\n+\n+/* Set initialization priority to PRIORITY.  */\n+\n+void\n+symtab_node::set_init_priority (priority_type priority)\n+{\n+  struct symbol_priority_map *h;\n+\n+  if (is_a <cgraph_node *> (this))\n+    gcc_assert (DECL_STATIC_CONSTRUCTOR (this->decl));\n+\n+  if (priority == DEFAULT_INIT_PRIORITY)\n+    {\n+      gcc_assert (get_init_priority() == priority);\n+      return;\n+    }\n+  h = symbol_priority_info (this);\n+  h->init = priority;\n+}\n+\n+/* Set fialization priority to PRIORITY.  */\n+\n+void\n+cgraph_node::set_fini_priority (priority_type priority)\n+{\n+  struct symbol_priority_map *h;\n+\n+  gcc_assert (DECL_STATIC_DESTRUCTOR (this->decl));\n+\n+  if (priority == DEFAULT_INIT_PRIORITY)\n+    {\n+      gcc_assert (get_fini_priority() == priority);\n+      return;\n+    }\n+  h = symbol_priority_info (this);\n+  h->fini = priority;\n+}\n+\n /* Worker for symtab_resolve_alias.  */\n \n static bool"}, {"sha": "52d93ec5f942a12e8fa74e4c0409770451456fca", "filename": "gcc/tree-core.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -1761,13 +1761,6 @@ struct GTY(()) tree_int_map {\n   unsigned int to;\n };\n \n-/* Map from a tree to initialization/finalization priorities.  */\n-struct GTY(()) tree_priority_map {\n-  struct tree_map_base base;\n-  priority_type init;\n-  priority_type fini;\n-};\n-\n /* Map from a decl tree to a tree vector.  */\n struct GTY(()) tree_vec_map {\n   struct tree_map_base base;"}, {"sha": "83b6a691619c4193178045a8acb5ff5cd9c15a9f", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -288,12 +288,6 @@ unpack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n       DECL_CXX_CONSTRUCTOR_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n       DECL_CXX_DESTRUCTOR_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n     }\n-  if (VAR_OR_FUNCTION_DECL_P (expr))\n-    {\n-      priority_type p;\n-      p = (priority_type) bp_unpack_var_len_unsigned (bp);\n-      SET_DECL_INIT_PRIORITY (expr, p);\n-    }\n }\n \n \n@@ -336,12 +330,6 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n \t    fatal_error (\"target specific builtin not available\");\n \t}\n     }\n-  if (DECL_STATIC_DESTRUCTOR (expr))\n-    {\n-      priority_type p;\n-      p = (priority_type) bp_unpack_var_len_unsigned (bp);\n-      SET_DECL_FINI_PRIORITY (expr, p);\n-    }\n }\n \n "}, {"sha": "d4d0f1b9d87671b5628c15d2c1e92d09b00de4d7", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -256,8 +256,6 @@ pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n       bp_pack_value (bp, DECL_CXX_CONSTRUCTOR_P (expr), 1);\n       bp_pack_value (bp, DECL_CXX_DESTRUCTOR_P (expr), 1);\n     }\n-  if (VAR_OR_FUNCTION_DECL_P (expr))\n-    bp_pack_var_len_unsigned (bp, DECL_INIT_PRIORITY (expr));\n }\n \n \n@@ -291,8 +289,6 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_LOOPING_CONST_OR_PURE_P (expr), 1);\n   if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n     bp_pack_value (bp, DECL_FUNCTION_CODE (expr), 11);\n-  if (DECL_STATIC_DESTRUCTOR (expr))\n-    bp_pack_var_len_unsigned (bp, DECL_FINI_PRIORITY (expr));\n }\n \n "}, {"sha": "240fa92d83371769eea413df1f87486674a2f8cd", "filename": "gcc/tree.c", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -219,10 +219,6 @@ static GTY ((if_marked (\"tree_decl_map_marked_p\"), param_is (struct tree_decl_ma\n static GTY ((if_marked (\"tree_vec_map_marked_p\"), param_is (struct tree_vec_map)))\n      htab_t debug_args_for_decl;\n \n-static GTY ((if_marked (\"tree_priority_map_marked_p\"),\n-\t     param_is (struct tree_priority_map)))\n-  htab_t init_priority_for_decl;\n-\n static void set_type_quals (tree, int);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n@@ -573,8 +569,6 @@ init_ttree (void)\n \n   value_expr_for_decl = htab_create_ggc (512, tree_decl_map_hash,\n \t\t\t\t\t tree_decl_map_eq, 0);\n-  init_priority_for_decl = htab_create_ggc (512, tree_priority_map_hash,\n-\t\t\t\t\t    tree_priority_map_eq, 0);\n \n   int_cst_hash_table = htab_create_ggc (1024, int_cst_hash_hash,\n \t\t\t\t\tint_cst_hash_eq, NULL);\n@@ -6492,81 +6486,63 @@ tree_decl_map_hash (const void *item)\n priority_type\n decl_init_priority_lookup (tree decl)\n {\n-  struct tree_priority_map *h;\n-  struct tree_map_base in;\n+  symtab_node *snode = symtab_get_node (decl);\n \n-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n-  in.from = decl;\n-  h = (struct tree_priority_map *) htab_find (init_priority_for_decl, &in);\n-  return h ? h->init : DEFAULT_INIT_PRIORITY;\n+  if (!snode)\n+    return DEFAULT_INIT_PRIORITY;\n+  return\n+    snode->get_init_priority ();\n }\n \n /* Return the finalization priority for DECL.  */\n \n priority_type\n decl_fini_priority_lookup (tree decl)\n {\n-  struct tree_priority_map *h;\n-  struct tree_map_base in;\n-\n-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n-  in.from = decl;\n-  h = (struct tree_priority_map *) htab_find (init_priority_for_decl, &in);\n-  return h ? h->fini : DEFAULT_INIT_PRIORITY;\n-}\n-\n-/* Return the initialization and finalization priority information for\n-   DECL.  If there is no previous priority information, a freshly\n-   allocated structure is returned.  */\n-\n-static struct tree_priority_map *\n-decl_priority_info (tree decl)\n-{\n-  struct tree_priority_map in;\n-  struct tree_priority_map *h;\n-  void **loc;\n-\n-  in.base.from = decl;\n-  loc = htab_find_slot (init_priority_for_decl, &in, INSERT);\n-  h = (struct tree_priority_map *) *loc;\n-  if (!h)\n-    {\n-      h = ggc_cleared_alloc<tree_priority_map> ();\n-      *loc = h;\n-      h->base.from = decl;\n-      h->init = DEFAULT_INIT_PRIORITY;\n-      h->fini = DEFAULT_INIT_PRIORITY;\n-    }\n+  cgraph_node *node = cgraph_get_node (decl);\n \n-  return h;\n+  if (!node)\n+    return DEFAULT_INIT_PRIORITY;\n+  return\n+    node->get_fini_priority ();\n }\n \n /* Set the initialization priority for DECL to PRIORITY.  */\n \n void\n decl_init_priority_insert (tree decl, priority_type priority)\n {\n-  struct tree_priority_map *h;\n+  struct symtab_node *snode;\n \n-  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n   if (priority == DEFAULT_INIT_PRIORITY)\n-    return;\n-  h = decl_priority_info (decl);\n-  h->init = priority;\n+    {\n+      snode = symtab_get_node (decl);\n+      if (!snode)\n+\treturn;\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    snode = varpool_node_for_decl (decl);\n+  else\n+    snode = cgraph_get_create_node (decl);\n+  snode->set_init_priority (priority);\n }\n \n /* Set the finalization priority for DECL to PRIORITY.  */\n \n void\n decl_fini_priority_insert (tree decl, priority_type priority)\n {\n-  struct tree_priority_map *h;\n+  struct cgraph_node *node;\n \n-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n   if (priority == DEFAULT_INIT_PRIORITY)\n-    return;\n-  h = decl_priority_info (decl);\n-  h->fini = priority;\n+    {\n+      node = cgraph_get_node (decl);\n+      if (!node)\n+\treturn;\n+    }\n+  else\n+    node = cgraph_get_create_node (decl);\n+  node->set_fini_priority (priority);\n }\n \n /* Print out the statistics for the DECL_DEBUG_EXPR hash table.  */"}, {"sha": "a5dbc5f6595a6e30cf16b9912079baa02bc8eb99", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b1784fe1523adf8cbe899834a7cb7f7600bfb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=569b1784fe1523adf8cbe899834a7cb7f7600bfb", "patch": "@@ -4345,10 +4345,6 @@ extern unsigned int tree_decl_map_hash (const void *);\n #define tree_int_map_hash tree_map_base_hash\n #define tree_int_map_marked_p tree_map_base_marked_p\n \n-#define tree_priority_map_eq tree_map_base_eq\n-#define tree_priority_map_hash tree_map_base_hash\n-#define tree_priority_map_marked_p tree_map_base_marked_p\n-\n #define tree_vec_map_eq tree_map_base_eq\n #define tree_vec_map_hash tree_decl_map_hash\n #define tree_vec_map_marked_p tree_map_base_marked_p"}]}