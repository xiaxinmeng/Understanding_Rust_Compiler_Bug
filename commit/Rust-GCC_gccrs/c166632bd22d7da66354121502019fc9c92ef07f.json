{"sha": "c166632bd22d7da66354121502019fc9c92ef07f", "node_id": "C_kwDOANBUbNoAKGMxNjY2MzJiZDIyZDdkYTY2MzU0MTIxNTAyMDE5ZmM5YzkyZWYwN2Y", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-05T22:16:34Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-05T22:17:25Z"}, "message": "i386: Introduce V2QImode minmax, abs and uavgv2hi3_ceil [PR103861]\n\nAdd V2QImode minmax, abs and uavxv2qi3_ceil operations with SSE registers.\n\n2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/mmx.md (VI_16_32): New mode iterator.\n\t(VI1_16_32): Ditto.\n\t(mmxvecsize): Handle V2QI mode.\n\t(<smaxmin:code><mode>3): Rename from <smaxmin:code>v4qi3.\n\tUse VI1_16_32 mode iterator.\n\t(<umaxmin:code><mode>3): Rename from <umaxmin:code>v4qi3.\n\tUse VI1_16_32 mode iterator.\n\t(abs<mode>2): Use VI_16_32 mode iterator.\n\t(uavgv2qi3_ceil): New insn pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* gcc.target/i386/pr103861-3.c: New test.\n\t* g++.dg/vect/slp-pr98855.cc (dg-final): Check that\n\tno vectorization using SLP was performed.", "tree": {"sha": "655eb9e07f2ae681402f495219989279080ad060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655eb9e07f2ae681402f495219989279080ad060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c166632bd22d7da66354121502019fc9c92ef07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166632bd22d7da66354121502019fc9c92ef07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c166632bd22d7da66354121502019fc9c92ef07f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166632bd22d7da66354121502019fc9c92ef07f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ef832a9e8d6a950a439e34e576eb4cb202dc48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ef832a9e8d6a950a439e34e576eb4cb202dc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ef832a9e8d6a950a439e34e576eb4cb202dc48"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "a409bb7c6c60e434e65210f343daf883c8b6982a", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=c166632bd22d7da66354121502019fc9c92ef07f", "patch": "@@ -63,6 +63,12 @@\n ;; 4-byte integer vector modes\n (define_mode_iterator VI_32 [V4QI V2HI])\n \n+;; 4-byte and 2-byte integer vector modes\n+(define_mode_iterator VI_16_32 [V4QI V2QI V2HI])\n+\n+;; 4-byte and 2-byte QImode vector modes\n+(define_mode_iterator VI1_16_32 [V4QI V2QI])\n+\n ;; V2S* modes\n (define_mode_iterator V2FI [V2SF V2SI])\n \n@@ -71,7 +77,8 @@\n \n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr mmxvecsize\n-  [(V8QI \"b\") (V4QI \"b\") (V4HI \"w\") (V2HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n+  [(V8QI \"b\") (V4QI \"b\") (V2QI \"b\")\n+   (V4HI \"w\") (V2HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n \n (define_mode_attr mmxdoublemode\n   [(V8QI \"V8HI\") (V4HI \"V4SI\")])\n@@ -2140,11 +2147,11 @@\n \t  (match_operand:V4HI 2 \"register_operand\")))]\n   \"TARGET_MMX_WITH_SSE\")\n \n-(define_insn \"<code>v4qi3\"\n-  [(set (match_operand:V4QI 0 \"register_operand\" \"=Yr,*x,Yv\")\n-\t(smaxmin:V4QI\n-\t  (match_operand:V4QI 1 \"register_operand\" \"%0,0,Yv\")\n-\t  (match_operand:V4QI 2 \"register_operand\" \"Yr,*x,Yv\")))]\n+(define_insn \"<code><mode>3\"\n+  [(set (match_operand:VI1_16_32 0 \"register_operand\" \"=Yr,*x,Yv\")\n+\t(smaxmin:VI1_16_32\n+\t  (match_operand:VI1_16_32 1 \"register_operand\" \"%0,0,Yv\")\n+\t  (match_operand:VI1_16_32 2 \"register_operand\" \"Yr,*x,Yv\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n    p<maxmin_int>b\\t{%2, %0|%0, %2}\n@@ -2218,11 +2225,11 @@\n \t  (match_operand:V8QI 2 \"register_operand\")))]\n   \"TARGET_MMX_WITH_SSE\")\n \n-(define_insn \"<code>v4qi3\"\n-  [(set (match_operand:V4QI 0 \"register_operand\" \"=x,Yw\")\n-        (umaxmin:V4QI\n-\t  (match_operand:V4QI 1 \"register_operand\" \"%0,Yw\")\n-\t  (match_operand:V4QI 2 \"register_operand\" \"x,Yw\")))]\n+(define_insn \"<code><mode>3\"\n+  [(set (match_operand:VI1_16_32 0 \"register_operand\" \"=x,Yw\")\n+        (umaxmin:VI1_16_32\n+\t  (match_operand:VI1_16_32 1 \"register_operand\" \"%0,Yw\")\n+\t  (match_operand:VI1_16_32 2 \"register_operand\" \"x,Yw\")))]\n   \"TARGET_SSE2\"\n   \"@\n    p<maxmin_int>b\\t{%2, %0|%0, %2}\n@@ -2269,9 +2276,9 @@\n   \"TARGET_SSSE3 && TARGET_MMX_WITH_SSE\")\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=Yv\")\n-\t(abs:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"Yv\")))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=Yv\")\n+\t(abs:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"Yv\")))]\n   \"TARGET_SSSE3\"\n   \"%vpabs<mmxvecsize>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n@@ -4351,6 +4358,26 @@\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"uavgv2qi3_ceil\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=x,Yw\")\n+\t(truncate:V2QI\n+\t  (lshiftrt:V2HI\n+\t    (plus:V2HI\n+\t      (plus:V2HI\n+\t\t(zero_extend:V2HI\n+\t\t  (match_operand:V2QI 1 \"register_operand\" \"%0,Yw\"))\n+\t\t(zero_extend:V2HI\n+\t\t  (match_operand:V2QI 2 \"register_operand\" \"x,Yw\")))\n+\t      (const_vector:V2HI [(const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   pavgb\\t{%2, %0|%0, %2}\n+   vpavgb\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"uavgv2hi3_ceil\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n \t(truncate:V2HI"}, {"sha": "ff59eb95aca0fbabc863e6b226c82b3c9ac3aa02", "filename": "gcc/testsuite/g++.dg/vect/slp-pr98855.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr98855.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr98855.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr98855.cc?ref=c166632bd22d7da66354121502019fc9c92ef07f", "patch": "@@ -81,6 +81,5 @@ void encrypt_n(const uint8_t in[], uint8_t out[], size_t blocks, uint32_t *EK)\n     }\n }\n \n-// This used to work on { target x86_64-*-* i?86-*-* } but a fix in SLP\n-// discovery makes us trip over the threshold again.\n-// { dg-final { scan-tree-dump-times \"not vectorized: vectorization is not profitable\" 2 \"slp1\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump \"not vectorized: vectorization is not profitable\" \"slp1\" } }\n+// { dg-final { scan-tree-dump-not \"vectorizing stmts using SLP\" \"slp1\" } }"}, {"sha": "e5099ea0a8334968291e4e1e8d52aa2f3b4bb275", "filename": "gcc/testsuite/gcc.target/i386/pr103861-3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166632bd22d7da66354121502019fc9c92ef07f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-3.c?ref=c166632bd22d7da66354121502019fc9c92ef07f", "patch": "@@ -0,0 +1,66 @@\n+/* PR target/103861 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+\n+char r[2], a[2], b[2];\n+unsigned char ur[2], ua[2], ub[2];\n+\n+void maxs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] > b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxsb\" } } */\n+\n+void maxu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = ua[i] > ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxub\" } } */\n+\n+void mins (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] < b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminsb\" } } */\n+\n+void minu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = ua[i] < ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminub\" } } */\n+\n+void _abs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] < 0 ? -a[i] : a[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pabsb\" } } */\n+\n+void avgu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = (ua[i] + ub[i] + 1) >> 1;\n+}\n+\n+/* { dg-final { scan-assembler \"pavgb\" { xfail *-*-* } } } */"}]}