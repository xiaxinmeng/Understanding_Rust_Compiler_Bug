{"sha": "a81037cea642bb6a7e037b9a421ed5dde9c0465b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxMDM3Y2VhNjQyYmI2YTdlMDM3YjlhNDIxZWQ1ZGRlOWMwNDY1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-12-17T15:46:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-12-17T15:46:20Z"}, "message": "re PR target/88502 (Inline built-in asinh, acosh, atanh for -ffast-math)\n\n\tPR target/88502\n\t* internal-fn.def (ACOSH): New.\n\t(ASINH): Ditto.\n\t(ATANH): Ditto.\n\t* optabs.def (acosh_optab): New.\n\t(asinh_optab): Ditto.\n\t(atanh_optab): Ditto.\n\t* config/i386/i386-protos.h (ix86_emit_i387_asinh): New prototype.\n\t(ix86_emit_i387_acosh): Ditto.\n\t(ix86_emit_i387_atanh): Ditto.\n\t* config/i386/i386.c (ix86_emit_i387_asinh): New function.\n\t(ix86_emit_i387_acosh): Ditto.\n\t(ix86_emit_i387_atanh): Ditto.\n\t* config/i386/i386.md (asinhxf2): New expander.\n\t(asinh<mode>2):\tDitto.\n\t(acoshxf2): Ditto.\n\t(acosh<mode>2): Ditto.\n\t(atanhxf2): Ditto.\n\t(atanh<mode>2): Ditto.\n\nFrom-SVN: r267204", "tree": {"sha": "055afdd6a3cdc9b124aa092b6b0c592e50e92a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055afdd6a3cdc9b124aa092b6b0c592e50e92a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81037cea642bb6a7e037b9a421ed5dde9c0465b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81037cea642bb6a7e037b9a421ed5dde9c0465b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81037cea642bb6a7e037b9a421ed5dde9c0465b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81037cea642bb6a7e037b9a421ed5dde9c0465b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61c43d82f2cd0ae82ea54e072ece7f4d22299d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c43d82f2cd0ae82ea54e072ece7f4d22299d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c43d82f2cd0ae82ea54e072ece7f4d22299d85"}], "stats": {"total": 243, "additions": 243, "deletions": 0}, "files": [{"sha": "8f79e1dd99d3671e4676b557c805997f2f62a0c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -1,3 +1,25 @@\n+2018-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/88502\n+\t* internal-fn.def (ACOSH): New.\n+\t(ASINH): Ditto.\n+\t(ATANH): Ditto.\n+\t* optabs.def (acosh_optab): New.\n+\t(asinh_optab): Ditto.\n+\t(atanh_optab): Ditto.\n+\t* config/i386/i386-protos.h (ix86_emit_i387_asinh): New prototype.\n+\t(ix86_emit_i387_acosh): Ditto.\n+\t(ix86_emit_i387_atanh): Ditto.\n+\t* config/i386/i386.c (ix86_emit_i387_asinh): New function.\n+\t(ix86_emit_i387_acosh): Ditto.\n+\t(ix86_emit_i387_atanh): Ditto.\n+\t* config/i386/i386.md (asinhxf2): New expander.\n+\t(asinh<mode>2):\tDitto.\n+\t(acoshxf2): Ditto.\n+\t(acosh<mode>2): Ditto.\n+\t(atanhxf2): Ditto.\n+\t(atanh<mode>2): Ditto.\n+\n 2018-12-17  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config.gcc (powerpc-ibm-aix6.*): Delete extra_headers."}, {"sha": "ae118079b34a612a5d9c3c7df3a68bd79062d26b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -170,6 +170,9 @@ extern void x86_function_profiler (FILE *, int);\n extern void x86_emit_floatuns (rtx [2]);\n extern void ix86_emit_fp_unordered_jump (rtx);\n \n+extern void ix86_emit_i387_asinh (rtx, rtx);\n+extern void ix86_emit_i387_acosh (rtx, rtx);\n+extern void ix86_emit_i387_atanh (rtx, rtx);\n extern void ix86_emit_i387_log1p (rtx, rtx);\n extern void ix86_emit_i387_round (rtx, rtx);\n extern void ix86_emit_swdivsf (rtx, rtx, rtx, machine_mode);"}, {"sha": "b9c459198b4245b51643b5d01a708edac0bf7d40", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -44054,6 +44054,135 @@ ix86_emit_fp_unordered_jump (rtx label)\n   JUMP_LABEL (insn) = label;\n }\n \n+/* Output code to perform an asinh XFmode calculation.  */\n+\n+void ix86_emit_i387_asinh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx cst1, tmp;\n+  rtx_code_label *jump_label = gen_label_rtx ();\n+  rtx_insn *insn;\n+\n+  /* e2 = sqrt (op1^2 + 1.0) + 1.0 */\n+  emit_insn (gen_mulxf3 (e1, op1, op1));\n+  cst1 = force_reg (XFmode, CONST1_RTX (XFmode));\n+  emit_insn (gen_addxf3 (e2, e1, cst1));\n+  emit_insn (gen_sqrtxf2 (e2, e2));\n+  emit_insn (gen_addxf3 (e2, e2, cst1));\n+\n+  /* e1 = e1 / e2 */\n+  emit_insn (gen_divxf3 (e1, e1, e2));\n+\n+  /* scratch = fxam (op1) */\n+  emit_insn (gen_fxamxf2_i387 (scratch, op1));\n+\n+  /* e1 = e1 + |op1| */\n+  emit_insn (gen_absxf2 (e2, op1));\n+  emit_insn (gen_addxf3 (e1, e1, e2));\n+\n+  /* e2 = log1p (e1) */\n+  ix86_emit_i387_log1p (e2, e1);\n+\n+  /* flags = signbit (op1) */\n+  emit_insn (gen_testqi_ext_1_ccno (scratch, GEN_INT (0x02)));\n+\n+  /* if (flags) then e2 = -e2 */\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t      gen_rtx_EQ (VOIDmode, flags, const0_rtx),\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n+\t\t\t      pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = jump_label;\n+\n+  emit_insn (gen_negxf2 (e2, e2));\n+\n+  emit_label (jump_label);\n+  LABEL_NUSES (jump_label) = 1;\n+\n+  emit_move_insn (op0, e2);\n+}\n+\n+/* Output code to perform an acosh XFmode calculation.  */\n+\n+void ix86_emit_i387_acosh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx cst1 = force_reg (XFmode, CONST1_RTX (XFmode));\n+\n+  /* e2 = sqrt (op1 + 1.0) */\n+  emit_insn (gen_addxf3 (e2, op1, cst1));\n+  emit_insn (gen_sqrtxf2 (e2, e2));\n+\n+  /* e1 = sqrt (op1 - 1.0) */\n+  emit_insn (gen_subxf3 (e1, op1, cst1));\n+  emit_insn (gen_sqrtxf2 (e1, e1));\n+\n+  /* e1 = e1 * e2 */\n+  emit_insn (gen_mulxf3 (e1, e1, e2));\n+\n+  /* e1 = e1 + op1 */\n+  emit_insn (gen_addxf3 (e1, e1, op1));\n+\n+  /* op0 = log (e1) */\n+  emit_insn (gen_logxf2 (op0, e1));\n+}\n+\n+/* Output code to perform an atanh XFmode calculation.  */\n+\n+void ix86_emit_i387_atanh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx half = const_double_from_real_value (dconsthalf, XFmode);\n+  rtx cst1, tmp;\n+  rtx_code_label *jump_label = gen_label_rtx ();\n+  rtx_insn *insn;\n+\n+  /* scratch = fxam (op1) */\n+  emit_insn (gen_fxamxf2_i387 (scratch, op1));\n+\n+  /* e2 = |op1| */\n+  emit_insn (gen_absxf2 (e2, op1));\n+\n+  /* e1 = -(e2 + e2) / (e2 + 1.0) */\n+  cst1 = force_reg (XFmode, CONST1_RTX (XFmode));\n+  emit_insn (gen_addxf3 (e1, e2, cst1));\n+  emit_insn (gen_addxf3 (e2, e2, e2));\n+  emit_insn (gen_negxf2 (e2, e2));\n+  emit_insn (gen_divxf3 (e1, e2, e1));\n+\n+  /* e2 = log1p (e1) */\n+  ix86_emit_i387_log1p (e2, e1);\n+\n+  /* flags = signbit (op1) */\n+  emit_insn (gen_testqi_ext_1_ccno (scratch, GEN_INT (0x02)));\n+\n+  /* if (!flags) then e2 = -e2 */\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t      gen_rtx_NE (VOIDmode, flags, const0_rtx),\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n+\t\t\t      pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = jump_label;\n+\n+  emit_insn (gen_negxf2 (e2, e2));\n+\n+  emit_label (jump_label);\n+  LABEL_NUSES (jump_label) = 1;\n+\n+  /* op0 = 0.5 * e2) */\n+  half = force_reg (XFmode, half);\n+  emit_insn (gen_mulxf3 (op0, e2, half));\n+}\n+\n /* Output code to perform a log1p XFmode calculation.  */\n \n void ix86_emit_i387_log1p (rtx op0, rtx op1)"}, {"sha": "6e29427e30c248f3dd58d006e9646d6bf5d65d3f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -15483,6 +15483,89 @@\n   DONE;\n })\n \n+(define_expand \"asinhxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_finite_math_only\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_asinh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"asinh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_finite_math_only\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_asinhxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"acoshxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_acosh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"acosh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_acoshxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"atanhxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_atanh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"atanh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_atanhxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n (define_insn \"fyl2xxf3_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n         (unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")"}, {"sha": "8c97625ef3f1fc3e8ec64139bb48440ef04d6044", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -201,8 +201,11 @@ DEF_INTERNAL_OPTAB_FN (FOLD_LEFT_PLUS, ECF_CONST | ECF_NOTHROW,\n \n /* Unary math functions.  */\n DEF_INTERNAL_FLT_FN (ACOS, ECF_CONST, acos, unary)\n+DEF_INTERNAL_FLT_FN (ACOSH, ECF_CONST, acosh, unary)\n DEF_INTERNAL_FLT_FN (ASIN, ECF_CONST, asin, unary)\n+DEF_INTERNAL_FLT_FN (ASINH, ECF_CONST, asinh, unary)\n DEF_INTERNAL_FLT_FN (ATAN, ECF_CONST, atan, unary)\n+DEF_INTERNAL_FLT_FN (ATANH, ECF_CONST, atanh, unary)\n DEF_INTERNAL_FLT_FN (COS, ECF_CONST, cos, unary)\n DEF_INTERNAL_FLT_FN (EXP, ECF_CONST, exp, unary)\n DEF_INTERNAL_FLT_FN (EXP10, ECF_CONST, exp10, unary)"}, {"sha": "007212f63674e0ce74c878cdab942ce042f16549", "filename": "gcc/optabs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81037cea642bb6a7e037b9a421ed5dde9c0465b/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=a81037cea642bb6a7e037b9a421ed5dde9c0465b", "patch": "@@ -273,9 +273,12 @@ OPTAB_D (btrunc_optab, \"btrunc$a2\")\n OPTAB_D (nearbyint_optab, \"nearbyint$a2\")\n \n OPTAB_D (acos_optab, \"acos$a2\")\n+OPTAB_D (acosh_optab, \"acosh$a2\")\n OPTAB_D (asin_optab, \"asin$a2\")\n+OPTAB_D (asinh_optab, \"asinh$a2\")\n OPTAB_D (atan2_optab, \"atan2$a3\")\n OPTAB_D (atan_optab, \"atan$a2\")\n+OPTAB_D (atanh_optab, \"atanh$a2\")\n OPTAB_D (copysign_optab, \"copysign$F$a3\")\n OPTAB_D (xorsign_optab, \"xorsign$F$a3\")\n OPTAB_D (cos_optab, \"cos$a2\")"}]}