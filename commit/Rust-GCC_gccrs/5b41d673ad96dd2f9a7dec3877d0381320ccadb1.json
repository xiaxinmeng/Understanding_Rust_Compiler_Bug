{"sha": "5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0MWQ2NzNhZDk2ZGQyZjlhN2RlYzM4NzdkMDM4MTMyMGNjYWRiMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-02T08:38:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-02T10:03:30Z"}, "message": "tree-optimization/97558 - avoid SLP analyzing irrelevant stmts\n\nThis avoids analyzing reductions that are not relevant (thus dead)\nwhich eventually will lead into crashes because the participating\nstmts meta is not analyzed.  For this to work the patch also\nproperly removes reduction groups that are not uniformly recognized\nas patterns.\n\n2020-11-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97558\n\t* tree-vect-loop.c (vect_fixup_scalar_cycles_with_patterns):\n\tCheck for any mismatch in pattern vs. non-pattern and dissolve\n\tthe group if there is one.\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Avoid\n\tanalyzing not relevant reductions.\n\t(vect_analyze_slp): Avoid analyzing not relevant reduction\n\tgroups.\n\n\t* gcc.dg/vect/pr97558.c: New testcase.", "tree": {"sha": "0c1ea5efd59af78cca22b7de87c715927874f7dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c1ea5efd59af78cca22b7de87c715927874f7dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a159081ad4259c42456bd3dc2b637747c373c5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a159081ad4259c42456bd3dc2b637747c373c5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a159081ad4259c42456bd3dc2b637747c373c5a5"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "fef96239aa0ef4e5f4b340c2002681ea9a73c69b", "filename": "gcc/testsuite/gcc.dg/vect/pr97558.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558.c?ref=5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fno-tree-dce -Ofast\" } */\n+\n+long int x1;\n+int fr;\n+\n+int\n+us (int sk, int jx)\n+{\n+  while (sk < 1)\n+    {\n+      jx *= 2;\n+      fr += x1 + 1;\n+      ++sk;\n+    }\n+\n+  return jx;\n+}"}, {"sha": "353703cccbfd828c805b438af658eab1ac14f8d4", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "patch": "@@ -666,27 +666,50 @@ vect_fixup_scalar_cycles_with_patterns (loop_vec_info loop_vinfo)\n   unsigned i;\n \n   FOR_EACH_VEC_ELT (LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo), i, first)\n-    if (STMT_VINFO_IN_PATTERN_P (first))\n-      {\n-\tstmt_vec_info next = REDUC_GROUP_NEXT_ELEMENT (first);\n-\twhile (next)\n-\t  {\n-\t    if (! STMT_VINFO_IN_PATTERN_P (next)\n-\t\t|| STMT_VINFO_REDUC_IDX (STMT_VINFO_RELATED_STMT (next)) == -1)\n-\t      break;\n-\t    next = REDUC_GROUP_NEXT_ELEMENT (next);\n-\t  }\n-\t/* If not all stmt in the chain are patterns or if we failed\n-\t   to update STMT_VINFO_REDUC_IDX try to handle the chain\n-\t   without patterns.  */\n-\tif (! next\n-\t    && STMT_VINFO_REDUC_IDX (STMT_VINFO_RELATED_STMT (first)) != -1)\n-\t  {\n-\t    vect_fixup_reduc_chain (first);\n-\t    LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo)[i]\n-\t      = STMT_VINFO_RELATED_STMT (first);\n-\t  }\n-      }\n+    {\n+      stmt_vec_info next = REDUC_GROUP_NEXT_ELEMENT (first);\n+      while (next)\n+\t{\n+\t  if ((STMT_VINFO_IN_PATTERN_P (next)\n+\t       != STMT_VINFO_IN_PATTERN_P (first))\n+\t      || STMT_VINFO_REDUC_IDX (vect_stmt_to_vectorize (next)) == -1)\n+\t    break;\n+\t  next = REDUC_GROUP_NEXT_ELEMENT (next);\n+\t}\n+      /* If all reduction chain members are well-formed patterns adjust\n+\t the group to group the pattern stmts instead.  */\n+      if (! next\n+\t  && STMT_VINFO_REDUC_IDX (vect_stmt_to_vectorize (first)) != -1)\n+\t{\n+\t  if (STMT_VINFO_IN_PATTERN_P (first))\n+\t    {\n+\t      vect_fixup_reduc_chain (first);\n+\t      LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo)[i]\n+\t\t= STMT_VINFO_RELATED_STMT (first);\n+\t    }\n+\t}\n+      /* If not all stmt in the chain are patterns or if we failed\n+\t to update STMT_VINFO_REDUC_IDX dissolve the chain and handle\n+\t it as regular reduction instead.  */\n+      else\n+\t{\n+\t  stmt_vec_info vinfo = first;\n+\t  stmt_vec_info last = NULL;\n+\t  while (vinfo)\n+\t    {\n+\t      next = REDUC_GROUP_NEXT_ELEMENT (vinfo);\n+\t      REDUC_GROUP_FIRST_ELEMENT (vinfo) = NULL;\n+\t      REDUC_GROUP_NEXT_ELEMENT (vinfo) = NULL;\n+\t      last = vinfo;\n+\t      vinfo = next;\n+\t    }\n+\t  STMT_VINFO_DEF_TYPE (vect_stmt_to_vectorize (first))\n+\t    = vect_internal_def;\n+\t  loop_vinfo->reductions.safe_push (vect_stmt_to_vectorize (last));\n+\t  LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo).unordered_remove (i);\n+\t  --i;\n+\t}\n+    }\n }\n \n /* Function vect_get_loop_niters."}, {"sha": "45e33c031d2882cfe23e42acd7fbcfb6d704b928", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b41d673ad96dd2f9a7dec3877d0381320ccadb1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5b41d673ad96dd2f9a7dec3877d0381320ccadb1", "patch": "@@ -2592,7 +2592,9 @@ vect_analyze_slp_instance (vec_info *vinfo,\n       /* Collect reduction statements.  */\n       vec<stmt_vec_info> reductions = as_a <loop_vec_info> (vinfo)->reductions;\n       for (i = 0; reductions.iterate (i, &next_info); i++)\n-\tscalar_stmts.safe_push (next_info);\n+\tif (STMT_VINFO_RELEVANT_P (next_info)\n+\t    || STMT_VINFO_LIVE_P (next_info))\n+\t  scalar_stmts.quick_push (next_info);\n     }\n \n   /* Build the tree for the SLP instance.  */\n@@ -2628,29 +2630,29 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n \n   if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo))\n     {\n-      if (loop_vinfo->reduction_chains.length () > 0)\n-\t{\n-\t  /* Find SLP sequences starting from reduction chains.  */\n-\t  FOR_EACH_VEC_ELT (loop_vinfo->reduction_chains, i, first_element)\n-\t    if (! vect_analyze_slp_instance (vinfo, bst_map, first_element,\n-\t\t\t\t\t     max_tree_size))\n+      /* Find SLP sequences starting from reduction chains.  */\n+      FOR_EACH_VEC_ELT (loop_vinfo->reduction_chains, i, first_element)\n+\tif (! STMT_VINFO_RELEVANT_P (first_element)\n+\t    && ! STMT_VINFO_LIVE_P (first_element))\n+\t  ;\n+\telse if (! vect_analyze_slp_instance (vinfo, bst_map, first_element,\n+\t\t\t\t\t      max_tree_size))\n+\t  {\n+\t    /* Dissolve reduction chain group.  */\n+\t    stmt_vec_info vinfo = first_element;\n+\t    stmt_vec_info last = NULL;\n+\t    while (vinfo)\n \t      {\n-\t\t/* Dissolve reduction chain group.  */\n-\t\tstmt_vec_info vinfo = first_element;\n-\t\tstmt_vec_info last = NULL;\n-\t\twhile (vinfo)\n-\t\t  {\n-\t\t    stmt_vec_info next = REDUC_GROUP_NEXT_ELEMENT (vinfo);\n-\t\t    REDUC_GROUP_FIRST_ELEMENT (vinfo) = NULL;\n-\t\t    REDUC_GROUP_NEXT_ELEMENT (vinfo) = NULL;\n-\t\t    last = vinfo;\n-\t\t    vinfo = next;\n-\t\t  }\n-\t\tSTMT_VINFO_DEF_TYPE (first_element) = vect_internal_def;\n-\t\t/* It can be still vectorized as part of an SLP reduction.  */\n-\t\tloop_vinfo->reductions.safe_push (last);\n+\t\tstmt_vec_info next = REDUC_GROUP_NEXT_ELEMENT (vinfo);\n+\t\tREDUC_GROUP_FIRST_ELEMENT (vinfo) = NULL;\n+\t\tREDUC_GROUP_NEXT_ELEMENT (vinfo) = NULL;\n+\t\tlast = vinfo;\n+\t\tvinfo = next;\n \t      }\n-\t}\n+\t    STMT_VINFO_DEF_TYPE (first_element) = vect_internal_def;\n+\t    /* It can be still vectorized as part of an SLP reduction.  */\n+\t    loop_vinfo->reductions.safe_push (last);\n+\t  }\n \n       /* Find SLP sequences starting from groups of reductions.  */\n       if (loop_vinfo->reductions.length () > 1)"}]}