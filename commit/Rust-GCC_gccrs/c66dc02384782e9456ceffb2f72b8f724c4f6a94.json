{"sha": "c66dc02384782e9456ceffb2f72b8f724c4f6a94", "node_id": "C_kwDOANBUbNoAKGM2NmRjMDIzODQ3ODJlOTQ1NmNlZmZiMmY3MmI4ZjcyNGM0ZjZhOTQ", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-07-09T12:15:05Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-07-19T18:07:28Z"}, "message": "libstdc++: Complete __gnu_debug::string Standard conformity\n\nAdd testsuite/testsuite_string.h header to help testing __gnu_debug::basic_string like\nstd::basic_string depending on _GLIBCXX_DEBUG.\n\nAdd using of base type methods in __gnu_debug::basic_string to make use of the method\noverloads when there is no debug version.\n\nFix _GLIBCXX_DEBUG_PEDANTIC assertions in <debug/string>. This header has to be used directly\nlike __gnu_debug::string, it is not included by _GLIBCXX_DEBUG. It means that\n_GLIBCXX_DEBUG_PEDANTIC is not considered to define __glibcxx_check_string and\n__glibcxx_check_string_len which are then empty macros. Now those macros are defined\ndirectly in <debug/string> and properly consider _GLIBCXX_DEBUG_PEDANTIC.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/debug.h [_GLIBCXX_DEBUG](__glibcxx_requires_string): Define\n\tusing _GLIBCXX_DEBUG_PEDASSERT.\n\t[_GLIBCXX_DEBUG](__glibcxx_requires_string_len): Likewise.\n\t* include/debug/macros.h\n\t(__glibcxx_check_string, __glibcxx_check_string_len): Move...\n\t* include/debug/string\n\t(__glibcxx_check_string, __glibcxx_check_string_len): ...here. And define depending\n\ton _GLIBCXX_DEBUG_PEDANTIC no matter if _GLIBCXX_DEBUG is defined.\n\tAdd using of std::string find, rfind, find_first_of, find_last_of, find_first_not_of\n\tand find_last_not_of. Remove debug implementations having no debug assertion.\n\t* testsuite/util/testsuite_string.h: New file. Provides __gnu_test::string and\n\t__gnu_test::wtring which definition depends on _GLIBCXX_DEBUG.\n\t* testsuite/21_strings/basic_string/debug/find1_neg.cc: New test case.\n\t* testsuite/21_strings/basic_string/debug/find2_neg.cc: New test case.\n\t* testsuite/21_strings/basic_string/operations/find/char/1.cc:\n\tInclude <testsuite_string.h> and use __gnu_test::string.\n\t* testsuite/21_strings/basic_string/operations/find/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/char/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/char/4.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/char/5.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/char/6.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/1.cc:\n\tInclude <testsuite_string.h> and use __gnu_test::wstring.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/4.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/6.cc: Likewise.", "tree": {"sha": "23a45689c44df6d10cfc46552031a1f5a70d65d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23a45689c44df6d10cfc46552031a1f5a70d65d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c66dc02384782e9456ceffb2f72b8f724c4f6a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66dc02384782e9456ceffb2f72b8f724c4f6a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66dc02384782e9456ceffb2f72b8f724c4f6a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66dc02384782e9456ceffb2f72b8f724c4f6a94/comments", "author": null, "committer": null, "parents": [{"sha": "68f37670eff0b872ce5dfd382c8d8f3206bdfc27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f37670eff0b872ce5dfd382c8d8f3206bdfc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f37670eff0b872ce5dfd382c8d8f3206bdfc27"}], "stats": {"total": 322, "additions": 199, "deletions": 123}, "files": [{"sha": "28e250f0c509da0dffb7ae44b72f0a8027d49faa", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -118,9 +118,10 @@ namespace __gnu_debug\n   __glibcxx_check_heap(_First,_Last)\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\t\\\n   __glibcxx_check_heap_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n+# define __glibcxx_requires_string(_String)\t\\\n+  _GLIBCXX_DEBUG_PEDASSERT(_String != 0)\n # define __glibcxx_requires_string_len(_String,_Len)\t\\\n-  __glibcxx_check_string_len(_String,_Len)\n+  _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n # define __glibcxx_requires_irreflexive(_First,_Last)\t\\\n   __glibcxx_check_irreflexive(_First,_Last)\n # define __glibcxx_requires_irreflexive2(_First,_Last)\t\\"}, {"sha": "5fb68324ab2bb5650f9397ccb5177596f7a8ef23", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -467,8 +467,4 @@ _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\\n \t\t      _M_message(__gnu_debug::__msg_equal_allocs)\t\\\n \t\t      ._M_sequence(_This, \"this\"))\n \n-#define __glibcxx_check_string(_String) _GLIBCXX_DEBUG_PEDASSERT(_String != 0)\n-#define __glibcxx_check_string_len(_String,_Len) \\\n-  _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n-\n #endif"}, {"sha": "a4482db4af587f97c41003bc81696665e4c213ca", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 42, "deletions": 53, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -49,6 +49,20 @@\n # define _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY(expr)\n #endif\n \n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+# define __glibcxx_check_string(_String)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_STR_COND_AT(_String != 0,\t\t\\\n+\t\t\t\t    __FILE__, __LINE__,\t\t\\\n+\t\t\t\t    __PRETTY_FUNCTION__);\n+# define __glibcxx_check_string_len(_String,_Len)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_STR_COND_AT(_String != 0 || _Len == 0,\t\\\n+\t\t\t\t    __FILE__, __LINE__,\t\t\\\n+\t\t\t\t    __PRETTY_FUNCTION__);\n+#else\n+# define __glibcxx_check_string(_String)\n+# define __glibcxx_check_string_len(_String,_Len)\n+#endif\n+\n namespace __gnu_debug\n {\n   /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n@@ -868,147 +882,122 @@ namespace __gnu_debug\n \n       using _Base::get_allocator;\n \n-      size_type\n-      find(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find(__str, __pos); }\n+      using _Base::find;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const _CharT* __s, size_type __pos, size_type __n) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n-      find(const _CharT* __s, size_type __pos = 0) const\n+      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find(__s, __pos);\n       }\n \n-      size_type\n-      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-      { return _Base::find(__c, __pos); }\n-\n-      size_type\n-      rfind(const basic_string& __str, size_type __pos = _Base::npos) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::rfind(__str, __pos); }\n+      using _Base::rfind;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos, size_type __n) const\n       {\n \t__glibcxx_check_string_len(__s, __n);\n \treturn _Base::rfind(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos = _Base::npos) const\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::rfind(__s, __pos);\n       }\n \n-      size_type\n-      rfind(_CharT __c, size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n-      { return _Base::rfind(__c, __pos); }\n-\n-      size_type\n-      find_first_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find_first_of(__str, __pos); }\n+      using _Base::find_first_of;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_first_of(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n-      find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      find_first_of(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_first_of(__s, __pos);\n       }\n \n-      size_type\n-      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-      { return _Base::find_first_of(__c, __pos); }\n-\n-      size_type\n-      find_last_of(const basic_string& __str,\n-\t\t   size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n-      { return _Base::find_last_of(__str, __pos); }\n+      using _Base::find_last_of;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_last_of(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_last_of(__s, __pos);\n       }\n \n-      size_type\n-      find_last_of(_CharT __c, size_type __pos = _Base::npos) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find_last_of(__c, __pos); }\n-\n-      size_type\n-      find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find_first_not_of(__str, __pos); }\n+      using _Base::find_first_not_of;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string_len(__s, __n);\n \treturn _Base::find_first_not_of(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_first_not_of(__s, __pos);\n       }\n \n-      size_type\n-      find_first_not_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-      { return _Base::find_first_not_of(__c, __pos); }\n-\n-      size_type\n-      find_last_not_of(const basic_string& __str,\n-\t\t       size_type __pos = _Base::npos) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find_last_not_of(__str, __pos); }\n+      using _Base::find_last_not_of;\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_last_not_of(__s, __pos, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::find_last_not_of(__s, __pos);\n       }\n \n-      size_type\n-      find_last_not_of(_CharT __c, size_type __pos = _Base::npos) const\n-\t_GLIBCXX_NOEXCEPT\n-      { return _Base::find_last_not_of(__c, __pos); }\n-\n       basic_string\n       substr(size_type __pos = 0, size_type __n = _Base::npos) const\n       { return basic_string(_Base::substr(__pos, __n)); }"}, {"sha": "02babbc59e072220a9890005849be9acca3009fa", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/debug/find1_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind1_neg.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+\n+#define _GLIBCXX_DEBUG_PEDANTIC\n+\n+#include <debug/string>\n+\n+void test01()\n+{\n+  const char* __null_str = 0;\n+  __gnu_debug::string str;\n+  str.find(__null_str);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "89250e2d8744784666fb568a9c680cb4b24ef53b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/debug/find2_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2Ffind2_neg.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+\n+#define _GLIBCXX_DEBUG_PEDANTIC\n+\n+#include <debug/string>\n+\n+void test01()\n+{\n+  const char* __null_str = 0;\n+  __gnu_debug::string str;\n+  str.find(__null_str, 0, 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "862cfefee696314e6cc749e7b9d0d923d995af9e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F1.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,22 +19,22 @@\n \n // 21.3.6.1 basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test01(void)\n {\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::const_reference cref;\n-  typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  typedef __gnu_test::string::const_reference cref;\n+  typedef __gnu_test::string::reference ref;\n+  csize_type npos = __gnu_test::string::npos;\n   csize_type csz01, csz02;\n \n   const char str_lit01[] = \"mave\";\n-  const std::string str01(\"mavericks, santa cruz\");\n-  std::string str02(str_lit01);\n-  std::string str03(\"s, s\");\n-  std::string str04;\n+  const __gnu_test::string str01(\"mavericks, santa cruz\");\n+  __gnu_test::string str02(str_lit01);\n+  __gnu_test::string str03(\"s, s\");\n+  __gnu_test::string str04;\n \n   // size_type find(const string&, size_type pos = 0) const;\n   csz01 = str01.find(str01);"}, {"sha": "756ad85dcaaf5a14eb502e340068761bffc296a7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/2.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F2.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,23 +19,23 @@\n \n // 21.3.6.3 basic_string find_first_of\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test02(void)\n {\n-  typedef std::string::size_type csize_type;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  csize_type npos = __gnu_test::string::npos;\n   csize_type csz01, csz02;\n \n   const char str_lit01[] = \"mave\";\n-  const std::string str01(\"mavericks, santa cruz\");\n-  std::string str02(str_lit01);\n-  std::string str03(\"s, s\");\n-  std::string str04;\n+  const __gnu_test::string str01(\"mavericks, santa cruz\");\n+  __gnu_test::string str02(str_lit01);\n+  __gnu_test::string str03(\"s, s\");\n+  __gnu_test::string str04;\n \n   // size_type find_first_of(const string&, size_type pos = 0) const;\n-  std::string str05(\"xena rulez\");\n+  __gnu_test::string str05(\"xena rulez\");\n   csz01 = str01.find_first_of(str01);\n   VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str01, 4);"}, {"sha": "8386ae8264d87c60443fb41003706fa6d750dfee", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/3.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F3.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,20 +19,20 @@\n \n // 21.3.6.5 basic_string find_first_not_of\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test03(void)\n {\n-  typedef std::string::size_type csize_type;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  csize_type npos = __gnu_test::string::npos;\n   csize_type csz01;\n \n-  const std::string str01(\"Bob Rock, per me\");\n+  const __gnu_test::string str01(\"Bob Rock, per me\");\n   const char str_lit01[] = \"Bob Rock\";\n-  std::string str02(\"ovvero Trivi\");\n-  std::string str03(str_lit01);\n-  std::string str04;\n+  __gnu_test::string str02(\"ovvero Trivi\");\n+  __gnu_test::string str03(str_lit01);\n+  __gnu_test::string str04;\n \n   // size_type find_first_not_of(const string&, size_type pos = 0) const;\n   csz01 = str01.find_first_not_of(str01);"}, {"sha": "72965d0731f6c592ff47358772eafaeafe89fc9b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/4.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F4.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,16 +19,16 @@\n \n // 21.3.6.1 basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // libstdc++/31401\n void test01()\n {\n-  typedef std::string::size_type csize_type;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  csize_type npos = __gnu_test::string::npos;\n \n-  std::string use = \"anu\";\n+  __gnu_test::string use = \"anu\";\n   csize_type pos1 = use.find(\"a\", npos);\n \n   VERIFY( pos1 == npos );"}, {"sha": "a366975308c9db364c273f132c71af611ed43a90", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -24,14 +24,14 @@\n // [string::find.first.not.of]\n // [string::find.last.not.of]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void\n test03()\n {\n   std::string_view str1(\"bar\");\n-  std::string str2(\"foobar\");\n+  __gnu_test::string str2(\"foobar\");\n \n   auto x = str2.find(str1);\n   VERIFY (x == 3);"}, {"sha": "51d7b25c1c62c1b92b5e5b872db0e4cd8a494bf9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/6.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F6.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,13 +19,13 @@\n \n // C++11 21.4.7.2 [string::find] basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // https://gcc.gnu.org/ml/libstdc++/2017-01/msg00021.html\n void test01()\n {\n-  typedef std::string string_type;\n+  typedef __gnu_test::string string_type;\n   string_type::size_type npos = string_type::npos;\n \n   string_type use = \"aaa\";"}, {"sha": "bb65c0cd15f963da735c886921f3f2a5ca343014", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F1.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,22 +19,22 @@\n \n // 21.3.6.1 basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test01(void)\n {\n-  typedef std::wstring::size_type csize_type;\n-  typedef std::wstring::const_reference cref;\n-  typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n+  typedef __gnu_test::wstring::size_type csize_type;\n+  typedef __gnu_test::wstring::const_reference cref;\n+  typedef __gnu_test::wstring::reference ref;\n+  csize_type npos = __gnu_test::wstring::npos;\n   csize_type csz01, csz02;\n \n   const wchar_t str_lit01[] = L\"mave\";\n-  const std::wstring str01(L\"mavericks, santa cruz\");\n-  std::wstring str02(str_lit01);\n-  std::wstring str03(L\"s, s\");\n-  std::wstring str04;\n+  const __gnu_test::wstring str01(L\"mavericks, santa cruz\");\n+  __gnu_test::wstring str02(str_lit01);\n+  __gnu_test::wstring str03(L\"s, s\");\n+  __gnu_test::wstring str04;\n \n   // size_type find(const wstring&, size_type pos = 0) const;\n   csz01 = str01.find(str01);"}, {"sha": "0bd1533d32ea49b7f71180dc9fbb5451327adb2b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/2.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F2.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,23 +19,23 @@\n \n // 21.3.6.3 basic_string find_first_of\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test02(void)\n {\n-  typedef std::wstring::size_type csize_type;\n-  csize_type npos = std::wstring::npos;\n+  typedef __gnu_test::wstring::size_type csize_type;\n+  csize_type npos = __gnu_test::wstring::npos;\n   csize_type csz01, csz02;\n \n   const wchar_t str_lit01[] = L\"mave\";\n-  const std::wstring str01(L\"mavericks, santa cruz\");\n-  std::wstring str02(str_lit01);\n-  std::wstring str03(L\"s, s\");\n-  std::wstring str04;\n+  const __gnu_test::wstring str01(L\"mavericks, santa cruz\");\n+  __gnu_test::wstring str02(str_lit01);\n+  __gnu_test::wstring str03(L\"s, s\");\n+  __gnu_test::wstring str04;\n \n   // size_type find_first_of(const wstring&, size_type pos = 0) const;\n-  std::wstring str05(L\"xena rulez\");\n+  __gnu_test::wstring str05(L\"xena rulez\");\n   csz01 = str01.find_first_of(str01);\n   VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str01, 4);"}, {"sha": "8c595fda3f9c8962ced44c23926b2a57f1f9b163", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/3.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F3.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,20 +19,20 @@\n \n // 21.3.6.5 basic_string find_first_not_of\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void test03(void)\n {\n-  typedef std::wstring::size_type csize_type;\n-  csize_type npos = std::wstring::npos;\n+  typedef __gnu_test::wstring::size_type csize_type;\n+  csize_type npos = __gnu_test::wstring::npos;\n   csize_type csz01;\n \n-  const std::wstring str01(L\"Bob Rock, per me\");\n+  const __gnu_test::wstring str01(L\"Bob Rock, per me\");\n   const wchar_t str_lit01[] = L\"Bob Rock\";\n-  std::wstring str02(L\"ovvero Trivi\");\n-  std::wstring str03(str_lit01);\n-  std::wstring str04;\n+  __gnu_test::wstring str02(L\"ovvero Trivi\");\n+  __gnu_test::wstring str03(str_lit01);\n+  __gnu_test::wstring str04;\n \n   // size_type find_first_not_of(const string&, size_type pos = 0) const;\n   csz01 = str01.find_first_not_of(str01);"}, {"sha": "98c3a18accdd255fd3423cd160fd9197a16a20a4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/4.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F4.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,16 +19,16 @@\n \n // 21.3.6.1 basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // libstdc++/31401\n void test01()\n {\n-  typedef std::wstring::size_type csize_type;\n-  csize_type npos = std::wstring::npos;\n+  typedef __gnu_test::wstring::size_type csize_type;\n+  csize_type npos = __gnu_test::wstring::npos;\n \n-  std::wstring use = L\"anu\";\n+  __gnu_test::wstring use = L\"anu\";\n   csize_type pos1 = use.find(L\"a\", npos);\n \n   VERIFY( pos1 == npos );"}, {"sha": "76126a799885ddd95124593a947e63f2d65b7a77", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -24,14 +24,14 @@\n // [string::find.first.not.of]\n // [string::find.last.not.of]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void\n test03()\n {\n   std::wstring_view str1(L\"bar\");\n-  std::wstring str2(L\"foobar\");\n+  __gnu_test::wstring str2(L\"foobar\");\n \n   auto x = str2.find(str1);\n   VERIFY (x == 3);"}, {"sha": "58c4db0516311b0c2c2614ae18fbdfa635921660", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/6.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F6.cc?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -19,13 +19,13 @@\n \n // C++11 21.4.7.2 [string::find] basic_string find\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // https://gcc.gnu.org/ml/libstdc++/2017-01/msg00021.html\n void test01()\n {\n-  typedef std::wstring string_type;\n+  typedef __gnu_test::wstring string_type;\n   string_type::size_type npos = string_type::npos;\n \n   string_type use = L\"aaa\";"}, {"sha": "7121ff8ec6d5b9d268f5a692a9abc9fe6e05ec1c", "filename": "libstdc++-v3/testsuite/util/testsuite_string.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66dc02384782e9456ceffb2f72b8f724c4f6a94/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h?ref=c66dc02384782e9456ceffb2f72b8f724c4f6a94", "patch": "@@ -0,0 +1,20 @@\n+#ifndef _GLIBCXX_TESTSUITE_STRING_H\n+#define _GLIBCXX_TESTSUITE_STRING_H\n+\n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/string>\n+namespace __gnu_test\n+{\n+  using __gnu_debug::string;\n+  using __gnu_debug::wstring;\n+}\n+#else\n+# include <string>\n+namespace __gnu_test\n+{\n+  using std::string;\n+  using std::wstring;\n+}\n+#endif\n+\n+#endif"}]}