{"sha": "233608bdb134b136c5379c76102368d29d022c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzNjA4YmRiMTM0YjEzNmM1Mzc5Yzc2MTAyMzY4ZDI5ZDAyMmM1Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-09T19:21:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-09T19:21:49Z"}, "message": "PR c++/81525 - wrong constant value with generic lambda\n\n\t* pt.c (tsubst_decl) [VAR_DECL]: Avoid clobbering auto.\n\t(tsubst_copy) [VAR_DECL]: Handle auto.\n\nFrom-SVN: r250999", "tree": {"sha": "a18c21a01aaf9a0f12dd195512e3fcffa8d81167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a18c21a01aaf9a0f12dd195512e3fcffa8d81167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/233608bdb134b136c5379c76102368d29d022c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233608bdb134b136c5379c76102368d29d022c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233608bdb134b136c5379c76102368d29d022c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233608bdb134b136c5379c76102368d29d022c52/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a87c1c0c72bc5d238e4e5a7fa93671c0ba4702"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d3510cf1965797d9b79d6248edc67987c8a08870", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233608bdb134b136c5379c76102368d29d022c52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233608bdb134b136c5379c76102368d29d022c52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=233608bdb134b136c5379c76102368d29d022c52", "patch": "@@ -1,5 +1,9 @@\n 2017-08-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/81525 - wrong constant value with generic lambda\n+\t* pt.c (tsubst_decl) [VAR_DECL]: Avoid clobbering auto.\n+\t(tsubst_copy) [VAR_DECL]: Handle auto.\n+\n \tPR c++/81359 - Unparsed NSDMI error from SFINAE context.\n \t* init.c (get_nsdmi): Add complain parm.\n \t* typeck2.c (digest_nsdmi_init): Add complain parm."}, {"sha": "0f899b9edecb45b5dafd79ea13415338de6f8b6f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233608bdb134b136c5379c76102368d29d022c52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233608bdb134b136c5379c76102368d29d022c52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=233608bdb134b136c5379c76102368d29d022c52", "patch": "@@ -12875,7 +12875,15 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t&& VAR_HAD_UNKNOWN_BOUND (t)\n \t\t&& type != error_mark_node)\n \t      type = strip_array_domain (type);\n+\t    tree auto_node = type_uses_auto (type);\n+\t    int len = TREE_VEC_LENGTH (args);\n+\t    if (auto_node)\n+\t      /* Mask off any template args past the variable's context so we\n+\t\t don't replace the auto with an unrelated argument.  */\n+\t      TREE_VEC_LENGTH (args) = TEMPLATE_TYPE_LEVEL (auto_node) - 1;\n \t    type = tsubst (type, args, complain, in_decl);\n+\t    if (auto_node)\n+\t      TREE_VEC_LENGTH (args) = len;\n \t  }\n \tif (VAR_P (r))\n \t  {\n@@ -14656,6 +14664,10 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (r)\n \t\t\t  = TREE_CONSTANT (r) = true;\n \t\t      DECL_INITIAL (r) = init;\n+\t\t      if (tree auto_node = type_uses_auto (TREE_TYPE (r)))\n+\t\t\tTREE_TYPE (r)\n+\t\t\t  = do_auto_deduction (TREE_TYPE (r), init, auto_node,\n+\t\t\t\t\t       complain, adc_variable_type);\n \t\t    }\n \t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)\n \t\t\t      || decl_constant_var_p (r)"}, {"sha": "52f4373ccbdfe35e1fbc854b16f890b041139fd0", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233608bdb134b136c5379c76102368d29d022c52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233608bdb134b136c5379c76102368d29d022c52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C?ref=233608bdb134b136c5379c76102368d29d022c52", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/81525\n+// { dg-do compile { target c++14 } }\n+\n+template <int i> struct A {\n+  constexpr operator int () const { return i; }\n+};\n+template <int i> constexpr A<i> a = {};\n+\n+template <typename F> void foo (F f) {\n+  f (A<0>{});\n+}\n+template <typename T>\n+void bar (T) {\n+  constexpr auto N = a<1>;\n+  auto f = [&] (auto i) {\n+    static_assert (static_cast<int>(N) == 1, \"\");\n+  };\n+  foo (f);\n+}\n+int main () { bar (0); }"}]}