{"sha": "b9ad851eef2923e08c8e3521fd1e48322b2189ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhZDg1MWVlZjI5MjNlMDhjOGUzNTIxZmQxZTQ4MzIyYjIxODllZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-11-17T16:16:52Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-11-17T16:16:52Z"}, "message": "HttpURLConnection.java ((getPermission): Take port into consideration.\n\n        * java/net/HttpURLConnection.java ((getPermission): Take port\n        into consideration.\n        (getErrorStream): Implement.\n\nFrom-SVN: r59196", "tree": {"sha": "9cd5d1a5eda63358fef6ead486f32246d7a43915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd5d1a5eda63358fef6ead486f32246d7a43915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ad851eef2923e08c8e3521fd1e48322b2189ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ad851eef2923e08c8e3521fd1e48322b2189ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ad851eef2923e08c8e3521fd1e48322b2189ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ad851eef2923e08c8e3521fd1e48322b2189ee/comments", "author": null, "committer": null, "parents": [{"sha": "e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "dd3f6eb284680ef37a6013c797639db232f2024a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad851eef2923e08c8e3521fd1e48322b2189ee/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad851eef2923e08c8e3521fd1e48322b2189ee/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b9ad851eef2923e08c8e3521fd1e48322b2189ee", "patch": "@@ -1,3 +1,9 @@\n+2002-11-17  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/HttpURLConnection.java ((getPermission): Take port\n+\tinto consideration.\n+\t(getErrorStream): Implement.\n+\n 2002-11-17  Mark Wielaard  <mark@klomp.org>\n \n \t* java/net/HttpURLConnection.java: Merge with GNU Classpath."}, {"sha": "e914b1902036c18b446555ba913867b3c483f040", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ad851eef2923e08c8e3521fd1e48322b2189ee/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ad851eef2923e08c8e3521fd1e48322b2189ee/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=b9ad851eef2923e08c8e3521fd1e48322b2189ee", "patch": "@@ -495,17 +495,62 @@ private void getResponseVals() throws IOException\n    */\n   public Permission getPermission() throws IOException\n   {\n-    return new SocketPermission (url.getHost (), \"connect\");\n+    URL url = getURL();\n+    String host = url.getHost();\n+    int port = url.getPort();\n+    if (port == -1)\n+      port = 80;\n+    \n+    host = host + \":\" + port;\n+    \n+    return new SocketPermission(host, \"connect\");\n   }\n \n   /**\n-   * Returns the error stream if the connection failed but the server sent\n-   * useful data nonetheless\n+   * This method allows the caller to retrieve any data that might have\n+   * been sent despite the fact that an error occurred.  For example, the\n+   * HTML page sent along with a 404 File Not Found error.  If the socket\n+   * is not connected, or if no error occurred or no data was returned,\n+   * this method returns <code>null</code>.\n+   *\n+   * @return An <code>InputStream</code> for reading error data.\n    */\n   public InputStream getErrorStream ()\n   {\n-    // FIXME: implement this\n-    return null;\n+    if (!connected)\n+      return(null);\n+    \n+    int code;\n+    try \n+      {\n+\tcode = getResponseCode();\n+      }\n+    catch(IOException e)\n+      {\n+\tcode = -1;\n+      }\n+    \n+    if (code == -1)\n+      return(null);\n+    \n+    if (((code/100) != 4) || ((code/100) != 5))\n+      return(null); \n+    \n+    try\n+      {\n+\tPushbackInputStream pbis = new PushbackInputStream(getInputStream());\n+\t\n+\tint i = pbis.read();\n+\tif (i == -1)\n+\t  return(null);\n+\t\n+\tpbis.unread(i);\n+\treturn(pbis);\n+      }\n+    catch(IOException e)\n+      {\n+\treturn(null);\n+      }\n   }\n \n   /**"}]}