{"sha": "6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2YWExYWZlZGZjMjVlZjE1ZGRhNjY5MmE2MTdiZDVjNTM1OGM5Yw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-11-03T17:49:43Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-11-03T17:49:43Z"}, "message": "arm.c (arm_file_start): New function.\n\n2006-11-03  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.c (arm_file_start): New function.\n\t(TARGET_ASM_FILE_START): Define.\n\t(arm_default_cpu): New variable.\n\t(arm_override_options): Set arm_default_cpu.\n\nFrom-SVN: r118461", "tree": {"sha": "f22cee325f7a77724497420d2f04db5b13b4fc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22cee325f7a77724497420d2f04db5b13b4fc25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c/comments", "author": null, "committer": null, "parents": [{"sha": "88c22d094e83e24640a4d4af3ae2e0ce185d3828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c22d094e83e24640a4d4af3ae2e0ce185d3828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c22d094e83e24640a4d4af3ae2e0ce185d3828"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "70d1aa109c86b6312d00d38d13a7039373ecf065", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "patch": "@@ -1,3 +1,11 @@\n+2006-11-03  Paul Brook  <paul@codesourcery.com>\n+\n+\tgcc/\n+\t* config/arm/arm.c (arm_file_start): New function.\n+\t(TARGET_ASM_FILE_START): Define.\n+\t(arm_default_cpu): New variable.\n+\t(arm_override_options): Set arm_default_cpu.\n+\n 2006-11-03  David Ung  <davidu@mips.com>\n \t\n \t* config/mips/mips.h (processor_type): Removed PROCESSOR_24K, add"}, {"sha": "70e3d787a0cb5013361644461d089d41261c8b48", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6aa1afedfc25ef15dda6692a617bd5c5358c9c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6c6aa1afedfc25ef15dda6692a617bd5c5358c9c", "patch": "@@ -154,6 +154,7 @@ static void arm_encode_section_info (tree, rtx, int);\n #endif\n \n static void arm_file_end (void);\n+static void arm_file_start (void);\n \n #ifdef AOF_ASSEMBLER\n static void aof_globalize_label (FILE *, const char *);\n@@ -202,6 +203,9 @@ static bool arm_tls_symbol_p (rtx x);\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arm_attribute_table\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START arm_file_start\n+\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END arm_file_end\n \n@@ -390,6 +394,9 @@ rtx arm_compare_op0, arm_compare_op1;\n /* The processor for which instructions should be scheduled.  */\n enum processor_type arm_tune = arm_none;\n \n+/* The default processor used if not overriden by commandline.  */\n+static enum processor_type arm_default_cpu = arm_none;\n+\n /* Which floating point model to use.  */\n enum arm_fp_model arm_fp_model;\n \n@@ -1020,8 +1027,9 @@ arm_override_options (void)\n \t  insn_flags = sel->flags;\n \t}\n       sprintf (arm_arch_name, \"__ARM_ARCH_%s__\", sel->arch);\n+      arm_default_cpu = (enum processor_type) (sel - all_cores);\n       if (arm_tune == arm_none)\n-\tarm_tune = (enum processor_type) (sel - all_cores);\n+\tarm_tune = arm_default_cpu;\n     }\n \n   /* The processor for which we should tune should now have been\n@@ -14412,6 +14420,105 @@ arm_asm_output_labelref (FILE *stream, const char *name)\n     asm_fprintf (stream, \"%U%s\", name);\n }\n \n+static void\n+arm_file_start (void)\n+{\n+  int val;\n+\n+  if (TARGET_BPABI)\n+    {\n+      const char *fpu_name;\n+      if (arm_select[0].string)\n+\tasm_fprintf (asm_out_file, \"\\t.cpu %s\\n\", arm_select[0].string);\n+      else if (arm_select[1].string)\n+\tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_select[1].string);\n+      else\n+\tasm_fprintf (asm_out_file, \"\\t.cpu %s\\n\",\n+\t\t     all_cores[arm_default_cpu].name);\n+\n+      if (TARGET_SOFT_FLOAT)\n+\t{\n+\t  if (TARGET_VFP)\n+\t    fpu_name = \"softvfp\";\n+\t  else\n+\t    fpu_name = \"softfpa\";\n+\t}\n+      else\n+\t{\n+\t  switch (arm_fpu_arch)\n+\t    {\n+\t    case FPUTYPE_FPA:\n+\t      fpu_name = \"fpa\";\n+\t      break;\n+\t    case FPUTYPE_FPA_EMU2:\n+\t      fpu_name = \"fpe2\";\n+\t      break;\n+\t    case FPUTYPE_FPA_EMU3:\n+\t      fpu_name = \"fpe3\";\n+\t      break;\n+\t    case FPUTYPE_MAVERICK:\n+\t      fpu_name = \"maverick\";\n+\t      break;\n+\t    case FPUTYPE_VFP:\n+\t      if (TARGET_HARD_FLOAT)\n+\t\tasm_fprintf (asm_out_file, \"\\t.eabi_attribute 27, 3\\n\");\n+\t      if (TARGET_HARD_FLOAT_ABI)\n+\t\tasm_fprintf (asm_out_file, \"\\t.eabi_attribute 28, 1\\n\");\n+\t      fpu_name = \"vfp\";\n+\t      break;\n+\t    default:\n+\t      abort();\n+\t    }\n+\t}\n+      asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", fpu_name);\n+\n+      /* Some of these attributes only apply when the corresponding features\n+         are used.  However we don't have any easy way of figuring this out.\n+\t Conservatively record the setting that would have been used.  */\n+\n+      /* Tag_ABI_PCS_wchar_t.  */\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 18, %d\\n\",\n+\t\t   (int)WCHAR_TYPE_SIZE / BITS_PER_UNIT);\n+\n+      /* Tag_ABI_FP_rounding.  */\n+      if (flag_rounding_math)\n+\tasm_fprintf (asm_out_file, \"\\t.eabi_attribute 19, 1\\n\");\n+      if (!flag_unsafe_math_optimizations)\n+\t{\n+\t  /* Tag_ABI_FP_denomal.  */\n+\t  asm_fprintf (asm_out_file, \"\\t.eabi_attribute 20, 1\\n\");\n+\t  /* Tag_ABI_FP_exceptions.  */\n+\t  asm_fprintf (asm_out_file, \"\\t.eabi_attribute 21, 1\\n\");\n+\t}\n+      /* Tag_ABI_FP_user_exceptions.  */\n+      if (flag_signaling_nans)\n+\tasm_fprintf (asm_out_file, \"\\t.eabi_attribute 22, 1\\n\");\n+      /* Tag_ABI_FP_number_model.  */\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 23, %d\\n\", \n+\t\t   flag_finite_math_only ? 1 : 3);\n+\n+      /* Tag_ABI_align8_needed.  */\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 24, 1\\n\");\n+      /* Tag_ABI_align8_preserved.  */\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 25, 1\\n\");\n+      /* Tag_ABI_enum_size.  */\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 26, %d\\n\",\n+\t\t   flag_short_enums ? 1 : 2);\n+\n+      /* Tag_ABI_optimization_goals.  */\n+      if (optimize_size)\n+\tval = 4;\n+      else if (optimize >= 2)\n+\tval = 2;\n+      else if (optimize)\n+\tval = 1;\n+      else\n+\tval = 6;\n+      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 30, %d\\n\", val);\n+    }\n+  default_file_start();\n+}\n+\n static void\n arm_file_end (void)\n {"}]}