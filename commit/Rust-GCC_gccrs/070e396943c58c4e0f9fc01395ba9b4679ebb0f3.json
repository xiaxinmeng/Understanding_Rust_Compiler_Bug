{"sha": "070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwZTM5Njk0M2M1OGM0ZTBmOWZjMDEzOTViYTliNDY3OWViYjBmMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-06T22:50:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-06T22:50:29Z"}, "message": "coverage.h (GCOV_TYPE_NODE): Delete.\n\n\t* coverage.h (GCOV_TYPE_NODE): Delete.\n\t* coverage.c (coverage_counter_alloc, tree_coverage_counter_ref)\n\t(build_ctr_info_type): Use get_gcov_type () instead of GCOV_TYPE_NODE.\n\t* tree-profile.c (tree_gen_edge_profiler, tree_gen_interval_profiler)\n\t(tree_gen_pow2_profiler, tree_gen_one_value_profiler): Likewise.\n\t* value-prof.c (tree_divmod_fixed_value_transform): Delete.\n\nFrom-SVN: r97760", "tree": {"sha": "24e0e22bfb47cd8753027f0806884351901a8e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24e0e22bfb47cd8753027f0806884351901a8e22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/comments", "author": null, "committer": null, "parents": [{"sha": "fb72a0a30b1f694b3cfdc33c95e47f14f60e9f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb72a0a30b1f694b3cfdc33c95e47f14f60e9f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb72a0a30b1f694b3cfdc33c95e47f14f60e9f43"}], "stats": {"total": 161, "additions": 87, "deletions": 74}, "files": [{"sha": "cfca3d6a61e04d996bda4d55343fb2f11a1a5105", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "patch": "@@ -1,3 +1,12 @@\n+2004-04-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* coverage.h (GCOV_TYPE_NODE): Delete.\n+\t* coverage.c (coverage_counter_alloc, tree_coverage_counter_ref)\n+\t(build_ctr_info_type): Use get_gcov_type () instead of GCOV_TYPE_NODE.\n+\t* tree-profile.c (tree_gen_edge_profiler, tree_gen_interval_profiler)\n+\t(tree_gen_pow2_profiler, tree_gen_one_value_profiler): Likewise.\n+\t* value-prof.c (tree_divmod_fixed_value_transform): Delete.\n+\n 2004-04-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR other/20792"}, {"sha": "fcab997456a5c46de041711ed27a4c7d6dcd1ff7", "filename": "gcc/coverage.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "patch": "@@ -392,16 +392,17 @@ coverage_counter_alloc (unsigned counter, unsigned num)\n       /* We don't know the size yet; make it big enough that nobody\n \t will make any clever transformation on it.  */\n       char buf[20];\n+      tree gcov_type_node = get_gcov_type ();\n       tree domain_tree\n         = build_index_type (build_int_cst (NULL_TREE, 1000)); /* replaced later */\n       tree gcov_type_array_type\n-        = build_array_type (GCOV_TYPE_NODE, domain_tree);\n+        = build_array_type (gcov_type_node, domain_tree);\n       tree_ctr_tables[counter]\n         = build_decl (VAR_DECL, NULL_TREE, gcov_type_array_type);\n       TREE_STATIC (tree_ctr_tables[counter]) = 1;\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LPBX\", counter + 1);\n       DECL_NAME (tree_ctr_tables[counter]) = get_identifier (buf);\n-      DECL_ALIGN (tree_ctr_tables[counter]) = TYPE_ALIGN (GCOV_TYPE_NODE);\n+      DECL_ALIGN (tree_ctr_tables[counter]) = TYPE_ALIGN (gcov_type_node);\n     }\n   fn_b_ctrs[counter] = fn_n_ctrs[counter];\n   fn_n_ctrs[counter] += num;\n@@ -440,18 +441,19 @@ rtl_coverage_counter_ref (unsigned counter, unsigned no)\n tree\n tree_coverage_counter_ref (unsigned counter, unsigned no)\n {\n+  tree gcov_type_node = get_gcov_type ();\n   tree domain_type = TYPE_DOMAIN (TREE_TYPE (tree_ctr_tables[counter]));\n \n   gcc_assert (no < fn_n_ctrs[counter] - fn_b_ctrs[counter]);\n   no += prg_n_ctrs[counter] + fn_b_ctrs[counter];\n \n   /* \"no\" here is an array index, scaled to bytes later.  */\n-  return build4 (ARRAY_REF, GCOV_TYPE_NODE, tree_ctr_tables[counter],\n+  return build4 (ARRAY_REF, gcov_type_node, tree_ctr_tables[counter],\n \t\t fold_convert (domain_type,\n \t\t\t       build_int_cst (NULL_TREE, no)),\n \t\t TYPE_MIN_VALUE (domain_type),\n-\t\t size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (GCOV_TYPE_NODE),\n-\t\t\t     size_int (TYPE_ALIGN_UNIT (GCOV_TYPE_NODE))));\n+\t\t size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (gcov_type_node),\n+\t\t\t     size_int (TYPE_ALIGN_UNIT (gcov_type_node))));\n }\n \f\n /* Generate a checksum for a string.  CHKSUM is the current\n@@ -685,7 +687,7 @@ build_ctr_info_type (void)\n {\n   tree type = lang_hooks.types.make_type (RECORD_TYPE);\n   tree field, fields = NULL_TREE;\n-  tree gcov_ptr_type = build_pointer_type (GCOV_TYPE_NODE);\n+  tree gcov_ptr_type = build_pointer_type (get_gcov_type ());\n   tree gcov_merge_fn_type;\n \n   /* counters */"}, {"sha": "ec33a3cd2df9ff434ed923c31d96065cbacfb9fb", "filename": "gcc/coverage.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fcoverage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fcoverage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.h?ref=070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "patch": "@@ -49,6 +49,4 @@ extern gcov_type *get_coverage_counts (unsigned /*counter*/,\n \n extern tree get_gcov_type (void);\n \n-#define GCOV_TYPE_NODE get_gcov_type ()\n-\n #endif"}, {"sha": "94fbffbeef172f660183625f11ce2019114ba422", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 68, "deletions": 65, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "patch": "@@ -61,14 +61,15 @@ tree_init_edge_profiler (void)\n static void\n tree_gen_edge_profiler (int edgeno, edge e)\n {\n-  tree tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tree tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n+  tree gcov_type_node = get_gcov_type ();\n+  tree tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tree tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n   tree ref = tree_coverage_counter_ref (GCOV_COUNTER_ARCS, edgeno);\n-  tree stmt1 = build (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref);\n-  tree stmt2 = build (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2,\n-\t\t      build (PLUS_EXPR, GCOV_TYPE_NODE, \n+  tree stmt1 = build (MODIFY_EXPR, gcov_type_node, tmp1, ref);\n+  tree stmt2 = build (MODIFY_EXPR, gcov_type_node, tmp2,\n+\t\t      build (PLUS_EXPR, gcov_type_node, \n \t\t\t     tmp1, integer_one_node));\n-  tree stmt3 = build (MODIFY_EXPR, GCOV_TYPE_NODE, ref, tmp2);\n+  tree stmt3 = build (MODIFY_EXPR, gcov_type_node, ref, tmp2);\n   bsi_insert_on_edge (e, stmt1);\n   bsi_insert_on_edge (e, stmt2);\n   bsi_insert_on_edge (e, stmt3);\n@@ -95,6 +96,7 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree stmt = value->hvalue.tree.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n   basic_block bb = bb_for_stmt (stmt);\n+  tree gcov_type_node = get_gcov_type ();\n   tree optype;\n \n   op = stmt;\n@@ -143,7 +145,7 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   bsi_insert_before (&bsi, stmt3, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt4, BSI_SAME_STMT);\n \n-  index = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n+  index = create_tmp_var (gcov_type_node, \"PROF\");\n \n   /* Check for too big.  */\n   stmt1 = build3 (COND_EXPR, void_type_node,\n@@ -167,23 +169,24 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   /* Normal case, within range. */\n   label3 = build1 (LABEL_EXPR, void_type_node, label_decl3);\n   bsi_insert_before (&bsi, label3, BSI_SAME_STMT);\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, index, \n-\t\t    build1 (NOP_EXPR, GCOV_TYPE_NODE, val));\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, index,\n+\t\t  build1 (NOP_EXPR, gcov_type_node, val));\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bb3end = stmt1;\n \n   /* Too big */\n   label4 = build1 (LABEL_EXPR, void_type_node, label_decl4);\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, index, \n-\t\t    build_int_cst (GCOV_TYPE_NODE, value->hdata.intvl.steps));\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, index,\n+\t\t  build_int_cst (gcov_type_node, value->hdata.intvl.steps));\n   bsi_insert_before (&bsi, label4, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bb4end = stmt1;\n \n   /* Too small */\n   label5 = build1 (LABEL_EXPR, void_type_node, label_decl5);\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, index, \n-\t\t    build_int_cst (GCOV_TYPE_NODE, value->hdata.intvl.steps + 1));\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, index,\n+\t\t  build_int_cst (gcov_type_node,\n+\t\t\t\t value->hdata.intvl.steps + 1));\n   bsi_insert_before (&bsi, label5, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bb5end = stmt1;\n@@ -192,22 +195,22 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   label6 = build1 (LABEL_EXPR, void_type_node, label_decl6);\n   bsi_insert_before (&bsi, label6, BSI_SAME_STMT);\n \n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp3 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, \n-\t\t    build2 (PLUS_EXPR, GCOV_TYPE_NODE, index, \n-\t\t\t    TREE_OPERAND (ref, 1)));\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp3 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1,\n+\t\t  build2 (PLUS_EXPR, gcov_type_node, index,\n+\t\t\t  TREE_OPERAND (ref, 1)));\n   TREE_OPERAND (ref, 1) = tmp1;\n   /* Make a copy to avoid sharing complaints. */\n   ref2 = build4 (ARRAY_REF, TREE_TYPE (ref), TREE_OPERAND (ref, 0), \n \t\tTREE_OPERAND (ref, 1), TREE_OPERAND (ref, 2), \n \t\tTREE_OPERAND (ref, 3));\n \n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2, ref);\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp3, \n-\t\t    build2 (PLUS_EXPR, GCOV_TYPE_NODE, tmp2, integer_one_node));\n-  stmt4 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref2, tmp3);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2, ref);\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, tmp3,\n+\t\t  build2 (PLUS_EXPR, gcov_type_node, tmp2, integer_one_node));\n+  stmt4 = build2 (MODIFY_EXPR, gcov_type_node, ref2, tmp3);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt3, BSI_SAME_STMT);\n@@ -259,6 +262,7 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree stmt = value->hvalue.tree.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n   basic_block bb = bb_for_stmt (stmt);\n+  tree gcov_type_node = get_gcov_type ();\n   tree optype, optypesigned, optypeunsigned;\n \n   op = stmt;\n@@ -289,9 +293,9 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Set up variables and check if denominator is negative when considered\n      as signed.  */\n-  index = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n+  index = create_tmp_var (gcov_type_node, \"PROF\");\n   denom = create_tmp_var (optype, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, index, integer_zero_node);\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, index, integer_zero_node);\n   stmt2 = build2 (MODIFY_EXPR, optype, denom, op);\n   if (optypesigned == optype)\n     {\n@@ -335,8 +339,8 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Loop.  Increment index, shift denominator, repeat if denominator nonzero. */\n   label2 = build1 (LABEL_EXPR, void_type_node, label_decl2);\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, index, \n-\t\t    build2 (PLUS_EXPR, GCOV_TYPE_NODE, index, integer_one_node));\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, index,\n+\t\t  build2 (PLUS_EXPR, gcov_type_node, index, integer_one_node));\n   if (optypeunsigned == optype)\n     {\n       tmp1 = denom;\n@@ -364,19 +368,20 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Increment the appropriate counter.  */\n   label3 = build1 (LABEL_EXPR, void_type_node, label_decl3);\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp3 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, \n-\t\t    build2 (PLUS_EXPR, GCOV_TYPE_NODE, index, TREE_OPERAND (ref, 1)));\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp3 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1,\n+\t\t  build2 (PLUS_EXPR, gcov_type_node,\n+\t\t\t  index, TREE_OPERAND (ref, 1)));\n   TREE_OPERAND (ref, 1) = tmp1;\n   /* Make a copy to avoid sharing complaints. */\n   ref2 = build4 (ARRAY_REF, TREE_TYPE (ref), TREE_OPERAND (ref, 0), \n \t\tTREE_OPERAND (ref, 1), TREE_OPERAND (ref, 2), TREE_OPERAND (ref, 3));\n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2, ref);\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp3, \n-\t\t    build2 (PLUS_EXPR, GCOV_TYPE_NODE, tmp2, integer_one_node));\n-  stmt4 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref2, tmp3);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2, ref);\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, tmp3,\n+\t\t  build2 (PLUS_EXPR, gcov_type_node, tmp2, integer_one_node));\n+  stmt4 = build2 (MODIFY_EXPR, gcov_type_node, ref2, tmp3);\n   bsi_insert_before (&bsi, label3, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);\n@@ -425,6 +430,7 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree stmt = value->hvalue.tree.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n   basic_block bb = bb_for_stmt (stmt);\n+  tree gcov_type_node = get_gcov_type ();\n   tree optype;\n \n   op = stmt;\n@@ -440,10 +446,10 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n   optype = TREE_TYPE (op);\n \n   /* Check if the stored value matches. */\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n   tmp2 = create_tmp_var (optype, \"PROF\");\n   tmp3 = create_tmp_var (optype, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref1);\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1, ref1);\n   stmt2 = build2 (MODIFY_EXPR, optype, tmp2, \n \t\t    build1 (NOP_EXPR, optype, tmp1));\n   stmt3 = build2 (MODIFY_EXPR, optype, tmp3, op);\n@@ -459,8 +465,8 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Does not match; check whether the counter is zero. */\n   label1 = build1 (LABEL_EXPR, void_type_node, label_decl1);\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref2);\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1, ref2);\n   stmt2 = build3 (COND_EXPR, void_type_node, \n \t\tbuild2 (EQ_EXPR, boolean_type_node, tmp1, integer_zero_node),\n \t\tbuild1 (GOTO_EXPR, void_type_node, label_decl3), \n@@ -472,13 +478,12 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Counter is not zero yet, decrement. */\n   label2 = build1 (LABEL_EXPR, void_type_node, label_decl2);\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref2);\n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2,\n-\t\t      build (MINUS_EXPR, GCOV_TYPE_NODE, \n-\t\t\t     tmp1, integer_one_node));\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref2, tmp2);\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1, ref2);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2,\n+\t\t  build (MINUS_EXPR, gcov_type_node, tmp1, integer_one_node));\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, ref2, tmp2);\n   bsi_insert_before (&bsi, label2, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);\n@@ -488,11 +493,11 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n   /* Counter was zero, store new value. */\n   label3 = build1 (LABEL_EXPR, void_type_node, label_decl3);\n   tmp1 = create_tmp_var (optype, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n   stmt1 = build2 (MODIFY_EXPR, optype, tmp1, op);\n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2, \n-\t\t\tbuild1 (NOP_EXPR, GCOV_TYPE_NODE, tmp1));\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref1, tmp2);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2,\n+\t\t  build1 (NOP_EXPR, gcov_type_node, tmp1));\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, ref1, tmp2);\n   bsi_insert_before (&bsi, label3, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);\n@@ -502,13 +507,12 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Increment counter.  */\n   label4 = build1 (LABEL_EXPR, void_type_node, label_decl4);\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref2);\n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2,\n-\t\t      build (PLUS_EXPR, GCOV_TYPE_NODE, \n-\t\t\t     tmp1, integer_one_node));\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref2, tmp2);\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1, ref2);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2,\n+\t\t  build (PLUS_EXPR, gcov_type_node, tmp1, integer_one_node));\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, ref2, tmp2);\n   bsi_insert_before (&bsi, label4, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);\n@@ -521,13 +525,12 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n      it is unable to update them correctly, or because it will duplicate\n      the block or its part).  */\n   label5 = build1 (LABEL_EXPR, void_type_node, label_decl5);\n-  tmp1 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  tmp2 = create_tmp_var (GCOV_TYPE_NODE, \"PROF\");\n-  stmt1 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp1, ref3);\n-  stmt2 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, tmp2,\n-\t\t      build (PLUS_EXPR, GCOV_TYPE_NODE, \n-\t\t\t     tmp1, integer_one_node));\n-  stmt3 = build2 (MODIFY_EXPR, GCOV_TYPE_NODE, ref3, tmp2);\n+  tmp1 = create_tmp_var (gcov_type_node, \"PROF\");\n+  tmp2 = create_tmp_var (gcov_type_node, \"PROF\");\n+  stmt1 = build2 (MODIFY_EXPR, gcov_type_node, tmp1, ref3);\n+  stmt2 = build2 (MODIFY_EXPR, gcov_type_node, tmp2,\n+\t\t  build (PLUS_EXPR, gcov_type_node, tmp1, integer_one_node));\n+  stmt3 = build2 (MODIFY_EXPR, gcov_type_node, ref3, tmp2);\n   bsi_insert_before (&bsi, label5, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt1, BSI_SAME_STMT);\n   bsi_insert_before (&bsi, stmt2, BSI_SAME_STMT);"}, {"sha": "26034092dd30427de862461e250b12d8f8c4f46a", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070e396943c58c4e0f9fc01395ba9b4679ebb0f3/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "patch": "@@ -1242,7 +1242,8 @@ tree_divmod_fixed_value_transform (tree stmt)\n   /* Compute probability of taking the optimal path.  */\n   prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n \n-  tree_val = build_int_cst_wide (GCOV_TYPE_NODE, val & 0xffffffffull, val >> 32);\n+  tree_val = build_int_cst_wide (get_gcov_type (),\n+\t\t\t\t val & 0xffffffffull, val >> 32);\n   result = tree_divmod_fixed_value (stmt, op, op1, op2, tree_val, prob, count, all);\n \n   TREE_OPERAND (modify, 1) = result;"}]}