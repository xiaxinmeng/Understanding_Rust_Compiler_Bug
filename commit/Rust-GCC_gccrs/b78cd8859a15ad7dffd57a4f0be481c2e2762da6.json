{"sha": "b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4Y2Q4ODU5YTE1YWQ3ZGZmZDU3YTRmMGJlNDgxYzJlMjc2MmRhNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-20T14:15:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-20T14:15:52Z"}, "message": "ggc-page.c: Include cfgloop.h.\n\n2009-10-20  Richard Guenther  <rguenther@suse.de>\n\n\t* ggc-page.c: Include cfgloop.h.\n\t(struct max_alignment): Drop long double, add void *.\n\t(extra_order_size_table): Add low non-power-of-two multiples\n\tof MAX_ALIGNMENT.  Drop small type-based entries, add\n\ttree_type, cgraph_node and loop.\n\t* alloc-pool.c (struct allocation_object_def): Drop long double\n\taligning element.\n\nFrom-SVN: r153014", "tree": {"sha": "322a27d1030541cab9540d8239d50c48f6395e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322a27d1030541cab9540d8239d50c48f6395e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8345c8e4278ecde5c20a1825d136e941833f04dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345c8e4278ecde5c20a1825d136e941833f04dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8345c8e4278ecde5c20a1825d136e941833f04dc"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "40b2359f30cd50f6be606f436652a3d0d9aa1167", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "patch": "@@ -1,3 +1,13 @@\n+2009-10-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* ggc-page.c: Include cfgloop.h.\n+\t(struct max_alignment): Drop long double, add void *.\n+\t(extra_order_size_table): Add low non-power-of-two multiples\n+\tof MAX_ALIGNMENT.  Drop small type-based entries, add\n+\ttree_type, cgraph_node and loop.\n+\t* alloc-pool.c (struct allocation_object_def): Drop long double\n+\taligning element.\n+\n 2009-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/41340"}, {"sha": "cb5d83d23ee6c24128c7fdfe93223ea09810b5cd", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "patch": "@@ -41,10 +41,10 @@ typedef struct allocation_object_def\n \n       /* Because we want any type of data to be well aligned after the ID,\n \t the following elements are here.  They are never accessed so\n-\t the allocated object may be even smaller than this structure.  */\n+\t the allocated object may be even smaller than this structure.\n+\t We do not care about alignment for floating-point types.  */\n       char *align_p;\n       HOST_WIDEST_INT align_i;\n-      long double align_ld;\n     } u;\n } allocation_object;\n "}, {"sha": "adb32880cfa609c94a218d21c8b9814685fbaee3", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78cd8859a15ad7dffd57a4f0be481c2e2762da6/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=b78cd8859a15ad7dffd57a4f0be481c2e2762da6", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"params.h\"\n #include \"tree-flow.h\"\n+#include \"cfgloop.h\"\n #include \"plugin.h\"\n \n /* Prefer MAP_ANON(YMOUS) to /dev/zero, since we don't need to keep a\n@@ -157,6 +158,24 @@ along with GCC; see the file COPYING3.  If not see\n #define OFFSET_TO_BIT(OFFSET, ORDER) \\\n   (((OFFSET) * DIV_MULT (ORDER)) >> DIV_SHIFT (ORDER))\n \n+/* We use this structure to determine the alignment required for\n+   allocations.  For power-of-two sized allocations, that's not a\n+   problem, but it does matter for odd-sized allocations.\n+   We do not care about alignment for floating-point types.  */\n+\n+struct max_alignment {\n+  char c;\n+  union {\n+    HOST_WIDEST_INT i;\n+    void *p;\n+  } u;\n+};\n+\n+/* The biggest alignment required.  */\n+\n+#define MAX_ALIGNMENT (offsetof (struct max_alignment, u))\n+\n+\n /* The number of extra orders, not corresponding to power-of-two sized\n    objects.  */\n \n@@ -173,42 +192,35 @@ along with GCC; see the file COPYING3.  If not see\n    thing you need to do to add a new special allocation size.  */\n \n static const size_t extra_order_size_table[] = {\n-  sizeof (struct var_ann_d),\n+  /* Extra orders for small non-power-of-two multiples of MAX_ALIGNMENT.\n+     There are a lot of structures with these sizes and explicitly\n+     listing them risks orders being dropped because they changed size.  */\n+  MAX_ALIGNMENT * 3,\n+  MAX_ALIGNMENT * 5,\n+  MAX_ALIGNMENT * 6,\n+  MAX_ALIGNMENT * 7,\n+  MAX_ALIGNMENT * 9,\n+  MAX_ALIGNMENT * 10,\n+  MAX_ALIGNMENT * 11,\n+  MAX_ALIGNMENT * 12,\n+  MAX_ALIGNMENT * 13,\n+  MAX_ALIGNMENT * 14,\n+  MAX_ALIGNMENT * 15,\n   sizeof (struct tree_decl_non_common),\n   sizeof (struct tree_field_decl),\n   sizeof (struct tree_parm_decl),\n   sizeof (struct tree_var_decl),\n-  sizeof (struct tree_list),\n-  sizeof (struct tree_ssa_name),\n+  sizeof (struct tree_type),\n   sizeof (struct function),\n   sizeof (struct basic_block_def),\n-  sizeof (bitmap_element),\n-  sizeof (bitmap_head),\n-  TREE_EXP_SIZE (2),\n-  RTL_SIZE (2),\t\t\t/* MEM, PLUS, etc.  */\n-  RTL_SIZE (9),\t\t\t/* INSN */\n+  sizeof (struct cgraph_node),\n+  sizeof (struct loop),\n };\n \n /* The total number of orders.  */\n \n #define NUM_ORDERS (HOST_BITS_PER_PTR + NUM_EXTRA_ORDERS)\n \n-/* We use this structure to determine the alignment required for\n-   allocations.  For power-of-two sized allocations, that's not a\n-   problem, but it does matter for odd-sized allocations.  */\n-\n-struct max_alignment {\n-  char c;\n-  union {\n-    HOST_WIDEST_INT i;\n-    long double d;\n-  } u;\n-};\n-\n-/* The biggest alignment required.  */\n-\n-#define MAX_ALIGNMENT (offsetof (struct max_alignment, u))\n-\n /* Compute the smallest nonnegative number which when added to X gives\n    a multiple of F.  */\n "}]}