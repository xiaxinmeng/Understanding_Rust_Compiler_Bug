{"sha": "f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1OWZmMWEwOWJiMWVmMjU4MGY2YWIxODYyY2YxMjQ4YTA2MzljZA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-10-15T05:39:23Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-10-15T05:39:23Z"}, "message": "c4x.md: Define mode for remaining unspec operators.\n\n\t* config/c4x/c4x.md:  Define mode for remaining unspec operators.\n\t* config/c4x/c4x.c (dst_operand):  Use nonimmediate_operand.\n\nFrom-SVN: r30000", "tree": {"sha": "84d3541025b166d58ac294e9d9d66d94f9a42afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84d3541025b166d58ac294e9d9d66d94f9a42afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/comments", "author": null, "committer": null, "parents": [{"sha": "fc524c1ca957e387f2047e72e27cefb2aafdb1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc524c1ca957e387f2047e72e27cefb2aafdb1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc524c1ca957e387f2047e72e27cefb2aafdb1be"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "1052217e5792d8cb69769e480ca9fd45b38c3b95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "patch": "@@ -1,3 +1,8 @@\n+Fri Oct 15 18:36:07 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md:  Define mode for remaining unspec operators.\n+\t* config/c4x/c4x.c (dst_operand):  Use nonimmediate_operand.\n+\t\n Thu Oct 14 22:14:23 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* i386.md (movstricthi_1): Allow r/r."}, {"sha": "837d03ddf25da4c4484f608f6292d59ac0a9c855", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "patch": "@@ -593,6 +593,7 @@ c4x_function_arg (cum, mode, type, named)\n     return NULL_RTX;\n }\n \n+\n void\n c4x_va_start (stdarg_p, valist, nextarg)\n      int stdarg_p;\n@@ -604,9 +605,9 @@ c4x_va_start (stdarg_p, valist, nextarg)\n   std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n }\n \n+\n /* C[34]x arguments grow in weird ways (downwards) that the standard\n    varargs stuff can't handle. */\n-\n rtx\n c4x_va_arg (valist, type)\n      tree valist, type;\n@@ -620,6 +621,7 @@ c4x_va_arg (valist, type)\n   return expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n }\n \n+\n static int\n c4x_isr_reg_used_p (regno)\n      int regno;\n@@ -3059,7 +3061,6 @@ symbolic_address_operand (op, mode)\n     }\n }\n \n-\n /* Check dst operand of a move instruction.  */\n int\n dst_operand (op, mode)\n@@ -3073,7 +3074,7 @@ dst_operand (op, mode)\n   if (REG_P (op))\n     return reg_operand (op, mode);\n \n-  return memory_operand (op, mode);\n+  return nonimmediate_operand (op, mode);\n }\n \n "}, {"sha": "d8979b654668b85135e7ee4cba86ce8ca25e914f", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "patch": "@@ -2639,7 +2639,7 @@\n (define_insn \"*lshlqi3_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n         (ashift:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")\n-                   (unspec [(match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")] 3)))\n+                   (unspec:QI [(match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")] 3)))\n    (clobber (reg:CC 21))]\n   \"valid_operands (ASHIFT, operands, QImode)\"\n   \"@\n@@ -3587,7 +3587,7 @@\n ; Inlined float square root for C4x\n (define_expand \"sqrtqf2_inline\"\n   [(parallel [(set (match_dup 2)\n-\t           (unspec [(match_operand:QF 1 \"src_operand\" \"\")] 10))\n+\t           (unspec:QF [(match_operand:QF 1 \"src_operand\" \"\")] 10))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_dup 3) (mult:QF (match_dup 5) (match_dup 1)))\n \t      (clobber (reg:CC_NOOV 21))])\n@@ -3610,7 +3610,7 @@\n    (parallel [(set (match_dup 4) (mult:QF (match_dup 2) (match_dup 1)))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_operand:QF 0 \"reg_operand\" \"\")\n-\t           (unspec [(match_dup 4)] 6))\n+\t           (unspec:QF [(match_dup 4)] 6))\n \t      (clobber (reg:CC_NOOV 21))])]\n   \"! TARGET_C3X\"\n   \"if (! reload_in_progress\n@@ -3836,7 +3836,7 @@\n ; Inlined float divide for C4x\n (define_expand \"divqf3_inline\"\n   [(parallel [(set (match_dup 3)\n-\t           (unspec [(match_operand:QF 2 \"src_operand\" \"\")] 5))\n+\t           (unspec:QF [(match_operand:QF 2 \"src_operand\" \"\")] 5))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_dup 4) (mult:QF (match_dup 2) (match_dup 3)))\n \t      (clobber (reg:CC_NOOV 21))])\n@@ -3855,7 +3855,7 @@\n \t         \t    (match_dup 3)))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_operand:QF 0 \"reg_operand\" \"\")\n-\t           (unspec [(match_dup 3)] 6))\n+\t           (unspec:QF [(match_dup 3)] 6))\n \t      (clobber (reg:CC_NOOV 21))])]\n   \"! TARGET_C3X\"\n   \"if (! reload_in_progress\n@@ -5267,7 +5267,7 @@\n        (match_operand:HF 1 \"reg_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (match_dup 2) (float_truncate:QF (match_dup 1)))\n-   (set (match_dup 3) (unspec [(match_dup 1)] 9))]\n+   (set (match_dup 3) (unspec:QI [(match_dup 1)] 9))]\n  \"operands[2] = c4x_operand_subword (operands[0], 0, 1, HFmode);\n   operands[3] = c4x_operand_subword (operands[0], 1, 1, HFmode);\n   PUT_MODE (operands[2], QFmode);\n@@ -5337,7 +5337,7 @@\n   [(set (mem:QF (pre_inc:QI (reg:QI 20)))\n         (float_truncate:QF (match_dup 0)))\n    (set (mem:QI (pre_inc:QI (reg:QI 20)))\n-        (unspec [(match_dup 0)] 9))]\n+        (unspec:QI [(match_dup 0)] 9))]\n  \"\")\n \n (define_insn \"pushhf_trunc\"\n@@ -5519,7 +5519,7 @@\n ; Inlined float square root for C4x\n (define_expand \"sqrthf2_inline\"\n   [(parallel [(set (match_dup 2)\n-\t           (unspec [(match_operand:HF 1 \"reg_operand\" \"\")] 10))\n+\t           (unspec:HF [(match_operand:HF 1 \"reg_operand\" \"\")] 10))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_dup 3) (mult:HF (match_dup 5) (match_dup 1)))\n \t      (clobber (reg:CC_NOOV 21))])\n@@ -5676,7 +5676,7 @@\n ; Inlined float divide for C4x\n (define_expand \"divhf3_inline\"\n   [(parallel [(set (match_dup 3)\n-\t           (unspec [(match_operand:HF 2 \"reg_operand\" \"\")] 5))\n+\t           (unspec:HF [(match_operand:HF 2 \"reg_operand\" \"\")] 5))\n \t      (clobber (reg:CC_NOOV 21))])\n    (parallel [(set (match_dup 4) (mult:HF (match_dup 2) (match_dup 3)))\n \t      (clobber (reg:CC_NOOV 21))])\n@@ -6261,7 +6261,7 @@\n   /* If the shift count is greater than 32 this will do an arithmetic\n      right shift.  However, we need a logical right shift.  */\n   (parallel [(set (match_dup 9)\n-                  (ashift:QI (match_dup 4) (unspec [(match_dup 10)] 3)))\n+                  (ashift:QI (match_dup 4) (unspec:QI [(match_dup 10)] 3)))\n              (clobber (reg:CC 21))])\n   (set (match_dup 6) (match_dup 8))\n   (parallel [(set (match_dup 5)\n@@ -6368,8 +6368,8 @@\n                     (match_operand:HI 1 \"src_operand\" \"\")))]\n   \"! reload_completed\"\n   [(parallel [(set (reg:CC 21)\n-                   (unspec [(compare:CC (match_dup 0)\n-                                        (match_dup 1))] 4))\n+                   (unspec:CC [(compare:CC (match_dup 0)\n+                                           (match_dup 1))] 4))\n               (clobber (match_scratch:QI 2 \"\"))\n \t      (clobber (match_scratch:QI 3 \"\"))])]\n   \"\")\n@@ -6380,8 +6380,8 @@\n                          (match_operand:HI 1 \"src_operand\" \"\")))]\n   \"! reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 21)\n-                   (unspec [(compare:CC_NOOV (match_dup 0)\n-                                             (match_dup 1))] 4))\n+                   (unspec:CC_NOOV [(compare:CC_NOOV (match_dup 0)\n+                                                     (match_dup 1))] 4))\n               (clobber (match_scratch:QI 2 \"\"))\n \t      (clobber (match_scratch:QI 3 \"\"))])]\n   \"\")"}]}