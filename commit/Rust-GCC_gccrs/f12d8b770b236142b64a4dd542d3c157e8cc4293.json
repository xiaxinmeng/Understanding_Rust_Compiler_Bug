{"sha": "f12d8b770b236142b64a4dd542d3c157e8cc4293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyZDhiNzcwYjIzNjE0MmI2NGE0ZGQ1NDJkM2MxNTdlOGNjNDI5Mw==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-03-17T06:53:58Z"}, "committer": {"name": "YizhePKU", "email": "yizhe@pku.edu.cn", "date": "2021-04-02T17:10:45Z"}, "message": "Fix out-of-bound-array-access in type checking", "tree": {"sha": "46c541ff09a933ff16bc652b97c53e585bc6d322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46c541ff09a933ff16bc652b97c53e585bc6d322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12d8b770b236142b64a4dd542d3c157e8cc4293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12d8b770b236142b64a4dd542d3c157e8cc4293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12d8b770b236142b64a4dd542d3c157e8cc4293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12d8b770b236142b64a4dd542d3c157e8cc4293/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba543eb04c4a724d7e40f48a14088629127821a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba543eb04c4a724d7e40f48a14088629127821a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba543eb04c4a724d7e40f48a14088629127821a"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a734dcf41a0c93b2148b54b230f3d0e1869d1299", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12d8b770b236142b64a4dd542d3c157e8cc4293/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12d8b770b236142b64a4dd542d3c157e8cc4293/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f12d8b770b236142b64a4dd542d3c157e8cc4293", "patch": "@@ -35,6 +35,9 @@ class TypeCheckExpr : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n+  /* Perform type checking on expr. Also runs type unification algorithm.\n+     Returns the unified type of expr.\n+     `inside_loop` acts as a context for BreakExpr, etc. May change later. */\n   static TyTy::BaseType *Resolve (HIR::Expr *expr, bool inside_loop)\n   {\n     TypeCheckExpr resolver (inside_loop);\n@@ -686,6 +689,7 @@ class TypeCheckExpr : public TypeCheckBase\n     HIR::ArrayElems *elements = expr.get_internal_elements ();\n     size_t num_elems = elements->get_num_elements ();\n \n+    // Check the type of array elements\n     elements->accept_vis (*this);\n     rust_assert (infered_array_elems != nullptr);\n \n@@ -702,14 +706,19 @@ class TypeCheckExpr : public TypeCheckBase\n       return true;\n     });\n \n-    infered_array_elems = types[0];\n-    for (size_t i = 1; i < types.size (); i++)\n+    // Create an infer type and register its hir_id\n+    infered_array_elems\n+      = new TyTy::InferType (mappings->get_next_hir_id (),\n+\t\t\t     TyTy::InferType::InferTypeKind::GENERAL);\n+\n+    for (auto &type : types)\n       {\n-\tinfered_array_elems = infered_array_elems->unify (types.at (i));\n+\tinfered_array_elems = infered_array_elems->unify (type);\n       }\n-\n     for (auto &elem : types)\n-      infered_array_elems->append_reference (elem->get_ref ());\n+      {\n+\tinfered_array_elems->append_reference (elem->get_ref ());\n+      }\n   }\n \n   void visit (HIR::ArrayElemsCopied &elems) override\n@@ -995,7 +1004,11 @@ class TypeCheckExpr : public TypeCheckBase\n     gcc_unreachable ();\n   }\n \n+  /* The return value of TypeCheckExpr::Resolve */\n   TyTy::BaseType *infered;\n+\n+  /* The return value of visit(ArrayElemsValues&) and visit(ArrayElemsCopied&)\n+     Stores the type of array elements, if `expr` is ArrayExpr. */\n   TyTy::BaseType *infered_array_elems;\n \n   bool inside_loop;"}]}