{"sha": "81e0f09288052014c5fb3136e6abc9dfcc7629db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFlMGYwOTI4ODA1MjAxNGM1ZmIzMTM2ZTZhYmM5ZGZjYzc2MjlkYg==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2018-01-09T21:33:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T21:33:59Z"}, "message": "compiler: make top-level decl for address-taken non-escaping locals\n    \n    If a local variable's address is taken and passed out of its\n    lexical scope, GCC backend may reuse the stack slot for the\n    variable, not knowing it is still live through a pointer. In\n    this case, we create a top-level temporary variable and let the\n    user-defined variable refer to the temporary variable as its\n    storage location. As the temporary variable is declared at the\n    top level, its stack slot will remain live throughout the\n    function.\n    \n    Reviewed-on: https://go-review.googlesource.com/84675\n\n\t* go-gcc.cc (local_variable): Add decl_var parameter.\n\nFrom-SVN: r256398", "tree": {"sha": "d85e4d07a55f301cdce0f9af88f503c2cc802899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85e4d07a55f301cdce0f9af88f503c2cc802899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81e0f09288052014c5fb3136e6abc9dfcc7629db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e0f09288052014c5fb3136e6abc9dfcc7629db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e0f09288052014c5fb3136e6abc9dfcc7629db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e0f09288052014c5fb3136e6abc9dfcc7629db/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ef72c3661318d0b5d7e3fc8821d136bbba37194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef72c3661318d0b5d7e3fc8821d136bbba37194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef72c3661318d0b5d7e3fc8821d136bbba37194"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "ae6d000657366fb0906c09d214c84f333d049447", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -1,3 +1,7 @@\n+2018-01-09  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* go-gcc.cc (local_variable): Add decl_var parameter.\n+\n 2018-01-09  Cherry Zhang  <cherryyz@google.com>\n \n \t* lang.opt (fgo-debug-escape-hash): New option."}, {"sha": "9bc049ebd9a549468208766e2849d2ed59f13e57", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -426,7 +426,7 @@ class Gcc_backend : public Backend\n   global_variable_set_init(Bvariable*, Bexpression*);\n \n   Bvariable*\n-  local_variable(Bfunction*, const std::string&, Btype*, bool,\n+  local_variable(Bfunction*, const std::string&, Btype*, Bvariable*, bool,\n \t\t Location);\n \n   Bvariable*\n@@ -2584,8 +2584,8 @@ Gcc_backend::global_variable_set_init(Bvariable* var, Bexpression* expr)\n \n Bvariable*\n Gcc_backend::local_variable(Bfunction* function, const std::string& name,\n-\t\t\t    Btype* btype, bool is_address_taken,\n-\t\t\t    Location location)\n+\t\t\t    Btype* btype, Bvariable* decl_var, \n+\t\t\t    bool is_address_taken, Location location)\n {\n   tree type_tree = btype->get_tree();\n   if (type_tree == error_mark_node)\n@@ -2597,6 +2597,11 @@ Gcc_backend::local_variable(Bfunction* function, const std::string& name,\n   TREE_USED(decl) = 1;\n   if (is_address_taken)\n     TREE_ADDRESSABLE(decl) = 1;\n+  if (decl_var != NULL)\n+    {\n+      DECL_HAS_VALUE_EXPR_P(decl) = 1;\n+      SET_DECL_VALUE_EXPR(decl, decl_var->get_decl());\n+    }\n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n }"}, {"sha": "870348de6ef46c12720f9ea8590d3343b7d98846", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -1,4 +1,4 @@\n-0445dc01fd75325ff99f839cfaab29cb9f2a1f97\n+29e821cf865aa6ee06cee9dae9823295202b1a61\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b6011053e695dfebea7eccd8fe954e67bd91e548", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -516,15 +516,18 @@ class Backend\n   // Create a local variable.  The frontend will create the local\n   // variables first, and then create the block which contains them.\n   // FUNCTION is the function in which the variable is defined.  NAME\n-  // is the name of the variable.  TYPE is the type.  IS_ADDRESS_TAKEN\n-  // is true if the address of this variable is taken (this implies\n-  // that the address does not escape the function, as otherwise the\n-  // variable would be on the heap).  LOCATION is where the variable\n-  // is defined.  For each local variable the frontend will call\n-  // init_statement to set the initial value.\n+  // is the name of the variable.  TYPE is the type.  DECL_VAR, if not\n+  // null, gives the location at which the value of this variable may\n+  // be found, typically used to create an inner-scope reference to an\n+  // outer-scope variable, to extend the lifetime of the variable beyond\n+  // the inner scope.  IS_ADDRESS_TAKEN is true if the address of this\n+  // variable is taken (this implies that the address does not escape\n+  // the function, as otherwise the variable would be on the heap).\n+  // LOCATION is where the variable is defined.  For each local variable\n+  // the frontend will call init_statement to set the initial value.\n   virtual Bvariable*\n   local_variable(Bfunction* function, const std::string& name, Btype* type,\n-\t\t bool is_address_taken, Location location) = 0;\n+\t\t Bvariable* decl_var, bool is_address_taken, Location location) = 0;\n \n   // Create a function parameter.  This is an incoming parameter, not\n   // a result parameter (result parameters are treated as local"}, {"sha": "cdb8b184368f6f13173b7764fd7439da2a2c9dc8", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -3876,6 +3876,29 @@ Flatten::variable(Named_object* no)\n       return TRAVERSE_CONTINUE;\n     }\n \n+  if (!no->var_value()->is_parameter()\n+      && !no->var_value()->is_receiver()\n+      && !no->var_value()->is_closure()\n+      && no->var_value()->is_non_escaping_address_taken()\n+      && !no->var_value()->is_in_heap()\n+      && no->var_value()->toplevel_decl() == NULL)\n+    {\n+      // Local variable that has address taken but not escape.\n+      // It needs to be live beyond its lexical scope. So we\n+      // create a top-level declaration for it.\n+      // No need to do it if it is already in the top level.\n+      Block* top_block = function_->func_value()->block();\n+      if (top_block->bindings()->lookup_local(no->name()) != no)\n+        {\n+          Variable* var = no->var_value();\n+          Temporary_statement* ts =\n+            Statement::make_temporary(var->type(), NULL, var->location());\n+          ts->set_is_address_taken();\n+          top_block->add_statement_at_front(ts);\n+          var->set_toplevel_decl(ts);\n+        }\n+    }\n+\n   go_assert(!no->var_value()->has_pre_init());\n \n   return TRAVERSE_SKIP_COMPONENTS;\n@@ -6174,7 +6197,8 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n     type_from_init_tuple_(false), type_from_range_index_(false),\n     type_from_range_value_(false), type_from_chan_element_(false),\n     is_type_switch_var_(false), determined_type_(false),\n-    in_unique_section_(false), escapes_(true)\n+    in_unique_section_(false), escapes_(true),\n+    toplevel_decl_(NULL)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);\n@@ -6751,9 +6775,19 @@ Variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t\t\t\t\t\t   is_address_taken,\n \t\t\t\t\t\t   this->location_);\n \t      else\n-\t\tbvar = backend->local_variable(bfunction, n, btype,\n-\t\t\t\t\t       is_address_taken,\n-\t\t\t\t\t       this->location_);\n+                {\n+                  Bvariable* bvar_decl = NULL;\n+                  if (this->toplevel_decl_ != NULL)\n+                    {\n+                      Translate_context context(gogo, NULL, NULL, NULL);\n+                      bvar_decl = this->toplevel_decl_->temporary_statement()\n+                        ->get_backend_variable(&context);\n+                    }\n+                  bvar = backend->local_variable(bfunction, n, btype,\n+                                                 bvar_decl,\n+                                                 is_address_taken,\n+                                                 this->location_);\n+                }\n \t    }\n \t  this->backend_ = bvar;\n \t}\n@@ -6785,7 +6819,7 @@ Result_variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t  bool is_address_taken = (this->is_non_escaping_address_taken_\n \t\t\t\t   && !this->is_in_heap());\n \t  this->backend_ = backend->local_variable(bfunction, n, btype,\n-\t\t\t\t\t\t   is_address_taken,\n+\t\t\t\t\t\t   NULL, is_address_taken,\n \t\t\t\t\t\t   this->location_);\n \t}\n     }"}, {"sha": "65762727989d9a7fca83d2657335aeeed723de8a", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e0f09288052014c5fb3136e6abc9dfcc7629db/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=81e0f09288052014c5fb3136e6abc9dfcc7629db", "patch": "@@ -1884,6 +1884,20 @@ class Variable\n     this->in_unique_section_ = true;\n   }\n \n+  // Return the top-level declaration for this variable.\n+  Statement*\n+  toplevel_decl()\n+  { return this->toplevel_decl_; }\n+\n+  // Set the top-level declaration for this variable. Only used for local\n+  // variables\n+  void\n+  set_toplevel_decl(Statement* s)\n+  {\n+    go_assert(!this->is_global_ && !this->is_parameter_ && !this->is_receiver_);\n+    this->toplevel_decl_ = s;\n+  }\n+\n   // Traverse the initializer expression.\n   int\n   traverse_expression(Traverse*, unsigned int traverse_mask);\n@@ -1984,6 +1998,9 @@ class Variable\n   // Whether this variable escapes the function it is created in.  This is\n   // true until shown otherwise.\n   bool escapes_ : 1;\n+  // The top-level declaration for this variable. Only used for local\n+  // variables. Must be a Temporary_statement if not NULL.\n+  Statement* toplevel_decl_;\n };\n \n // A variable which is really the name for a function return value, or"}]}