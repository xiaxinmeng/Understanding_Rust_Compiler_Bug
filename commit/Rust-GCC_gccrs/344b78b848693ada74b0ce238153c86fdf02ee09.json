{"sha": "344b78b848693ada74b0ce238153c86fdf02ee09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0Yjc4Yjg0ODY5M2FkYTc0YjBjZTIzODE1M2M4NmZkZjAyZWUwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-09-30T19:35:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-09-30T19:35:17Z"}, "message": "reload.c (push_reload): Handle subregs and secondary memory.\n\n\n\t* reload.c (push_reload): Handle subregs and secondary memory.\n\t* reload1.c (gen_reload): Likewise.\n\n\t* jump.c (reg_or_subregno): New function.\n\t* rtl.h (reg_or_subregno): Declare\n\t* unroll.c (find_splittable_givs): Handle subregs.\n\nFrom-SVN: r57663", "tree": {"sha": "935edce515bf5aaa1706595857265e30bbcf42c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/935edce515bf5aaa1706595857265e30bbcf42c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/344b78b848693ada74b0ce238153c86fdf02ee09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344b78b848693ada74b0ce238153c86fdf02ee09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344b78b848693ada74b0ce238153c86fdf02ee09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344b78b848693ada74b0ce238153c86fdf02ee09/comments", "author": null, "committer": null, "parents": [{"sha": "5a9a196102ff0d1bf27831e0ce396049cc334db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9a196102ff0d1bf27831e0ce396049cc334db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9a196102ff0d1bf27831e0ce396049cc334db8"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "ef6c2cac0c9de4bdfa39d934a13638e8cd5b3507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -1,3 +1,12 @@\n+Mon Sep 30 21:33:23 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* reload.c (push_reload): Handle subregs and secondary memory.\n+\t* reload1.c (gen_reload): Likewise.\n+\n+\t* jump.c (reg_or_subregno): New function.\n+\t* rtl.h (reg_or_subregno): Declare\n+\t* unroll.c (find_splittable_givs): Handle subregs.\n+\n 2002-09-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* store-layout.c (finish_record_layout): Add free_p parameter."}, {"sha": "3b75110253b505db9458f61e627ffd250936ffef", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -2410,3 +2410,15 @@ true_regnum (x)\n     }\n   return -1;\n }\n+\n+/* Return regno of the register REG and handle subregs too.  */\n+unsigned int\n+reg_or_subregno (reg)\n+     rtx reg;\n+{\n+  if (REG_P (reg))\n+    return REGNO (reg);\n+  if (GET_CODE (reg) == SUBREG)\n+    return REGNO (SUBREG_REG (reg));\n+  abort ();\n+}"}, {"sha": "2b4272265126aaa5e7014f04075d425ad9168e6e", "filename": "gcc/reload.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -1285,9 +1285,9 @@ push_reload (in, out, inloc, outloc, class,\n \n #ifdef SECONDARY_MEMORY_NEEDED\n       /* If a memory location is needed for the copy, make one.  */\n-      if (in != 0 && GET_CODE (in) == REG\n-\t  && REGNO (in) < FIRST_PSEUDO_REGISTER\n-\t  && SECONDARY_MEMORY_NEEDED (REGNO_REG_CLASS (REGNO (in)),\n+      if (in != 0 && (GET_CODE (in) == REG || GET_CODE (in) == SUBREG)\n+\t  && reg_or_subregno (in) < FIRST_PSEUDO_REGISTER\n+\t  && SECONDARY_MEMORY_NEEDED (REGNO_REG_CLASS (reg_or_subregno (in)),\n \t\t\t\t      class, inmode))\n \tget_secondary_mem (in, inmode, opnum, type);\n #endif\n@@ -1315,9 +1315,10 @@ push_reload (in, out, inloc, outloc, class,\n       n_reloads++;\n \n #ifdef SECONDARY_MEMORY_NEEDED\n-      if (out != 0 && GET_CODE (out) == REG\n-\t  && REGNO (out) < FIRST_PSEUDO_REGISTER\n-\t  && SECONDARY_MEMORY_NEEDED (class, REGNO_REG_CLASS (REGNO (out)),\n+      if (out != 0 && (GET_CODE (out) == REG || GET_CODE (out) == SUBREG)\n+\t  && reg_or_subregno (out) < FIRST_PSEUDO_REGISTER\n+\t  && SECONDARY_MEMORY_NEEDED (class,\n+\t\t\t\t      REGNO_REG_CLASS (reg_or_subregno (out)),\n \t\t\t\t      outmode))\n \tget_secondary_mem (out, outmode, opnum, type);\n #endif"}, {"sha": "ea703f162eaca88a9e638e0537f39677252e1b48", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -7532,10 +7532,12 @@ gen_reload (out, in, opnum, type)\n \n #ifdef SECONDARY_MEMORY_NEEDED\n   /* If we need a memory location to do the move, do it that way.  */\n-  else if (GET_CODE (in) == REG && REGNO (in) < FIRST_PSEUDO_REGISTER\n-\t   && GET_CODE (out) == REG && REGNO (out) < FIRST_PSEUDO_REGISTER\n-\t   && SECONDARY_MEMORY_NEEDED (REGNO_REG_CLASS (REGNO (in)),\n-\t\t\t\t       REGNO_REG_CLASS (REGNO (out)),\n+  else if ((GET_CODE (in) == REG || GET_CODE (in) == SUBREG)\n+\t   && reg_or_subregno (in) < FIRST_PSEUDO_REGISTER\n+\t   && (GET_CODE (out) == REG || GET_CODE (out) == SUBREG)\n+\t   && reg_or_subregno (out) < FIRST_PSEUDO_REGISTER\n+\t   && SECONDARY_MEMORY_NEEDED (REGNO_REG_CLASS (reg_or_subregno (in)),\n+\t\t\t\t       REGNO_REG_CLASS (reg_or_subregno (out)),\n \t\t\t\t       GET_MODE (out)))\n     {\n       /* Get the memory to use and rewrite both registers to its mode.  */"}, {"sha": "d4147c221c0a598f1e6a4e444a4e99ba49a27eb9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -1943,6 +1943,7 @@ extern int invert_jump_1\t\tPARAMS ((rtx, rtx));\n extern int invert_jump\t\t\tPARAMS ((rtx, rtx, int));\n extern int rtx_renumbered_equal_p\tPARAMS ((rtx, rtx));\n extern int true_regnum\t\t\tPARAMS ((rtx));\n+extern unsigned int reg_or_subregno\tPARAMS ((rtx));\n extern int redirect_jump_1\t\tPARAMS ((rtx, rtx));\n extern int redirect_jump\t\tPARAMS ((rtx, rtx, int));\n extern void rebuild_jump_labels\t\tPARAMS ((rtx));"}, {"sha": "a1b0287304323bee9344d91df3f2d2af1d0b0841", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344b78b848693ada74b0ce238153c86fdf02ee09/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=344b78b848693ada74b0ce238153c86fdf02ee09", "patch": "@@ -2822,7 +2822,7 @@ find_splittable_givs (loop, bl, unroll_type, increment, unroll_number)\n \t\t  value = tem;\n \t\t}\n \n-\t      splittable_regs[REGNO (v->new_reg)] = value;\n+\t      splittable_regs[reg_or_subregno (v->new_reg)] = value;\n \t    }\n \t  else\n \t    continue;\n@@ -2856,7 +2856,7 @@ find_splittable_givs (loop, bl, unroll_type, increment, unroll_number)\n \t  if (! v->ignore)\n \t    count = REG_IV_CLASS (ivs, REGNO (v->src_reg))->biv_count;\n \n-\t  splittable_regs_updates[REGNO (v->new_reg)] = count;\n+\t  splittable_regs_updates[reg_or_subregno (v->new_reg)] = count;\n \t}\n \n       result++;"}]}