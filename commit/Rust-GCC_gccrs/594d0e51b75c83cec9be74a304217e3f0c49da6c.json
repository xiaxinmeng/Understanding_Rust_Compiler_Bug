{"sha": "594d0e51b75c83cec9be74a304217e3f0c49da6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0ZDBlNTFiNzVjODNjZWM5YmU3NGEzMDQyMTdlM2YwYzQ5ZGE2Yw==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2018-01-09T20:42:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T20:42:08Z"}, "message": "compiler: add escape analysis debug hash\n    \n    Add a flag -fgo-debug-escape-hash for debugging escape analysis.\n    It takes a binary string, optionally led by a \"-\", as argument.\n    When specified, the escape analysis runs only on functions whose\n    name is hashed to a value with matching suffix. The \"-\" sign\n    negates the match, i.e. the analysis runs only on functions with\n    non-matching hash.\n\n    Reviewed-on: https://go-review.googlesource.com/83878\n\n\t* lang.opt (fgo-debug-escape-hash): New option.\n\t* go-c.h (struct go_create_gogo_args): Add debug_escape_hash\n\tfield.\n\t* go-lang.c (go_langhook_init): Set debug_escape_hash field.\n\t* gccgo.texi (Invoking gccgo): Document -fgo-debug-escape-hash.\n\nFrom-SVN: r256393", "tree": {"sha": "970992e35310a150831f81a3e2b91149653faa35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/970992e35310a150831f81a3e2b91149653faa35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/594d0e51b75c83cec9be74a304217e3f0c49da6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594d0e51b75c83cec9be74a304217e3f0c49da6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594d0e51b75c83cec9be74a304217e3f0c49da6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594d0e51b75c83cec9be74a304217e3f0c49da6c/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4f867ca3c54b1bc3d7f6bef824a2d7b78f86c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f867ca3c54b1bc3d7f6bef824a2d7b78f86c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f867ca3c54b1bc3d7f6bef824a2d7b78f86c59"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "4cd75f319ddf3af71fc2b00c616043e669b57242", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -1,3 +1,11 @@\n+2018-01-09  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* lang.opt (fgo-debug-escape-hash): New option.\n+\t* go-c.h (struct go_create_gogo_args): Add debug_escape_hash\n+\tfield.\n+\t* go-lang.c (go_langhook_init): Set debug_escape_hash field.\n+\t* gccgo.texi (Invoking gccgo): Document -fgo-debug-escape-hash.\n+\n 2018-01-05  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-gcc.cc (Gcc_backend::Gcc_backend): Correct"}, {"sha": "48e69d42ddfdaeeb176c574c35c1cce90e9f2a58", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -239,6 +239,13 @@ heap when possible.  In the future this may be the default.\n Output escape analysis debugging information.  Larger values of\n @var{n} generate more information.\n \n+@item -fgo-debug-escape-hash=@var{n}\n+@cindex @option{-fgo-debug-escape-hash}\n+A hash value to debug escape analysis.  @var{n} is a binary string.\n+This runs escape analysis only on functions whose names hash to values\n+that match the given suffix @var{n}.  This can be used to binary\n+search across functions to uncover escape analysis bugs.\n+\n @item -fgo-c-header=@var{file}\n @cindex @option{-fgo-c-header}\n Write top-level named Go struct definitions to @var{file} as C code."}, {"sha": "139c233aab4e5f3299cc491e3b43a04d290fda6a", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -47,6 +47,7 @@ struct go_create_gogo_args\n   bool check_divide_overflow;\n   bool compiling_runtime;\n   int debug_escape_level;\n+  const char* debug_escape_hash;\n   int64_t nil_check_size_threshold;\n };\n "}, {"sha": "b5d8224a54e27c2b07c8c99f31a103f85d08e46b", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -116,6 +116,7 @@ go_langhook_init (void)\n   args.check_divide_overflow = go_check_divide_overflow;\n   args.compiling_runtime = go_compiling_runtime;\n   args.debug_escape_level = go_debug_escape_level;\n+  args.debug_escape_hash = go_debug_escape_hash;\n   args.nil_check_size_threshold = TARGET_AIX ? -1 : 4096;\n   args.linemap = go_get_linemap();\n   args.backend = go_get_backend();"}, {"sha": "5ba0b630b3ea1e55157c1db1635bbb3e2510fb33", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -19,6 +19,7 @@\n #include \"ast-dump.h\"\n #include \"go-optimize.h\"\n #include \"go-diagnostics.h\"\n+#include \"go-sha1.h\"\n \n // class Node.\n \n@@ -821,6 +822,39 @@ Escape_note::parse_tag(std::string* tag)\n \n Go_optimize optimize_allocation_flag(\"allocs\");\n \n+// A helper function to compute whether a function name has a\n+// matching hash value.\n+\n+static bool\n+escape_hash_match(std::string suffix, std::string name)\n+{\n+  if (suffix.empty())\n+    return true;\n+  if (suffix.at(0) == '-')\n+    return !escape_hash_match(suffix.substr(1), name);\n+\n+  const char* p = name.c_str();\n+  Go_sha1_helper* sha1_helper = go_create_sha1_helper();\n+  sha1_helper->process_bytes(p, strlen(p));\n+  std::string s = sha1_helper->finish();\n+  delete sha1_helper;\n+\n+  int j = suffix.size() - 1;\n+  for (int i = s.size() - 1; i >= 0; i--)\n+    {\n+      char c = s.at(i);\n+      for (int k = 0; k < 8; k++, j--, c>>=1)\n+        {\n+          if (j < 0)\n+            return true;\n+          char bit = suffix.at(j) - '0';\n+          if ((c&1) != bit)\n+            return false;\n+        }\n+    }\n+  return false;\n+}\n+\n // Analyze the program flow for escape information.\n \n void\n@@ -839,11 +873,46 @@ Gogo::analyze_escape()\n   // information in this package.\n   this->discover_analysis_sets();\n \n+  if (!this->debug_escape_hash().empty())\n+    std::cerr << \"debug-escape-hash \" << this->debug_escape_hash() << \"\\n\";\n+\n   for (std::vector<Analysis_set>::iterator p = this->analysis_sets_.begin();\n        p != this->analysis_sets_.end();\n        ++p)\n     {\n       std::vector<Named_object*> stack = p->first;\n+\n+      if (!this->debug_escape_hash().empty())\n+        {\n+          bool match = false;\n+          for (std::vector<Named_object*>::const_iterator fn = stack.begin();\n+               fn != stack.end();\n+               ++fn)\n+            match = match || escape_hash_match(this->debug_escape_hash(), (*fn)->message_name());\n+          if (!match)\n+            {\n+              // Escape analysis won't run on these functions, but still\n+              // need to tag them, so the caller knows.\n+              for (std::vector<Named_object*>::iterator fn = stack.begin();\n+                   fn != stack.end();\n+                   ++fn)\n+                if ((*fn)->is_function())\n+                  {\n+                    Function_type* fntype = (*fn)->func_value()->type();\n+                    fntype->set_is_tagged();\n+\n+                    std::cerr << \"debug-escape-hash disables \" << debug_function_name(*fn) << \"\\n\";\n+                  }\n+\n+              continue;\n+            }\n+          for (std::vector<Named_object*>::const_iterator fn = stack.begin();\n+               fn != stack.end();\n+               ++fn)\n+            if ((*fn)->is_function())\n+              std::cerr << \"debug-escape-hash triggers \" << debug_function_name(*fn) << \"\\n\";\n+        }\n+\n       Escape_context* context = new Escape_context(this, p->second);\n \n       // Analyze the flow of each function; build the connection graph."}, {"sha": "62a8a65609c254660ff0535d186e2bc7eb5a1da6", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -41,6 +41,8 @@ go_create_gogo(const struct go_create_gogo_args* args)\n   if (args->c_header != NULL)\n     ::gogo->set_c_header(args->c_header);\n   ::gogo->set_debug_escape_level(args->debug_escape_level);\n+  if (args->debug_escape_hash != NULL)\n+    ::gogo->set_debug_escape_hash(args->debug_escape_hash);\n   ::gogo->set_nil_check_size_threshold(args->nil_check_size_threshold);\n }\n "}, {"sha": "ed044d413cfb7f8926731f4d17b1d7e74a6400df", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -318,6 +318,16 @@ class Gogo\n   set_debug_escape_level(int level)\n   { this->debug_escape_level_ = level; }\n \n+  // Return the hash for debug escape analysis.\n+  std::string\n+  debug_escape_hash() const\n+  { return this->debug_escape_hash_; }\n+\n+  // Set the hash value for debug escape analysis.\n+  void\n+  set_debug_escape_hash(const std::string& s)\n+  { this->debug_escape_hash_ = s; }\n+\n   // Return the size threshold used to determine whether to issue\n   // a nil-check for a given pointer dereference. A threshold of -1\n   // implies that all potentially faulting dereference ops should\n@@ -1035,6 +1045,10 @@ class Gogo\n   // The level of escape analysis debug information to emit, from the\n   // -fgo-debug-escape option.\n   int debug_escape_level_;\n+  // A hash value for debug escape analysis, from the\n+  // -fgo-debug-escape-hash option. The analysis is run only on\n+  // functions with names that hash to the matching value.\n+  std::string debug_escape_hash_;\n   // Nil-check size threshhold.\n   int64_t nil_check_size_threshold_;\n   // A list of types to verify."}, {"sha": "6dbb54298d7e5f03f6fff791797056a8e2e3eee2", "filename": "gcc/go/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594d0e51b75c83cec9be74a304217e3f0c49da6c/gcc%2Fgo%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Flang.opt?ref=594d0e51b75c83cec9be74a304217e3f0c49da6c", "patch": "@@ -81,6 +81,10 @@ fgo-debug-escape\n Go Joined UInteger Var(go_debug_escape_level) Init(0)\n Emit debugging information related to the escape analysis pass when run with -fgo-optimize-allocs.\n \n+fgo-debug-escape-hash=\n+Go Joined RejectNegative Var(go_debug_escape_hash) Init(0)\n+-fgo-debug-escape-hash=<string>\tHash value to debug escape analysis.\n+\n o\n Go Joined Separate\n ; Documented in common.opt"}]}