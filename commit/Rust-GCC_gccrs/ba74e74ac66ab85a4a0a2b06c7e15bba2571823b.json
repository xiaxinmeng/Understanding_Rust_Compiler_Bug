{"sha": "ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3NGU3NGFjNjZhYjg1YTRhMGEyYjA2YzdlMTViYmEyNTcxODIzYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-17T03:38:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-17T03:38:08Z"}, "message": "test: add new Go tests from source repo", "tree": {"sha": "61553a3975258cd0b7e9084d678c17fcd98602ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61553a3975258cd0b7e9084d678c17fcd98602ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40bf68bbe0bdba305fde4ab825a06c085ba486fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf68bbe0bdba305fde4ab825a06c085ba486fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf68bbe0bdba305fde4ab825a06c085ba486fc"}], "stats": {"total": 7480, "additions": 7480, "deletions": 0}, "files": [{"sha": "dcbde48e8769964716274c674a39214d0975465a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10047.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10047.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10047.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10047.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10047: gccgo failed to compile a type switch where the switch variable\n+// and the base type of a case share the same identifier.\n+\n+package main\n+\n+func main() {\n+\ttype t int\n+\tvar p interface{}\n+\tswitch t := p.(type) {\n+\tcase t:\n+\t\t_ = t\n+\t}\n+}"}, {"sha": "8bb3b303ea603f4f82b9bf763fb0d0d04d6d9698", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10066.dir/a.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+package a\n+\n+import \"log\"\n+\n+func Do() {\n+\tDo2()\n+}\n+\n+func Do2() {\n+\tprintln(log.Ldate | log.Ltime | log.Lshortfile)\n+}"}, {"sha": "46d2f55fed63e098ab46e2fe52a1ad612f56e37e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10066.dir/b.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+package b\n+\n+import \"./a\"\n+\n+func test() {\n+\ta.Do()\n+}"}, {"sha": "3ea552f9feaa2c1c555a40cd25e2cc5f90f888b3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10066.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10066.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10066: constants are printed in the original form\n+// in export data. This is the opposite of issue 9076.\n+\n+package ignored"}, {"sha": "9985e5a0ee0f87118674e169b9b1d3f13379d869", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10135.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10135.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10135.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10135.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10135: append a slice with zero-sized element used\n+// to always return a slice with the same data pointer as the\n+// old slice, even if it's nil, so this program used to panic\n+// with nil pointer dereference because after append, s is a\n+// slice with nil data pointer but non-zero len and cap.\n+\n+package main\n+\n+type empty struct{}\n+\n+func main() {\n+\tvar s []empty\n+\n+\ts = append(s, empty{})\n+\n+\tfor _, v := range s {\n+\t\t_ = v\n+\t}\n+}"}, {"sha": "c61d02b66a97450f4e678354dd093de6ab50b445", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10219.dir/a.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type m struct {\n+\tS string\n+}\n+\n+var g = struct {\n+\tm\n+\tP string\n+}{\n+\tm{\"a\"},\n+\t\"\",\n+}\n+\n+type S struct{}\n+\n+func (s *S) M(p string) {\n+\tr := g\n+\tr.P = p\n+}"}, {"sha": "09d8911ff4aa77b4a59e0ad9feaf36c11a8843f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10219.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func F() *a.S {\n+\treturn &a.S{}\n+}"}, {"sha": "d331495df204d7adf9182c43d1fdd427a6c20844", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10219.dir/c.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.dir%2Fc.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package c\n+\n+import \"./b\"\n+\n+func F() {\n+\ts := b.F()\n+\ts.M(\"c\")\n+}"}, {"sha": "325818cff2a3bb6507d5be20f4bed585b87c3a61", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10219.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10219.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10219: failure of inlinable function that uses embedded types\n+// in an anonymous struct via :=.\n+\n+package ignored"}, {"sha": "fafca6c733ee1e0c30d7831d076cd83d07d77244", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10253.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10253.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10253.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10253.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 10253: cmd/7g: bad codegen, probably regopt related\n+\n+package main\n+\n+func main() {\n+\tif !eq() {\n+\t\tpanic(\"wrong value\")\n+\t}\n+}\n+\n+var text = \"abc\"\n+var s = &str{text}\n+\n+func eq() bool {\n+\treturn text[0] == s.text[0]\n+}\n+\n+type str struct {\n+\ttext string\n+}"}, {"sha": "39028e756ca7867abbdf5b723ed3778e8bc9a9c4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10284.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10284.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10284.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10284.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10284: gccgo failed to allow converting a user-defined\n+// type whose underlying type is uintptr to unsafe.Pointer.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+type T uintptr\n+\n+var _ unsafe.Pointer = unsafe.Pointer(T(0))"}, {"sha": "c7e2bab569c851c3afe189105710a36a8bdebc6a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10320.go", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10320.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10320.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10320.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,55 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10320: 7g failed to compile a program because it attempted\n+// to use ZR as register. Other programs compiled but failed to\n+// execute correctly because they clobbered the g register.\n+\n+package main\n+\n+func main() {\n+\tvar x00, x01, x02, x03, x04, x05, x06, x07, x08, x09 int\n+\tvar x10, x11, x12, x13, x14, x15, x16, x17, x18, x19 int\n+\tvar x20, x21, x22, x23, x24, x25, x26, x27, x28, x29 int\n+\tvar x30, x31, x32 int\n+\n+\t_ = x00\n+\t_ = x01\n+\t_ = x02\n+\t_ = x03\n+\t_ = x04\n+\t_ = x05\n+\t_ = x06\n+\t_ = x07\n+\t_ = x08\n+\t_ = x09\n+\n+\t_ = x10\n+\t_ = x11\n+\t_ = x12\n+\t_ = x13\n+\t_ = x14\n+\t_ = x15\n+\t_ = x16\n+\t_ = x17\n+\t_ = x18\n+\t_ = x19\n+\n+\t_ = x20\n+\t_ = x21\n+\t_ = x22\n+\t_ = x23\n+\t_ = x24\n+\t_ = x25\n+\t_ = x26\n+\t_ = x27\n+\t_ = x28\n+\t_ = x29\n+\n+\t_ = x30\n+\t_ = x31\n+\t_ = x32\n+}"}, {"sha": "096b7a50554e35129701f9d07a05e8dcd326ab8c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10332.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10332.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10332.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10332.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The PkgPath of unexported fields of types defined in package main was incorrectly \"\"\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+)\n+\n+type foo struct {\n+\tbar int\n+}\n+\n+func main() {\n+\tpkgpath := reflect.ValueOf(foo{}).Type().Field(0).PkgPath\n+\tif pkgpath != \"main\" {\n+\t\tfmt.Printf(\"BUG: incorrect PkgPath: %v\", pkgpath)\n+\t}\n+}"}, {"sha": "87771d400d31c82176a18717f290659b7848d5ac", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10353.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10353.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10353.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10353.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,49 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 10253: cmd/gc: incorrect escape analysis of closures\n+// Partial call x.foo was not promoted to heap.\n+\n+package main\n+\n+func main() {\n+\tc := make(chan bool)\n+\t// Create a new goroutine to get a default-size stack segment.\n+\tgo func() {\n+\t\tx := new(X)\n+\t\tclos(x.foo)()\n+\t\tc <- true\n+\t}()\n+\t<-c\n+}\n+\n+type X int\n+\n+func (x *X) foo() {\n+}\n+\n+func clos(x func()) func() {\n+\tf := func() {\n+\t\tprint(\"\")\n+\t\tx() // This statement crashed, because the partial call was allocated on the old stack.\n+\t}\n+\t// Grow stack so that partial call x becomes invalid if allocated on stack.\n+\tgrowstack(10000)\n+\tc := make(chan bool)\n+\t// Spoil the previous stack segment.\n+\tgo func() {\n+\t\tc <- true\n+\t}()\n+\t<-c\n+\treturn f\n+}\n+\n+func growstack(x int) {\n+\tif x == 0 {\n+\t\treturn\n+\t}\n+\tgrowstack(x - 1)\n+}"}, {"sha": "c6461a362040a552bedb3ff119097c71fea23b02", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10407.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10407.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10407.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10407.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// runoutput\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10407: gccgo failed to remove carriage returns\n+// from raw string literals.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfmt.Println(\"package main\\nfunc main() { if `a\\rb\\r\\nc` != \\\"ab\\\\nc\\\" { panic(42) }}\")\n+}"}, {"sha": "9bc4948b15b2881f703389d68e1288f396814608", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10441.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10441.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10441.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10441.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// build\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func bar() {\n+\tf := func() {}\n+\tfoo(&f)\n+}\n+\n+//go:noinline\n+func foo(f *func()) func() {\n+\treturn *f\n+}"}, {"sha": "3b62cb9002fa7f87fb2f77724d9f86275fa3bc8a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10486.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10486.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10486.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10486.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,31 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10486.\n+// Check stack walk during div by zero fault,\n+// especially on software divide systems.\n+\n+package main\n+\n+import \"runtime\"\n+\n+var A, B int\n+\n+func divZero() int {\n+\tdefer func() {\n+\t\tif p := recover(); p != nil {\n+\t\t\tvar pcs [512]uintptr\n+\t\t\truntime.Callers(2, pcs[:])\n+\t\t\truntime.GC()\n+\t\t}\n+\t}()\n+\treturn A / B\n+}\n+\n+func main() {\n+\tA = 1\n+\tdivZero()\n+}"}, {"sha": "6f4717d8202ff1dee40ee30862e8045364e32157", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10607.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// +build linux,!ppc64,!riscv64\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that a -B option is passed through when using both internal\n+// and external linking mode.\n+\n+// TODO(jsing): Re-enable on riscv64 when it has support for external\n+// linking - see golang.org/issue/36739\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+)\n+\n+func main() {\n+\ttest(\"internal\")\n+\ttest(\"external\")\n+}\n+\n+func test(linkmode string) {\n+\tout, err := exec.Command(\"go\", \"run\", \"-ldflags\", \"-B=0x12345678 -linkmode=\"+linkmode, filepath.Join(\"fixedbugs\", \"issue10607a.go\")).CombinedOutput()\n+\tif err != nil {\n+\t\tfmt.Printf(\"BUG: linkmode=%s %v\\n%s\\n\", linkmode, err, out)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "51399e4ecfccab0f484a80c863f73324ee839760", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10607a.go", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10607a.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,81 @@\n+// skip\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This is built by issue10607.go with a -B option.\n+// Verify that we have one build-id note with the expected value.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"debug/elf\"\n+\t\"fmt\"\n+\t\"os\"\n+)\n+\n+func main() {\n+\tf, err := elf.Open(\"/proc/self/exe\")\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\treturn\n+\t\t}\n+\t\tfmt.Fprintln(os.Stderr, \"opening /proc/self/exe:\", err)\n+\t\tos.Exit(1)\n+\t}\n+\n+\tc := 0\n+\tfail := false\n+\tfor i, s := range f.Sections {\n+\t\tif s.Type != elf.SHT_NOTE {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\td, err := s.Data()\n+\t\tif err != nil {\n+\t\t\tfmt.Fprintf(os.Stderr, \"reading data of note section %d: %v\\n\", i, err)\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tfor len(d) > 0 {\n+\t\t\tnamesz := f.ByteOrder.Uint32(d)\n+\t\t\tdescsz := f.ByteOrder.Uint32(d[4:])\n+\t\t\ttyp := f.ByteOrder.Uint32(d[8:])\n+\n+\t\t\tan := (namesz + 3) &^ 3\n+\t\t\tad := (descsz + 3) &^ 3\n+\n+\t\t\tif int(12+an+ad) > len(d) {\n+\t\t\t\tfmt.Fprintf(os.Stderr, \"note section %d too short for header (%d < 12 + align(%d,4) + align(%d,4))\\n\", i, len(d), namesz, descsz)\n+\t\t\t\tbreak\n+\t\t\t}\n+\n+\t\t\t// 3 == NT_GNU_BUILD_ID\n+\t\t\tif typ == 3 && namesz == 4 && bytes.Equal(d[12:16], []byte(\"GNU\\000\")) {\n+\t\t\t\tid := string(d[12+an:12+an+descsz])\n+\t\t\t\tif id == \"\\x12\\x34\\x56\\x78\" {\n+\t\t\t\t\tc++\n+\t\t\t\t} else {\n+\t\t\t\t\tfmt.Fprintf(os.Stderr, \"wrong build ID data: %q\\n\", id)\n+\t\t\t\t\tfail = true\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\td = d[12+an+ad:]\n+\t\t}\n+\t}\n+\n+\tif c == 0 {\n+\t\tfmt.Fprintln(os.Stderr, \"no build-id note\")\n+\t\tfail = true\n+\t} else if c > 1 {\n+\t\tfmt.Fprintln(os.Stderr, c, \"build-id notes\")\n+\t\tfail = true\n+\t}\n+\n+\tif fail {\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "0600a801bb280fbd91abb975c04e5e1d3526c181", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10654.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10654.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10654.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10654.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10654: Failure to use generated temps\n+// for function calls etc. in boolean codegen.\n+\n+package main\n+\n+var s string\n+\n+func main() {\n+\tif (s == \"this\") != (s == \"that\") {\n+\t}\n+}"}, {"sha": "12908b92053a37249d14a661d92f99f303d6c2a6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10700.dir/other.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Fother.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Fother.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Fother.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package other\n+\n+type Exported interface {\n+\tDo()\n+\tsecret()\n+}"}, {"sha": "2dfc24af077cce048195d0dcb2570b294a76f27d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10700.dir/test.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.dir%2Ftest.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,49 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./other\"\n+\n+type Imported interface {\n+\tDo()\n+}\n+\n+type HasAMethod struct {\n+\tx int\n+}\n+\n+func (me *HasAMethod) Do() {\n+\tprintln(me.x)\n+}\n+\n+func InMyCode(x *Imported, y *HasAMethod, z *other.Exported) {\n+\tx.Do() // ERROR \"x\\.Do undefined \\(type \\*Imported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\tx.do() // ERROR \"x\\.do undefined \\(type \\*Imported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\t(*x).Do()\n+\tx.Dont()    // ERROR \"x\\.Dont undefined \\(type \\*Imported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\t(*x).Dont() // ERROR \"\\(\\*x\\)\\.Dont undefined \\(type Imported has no field or method Dont\\)|reference to undefined field or method\"\n+\n+\ty.Do()\n+\ty.do() // ERROR \"y\\.do undefined \\(type \\*HasAMethod has no field or method do, but does have Do\\)|reference to undefined field or method\"\n+\t(*y).Do()\n+\t(*y).do()   // ERROR \"\\(\\*y\\)\\.do undefined \\(type HasAMethod has no field or method do, but does have Do\\)|reference to undefined field or method\"\n+\ty.Dont()    // ERROR \"y\\.Dont undefined \\(type \\*HasAMethod has no field or method Dont\\)|reference to undefined field or method\"\n+\t(*y).Dont() // ERROR \"\\(\\*y\\)\\.Dont undefined \\(type HasAMethod has no field or method Dont\\)|reference to undefined field or method\"\n+\n+\tz.Do() // ERROR \"z\\.Do undefined \\(type \\*other\\.Exported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\tz.do() // ERROR \"z\\.do undefined \\(type \\*other\\.Exported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\t(*z).Do()\n+\t(*z).do()     // ERROR \"\\(\\*z\\)\\.do undefined \\(type other.Exported has no field or method do, but does have Do\\)|reference to undefined field or method\"\n+\tz.Dont()      // ERROR \"z\\.Dont undefined \\(type \\*other\\.Exported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\t(*z).Dont()   // ERROR \"\\(\\*z\\)\\.Dont undefined \\(type other\\.Exported has no field or method Dont\\)|reference to undefined field or method\"\n+\tz.secret()    // ERROR \"z\\.secret undefined \\(type \\*other\\.Exported is pointer to interface, not interface\\)|type that is pointer to interface\"\n+\t(*z).secret() // ERROR \"\\(\\*z\\)\\.secret undefined \\(cannot refer to unexported field or method secret\\)|reference to unexported field or method\"\n+\n+}\n+\n+func main() {\n+}"}, {"sha": "25544efd9b94c6dad01909ca293964b5fe029719", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10700.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10700.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// errorcheckdir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "30add82c78a9796fc4f56eb99a7c56e7feb60961", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10925.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10925.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10925.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10925.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func prototype(xyz []string) {}\n+func main() {\n+\tvar got [][]string\n+\tf := prototype\n+\tf = func(ss []string) { got = append(got, ss) }\n+\tfor _, s := range []string{\"one\", \"two\", \"three\"} {\n+\t\tf([]string{s})\n+\t}\n+\tif got[0][0] != \"one\" || got[1][0] != \"two\" || got[2][0] != \"three\" {\n+\t\t// Bug's wrong output was [[three] [three] [three]]\n+\t\tfmt.Println(\"Expected [[one] [two] [three]], got\", got)\n+\t}\n+}"}, {"sha": "52487fb9bd61241010570ffdf24e06f486086727", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10958.go", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10958.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10958.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10958.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,95 @@\n+// +build !nacl,!js,disabled_see_issue_18589\n+// buildrun -t 10  -gcflags=-d=ssa/insert_resched_checks/on,ssa/check/on\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test is disabled because it flakes when run in all.bash\n+// on some platforms, but is useful standalone to verify\n+// that rescheduling checks are working (and we may wish\n+// to investigate the flake, since it suggests that the\n+// loop rescheduling check may not work right on those\n+// platforms).\n+\n+// This checks to see that call-free infinite loops do not\n+// block garbage collection.  IF YOU RUN IT STANDALONE without\n+// -gcflags=-d=ssa/insert_resched_checks/on in a not-experimental\n+// build, it should hang.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+)\n+\n+var someglobal1 int\n+var someglobal2 int\n+var someglobal3 int\n+\n+//go:noinline\n+func f() {}\n+\n+func standinacorner1() {\n+\tfor someglobal1&1 == 0 {\n+\t\tsomeglobal1++\n+\t\tsomeglobal1++\n+\t}\n+}\n+\n+func standinacorner2(i int) {\n+\t// contains an irreducible loop containing changes to memory\n+\tif i != 0 {\n+\t\tgoto midloop\n+\t}\n+\n+loop:\n+\tif someglobal2&1 != 0 {\n+\t\tgoto done\n+\t}\n+\tsomeglobal2++\n+midloop:\n+\tsomeglobal2++\n+\tgoto loop\n+\n+done:\n+\treturn\n+}\n+\n+func standinacorner3() {\n+\tfor someglobal3&1 == 0 {\n+\t\tif someglobal3&2 != 0 {\n+\t\t\tfor someglobal3&3 == 2 {\n+\t\t\t\tsomeglobal3++\n+\t\t\t\tsomeglobal3++\n+\t\t\t\tsomeglobal3++\n+\t\t\t\tsomeglobal3++\n+\t\t\t}\n+\t\t}\n+\t\tsomeglobal3++\n+\t\tsomeglobal3++\n+\t\tsomeglobal3++\n+\t\tsomeglobal3++\n+\t}\n+}\n+\n+func main() {\n+\tgo standinacorner1()\n+\tgo standinacorner2(0)\n+\tgo standinacorner3()\n+\t// println(\"About to stand in a corner1\")\n+\tfor someglobal1 == 0 {\n+\t\truntime.Gosched()\n+\t}\n+\t// println(\"About to stand in a corner2\")\n+\tfor someglobal2 == 0 {\n+\t\truntime.Gosched()\n+\t}\n+\t// println(\"About to stand in a corner3\")\n+\tfor someglobal3 == 0 {\n+\t\truntime.Gosched()\n+\t}\n+\t// println(\"About to GC\")\n+\truntime.GC()\n+\t// println(\"Success\")\n+}"}, {"sha": "933badfd2f3ebd40b9b2b536d482f2ddb91da114", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10975.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10975.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10975.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10975.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 10975: Returning an invalid interface would cause\n+// `internal compiler error: getinarg: not a func`.\n+\n+package main\n+\n+type I interface {\n+\tint // ERROR \"interface contains embedded non-interface\"\n+}\n+\n+func New() I {\n+\treturn struct{}{}\n+}"}, {"sha": "0b18c70005682b67833f86737c5b2c44d00a9d12", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue10977.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10977.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10977.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue10977.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T struct{}\n+\n+var (\n+\tt = T{}\n+\tu = t.New()\n+)\n+\n+func x(T) (int, int) { return 0, 0 }\n+\n+var _, _ = x(u)\n+\n+func (T) New() T { return T{} }"}, {"sha": "81b412aef13a9f459f288dcea92b2f165a2b6ddd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11053.dir/p.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func Int32(i int32) *int32 {\n+\treturn &i\n+}"}, {"sha": "542c2a349e5ef7314947edd41315a1bd16eebdac", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11053.dir/p_test.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.dir%2Fp_test.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"p\"\n+)\n+\n+type I interface {\n+\tAdd(out *P)\n+}\n+\n+type P struct {\n+\tV *int32\n+}\n+\n+type T struct{}\n+\n+var x int32 = 42\n+\n+func Int32x(i int32) *int32 {\n+\treturn &i\n+}\n+\n+func (T) Add(out *P) {\n+\tout.V = p.Int32(x) // inlined, p.i.2 moved to heap\n+}\n+\n+var PP P\n+var out *P = &PP\n+\n+func F(s I) interface{} {\n+\ts.Add(out) // not inlined.\n+\treturn out\n+}\n+\n+var s T\n+\n+func main() {\n+\tprintln(\"Starting\")\n+\tfmt.Sprint(new(int32))\n+\tresp := F(s).(*P)\n+\tprintln(\"Before, *resp.V=\", *resp.V) // Trashes *resp.V in process of printing.\n+\tprintln(\"After,  *resp.V=\", *resp.V)\n+\tif got, want := *resp.V, int32(42); got != want {\n+\t\tfmt.Printf(\"FAIL, got %v, want %v\", got, want)\n+\t}\n+}"}, {"sha": "06005d3841dd1da1cc6396931073089350061ca0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11053.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11053: Compiler does not run escape analysis on an inlined\n+// generated method wrapper.\n+\n+package ignored"}, {"sha": "a75f73c8829459e2e7cb81279972de8bdb597c11", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11053.out", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11053.out?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,3 @@\n+Starting\n+Before, *resp.V= 42\n+After,  *resp.V= 42"}, {"sha": "69fc3e8d84223f079b653fd555c4cc229ca003eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11256.go", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11256.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11256.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11256.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,53 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that stack barriers are reset when a goroutine exits without\n+// returning.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"sync/atomic\"\n+\t\"time\"\n+)\n+\n+func main() {\n+\t// Let the garbage collector run concurrently.\n+\truntime.GOMAXPROCS(2)\n+\n+\tvar x [100][]byte\n+\n+\tfor i := range x {\n+\t\tvar done int32\n+\n+\t\tgo func() {\n+\t\t\t// Use enough stack to get stack barriers, but\n+\t\t\t// not so much that we go over _FixedStack.\n+\t\t\t// There's a very narrow window here on most\n+\t\t\t// OSs, so we basically can't do anything (not\n+\t\t\t// even a time.Sleep or a channel).\n+\t\t\tvar buf [1024]byte\n+\t\t\tbuf[0]++\n+\t\t\tfor atomic.LoadInt32(&done) == 0 {\n+\t\t\t\truntime.Gosched()\n+\t\t\t}\n+\t\t\tatomic.StoreInt32(&done, 0)\n+\t\t\t// Exit without unwinding stack barriers.\n+\t\t\truntime.Goexit()\n+\t\t}()\n+\n+\t\t// Generate some garbage.\n+\t\tx[i] = make([]byte, 1024*1024)\n+\n+\t\t// Give GC some time to install stack barriers in the G.\n+\t\ttime.Sleep(50 * time.Microsecond)\n+\t\tatomic.StoreInt32(&done, 1)\n+\t\tfor atomic.LoadInt32(&done) == 1 {\n+\t\t\truntime.Gosched()\n+\t\t}\n+\t}\n+}"}, {"sha": "560b7d4794251b8a2f16b1a47fd577a05769142a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11286.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11286.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11286.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11286.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that pointer bitmaps of types with large scalar tails are\n+// correctly repeated when unrolled into the heap bitmap.\n+\n+package main\n+\n+import \"runtime\"\n+\n+const D = 57\n+\n+type T struct {\n+\ta [D]float64\n+\tb map[string]int\n+\tc [D]float64\n+}\n+\n+var ts []T\n+\n+func main() {\n+\tts = make([]T, 4)\n+\tfor i := range ts {\n+\t\tts[i].b = make(map[string]int)\n+\t}\n+\tts[3].b[\"abc\"] = 42\n+\truntime.GC()\n+\tif ts[3].b[\"abc\"] != 42 {\n+\t\tpanic(\"bad field value\")\n+\t}\n+}"}, {"sha": "8aba4d91215ffdf1dc8cdd25a692b564d8b13021", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11326b.go", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11326b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11326b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11326b.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,44 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Tests for golang.org/issue/11326.\n+\n+func main() {\n+\t{\n+\t\tconst n = 1e646456992\n+\t\tconst d = 1e646456991\n+\t\tx := n / d\n+\t\tif x != 10.0 {\n+\t\t\tprintln(\"incorrect value:\", x)\n+\t\t}\n+\t}\n+\t{\n+\t\tconst n = 1e64645699\n+\t\tconst d = 1e64645698\n+\t\tx := n / d\n+\t\tif x != 10.0 {\n+\t\t\tprintln(\"incorrect value:\", x)\n+\t\t}\n+\t}\n+\t{\n+\t\tconst n = 1e6464569\n+\t\tconst d = 1e6464568\n+\t\tx := n / d\n+\t\tif x != 10.0 {\n+\t\t\tprintln(\"incorrect value:\", x)\n+\t\t}\n+\t}\n+\t{\n+\t\tconst n = 1e646456\n+\t\tconst d = 1e646455\n+\t\tx := n / d\n+\t\tif x != 10.0 {\n+\t\t\tprintln(\"incorrect value:\", x)\n+\t\t}\n+\t}\n+}"}, {"sha": "3980e8fcae44281206fdd9b845994643a2a5ca60", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11354.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11354.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11354.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11354.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type X int\n+\n+var foo = map[int]X{}\n+\n+var bar = map[int][8]X{}\n+\n+func main() {}"}, {"sha": "6ffffede6b972d8c4f4d0965f71d9d104cd25905", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11359.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11359.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11359.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11359.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// identifiers beginning with non-ASCII digits were incorrectly accepted.\n+// issue 11359.\n+\n+package p\n+var \u06f6 = 0 // ERROR \"identifier cannot begin with digit\""}, {"sha": "63dbf05d731ac6109e18d074ab392afd7099e59e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11361.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11361.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11361.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11361.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+import \"fmt\"  // GC_ERROR \"imported and not used\"\n+\n+const n = fmt // ERROR \"fmt without selector|unexpected reference to package\""}, {"sha": "964e5fdf6b7ce843c4e12f99f91b25f41c0c8bb3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11362.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11362.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11362.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11362.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11362: prints empty canonical import path\n+\n+package main\n+\n+import _ \"unicode//utf8\" // GC_ERROR \"non-canonical import path .unicode//utf8. \\(should be .unicode/utf8.\\)\" \"can't find import: .unicode//utf8.\"\n+\n+func main() {\n+}\n+"}, {"sha": "9df37c36499536c2d52e7eb8cd8235b687641bc2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11369.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11369.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11369.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11369.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that the half multiply resulting from a division\n+// by a constant generates correct code.\n+\n+package main\n+\n+func main() {\n+\tvar _ = 7 / \"0\"[0] // test case from #11369\n+\tvar _ = 1 / \".\"[0] // test case from #11358\n+\tvar x = 0 / \"0\"[0]\n+\tvar y = 48 / \"0\"[0]\n+\tvar z = 5 * 48 / \"0\"[0]\n+\tif x != 0 {\n+\t\tpanic(\"expected 0\")\n+\t}\n+\tif y != 1 {\n+\t\tpanic(\"expected 1\")\n+\t}\n+\tif z != 5 {\n+\t\tpanic(\"expected 5\")\n+\t}\n+}"}, {"sha": "30f2904550a26896803d6e0a9a6bb6f2b50545c9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11370.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11370.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11370.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11370.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 11370: cmd/compile: \"0\"[0] should not be a constant\n+\n+package p\n+\n+func main() {\n+\tprintln(-\"abc\"[1] >> 1)\n+}"}, {"sha": "8acd18fccb90dab033c96124c550414ca1681bf1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11371.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11371.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11371.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11371.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11371 (cmd/compile: meaningless error message \"truncated to\n+// integer\")\n+\n+package issue11371\n+\n+const a int = 1.1        // ERROR \"constant 1.1 truncated to integer|floating-point constant truncated to integer\"\n+const b int = 1e20       // ERROR \"overflows int|integer constant overflow\"\n+const c int = 1 + 1e-70  // ERROR \"constant truncated to integer\"\n+const d int = 1 - 1e-70  // ERROR \"constant truncated to integer\"\n+const e int = 1.00000001 // ERROR \"constant truncated to integer\"\n+const f int = 0.00000001 // ERROR \"constant 1e-08 truncated to integer|floating-point constant truncated to integer\""}, {"sha": "f2a955f96d06724151f26a210ce509a86647e810", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11590.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11590.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11590.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11590.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var _ = int8(4) * 300         // ERROR \"constant 300 overflows int8\" \"constant 1200 overflows int8|integer constant overflow\"\n+var _ = complex64(1) * 1e200  // ERROR \"constant 1e\\+200 overflows complex64|complex real part overflow\"\n+var _ = complex128(1) * 1e500 // ERROR \"constant 1e\\+500 overflows complex128|complex real part overflow\""}, {"sha": "7ebfae6709f35d6777aef45c131b36b7e118885d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11610.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11610.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11610.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11610.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test an internal compiler error on ? symbol in declaration\n+// following an empty import.\n+\n+package a\n+import\"\"  // ERROR \"import path is empty\"\n+var?      // ERROR \"invalid character U\\+003F '\\?'|invalid character 0x3f in input file\"\n+\n+var x int // ERROR \"unexpected var|expected identifier|expected type\"\n+\n+func main() {\n+}"}, {"sha": "de15f9827ffb28d1c18166c762349d0834de0422", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11614.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11614.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11614.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11614.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that incorrect expressions involving wrong anonymous interface\n+// do not generate panics in Type Stringer.\n+// Does not compile.\n+\n+package main\n+\n+type I interface {\n+\tint // ERROR \"interface contains embedded non-interface\"\n+}\n+\n+func n() {\n+\t(I)\n+}\n+\n+func m() {\n+\t(interface{int}) // ERROR \"interface contains embedded non-interface\" \"type interface { int } is not an expression\"\n+}\n+\n+func main() {\n+}"}, {"sha": "b43032deac45953d0c54525c05bde43d83db64af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11674.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11674.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11674.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11674.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,40 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11674: cmd/compile: does not diagnose constant division by\n+// zero\n+\n+package p\n+\n+const x complex64 = 0\n+const y complex128 = 0\n+\n+var _ = x / 1e-20\n+var _ = x / 1e-50   // GC_ERROR \"complex division by zero\"\n+var _ = x / 1e-1000 // GC_ERROR \"complex division by zero\"\n+var _ = x / 1e-20i\n+var _ = x / 1e-50i   // GC_ERROR \"complex division by zero\"\n+var _ = x / 1e-1000i // GC_ERROR \"complex division by zero\"\n+\n+var _ = x / 1e-45 // smallest positive float32\n+\n+var _ = x / (1e-20 + 1e-20i)\n+var _ = x / (1e-50 + 1e-20i)\n+var _ = x / (1e-20 + 1e-50i)\n+var _ = x / (1e-50 + 1e-50i)     // GC_ERROR \"complex division by zero\"\n+var _ = x / (1e-1000 + 1e-1000i) // GC_ERROR \"complex division by zero\"\n+\n+var _ = y / 1e-50\n+var _ = y / 1e-1000 // GC_ERROR \"complex division by zero\"\n+var _ = y / 1e-50i\n+var _ = y / 1e-1000i // GC_ERROR \"complex division by zero\"\n+\n+var _ = y / 5e-324 // smallest positive float64\n+\n+var _ = y / (1e-50 + 1e-50)\n+var _ = y / (1e-1000 + 1e-50i)\n+var _ = y / (1e-50 + 1e-1000i)\n+var _ = y / (1e-1000 + 1e-1000i) // GC_ERROR \"complex division by zero\""}, {"sha": "755e9a1fde62391c8a4c5468fd7c648418b27f84", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11699.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11699.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11699.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11699.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 11699; used to fail with duplicate _.args_stackmap symbols.\n+\n+package p\n+\n+func _()\n+func _()"}, {"sha": "d5a2b22dda0f0be3ee1b523877978b601fd20ea1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11750.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11750.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11750.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11750.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11750: mkdotargslice: typecheck failed\n+\n+package main\n+\n+func main() {\n+\tfn := func(names string) {\n+\n+\t}\n+\tfunc(names ...string) {\n+\t\tfor _, name := range names {\n+\t\t\tfn(name)\n+\t\t}\n+\t}(\"one\", \"two\")\n+}"}, {"sha": "99d7060d44e4b45f41940bc869492ca0a4e49737", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11771.go", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11771.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11771.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11771.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,64 @@\n+// +build !nacl,!js\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11771: Magic comments should ignore carriage returns.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"runtime\"\n+)\n+\n+func main() {\n+\tif runtime.Compiler != \"gc\" {\n+\t\treturn\n+\t}\n+\n+\tdir, err := ioutil.TempDir(\"\", \"go-issue11771\")\n+\tif err != nil {\n+\t\tlog.Fatalf(\"creating temp dir: %v\\n\", err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\t// The go:nowritebarrier magic comment is only permitted in\n+\t// the runtime package.  So we confirm that the compilation\n+\t// fails.\n+\n+\tvar buf bytes.Buffer\n+\tfmt.Fprintln(&buf, `\n+package main\n+\n+func main() {\n+}\n+`)\n+\tfmt.Fprintln(&buf, \"//go:nowritebarrier\\r\")\n+\tfmt.Fprintln(&buf, `\n+func x() {\n+}\n+`)\n+\n+\tif err := ioutil.WriteFile(filepath.Join(dir, \"x.go\"), buf.Bytes(), 0666); err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tcmd := exec.Command(\"go\", \"tool\", \"compile\", \"x.go\")\n+\tcmd.Dir = dir\n+\toutput, err := cmd.CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatal(\"compile succeeded unexpectedly\")\n+\t}\n+\tif !bytes.Contains(output, []byte(\"only allowed in runtime\")) {\n+\t\tlog.Fatalf(\"wrong error message from compiler; got:\\n%s\\n\", output)\n+\t}\n+}"}, {"sha": "096b297f990d02a08997b180fa5fafe15860b6ad", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11790.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11790.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11790.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11790.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,36 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11790: Incorrect error following named pointer dereference on field\n+\n+package main\n+\n+import \"fmt\"\n+\n+type T0 struct {\n+\tx int\n+}\n+\n+func (*T0) M0() {\n+\tfmt.Println(\"M0\")\n+}\n+\n+type T2 struct {\n+\t*T0\n+}\n+\n+type Q *T2\n+\n+func main() {\n+\t// If run, expected output is\n+\t// 42\n+\t// M0\n+\tt0 := T0{42}\n+\tt2 := T2{&t0}\n+\tvar q Q = &t2\n+\tfmt.Println(q.x) // Comment out either this line or the next line and the program works\n+\t(*q).T0.M0()\n+}"}, {"sha": "510b6555c653cce4bd429323caa08c1794c47778", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11945.go", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11945.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11945.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11945.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,71 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+// issue 17446\n+const (\n+\t_ = real(0) // from bug report\n+\t_ = imag(0) // from bug report\n+\n+\t// if the arguments are untyped, the results must be untyped\n+\t// (and compatible with types that can represent the values)\n+\t_ int = real(1)\n+\t_ int = real('a')\n+\t_ int = real(2.0)\n+\t_ int = real(3i)\n+\n+\t_ float32 = real(1)\n+\t_ float32 = real('a')\n+\t_ float32 = real(2.1)\n+\t_ float32 = real(3.2i)\n+\n+\t_ float64 = real(1)\n+\t_ float64 = real('a')\n+\t_ float64 = real(2.1)\n+\t_ float64 = real(3.2i)\n+\n+\t_ int = imag(1)\n+\t_ int = imag('a')\n+\t_ int = imag(2.1 + 3i)\n+\t_ int = imag(3i)\n+\n+\t_ float32 = imag(1)\n+\t_ float32 = imag('a')\n+\t_ float32 = imag(2.1 + 3.1i)\n+\t_ float32 = imag(3i)\n+\n+\t_ float64 = imag(1)\n+\t_ float64 = imag('a')\n+\t_ float64 = imag(2.1 + 3.1i)\n+\t_ float64 = imag(3i)\n+)\n+\n+var tests = []struct {\n+\tcode      string\n+\tgot, want interface{}\n+}{\n+\t{\"real(1)\", real(1), 1.0},\n+\t{\"real('a')\", real('a'), float64('a')},\n+\t{\"real(2.0)\", real(2.0), 2.0},\n+\t{\"real(3.2i)\", real(3.2i), 0.0},\n+\n+\t{\"imag(1)\", imag(1), 0.0},\n+\t{\"imag('a')\", imag('a'), 0.0},\n+\t{\"imag(2.1 + 3.1i)\", imag(2.1 + 3.1i), 3.1},\n+\t{\"imag(3i)\", imag(3i), 3.0},\n+}\n+\n+func main() {\n+\t// verify compile-time evaluated constant expressions\n+\tfor _, test := range tests {\n+\t\tif test.got != test.want {\n+\t\t\tpanic(fmt.Sprintf(\"%s: %v (%T) != %v (%T)\", test.code, test.got, test.got, test.want, test.want))\n+\t\t}\n+\t}\n+}"}, {"sha": "9b665dc635e89055b53b95c12b1dfd0d02a5a564", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue11987.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11987.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11987.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue11987.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 11987. The ppc64 SRADCC instruction was misassembled in a way\n+// lost bit 5 of the immediate so v>>32 was assembled as v>>0.  SRADCC\n+// is only ever inserted by peep so it's hard to be sure when it will\n+// be used. This formulation worked when the bug was fixed.\n+\n+package main\n+\n+import \"fmt\"\n+\n+var v int64 = 0x80000000\n+\n+func main() {\n+\ts := fmt.Sprintf(\"%v\", v>>32 == 0)\n+\tif s != \"true\" {\n+\t\tfmt.Printf(\"BUG: v>>32 == 0 evaluated as %q\\n\", s)\n+\t}\n+}"}, {"sha": "0a2ef8dad04dbc76b3e09ec265ef8540f8dd2605", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12006.go", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12006.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12006.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12006.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,174 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test escape analysis through ... parameters.\n+\n+package foo\n+\n+func FooN(vals ...*int) (s int) { // ERROR \"vals does not escape\"\n+\tfor _, v := range vals {\n+\t\ts += *v\n+\t}\n+\treturn s\n+}\n+\n+// Append forces heap allocation and copies entries in vals to heap, therefore they escape to heap.\n+func FooNx(x *int, vals ...*int) (s int) { // ERROR \"leaking param: x\" \"leaking param content: vals\"\n+\tvals = append(vals, x)\n+\treturn FooN(vals...)\n+}\n+\n+var sink []*int\n+\n+func FooNy(x *int, vals ...*int) (s int) { // ERROR \"leaking param: x\" \"leaking param: vals\"\n+\tvals = append(vals, x)\n+\tsink = vals\n+\treturn FooN(vals...)\n+}\n+\n+func FooNz(vals ...*int) (s int) { // ERROR \"leaking param: vals\"\n+\tsink = vals\n+\treturn FooN(vals...)\n+}\n+\n+func TFooN() {\n+\tfor i := 0; i < 1000; i++ {\n+\t\tvar i, j int\n+\t\tFooN(&i, &j) // ERROR \"... argument does not escape\"\n+\t}\n+}\n+\n+func TFooNx() {\n+\tfor i := 0; i < 1000; i++ {\n+\t\tvar i, j, k int   // ERROR \"moved to heap: i\" \"moved to heap: j\" \"moved to heap: k\"\n+\t\tFooNx(&k, &i, &j) // ERROR \"... argument does not escape\"\n+\t}\n+}\n+\n+func TFooNy() {\n+\tfor i := 0; i < 1000; i++ {\n+\t\tvar i, j, k int   // ERROR \"moved to heap: i\" \"moved to heap: j\" \"moved to heap: k\"\n+\t\tFooNy(&k, &i, &j) // ERROR \"... argument escapes to heap\"\n+\t}\n+}\n+\n+func TFooNz() {\n+\tfor i := 0; i < 1000; i++ {\n+\t\tvar i, j int  // ERROR \"moved to heap: i\" \"moved to heap: j\"\n+\t\tFooNz(&i, &j) // ERROR \"... argument escapes to heap\"\n+\t}\n+}\n+\n+var isink *int32\n+\n+func FooI(args ...interface{}) { // ERROR \"leaking param content: args\"\n+\tfor i := 0; i < len(args); i++ {\n+\t\tswitch x := args[i].(type) {\n+\t\tcase nil:\n+\t\t\tprintln(\"is nil\")\n+\t\tcase int32:\n+\t\t\tprintln(\"is int32\")\n+\t\tcase *int32:\n+\t\t\tprintln(\"is *int32\")\n+\t\t\tisink = x\n+\t\tcase string:\n+\t\t\tprintln(\"is string\")\n+\t\t}\n+\t}\n+}\n+\n+func TFooI() {\n+\ta := int32(1) // ERROR \"moved to heap: a\"\n+\tb := \"cat\"\n+\tc := &a\n+\tFooI(a, b, c) // ERROR \"a escapes to heap\" \"b escapes to heap\" \"... argument does not escape\"\n+}\n+\n+func FooJ(args ...interface{}) *int32 { // ERROR \"leaking param: args to result ~r1 level=1\"\n+\tfor i := 0; i < len(args); i++ {\n+\t\tswitch x := args[i].(type) {\n+\t\tcase nil:\n+\t\t\tprintln(\"is nil\")\n+\t\tcase int32:\n+\t\t\tprintln(\"is int32\")\n+\t\tcase *int32:\n+\t\t\tprintln(\"is *int32\")\n+\t\t\treturn x\n+\t\tcase string:\n+\t\t\tprintln(\"is string\")\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func TFooJ1() {\n+\ta := int32(1)\n+\tb := \"cat\"\n+\tc := &a\n+\tFooJ(a, b, c) // ERROR \"a does not escape\" \"b does not escape\" \"... argument does not escape\"\n+}\n+\n+func TFooJ2() {\n+\ta := int32(1) // ERROR \"moved to heap: a\"\n+\tb := \"cat\"\n+\tc := &a\n+\tisink = FooJ(a, b, c) // ERROR \"a escapes to heap\" \"b escapes to heap\" \"... argument does not escape\"\n+}\n+\n+type fakeSlice struct {\n+\tl int\n+\ta *[4]interface{}\n+}\n+\n+func FooK(args fakeSlice) *int32 { // ERROR \"leaking param: args to result ~r1 level=1\"\n+\tfor i := 0; i < args.l; i++ {\n+\t\tswitch x := (*args.a)[i].(type) {\n+\t\tcase nil:\n+\t\t\tprintln(\"is nil\")\n+\t\tcase int32:\n+\t\t\tprintln(\"is int32\")\n+\t\tcase *int32:\n+\t\t\tprintln(\"is *int32\")\n+\t\t\treturn x\n+\t\tcase string:\n+\t\t\tprintln(\"is string\")\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func TFooK2() {\n+\ta := int32(1) // ERROR \"moved to heap: a\"\n+\tb := \"cat\"\n+\tc := &a\n+\tfs := fakeSlice{3, &[4]interface{}{a, b, c, nil}} // ERROR \"a escapes to heap\" \"b escapes to heap\" \"&\\[4\\]interface {}{...} does not escape\"\n+\tisink = FooK(fs)\n+}\n+\n+func FooL(args []interface{}) *int32 { // ERROR \"leaking param: args to result ~r1 level=1\"\n+\tfor i := 0; i < len(args); i++ {\n+\t\tswitch x := args[i].(type) {\n+\t\tcase nil:\n+\t\t\tprintln(\"is nil\")\n+\t\tcase int32:\n+\t\t\tprintln(\"is int32\")\n+\t\tcase *int32:\n+\t\t\tprintln(\"is *int32\")\n+\t\t\treturn x\n+\t\tcase string:\n+\t\t\tprintln(\"is string\")\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func TFooL2() {\n+\ta := int32(1) // ERROR \"moved to heap: a\"\n+\tb := \"cat\"\n+\tc := &a\n+\ts := []interface{}{a, b, c} // ERROR \"a escapes to heap\" \"b escapes to heap\" \"\\[\\]interface {}{...} does not escape\"\n+\tisink = FooL(s)\n+}"}, {"sha": "c7a742513af0986ed661d25b62521a894db2f317", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12108.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12108.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12108.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12108.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// A generated method with a return value large enough to be\n+// initialized by duffzero is not a leaf method, which violated\n+// assumptions made by cmd/internal/obj/ppc64.\n+\n+package main\n+\n+const N = 9 // values > 8 cause (Super).Method to use duffzero\n+\n+type Base struct {\n+}\n+\n+func (b *Base) Method() (x [N]uintptr) {\n+\treturn\n+}\n+\n+type Super struct {\n+\tBase\n+}\n+\n+type T interface {\n+\tMethod() [N]uintptr\n+}\n+\n+func f(q T) {\n+\tq.Method()\n+}\n+\n+func main() {\n+\tvar s Super\n+\tf(&s)\n+}"}, {"sha": "bbf9fb0063f1a645777709928d373bb55b008f41", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12133.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12133.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12133.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12133.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 12133.  The CX register was getting clobbered\n+// because we did not keep track of its allocation correctly.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\twant := uint(48)\n+\tgot := f1(48)\n+\tif got != want {\n+\t\tfmt.Println(\"got\", got, \", wanted\", want)\n+\t\tpanic(\"bad\")\n+\t}\n+}\n+\n+//go:noinline\n+func f1(v1 uint) uint {\n+\treturn v1 >> ((1 >> v1) + (1 >> v1))\n+}"}, {"sha": "22467116c19b83134e2ece328757353c5d5fa3af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12226.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12226.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12226.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12226.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tif []byte(\"foo\")[0] == []byte(\"b\")[0] {\n+\t\tfmt.Println(\"BUG: \\\"foo\\\" and \\\"b\\\" appear to have the same first byte\")\n+\t}\n+}"}, {"sha": "fc5678e3ed7d6ff60fdb11dc44ca621585c5e6fd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12347.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12347.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12347.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12347.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f_ssa(x int, p *int) {\n+\tif false {\n+\t\ty := x + 5\n+\t\tfor {\n+\t\t\t*p = y\n+\t\t}\n+\t}\n+}"}, {"sha": "ff49314a6b5789e1571b78e241266281b505db6f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12411.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12411.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12411.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12411.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// +build !386\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 12411. Loss of AX during %.\n+\n+package main\n+\n+func main() {\n+\tx := f(4)\n+\tif x != 0 {\n+\t\tprintln(\"BUG: x=\", x)\n+\t}\n+}\n+\n+//go:noinline\n+func f(x int) int {\n+\t// AX was live on entry to one of the % code generations,\n+\t// and the % code generation smashed it.\n+\treturn ((2 * x) % 3) % (2 % ((x << 2) ^ (x % 3)))\n+}"}, {"sha": "a054765118bde218d695c0300438dadce0d0a467", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12413.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12413.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12413.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12413.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 12413: invalid variable name x in type switch: code would fail\n+// to compile if the variable used in the short variable declaration was\n+// previously declared as a constant.\n+\n+package main\n+\n+func main() {\n+\tconst x = 42\n+\tswitch x := interface{}(nil).(type) {\n+\tdefault:\n+\t\t_ = x\n+\t}\n+}"}, {"sha": "ceeaec4360ea09e05fa90831dd88069de415b2e0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12536.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12536.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12536.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12536.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,22 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 12536: compiler crashes while checking keys in a map literal for equality\n+\n+package p\n+\n+func main() {\n+\tm1 := map[interface{}]interface{}{\n+\t\tnil:  0,\n+\t\ttrue: 1,\n+\t}\n+\tm2 := map[interface{}]interface{}{\n+\t\ttrue: 1,\n+\t\tnil:  0,\n+\t}\n+\tprintln(len(m1))\n+\tprintln(len(m2))\n+}"}, {"sha": "249b4f24325cd4c5d7ec79961ae4a518d22f7718", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12577.go", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12577.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12577.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12577.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,66 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 12577: Test that there are no -0 floating-point constants.\n+\n+package main\n+\n+import \"math\"\n+\n+const (\n+\tz0 = 0.0\n+\tz1 = -0.0\n+\tz2 = -z0\n+\tz3 = -z2\n+)\n+\n+var (\n+\tx0 float32 = z0\n+\tx1 float32 = z1\n+\tx2 float32 = z2\n+\tx3 float32 = z3\n+\n+\ty0 float64 = z0\n+\ty1 float64 = z1\n+\ty2 float64 = z2\n+\ty3 float64 = z3\n+)\n+\n+func test32(f float32) {\n+\tif f != 0 || math.Signbit(float64(f)) {\n+\t\tprintln(\"BUG: got\", f, \"want 0.0\")\n+\t\treturn\n+\t}\n+}\n+\n+func test64(f float64) {\n+\tif f != 0 || math.Signbit(f) {\n+\t\tprintln(\"BUG: got\", f, \"want 0.0\")\n+\t\treturn\n+\t}\n+}\n+\n+func main() {\n+\tif f := -x0; f != 0 || !math.Signbit(float64(f)) {\n+\t\tprintln(\"BUG: got\", f, \"want -0.0\")\n+\t}\n+\n+\ttest32(-0.0)\n+\ttest32(x0)\n+\ttest32(x1)\n+\ttest32(x2)\n+\ttest32(x3)\n+\n+\tif f := -y0; f != 0 || !math.Signbit(f) {\n+\t\tprintln(\"BUG: got\", f, \"want -0.0\")\n+\t}\n+\n+\ttest64(-0.0)\n+\ttest64(y0)\n+\ttest64(y1)\n+\ttest64(y2)\n+\ttest64(y3)\n+}"}, {"sha": "950ef36e206c76e9c83e6d6503462f19ed1f73ae", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12588.go", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12588.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12588.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12588.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,88 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Tests escape analysis for range of arrays.\n+// Compiles but need not run.  Inlining is disabled.\n+\n+package main\n+\n+type A struct {\n+\tb [3]uint64\n+}\n+\n+type B struct {\n+\tb [3]*uint64\n+}\n+\n+func f(a A) int {\n+\tfor i, x := range &a.b {\n+\t\tif x != 0 {\n+\t\t\treturn 64*i + int(x)\n+\t\t}\n+\t}\n+\treturn 0\n+}\n+\n+func g(a *A) int { // ERROR \"a does not escape\"\n+\tfor i, x := range &a.b {\n+\t\tif x != 0 {\n+\t\t\treturn 64*i + int(x)\n+\t\t}\n+\t}\n+\treturn 0\n+}\n+\n+func h(a *B) *uint64 { // ERROR \"leaking param: a to result ~r1 level=1\"\n+\tfor i, x := range &a.b {\n+\t\tif i == 0 {\n+\t\t\treturn x\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func h2(a *B) *uint64 { // ERROR \"leaking param: a to result ~r1 level=1\"\n+\tp := &a.b\n+\tfor i, x := range p {\n+\t\tif i == 0 {\n+\t\t\treturn x\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+// Seems like below should be level=1, not 0.\n+func k(a B) *uint64 { // ERROR \"leaking param: a to result ~r1 level=0\"\n+\tfor i, x := range &a.b {\n+\t\tif i == 0 {\n+\t\t\treturn x\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+var sink *uint64\n+\n+func main() {\n+\tvar a1, a2 A\n+\tvar b1, b2, b3, b4 B\n+\tvar x1, x2, x3, x4 uint64 // ERROR \"moved to heap: x1\" \"moved to heap: x3\"\n+\tb1.b[0] = &x1\n+\tb2.b[0] = &x2\n+\tb3.b[0] = &x3\n+\tb4.b[0] = &x4\n+\tf(a1)\n+\tg(&a2)\n+\tsink = h(&b1)\n+\th(&b2)\n+\tsink = h2(&b1)\n+\th2(&b4)\n+\tx1 = 17\n+\tprintln(\"*sink=\", *sink) // Verify that sink addresses x1\n+\tx3 = 42\n+\tsink = k(b3)\n+\tprintln(\"*sink=\", *sink) // Verify that sink addresses x3\n+}"}, {"sha": "e395071f8d545712eaa2b4d800abb5558c72d40a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12677.dir/p.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fp.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,8 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+func Baz(f int) float64 {\n+    return 1 / float64(int(1)<<(uint(f)))\n+}"}, {"sha": "fd39c8a9ca6bcef0f1453dacbbec979b142e89c2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12677.dir/q.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fq.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fq.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.dir%2Fq.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package q\n+import \"./p\"\n+func f() { println(p.Baz(2)) }"}, {"sha": "6ad7161b2a57436262b50d6914c4b2885abf8835", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12677.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12677.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 12677: Type loss during export/import of inlined function body.\n+\n+package ignored"}, {"sha": "bde425501483df3c7177acf01948555707a12fe1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue12686.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12686.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12686.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue12686.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// golang.org/issue/12686.\n+// interesting because it's a non-constant but ideal value\n+// and we used to incorrectly attach a constant Val to the Node.\n+\n+package p\n+\n+func f(i uint) uint {\n+\tx := []uint{1 << i}\n+\treturn x[0]\n+}"}, {"sha": "9e0ca5ae3f6af2c6fc43e639c9123a25167d9c5e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue1304.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue1304.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue1304.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue1304.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var a = 1\n+\n+func main() {\n+\tdefer func() {\n+\t\trecover()\n+\t\tif a != 2 {\n+\t\t\tprintln(\"BUG a =\", a)\n+\t\t}\n+\t}()\n+\ta = 2\n+\tb := a - a\n+\tc := 4\n+\ta = c / b\n+\ta = 3\n+}"}, {"sha": "c21ecf671a25376997ac5c1861c29c04184b5118", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13160.go", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13160.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13160.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13160.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,70 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+const N = 100000\n+\n+func main() {\n+\t// Allocate more Ps than processors.  This raises\n+\t// the chance that we get interrupted by the OS\n+\t// in exactly the right (wrong!) place.\n+\tp := runtime.NumCPU()\n+\truntime.GOMAXPROCS(2 * p)\n+\n+\t// Allocate some pointers.\n+\tptrs := make([]*int, p)\n+\tfor i := 0; i < p; i++ {\n+\t\tptrs[i] = new(int)\n+\t}\n+\n+\t// Arena where we read and write pointers like crazy.\n+\tcollider := make([]*int, p)\n+\n+\tdone := make(chan struct{}, 2*p)\n+\n+\t// Start writers.  They alternately write a pointer\n+\t// and nil to a slot in the collider.\n+\tfor i := 0; i < p; i++ {\n+\t\ti := i\n+\t\tgo func() {\n+\t\t\tfor j := 0; j < N; j++ {\n+\t\t\t\t// Write a pointer using memmove.\n+\t\t\t\tcopy(collider[i:i+1], ptrs[i:i+1])\n+\t\t\t\t// Write nil using memclr.\n+\t\t\t\t// (This is a magic loop that gets lowered to memclr.)\n+\t\t\t\tr := collider[i : i+1]\n+\t\t\t\tfor k := range r {\n+\t\t\t\t\tr[k] = nil\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdone <- struct{}{}\n+\t\t}()\n+\t}\n+\t// Start readers.  They read pointers from slots\n+\t// and make sure they are valid.\n+\tfor i := 0; i < p; i++ {\n+\t\ti := i\n+\t\tgo func() {\n+\t\t\tfor j := 0; j < N; j++ {\n+\t\t\t\tvar ptr [1]*int\n+\t\t\t\tcopy(ptr[:], collider[i:i+1])\n+\t\t\t\tif ptr[0] != nil && ptr[0] != ptrs[i] {\n+\t\t\t\t\tpanic(fmt.Sprintf(\"bad pointer read %p!\", ptr[0]))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdone <- struct{}{}\n+\t\t}()\n+\t}\n+\tfor i := 0; i < 2*p; i++ {\n+\t\t<-done\n+\t}\n+}"}, {"sha": "f8b3150c3eafa119e65c2c518f68333c109b1048", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13162.go", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13162.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13162.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13162.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,82 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Ensure that range loops over a string have the requisite side-effects.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+)\n+\n+func check(n int) {\n+\tvar i int\n+\tvar r rune\n+\n+\tb := make([]byte, n)\n+\tfor i = range b {\n+\t\tb[i] = byte(i + 1)\n+\t}\n+\ts := string(b)\n+\n+\t// When n == 0, i is untouched by the range loop.\n+\t// Picking an initial value of -1 for i makes the\n+\t// \"want\" calculation below correct in all cases.\n+\ti = -1\n+\tfor i = range s {\n+\t\tb[i] = s[i]\n+\t}\n+\tif want := n - 1; i != want {\n+\t\tfmt.Printf(\"index after range with side-effect = %d want %d\\n\", i, want)\n+\t\tos.Exit(1)\n+\t}\n+\n+\ti = -1\n+\tr = '\\x00'\n+\tfor i, r = range s {\n+\t\tb[i] = byte(r)\n+\t}\n+\tif want := n - 1; i != want {\n+\t\tfmt.Printf(\"index after range with side-effect = %d want %d\\n\", i, want)\n+\t\tos.Exit(1)\n+\t}\n+\tif want := rune(n); r != want {\n+\t\tfmt.Printf(\"rune after range with side-effect = %q want %q\\n\", r, want)\n+\t\tos.Exit(1)\n+\t}\n+\n+\ti = -1\n+\t// i is shadowed here, so its value should be unchanged.\n+\tfor i := range s {\n+\t\tb[i] = s[i]\n+\t}\n+\tif want := -1; i != want {\n+\t\tfmt.Printf(\"index after range without side-effect = %d want %d\\n\", i, want)\n+\t\tos.Exit(1)\n+\t}\n+\n+\ti = -1\n+\tr = -1\n+\t// i and r are shadowed here, so their values should be unchanged.\n+\tfor i, r := range s {\n+\t\tb[i] = byte(r)\n+\t}\n+\tif want := -1; i != want {\n+\t\tfmt.Printf(\"index after range without side-effect = %d want %d\\n\", i, want)\n+\t\tos.Exit(1)\n+\t}\n+\tif want := rune(-1); r != want {\n+\t\tfmt.Printf(\"rune after range without side-effect = %q want %q\\n\", r, want)\n+\t\tos.Exit(1)\n+\t}\n+}\n+\n+func main() {\n+\tcheck(0)\n+\tcheck(1)\n+\tcheck(15)\n+}"}, {"sha": "03c52e2951d7c132462841d3fbe104f506aeec69", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13169.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13169.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13169.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13169.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,49 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T struct {\n+\ta, b, c int\n+}\n+\n+func usestack() {\n+\tusestack1(32)\n+}\n+func usestack1(d int) byte {\n+\tif d == 0 {\n+\t\treturn 0\n+\t}\n+\tvar b [1024]byte\n+\tusestack1(d - 1)\n+\treturn b[3]\n+}\n+\n+const n = 100000\n+\n+func main() {\n+\tc := make(chan interface{})\n+\tdone := make(chan bool)\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tgo func() {\n+\t\t\tfor j := 0; j < n; j++ {\n+\t\t\t\tc <- new(T)\n+\t\t\t}\n+\t\t\tdone <- true\n+\t\t}()\n+\t\tgo func() {\n+\t\t\tfor j := 0; j < n; j++ {\n+\t\t\t\t_ = (<-c).(*T)\n+\t\t\t\tusestack()\n+\t\t\t}\n+\t\t\tdone <- true\n+\t\t}()\n+\t}\n+\tfor i := 0; i < 20; i++ {\n+\t\t<-done\n+\t}\n+}"}, {"sha": "addb872781aa472714ab1fd0e20e5010f2b1e1dc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13171.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13171.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13171.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13171.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Make sure the compiler knows that DUFFCOPY clobbers X0\n+\n+import \"fmt\"\n+\n+//go:noinline\n+func f(x float64) float64 {\n+\t// y is allocated to X0\n+\ty := x + 5\n+\t// marshals z before y.  Marshaling z\n+\t// calls DUFFCOPY.\n+\treturn g(z, y)\n+}\n+\n+//go:noinline\n+func g(b [64]byte, y float64) float64 {\n+\treturn y\n+}\n+\n+var z [64]byte\n+\n+func main() {\n+\tgot := f(5)\n+\tif got != 10 {\n+\t\tpanic(fmt.Sprintf(\"want 10, got %f\", got))\n+\t}\n+}"}, {"sha": "e23ba47b5867a1ec11f79702a0970741d9c8ac47", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13248.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13248.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13248.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13248.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This program caused an infinite loop with the recursive-descent parser.\n+\n+package main\n+\n+func main() {\n+    foo( // GCCGO_ERROR \"undefined name\"\n+} // ERROR \"unexpected }|expected operand|missing\""}, {"sha": "a944f3a9b57240cec7740f237e747ac9a2db8357", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13261.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13261.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13261.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13261.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,29 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Taking the address of a parenthesized composite literal is permitted.\n+\n+package main\n+\n+type T struct{}\n+\n+func main() {\n+\t_ = &T{}\n+\t_ = &(T{})\n+\t_ = &((T{}))\n+\n+\t_ = &struct{}{}\n+\t_ = &(struct{}{})\n+\t_ = &((struct{}{}))\n+\n+\tswitch (&T{}) {}\n+\tswitch &(T{}) {}\n+\tswitch &((T{})) {}\n+\n+\tswitch &struct{}{} {}\n+\tswitch &(struct{}{}) {}\n+\tswitch &((struct{}{})) {}\n+}"}, {"sha": "8837c007989d9b743a37c6f89f5abb2810af0ca8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13262.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13262.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13262.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13262.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 13262: cmd/compile: bogus \"fallthrough\n+// statement out of place\" error\n+\n+package p\n+\n+func f() int {\n+\tvar a int\n+\tswitch a {\n+\tcase 0:\n+\t\treturn func() int { return 1 }()\n+\t\tfallthrough\n+\tdefault:\n+\t}\n+\treturn 0\n+}"}, {"sha": "1933f2b5c5ccd7720ce2f880f15c95cfb80aa207", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13263.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13263.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13263.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13263.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+var (\n+\tx uint\n+\ty = x\n+\tz = uintptr(y)\n+\ta = uint32(y)\n+\tb = uint64(y)\n+)"}, {"sha": "73c9e16bcc247f4b2f077d22ba828bd813e3b198", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13266.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13266.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13266.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13266.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Offending character % must not be interpreted as\n+// start of format verb when emitting error message.\n+\n+package% // ERROR \"unexpected %|package name must be an identifier|after package clause|expected declaration\""}, {"sha": "fcb69c90682f9338a4392610707148909ae790e1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13268.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13268.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13268.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13268.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,42 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test error message when EOF is encountered in the\n+// middle of a BOM.\n+//\n+// Since the error requires an EOF, we cannot use the\n+// errorcheckoutput mechanism.\n+\n+package main\n+\n+import (\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\t// create source\n+\tf, err := ioutil.TempFile(\"\", \"issue13268-\")\n+\tif err != nil {\n+\t\tlog.Fatalf(\"could not create source file: %v\", err)\n+\t}\n+\tf.Write([]byte(\"package p\\n\\nfunc \\xef\\xef\")) // if this fails, we will die later\n+\tf.Close()\n+\tdefer os.Remove(f.Name())\n+\n+\t// compile and test output\n+\tcmd := exec.Command(\"go\", \"tool\", \"compile\", f.Name())\n+\tout, err := cmd.CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatalf(\"expected cmd/compile to fail\")\n+\t}\n+\tif strings.HasPrefix(string(out), \"illegal UTF-8 sequence\") {\n+\t\tlog.Fatalf(\"error %q not found\", out)\n+\t}\n+}"}, {"sha": "816bd9b8f27320d459278892d2c274b765dd1879", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13274.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13274.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13274.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13274.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that we don't ignore EOF.\n+\n+package p\n+\n+var f = func() { // ERROR \"unexpected EOF|expected .*}.*\"\n\\ No newline at end of file"}, {"sha": "81f984b7322b1e9600c49695edde970ab74aab56", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13337.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13337.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13337.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13337.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,30 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 13337: The Go compiler limited how deeply embedded types\n+// were searched for promoted fields and methods.\n+\n+package s\n+\n+type S0 struct{ f int }\n+func (S0) m() {}\n+\n+type S1 struct{ S0 }\n+type S2 struct{ S1 }\n+type S3 struct{ S2 }\n+type S4 struct{ S3 }\n+type S5 struct{ S4 }\n+type S6 struct{ S5 }\n+type S7 struct{ S6 }\n+type S8 struct{ S7 }\n+type S9 struct{ S8 }\n+type S10 struct{ S9 }\n+type S11 struct{ S10 }\n+type S12 struct{ S11 }\n+type S13 struct{ S12 }\n+\n+var _ = S13{}.f\n+var _ = S13.m"}, {"sha": "31a663eb1f69459093f2fe64c8bc82614fcfa9c8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13365.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13365.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13365.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13365.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 13365: confusing error message (array vs slice)\n+\n+package main\n+\n+var t struct{}\n+\n+func main() {\n+\t_ = []int{-1: 0}    // ERROR \"index must be non\\-negative integer constant|index expression is negative\"\n+\t_ = [10]int{-1: 0}  // ERROR \"index must be non\\-negative integer constant|index expression is negative\"\n+\t_ = [...]int{-1: 0} // ERROR \"index must be non\\-negative integer constant|index expression is negative\"\n+\n+\t_ = []int{100: 0}\n+\t_ = [10]int{100: 0} // ERROR \"array index 100 out of bounds|out of range\"\n+\t_ = [...]int{100: 0}\n+\n+\t_ = []int{t}    // ERROR \"cannot use .* as type int in slice literal|incompatible type\"\n+\t_ = [10]int{t}  // ERROR \"cannot use .* as type int in array literal|incompatible type\"\n+\t_ = [...]int{t} // ERROR \"cannot use .* as type int in array literal|incompatible type\"\n+}"}, {"sha": "4c4655e547356d3949a8ad322756c82728e9f650", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13415.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13415.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13415.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13415.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that error message regarding := appears on\n+// correct line (and not on the line of the 2nd :=).\n+\n+package p\n+\n+func f() {\n+    select {\n+    case x, x := <-func() chan int { // ERROR \"x repeated on left side of :=|redefinition|declared but not used\"\n+            c := make(chan int)\n+            return c\n+    }():\n+    }\n+}"}, {"sha": "9bfc8c3d2cffd62c7cc9d1da6c96754759c45425", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13471.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13471.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13471.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13471.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Tests for golang.org/issue/13471\n+\n+package main\n+\n+func main() {\n+\tconst _ int64 = 1e646456992 // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ int32 = 1e64645699  // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ int16 = 1e6464569   // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ int8 = 1e646456     // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ int = 1e64645       // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\n+\tconst _ uint64 = 1e646456992 // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ uint32 = 1e64645699  // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ uint16 = 1e6464569   // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ uint8 = 1e646456     // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\tconst _ uint = 1e64645       // ERROR \"integer too large|floating-point constant truncated to integer\"\n+\n+\tconst _ rune = 1e64645 // ERROR \"integer too large|floating-point constant truncated to integer\"\n+}"}, {"sha": "cd2f05de5f6977c933088b51673176bdb66568af", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13480.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13480.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13480.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13480.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,38 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that comparisons of slice/map/func values against converted nil\n+// values are properly rejected.\n+\n+package p\n+\n+func bug() {\n+\ttype S []byte\n+\ttype M map[int]int\n+\ttype F func()\n+\n+\tvar s S\n+\tvar m M\n+\tvar f F\n+\n+\t_ = s == S(nil) // ERROR \"compare.*to nil\"\n+\t_ = S(nil) == s // ERROR \"compare.*to nil\"\n+\tswitch s {\n+\tcase S(nil): // ERROR \"compare.*to nil\"\n+\t}\n+\n+\t_ = m == M(nil) // ERROR \"compare.*to nil\"\n+\t_ = M(nil) == m // ERROR \"compare.*to nil\"\n+\tswitch m {\n+\tcase M(nil): // ERROR \"compare.*to nil\"\n+\t}\n+\n+\t_ = f == F(nil) // ERROR \"compare.*to nil\"\n+\t_ = F(nil) == f // ERROR \"compare.*to nil\"\n+\tswitch f {\n+\tcase F(nil): // ERROR \"compare.*to nil\"\n+\t}\n+}"}, {"sha": "a9beea1f7dfb9b4f3f6472eedef9091a749b97c0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13485.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13485.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13485.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13485.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var (\n+\t_ [10]int\n+\t_ [10.0]int\n+\t_ [float64(10)]int                // ERROR \"invalid array bound\"\n+\t_ [10 + 0i]int\n+\t_ [complex(10, 0)]int\n+\t_ [complex128(complex(10, 0))]int // ERROR \"invalid array bound\"\n+\t_ ['a']int\n+\t_ [rune(65)]int\n+)"}, {"sha": "72c3ab0ae0ede61fb7fb1f095b251ff75c306c04", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13539.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13539.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13539.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13539.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that a label named like a package is recognized\n+// as a label rather than a package and that the package\n+// remains unused.\n+\n+package main\n+\n+import \"math\" // ERROR \"imported and not used\"\n+\n+func main() {\n+math:\n+\tfor {\n+\t\tbreak math\n+\t}\n+}"}, {"sha": "a1d88566e40ca68e991ccb7e7b417fd0117c64a0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13684.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13684.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13684.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13684.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// run\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that a label name matching a constant name\n+// is permitted.\n+\n+package main\n+\n+const labelname = 1\n+\n+func main() {\n+\tgoto labelname\n+labelname:\n+}"}, {"sha": "512563975ed64fa6ac60d95c00bc40f37a5bb0f1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13777.dir/burnin.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fburnin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fburnin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fburnin.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+package burnin\n+\n+type sendCmdFunc func(string)\n+\n+func sendCommand(c string) {}\n+\n+func NewSomething() {\n+\t// This works...\n+\t// var sendCmd sendCmdFunc\n+\t// sendCmd = sendCommand\n+\n+\t// So does this...\n+\t//sendCmd := sendCmdFunc(sendCommand)\n+\n+\t// This fails...\n+\tsendCmd := sendCommand\n+\n+\t_ = sendCmd\n+}"}, {"sha": "2512b93a81a0395093c685bd63d30a4914fe1487", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13777.dir/main.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// build\n+\n+package main\n+\n+import (\n+\tx \"./burnin\"\n+)\n+\n+func main() {\n+\tx.NewSomething()\n+}"}, {"sha": "8f83c13ab9971661648833e4be23f47f3e86cad3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13777.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13777.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// rundir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "fbdd4c32bc85a85fd9aa405962d36810776988ec", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13799.go", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13799.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13799.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13799.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,190 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test, using compiler diagnostic flags, that the escape analysis is working.\n+// Compiles but does not run.  Inlining is disabled.\n+// Registerization is disabled too (-N), which should\n+// have no effect on escape analysis.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\t// Just run test over and over again. This main func is just for\n+\t// convenience; if test were the main func, we could also trigger\n+\t// the panic just by running the program over and over again\n+\t// (sometimes it takes 1 time, sometimes it takes ~4,000+).\n+\tfor iter := 0; ; iter++ {\n+\t\tif iter%50 == 0 {\n+\t\t\tfmt.Println(iter) // ERROR \"iter escapes to heap$\" \"... argument does not escape$\"\n+\t\t}\n+\t\ttest1(iter)\n+\t\ttest2(iter)\n+\t\ttest3(iter)\n+\t\ttest4(iter)\n+\t\ttest5(iter)\n+\t\ttest6(iter)\n+\t}\n+}\n+\n+func test1(iter int) {\n+\n+\tconst maxI = 500\n+\tm := make(map[int][]int) // ERROR \"make\\(map\\[int\\]\\[\\]int\\) escapes to heap$\"\n+\n+\t// The panic seems to be triggered when m is modified inside a\n+\t// closure that is both recursively called and reassigned to in a\n+\t// loop.\n+\n+\t// Cause of bug -- escape of closure failed to escape (shared) data structures\n+\t// of map.  Assign to fn declared outside of loop triggers escape of closure.\n+\t// Heap -> stack pointer eventually causes badness when stack reallocation\n+\t// occurs.\n+\n+\tvar fn func()               // ERROR \"moved to heap: fn$\"\n+\tfor i := 0; i < maxI; i++ { // ERROR \"moved to heap: i$\"\n+\t\t// var fn func() // this makes it work, because fn stays off heap\n+\t\tj := 0        // ERROR \"moved to heap: j$\"\n+\t\tfn = func() { // ERROR \"func literal escapes to heap$\"\n+\t\t\tm[i] = append(m[i], 0)\n+\t\t\tif j < 25 {\n+\t\t\t\tj++\n+\t\t\t\tfn()\n+\t\t\t}\n+\t\t}\n+\t\tfn()\n+\t}\n+\n+\tif len(m) != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, len(m) = %d\", iter, maxI, len(m))) // ERROR \"iter escapes to heap$\" \"len\\(m\\) escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}\n+\n+func test2(iter int) {\n+\n+\tconst maxI = 500\n+\tm := make(map[int][]int) // ERROR \"make\\(map\\[int\\]\\[\\]int\\) does not escape$\"\n+\n+\t// var fn func()\n+\tfor i := 0; i < maxI; i++ {\n+\t\tvar fn func() // this makes it work, because fn stays off heap\n+\t\tj := 0\n+\t\tfn = func() { // ERROR \"func literal does not escape$\"\n+\t\t\tm[i] = append(m[i], 0)\n+\t\t\tif j < 25 {\n+\t\t\t\tj++\n+\t\t\t\tfn()\n+\t\t\t}\n+\t\t}\n+\t\tfn()\n+\t}\n+\n+\tif len(m) != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, len(m) = %d\", iter, maxI, len(m))) // ERROR \"iter escapes to heap$\" \"len\\(m\\) escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}\n+\n+func test3(iter int) {\n+\n+\tconst maxI = 500\n+\tvar x int // ERROR \"moved to heap: x$\"\n+\tm := &x\n+\n+\tvar fn func() // ERROR \"moved to heap: fn$\"\n+\tfor i := 0; i < maxI; i++ {\n+\t\t// var fn func() // this makes it work, because fn stays off heap\n+\t\tj := 0        // ERROR \"moved to heap: j$\"\n+\t\tfn = func() { // ERROR \"func literal escapes to heap$\"\n+\t\t\tif j < 100 {\n+\t\t\t\tj++\n+\t\t\t\tfn()\n+\t\t\t} else {\n+\t\t\t\t*m = *m + 1\n+\t\t\t}\n+\t\t}\n+\t\tfn()\n+\t}\n+\n+\tif *m != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, *m = %d\", iter, maxI, *m)) // ERROR \"\\*m escapes to heap$\" \"iter escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}\n+\n+func test4(iter int) {\n+\n+\tconst maxI = 500\n+\tvar x int\n+\tm := &x\n+\n+\t// var fn func()\n+\tfor i := 0; i < maxI; i++ {\n+\t\tvar fn func() // this makes it work, because fn stays off heap\n+\t\tj := 0\n+\t\tfn = func() { // ERROR \"func literal does not escape$\"\n+\t\t\tif j < 100 {\n+\t\t\t\tj++\n+\t\t\t\tfn()\n+\t\t\t} else {\n+\t\t\t\t*m = *m + 1\n+\t\t\t}\n+\t\t}\n+\t\tfn()\n+\t}\n+\n+\tif *m != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, *m = %d\", iter, maxI, *m)) // ERROR \"\\*m escapes to heap$\" \"iter escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}\n+\n+type str struct {\n+\tm *int\n+}\n+\n+func recur1(j int, s *str) { // ERROR \"s does not escape\"\n+\tif j < 100 {\n+\t\tj++\n+\t\trecur1(j, s)\n+\t} else {\n+\t\t*s.m++\n+\t}\n+}\n+\n+func test5(iter int) {\n+\n+\tconst maxI = 500\n+\tvar x int // ERROR \"moved to heap: x$\"\n+\tm := &x\n+\n+\tvar fn *str\n+\tfor i := 0; i < maxI; i++ {\n+\t\t// var fn *str // this makes it work, because fn stays off heap\n+\t\tfn = &str{m} // ERROR \"&str{...} escapes to heap\"\n+\t\trecur1(0, fn)\n+\t}\n+\n+\tif *m != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, *m = %d\", iter, maxI, *m)) // ERROR \"\\*m escapes to heap$\" \"iter escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}\n+\n+func test6(iter int) {\n+\n+\tconst maxI = 500\n+\tvar x int\n+\tm := &x\n+\n+\t// var fn *str\n+\tfor i := 0; i < maxI; i++ {\n+\t\tvar fn *str  // this makes it work, because fn stays off heap\n+\t\tfn = &str{m} // ERROR \"&str{...} does not escape\"\n+\t\trecur1(0, fn)\n+\t}\n+\n+\tif *m != maxI {\n+\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, *m = %d\", iter, maxI, *m)) // ERROR \"\\*m escapes to heap$\" \"iter escapes to heap$\" \"maxI escapes to heap$\" \"... argument does not escape$\"\n+\t}\n+}"}, {"sha": "187e4b4cfb8bcb67a2266ef519801e073ff46829", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13821.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 13821.  Compiler rejected \"bool(true)\" as not a constant.\n+\n+package p\n+\n+const (\n+\tA = true\n+\tB = bool(A)\n+\tC = bool(true)\n+)"}, {"sha": "df68e8d6264c4be170aa9f458fae6f2b829611fb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue13821b.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue13821b.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 13821.  Additional regress tests.\n+\n+package p\n+\n+type B bool\n+type B2 bool\n+\n+var b B\n+var b2 B2\n+var x1 = b && 1 < 2 // x1 has type B, not ideal bool\n+var x2 = 1 < 2 && b // x2 has type B, not ideal bool\n+var x3 = b && b2    // ERROR \"mismatched types B and B2|incompatible types\"\n+var x4 = x1 && b2   // ERROR \"mismatched types B and B2|incompatible types\"\n+var x5 = x2 && b2   // ERROR \"mismatched types B and B2|incompatible types\"\n+var x6 = b2 && x1   // ERROR \"mismatched types B2 and B|incompatible types\"\n+var x7 = b2 && x2   // ERROR \"mismatched types B2 and B|incompatible types\"\n+\n+var x8 = b && !B2(true) // ERROR \"mismatched types B and B2|incompatible types\""}, {"sha": "9cad2b4c9d127d2153043e693e59cce10bf08042", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14006.go", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14006.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14006.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14006.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,67 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Literals that happen to resolve to named constants\n+// may be used as label names (see issue 13684). Make\n+// sure that other literals don't crash the compiler.\n+\n+package main\n+\n+const labelname = 1\n+\n+func main() {\n+\tgoto labelname\n+labelname:\n+}\n+\n+func f() {\n+\tvar x int\n+\tswitch x {\n+\tcase 1:\n+\t\t2:\t// ERROR \"unexpected :|expected .*;.* or .*}.* or newline|value computed is not used\"\n+\tcase 2:\n+\t}\n+\n+\tswitch x {\n+\tcase 1:\n+\t\t2: ;\t// ERROR \"unexpected :|expected .*;.* or .*}.* or newline|value computed is not used\"\n+\tcase 2:\n+\t}\n+\n+\tvar y string\n+\tswitch y {\n+\tcase \"foo\":\n+\t\t\"bar\":\t// ERROR \"unexpected :|expected .*;.* or .*}.* or newline|value computed is not used\"\n+\tcase \"bar\":\n+\t}\n+\n+\tswitch y {\n+\tcase \"foo\":\n+\t\t\"bar\": ;\t// ERROR \"unexpected :|expected .*;.* or .*}.* or newline|value computed is not used\"\n+\tcase \"bar\":\n+\t}\n+\n+\tvar z bool\n+\tswitch {\n+\tcase z:\n+\t\tlabelname:\t// ERROR \"missing statement after label\"\n+\tcase false:\n+\t}\n+}\n+\n+func g() {\n+\tvar z bool\n+\tswitch {\n+\tcase z:\n+\t\tlabelname:\t// ERROR \"label labelname defined and not used|previous definition|defined and not used\"\n+\t}\n+\n+\tswitch {\n+\tcase z:\n+\t\tlabelname: ;\t// ERROR \"label labelname already defined at LINE-5|label .*labelname.* already defined\"\n+\tcase false:\n+\t}\n+}"}, {"sha": "0b233342be54a07b6418192363adee4562327a97", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14010.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14010.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14010.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14010.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that built-in types don't get printed with\n+// (empty) package qualification.\n+\n+package main\n+\n+func main() {\n+\ttrue = false // ERROR \"cannot assign to true|invalid left hand side\"\n+\tbyte = 0     // ERROR \"not an expression|invalid left hand side|invalid use of type\"\n+}"}, {"sha": "38308cd75c94e298412de4f87a3095d4c49b3032", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14136.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14136.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14136.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14136.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that > 10 non-syntax errors on the same line\n+// don't lead to early exit. Specifically, here test\n+// that we see the initialization error for variable\n+// s.\n+\n+package main\n+\n+type T struct{}\n+\n+func main() {\n+\tt := T{X: 1, X: 1, X: 1, X: 1, X: 1, X: 1, X: 1, X: 1, X: 1, X: 1} // ERROR \"unknown field 'X' in struct literal of type T|unknown field .*X.* in .*T.*\"\n+\tvar s string = 1 // ERROR \"cannot use 1|incompatible type\"\n+}"}, {"sha": "bf03051619817a7f5f421d99d467a9eea6f95b64", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14164.dir/a.go", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+// F is an exported function, small enough to be inlined.\n+// It defines a local interface with an unexported method\n+// f, which will appear with a package-qualified method\n+// name in the export data.\n+func F(x interface{}) bool {\n+\t_, ok := x.(interface {\n+\t\tf()\n+\t})\n+\treturn ok\n+}\n+\n+// Like F but with the unexported interface method f\n+// defined via an embedded interface t. The compiler\n+// always flattens embedded interfaces so there should\n+// be no difference between F and G. Alas, currently\n+// G is not inlineable (at least via export data), so\n+// the issue is moot, here.\n+func G(x interface{}) bool {\n+\ttype t0 interface {\n+\t\tf()\n+\t}\n+\t_, ok := x.(interface {\n+\t\tt0\n+\t})\n+\treturn ok\n+}\n+\n+// Like G but now the embedded interface is declared\n+// at package level. This function is inlineable via\n+// export data. The export data representation is like\n+// for F.\n+func H(x interface{}) bool {\n+\t_, ok := x.(interface {\n+\t\tt1\n+\t})\n+\treturn ok\n+}\n+\n+type t1 interface {\n+\tf()\n+}"}, {"sha": "bcc6a63c2071588a0bf6da9fd2c868e0877f7a62", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14164.dir/main.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Verify that we can import package \"a\" containing an inlineable\n+// function F that declares a local interface with a non-exported\n+// method f.\n+import _ \"./a\"\n+\n+func main() {}"}, {"sha": "5247599d497baf21f6e17ac75df9520f18fb6d6e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14164.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14164.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+ignored"}, {"sha": "f1e57ef52785658234739ffeaf04053beb8607a4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14331.dir/a.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+var S struct {\n+\tStr string `tag`\n+}\n+\n+func F() string {\n+\tv := S\n+\treturn v.Str\n+}"}, {"sha": "a2280a362979639bdbeacd2409143433c8c05da6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14331.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func G() string {\n+\treturn a.F()\n+}"}, {"sha": "b8ee2fb14b7ca6f1447c272f2eca22b5964c72be", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14331.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14331.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Inline function misses struct tags.\n+\n+package ignored"}, {"sha": "94592fd18b8556587206c9138c004e7d6d2273cc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14405.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14405.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14405.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14405.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Mention of field with large offset in struct literal causes crash\n+package p\n+\n+type T struct {\n+\tSlice [1 << 20][]int\n+\tPtr   *int\n+}\n+\n+func New(p *int) *T {\n+\treturn &T{Ptr: p}\n+}"}, {"sha": "0b840ff4bee9ad173cfaf8f23f046630a27e1d56", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14520.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14520.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14520.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14520.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package f\n+\n+import /* // ERROR \"import path\" */ `\n+bogus`\n+\n+func f(x int /* // GC_ERROR \"unexpected newline\"\n+\n+*/) // GCCGO_ERROR \"expected .*\\).*|expected declaration\""}, {"sha": "d7ebb1288eb820cce4d777e6d57af66b51301f52", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14553.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14553.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14553.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14553.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,45 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test checks if the compiler's internal constant\n+// arithmetic correctly rounds denormal float32 values.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+)\n+\n+func main() {\n+\tfor _, t := range []struct {\n+\t\tvalue float32\n+\t\tbits  uint32\n+\t}{\n+\t\t{0e+00, 0x00000000},\n+\t\t{1e-46, 0x00000000},\n+\t\t{0.5e-45, 0x00000000},\n+\t\t{0.8e-45, 0x00000001},\n+\t\t{1e-45, 0x00000001},\n+\t\t{2e-45, 0x00000001},\n+\t\t{3e-45, 0x00000002},\n+\t\t{4e-45, 0x00000003},\n+\t\t{5e-45, 0x00000004},\n+\t\t{6e-45, 0x00000004},\n+\t\t{7e-45, 0x00000005},\n+\t\t{8e-45, 0x00000006},\n+\t\t{9e-45, 0x00000006},\n+\t\t{1.0e-44, 0x00000007},\n+\t\t{1.1e-44, 0x00000008},\n+\t\t{1.2e-44, 0x00000009},\n+\t} {\n+\t\tgot := math.Float32bits(t.value)\n+\t\twant := t.bits\n+\t\tif got != want {\n+\t\t\tpanic(fmt.Sprintf(\"bits(%g) = 0x%08x; want 0x%08x\", t.value, got, want))\n+\t\t}\n+\t}\n+}"}, {"sha": "626fbbcac48374e53e26014d52f85a87377eba76", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14591.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14591.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14591.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14591.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,38 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test to make sure we don't think values are dead\n+// when they are assigned to a PPARAMOUT slot before\n+// the last GC safepoint.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+// When a T is deallocated, T[1] is certain to\n+// get clobbered (the runtime writes 0xdeaddeaddeaddead there).\n+type T [4]int\n+\n+func f() (r, s *T) {\n+\tr = &T{0x30, 0x31, 0x32, 0x33}\n+\truntime.GC()\n+\ts = &T{0x40, 0x41, 0x42, 0x43}\n+\truntime.GC()\n+\treturn\n+}\n+\n+func main() {\n+\tr, s := f()\n+\tif r[1] != 0x31 {\n+\t\tfmt.Printf(\"bad r[1], want 0x31 got %x\\n\", r[1])\n+\t}\n+\tif s[1] != 0x41 {\n+\t\tfmt.Printf(\"bad s[1], want 0x41 got %x\\n\", s[1])\n+\t}\n+}"}, {"sha": "6797046e02b66d478cd7da9374762a5663b0576f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14636.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14636.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14636.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14636.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,43 @@\n+// +build !nacl,!js,!android\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"log\"\n+\t\"os/exec\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\tcheckLinkOutput(\"\", \"-B argument must start with 0x\")\n+\tcheckLinkOutput(\"0\", \"-B argument must start with 0x\")\n+\tcheckLinkOutput(\"0x\", \"usage\")\n+\tcheckLinkOutput(\"0x0\", \"-B argument must have even number of digits\")\n+\tcheckLinkOutput(\"0x00\", \"usage\")\n+\tcheckLinkOutput(\"0xYZ\", \"-B argument contains invalid hex digit\")\n+\tcheckLinkOutput(\"0x\"+strings.Repeat(\"00\", 32), \"usage\")\n+\tcheckLinkOutput(\"0x\"+strings.Repeat(\"00\", 33), \"-B option too long (max 32 digits)\")\n+}\n+\n+func checkLinkOutput(buildid string, message string) {\n+\tcmd := exec.Command(\"go\", \"tool\", \"link\", \"-B\", buildid)\n+\tout, err := cmd.CombinedOutput()\n+\tif err == nil {\n+\t\tlog.Fatalf(\"expected cmd/link to fail\")\n+\t}\n+\n+\tfirstLine := string(bytes.SplitN(out, []byte(\"\\n\"), 2)[0])\n+\tif strings.HasPrefix(firstLine, \"panic\") {\n+\t\tlog.Fatalf(\"cmd/link panicked:\\n%s\", out)\n+\t}\n+\n+\tif !strings.Contains(firstLine, message) {\n+\t\tlog.Fatalf(\"cmd/link output did not include expected message %q: %s\", message, firstLine)\n+\t}\n+}"}, {"sha": "96a685464faa081a9e6ab61fa1c64c1894c968f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14646.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14646.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14646.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14646.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func main() {\n+\tvar file string\n+\tvar line int\n+\tfunc() {\n+\t\tdefer func() {\n+\t\t\t_, file, line, _ = runtime.Caller(1)\n+\t\t}()\n+\t}() // this is the expected line\n+\tconst EXPECTED = 18\n+\tif line != EXPECTED {\n+\t\tprintln(\"Expected line =\", EXPECTED, \"but got line =\", line, \"and file =\", file)\n+\t}\n+}"}, {"sha": "4c756e502e25f6d58931a2fc0e8841b4b02456ca", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14651.go", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14651.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14651.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14651.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,71 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test checks if the compiler's internal constant\n+// arithmetic correctly rounds up floating-point values\n+// that become the smallest denormal value.\n+//\n+// See also related issue 14553 and test issue14553.go.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+)\n+\n+const (\n+\tp149 = 1.0 / (1 << 149) // 1p-149\n+\tp500 = 1.0 / (1 << 500) // 1p-500\n+\tp1074 = p500 * p500 / (1<<74) // 1p-1074\n+)\n+\n+const (\n+\tm0000p149 = 0x0 / 16.0 * p149 // = 0.0000p-149\n+\tm1000p149 = 0x8 / 16.0 * p149 // = 0.1000p-149\n+\tm1001p149 = 0x9 / 16.0 * p149 // = 0.1001p-149\n+\tm1011p149 = 0xb / 16.0 * p149 // = 0.1011p-149\n+\tm1100p149 = 0xc / 16.0 * p149 // = 0.1100p-149\n+\n+\tm0000p1074 = 0x0 / 16.0 * p1074 // = 0.0000p-1074\n+\tm1000p1074 = 0x8 / 16.0 * p1074 // = 0.1000p-1074\n+\tm1001p1074 = 0x9 / 16.0 * p1074 // = 0.1001p-1074\n+\tm1011p1074 = 0xb / 16.0 * p1074 // = 0.1011p-1074\n+\tm1100p1074 = 0xc / 16.0 * p1074 // = 0.1100p-1074\n+)\n+\n+func main() {\n+\ttest32(float32(m0000p149), f32(m0000p149))\n+\ttest32(float32(m1000p149), f32(m1000p149))\n+\ttest32(float32(m1001p149), f32(m1001p149))\n+\ttest32(float32(m1011p149), f32(m1011p149))\n+\ttest32(float32(m1100p149), f32(m1100p149))\n+\n+\ttest64(float64(m0000p1074), f64(m0000p1074))\n+\ttest64(float64(m1000p1074), f64(m1000p1074))\n+\ttest64(float64(m1001p1074), f64(m1001p1074))\n+\ttest64(float64(m1011p1074), f64(m1011p1074))\n+\ttest64(float64(m1100p1074), f64(m1100p1074))\n+}\n+\n+func f32(x float64) float32 { return float32(x) }\n+func f64(x float64) float64 { return float64(x) }\n+\n+func test32(a, b float32) {\n+\tabits := math.Float32bits(a)\n+\tbbits := math.Float32bits(b)\n+\tif abits != bbits {\n+\t\tpanic(fmt.Sprintf(\"%08x != %08x\\n\", abits, bbits))\n+\t}\n+}\n+\n+func test64(a, b float64) {\n+\tabits := math.Float64bits(a)\n+\tbbits := math.Float64bits(b)\n+\tif abits != bbits {\n+\t\tpanic(fmt.Sprintf(\"%016x != %016x\\n\", abits, bbits))\n+\t}\n+}"}, {"sha": "d53b412668314822423427c98711bb0731041b83", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14652.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14652.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14652.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14652.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var x any // ERROR \"undefined: any|undefined type .*any.*\""}, {"sha": "49f3fbcf417c43d4cc53ed94967e6d7e3742d050", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14725.go", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14725.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14725.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14725.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,57 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func f1() (x int) {\n+\tfor {\n+\t\tdefer func() {\n+\t\t\trecover()\n+\t\t\tx = 1\n+\t\t}()\n+\t\tpanic(nil)\n+\t}\n+}\n+\n+var sink *int\n+\n+func f2() (x int) {\n+\tsink = &x\n+\tdefer func() {\n+\t\trecover()\n+\t\tx = 1\n+\t}()\n+\tpanic(nil)\n+}\n+\n+func f3(b bool) (x int) {\n+\tsink = &x\n+\tdefer func() {\n+\t\trecover()\n+\t\tx = 1\n+\t}()\n+\tif b {\n+\t\tpanic(nil)\n+\t}\n+\treturn\n+}\n+\n+func main() {\n+\tif x := f1(); x != 1 {\n+\t\tpanic(fmt.Sprintf(\"f1 returned %d, wanted 1\", x))\n+\t}\n+\tif x := f2(); x != 1 {\n+\t\tpanic(fmt.Sprintf(\"f2 returned %d, wanted 1\", x))\n+\t}\n+\tif x := f3(true); x != 1 {\n+\t\tpanic(fmt.Sprintf(\"f3(true) returned %d, wanted 1\", x))\n+\t}\n+\tif x := f3(false); x != 1 {\n+\t\tpanic(fmt.Sprintf(\"f3(false) returned %d, wanted 1\", x))\n+\t}\n+}"}, {"sha": "9b30fd271505b58c06bd56a58f001fe06ecc9c14", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14729.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14729.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14729.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14729.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 14729: structs cannot embed unsafe.Pointer per the spec.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+type s struct { unsafe.Pointer } // ERROR \"embedded type cannot be a pointer|embedded type may not be a pointer\"\n+type s1 struct { p unsafe.Pointer }"}, {"sha": "4ddc7e728f903b5e3b920c2c1ad58f1adaa5d5fe", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue14988.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14988.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14988.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue14988.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 14988: defining a map with an invalid forward declaration array\n+//              key doesn't cause a fatal.\n+\n+package main\n+\n+type m map[k]int // ERROR \"invalid map key type\"\n+type k [1]m"}, {"sha": "9e218e6d81026f53d4a9869c0c7a847c39386cfc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15013.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15013.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15013.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15013.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// CL 21202 introduced a compiler crash in the handling of a varargs\n+// function in the same recursive group as a function that calls it.\n+// Nothing in the standard library caught the problem, so adding a test.\n+\n+package p\n+\n+func F1(p *int, a ...*int) (int, *int) {\n+\tif p == nil {\n+\t\treturn F2(), a[0]\n+\t}\n+\treturn 0, a[0]\n+}\n+\n+func F2() int {\n+\tvar i0, i1 int\n+\ta, _ := F1(&i0, &i1)\n+\treturn a\n+}"}, {"sha": "85d9e8340aa1349a16719b5f628c1b14f16a1081", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15039.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15039.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15039.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15039.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tconst fffd = \"\\uFFFD\"\n+\n+\t// runtime.intstring used to convert int64 to rune without checking\n+\t// for truncation.\n+\tu := uint64(0x10001f4a9)\n+\tbig := string(u)\n+\tif big != fffd {\n+\t\tpanic(\"big != bad\")\n+\t}\n+\n+\t// cmd/compile used to require integer constants to fit into an \"int\".\n+\tconst huge = string(1<<100)\n+\tif huge != fffd {\n+\t\tpanic(\"huge != bad\")\n+\t}\n+}"}, {"sha": "85d5d6c361a061d85f4d6568c15c8a4683abaaae", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15042.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15042.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15042.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15042.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Exchanging two struct fields was compiled incorrectly.\n+\n+package main\n+\n+type S struct {\n+\ti int\n+}\n+\n+func F(c bool, s1, s2 S) (int, int) {\n+\tif c {\n+\t\ts1.i, s2.i = s2.i, s1.i\n+\t}\n+\treturn s1.i, s2.i\n+}\n+\n+func main() {\n+\ti, j := F(true, S{1}, S{20})\n+\tif i != 20 || j != 1 {\n+\t\tpanic(i+j)\n+\t}\n+}"}, {"sha": "e6041e602da3262c288ef150909a041a57281dd3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15071.dir/exp.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fexp.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package exp\n+\n+func Exported(x int) int {\n+\treturn inlined(x)\n+}\n+\n+func inlined(x int) int {\n+\ty := 0\n+\tswitch {\n+\tcase x > 0:\n+\t\ty += 5\n+\t\treturn 0 + y\n+\tcase x < 1:\n+\t\ty += 6\n+\t\tfallthrough\n+\tdefault:\n+\t\ty += 7\n+\t\treturn 2 + y\n+\t}\n+}"}, {"sha": "96790dae83ad17e21233045e3e9f77ec056fdbc1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15071.dir/main.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+import \"./exp\"\n+\n+func main() {\n+\t_ = exp.Exported(len(os.Args))\n+}"}, {"sha": "af6f1341729458e04aba9a8a7110ec999540bc2a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15071.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15071.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// rundir\n+\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "7eb294e6a669184207f0a0fb74ff20c7562e93f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15084.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15084.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15084.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15084.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,30 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package x\n+\n+type T struct {\n+\ti int\n+\te interface{}\n+}\n+\n+func (t *T) F() bool {\n+\tif t.i != 0 {\n+\t\treturn false\n+\t}\n+\t_, ok := t.e.(string)\n+\treturn ok\n+}\n+\n+var x int\n+\n+func g(t *T) {\n+\tif t.F() || true {\n+\t\tif t.F() {\n+\t\t\tx = 0\n+\t\t}\n+\t}\n+}"}, {"sha": "752f530273c8eb9bc989d293fa4b63f8e3d7cb63", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15141.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15141.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15141.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15141.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,33 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\ta := f(1, 99)\n+\tb := g(0xFFFFFFe, 98)\n+\tc := h(0xFFFFFFe, 98)\n+\tprintln(a[1], b[1], c[1], a[0xFFFFFFe], b[0xFFFFFFe], c[0xFFFFFFe])\n+}\n+\n+//go:noinline\n+func f(i, y int) (a [0xFFFFFFF]byte) {\n+\ta[i] = byte(y)\n+\treturn\n+}\n+\n+//go:noinline\n+func g(i, y int) [0xFFFFFFF]byte {\n+\tvar a [0xFFFFFFF]byte\n+\ta[i] = byte(y)\n+\treturn a\n+}\n+\n+//go:noinline\n+func h(i, y int) (a [0xFFFFFFF]byte) {\n+\ta[i] = byte(y)\n+\treturn a\n+}"}, {"sha": "55a8f7d65ab394c94e66d387019ea75b073244bd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15175.go", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15175.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15175.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15175.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,66 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure unsigned shift results get sign-extended correctly.\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfailed := false\n+\ta6 := uint8(253)\n+\tif got := a6 >> 0; got != 253 {\n+\t\tfmt.Printf(\"uint8(253)>>0 = %v, wanted 253\\n\", got)\n+\t\tfailed = true\n+\t}\n+\tif got := f1(0, 2, 1, 0, 0, 1, true); got != 255 {\n+\t\tfmt.Printf(\"f1(...) = %v, wanted 255\\n\", got)\n+\t\tfailed = true\n+\t}\n+\tif got := f2(1); got != 242 {\n+\t\tfmt.Printf(\"f2(...) = %v, wanted 242\\n\", got)\n+\t\tfailed = true\n+\t}\n+\tif got := f3(false, 0, 0); got != 254 {\n+\t\tfmt.Printf(\"f3(...) = %v, wanted 254\\n\", got)\n+\t\tfailed = true\n+\t}\n+\tif failed {\n+\t\tpanic(\"bad\")\n+\t}\n+}\n+\n+func f1(a1 uint, a2 int8, a3 int8, a4 int8, a5 uint8, a6 int, a7 bool) uint8 {\n+\ta5--\n+\ta4 += (a2 << a1 << 2) | (a4 ^ a4<<(a1&a1)) - a3                              // int8\n+\ta6 -= a6 >> (2 + uint32(a2)>>3)                                              // int\n+\ta1 += a1                                                                     // uint\n+\ta3 *= a4 << (a1 | a1) << (uint16(3) >> 2 & (1 - 0) & (uint16(1) << a5 << 3)) // int8\n+\ta7 = a7 || ((a2 == a4) || (a7 && a7) || ((a5 == a5) || (a7 || a7)))          // bool\n+\treturn a5 >> a1\n+}\n+\n+func f2(a1 uint8) uint8 {\n+\ta1--\n+\ta1--\n+\ta1 -= a1 + (a1 << 1) - (a1*a1*a1)<<(2-0+(3|3)-1)                // uint8\n+\tv1 := 0 * ((2 * 1) ^ 1) & ((uint(0) >> a1) + (2+0)*(uint(2)+0)) // uint\n+\t_ = v1\n+\treturn a1 >> (((2 ^ 2) >> (v1 | 2)) + 0)\n+}\n+\n+func f3(a1 bool, a2 uint, a3 int64) uint8 {\n+\ta3--\n+\tv1 := 1 & (2 & 1 * (1 ^ 2) & (uint8(3*1) >> 0)) // uint8\n+\t_ = v1\n+\tv1 += v1 - (v1 >> a2) + (v1 << (a2 ^ a2) & v1) // uint8\n+\tv1 *= v1                                       // uint8\n+\ta3--\n+\tv1 += v1 & v1 // uint8\n+\tv1--\n+\tv1 = ((v1 << 0) | v1>>0) + v1 // uint8\n+\treturn v1 >> 0\n+}"}, {"sha": "370a885c7f514abd8c26afcc481c28b02084353b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15252.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15252.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15252.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15252.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,32 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test makes sure that we use all 64 bits of an\n+// index, even on 32 bit machines.  It also tests that nacl\n+// can compile 64 bit indexes loaded from ODOTPTR properly.\n+\n+package main\n+\n+type T struct {\n+\ti int64\n+}\n+\n+func f(t *T) byte {\n+\tb := [2]byte{3, 4}\n+\treturn b[t.i]\n+}\n+\n+func main() {\n+\tt := &T{0x100000001}\n+\tdefer func() {\n+\t\tr := recover()\n+\t\tif r == nil {\n+\t\t\tpanic(\"panic wasn't recoverable\")\n+\t\t}\n+\t}()\n+\tf(t)\n+\tpanic(\"index didn't panic\")\n+}"}, {"sha": "af165f7a6b25323449571d52e7996e63fafba91c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15277.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15277.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15277.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15277.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,40 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+// +build amd64\n+\n+package main\n+\n+import \"runtime\"\n+\n+type big [10 << 20]byte\n+\n+func f(x *big, start int64) {\n+\tif delta := inuse() - start; delta < 9<<20 {\n+\t\tprintln(\"after alloc: expected delta at least 9MB, got: \", delta)\n+\t}\n+\truntime.KeepAlive(x)\n+\tx = nil\n+\tif delta := inuse() - start; delta > 1<<20 {\n+\t\tprintln(\"after drop: expected delta below 1MB, got: \", delta)\n+\t}\n+\tx = new(big)\n+\tif delta := inuse() - start; delta < 9<<20 {\n+\t\tprintln(\"second alloc: expected delta at least 9MB, got: \", delta)\n+\t}\n+\truntime.KeepAlive(x)\n+}\n+\n+func main() {\n+\tx := inuse()\n+\tf(new(big), x)\n+}\n+\n+func inuse() int64 {\n+\truntime.GC()\n+\tvar st runtime.MemStats\n+\truntime.ReadMemStats(&st)\n+\treturn int64(st.Alloc)\n+}"}, {"sha": "c8dfa30dfbfc6912fb8eb39a6402d90f097a314a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15303.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15303.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15303.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15303.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Ensure that inlined struct/array comparisons have the right side-effects.\n+\n+package main\n+\n+import \"os\"\n+\n+func main() {\n+\tvar x int\n+\tf := func() (r [4]int) {\n+\t\tx++\n+\t\treturn\n+\t}\n+\t_ = f() == f()\n+\tif x != 2 {\n+\t\tprintln(\"f evaluated \", x, \" times, want 2\")\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "30fbf1379706515361b68919068c6d3b7a86e739", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15329.go", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15329.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15329.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15329.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,79 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Previously, cmd/compile would rewrite\n+//\n+//     check(unsafe.Pointer(testMeth(1).Pointer()), unsafe.Pointer(testMeth(2).Pointer()))\n+//\n+// to\n+//\n+//     var autotmp_1 uintptr = testMeth(1).Pointer()\n+//     var autotmp_2 uintptr = testMeth(2).Pointer()\n+//     check(unsafe.Pointer(autotmp_1), unsafe.Pointer(autotmp_2))\n+//\n+// However, that means autotmp_1 is the only reference to the int\n+// variable containing the value \"1\", but it's not a pointer type,\n+// so it was at risk of being garbage collected by the evaluation of\n+// testMeth(2).Pointer(), even though package unsafe's documentation\n+// says the original code was allowed.\n+//\n+// Now cmd/compile rewrites it to\n+//\n+//     var autotmp_1 unsafe.Pointer = unsafe.Pointer(testMeth(1).Pointer())\n+//     var autotmp_2 unsafe.Pointer = unsafe.Pointer(testMeth(2).Pointer())\n+//     check(autotmp_1, autotmp_2)\n+//\n+// to ensure the pointed-to variables are visible to the GC.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n+\n+func main() {\n+\t// Test all the different ways we can invoke reflect.Value.Pointer.\n+\n+\t// Direct method invocation.\n+\tcheck(unsafe.Pointer(testMeth(1).Pointer()), unsafe.Pointer(testMeth(2).Pointer()))\n+\n+\t// Invocation via method expression.\n+\tcheck(unsafe.Pointer(reflect.Value.Pointer(testMeth(1))), unsafe.Pointer(reflect.Value.Pointer(testMeth(2))))\n+\n+\t// Invocation via interface.\n+\tcheck(unsafe.Pointer(testInter(1).Pointer()), unsafe.Pointer(testInter(2).Pointer()))\n+\n+\t// Invocation via method value.\n+\tcheck(unsafe.Pointer(testFunc(1)()), unsafe.Pointer(testFunc(2)()))\n+}\n+\n+func check(p, q unsafe.Pointer) {\n+\ta, b := *(*int)(p), *(*int)(q)\n+\tif a != 1 || b != 2 {\n+\t\tfmt.Printf(\"got %v, %v; expected 1, 2\\n\", a, b)\n+\t}\n+}\n+\n+func testMeth(x int) reflect.Value {\n+\t// Force GC to run.\n+\truntime.GC()\n+\treturn reflect.ValueOf(&x)\n+}\n+\n+type Pointerer interface {\n+\tPointer() uintptr\n+}\n+\n+func testInter(x int) Pointerer {\n+\treturn testMeth(x)\n+}\n+\n+func testFunc(x int) func() uintptr {\n+\treturn testMeth(x).Pointer\n+}"}, {"sha": "840a3c02a8b43668cf8ae5a78e15bf72365c1f11", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15439.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15439.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15439.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15439.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"reflect\"\n+\n+func main() {\n+\ta := &struct{ x int }{}\n+\tb := &struct{ x int \"\" }{}\n+\n+\tta := reflect.TypeOf(a)\n+\ttb := reflect.TypeOf(b)\n+\n+\t// Ensure cmd/compile treats absent and empty tags as equivalent.\n+\ta = b\n+\n+\t// Ensure package reflect treats absent and empty tags as equivalent.\n+\tif !tb.AssignableTo(ta) {\n+\t\tpanic(\"fail\")\n+\t}\n+}"}, {"sha": "1fcf3ea6e010ca91edcf5c290f4e260753e277f4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15470.dir/a.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+package a\n+\n+import \"io\"\n+\n+type T interface {\n+\tM0(_ int)\n+\tM1(x, _ int) // _ (blank) caused crash\n+\tM2() (x, _ int)\n+}\n+\n+type S struct{}\n+\n+func (S) M0(_ int) {}\n+func (S) M1(x, _ int) {}\n+func (S) M2() (x, _ int) { return }\n+func (_ S) M3() {}\n+\n+// Snippet from x/tools/godoc/analysis/analysis.go.\n+// Offending code from #5470.\n+type Link interface {\n+\tStart() int\n+\tEnd() int\n+\tWrite(w io.Writer, _ int, start bool) // _ (blank) caused crash\n+}"}, {"sha": "863ee9f522196ab4075f074f2faa8bf64ff2462a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15470.dir/b.go", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,3 @@\n+package b\n+\n+import _ \"./a\" // must not fail"}, {"sha": "22b48fe257351361bc6df020a133cee0c4159c50", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15470.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15470.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 15470: Make sure special-case signatures can\n+// be exported and imported w/o problems.\n+\n+package ignored"}, {"sha": "663303b863fe8a579ba5e51d86d1acbad99f664e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15514.dir/a.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type A struct{ _ int32 }"}, {"sha": "f0750d3a443178addbe68e3085eebf25f2566dce", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15514.dir/b.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+func B() (_ struct{ _ int32 }) { return }"}, {"sha": "dc2ef5bed526db568bc7b151768c1f9f3f2ffbfe", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15514.dir/c.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.dir%2Fc.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package c\n+\n+import \"./a\"\n+import \"./b\"\n+\n+var _ a.A = b.B() // ERROR \"cannot use b\\.B|incompatible type\""}, {"sha": "626f7ad699e659c877c3dcdce051869b60c5161b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15514.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15514.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// errorcheckdir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "b1f9dfbb5cc8ac621165af48e04488e72a239cd8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15528.go", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15528.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15528.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15528.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,131 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"unsafe\"\n+)\n+\n+type RWS struct{}\n+\n+func (x *RWS) Read(p []byte) (n int, err error)                   { return }\n+func (x *RWS) Write(p []byte) (n int, err error)                  { return }\n+func (x *RWS) Seek(offset int64, whence int) (n int64, err error) { return }\n+func (x *RWS) String() string                                     { return \"rws\" }\n+\n+func makeRWS() io.ReadWriteSeeker { return &RWS{} }\n+func makeStringer() fmt.Stringer  { return &RWS{} }\n+\n+// Test correct construction of static empty interface values\n+var efaces = [...]struct {\n+\tx interface{}\n+\ts string\n+}{\n+\t{nil, \"<nil> <nil>\"},\n+\t{1, \"int 1\"},\n+\t{int(1), \"int 1\"},\n+\t{Int(int(2)), \"main.Int Int=2\"},\n+\t{int(Int(3)), \"int 3\"},\n+\t{[1]int{2}, \"[1]int [2]\"},\n+\t{io.Reader(io.ReadWriter(io.ReadWriteSeeker(nil))), \"<nil> <nil>\"},\n+\t{io.Reader(io.ReadWriter(io.ReadWriteSeeker(&RWS{}))), \"*main.RWS rws\"},\n+\t{makeRWS(), \"*main.RWS rws\"},\n+\t{map[string]string{\"here\": \"there\"}, \"map[string]string map[here:there]\"},\n+\t{chan bool(nil), \"chan bool <nil>\"},\n+\t{unsafe.Pointer(uintptr(0)), \"unsafe.Pointer <nil>\"},\n+\t{(*byte)(nil), \"*uint8 <nil>\"},\n+\t{io.Writer((*os.File)(nil)), \"*os.File <nil>\"},\n+\t{(interface{})(io.Writer((*os.File)(nil))), \"*os.File <nil>\"},\n+\t{fmt.Stringer(Strunger(((*Int)(nil)))), \"*main.Int <nil>\"},\n+}\n+\n+type Int int\n+\n+func (i Int) String() string { return fmt.Sprintf(\"Int=%d\", i) }\n+func (i Int) Strung()        {}\n+\n+type Strunger interface {\n+\tfmt.Stringer\n+\tStrung()\n+}\n+\n+// Test correct construction of static non-empty interface values\n+var ifaces = [...]struct {\n+\tx fmt.Stringer\n+\ts string\n+}{\n+\t{nil, \"<nil> <nil> %!s(<nil>)\"},\n+\t{Int(3), \"main.Int 3 Int=3\"},\n+\t{Int(int(Int(4))), \"main.Int 4 Int=4\"},\n+\t{Strunger(Int(5)), \"main.Int 5 Int=5\"},\n+\t{makeStringer(), \"*main.RWS &main.RWS{} rws\"},\n+\t{fmt.Stringer(nil), \"<nil> <nil> %!s(<nil>)\"},\n+\t{(*RWS)(nil), \"*main.RWS (*main.RWS)(nil) rws\"},\n+}\n+\n+// Test correct handling of direct interface values\n+var (\n+\tone  int         = 1\n+\tiptr interface{} = &one\n+\tclos int\n+\tf    interface{} = func() { clos++ }\n+\tdeep interface{} = [1]struct{ a *[2]byte }{{a: &[2]byte{'z', 'w'}}}\n+\tch   interface{} = make(chan bool, 1)\n+)\n+\n+func main() {\n+\tvar fail bool\n+\tfor i, test := range efaces {\n+\t\ts := fmt.Sprintf(\"%[1]T %[1]v\", test.x)\n+\t\tif s != test.s {\n+\t\t\tfmt.Printf(\"eface(%d)=%q want %q\\n\", i, s, test.s)\n+\t\t\tfail = true\n+\t\t}\n+\t}\n+\n+\tfor i, test := range ifaces {\n+\t\ts := fmt.Sprintf(\"%[1]T %#[1]v %[1]s\", test.x)\n+\t\tif s != test.s {\n+\t\t\tfmt.Printf(\"iface(%d)=%q want %q\\n\", i, s, test.s)\n+\t\t\tfail = true\n+\t\t}\n+\t}\n+\n+\tif got := *(iptr.(*int)); got != 1 {\n+\t\tfmt.Printf(\"bad int ptr %d\\n\", got)\n+\t\tfail = true\n+\t}\n+\n+\tf.(func())()\n+\tf.(func())()\n+\tf.(func())()\n+\tif clos != 3 {\n+\t\tfmt.Printf(\"bad closure exec %d\\n\", clos)\n+\t\tfail = true\n+\t}\n+\n+\tif !reflect.DeepEqual(*(deep.([1]struct{ a *[2]byte })[0].a), [2]byte{'z', 'w'}) {\n+\t\tfmt.Printf(\"bad deep directiface\\n\")\n+\t\tfail = true\n+\t}\n+\n+\tcc := ch.(chan bool)\n+\tcc <- true\n+\tif got := <-cc; !got {\n+\t\tfmt.Printf(\"bad chan\\n\")\n+\t\tfail = true\n+\t}\n+\n+\tif fail {\n+\t\tfmt.Println(\"BUG\")\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "3c593fc0f6a4c8da4fa457503fa14f3691f8b662", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15548.dir/a.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type I0 interface {\n+\tI1\n+}\n+\n+type T struct {\n+\tI1\n+}\n+\n+type I1 interface {\n+\tM(*T) // removing * makes crash go away\n+}"}, {"sha": "b46f5adfddbd07848ecade50b14f45e36130c491", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15548.dir/b.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+var X a.T"}, {"sha": "6d3f3be53ec2a465c95096d0692c1df7ccf5724b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15548.dir/c.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.dir%2Fc.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package c\n+\n+import (\n+\t_ \"./b\"\n+\t_ \"./a\"\n+)"}, {"sha": "4d2844dbb9332d3fac2f634e7e996c375d105648", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15548.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15548.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "f2853fc48b5ce2d18e1acaa045d3c7beb41f06f0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15550.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15550.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15550.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15550.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+const (\n+\t_ = unsafe.Sizeof(func() int {\n+\t\tconst (\n+\t\t\t_ = 1\n+\t\t\t_\n+\t\t\t_\n+\t\t)\n+\t\treturn 0\n+\t}())\n+\n+\ty = iota\n+)\n+\n+func main() {\n+\tif y != 1 {\n+\t\tpanic(y)\n+\t}\n+}"}, {"sha": "1356601430471444af540e3220ddd90f7365355a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15572.dir/a.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type T struct {\n+}\n+\n+func F() []T {\n+\treturn []T{T{}}\n+}\n+\n+func Fi() []T {\n+\treturn []T{{}} // element with implicit composite literal type\n+}\n+\n+func Fp() []*T {\n+\treturn []*T{&T{}}\n+}\n+\n+func Fip() []*T {\n+\treturn []*T{{}} // element with implicit composite literal type\n+}\n+\n+func Gp() map[int]*T {\n+\treturn map[int]*T{0: &T{}}\n+}\n+\n+func Gip() map[int]*T {\n+\treturn map[int]*T{0: {}} // element with implicit composite literal type\n+}\n+\n+func Hp() map[*T]int {\n+\treturn map[*T]int{&T{}: 0}\n+}\n+\n+func Hip() map[*T]int {\n+\treturn map[*T]int{{}: 0} // key with implicit composite literal type\n+}"}, {"sha": "355accc88057bd3719659339be6a281d45cd620b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15572.dir/b.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func F() {\n+\ta.F()\n+\ta.Fi()\n+}\n+\n+func Fp() {\n+\ta.Fp()\n+\ta.Fip()\n+}\n+\n+func Gp() {\n+\ta.Gp()\n+\ta.Gip()\n+}\n+\n+func Hp() {\n+\ta.Hp()\n+\ta.Hip()\n+}"}, {"sha": "cf77778f6640fff699dd4474ea6772d672ce9685", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15572.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15572.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that exporting composite literals with implicit\n+// types doesn't crash the typechecker when running over\n+// inlined function bodies containing such literals.\n+\n+package ignored"}, {"sha": "79eb13f90db45f4315f57433516a1bea82a73080", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15585.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15585.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15585.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15585.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,45 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bug\n+\n+func example(n int) (rc int) {\n+\tvar cc, ll, pp, rr [27]int\n+\tfor q0 := 0; q0 < n-2; q0++ {\n+\t\tfor q1 := q0 + 2; q1 < n; q1++ {\n+\t\t\tvar c, d, l, p, r int\n+\t\t\tb0 := 1 << uint(q0)\n+\t\t\tb1 := 1 << uint(q1)\n+\t\t\tl = ((b0 << 1) | b1) << 1\n+\t\t\tc = b0 | b1 | (-1 << uint(n))\n+\t\t\tr = ((b0 >> 1) | b1) >> 1\n+\t\tE:\n+\t\t\tif c != -1 {\n+\t\t\t\tp = ^(l | c | r)\n+\t\t\t} else {\n+\t\t\t\trc++\n+\t\t\t\tgoto R\n+\t\t\t}\n+\t\tL:\n+\t\t\tif p != 0 {\n+\t\t\t\tlsb := p & -p\n+\t\t\t\tp &^= lsb\n+\t\t\t\tll[d], cc[d], rr[d], pp[d] = l, c, r, p\n+\t\t\t\tl, c, r = (l|lsb)<<1, c|lsb, (r|lsb)>>1\n+\t\t\t\td++\n+\t\t\t\tgoto E\n+\t\t\t}\n+\t\tR:\n+\t\t\td--\n+\t\t\tif d >= 0 {\n+\t\t\t\tl, c, r, p = ll[d], cc[d], rr[d], pp[d]\n+\t\t\t\tgoto L\n+\t\t\t}\n+\t\t}\n+\t}\n+\trc <<= 1\n+\treturn\n+}"}, {"sha": "badf8133c5217623af4d0a179ad8f7bd72c09d4a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15602.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15602.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15602.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15602.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(i interface{}) {\n+\ti, _ = i.(error)\n+}"}, {"sha": "4dc0b0b0541308650a6b03098ab329bf4d58e98f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15604.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15604.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15604.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15604.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bug\n+\n+import \"os\"\n+\n+func f(err error) {\n+\tvar ok bool\n+\tif err, ok = err.(*os.PathError); ok {\n+\t\tif err == os.ErrNotExist {\n+\t\t}\n+\t}\n+}"}, {"sha": "41a489cebd44cd9457cd00a3f21c2ea24c7a5b79", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15609.dir/call.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// +build !amd64,!386\n+\n+package main\n+\n+func jump() {\n+\ttarget()\n+}"}, {"sha": "751084c485ba99aa41d43e69bfa7895fe33dcaec", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15609.dir/call_386.s", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_386.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_386.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_386.s?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,8 @@\n+#include \"textflag.h\"\n+\n+DATA \u00b7pointer(SB)/4, $\u00b7target(SB)\n+GLOBL \u00b7pointer(SB),RODATA,$4\n+\n+TEXT \u00b7jump(SB),NOSPLIT,$4\n+        CALL *\u00b7pointer(SB)\n+        RET"}, {"sha": "09fbe5dfc4abda7b480fcfd801ce8b105c9ce8cd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15609.dir/call_amd64.s", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_amd64.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_amd64.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_amd64.s?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,8 @@\n+#include \"textflag.h\"\n+\n+DATA \u00b7pointer(SB)/8, $\u00b7target(SB)\n+GLOBL \u00b7pointer(SB),RODATA,$8\n+\n+TEXT \u00b7jump(SB),NOSPLIT,$8\n+        CALL *\u00b7pointer(SB)\n+        RET"}, {"sha": "d9c5a4e9f0f7958e6cf9181e905a33dcb1f7c6f0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15609.dir/call_decl.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fcall_decl.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,5 @@\n+// +build amd64 386\n+\n+package main\n+\n+func jump()"}, {"sha": "4855e31e5ed8f2d4255a5802c4b934e847aca15a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15609.dir/main.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15609.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+package main\n+\n+var called bool\n+\n+func target() {\n+\tcalled = true\n+}\n+\n+func main() {\n+\tjump()\n+\tif !called {\n+\t\tpanic(\"target not called\")\n+\t}\n+}"}, {"sha": "842f19685fd282c91976dc84875dc726a58d4fc0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15646.dir/a.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type T struct{}\n+\n+func (T) m() string {\n+\treturn \"m\"\n+}\n+\n+func (*T) mp() string {\n+\treturn \"mp\"\n+}\n+\n+func F() func(T) string {\n+\treturn T.m // method expression\n+}\n+\n+func Fp() func(*T) string {\n+\treturn (*T).mp // method expression\n+}"}, {"sha": "3d011ba30195b8ea7c0d6546108e7465946f3ee7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15646.dir/b.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\" // import must succeed\n+\n+func main() {\n+\tif a.F()(a.T{}) != \"m\" {\n+\t\tpanic(0)\n+\t}\n+\tif a.Fp()(nil) != \"mp\" {\n+\t\tpanic(1)\n+\t}\n+}"}, {"sha": "cd4ba9d4e520350374a655e959856ef457736368", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15646.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15646.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// rundir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that method expressions are correctly encoded\n+// in binary export data and can be imported again.\n+package ignore\n\\ No newline at end of file"}, {"sha": "dec54587f6b69b592e13f8fea638ea51e3ade9d4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15722.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15722.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15722.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15722.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Checks to make sure that the compiler can catch a specific invalid\n+// method type expression. NB: gccgo and gc have slightly different\n+// error messages, hence the generic test for 'method' and not something\n+// more specific.\n+\n+package issue15722\n+\n+type T int\n+type P *T\n+\n+func (T) t() {}\n+\n+func _(p P) {\n+\tP.t(p) // ERROR \"method\"\n+}"}, {"sha": "8f609e634dd8179d53afc3ead85195e025d1a10d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15733.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15733.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15733.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15733.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,23 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type S struct {\n+\ta [1 << 16]byte\n+}\n+\n+func f1() {\n+\tp := &S{}\n+\t_ = p\n+}\n+\n+type T [1 << 16]byte\n+\n+func f2() {\n+\tp := &T{}\n+\t_ = p\n+}"}, {"sha": "15b7f1dcfa8230a9e30e8b0f5996c94fcec31750", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15838.dir/a.go", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+func F1() {\n+L:\n+\tgoto L\n+}\n+\n+func F2() {\n+L:\n+\tfor {\n+\t\tbreak L\n+\t}\n+}\n+\n+func F3() {\n+L:\n+\tfor {\n+\t\tcontinue L\n+\t}\n+}\n+\n+func F4() {\n+\tswitch {\n+\tcase true:\n+\t\tfallthrough\n+\tdefault:\n+\t}\n+}\n+\n+type T struct{}\n+\n+func (T) M1() {\n+L:\n+\tgoto L\n+}\n+\n+func (T) M2() {\n+L:\n+\tfor {\n+\t\tbreak L\n+\t}\n+}\n+\n+func (T) M3() {\n+L:\n+\tfor {\n+\t\tcontinue L\n+\t}\n+}\n+\n+func (T) M4() {\n+\tswitch {\n+\tcase true:\n+\t\tfallthrough\n+\tdefault:\n+\t}\n+}"}, {"sha": "9fd6efc33c9b8958576cdaa08961f55f3df3a087", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15838.dir/b.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+type T struct{ a.T }"}, {"sha": "fb1c64d1ac19dc6a6779cd2b7ad9d43856a01352", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15838.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15838.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test cases for issue #15838, and related failures.\n+// Make sure the importer correctly sets up nodes for\n+// label decls, goto, continue, break, and fallthrough\n+// statements.\n+\n+package ignored"}, {"sha": "3ef295c03ea5fde933dfe4a53521948c62b2500a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15895.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15895.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15895.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15895.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// func bad used to fail to compile.\n+\n+package p\n+\n+type A [1]int\n+\n+func bad(x A) {\n+\tswitch x {\n+\tcase A([1]int{1}):\n+\tcase A([1]int{1}):\n+\t}\n+}\n+\n+func good(x A) {\n+\ty := A([1]int{1})\n+\tz := A([1]int{1})\n+\tswitch x {\n+\tcase y:\n+\tcase z:\n+\t}\n+}"}, {"sha": "94369f93450f29b46d36da42b8adf53f4fe557c6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15898.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15898.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15898.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15898.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(e interface{}) {\n+\tswitch e.(type) {\n+\tcase nil, nil: // ERROR \"multiple nil cases in type switch|duplicate type in switch\"\n+\t}\n+\n+\tswitch e.(type) {\n+\tcase nil:\n+\tcase nil: // ERROR \"multiple nil cases in type switch|duplicate type in switch\"\n+\t}\n+}"}, {"sha": "9511a220edbd43c7ffb8b2e9c5c5b4ceaadd2935", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15902.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15902.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15902.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15902.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test makes sure we don't use 4-byte unaligned writes\n+// to zero memory on architectures that don't support them.\n+\n+package main\n+\n+type T struct {\n+\ta byte\n+\tb [10]byte\n+}\n+\n+//go:noinline\n+func f(t *T) {\n+\t// t will be aligned, so &t.b won't be.\n+\tt.b = [10]byte{}\n+}\n+\n+var t T\n+\n+func main() {\n+\tf(&t)\n+}"}, {"sha": "15f92355f730ff6035950c9db32dac0a9d561310", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15920.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Error error\n+\n+func F() Error { return nil }"}, {"sha": "0a36c5c6ab80415c038d8e5cf25c03ef687d6da6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15920.dir/b.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import _ \"./a\""}, {"sha": "4d2844dbb9332d3fac2f634e7e996c375d105648", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15920.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15920.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "76e25eb640a478888f40ceabcb4a444e33b9ef25", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15926.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15926.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15926.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15926.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// build\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 15926: linker was adding .def to the end of symbols, causing\n+// a name collision with a method actually named def.\n+\n+package main\n+\n+type S struct{}\n+\n+func (s S) def() {}\n+\n+var I = S.def\n+\n+func main() {\n+    I(S{})\n+}"}, {"sha": "db3d662378072e7c0b1cc8ad0b393c5148ae3300", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15961.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15961.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15961.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15961.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package y\n+\n+type symSet []int\n+\n+//go:noinline\n+func (s symSet) len() (r int) {\n+\treturn 0\n+}\n+\n+func f(m map[int]symSet) {\n+\tvar symSet []int\n+\tfor _, x := range symSet {\n+\t\tm[x] = nil\n+\t}\n+}"}, {"sha": "2bed2a9c305e3fdc40ce4d7283ecd3a7c47966ad", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15988.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15988.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15988.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15988.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f(p, q []int) {\n+\tp = append(q, 5)\n+\tsink = &p\n+}\n+\n+var sink *[]int"}, {"sha": "cda5527c67edae1dfce778ea777fac26f8ec1efb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15992.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,38 @@\n+// run\n+\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+func f(a []byte) ([]byte, []byte) {\n+\treturn a, []byte(\"abc\")\n+}\n+\n+func g(a []byte) ([]byte, string) {\n+\treturn a, \"abc\"\n+}\n+\n+func h(m map[int]int) (map[int]int, int) {\n+\treturn m, 0\n+}\n+\n+func main() {\n+\ta := []byte{1, 2, 3}\n+\tn := copy(f(a))\n+\tfmt.Println(n, a)\n+\n+\tb := []byte{1, 2, 3}\n+\tn = copy(g(b))\n+\tfmt.Println(n, b)\n+\n+\tm := map[int]int{0: 0}\n+\tfmt.Println(len(m))\n+\tdelete(h(m))\n+\tfmt.Println(len(m))\n+}"}, {"sha": "e0011e3edb9917f4eb07e561aec18b4172fd73df", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue15992.out", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue15992.out?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,4 @@\n+3 [97 98 99]\n+3 [97 98 99]\n+1\n+0"}, {"sha": "e738e1dba0e99881486f27c10155c7c99d46a7bb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16016.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16016.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16016.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16016.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,35 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"time\"\n+\n+type T struct{}\n+\n+func (*T) Foo(vals []interface{}) {\n+\tswitch v := vals[0].(type) {\n+\tcase string:\n+\t\t_ = v\n+\t}\n+}\n+\n+type R struct{ *T }\n+\n+type Q interface {\n+\tFoo([]interface{})\n+}\n+\n+func main() {\n+\tvar q Q = &R{&T{}}\n+\tfor i := 0; i < 10000; i++ {\n+\t\tgo func() {\n+\t\t\tdefer q.Foo([]interface{}{\"meow\"})\n+\t\t\ttime.Sleep(100 * time.Millisecond)\n+\t\t}()\n+\t}\n+\ttime.Sleep(1 * time.Second)\n+}"}, {"sha": "d05e3f7f3143cf2ec005ecff2b8fac20c6e44d91", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16037_run.go", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16037_run.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16037_run.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16037_run.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,70 @@\n+// +build !nacl,!js,!android\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"html/template\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+)\n+\n+var tmpl = template.Must(template.New(\"main\").Parse(`\n+package main\n+\n+type T struct {\n+    {{range .Names}}\n+\t{{.Name}} *string\n+\t{{end}}\n+}\n+\n+{{range .Names}}\n+func (t *T) Get{{.Name}}() string {\n+\tif t.{{.Name}} == nil {\n+\t\treturn \"\"\n+\t}\n+\treturn *t.{{.Name}}\n+}\n+{{end}}\n+\n+func main() {}\n+`))\n+\n+func main() {\n+\tconst n = 5000\n+\n+\ttype Name struct{ Name string }\n+\tvar t struct{ Names []Name }\n+\tfor i := 0; i < n; i++ {\n+\t\tt.Names = append(t.Names, Name{Name: fmt.Sprintf(\"H%06X\", i)})\n+\t}\n+\n+\tbuf := new(bytes.Buffer)\n+\tif err := tmpl.Execute(buf, t); err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tdir, err := ioutil.TempDir(\"\", \"issue16037-\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\tpath := filepath.Join(dir, \"ridiculous_number_of_fields.go\")\n+\tif err := ioutil.WriteFile(path, buf.Bytes(), 0664); err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tout, err := exec.Command(\"go\", \"build\", \"-o=\"+filepath.Join(dir, \"out\"), path).CombinedOutput()\n+\tif err != nil {\n+\t\tlog.Fatalf(\"build failed: %v\\n%s\", err, out)\n+\t}\n+}"}, {"sha": "864b4b7c7cfcb29e182f2432c2edfa8d3d213b8a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16095.go", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16095.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16095.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16095.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,104 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+var sink *[20]byte\n+\n+func f() (x [20]byte) {\n+\t// Initialize x.\n+\tfor i := range x {\n+\t\tx[i] = byte(i)\n+\t}\n+\n+\t// Force x to be allocated on the heap.\n+\tsink = &x\n+\tsink = nil\n+\n+\t// Go to deferreturn after the panic below.\n+\tdefer func() {\n+\t\trecover()\n+\t}()\n+\n+\t// This call collects the heap-allocated version of x (oops!)\n+\truntime.GC()\n+\n+\t// Allocate that same object again and clobber it.\n+\ty := new([20]byte)\n+\tfor i := 0; i < 20; i++ {\n+\t\ty[i] = 99\n+\t}\n+\t// Make sure y is heap allocated.\n+\tsink = y\n+\n+\tpanic(nil)\n+\n+\t// After the recover we reach the deferreturn, which\n+\t// copies the heap version of x back to the stack.\n+\t// It gets the pointer to x from a stack slot that was\n+\t// not marked as live during the call to runtime.GC().\n+}\n+\n+var sinkint int\n+\n+func g(p *int) (x [20]byte) {\n+\t// Initialize x.\n+\tfor i := range x {\n+\t\tx[i] = byte(i)\n+\t}\n+\n+\t// Force x to be allocated on the heap.\n+\tsink = &x\n+\tsink = nil\n+\n+\t// Go to deferreturn after the panic below.\n+\tdefer func() {\n+\t\trecover()\n+\t}()\n+\n+\t// This call collects the heap-allocated version of x (oops!)\n+\truntime.GC()\n+\n+\t// Allocate that same object again and clobber it.\n+\ty := new([20]byte)\n+\tfor i := 0; i < 20; i++ {\n+\t\ty[i] = 99\n+\t}\n+\t// Make sure y is heap allocated.\n+\tsink = y\n+\n+\t// panic with a non-call (with no fallthrough)\n+\tfor {\n+\t\tsinkint = *p\n+\t}\n+\n+\t// After the recover we reach the deferreturn, which\n+\t// copies the heap version of x back to the stack.\n+\t// It gets the pointer to x from a stack slot that was\n+\t// not marked as live during the call to runtime.GC().\n+}\n+\n+func main() {\n+\tx := f()\n+\tfor i, v := range x {\n+\t\tif v != byte(i) {\n+\t\t\tfmt.Printf(\"%v\\n\", x)\n+\t\t\tpanic(\"bad f\")\n+\t\t}\n+\t}\n+\tx = g(nil)\n+\tfor i, v := range x {\n+\t\tif v != byte(i) {\n+\t\t\tfmt.Printf(\"%v\\n\", x)\n+\t\t\tpanic(\"bad g\")\n+\t\t}\n+\t}\n+}"}, {"sha": "c4e3ffd33db9fa15353b60eb65b0197574ed0391", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16130.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16130.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16130.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16130.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,43 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that an interface conversion error panics with an \"interface\n+// conversion\" run-time error. It was (incorrectly) panicking with a\n+// \"nil pointer dereference.\"\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+type I interface {\n+\tGet() int\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\tr := recover()\n+\t\tif r == nil {\n+\t\t\tpanic(\"expected panic\")\n+\t\t}\n+\t\tre, ok := r.(runtime.Error)\n+\t\tif !ok {\n+\t\t\tpanic(fmt.Sprintf(\"got %T, expected runtime.Error\", r))\n+\t\t}\n+\t\tif !strings.Contains(re.Error(), \"interface conversion\") {\n+\t\t\tpanic(fmt.Sprintf(\"got %q, expected interface conversion error\", re.Error()))\n+\t\t}\n+\t}()\n+\te := (interface{})(0)\n+\tif _, ok := e.(I); ok {\n+\t\tpanic(\"unexpected interface conversion success\")\n+\t}\n+\tfmt.Println(e.(I))\n+\tpanic(\"unexpected interface conversion success\")\n+}"}, {"sha": "497cccf3633f957192c07ae58e63792754bc31d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16133.dir/a1.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa1.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+package a\n+\n+type X string\n+\n+func NewX() X {\n+\treturn \"\"\n+}"}, {"sha": "497cccf3633f957192c07ae58e63792754bc31d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16133.dir/a2.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fa2.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+package a\n+\n+type X string\n+\n+func NewX() X {\n+\treturn \"\"\n+}"}, {"sha": "be1bebf889e22ca6f78f7e068f37e9c19c5eb621", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16133.dir/b.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+package b\n+\n+import \"./a2\"\n+\n+type T struct {\n+\tX a.X\n+}"}, {"sha": "b25fe5a9ddb52058e70da3e07217d98ec4bf85b0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16133.dir/c.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16133.dir%2Fc.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+package p\n+\n+import (\n+\t\"./a1\"\n+\t\"./b\"\n+)\n+\n+var _ = b.T{\n+\tX: a.NewX(), // ERROR `cannot use \"a1\"\\.NewX\\(\\)`\n+}"}, {"sha": "eada62de9ae33b0e802d95176ef1db12250d653a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16193.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16193.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16193.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16193.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The compiler used the name \"glob\" as the function holding a global\n+// function literal, colliding with an actual function named \"glob\".\n+\n+package main\n+\n+func glob() {\n+\tfunc() {\n+\t}()\n+}\n+\n+var c1 = func() {\n+}\n+\n+var c2 = func() {\n+}\n+\n+func main() {\n+\tglob()\n+\tc1()\n+\tc2()\n+}"}, {"sha": "723d5d9fa6cf6bec6467e52adec049722d1d58bb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16249.go", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16249.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16249.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16249.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,58 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Liveness calculations were wrong for a result parameter pushed onto\n+// the heap in a function that used defer.  Program would crash with\n+//     runtime: bad pointer in frame main.A at 0xc4201e6838: 0x1\n+\n+package main\n+\n+import \"errors\"\n+\n+var sink interface{}\n+\n+//go:noinline\n+func f(err *error) {\n+\tif err != nil {\n+\t\tsink = err\n+\t}\n+}\n+\n+//go:noinline\n+func A(n, m int64) (res int64, err error) {\n+\tdefer f(&err) // output parameter's address escapes to a defer.\n+\tif n < 0 {\n+\t\terr = errors.New(\"No negative\")\n+\t\treturn\n+\t}\n+\tif n <= 1 {\n+\t\tres = n\n+\t\treturn\n+\t}\n+\tres = B(m) // This call to B drizzles a little junk on the stack.\n+\tres, err = A(n-1, m)\n+\tres++\n+\treturn\n+}\n+\n+// B does a little bit of recursion dribbling not-zero onto the stack.\n+//go:noinline\n+func B(n int64) (res int64) {\n+\tif n <= 1 { // Prefer to leave a 1 on the stack.\n+\t\treturn n\n+\t}\n+\treturn 1 + B(n-1)\n+}\n+\n+func main() {\n+\tx, e := A(0, 0)\n+\tfor j := 0; j < 4; j++ { // j controls amount of B's stack dribble\n+\t\tfor i := 0; i < 1000; i++ { // try more and more recursion until stack growth occurs in newobject in prologue\n+\t\t\tx, e = A(int64(i), int64(j))\n+\t\t}\n+\t}\n+\t_, _ = x, e\n+}"}, {"sha": "d29a75a6044f7d6f3d080dd1933c9d43a6a97cc2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16306.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16306.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16306.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16306.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+var x = unsafe.Pointer(uintptr(0))\n+\n+func main() {\n+\t_ = map[unsafe.Pointer]int{unsafe.Pointer(uintptr(0)): 0}\n+}"}, {"sha": "3a1b7e021d395d74791f00f066b262eff80fb42a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16317.dir/a.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+import \"unsafe\"\n+\n+func ConstUnsafePointer() unsafe.Pointer {\n+\treturn unsafe.Pointer(uintptr(0))\n+}"}, {"sha": "b81391866b254bb799deccc847d78193b3e733e1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16317.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\t_ = a.ConstUnsafePointer()\n+}"}, {"sha": "b3376bbbd7e27609d5899c59ca903bfef7ea2a44", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16317.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16317.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 16317: cmd/compile: internal compiler error:\n+//              unhandled OCONV INT -> TUNSAFEPTR\n+\n+package ignored"}, {"sha": "665e7fc0fd62e127a40e91cf1e9c54e1cbb94e41", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16331.go", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16331.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16331.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16331.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,48 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Perform tracebackdefers with a deferred reflection method.\n+\n+package main\n+\n+import \"reflect\"\n+\n+type T struct{}\n+\n+func (T) M() {\n+}\n+\n+func F(args []reflect.Value) (results []reflect.Value) {\n+\treturn nil\n+}\n+\n+func main() {\n+\tdone := make(chan bool)\n+\tgo func() {\n+\t\t// Test reflect.makeFuncStub.\n+\t\tt := reflect.TypeOf((func())(nil))\n+\t\tf := reflect.MakeFunc(t, F).Interface().(func())\n+\t\tdefer f()\n+\t\tgrowstack(10000)\n+\t\tdone <- true\n+\t}()\n+\t<-done\n+\tgo func() {\n+\t\t// Test reflect.methodValueCall.\n+\t\tf := reflect.ValueOf(T{}).Method(0).Interface().(func())\n+\t\tdefer f()\n+\t\tgrowstack(10000)\n+\t\tdone <- true\n+\t}()\n+\t<-done\n+}\n+\n+func growstack(x int) {\n+\tif x == 0 {\n+\t\treturn\n+\t}\n+\tgrowstack(x - 1)\n+}"}, {"sha": "e97f4a0e110736d25d83e34ffaf1c046e745a78d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16369.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16369.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16369.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16369.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T interface {\n+\tM(interface {\n+\t\tT\n+\t})\n+}"}, {"sha": "5696d186c77d081391294b2fa8ffce2d1a313505", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16428.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16428.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16428.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16428.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var (\n+\tb = [...]byte(\"abc\") // ERROR \"outside of array literal\"\n+\ts = len(b)\n+)"}, {"sha": "704b6b15a61aac9b2f984a034ef37bf21391bd29", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16439.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16439.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16439.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16439.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var a []int = []int{1: 1}\n+var b []int = []int{-1: 1} // ERROR \"must be non-negative integer constant|index expression is negative\"\n+\n+var c []int = []int{2.0: 2}\n+var d []int = []int{-2.0: 2} // ERROR \"must be non-negative integer constant|index expression is negative\"\n+\n+var e []int = []int{3 + 0i: 3}\n+var f []int = []int{3i: 3} // ERROR \"truncated to integer|index expression is not integer constant\"\n+\n+var g []int = []int{\"a\": 4} // ERROR \"must be non-negative integer constant|index expression is not integer constant\""}, {"sha": "6b674363838328656103e240d6412b13aa8f97d3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16515.go", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16515.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16515.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16515.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,53 @@\n+// run\n+\n+// Copyright 2016 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 16515: spilled Duff-adjusted address may be invalid\n+\n+package main\n+\n+import \"runtime\"\n+\n+type T [62]int // DUFFZERO with non-zero adjustment on AMD64\n+\n+var sink interface{}\n+\n+//go:noinline\n+func zero(x *T) {\n+\t// Two DUFFZEROs on the same address with a function call in between.\n+\t// Duff-adjusted address will be spilled and loaded\n+\n+\t*x = T{} // DUFFZERO\n+\truntime.GC()\n+\t(*x)[0] = 1\n+\tg()      // call a function with large frame, trigger a stack move\n+\t*x = T{} // DUFFZERO again\n+}\n+\n+//go:noinline\n+// a function with large frame\n+func g() {\n+\tvar x [1000]int\n+\t_ = x\n+}\n+\n+func main() {\n+\tvar s struct { a T; b [8192-62]int } // allocate 64K, hopefully it's in a new span and a few bytes before it is garbage\n+\tsink = &s // force heap allocation\n+\ts.a[0] = 2\n+\tzero(&s.a)\n+\tif s.a[0] != 0 {\n+\t\tprintln(\"s.a[0] =\", s.a[0])\n+\t\tpanic(\"zeroing failed\")\n+\t}\n+\n+\tvar a T // on stack\n+\ta[0] = 2\n+\tzero(&a)\n+\tif a[0] != 0 {\n+\t\tprintln(\"a[0] =\", a[0])\n+\t\tpanic(\"zeroing failed\")\n+\t}\n+}"}, {"sha": "0ffdbbe2681a7b058c69a4db326e19f8821cc7dd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16616.dir/a.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type V struct{ i int }"}, {"sha": "4f238b9a25838572ec7c03a9afc10805a706f30c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16616.dir/b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+var V struct{ i int }\n+\n+var U struct {\n+\ta.V\n+\tj int\n+}"}, {"sha": "0bfadb8c7459ca3615d8d079a73f9748d2b93934", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16616.dir/issue16616.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fissue16616.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fissue16616.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.dir%2Fissue16616.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\n+\t_ \"./a\"\n+\t\"./b\"\n+)\n+\n+var V struct{ i int }\n+\n+func main() {\n+\tif got := reflect.ValueOf(b.V).Type().Field(0).PkgPath; got != \"b\" {\n+\t\tpanic(`PkgPath=` + got + ` for first field of b.V, want \"b\"`)\n+\t}\n+\tif got := reflect.ValueOf(V).Type().Field(0).PkgPath; got != \"main\" {\n+\t\tpanic(`PkgPath=` + got + ` for first field of V, want \"main\"`)\n+\t}\n+\tif got := reflect.ValueOf(b.U).Type().Field(0).PkgPath; got != \"b\" {\n+\t\tpanic(`PkgPath=` + got + ` for first field of b.U, want \"b\"`)\n+\t}\n+}"}, {"sha": "a7d6ac095e54d72c80f2b841589f08c96fc75966", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16616.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16616.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Tests that unexported fields of unnamed types have different PkgPath values.\n+\n+package ignored"}, {"sha": "850b042b621360254d6f52c71ae3b7fe06c9df42", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16733.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16733.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16733.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16733.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 16733: don't fold constant factors into a multiply\n+// beyond the capacity of a MULQ instruction (32 bits).\n+\n+package p\n+\n+func f(n int64) int64 {\n+\tn *= 1000000\n+\tn *= 1000000\n+\treturn n\n+}"}, {"sha": "9946062df77c8db8966ab3e3fda4362b5d1aec91", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16741.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16741.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16741.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16741.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure CSE of multi-output opcodes works correctly\n+// with select0/1 operations.\n+\n+package main\n+\n+func div(d, r int64) int64 {\n+\tif m := d % r; m > 0 {\n+\t\treturn d/r + 1\n+\t}\n+\treturn d / r\n+}"}, {"sha": "d0e08b5ead2c458885619245d3d1eba466c760a3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16760.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16760.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16760.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16760.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,42 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we don't start marshaling (writing to the stack)\n+// arguments until those arguments are evaluated and known\n+// not to unconditinally panic. If they unconditionally panic,\n+// we write some args but never do the call. That messes up\n+// the logic which decides how big the argout section needs to be.\n+\n+package main\n+\n+type W interface {\n+\tWrite([]byte)\n+}\n+\n+type F func(W)\n+\n+func foo(f F) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\tusestack(1000)\n+\t\t}\n+\t}()\n+\tf(nil)\n+}\n+\n+func main() {\n+\tfoo(func(w W) {\n+\t\tvar x []string\n+\t\tw.Write([]byte(x[5]))\n+\t})\n+}\n+\n+func usestack(n int) {\n+\tif n == 0 {\n+\t\treturn\n+\t}\n+\tusestack(n - 1)\n+}"}, {"sha": "46dd4a33ccbf8109685dbf6925764f566f836681", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16804.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16804.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16804.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16804.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 16804: internal error for math.Sqrt as statement\n+//              rather than expression\n+\n+package main\n+\n+import \"math\"\n+\n+func sqrt() {\n+\tmath.Sqrt(2.0)\n+}"}, {"sha": "c98602489614bd5a18ea83fcee76d6f48a4d1e08", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16948.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16948.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16948.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16948.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 16948: make sure intrinsified atomic ops won't\n+// confuse the scheduler.\n+\n+package main\n+\n+import \"sync/atomic\"\n+\n+func main() {\n+\tf()\n+}\n+\n+var x int32\n+\n+type T [10]int\n+var sink *T\n+\n+func f() (t T) {\n+\tatomic.AddInt32(&x, 1)\n+\tg(42, 42, 42, 42, 42, &t) // use int values that is invalid pointer to smash the stack slot of return value of runtime.newobject\n+\treturn\n+}\n+\n+//go:noinline\n+func g(a, b, c, d, e int, p *T) {\n+\tvar t [10000]int // a large stack frame to trigger stack growing\n+\t_ = t\n+\tsink = p // force p (in caller) heap allocated\n+}"}, {"sha": "0cb0dae51c435debf0ee4466e7356edc6e9e624b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue16985.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16985.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16985.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue16985.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 16985: intrinsified AMD64 atomic ops should clobber flags\n+\n+package main\n+\n+import \"sync/atomic\"\n+\n+var count uint32\n+\n+func main() {\n+\tbuffer := []byte(\"T\")\n+\tfor i := 0; i < len(buffer); {\n+\t\tatomic.AddUint32(&count, 1)\n+\t\t_ = buffer[i]\n+\t\ti++\n+\t\ti++\n+\t}\n+\n+\tfor i := 0; i < len(buffer); {\n+\t\tatomic.CompareAndSwapUint32(&count, 0, 1)\n+\t\t_ = buffer[i]\n+\t\ti++\n+\t\ti++\n+\t}\n+\n+\tfor i := 0; i < len(buffer); {\n+\t\tatomic.SwapUint32(&count, 1)\n+\t\t_ = buffer[i]\n+\t\ti++\n+\t\ti++\n+\t}\n+}"}, {"sha": "e539519b6f56c63c62f0cbca47090a8f1348a2d8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17005.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17005.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17005.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17005.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,46 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This tickles (a version of) the PPC64 back end to\n+// emit a BVS instruction.\n+\n+package foo\n+\n+type Flag int\n+\n+const (\n+\tIdentity  Flag = iota - 2 // H is the identity matrix; no rotation is needed.\n+\tRescaling                 // H specifies rescaling.\n+)\n+\n+type DrotmParams struct {\n+\tFlag\n+}\n+\n+func Drotmg(d1, d2, x1, y1 float64) (p DrotmParams, rd1, rd2, rx1 float64) {\n+\n+\tconst (\n+\t\tgam    = 4.0\n+\t\tgamsq  = 16.0\n+\t\trgamsq = 5e-8\n+\t)\n+\n+\tif d1 < 0 {\n+\t\tp.Flag = Rescaling\n+\t\treturn\n+\t}\n+\n+\tfor rd1 <= rgamsq || rd1 >= gamsq {\n+\t\tif rd1 <= rgamsq {\n+\t\t\trd1 *= gam * gam\n+\t\t\trx1 /= gam\n+\t\t} else {\n+\t\t\trd1 /= gam * gam\n+\t\t\trx1 *= gam\n+\t\t}\n+\t}\n+\treturn\n+}"}, {"sha": "05284a785f50b9fa4aa7104361ec0d9e61e3632e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17111.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17111.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17111.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17111.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type I int\n+\n+var (\n+\ti int\n+\tx = I(i)\n+\n+\te interface{} = x\n+)"}, {"sha": "0594e1cbdc13ae56f6de8697f6c81a8c6908bbbf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17194.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17194.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17194.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17194.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+func f(x []interface{}) (err error) {\n+\tfor _, d := range x {\n+\t\t_, ok := d.(*int)\n+\t\tif ok {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\treturn\n+}"}, {"sha": "5c009b58dfb7bb5543eb28c675f9afd6ae57a464", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17270.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17270.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17270.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17270.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+const _ = (unsafe.Sizeof)(0)"}, {"sha": "ef60edbd426dd61ae7c08671954690d77bb078f9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17328.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17328.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17328.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17328.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\ti := 0\n+\tfor ; ; i++) { // ERROR \"unexpected \\), expecting { after for clause|expected .*{.*|expected .*;.*\"\n+\t}\n+} // GCCGO_ERROR \"expected declaration\""}, {"sha": "be63633e7fb5ec1d865697dba04b005ac4920f23", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17381.go", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17381.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17381.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17381.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,54 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 17381: make sure leave function with non-empty frame\n+// saves link register, so that traceback will work.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n+\n+func main() {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"did not panic\")\n+\t\t}\n+\t\tpcs := make([]uintptr, 20)\n+\t\tn := runtime.Callers(1, pcs)\n+\t\tfor _, pc := range pcs[:n] {\n+\t\t\tif runtime.FuncForPC(pc).Name() == \"main.main\" {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t\tpanic(\"cannot find main.main in backtrace\")\n+\t}()\n+\n+\tprep()\n+\tf() // should panic\n+}\n+\n+func funcPC(f interface{}) uintptr {\n+\tvar ptr uintptr\n+\treturn **(**uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&f)) + unsafe.Sizeof(ptr)))\n+}\n+\n+//go:noinline\n+func f() {\n+\tvar t [1]int // non-empty frame\n+\t*(*int)(nil) = t[0]\n+}\n+\n+var p = funcPC(runtime.GC) + 8\n+\n+//go:noinline\n+func prep() {\n+\t// put some garbage on stack\n+\tvar x = [20]uintptr{p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p}\n+\t_ = x\n+}"}, {"sha": "b8751ab42dc87bbb706631a52546d36d7e87a7ed", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17551.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17551.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17551.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17551.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 17551: inrange optimization failed to preserve type information.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\t_, x := X()\n+\tfmt.Printf(\"x = %v\\n\", x)\n+}\n+\n+func X() (i int, ok bool) {\n+\tii := int(1)\n+\treturn ii, 0 <= ii && ii <= 0x7fffffff\n+}"}, {"sha": "0e3a14ef7c4faa6a398a6d4f598bd762e068a3d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17588.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17588.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17588.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17588.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 17588: internal compiler error in typecheckclosure()\n+// because in case of Func.Nname.Type == nil, Decldepth\n+// is not initialized in typecheckfunc(). This test\n+// produces that case.\n+\n+package p\n+\n+type F func(b T)  // ERROR \"T is not a type|expected type\"\n+\n+func T(fn F) {\n+    func() {\n+        fn(nil)  // If Decldepth is not initialized properly, typecheckclosure() Fatals here.\n+    }()\n+}"}, {"sha": "7398292d434d89817a6eb65f8d398c9f72635039", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17596.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17596.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17596.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17596.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+type T interface {\n+\tfoo()\n+}\n+\n+func f() (T, int)\n+\n+func g(v interface{}) (interface{}, int) {\n+\tvar x int\n+\tv, x = f()\n+\treturn v, x\n+}"}, {"sha": "b820b2d5a7508c83f04c29dad86fa553e818e6fb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17631.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17631.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17631.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17631.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,22 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"time\"\n+\n+func main() {\n+\t_ = struct {\n+\t\tabout      string\n+\t\tbefore     map[string]uint\n+\t\tupdate     map[string]int\n+\t\tupdateTime time.Time\n+\t\texpect     map[string]int\n+\t}{\n+\t\tabout:   \"this one\",\n+\t\tupdates: map[string]int{\"gopher\": 10}, // ERROR \"unknown field 'updates' in struct literal of type|unknown field .*updates.* in .*unnamed struct.*\"\n+\t}\n+}"}, {"sha": "a311521829a95f1a076b5e08f9011201a133fc0e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17640.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17640.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17640.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17640.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+var results string\n+\n+type TwoInts struct {\n+\tx, y int\n+}\n+\n+func f(x int) int { results = results + fmt.Sprintf(\"_%d\", x); return x }\n+\n+func main() {\n+\t_ = [19]int{1: f(1), 0: f(0), 2: f(2), 6, 7}\n+\t_ = [2]int{1: f(4), 0: f(3)}\n+\t_ = TwoInts{y: f(6), x: f(5)}\n+\t_ = map[int]int{f(f(9) + 1): f(8), 0: f(7), f(22): -1}\n+\tif results != \"_1_0_2_4_3_6_5_9_10_8_7_22\" {\n+\t\tfmt.Printf(\"unexpected: %s\\n\", results)\n+\t\tpanic(\"fail\")\n+\t}\n+}"}, {"sha": "bb34e4ee97a3bfd5db2cad3439ce3ef375c4a257", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17645.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17645.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17645.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17645.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type Foo struct {\n+\tX int\n+}\n+\n+func main() {\n+\tvar s []int\n+\tvar _ string = append(s, Foo{\"\"}) // ERROR \"cannot use .. \\(type untyped string\\) as type int in field value|incompatible type\" \"cannot use Foo{...} \\(type Foo\\) as type int in append\" \"cannot use append\\(s\\, Foo{...}\\) \\(type \\[\\]int\\) as type string in assignment\"\n+}"}, {"sha": "2843458c6118480168a5eb14cd6eef3112fb2043", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17710.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17710.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17710.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17710.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func f(x interface{}) {\n+\truntime.KeepAlive(x)\n+}"}, {"sha": "83283ad6605ae7787ba04217658c1b6e5afe1770", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17752.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17752.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17752.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17752.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func f(m map[string]int) int {\n+\treturn m[\"a\"]\n+}\n+\n+func g(m map[[8]string]int) int {\n+\treturn m[[8]string{\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"}]\n+}\n+\n+func main() {\n+\tm := map[[8]string]int{}\n+\tg(m)\n+}"}, {"sha": "8e40f9db7339a910e41970a97697336bec5b97fe", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17758.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17758.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17758.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17758.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func foo() {\n+\t_ = func() {}\n+}\n+\n+func foo() { // ERROR \"foo redeclared in this block|redefinition of .*foo.*\"\n+\t_ = func() {}\n+}\n+\n+func main() {}"}, {"sha": "88ede6f7b71a5bbadad3f4a726edbac255e69357", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue17918.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17918.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17918.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue17918.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,41 @@\n+// compile\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 17918: slice out-of-bounds in ssa/cse\n+\n+package dead\n+\n+import (\n+\t\"fmt\"\n+\t\"time\"\n+)\n+\n+var (\n+\tunits = []struct {\n+\t\tdivisor time.Duration\n+\t\tunit    rune\n+\t}{\n+\t\t{1000000, 's'},\n+\t\t{60, 'm'},\n+\t\t{60, 'h'},\n+\t\t{24, 'd'},\n+\t\t{7, 'w'},\n+\t}\n+)\n+\n+func foobar(d time.Duration) string {\n+\td /= time.Microsecond\n+\tunit := 'u'\n+\n+\tfor _, f := range units {\n+\t\tif d%f.divisor != 0 {\n+\t\t\tbreak\n+\t\t}\n+\t\td /= f.divisor\n+\t\tunit = f.unit\n+\t}\n+\treturn fmt.Sprintf(\"%d%c\", d, unit)\n+}"}, {"sha": "fe5c1d48306d448d63c6ce7d06f4a7ed3425689d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18089.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18089.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18089.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18089.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+type T struct {\n+\tx int\n+\t_ int\n+}\n+\n+func main() {\n+\t_ = T{0, 0}\n+\n+\tx := T{1, 1}\n+\t_ = x\n+}"}, {"sha": "a0f7eddda5a773b56e4af0c58bd29aa732f7c29c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18092.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18092.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18092.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18092.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func _() {\n+\tvar ch chan bool\n+\tselect {\n+\tdefault:\n+\tcase <-ch { // GCCGO_ERROR \"expected colon\"\n+\t}           // GC_ERROR \"expecting :\"\n+}"}, {"sha": "774730405263eefa9f3182225e8ea038f44dcb10", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18231.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18231.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18231.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18231.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that error message for composite literals with\n+// missing type is at the right place.\n+\n+package p\n+\n+type T struct {\n+\tf map[string]string\n+}\n+\n+var _ = T{\n+\tf: {                // ERROR \"missing type in composite literal|may only omit types within\"\n+\t\t\"a\": \"b\",\n+\t},\n+}"}, {"sha": "454392721f08ca69d39e52cb47a8c5667d94488c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18393.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18393.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18393.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18393.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that compiler directives are ignored if they\n+// don't start at the beginning of the line.\n+\n+package p\n+\n+//line issue18393.go:20\n+import 42 // error on line 20\n+\n+\n+/* //line not at start of line: ignored */ //line issue18393.go:30\n+var x     // error on line 24, not 30\n+\n+\n+// ERROR \"import path must be a string\"\n+\n+\n+\n+// ERROR \"syntax error: unexpected newline, expecting type|expected type\""}, {"sha": "e9c6f862ebad51db0d7c9ffa698e623d2e77601c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18410.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18410.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18410.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18410.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,40 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This checks partially initialized structure literals\n+// used to create value.method functions have their\n+// non-initialized fields properly zeroed/nil'd\n+\n+package main\n+\n+type X struct {\n+\tA, B, C *int\n+}\n+\n+//go:noinline\n+func (t X) Print() {\n+\tif t.B != nil {\n+\t\tpanic(\"t.B must be nil\")\n+\t}\n+}\n+\n+//go:noinline\n+func caller(f func()) {\n+\tf()\n+}\n+\n+//go:noinline\n+func test() {\n+\tvar i, j int\n+\tx := X{A: &i, C: &j}\n+\tcaller(func() { X{A: &i, C: &j}.Print() })\n+\tcaller(X{A: &i, C: &j}.Print)\n+\tcaller(x.Print)\n+}\n+\n+func main() {\n+\ttest()\n+}"}, {"sha": "27243d297bf517eb9a807e3fe46fca9fa649dc9b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18419.dir/other.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Fother.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Fother.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Fother.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package other\n+\n+type Exported struct {\n+\tMember int\n+}\n+\n+func (e *Exported) member() int { return 1 }"}, {"sha": "da9639dd72e30d930f4dcf5fad37ee036afd2b56", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18419.dir/test.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.dir%2Ftest.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./other\"\n+\n+func InMyCode(e *other.Exported) {\n+\te.member() // ERROR \"e\\.member undefined .cannot refer to unexported field or method other\\.\\(\\*Exported\\)\\.member.|unexported field or method\"\n+}\n+\n+func main() {}"}, {"sha": "25544efd9b94c6dad01909ca293964b5fe029719", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18419.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18419.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,7 @@\n+// errorcheckdir\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "d6f07b30e2ffdb6eee2b83f44b100d3016fe39be", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18595.go", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18595.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18595.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18595.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,53 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test makes sure that itabs are unique.\n+// More explicitly, we require that only one itab structure exists for the pair of\n+// a given compile-time interface type and underlying concrete type.\n+// Ensuring this invariant enables fixes for 18492 (improve type switch code).\n+\n+package main\n+\n+type I interface {\n+\tM()\n+}\n+type J interface {\n+\tM()\n+}\n+\n+type T struct{}\n+\n+func (*T) M() {}\n+\n+func main() {\n+\ttest1()\n+\ttest2()\n+}\n+\n+func test1() {\n+\tt := new(T)\n+\tvar i1, i2 I\n+\tvar j interface {\n+\t\tM()\n+\t}\n+\ti1 = t\n+\tj = t\n+\ti2 = j\n+\tif i1 != i2 {\n+\t\tpanic(\"interfaces not equal\")\n+\t}\n+}\n+\n+func test2() {\n+\tt := new(T)\n+\ti1 := (I)(t)\n+\ti2 := (I)((interface {\n+\t\tM()\n+\t})((J)(t)))\n+\tif i1 != i2 {\n+\t\tpanic(\"interfaces not equal\")\n+\t}\n+}"}, {"sha": "2704fc46ee91fc7ffb940b540825f107d42d399a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18636.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18636.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18636.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18636.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"runtime/debug\"\n+\n+type Foo struct {\n+\tA [1 << 20]byte\n+\tB string\n+}\n+\n+func run(c chan bool) {\n+\tf := new(Foo)\n+\t*f = Foo{B: \"hello\"}\n+\tc <- true\n+}\n+\n+func main() {\n+\tdebug.SetMaxStack(1 << 16)\n+\tc := make(chan bool)\n+\tgo run(c)\n+\t<-c\n+}"}, {"sha": "091bbe596b22baf09e1a2312cd1c93512885dd37", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18640.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18640.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18640.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18640.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,46 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type (\n+\ta = b\n+\tb struct {\n+\t\t*a\n+\t}\n+)\n+\n+type (\n+\tc struct {\n+\t\t*d\n+\t}\n+\td = c\n+)\n+\n+// The compiler cannot handle these cases. Disabled for now.\n+// See issue #25838.\n+/*\n+type (\n+\te = f\n+\tf = g\n+\tg = []h\n+\th i\n+\ti = j\n+\tj = e\n+)\n+\n+type (\n+\ta1 struct{ *b1 }\n+\tb1 = c1\n+\tc1 struct{ *b1 }\n+)\n+\n+type (\n+\ta2 struct{ b2 }\n+\tb2 = c2\n+\tc2 struct{ *b2 }\n+)\n+*/"}, {"sha": "13762f1a94b9e666d1fc66dade33d244d856f2c2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18655.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18655.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18655.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18655.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,22 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T struct{}\n+type A = T\n+type B = T\n+\n+func (T) m() {}\n+func (T) m() {} // ERROR \"redeclared|redefinition\"\n+func (A) m() {} // ERROR \"redeclared|redefinition\"\n+func (A) m() {} // ERROR \"redeclared|redefinition\"\n+func (B) m() {} // ERROR \"redeclared|redefinition\"\n+func (B) m() {} // ERROR \"redeclared|redefinition\"\n+\n+func (*T) m() {} // ERROR \"redeclared|redefinition\"\n+func (*A) m() {} // ERROR \"redeclared|redefinition\"\n+func (*B) m() {} // ERROR \"redeclared|redefinition\""}, {"sha": "e64a771a83dcd0b26ff6eb82500afe6a4a5bf45a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18661.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18661.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18661.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18661.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,39 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+)\n+\n+var (\n+\te interface{}\n+\ts = struct{ a *int }{}\n+\tb = e == s\n+)\n+\n+func test(obj interface{}) {\n+\tif obj != struct{ a *string }{} {\n+\t}\n+}\n+\n+var x int\n+\n+func f() [2]string {\n+\tx++\n+\treturn [2]string{\"abc\", \"def\"}\n+}\n+\n+func main() {\n+\tvar e interface{} = [2]string{\"abc\", \"def\"}\n+\t_ = e == f()\n+\tif x != 1 {\n+\t\tfmt.Println(\"x=\", x)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "c632dbad639e4b9c72372d7f5cba749059641cb3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18725.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18725.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18725.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18725.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+\n+func panicWhenNot(cond bool) {\n+\tif cond {\n+\t\tos.Exit(0)\n+\t} else {\n+\t\tpanic(\"nilcheck elim failed\")\n+\t}\n+}\n+\n+func main() {\n+\te := (*string)(nil)\n+\tpanicWhenNot(e == e)\n+\t// Should never reach this line.\n+\tpanicWhenNot(*e == *e)\n+}"}, {"sha": "c98386ee7847e6e7e68c659acd6dc40902a4c40b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18808.go", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18808.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18808.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18808.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,63 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+const lim = 0x80000000\n+\n+//go:noinline\n+func eq(x uint32) {\n+\tif x == lim {\n+\t\treturn\n+\t}\n+\tpanic(\"x == lim returned false\")\n+}\n+\n+//go:noinline\n+func neq(x uint32) {\n+\tif x != lim {\n+\t\tpanic(\"x != lim returned true\")\n+\t}\n+}\n+\n+//go:noinline\n+func gt(x uint32) {\n+\tif x > lim {\n+\t\treturn\n+\t}\n+\tpanic(\"x > lim returned false\")\n+}\n+\n+//go:noinline\n+func gte(x uint32) {\n+\tif x >= lim {\n+\t\treturn\n+\t}\n+\tpanic(\"x >= lim returned false\")\n+}\n+\n+//go:noinline\n+func lt(x uint32) {\n+\tif x < lim {\n+\t\tpanic(\"x < lim returned true\")\n+\t}\n+}\n+\n+//go:noinline\n+func lte(x uint32) {\n+\tif x <= lim {\n+\t\tpanic(\"x <= lim returned true\")\n+\t}\n+}\n+\n+func main() {\n+\teq(lim)\n+\tneq(lim)\n+\tgt(lim+1)\n+\tgte(lim+1)\n+\tlt(lim+1)\n+\tlte(lim+1)\n+}"}, {"sha": "544400be25845f0cc18523d404a511d3944b364d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18906.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18906.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18906.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18906.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,36 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+//go:noinline\n+func f(x int) {\n+}\n+\n+//go:noinline\n+func val() int8 {\n+\treturn -1\n+}\n+\n+var (\n+\tarray = [257]int{}\n+\tslice = array[1:]\n+)\n+\n+func init() {\n+\tfor i := range array {\n+\t\tarray[i] = i - 1\n+\t}\n+}\n+\n+func main() {\n+\tx := val()\n+\ty := int(uint8(x))\n+\tf(y) // try and force y to be calculated and spilled\n+\tif slice[y] != 255 {\n+\t\tpanic(\"incorrect value\")\n+\t}\n+}"}, {"sha": "22f97c6b62b8ec2dd393319478190ff61844da72", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18915.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18915.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18915.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18915.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure error message for invalid conditions\n+// or tags are consistent with earlier Go versions.\n+\n+package p\n+\n+func _() {\n+\tif a := 10 { // ERROR \"cannot use a := 10 as value|expected .*;|declared but not used\"\n+\t}\n+\n+\tfor b := 10 { // ERROR \"cannot use b := 10 as value|parse error|declared but not used\"\n+\t}\n+\n+\tswitch c := 10 { // ERROR \"cannot use c := 10 as value|expected .*;|declared but not used\"\n+\t}\n+}"}, {"sha": "aa307139f53ffebb95df4fbaf57aec567875e00c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue18994.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18994.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18994.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue18994.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,22 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 18994: SSA didn't handle DOT STRUCTLIT for zero-valued\n+// STRUCTLIT.\n+\n+package main\n+\n+// large struct - not SSA-able\n+type T struct {\n+\ta, b, c, d, e, f, g, h int\n+}\n+\n+func main() {\n+\tx := T{}.a\n+\tif x != 0 {\n+\t\tpanic(\"FAIL\")\n+\t}\n+}"}, {"sha": "158618aa27efcca31f0d4af81c55451cf84936a8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19012.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19012.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19012.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19012.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19012: if we have any unknown type at a call site,\n+// we must ensure that we return to the user a suppressed\n+// error message saying instead of including <T> in\n+// the message.\n+\n+package main\n+\n+func f(x int, y uint) {\n+\tif true {\n+\t\treturn \"a\" > 10 // ERROR \"^too many arguments to return$|return with value in function with no return|mismatched types\"\n+\t}\n+\treturn \"gopher\" == true, 10 // ERROR \"^too many arguments to return$|return with value in function with no return|mismatched types\"\n+}\n+\n+func main() {\n+\tf(2, 3 < \"x\", 10) // ERROR \"too many arguments|invalid operation|incompatible type\"\n+\n+\tf(10, 10, \"a\") // ERROR \"too many arguments\"\n+}"}, {"sha": "361251d7505df9188d33cd961632fcb513b37496", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19028.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package reflect\n+\n+import \"reflect\"\n+\n+type Type reflect.Type"}, {"sha": "e2ee7b8ca1df2da8a26d4ae028b516e0f1b6dfdf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19028.dir/main.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+        \"reflect\"\n+        fake \"./a\" // 2nd package with name \"reflect\"\n+)\n+\n+type T struct {\n+        _ fake.Type\n+}\n+\n+func (T) f()            {}\n+func (T) G() (_ int)    { return }\n+func (T) H() (_, _ int) { return }\n+\n+func main() {\n+        var x T\n+        typ := reflect.TypeOf(x)\n+        for i := 0; i < typ.NumMethod(); i++ {\n+                _ = typ.Method(i) // must not crash\n+        }\n+}"}, {"sha": "8d934d2d6716e6c0da30dc07bbb1088ead02ff66", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19028.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19028.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// rundir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test failed when the compiler didn't use the\n+// correct code to identify the type reflect.Method.\n+// The failing code relied on Type.String() which had\n+// formatting that depended on whether a package (in\n+// this case \"reflect\") was imported more than once.\n+\n+package ignored"}, {"sha": "67881df6243131bf5f3095339cef1d28d0bcdc85", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19040.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19040.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19040.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19040.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,36 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check the text of the panic that comes from\n+// a nil pointer passed to automatically generated method wrapper.\n+\n+package main\n+\n+import \"fmt\"\n+\n+type T int\n+\n+type I interface {\n+\tF()\n+}\n+\n+func (t T) F() {}\n+\n+var (\n+\tt *T\n+\ti I = t\n+)\n+\n+func main() {\n+\tdefer func() {\n+\t\tgot := recover().(error).Error()\n+\t\twant := \"value method main.T.F called using nil *T pointer\"\n+\t\tif got != want {\n+\t\t\tfmt.Printf(\"panicwrap error text:\\n\\t%q\\nwant:\\n\\t%q\\n\", got, want)\n+\t\t}\n+\t}()\n+\ti.F()\n+}"}, {"sha": "d279eaa3cf64bf0a77f740d4551320e31b694e3f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19056.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19056.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19056.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19056.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var _ = ... . // ERROR \"unexpected ...|expected operand|expected .*;\""}, {"sha": "b19e8749d7a2d05da76194b240732a816770d6ee", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19078.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19078.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19078.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19078.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,42 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19078: liveness & zero-initialization of results\n+// when there is a defer.\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\t// Construct an invalid pointer.  We do this by\n+\t// making a pointer which points to the unused space\n+\t// between the last 48-byte object in a span and the\n+\t// end of the span (there are 32 unused bytes there).\n+\tp := new([48]byte)              // make a 48-byte object\n+\tsink = &p                       // escape it, so it allocates for real\n+\tu := uintptr(unsafe.Pointer(p)) // get its address\n+\tu = u >> 13 << 13               // round down to page size\n+\tu += 1<<13 - 1                  // add almost a page\n+\n+\tfor i := 0; i < 1000000; i++ {\n+\t\t_ = identity(u)         // installs u at return slot\n+\t\t_ = liveReturnSlot(nil) // incorrectly marks return slot as live\n+\t}\n+}\n+\n+//go:noinline\n+func liveReturnSlot(x *int) *int {\n+\tdefer func() {}() // causes return slot to be marked live\n+\tsink = &x         // causes x to be moved to the heap, triggering allocation\n+\treturn x\n+}\n+\n+//go:noinline\n+func identity(x uintptr) uintptr {\n+\treturn x\n+}\n+\n+var sink interface{}"}, {"sha": "ba5306320b5a39731748d13e72de951678c0bcf5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19084.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19084.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19084.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19084.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19084: SSA doesn't handle CONVNOP STRUCTLIT\n+\n+package p\n+\n+type T struct {\n+\ta, b, c, d, e, f, g, h int // big, not SSA-able\n+}\n+\n+func f() {\n+\t_ = T(T{})\n+}"}, {"sha": "0539a850ca69cba4c45ab469abc9cdedd8c5c002", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19137.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19137.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19137.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19137.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,51 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19137: folding address into load/store causes\n+// odd offset on ARM64.\n+\n+package p\n+\n+type T struct {\n+\tp *int\n+\ta [2]byte\n+\tb [6]byte // not 4-byte aligned\n+}\n+\n+func f(b [6]byte) T {\n+\tvar x [1000]int // a large stack frame\n+\t_ = x\n+\treturn T{b: b}\n+}\n+\n+// Arg symbol's base address may be not at an aligned offset to\n+// SP. Folding arg's address into load/store may cause odd offset.\n+func move(a, b [20]byte) [20]byte {\n+\tvar x [1000]int // a large stack frame\n+\t_ = x\n+\treturn b // b is not 8-byte aligned to SP\n+}\n+func zero() ([20]byte, [20]byte) {\n+\tvar x [1000]int // a large stack frame\n+\t_ = x\n+\treturn [20]byte{}, [20]byte{} // the second return value is not 8-byte aligned to SP\n+}\n+\n+// Issue 21992: unaligned offset between 256 and 504 and handled\n+// incorrectly.\n+type T2 struct {\n+\ta [257]byte\n+\t// fields below are not 8-, 4-, 2-byte aligned\n+\tb [8]byte\n+\tc [4]byte\n+\td [2]byte\n+}\n+\n+func f2(x *T2) {\n+\tx.b = [8]byte{}\n+\tx.c = [4]byte{}\n+\tx.d = [2]byte{}\n+}"}, {"sha": "e1f3ffb4749f4dbb4c2204c4a0f484aea91b4771", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19182.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19182.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19182.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19182.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,37 @@\n+// run\n+// +build !js\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+\t\"sync/atomic\"\n+\t\"time\"\n+)\n+\n+var a uint64 = 0\n+\n+func main() {\n+\truntime.GOMAXPROCS(2) // With just 1, infinite loop never yields\n+\n+\tgo func() {\n+\t\tfor {\n+\t\t\tatomic.AddUint64(&a, uint64(1))\n+\t\t}\n+\t}()\n+\n+\ttime.Sleep(10 * time.Millisecond) // Short sleep is enough in passing case\n+\ti, val := 0, atomic.LoadUint64(&a)\n+\tfor ; val == 0 && i < 100; val, i = atomic.LoadUint64(&a), i+1 {\n+\t\ttime.Sleep(100 * time.Millisecond)\n+\t}\n+\tif val == 0 {\n+\t\tfmt.Printf(\"Failed to observe atomic increment after %d tries\\n\", i)\n+\t}\n+\n+}"}, {"sha": "e370d55df15d296805c2ff566f65d7caab1f16dc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19201.go", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19201.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19201.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19201.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,52 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"encoding/binary\"\n+)\n+\n+var (\n+\tch1 = make(chan int)\n+\tch2 = make(chan int)\n+\n+\tbin  = []byte(\"a\\000\\000\\001\")\n+\twant = binary.BigEndian.Uint32(bin)\n+\n+\tc consumer = noopConsumer{}\n+)\n+\n+type msg struct {\n+\tcode uint32\n+}\n+\n+type consumer interface {\n+\tconsume(msg)\n+}\n+\n+type noopConsumer struct{}\n+\n+func (noopConsumer) consume(msg) {}\n+\n+func init() {\n+\tclose(ch1)\n+}\n+\n+func main() {\n+\tvar m msg\n+\tm.code = binary.BigEndian.Uint32(bin)\n+\n+\tselect {\n+\tcase <-ch1:\n+\t\tc.consume(m)\n+\t\tif m.code != want {\n+\t\t\t// can not use m.code here, or it will work\n+\t\t\tpanic(\"BigEndian read failed\")\n+\t\t}\n+\tcase <-ch2:\n+\t}\n+}"}, {"sha": "96794064a40caef274f348ccfbb899dfabab2a24", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19217.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19217.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19217.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19217.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,39 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+import (\n+\t\"encoding/binary\"\n+)\n+\n+type DbBuilder struct {\n+\tarr []int\n+}\n+\n+func (bld *DbBuilder) Finish() error {\n+\tdefer bld.Finish()\n+\n+\tvar hash []byte\n+\tfor _, ixw := range bld.arr {\n+\t\tfor {\n+\t\t\tif ixw != 0 {\n+\t\t\t\tpanic(\"ixw != 0\")\n+\t\t\t}\n+\t\t\tixw--\n+\t\tinsertOne:\n+\t\t\tfor {\n+\t\t\t\tfor i := 0; i < 1; i++ {\n+\t\t\t\t\tif binary.LittleEndian.Uint16(hash[i:]) == 0 {\n+\t\t\t\t\t\tbreak insertOne\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}"}, {"sha": "f7e64fc9aece974df451502f3bc4f9c3a71e1624", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19275.go", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19275.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19275.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19275.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,72 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+)\n+\n+type PI struct {\n+\tEnabled bool\n+}\n+\n+type SI struct {\n+\tM map[string]*PI\n+}\n+\n+//go:noinline\n+func (s *SI) test(name string) (*int, error) {\n+\tn := new(int)\n+\t*n = 99\n+\tif err := addUpdate(n, s.M[name].Enabled, \"enabled\"); err != nil { // this was miscompiled\n+\t\treturn nil, fmt.Errorf(\" error adding update for enable flag %t : %s\",\n+\t\t\ts.M[name].Enabled, err)\n+\t}\n+\treturn n, nil\n+}\n+\n+//go:noinline\n+func addUpdate(n *int, in interface{}, s ...string) error {\n+\tif *n != 99 {\n+\t\tprintln(\"FAIL, *n should be 99, not\", *n)\n+\t}\n+\treturn nil\n+}\n+\n+func main1() {\n+\ts := &SI{make(map[string]*PI)}\n+\ts.M[\"dog\"] = &PI{}\n+\ts.test(\"dog\")\n+}\n+\n+//go:noinline\n+func g(b *byte, i interface{}) error {\n+\tif *b != 17 {\n+\t\tprintln(\"FAIL, *b should be 17, not\", *b)\n+\t}\n+\treturn nil\n+}\n+\n+//go:noinline\n+func f(x *byte, m map[string]*bool) {\n+\tif err := g(x, *m[\"hello\"]); err != nil { // this was miscompiled\n+\t\treturn\n+\t}\n+}\n+\n+func main2() {\n+\tm := make(map[string]*bool)\n+\tx := false\n+\tm[\"hello\"] = &x\n+\tb := byte(17)\n+\tf(&b, m)\n+}\n+\n+func main() {\n+\tmain2()\n+\tmain1()\n+}"}, {"sha": "71365e10dd3d8089f8e6c5f536352bf4bc8cdd24", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19323.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19323.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19323.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19323.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func g() {}\n+\n+func f() {\n+\tg()[:] // ERROR \"g.. used as value|attempt to slice object that is not\"\n+}\n+\n+func g2() ([]byte, []byte) { return nil, nil }\n+\n+func f2() {\n+\tg2()[:] // ERROR \"multiple-value g2.. in single-value context|attempt to slice object that is not\"\n+}"}, {"sha": "cc3ecc84f61741354db14a90816ce481e0e9f521", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19359.go", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19359.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19359.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19359.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,91 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func set(m map[interface{}]interface{}, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"set failed: %v\", r)\n+\t\t}\n+\t}()\n+\tm[key] = nil\n+\treturn nil\n+}\n+\n+func del(m map[interface{}]interface{}, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"del failed: %v\", r)\n+\t\t}\n+\t}()\n+\tdelete(m, key)\n+\treturn nil\n+}\n+\n+func addInt(m map[interface{}]int, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"addInt failed: %v\", r)\n+\t\t}\n+\t}()\n+\tm[key] += 2018\n+\treturn nil\n+}\n+\n+func addStr(m map[interface{}]string, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"addStr failed: %v\", r)\n+\t\t}\n+\t}()\n+\tm[key] += \"hello, go\"\n+\treturn nil\n+}\n+\n+func appendInt(m map[interface{}][]int, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"appendInt failed: %v\", r)\n+\t\t}\n+\t}()\n+\tm[key] = append(m[key], 2018)\n+\treturn nil\n+}\n+\n+func appendStr(m map[interface{}][]string, key interface{}) (err error) {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\terr = fmt.Errorf(\"addStr failed: %v\", r)\n+\t\t}\n+\t}()\n+\tm[key] = append(m[key], \"hello, go\")\n+\treturn nil\n+}\n+\n+func main() {\n+\tm := make(map[interface{}]interface{})\n+\tset(m, []int{1, 2, 3})\n+\tset(m, \"abc\") // used to throw\n+\tdel(m, []int{1, 2, 3})\n+\tdel(m, \"abc\") // used to throw\n+\n+\tmi := make(map[interface{}]int)\n+\taddInt(mi, []int{1, 2, 3})\n+\taddInt(mi, \"abc\") // used to throw\n+\n+\tms := make(map[interface{}]string)\n+\taddStr(ms, []int{1, 2, 3})\n+\taddStr(ms, \"abc\") // used to throw\n+\n+\tmia := make(map[interface{}][]int)\n+\tappendInt(mia, []int{1, 2, 3})\n+\n+\tmsa := make(map[interface{}][]string)\n+\tappendStr(msa, \"abc\") // used to throw\n+}"}, {"sha": "4c2c19ec9d9d4ce63457c29b07b559c236305daf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19482.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19482.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19482.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19482.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Compiler rejected initialization of structs to composite literals\n+// in a non-static setting (e.g. in a function)\n+// when the struct contained a field named _.\n+\n+package p\n+\n+type T struct {\n+\t_ string\n+}\n+\n+func ok() {\n+\tvar x = T{\"check\"}\n+\t_ = x\n+\t_ = T{\"et\"}\n+}\n+\n+var (\n+\ty = T{\"stare\"}\n+\tw = T{_: \"look\"} // ERROR \"invalid field name _ in struct initializer|expected struct field name\"\n+\t_ = T{\"page\"}\n+\t_ = T{_: \"out\"} // ERROR \"invalid field name _ in struct initializer|expected struct field name\"\n+)\n+\n+func bad() {\n+\tvar z = T{_: \"verse\"} // ERROR \"invalid field name _ in struct initializer|expected struct field name\"\n+\t_ = z\n+\t_ = T{_: \"itinerary\"} // ERROR \"invalid field name _ in struct initializer|expected struct field name\"\n+}"}, {"sha": "0bc33e92ce297f457ee8e72bd367762f0d39832b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19507.dir/div_arm.s", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fdiv_arm.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fdiv_arm.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fdiv_arm.s?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+TEXT \u00b7f(SB),0,$0-8\n+\tMOVW\tx+0(FP), R1\n+\tMOVW\tx+4(FP), R2\n+\tDIVU\tR1, R2\n+\tDIV\tR1, R2\n+\tMODU\tR1, R2\n+\tMOD\tR1, R2\n+\tRET"}, {"sha": "c115556f91dcb1bdf7dfd7d51c6f4d4d86791ac2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19507.dir/main.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.dir%2Fmain.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// +build arm\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we can compile assembly with DIV and MOD in it.\n+// They get rewritten to runtime calls on GOARM=5.\n+\n+package main\n+\n+func f(x, y uint32)\n+\n+func main() {\n+\tf(5, 8)\n+}"}, {"sha": "543e17e50b20b732ed0a2f6d68456f5c26ec4e94", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19507.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19507.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,8 @@\n+// +build arm\n+// builddir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "a1605bec9633577281dfb17fc2d2b14e162150e0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19515.go", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19515.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19515.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19515.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,51 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19515: compiler panics on spilling int128 constant.\n+\n+package x\n+\n+type VScrollPanel struct {\n+\tx, y int\n+}\n+\n+type Color struct {\n+\tR, G, B, A float32\n+}\n+\n+func maxF(a, b float32) float32 {\n+\tif a > b {\n+\t\treturn 0\n+\t}\n+\treturn 1\n+}\n+\n+type TransformMatrix [6]float32\n+\n+type Paint struct {\n+\txform      TransformMatrix\n+\tfeather    float32\n+\tinnerColor Color\n+\touterColor Color\n+}\n+\n+func BoxGradient(x, y, w, h, f float32, iColor, oColor Color) Paint {\n+\treturn Paint{\n+\t\txform:      TransformMatrix{9, 0, 0, 0, x, y},\n+\t\tfeather:    maxF(1.0, f),\n+\t\tinnerColor: iColor,\n+\t\touterColor: oColor,\n+\t}\n+}\n+\n+func (v *VScrollPanel) Draw() {\n+\tx := float32(v.x)\n+\ty := float32(v.y)\n+\n+\tBoxGradient(x+x-2, y-1, 0, 0, 0, Color{}, Color{})\n+\tBoxGradient(x+y-2, y-1, 0, 0, 0, Color{}, Color{})\n+}\n+"}, {"sha": "3b7cd4b0e23bbaf118aadbd41097efa5c77a0f36", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19548.dir/a.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Mode uint\n+\n+func (m Mode) String() string { return \"mode string\" }\n+func (m *Mode) Addr() *Mode   { return m }\n+\n+type Stringer interface {\n+\tString() string\n+}\n+\n+var global Stringer\n+var m Mode\n+\n+func init() {\n+\t// force compilation of the (*Mode).String() wrapper\n+\tglobal = &m\n+}\n+\n+func String() string {\n+\treturn global.String() + Mode(0).String()\n+}"}, {"sha": "e5e807f43de2318e0c6a09f1132a1bdec60e8c8c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19548.dir/b.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+type Value interface {\n+\ta.Stringer\n+\tAddr() *a.Mode\n+}\n+\n+var global a.Mode\n+\n+func f() int {\n+\tvar v Value\n+\tv = &global\n+\treturn int(v.String()[0])\n+}\n+\n+func main() {\n+\tf()\n+}"}, {"sha": "e0e769338a5427eb6bb8e4de772ceb5c41e5c0bd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19548.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19548.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,9 @@\n+// rundir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that interface wrappers can be compiled successfully\n+// in multiple translation units.\n+package ignore"}, {"sha": "53b2ebde51e1ca7d49b5d65581664e74ac4330d6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19555.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19555.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19555.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19555.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,36 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type NodeLink struct{}\n+\n+// A role our end of NodeLink is intended to play\n+type LinkRole int64\n+\n+const (\n+\tLinkServer LinkRole = iota // link created as server\n+\tLinkClient                 // link created as client\n+\n+\t// for testing:\n+\tlinkNoRecvSend LinkRole = 1 << 16 // do not spawn serveRecv & serveSend\n+\tlinkFlagsMask  LinkRole = (1<<32 - 1) << 16\n+)\n+\n+func NewNodeLink(role LinkRole) *NodeLink {\n+\tvar nextConnId uint32\n+\tswitch role &^ linkFlagsMask {\n+\tcase LinkServer:\n+\t\tnextConnId = 0 // all initiated by us connId will be even\n+\tcase LinkClient:\n+\t\tnextConnId = 1 // ----//---- odd\n+\tdefault:\n+\t\tpanic(\"invalid conn role\")\n+\t}\n+\n+\t_ = nextConnId\n+\treturn nil\n+}"}, {"sha": "41cb1ffa1de2788d2fce2c5445804a5b41f4e00e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19632.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19632.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19632.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19632.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that we don't crash due to \"lost track of variable in\n+// liveness\" errors against unused variables.\n+\n+package p\n+\n+import \"strings\"\n+\n+// Minimized test case from github.com/mvdan/sh/syntax.\n+func F() {\n+\tvar _ = []string{\n+\t\tstrings.Repeat(\"\\n\\n\\t\\t        \\n\", 10) +\n+\t\t\t\"# \" + strings.Repeat(\"foo bar \", 10) + \"\\n\" +\n+\t\t\tstrings.Repeat(\"longlit_\", 10) + \"\\n\",\n+\t}\n+}"}, {"sha": "b2539629df0c45ad3a349db4068726b6c1e55b1b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19658.go", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19658.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19658.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19658.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,99 @@\n+// +build !nacl,!js\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// ensure that panic(x) where x is a numeric type displays a readable number\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+)\n+\n+const fn = `\n+package main\n+\n+import  \"errors\"\n+type S struct {\n+\n+}\n+func (s S) String() string {\n+\treturn \"s-stringer\"\n+}\n+func main() {\n+ \t_ = errors.New\n+  panic(%s(%s))\n+}\n+`\n+\n+func main() {\n+\ttempDir, err := ioutil.TempDir(\"\", \"\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(tempDir)\n+\ttmpFile := filepath.Join(tempDir, \"tmp.go\")\n+\n+\tfor _, tc := range []struct {\n+\t\tType   string\n+\t\tInput  string\n+\t\tExpect string\n+\t}{{\"\", \"nil\", \"panic: nil\"},\n+\t\t{\"errors.New\", `\"test\"`, \"panic: test\"},\n+\t\t{\"S\", \"S{}\", \"panic: s-stringer\"},\n+\t\t{\"byte\", \"8\", \"panic: 8\"},\n+\t\t{\"rune\", \"8\", \"panic: 8\"},\n+\t\t{\"int\", \"8\", \"panic: 8\"},\n+\t\t{\"int8\", \"8\", \"panic: 8\"},\n+\t\t{\"int16\", \"8\", \"panic: 8\"},\n+\t\t{\"int32\", \"8\", \"panic: 8\"},\n+\t\t{\"int64\", \"8\", \"panic: 8\"},\n+\t\t{\"uint\", \"8\", \"panic: 8\"},\n+\t\t{\"uint8\", \"8\", \"panic: 8\"},\n+\t\t{\"uint16\", \"8\", \"panic: 8\"},\n+\t\t{\"uint32\", \"8\", \"panic: 8\"},\n+\t\t{\"uint64\", \"8\", \"panic: 8\"},\n+\t\t{\"uintptr\", \"8\", \"panic: 8\"},\n+\t\t{\"bool\", \"true\", \"panic: true\"},\n+\t\t{\"complex64\", \"8 + 16i\", \"panic: (+8.000000e+000+1.600000e+001i)\"},\n+\t\t{\"complex128\", \"8+16i\", \"panic: (+8.000000e+000+1.600000e+001i)\"},\n+\t\t{\"string\", `\"test\"`, \"panic: test\"}} {\n+\n+\t\tb := bytes.Buffer{}\n+\t\tfmt.Fprintf(&b, fn, tc.Type, tc.Input)\n+\n+\t\terr = ioutil.WriteFile(tmpFile, b.Bytes(), 0644)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\n+\t\tcmd := exec.Command(\"go\", \"run\", tmpFile)\n+\t\tvar buf bytes.Buffer\n+\t\tcmd.Stdout = &buf\n+\t\tcmd.Stderr = &buf\n+\t\tcmd.Env = os.Environ()\n+\t\tcmd.Run() // ignore err as we expect a panic\n+\n+\t\tout := buf.Bytes()\n+\t\tpanicIdx := bytes.Index(out, []byte(\"panic: \"))\n+\t\tif panicIdx == -1 {\n+\t\t\tlog.Fatalf(\"expected a panic in output for %s, got: %s\", tc.Type, out)\n+\t\t}\n+\t\teolIdx := bytes.IndexByte(out[panicIdx:], '\\n') + panicIdx\n+\t\tif panicIdx == -1 {\n+\t\t\tlog.Fatalf(\"expected a newline in output for %s after the panic, got: %s\", tc.Type, out)\n+\t\t}\n+\t\tout = out[0:eolIdx]\n+\t\tif string(out) != tc.Expect {\n+\t\t\tlog.Fatalf(\"expected '%s' for panic(%s(%s)), got %s\", tc.Expect, tc.Type, tc.Input, out)\n+\t\t}\n+\t}\n+}"}, {"sha": "e33e35048752dfb4f4c3110e4fba31791e822d98", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19667.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19667.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19667.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19667.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Make sure we don't crash when reporting this error.\n+\n+package p\n+\n+func f() {\n+\tif err := http.ListenAndServe( // GCCGO_ERROR \"undefined name\"\n+} // ERROR \"unexpected }, expecting expression|expected operand|missing .*\\)|expected .*;|expected .*{\""}, {"sha": "475c3e0afc628cbe3e6ae08211f51bc646727751", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19671.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19671.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19671.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19671.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to crash when compiling assignments involving [0]T,\n+// where T is not SSA-able.\n+\n+package a\n+\n+func f() {\n+\tvar i int\n+\tarr := [0][2]int{}\n+\tarr[i][0] = 0\n+}"}, {"sha": "81ef331ee65ea36584f32f2fa0a29d8fbd0ab2e1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19678.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19678.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19678.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19678.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to crash when compiling functions containing\n+// forward refs in dead code.\n+\n+package p\n+\n+var f func(int)\n+\n+func g() {\n+l1:\n+\ti := 0\n+\tgoto l1\n+l2:\n+\tf(i)\n+\tgoto l2\n+}"}, {"sha": "636b27ffef863327c96f411ab1a7dbf73b4b9db4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19679.go", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19679.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19679.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19679.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,38 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to crash when a type switch was present in dead code\n+// in an inlineable function.\n+\n+package p\n+\n+func Then() {\n+\tvar i interface{}\n+\tif false {\n+\t\tswitch i.(type) {\n+\t\t}\n+\t}\n+}\n+\n+func Else() {\n+\tvar i interface{}\n+\tif true {\n+\t\t_ = i\n+\t} else {\n+\t\tswitch i.(type) {\n+\t\t}\n+\t}\n+}\n+\n+func Switch() {\n+\tvar i interface{}\n+\tswitch 5 {\n+\tcase 3:\n+\t\tswitch i.(type) {\n+\t\t}\n+\tcase 5:\n+\t}\n+}"}, {"sha": "4cb2789091cade6e0de0ad8323cda45d3d9f5c1e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19696.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19696.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19696.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19696.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to crash when compiling assignments involving [0]T,\n+// where T is not SSA-able.\n+\n+package p\n+\n+type s struct {\n+\ta, b, c, d, e int\n+}\n+\n+func f() {\n+\tvar i int\n+\tarr := [0]s{}\n+\tarr[i].a++\n+}"}, {"sha": "4afc0ca8330501e6fbed9529c5bcc76c57e03c9d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19699b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19699b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19699b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19699b.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,14 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() bool {\n+\tif false {\n+\t} else {\n+\t\treturn true\n+\t}\n+} // ERROR \"missing return at end of function\""}, {"sha": "6157945bbbce954f267adde5637b00dadea084a7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19705.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19705.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19705.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19705.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f1() {\n+\tf2()\n+}\n+\n+func f2() {\n+\tif false {\n+\t\t_ = func() {}\n+\t}\n+}"}, {"sha": "c42ea7c2ceda16d6f963ac4f8c00418a25bb3bba", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19710.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19710.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19710.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19710.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,25 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19710: mishandled defer delete(...)\n+\n+package main\n+\n+func main() {\n+\tif n := len(f()); n != 0 {\n+\t\tprintln(\"got\", n, \"want 0\")\n+\t\tpanic(\"bad defer delete\")\n+\t}\n+}\n+\n+func f() map[int]bool {\n+\tm := map[int]bool{}\n+\tfor i := 0; i < 3; i++ {\n+\t\tm[i] = true\n+\t\tdefer delete(m, i)\n+\t}\n+\treturn m\n+}"}, {"sha": "5089cc61d82babe6feb50d3b6bd8b640ed8238d6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19743.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19743.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19743.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19743.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,31 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+// Escape analysis needs to treat the uintptr-typed reflect.*Header fields as pointers.\n+\n+import (\n+\t\"reflect\"\n+\t\"unsafe\"\n+)\n+\n+type immutableBytes []byte\n+\n+// Bug was failure to leak param b.\n+func toString(b immutableBytes) string { // ERROR \"leaking param: b$\"\n+\tvar s string\n+\tif len(b) == 0 {\n+\t\treturn s\n+\t}\n+\n+\tstrHeader := (*reflect.StringHeader)(unsafe.Pointer(&s))\n+\tstrHeader.Data = (*reflect.SliceHeader)(unsafe.Pointer(&b)).Data\n+\n+\tl := len(b)\n+\tstrHeader.Len = l\n+\treturn s\n+}"}, {"sha": "64538e5bdf056ca6ce6de5d90961c17a9a49416e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19764.dir/a.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fa.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type T struct{ _ int }\n+func (t T) M() {}\n+\n+type I interface { M() }\n+\n+func F() {\n+\tvar t I = &T{}\n+\tt.M() // call to the wrapper (*T).M\n+}"}, {"sha": "d39f125f37c75e259eb915448d4965175bfe87a1", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19764.dir/b.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.dir%2Fb.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\tvar x a.I = &a.T{}\n+\tx.M() // call to the wrapper (*T).M\n+\ta.F() // make sure a.F is not dead, which also calls (*T).M inside package a\n+}"}, {"sha": "26fb00be2d0fce681361adb58b4922621911bd1b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19764.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19764.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19764: test that the linker's trampoline insertion\n+// pass is happy with direct calls to interface wrappers that\n+// may be defined in multiple packages.\n+package ignore"}, {"sha": "8d6494eaa4768a0d37b99bfdc35dc3213a40cda3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19783.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19783.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19783.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19783.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func Spin() {\n+l1:\n+\tfor true {\n+\t\tgoto l1\n+\tl2:\n+\t\tif true {\n+\t\t\tgoto l2\n+\t\t}\n+\t}\n+}"}, {"sha": "cb675d7b0d1ee5e4a3e2b799d9fbda4326429119", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19799.go", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19799.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19799.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19799.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,71 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"os\"\n+\t\"runtime\"\n+)\n+\n+func foo(x int) int {\n+\treturn x + 1\n+}\n+\n+func test() {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\tpcs := make([]uintptr, 10)\n+\t\t\tn := runtime.Callers(0, pcs)\n+\t\t\tpcs = pcs[:n]\n+\t\t\tframes := runtime.CallersFrames(pcs)\n+\t\t\tfor {\n+\t\t\t\tf, more := frames.Next()\n+\t\t\t\tif f.Function == \"main.foo\" {\n+\t\t\t\t\tprintln(\"did not expect to see call to foo in stack trace\")\n+\t\t\t\t\tos.Exit(1)\n+\t\t\t\t}\n+\t\t\t\tif !more {\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}()\n+\tvar v []int\n+\tfoo(v[0])\n+}\n+\n+func bar(x ...int) int {\n+\treturn x[0] + 1\n+}\n+\n+func testVariadic() {\n+\tdefer func() {\n+\t\tif r := recover(); r != nil {\n+\t\t\tpcs := make([]uintptr, 10)\n+\t\t\tn := runtime.Callers(0, pcs)\n+\t\t\tpcs = pcs[:n]\n+\t\t\tframes := runtime.CallersFrames(pcs)\n+\t\t\tfor {\n+\t\t\t\tf, more := frames.Next()\n+\t\t\t\tif f.Function == \"main.bar\" {\n+\t\t\t\t\tprintln(\"did not expect to see call to bar in stack trace\")\n+\t\t\t\t\tos.Exit(1)\n+\t\t\t\t}\n+\t\t\t\tif !more {\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}()\n+\tvar v []int\n+\tbar(v[0])\n+}\n+\n+func main() {\n+\ttest()\n+\ttestVariadic()\n+}"}, {"sha": "3d83cf3a12c3dd287b1fc8e9c42309e108fd3c67", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19880.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19880.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19880.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19880.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T struct {\n+\tf [1]int\n+}\n+\n+func a() {\n+\t_ = T // ERROR \"type T is not an expression|invalid use of type\"\n+}\n+\n+func b() {\n+\tvar v [len(T{}.f)]int // ok\n+\t_ = v\n+}"}, {"sha": "af7f59814e1a06dad11331066e713d148b49fdda", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19911.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19911.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19911.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19911.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+)\n+\n+type ET struct{}\n+\n+func (*ET) Error() string { return \"err\" }\n+\n+func main() {\n+\tcheck(\"false\", fmt.Sprintf(\"(*ET)(nil) == error(nil): %v\", (*ET)(nil) == error(nil)))\n+\tcheck(\"true\", fmt.Sprintf(\"(*ET)(nil) != error(nil): %v\", (*ET)(nil) != error(nil)))\n+\n+\tnilET := (*ET)(nil)\n+\tnilError := error(nil)\n+\n+\tcheck(\"false\", fmt.Sprintf(\"nilET == nilError: %v\", nilET == nilError))\n+\tcheck(\"true\", fmt.Sprintf(\"nilET != nilError: %v\", nilET != nilError))\n+}\n+\n+func check(want, gotfull string) {\n+\tgot := gotfull[strings.Index(gotfull, \": \")+len(\": \"):]\n+\tif got != want {\n+\t\tpanic(\"want \" + want + \" got \" + got + \" from \" + gotfull)\n+\t}\n+}"}, {"sha": "6e4a9cc422c7181698b0563f871c6b9783e5bceb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue19977.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19977.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba74e74ac66ab85a4a0a2b06c7e15bba2571823b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19977.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue19977.go?ref=ba74e74ac66ab85a4a0a2b06c7e15bba2571823b", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 19977: multiple error messages when type switching on an undefined\n+\n+package foo\n+\n+func Foo() {\n+\tswitch x := a.(type) { // ERROR \"undefined: a|reference to undefined name .*a\"\n+\tdefault:\n+\t\t_ = x\n+\t}\n+}"}]}