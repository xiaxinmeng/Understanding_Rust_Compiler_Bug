{"sha": "135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1ZWJjMzY3M2FkN2Y5NTJkN2EyOTExYjRlZTk5NDU4NTVmYTNhZA==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@cygnus.com", "date": "2000-08-25T10:20:22Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-08-25T10:20:22Z"}, "message": "basic-block.h (struct loop): Rename `exits' field to `exit_edges'.\n\n\t* basic-block.h (struct loop): Rename `exits' field to\n\t`exit_edges'.  Add `entry_edges' and `num_entries' fields.\n\n\t* flow.c (flow_loop_exit_edges_find): Rename from flow_loop_exits_find.\n\t(flow_loop_entry_edges_find): Add.\n\t(flow_edge_list_print): Rename from flow_exits_print.\n\t(flow_loops_find): Call flow_loop_entry_edges_find.\n\t(flow_loop_dump): Dump entry_edges list.\n\t(flow_loops_free): Free entry_edges.\n\nFrom-SVN: r35980", "tree": {"sha": "d8d8b5f87b80fef7bee9e816ccd7cb43ed871680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8d8b5f87b80fef7bee9e816ccd7cb43ed871680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/comments", "author": null, "committer": null, "parents": [{"sha": "6057c0e602b35cea8318d511ef6e9fb2b6c0f98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6057c0e602b35cea8318d511ef6e9fb2b6c0f98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6057c0e602b35cea8318d511ef6e9fb2b6c0f98c"}], "stats": {"total": 148, "additions": 118, "deletions": 30}, "files": [{"sha": "e4b4d6e92f633e4a01c82c189367d36ba74dfb57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "patch": "@@ -1,5 +1,17 @@\n 2000-08-26  Michael Hayes  <mhayes@cygnus.com>\n \n+\t* basic-block.h (struct loop): Rename `exits' field to\n+\t`exit_edges'.  Add `entry_edges' and `num_entries' fields.\n+\n+\t* flow.c (flow_loop_exit_edges_find): Rename from flow_loop_exits_find.\n+\t(flow_loop_entry_edges_find): Add.\n+\t(flow_edge_list_print): Rename from flow_exits_print.\n+\t(flow_loops_find): Call flow_loop_entry_edges_find.\n+\t(flow_loop_dump): Dump entry_edges list.\n+\t(flow_loops_free): Free entry_edges.\n+\t\n+2000-08-26  Michael Hayes  <mhayes@cygnus.com>\n+\t\n \t* loop.c (loop_dump_aux, debug_loop): New functions.\n \t(LOOP_BLOCK_NUM_1, LOOP_BLOCK_NUM, LOOP_INSN_UID): New macros.\n "}, {"sha": "7e11ed5e5ec63088142bbabe7f440618eaba099a", "filename": "gcc/basic-block.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "patch": "@@ -288,8 +288,14 @@ struct loop\n   /* Number of blocks contained within the loop.  */\n   int num_nodes;\n \n+  /* Array of edges that enter the loop.  */\n+  edge *entry_edges;\n+\n+  /* Number of edges that enter the loop.  */\n+  int num_entries;\n+\n   /* Array of edges that exit the loop.  */\n-  edge *exits;\n+  edge *exit_edges;\n \n   /* Number of edges that exit the loop.  */\n   int num_exits;"}, {"sha": "a3597a26724ad396a563778fcb4d6393e42ecedc", "filename": "gcc/flow.c", "status": "modified", "additions": 99, "deletions": 29, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135ebc3673ad7f952d7a2911b4ee9945855fa3ad/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=135ebc3673ad7f952d7a2911b4ee9945855fa3ad", "patch": "@@ -411,11 +411,17 @@ static void dump_edge_info\t\tPARAMS ((FILE *, edge, int));\n static void invalidate_mems_from_autoinc PARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t  rtx));\n static void remove_fake_successors\tPARAMS ((basic_block));\n-static void flow_nodes_print\tPARAMS ((const char *, const sbitmap, FILE *));\n-static void flow_exits_print PARAMS ((const char *, const edge *, int, FILE *));\n-static void flow_loops_cfg_dump\t\tPARAMS ((const struct loops *, FILE *));\n-static int flow_loop_nested_p\t\tPARAMS ((struct loop *, struct loop *));\n-static int flow_loop_exits_find\t\tPARAMS ((const sbitmap, edge **));\n+static void flow_nodes_print\t\tPARAMS ((const char *, const sbitmap, \n+\t\t\t\t\t\t FILE *));\n+static void flow_edge_list_print\tPARAMS ((const char *, const edge *,\n+\t\t\t\t\t\t int, FILE *));\n+static void flow_loops_cfg_dump\t\tPARAMS ((const struct loops *,\n+\t\t\t\t\t\t FILE *));\n+static int flow_loop_nested_p\t\tPARAMS ((struct loop *, \n+\t\t\t\t\t\t struct loop *));\n+static int flow_loop_entry_edges_find\tPARAMS ((basic_block, const sbitmap, \n+\t\t\t\t\t\t edge **));\n+static int flow_loop_exit_edges_find\tPARAMS ((const sbitmap, edge **));\n static int flow_loop_nodes_find\tPARAMS ((basic_block, basic_block, sbitmap));\n static int flow_depth_first_order_compute PARAMS ((int *, int *));\n static void flow_dfs_compute_reverse_init\n@@ -7119,36 +7125,45 @@ redirect_edge_pred (e, new_pred)\n \f\n /* Dump the list of basic blocks in the bitmap NODES.  */\n \n-static void\n+static void \n flow_nodes_print (str, nodes, file)\n      const char *str;\n      const sbitmap nodes;\n      FILE *file;\n {\n   int node;\n \n+  if (! nodes)\n+    return;\n+\n   fprintf (file, \"%s { \", str);\n   EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, node, {fprintf (file, \"%d \", node);});\n   fputs (\"}\\n\", file);\n }\n \n-/* Dump the list of exiting edges in the array EDGES.  */\n \n-static void\n-flow_exits_print (str, edges, num_edges, file)\n+/* Dump the list of edges in the array EDGE_LIST.  */\n+\n+static void \n+flow_edge_list_print (str, edge_list, num_edges, file)\n      const char *str;\n-     const edge *edges;\n+     const edge *edge_list;\n      int num_edges;\n      FILE *file;\n {\n   int i;\n \n+  if (! edge_list)\n+    return;\n+\n   fprintf (file, \"%s { \", str);\n   for (i = 0; i < num_edges; i++)\n-    fprintf (file, \"%d->%d \", edges[i]->src->index, edges[i]->dest->index);\n+    fprintf (file, \"%d->%d \", edge_list[i]->src->index,\n+\t     edge_list[i]->dest->index);\n   fputs (\"}\\n\", file);\n }\n \n+\n /* Dump loop related CFG information.  */\n \n static void\n@@ -7225,10 +7240,12 @@ flow_loop_dump (loop, file, loop_dump_aux, verbose)\n \t   loop->depth, loop->level,\n \t   (long) (loop->outer ? loop->outer->num : -1));\n \n+  flow_edge_list_print (\";;   entry edges\", loop->entry_edges,\n+\t\t\tloop->num_entries, file);\n   fprintf (file, \";;  %d\", loop->num_nodes);\n   flow_nodes_print (\" nodes\", loop->nodes, file);\n-  fprintf (file, \";;  %d\", loop->num_exits);\n-  flow_exits_print (\" exits\", loop->exits, loop->num_exits, file);\n+  flow_edge_list_print (\";;   exit edges\", loop->exit_edges,\n+\t\t\tloop->num_exits, file);\n \n   if (loop_dump_aux)\n     loop_dump_aux (loop, file, verbose);\n@@ -7314,8 +7331,10 @@ flow_loops_free (loops)\n \n \t  if (loop->nodes)\n \t    sbitmap_free (loop->nodes);\n-\t  if (loop->exits)\n-\t    free (loop->exits);\n+\t  if (loop->entry_edges)\n+\t    free (loop->entry_edges);\n+\t  if (loop->exit_edges)\n+\t    free (loop->exit_edges);\n \t}\n       free (loops->array);\n       loops->array = NULL;\n@@ -7330,29 +7349,72 @@ flow_loops_free (loops)\n }\n \n \n-/* Find the exits from the loop using the bitmap of loop nodes NODES\n-   and store in EXITS array.  Return the number of exits from the\n-   loop.  */\n+/* Find the entry edges into the loop with header HEADER and nodes\n+   NODES and store in ENTRY_EDGES array.  Return the number of entry\n+   edges from the loop.  */\n+\n+static int\n+flow_loop_entry_edges_find (header, nodes, entry_edges)\n+     basic_block header;\n+     const sbitmap nodes;\n+     edge **entry_edges;\n+{\n+  edge e;\n+  int num_entries;\n+\n+  *entry_edges = NULL;\n+\n+  num_entries = 0;\n+  for (e = header->pred; e; e = e->pred_next)\n+    {\n+      basic_block src = e->src;\n+      \n+      if (src == ENTRY_BLOCK_PTR || ! TEST_BIT (nodes, src->index))\n+\tnum_entries++;\n+    }\n+\n+  if (! num_entries)\n+    abort ();\n+\n+  *entry_edges = (edge *) xmalloc (num_entries * sizeof (edge *));\n+\n+  num_entries = 0;\n+  for (e = header->pred; e; e = e->pred_next)\n+    {\n+      basic_block src = e->src;\n+      \n+      if (src == ENTRY_BLOCK_PTR || ! TEST_BIT (nodes, src->index))\n+\t(*entry_edges)[num_entries++] = e;\n+    }\n+\n+  return num_entries;\n+}\n+\n+\n+/* Find the exit edges from the loop using the bitmap of loop nodes\n+   NODES and store in EXIT_EDGES array.  Return the number of\n+   exit edges from the loop.  */\n \n static int\n-flow_loop_exits_find (nodes, exits)\n+flow_loop_exit_edges_find (nodes, exit_edges)\n      const sbitmap nodes;\n-     edge **exits;\n+     edge **exit_edges;\n {\n   edge e;\n   int node;\n   int num_exits;\n \n-  *exits = NULL;\n+  *exit_edges = NULL;\n \n   /* Check all nodes within the loop to see if there are any\n      successors not in the loop.  Note that a node may have multiple\n-     exiting edges.  */\n+     exiting edges ?????  A node can have one jumping edge and one fallthru\n+     edge so only one of these can exit the loop.  */\n   num_exits = 0;\n   EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, node, {\n     for (e = BASIC_BLOCK (node)->succ; e; e = e->succ_next)\n       {\n-\tbasic_block dest = e->dest;\n+\tbasic_block dest = e->dest;\t  \n \n \tif (dest == EXIT_BLOCK_PTR || ! TEST_BIT (nodes, dest->index))\n \t    num_exits++;\n@@ -7362,23 +7424,24 @@ flow_loop_exits_find (nodes, exits)\n   if (! num_exits)\n     return 0;\n \n-  *exits = (edge *) xmalloc (num_exits * sizeof (edge *));\n+  *exit_edges = (edge *) xmalloc (num_exits * sizeof (edge *));\n \n   /* Store all exiting edges into an array.  */\n   num_exits = 0;\n   EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, node, {\n     for (e = BASIC_BLOCK (node)->succ; e; e = e->succ_next)\n       {\n-\tbasic_block dest = e->dest;\n+\tbasic_block dest = e->dest;\t  \n \n \tif (dest == EXIT_BLOCK_PTR || ! TEST_BIT (nodes, dest->index))\n-\t  (*exits)[num_exits++] = e;\n+\t  (*exit_edges)[num_exits++] = e;\n       }\n   });\n \n   return num_exits;\n }\n \n+\n /* Find the nodes contained within the loop with header HEADER and\n    latch LATCH and store in NODES.  Return the number of nodes within\n    the loop.  */\n@@ -7918,10 +7981,17 @@ flow_loops_find (loops)\n \t\t  loop->last\n \t\t    = BASIC_BLOCK (sbitmap_last_set_bit (loop->nodes));\n \n-\t\t  /* Find edges which exit the loop.  Note that a node\n-\t\t     may have several exit edges.  */\n+\t\t  /* Find edges which enter the loop header.\n+\t\t     Note that the entry edges should only\n+\t\t     enter the header of a natural loop.  */\n+\t\t  loop->num_entries\n+\t\t    = flow_loop_entry_edges_find (loop->header, loop->nodes,\n+\t\t\t\t\t\t  &loop->entry_edges);\n+\n+\t\t  /* Find edges which exit the loop.  */\n \t\t  loop->num_exits\n-\t\t    = flow_loop_exits_find (loop->nodes, &loop->exits);\n+\t\t    = flow_loop_exit_edges_find (loop->nodes,\n+\t\t\t\t\t\t &loop->exit_edges);\n \n \t\t  /* Look to see if the loop has a pre-header node.  */\n \t\t  loop->pre_header = flow_loop_pre_header_find (header, dom);"}]}