{"sha": "9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzNTM4NGQ3NGZiMGY4YjBmOGEyNWI2ZDQ0MzQyZDU5OTE0NTVlZQ==", "commit": {"author": {"name": "Rask Ingemann Lambertsen", "email": "rask@sygehus.dk", "date": "2007-06-30T11:28:57Z"}, "committer": {"name": "Rask Ingemann Lambertsen", "email": "rask@gcc.gnu.org", "date": "2007-06-30T11:28:57Z"}, "message": "combine.c (combine_validate_cost): New parameter NEWOTHERPAT.\n\n\t* combine.c (combine_validate_cost): New parameter NEWOTHERPAT.\n\t(try_combine): Move potential calls to undo_all() so they happen\n\tbefore we commit to using the combined insns.\n\nFrom-SVN: r126142", "tree": {"sha": "be2b2c854a34ecde6efefc3a98395e98106b9a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be2b2c854a34ecde6efefc3a98395e98106b9a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35384d74fb0f8b0f8a25b6d44342d5991455ee/comments", "author": null, "committer": null, "parents": [{"sha": "2ed2257828a1664c503c4e906181da247acc81a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed2257828a1664c503c4e906181da247acc81a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed2257828a1664c503c4e906181da247acc81a1"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "7c3dd64f71b06f5112e4f3ce31268da9c363a75f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35384d74fb0f8b0f8a25b6d44342d5991455ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35384d74fb0f8b0f8a25b6d44342d5991455ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "patch": "@@ -1,3 +1,9 @@\n+2007-06-30  Rask Ingemann Lambertsen <rask@sygehus.dk>\n+\n+\t* combine.c (combine_validate_cost): New parameter NEWOTHERPAT.\n+\t(try_combine): Move potential calls to undo_all() so they happen\n+\tbefore we commit to using the combined insns.\n+\n 2006-06-30  Jan Hubicka  <jh@suse.cz>\n \n \t* loop-unroll.c (unroll_loop_runtime_iterations): Unshare newly emit    "}, {"sha": "5cf65bae19203bd6e6530136f75ca7abaa2d378e", "filename": "gcc/combine.c", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35384d74fb0f8b0f8a25b6d44342d5991455ee/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35384d74fb0f8b0f8a25b6d44342d5991455ee/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9d35384d74fb0f8b0f8a25b6d44342d5991455ee", "patch": "@@ -741,14 +741,17 @@ do_SUBST_MODE (rtx *into, enum machine_mode newval)\n #define SUBST_MODE(INTO, NEWVAL)  do_SUBST_MODE(&(INTO), (NEWVAL))\n \f\n /* Subroutine of try_combine.  Determine whether the combine replacement\n-   patterns NEWPAT and NEWI2PAT are cheaper according to insn_rtx_cost\n-   that the original instruction sequence I1, I2 and I3.  Note that I1\n-   and/or NEWI2PAT may be NULL_RTX.  This function returns false, if the\n-   costs of all instructions can be estimated, and the replacements are\n-   more expensive than the original sequence.  */\n+   patterns NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to\n+   insn_rtx_cost that the original instruction sequence I1, I2, I3 and\n+   undobuf.other_insn.  Note that I1 and/or NEWI2PAT may be NULL_RTX. \n+   NEWOTHERPAT and undobuf.other_insn may also both be NULL_RTX.  This\n+   function returns false, if the costs of all instructions can be\n+   estimated, and the replacements are more expensive than the original\n+   sequence.  */\n \n static bool\n-combine_validate_cost (rtx i1, rtx i2, rtx i3, rtx newpat, rtx newi2pat)\n+combine_validate_cost (rtx i1, rtx i2, rtx i3, rtx newpat, rtx newi2pat,\n+\t\t       rtx newotherpat)\n {\n   int i1_cost, i2_cost, i3_cost;\n   int new_i2_cost, new_i3_cost;\n@@ -789,7 +792,7 @@ combine_validate_cost (rtx i1, rtx i2, rtx i3, rtx newpat, rtx newi2pat)\n       int old_other_cost, new_other_cost;\n \n       old_other_cost = INSN_COST (undobuf.other_insn);\n-      new_other_cost = insn_rtx_cost (PATTERN (undobuf.other_insn));\n+      new_other_cost = insn_rtx_cost (newotherpat);\n       if (old_other_cost > 0 && new_other_cost > 0)\n \t{\n \t  old_cost += old_other_cost;\n@@ -2159,6 +2162,8 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   int maxreg;\n   rtx temp;\n   rtx link;\n+  rtx other_pat = 0;\n+  rtx new_other_notes;\n   int i;\n \n   /* Exit early if one of the insns involved can't be used for\n@@ -3285,12 +3290,9 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   /* If we had to change another insn, make sure it is valid also.  */\n   if (undobuf.other_insn)\n     {\n-      rtx other_pat = PATTERN (undobuf.other_insn);\n-      rtx new_other_notes;\n-      rtx note, next;\n-\n       CLEAR_HARD_REG_SET (newpat_used_regs);\n \n+      other_pat = PATTERN (undobuf.other_insn);\n       other_code_number = recog_for_combine (&other_pat, undobuf.other_insn,\n \t\t\t\t\t     &new_other_notes);\n \n@@ -3299,24 +3301,8 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t  undo_all ();\n \t  return 0;\n \t}\n-\n-      PATTERN (undobuf.other_insn) = other_pat;\n-\n-      /* If any of the notes in OTHER_INSN were REG_UNUSED, ensure that they\n-\t are still valid.  Then add any non-duplicate notes added by\n-\t recog_for_combine.  */\n-      for (note = REG_NOTES (undobuf.other_insn); note; note = next)\n-\t{\n-\t  next = XEXP (note, 1);\n-\n-\t  if (REG_NOTE_KIND (note) == REG_UNUSED\n-\t      && ! reg_set_p (XEXP (note, 0), PATTERN (undobuf.other_insn)))\n-\t    remove_note (undobuf.other_insn, note);\n-\t}\n-\n-      distribute_notes (new_other_notes, undobuf.other_insn,\n-\t\t\tundobuf.other_insn, NULL_RTX, NULL_RTX, NULL_RTX);\n     }\n+\n #ifdef HAVE_cc0\n   /* If I2 is the CC0 setter and I3 is the CC0 user then check whether\n      they are adjacent to each other or not.  */\n@@ -3333,7 +3319,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \n   /* Only allow this combination if insn_rtx_costs reports that the\n      replacement instructions are cheaper than the originals.  */\n-  if (!combine_validate_cost (i1, i2, i3, newpat, newi2pat))\n+  if (!combine_validate_cost (i1, i2, i3, newpat, newi2pat, other_pat))\n     {\n       undo_all ();\n       return 0;\n@@ -3342,6 +3328,28 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   /* We now know that we can do this combination.  Merge the insns and\n      update the status of registers and LOG_LINKS.  */\n \n+  if (undobuf.other_insn)\n+    {\n+      rtx note, next;\n+\n+      PATTERN (undobuf.other_insn) = other_pat;\n+\n+      /* If any of the notes in OTHER_INSN were REG_UNUSED, ensure that they\n+\t are still valid.  Then add any non-duplicate notes added by\n+\t recog_for_combine.  */\n+      for (note = REG_NOTES (undobuf.other_insn); note; note = next)\n+\t{\n+\t  next = XEXP (note, 1);\n+\n+\t  if (REG_NOTE_KIND (note) == REG_UNUSED\n+\t      && ! reg_set_p (XEXP (note, 0), PATTERN (undobuf.other_insn)))\n+\t    remove_note (undobuf.other_insn, note);\n+\t}\n+\n+      distribute_notes (new_other_notes, undobuf.other_insn,\n+\t\t\tundobuf.other_insn, NULL_RTX, NULL_RTX, NULL_RTX);\n+    }\n+\n   if (swap_i2i3)\n     {\n       rtx insn;"}]}