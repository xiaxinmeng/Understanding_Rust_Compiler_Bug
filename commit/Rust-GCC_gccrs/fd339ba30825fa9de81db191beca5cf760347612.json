{"sha": "fd339ba30825fa9de81db191beca5cf760347612", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzMzliYTMwODI1ZmE5ZGU4MWRiMTkxYmVjYTVjZjc2MDM0NzYxMg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-09-17T08:02:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T08:02:35Z"}, "message": "[Ada] Minor fixes mostly in comments of runtime arithmetic unit\n\nMultiple comments in functions Double_Divide and Scaled_Divide were\nincorrect. Now fixed.\n\nAlso change the expression (if Zhi /= 0 then Ylo * Zhi else 0) to the\nsimpler equivalent (Ylo * Zhi) in Double_Divide.\n\nAlso add a comment explaining why the implementation of Algorithm D for\nmultiple-precision division from the 2nd Edition of The Art of Computer\nProgramming does not suffer from two bugs discovered on that version.\n\nThere is no impact on execution, hence no test.\n\n2019-09-17  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-arit64.adb (Double_Divide): Simplify needlessly\n\tcomplex computation. Fix comments.\n\t(Scaled_Divide): Fix comments. Explain why implementation does\n\tnot suffer from bugs in Algorithm D from 2nd Edition of TAOCP.\n\nFrom-SVN: r275792", "tree": {"sha": "1942191014b9746d6b85bfd321e6b69809bea2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1942191014b9746d6b85bfd321e6b69809bea2fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd339ba30825fa9de81db191beca5cf760347612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd339ba30825fa9de81db191beca5cf760347612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd339ba30825fa9de81db191beca5cf760347612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd339ba30825fa9de81db191beca5cf760347612/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4ba72cbad263d9b4fd211534c117343ed5333a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba72cbad263d9b4fd211534c117343ed5333a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ba72cbad263d9b4fd211534c117343ed5333a1"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "0d7fc8f8710aec08c88d2fceee47dac24496eee8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd339ba30825fa9de81db191beca5cf760347612/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd339ba30825fa9de81db191beca5cf760347612/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd339ba30825fa9de81db191beca5cf760347612", "patch": "@@ -1,3 +1,10 @@\n+2019-09-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit64.adb (Double_Divide): Simplify needlessly\n+\tcomplex computation. Fix comments.\n+\t(Scaled_Divide): Fix comments. Explain why implementation does\n+\tnot suffer from bugs in Algorithm D from 2nd Edition of TAOCP.\n+\n 2019-09-17  Yannick Moy  <moy@adacore.com>\n \n \t* libgnat/s-arit64.adb (Scaled_Divide): Add protection against"}, {"sha": "b5a5ac495b15724ce07cc16652b2a1c833a45c13", "filename": "gcc/ada/libgnat/s-arit64.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd339ba30825fa9de81db191beca5cf760347612/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd339ba30825fa9de81db191beca5cf760347612/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-arit64.adb?ref=fd339ba30825fa9de81db191beca5cf760347612", "patch": "@@ -161,7 +161,7 @@ package body System.Arith_64 is\n          end if;\n \n       else\n-         T2 := (if Zhi /= 0 then Ylo * Zhi else 0);\n+         T2 := Ylo * Zhi;\n       end if;\n \n       T1 := Ylo * Zlo;\n@@ -179,7 +179,7 @@ package body System.Arith_64 is\n \n       Den_Pos := (Y < 0) = (Z < 0);\n \n-      --  Check overflow case of largest negative number divided by 1\n+      --  Check overflow case of largest negative number divided by -1\n \n       if X = Int64'First and then Du = 1 and then not Den_Pos then\n          Raise_Error;\n@@ -404,15 +404,16 @@ package body System.Arith_64 is\n             Ru := T2 rem Zlo;\n          end if;\n \n-      --  If divisor is double digit and too large, raise error\n+      --  If divisor is double digit and dividend is too large, raise error\n \n       elsif (D (1) & D (2)) >= Zu then\n          Raise_Error;\n \n       --  This is the complex case where we definitely have a double digit\n       --  divisor and a dividend of at least three digits. We use the classical\n-      --  multiple division algorithm (see section (4.3.1) of Knuth's \"The Art\n-      --  of Computer Programming\", Vol. 2 for a description (algorithm D).\n+      --  multiple-precision division algorithm (see section (4.3.1) of Knuth's\n+      --  \"The Art of Computer Programming\", Vol. 2 for a description\n+      --  (algorithm D).\n \n       else\n          --  First normalize the divisor so that it has the leading bit on.\n@@ -450,7 +451,7 @@ package body System.Arith_64 is\n \n          --  Note that when we scale up the dividend, it still fits in four\n          --  digits, since we already tested for overflow, and scaling does\n-         --  not change the invariant that (D (1) & D (2)) >= Zu.\n+         --  not change the invariant that (D (1) & D (2)) < Zu.\n \n          T1 := Shift_Left (D (1) & D (2), Scale);\n          D (1) := Hi (T1);\n@@ -485,6 +486,19 @@ package body System.Arith_64 is\n \n             --  Adjust quotient digit if it was too high\n \n+            --  We use the version of the algorithm in the 2nd Edition of\n+            --  \"The Art of Computer Programming\". This had a bug not\n+            --  discovered till 1995, see Vol 2 errata:\n+            --     http://www-cs-faculty.stanford.edu/~uno/err2-2e.ps.gz.\n+            --  Under rare circumstances the expression in the test could\n+            --  overflow. This version was further corrected in 2005, see\n+            --  Vol 2 errata:\n+            --     http://www-cs-faculty.stanford.edu/~uno/all2-pre.ps.gz.\n+            --  This implementation is not impacted by these bugs, due to the\n+            --  use of a word-size comparison done in function Le3 instead of\n+            --  a comparison on two-word integer quantities in the original\n+            --  algorithm.\n+\n             loop\n                exit when Le3 (S1, S2, S3, D (J + 1), D (J + 2), D (J + 3));\n                Qd (J + 1) := Qd (J + 1) - 1;"}]}