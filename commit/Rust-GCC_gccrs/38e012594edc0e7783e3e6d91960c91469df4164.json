{"sha": "38e012594edc0e7783e3e6d91960c91469df4164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlMDEyNTk0ZWRjMGU3NzgzZTNlNmQ5MTk2MGM5MTQ2OWRmNDE2NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-06T21:09:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-06T21:09:07Z"}, "message": "typo typo fixes fixes\n\nFrom-SVN: r19601", "tree": {"sha": "e5214fcd8a05d4b329467434fcdea16f33d3ce7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5214fcd8a05d4b329467434fcdea16f33d3ce7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e012594edc0e7783e3e6d91960c91469df4164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e012594edc0e7783e3e6d91960c91469df4164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e012594edc0e7783e3e6d91960c91469df4164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e012594edc0e7783e3e6d91960c91469df4164/comments", "author": null, "committer": null, "parents": [{"sha": "f103890ba552cf55c0aa79d35968db46785a94d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f103890ba552cf55c0aa79d35968db46785a94d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f103890ba552cf55c0aa79d35968db46785a94d0"}], "stats": {"total": 404, "additions": 202, "deletions": 202}, "files": [{"sha": "2c36113fcafed9aa831aa464882ff19f0095aa7d", "filename": "ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3625,7 +3625,7 @@ Mon Oct  4 16:15:09 1993  david d `zoo' zuhn  (zoo@rtl.cygnus.com)\n \t* configure.in: default to '--with-gnu-as' and '--with-gnu-ld'\n \tif gas and ld are in the source tree and are in ${configdirs}.\n \tIf ${use_gnu_as} or ${use_gnu_ld} are 'no', then don't set the\n-\tthe --with options (but still pass them down on the command line,\n+\t--with options (but still pass them down on the command line,\n \tif they were explicitly specified).\n \n Fri Sep 24 19:11:13 1993  david d `zoo' zuhn  (zoo@rtl.cygnus.com)"}, {"sha": "dfab691b50443b5bad9c64a2b13931f4900665cd", "filename": "contrib/fixinc/regex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/contrib%2Ffixinc%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/contrib%2Ffixinc%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffixinc%2Fregex.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -24,7 +24,7 @@\n   #pragma alloca\n #endif\n \n-/* $Id: regex.c,v 1.1 1998/03/20 16:19:41 korbb Exp $ */\n+/* $Id: regex.c,v 1.3 1999/01/11 13:25:47 law Exp $ */\n \n #define _GNU_SOURCE\n \n@@ -2026,7 +2026,7 @@ regex_compile (pattern, size, syntax, bufp)\n             default:\n             normal_backslash:\n               /* You might think it would be useful for \\ to mean\n-                 not to translate; but if we don't translate it\n+                 not to translate; but if we don't translate it,\n                  it will never match anything.  */\n               c = TRANSLATE (c);\n               goto normal_char;\n@@ -3203,7 +3203,7 @@ re_match (bufp, string, size, pos, regs)\n \n \n /* re_match_2 matches the compiled pattern in BUFP against the\n-   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1\n+   (virtual) concatenation of STRING1 and STRING2 (of length SIZE1\n    and SIZE2, respectively).  We start matching at POS, and stop\n    matching at STOP.\n    \n@@ -3253,7 +3253,7 @@ re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)\n      to resume scanning the pattern; the second one is where to resume\n      scanning the strings.  If the latter is zero, the failure point is\n      a ``dummy''; if a failure happens and the failure point is a dummy,\n-     it gets discarded and the next next one is tried.  */\n+     it gets discarded and the next one is tried.  */\n   fail_stack_type fail_stack;\n #ifdef DEBUG\n   static unsigned failure_id = 0;"}, {"sha": "7f041294ff6553be4f4b86d11f60f1c5f4f0eef3", "filename": "etc/make-stds.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/etc%2Fmake-stds.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/etc%2Fmake-stds.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/etc%2Fmake-stds.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -79,7 +79,7 @@ foo.1 : foo.man sedscript\n \n @noindent\n will fail when the build directory is not the source directory, because\n-@file{foo.man} and @file{sedscript} are in the the source directory.\n+@file{foo.man} and @file{sedscript} are in the source directory.\n \n When using GNU @code{make}, relying on @samp{VPATH} to find the source\n file will work in the case where there is a single dependency file,\n@@ -724,7 +724,7 @@ The easiest way to do this is to create a subdirectory appropriately\n named, use @code{ln} or @code{cp} to install the proper files in it, and\n then @code{tar} that subdirectory.\n \n-Compress the tar file file with @code{gzip}.  For example, the actual\n+Compress the tar file with @code{gzip}.  For example, the actual\n distribution file for GCC version 1.40 is called @file{gcc-1.40.tar.gz}.\n \n The @code{dist} target should explicitly depend on all non-source files"}, {"sha": "ff0d88bc3fe5a10c51aa84fe6e53d2b9aa0e907f", "filename": "etc/standards.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/etc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/etc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/etc%2Fstandards.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2570,7 +2570,7 @@ also contain this information.  If the manual is changing more\n frequently than or independent of the program, also state a version\n number for the manual in both of these places.\n \n-Each program documented in the manual should should have a node named\n+Each program documented in the manual should have a node named\n @samp{@var{program} Invocation} or @samp{Invoking @var{program}}.  This\n node (together with its subnodes, if any) should describe the program's\n command line arguments and how to run it (the sort of information people"}, {"sha": "b46ca6fdbcb78eff6b774849fc3c0b2dca01d05d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -8769,7 +8769,7 @@ Mon Aug 11 10:04:49 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Integrate reload bugfix from Wilon which enables the PA port\n \tto bootstrap again.\n-\t* reload1.c (reload): Sum needs for both OPADDR_ADDR and and\n+\t* reload1.c (reload): Sum needs for both OPADDR_ADDR and\n \tOPERAND_ADDRESS when computing how many registers an insn needs.\n \t(reload_reg_free_p): OPADDR_ADDR and OPERAND_ADDRESS reloads do\n \tconflict."}, {"sha": "513ac72c28a34801e9bcbe55a25b4b09af91fca6", "filename": "gcc/ChangeLog.10", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.10?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4259,7 +4259,7 @@ Wed Nov 29 14:06:13 1995  Jim Wilson  <wilson@cygnus.com>\n \n Wed Nov 29 13:59:58 1995  J\"orn Rennecke (amylaar@meolyon.hanse.de)\n \n-\t* c-decl.c (duplicate_decls): Add new paramter different_binding_level.\n+\t* c-decl.c (duplicate_decls): Add new parameter different_binding_level.\n \tLots of changes to use new new parameter.\n \t(pushdecl): Delete variable declared_global.  New variable\n \tdifferent_binding_level and code to set it.  Move extern/static\n@@ -5226,7 +5226,7 @@ Thu Sep 14 14:15:16 1995  Stan Cox  (coxs@dg-rtp.dg.com)\n \n \t* m88k.h (VERSION_INFO1): Removed BCS reference.\n \t* m88k/dgux.h (ASM_SPEC, *_LEGEND):\n-\tAdded -mno-legend option. -mstandard no longer implies that legend\n+\tAdded -mno-legend option. -mstandard no longer implies that\n \tlegend information not be produced.\n \t(LINK_SPEC): Removed -z text\n \n@@ -5422,7 +5422,7 @@ Thu Aug 31 08:31:40 1995  Richard Kenner  (kenner@vlsi1.ultra.nyu.edu)\n \n \t* va-alpha.h (__gnuc_va_list): Make __offset an int.\n \t* alpha.c (alpha_builtin_saveregs): Properly compute address\n-\tof __offset both both OSF and WINNT.\n+\tof __offset both OSF and WINNT.\n \n \t* xm-alpha.h (sbrk): Don't define here.\n \t* gmon.c (sbrk): Define here for __alpha."}, {"sha": "2bc3d590ac9114aa176f70baf45309e9be4cd38a", "filename": "gcc/ChangeLog.11", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.11?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -6291,7 +6291,7 @@ Sun Apr 20 10:45:35 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(based_loc_descr): Likewise.\n \t(add_bound_info): Delete default case.\n \tAdd cases for CONVERT_EXPR and NON_LVALUE_EXPR; treat like NOP_EXPR.\n-\tChange NOP_EXPR to to recursive call.\n+\tChange NOP_EXPR to recursive call.\n \t(add_type_attribute): Ignore unnamed subtype of integral or FP.\n \t(gen_subprogram_die): Use reg_loc_descriptor.\n \t(dwarf2out_decl): Ignore nested functions.\n@@ -11751,7 +11751,7 @@ Mon Jul  8 18:00:33 1996  Jim Wilson  <wilson@cygnus.com>\n \tenclose it in a PARALLEL and set the PARALLEL mode correctly.\n \t* mips.md (call_value): Call gen_call_value_multiple_internal0\n \tonly if there are multiple return values.  Strip the PARALLEL off\n-\tif there there is only one return value.\n+\tif there is only one return value.\n \n Mon Jul  8 16:27:33 1996  Jeffrey A. Law  <law@cygnus.com>\n "}, {"sha": "7e03e765521bdccd9ec71b1e14db5eae257b58b9", "filename": "gcc/ChangeLog.lib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.lib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FChangeLog.lib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.lib?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3746,7 +3746,7 @@ Tue Dec 20 14:57:38 1988  Pace Willisson  (pace at prep.at.mit.edu)\n \tis the same as on modern sun systems; a_flags can have\n \tmachine specific flags.  (There may be some endian problems\n \there:  You would like to have the magic number be the\n-\tfirst two bytes in the file, and then then next two could\n+\tfirst two bytes in the file, and then the next two could\n \tbe these options.  It looks like the 68000 definitions\n \thave to declare the options first to force this to happen.)\n \tDefined M_386 for a_machtype."}, {"sha": "fc09b645f7703cc7a815d55eb321934862cb926c", "filename": "gcc/NEWS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FNEWS?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -732,7 +732,7 @@ to declare complex data types.  See the manual for details.\n \n * GCC now supports `long double' meaningfully on the Sparc (128-bit\n floating point) and on the 386 (96-bit floating point).  The Sparc\n-support is enabled on on Solaris 2.x because earlier system versions\n+support is enabled on Solaris 2.x because earlier system versions\n (SunOS 4) have bugs in the emulation.\n \n * All targets now have assertions for cpu, machine and system.  So you"}, {"sha": "2f508e695e1b79b2d23af83f3bf2bf712e8c797d", "filename": "gcc/PROJECTS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FPROJECTS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FPROJECTS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FPROJECTS?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -14,7 +14,7 @@ Haifa scheduler (haifa-sched.c, loop.[ch], unroll.[ch], genattrtab.c):\n   * Someone needs make one (or more) passes over the scheduler as a whole to\n   just clean it up.  Try to move the machine dependent bits into the target\n   files where they belong, avoid re-creating functions where or near\n-  equivalents already exist (ie is_conditional_branch and friends), etc etc.\n+  equivalents already exist (ie is_conditional_branch and friends), etc., etc.\n \n   * Document the new scheduling options.  Remove those options which are\n   not really useful (like reverse scheduling for example).  In general"}, {"sha": "97459508b3c4c876ee36d0bdadfafc7fd3795dee", "filename": "gcc/README.DWARF", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FREADME.DWARF", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FREADME.DWARF", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.DWARF?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -11,7 +11,7 @@ For general information about the DWARF debugging information language,\n you should obtain the DWARF version 1 specification document (and perhaps\n also the DWARF version 2 draft specification document) developed by the\n UNIX International Programming Languages Special Interest Group.  A copy\n-of the the DWARF version 1 specification (in PostScript form) may be\n+of the DWARF version 1 specification (in PostScript form) may be\n obtained either from me <rfg@netcom.com> or from the main Data General\n FTP server.  (See below.)  The file you are looking at now only describes\n known deviations from the DWARF version 1 specification, together with\n@@ -117,7 +117,7 @@ more of the formal parameter values, they may not have been \"homed\" yet,\n so you may get inaccurate answers (or perhaps even addressing errors).\n \n Some people may consider this simply a non-feature, but I consider it a\n-bug, and I hope to provide some some GNU-specific attributes (on function\n+bug, and I hope to provide some GNU-specific attributes (on function\n DIEs) which will specify the address of the end of the prologue and the\n address of the beginning of the epilogue in a future release.\n \n@@ -159,7 +159,7 @@ is required by the current DWARF draft specification.\n Specifically, the current DWARF draft specification seems to require that\n the type of an non-unsigned integral bit-field member of a struct or union\n type be represented as either a \"signed\" type or as a \"plain\" type,\n-depending upon the the exact set of keywords that were used in the\n+depending upon the exact set of keywords that were used in the\n type specification for the given bit-field member.  It was felt (by the\n UI/PLSIG) that this distinction between \"plain\" and \"signed\" integral types\n could have some significance (in the case of bit-fields) because ANSI C"}, {"sha": "aa68854b04dd3793e2695c22421ccb0dc69e8987", "filename": "gcc/README.X11", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FREADME.X11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2FREADME.X11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.X11?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -20,7 +20,7 @@ IF YOU THINK YOU MIGHT COMPILE X FOR SOLARIS 2, then you really don't\n need this patch: get /contrib/R5.SunOS5.patch.tar.Z from\n export.lcs.mit.edu instead.  It has everything you need to do the\n build for Solaris 2, sets you up to everything with GCC, and is\n-backward compatible with SunOS 4.*.  Get the the README\n+backward compatible with SunOS 4.*.  Get the README\n (/contrib/R5.SunOS5.patch.README at export) for more info.\n \n If you see undefined symbols _dlopen, _dlsym, or _dlclose when linking"}, {"sha": "913e2e20b9761b5d90d79711292c98a65fec6554", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2749,7 +2749,7 @@ get_directive_line (finput)\n       else\n         if (c == '\\'' || c == '\"')\n \t  looking_for = c;\t/* Don't stop buffering until we see another\n-\t\t\t\t   another one of these (or an EOF).  */\n+\t\t\t\t   one of these (or an EOF).  */\n \n       /* Handle backslash.  */\n       char_escaped = (c == '\\\\' && ! char_escaped);"}, {"sha": "ba67ec5c0374cedad21ba66ea744cf90e5f0e998", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2123,7 +2123,7 @@ pushdecl (x)\n \t\tMY_TYPE object;\n \n \t Later parts of the compiler might only know that `object' was of\n-\t type `struct S' if if were not for code just below.  With this\n+\t type `struct S' if it were not for code just below.  With this\n \t code however, later parts of the compiler see something like:\n \n \t\tstruct S' == struct S"}, {"sha": "6f84131dc3e586c1b4f82e329bc6d2d43efb673c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -571,7 +571,7 @@ GET_DIRECTIVE_LINE ()\n       else\n         if (c == '\\'' || c == '\"')\n \t  looking_for = c;\t/* Don't stop buffering until we see another\n-\t\t\t\t   another one of these (or an EOF).  */\n+\t\t\t\t   one of these (or an EOF).  */\n \n       /* Handle backslash.  */\n       char_escaped = (c == '\\\\' && ! char_escaped);"}, {"sha": "f8f0705e324455ea4cb397004778dcbbc5c4aef9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -454,7 +454,7 @@ comptypes (type1, type2)\n \n   /* Allow for two different type nodes which have essentially the same\n      definition.  Note that we already checked for equality of the type\n-     type qualifiers (just above).  */\n+     qualifiers (just above).  */\n \n   if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return 1;"}, {"sha": "1875632fc70911923c9f068b20576b514a0dc131", "filename": "gcc/cccp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4993,7 +4993,7 @@ open_include_file (filename, searchptr, importing, pinc)\n   return fd;\n }\n \n-/* Return the remapped name of the the include file FILENAME.\n+/* Return the remapped name of the include file FILENAME.\n    SEARCHPTR is the directory being tried from the include file path.  */\n \n static char *\n@@ -6049,7 +6049,7 @@ collect_expansion (buf, end, nargs, arglist)\n       }\n     } else {\n       /* In -traditional mode, recognize arguments inside strings and\n-\t and character constants, and ignore special properties of #.\n+\t character constants, and ignore special properties of #.\n \t Arguments inside strings are considered \"stringified\", but no\n \t extra quote marks are supplied.  */\n       switch (c) {\n@@ -6561,7 +6561,7 @@ assertion_install (name, len, hash)\n   return hp;\n }\n \n-/* Find the most recent hash node for name name (ending with first\n+/* Find the most recent hash node for name \"name\" (ending with first\n    non-identifier char) installed by install\n \n    If LEN is >= 0, it is the length of the name.\n@@ -9321,7 +9321,7 @@ install (name, len, type, value, hash)\n }\n \n /*\n- * find the most recent hash node for name name (ending with first\n+ * find the most recent hash node for name \"name\" (ending with first\n  * non-identifier char) installed by install\n  *\n  * If LEN is >= 0, it is the length of the name."}, {"sha": "334f77c50a4ff83e3dba2b99d2f2f78a0554c9f2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2834,7 +2834,7 @@ alpha_sa_size ()\n   is_stack_procedure = sa_size != 0 || alpha_ra_ever_killed ();\n \n   /* Decide whether to refer to objects off our PV via FP or PV.\n-     If we need need FP for something else or if we receive a nonlocal\n+     If we need FP for something else or if we receive a nonlocal\n      goto (which expects PV to contain the value), we must use PV.\n      Otherwise, start by assuming we can use FP.  */\n   base_regno = (frame_pointer_needed || current_function_has_nonlocal_label\n@@ -3642,7 +3642,7 @@ output_epilog (file, size)\n \t  reg_offset += 8;\n \t}\n \n-      /* Now restore any other used integer registers that that we saved,\n+      /* Now restore any other used integer registers that we saved,\n \t except for FP if it is being used as FP, since it must be\n \t restored last.  */\n "}, {"sha": "8f3f1b42b2067f164053898b79707a419a09de7d", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1817,7 +1817,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    missing exception handling info.  If we emit a gcc_compiled. label into\n    text, and the file has no code, then the DEC assembler gives us a zero\n    sized text section with no associated exception handling info.  The\n-   DEC linker sees this text section, and gives a warning saying saying that\n+   DEC linker sees this text section, and gives a warning saying that\n    the exception handling info is missing.  */\n #define ASM_IDENTIFY_GCC\n #define ASM_IDENTIFY_LANGUAGE"}, {"sha": "9d2dd3139b75f58938eda3a19fe00c395fdc62d0", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -64,7 +64,7 @@\n ;; On EV4 there are two classes of resources to consider: resources needed\n ;; to issue, and resources needed to execute.  IBUS[01] are in the first\n ;; category.  ABOX, BBOX, EBOX, FBOX, IMUL & FDIV make up the second.\n-;; (There are are a few other register-like resources, but ...)\n+;; (There are a few other register-like resources, but ...)\n \n ; First, describe all of the issue constraints with single cycle delays.\n ; All insns need a bus, but all except loads require one or the other."}, {"sha": "1920112e5c50180be3fc1029f4a352bdd698e17a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -6064,7 +6064,7 @@\n }\"\n [(set_attr \"type\" \"store4\")])\n \n-;; Similarly for the the floating point registers\n+;; Similarly for the floating point registers\n (define_insn \"*push_fp_multi\"\n   [(match_parallel 2 \"multi_register_push\"\n     [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")"}, {"sha": "8ff9ec460f9a6a0a0f07089244d86a489d3cab4f", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1747,7 +1747,7 @@ bit_operator (x, mode)\n    28-30* - ASHIFT | LSHIFTRT: rotate top byte, mask, move byte into place,\n                                zero others\n             ASHIFTRT: loop\n-   31     - ASHIFT | LSHIFTRT: rotate top byte, mask, byte byte into place,\n+   31     - ASHIFT | LSHIFTRT: rotate top byte, mask, move byte into place,\n                                zero others\n             ASHIFTRT: shll top byte, subx, copy to other bytes\n "}, {"sha": "c9dae27f9dc3ad1bad4a5d38e3e25fc53d8c0a90", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1892,7 +1892,7 @@ static char pic_label_name [256];\n static int pic_label_no = 0;\n \n /* This function generates code for -fpic that loads %ebx with\n-   with the return address of the caller and then returns.  */\n+   the return address of the caller and then returns.  */\n \n void\n asm_output_function_prefix (file, name)"}, {"sha": "36836f6ed309b675c37ef1307d29f36517feef9a", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -60,7 +60,7 @@ do { long value;\t\t\t\t\t\t\t\\\n /* This is how to output assembly code to define a `double' constant.\n    We always have to use a pair of .long pseudo-ops to do this because\n    the native SVR4 ELF assembler is buggy and it generates incorrect\n-   values when we try to use the the .double pseudo-op instead.  */\n+   values when we try to use the .double pseudo-op instead.  */\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\"}, {"sha": "3a72cdd7dcf8eb2778392f1456c359bb61e1224a", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -58,7 +58,7 @@ do { long value;\t\t\t\t\t\t\t\\\n /* This is how to output assembly code to define a `double' constant.\n    We always have to use a pair of .long pseudo-ops to do this because\n    the native SVR4 ELF assembler is buggy and it generates incorrect\n-   values when we try to use the the .double pseudo-op instead.  */\n+   values when we try to use the .double pseudo-op instead.  */\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\"}, {"sha": "316ba65a7d0d995674bdcd7fad5389fd4e54dab6", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1209,7 +1209,7 @@ do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n \n    On the i860, the following target-specific special codes are recognized:\n \n-\t`r'\tThe operand can be anything, but if is is an immediate zero\n+\t`r'\tThe operand can be anything, but if it is an immediate zero\n \t\tvalue (either integer or floating point) then it will be\n \t\trepresented as `r0' or as `f0' (respectively).\n "}, {"sha": "a4aae0f252a5a7356cc023484cce1136ce9998fd", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -83,7 +83,7 @@\n ;; patterns store away the operands.  Then, the scc and bcc patterns\n ;; emit RTL for both the compare and the branch.\n ;;\n-;; We start with the DEFINE_EXPANDs, then then DEFINE_INSNs to match\n+;; We start with the DEFINE_EXPANDs, then DEFINE_INSNs to match\n ;; the patterns.  Finally, we have the DEFINE_SPLITs for some of the scc\n ;; insns that actually require more than one machine instruction.\n "}, {"sha": "5e757bd218050124c0427b2bb8d8a7ed1a7c53c2", "filename": "gcc/config/m88k/m88k-move.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -91,7 +91,7 @@ rm -f move?I*[xn].s move?I*[xn].asm\n #\tleast N bytes will be copied.  r2 is the destination pointer\n #\toffset by 4, r3 is the source pointer offset by 4, r6 is the\n #\tloop count.  Thus, the total bytes moved is 64 * r6 + N.  The\n-#\tfirst value is is preloaded into r4 or r5 (r4 if N/4 is odd;\n+#\tfirst value is preloaded into r4 or r5 (r4 if N/4 is odd;\n #\tr5 if N/4 is even).  Upon returning, r2 and r3 have been\n #\tupdated and may be used for the remainder bytes to move.\n #"}, {"sha": "441674c08de7a78b6678a986a76b5d5815fc3f7d", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1445,7 +1445,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n-   On the the m88000 this is never true.  */\n+   On the m88000 this is never true.  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n "}, {"sha": "f8907e5d6a4e4862ab0f3b904c64389f89a74d0a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2270,7 +2270,7 @@ extern struct mips_frame_info current_frame_info;\n \n \f\n /* A C expression that should indicate the number of bytes of its\n-   own arguments that a function function pops on returning, or 0\n+   own arguments that a function pops on returning, or 0\n    if the function pops no arguments and the caller must therefore\n    pop them all after the function returns.\n \n@@ -4217,7 +4217,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGN(STREAM,LOG)\t\t\t\t\t\\\n   fprintf (STREAM, \"\\t.align\\t%d\\n\", (LOG));\n \n-/* This is how to output an assembler line to to advance the location\n+/* This is how to output an assembler line to advance the location\n    counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(STREAM,SIZE)\t\t\t\t\t\\"}, {"sha": "fe46101130b4e3b62ee2437e4dec3229af18f0d8", "filename": "gcc/config/mn10200/mn10200.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -55,7 +55,7 @@\n ;; As a result of the various problems using address registers in\n ;; QImode, HImode, SImode, and SFmode, we discourage their use via\n ;; '*' in their constraints.  They're still allowed, but they're never\n-;; the preferred class for for insns with those modes.\n+;; the preferred class for insns with those modes.\n \n ;; movqi\n "}, {"sha": "e44ccccbe06b327253ea4f1afe68f39bb98c66a0", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -258,7 +258,7 @@\n       convrt.i[1] = CONST_DOUBLE_HIGH (operands[1]);\n       convrt.f = convrt.d;\n \n-      /* Is there a better machine-independent way to to this?  */\n+      /* Is there a better machine-independent way to do this?  */\n       operands[1] = GEN_INT (convrt.i[0]);\n       return \\\"movd %1,%0\\\";\n     }"}, {"sha": "5a30176fd4f47c3d4d00497a7cae1f22c5bc3612", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2778,7 +2778,7 @@ hppa_expand_prologue()\n       }\n   }\n \n-  /* The hppa calling conventions say that that %r19, the pic offset\n+  /* The hppa calling conventions say that %r19, the pic offset\n      register, is saved at sp - 32 (in this function's frame)  when\n      generating PIC code.  FIXME:  What is the correct thing to do\n      for functions which make no calls and allocate no frame?  Do\n@@ -3502,7 +3502,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\t  /* An ALU flop can't be issued until two cycles before a\n \t\t     preceding divide or sqrt operation has finished if\n \t\t     the target of the ALU flop is also the target of\n-\t\t     of the divide or sqrt operation.  */\n+\t\t     the divide or sqrt operation.  */\n \t\t  return cost - 2;\n \n \t\tdefault:"}, {"sha": "73e7962bef50b5eaa225ddafcd10af3a29e6c940", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1392,7 +1392,7 @@ extern struct rtx_def *hppa_builtin_saveregs ();\n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n \n-   These macros are specific to the the HP-PA, and may be used only\n+   These macros are specific to the HP-PA, and may be used only\n    in code for printing assembler insns and in conditions for\n    define_optimization.  */\n "}, {"sha": "55f9993e8127e56f7812d452ff1714989659a42e", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -863,7 +863,7 @@ extern int current_function_pretend_args_size;\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n-   On the the pdp this is for predec/postinc */\n+   On the pdp this is for predec/postinc */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n  { if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\"}, {"sha": "f7bbeb2205866ae06ce3a3a9a7f2244322abd052", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -182,13 +182,13 @@ FUNC_START(__eabi)\n \tlwz\t4,.Lexcepte(11)\t\t\t/* exception table pointers end */\n \tbl\tFUNC_NAME(__eabi_convert)\t/* convert exceptions */\n \n-/* Fixup the the addresses in the GOT below _GLOBAL_OFFSET_TABLE_-4 */\n+/* Fixup the addresses in the GOT below _GLOBAL_OFFSET_TABLE_-4 */\n \n \tlwz\t3,.Lgots(11)\t\t\t/* GOT table pointers start */\n \tlwz\t4,.Lgotm1(11)\t\t\t/* GOT table pointers below _GLOBAL_OFFSET_TABLE-4 */\n \tbl\tFUNC_NAME(__eabi_convert)\t/* convert lower GOT */\n \n-/* Fixup the the addresses in the GOT above _GLOBAL_OFFSET_TABLE_+12 */\n+/* Fixup the addresses in the GOT above _GLOBAL_OFFSET_TABLE_+12 */\n \n \tlwz\t3,.Lgotm2(11)\t\t\t/* GOT table pointers above _GLOBAL_OFFSET_TABLE+12 */\n \tlwz\t4,.Lgote(11)\t\t\t/* GOT table pointers end */"}, {"sha": "d0663d7a65bbbb0f19b32216e2d00b119620c652", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4857,12 +4857,12 @@ rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n       if (is_attribute_p (\"cdecl\", identifier))\n \treturn (args == NULL_TREE);\n \n-      /* Dllimport attribute says says the caller is to call the function\n+      /* Dllimport attribute says the caller is to call the function\n \t indirectly through a __imp_<name> pointer.  */\n       if (is_attribute_p (\"dllimport\", identifier))\n \treturn (args == NULL_TREE);\n \n-      /* Dllexport attribute says says the callee is to create a __imp_<name>\n+      /* Dllexport attribute says the callee is to create a __imp_<name>\n \t pointer.  */\n       if (is_attribute_p (\"dllexport\", identifier))\n \treturn (args == NULL_TREE);\n@@ -4916,7 +4916,7 @@ rs6000_set_default_type_attributes (type)\n {\n }\n \n-/* Return a dll import reference corresponding to to a call's SYMBOL_REF */\n+/* Return a dll import reference corresponding to a call's SYMBOL_REF */\n struct rtx_def *\n rs6000_dll_import_ref (call_ref)\n      rtx call_ref;"}, {"sha": "678286cb868c0a750d540834fe9de86fd1aaae6e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3958,7 +3958,7 @@\n ;; of instructions.  The & constraints are to prevent the register\n ;; allocator from allocating registers that overlap with the inputs\n ;; (for example, having an input in 7,8 and an output in 6,7).  We\n-;; also allow for the the output being the same as one of the inputs.\n+;; also allow for the output being the same as one of the inputs.\n \n (define_insn \"*adddi3_noppc64\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,r,r\")"}, {"sha": "f9a3caa874e854d084ba0c094608f6745ea5fa91", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1993,7 +1993,7 @@ find_barrier (num_mova, mova, from)\n \t    num_mova--;\n \t  if (barrier_align (next_real_insn (from)) == CACHE_LOG)\n \t    {\n-\t      /* We have just passed the barrier in front front of the\n+\t      /* We have just passed the barrier in front of the\n \t\t ADDR_DIFF_VEC, which is stored in found_barrier.  Since\n \t\t the ADDR_DIFF_VEC is accessed as data, just like our pool\n \t\t constants, this is a good opportunity to accommodate what\n@@ -3268,7 +3268,7 @@ final_prescan_insn (insn, opvec, noperands)\n }\n \n /* Dump out any constants accumulated in the final pass.  These will\n-   will only be labels.  */\n+   only be labels.  */\n \n char *\n output_jump_label_table ()"}, {"sha": "5da733b8e07c75438a13fa5064fc05a380cfe8de", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3006,7 +3006,7 @@ output_block_move (operands)\n      and unrolled.\n \n      That is, at run time, copy enough bytes one at a time to ensure that the\n-     target and source addresses are aligned to the the largest possible\n+     target and source addresses are aligned to the largest possible\n      alignment.  Then use a preconditioned unrolled loop to copy say 16\n      bytes at a time.  Then copy bytes one at a time until finish the rest.  */\n "}, {"sha": "c64240f8188cbc1109b31d5a1275b097b6812b04", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -139,7 +139,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    ??? It would be nice to not include any subtarget specific values here,\n    however there's no way to portably provide subtarget values to\n    CPP_PREFINES.  Also, -D values in CPP_SUBTARGET_SPEC don't get turned into\n-   into foo, __foo and __foo__.  */\n+   foo, __foo and __foo__.  */\n \n #define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem(unix) -Asystem(bsd)\"\n "}, {"sha": "0161379f409ab7921924216a3d4c833acdb2b707", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -78,7 +78,7 @@ extern int target_flags;\n      * Doubles are normally 4 byte aligned, except in argument\n      lists where they are 8 byte aligned.  Is the alignment\n      in the argument list based on the first parameter,\n-     first stack parameter, etc etc.\n+     first stack parameter, etc., etc.\n \n      * Passing/returning of large structures probably isn't the same\n      as GHS.  We don't have enough documentation on their conventions\n@@ -1387,7 +1387,7 @@ v850_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n /* Tell compiler we want to support GHS pragmas */\n #define HANDLE_GHS_PRAGMA\n \n-/* The assembler op to to start the file.  */\n+/* The assembler op to start the file.  */\n \n #define FILE_ASM_OP \"\\t.file\\n\"\n "}, {"sha": "78fa17931e2708f74cb43caeda165128e3552c5a", "filename": "gcc/cp/ChangeLog.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.1?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3529,7 +3529,7 @@ Thu Dec 15 15:17:55 1994  Mike Stump  <mrs@cygnus.com>\n \n \t* *.[chy] (expand_aggr_init) Add fourth argument to handle\n \tdistinction between = init and (init) style of initializations.\n-\t* *.[chy] (finish_decl): Add fifth argument to to handle\n+\t* *.[chy] (finish_decl): Add fifth argument to handle\n \tdistinction between = init and (init) style of initializations.\n \n Tue Dec 13 19:16:05 1994  Mike Stump  <mrs@cygnus.com>\n@@ -5283,7 +5283,7 @@ Sat Jun 11 17:09:05 1994  Jason Merrill  <jason@deneb.cygnus.com>\n \t* decl.c (grok_op_properties): Split out checking for whether this\n \tfunction should suppress the default assignment operator.\n \t* decl2.c (grok_function_init): Likewise.\n-\t(copy_assignment_arg_p): New function do do just that.\n+\t(copy_assignment_arg_p): New function to do just that.\n \tNow considers virtual assignment operators that take a base as an\n \targument to count as copy assignment operators.\n "}, {"sha": "5f054f0d1c199e5db77ec3ea7587c42aa513dd81", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2685,7 +2685,7 @@ override_one_vtable (binfo, old, t)\n \t    vfn = build1 (ADDR_EXPR, vfunc_ptr_type_node, fndecl);\n \t    TREE_CONSTANT (vfn) = 1;\n \t    \n-\t    /* We can use integer_zero_node, as we will will core dump\n+\t    /* We can use integer_zero_node, as we will core dump\n \t       if this is used anyway.  */\n \t    TREE_VALUE (virtuals) = build_vtable_entry (integer_zero_node, vfn);\n \t  }"}, {"sha": "2f7f938b2393068b151d82d68797d15e44b12ba8", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -163,7 +163,7 @@ DEFTREECODE (DEFAULT_ARG, \"default_arg\", 'c', 2)\n    template will be a FUNCTION_DECL, TEMPLATE_DECL, or a list of\n    overloaded functions and templates if the template-id refers to\n    a global template.  If the template-id refers to a member template,\n-   the template will will be an IDENTIFIER_NODE.  */\n+   the template will be an IDENTIFIER_NODE.  */\n DEFTREECODE (TEMPLATE_ID_EXPR, \"template_id_expr\", 'e', 2)\n \n /* has two fields: scope and value */"}, {"sha": "562ce84e68aaea8a621e8530868bcbcc2ff6430b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -319,7 +319,7 @@ extern int flag_signed_bitfields;\n \n extern int write_virtuals;\n \n-/* True for more efficient but incompatible (not not fully tested)\n+/* True for more efficient but incompatible (not fully tested)\n    vtable implementation (using thunks).\n    0 is old behavior; 1 is new behavior.  */\n extern int flag_vtable_thunks;\n@@ -1320,7 +1320,7 @@ extern int flag_new_for_scope;\n    pointer to member function.  TYPE_PTRMEMFUNC_P _must_ be true,\n    before using this macro.  */\n #define TYPE_PTRMEMFUNC_FN_TYPE(NODE) (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (TREE_CHAIN (TREE_CHAIN (TYPE_FIELDS (NODE)))))))\n-/* These are use to manipulate the the canonical RECORD_TYPE from the\n+/* These are use to manipulate the canonical RECORD_TYPE from the\n    hashed POINTER_TYPE, and can only be used on the POINTER_TYPE.  */\n #define TYPE_GET_PTRMEMFUNC_TYPE(NODE) ((tree)TYPE_LANG_SPECIFIC(NODE))\n #define TYPE_SET_PTRMEMFUNC_TYPE(NODE, VALUE) (TYPE_LANG_SPECIFIC(NODE) = ((struct lang_type *)(void*)(VALUE)))"}, {"sha": "e3a79ae1c3b13d6eac3a57d07a1619c697f49a50", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -374,7 +374,7 @@ struct named_label_list\n \n /* A list (chain of TREE_LIST nodes) of named label uses.\n    The TREE_PURPOSE field is the list of variables defined\n-   the the label's scope defined at the point of use.\n+   in the label's scope defined at the point of use.\n    The TREE_VALUE field is the LABEL_DECL used.\n    The TREE_TYPE field holds `current_binding_level' at the\n    point of the label's use.\n@@ -1496,7 +1496,7 @@ poplevel_class (force)\n   if (class_binding_level->parm_flag != 2)\n     class_binding_level = (struct binding_level *)0;\n \n-  /* Now, pop out of the the binding level which we created up in the\n+  /* Now, pop out of the binding level which we created up in the\n      `pushlevel_class' routine.  */\n #if defined(DEBUG_CP_BINDING_LEVELS)\n   is_class_level = 1;\n@@ -6240,7 +6240,7 @@ start_decl_1 (decl)\n }\n \n /* Handle initialization of references.\n-   These three arguments from from `cp_finish_decl', and have the\n+   These three arguments are from `cp_finish_decl', and have the\n    same meaning here that they do there.\n \n    Quotes on semantics can be found in ARM 8.4.3.  */\n@@ -7003,7 +7003,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t destructor, so we don't complain about the 'resource\n \t\t allocation is initialization' idiom.  */\n \t      /* Now set attribute((unused)) on types so decls of\n-\t\t of that type will be marked used. (see TREE_USED, above.) \n+\t\t that type will be marked used. (see TREE_USED, above.) \n \t\t This avoids the warning problems this particular code\n \t\t tried to work around. */\n "}, {"sha": "e945a72f2a8772853654cc556fbaa79241258c78", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1360,7 +1360,7 @@ check_member_template (tmpl)\n \t/* 14.5.2.2 [temp.mem]\n \t   \n \t   A local class shall not have member templates. */\n-\tcp_error (\"declaration of of member template `%#D' in local class\",\n+\tcp_error (\"declaration of member template `%#D' in local class\",\n \t\t  decl);\n       \n       if (TREE_CODE (decl) == FUNCTION_DECL && DECL_VIRTUAL_P (decl))"}, {"sha": "d3e9c433244f0bd2adda095b89c9f7dd3531f85a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -118,7 +118,7 @@ asm (TEXT_SECTION_ASM_OP);\n      (if any). If it was a destructor, then its parse tree is stored\n      in the finalization variable in the eh_entry structure.  Otherwise\n      the finalization variable is set to NULL to reflect the fact that\n-     is the the end of a try block.  Next, this modified eh_entry node\n+     it is the end of a try block.  Next, this modified eh_entry node\n      is enqueued in the finalizations queue by calling\n      enqueue_eh_entry (&queue,entry).\n "}, {"sha": "df1838a6bb85dad9f84bb87b7ad0e54b6d9048f8", "filename": "gcc/cp/g++FAQ.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fg%2B%2BFAQ.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fg%2B%2BFAQ.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2BFAQ.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1315,7 +1315,7 @@ The GNU Standard C++ Library (also called the ``GNU ANSI C++ Library''\n in places in the code) is not libg++, though it is included in the\n libg++ distribution.  Rather, it contains classes and functions\n required by the ANSI/ISO standard.  The copyright conditions are the\n-same as those for for the iostreams classes; the LGPL is not used\n+same as those for the iostreams classes; the LGPL is not used\n (@pxref{legalities}).\n \n This library, libstdc++, is in the libg++ distribution in versions 2.6.2"}, {"sha": "7cb57f2665cfd7f0e6d8f0bb8a3bb0b6299f4e5d", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -830,7 +830,7 @@ get_binfo (VF_BASETYPE_VALUE (vfield), t, 0)\n @end example\n \n @noindent\n-will return the binfo for the the given vfield.\n+will return the binfo for the given vfield.\n \n May or may not be set at @code{modify_vtable_entries} time.  Set at\n @code{finish_base_struct} time.\n@@ -842,7 +842,7 @@ What things can this be used on:\n \n @item VF_DERIVED_VALUE\n Identifies the type of the most derived class of the vfield, excluding\n-the the class this vfield is for.\n+the class this vfield is for.\n \n Set at @code{finish_base_struct} time.\n \n@@ -1476,7 +1476,7 @@ required to call them in pairs.  When marking the end of a region, an\n argument can be passed to indicate the handler for the marked region.\n This can be passed in many ways, currently a tree is used.  Another\n possibility would be insns for the handler, or a label that denotes a\n-handler.  I have a feeling insns might be the the best way to pass it.\n+handler.  I have a feeling insns might be the best way to pass it.\n Semantics are, if an exception is thrown inside the region, control is\n transferred unconditionally to the handler.  If control passes through\n the handler, then the backend is to rethrow the exception, in the"}, {"sha": "20602bb08452d7dda987ed822a5b8335e79411cd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1098,7 +1098,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n       \n       /* Figure out what exactly is being specialized at this point.\n \t Note that for an explicit instantiation, even one for a\n-\t member function, we cannot tell apriori whether the the\n+\t member function, we cannot tell apriori whether the\n \t instantiation is for a member template, or just a member\n \t function of a template class.  In particular, even in if the\n \t instantiation is for a member template, the template"}, {"sha": "9faa0ee50c540cbd18bb3d69f3e97263020534cb", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1191,7 +1191,7 @@ lookup_field (xbasetype, name, protect, want_type)\n \n   /* rval_binfo_h and binfo_h are binfo values used when we perform the\n      hiding checks, as virtual base classes may not be shared.  The strategy\n-     is we always go into the the binfo hierarchy owned by TYPE_BINFO of\n+     is we always go into the binfo hierarchy owned by TYPE_BINFO of\n      virtual base classes, as we cross virtual base class lines.  This way\n      we know that binfo of a virtual base class will always == itself when\n      found along any line.  (mrs)  */\n@@ -1727,7 +1727,7 @@ lookup_fnfields (basetype_path, name, complain)\n \n   /* rval_binfo_h and binfo_h are binfo values used when we perform the\n      hiding checks, as virtual base classes may not be shared.  The strategy\n-     is we always go into the the binfo hierarchy owned by TYPE_BINFO of\n+     is we always go into the binfo hierarchy owned by TYPE_BINFO of\n      virtual base classes, as we cross virtual base class lines.  This way\n      we know that binfo of a virtual base class will always == itself when\n      found along any line.  (mrs)  */"}, {"sha": "9aeafd772024d0f6c871584387c18be6bf0312fa", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -713,7 +713,7 @@ layout_basetypes (rec, max)\n   if (const_size)\n     {\n       /* Because a virtual base might take a single byte above,\n-\t we have to re-adjust the total size to make sure it it\n+\t we have to re-adjust the total size to make sure it is\n \t a multiple of the alignment.  */\n       /* Give the whole object the alignment it wants.  */\n       const_size = CEIL (const_size, record_align) * record_align;\n@@ -1167,7 +1167,7 @@ get_decl_list (value)\n    BINFO is the base binfo to use, if we are deriving from one.  This\n    is necessary, as we want specialized parent binfos from base\n    classes, so that the VTABLE_NAMEs of bases are for the most derived\n-   type, instead of of the simple type.\n+   type, instead of the simple type.\n \n    VTABLE is the virtual function table with which to initialize\n    sub-objects of type TYPE."}, {"sha": "e74e925e1f2da3d231adad0cede455365bbfe2b8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -729,7 +729,7 @@ comptypes (type1, type2, strict)\n \n   /* Allow for two different type nodes which have essentially the same\n      definition.  Note that we already checked for equality of the type\n-     type qualifiers (just above).  */\n+     qualifiers (just above).  */\n \n   if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return 1;"}, {"sha": "781d0d9172558eea17508f7a46bb7f3a99118272", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -693,7 +693,7 @@ store_init_value (decl, init)\n \t\t  run time inited when doing pic.  (mrs) */\n \t       /* Since ctors and dtors are the only things that can\n \t\t  reference vtables, and they are always written down\n-\t\t  the the vtable definition, we can leave the\n+\t\t  the vtable definition, we can leave the\n \t\t  vtables in initialized data space.\n \t\t  However, other initialized data cannot be initialized\n \t\t  this way.  Instead a global file-level initializer\n@@ -1206,7 +1206,7 @@ process_init_constructor (type, init, elts)\n    then the expression\n \n    x.A::ii refers to the ii member of the L part of\n-   of A part of the C object named by X.  In this case,\n+   the A part of the C object named by X.  In this case,\n    DATUM would be x, and BASETYPE would be A.  */\n \n tree"}, {"sha": "a32d737820cd5593364ec42e43b4a1f7826deacd", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,7 +1,7 @@\n /* Part of CPP library.  (memory allocation - xmalloc etc)\n    Copyright (C) 1986, 87, 89, 92 - 95, 1998 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n-   Based on CCCP program by by Paul Rubin, June 1986\n+   Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n \n This program is free software; you can redistribute it and/or modify it"}, {"sha": "94bd3e0b8ac3bcac97e26462652b468cc7832c4b", "filename": "gcc/cpperror.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,7 +1,7 @@\n /* Default error handlers for CPP Library.\n    Copyright (C) 1986, 87, 89, 92 - 95, 1998 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n-   Based on CCCP program by by Paul Rubin, June 1986\n+   Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n \n This program is free software; you can redistribute it and/or modify it"}, {"sha": "8fd1cca7311d6d45024dd0c82b817d59d75aeba2", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,7 +1,7 @@\n /* Part of CPP library.  (Macro hash table support.)\n    Copyright (C) 1986, 87, 89, 92-95, 1996 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n-   Based on CCCP program by by Paul Rubin, June 1986\n+   Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n \n This program is free software; you can redistribute it and/or modify it\n@@ -47,7 +47,7 @@ hashf (name, len, hashsize)\n   return MAKE_POS (r) % hashsize;\n }\n \n-/* Find the most recent hash node for name name (ending with first\n+/* Find the most recent hash node for name \"name\" (ending with first\n    non-identifier char) installed by install\n \n    If LEN is >= 0, it is the length of the name."}, {"sha": "80865afb161a7b79ef7e2f39c2549cd3c556c57b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1278,7 +1278,7 @@ collect_expansion (pfile, buf, limit, nargs, arglist)\n       }\n     } else {\n       /* In -traditional mode, recognize arguments inside strings and\n-\t and character constants, and ignore special properties of #.\n+\t character constants, and ignore special properties of #.\n \t Arguments inside strings are considered \"stringified\", but no\n \t extra quote marks are supplied.  */\n       switch (c) {\n@@ -2711,7 +2711,7 @@ macroexpand (pfile, hp)\n \t  if (ap->stringify)\n \t    {\n \t      register struct argdata *arg = &args[ap->argno];\n-\t      /* Stringify it it hasn't already been */\n+\t      /* Stringify if it hasn't already been */\n \t      if (arg->stringified_length < 0)\n \t\t{\n \t\t  int arglen = arg->raw_length;\n@@ -3564,7 +3564,7 @@ assertion_install (pfile, name, len, hash)\n   return hp;\n }\n /*\n- * find the most recent hash node for name name (ending with first\n+ * find the most recent hash node for name \"name\" (ending with first\n  * non-identifier char) installed by install\n  *\n  * If LEN is >= 0, it is the length of the name."}, {"sha": "26dd99132ffa1aad4be97e2210ba9c365006ddfd", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2046,7 +2046,7 @@ safe_hash (x, mode)\n    in all the places that search a hash table chain for an equivalent\n    for a given value.  A possible equivalent that has different structure\n    has its hash code computed from different data.  Whether the hash code\n-   is the same as that of the the given value is pure luck.  */\n+   is the same as that of the given value is pure luck.  */\n \n static int\n exp_equiv_p (x, y, validate, equal_values)"}, {"sha": "a48bd84fd67be653b241fe1858c51583abbd8d19", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4700,7 +4700,7 @@ size_of_line_prolog ()\n   size += DWARF_LINE_OPCODE_BASE - 1;\n \n   /* Include directory table is empty (at present).  Count only the\n-     the null byte used to terminate the table.  */\n+     null byte used to terminate the table.  */\n   size += 1;\n \n   for (ft_index = 1; ft_index < file_table_in_use; ++ft_index)\n@@ -8920,7 +8920,7 @@ gen_type_die (type, context_die)\n   if (type == NULL_TREE || type == error_mark_node)\n     return;\n \n-  /* We are going to output a DIE to represent the unqualified version of of\n+  /* We are going to output a DIE to represent the unqualified version of\n      this type (i.e. without any const or volatile qualifiers) so get the\n      main variant (i.e. the unqualified version) of this type now.  */\n   type = type_main_variant (type);\n@@ -9065,7 +9065,7 @@ gen_tagged_type_instantiation_die (type, context_die)\n   if (type == NULL_TREE || type == error_mark_node)\n     return;\n \n-  /* We are going to output a DIE to represent the unqualified version of of\n+  /* We are going to output a DIE to represent the unqualified version of\n      this type (i.e. without any const or volatile qualifiers) so make sure\n      that we have the main variant (i.e. the unqualified version) of this\n      type now.  */\n@@ -9267,7 +9267,7 @@ gen_decl_die (decl, context_die)\n \n   /* If this ..._DECL node is marked to be ignored, then ignore it. But don't \n      ignore a function definition, since that would screw up our count of\n-     blocks, and that it turn will completely screw up the the labels we will \n+     blocks, and that in turn will completely screw up the labels we will \n      reference in subsequent DW_AT_low_pc and DW_AT_high_pc attributes (for\n      subsequent blocks).  */\n   if (DECL_IGNORED_P (decl) && TREE_CODE (decl) != FUNCTION_DECL)\n@@ -9399,7 +9399,7 @@ dwarf2out_decl (decl)\n   /* If this ..._DECL node is marked to be ignored, then ignore it.  We gotta \n      hope that the node in question doesn't represent a function definition.\n      If it does, then totally ignoring it is bound to screw up our count of\n-     blocks, and that it turn will completely screw up the the labels we will \n+     blocks, and that in turn will completely screw up the labels we will \n      reference in subsequent DW_AT_low_pc and DW_AT_high_pc attributes (for\n      subsequent blocks).  (It's too bad that BLOCK nodes don't carry their\n      own sequence numbers with them!) */"}, {"sha": "566e6d290a34e773f617c90767a41832aef24ba8", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3038,7 +3038,7 @@ name_and_src_coords_attributes (decl)\n \t/* This is annoying, but we have to pop out of the .debug section\n \t   for a moment while we call `lookup_filename' because calling it\n \t   may cause a temporary switch into the .debug_sfnames section and\n-\t   most svr4 assemblers are not smart enough be be able to nest\n+\t   most svr4 assemblers are not smart enough to be able to nest\n \t   section switches to any depth greater than one.  Note that we\n \t   also can't skirt this issue by delaying all output to the\n \t   .debug_sfnames section unit the end of compilation because that\n@@ -4201,7 +4201,7 @@ output_type (type, containing_scope)\n     return;\n \n   /* We are going to output a DIE to represent the unqualified version of\n-     of this type (i.e. without any const or volatile qualifiers) so get\n+     this type (i.e. without any const or volatile qualifiers) so get\n      the main variant (i.e. the unqualified version) of this type now.  */\n \n   type = type_main_variant (type);\n@@ -4477,7 +4477,7 @@ output_tagged_type_instantiation (type)\n     return;\n \n   /* We are going to output a DIE to represent the unqualified version of\n-     of this type (i.e. without any const or volatile qualifiers) so make\n+     this type (i.e. without any const or volatile qualifiers) so make\n      sure that we have the main variant (i.e. the unqualified version) of\n      this type now.  */\n \n@@ -4693,7 +4693,7 @@ output_decl (decl, containing_scope)\n   /* If this ..._DECL node is marked to be ignored, then ignore it.\n      But don't ignore a function definition, since that would screw\n      up our count of blocks, and that it turn will completely screw up the\n-     the labels we will reference in subsequent AT_low_pc and AT_high_pc\n+     labels we will reference in subsequent AT_low_pc and AT_high_pc\n      attributes (for subsequent blocks).  */\n \n   if (DECL_IGNORED_P (decl) && TREE_CODE (decl) != FUNCTION_DECL)\n@@ -5040,7 +5040,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n      gotta hope that the node in question doesn't represent a function\n      definition.  If it does, then totally ignoring it is bound to screw\n      up our count of blocks, and that it turn will completely screw up the\n-     the labels we will reference in subsequent AT_low_pc and AT_high_pc\n+     labels we will reference in subsequent AT_low_pc and AT_high_pc\n      attributes (for subsequent blocks).  (It's too bad that BLOCK nodes\n      don't carry their own sequence numbers with them!)  */\n "}, {"sha": "4d69240a5481bf5dc93befee8e036f54a043857f", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -107,7 +107,7 @@ Boston, MA 02111-1307, USA.  */\n    throw. On machines that have unwind info support, __throw is generated\n    by code in libgcc2.c, otherwise __throw is generated on a\n    per-object-file basis for each source file compiled with\n-   -fexceptions by the the C++ frontend.  Before __throw is invoked,\n+   -fexceptions by the C++ frontend.  Before __throw is invoked,\n    the current context of the throw needs to be placed in the global\n    variable __eh_pc.\n \n@@ -632,7 +632,7 @@ dequeue_eh_entry (queue)\n   return tempentry;\n }\n \f\n-/* Routine to see if exception exception handling is turned on.\n+/* Routine to see if exception handling is turned on.\n    DO_WARN is non-zero if we want to inform the user that exception\n    handling is turned off. \n \n@@ -965,7 +965,7 @@ start_dynamic_handler ()\n    This routine notices one particular common case in C++ code\n    generation, and optimizes it so as to not need the exception\n    region.  It works by creating a dynamic cleanup action, instead of\n-   of a using an exception region.  */\n+   a using an exception region.  */\n \n int\n expand_eh_region_start_tree (decl, cleanup)\n@@ -1549,7 +1549,7 @@ exception_table_p ()\n   return 0;\n }\n \n-/* Output the entry of the exception table corresponding to to the\n+/* Output the entry of the exception table corresponding to the\n    exception region numbered N to file FILE. \n \n    N is the code label number corresponding to the handler of the"}, {"sha": "15663c1cfb4c6839e3efa966d4d158439f621a12", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1034,7 +1034,7 @@ optimize_save_area_alloca (insns)\n \t\t these precise characteristics, we did something\n \t\t entirely wrong in allocate_dynamic_stack_space. \n \n-\t\t Note, one way this could happen if if SETJMP_VIA_SAVE_AREA\n+\t\t Note, one way this could happen is if SETJMP_VIA_SAVE_AREA\n \t\t was defined on a machine where stacks grow towards higher\n \t\t addresses.\n "}, {"sha": "e81eb0a1b0183a1952887663c2c269a37fc8500c", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -609,7 +609,7 @@ store_fixed_bit_field (op0, offset, bitsize, bitpos, value, struct_align)\n       total_bits = GET_MODE_BITSIZE (mode);\n \n       /* Make sure bitpos is valid for the chosen mode.  Adjust BITPOS to\n-\t be be in the range 0 to total_bits-1, and put any excess bytes in\n+\t be in the range 0 to total_bits-1, and put any excess bytes in\n \t OFFSET.  */\n       if (bitpos >= total_bits)\n \t{\n@@ -1424,7 +1424,7 @@ extract_fixed_bit_field (tmode, op0, offset, bitsize, bitpos,\n       total_bits = GET_MODE_BITSIZE (mode);\n \n       /* Make sure bitpos is valid for the chosen mode.  Adjust BITPOS to\n-\t be be in the range 0 to total_bits-1, and put any excess bytes in\n+\t be in the range 0 to total_bits-1, and put any excess bytes in\n \t OFFSET.  */\n       if (bitpos >= total_bits)\n \t{"}, {"sha": "d416e92271868c8e87c9b4f5e9ae49101db295d4", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3701,7 +3701,7 @@ store_constructor (exp, target, cleared)\n       tree elttype = TREE_TYPE (type);\n \n       /* If the constructor has fewer elements than the array,\n-         clear the whole array first.  Similarly if this this is\n+         clear the whole array first.  Similarly if this is\n          static constructor of a non-BLKmode object.  */\n       if (cleared || (GET_CODE (target) == REG && TREE_STATIC (exp)))\n \tneed_to_clear = 1;\n@@ -7955,7 +7955,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \n       /* If we were unable to expand via the builtin, stop the\n \t sequence (without outputting the insns) and break, causing\n-\t a call the the library function.  */\n+\t a call to the library function.  */\n       if (target == 0)\n \t{\n \t  end_sequence ();"}, {"sha": "b272df7dd19cc107b5d185676572b841e5291ab0", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -532,7 +532,7 @@ extern rtxfun bcc_gen_fctn[NUM_RTX_CODE];\n extern enum insn_code setcc_gen_code[NUM_RTX_CODE];\n \n #ifdef HAVE_conditional_move\n-/* Indexed by the the machine mode, gives the insn code to make a conditional\n+/* Indexed by the machine mode, gives the insn code to make a conditional\n    move insn.  */\n \n extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];"}, {"sha": "5b5b0fe3a9aa709b265e317fa1d07b23d8c7b17d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2375,7 +2375,7 @@ Thu Nov  2 03:58:17 1995  Craig Burley  (burley@gnu.ai.mit.edu)\n \twrap every new eval of lhs in save_expr() so it is clear to\n \tback end that MULT_EXPR(lhs,lhs) has identical operands,\n \totherwise for an rhs like 32767 it generates around 65K pseudo\n-\tregisters, which which stupid_life_analysis cannot cope\n+\tregisters, with which stupid_life_analysis cannot cope\n \t(due to reg_renumber in regs.h being `short *' instead of\n \t`int *').\n "}, {"sha": "75b7274ae558eb20e4dfe34ddc9bd43294d0ff84", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -15217,7 +15217,7 @@ pushdecl (x)\n \t typedef struct S MY_TYPE; MY_TYPE object;\n \n \t Later parts of the compiler might only know that `object' was of type\n-\t `struct S' if if were not for code just below.  With this code\n+\t `struct S' if it were not for code just below.  With this code\n \t however, later parts of the compiler see something like:\n \n \t struct S' == struct S typedef struct S' MY_TYPE; struct S' object;"}, {"sha": "1ef6a94be68a54495b105ac6dc7d6c5e4d81fb18", "filename": "gcc/f/intdoc.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fintdoc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fintdoc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.in?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2463,7 +2463,7 @@ Causes external subroutine @var{@2@} to be executed after a delay of\n @var{@1@} seconds by using @code{alarm(1)} to set up a signal and\n @code{signal(2)} to catch it.\n If @var{@3@} is supplied, it will be\n-returned with the the number of seconds remaining until any previously\n+returned with the number of seconds remaining until any previously\n scheduled alarm was due to be delivered, or zero if there was no\n previously scheduled alarm.\n @xref{Signal Intrinsic (subroutine)}."}, {"sha": "74153db4fddeb448b8a3ca6f47704b1d9e21bb56", "filename": "gcc/f/intdoc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fintdoc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fintdoc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1178,7 +1178,7 @@ Causes external subroutine @var{Handler} to be executed after a delay of\n @var{Seconds} seconds by using @code{alarm(1)} to set up a signal and\n @code{signal(2)} to catch it.\n If @var{Status} is supplied, it will be\n-returned with the the number of seconds remaining until any previously\n+returned with the number of seconds remaining until any previously\n scheduled alarm was due to be delivered, or zero if there was no\n previously scheduled alarm.\n @xref{Signal Intrinsic (subroutine)}."}, {"sha": "1a0913b58723031cad274a89179c61672285b326", "filename": "gcc/f/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1059,7 +1059,7 @@ ffelex_get_directive_line_ (char **text, FILE *finput)\n       else\n \tif (c == '\\'' || c == '\"')\n \t  looking_for = c;\t/* Don't stop buffering until we see another\n-\t\t\t\t   another one of these (or an EOF).  */\n+\t\t\t\t   one of these (or an EOF).  */\n \n       /* Handle backslash.  */\n       char_escaped = (c == '\\\\' && ! char_escaped);"}, {"sha": "e26fa69d0fbb23a76feab3643e43ab38600790e4", "filename": "gcc/f/sta.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fsta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ff%2Fsta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsta.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1937,7 +1937,7 @@ ffesta_zero (ffelexToken t)\n      isn't enough, because then typing \"GOTO\" instead of \"BLAH\" above\n      doesn't work -- the statement is confirmed (we know the user\n      attempted a GOTO) but ffestc hasn't seen it.  So, instead, just\n-     always tell ffestc to do \"any\" statement it needs to to reset.  */\n+     always tell ffestc to do \"any\" statement it needs to reset.  */\n \n   if (!ffesta_is_inhibited_\n       && ffesta_seen_first_exec)"}, {"sha": "e9e9dea125d42d763a2a591b082ab1b3ccba3ce8", "filename": "gcc/floatlib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffloatlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffloatlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffloatlib.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -649,7 +649,7 @@ __muldf3 (double a1, double a2)\n \n \n /*\n- * Compare the the mantissas of two doubles.\n+ * Compare the mantissas of two doubles.\n  * Each mantissa is in two longs.\n  * \n  *   return      1   if x1's mantissa is greater than x2's"}, {"sha": "0c545d4bab9055cf17b35bea2d0ab33a06d8d08d", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2138,7 +2138,7 @@ mark_set_1 (needed, dead, x, insn, significant)\n       if (significant)\n \tSET_REGNO_REG_SET (significant, regno);\n \n-      /* Mark it as as dead before this insn.  */\n+      /* Mark it as dead before this insn.  */\n       SET_REGNO_REG_SET (dead, regno);\n \n       /* A hard reg in a wide mode may really be multiple registers."}, {"sha": "bfcaed7746e990851dff9c2d7f6fa5c07fb00aea", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2569,7 +2569,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n    *PMASK is set to the mask used.  This is either contained in a\n    BIT_AND_EXPR or derived from the width of the field.\n \n-   *PAND_MASK is set the the mask found in a BIT_AND_EXPR, if any.\n+   *PAND_MASK is set to the mask found in a BIT_AND_EXPR, if any.\n \n    Return 0 if this is not a component reference or is one that we can't\n    do anything with.  */"}, {"sha": "4b62759c1afd180fc266ab24f108ce07a379ca4d", "filename": "gcc/frame.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fframe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fframe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -547,7 +547,7 @@ extract_cie_info (fde *f, struct cie_info *c)\n   return p;\n }\n \n-/* Decode one instruction's worth of of DWARF 2 call frame information.\n+/* Decode one instruction's worth of DWARF 2 call frame information.\n    Used by __frame_state_for.  Takes pointers P to the instruction to\n    decode, STATE to the current register unwind information, INFO to the\n    current CIE information, and PC to the current PC value.  Returns a"}, {"sha": "459d55ff1bfc3c2901568bf0ee0f79df6291b799", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -3113,7 +3113,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \n     case SET:\n       /* We are allowed to set the virtual registers.  This means that\n-\t that the actual register should receive the source minus the\n+\t the actual register should receive the source minus the\n \t appropriate offset.  This is used, for example, in the handling\n \t of non-local gotos.  */\n       if (SET_DEST (x) == virtual_incoming_args_rtx)"}, {"sha": "8f2e887e965137671c11aa04092b9e6fb9bf89ee", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4055,7 +4055,7 @@ clear_struct_flag (x)\n }\n \n /* Return the number of RTX objects making up the expression X.\n-   But if we count more more than MAX objects, stop counting.  */\n+   But if we count more than MAX objects, stop counting.  */\n \n static int\n count_sub_rtxs (x, max)"}, {"sha": "21a5abd8109b8f1e1b0a78c5f6327c6716a6ae68", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1075,7 +1075,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n      In the latter case, we are branching to a node that is not the first\n      node in a decision list.  We have already checked that it is possible\n      for both the node we originally tested at this level and the node we\n-     are branching to to be both match some pattern.  That means that they\n+     are branching to to both match some pattern.  That means that they\n      usually will be testing the same mode and code.  So it is normally safe\n      for such labels to be inside switch statements, since the tests done\n      by virtue of arriving at that label will usually already have been"}, {"sha": "04fc13adf9fa977e225f09377053049ec41a53dd", "filename": "gcc/gmon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgmon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fgmon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgmon.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -308,7 +308,7 @@ mcount()\n \tgoto out;\n }\n \n-/* Control profiling\n+/* Control profiling;\n   \tprofiling is what mcount checks to see if\n   \tall the data structures are ready.  */\n "}, {"sha": "7c1d8f863a2c3092cf5b48acce6dd010269e58f8", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -381,7 +381,7 @@ static rtx dead_notes;\n    The transition (R->S) is implemented in the scheduling loop in\n    `schedule_block' when the best insn to schedule is chosen.\n    The transition (R->Q) is implemented in `queue_insn' when an\n-   insn is found to to have a function unit conflict with the already\n+   insn is found to have a function unit conflict with the already\n    committed insns.\n    The transitions (P->R and P->Q) are implemented in `schedule_insn' as\n    insns move from the ready list to the scheduled list."}, {"sha": "80e6543de07144710452a82d5eb74d2513398946", "filename": "gcc/halfpic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fhalfpic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fhalfpic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -32,7 +32,7 @@ struct rtx_def;\n    strict ANSI).  This is because rtl.c now refers to the\n    CONSTANT_ADDRESS_P macro, which in turn refers to flag_half_pic,\n    and wants to call half_pic_address_p, whose address we also store\n-   in in a BSS variable.  This way, the gen* programs won't get\n+   in a BSS variable.  This way, the gen* programs won't get\n    unknown symbol errors when being linked (flag_half_pic will never\n    be true in the gen* programs).  */\n "}, {"sha": "f63ce33415f8aedddf3af58cb718f5ca447d7af9", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -135,7 +135,7 @@ int *loop_number_exit_count;\n /* Holds the number of loop iterations.  It is zero if the number could not be\n    calculated.  Must be unsigned since the number of iterations can\n    be as high as 2^wordsize-1.  For loops with a wider iterator, this number\n-   will will be zero if the number of loop iterations is too large for an\n+   will be zero if the number of loop iterations is too large for an\n    unsigned integer to hold.  */\n \n unsigned HOST_WIDE_INT loop_n_iterations;\n@@ -3036,7 +3036,7 @@ consec_sets_invariant_p (reg, n_sets, insn)\n       p = NEXT_INSN (p);\n       code = GET_CODE (p);\n \n-      /* If library call, skip to end of of it.  */\n+      /* If library call, skip to end of it.  */\n       if (code == INSN && (temp = find_reg_note (p, REG_LIBCALL, NULL_RTX)))\n \tp = XEXP (temp, 0);\n \n@@ -3502,7 +3502,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \n       /* Past CODE_LABEL, we get to insns that may be executed multiple\n \t times.  The only way we can be sure that they can't is if every\n-\t every jump insn between here and the end of the loop either\n+\t jump insn between here and the end of the loop either\n \t returns, exits the loop, is a forward jump, or is a jump\n \t to the loop start.  */\n \n@@ -4127,7 +4127,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t     We simplify this by looking for the common case where\n \t\t     there is one DEST_REG giv, and this giv's insn is the\n \t\t     last use of the dest_reg of that DEST_REG giv.  If the\n-\t\t     the increment occurs after the address giv, then we can\n+\t\t     increment occurs after the address giv, then we can\n \t\t     perform the optimization.  (Otherwise, the increment\n \t\t     would have to go before other_giv, and we would not be\n \t\t     able to combine it with the address giv to get an\n@@ -4151,7 +4151,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t\t  && INSN_LUID (v->insn) < INSN_LUID (bl->biv->insn))\n \t\t\tauto_inc_opt = 1;\n \t\t    }\n-\t\t  /* Check for case where increment is before the the address\n+\t\t  /* Check for case where increment is before the address\n \t\t     giv.  Do this test in \"loop order\".  */\n \t\t  else if ((INSN_LUID (v->insn) > INSN_LUID (bl->biv->insn)\n \t\t\t    && (INSN_LUID (v->insn) < INSN_LUID (scan_start)\n@@ -6222,7 +6222,7 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n \t  rtx bivreg = regno_reg_rtx[bl->regno];\n \n \t  /* If there are no givs for this biv, and the only exit is the\n-\t     fall through at the end of the the loop, then\n+\t     fall through at the end of the loop, then\n \t     see if perhaps there are no uses except to count.  */\n \t  no_use_except_counting = 1;\n \t  for (p = loop_start; p != loop_end; p = NEXT_INSN (p))"}, {"sha": "ab2215ed8c02efd6bf2a7d0d2161c97ae842b248", "filename": "gcc/machmode.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,5 +1,5 @@\n /* This file contains the definitions and documentation for the\n-   machine modes used in the the GNU compiler.\n+   machine modes used in the GNU compiler.\n    Copyright (C) 1987, 1992, 1994, 1997, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}, {"sha": "6722469fd5448acab7abb6389f2aaa740d3407a5", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -81,7 +81,7 @@ typedef char *CPTR_T;\n #define ptrdiff_t\tint\n \n \f\n-/* Redefinition of of storage classes as an enumeration for better\n+/* Redefinition of storage classes as an enumeration for better\n    debugging.  */\n \n #ifndef stStaParam"}, {"sha": "49654c094de31d0511a9fb0db84ca8559c02d8dc", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -736,7 +736,7 @@ main ()\n   (ISALNUM (ch) || (ch) == '_' || (ch) == '.' || (ch) == '$')\n \n \f\n-/* Redefinition of of storage classes as an enumeration for better\n+/* Redefinition of storage classes as an enumeration for better\n    debugging.  */\n \n typedef enum sc {"}, {"sha": "c9799544a029095a0772468d986ee82c7391105d", "filename": "gcc/objc/NXConstStr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FNXConstStr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FNXConstStr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FNXConstStr.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -11,7 +11,7 @@ later version.\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License"}, {"sha": "4d2f3e1d7fc0166f8f287cabc851ea522ee0ae25", "filename": "gcc/objc/NXConstStr.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FNXConstStr.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FNXConstStr.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FNXConstStr.m?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -11,7 +11,7 @@\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License"}, {"sha": "a762acc3f7dbf99271ca9ff9e9db0ecf60c83d62", "filename": "gcc/objc/Object.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -10,7 +10,7 @@ later version.\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License"}, {"sha": "64b52f48368708c8c855356e423d3f35e993c942", "filename": "gcc/objc/Object.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.m?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -10,7 +10,7 @@\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License"}, {"sha": "f478d67dec8fa6c2403330214468a09025e28e47", "filename": "gcc/objc/README", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FREADME?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -18,7 +18,7 @@ Runtime API functions\n The runtime is modeled after the NeXT Objective C runtime.  That is,\n most functions have semantics as it is known from the NeXT.  The\n names, however, have changed.  All runtime API functions have names\n-of lowercase letters and and underscores as opposed to the\n+of lowercase letters and underscores as opposed to the\n `traditional' mixed case names.  \n \tThe runtime api functions are not documented as of now.\n Someone offered to write it, and did it, but we were not allowed to"}, {"sha": "5ca8865d942336cb5a02cf69e4d83eebc4efeea8", "filename": "gcc/objc/objc-api.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-api.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -10,7 +10,7 @@ later version.\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License\n@@ -576,7 +576,7 @@ object_is_meta_class(id object)\n }\n \n struct sarray* \n-objc_get_uninstalled_dtable();\n+objc_get_uninstalled_dtable(void);\n \n #endif /* not __objc_api_INCLUDE_GNU */\n "}, {"sha": "eb4642f344be82a159b59d4d00e0a824b9a02201", "filename": "gcc/objc/typedstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2Ftypedstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fobjc%2Ftypedstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Ftypedstream.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -10,7 +10,7 @@ later version.\n \n GNU CC is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n License for more details.\n \n You should have received a copy of the GNU General Public License"}, {"sha": "c00562fbf88e4f22d791f1efd263a90055e0debb", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1688,7 +1688,7 @@ sign_expand_binop (mode, uoptab, soptab, op0, op1, target, unsignedp, methods)\n    [(set TARG0 (operate OP0 OP1)) (set TARG1 (operate ...))].\n \n    Either TARG0 or TARG1 may be zero, but what that means is that\n-   that result is not actually wanted.  We will generate it into\n+   the result is not actually wanted.  We will generate it into\n    a dummy pseudo-reg and discard it.  They may not both be zero.\n \n    Returns 1 if this operation can be performed; 0 if not.  */"}, {"sha": "8b7d5ac94830454f865e2e9c935f1bfcf59fd0bf", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -382,7 +382,7 @@ validate_replace_rtx_1 (loc, from, to, object)\n   switch (code)\n     {\n     case PLUS:\n-      /* If we have have a PLUS whose second operand is now a CONST_INT, use\n+      /* If we have a PLUS whose second operand is now a CONST_INT, use\n \t plus_constant to try to simplify it.  */\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT && XEXP (x, 1) == to)\n \tvalidate_change (object, loc, plus_constant (XEXP (x, 0), INTVAL (to)),"}, {"sha": "7d7350e29fa3b5f3e10925f26dd08bc3ee6091d8", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2760,7 +2760,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      offset += SUBREG_WORD (operand);\n \t      operand = SUBREG_REG (operand);\n-\t      /* Force reload if this is a constant or PLUS or if there may may\n+\t      /* Force reload if this is a constant or PLUS or if there may\n \t\t be a problem accessing OPERAND in the outer mode.  */\n \t      if (CONSTANT_P (operand)\n \t\t  || GET_CODE (operand) == PLUS"}, {"sha": "fc399dfa3cba0de4950cd6912d5e55fc1d0de625", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1433,7 +1433,7 @@ reload (first, global, dumpfile)\n \t\t and that value is in a register that has been spilled,\n \t\t and if the insn needs a reload in a class\n \t\t that might use that register as the reload register,\n-\t\t then add add an extra need in that class.\n+\t\t then add an extra need in that class.\n \t\t This makes sure we have a register available that does\n \t\t not overlap the return value.  */\n \n@@ -2693,7 +2693,7 @@ set_label_offsets (x, insn, initial_p)\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n       /* Each of the labels in the address vector must be at their initial\n-\t offsets.  We want the first first for ADDR_VEC and the second\n+\t offsets.  We want the first field for ADDR_VEC and the second\n \t field for ADDR_DIFF_VEC.  */\n \n       for (i = 0; i < XVECLEN (x, code == ADDR_DIFF_VEC); i++)\n@@ -2774,7 +2774,7 @@ static struct rtvec_def *old_asm_operands_vec, *new_asm_operands_vec;\n    If INSN is an insn, it is the insn containing X.  If we replace a REG\n    in a SET_DEST with an equivalent MEM and INSN is non-zero, write a\n    CLOBBER of the pseudo after INSN so find_equiv_regs will know that\n-   that the REG is being modified.\n+   the REG is being modified.\n \n    Alternatively, INSN may be a note (an EXPR_LIST or INSN_LIST).\n    That's used when we eliminate in expressions stored in notes.\n@@ -4538,7 +4538,7 @@ reload_reg_free_p (regno, opnum, type)\n \n     case RELOAD_FOR_INPADDR_ADDRESS:\n       /* Can't use a register if it is used for an input address\n-         address for this operand or used as an input in an earlier\n+         for this operand or used as an input in an earlier\n          one.  */\n       if (TEST_HARD_REG_BIT (reload_reg_used_in_inpaddr_addr[opnum], regno))\n \treturn 0;\n@@ -4563,7 +4563,7 @@ reload_reg_free_p (regno, opnum, type)\n \n     case RELOAD_FOR_OUTADDR_ADDRESS:\n       /* Can't use a register if it is used for an output address\n-         address for this operand or used as an output in this or a\n+         for this operand or used as an output in this or a\n          later operand.  */\n       if (TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[opnum], regno))\n \treturn 0;"}, {"sha": "f2ee5b8884bb0f568b77948ef2627cd4757acc62", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -880,7 +880,7 @@ emit_delay_sequence (insn, list, length)\n   register rtx li;\n   int had_barrier = 0;\n \n-  /* Allocate the the rtvec to hold the insns and the SEQUENCE.  */\n+  /* Allocate the rtvec to hold the insns and the SEQUENCE.  */\n   rtvec seqv = rtvec_alloc (length + 1);\n   rtx seq = gen_rtx_SEQUENCE (VOIDmode, seqv);\n   rtx seq_insn = make_insn_raw (seq);\n@@ -1005,7 +1005,7 @@ add_to_delay_list (insn, delay_list)\n   return delay_list;\n }   \n \f\n-/* Delete INSN from the the delay slot of the insn that it is in.  This may\n+/* Delete INSN from the delay slot of the insn that it is in.  This may\n    produce an insn without anything in its delay slots.  */\n \n static void\n@@ -1956,7 +1956,7 @@ try_merge_delay_insns (insn, thread)\n \n   /* If all insns in the delay slot have been matched and we were previously\n      annulling the branch, we need not any more.  In that case delete all the\n-     merged insns.  Also clear the INSN_FROM_TARGET_P bit of each insn the\n+     merged insns.  Also clear the INSN_FROM_TARGET_P bit of each insn in\n      the delay list so that we know that it isn't only being used at the\n      target.  */\n   if (slot_number == num_slots && annul_p)\n@@ -2139,7 +2139,7 @@ redundant_insn (insn, target, delay_list)\n \t  if (GET_CODE (XVECEXP (pat, 0, 0)) == CALL_INSN)\n \t    return 0;\n \n-\t  /* If this this is an INSN or JUMP_INSN with delayed effects, it\n+\t  /* If this is an INSN or JUMP_INSN with delayed effects, it\n \t     is hard to track the resource needs properly, so give up.  */\n \n #ifdef INSN_SETS_ARE_DELAYED"}, {"sha": "a51d1281ed901f91120217e37c60ff68afd1aa75", "filename": "gcc/sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -264,7 +264,7 @@ static rtx dead_notes;\n    The transition (R->S) is implemented in the scheduling loop in\n    `schedule_block' when the best insn to schedule is chosen.\n    The transition (R->Q) is implemented in `schedule_select' when an\n-   insn is found to to have a function unit conflict with the already\n+   insn is found to have a function unit conflict with the already\n    committed insns.\n    The transitions (P->R and P->Q) are implemented in `schedule_insn' as\n    insns move from the ready list to the scheduled list.\n@@ -1683,7 +1683,7 @@ sched_analyze (head, tail)\n \n \t      /* Add a pair of fake REG_NOTEs which we will later\n \t\t convert back into a NOTE_INSN_SETJMP note.  See\n-\t\t reemit_notes for why we use a pair of of NOTEs.  */\n+\t\t reemit_notes for why we use a pair of NOTEs.  */\n \n \t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_DEAD,\n \t\t\t\t\t\t    GEN_INT (0),"}, {"sha": "69dfb2bacfb7cfff6007b9cc217cc5e37bc57b6d", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -5149,7 +5149,7 @@ group_case_nodes (head)\n    The transformation is performed by splitting the ordered\n    list into two equal sections plus a pivot.  The parts are\n    then attached to the pivot as left and right branches.  Each\n-   branch is is then transformed recursively.  */\n+   branch is then transformed recursively.  */\n \n static void\n balance_case_nodes (head, parent)\n@@ -5398,7 +5398,7 @@ emit_jump_if_reachable (label)\n    check for bounded nodes.  In this case conditional and/or\n    unconditional jumps as a result of the boundary check for the\n    current node are arranged to target the subordinates associated\n-   code for out of bound conditions on the current node node.\n+   code for out of bound conditions on the current node.\n \n    We can assume that when control reaches the code generated here,\n    the index value has already been compared with the parents"}, {"sha": "d064f979e879e4823a56f34dfc09ac87465dba7c", "filename": "gcc/stupid.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n /* This file performs stupid register allocation, which is used\n    when cc1 gets the -noreg switch (which is when cc does not get -O).\n \n-   Stupid register allocation goes in place of the the flow_analysis,\n+   Stupid register allocation goes in place of the flow_analysis,\n    local_alloc and global_alloc passes.  combine_instructions cannot\n    be done with stupid allocation because the data flow info that it needs\n    is not computed here."}, {"sha": "8efee5b0f2338b8667d86c60ba3962a7f0b237d0", "filename": "gcc/testsuite/g++.old-deja/g++.law/parsing3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fparsing3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fparsing3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fparsing3.C?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -6,7 +6,7 @@\n // Subject:  Re: unexpected difference between gcc and g++ (both 2.3.3)\n // Message-ID: <1oaacnINNt20@gap.caltech.edu>\n \n-/* Notice that that this case parses fine */\n+/* Notice that this case parses fine */\n int (* volatile y)[10];\n \n void foo2() {"}, {"sha": "6af675df593266f674eb42fde0ae68a865c42811", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p784.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2760,7 +2760,7 @@ public:\n     //\n     // Error messages\n     //     - an unacceptable, but expected and recoverable condition\n-    //       was was detected (but the test fails)\n+    //       was detected (but the test fails)\n     //     - errors are for ``the expected environment was not found''\n     //       rather than for ``file couldn't be opened''\n     //     - these messages cannot be shut off\n@@ -3088,7 +3088,7 @@ public:\n     //\n     // Error messages\n     //     - an unacceptable, but expected and recoverable\n-    //       condition was was detected\n+    //       condition was detected\n     //     - errors are for ``the expected environment was not found''\n     //       rather than for ``file couldn't be opened''\n     //     - these messages cannot be shut off"}, {"sha": "2188707cadecf55e5bb4c892a743529f1d01a9ca", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p785.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -5770,7 +5770,7 @@ public:\n     //\n     // Error messages\n     //     - an unacceptable, but expected and recoverable condition\n-    //       was was detected (but the test fails)\n+    //       was detected (but the test fails)\n     //     - errors are for ``the expected environment was not found''\n     //       rather than for ``file couldn't be opened''\n     //     - these messages cannot be shut off\n@@ -6000,7 +6000,7 @@ public:\n     //\n     // Error messages\n     //     - an unacceptable, but expected and recoverable\n-    //       condition was was detected\n+    //       condition was detected\n     //     - errors are for ``the expected environment was not found''\n     //       rather than for ``file couldn't be opened''\n     //     - these messages cannot be shut off"}, {"sha": "a74bcfbea840269609675fd63d0468efbdead131", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -4580,7 +4580,7 @@ registers and memory is more expensive than between two registers, you\n should define this macro to express the relative cost.\n \n If you do not define this macro, GNU CC uses a default cost of 4 plus\n-the cost of copying copying via a secondary reload register, if one is\n+the cost of copying via a secondary reload register, if one is\n needed.  If your machine requires a secondary reload register to copy\n between memory and a register of @var{class} but the reload mechanism is\n more complex than copying via an intermediate, define this macro to"}, {"sha": "632358b8aea3a9d3fb9e8473e326f788caafa8f0", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -415,8 +415,8 @@ DEFTREECODE (TARGET_EXPR, \"target_expr\", 'e', 4)\n    Operand 0 is the condition.\n    Operand 1 is the then-value.\n    Operand 2 is the else-value.\n-   Operand 0 may be of any types, but the types of operands 1 and 2\n-   must be the same and the same as the the of this expression.  */\n+   Operand 0 may be of any type, but the types of operands 1 and 2\n+   must be the same and the same as the type of this expression.  */\n DEFTREECODE (COND_EXPR, \"cond_expr\", 'e', 3)\n \n /* Declare local variables, including making RTL and allocating space."}, {"sha": "2f6a2e80c37e9de5647bb9ba92f56c3af9a1c4ef", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2287,7 +2287,7 @@ biv_total_increment (bl, loop_start, loop_end)\n \n   /* For increment, must check every instruction that sets it.  Each\n      instruction must be executed only once each time through the loop.\n-     To verify this, we check that the the insn is always executed, and that\n+     To verify this, we check that the insn is always executed, and that\n      there are no backward branches after the insn that branch to before it.\n      Also, the insn must have a mult_val of one (to make sure it really is\n      an increment).  */"}, {"sha": "625999d3c654da8cc95b14143692280dc9f3abe3", "filename": "libf2c/changes.netlib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libf2c%2Fchanges.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libf2c%2Fchanges.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2Fchanges.netlib?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2392,7 +2392,7 @@ Tue Aug  1 09:25:56 EDT 1995\n   Permit real (or double precision) parameters in dimension expressions.\n \n Mon Aug  7 08:04:00 EDT 1995\n-  Append \"_eqv\" rather than just \"_\" to names that that appear in\n+  Append \"_eqv\" rather than just \"_\" to names that appear in\n EQUIVALENCE statements as well as structs in f2c.h (to avoid a\n conflict when these names also name common blocks).\n "}, {"sha": "195d31019a0a6731a6420578680f5aee16bd5305", "filename": "libiberty/argv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -82,7 +82,7 @@ SYNOPSIS\n DESCRIPTION\n \n \tDuplicate an argument vector.  Simply scans through the\n-\tvector, duplicating each argument argument until the\n+\tvector, duplicating each argument until the\n \tterminating NULL is found.\n \n RETURNS"}, {"sha": "59c06ba39502e4b3fe153e4d2be34781eb2684e7", "filename": "libiberty/mpw.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libiberty%2Fmpw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libiberty%2Fmpw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmpw.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -54,7 +54,7 @@ mpwify_filename(char *unixname, char *macname)\n     }\n   j = 0;\n   /* If you're going to end up with one or more colons in the middle of a\n-     a path after an all-Unix relative path is translated, you must add a\n+     path after an all-Unix relative path is translated, you must add a\n      colon on the front, so that the first component is not thought to be\n      a disk name.  */\n   if (unixname[0] != '/' && ! strchr (unixname, ':') && strchr (unixname, '/'))"}, {"sha": "3aa4c37a654f9dd1e5dff9540bb5ffc908dc25b1", "filename": "libio/builtinbuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fbuiltinbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fbuiltinbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fbuiltinbuf.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -32,7 +32,7 @@ the executable file might be covered by the GNU General Public License. */\n #include <streambuf.h>\n \n #if !_IO_UNIFIED_JUMPTABLES\n-// A builtinbuf a a streambuf where all the virtual operations\n+// A builtinbuf is a streambuf where all the virtual operations\n // call the _IO_jump_t table.\n \n extern \"C++\" {"}, {"sha": "c4406340704b3d7c8ab0aa74f68ce8b279976144", "filename": "libio/fileops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Ffileops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Ffileops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Ffileops.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -256,7 +256,7 @@ _IO_do_write (fp, data, to_do)\n     return 0;\n   if (fp->_flags & _IO_IS_APPENDING)\n     /* On a system without a proper O_APPEND implementation,\n-       you would need to sys_seek(0, SEEK_END) here, but is\n+       you would need to sys_seek(0, SEEK_END) here, but it\n        is not needed nor desirable for Unix- or Posix-like systems.\n        Instead, just indicate that offset (before and after) is\n        unpredictable. */"}, {"sha": "641cd7da22f078aacf8767437fb37e7a63838d9d", "filename": "libio/iostream.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fiostream.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fiostream.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fiostream.texi?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1595,7 +1595,7 @@ convenient, but it does cost some extra overhead.\n \n If you set things up to use the implementation of @code{stdio} provided\n with this library, then @code{cin}, @code{cout}, and @code{cerr} will be\n-set up to to use @code{stdiobuf} objects, since you get their benefits\n+set up to use @code{stdiobuf} objects, since you get their benefits\n for free.  @xref{Stdio,,C Input and Output}.\n \n @ignore\n@@ -1624,7 +1624,7 @@ If @var{mode} is @samp{ios::in}, standard output from the program is sent\n to a pipe; you can read from the pipe by reading from the\n @code{procbuf}.  (This is similar to @w{@samp{popen(@var{command}, \"r\")}}.)\n \n-If @var{mode} is @samp{ios::out}, output written written to the\n+If @var{mode} is @samp{ios::out}, output written to the\n @code{procbuf} is written to a pipe; the program is set up to read its\n standard input from (the other end of) the pipe.  (This is similar to\n @w{@samp{popen(@var{command}, \"w\")}}.)"}, {"sha": "057d1e6e4ce9bca11feeff1dbd69bb33f8b06e6e", "filename": "libio/streambuf.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libio%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.cc?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -179,7 +179,7 @@ static _IO_FILE* _IO_sb_setbuf(_IO_FILE *fp, char *buf, _IO_ssize_t n)\n    virtual function, so that C functions can access (potentially user-defined)\n    streambuf-derived objects.\n    Contrast the builtinbuf class, which does the converse:  Allow\n-   C++ virtual calls to to be used on _IO_FILE objects that are builtin\n+   C++ virtual calls to be used on _IO_FILE objects that are builtin\n    (or defined by C code). */\n \n "}, {"sha": "4ca9d9e1f71800f69744535cccfe7e9d51dfdd4e", "filename": "libstdc++/stl/pthread_alloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fpthread_alloc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fpthread_alloc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fpthread_alloc?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -63,7 +63,7 @@ private:\n \n   // Returns an object of size n, and optionally adds to size n free list.\n   void *refill(size_t n);\n-  // Allocates a chunk for nobjs of size size.  nobjs may be reduced\n+  // Allocates a chunk for nobjs of size \"size\".  nobjs may be reduced\n   // if it is inconvenient to allocate the requested number.\n   static char *chunk_alloc(size_t size, int &nobjs);\n "}, {"sha": "b4af525c38e4686fa81bcd445ada6dd428c49eb8", "filename": "libstdc++/stl/ropeimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fropeimpl.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -838,7 +838,7 @@ inline bool __rope_insert_char_consumer<char>::operator()\n }\n \n #if !defined(_MSC_VER) && !defined(__BORLANDC__)\n-// I couldn't get this to work work with the VC++ version of basic_ostream.\n+// I couldn't get this to work with the VC++ version of basic_ostream.\n inline bool __rope_insert_char_consumer<wchar_t>::operator()\n \t\t\t\t\t(const wchar_t * leaf, size_t n)\n {"}, {"sha": "2c3de40f61b99ae0615f5ebef41404127b8e265b", "filename": "libstdc++/stl/stl_alloc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/libstdc%2B%2B%2Fstl%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_alloc.h?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -342,7 +342,7 @@ class __default_alloc_template {\n \n   // Returns an object of size n, and optionally adds to size n free list.\n   static void *refill(size_t n);\n-  // Allocates a chunk for nobjs of size size.  nobjs may be reduced\n+  // Allocates a chunk for nobjs of size \"size\".  nobjs may be reduced\n   // if it is inconvenient to allocate the requested number.\n   static char *chunk_alloc(size_t size, int &nobjs);\n "}, {"sha": "85e24dcdff142a5fd94d03d2620ded6f3113d046", "filename": "texinfo/INTRODUCTION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2FINTRODUCTION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2FINTRODUCTION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2FINTRODUCTION?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -49,7 +49,7 @@ read this file, type\n          $ info -f info-stnd\n \n If you are using GNU Emacs, you may want to install the Emacs Lisp files\n-permanently.  Move them them to a directory in the load-path for Emacs;\n+permanently.  Move them to a directory in the load-path for Emacs;\n otherwise Emacs will not be able to load the autoloaded support files, such\n as `texinfmt.el'.\n "}, {"sha": "1c4ac138d6b088e540f6cf905c3634c7a6df39a0", "filename": "texinfo/README", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2FREADME?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -94,7 +94,7 @@ Source files for standalone C programs (./lib, ./makeinfo, ./info):\n \n Installation files:\n \n-    configure                   This file creates creates a Makefile \n+    configure                   This file creates a Makefile \n                                 which in turn creates an `info' or\n                                 `makeinfo' executable, or a C sources\n                                 distribution."}, {"sha": "2f7869f8fc15893930cae04efc3537bdf1d65345", "filename": "texinfo/acinclude.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Facinclude.m4?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,7 +1,7 @@\n # Macro to add for using GNU gettext.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -310,7 +310,7 @@ __argz_count __argz_stringify __argz_next])\n # Search path for a program which passes the given test.\n # Ulrich Drepper <drepper@cygnus.com>, 1996.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -358,7 +358,7 @@ AC_SUBST($1)dnl\n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available."}, {"sha": "7db9b28f98d16b9f731e3a0d9ec089308e8fea02", "filename": "texinfo/aclocal.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Faclocal.m4?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -13,7 +13,7 @@ dnl PARTICULAR PURPOSE.\n # Macro to add for using GNU gettext.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -322,7 +322,7 @@ __argz_count __argz_stringify __argz_next])\n # Search path for a program which passes the given test.\n # Ulrich Drepper <drepper@cygnus.com>, 1996.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -370,7 +370,7 @@ AC_SUBST($1)dnl\n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available."}, {"sha": "aadd28a35e16a3e5c1f01379706f118202c08f0c", "filename": "texinfo/emacs/texinfmt.el", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Femacs%2Ftexinfmt.el", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Femacs%2Ftexinfmt.el", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Femacs%2Ftexinfmt.el?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1897,7 +1897,7 @@ commands that are defined in texinfo.tex for printed output.\n                   (cons (- end-of-template start-of-template)\n                         texinfo-multitable-width-list))\n             ;; Remove carriage return from within a template, if any.\n-            ;; This helps those those who want to use more than\n+            ;; This helps those who want to use more than\n             ;; one line's worth of words in @multitable line.\n             (narrow-to-region start-of-template end-of-template)\n             (goto-char (point-min))\n@@ -3644,11 +3644,11 @@ Default is to leave paragraph indentation as is.\"\n ;;; @set, @clear, @ifset, @ifclear\n \n ;; If a flag is set with @set FLAG, then text between @ifset and @end\n-;; ifset is formatted normally, but if the flag is is cleared with\n+;; ifset is formatted normally, but if the flag is cleared with\n ;; @clear FLAG, then the text is not formatted; it is ignored.\n \n ;; If a flag is cleared with @clear FLAG, then text between @ifclear\n-;; and @end ifclear is formatted normally, but if the flag is is set with\n+;; and @end ifclear is formatted normally, but if the flag is set with\n ;; @set FLAG, then the text is not formatted; it is ignored.  @ifclear\n ;; is the opposite of @ifset.\n "}, {"sha": "852930c5b692828d0675483069ec5ef71dd6030b", "filename": "texinfo/info/info.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Finfo%2Finfo.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Finfo%2Finfo.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Finfo%2Finfo.1?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -148,7 +148,7 @@ Pick a menu item specified by name. Picking a menu item causes another\n node to be selected. You do not need to type a complete nodename; if\n you type a few letters and then a space or tab\n .B info\n-will will try to fill in the rest of the nodename. If you ask for further\n+will try to fill in the rest of the nodename. If you ask for further\n completion without typing any more characters you'll be given a list\n of possibilities; you can also get the list with \n .B ?. "}, {"sha": "c61391affb06f2f5736007446f9680ed75f05167", "filename": "texinfo/makeinfo/makeinfo.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fmakeinfo%2Fmakeinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fmakeinfo%2Fmakeinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Fmakeinfo%2Fmakeinfo.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -2910,8 +2910,8 @@ end_of_sentence_p ()\n }\n \n \n-/* Remove upto COUNT characters of whitespace from the\n-   the current output line.  If COUNT is less than zero,\n+/* Remove up to COUNT characters of whitespace from the\n+   current output line.  If COUNT is less than zero,\n    then remove until none left. */\n void\n kill_self_indent (count)\n@@ -3211,7 +3211,7 @@ indent (amount)\n }\n \n /* Search forward for STRING in input_text.\n-   FROM says where where to start. */\n+   FROM says where to start. */\n int\n search_forward (string, from)\n      char *string;\n@@ -6432,7 +6432,7 @@ handle_variable_internal (action, name)\n         case IFSET:\n         case IFCLEAR:\n           /* If IFSET and NAME is not set, or if IFCLEAR and NAME is set,\n-             read lines from the the file until we reach a matching\n+             read lines from the file until we reach a matching\n              \"@end CONDITION\".  This means that we only take note of\n              \"@ifset/clear\" and \"@end\" commands. */\n           {"}, {"sha": "f5b1fe9fe6188711e6c68e4775e2cdbab884f90c", "filename": "texinfo/makeinfo/multi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fmakeinfo%2Fmulti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fmakeinfo%2Fmulti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Fmakeinfo%2Fmulti.c?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -181,7 +181,7 @@ setup_multitable_parameters ()\n              number) and then non-whitespace (the number).  */\n           while (*params && (*params == ' ' || *params == '\\t'))\n             params++;\n-          /* Hmm, but what what @columnfractions 3foo.  Well, I suppose\n+          /* Hmm, but what about @columnfractions 3foo?  Well, I suppose\n              it's invalid input anyway.  */\n           while (*params && *params != ' ' && *params != '\\t'\n                  && *params != '\\n' && *params != '@')"}, {"sha": "2bcfa31b94bd8f013e1f77a583c437aac61e94c0", "filename": "texinfo/po/Makefile.in.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fpo%2FMakefile.in.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e012594edc0e7783e3e6d91960c91469df4164/texinfo%2Fpo%2FMakefile.in.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/texinfo%2Fpo%2FMakefile.in.in?ref=38e012594edc0e7783e3e6d91960c91469df4164", "patch": "@@ -1,7 +1,7 @@\n # Makefile for program source directory in GNU NLS utilities package.\n # Copyright (C) 1995, 1996, 1997 by Ulrich Drepper <drepper@gnu.ai.mit.edu>\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available."}]}