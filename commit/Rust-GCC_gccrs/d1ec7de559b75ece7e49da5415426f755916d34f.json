{"sha": "d1ec7de559b75ece7e49da5415426f755916d34f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlYzdkZTU1OWI3NWVjZTdlNDlkYTU0MTU0MjZmNzU1OTE2ZDM0Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-06-11T09:17:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:17:04Z"}, "message": "[Ada] Crash with Inline_Always on a function with an extended return\n\nThis patch fixes a crash on a unit with a function with the GNAT-specific\nInline_Always pragma whose body is an extended return statement, when compiling\nwith no optimization level specified.\n\n2018-06-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Expand_Inlined_Call): If no optimization level is\n\tspecified, the expansion of a call to an Inline_Always function is\n\tfully performed in the front-end even on a target that support back-end\n\tinlining.\n\ngcc/testsuite/\n\n\t* gnat.dg/inline_always1.adb: New testcase.\n\nFrom-SVN: r261402", "tree": {"sha": "118d9803120c5a83c6952beb75b033a4e976d226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118d9803120c5a83c6952beb75b033a4e976d226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ec7de559b75ece7e49da5415426f755916d34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ec7de559b75ece7e49da5415426f755916d34f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ec7de559b75ece7e49da5415426f755916d34f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ec7de559b75ece7e49da5415426f755916d34f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75441c4a37291d5be6fb098d161a2c4a22f3741a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75441c4a37291d5be6fb098d161a2c4a22f3741a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75441c4a37291d5be6fb098d161a2c4a22f3741a"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "25e133e0d718e3a2fb432eff27cd42d787bb36b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1ec7de559b75ece7e49da5415426f755916d34f", "patch": "@@ -1,3 +1,10 @@\n+2018-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): If no optimization level is\n+\tspecified, the expansion of a call to an Inline_Always function is\n+\tfully performed in the front-end even on a target that support back-end\n+\tinlining.\n+\n 2018-06-11  Arnaud Charlet  <charlet@adacore.com>\n \n \t* bindgen.adb (Gen_Adainit): Protect reference to System.Parameters"}, {"sha": "f7e6b28ed0762c0d41d7acda5e3f438ca8f848c1", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d1ec7de559b75ece7e49da5415426f755916d34f", "patch": "@@ -2269,11 +2269,16 @@ package body Inline is\n      Subp      : Entity_Id;\n      Orig_Subp : Entity_Id)\n    is\n-      Loc       : constant Source_Ptr := Sloc (N);\n-      Is_Predef : constant Boolean :=\n-                    Is_Predefined_Unit (Get_Source_Unit (Subp));\n-      Orig_Bod  : constant Node_Id :=\n+      Loc           : constant Source_Ptr := Sloc (N);\n+      Is_Predef     : constant Boolean :=\n+                        Is_Predefined_Unit (Get_Source_Unit (Subp));\n+      Orig_Bod      : constant Node_Id :=\n                     Body_To_Inline (Unit_Declaration_Node (Subp));\n+      Uses_Back_End : constant Boolean :=\n+                         Back_End_Inlining and then Optimization_Level > 0;\n+      --  The back-end expansion is used if the target supports back-end\n+      --  inlining and some level of optimixation is required; otherwise\n+      --  the inlining takes place fully as a tree expansion.\n \n       Blk      : Node_Id;\n       Decl     : Node_Id;\n@@ -2840,7 +2845,7 @@ package body Inline is\n    begin\n       --  Initializations for old/new semantics\n \n-      if not Back_End_Inlining then\n+      if not Uses_Back_End then\n          Is_Unc      := Is_Array_Type (Etype (Subp))\n                           and then not Is_Constrained (Etype (Subp));\n          Is_Unc_Decl := False;\n@@ -2914,7 +2919,7 @@ package body Inline is\n \n       --  Old semantics\n \n-      if not Back_End_Inlining then\n+      if not Uses_Back_End then\n          declare\n             Bod : Node_Id;\n \n@@ -2958,8 +2963,20 @@ package body Inline is\n                begin\n                   First_Decl := First (Declarations (Blk));\n \n+                  --  If the body is a single extended return statement,\n+                  --  the resulting block is a nested block.\n+\n+                  if No (First_Decl) then\n+                        First_Decl := First\n+                          (Statements (Handled_Statement_Sequence (Blk)));\n+\n+                     if Nkind (First_Decl) = N_Block_Statement then\n+                        First_Decl := First (Declarations (First_Decl));\n+                     end if;\n+                  end if;\n+\n                   if Nkind (First_Decl) /= N_Object_Declaration then\n-                     return;\n+                     return;  --  No front-end inlining possible,\n                   end if;\n \n                   if Nkind (Parent (N)) /= N_Assignment_Statement then\n@@ -3288,7 +3305,7 @@ package body Inline is\n          --  of the result of a call to an inlined function that returns\n          --  an unconstrained type\n \n-         elsif Back_End_Inlining\n+         elsif Uses_Back_End\n            and then Nkind (Parent (N)) = N_Object_Declaration\n            and then Is_Unc\n          then"}, {"sha": "6d5e9644f99cfc26eb7dfab17b1c99560a7ef63d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1ec7de559b75ece7e49da5415426f755916d34f", "patch": "@@ -1,3 +1,7 @@\n+2018-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/inline_always1.adb: New testcase.\n+\n 2018-06-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/nested_generic2.adb, gnat.dg/nested_generic2.ads,"}, {"sha": "59f161c4429545230c8c0ed8e58bb278d4bf6760", "filename": "gcc/testsuite/gnat.dg/inline_always1.adb", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Ftestsuite%2Fgnat.dg%2Finline_always1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ec7de559b75ece7e49da5415426f755916d34f/gcc%2Ftestsuite%2Fgnat.dg%2Finline_always1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline_always1.adb?ref=d1ec7de559b75ece7e49da5415426f755916d34f", "patch": "@@ -0,0 +1,57 @@\n+--  { dg-do compile }\n+\n+with Ada.Text_IO;\n+\n+procedure Inline_Always1 is\n+\n+   function S(N : Integer ) return String is\n+   begin\n+      return \"hello world\";\n+   end S;\n+\n+   type String_Access is access all String;\n+   type R  is record\n+      SA : String_Access;\n+   end record;\n+\n+   Data : aliased String := \"hello world\";\n+   My_SA : constant String_Access :=  Data'Access;\n+   function Make_R( S : String ) return R is\n+      My_R : R;\n+   begin\n+      My_R.SA := My_SA;\n+      return My_R;\n+   end Make_R;\n+\n+   function Get_String( My_R : R ) return String\n+   is\n+   begin\n+      return S : String(My_R.SA.all'Range) do\n+         S := My_R.SA.all;\n+      end return;\n+   end Get_String;\n+   pragma Inline_Always( Get_String);\n+\n+   My_R : constant R := Make_R( \"hello world\");\n+begin\n+   for I in 1..10000 loop\n+      declare\n+         Res : constant String := S( 4 );\n+      begin\n+         Ada.Text_IO.Put_Line(Res);\n+      end;\n+      declare\n+         Res : constant String := S( 4 );\n+      begin\n+         Ada.Text_IO.Put_Line(Res);\n+      end;\n+\n+      declare\n+         S : constant String := Get_String( My_R );\n+      begin\n+         Ada.Text_IO.Put_Line(S);\n+         Ada.Text_IO.Put_Line(My_R.SA.all);\n+      end;\n+   end loop;\n+\n+end Inline_Always1;"}]}