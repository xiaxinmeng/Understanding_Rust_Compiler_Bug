{"sha": "3e508131146912f5ce41b11b70989049505c6fba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1MDgxMzExNDY5MTJmNWNlNDFiMTFiNzA5ODkwNDk1MDVjNmZiYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-02-07T11:08:20Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-02-07T11:08:20Z"}, "message": "re PR fortran/54339 (Update gfortran manual for GCC 4.8's TS29113 changes)\n\n2013-02-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54339\n        * gfortran.texi (Standards): Mention TS29113.\n        (Varying Length Character): Mention deferred-length\n        strings.\n        (Fortran 2003 Status): Add unlimited polymorphic.\n        (TS 29113 Status): Add TYPE(*) and DIMENSION(..).\n        (C Interop): Update the section about TS29113.\n\nFrom-SVN: r195845", "tree": {"sha": "7341cd1248d9c5ac4651ee666efbd7fe22bde890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7341cd1248d9c5ac4651ee666efbd7fe22bde890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e508131146912f5ce41b11b70989049505c6fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e508131146912f5ce41b11b70989049505c6fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e508131146912f5ce41b11b70989049505c6fba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e508131146912f5ce41b11b70989049505c6fba/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b8e955a112f5306c90922520f5e9fcfd59eae64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8e955a112f5306c90922520f5e9fcfd59eae64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8e955a112f5306c90922520f5e9fcfd59eae64"}], "stats": {"total": 135, "additions": 112, "deletions": 23}, "files": [{"sha": "a0a0e022ad4f2b3a74a5383ab387731f55e70df6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e508131146912f5ce41b11b70989049505c6fba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e508131146912f5ce41b11b70989049505c6fba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e508131146912f5ce41b11b70989049505c6fba", "patch": "@@ -1,3 +1,13 @@\n+2013-02-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54339 \n+\t* gfortran.texi (Standards): Mention TS29113.\n+\t(Varying Length Character): Mention deferred-length\n+\tstrings.\n+\t(Fortran 2003 Status): Add unlimited polymorphic.\n+\t(TS 29113 Status): Add TYPE(*) and DIMENSION(..).\n+\t(C Interop): Update the section about TS29113.\n+\n 2013-02-06 Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/55789"}, {"sha": "2dccb16d81aa05e94fe41b6880df46c687325ec0", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 102, "deletions": 23, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e508131146912f5ce41b11b70989049505c6fba/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e508131146912f5ce41b11b70989049505c6fba/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=3e508131146912f5ce41b11b70989049505c6fba", "patch": "@@ -221,7 +221,7 @@ compiler.\n \n The GNU Fortran compiler front end was\n designed initially as a free replacement for,\n-or alternative to, the unix @command{f95} command;\n+or alternative to, the Unix @command{f95} command;\n @command{gfortran} is the command you will use to invoke the compiler.\n \n @menu\n@@ -522,12 +522,13 @@ ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n the ISO/IEC TR-15581 enhancements to allocatable arrays.\n \n-In the future, the GNU Fortran compiler will also support ISO/IEC\n-1539-1:2004 (Fortran 2003), ISO/IEC 1539-1:2010 (Fortran 2008) and\n-future Fortran standards.  Partial support of the Fortran 2003 and\n-Fortran 2008 standard is already provided; the current status of the\n-support is reported in the @ref{Fortran 2003 status} and\n-@ref{Fortran 2008 status} sections of the documentation.\n+GNU Fortran also have a partial support for ISO/IEC 1539-1:2004 (Fortran\n+2003), ISO/IEC 1539-1:2010 (Fortran 2008), the Technical Specification\n+@code{Further Interoperability of Fortran with C} (ISO/IEC TS 29113:2012).\n+Full support of those standards and future Fortran standards is planned.\n+The current status of the support is can be found in the\n+@ref{Fortran 2003 status}, @ref{Fortran 2008 status} and\n+@ref{TS 29113 status} sections of the documentation.\n \n Additionally, the GNU Fortran compilers supports the OpenMP specification\n (version 3.1, @url{http://openmp.org/@/wp/@/openmp-specifications/}).\n@@ -545,6 +546,10 @@ for them, which work with GNU Fortran.  They can be found at\n @uref{http://www.fortran.com/@/iso_varying_string.f95} and at\n @uref{ftp://ftp.nag.co.uk/@/sc22wg5/@/ISO_VARYING_STRING/}.\n \n+Deferred-length character strings of Fortran 2003 supports part of\n+the features of @code{ISO_VARYING_STRING} and should be considered as\n+replacement. (Namely, allocatable or pointers of the type\n+@code{character(len=:)}.)\n \n \n @c =====================================================================\n@@ -807,8 +812,8 @@ operators bound to a type.\n override type-bound procedures or to have deferred binding.\n \n @item Polymorphic entities (``@code{CLASS}'') for derived types -- including\n-@code{SAME_TYPE_AS}, @code{EXTENDS_TYPE_OF} and @code{SELECT TYPE}.\n-Note that unlimited polymorphism is currently not supported.\n+@code{SAME_TYPE_AS}, @code{EXTENDS_TYPE_OF} and @code{SELECT TYPE} for\n+scalars and arrays, including unlimited polymorphism.\n \n @item Generic interface names, which have the same name as derived types,\n are now supported. This allows one to write constructor functions.  Note\n@@ -1079,16 +1084,23 @@ The @uref{http://gcc.gnu.org/wiki/TS29113Status, wiki} has some information\n about the current TS 29113 implementation status.  In particular, the\n following is implemented.\n \n+See also @ref{Further Interoperability of Fortran with C}.\n+\n @itemize\n @item The @option{-std=f2008ts} option.\n \n @item The @code{OPTIONAL} attribute is allowed for dummy arguments\n of @code{BIND(C) procedures.}\n \n-@item The RANK intrinsic is supported.\n+@item The @code{RANK} intrinsic is supported.\n \n @item GNU Fortran's implementation for variables with @code{ASYNCHRONOUS}\n attribute is compatible with TS 29113.\n+\n+@item Assumed types (@code{TYPE(*)}.\n+\n+@item Assumed-rank (@code{DIMENSION(..)}). However, the array descriptor\n+of the TS is not yet supported.\n @end itemize\n \n \n@@ -2264,7 +2276,7 @@ Derived types with the C binding attribute shall not have the @code{sequence}\n attribute, type parameters, the @code{extends} attribute, nor type-bound\n procedures.  Every component must be of interoperable type and kind and may not\n have the @code{pointer} or @code{allocatable} attribute.  The names of the\n-variables are irrelevant for interoperability.\n+components are irrelevant for interoperability.\n \n As there exist no direct Fortran equivalents, neither unions nor structs\n with bit field or variable-length array members are interoperable.\n@@ -2304,11 +2316,14 @@ be compatible with C.  The dummy argument declaration is relatively\n straightforward.  However, one needs to be careful because C uses\n call-by-value by default while Fortran behaves usually similar to\n call-by-reference.  Furthermore, strings and pointers are handled\n-differently.  Note that only explicit size and assumed-size arrays are\n-supported but not assumed-shape or allocatable arrays.\n+differently.  Note that in Fortran 2003 and 2008 only explicit size\n+and assumed-size arrays are supported but not assumed-shape or\n+deferred-shape (i.e. allocatable or pointer) arrays.  However, those\n+are allowed since the Technical Specification 29113, see\n+@ref{Further Interoperability of Fortran with C}\n \n To pass a variable by value, use the @code{VALUE} attribute.\n-Thus the following C prototype\n+Thus, the following C prototype\n \n @smallexample\n @code{int func(int i, int *j)}\n@@ -2401,6 +2416,11 @@ The intrinsic procedures are described in @ref{Intrinsic Procedures}.\n C pointers are represented in Fortran via the special opaque derived type\n @code{type(c_ptr)} (with private components).  Thus one needs to\n use intrinsic conversion procedures to convert from or to C pointers.\n+\n+For some applications, using an assumed type (@code{TYPE(*)}) can be an\n+alternative to a C pointer; see\n+@ref{Further Interoperability of Fortran with C}.\n+\n For example,\n \n @smallexample\n@@ -2546,17 +2566,76 @@ END MODULE m\n @node Further Interoperability of Fortran with C\n @subsection Further Interoperability of Fortran with C\n \n-Assumed-shape and allocatable arrays are passed using an array descriptor\n-(dope vector).  The internal structure of the array descriptor used\n-by GNU Fortran is not yet documented and will change.  There will also be\n-a Technical Specification (TS 29113) which standardizes an interoperable\n-array descriptor.  Until then, you can use the Chasm Language\n+The Technical Specification ISO/IEC TS 29113:2012 on further\n+interoperability of Fortran with C extends the interoperability support\n+of Fortran 2003 and Fortran 2008. Besides removing some restrictions\n+and constraints, it adds assumed-type (@code{TYPE(*)}) and assumed-rank\n+(@code{dimension}) variables and allows for interoperability of\n+assumed-shape, assumed-rank and deferred-shape arrays, including\n+allocatables and pointers.\n+\n+Note: Currently, GNU Fortran does not support the array descriptor\n+(dope vector) as specified in the Technical Specification, but uses\n+an array descriptor with different fields. The Chasm Language\n Interoperability Tools, @url{http://chasm-interop.sourceforge.net/},\n-which provide an interface to GNU Fortran's array descriptor.\n+provide an interface to GNU Fortran's array descriptor.\n+\n+The Technical Specification adds the following new features, which\n+are supported by GNU Fortran:\n \n-GNU Fortran already supports the C-interoperable @code{OPTIONAL}\n-attribute; for absent arguments, a @code{NULL} pointer is passed.\n+@itemize @bullet\n \n+@item The @code{ASYNCHRONOUS} attribute has been clarified and\n+extended to allow its use with asynchronous communication in\n+user-provided libraries such as in implementations of the\n+Message Passing Interface specification.\n+\n+@item Many constraints have been relaxed, in particular for\n+the @code{C_LOC} and @code{C_F_POINTER} intrinsics.\n+\n+@item The @code{OPTIONAL} attribute is now allowed for dummy\n+arguments; an absent argument matches a @code{NULL} pointer.\n+\n+@item Assumed types (@code{TYPE(*)}) have been added, which may\n+only be used for dummy arguments.  They are unlimited polymorphic\n+but contrary to @code{CLASS(*)} they do not contain any type\n+information, similar to C's @code{void *} pointers.  Expressions\n+of any type and kind can be passed; thus, it can be used as\n+replacement for @code{TYPE(C_PTR)}, avoiding the use of\n+@code{C_LOC} in the caller.\n+\n+Note, however, that @code{TYPE(*)} only accepts scalar arguments,\n+unless the @code{DIMENSION} is explicitly specified.  As\n+@code{DIMENSION(*)} only supports array (including array elements) but\n+no scalars, it is not a full replacement for @code{C_LOC}.  On the\n+other hand, assumed-type assumed-rank dummy arguments\n+(@code{TYPE(*), DIMENSION(..)}) allow for both scalars and arrays, but\n+require special code on the callee side to handle the array descriptor.\n+\n+@item Assumed-shape arrays (@code{DIMENSION(..)}) as dummy argument\n+allow that scalars and arrays of any rank can be passed as actual\n+argument. As the Technical Specification does not provide for direct\n+means to operate with them, they have to be used either from the C side\n+or be converted using @code{C_LOC} and @code{C_F_POINTER} to scalars\n+or arrays of a specific rank. The rank can be determined using the\n+@code{RANK} intrinisic.\n+@end itemize\n+\n+\n+Currently unimplemented:\n+\n+@itemize @bullet\n+\n+@item GNU Fortran always uses an array descriptor, which does not\n+match the one of the Technical Specification. The\n+@code{ISO_Fortran_binding.h} header file and the C functions it\n+specifies are not available.\n+\n+@item Using assumed-shape, assumed-rank and deferred-shape arrays in\n+@code{BIND(C)} procedures is not fully supported. In particular,\n+C interoperable strings of other length than one are not supported\n+as this requires the new array descriptor.\n+@end itemize\n \n \n @node GNU Fortran Compiler Directives\n@@ -3100,7 +3179,7 @@ Environment variable for filename for * IO-unit.\n Environment variable for temporary file directory.\n \n @item\n-Environment variable forcing standard output to be line buffered (unix).\n+Environment variable forcing standard output to be line buffered (Unix).\n \n @end itemize\n "}]}