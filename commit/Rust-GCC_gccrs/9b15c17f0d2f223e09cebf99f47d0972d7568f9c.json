{"sha": "9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIxNWMxN2YwZDJmMjIzZTA5Y2ViZjk5ZjQ3ZDA5NzJkNzU2OGY5Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-06T20:25:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-06T20:25:41Z"}, "message": "flow.c (mark_set_1): Use loop_depth+1 as reference weight.\n\n        * flow.c (mark_set_1): Use loop_depth+1 as reference weight.\n        (find_auto_inc, mark_used_regs, try_pre_increment_1): Likewise.\n        (count_reg_sets_1, count_reg_references): Likewise.\n        (flow_loops_level_compute): Start counting actual loop depth at 1.\n        (flow_loops_find): Likewise.\n        * local-alloc.c (update_equiv_regs): Likewise.\n        * regclass.c (regclass): Re-instate Jan 4 0-based loop_depth change.\n\nFrom-SVN: r31259", "tree": {"sha": "95bb033a85e24116b3efc6a96f5f1fa804c19191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95bb033a85e24116b3efc6a96f5f1fa804c19191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/comments", "author": null, "committer": null, "parents": [{"sha": "55ff3de705a71f1419d97123dac01f0c0950ca70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ff3de705a71f1419d97123dac01f0c0950ca70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ff3de705a71f1419d97123dac01f0c0950ca70"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "ac90acd3443adf6e64eac3b298ded2fc80b2a01a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "patch": "@@ -1,3 +1,13 @@\n+2000-01-06  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (mark_set_1): Use loop_depth+1 as reference weight.\n+\t(find_auto_inc, mark_used_regs, try_pre_increment_1): Likewise.\n+\t(count_reg_sets_1, count_reg_references): Likewise.\n+\t(flow_loops_level_compute): Start counting actual loop depth at 1.\n+\t(flow_loops_find): Likewise.\n+\t* local-alloc.c (update_equiv_regs): Likewise.\n+\t* regclass.c (regclass): Re-instate Jan 4 0-based loop_depth change.\n+\n 2000-01-06  Gabriel Dos Reis  <dosreis@cmla.ens-cachan.fr>\n  \n        * defaults.h (DWARF_FRAME_REGISTERS): if not defined, default to"}, {"sha": "ae8ec5a1cf23b9f7e180299fc4ebd5b63924cbe6", "filename": "gcc/flow.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "patch": "@@ -4028,7 +4028,7 @@ mark_set_1 (needed, dead, x, insn, significant, flags)\n \t          /* Count (weighted) references, stores, etc.  This counts a\n \t\t     register twice if it is modified, but that is correct.  */\n \t          REG_N_SETS (regno)++;\n-\t          REG_N_REFS (regno) += loop_depth;\n+\t          REG_N_REFS (regno) += loop_depth + 1;\n \t\t  \n \t          /* The insns where a reg is live are normally counted\n \t\t     elsewhere, but we want the count to include the insn\n@@ -4281,7 +4281,7 @@ find_auto_inc (needed, x, insn)\n \t      /* Count an extra reference to the reg.  When a reg is\n \t\t incremented, spilling it is worse, so we want to make\n \t\t that less likely.  */\n-\t      REG_N_REFS (regno) += loop_depth;\n+\t      REG_N_REFS (regno) += loop_depth + 1;\n \n \t      /* Count the increment as a setting of the register,\n \t\t even though it isn't a SET in rtl.  */\n@@ -4502,7 +4502,7 @@ mark_used_regs (needed, live, x, flags, insn)\n \n \t\t/* Count (weighted) number of uses of each reg.  */\n \n-\t\tREG_N_REFS (regno) += loop_depth;\n+\t\tREG_N_REFS (regno) += loop_depth + 1;\n \t      }\n \t  }\n \n@@ -4745,7 +4745,7 @@ try_pre_increment_1 (insn)\n \t less likely.  */\n       if (regno >= FIRST_PSEUDO_REGISTER)\n \t{\n-\t  REG_N_REFS (regno) += loop_depth;\n+\t  REG_N_REFS (regno) += loop_depth + 1;\n \t  REG_N_SETS (regno)++;\n \t}\n       return 1;\n@@ -5372,8 +5372,7 @@ count_reg_sets_1 (x)\n \t  /* Count (weighted) references, stores, etc.  This counts a\n \t     register twice if it is modified, but that is correct.  */\n \t  REG_N_SETS (regno)++;\n-\n-\t  REG_N_REFS (regno) += loop_depth;\n+\t  REG_N_REFS (regno) += loop_depth + 1;\n \t}\n     }\n }\n@@ -5452,7 +5451,7 @@ count_reg_references (x)\n \n     case REG:\n       if (REGNO (x) >= FIRST_PSEUDO_REGISTER)\n-\tREG_N_REFS (REGNO (x)) += loop_depth;\n+\tREG_N_REFS (REGNO (x)) += loop_depth + 1;\n       return;\n \n     case SET:\n@@ -5551,9 +5550,10 @@ count_reg_references (x)\n    More accurate reference counts generally lead to better register allocation.\n \n    F is the first insn to be scanned.\n+\n    LOOP_STEP denotes how much loop_depth should be incremented per\n-   loop nesting level in order to increase the ref count more for references\n-   in a loop.\n+   loop nesting level in order to increase the ref count more for\n+   references in a loop.\n \n    It might be worthwhile to update REG_LIVE_LENGTH, REG_BASIC_BLOCK and\n    possibly other information which is used by the register allocators.  */\n@@ -5577,7 +5577,6 @@ recompute_reg_usage (f, loop_step)\n \n   /* Scan each insn in the chain and count how many times each register is\n      set/used.  */\n-  loop_depth = 1;\n   for (index = 0; index < n_basic_blocks; index++)\n     {\n       basic_block bb = BASIC_BLOCK (index);\n@@ -6819,7 +6818,7 @@ static int\n flow_loops_level_compute (loops)\n      struct loops *loops;\n {\n-  return flow_loop_level_compute (loops->tree, 0);\n+  return flow_loop_level_compute (loops->tree, 1);\n }\n \n \n@@ -6862,7 +6861,7 @@ flow_loops_find (loops)\n   num_loops = 0;\n   for (b = 0; b < n_basic_blocks; b++)\n     {\n-      BASIC_BLOCK (b)->loop_depth = 1;\n+      BASIC_BLOCK (b)->loop_depth = 0;\n       for (e = BASIC_BLOCK (b)->pred; e; e = e->pred_next)\n \t{\n \t  basic_block latch = e->src;"}, {"sha": "70e1ecc106299e2f62b0cde3b7b3399153d3521c", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "patch": "@@ -679,7 +679,7 @@ update_equiv_regs ()\n \n   init_alias_analysis ();\n \n-  loop_depth = 1;\n+  loop_depth = 0;\n \n   /* Scan the insns and find which registers have equivalences.  Do this\n      in a separate scan of the insns because (due to -fcse-follow-jumps)"}, {"sha": "06c2badfd2318cff87b24ae4418ab63a571fd8b4", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b15c17f0d2f223e09cebf99f47d0972d7568f9c/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=9b15c17f0d2f223e09cebf99f47d0972d7568f9c", "patch": "@@ -1100,13 +1100,13 @@ regclass (f, nregs, dump)\n \t    basic_block bb = BASIC_BLOCK (index);\n \n \t    /* Show that an insn inside a loop is likely to be executed three\n-\t       times more than insns outside a loop.  This is much more aggressive\n-\t       than the assumptions made elsewhere and is being tried as an\n-\t       experiment.  */\n+\t       times more than insns outside a loop.  This is much more\n+\t       aggressive than the assumptions made elsewhere and is being\n+\t       tried as an experiment.  */\n \t    if (optimize_size)\n \t      loop_cost = 1;\n \t    else\n-\t      loop_cost = 1 << (2 * MIN (bb->loop_depth - 1, 5));\n+\t      loop_cost = 1 << (2 * MIN (bb->loop_depth, 5));\n \t    for (insn = bb->head; ; insn = NEXT_INSN (insn))\n \t      {\n \t\tinsn = scan_one_insn (insn, pass);"}]}