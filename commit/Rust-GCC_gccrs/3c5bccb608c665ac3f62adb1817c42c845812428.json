{"sha": "3c5bccb608c665ac3f62adb1817c42c845812428", "node_id": "C_kwDOANBUbNoAKDNjNWJjY2I2MDhjNjY1YWMzZjYyYWRiMTgxN2M0MmM4NDU4MTI0Mjg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-24T07:19:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-24T07:19:26Z"}, "message": "openmp, c: Tighten up c_tree_equal [PR106981]\n\nThis patch changes c_tree_equal to work more like cp_tree_equal, be\nmore strict in what it accepts.  The ICE on the first testcase was\ndue to INTEGER_CST wi::wide (t1) == wi::wide (t2) comparison which\nICEs if the two constants have different precision, but as the second\ntestcase shows, being too lenient in it can also lead to miscompilation\nof valid OpenMP programs where we think certain expression is the same\neven when it isn't and can be guaranteed at runtime to represent different\nmemory location.  So, the patch looks through only NON_LVALUE_EXPRs\nand for constants as well as casts requires that the types match before\nactually comparing the constant values or recursing on the cast operands.\n\n2022-09-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/106981\ngcc/c/\n\t* c-typeck.cc (c_tree_equal): Only strip NON_LVALUE_EXPRs at the\n\tstart.  For CONSTANT_CLASS_P or CASE_CONVERT: return false if t1 and\n\tt2 have different types.\ngcc/testsuite/\n\t* c-c++-common/gomp/pr106981.c: New test.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/pr106981.c: New test.", "tree": {"sha": "f60f00b86ed562b7c80f3155866c5c78cedc8ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60f00b86ed562b7c80f3155866c5c78cedc8ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5bccb608c665ac3f62adb1817c42c845812428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5bccb608c665ac3f62adb1817c42c845812428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5bccb608c665ac3f62adb1817c42c845812428", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5bccb608c665ac3f62adb1817c42c845812428/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "ac242b5ed13d99cc52dc93abaa8ef26eccebccc3", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5bccb608c665ac3f62adb1817c42c845812428/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5bccb608c665ac3f62adb1817c42c845812428/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=3c5bccb608c665ac3f62adb1817c42c845812428", "patch": "@@ -16051,14 +16051,10 @@ c_tree_equal (tree t1, tree t2)\n   if (!t1 || !t2)\n     return false;\n \n-  for (code1 = TREE_CODE (t1);\n-       CONVERT_EXPR_CODE_P (code1)\n-\t || code1 == NON_LVALUE_EXPR;\n+  for (code1 = TREE_CODE (t1); code1 == NON_LVALUE_EXPR;\n        code1 = TREE_CODE (t1))\n     t1 = TREE_OPERAND (t1, 0);\n-  for (code2 = TREE_CODE (t2);\n-       CONVERT_EXPR_CODE_P (code2)\n-\t || code2 == NON_LVALUE_EXPR;\n+  for (code2 = TREE_CODE (t2); code2 == NON_LVALUE_EXPR;\n        code2 = TREE_CODE (t2))\n     t2 = TREE_OPERAND (t2, 0);\n \n@@ -16069,6 +16065,9 @@ c_tree_equal (tree t1, tree t2)\n   if (code1 != code2)\n     return false;\n \n+  if (CONSTANT_CLASS_P (t1) && !comptypes (TREE_TYPE (t1), TREE_TYPE (t2)))\n+    return false;\n+\n   switch (code1)\n     {\n     case INTEGER_CST:\n@@ -16188,6 +16187,11 @@ c_tree_equal (tree t1, tree t2)\n \treturn true;\n       }\n \n+    CASE_CONVERT:\n+      if (!comptypes (TREE_TYPE (t1), TREE_TYPE (t2)))\n+\treturn false;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "a21d3c2029d27609184731e70376fce2d2c2892a", "filename": "gcc/testsuite/c-c++-common/gomp/pr106981.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5bccb608c665ac3f62adb1817c42c845812428/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr106981.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5bccb608c665ac3f62adb1817c42c845812428/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr106981.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr106981.c?ref=3c5bccb608c665ac3f62adb1817c42c845812428", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/106981 */\n+/* { dg-do compile } */\n+\n+void\n+foo (int a, double *b, double *c, double *d, long long e)\n+{\n+#pragma omp atomic capture\n+  c[a] = d[((int) (e / 10 + 1))] = b[a] + d[((int) e / 10 + 1)];\t/* { dg-error \"invalid form\" } */\n+}"}, {"sha": "ed48d2774f2a5945cf97f94a1dc0e0695b4e6d67", "filename": "libgomp/testsuite/libgomp.c-c++-common/pr106981.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5bccb608c665ac3f62adb1817c42c845812428/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106981.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5bccb608c665ac3f62adb1817c42c845812428/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106981.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106981.c?ref=3c5bccb608c665ac3f62adb1817c42c845812428", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/106981 */\n+\n+int\n+main ()\n+{\n+  int a[0x101];\n+  unsigned int b = 0x100;\n+  if ((unsigned char) b || (unsigned short) b != 0x100)\n+    return 0;\n+  a[0] = 0;\n+  a[0x100] = 42;\n+  #pragma omp atomic update\n+  a[(unsigned char) b] = a[(unsigned short) b] + a[(unsigned char) b];\n+  #pragma omp atomic update\n+  a[(unsigned char) b] = a[(unsigned char) b] + a[(unsigned short) b];\n+  if (a[0] != 84 || a[0x100] != 42)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}