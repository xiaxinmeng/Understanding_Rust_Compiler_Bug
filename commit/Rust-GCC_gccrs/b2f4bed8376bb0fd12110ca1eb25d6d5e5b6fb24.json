{"sha": "b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmNGJlZDgzNzZiYjBmZDEyMTEwY2ExZWIyNWQ2ZDVlNWI2ZmIyNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-02-26T15:53:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-02-26T15:53:51Z"}, "message": "output.h (assemble_addr_to_section): Declare.\n\n\t* output.h (assemble_addr_to_section): Declare.\n\t(get_cdtor_priority_section): Likewise.\n\t* varasm.c (assemble_addr_to_section): New function.\n\t(get_cdtor_priority_section): Likewise.\n\t(default_named_section_asm_out_destructor): Use them.\n\t(destor_dtor_section_asm_out_destructor): Likewise.\n\t(default_named_section_asm_out_constructor): Likewise.\n\t(default_ctor_section_asm_out_constructor): Likewise.\n\t* config.gcc (*-*-vxworks*): Include vxworks.o.\n\t* config/t-vxworks (vxworks.o): New target.\n\t* config/vxworks.h (ALWAYS_NUMBER_CTORS_SECTIONS): Remove.\n\t(TARGET_ASM_CONSTRUCTOR): Define.\n\t(TARGET_ASM_DESTRUCTOR): Likewise.\n\t(vxworks_asm_out_constructor): Declare.\n\t(vxworks_asm_out_destructor): Likewise.\n\n\t* c-common.c (get_priority): Check that we have not just an\n\tINTEGER_CST, but an integer constant with integeral type.\n\n\t* gcc.dg/vxworks/vxworks.exp: New file.\n\t* gcc.dg/vxworks/initpri1.c: Likewise.\n\t* gcc.dg/vxworks/initpri2.c: Likewise.\n\t* gcc.dg/initpri2.c: Add more tests.\n\t* g++.dg/special/initpri2.C: Likewise.\n\nFrom-SVN: r122335", "tree": {"sha": "bc456dae4427f9afc91988189cd6ee26800382a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc456dae4427f9afc91988189cd6ee26800382a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/comments", "author": null, "committer": null, "parents": [{"sha": "6f7f72f999c4084fb561ad6f0f729e73173a5aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7f72f999c4084fb561ad6f0f729e73173a5aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7f72f999c4084fb561ad6f0f729e73173a5aa8"}], "stats": {"total": 299, "additions": 258, "deletions": 41}, "files": [{"sha": "c71aec1f10ed2ee07b4ade2b2f7304f352401126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -1,3 +1,24 @@\n+2007-02-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* output.h (assemble_addr_to_section): Declare.\n+\t(get_cdtor_priority_section): Likewise.\n+\t* varasm.c (assemble_addr_to_section): New function.\n+\t(get_cdtor_priority_section): Likewise.\n+\t(default_named_section_asm_out_destructor): Use them.\n+\t(destor_dtor_section_asm_out_destructor): Likewise.\n+\t(default_named_section_asm_out_constructor): Likewise.\n+\t(default_ctor_section_asm_out_constructor): Likewise.\n+\t* config.gcc (*-*-vxworks*): Include vxworks.o.\n+\t* config/t-vxworks (vxworks.o): New target.\n+\t* config/vxworks.h (ALWAYS_NUMBER_CTORS_SECTIONS): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR): Define.\n+\t(TARGET_ASM_DESTRUCTOR): Likewise.\n+\t(vxworks_asm_out_constructor): Declare.\n+\t(vxworks_asm_out_destructor): Likewise.\n+\n+\t* c-common.c (get_priority): Check that we have not just an\n+\tINTEGER_CST, but an integer constant with integeral type.\n+\n 2007-02-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/30938"}, {"sha": "6d1606c0b0eded556d6fba0d40b794aa18bdda20", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -4687,11 +4687,14 @@ static priority_type\n get_priority (tree args, bool is_destructor)\n {\n   HOST_WIDE_INT pri;\n+  tree arg;\n \n   if (!args)\n     return DEFAULT_INIT_PRIORITY;\n-\n-  if (!host_integerp (TREE_VALUE (args), /*pos=*/0))\n+  \n+  arg = TREE_VALUE (args);\n+  if (!host_integerp (arg, /*pos=*/0)\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n     goto invalid;\n \n   pri = tree_low_cst (TREE_VALUE (args), /*pos=*/0);"}, {"sha": "59df9fb0aa0c4ceeca3428026a88bb1595e630eb", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -572,6 +572,7 @@ case ${target} in\n   tm_file=\"${tm_file} elfos.h svr4.h\"\n   xm_defines=POSIX\n   extra_options=\"${extra_options} vxworks.opt\"\n+  extra_objs=vxworks.o\n   case ${enable_threads} in\n     no) ;;\n     \"\" | yes | vxworks) thread_file='vxworks' ;;"}, {"sha": "9a6a6b0d12070127175c1eacd5a7b5cbf4e4d652", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -25,3 +25,7 @@ EXTRA_HEADERS += $(srcdir)/gthr-vxworks.h gthr-default.h\n LIBGCC2_INCLUDES=\"-I$(SYSTEM_HEADER_DIR)\"\n \n EXTRA_MULTILIB_PARTS = \n+\n+vxworks.o: $(srcdir)/config/vxworks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+\toutput.h $(TM_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "4ac33ab6c3e92d964a3f9d7876e2e0ac449b3572", "filename": "gcc/config/vxworks.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Fvxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Fvxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -0,0 +1,56 @@\n+/* Common VxWorks target definitions for GNU compiler.\n+   Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"output.h\"\n+#include \"tm.h\"\n+\n+/* Like default_named_section_asm_out_constructor, except that even\n+   constructors with DEFAULT_INIT_PRIORITY must go in a numbered\n+   section on VxWorks.  The VxWorks runtime uses a clever trick to get\n+   the sentinel entry (-1) inserted at the beginning of the .ctors\n+   segment.  This trick will not work if we ever generate any entries\n+   in plain .ctors sections; we must always use .ctors.PRIORITY.  */\n+\n+void\n+vxworks_asm_out_constructor (rtx symbol, int priority)\n+{\n+  section *sec;\n+\n+  sec = get_cdtor_priority_section (priority,\n+\t\t\t\t    /*constructor_p=*/true);\n+  assemble_addr_to_section (symbol, sec);\n+}\n+\n+/* See comment for vxworks_asm_out_constructor.  */\n+\n+void\n+vxworks_asm_out_destructor (rtx symbol, int priority)\n+{\n+  section *sec;\n+\n+  sec = get_cdtor_priority_section (priority,\n+\t\t\t\t    /*constructor_p=*/false);\n+  assemble_addr_to_section (symbol, sec);\n+}"}, {"sha": "4c668116c313f3f7836be9552a913e9b5e1643b5", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -90,11 +90,12 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n   targetm.have_ctors_dtors = TARGET_VXWORKS_RTP; \\\n } while (0)\n \n-/* The VxWorks runtime uses a clever trick to get the sentinel entry\n-   (-1) inserted at the beginning of the .ctors segment.  This trick\n-   will not work if we ever generate any entries in plain .ctors\n-   sections; we must always use .ctors.PRIORITY.  */\n-#define ALWAYS_NUMBER_CTORS_SECTIONS 1\n+/* VxWorks requires special handling of constructors and destructors.\n+   All VxWorks configurations must use these functions.  */\n+#define TARGET_ASM_CONSTRUCTOR vxworks_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR vxworks_asm_out_destructor\n+extern void vxworks_asm_out_constructor (rtx symbol, int priority);\n+extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n \n /* The name of the symbol for the table of GOTs in a particular\n    RTP.  */"}, {"sha": "3c9bcc444f8bb4e4360a63e84b2997e8d1e3c6b3", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -272,6 +272,9 @@ extern bool assemble_integer (rtx, unsigned, unsigned, int);\n extern void assemble_real (REAL_VALUE_TYPE, enum machine_mode, unsigned);\n #endif\n \n+/* Write the address of the entity given by SYMBOL to SEC.  */\n+extern void assemble_addr_to_section (rtx, section *);\n+\n /* Return the size of the constant pool.  */\n extern int get_pool_size (void);\n \n@@ -572,6 +575,10 @@ extern section *function_section (tree);\n extern section *unlikely_text_section (void);\n extern section *current_function_section (void);\n \n+/* Return the numbered .ctors.N (if CONSTRUCTOR_P) or .dtors.N (if\n+   not) section for PRIORITY.  */\n+extern section *get_cdtor_priority_section (int, bool);\n+\n extern bool unlikely_text_section_p (section *);\n extern void switch_to_section (section *);\n extern void output_section_asm_op (const void *);"}, {"sha": "23039a5d2be53f48b38de53c53724e15fa1f8605", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -1,5 +1,11 @@\n 2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* gcc.dg/vxworks/vxworks.exp: New file.\n+\t* gcc.dg/vxworks/initpri1.c: Likewise.\n+\t* gcc.dg/vxworks/initpri2.c: Likewise.\n+\t* gcc.dg/initpri2.c: Add more tests.\n+\t* g++.dg/special/initpri2.C: Likewise.\n+\n \t* gcc.dg/initpri1.c: New test.\n \t* gcc.dg/initpri2.c: Likewise.\n \t* g++.dg/special/initpri1.C: New test."}, {"sha": "fa9fda0d7f3def0880edbe4261daf160ee2ac68a", "filename": "gcc/testsuite/g++.dg/special/initpri2.C", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -16,3 +16,24 @@ void c3()\n void d3() \n      __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n \n+/* Priorities must be integral constants.  */\n+\n+/* Pointers, even with constant values, are not allowed.  */\n+void c4() \n+     __attribute__((constructor ((void*) 500))); /* { dg-error \"priorities\" } */\n+void d4()    \n+     __attribute__((destructor ((void*) 500))); /* { dg-error \"priorities\" } */\n+\n+/* Integer variables are not allowed.  */\n+int i;\n+void c5() \n+     __attribute__((constructor ((i)))); /* { dg-error \"priorities\" } */\n+void d5()    \n+     __attribute__((destructor ((i)))); /* { dg-error \"priorities\" } */\n+\n+/* Enumeration constants are allowed.  */\n+enum E { e = 500 };\n+void c6() \n+     __attribute__((constructor ((e))));\n+void d6()    \n+     __attribute__((destructor ((e))));"}, {"sha": "fa9fda0d7f3def0880edbe4261daf160ee2ac68a", "filename": "gcc/testsuite/gcc.dg/initpri2.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -16,3 +16,24 @@ void c3()\n void d3() \n      __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n \n+/* Priorities must be integral constants.  */\n+\n+/* Pointers, even with constant values, are not allowed.  */\n+void c4() \n+     __attribute__((constructor ((void*) 500))); /* { dg-error \"priorities\" } */\n+void d4()    \n+     __attribute__((destructor ((void*) 500))); /* { dg-error \"priorities\" } */\n+\n+/* Integer variables are not allowed.  */\n+int i;\n+void c5() \n+     __attribute__((constructor ((i)))); /* { dg-error \"priorities\" } */\n+void d5()    \n+     __attribute__((destructor ((i)))); /* { dg-error \"priorities\" } */\n+\n+/* Enumeration constants are allowed.  */\n+enum E { e = 500 };\n+void c6() \n+     __attribute__((constructor ((e))));\n+void d6()    \n+     __attribute__((destructor ((e))));"}, {"sha": "555bffe738d90a56a599af377eeae7ca106e2e8e", "filename": "gcc/testsuite/gcc.dg/vxworks/initpri1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri1.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -0,0 +1,19 @@\n+/* On VxWorks, in RTP mode, constructors and destructors go in named\n+   sections.  The section names must include the initialization\n+   priority, even for constructors and destructors with the default\n+   priority.  */\n+\n+/* The selector below excludes VxWorks AE because AE does not support\n+   RTP mode.  */\n+/* { dg-do compile { target { *-*-vxworks* && { ! *-*-vxworksae* } } } } */\n+/* { dg-options \"-mrtp\" } */\n+/* { dg-final { scan-assembler \"ctors\\.00000\" } } */\n+/* { dg-final { scan-assembler \"dtors\\.00000\" } } */\n+\n+volatile int i;\n+\n+void c1 () __attribute__((constructor));\n+void c1 () { ++i; }\n+\n+void d1 () __attribute__((destructor));\n+void d1 () { --i; }"}, {"sha": "a2b2c77c7aafbf246cdb03f0516c9b834ea19d58", "filename": "gcc/testsuite/gcc.dg/vxworks/initpri2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -0,0 +1,15 @@\n+/* On VxWorks, in kernel mode, there is no support for .ctors/.dtors.\n+   Instead, initialization is handled by munch.  */\n+\n+/* { dg-do compile { target *-*-vxworks* } } */\n+/* { dg-final { scan-assembler-not \"\\.ctors\" } } */\n+/* { dg-final { scan-assembler-not \"\\.dtors\" } } */\n+\n+volatile int i;\n+\n+void c1 () __attribute__((constructor));\n+void c1 () { ++i; }\n+\n+void d1 () __attribute__((destructor));\n+void d1 () { --i; }\n+"}, {"sha": "826bcf3f3a5e36e25ecf1194b752b346b10abbca", "filename": "gcc/testsuite/gcc.dg/vxworks/vxworks.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Fvxworks.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Fvxworks.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Fvxworks.exp?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -0,0 +1,36 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cSi\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "c92a5a08f42ab9bc85fdd0eab989b978829ec100", "filename": "gcc/varasm.c", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b2f4bed8376bb0fd12110ca1eb25d6d5e5b6fb24", "patch": "@@ -1448,36 +1448,52 @@ default_stabs_asm_out_destructor (rtx symbol ATTRIBUTE_UNUSED,\n #endif\n }\n \n-void\n-default_named_section_asm_out_destructor (rtx symbol, int priority)\n+/* Write the address of the entity given by SYMBOL to SEC.  */\n+void \n+assemble_addr_to_section (rtx symbol, section *sec)\n+{\n+  switch_to_section (sec);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+}\n+\n+/* Return the numbered .ctors.N (if CONSTRUCTOR_P) or .dtors.N (if\n+   not) section for PRIORITY.  */\n+section *\n+get_cdtor_priority_section (int priority, bool constructor_p)\n {\n-  const char *section = \".dtors\";\n   char buf[16];\n \n   /* ??? This only works reliably with the GNU linker.  */\n+  sprintf (buf, \"%s.%.5u\",\n+\t   constructor_p ? \".ctors\" : \".dtors\",\n+\t   /* Invert the numbering so the linker puts us in the proper\n+\t      order; constructors are run from right to left, and the\n+\t      linker sorts in increasing order.  */\n+\t   MAX_INIT_PRIORITY - priority);\n+  return get_section (buf, SECTION_WRITE, NULL);\n+}\n+\n+void\n+default_named_section_asm_out_destructor (rtx symbol, int priority)\n+{\n+  section *sec;\n+\n   if (priority != DEFAULT_INIT_PRIORITY)\n-    {\n-      sprintf (buf, \".dtors.%.5u\",\n-\t       /* Invert the numbering so the linker puts us in the proper\n-\t\t  order; constructors are run from right to left, and the\n-\t\t  linker sorts in increasing order.  */\n-\t       MAX_INIT_PRIORITY - priority);\n-      section = buf;\n-    }\n+    sec = get_cdtor_priority_section (priority, \n+\t\t\t\t      /*constructor_p=*/false);\n+  else\n+    sec = get_section (\".dtors\", SECTION_WRITE, NULL);\n \n-  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+  assemble_addr_to_section (symbol, sec);\n }\n \n #ifdef DTORS_SECTION_ASM_OP\n void\n default_dtor_section_asm_out_destructor (rtx symbol,\n \t\t\t\t\t int priority ATTRIBUTE_UNUSED)\n {\n-  switch_to_section (dtors_section);\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+  assemble_addr_to_section (symbol, dtors_section);\n }\n #endif\n \n@@ -1501,33 +1517,23 @@ default_stabs_asm_out_constructor (rtx symbol ATTRIBUTE_UNUSED,\n void\n default_named_section_asm_out_constructor (rtx symbol, int priority)\n {\n-  const char *section = \".ctors\";\n-  char buf[16];\n+  section *sec;\n \n-  /* ??? This only works reliably with the GNU linker.  */\n   if (priority != DEFAULT_INIT_PRIORITY)\n-    {\n-      sprintf (buf, \".ctors.%.5u\",\n-\t       /* Invert the numbering so the linker puts us in the proper\n-\t\t  order; constructors are run from right to left, and the\n-\t\t  linker sorts in increasing order.  */\n-\t       MAX_INIT_PRIORITY - priority);\n-      section = buf;\n-    }\n+    sec = get_cdtor_priority_section (priority, \n+\t\t\t\t      /*constructor_p=*/true);\n+  else\n+    sec = get_section (\".ctors\", SECTION_WRITE, NULL);\n \n-  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+  assemble_addr_to_section (symbol, sec);\n }\n \n #ifdef CTORS_SECTION_ASM_OP\n void\n default_ctor_section_asm_out_constructor (rtx symbol,\n \t\t\t\t\t  int priority ATTRIBUTE_UNUSED)\n {\n-  switch_to_section (ctors_section);\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+  assemble_addr_to_section (symbol, ctors_section);\n }\n #endif\n \f"}]}