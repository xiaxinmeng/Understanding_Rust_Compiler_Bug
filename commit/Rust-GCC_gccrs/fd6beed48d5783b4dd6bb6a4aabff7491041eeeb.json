{"sha": "fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2YmVlZDQ4ZDU3ODNiNGRkNmJiNmE0YWFiZmY3NDkxMDQxZWVlYg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-14T17:21:43Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-14T17:21:43Z"}, "message": "resource.h (struct resources): Remove unch_memory member.\n\n\t* resource.h (struct resources): Remove unch_memory member.\n\t(CLEAR_RESOURCE): Don't clear unch_memory.\n\t* resource.c (mark_referenced_resources): Don't set it.\n\t(mark_set_resources): Likewise.\n\t(mark_target_live_regs): Don't clear it.\n\t(init_resource_info): Likewise.\n\t* reorg.c (resource_conflicts_p): Don't compare it.\n\t(redundant_insn): Don't set it.\n\nFrom-SVN: r198895", "tree": {"sha": "03c55dbffafa1e073bc6036b1d3061203f89164c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c55dbffafa1e073bc6036b1d3061203f89164c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/comments", "author": null, "committer": null, "parents": [{"sha": "61216c26080a4c866e940871394f85221acfea64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61216c26080a4c866e940871394f85221acfea64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61216c26080a4c866e940871394f85221acfea64"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "58e0f95508cea84f7c9d8a5eef264d877cd6708a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "patch": "@@ -1,5 +1,14 @@\n 2013-05-14  Steven Bosscher  <steven@gcc.gnu.org>\n \n+\t* resource.h (struct resources): Remove unch_memory member.\n+\t(CLEAR_RESOURCE): Don't clear unch_memory.\n+\t* resource.c (mark_referenced_resources): Don't set it.\n+\t(mark_set_resources): Likewise.\n+\t(mark_target_live_regs): Don't clear it.\n+\t(init_resource_info): Likewise.\n+\t* reorg.c (resource_conflicts_p): Don't compare it.\n+\t(redundant_insn): Don't set it.\n+\n \t* rtl.h (next_label, skip_consecutive_labels, link_cc0_insns):\n \tRemove prototypes.\n \t* emit-rtl.c (next_label): Remove unused function."}, {"sha": "2dd9289d1181b1d35161b203ba098e7e294acd57", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "patch": "@@ -1300,11 +1300,7 @@ compare_for_stack_reg (rtx insn, stack_ptr regstack, rtx pat_src)\n \t  /* The 386 can only represent death of the first operand in\n \t     the case handled above.  In all other cases, emit a separate\n \t     pop and remove the death note from here.  */\n-\n-\t  /* link_cc0_insns (insn); */\n-\n \t  remove_regno_note (insn, REG_DEAD, REGNO (XEXP (src2_note, 0)));\n-\n \t  emit_pop_insn (insn, regstack, XEXP (src2_note, 0),\n \t\t\t EMIT_AFTER);\n \t}"}, {"sha": "9422664a6fa231b60a91a3050f4302d1c68f0fa5", "filename": "gcc/reorg.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "patch": "@@ -314,7 +314,6 @@ static int\n resource_conflicts_p (struct resources *res1, struct resources *res2)\n {\n   if ((res1->cc && res2->cc) || (res1->memory && res2->memory)\n-      || (res1->unch_memory && res2->unch_memory)\n       || res1->volatil || res2->volatil)\n     return 1;\n \n@@ -1580,7 +1579,6 @@ redundant_insn (rtx insn, rtx target, rtx delay_list)\n   /* Insns we pass may not set either NEEDED or SET, so merge them for\n      simpler tests.  */\n   needed.memory |= set.memory;\n-  needed.unch_memory |= set.unch_memory;\n   IOR_HARD_REG_SET (needed.regs, set.regs);\n \n   /* This insn isn't redundant if it conflicts with an insn that either is"}, {"sha": "a0fd2ec4e69b5cb17e8d9b88cfaaa2cd9be095ef", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "patch": "@@ -240,9 +240,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n     case MEM:\n       /* If this memory shouldn't change, it really isn't referencing\n \t memory.  */\n-      if (MEM_READONLY_P (x))\n-\tres->unch_memory = 1;\n-      else\n+      if (! MEM_READONLY_P (x))\n \tres->memory = 1;\n       res->volatil |= MEM_VOLATILE_P (x);\n \n@@ -740,7 +738,6 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n       if (in_dest)\n \t{\n \t  res->memory = 1;\n-\t  res->unch_memory |= MEM_READONLY_P (x);\n \t  res->volatil |= MEM_VOLATILE_P (x);\n \t}\n \n@@ -896,7 +893,7 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n \n   /* We have to assume memory is needed, but the CC isn't.  */\n   res->memory = 1;\n-  res->volatil = res->unch_memory = 0;\n+  res->volatil = 0;\n   res->cc = 0;\n \n   /* See if we have computed this value already.  */\n@@ -1145,7 +1142,6 @@ init_resource_info (rtx epilogue_insn)\n \n   end_of_function_needs.cc = 0;\n   end_of_function_needs.memory = 1;\n-  end_of_function_needs.unch_memory = 0;\n   CLEAR_HARD_REG_SET (end_of_function_needs.regs);\n \n   if (frame_pointer_needed)"}, {"sha": "1b316acb6014270b518f9070f51ef8a95c286af6", "filename": "gcc/resource.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Fresource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6beed48d5783b4dd6bb6a4aabff7491041eeeb/gcc%2Fresource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.h?ref=fd6beed48d5783b4dd6bb6a4aabff7491041eeeb", "patch": "@@ -25,14 +25,13 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Macro to clear all resources.  */\n #define CLEAR_RESOURCE(RES)\t\\\n- do { (RES)->memory = (RES)->unch_memory = (RES)->volatil = (RES)->cc = 0; \\\n+ do { (RES)->memory = (RES)->volatil = (RES)->cc = 0; \\\n       CLEAR_HARD_REG_SET ((RES)->regs); } while (0)\n \n /* The resources used by a given insn.  */\n struct resources\n {\n   char memory;\t\t/* Insn sets or needs a memory location.  */\n-  char unch_memory;\t/* Insn sets or needs an \"unchanging\" MEM.  */\n   char volatil;\t\t/* Insn sets or needs a volatile memory loc.  */\n   char cc;\t\t/* Insn sets or needs the condition codes.  */\n   HARD_REG_SET regs;\t/* Which registers are set or needed.  */"}]}