{"sha": "5355943cc1acedefcfe08308369937182406518a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1NTk0M2NjMWFjZWRlZmNmZTA4MzA4MzY5OTM3MTgyNDA2NTE4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-11T07:21:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-11T07:21:05Z"}, "message": "tree-scalar-evolution.c (get_scalar_evolution): Handle default-defs and types we do not want to analyze.\n\n2017-10-11  Richard Biener  <rguenther@suse.de>\n\n\t* tree-scalar-evolution.c (get_scalar_evolution): Handle\n\tdefault-defs and types we do not want to analyze.\n\t(interpret_loop_phi): Replace unreachable code with an assert.\n\t(compute_scalar_evolution_in_loop): Remove and inline ...\n\t(analyze_scalar_evolution_1): ... here, replacing condition with\n\twhat makes the intent clearer.  Remove handling of cases\n\tget_scalar_evolution now handles.\n\nFrom-SVN: r253629", "tree": {"sha": "ac6604aa5accf0c323bce2a70f454d89c4b0b287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac6604aa5accf0c323bce2a70f454d89c4b0b287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5355943cc1acedefcfe08308369937182406518a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5355943cc1acedefcfe08308369937182406518a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5355943cc1acedefcfe08308369937182406518a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5355943cc1acedefcfe08308369937182406518a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9593da8cc07949e85354d1ff316438e63be076d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9593da8cc07949e85354d1ff316438e63be076d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9593da8cc07949e85354d1ff316438e63be076d"}], "stats": {"total": 101, "additions": 40, "deletions": 61}, "files": [{"sha": "4a87e4c52cd8d20f743b922704f3f1c6c5a7b9d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5355943cc1acedefcfe08308369937182406518a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5355943cc1acedefcfe08308369937182406518a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5355943cc1acedefcfe08308369937182406518a", "patch": "@@ -1,3 +1,13 @@\n+2017-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-scalar-evolution.c (get_scalar_evolution): Handle\n+\tdefault-defs and types we do not want to analyze.\n+\t(interpret_loop_phi): Replace unreachable code with an assert.\n+\t(compute_scalar_evolution_in_loop): Remove and inline ...\n+\t(analyze_scalar_evolution_1): ... here, replacing condition with\n+\twhat makes the intent clearer.  Remove handling of cases\n+\tget_scalar_evolution now handles.\n+\n 2017-10-10  Jim Wilson  <wilson@tuliptree.org>\n \n \tPR rtl-optimization/81434"}, {"sha": "c693be9fe28c9ebdff7876884e87dbfa1d5d70c4", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 30, "deletions": 61, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5355943cc1acedefcfe08308369937182406518a/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5355943cc1acedefcfe08308369937182406518a/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5355943cc1acedefcfe08308369937182406518a", "patch": "@@ -564,22 +564,30 @@ get_scalar_evolution (basic_block instantiated_below, tree scalar)\n \tnb_get_scev++;\n     }\n \n-  switch (TREE_CODE (scalar))\n-    {\n-    case SSA_NAME:\n-      res = *find_var_scev_info (instantiated_below, scalar);\n-      break;\n+  if (VECTOR_TYPE_P (TREE_TYPE (scalar))\n+      || TREE_CODE (TREE_TYPE (scalar)) == COMPLEX_TYPE)\n+    /* For chrec_dont_know we keep the symbolic form.  */\n+    res = scalar;\n+  else\n+    switch (TREE_CODE (scalar))\n+      {\n+      case SSA_NAME:\n+        if (SSA_NAME_IS_DEFAULT_DEF (scalar))\n+\t  res = scalar;\n+\telse\n+\t  res = *find_var_scev_info (instantiated_below, scalar);\n+\tbreak;\n \n-    case REAL_CST:\n-    case FIXED_CST:\n-    case INTEGER_CST:\n-      res = scalar;\n-      break;\n+      case REAL_CST:\n+      case FIXED_CST:\n+      case INTEGER_CST:\n+\tres = scalar;\n+\tbreak;\n \n-    default:\n-      res = chrec_not_analyzed_yet;\n-      break;\n-    }\n+      default:\n+\tres = chrec_not_analyzed_yet;\n+\tbreak;\n+      }\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -1628,19 +1636,7 @@ interpret_loop_phi (struct loop *loop, gphi *loop_phi_node)\n   struct loop *phi_loop = loop_containing_stmt (loop_phi_node);\n   tree init_cond;\n \n-  if (phi_loop != loop)\n-    {\n-      struct loop *subloop;\n-      tree evolution_fn = analyze_scalar_evolution\n-\t(phi_loop, PHI_RESULT (loop_phi_node));\n-\n-      /* Dive one level deeper.  */\n-      subloop = superloop_at_depth (phi_loop, loop_depth (loop) + 1);\n-\n-      /* Interpret the subloop.  */\n-      res = compute_overall_effect_of_inner_loop (subloop, evolution_fn);\n-      return res;\n-    }\n+  gcc_assert (phi_loop == loop);\n \n   /* Otherwise really interpret the loop phi.  */\n   init_cond = analyze_initial_condition (loop_phi_node);\n@@ -2016,54 +2012,24 @@ interpret_gimple_assign (struct loop *loop, gimple *stmt)\n    - instantiate_parameters.\n */\n \n-/* Compute and return the evolution function in WRTO_LOOP, the nearest\n-   common ancestor of DEF_LOOP and USE_LOOP.  */\n-\n-static tree\n-compute_scalar_evolution_in_loop (struct loop *wrto_loop,\n-\t\t\t\t  struct loop *def_loop,\n-\t\t\t\t  tree ev)\n-{\n-  bool val;\n-  tree res;\n-\n-  if (def_loop == wrto_loop)\n-    return ev;\n-\n-  def_loop = superloop_at_depth (def_loop, loop_depth (wrto_loop) + 1);\n-  res = compute_overall_effect_of_inner_loop (def_loop, ev);\n-\n-  if (no_evolution_in_loop_p (res, wrto_loop->num, &val) && val)\n-    return res;\n-\n-  return analyze_scalar_evolution_1 (wrto_loop, res);\n-}\n-\n /* Helper recursive function.  */\n \n static tree\n analyze_scalar_evolution_1 (struct loop *loop, tree var)\n {\n-  tree type = TREE_TYPE (var);\n   gimple *def;\n   basic_block bb;\n   struct loop *def_loop;\n   tree res;\n \n-  if (loop == NULL\n-      || TREE_CODE (type) == VECTOR_TYPE\n-      || TREE_CODE (type) == COMPLEX_TYPE)\n-    return chrec_dont_know;\n-\n   if (TREE_CODE (var) != SSA_NAME)\n     return interpret_expr (loop, NULL, var);\n \n   def = SSA_NAME_DEF_STMT (var);\n   bb = gimple_bb (def);\n-  def_loop = bb ? bb->loop_father : NULL;\n+  def_loop = bb->loop_father;\n \n-  if (bb == NULL\n-      || !flow_bb_inside_loop_p (loop, bb))\n+  if (!flow_bb_inside_loop_p (loop, bb))\n     {\n       /* Keep symbolic form, but look through obvious copies for constants.  */\n       res = follow_copies_to_constant (var);\n@@ -2073,8 +2039,11 @@ analyze_scalar_evolution_1 (struct loop *loop, tree var)\n   if (loop != def_loop)\n     {\n       res = analyze_scalar_evolution_1 (def_loop, var);\n-      res = compute_scalar_evolution_in_loop (loop, def_loop, res);\n-\n+      struct loop *loop_to_skip = superloop_at_depth (def_loop,\n+\t\t\t\t\t\t      loop_depth (loop) + 1);\n+      res = compute_overall_effect_of_inner_loop (loop_to_skip, res);\n+      if (chrec_contains_symbols_defined_in_loop (res, loop->num))\n+\tres = analyze_scalar_evolution_1 (loop, res);\n       goto set_and_end;\n     }\n "}]}