{"sha": "cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5OTdlMGNjNGZjYzlhZThlMzg5NzU3ZDk0YTBhZTY5ZDM0Y2Q1MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-28T07:09:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-28T07:32:27Z"}, "message": "Add missing end location information\n\nIn some cases we would fail to put the end location information on the\noutermost BIND_EXPR of a function, which is problematic when there is\na dynamic stack allocation.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Set the end locus\n\tof body and declaration earlier.", "tree": {"sha": "e3da8016f11ae01d8e93cdc8acdd6a171e048cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3da8016f11ae01d8e93cdc8acdd6a171e048cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50/comments", "author": null, "committer": null, "parents": [{"sha": "88795e14ae7143bd8039af68d2d876ae34568799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88795e14ae7143bd8039af68d2d876ae34568799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88795e14ae7143bd8039af68d2d876ae34568799"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "f03d591a3231e18ea5d8741bba39cb63176fba4e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=cc997e0cc4fcc9ae8e389757d94a0ae69d34cd50", "patch": "@@ -4017,6 +4017,11 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n   gnat_poplevel ();\n   gnu_result = end_stmt_group ();\n \n+  /* Attempt setting the end_locus of our GCC body tree, typically a BIND_EXPR,\n+     then the end_locus of our GCC subprogram declaration tree.  */\n+  set_end_locus_from_node (gnu_result, gnat_node);\n+  set_end_locus_from_node (gnu_subprog_decl, gnat_node);\n+\n   /* If we populated the parameter attributes cache, we need to make sure that\n      the cached expressions are evaluated on all the possible paths leading to\n      their uses.  So we force their evaluation on entry of the function.  */\n@@ -4111,12 +4116,6 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   gnu_return_label_stack->pop ();\n \n-  /* Attempt setting the end_locus of our GCC body tree, typically a\n-     BIND_EXPR or STATEMENT_LIST, then the end_locus of our GCC subprogram\n-     declaration tree.  */\n-  set_end_locus_from_node (gnu_result, gnat_node);\n-  set_end_locus_from_node (gnu_subprog_decl, gnat_node);\n-\n   /* On SEH targets, install an exception handler around the main entry\n      point to catch unhandled exceptions.  */\n   if (DECL_NAME (gnu_subprog_decl) == main_identifier_node"}]}