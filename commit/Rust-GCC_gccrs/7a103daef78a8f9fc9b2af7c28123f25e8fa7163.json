{"sha": "7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExMDNkYWVmNzhhOGY5ZmM5YjJhZjdjMjgxMjNmMjVlOGZhNzE2Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-07T21:00:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-09T22:45:46Z"}, "message": "d: Support deprecated, @disable, and user-defined attributes on enum members\n\nReviewed-on: https://github.com/dlang/dmd/pull/12108\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 9bba772fa.", "tree": {"sha": "39e4a1d02b2f424b4d77c4e0b0cdff875467e41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e4a1d02b2f424b4d77c4e0b0cdff875467e41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acae7b21bc026150c2c01465e4ab0eacb20bd44d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acae7b21bc026150c2c01465e4ab0eacb20bd44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acae7b21bc026150c2c01465e4ab0eacb20bd44d"}], "stats": {"total": 681, "additions": 601, "deletions": 80}, "files": [{"sha": "a34fd4138d740e5d31e9a66a31c5c55863c74ebf", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,4 +1,4 @@\n-e598f69c0726ad1bf6b2e15e0b60d7cead737fad\n+9bba772fa67c6864e551bc87097402f691d947d4\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "72a07d9b8f5096fdacaa21668a2fc1156caa66f4", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -155,6 +155,51 @@ int Declaration::checkModify(Loc loc, Scope *sc, Type *, Expression *e1, int fla\n     return 1;\n }\n \n+/**\n+ * Issue an error if an attempt to call a disabled method is made\n+ *\n+ * If the declaration is disabled but inside a disabled function,\n+ * returns `true` but do not issue an error message.\n+ *\n+ * Params:\n+ *   loc = Location information of the call\n+ *   sc  = Scope in which the call occurs\n+ *   isAliasedDeclaration = if `true` searches overload set\n+ *\n+ * Returns:\n+ *   `true` if this `Declaration` is `@disable`d, `false` otherwise.\n+ */\n+bool Declaration::checkDisabled(Loc loc, Scope *sc, bool isAliasedDeclaration)\n+{\n+    if (!(storage_class & STCdisable))\n+        return false;\n+\n+    if (sc->func && (sc->func->storage_class & STCdisable))\n+        return true;\n+\n+    Dsymbol *p = toParent();\n+    if (p && isPostBlitDeclaration())\n+    {\n+        p->error(loc, \"is not copyable because it is annotated with `@disable`\");\n+        return true;\n+    }\n+\n+    // if the function is @disabled, maybe there\n+    // is an overload in the overload set that isn't\n+    if (isAliasedDeclaration)\n+    {\n+        FuncDeclaration *fd = isFuncDeclaration();\n+        if (fd)\n+        {\n+            for (FuncDeclaration *ovl = fd; ovl; ovl = (FuncDeclaration *)ovl->overnext)\n+                if (!(ovl->storage_class & STCdisable))\n+                    return false;\n+        }\n+    }\n+    error(loc, \"cannot be used because it is annotated with `@disable`\");\n+    return true;\n+}\n+\n Dsymbol *Declaration::search(const Loc &loc, Identifier *ident, int flags)\n {\n     Dsymbol *s = Dsymbol::search(loc, ident, flags);"}, {"sha": "a464f9beb71fad919122f89e0adbc9244f684457", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -139,6 +139,7 @@ class Declaration : public Dsymbol\n     void semantic(Scope *sc);\n     const char *kind() const;\n     d_uns64 size(Loc loc);\n+    bool checkDisabled(Loc loc, Scope *sc, bool isAliasedDeclaration = false);\n     int checkModify(Loc loc, Scope *sc, Type *t, Expression *e1, int flag);\n \n     Dsymbol *search(const Loc &loc, Identifier *ident, int flags = SearchLocalsOnly);"}, {"sha": "d15d94a31572a572c25af1cbd1fcb7d5f4a21e27", "filename": "gcc/d/dmd/denum.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdenum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdenum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -13,6 +13,7 @@\n \n #include \"errors.h\"\n #include \"enum.h\"\n+#include \"attrib.h\"\n #include \"mtype.h\"\n #include \"scope.h\"\n #include \"id.h\"\n@@ -504,6 +505,18 @@ EnumMember::EnumMember(Loc loc, Identifier *id, Expression *value, Type *origTyp\n     this->origType = origType;\n }\n \n+EnumMember::EnumMember(Loc loc, Identifier *id, Expression *value, Type *memType,\n+        StorageClass stc, UserAttributeDeclaration *uad, DeprecatedDeclaration *dd)\n+    : VarDeclaration(loc, NULL, id ? id : Id::empty, new ExpInitializer(loc, value))\n+{\n+    this->ed = NULL;\n+    this->origValue = value;\n+    this->origType = memType;\n+    this->storage_class = stc;\n+    this->userAttribDecl = uad;\n+    this->depdecl = dd;\n+}\n+\n Expression *&EnumMember::value()\n {\n     return ((ExpInitializer*)_init)->exp;\n@@ -536,6 +549,7 @@ void EnumMember::semantic(Scope *sc)\n         return;\n     }\n     assert(ed);\n+\n     ed->semantic(sc);\n     if (ed->errors)\n         goto Lerrors;\n@@ -552,8 +566,16 @@ void EnumMember::semantic(Scope *sc)\n \n     protection = ed->isAnonymous() ? ed->protection : Prot(Prot::public_);\n     linkage = LINKd;\n-    storage_class = STCmanifest;\n-    userAttribDecl = ed->isAnonymous() ? ed->userAttribDecl : NULL;\n+    storage_class |= STCmanifest;\n+\n+    // https://issues.dlang.org/show_bug.cgi?id=9701\n+    if (ed->isAnonymous())\n+    {\n+        if (userAttribDecl)\n+            userAttribDecl->userAttribDecl = ed->userAttribDecl;\n+        else\n+            userAttribDecl = ed->userAttribDecl;\n+    }\n \n     // The first enum member is special\n     bool first = (this == (*ed->members)[0]);\n@@ -743,6 +765,14 @@ void EnumMember::semantic(Scope *sc)\n Expression *EnumMember::getVarExp(Loc loc, Scope *sc)\n {\n     semantic(sc);\n+    if (errors)\n+        return new ErrorExp();\n+    checkDisabled(loc, sc);\n+\n+    if (depdecl && !depdecl->_scope)\n+        depdecl->_scope = sc;\n+    checkDeprecated(loc, sc);\n+\n     if (errors)\n         return new ErrorExp();\n     Expression *e = new VarExp(loc, this);"}, {"sha": "5b4fad4ebb7f2afe17d5cb7d15fb282859a39622", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -760,25 +760,25 @@ void Dsymbol::deprecation(const char *format, ...)\n     va_end(ap);\n }\n \n-void Dsymbol::checkDeprecated(Loc loc, Scope *sc)\n+bool Dsymbol::checkDeprecated(Loc loc, Scope *sc)\n {\n     if (global.params.useDeprecated != DIAGNOSTICoff && isDeprecated())\n     {\n         // Don't complain if we're inside a deprecated symbol's scope\n         for (Dsymbol *sp = sc->parent; sp; sp = sp->parent)\n         {\n             if (sp->isDeprecated())\n-                goto L1;\n+                return false;\n         }\n \n         for (Scope *sc2 = sc; sc2; sc2 = sc2->enclosing)\n         {\n             if (sc2->scopesym && sc2->scopesym->isDeprecated())\n-                goto L1;\n+                return false;\n \n             // If inside a StorageClassDeclaration that is deprecated\n             if (sc2->stc & STCdeprecated)\n-                goto L1;\n+                return false;\n         }\n \n         const char *message = NULL;\n@@ -793,20 +793,11 @@ void Dsymbol::checkDeprecated(Loc loc, Scope *sc)\n             deprecation(loc, \"is deprecated - %s\", message);\n         else\n             deprecation(loc, \"is deprecated\");\n-    }\n \n-  L1:\n-    Declaration *d = isDeclaration();\n-    if (d && d->storage_class & STCdisable)\n-    {\n-        if (!(sc->func && sc->func->storage_class & STCdisable))\n-        {\n-            if (d->toParent() && d->isPostBlitDeclaration())\n-                d->toParent()->error(loc, \"is not copyable because it is annotated with @disable\");\n-            else\n-                error(loc, \"is not callable because it is annotated with @disable\");\n-        }\n+        return true;\n     }\n+\n+    return false;\n }\n \n /**********************************"}, {"sha": "6555f12e7b4bb75df707aed6f883b27a07ad32f1", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -175,7 +175,7 @@ class Dsymbol : public ASTNode\n     void error(const char *format, ...);\n     void deprecation(Loc loc, const char *format, ...);\n     void deprecation(const char *format, ...);\n-    void checkDeprecated(Loc loc, Scope *sc);\n+    bool checkDeprecated(Loc loc, Scope *sc);\n     Module *getModule();\n     Module *getAccessModule();\n     Dsymbol *pastMixin();"}, {"sha": "6d389ed76e01249cf7415744d4f55a4c71b29f49", "filename": "gcc/d/dmd/enum.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fenum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fenum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fenum.h?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -85,6 +85,8 @@ class EnumMember : public VarDeclaration\n     EnumDeclaration *ed;\n \n     EnumMember(Loc loc, Identifier *id, Expression *value, Type *origType);\n+    EnumMember(Loc loc, Identifier *id, Expression *value, Type *memType,\n+        StorageClass stc, UserAttributeDeclaration *uad, DeprecatedDeclaration *dd);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n     const char *kind() const;\n     void semantic(Scope *sc);"}, {"sha": "395dc56748cf35cddcaf4cb8a9e5eab2e31a6703", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -2344,9 +2344,18 @@ bool Expression::checkArithmetic()\n     return checkValue();\n }\n \n-void Expression::checkDeprecated(Scope *sc, Dsymbol *s)\n+bool Expression::checkDeprecated(Scope *sc, Dsymbol *s)\n {\n-    s->checkDeprecated(loc, sc);\n+    return s->checkDeprecated(loc, sc);\n+}\n+\n+bool Expression::checkDisabled(Scope *sc, Dsymbol *s)\n+{\n+    if (Declaration *d = s->isDeclaration())\n+    {\n+        return d->checkDisabled(loc, sc);\n+    }\n+    return false;\n }\n \n /*********************************************\n@@ -2661,11 +2670,8 @@ bool Expression::checkPostblit(Scope *sc, Type *t)\n         StructDeclaration *sd = ((TypeStruct *)t)->sym;\n         if (sd->postblit)\n         {\n-            if (sd->postblit->storage_class & STCdisable)\n-            {\n-                sd->error(loc, \"is not copyable because it is annotated with @disable\");\n+            if (sd->postblit->checkDisabled(loc, sc))\n                 return true;\n-            }\n             //checkDeprecated(sc, sd->postblit);        // necessary?\n             checkPurity(sc, sd->postblit);\n             checkSafety(sc, sd->postblit);\n@@ -3715,14 +3721,22 @@ Expression *resolve(Loc loc, Scope *sc, Dsymbol *s, bool hasOverloads)\n     else\n     {\n         if (!s->isFuncDeclaration())        // functions are checked after overloading\n+        {\n             s->checkDeprecated(loc, sc);\n+            if (d)\n+                d->checkDisabled(loc, sc);\n+        }\n \n         // Bugzilla 12023: if 's' is a tuple variable, the tuple is returned.\n         s = s->toAlias();\n \n         //printf(\"s = '%s', s->kind = '%s', s->needThis() = %p\\n\", s->toChars(), s->kind(), s->needThis());\n         if (s != olds && !s->isFuncDeclaration())\n+        {\n             s->checkDeprecated(loc, sc);\n+            if (d)\n+                d->checkDisabled(loc, sc);\n+        }\n     }\n \n     if (EnumMember *em = s->isEnumMember())"}, {"sha": "d84878f0d6ebfed66b39b7ef8252c76d69fd9f16", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -181,7 +181,8 @@ class Expression : public ASTNode\n     bool checkNoBool();\n     bool checkIntegral();\n     bool checkArithmetic();\n-    void checkDeprecated(Scope *sc, Dsymbol *s);\n+    bool checkDeprecated(Scope *sc, Dsymbol *s);\n+    bool checkDisabled(Scope *sc, Dsymbol *s);\n     bool checkPurity(Scope *sc, FuncDeclaration *f);\n     bool checkPurity(Scope *sc, VarDeclaration *v);\n     bool checkSafety(Scope *sc, FuncDeclaration *f);"}, {"sha": "ecafd9d20662002ac8954f10a269497f8418294f", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1218,6 +1218,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 if (!f || f->errors)\n                     return setError();\n                 exp->checkDeprecated(sc, f);\n+                exp->checkDisabled(sc, f);\n                 exp->checkPurity(sc, f);\n                 exp->checkSafety(sc, f);\n                 exp->checkNogc(sc, f);\n@@ -1246,6 +1247,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 if (!f || f->errors)\n                     return setError();\n                 exp->checkDeprecated(sc, f);\n+                exp->checkDisabled(sc, f);\n                 exp->checkPurity(sc, f);\n                 exp->checkSafety(sc, f);\n                 exp->checkNogc(sc, f);\n@@ -1313,6 +1315,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 if (!f || f->errors)\n                     return setError();\n                 exp->checkDeprecated(sc, f);\n+                exp->checkDisabled(sc, f);\n                 exp->checkPurity(sc, f);\n                 exp->checkSafety(sc, f);\n                 exp->checkNogc(sc, f);\n@@ -1341,6 +1344,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 if (!f || f->errors)\n                     return setError();\n                 exp->checkDeprecated(sc, f);\n+                exp->checkDisabled(sc, f);\n                 exp->checkPurity(sc, f);\n                 exp->checkSafety(sc, f);\n                 exp->checkNogc(sc, f);\n@@ -3214,6 +3218,7 @@ class ExpressionSemanticVisitor : public Visitor\n             }\n \n             exp->checkDeprecated(sc, exp->f);\n+            exp->checkDisabled(sc, exp->f);\n             exp->checkPurity(sc, exp->f);\n             exp->checkSafety(sc, exp->f);\n             exp->checkNogc(sc, exp->f);\n@@ -3307,6 +3312,7 @@ class ExpressionSemanticVisitor : public Visitor\n             if (!exp->f || exp->f->errors)\n                 return setError();\n             exp->checkDeprecated(sc, exp->f);\n+            exp->checkDisabled(sc, exp->f);\n             exp->checkPurity(sc, exp->f);\n             exp->checkSafety(sc, exp->f);\n             exp->checkNogc(sc, exp->f);\n@@ -3345,6 +3351,7 @@ class ExpressionSemanticVisitor : public Visitor\n             if (!exp->f || exp->f->errors)\n                 return setError();\n             exp->checkDeprecated(sc, exp->f);\n+            exp->checkDisabled(sc, exp->f);\n             exp->checkPurity(sc, exp->f);\n             exp->checkSafety(sc, exp->f);\n             exp->checkNogc(sc, exp->f);\n@@ -3587,6 +3594,7 @@ class ExpressionSemanticVisitor : public Visitor\n             }\n \n             exp->checkDeprecated(sc, exp->f);\n+            exp->checkDisabled(sc, exp->f);\n             exp->checkPurity(sc, exp->f);\n             exp->checkSafety(sc, exp->f);\n             exp->checkNogc(sc, exp->f);\n@@ -8381,6 +8389,7 @@ Expression *semanticY(DotIdExp *exp, Scope *sc, int flag)\n             s = s->toAlias();\n \n             exp->checkDeprecated(sc, s);\n+            exp->checkDisabled(sc, s);\n \n             EnumMember *em = s->isEnumMember();\n             if (em)"}, {"sha": "ceee70ac7c3900842bcbf2f72fb373487bf70903", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1762,10 +1762,10 @@ bool Type::needsNested()\n \n void Type::checkDeprecated(Loc loc, Scope *sc)\n {\n-    Dsymbol *s = toDsymbol(sc);\n-\n-    if (s)\n+    if (Dsymbol *s = toDsymbol(sc))\n+    {\n         s->checkDeprecated(loc, sc);\n+    }\n }\n \n \n@@ -6956,7 +6956,12 @@ void TypeQualified::resolveHelper(Loc loc, Scope *sc,\n         if (d && (d->storage_class & STCtemplateparameter))\n             s = s->toAlias();\n         else\n-            s->checkDeprecated(loc, sc);            // check for deprecated aliases\n+        {\n+            // check for deprecated aliases\n+            s->checkDeprecated(loc, sc);\n+            if (d)\n+                d->checkDisabled(loc, sc, true);\n+        }\n \n         s = s->toAlias();\n         //printf(\"\\t2: s = '%s' %p, kind = '%s'\\n\",s->toChars(), s, s->kind());\n@@ -8045,7 +8050,11 @@ Expression *TypeStruct::dotExp(Scope *sc, Expression *e, Identifier *ident, int\n         // return noMember(sc, e, ident, flag);\n     }\n     if (!s->isFuncDeclaration())        // because of overloading\n+    {\n         s->checkDeprecated(e->loc, sc);\n+        if (Declaration *d = s->isDeclaration())\n+            d->checkDisabled(e->loc, sc);\n+    }\n     s = s->toAlias();\n \n     EnumMember *em = s->isEnumMember();\n@@ -8749,7 +8758,11 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n         // return noMember(sc, e, ident, flag);\n     }\n     if (!s->isFuncDeclaration())        // because of overloading\n+    {\n         s->checkDeprecated(e->loc, sc);\n+        if (Declaration *d = s->isDeclaration())\n+            d->checkDisabled(e->loc, sc);\n+    }\n     s = s->toAlias();\n \n     EnumMember *em = s->isEnumMember();"}, {"sha": "2664af2e706896726b58f5bdc253c3dcf0dccc67", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 106, "deletions": 26, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -216,6 +216,24 @@ Dsymbols *Parser::parseModule()\n     return new Dsymbols();\n }\n \n+static StorageClass parseDeprecatedAttribute(Parser *p, Expression **msg)\n+{\n+    if (p->peekNext() != TOKlparen)\n+        return STCdeprecated;\n+\n+    p->nextToken();\n+    p->check(TOKlparen);\n+    Expression *e = p->parseAssignExp();\n+    p->check(TOKrparen);\n+    if (*msg)\n+    {\n+        p->error(\"conflicting storage class `deprecated(%s)` and `deprecated(%s)`\",\n+                 (*msg)->toChars(), e->toChars());\n+    }\n+    *msg = e;\n+    return STCundefined;\n+}\n+\n struct PrefixAttributes\n {\n     StorageClass storageClass;\n@@ -626,21 +644,12 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n \n             case TOKdeprecated:\n             {\n-                if (peek(&token)->value != TOKlparen)\n+                Expression *e = NULL;\n+                if (StorageClass _stc = parseDeprecatedAttribute(this, &pAttrs->depmsg))\n                 {\n-                    stc = STCdeprecated;\n+                    stc = _stc;\n                     goto Lstc;\n                 }\n-                nextToken();\n-                check(TOKlparen);\n-                Expression *e = parseAssignExp();\n-                check(TOKrparen);\n-                if (pAttrs->depmsg)\n-                {\n-                    error(\"conflicting storage class 'deprecated(%s)' and 'deprecated(%s)'\",\n-                        pAttrs->depmsg->toChars(), e->toChars());\n-                }\n-                pAttrs->depmsg = e;\n                 a = parseBlock(pLastDecl, pAttrs);\n                 if (pAttrs->depmsg)\n                 {\n@@ -2185,7 +2194,7 @@ EnumDeclaration *Parser::parseEnum()\n     Type *memtype;\n     Loc loc = token.loc;\n \n-    //printf(\"Parser::parseEnum()\\n\");\n+    // printf(\"Parser::parseEnum()\\n\");\n     nextToken();\n     if (token.value == TOKidentifier)\n     {\n@@ -2213,36 +2222,96 @@ EnumDeclaration *Parser::parseEnum()\n         nextToken();\n     else if (token.value == TOKlcurly)\n     {\n+        bool isAnonymousEnum = !id;\n+\n         //printf(\"enum definition\\n\");\n         e->members = new Dsymbols();\n         nextToken();\n         const utf8_t *comment = token.blockComment;\n         while (token.value != TOKrcurly)\n         {\n-            /* Can take the following forms:\n+            /* Can take the following forms...\n              *  1. ident\n              *  2. ident = value\n              *  3. type ident = value\n+             *  ... prefixed by valid attributes\n              */\n-\n             loc = token.loc;\n \n             Type *type = NULL;\n             Identifier *ident = NULL;\n-            Token *tp = peek(&token);\n-            if (token.value == TOKidentifier &&\n-                (tp->value == TOKassign || tp->value == TOKcomma || tp->value == TOKrcurly))\n+\n+            Expressions *udas = NULL;\n+            StorageClass stc = STCundefined;\n+            Expression *deprecationMessage = NULL;\n+\n+            while (token.value != TOKrcurly &&\n+                   token.value != TOKcomma &&\n+                   token.value != TOKassign)\n             {\n-                ident = token.ident;\n-                type = NULL;\n-                nextToken();\n+                switch (token.value)\n+                {\n+                    case TOKat:\n+                        if (StorageClass _stc = parseAttribute(&udas))\n+                        {\n+                            if (_stc == STCdisable)\n+                                stc |= _stc;\n+                            else\n+                            {\n+                                OutBuffer buf;\n+                                stcToBuffer(&buf, _stc);\n+                                error(\"`%s` is not a valid attribute for enum members\", buf.peekChars());\n+                            }\n+                            nextToken();\n+                        }\n+                        break;\n+                    case TOKdeprecated:\n+                        if (StorageClass _stc = parseDeprecatedAttribute(this, &deprecationMessage))\n+                        {\n+                            stc |= _stc;\n+                            nextToken();\n+                        }\n+                        break;\n+                    case TOKidentifier:\n+                    {\n+                        Token *tp = peek(&token);\n+                        if (tp->value == TOKassign || tp->value == TOKcomma || tp->value == TOKrcurly)\n+                        {\n+                            ident = token.ident;\n+                            type = NULL;\n+                            nextToken();\n+                        }\n+                        else\n+                        {\n+                            goto Ldefault;\n+                        }\n+                        break;\n+                    }\n+                    default:\n+                    Ldefault:\n+                        if (isAnonymousEnum)\n+                        {\n+                            type = parseType(&ident, NULL);\n+                            if (type == Type::terror)\n+                            {\n+                                type = NULL;\n+                                nextToken();\n+                            }\n+                        }\n+                        else\n+                        {\n+                            error(\"`%s` is not a valid attribute for enum members\", token.toChars());\n+                            nextToken();\n+                        }\n+                        break;\n+                }\n             }\n-            else\n+\n+            if (type && type != Type::terror)\n             {\n-                type = parseType(&ident, NULL);\n                 if (!ident)\n                     error(\"no identifier for declarator %s\", type->toChars());\n-                if (id || memtype)\n+                if (!isAnonymousEnum)\n                     error(\"type only allowed if anonymous enum and no enum type\");\n             }\n \n@@ -2255,11 +2324,22 @@ EnumDeclaration *Parser::parseEnum()\n             else\n             {\n                 value = NULL;\n-                if (type)\n+                if (type && type != Type::terror && isAnonymousEnum)\n                     error(\"if type, there must be an initializer\");\n             }\n \n-            EnumMember *em = new EnumMember(loc, ident, value, type);\n+            UserAttributeDeclaration *uad = NULL;\n+            if (udas)\n+                uad = new UserAttributeDeclaration(udas, NULL);\n+\n+            DeprecatedDeclaration *dd = NULL;\n+            if (deprecationMessage)\n+            {\n+                dd = new DeprecatedDeclaration(deprecationMessage, NULL);\n+                stc |= STCdeprecated;\n+            }\n+\n+            EnumMember *em = new EnumMember(loc, ident, value, type, stc, uad, dd);\n             e->members->push(em);\n \n             if (token.value == TOKrcurly)"}, {"sha": "46b7d9686214e4502ded5f557214f3d294bc437c", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -313,7 +313,6 @@ static Expression *isDsymX(TraitsExp *e, bool (*fp)(Dsymbol *s))\n     return True(e);\n }\n \n-static bool isFuncDisabled(FuncDeclaration *f) { return f->isDisabled(); }\n static bool isFuncAbstractFunction(FuncDeclaration *f) { return f->isAbstract(); }\n static bool isFuncVirtualFunction(FuncDeclaration *f) { return f->isVirtual(); }\n static bool isFuncVirtualMethod(FuncDeclaration *f) { return f->isVirtualMethod(); }\n@@ -337,6 +336,7 @@ static Expression *isFuncX(TraitsExp *e, bool (*fp)(FuncDeclaration *f))\n     return True(e);\n }\n \n+static bool isDeclDisabled(Declaration *d) { return d->isDisabled(); }\n static bool isDeclFuture(Declaration *d) { return d->isFuture(); }\n static bool isDeclRef(Declaration *d) { return d->isRef(); }\n static bool isDeclOut(Declaration *d) { return d->isOut(); }\n@@ -811,7 +811,7 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n         if (dim != 1)\n             return dimError(e, 1, dim);\n \n-        return isFuncX(e, &isFuncDisabled);\n+        return isDeclX(e, &isDeclDisabled);\n     }\n     else if (e->ident == Id::isAbstractFunction)\n     {"}, {"sha": "3520b5f44ee69ef0c2190ee78946e67a110fadb0", "filename": "gcc/testsuite/gdc.test/compilable/test17908.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17908.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17908.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17908.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,17 @@\n+// PERMUTE ARGS:\n+\n+@disable void foo() {}\n+void foo(int) {}\n+alias g = foo;\n+\n+// make sure the order of declaration\n+// doesn't change anything\n+void bar(int) {}\n+@disable void bar() {}\n+alias h = bar;\n+\n+void main()\n+{\n+    g(10);\n+    h(10);\n+}"}, {"sha": "8f822add531b39531aba5bd3d467007cb620b11d", "filename": "gcc/testsuite/gdc.test/compilable/test9701.d", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest9701.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest9701.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest9701.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,58 @@\n+// https://issues.dlang.org/show_bug.cgi?id=9701\n+\n+template AliasSeq(TList...)\n+{\n+    alias AliasSeq = TList;\n+}\n+\n+enum\n+{\n+    uda4,\n+    uda5,\n+    uda6,\n+    uda8,\n+    uda9\n+}\n+\n+enum Enum\n+{\n+    value0,\n+    @(\"uda1\") value1,\n+    @(\"uda2\", \"uda3\", 42) value2,\n+    @uda4 value3,\n+    @uda5 @uda6 value4,\n+    @(\"uda7\") @uda8 value5,\n+    @uda9 @(\"uda10\") value6,\n+    deprecated value7,\n+    deprecated(\"message\") value8,\n+}\n+\n+@(\"uda0\")\n+enum\n+{\n+    value0,\n+    @(\"uda1\") value1,\n+    @(\"uda2\") @(\"uda3\") value2,\n+    @uda4 value3,\n+    @uda5 @uda6 value4,\n+    @(\"uda7\") @uda8 value5,\n+    @uda9 @(\"uda10\") value6\n+}\n+\n+static assert(__traits(getAttributes, Enum.value0).length == 0);\n+static assert(__traits(getAttributes, Enum.value1) == AliasSeq!(\"uda1\"));\n+static assert(__traits(getAttributes, Enum.value2) == AliasSeq!(\"uda2\", \"uda3\", 42));\n+static assert(__traits(getAttributes, Enum.value3) == AliasSeq!(uda4));\n+static assert(__traits(getAttributes, Enum.value4) == AliasSeq!(uda5, uda6));\n+static assert(__traits(getAttributes, Enum.value5) == AliasSeq!(\"uda7\", uda8));\n+static assert(__traits(getAttributes, Enum.value6) == AliasSeq!(uda9, \"uda10\"));\n+static assert(__traits(isDeprecated, Enum.value7));\n+static assert(__traits(isDeprecated, Enum.value8));\n+\n+static assert(__traits(getAttributes, value0) == AliasSeq!(\"uda0\"));\n+static assert(__traits(getAttributes, value1) == AliasSeq!(\"uda0\", \"uda1\"));\n+static assert(__traits(getAttributes, value2) == AliasSeq!(\"uda0\", \"uda2\", \"uda3\"));\n+static assert(__traits(getAttributes, value3) == AliasSeq!(\"uda0\", uda4));\n+static assert(__traits(getAttributes, value4) == AliasSeq!(\"uda0\", uda5, uda6));\n+static assert(__traits(getAttributes, value5) == AliasSeq!(\"uda0\", \"uda7\", uda8));\n+static assert(__traits(getAttributes, value6) == AliasSeq!(\"uda0\", uda9, \"uda10\"));"}, {"sha": "7cc376fbec5d94d875a0c14e969aad223153d7ed", "filename": "gcc/testsuite/gdc.test/compilable/vcg-ast.d", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvcg-ast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvcg-ast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fvcg-ast.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,43 @@\n+module vcg;\n+// REQUIRED_ARGS: -vcg-ast -o-\n+// PERMUTE_ARGS:\n+\n+template Seq(A...)\n+{\n+    alias Seq = A;\n+}\n+\n+auto a = Seq!(1,2,3);\n+\n+\n+template R(T)\n+{\n+  struct _R { T elem; }\n+}\n+\n+typeof(R!int._R.elem) x;\n+\n+\n+static foreach(enum i; 0..3)\n+{\n+    mixin(\"int a\" ~ i.stringof ~ \" = 1;\");\n+}\n+\n+void foo()\n+{\n+    static foreach(enum i; 0..3)\n+    {\n+        mixin(\"int a\" ~ i.stringof ~ \" = 1;\");\n+    }\n+}\n+\n+class C\n+{\n+    invariant {}\n+    invariant (true);\n+\n+    int foo() in{} out{} out(r){} in(true) out(; true) out(r; true)\n+    {\n+        return 2;\n+    }\n+}"}, {"sha": "7e7d9c2d48d541808b8745a0063d5a7dff8ec067", "filename": "gcc/testsuite/gdc.test/fail_compilation/disable.d", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdisable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdisable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdisable.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,15 +1,16 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/disable.d(50): Error: function disable.DisabledOpAssign.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(53): Error: function disable.DisabledPostblit.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(56): Error: function disable.HasDtor.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(60): Error: generated function disable.Nested!(DisabledOpAssign).Nested.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(63): Error: generated function disable.Nested!(DisabledPostblit).Nested.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(66): Error: generated function disable.Nested!(HasDtor).Nested.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(70): Error: generated function disable.NestedDtor!(DisabledOpAssign).NestedDtor.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(73): Error: generated function disable.NestedDtor!(DisabledPostblit).NestedDtor.opAssign is not callable because it is annotated with @disable\n-fail_compilation/disable.d(76): Error: generated function disable.NestedDtor!(HasDtor).NestedDtor.opAssign is not callable because it is annotated with @disable\n+fail_compilation/disable.d(56): Error: function `disable.DisabledOpAssign.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(59): Error: function `disable.DisabledPostblit.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(62): Error: function `disable.HasDtor.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(66): Error: generated function `disable.Nested!(DisabledOpAssign).Nested.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(69): Error: generated function `disable.Nested!(DisabledPostblit).Nested.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(72): Error: generated function `disable.Nested!(HasDtor).Nested.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(76): Error: generated function `disable.NestedDtor!(DisabledOpAssign).NestedDtor.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(79): Error: generated function `disable.NestedDtor!(DisabledPostblit).NestedDtor.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(82): Error: generated function `disable.NestedDtor!(HasDtor).NestedDtor.opAssign` cannot be used because it is annotated with `@disable`\n+fail_compilation/disable.d(84): Error: enum member `disable.Enum1.value` cannot be used because it is annotated with `@disable`\n ---\n  */\n struct DisabledOpAssign {\n@@ -44,6 +45,11 @@ struct NestedDtor (T)\n     ~this() {}\n }\n \n+enum Enum1\n+{\n+    @disable value\n+}\n+\n void main ()\n {\n     DisabledOpAssign o;\n@@ -74,4 +80,6 @@ void main ()\n \n     NestedDtor!(HasDtor) ndd;\n     ndd = NestedDtor!(HasDtor)();\n+\n+    auto v1 = Enum1.value;\n }"}, {"sha": "257d739bbd33b1a92a711f83b7707338d7779c07", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail10968.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10968.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10968.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10968.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -43,12 +43,12 @@ void bar() pure @safe\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail10968.d(66): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n-fail_compilation/fail10968.d(67): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n-fail_compilation/fail10968.d(68): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n-fail_compilation/fail10968.d(71): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n-fail_compilation/fail10968.d(72): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n-fail_compilation/fail10968.d(73): Error: struct fail10968.SD is not copyable because it is annotated with @disable\n+fail_compilation/fail10968.d(66): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n+fail_compilation/fail10968.d(67): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n+fail_compilation/fail10968.d(68): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n+fail_compilation/fail10968.d(71): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n+fail_compilation/fail10968.d(72): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n+fail_compilation/fail10968.d(73): Error: struct fail10968.SD is not copyable because it is annotated with `@disable`\n ---\n */\n "}, {"sha": "c41a4c492e3f39e4b7c6168582cbaf72de6ecc51", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail11355.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11355.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11355.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail11355.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail11355.d(28): Error: struct fail11355.A is not copyable because it is annotated with @disable\n+fail_compilation/fail11355.d(28): Error: struct fail11355.A is not copyable because it is annotated with `@disable`\n ---\n */\n "}, {"sha": "964dcf913c2af3d6a0b0044c8df23113f3eac213", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail15044.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15044.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15044.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail15044.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail15044.d(30): Error: generated function fail15044.V.opAssign is not callable because it is annotated with @disable\n+fail_compilation/fail15044.d(30): Error: generated function `fail15044.V.opAssign` cannot be used because it is annotated with `@disable`\n ---\n */\n "}, {"sha": "8677d485a406a6f8a75a57f3c044741e7f7d606b", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail341.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail341.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail341.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail341.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,8 +1,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail341.d(26): Error: struct fail341.S is not copyable because it is annotated with @disable\n-fail_compilation/fail341.d(27): Error: function fail341.foo is not callable because it is annotated with @disable\n+fail_compilation/fail341.d(26): Error: struct fail341.S is not copyable because it is annotated with `@disable`\n+fail_compilation/fail341.d(27): Error: function `fail341.foo` cannot be used because it is annotated with `@disable`\n ---\n */\n "}, {"sha": "57d420f76ef524c88c74e84dc59546b20c751f50", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail9346.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9346.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9346.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9346.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -1,8 +1,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail9346.d(26): Error: struct fail9346.S is not copyable because it is annotated with @disable\n-fail_compilation/fail9346.d(27): Error: struct fail9346.S is not copyable because it is annotated with @disable\n+fail_compilation/fail9346.d(26): Error: struct fail9346.S is not copyable because it is annotated with `@disable`\n+fail_compilation/fail9346.d(27): Error: struct fail9346.S is not copyable because it is annotated with `@disable`\n ---\n */\n "}, {"sha": "572b821e98249c74762c8fdca55200db1068ec73", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_contracts1.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts1.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,8 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail_contracts1.d(8): Error: `(identifier) { ... }` or `(identifier; expression)` following `out` expected, not `)`\n+---\n+*/\n+\n+void foo() out()){}"}, {"sha": "2a07a60e5f3a3468b3701189fed479b583aaa8e6", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_contracts2.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts2.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,8 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail_contracts2.d(8): Error: missing `do { ... }` after `in` or `out`\n+---\n+*/\n+\n+void foo()in{}{}"}, {"sha": "de3e9bb708145580c7334ebac0623f11979bfe8e", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_contracts3.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts3.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,14 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail_contracts3.d(13): Error: function `fail_contracts3.D.foo` cannot have an in contract when overridden function `fail_contracts3.C.foo` does not have an in contract\n+---\n+*/\n+\n+class C {\n+       void foo(){}\n+}\n+\n+class D : C {\n+       override void foo()in{}do{}\n+}"}, {"sha": "f1b664477cc5d6231c6d3f14766260383b5c2bff", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_contracts4.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_contracts4.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,8 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail_contracts4.d(8): Error: missing `do { ... }` for function literal\n+---\n+*/\n+\n+enum x = delegate int()in(true) out(;true) out(r; true) in{} out(r){};"}, {"sha": "907239734d43ec8fe243a9afb9b16370bfe86939", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17908a.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908a.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,15 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test17908a.d(10): Error: function `test17908a.foo` cannot be used because it is annotated with `@disable`\n+---\n+*/\n+\n+@disable void foo();\n+@disable void foo(int) {}\n+alias g = foo;\n+\n+void main()\n+{\n+    g(10);\n+}"}, {"sha": "e2c4d84abedd1a7d6254510357afb43f49a76428", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17908b.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17908b.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,14 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test17908b.d(13): Error: function `test17908b.foobar` cannot be used because it is annotated with `@disable`\n+---\n+*/\n+void foobar() {}\n+@disable void foobar(int) {}\n+alias i = foobar;\n+\n+void main()\n+{\n+    i(10);\n+}"}, {"sha": "384c51444b173d780fc9b9174464a15fbccb2775", "filename": "gcc/testsuite/gdc.test/fail_compilation/test9701.d", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,63 @@\n+/*\n+TEST_OUTPUT\n+---\n+fail_compilation/test9701.d(38): Error: `@safe` is not a valid attribute for enum members\n+fail_compilation/test9701.d(39): Error: `@system` is not a valid attribute for enum members\n+fail_compilation/test9701.d(40): Error: `@trusted` is not a valid attribute for enum members\n+fail_compilation/test9701.d(41): Error: `@nogc` is not a valid attribute for enum members\n+fail_compilation/test9701.d(42): Error: `pure` is not a valid attribute for enum members\n+fail_compilation/test9701.d(43): Error: `shared` is not a valid attribute for enum members\n+fail_compilation/test9701.d(44): Error: `inout` is not a valid attribute for enum members\n+fail_compilation/test9701.d(45): Error: `immutable` is not a valid attribute for enum members\n+fail_compilation/test9701.d(46): Error: `const` is not a valid attribute for enum members\n+fail_compilation/test9701.d(47): Error: `synchronized` is not a valid attribute for enum members\n+fail_compilation/test9701.d(48): Error: `scope` is not a valid attribute for enum members\n+fail_compilation/test9701.d(49): Error: `auto` is not a valid attribute for enum members\n+fail_compilation/test9701.d(50): Error: `ref` is not a valid attribute for enum members\n+fail_compilation/test9701.d(51): Error: `__gshared` is not a valid attribute for enum members\n+fail_compilation/test9701.d(52): Error: `final` is not a valid attribute for enum members\n+fail_compilation/test9701.d(53): Error: `extern` is not a valid attribute for enum members\n+fail_compilation/test9701.d(54): Error: `export` is not a valid attribute for enum members\n+fail_compilation/test9701.d(55): Error: `nothrow` is not a valid attribute for enum members\n+fail_compilation/test9701.d(56): Error: `public` is not a valid attribute for enum members\n+fail_compilation/test9701.d(57): Error: `private` is not a valid attribute for enum members\n+fail_compilation/test9701.d(58): Error: `package` is not a valid attribute for enum members\n+fail_compilation/test9701.d(59): Error: `static` is not a valid attribute for enum members\n+fail_compilation/test9701.d(60): Error: `static` is not a valid attribute for enum members\n+fail_compilation/test9701.d(61): Error: `static` is not a valid attribute for enum members\n+fail_compilation/test9701.d(62): Error: `static` is not a valid attribute for enum members\n+---\n+*/\n+\n+// This test exists to verify that parsing of enum member attributes rejects invalid attributes\n+\n+// https://issues.dlang.org/show_bug.cgi?id=9701\n+\n+enum Enum\n+{\n+    @safe safe,\n+    @system system,\n+    @trusted trusted,\n+    @nogc nogc,\n+    pure pure_,\n+    shared shared_,\n+    inout inout_,\n+    immutable immutable_,\n+    const const_,\n+    synchronized synchronized_,\n+    scope scope_,\n+    auto auto_,\n+    ref ref_,\n+    __gshared __gshared_,\n+    final final_,\n+    extern extern_,\n+    export export_,\n+    nothrow nothrow_,\n+    public public_,\n+    private private_,\n+    package package_,\n+    static static1,\n+    @(\"a\") static static2,\n+    static @(\"a\") static3,\n+    @(\"a\") static @(\"b\") static3,\n+}"}, {"sha": "16c25413ecb5c54878628bd1e2b850a194b968e1", "filename": "gcc/testsuite/gdc.test/fail_compilation/test9701b.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest9701b.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,22 @@\n+/*\n+REQUIRED_ARGS: -de\n+TEST_OUTPUT\n+---\n+fail_compilation/test9701b.d(20): Deprecation: enum member `test9701b.Enum.e0` is deprecated\n+fail_compilation/test9701b.d(21): Deprecation: enum member `test9701b.Enum.e1` is deprecated - message\n+---\n+*/\n+\n+// https://issues.dlang.org/show_bug.cgi?id=9701\n+\n+enum Enum\n+{\n+    deprecated e0,\n+    deprecated(\"message\") e1,\n+}\n+\n+void main()\n+{\n+    auto value = Enum.e0;\n+    auto value2 = Enum.e1;\n+}"}, {"sha": "ec760bd60b7600ad3c8168a2ade1ceed6f618c11", "filename": "gcc/testsuite/gdc.test/fail_compilation/udaparams.d", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a103daef78a8f9fc9b2af7c28123f25e8fa7163/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d?ref=7a103daef78a8f9fc9b2af7c28123f25e8fa7163", "patch": "@@ -0,0 +1,57 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/udaparams.d(31): Error: variadic parameter cannot have user-defined attributes\n+fail_compilation/udaparams.d(32): Error: variadic parameter cannot have user-defined attributes\n+fail_compilation/udaparams.d(34): Error: user-defined attributes cannot appear as postfixes\n+fail_compilation/udaparams.d(35): Error: user-defined attributes cannot appear as postfixes\n+fail_compilation/udaparams.d(36): Error: user-defined attributes cannot appear as postfixes\n+fail_compilation/udaparams.d(38): Error: `@safe` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(39): Error: `@safe` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(40): Error: `@safe` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(43): Error: `@system` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(44): Error: `@trusted` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(45): Error: `@nogc` attribute for function parameter is not supported\n+fail_compilation/udaparams.d(51): Error: Cannot put a storage-class in an alias declaration.\n+fail_compilation/udaparams.d(52): Error: Cannot put a storage-class in an alias declaration.\n+fail_compilation/udaparams.d(53): Error: semicolon expected to close `alias` declaration\n+fail_compilation/udaparams.d(53): Error: declaration expected, not `=>`\n+fail_compilation/udaparams.d(54): Error: semicolon expected to close `alias` declaration\n+fail_compilation/udaparams.d(54): Error: declaration expected, not `=>`\n+fail_compilation/udaparams.d(57): Error: basic type expected, not `@`\n+fail_compilation/udaparams.d(57): Error: identifier expected for template value parameter\n+fail_compilation/udaparams.d(57): Error: found `@` when expecting `)`\n+fail_compilation/udaparams.d(57): Error: basic type expected, not `3`\n+fail_compilation/udaparams.d(57): Error: found `3` when expecting `)`\n+fail_compilation/udaparams.d(57): Error: semicolon expected following function declaration\n+fail_compilation/udaparams.d(57): Error: declaration expected, not `)`\n+---\n+*/\n+\n+void vararg1(int a, @(10) ...);\n+extern(C) void vararg2(int a, @(10) ...);\n+\n+void rhsuda(int a @(10));\n+void rhsuda2(int @(10));\n+void rhsuda3(int[] arr @(10) ...);\n+\n+void wrongAttr1(@safe int);\n+void wrongAttr2(@safe void function());\n+void wrongAttr3(@safe void delegate());\n+\n+\n+void test16(A)(A a @system);\n+void test16(A)(A a @trusted);\n+void test16(A)(A a @nogc);\n+\n+// lambdas without parentheses\n+alias test19a = @safe b => 1 + 2;\n+alias test19b = @system b => 1 + 2;\n+alias test19c = @nogc b => 1 + 2;\n+alias test19d = @(2) @system b => 1 + 2;\n+alias test19e = @safe @(2) b => 1 + 2;\n+alias test19f = extern(C++) b => 1 + 2;\n+alias test19g = align(2) b => 1 + 2;\n+\n+// UDAs on Template parameter aren't supported\n+void test21(@(3) T)(T t) {}"}]}