{"sha": "285d75a45469a438f07a93a92c700d7103c082de", "node_id": "C_kwDOANBUbNoAKDI4NWQ3NWE0NTQ2OWE0MzhmMDdhOTNhOTJjNzAwZDcxMDNjMDgyZGU", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-22T19:54:33Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-12T01:26:15Z"}, "message": "rs6000: Support SSE4.1 \"cvt\" intrinsics\n\nFunction signatures and decorations match gcc/config/i386/smmintrin.h.\n\nAlso, copy tests for:\n- _mm_cvtepi8_epi16, _mm_cvtepi8_epi32, _mm_cvtepi8_epi64\n- _mm_cvtepi16_epi32, _mm_cvtepi16_epi64\n- _mm_cvtepi32_epi64,\n- _mm_cvtepu8_epi16, _mm_cvtepu8_epi32, _mm_cvtepu8_epi64\n- _mm_cvtepu16_epi32, _mm_cvtepu16_epi64\n- _mm_cvtepu32_epi64\n\nfrom gcc/testsuite/gcc.target/i386.\n\nsse4_1-pmovsxbd.c, sse4_1-pmovsxbq.c, and sse4_1-pmovsxbw.c were\nmodified from using \"char\" types to \"signed char\" types, because\nthe default is unsigned on powerpc.\n\n2021-10-11  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_cvtepi8_epi16, _mm_cvtepi8_epi32,\n\t_mm_cvtepi8_epi64, _mm_cvtepi16_epi32, _mm_cvtepi16_epi64,\n\t_mm_cvtepi32_epi64, _mm_cvtepu8_epi16, _mm_cvtepu8_epi32,\n\t_mm_cvtepu8_epi64, _mm_cvtepu16_epi32, _mm_cvtepu16_epi64,\n\t_mm_cvtepu32_epi64): New.\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-pmovsxbd.c: Copy from gcc.target/i386,\n\tadjust dg directives to suit.\n\t* gcc.target/powerpc/sse4_1-pmovsxbq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovsxbw.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovsxdq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovsxwd.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovsxwq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxbd.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxbq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxbw.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxdq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxwd.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmovzxwq.c: Same.", "tree": {"sha": "b8041227b021453adfccf47acc0b261282811190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8041227b021453adfccf47acc0b261282811190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285d75a45469a438f07a93a92c700d7103c082de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285d75a45469a438f07a93a92c700d7103c082de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285d75a45469a438f07a93a92c700d7103c082de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285d75a45469a438f07a93a92c700d7103c082de/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec08caf7e009053d21b331bd98679fec4ff2900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec08caf7e009053d21b331bd98679fec4ff2900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec08caf7e009053d21b331bd98679fec4ff2900"}], "stats": {"total": 648, "additions": 648, "deletions": 0}, "files": [{"sha": "ad6b68e13ccec30a72d84d4085fcf18a154cbd21", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -330,6 +330,144 @@ _mm_max_epu32 (__m128i __X, __m128i __Y)\n   return (__m128i) vec_max ((__v4su)__X, (__v4su)__Y);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi8_epi16 (__m128i __A)\n+{\n+  return (__m128i) vec_unpackh ((__v16qi) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi8_epi32 (__m128i __A)\n+{\n+  __A = (__m128i) vec_unpackh ((__v16qi) __A);\n+  return (__m128i) vec_unpackh ((__v8hi) __A);\n+}\n+\n+#ifdef _ARCH_PWR8\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi8_epi64 (__m128i __A)\n+{\n+  __A = (__m128i) vec_unpackh ((__v16qi) __A);\n+  __A = (__m128i) vec_unpackh ((__v8hi) __A);\n+  return (__m128i) vec_unpackh ((__v4si) __A);\n+}\n+#endif\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi16_epi32 (__m128i __A)\n+{\n+  return (__m128i) vec_unpackh ((__v8hi) __A);\n+}\n+\n+#ifdef _ARCH_PWR8\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi16_epi64 (__m128i __A)\n+{\n+  __A = (__m128i) vec_unpackh ((__v8hi) __A);\n+  return (__m128i) vec_unpackh ((__v4si) __A);\n+}\n+#endif\n+\n+#ifdef _ARCH_PWR8\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi32_epi64 (__m128i __A)\n+{\n+  return (__m128i) vec_unpackh ((__v4si) __A);\n+}\n+#endif\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu8_epi16 (__m128i __A)\n+{\n+  const __v16qu __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v16qu) __A, __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v16qu) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu8_epi32 (__m128i __A)\n+{\n+  const __v16qu __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v16qu) __A, __zero);\n+  __A = (__m128i) vec_mergeh ((__v8hu) __A, (__v8hu) __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v16qu) __A);\n+  __A = (__m128i) vec_mergeh ((__v8hu) __zero, (__v8hu) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu8_epi64 (__m128i __A)\n+{\n+  const __v16qu __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v16qu) __A, __zero);\n+  __A = (__m128i) vec_mergeh ((__v8hu) __A, (__v8hu) __zero);\n+  __A = (__m128i) vec_mergeh ((__v4su) __A, (__v4su) __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v16qu) __A);\n+  __A = (__m128i) vec_mergeh ((__v8hu) __zero, (__v8hu) __A);\n+  __A = (__m128i) vec_mergeh ((__v4su) __zero, (__v4su) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu16_epi32 (__m128i __A)\n+{\n+  const __v8hu __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v8hu) __A, __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v8hu) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu16_epi64 (__m128i __A)\n+{\n+  const __v8hu __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v8hu) __A, __zero);\n+  __A = (__m128i) vec_mergeh ((__v4su) __A, (__v4su) __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v8hu) __A);\n+  __A = (__m128i) vec_mergeh ((__v4su) __zero, (__v4su) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu32_epi64 (__m128i __A)\n+{\n+  const __v4su __zero = {0};\n+#ifdef __LITTLE_ENDIAN__\n+  __A = (__m128i) vec_mergeh ((__v4su) __A, __zero);\n+#else /* __BIG_ENDIAN__.  */\n+  __A = (__m128i) vec_mergeh (__zero, (__v4su) __A);\n+#endif /* __BIG_ENDIAN__.  */\n+  return __A;\n+}\n+\n /* Return horizontal packed word minimum and its index in bits [15:0]\n    and bits [18:16] respectively.  */\n __inline __m128i"}, {"sha": "99cca6150ea4bc0ad6a0b8c3dec306708c41c38b", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxbd.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbd.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+      signed char c[NUM * 4];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 4) + (i / 4) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepi8_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 4) + (i / 4) * 16] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "9ec1ab7a4169e8e2409e6a08b6f9163b4fb80071", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxbq.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      signed char c[NUM * 8];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 2) + (i / 2) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi8_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 2) + (i / 2) * 16] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "805897d929b1e928c0b6ffd79f1830c6c1288a32", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxbw.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxbw.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      short s[NUM];\n+      signed char c[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 8) + (i / 8) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x [i / 8] = _mm_cvtepi8_epi16 (src.x [i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 8) + (i / 8) * 16] != dst.s[i])\n+      abort ();\n+}"}, {"sha": "1c263782240aeb5ac1e9fbcbb3b6987b12dd3f2d", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxdq.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxdq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      int i[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.i[(i % 2) + (i / 2) * 4] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi32_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.i[(i % 2) + (i / 2) * 4] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "43f30f0243907052dcdf2a058e40698486c05029", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxwd.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwd.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+      short s[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 4) + (i / 4) * 8] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepi16_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 4) + (i / 4) * 8] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "67864695a11385594b86d796b539a510ffe803b8", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovsxwq.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovsxwq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      short s[NUM * 4];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 2) + (i / 2) * 8] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi16_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 2) + (i / 2) * 8] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "643a2a6abf3cb157aa55b1c114358df1b997e4cd", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxbd.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbd.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+      unsigned char c[NUM * 4];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 4) + (i / 4) * 16] = i * i;\n+      if ((i % 4))\n+\tsrc.c[(i % 4) + (i / 4) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepu8_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 4) + (i / 4) * 16] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "871f425c80ebfcd9a70b32234a7d032b52d78250", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxbq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned char c[NUM * 8];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 2) + (i / 2) * 16] = i * i;\n+      if ((i % 2))\n+\tsrc.c[(i % 2) + (i / 2) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu8_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 2) + (i / 2) * 16] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "ee89ebc805fee61be58c16430ff088117a25b727", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxbw.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxbw.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short s[NUM];\n+      unsigned char c[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 8) + (i / 8) * 16] = i * i;\n+      if ((i % 4))\n+\tsrc.c[(i % 8) + (i / 8) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x [i / 8] = _mm_cvtepu8_epi16 (src.x [i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 8) + (i / 8) * 16] != dst.s[i])\n+      abort ();\n+}"}, {"sha": "3ec28ab263bc60db97f80c2e32d8153b027527f7", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxdq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxdq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned int i[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.i[(i % 2) + (i / 2) * 4] = i * i;\n+      if ((i % 2))\n+        src.i[(i % 2) + (i / 2) * 4] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu32_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.i[(i % 2) + (i / 2) * 4] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "decd9ff7f9ef7a6adbd9e6e287ef78977e28476a", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxwd.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwd.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+      unsigned short s[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 4) + (i / 4) * 8] = i * i;\n+      if ((i % 4))\n+\tsrc.s[(i % 4) + (i / 4) * 8] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepu16_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 4) + (i / 4) * 8] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "03830448d17319518ad6e189822c04dca4ba5671", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmovzxwq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285d75a45469a438f07a93a92c700d7103c082de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmovzxwq.c?ref=285d75a45469a438f07a93a92c700d7103c082de", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned short s[NUM * 4];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 2) + (i / 2) * 8] = i * i;\n+      if ((i % 2))\n+\tsrc.s[(i % 2) + (i / 2) * 8] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu16_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 2) + (i / 2) * 8] != dst.ll[i])\n+      abort ();\n+}"}]}