{"sha": "c96597bfe562f8d34b1e556560384e5826752acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2NTk3YmZlNTYyZjhkMzRiMWU1NTY1NjAzODRlNTgyNjc1MmFjYw==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2008-04-08T06:58:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:58:12Z"}, "message": "bindgen.adb (Gen_Adainit_Ada): If the main program is a CIL function...\n\n2008-04-08  Jerome Lambourg  <lambourg@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* bindgen.adb (Gen_Adainit_Ada): If the main program is a CIL function,\n\tthen use __gnat_set_exit_status to report the returned status code.\n\n\t* comperr.adb (Compiler_Abort): Convert most bug boxes into clean error\n\tmessages on .NET, since some constructs of the language are not\n\tproperly supported.\n\n\t* gnatlink.adb (Gnatlink): In case the command line is too long for the\n\t.NET linker, gnatlink now concatenate all .il files and pass this to\n\tilasm.\n\nFrom-SVN: r134066", "tree": {"sha": "33811b11916bf4ffaa6d92a260c43dff782ddbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33811b11916bf4ffaa6d92a260c43dff782ddbeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c96597bfe562f8d34b1e556560384e5826752acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96597bfe562f8d34b1e556560384e5826752acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c96597bfe562f8d34b1e556560384e5826752acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96597bfe562f8d34b1e556560384e5826752acc/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77e51042833db99163b90918effbe6daa546258b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e51042833db99163b90918effbe6daa546258b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e51042833db99163b90918effbe6daa546258b"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "475edd513f5ee5b911a87b50f8e927701edde1a1", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=c96597bfe562f8d34b1e556560384e5826752acc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -618,17 +618,27 @@ package body Bindgen is\n                  \"\"\"__gnat_initialize_stack_limit\"\");\");\n          end if;\n \n+         --  Special processing when main program is CIL function/procedure\n+\n          if VM_Target = CLI_Target\n            and then Bind_Main_Program\n            and then not No_Main_Subprogram\n          then\n             WBI (\"\");\n \n+            --  Function case, use Set_Exit_Status to report the returned\n+            --  status code, since that is the only mechanism available.\n+\n             if ALIs.Table (ALIs.First).Main_Program = Func then\n                WBI (\"      Result : Integer;\");\n+               WBI (\"      procedure Set_Exit_Status (Code : Integer);\");\n+               WBI (\"      pragma Import (C, Set_Exit_Status, \" &\n+                    \"\"\"__gnat_set_exit_status\"\");\");\n                WBI (\"\");\n                WBI (\"      function Ada_Main_Program return Integer;\");\n \n+            --  Procedure case\n+\n             else\n                WBI (\"      procedure Ada_Main_Program;\");\n             end if;\n@@ -797,12 +807,20 @@ package body Bindgen is\n       WBI (\"\");\n       Gen_Elab_Calls_Ada;\n \n+      --  Case of main program is CIL function or procedure\n+\n       if VM_Target = CLI_Target\n         and then Bind_Main_Program\n         and then not No_Main_Subprogram\n       then\n+         --  For function case, use Set_Exit_Status to set result\n+\n          if ALIs.Table (ALIs.First).Main_Program = Func then\n             WBI (\"      Result := Ada_Main_Program;\");\n+            WBI (\"      Set_Exit_Status (Result);\");\n+\n+         --  Procedure case\n+\n          else\n             WBI (\"      Ada_Main_Program;\");\n          end if;\n@@ -2270,7 +2288,7 @@ package body Bindgen is\n \n          if VM_Target = No_VM then\n             Set_Main_Program_Name;\n-            Set_String (\"\"\" & Ascii.NUL;\");\n+            Set_String (\"\"\" & ASCII.NUL;\");\n          else\n             Set_String (Name_Buffer (1 .. Name_Len - 2) & \"\"\";\");\n          end if;"}, {"sha": "157945bb0d9eac3e4a74aae8dc3f1ab95c81a932", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=c96597bfe562f8d34b1e556560384e5826752acc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@ with Output;   use Output;\n with Sinput;   use Sinput;\n with Sprint;   use Sprint;\n with Sdefault; use Sdefault;\n+with Targparm; use Targparm;\n with Treepr;   use Treepr;\n with Types;    use Types;\n \n@@ -112,6 +113,31 @@ package body Comperr is\n \n       Abort_In_Progress := True;\n \n+      --  Generate a \"standard\" error message instead of a bug box in case of\n+      --  .NET compiler, since we do not support all constructs of the\n+      --  language. Of course ideally, we should detect this before bombing\n+      --  on e.g. an assertion error, but in practice most of these bombs\n+      --  are due to a legitimate case of a construct not being supported (in\n+      --  a sense they all are, since for sure we are not supporting something\n+      --  if we bomb!) By giving this message, we provide a more reasonable\n+      --  practical interface, since giving scary bug boxes on unsupported\n+      --  features is definitely not helpful.\n+\n+      --  Note that the call to Error_Msg_N below sets Serious_Errors_Detected\n+      --  to 1, so we use the regular mechanism below in order to display a\n+      --  \"compilation abandoned\" message and exit, so we still know we have\n+      --  this case (and -gnatdk can still be used to get the bug box).\n+\n+      if VM_Target = CLI_Target\n+        and then Serious_Errors_Detected = 0\n+        and then not Debug_Flag_K\n+        and then Sloc (Current_Error_Node) > No_Location\n+      then\n+         Error_Msg_N\n+           (\"unsupported construct in this context\",\n+            Current_Error_Node);\n+      end if;\n+\n       --  If any errors have already occurred, then we guess that the abort\n       --  may well be caused by previous errors, and we don't make too much\n       --  fuss about it, since we want to let programmer fix the errors first."}, {"sha": "906a61abd91ccfcc8890bf09b00e68420741bc90", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96597bfe562f8d34b1e556560384e5826752acc/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=c96597bfe562f8d34b1e556560384e5826752acc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -139,15 +139,14 @@ procedure Gnatlink is\n \n    Gcc : String_Access := Program_Name (\"gcc\");\n \n-   Read_Mode  : constant String := \"r\" & ASCII.Nul;\n+   Read_Mode : constant String := \"r\" & ASCII.NUL;\n \n    Begin_Info : String := \"--  BEGIN Object file/option list\";\n    End_Info   : String := \"--  END Object file/option list   \";\n    --  Note: above lines are modified in C mode, see option processing\n \n    Gcc_Path             : String_Access;\n    Linker_Path          : String_Access;\n-\n    Output_File_Name     : String_Access;\n    Ali_File_Name        : String_Access;\n    Binder_Spec_Src_File : String_Access;\n@@ -160,14 +159,18 @@ procedure Gnatlink is\n    --  Temporary file used by linker to pass list of object files on\n    --  certain systems with limitations on size of arguments.\n \n+   Lname : String_Access := null;\n+   --  File used by linker for CLI target, used to concatenate all .il files\n+   --  when the command line passed to ilasm is too long\n+\n    Debug_Flag_Present : Boolean := False;\n    Verbose_Mode       : Boolean := False;\n    Very_Verbose_Mode  : Boolean := False;\n \n    Ada_Bind_File : Boolean := True;\n    --  Set to True if bind file is generated in Ada\n \n-   Standard_Gcc  : Boolean := True;\n+   Standard_Gcc : Boolean := True;\n \n    Compile_Bind_File : Boolean := True;\n    --  Set to False if bind file is not to be compiled\n@@ -953,7 +956,42 @@ procedure Gnatlink is\n       --  to read from a file instead of the command line is only triggered if\n       --  a conservative threshold is passed.\n \n-      if Object_List_File_Required\n+      if VM_Target = CLI_Target\n+        and then Link_Bytes > Link_Max\n+      then\n+         Lname := new String'(\"l~\" & Base_Name (Ali_File_Name.all) & \".il\");\n+\n+         for J in Objs_Begin .. Objs_End loop\n+            Copy_File (Linker_Objects.Table (J).all, Lname.all,\n+                       Success => Closing_Status,\n+                       Mode    => Append);\n+         end loop;\n+\n+         --  Add the special objects list file option together with the name\n+         --  of the temporary file to the objects file table.\n+\n+         Linker_Objects.Table (Objs_Begin) :=\n+           new String'(Value (Object_File_Option_Ptr) & Lname.all);\n+\n+         --  The slots containing these object file names are then removed\n+         --  from the objects table so they do not appear in the link. They\n+         --  are removed by moving up the linker options and non-Ada object\n+         --  files appearing after the Ada object list in the table.\n+\n+         declare\n+            N : Integer;\n+\n+         begin\n+            N := Objs_End - Objs_Begin + 1;\n+\n+            for J in Objs_End + 1 .. Linker_Objects.Last loop\n+               Linker_Objects.Table (J - N + 1) := Linker_Objects.Table (J);\n+            end loop;\n+\n+            Linker_Objects.Set_Last (Linker_Objects.Last - N + 1);\n+         end;\n+\n+      elsif Object_List_File_Required\n         or else (Object_List_File_Supported\n                    and then Link_Bytes > Link_Max)\n       then\n@@ -2015,6 +2053,10 @@ begin\n                Delete (Tname);\n             end if;\n \n+            if Lname /= null then\n+               Delete (Lname.all & ASCII.NUL);\n+            end if;\n+\n             if not Success then\n                Error_Msg (\"error when calling \" & Linker_Path.all);\n                Exit_Program (E_Fatal);"}]}