{"sha": "ebde32fd2478df9909e07843451956ce89a02b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkZTMyZmQyNDc4ZGY5OTA5ZTA3ODQzNDUxOTU2Y2U4OWEwMmI0Ng==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2009-10-06T19:37:40Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2009-10-06T19:37:40Z"}, "message": "config.gcc (powerpc*-*-*): Handle a2.\n\n\t* config.gcc (powerpc*-*-*): Handle a2.\n\t* config/rs6000/rs6000.md (cpu): Add ppca2.  Include \"a2.md\".\n\t* config/rs6000/a2.md: New file.\n\t* config/rs6000/rs6000.opt (mno-update): New.\n\t(mupdate): Return to using a mask, not a var.\n\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add support for a2.\n\t(enum processor_type): Add PROCESSOR_PPCA2.\n\t* config/rs6000/rs6000.c (ppca2_cost): New costs.\n\t(rs6000_override_options): Add \"a2\" to processor_target_table.\n\tUpdate rs6000_always_hint logic.  Correctly set rs6000_cost for\n\ta2.\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n\t-mcpu=a2.\n\nFrom-SVN: r152499", "tree": {"sha": "1fdda441e43d8a2f06b2fe75cd3d43acb8100a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdda441e43d8a2f06b2fe75cd3d43acb8100a58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebde32fd2478df9909e07843451956ce89a02b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebde32fd2478df9909e07843451956ce89a02b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebde32fd2478df9909e07843451956ce89a02b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebde32fd2478df9909e07843451956ce89a02b46/comments", "author": null, "committer": null, "parents": [{"sha": "f1aebde0f5748619c1d2302a126ea2048d907837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1aebde0f5748619c1d2302a126ea2048d907837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1aebde0f5748619c1d2302a126ea2048d907837"}], "stats": {"total": 304, "additions": 296, "deletions": 8}, "files": [{"sha": "b7c4f54123713c936b53e9f2942a0ec15ec33617", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -1,3 +1,19 @@\n+2009-10-07  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-*): Handle a2.\n+\t* config/rs6000/rs6000.md (cpu): Add ppca2.  Include \"a2.md\".\n+\t* config/rs6000/a2.md: New file.\n+\t* config/rs6000/rs6000.opt (mno-update): New.\n+\t(mupdate): Return to using a mask, not a var.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add support for a2.\n+\t(enum processor_type): Add PROCESSOR_PPCA2.\n+\t* config/rs6000/rs6000.c (ppca2_cost): New costs.\n+\t(rs6000_override_options): Add \"a2\" to processor_target_table.\n+\tUpdate rs6000_always_hint logic.  Correctly set rs6000_cost for\n+\ta2.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n+\t-mcpu=a2.\n+\n 2009-10-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2):"}, {"sha": "9e3ada7fb6490093b85284a23e1f3466533c78e9", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -327,7 +327,7 @@ powerpc*-*-*)\n \textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n-\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[34567]|xpower6x|xrs64a|xcell)\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[34567]|xpower6x|xrs64a|xcell|xa2)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n@@ -3070,7 +3070,7 @@ case \"${target}\" in\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 464 | 464fp \\\n \t\t\t| 505 | 601 | 602 | 603 | 603e | ec603e | 604 \\\n \t\t\t| 604e | 620 | 630 | 740 | 750 | 7400 | 7450 \\\n-\t\t\t| e300c[23] | 854[08] | e500mc \\\n+\t\t\t| a2 | e300c[23] | 854[08] | e500mc \\\n \t\t\t| 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n \t\t\t\t# OK\n \t\t\t\t;;"}, {"sha": "570753663b26d1b07b621e1228e671f5b4d5ae63", "filename": "gcc/config/rs6000/a2.md", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Fa2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Fa2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fa2.md?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -0,0 +1,238 @@\n+;; Scheduling description for PowerPC A2 processors.\n+;; Copyright (C) 2009 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Ben Elliston (bje@au.ibm.com).\n+\n+(define_automaton \"ppca2\")\n+\n+;; CPU units\n+\n+;; The multiplier pipeline.\n+(define_cpu_unit \"mult\" \"ppca2\")\n+\n+;; The auxillary processor unit (FP/vector unit).\n+(define_cpu_unit \"axu\" \"ppca2\")\n+\n+;; D.4.6\n+;; Some peculiarities for certain SPRs\n+\n+(define_insn_reservation \"ppca2-mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.4.8\n+(define_insn_reservation \"ppca2-imul\" 1\n+  (and (eq_attr \"type\" \"imul,imul2,imul3,imul_compare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; FIXME: latency and multiplier reservation for 64-bit multiply?\n+(define_insn_reservation \"ppca2-lmul\" 6\n+  (and (eq_attr \"type\" \"lmul,lmul_compare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*3\")\n+\n+;; D.4.9\n+(define_insn_reservation \"ppca2-idiv\" 32\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*32\")\n+\n+(define_insn_reservation \"ppca2-ldiv\" 65\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*65\")\n+\n+;; D.4.13\n+(define_insn_reservation \"ppca2-load\" 5\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.8.1\n+(define_insn_reservation \"ppca2-fp\" 6\n+  (and (eq_attr \"type\" \"fp\")     \t   ;; Ignore fpsimple insn types (SPE only).\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.4\n+(define_insn_reservation \"ppca2-fp-load\" 6\n+  (and (eq_attr \"type\" \"fpload,fpload_u,fpload_ux\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.5\n+(define_insn_reservation \"ppca2-fp-store\" 2\n+  (and (eq_attr \"type\" \"fpstore,fpstore_u,fpstore_ux\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.6\n+(define_insn_reservation \"ppca2-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+ \"axu\")\n+\n+;; D.8.7\n+;;\n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-ddiv\" 72\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+(define_insn_reservation \"ppca2-sdiv\" 59\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+;; D.8.8\n+;; \n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-dsqrt\" 69\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+(define_insn_reservation \"ppca2-ssqrt\" 65\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+;; Scheduling description for PowerPC A2 processors.\n+;; Copyright (C) 2008 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Ben Elliston (bje@au.ibm.com).\n+\n+(define_automaton \"a2\")\n+\n+;; CPU units\n+\n+;; The multiplier pipeline.\n+(define_cpu_unit \"mult\" \"a2\")\n+\n+;; The auxillary processor unit (FP/vector unit).\n+(define_cpu_unit \"axu\" \"a2\")\n+\n+;; D.4.6\n+;; Some peculiarities for certain SPRs\n+\n+(define_insn_reservation \"ppca2-mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.4.8\n+(define_insn_reservation \"ppca2-imul\" 1\n+  (and (eq_attr \"type\" \"imul,imul2,imul3,imul_compare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; FIXME: latency and multiplier reservation for 64-bit multiply?\n+(define_insn_reservation \"ppca2-lmul\" 6\n+  (and (eq_attr \"type\" \"lmul,lmul_compare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*3\")\n+\n+;; D.4.9\n+(define_insn_reservation \"ppca2-idiv\" 32\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*32\")\n+\n+(define_insn_reservation \"ppca2-ldiv\" 65\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*65\")\n+\n+;; D.4.13\n+(define_insn_reservation \"pcca2-load\" 5\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.8.1\n+(define_insn_reservation \"ppca2-fp\" 6\n+  (and (eq_attr \"type\" \"fp\")     \t   ;; Ignore fpsimple insn types (SPE only).\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.4\n+(define_insn_reservation \"ppca2-fp-load\" 6\n+  (and (eq_attr \"type\" \"fpload,fpload_u,fpload_ux\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.5\n+(define_insn_reservation \"ppca2-fp-store\" 2\n+  (and (eq_attr \"type\" \"fpstore,fpstore_u,fpstore_ux\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.6\n+(define_insn_reservation \"ppca2-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+ \"axu\")\n+\n+;; D.8.7\n+;;\n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-ddiv\" 72\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+(define_insn_reservation \"ppca2-sdiv\" 59\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+;; D.8.8\n+;; \n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-dsqrt\" 69\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+(define_insn_reservation \"ppca2-ssqrt\" 65\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")"}, {"sha": "1215a9f2da814f3bd43dd613b123701c0e33738c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -797,6 +797,25 @@ struct processor_costs power7_cost = {\n   12,\t\t\t/* prefetch streams */\n };\n \n+/* Instruction costs on POWER A2 processors.  */\n+static const\n+struct processor_costs ppca2_cost = {\n+  COSTS_N_INSNS (16),    /* mulsi */\n+  COSTS_N_INSNS (16),    /* mulsi_const */\n+  COSTS_N_INSNS (16),    /* mulsi_const9 */\n+  COSTS_N_INSNS (16),   /* muldi */\n+  COSTS_N_INSNS (22),   /* divsi */\n+  COSTS_N_INSNS (28),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (59),   /* sdiv */\n+  COSTS_N_INSNS (72),   /* ddiv */\n+  64,\n+  16,\t\t\t/* l1 cache */\n+  2048,\t\t\t/* l2 cache */\n+  16,\t\t\t/* prefetch streams */\n+};\n+\n \f\n static bool rs6000_function_ok_for_sibcall (tree, tree);\n static const char *rs6000_invalid_within_doloop (const_rtx);\n@@ -2149,6 +2168,9 @@ rs6000_override_options (const char *default_cpu)\n \t /* 8548 has a dummy entry for now.  */\n \t {\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n \t  | MASK_ISEL},\n+ \t {\"a2\", PROCESSOR_PPCA2,\n+ \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB\n+ \t  | MASK_CMPB | MASK_NO_UPDATE },\n \t {\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK},\n \t {\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT\n@@ -2216,7 +2238,7 @@ rs6000_override_options (const char *default_cpu)\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n \t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n \t\t     | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP\n-\t\t     | MASK_POPCNTD | MASK_VSX | MASK_ISEL)\n+\t\t     | MASK_POPCNTD | MASK_VSX | MASK_ISEL | MASK_NO_UPDATE)\n   };\n \n   /* Set the pointer size.  */\n@@ -2495,6 +2517,7 @@ rs6000_override_options (const char *default_cpu)\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER5\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER6\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER7\n+\t\t\t&& rs6000_cpu != PROCESSOR_PPCA2\n \t\t\t&& rs6000_cpu != PROCESSOR_CELL);\n   rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t || rs6000_cpu == PROCESSOR_POWER5\n@@ -2713,6 +2736,10 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_cost = &power7_cost;\n \tbreak;\n \n+      case PROCESSOR_PPCA2:\n+\trs6000_cost = &ppca2_cost;\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n       }"}, {"sha": "a5ce9dd0f7f64b66e049e7e8a8ec8ca7f9e2a9de", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -107,6 +107,7 @@\n %{mcpu=power6: %(asm_cpu_power6) -maltivec} \\\n %{mcpu=power6x: %(asm_cpu_power6) -maltivec} \\\n %{mcpu=power7: %(asm_cpu_power7)} \\\n+%{mcpu=a2: -ma2} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n@@ -334,7 +335,8 @@ enum processor_type\n    PROCESSOR_POWER5,\n    PROCESSOR_POWER6,\n    PROCESSOR_POWER7,\n-   PROCESSOR_CELL\n+   PROCESSOR_CELL,\n+   PROCESSOR_PPCA2\n };\n \n /* FPU operations supported. "}, {"sha": "7b3de2ad230a43e7e5a6620068aa667b62a8ce49", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -139,7 +139,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,power4,power5,power6,power7,cell\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,power4,power5,power6,power7,cell,ppca2\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n \n@@ -171,6 +171,7 @@\n (include \"power7.md\")\n (include \"cell.md\")\n (include \"xfpu.md\")\n+(include \"a2.md\")\n \n (include \"predicates.md\")\n (include \"constraints.md\")"}, {"sha": "63f0f8c15824fd0372fd3f7380ec17b69184e3f6", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -155,8 +155,12 @@ mvectorize-builtins\n Target Undocumented Report Var(TARGET_VECTORIZE_BUILTINS) Init(-1)\n ; Explicitly control whether we vectorize the builtins or not.\n \n+mno-update\n+Target Report RejectNegative Mask(NO_UPDATE)\n+Do not generate load/store with update instructions\n+\n mupdate\n-Target Report Var(TARGET_UPDATE) Init(1)\n+Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE)\n Generate load/store with update instructions\n \n mavoid-indexed-addresses"}, {"sha": "a805f2b59cd178426ec9234029afa10fb41d3c7b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde32fd2478df9909e07843451956ce89a02b46/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ebde32fd2478df9909e07843451956ce89a02b46", "patch": "@@ -14607,8 +14607,8 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{505}, @samp{601}, @samp{602}, @samp{603}, @samp{603e}, @samp{604},\n @samp{604e}, @samp{620}, @samp{630}, @samp{740}, @samp{7400},\n @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n-@samp{860}, @samp{970}, @samp{8540}, @samp{e300c2}, @samp{e300c3},\n-@samp{e500mc}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n+@samp{860}, @samp{970}, @samp{8540}, @samp{a2}, @samp{e300c2},\n+@samp{e300c3}, @samp{e500mc}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{power}, @samp{power2}, @samp{power3}, @samp{power4},\n @samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x}, @samp{power7},\n @samp{common}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},"}]}