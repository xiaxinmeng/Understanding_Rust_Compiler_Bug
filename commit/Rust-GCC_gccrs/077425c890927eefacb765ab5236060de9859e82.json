{"sha": "077425c890927eefacb765ab5236060de9859e82", "node_id": "C_kwDOANBUbNoAKDA3NzQyNWM4OTA5MjdlZWZhY2I3NjVhYjUyMzYwNjBkZTk4NTllODI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-17T13:18:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-17T13:18:42Z"}, "message": "lim: Reset flow sensitive info even for pointers [PR103192]\n\nSince 2014 is lim clearing SSA_NAME_RANGE_INFO for integral SSA_NAMEs\nif moving them from conditional contexts inside of a loop into unconditional\nbefore the loop, but as the miscompilation of gimplify.c shows, we need to\ntreat pointers the same, even for them we need to reset whether the pointer\ncan/can't be null or the recorded pointer alignment.\n\nThis fixes\n-FAIL: libgomp.c/../libgomp.c-c++-common/target-in-reduction-2.c (internal compiler error)\n-FAIL: libgomp.c/../libgomp.c-c++-common/target-in-reduction-2.c (test for excess errors)\n-UNRESOLVED: libgomp.c/../libgomp.c-c++-common/target-in-reduction-2.c compilation failed to produce executable\n-FAIL: libgomp.c++/../libgomp.c-c++-common/target-in-reduction-2.c (internal compiler error)\n-FAIL: libgomp.c++/../libgomp.c-c++-common/target-in-reduction-2.c (test for excess errors)\n-UNRESOLVED: libgomp.c++/../libgomp.c-c++-common/target-in-reduction-2.c compilation failed to produce executable\n-FAIL: libgomp.c++/target-in-reduction-2.C (internal compiler error)\n-FAIL: libgomp.c++/target-in-reduction-2.C (test for excess errors)\n-UNRESOLVED: libgomp.c++/target-in-reduction-2.C compilation failed to produce executable\non both x86_64 and i686.\n\n2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103192\n\t* tree-ssa-loop-im.c (move_computations_worker): Use\n\treset_flow_sensitive_info instead of manually clearing\n\tSSA_NAME_RANGE_INFO and do it for all SSA_NAMEs, not just ones\n\twith integral types.", "tree": {"sha": "e4f7fb7e038006bb0f3d1c4ffa957f1994103c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4f7fb7e038006bb0f3d1c4ffa957f1994103c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077425c890927eefacb765ab5236060de9859e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077425c890927eefacb765ab5236060de9859e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077425c890927eefacb765ab5236060de9859e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077425c890927eefacb765ab5236060de9859e82/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39cb6bf835ca12e590eaa6f90222e51be207c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39cb6bf835ca12e590eaa6f90222e51be207c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39cb6bf835ca12e590eaa6f90222e51be207c50"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "8a81acae1156697c111535019c701a7862e5dc42", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077425c890927eefacb765ab5236060de9859e82/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077425c890927eefacb765ab5236060de9859e82/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=077425c890927eefacb765ab5236060de9859e82", "patch": "@@ -1183,14 +1183,10 @@ move_computations_worker (basic_block bb)\n \t\t\t\t\t  COND_EXPR, t, arg0, arg1);\n \t  todo |= TODO_cleanup_cfg;\n \t}\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (new_stmt)))\n-\t  && (!ALWAYS_EXECUTED_IN (bb)\n-\t      || (ALWAYS_EXECUTED_IN (bb) != level\n-\t\t  && !flow_loop_nested_p (ALWAYS_EXECUTED_IN (bb), level))))\n-\t{\n-\t  tree lhs = gimple_assign_lhs (new_stmt);\n-\t  SSA_NAME_RANGE_INFO (lhs) = NULL;\n-\t}\n+      if (!ALWAYS_EXECUTED_IN (bb)\n+\t  || (ALWAYS_EXECUTED_IN (bb) != level\n+\t      && !flow_loop_nested_p (ALWAYS_EXECUTED_IN (bb), level)))\n+\treset_flow_sensitive_info (gimple_assign_lhs (new_stmt));\n       gsi_insert_on_edge (loop_preheader_edge (level), new_stmt);\n       remove_phi_node (&bsi, false);\n     }\n@@ -1253,14 +1249,10 @@ move_computations_worker (basic_block bb)\n       gsi_remove (&bsi, false);\n       if (gimple_has_lhs (stmt)\n \t  && TREE_CODE (gimple_get_lhs (stmt)) == SSA_NAME\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (gimple_get_lhs (stmt)))\n \t  && (!ALWAYS_EXECUTED_IN (bb)\n \t      || !(ALWAYS_EXECUTED_IN (bb) == level\n \t\t   || flow_loop_nested_p (ALWAYS_EXECUTED_IN (bb), level))))\n-\t{\n-\t  tree lhs = gimple_get_lhs (stmt);\n-\t  SSA_NAME_RANGE_INFO (lhs) = NULL;\n-\t}\n+\treset_flow_sensitive_info (gimple_get_lhs (stmt));\n       /* In case this is a stmt that is not unconditionally executed\n          when the target loop header is executed and the stmt may\n \t invoke undefined integer or pointer overflow rewrite it to"}]}