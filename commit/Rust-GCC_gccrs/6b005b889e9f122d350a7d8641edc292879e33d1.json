{"sha": "6b005b889e9f122d350a7d8641edc292879e33d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwMDViODg5ZTlmMTIyZDM1MGE3ZDg2NDFlZGMyOTI4NzllMzNkMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-25T01:37:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-25T01:37:39Z"}, "message": "(ashlsi3, lshrsi3): Add SH3 support.\n\n(ashlsi3_d, ashrsi3_d, lshrsi3_d): New patterns for SH3.\n(ashrsi2_31): Remove r/!r constraint.\n\nFrom-SVN: r9812", "tree": {"sha": "8764cb5a2d5d67e52fb1ce63be78c6e20af5fcd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8764cb5a2d5d67e52fb1ce63be78c6e20af5fcd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b005b889e9f122d350a7d8641edc292879e33d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b005b889e9f122d350a7d8641edc292879e33d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b005b889e9f122d350a7d8641edc292879e33d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b005b889e9f122d350a7d8641edc292879e33d1/comments", "author": null, "committer": null, "parents": [{"sha": "bbda4250979729d37c70077b735648cf20cb3b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbda4250979729d37c70077b735648cf20cb3b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbda4250979729d37c70077b735648cf20cb3b9b"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "4c7af5e466e7ca554e2db1b870fbdf3da08a0edc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b005b889e9f122d350a7d8641edc292879e33d1/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b005b889e9f122d350a7d8641edc292879e33d1/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=6b005b889e9f122d350a7d8641edc292879e33d1", "patch": "@@ -148,6 +148,8 @@\n \n ;; On the SH and SH2, the rte instruction reads the return pc from the stack,\n ;; and thus we can't put a pop instruction in its delay slot.\n+;; ??? On the SH3, the rte instruction does not use the stack, so a pop\n+;; instruction can go in the delay slot.\n \n (define_delay\n   (eq_attr \"type\" \"return\")\n@@ -618,6 +620,12 @@\n ;;\n ;; shift left\n \n+(define_insn \"ashlsi3_d\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t   (match_operand:SI 2 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH3\"\n+  \"shld\t%2,%0\")\n \n (define_insn \"ashlsi3_k\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n@@ -666,6 +674,11 @@\n   \"\"\n   \"\n {\n+  if (TARGET_SH3 && arith_reg_operand (operands[2], GET_MODE (operands[2])))\n+    {\n+      emit_insn (gen_ashlsi3_d (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n   if (! immediate_operand (operands[2], GET_MODE (operands[2])))\n     FAIL;\n }\")\n@@ -692,16 +705,21 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"ashrsi2_31\"\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n-        (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,!r\")\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+        (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n                      (const_int 31)))\n    (clobber (reg:SI 18))]\n   \"\"\n   \"@\n-   shll\t%0\\;subc\t%0,%0\n-   mov\t%1,%0\\;shll\t%0\\;subc\t%0,%0\"\n-  [(set_attr \"length\" \"4,6\")])\n+   shll\t%0\\;subc\t%0,%0\"\n+  [(set_attr \"length\" \"4\")])\n \n+(define_insn \"ashrsi3_d\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH3\"\n+  \"shad\t%2,%1\")\n \n (define_insn \"ashrsi3_n\"\n   [(set (reg:SI 4)\n@@ -725,6 +743,12 @@\n \n ;; logical shift right\n \n+(define_insn \"lshrsi3_d\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH3\"\n+  \"shld\t%2,%0\")\n \n ;; ??? Only the single bit shift clobbers the T bit.\n \n@@ -782,6 +806,13 @@\n   \"\"\n   \"\n {\n+  if (TARGET_SH3 && arith_reg_operand (operands[2], GET_MODE (operands[2])))\n+    {\n+      rtx count = copy_to_mode_reg (SImode, operands[2]);\n+      emit_insn (gen_negsi2 (count, count));\n+      emit_insn (gen_ashlsi3_d (operands[0], operands[1], count));\n+      DONE;\n+    }\n   if (! immediate_operand (operands[2], GET_MODE (operands[2])))\n     FAIL;\n }\")"}]}