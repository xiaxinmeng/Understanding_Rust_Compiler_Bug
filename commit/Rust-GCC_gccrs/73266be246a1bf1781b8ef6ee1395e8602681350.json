{"sha": "73266be246a1bf1781b8ef6ee1395e8602681350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyNjZiZTI0NmExYmYxNzgxYjhlZjZlZTEzOTVlODYwMjY4MTM1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-12T13:46:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T14:30:57Z"}, "message": "[Ada] AI12-0364 Add a modular atomic arithmetic package\n\n2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-aomoar.ads, libgnat/s-aomoar.adb: New files.\n\t* libgnat/s-atopar.ads: Move...\n\t* libgnat/s-aoinar.ads: Here.\n\t* libgnat/s-atopar.adb: Move...\n\t* libgnat/s-aoinar.adb: Here.\n\t* impunit.adb: Update list of runtime files.\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS=): Adjust.", "tree": {"sha": "138df5951fcbc9996d3aeca3c934511a25311b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138df5951fcbc9996d3aeca3c934511a25311b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73266be246a1bf1781b8ef6ee1395e8602681350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73266be246a1bf1781b8ef6ee1395e8602681350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73266be246a1bf1781b8ef6ee1395e8602681350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73266be246a1bf1781b8ef6ee1395e8602681350/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ff02b534195c12298c64311d03a8b2d2dc261f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ff02b534195c12298c64311d03a8b2d2dc261f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ff02b534195c12298c64311d03a8b2d2dc261f"}], "stats": {"total": 302, "additions": 294, "deletions": 8}, "files": [{"sha": "15b8b00db577e57634226543ee5c1b1f94ec3e3a", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -505,13 +505,14 @@ GNATRTL_NONTASKING_OBJS= \\\n   machcode$(objext) \\\n   s-addima$(objext) \\\n   s-addope$(objext) \\\n+  s-aoinar$(objext) \\\n+  s-aomoar$(objext) \\\n   s-aotase$(objext) \\\n   s-arit64$(objext) \\\n   s-assert$(objext) \\\n   s-atacco$(objext) \\\n   s-atocou$(objext) \\\n   s-atoope$(objext) \\\n-  s-atopar$(objext) \\\n   s-atopex$(objext) \\\n   s-atopri$(objext) \\\n   s-auxdec$(objext) \\"}, {"sha": "70733563fb18f2bbff5eab9febf0a0dcb63c7e72", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -624,9 +624,10 @@ package body Impunit is\n     (\"a-nubinu\", T),  -- Ada.Numerics.Big_Numbers\n     (\"a-nbnbin\", T),  -- Ada.Numerics.Big_Numbers.Big_Integers\n     (\"a-nbnbre\", T),  -- Ada.Numerics.Big_Numbers.Big_Reals\n+    (\"s-aoinar\", T),  -- System.Atomic_Operations.Integer_Arithmetic\n+    (\"s-aomoar\", T),  -- System.Atomic_Operations.Modular_Arithmetic\n     (\"s-aotase\", T),  -- System.Atomic_Operations.Test_And_Set\n     (\"s-atoope\", T),  -- System.Atomic_Operations\n-    (\"s-atopar\", T),  -- System.Atomic_Operations.Arithmetic\n     (\"s-atopex\", T),  -- System.Atomic_Operations.Exchange\n     (\"a-stteou\", T),  -- Ada.Strings.Text_Output\n     (\"a-stouut\", T),  -- Ada.Strings.Text_Output.Utils"}, {"sha": "4cc6aa70314a72f4a00fc42be46371526cd87aac", "filename": "gcc/ada/libgnat/s-aoinar.adb", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                   System.Atomic_Operations.Arithmetic                    --\n+--               System.Atomic_Operations.Integer_Arithmetic                --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n@@ -32,7 +32,7 @@\n with System.Atomic_Primitives; use System.Atomic_Primitives;\n with Interfaces.C;\n \n-package body System.Atomic_Operations.Arithmetic is\n+package body System.Atomic_Operations.Integer_Arithmetic is\n \n    ----------------\n    -- Atomic_Add --\n@@ -145,4 +145,4 @@ package body System.Atomic_Operations.Arithmetic is\n       return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8));\n    end Is_Lock_Free;\n \n-end System.Atomic_Operations.Arithmetic;\n+end System.Atomic_Operations.Integer_Arithmetic;", "previous_filename": "gcc/ada/libgnat/s-atopar.adb"}, {"sha": "e76e7f116c5d0036269a56aca2691739623881bb", "filename": "gcc/ada/libgnat/s-aoinar.ads", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aoinar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aoinar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aoinar.ads?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                   System.Atomic_Operations.Arithmetic                    --\n+--               System.Atomic_Operations.Integer_Arithmetic                --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -37,7 +37,7 @@ pragma Ada_2020;\n \n generic\n    type Atomic_Type is range <> with Atomic;\n-package System.Atomic_Operations.Arithmetic\n+package System.Atomic_Operations.Integer_Arithmetic\n   with Pure\n --  Nonblocking\n is\n@@ -66,4 +66,4 @@ private\n    pragma Inline_Always (Atomic_Fetch_And_Add);\n    pragma Inline_Always (Atomic_Fetch_And_Subtract);\n    pragma Inline_Always (Is_Lock_Free);\n-end System.Atomic_Operations.Arithmetic;\n+end System.Atomic_Operations.Integer_Arithmetic;", "previous_filename": "gcc/ada/libgnat/s-atopar.ads"}, {"sha": "9f350c14634f25423b05b71a735bb1e98655b8d2", "filename": "gcc/ada/libgnat/s-aomoar.adb", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -0,0 +1,215 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               System.Atomic_Operations.Modular_Arithmetic                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019-2020, Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Atomic_Primitives; use System.Atomic_Primitives;\n+with System.Atomic_Operations.Exchange;\n+with Interfaces.C; use Interfaces;\n+\n+package body System.Atomic_Operations.Modular_Arithmetic is\n+\n+   package Exchange is new System.Atomic_Operations.Exchange (Atomic_Type);\n+\n+   ----------------\n+   -- Atomic_Add --\n+   ----------------\n+\n+   procedure Atomic_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type)\n+   is\n+      Ignore : constant Atomic_Type := Atomic_Fetch_And_Add (Item, Value);\n+   begin\n+      null;\n+   end Atomic_Add;\n+\n+   ---------------------\n+   -- Atomic_Subtract --\n+   ---------------------\n+\n+   procedure Atomic_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type)\n+   is\n+      Ignore : constant Atomic_Type := Atomic_Fetch_And_Subtract (Item, Value);\n+   begin\n+      null;\n+   end Atomic_Subtract;\n+\n+   --------------------------\n+   -- Atomic_Fetch_And_Add --\n+   --------------------------\n+\n+   function Atomic_Fetch_And_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Fetch_Add_1\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_1, \"__atomic_fetch_add_1\");\n+      function Atomic_Fetch_Add_2\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_2, \"__atomic_fetch_add_2\");\n+      function Atomic_Fetch_Add_4\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_4, \"__atomic_fetch_add_4\");\n+      function Atomic_Fetch_Add_8\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_8, \"__atomic_fetch_add_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      --  Use the direct intrinsics when possible, and fallback to\n+      --  compare-and-exchange otherwise.\n+      --  Also suppress spurious warnings.\n+\n+      pragma Warnings (Off);\n+      if Atomic_Type'Base'Last = Atomic_Type'Last\n+        and then Atomic_Type'First = 0\n+        and then Atomic_Type'Last\n+                  in 2 ** 8 - 1 | 2 ** 16 - 1 | 2 ** 32 - 1 | 2 ** 64 - 1\n+      then\n+         pragma Warnings (On);\n+         case Unsigned_64 (Atomic_Type'Last) is\n+            when 2 ** 8 - 1  =>\n+               return Atomic_Fetch_Add_1 (Item'Address, Value);\n+            when 2 ** 16 - 1 =>\n+               return Atomic_Fetch_Add_2 (Item'Address, Value);\n+            when 2 ** 32 - 1 =>\n+               return Atomic_Fetch_Add_4 (Item'Address, Value);\n+            when 2 ** 64 - 1 =>\n+               return Atomic_Fetch_Add_8 (Item'Address, Value);\n+            when others      =>\n+               raise Program_Error;\n+         end case;\n+      else\n+         declare\n+            Old_Value : aliased Atomic_Type := Item;\n+            New_Value : Atomic_Type := Old_Value + Value;\n+         begin\n+            --  Keep iterating until the exchange succeeds\n+\n+            while not Exchange.Atomic_Compare_And_Exchange\n+                        (Item, Old_Value, New_Value)\n+            loop\n+               New_Value := Old_Value + Value;\n+            end loop;\n+\n+            return Old_Value;\n+         end;\n+      end if;\n+   end Atomic_Fetch_And_Add;\n+\n+   -------------------------------\n+   -- Atomic_Fetch_And_Subtract --\n+   -------------------------------\n+\n+   function Atomic_Fetch_And_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Fetch_Sub_1\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_1, \"__atomic_fetch_sub_1\");\n+      function Atomic_Fetch_Sub_2\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_2, \"__atomic_fetch_sub_2\");\n+      function Atomic_Fetch_Sub_4\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_4, \"__atomic_fetch_sub_4\");\n+      function Atomic_Fetch_Sub_8\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_8, \"__atomic_fetch_sub_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      --  Use the direct intrinsics when possible, and fallback to\n+      --  compare-and-exchange otherwise.\n+      --  Also suppress spurious warnings.\n+\n+      pragma Warnings (Off);\n+      if Atomic_Type'Base'Last = Atomic_Type'Last\n+        and then Atomic_Type'First = 0\n+        and then Atomic_Type'Last\n+                  in 2 ** 8 - 1 | 2 ** 16 - 1 | 2 ** 32 - 1 | 2 ** 64 - 1\n+      then\n+         pragma Warnings (On);\n+         case Unsigned_64 (Atomic_Type'Last) is\n+            when 2 ** 8 - 1  =>\n+               return Atomic_Fetch_Sub_1 (Item'Address, Value);\n+            when 2 ** 16 - 1 =>\n+               return Atomic_Fetch_Sub_2 (Item'Address, Value);\n+            when 2 ** 32 - 1 =>\n+               return Atomic_Fetch_Sub_4 (Item'Address, Value);\n+            when 2 ** 64 - 1 =>\n+               return Atomic_Fetch_Sub_8 (Item'Address, Value);\n+            when others      =>\n+               raise Program_Error;\n+         end case;\n+      else\n+         declare\n+            Old_Value : aliased Atomic_Type := Item;\n+            New_Value : Atomic_Type := Old_Value - Value;\n+         begin\n+            --  Keep iterating until the exchange succeeds\n+\n+            while not Exchange.Atomic_Compare_And_Exchange\n+                        (Item, Old_Value, New_Value)\n+            loop\n+               New_Value := Old_Value - Value;\n+            end loop;\n+\n+            return Old_Value;\n+         end;\n+      end if;\n+   end Atomic_Fetch_And_Subtract;\n+\n+   ------------------\n+   -- Is_Lock_Free --\n+   ------------------\n+\n+   function Is_Lock_Free (Item : aliased Atomic_Type) return Boolean is\n+      pragma Unreferenced (Item);\n+      use type Interfaces.C.size_t;\n+   begin\n+      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8));\n+   end Is_Lock_Free;\n+\n+end System.Atomic_Operations.Modular_Arithmetic;"}, {"sha": "c41dc617e5e6ff32fe5cd16a1b60ffdf45c9fbef", "filename": "gcc/ada/libgnat/s-aomoar.ads", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aomoar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73266be246a1bf1781b8ef6ee1395e8602681350/gcc%2Fada%2Flibgnat%2Fs-aomoar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aomoar.ads?ref=73266be246a1bf1781b8ef6ee1395e8602681350", "patch": "@@ -0,0 +1,69 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               System.Atomic_Operations.Modular_Arithmetic                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019-2020, Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+\n+generic\n+   type Atomic_Type is mod <> with Atomic;\n+package System.Atomic_Operations.Modular_Arithmetic\n+  with Pure\n+--  Nonblocking\n+is\n+   procedure Atomic_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) with Convention => Intrinsic;\n+\n+   procedure Atomic_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) with Convention => Intrinsic;\n+\n+   function Atomic_Fetch_And_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type with Convention => Intrinsic;\n+\n+   function Atomic_Fetch_And_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type with Convention => Intrinsic;\n+\n+   function Is_Lock_Free\n+     (Item : aliased Atomic_Type) return Boolean with Convention => Intrinsic;\n+\n+private\n+   pragma Inline_Always (Atomic_Add);\n+   pragma Inline_Always (Atomic_Subtract);\n+   pragma Inline_Always (Atomic_Fetch_And_Add);\n+   pragma Inline_Always (Atomic_Fetch_And_Subtract);\n+   pragma Inline_Always (Is_Lock_Free);\n+end System.Atomic_Operations.Modular_Arithmetic;"}]}