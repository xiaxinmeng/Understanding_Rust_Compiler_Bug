{"sha": "f79fe06f4d803a294ec182cc61972c7d706ede70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5ZmUwNmY0ZDgwM2EyOTRlYzE4MmNjNjE5NzJjN2Q3MDZlZGU3MA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-10T12:15:42Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-10T12:15:42Z"}, "message": "i386-protos.h (ix86_expand_sse_movcc): New.\n\ngcc/\n\n2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n\n\t* config/i386/i386-protos.h (ix86_expand_sse_movcc): New.\n\t* config/i386/i386.c (ix86_expand_sse_movcc): Make public.\n\tCast mask to FP mode if required.\n\t* config/i386/sse.md (vcond_mask_<mode><avx512fmaskmodelower>): New.\n\t(vcond_mask_<mode><avx512fmaskmodelower>): New.\n\t(vcond_mask_<mode><sseintvecmodelower>): New.\n\t(vcond_mask_<mode><sseintvecmodelower>): New.\n\t(vcond_mask_v2div2di): New.\n\t(vcond_mask_<mode><sseintvecmodelower>): New.\n\t(vcond_mask_<mode><sseintvecmodelower>): New.\n\nFrom-SVN: r230102", "tree": {"sha": "790805b341f492d1be16eccaaaf95665c08d61e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/790805b341f492d1be16eccaaaf95665c08d61e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f79fe06f4d803a294ec182cc61972c7d706ede70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79fe06f4d803a294ec182cc61972c7d706ede70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79fe06f4d803a294ec182cc61972c7d706ede70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79fe06f4d803a294ec182cc61972c7d706ede70/comments", "author": null, "committer": null, "parents": [{"sha": "a414c77f2a30bb297df5a694d5a5a9d5bb864ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a414c77f2a30bb297df5a694d5a5a9d5bb864ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a414c77f2a30bb297df5a694d5a5a9d5bb864ff0"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "ade9a3b5832cd19cdd948d8e580ed1b7098c6906", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f79fe06f4d803a294ec182cc61972c7d706ede70", "patch": "@@ -1,3 +1,16 @@\n+2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_sse_movcc): New.\n+\t* config/i386/i386.c (ix86_expand_sse_movcc): Make public.\n+\tCast mask to FP mode if required.\n+\t* config/i386/sse.md (vcond_mask_<mode><avx512fmaskmodelower>): New.\n+\t(vcond_mask_<mode><avx512fmaskmodelower>): New.\n+\t(vcond_mask_<mode><sseintvecmodelower>): New.\n+\t(vcond_mask_<mode><sseintvecmodelower>): New.\n+\t(vcond_mask_v2div2di): New.\n+\t(vcond_mask_<mode><sseintvecmodelower>): New.\n+\t(vcond_mask_<mode><sseintvecmodelower>): New.\n+\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* optabs-query.h (get_vcond_mask_icode): New."}, {"sha": "bd084dc9714204b7749d443dd5c125a77dc4bea0", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f79fe06f4d803a294ec182cc61972c7d706ede70", "patch": "@@ -132,6 +132,7 @@ extern bool ix86_expand_vec_perm_const (rtx[]);\n extern bool ix86_expand_mask_vec_cmp (rtx[]);\n extern bool ix86_expand_int_vec_cmp (rtx[]);\n extern bool ix86_expand_fp_vec_cmp (rtx[]);\n+extern void ix86_expand_sse_movcc (rtx, rtx, rtx, rtx);\n extern void ix86_expand_sse_unpack (rtx, rtx, bool, bool);\n extern bool ix86_expand_int_addcc (rtx[]);\n extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);"}, {"sha": "b84a11d433feb01010e72f5d23d146358ecaf077", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f79fe06f4d803a294ec182cc61972c7d706ede70", "patch": "@@ -22633,7 +22633,7 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n /* Expand DEST = CMP ? OP_TRUE : OP_FALSE into a sequence of logical\n    operations.  This is used for both scalar and vector conditional moves.  */\n \n-static void\n+void\n ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n {\n   machine_mode mode = GET_MODE (dest);"}, {"sha": "452629fa0ca7cab5c78a32454adc4398549c5d4e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79fe06f4d803a294ec182cc61972c7d706ede70/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f79fe06f4d803a294ec182cc61972c7d706ede70", "patch": "@@ -3015,6 +3015,87 @@\n   DONE;\n })\n \n+(define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:V48_AVX512VL\n+\t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:V48_AVX512VL 2 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n+  \"TARGET_AVX512BW\")\n+\n+(define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VI_256 0 \"register_operand\")\n+\t(vec_merge:VI_256\n+\t  (match_operand:VI_256 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI_256 2 \"vector_move_operand\")\n+\t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n+  \"TARGET_AVX2\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VI124_128 0 \"register_operand\")\n+\t(vec_merge:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI124_128 2 \"vector_move_operand\")\n+\t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"vcond_mask_v2div2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(vec_merge:V2DI\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V2DI 2 \"vector_move_operand\")\n+\t  (match_operand:V2DI 3 \"register_operand\")))]\n+  \"TARGET_SSE4_2\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VF_256 0 \"register_operand\")\n+\t(vec_merge:VF_256\n+\t  (match_operand:VF_256 1 \"nonimmediate_operand\")\n+\t  (match_operand:VF_256 2 \"vector_move_operand\")\n+\t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n+  \"TARGET_AVX\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (match_operand:VF_128 1 \"nonimmediate_operand\")\n+\t  (match_operand:VF_128 2 \"vector_move_operand\")\n+\t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n+  \"TARGET_SSE\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel floating point logical operations"}]}