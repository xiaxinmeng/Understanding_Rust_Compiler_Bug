{"sha": "9c650d90abf690ca3d66ece71c69778c0eec05b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2NTBkOTBhYmY2OTBjYTNkNjZlY2U3MWM2OTc3OGMwZWVjMDViNw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-20T22:12:52Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-20T22:12:52Z"}, "message": "re PR c++/13358 (long long and C++ do not mix well)\n\n2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/13358\n\t* doc/invoke.texi (-Wlong-long): Update description.\n\t* c-lex (interpret_integer): Only warn if there was no previous\n\toverflow and -Wlong-long is enabled.\n\t* c-decl.c (declspecs_add_type): Drop redundant flags.\n\t* c.opt (Wlong-long): Init to -1.\n\t* c-opts.c (sanitize_cpp_opts): Synchronize cpp's warn_long_long\n\tand front-end warn_long_long. Wlong-long only depends on other\n\tflags if it is uninitialized.\n\t* c-parser.c (disable_extension_diagnostics): warn_long_long is\n\tthe same for CPP and FE.\n\t(restore_extension_diagnostics): Likewise.\nlibcpp/\n\t* init.c (cpp_create_reader): Wlong_long is disabled by default.\n\t* expr.c (cpp_classify_number): Give different messages for C and\n\tC++ front-ends.\ncp/\n\t* parser.c (cp_parser_check_decl_spec): Drop redundant flags.\n\t* error.c (pedwarn_cxx98): New.\n\t* cp-tree.h (pedwarn_cxx98): Declare.\ntestsuite/\n\t* gcc.dg/wtr-int-type-1.c: Use two dg-warning to match two\n\tmessages. Test for \"long long\" in system headers.\n\t* gcc.dg/c99-longlong-2.c: New.\n\t* g++.dg/warn/pr13358.C: New.\n\t* g++.dg/warn/pr13358-2.C: New.\n\t* g++.dg/warn/pr13358-3.C: New.\n\t* g++.dg/warn/pr13358-4.C: New.\n\nFrom-SVN: r146459", "tree": {"sha": "fd9591c53025bec4c451b0619535e1e5e33a2a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9591c53025bec4c451b0619535e1e5e33a2a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c650d90abf690ca3d66ece71c69778c0eec05b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c650d90abf690ca3d66ece71c69778c0eec05b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c650d90abf690ca3d66ece71c69778c0eec05b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c650d90abf690ca3d66ece71c69778c0eec05b7/comments", "author": null, "committer": null, "parents": [{"sha": "37041295f5ded2ee556e2b98f28402b6f35d1459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37041295f5ded2ee556e2b98f28402b6f35d1459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37041295f5ded2ee556e2b98f28402b6f35d1459"}], "stats": {"total": 253, "additions": 213, "deletions": 40}, "files": [{"sha": "a6095063b12f64a2ff8c741ae6ad60441fa3a967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -1,3 +1,18 @@\n+2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/13358\n+\t* doc/invoke.texi (-Wlong-long): Update description.\n+\t* c-lex (interpret_integer): Only warn if there was no previous\n+\toverflow and -Wlong-long is enabled.\n+\t* c-decl.c (declspecs_add_type): Drop redundant flags.\n+\t* c.opt (Wlong-long): Init to -1.\n+\t* c-opts.c (sanitize_cpp_opts): Synchronize cpp's warn_long_long\n+\tand front-end warn_long_long. Wlong-long only depends on other\n+\tflags if it is uninitialized.\n+\t* c-parser.c (disable_extension_diagnostics): warn_long_long is\n+\tthe same for CPP and FE.\n+\t(restore_extension_diagnostics): Likewise.\n+\n 2009-04-20  Ian Lance Taylor  <iant@google.com>\n \n \tFix enum conversions which are invalid in C++:"}, {"sha": "7efb82611d0292b2e2cf5e69a0c2b1c46f9b70a6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -7309,8 +7309,8 @@ declspecs_add_type (struct c_declspecs *specs, struct c_typespec spec)\n \t\t\t     \"declaration specifiers\");\n \t\t      break;\n \t\t    }\n-\t\t  if (pedantic && !flag_isoc99 && !in_system_header)\n-\t\t    pedwarn (input_location, OPT_Wlong_long, \"ISO C90 does not support %<long long%>\");\n+\t\t  pedwarn_c90 (input_location, OPT_Wlong_long, \n+\t\t\t       \"ISO C90 does not support %<long long%>\");\n \t\t  specs->long_long_p = 1;\n \t\t  break;\n \t\t}"}, {"sha": "df6354843bf38a57d7b009382bb0bb46caafa600", "filename": "gcc/c-lex.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -582,13 +582,18 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n \t    ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n   else\n-    type = integer_types[itk];\n-\n-  if (itk > itk_unsigned_long\n-      && (flags & CPP_N_WIDTH) != CPP_N_LARGE\n-      && !in_system_header && !flag_isoc99)\n-    pedwarn (input_location, 0, \"integer constant is too large for %qs type\",\n-\t     (flags & CPP_N_UNSIGNED) ? \"unsigned long\" : \"long\");\n+    {\n+      type = integer_types[itk];\n+      if (itk > itk_unsigned_long\n+\t  && (flags & CPP_N_WIDTH) != CPP_N_LARGE)\n+\temit_diagnostic \n+\t  ((c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99)\n+\t   ? DK_PEDWARN : DK_WARNING,\n+\t   input_location, OPT_Wlong_long,\n+\t   (flags & CPP_N_UNSIGNED) \n+\t   ? \"integer constant is too large for %<unsigned long%> type\"\n+\t   : \"integer constant is too large for %<long%> type\");\n+    }\n \n   value = build_int_cst_wide (type, integer.low, integer.high);\n "}, {"sha": "4dffc78f14d5abd8cdb90c24aac53a639b2adf82", "filename": "gcc/c-opts.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -1433,14 +1433,15 @@ sanitize_cpp_opts (void)\n   cpp_opts->unsigned_char = !flag_signed_char;\n   cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n \n-  /* We want -Wno-long-long to override -pedantic -std=non-c99\n-     and/or -Wtraditional, whatever the ordering.  */\n-  cpp_opts->warn_long_long\n-    = warn_long_long && ((pedantic\n-\t\t\t  && (c_dialect_cxx ()\n-\t\t\t      ? cxx_dialect == cxx98\n-\t\t\t      : !flag_isoc99))\n-                         || warn_traditional);\n+  /* Wlong-long is disabled by default. It is enabled by:\n+      [-pedantic | -Wtraditional] -std=[gnu|c]++98 ; or\n+      [-pedantic | -Wtraditional] -std=non-c99 . \n+\n+      Either -Wlong-long or -Wno-long-long override any other settings.  */\n+  if (warn_long_long == -1)\n+    warn_long_long = ((pedantic || warn_traditional)\n+\t\t      && (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n+  cpp_opts->warn_long_long = warn_long_long;\n \n   /* Similarly with -Wno-variadic-macros.  No check for c99 here, since\n      this also turns off warnings about GCCs extension.  */"}, {"sha": "ca51d95eed50ea5c8dd1a3821e216d70d8bad25b", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -818,14 +818,12 @@ disable_extension_diagnostics (void)\n \t     | (warn_pointer_arith << 1)\n \t     | (warn_traditional << 2)\n \t     | (flag_iso << 3)\n-\t     | (warn_long_long << 4)\n-\t     | (cpp_opts->warn_long_long << 5));\n+\t     | (warn_long_long << 4));\n   cpp_opts->pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n   cpp_opts->warn_traditional = warn_traditional = 0;\n   flag_iso = 0;\n-  warn_long_long = 0;\n-  cpp_opts->warn_long_long = 0;\n+  cpp_opts->warn_long_long = warn_long_long = 0;\n   return ret;\n }\n \n@@ -839,8 +837,7 @@ restore_extension_diagnostics (int flags)\n   warn_pointer_arith = (flags >> 1) & 1;\n   cpp_opts->warn_traditional = warn_traditional = (flags >> 2) & 1;\n   flag_iso = (flags >> 3) & 1;\n-  warn_long_long = (flags >> 4) & 1;\n-  cpp_opts->warn_long_long = (flags >> 5) & 1;\n+  cpp_opts->warn_long_long = warn_long_long = (flags >> 4) & 1;\n }\n \n /* Possibly kinds of declarator to parse.  */"}, {"sha": "7f71699faa7351c6a781e2673e983e7a7086f36d", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -289,7 +289,7 @@ C ObjC C++ ObjC++ Var(warn_logical_op) Init(-1) Warning\n Warn when a logical operator is suspiciously always evaluating to true or false\n \n Wlong-long\n-C ObjC C++ ObjC++ Var(warn_long_long) Init(1) Warning\n+C ObjC C++ ObjC++ Var(warn_long_long) Init(-1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain"}, {"sha": "df0a91a7f2b0ccaa1e31161b4ca94896abd7b699", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/13358\n+\t* parser.c (cp_parser_check_decl_spec): Drop redundant flags.\n+\t* error.c (pedwarn_cxx98): New.\n+\t* cp-tree.h (pedwarn_cxx98): Declare.\n+\n 2009-04-20  Le-Chun Wu  <lcwu@google.com>\n \n \tPR c++/39803"}, {"sha": "c80037d3419296490947467c2743b4e136c5b9be", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -4462,6 +4462,7 @@ extern const char *class_key_or_enum_as_string\t(tree);\n extern void print_instantiation_context\t\t(void);\n extern void maybe_warn_variadic_templates       (void);\n extern void maybe_warn_cpp0x\t\t\t(const char *);\n+extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_CXXDIAG(3,4);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);"}, {"sha": "4e7e9ec30c7884df7b84301600a6f568e3b7fbf3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -2804,3 +2804,22 @@ maybe_warn_variadic_templates (void)\n {\n   maybe_warn_cpp0x (\"variadic templates\");\n }\n+\n+\n+/* Issue an ISO C++98 pedantic warning at LOCATION, conditional on\n+   option OPT with text GMSGID.  Use this function to report\n+   diagnostics for constructs that are invalid C++98, but valid\n+   C++0x.  */\n+bool\n+pedwarn_cxx98 (location_t location, int opt, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+\t\t       (cxx_dialect == cxx98) ? DK_PEDWARN : DK_WARNING);\n+  diagnostic.option_index = opt;\n+  va_end (ap);\n+  return report_diagnostic (&diagnostic);\n+}"}, {"sha": "b6b8bf598334d6da3727b9861b1564bdd6ae2e60", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -2167,10 +2167,9 @@ cp_parser_check_decl_spec (cp_decl_specifier_seq *decl_specs,\n \t{\n \t  if (count > 2)\n \t    error (\"%H%<long long long%> is too long for GCC\", &location);\n-\t  else if (pedantic && !in_system_header && warn_long_long\n-                   && cxx_dialect == cxx98)\n-\t    pedwarn (location, OPT_Wlong_long, \n-\t\t     \"ISO C++ 1998 does not support %<long long%>\");\n+\t  else \n+\t    pedwarn_cxx98 (location, OPT_Wlong_long, \n+\t\t\t   \"ISO C++ 1998 does not support %<long long%>\");\n \t}\n       else if (count > 1)\n \t{"}, {"sha": "05f02edfd1dbbca8d6ddc85e8e48e1d4c9a7f7c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -4147,10 +4147,9 @@ the search path but can't be used.\n @item -Wlong-long\n @opindex Wlong-long\n @opindex Wno-long-long\n-Warn if @samp{long long} type is used.  This is default.  To inhibit\n-the warning messages, use @option{-Wno-long-long}.  Flags\n-@option{-Wlong-long} and @option{-Wno-long-long} are taken into account\n-only when @option{-pedantic} flag is used.\n+Warn if @samp{long long} type is used.  This is enabled by either\n+@option{-pedantic} or @option{-Wtraditional} in ISO C90 and C++98\n+modes.  To inhibit the warning messages, use @option{-Wno-long-long}.\n \n @item -Wvariadic-macros\n @opindex Wvariadic-macros"}, {"sha": "1b0914c27fd3a35b0a9c2e6b9d586596bd188165", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -1,3 +1,14 @@\n+2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/13358\n+\t* gcc.dg/wtr-int-type-1.c: Use two dg-warning to match two\n+\tmessages. Test for \"long long\" in system headers.\n+\t* gcc.dg/c99-longlong-2.c: New.\n+\t* g++.dg/warn/pr13358.C: New.\n+\t* g++.dg/warn/pr13358-2.C: New.\n+\t* g++.dg/warn/pr13358-3.C: New.\n+\t* g++.dg/warn/pr13358-4.C: New.\n+\n 2009-04-20  Andrew Pinski <andrew_pinski@playstation.sony.com>\n \n \t* gcc.dg/framework-2.c: Fix up for non existent includes"}, {"sha": "f547f19fa4f61ea56c227d31ee6ebfd78b26b406", "filename": "gcc/testsuite/g++.dg/warn/pr13358-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/13358: g++ should accept a long long constant sans LL suffix\n+// if -Wno-long-long is in use.\n+// { dg-do compile }\n+// { dg-require-effective-target int32plus }\n+// { dg-options \"-std=c++98 -pedantic-errors\" }\n+\n+\n+void use_longlong ()\n+{\n+  unsigned long long x1, x2, x3; // { dg-error \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n+  // make sure we error with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x2 = 1956772631100509574; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x3 = 0154476645345674746606; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+}\n+\n+void use_longlong2 ()\n+{\n+  unsigned long long x1, x2, x3; // { dg-error \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n+  // make sure we error with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86LL; // { dg-error \"long long\" }\n+  x2 = 1956772631100509574LL; // { dg-error \"long long\" }\n+  x3 = 0154476645345674746606LL; // { dg-error \"long long\" }\n+}"}, {"sha": "f23e7d97e3622dac65bab6eae4ffa78654f3dd88", "filename": "gcc/testsuite/g++.dg/warn/pr13358-3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-3.C?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/13358: g++ should accept a long long constant sans LL suffix\n+// if -Wno-long-long is in use\n+// { dg-do compile }\n+// { dg-require-effective-target int32plus } \n+// { dg-options \"-std=c++0x -pedantic-errors\" }\n+\n+\n+void use_longlong ()\n+{\n+  unsigned long long x1, x2, x3; \n+  // make sure it's ok with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86;\n+  x2 = 1956772631100509574;\n+  x3 = 0154476645345674746606;\n+}\n+\n+void use_longlong2 ()\n+{\n+  unsigned long long x1, x2, x3; \n+  // make sure it's ok with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86LL;\n+  x2 = 1956772631100509574LL;\n+  x3 = 0154476645345674746606LL;\n+}"}, {"sha": "b652bb49c0b59badc02379caa6ebc58fedca90f8", "filename": "gcc/testsuite/g++.dg/warn/pr13358-4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/13358: g++ should accept a long long constant sans LL suffix\n+// if -Wno-long-long is in use.\n+// { dg-do compile }\n+// { dg-require-effective-target int32plus } \n+// { dg-options \"-std=c++0x -pedantic-errors -Wlong-long\" }\n+\n+\n+void use_longlong ()\n+{\n+  unsigned long long x1, x2, x3; // { dg-warning \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n+  // make sure we warn with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x2 = 1956772631100509574; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x3 = 0154476645345674746606; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+}\n+\n+void use_longlong2 ()\n+{\n+  unsigned long long x1, x2, x3; // { dg-warning \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n+  // make sure we warn with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86LL; // { dg-warning \"long long\" }\n+  x2 = 1956772631100509574LL; // { dg-warning \"long long\" }\n+  x3 = 0154476645345674746606LL; // { dg-warning \"long long\" }\n+}"}, {"sha": "257616d2f296be584aa8a45bce00ef61b612d3c4", "filename": "gcc/testsuite/g++.dg/warn/pr13358.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358.C?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/13358: g++ should accept a long long constant sans LL suffix\n+// if -Wno-long-long is in use.\n+// { dg-do compile }\n+// { dg-require-effective-target int32plus } \n+// { dg-options \"-std=c++98 -Wno-long-long -pedantic-errors\" }\n+\n+\n+void use_longlong ()\n+{\n+  unsigned long long x1, x2, x3; \n+  // make sure it's ok with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86;\n+  x2 = 1956772631100509574;\n+  x3 = 0154476645345674746606;\n+}\n+\n+void use_longlong2 ()\n+{\n+  unsigned long long x1, x2, x3; \n+  // make sure it's ok with hex, decimal and octal\n+  x1 = 0x1b27da572ef3cd86LL;\n+  x2 = 1956772631100509574LL;\n+  x3 = 0154476645345674746606LL;\n+}"}, {"sha": "3594d4be99755b4a3e0f404627f8f8e2dddcd893", "filename": "gcc/testsuite/gcc.dg/c90-longlong-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -3,5 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n-long long foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"long long\" \"long long not in C90\" { target *-*-* } 6 } */\n+long long foo; /* { dg-error \"long long\" \"long long not in C90\" } */"}, {"sha": "fc6c8a5efd0d2348704d03fc1bfd6389f1cbccd6", "filename": "gcc/testsuite/gcc.dg/c99-longlong-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-2.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -0,0 +1,6 @@\n+/* Test for long long: if explicit Wlong-long, in C99 only warn, not\n+   pedwarn.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -Wlong-long\" } */\n+\n+long long foo; /* { dg-warning \"long long\" } */"}, {"sha": "c0abb44055eb0341b386cf7d136f63abff3a911f", "filename": "gcc/testsuite/gcc.dg/wtr-int-type-1.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -25,9 +25,17 @@ testfunc ()\n \n   /* But this one should, since it doesn't fit in long (long), but\n      does fit in unsigned long (long).  */\n-  i = 18446744073709551615; /* { dg-warning \"decimal constant|unsigned\" \"decimal constant\" } */\n-  \n+  i = 18446744073709551615; /* { dg-warning \"integer constant is so large that it is unsigned\" \"decimal constant\" } */\n+  /* { dg-warning \"this decimal constant would be unsigned in ISO C90\" \"decimal constant\" { target *-*-* } 28 } */\n+\n # 29 \"sys-header.h\" 3\n+}\n+\n+void\n+testfunc2( ) \n+{ \n+  long long i;\n+\n /* We are in system headers now, no -Wtraditional warnings should issue.  */\n \n   i = 0x80000000;\n@@ -41,3 +49,4 @@ testfunc ()\n   i = 9223372036854775807;\n   i = 18446744073709551615;\n }\n+"}, {"sha": "7fdc737239f052e292edab575e1ea4b7a8f931be", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/13358\n+\t* init.c (cpp_create_reader): Wlong_long is disabled by default.\n+\t* expr.c (cpp_classify_number): Give different messages for C and\n+\tC++ front-ends.\n+\n 2009-04-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/20078"}, {"sha": "b9a17db9361a10a225f5be0db2acc82a87da0292", "filename": "libcpp/expr.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -419,10 +419,12 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t}\n \n       if ((result & CPP_N_WIDTH) == CPP_N_LARGE\n-\t  && ! CPP_OPTION (pfile, c99)\n \t  && CPP_OPTION (pfile, warn_long_long))\n-\tcpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t   \"use of C99 long long integer constant\");\n+\tcpp_error (pfile, \n+\t\t   CPP_OPTION (pfile, c99) ? CPP_DL_WARNING : CPP_DL_PEDWARN,\n+\t\t   CPP_OPTION (pfile, cplusplus) \n+\t\t   ? \"use of C++0x long long integer constant\"\n+\t\t   : \"use of C99 long long integer constant\");\n \n       result |= CPP_N_INTEGER;\n     }"}, {"sha": "c21121707d38129d2f1c00bd9ba8a8ec52c83f6d", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c650d90abf690ca3d66ece71c69778c0eec05b7/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=9c650d90abf690ca3d66ece71c69778c0eec05b7", "patch": "@@ -160,7 +160,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   CPP_OPTION (pfile, warn_trigraphs) = 2;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n   CPP_OPTION (pfile, warn_deprecated) = 1;\n-  CPP_OPTION (pfile, warn_long_long) = !CPP_OPTION (pfile, c99);\n+  CPP_OPTION (pfile, warn_long_long) = 0;\n   CPP_OPTION (pfile, dollars_in_ident) = 1;\n   CPP_OPTION (pfile, warn_dollars) = 1;\n   CPP_OPTION (pfile, warn_variadic_macros) = 1;"}]}