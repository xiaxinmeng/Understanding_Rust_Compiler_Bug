{"sha": "6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "node_id": "C_kwDOANBUbNoAKDYzNTVkMDVhNjVjZThlMjUzZjgzZjJhN2IxN2M4MDQwNmEwYzFiZDU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-13T09:07:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T09:07:09Z"}, "message": "Merge #729\n\n729: Refactor TyTy with new TypeMutability enum r=philberty a=dafaust\n\nAdd `TyTy::TypeMutability` enum and start using it instead of `bool is_mut`.\r\nThis is just a start, the new enum could be used in many places. \r\n\r\nFixes: #677\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "fc56cab2ef771c2c4bba67e589c14d66f66d32ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc56cab2ef771c2c4bba67e589c14d66f66d32ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZqG9CRBK7hj4Ov3rIwAACv8IAKE66pLdvPpnTyqvhjpY+idT\noyZSF5anLH7WXoBsZTIENBv4AAVa80NiiyJVhYBfNQxY3YT2m4alf2h0DQsXN5Tq\nhubWamX33QPgeY7hgj60lEpzJjWWrcMavzG60XgsUNM3CmOJEgi0GoSsB3tUX9cr\nvfWLSHp5xkKvkendcBd7V8oa+x3X4KMVutKGRIma37AMqahVhg07YPXfo+NvWjbF\n6vDIp7IbU657RCDkXirPuldu8R7kYxPiHN3ufG1C4mOjeAqVFQU59TmHXS+4gQNF\ngsORu01Ic51TqwJ4vHPO7qdMn/75ITMVnP87dvbdpfYjEPt8ZoecDkW1v4BCtSA=\n=Z31x\n-----END PGP SIGNATURE-----\n", "payload": "tree fc56cab2ef771c2c4bba67e589c14d66f66d32ee\nparent 99c28309d3553346d4f0337dbae49f4a8e48da01\nparent a2c76651c9c7527d827a4f6f8b3be8fc654d24b7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634116029 +0000\ncommitter GitHub <noreply@github.com> 1634116029 +0000\n\nMerge #729\n\n729: Refactor TyTy with new TypeMutability enum r=philberty a=dafaust\n\nAdd `TyTy::TypeMutability` enum and start using it instead of `bool is_mut`.\r\nThis is just a start, the new enum could be used in many places. \r\n\r\nFixes: #677\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c28309d3553346d4f0337dbae49f4a8e48da01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c28309d3553346d4f0337dbae49f4a8e48da01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c28309d3553346d4f0337dbae49f4a8e48da01"}, {"sha": "a2c76651c9c7527d827a4f6f8b3be8fc654d24b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c76651c9c7527d827a4f6f8b3be8fc654d24b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c76651c9c7527d827a4f6f8b3be8fc654d24b7"}], "stats": {"total": 87, "additions": 51, "deletions": 36}, "files": [{"sha": "222622fcf66f408c43786fe34499ec529a6afe98", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -51,7 +51,7 @@ class MethodResolution\n \t// 2. try ref\n \tTyTy::ReferenceType *r1\n \t  = new TyTy::ReferenceType (r->get_ref (), TyTy::TyVar (r->get_ref ()),\n-\t\t\t\t     false);\n+\t\t\t\t     TyTy::TypeMutability::IMMUT);\n \tc = Try (candidates, r1);\n \tif (c != nullptr)\n \t  {\n@@ -63,7 +63,7 @@ class MethodResolution\n \t// 3. try mut ref\n \tTyTy::ReferenceType *r2\n \t  = new TyTy::ReferenceType (r->get_ref (), TyTy::TyVar (r->get_ref ()),\n-\t\t\t\t     true);\n+\t\t\t\t     TyTy::TypeMutability::MUT);\n \tc = Try (candidates, r2);\n \tif (c != nullptr)\n \t  {"}, {"sha": "ae1ac29cb2854acbb2087c10e27d283792dc98fe", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -602,9 +602,9 @@ class TypeCheckExpr : public TypeCheckBase\n \t  auto ok = context->lookup_builtin (\"str\", &base);\n \t  rust_assert (ok);\n \n-\t  infered\n-\t    = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       TyTy::TyVar (base->get_ref ()), false);\n+\t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t     TyTy::TyVar (base->get_ref ()),\n+\t\t\t\t\t     TyTy::TypeMutability::IMMUT);\n \t}\n \tbreak;\n \n@@ -649,9 +649,9 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t\t   TyTy::TyVar (u8->get_ref ()));\n \t  context->insert_type (array_mapping, array);\n \n-\t  infered\n-\t    = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       TyTy::TyVar (array->get_ref ()), false);\n+\t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t     TyTy::TyVar (array->get_ref ()),\n+\t\t\t\t\t     TyTy::TypeMutability::IMMUT);\n \t}\n \tbreak;\n \n@@ -1093,7 +1093,9 @@ class TypeCheckExpr : public TypeCheckBase\n \n     infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t       TyTy::TyVar (resolved_base->get_ref ()),\n-\t\t\t\t       expr.get_is_mut ());\n+\t\t\t\t       expr.get_is_mut ()\n+\t\t\t\t\t ? TyTy::TypeMutability::MUT\n+\t\t\t\t\t : TyTy::TypeMutability::IMMUT);\n   }\n \n   void visit (HIR::DereferenceExpr &expr) override"}, {"sha": "26e504d1f4205d10b9e853ebf3d2ed201715600b", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -240,13 +240,13 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      case HIR::SelfParam::IMM_REF:\n \t\tself_type = new TyTy::ReferenceType (\n \t\t  self_param.get_mappings ().get_hirid (),\n-\t\t  TyTy::TyVar (self->get_ref ()), false);\n+\t\t  TyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::IMMUT);\n \t\tbreak;\n \n \t      case HIR::SelfParam::MUT_REF:\n \t\tself_type = new TyTy::ReferenceType (\n \t\t  self_param.get_mappings ().get_hirid (),\n-\t\t  TyTy::TyVar (self->get_ref ()), true);\n+\t\t  TyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::MUT);\n \t\tbreak;\n \n \t      default:"}, {"sha": "f8c6e06d88d553f271a5269c51cad5c49c5e6e8e", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -129,7 +129,9 @@ class TypeCheckType : public TypeCheckBase\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n \t\t\t\t\t  TyTy::TyVar (base->get_ref ()),\n-\t\t\t\t\t  type.get_has_mut ());\n+\t\t\t\t\t  type.get_has_mut ()\n+\t\t\t\t\t    ? TyTy::TypeMutability::MUT\n+\t\t\t\t\t    : TyTy::TypeMutability::IMMUT);\n   }\n \n   void visit (HIR::RawPointerType &type) override\n@@ -138,7 +140,9 @@ class TypeCheckType : public TypeCheckBase\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated\n       = new TyTy::PointerType (type.get_mappings ().get_hirid (),\n-\t\t\t       TyTy::TyVar (base->get_ref ()), type.is_mut ());\n+\t\t\t       TyTy::TyVar (base->get_ref ()),\n+\t\t\t       type.is_mut () ? TyTy::TypeMutability::MUT\n+\t\t\t\t\t      : TyTy::TypeMutability::IMMUT);\n   }\n \n   void visit (HIR::InferredType &type) override"}, {"sha": "548b5c24b8158830bdb7aa6b688be6ee3b7a9133", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -548,13 +548,13 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n \t    case HIR::SelfParam::IMM_REF:\n \t      self_type = new TyTy::ReferenceType (\n \t\tself_param.get_mappings ().get_hirid (),\n-\t\tTyTy::TyVar (self->get_ref ()), false);\n+\t\tTyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::IMMUT);\n \t      break;\n \n \t    case HIR::SelfParam::MUT_REF:\n \t      self_type = new TyTy::ReferenceType (\n \t\tself_param.get_mappings ().get_hirid (),\n-\t\tTyTy::TyVar (self->get_ref ()), true);\n+\t\tTyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::MUT);\n \t      break;\n \n \t    default:"}, {"sha": "885368791f68013a2b166cf116cc06cabcce361c", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -1146,7 +1146,7 @@ class ReferenceCoercionRules : public BaseCoercionRules\n       {\n \tresolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t      TyVar (base_resolved->get_ref ()),\n-\t\t\t\t      base->is_mutable ());\n+\t\t\t\t      base->mutability ());\n \treturn;\n       }\n \n@@ -1188,7 +1188,7 @@ class PointerCoercionRules : public BaseCoercionRules\n       {\n \tresolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t    TyVar (base_resolved->get_ref ()),\n-\t\t\t\t    base->is_mutable ());\n+\t\t\t\t    base->mutability ());\n \treturn;\n       }\n \n@@ -1215,7 +1215,7 @@ class PointerCoercionRules : public BaseCoercionRules\n       {\n \tresolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t    TyVar (base_resolved->get_ref ()),\n-\t\t\t\t    base->is_mutable ());\n+\t\t\t\t    base->mutability ());\n \treturn;\n       }\n "}, {"sha": "b235ff08b3e53f525ae3d7897aa8d5aede21dcc6", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -1160,7 +1160,7 @@ class ReferenceRules : public BaseRules\n \n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t  TyVar (base_resolved->get_ref ()),\n-\t\t\t\t  base->is_mutable ());\n+\t\t\t\t  base->mutability ());\n   }\n \n private:\n@@ -1197,7 +1197,7 @@ class PointerRules : public BaseRules\n \n     resolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\tTyVar (base_resolved->get_ref ()),\n-\t\t\t\tbase->is_mutable ());\n+\t\t\t\tbase->mutability ());\n   }\n \n private:"}, {"sha": "481185fe9a31c85157311576f5c95e580da9b67f", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -1692,7 +1692,7 @@ ReferenceType::get_base () const\n BaseType *\n ReferenceType::clone () const\n {\n-  return new ReferenceType (get_ref (), get_ty_ref (), base, is_mutable (),\n+  return new ReferenceType (get_ref (), get_ty_ref (), base, mutability (),\n \t\t\t    get_combined_refs ());\n }\n \n@@ -1778,7 +1778,7 @@ PointerType::get_base () const\n BaseType *\n PointerType::clone () const\n {\n-  return new PointerType (get_ref (), get_ty_ref (), base, is_mutable (),\n+  return new PointerType (get_ref (), get_ty_ref (), base, mutability (),\n \t\t\t  get_combined_refs ());\n }\n "}, {"sha": "22b93fa63ec61800a0cbc588105a830e16a5788a", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6355d05a65ce8e253f83f2a7b17c80406a0c1bd5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=6355d05a65ce8e253f83f2a7b17c80406a0c1bd5", "patch": "@@ -35,6 +35,12 @@ class AssociatedImplTrait;\n \n namespace TyTy {\n \n+enum TypeMutability\n+{\n+  IMMUT,\n+  MUT\n+};\n+\n // https://rustc-dev-guide.rust-lang.org/type-inference.html#inference-variables\n // https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variants\n enum TypeKind\n@@ -1552,14 +1558,14 @@ class CharType : public BaseType\n class ReferenceType : public BaseType\n {\n public:\n-  ReferenceType (HirId ref, TyVar base, bool is_mut,\n+  ReferenceType (HirId ref, TyVar base, TypeMutability mut,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::REF, refs), base (base), is_mut (is_mut)\n+    : BaseType (ref, ref, TypeKind::REF, refs), base (base), mut (mut)\n   {}\n \n-  ReferenceType (HirId ref, HirId ty_ref, TyVar base, bool is_mut,\n+  ReferenceType (HirId ref, HirId ty_ref, TyVar base, TypeMutability mut,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::REF, refs), base (base), is_mut (is_mut)\n+    : BaseType (ref, ty_ref, TypeKind::REF, refs), base (base), mut (mut)\n   {}\n \n   BaseType *get_base () const;\n@@ -1587,25 +1593,26 @@ class ReferenceType : public BaseType\n \n   ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n-  bool is_mutable () const { return is_mut; }\n+  TypeMutability mutability () const { return mut; }\n+\n+  bool is_mutable () const { return mut == TypeMutability::MUT; }\n \n private:\n   TyVar base;\n-  bool is_mut;\n+  TypeMutability mut;\n };\n \n class PointerType : public BaseType\n {\n public:\n-  PointerType (HirId ref, TyVar base, bool is_mut,\n+  PointerType (HirId ref, TyVar base, TypeMutability mut,\n \t       std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::POINTER, refs), base (base), is_mut (is_mut)\n+    : BaseType (ref, ref, TypeKind::POINTER, refs), base (base), mut (mut)\n   {}\n \n-  PointerType (HirId ref, HirId ty_ref, TyVar base, bool is_mut,\n+  PointerType (HirId ref, HirId ty_ref, TyVar base, TypeMutability mut,\n \t       std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::POINTER, refs), base (base),\n-      is_mut (is_mut)\n+    : BaseType (ref, ty_ref, TypeKind::POINTER, refs), base (base), mut (mut)\n   {}\n \n   BaseType *get_base () const;\n@@ -1633,13 +1640,15 @@ class PointerType : public BaseType\n \n   PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n-  bool is_mutable () const { return is_mut; }\n+  TypeMutability mutability () const { return mut; }\n+\n+  bool is_mutable () const { return mut == TypeMutability::MUT; }\n \n-  bool is_const () const { return !is_mut; }\n+  bool is_const () const { return mut == TypeMutability::IMMUT; }\n \n private:\n   TyVar base;\n-  bool is_mut;\n+  TypeMutability mut;\n };\n \n class StrType : public BaseType"}]}