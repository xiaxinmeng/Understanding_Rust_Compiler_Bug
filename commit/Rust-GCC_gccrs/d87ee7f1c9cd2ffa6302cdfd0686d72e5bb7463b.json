{"sha": "d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg3ZWU3ZjFjOWNkMmZmYTYzMDJjZGZkMDY4NmQ3MmU1YmI3NDYzYg==", "commit": {"author": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2020-11-17T11:49:03Z"}, "committer": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2020-11-18T05:29:14Z"}, "message": "Clean up loop-closed PHIs after loop finalize\n\nThis patch propagates loop-closed PHIs them out at\nloop_optimizer_finalize.  For some cases, to clean up loop-closed PHIs\nwould save efforts of optimization passes after loopdone.\n\nThanks,\nJiufu Guo.\n\ngcc/ChangeLog:\n2020-10-18  Jiufu Guo   <guojiufu@linux.ibm.com>\n\n\t* cfgloop.h (loop_optimizer_finalize): Add flag argument.\n\t* loop-init.c (loop_optimizer_finalize): Call clean_up_loop_closed_phi.\n\t* tree-cfgcleanup.h (clean_up_loop_closed_phi): New declare.\n\t* tree-ssa-loop.c (tree_ssa_loop_done): Call loop_optimizer_finalize\n\twith flag argument.\n\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): New function.\n\ngcc/testsuite/ChangeLog:\n2020-10-18  Jiufu Guo   <guojiufu@linux.ibm.com>\n\n\t* gcc.dg/tree-ssa/loopclosedphi.c: New test.", "tree": {"sha": "c4f1dda5d267c73b2a7a7e1cceffc5b13bdbe7ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4f1dda5d267c73b2a7a7e1cceffc5b13bdbe7ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/comments", "author": null, "committer": null, "parents": [{"sha": "397654d66a4f84d4439e046cd330d9968af3b62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397654d66a4f84d4439e046cd330d9968af3b62b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397654d66a4f84d4439e046cd330d9968af3b62b"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "438b1f779bb1e78d274a18642bf3ec216000a1ba", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -824,7 +824,7 @@ extern void init_set_costs (void);\n \n /* Loop optimizer initialization.  */\n extern void loop_optimizer_init (unsigned);\n-extern void loop_optimizer_finalize (function *);\n+extern void loop_optimizer_finalize (function *, bool = false);\n inline void\n loop_optimizer_finalize ()\n {"}, {"sha": "ac87dafef6eeac3fa1d19991e5f6556739dd9566", "filename": "gcc/loop-init.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop-niter.h\"\n #include \"loop-unroll.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"tree-cfgcleanup.h\"\n \n \f\n /* Apply FLAGS to the loop state.  */\n@@ -133,13 +134,19 @@ loop_optimizer_init (unsigned flags)\n /* Finalize loop structures.  */\n \n void\n-loop_optimizer_finalize (struct function *fn)\n+loop_optimizer_finalize (struct function *fn, bool clean_loop_closed_phi)\n {\n   class loop *loop;\n   basic_block bb;\n \n   timevar_push (TV_LOOP_FINI);\n \n+  if (clean_loop_closed_phi && loops_state_satisfies_p (fn, LOOP_CLOSED_SSA))\n+    {\n+      clean_up_loop_closed_phi (fn);\n+      loops_state_clear (fn, LOOP_CLOSED_SSA);\n+    }\n+\n   if (loops_state_satisfies_p (fn, LOOPS_HAVE_RECORDED_EXITS))\n     release_recorded_exits (fn);\n "}, {"sha": "d71b757fbca59b478d1577da241077deadfc2c16", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loopclosedphi.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floopclosedphi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floopclosedphi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floopclosedphi.c?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-tree-ch -w -fdump-tree-loopdone-details\" } */\n+\n+void\n+t6 (int qz, int wh)\n+{\n+  int jl = wh;\n+\n+  while (1.0 * qz / wh < 1)\n+    {\n+      qz = wh * (wh + 2);\n+\n+      while (wh < 1)\n+        jl = 0;\n+    }\n+\n+  while (qz < 1)\n+    qz = jl * wh;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"loopdone\"} } */"}, {"sha": "9e368d63709eb878d392059f68efc7f9df3b797f", "filename": "gcc/tree-cfgcleanup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-cfgcleanup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-cfgcleanup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.h?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -26,5 +26,6 @@ extern bool cleanup_tree_cfg (unsigned = 0);\n extern bool fixup_noreturn_call (gimple *stmt);\n extern bool delete_unreachable_blocks_update_callgraph (cgraph_node *dst_node,\n \t\t\t\t\t\t\tbool update_clones);\n+extern unsigned clean_up_loop_closed_phi (function *);\n \n #endif /* GCC_TREE_CFGCLEANUP_H */"}, {"sha": "339a0c50bc8a3873b7cd6384c9c498de51a4f157", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -529,7 +529,7 @@ tree_ssa_loop_done (void)\n {\n   free_numbers_of_iterations_estimates (cfun);\n   scev_finalize ();\n-  loop_optimizer_finalize ();\n+  loop_optimizer_finalize (cfun, true);\n   return 0;\n }\n "}, {"sha": "354057b48bf3f960a3c0e9345639af911de6875a", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=d87ee7f1c9cd2ffa6302cdfd0686d72e5bb7463b", "patch": "@@ -1549,3 +1549,75 @@ propagate_tree_value_into_stmt (gimple_stmt_iterator *gsi, tree val)\n   else\n     gcc_unreachable ();\n }\n+\n+/* Check exits of each loop in FUN, walk over loop closed PHIs in\n+   each exit basic block and propagate degenerate PHIs.  */\n+\n+unsigned\n+clean_up_loop_closed_phi (function *fun)\n+{\n+  unsigned i;\n+  edge e;\n+  gphi *phi;\n+  tree rhs;\n+  tree lhs;\n+  gphi_iterator gsi;\n+  struct loop *loop;\n+\n+  /* Avoid possibly quadratic work when scanning for loop exits across\n+   all loops of a nest.  */\n+  if (!loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n+    return 0;\n+\n+  /* Walk over loop in function.  */\n+  FOR_EACH_LOOP_FN (fun, loop, 0)\n+    {\n+      /* Check each exit edege of loop.  */\n+      auto_vec<edge> exits = get_loop_exit_edges (loop);\n+      FOR_EACH_VEC_ELT (exits, i, e)\n+\tif (single_pred_p (e->dest))\n+\t  /* Walk over loop-closed PHIs.  */\n+\t  for (gsi = gsi_start_phis (e->dest); !gsi_end_p (gsi);)\n+\t    {\n+\t      phi = gsi.phi ();\n+\t      rhs = gimple_phi_arg_def (phi, 0);\n+\t      lhs = gimple_phi_result (phi);\n+\n+\t      if (rhs && may_propagate_copy (lhs, rhs))\n+\t\t{\n+\t\t  /* Dump details.  */\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"  Replacing '\");\n+\t\t      print_generic_expr (dump_file, lhs, dump_flags);\n+\t\t      fprintf (dump_file, \"' with '\");\n+\t\t      print_generic_expr (dump_file, rhs, dump_flags);\n+\t\t      fprintf (dump_file, \"'\\n\");\n+\t\t    }\n+\n+\t\t  use_operand_p use_p;\n+\t\t  imm_use_iterator iter;\n+\t\t  gimple *use_stmt;\n+\t\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+\t\t    {\n+\t\t      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t\treplace_exp (use_p, rhs);\n+\t\t      update_stmt (use_stmt);\n+\n+\t\t      /* Update the invariant flag for ADDR_EXPR if replacing\n+\t\t\t a variable index with a constant.  */\n+\t\t      if (gimple_assign_single_p (use_stmt)\n+\t\t\t  && TREE_CODE (gimple_assign_rhs1 (use_stmt))\n+\t\t\t       == ADDR_EXPR)\n+\t\t\trecompute_tree_invariant_for_addr_expr (\n+\t\t\t  gimple_assign_rhs1 (use_stmt));\n+\t\t    }\n+\t\t  remove_phi_node (&gsi, true);\n+\t\t}\n+\t      else\n+\t\tgsi_next (&gsi);\n+\t    }\n+    }\n+\n+  return 0;\n+}"}]}