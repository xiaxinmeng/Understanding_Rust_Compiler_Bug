{"sha": "46c0a59dfb7e787766e70fae751b66e527a8932a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjMGE1OWRmYjdlNzg3NzY2ZTcwZmFlNzUxYjY2ZTUyN2E4OTMyYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-07-26T07:34:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-07-26T07:34:58Z"}, "message": "re PR tree-optimization/22486 (Upcasts are not folded away)\n\n2005-07-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/22486\n\t* fold-const.c (fold_unary): Fold away useless component\n\treferences of the form (T *)&T.x, if the address\n\tdoesn't change.\n\n\t* gcc.dg/tree-ssa/upcast-1.c: New testcase.\n\nFrom-SVN: r102381", "tree": {"sha": "0c96be52bba7fbb40aef73b7e70cfd92198df875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c96be52bba7fbb40aef73b7e70cfd92198df875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c0a59dfb7e787766e70fae751b66e527a8932a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c0a59dfb7e787766e70fae751b66e527a8932a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c0a59dfb7e787766e70fae751b66e527a8932a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c0a59dfb7e787766e70fae751b66e527a8932a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e2844cb07459014e55308e43ec26dd75e280f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2844cb07459014e55308e43ec26dd75e280f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2844cb07459014e55308e43ec26dd75e280f30"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "315a6367e15a7fd74dae438b5f051b96a461b22b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46c0a59dfb7e787766e70fae751b66e527a8932a", "patch": "@@ -1,3 +1,10 @@\n+2005-07-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22486\n+\t* fold-const.c (fold_unary): Fold away useless component\n+\treferences of the form (T *)&T.x, if the address\n+\tdoesn't change.\n+\n 2005-07-25  James E Wilson  <wilson@specifixinc.com>\n \n \t* dwarf2out.c (add_call_src_coords_attributes): New."}, {"sha": "bdda6001078f0ddf5c610b90faca87bb17bc6a9c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=46c0a59dfb7e787766e70fae751b66e527a8932a", "patch": "@@ -6711,6 +6711,29 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));\n \t}\n \n+      /* Handle (T *)&A.B.C for A being of type T and B and C\n+\t living at offset zero.  This occours frequently in\n+\t C++ upcasting and then accessing the base.  */\n+      if (TREE_CODE (op0) == ADDR_EXPR\n+\t  && POINTER_TYPE_P (type)\n+\t  && handled_component_p (TREE_OPERAND (op0, 0)))\n+        {\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  tree offset;\n+\t  enum machine_mode mode;\n+\t  int unsignedp, volatilep;\n+          tree base = TREE_OPERAND (op0, 0);\n+\t  base = get_inner_reference (base, &bitsize, &bitpos, &offset,\n+\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\t  /* If the reference was to a (constant) zero offset, we can use\n+\t     the address of the base if it has the same base type\n+\t     as the result type.  */\n+\t  if (! offset && bitpos == 0\n+\t      && TYPE_MAIN_VARIANT (TREE_TYPE (type))\n+\t\t  == TYPE_MAIN_VARIANT (TREE_TYPE (base)))\n+\t    return fold_convert (type, build_fold_addr_expr (base));\n+        }\n+\n       if (TREE_CODE (op0) == MODIFY_EXPR\n \t  && TREE_CONSTANT (TREE_OPERAND (op0, 1))\n \t  /* Detect assigning a bitfield.  */"}, {"sha": "693ddc9725e67de877b000546dbd9af31d5547b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46c0a59dfb7e787766e70fae751b66e527a8932a", "patch": "@@ -1,3 +1,8 @@\n+2005-07-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22486\n+\t* gcc.dg/tree-ssa/upcast-1.c: New testcase.\n+\n 2005-07-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/22484"}, {"sha": "12c2b91ba08d8cfaacc64db3e97e30a300f4a8dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/upcast-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fupcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c0a59dfb7e787766e70fae751b66e527a8932a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fupcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fupcast-1.c?ref=46c0a59dfb7e787766e70fae751b66e527a8932a", "patch": "@@ -0,0 +1,12 @@\n+/* { do-go compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+typedef struct { int i; } Foo;\n+Foo foo;\n+Foo *bar(void)\n+{\n+  return (Foo *)&foo.i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"&foo;\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}