{"sha": "0d3128d6a4925e05f560f665adcbb90eb1427a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzMTI4ZDZhNDkyNWUwNWY1NjBmNjY1YWRjYmI5MGViMTQyN2E4MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-04T21:43:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-04T21:43:49Z"}, "message": "* error.c (type_to_string): Avoid redundant akas.\n\nFrom-SVN: r175833", "tree": {"sha": "3b49dc82c1c8947b944df0cf40ffbc1e69e86982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b49dc82c1c8947b944df0cf40ffbc1e69e86982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d3128d6a4925e05f560f665adcbb90eb1427a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3128d6a4925e05f560f665adcbb90eb1427a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3128d6a4925e05f560f665adcbb90eb1427a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3128d6a4925e05f560f665adcbb90eb1427a81/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc9475113ff3731afafca87e6b973863ead02ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9475113ff3731afafca87e6b973863ead02ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9475113ff3731afafca87e6b973863ead02ee5"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "692a95b8e3075abaa40e95462e2b4e77f264805d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d3128d6a4925e05f560f665adcbb90eb1427a81", "patch": "@@ -1,3 +1,7 @@\n+2011-07-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* error.c (type_to_string): Avoid redundant akas.\n+\n 2011-07-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR c++/49605"}, {"sha": "664b918b31f72975d766154d41b16d70d9a7a42a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=0d3128d6a4925e05f560f665adcbb90eb1427a81", "patch": "@@ -2634,14 +2634,28 @@ type_to_string (tree typ, int verbose)\n \n   reinit_cxx_pp ();\n   dump_type (typ, flags);\n+  /* If we're printing a type that involves typedefs, also print the\n+     stripped version.  But sometimes the stripped version looks\n+     exactly the same, so we don't want it after all.  To avoid printing\n+     it in that case, we play ugly obstack games.  */\n   if (typ && TYPE_P (typ) && typ != TYPE_CANONICAL (typ)\n       && !uses_template_parms (typ))\n     {\n+      int aka_start; char *p;\n+      struct obstack *ob = pp_base (cxx_pp)->buffer->obstack;\n+      /* Remember the end of the initial dump.  */\n+      int len = obstack_object_size (ob);\n       tree aka = strip_typedefs (typ);\n       pp_string (cxx_pp, \" {aka\");\n       pp_cxx_whitespace (cxx_pp);\n+      /* And remember the start of the aka dump.  */\n+      aka_start = obstack_object_size (ob);\n       dump_type (aka, flags);\n       pp_character (cxx_pp, '}');\n+      p = (char*)obstack_base (ob);\n+      /* If they are identical, cut off the aka with a NUL.  */\n+      if (memcmp (p, p+aka_start, len) == 0)\n+\tp[len] = '\\0';\n     }\n   return pp_formatted_text (cxx_pp);\n }"}, {"sha": "51f8de9842125a9b4a7ab311b0f69a1e8a65a8fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d3128d6a4925e05f560f665adcbb90eb1427a81", "patch": "@@ -1,3 +1,7 @@\n+2011-07-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/diagnostic/aka1.C: New.\n+\n 2011-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/49619"}, {"sha": "37f8df9399d251128fbf8645ab17f61217009239", "filename": "gcc/testsuite/g++.dg/diagnostic/aka1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3128d6a4925e05f560f665adcbb90eb1427a81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C?ref=0d3128d6a4925e05f560f665adcbb90eb1427a81", "patch": "@@ -0,0 +1,15 @@\n+// Basic test for typedef stripping in diagnostics.\n+\n+struct A {\n+  void f();\n+};\n+\n+void A::f() {\n+  // We don't want an aka for the injected-class-name.\n+  A a = 0;\t\t\t// { dg-error \"type .A. requested\" }\n+}\n+\n+typedef A B;\n+\n+// We do want an aka for a real typedef.\n+B b = 0;\t\t\t// { dg-error \"B .aka A.\" }"}]}