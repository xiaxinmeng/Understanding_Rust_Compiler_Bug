{"sha": "8ba141520c44ab720084dbdf3e07a9015a05dc17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhMTQxNTIwYzQ0YWI3MjAwODRkYmRmM2UwN2E5MDE1YTA1ZGMxNw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-08-23T21:31:53Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-08-23T21:31:53Z"}, "message": "prims.cc (JVMPI_NOTIFY_ALLOC): New macro.\n\n2004-08-23  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* prims.cc (JVMPI_NOTIFY_ALLOC): New macro. Call jvmpi_notify_alloc\n\tonly if jvmpi is enabled.\n\t(jvmpi_notify_alloc): Don't check if jvmpi is enabled here.\n\t(_Jv_AllocObjectNoFinalizer): Use JVMPI_NOTIFY_ALLOC.\n\t(_Jv_AllocString): Likewise.\n\t(_Jv_AllocPtrFreeObject): Likewise.\n\nFrom-SVN: r86441", "tree": {"sha": "63ee6cc87d5f38db63ea59e74a4ea7bfac9ac15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63ee6cc87d5f38db63ea59e74a4ea7bfac9ac15d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba141520c44ab720084dbdf3e07a9015a05dc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba141520c44ab720084dbdf3e07a9015a05dc17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba141520c44ab720084dbdf3e07a9015a05dc17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba141520c44ab720084dbdf3e07a9015a05dc17/comments", "author": null, "committer": null, "parents": [{"sha": "0039c16d35e8f9bd92a4ca170bd39b09ca62d348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0039c16d35e8f9bd92a4ca170bd39b09ca62d348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0039c16d35e8f9bd92a4ca170bd39b09ca62d348"}], "stats": {"total": 106, "additions": 39, "deletions": 67}, "files": [{"sha": "7e0c0689b7e8c70ac2cce274fdbab1ad35ecf1f6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba141520c44ab720084dbdf3e07a9015a05dc17/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba141520c44ab720084dbdf3e07a9015a05dc17/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ba141520c44ab720084dbdf3e07a9015a05dc17", "patch": "@@ -1,4 +1,14 @@\n+2004-08-23  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* prims.cc (JVMPI_NOTIFY_ALLOC): New macro. Call jvmpi_notify_alloc\n+\tonly if jvmpi is enabled.\n+\t(jvmpi_notify_alloc): Don't check if jvmpi is enabled here.\n+\t(_Jv_AllocObjectNoFinalizer): Use JVMPI_NOTIFY_ALLOC.\n+\t(_Jv_AllocString): Likewise.\n+\t(_Jv_AllocPtrFreeObject): Likewise.\t\n+\n 2004-08-23  Hans Boehm  <Hans.Boehm@hp.com>\n+\n \t* defineclass.cc: Include <stdio.h>.\n \t* java/lang/natClassLoader.cc: Include <stdio.h>.\n "}, {"sha": "285363f2cfc19587163602b98590bff0e01f54c5", "filename": "libjava/prims.cc", "status": "modified", "additions": 29, "deletions": 67, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba141520c44ab720084dbdf3e07a9015a05dc17/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba141520c44ab720084dbdf3e07a9015a05dc17/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=8ba141520c44ab720084dbdf3e07a9015a05dc17", "patch": "@@ -364,37 +364,37 @@ void _Jv_ThrowNoMemory()\n }\n \n #ifdef ENABLE_JVMPI\n+# define JVMPI_NOTIFY_ALLOC(klass,size,obj) \\\n+    if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false)) \\\n+      jvmpi_notify_alloc(klass,size,obj);\n static void\n jvmpi_notify_alloc(jclass klass, jint size, jobject obj)\n {\n   // Service JVMPI allocation request.\n-  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false))\n-    {\n-      JVMPI_Event event;\n-\n-      event.event_type = JVMPI_EVENT_OBJECT_ALLOC;\n-      event.env_id = NULL;\n-      event.u.obj_alloc.arena_id = 0;\n-      event.u.obj_alloc.class_id = (jobjectID) klass;\n-      event.u.obj_alloc.is_array = 0;\n-      event.u.obj_alloc.size = size;\n-      event.u.obj_alloc.obj_id = (jobjectID) obj;\n-\n-      // FIXME:  This doesn't look right for the Boehm GC.  A GC may\n-      // already be in progress.  _Jv_DisableGC () doesn't wait for it.\n-      // More importantly, I don't see the need for disabling GC, since we\n-      // blatantly have a pointer to obj on our stack, ensuring that the\n-      // object can't be collected.  Even for a nonconservative collector,\n-      // it appears to me that this must be true, since we are about to\n-      // return obj. Isn't this whole approach way too intrusive for\n-      // a useful profiling interface?\t\t\t- HB\n-      _Jv_DisableGC ();\n-      (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (&event);\n-      _Jv_EnableGC ();\n-    }\n+  JVMPI_Event event;\n+\n+  event.event_type = JVMPI_EVENT_OBJECT_ALLOC;\n+  event.env_id = NULL;\n+  event.u.obj_alloc.arena_id = 0;\n+  event.u.obj_alloc.class_id = (jobjectID) klass;\n+  event.u.obj_alloc.is_array = 0;\n+  event.u.obj_alloc.size = size;\n+  event.u.obj_alloc.obj_id = (jobjectID) obj;\n+\n+  // FIXME:  This doesn't look right for the Boehm GC.  A GC may\n+  // already be in progress.  _Jv_DisableGC () doesn't wait for it.\n+  // More importantly, I don't see the need for disabling GC, since we\n+  // blatantly have a pointer to obj on our stack, ensuring that the\n+  // object can't be collected.  Even for a nonconservative collector,\n+  // it appears to me that this must be true, since we are about to\n+  // return obj. Isn't this whole approach way too intrusive for\n+  // a useful profiling interface?\t\t\t- HB\n+  _Jv_DisableGC ();\n+  (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (&event);\n+  _Jv_EnableGC ();\n }\n #else /* !ENABLE_JVMPI */\n-# define jvmpi_notify_alloc(klass,size,obj) /* do nothing */\n+# define JVMPI_NOTIFY_ALLOC(klass,size,obj) /* do nothing */\n #endif\n \n // Allocate a new object of class KLASS.\n@@ -407,7 +407,7 @@ _Jv_AllocObjectNoInitNoFinalizer (jclass klass)\n {\n   jint size = klass->size ();\n   jobject obj = (jobject) _Jv_AllocObj (size, klass);\n-  jvmpi_notify_alloc (klass, size, obj);\n+  JVMPI_NOTIFY_ALLOC (klass, size, obj);\n   return obj;\n }\n \n@@ -418,7 +418,7 @@ _Jv_AllocObjectNoFinalizer (jclass klass)\n   _Jv_InitClass (klass);\n   jint size = klass->size ();\n   jobject obj = (jobject) _Jv_AllocObj (size, klass);\n-  jvmpi_notify_alloc (klass, size, obj);\n+  JVMPI_NOTIFY_ALLOC (klass, size, obj);\n   return obj;\n }\n \n@@ -462,27 +462,8 @@ _Jv_AllocString(jsize len)\n   obj->boffset = sizeof(java::lang::String);\n   obj->count = len;\n   obj->cachedHashCode = 0;\n-  \n-#ifdef ENABLE_JVMPI\n-  // Service JVMPI request.\n \n-  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false))\n-    {\n-      JVMPI_Event event;\n-\n-      event.event_type = JVMPI_EVENT_OBJECT_ALLOC;\n-      event.env_id = NULL;\n-      event.u.obj_alloc.arena_id = 0;\n-      event.u.obj_alloc.class_id = (jobjectID) &String::class$;\n-      event.u.obj_alloc.is_array = 0;\n-      event.u.obj_alloc.size = sz;\n-      event.u.obj_alloc.obj_id = (jobjectID) obj;\n-\n-      _Jv_DisableGC ();\n-      (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (&event);\n-      _Jv_EnableGC ();\n-    }\n-#endif  \n+  JVMPI_NOTIFY_ALLOC (&String::class$, sz, obj);\n   \n   return obj;\n }\n@@ -499,26 +480,7 @@ _Jv_AllocPtrFreeObject (jclass klass)\n \n   jobject obj = (jobject) _Jv_AllocPtrFreeObj (size, klass);\n \n-#ifdef ENABLE_JVMPI\n-  // Service JVMPI request.\n-\n-  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false))\n-    {\n-      JVMPI_Event event;\n-\n-      event.event_type = JVMPI_EVENT_OBJECT_ALLOC;\n-      event.env_id = NULL;\n-      event.u.obj_alloc.arena_id = 0;\n-      event.u.obj_alloc.class_id = (jobjectID) klass;\n-      event.u.obj_alloc.is_array = 0;\n-      event.u.obj_alloc.size = size;\n-      event.u.obj_alloc.obj_id = (jobjectID) obj;\n-\n-      _Jv_DisableGC ();\n-      (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (&event);\n-      _Jv_EnableGC ();\n-    }\n-#endif\n+  JVMPI_NOTIFY_ALLOC (klass, size, obj);\n \n   return obj;\n }"}]}