{"sha": "369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5Yjc4YjBlNDllZWNlMWZiNThlNzVhZDViZjFjNzY1OWY3OGVmZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-04T07:22:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-04T07:22:19Z"}, "message": "stl_heap.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_heap.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n\n\t* include/bits/stl_algo.h: Qualify __iterator_category too.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\n\t* include/bits/stl_algo.h: Don't qualify the pair type.\n\nFrom-SVN: r68915", "tree": {"sha": "01436baf36c5ba8a651392191c153d791273aa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01436baf36c5ba8a651392191c153d791273aa09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/comments", "author": null, "committer": null, "parents": [{"sha": "68e1f6219cf23a7179857f78243847352388e623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e1f6219cf23a7179857f78243847352388e623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e1f6219cf23a7179857f78243847352388e623"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "cc34c60efeb1e552f55cbb5c77db501c6e5ecd2a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -1,3 +1,15 @@\n+2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_heap.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n+\n+\t* include/bits/stl_algo.h: Qualify __iterator_category too.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\n+\t* include/bits/stl_algo.h: Don't qualify the pair type.\n+\n 2003-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (target_headers): Add fpos.h"}, {"sha": "3b00005939a4a657bdfcc47bf05fb2ea02914510", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -295,7 +295,7 @@ namespace std\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t\ttypename iterator_traits<_InputIterator>::value_type, _Tp>)\n-      return std::find(__first, __last, __val, __iterator_category(__first));\n+      return std::find(__first, __last, __val, std::__iterator_category(__first));\n     }\n \n   /**\n@@ -315,7 +315,7 @@ namespace std\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n \t      typename iterator_traits<_InputIterator>::value_type>)\n-      return std::find_if(__first, __last, __pred, __iterator_category(__first));\n+      return std::find_if(__first, __last, __pred, std::__iterator_category(__first));\n     }\n \n   /**\n@@ -1352,7 +1352,7 @@ namespace std\n \t  // concept requirements\n \t  __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t\t    _BidirectionalIterator>)\n-\t  std::__reverse(__first, __last, __iterator_category(__first));\n+\t  std::__reverse(__first, __last, std::__iterator_category(__first));\n     }\n \n   /**\n@@ -1754,7 +1754,7 @@ namespace std\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n-      return std::__partition(__first, __last, __pred, __iterator_category(__first));\n+      return std::__partition(__first, __last, __pred, std::__iterator_category(__first));\n     }\n \n \n@@ -3469,10 +3469,10 @@ namespace std\n \t  __left = std::lower_bound(__first, __middle, __val);\n \t  std::advance(__first, __len);\n \t  __right = std::upper_bound(++__middle, __first, __val);\n-\t  return std::pair<_ForwardIterator, _ForwardIterator>(__left, __right);\n+\t  return pair<_ForwardIterator, _ForwardIterator>(__left, __right);\n \t}\n       }\n-      return std::pair<_ForwardIterator, _ForwardIterator>(__first, __first);\n+      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);\n     }\n \n   /**\n@@ -3524,10 +3524,10 @@ namespace std\n \t  __left = std::lower_bound(__first, __middle, __val, __comp);\n \t  std::advance(__first, __len);\n \t  __right = std::upper_bound(++__middle, __first, __val, __comp);\n-\t  return std::pair<_ForwardIterator, _ForwardIterator>(__left, __right);\n+\t  return pair<_ForwardIterator, _ForwardIterator>(__left, __right);\n \t}\n       }\n-      return std::pair<_ForwardIterator, _ForwardIterator>(__first, __first);\n+      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);\n     }\n \n   /**\n@@ -4320,8 +4320,8 @@ namespace std\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n       return std::__find_end(__first1, __last1, __first2, __last2,\n-\t\t\t     __iterator_category(__first1),\n-\t\t\t     __iterator_category(__first2));\n+\t\t\t     std::__iterator_category(__first1),\n+\t\t\t     std::__iterator_category(__first2));\n     }\n \n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n@@ -4339,8 +4339,8 @@ namespace std\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n       return std::__find_end(__first1, __last1, __first2, __last2,\n-\t\t\t     __iterator_category(__first1),\n-\t\t\t     __iterator_category(__first2),\n+\t\t\t     std::__iterator_category(__first1),\n+\t\t\t     std::__iterator_category(__first2),\n \t\t\t     __comp);\n     }\n "}, {"sha": "3c68c425c32d9af8e5ee409d6ff7ab1eb0b15b98", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -248,13 +248,13 @@ namespace std\n     inline _OutputIterator\n     __copy_aux2(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, __false_type)\n-    { return std::__copy(__first, __last, __result, __iterator_category(__first)); }\n+    { return std::__copy(__first, __last, __result, std::__iterator_category(__first)); }\n \n   template<typename _InputIterator, typename _OutputIterator>\n     inline _OutputIterator\n     __copy_aux2(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, __true_type)\n-    { return std::__copy(__first, __last, __result, __iterator_category(__first)); }\n+    { return std::__copy(__first, __last, __result, std::__iterator_category(__first)); }\n \n   template<typename _Tp>\n     inline _Tp*\n@@ -370,7 +370,7 @@ namespace std\n \t   _BidirectionalIterator2 __result)\n       {\n         return std::__copy_backward(__first, __last, __result, \n-\t\t\t\t    __iterator_category(__first));\n+\t\t\t\t    std::__iterator_category(__first));\n       }\n     };\n \n@@ -594,7 +594,7 @@ namespace std\n \t  ++__first1;\n \t  ++__first2;\n         }\n-      return std::pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**\n@@ -625,7 +625,7 @@ namespace std\n \t  ++__first1;\n \t  ++__first2;\n         }\n-      return std::pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**"}, {"sha": "3f6c2a22463b8b1dc52fcd6b9c6485509d68efb3", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -522,7 +522,7 @@ template <typename _Alloc>\n     template <class _InputIterator>\n     void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n                                 __false_type) {\n-      _M_initialize_range(__first, __last, __iterator_category(__first));\n+      _M_initialize_range(__first, __last, std::__iterator_category(__first));\n     }\n   \n     template <class _InputIterator>\n@@ -577,7 +577,7 @@ template <typename _Alloc>\n   \n     template <class _InputIterator>\n     void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type)\n-      { _M_assign_aux(__first, __last, __iterator_category(__first)); }\n+      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n   \n     template <class _InputIterator>\n     void _M_assign_aux(_InputIterator __first, _InputIterator __last,\n@@ -662,7 +662,7 @@ template <typename _Alloc>\n     void _M_insert_dispatch(iterator __pos,\n                             _InputIterator __first, _InputIterator __last,\n                             __false_type) {\n-      _M_insert_range(__pos, __first, __last, __iterator_category(__first));\n+      _M_insert_range(__pos, __first, __last, std::__iterator_category(__first));\n     }\n   \n     template <class _InputIterator>"}, {"sha": "8105ff05719097306fedadd25804d6ca7f91bdb5", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -93,8 +93,8 @@ namespace std\n \t    _RandomAccessIterator>)\n       __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n \n-      __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n-\t\t  _ValueType(*(__last - 1)));\n+      std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n+\t\t       _ValueType(*(__last - 1)));\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp, \n@@ -126,8 +126,8 @@ namespace std\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n-      __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n-\t\t  _ValueType(*(__last - 1)), __comp);\n+      std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n+\t\t       _ValueType(*(__last - 1)), __comp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp>\n@@ -148,7 +148,7 @@ namespace std\n \t*(__first + __holeIndex) = *(__first + (__secondChild - 1));\n \t__holeIndex = __secondChild - 1;\n       }\n-      __push_heap(__first, __holeIndex, __topIndex, __value);\n+      std::__push_heap(__first, __holeIndex, __topIndex, __value);\n     }\n \n   template<typename _RandomAccessIterator, typename _Tp>\n@@ -158,7 +158,7 @@ namespace std\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;\n       *__result = *__first;\n-      __adjust_heap(__first, _Distance(0), _Distance(__last - __first), __value);\n+      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first), __value);\n     }\n \n   template<typename _RandomAccessIterator>\n@@ -172,7 +172,7 @@ namespace std\n \t    _RandomAccessIterator>)\n       __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n \n-      __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)));\n+      std::__pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)));\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n@@ -194,7 +194,7 @@ namespace std\n \t*(__first + __holeIndex) = *(__first + (__secondChild - 1));\n \t__holeIndex = __secondChild - 1;\n       }\n-      __push_heap(__first, __holeIndex, __topIndex, __value, __comp);\n+      std::__push_heap(__first, __holeIndex, __topIndex, __value, __comp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Tp, typename _Compare>\n@@ -204,8 +204,8 @@ namespace std\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;\n       *__result = *__first;\n-      __adjust_heap(__first, _Distance(0), _Distance(__last - __first), \n-\t\t    __value, __comp);\n+      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first), \n+\t\t\t __value, __comp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n@@ -218,7 +218,7 @@ namespace std\n \t    _RandomAccessIterator>)\n \n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n-      __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)), __comp);\n+      std::__pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)), __comp);\n     }\n \n   template<typename _RandomAccessIterator>\n@@ -240,7 +240,7 @@ namespace std\n       _DistanceType __parent = (__len - 2)/2;\n \t\n       while (true) {\n-\t__adjust_heap(__first, __parent, __len, _ValueType(*(__first + __parent)));\n+\tstd::__adjust_heap(__first, __parent, __len, _ValueType(*(__first + __parent)));\n \tif (__parent == 0) return;\n \t__parent--;\n       }\n@@ -265,8 +265,8 @@ namespace std\n       _DistanceType __parent = (__len - 2)/2;\n \t\n       while (true) {\n-\t__adjust_heap(__first, __parent, __len,\n-\t              _ValueType(*(__first + __parent)), __comp);\n+\tstd::__adjust_heap(__first, __parent, __len,\n+\t\t\t   _ValueType(*(__first + __parent)), __comp);\n \tif (__parent == 0) return;\n \t__parent--;\n       }\n@@ -283,7 +283,7 @@ namespace std\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       while (__last - __first > 1)\n-\tpop_heap(__first, __last--);\n+\tstd::pop_heap(__first, __last--);\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n@@ -296,7 +296,7 @@ namespace std\n \t    _RandomAccessIterator>)\n \n       while (__last - __first > 1)\n-\tpop_heap(__first, __last--, __comp);\n+\tstd::pop_heap(__first, __last--, __comp);\n     }\n \n } // namespace std"}, {"sha": "53cf23490a9c70974cba90623ab77c190f76e135", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369b78b0e49eece1fb58e75ad5bf1c7659f78efe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=369b78b0e49eece1fb58e75ad5bf1c7659f78efe", "patch": "@@ -1,6 +1,6 @@\n // Functions used by iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -111,7 +111,7 @@ namespace std\n     distance(_InputIterator __first, _InputIterator __last)\n     {\n       // concept requirements -- taken care of in __distance\n-      return __distance(__first, __last, __iterator_category(__first));\n+      return std::__distance(__first, __last, std::__iterator_category(__first));\n     }\n   \n   template<typename _InputIterator, typename _Distance>\n@@ -164,7 +164,7 @@ namespace std\n     advance(_InputIterator& __i, _Distance __n)\n     {\n       // concept requirements -- taken care of in __advance\n-      __advance(__i, __n, __iterator_category(__i));\n+      std::__advance(__i, __n, std::__iterator_category(__i));\n     }\n } // namespace std\n "}]}