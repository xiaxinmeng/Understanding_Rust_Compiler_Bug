{"sha": "44201dba495937d57fac14288c0659e0a7816d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyMDFkYmE0OTU5MzdkNTdmYWMxNDI4OGMwNjU5ZTBhNzgxNmQ2Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-12-21T20:50:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-21T20:50:37Z"}, "message": "pa.c (emit_move_sequence): Handle a function label source operand.\n\n        * pa.c (emit_move_sequence): Handle a function label source\n        operand.\n\nFrom-SVN: r17174", "tree": {"sha": "9e1df7dc76cbcdb5b1b23a523465bfbd11ae2ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1df7dc76cbcdb5b1b23a523465bfbd11ae2ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44201dba495937d57fac14288c0659e0a7816d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44201dba495937d57fac14288c0659e0a7816d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44201dba495937d57fac14288c0659e0a7816d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44201dba495937d57fac14288c0659e0a7816d62/comments", "author": null, "committer": null, "parents": [{"sha": "e2de3a4600ed809486b8f35a0b92efc9945c1972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2de3a4600ed809486b8f35a0b92efc9945c1972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2de3a4600ed809486b8f35a0b92efc9945c1972"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "fb034b433b1035619ea4e8bceb5da1530f0c401a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44201dba495937d57fac14288c0659e0a7816d62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44201dba495937d57fac14288c0659e0a7816d62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44201dba495937d57fac14288c0659e0a7816d62", "patch": "@@ -1,3 +1,8 @@\n+Sun Dec 21 21:54:22 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c (emit_move_sequence): Handle a function label source\n+\toperand.\n+\n Sun Dec 21 16:13:55 1997  Nick Clifton  <nickc@cygnus.com\n \n \t* c-pragma.c (handle_pragma_token): Generate warning messages"}, {"sha": "01ae14d4cc356d00b81db9bb58ef9970374cea87", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44201dba495937d57fac14288c0659e0a7816d62/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44201dba495937d57fac14288c0659e0a7816d62/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=44201dba495937d57fac14288c0659e0a7816d62", "patch": "@@ -1244,8 +1244,12 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t}\n     }\n \n-  /* Simplify the source if we need to.  */\n+  /* Simplify the source if we need to.\n+     Note we do have to handle function labels here, even though we do\n+     not consider them legitimate constants.  Loop optimizations can\n+     call the emit_move_xxx with one a function as a source.  */\n   if ((GET_CODE (operand1) != HIGH && immediate_operand (operand1, mode))\n+      || function_label_operand (operand1, mode)\n       || (GET_CODE (operand1) == HIGH\n \t  && symbolic_operand (XEXP (operand1, 0), mode)))\n     {\n@@ -1263,9 +1267,10 @@ emit_move_sequence (operands, mode, scratch_reg)\n \n \t     So we force the plabel into memory, load operand0 from\n \t     the memory location, then add in the constant part.  */\n-\t  if (GET_CODE (operand1) == CONST\n-\t      && GET_CODE (XEXP (operand1, 0)) == PLUS\n-\t      && function_label_operand (XEXP (XEXP (operand1, 0), 0), Pmode))\n+\t  if ((GET_CODE (operand1) == CONST\n+\t       && GET_CODE (XEXP (operand1, 0)) == PLUS\n+\t       && function_label_operand (XEXP (XEXP (operand1, 0), 0), Pmode))\n+\t      || function_label_operand (operand1, mode))\n \t    {\n \t      rtx temp, const_part;\n \n@@ -1275,13 +1280,25 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t      else if (flag_pic)\n \t\tscratch_reg = gen_reg_rtx (Pmode);\n \n-\t      /* Save away the constant part of the expression.  */\n-\t      const_part = XEXP (XEXP (operand1, 0), 1);\n-\t      if (GET_CODE (const_part) != CONST_INT)\n-\t\tabort ();\n+\t      if (GET_CODE (operand1) == CONST)\n+\t\t{\n+\t\t  /* Save away the constant part of the expression.  */\n+\t\t  const_part = XEXP (XEXP (operand1, 0), 1);\n+\t\t  if (GET_CODE (const_part) != CONST_INT)\n+\t\t    abort ();\n+\n+\t\t  /* Force the function label into memory.  */\n+\t\t  temp = force_const_mem (mode, XEXP (XEXP (operand1, 0), 0));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* No constant part.  */\n+\t\t  const_part = NULL_RTX;\n \n-\t      /* Force the function label into memory.  */\n-\t      temp = force_const_mem (mode, XEXP (XEXP (operand1, 0), 0));\n+\t\t  /* Force the function label into memory.  */\n+\t\t  temp = force_const_mem (mode, operand1);\n+\t\t}\n+\t\t\n \n \t      /* Get the address of the memory location.  PIC-ify it if\n \t\t necessary.  */\n@@ -1300,7 +1317,8 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t      emit_move_sequence (operands, mode, scratch_reg);\n \n \t      /* And add back in the constant part.  */\n-\t      expand_inc (operand0, const_part);\n+\t      if (const_part != NULL_RTX)\n+\t\texpand_inc (operand0, const_part);\n \n \t      return 1;\n \t    }"}]}