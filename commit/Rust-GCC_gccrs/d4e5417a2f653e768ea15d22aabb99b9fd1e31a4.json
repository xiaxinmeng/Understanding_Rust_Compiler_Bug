{"sha": "d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlNTQxN2EyZjY1M2U3NjhlYTE1ZDIyYWFiYjk5YjlmZDFlMzFhNA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-12-01T21:04:21Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-12-01T21:04:21Z"}, "message": "Revert\n\n\t2011-11-29   Diego Novillo  <dnovillo@google.com>\n\n\t\t* gimple.c (gimple_call_set_cannot_inline): Move from gimple.h.\n\t\tUpdate field call_stmt_cannot_inline_p from call\n\t\tgraph edge, if needed.\n\t\t* gimple.h (gimple_call_set_cannot_inline): Move to gimple.c.\n\nFrom-SVN: r181893", "tree": {"sha": "d013ef9887e11f42ac8c7621423db9dbfb851e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d013ef9887e11f42ac8c7621423db9dbfb851e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e485da09d9d70c0e97afbba1760e55503534c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e485da09d9d70c0e97afbba1760e55503534c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e485da09d9d70c0e97afbba1760e55503534c8b"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "f2d1bc2e69ae61eebf7b72212457fec4fb1dd4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "patch": "@@ -1,3 +1,14 @@\n+2011-12-01   Diego Novillo  <dnovillo@google.com>\n+\n+\tRevert\n+\n+\t2011-11-29   Diego Novillo  <dnovillo@google.com>\n+\n+\t\t* gimple.c (gimple_call_set_cannot_inline): Move from gimple.h.\n+\t\tUpdate field call_stmt_cannot_inline_p from call\n+\t\tgraph edge, if needed.\n+\t\t* gimple.h (gimple_call_set_cannot_inline): Move to gimple.c.\n+\n 2011-12-01  Nathan Sidwell  <nathan@acm.org>\n \n \tPR gcov-profile/51113"}, {"sha": "071c6515b4cae3f008672714d3937b890968bf71", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "patch": "@@ -5558,34 +5558,4 @@ gimple_asm_clobbers_memory_p (const_gimple stmt)\n \n   return false;\n }\n-\n-\n-/* Set the inlinable status of GIMPLE_CALL S to INLINABLE_P.  */\n-\n-void\n-gimple_call_set_cannot_inline (gimple s, bool inlinable_p)\n-{\n-  bool prev_inlinable_p;\n-\n-  GIMPLE_CHECK (s, GIMPLE_CALL);\n-\n-  prev_inlinable_p = gimple_call_cannot_inline_p (s);\n-\n-  if (inlinable_p)\n-    s->gsbase.subcode |= GF_CALL_CANNOT_INLINE;\n-  else\n-    s->gsbase.subcode &= ~GF_CALL_CANNOT_INLINE;\n-\n-  /* If we have changed the inlinable attribute, and there is a call\n-     graph edge going out of this statement, update its inlinable\n-     attribute as well.  */\n-  if (current_function_decl && prev_inlinable_p != inlinable_p)\n-    {\n-      struct cgraph_node *n = cgraph_get_node (current_function_decl);\n-      struct cgraph_edge *e = cgraph_edge (n, s);\n-      if (e)\n-\te->call_stmt_cannot_inline_p = inlinable_p;\n-    }\n-}\n-\n #include \"gt-gimple.h\""}, {"sha": "8536c70e87e21bdc421cbf90026bb346cb701744", "filename": "gcc/gimple.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e5417a2f653e768ea15d22aabb99b9fd1e31a4/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=d4e5417a2f653e768ea15d22aabb99b9fd1e31a4", "patch": "@@ -1035,7 +1035,6 @@ extern bool walk_stmt_load_store_ops (gimple, void *,\n extern bool gimple_ior_addresses_taken (bitmap, gimple);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);\n-extern void gimple_call_set_cannot_inline (gimple, bool);\n \n /* In gimplify.c  */\n extern tree create_tmp_var_raw (tree, const char *);\n@@ -2344,6 +2343,19 @@ gimple_call_tail_p (gimple s)\n }\n \n \n+/* Set the inlinable status of GIMPLE_CALL S to INLINABLE_P.  */\n+\n+static inline void\n+gimple_call_set_cannot_inline (gimple s, bool inlinable_p)\n+{\n+  GIMPLE_CHECK (s, GIMPLE_CALL);\n+  if (inlinable_p)\n+    s->gsbase.subcode |= GF_CALL_CANNOT_INLINE;\n+  else\n+    s->gsbase.subcode &= ~GF_CALL_CANNOT_INLINE;\n+}\n+\n+\n /* Return true if GIMPLE_CALL S cannot be inlined.  */\n \n static inline bool"}]}