{"sha": "422d1d378e52418d821781ad756cf3eafc3fa9a2", "node_id": "C_kwDOANBUbNoAKDQyMmQxZDM3OGU1MjQxOGQ4MjE3ODFhZDc1NmNmM2VhZmMzZmE5YTI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-15T12:32:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-18T06:58:54Z"}, "message": "tree-optimization/96881 - CD-DCE and CLOBBERs\n\nCD-DCE does not consider CLOBBERs as necessary in the attempt\nto not prevent DCE of SSA defs it uses.  A side-effect of that\nis that it also removes all its control dependences if they are\nnot made necessary by other means.  When we later try to preserve\nas many CLOBBERs as possible we have to make sure we also\npreserved the controlling conditions, otherwise a CLOBBER can\nnow appear on a path where it was not executed before, leading\nto wrong code as seen in the testcase.\n\nI've tried to continue to handle both direct and indirect\nCLOBBERs optimistically, allowing CD-DCE to remove control\nflow that just controls CLOBBERs but that regresses for\nexample the stack coalescing test g++.dg/opt/pr80032.C.\nThe pattern there is\n  if (pred) D.2512 = CLOBBER; else D.2512 = CLOBBER;\nbasically we have all paths leading to the same clobber but\nwe could safely cut some branches which we do not realize\nearly enough.  This regression can be mitigated by no longer\nconsidering direct CLOBBERs optimistically - the original\nmotivation for the CD-DCE handling wasn't removal of control\nflow but SSA defs of the address.\n\nHandling indirect vs. direct clobbers differently feels\nsomewhat wrong, still the patch goes with this solution.\n\n2022-02-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96881\n\t* tree-ssa-dce.cc (mark_stmt_if_obviously_necessary): Comment\n\tCLOBBER handling.\n\t(control_parents_preserved_p): New function.\n\t(eliminate_unnecessary_stmts): Check that we preserved control\n\tparents before retaining a CLOBBER.\n\t(perform_tree_ssa_dce): Pass down aggressive flag\n\tto eliminate_unnecessary_stmts.\n\n\t* g++.dg/torture/pr96881-1.C: New testcase.\n\t* g++.dg/torture/pr96881-2.C: Likewise.", "tree": {"sha": "259407eee6d17a1ff8afbf0ef8c0956db9f9f6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/259407eee6d17a1ff8afbf0ef8c0956db9f9f6ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/422d1d378e52418d821781ad756cf3eafc3fa9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422d1d378e52418d821781ad756cf3eafc3fa9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422d1d378e52418d821781ad756cf3eafc3fa9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422d1d378e52418d821781ad756cf3eafc3fa9a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36278f48cbc08c78e4ed588e5a049bd45fd1c55a"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "1c182e6a8b38dedb4d796af1d70c1bbcc2116543", "filename": "gcc/testsuite/g++.dg/torture/pr96881-1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-1.C?ref=422d1d378e52418d821781ad756cf3eafc3fa9a2", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+struct S { int s; ~S () {} } s;\n+\n+void __attribute__((noipa))\n+foo (struct S *s, int flag)\n+{\n+  s->s = 1;\n+  // We have to makes sure to not make the inlined CLOBBER\n+  // unconditional but we have to remove it to be able\n+  // to elide the branch\n+  if (!flag)\n+    return;\n+  s->~S();\n+}\n+\n+void __attribute__((noipa))\n+bar (struct S *s, int flag)\n+{\n+  s->s = 1;\n+  // CD-DCE chooses an arbitrary path, try to present it\n+  // with all variants\n+  if (flag)\n+    s->~S();\n+}\n+\n+int\n+main ()\n+{\n+  foo (&s, 0);\n+  if (s.s != 1)\n+    __builtin_abort ();\n+  bar (&s, 0);\n+  if (s.s != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "35c788791e8e635330bae58bb8c82108a054d599", "filename": "gcc/testsuite/g++.dg/torture/pr96881-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr96881-2.C?ref=422d1d378e52418d821781ad756cf3eafc3fa9a2", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+struct S { int s; ~S () {} } s;\n+\n+void __attribute__((noipa))\n+foo (int flag)\n+{\n+  s.s = 1;\n+  // We have to makes sure to not make the inlined CLOBBER\n+  // unconditional but we have to remove it to be able\n+  // to elide the branch\n+  if (!flag)\n+    return;\n+  s.~S();\n+}\n+\n+void __attribute__((noipa))\n+bar (int flag)\n+{\n+  s.s = 1;\n+  // CD-DCE chooses an arbitrary path, try to present it\n+  // with all variants\n+  if (flag)\n+    s.~S();\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+  if (s.s != 1)\n+    __builtin_abort ();\n+  bar (0);\n+  if (s.s != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2a13ea34829da2fb54b60218a4cfe8f1a5e58c53", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422d1d378e52418d821781ad756cf3eafc3fa9a2/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=422d1d378e52418d821781ad756cf3eafc3fa9a2", "patch": "@@ -284,7 +284,10 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n       break;\n \n     case GIMPLE_ASSIGN:\n-      if (gimple_clobber_p (stmt))\n+      /* Mark indirect CLOBBERs to be lazily removed if their SSA operands\n+\t do not prevail.  That also makes control flow leading to them\n+\t not necessary in aggressive mode.  */\n+      if (gimple_clobber_p (stmt) && !zero_ssa_operands (stmt, SSA_OP_USE))\n \treturn;\n       break;\n \n@@ -1268,11 +1271,36 @@ maybe_optimize_arith_overflow (gimple_stmt_iterator *gsi,\n   gimplify_and_update_call_from_tree (gsi, result);\n }\n \n+/* Returns whether the control parents of BB are preserved.  */\n+\n+static bool\n+control_parents_preserved_p (basic_block bb)\n+{\n+  /* If we marked the control parents from BB they are preserved.  */\n+  if (bitmap_bit_p (visited_control_parents, bb->index))\n+    return true;\n+\n+  /* But they can also end up being marked from elsewhere.  */\n+  bitmap_iterator bi;\n+  unsigned edge_number;\n+  EXECUTE_IF_SET_IN_BITMAP (cd->get_edges_dependent_on (bb->index),\n+\t\t\t    0, edge_number, bi)\n+    {\n+      basic_block cd_bb = cd->get_edge_src (edge_number);\n+      if (cd_bb != bb\n+\t  && !bitmap_bit_p (last_stmt_necessary, cd_bb->index))\n+\treturn false;\n+    }\n+  /* And cache the result.  */\n+  bitmap_set_bit (visited_control_parents, bb->index);\n+  return true;\n+}\n+\n /* Eliminate unnecessary statements. Any instruction not marked as necessary\n    contributes nothing to the program, and can be deleted.  */\n \n static bool\n-eliminate_unnecessary_stmts (void)\n+eliminate_unnecessary_stmts (bool aggressive)\n {\n   bool something_changed = false;\n   basic_block bb;\n@@ -1366,7 +1394,10 @@ eliminate_unnecessary_stmts (void)\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n-\t\t  if (!dead)\n+\t\t  if (!dead\n+\t\t      /* When doing CD-DCE we have to ensure all controls\n+\t\t\t of the stmt are still live.  */\n+\t\t      && (!aggressive || control_parents_preserved_p (bb)))\n \t\t    {\n \t\t      bitmap_clear (debug_seen);\n \t\t      continue;\n@@ -1876,7 +1907,7 @@ perform_tree_ssa_dce (bool aggressive)\n   propagate_necessity (aggressive);\n   BITMAP_FREE (visited);\n \n-  something_changed |= eliminate_unnecessary_stmts ();\n+  something_changed |= eliminate_unnecessary_stmts (aggressive);\n   something_changed |= cfg_altered;\n \n   /* We do not update postdominators, so free them unconditionally.  */"}]}