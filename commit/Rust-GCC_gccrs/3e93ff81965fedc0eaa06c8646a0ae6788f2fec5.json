{"sha": "3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5M2ZmODE5NjVmZWRjMGVhYTA2Yzg2NDZhMGFlNjc4OGYyZmVjNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-01T17:52:02Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-01T17:52:02Z"}, "message": "rtl.h (CONST_DOUBLE_P): Define.\n\n\t* rtl.h (CONST_DOUBLE_P): Define.\n\t(rtx_to_double_int): Declare.\n\t* emit-rtl.c (rtx_to_double_int): New function.\n\t* dwarf2out.c (insert_double): New function.\n\t(loc_descriptor, add_const_value_attribute): Clean up, use\n\trtx_to_double_int and insert_double functions.\n\nFrom-SVN: r158963", "tree": {"sha": "04b921bafe9da0814bfd9d39ff3475fef41e5805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b921bafe9da0814bfd9d39ff3475fef41e5805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/comments", "author": null, "committer": null, "parents": [{"sha": "bcbc9564cdd3760173c91b7414eac62d3667ae7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc9564cdd3760173c91b7414eac62d3667ae7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbc9564cdd3760173c91b7414eac62d3667ae7d"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "f978694a953a372ea5c8d234a9be4a404e50a9f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "patch": "@@ -1,3 +1,12 @@\n+2010-05-01  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* rtl.h (CONST_DOUBLE_P): Define.\n+\t(rtx_to_double_int): Declare.\n+\t* emit-rtl.c (rtx_to_double_int): New function.\n+\t* dwarf2out.c (insert_double): New function.\n+\t(loc_descriptor, add_const_value_attribute): Clean up, use\n+\trtx_to_double_int and insert_double functions.\n+\n 2010-05-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/extend.texi (Inline): Add missing return keyword to examples."}, {"sha": "ab04b68edec1177bfd34b62f262f2b9ab79ac5df", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 27, "deletions": 60, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "patch": "@@ -6116,6 +6116,7 @@ static void add_AT_location_description\t(dw_die_ref, enum dwarf_attribute,\n static void add_data_member_location_attribute (dw_die_ref, tree);\n static bool add_const_value_attribute (dw_die_ref, rtx);\n static void insert_int (HOST_WIDE_INT, unsigned, unsigned char *);\n+static void insert_double (double_int, unsigned char *);\n static void insert_float (const_rtx, unsigned char *);\n static rtx rtl_for_decl_location (tree);\n static bool add_location_or_const_value_attribute (dw_die_ref, tree,\n@@ -13887,10 +13888,8 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  else\n \t    {\n \t      loc_result->dw_loc_oprnd2.val_class = dw_val_class_const_double;\n-\t      loc_result->dw_loc_oprnd2.v.val_double.high\n-\t\t= CONST_DOUBLE_HIGH (rtl);\n-\t      loc_result->dw_loc_oprnd2.v.val_double.low\n-\t\t= CONST_DOUBLE_LOW (rtl);\n+\t      loc_result->dw_loc_oprnd2.v.val_double\n+\t        = rtx_to_double_int (rtl);\n \t    }\n \t}\n       break;\n@@ -13914,39 +13913,14 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t      for (i = 0, p = array; i < length; i++, p += elt_size)\n \t\t{\n \t\t  rtx elt = CONST_VECTOR_ELT (rtl, i);\n-\t\t  HOST_WIDE_INT lo, hi;\n-\n-\t\t  switch (GET_CODE (elt))\n-\t\t    {\n-\t\t    case CONST_INT:\n-\t\t      lo = INTVAL (elt);\n-\t\t      hi = -(lo < 0);\n-\t\t      break;\n-\n-\t\t    case CONST_DOUBLE:\n-\t\t      lo = CONST_DOUBLE_LOW (elt);\n-\t\t      hi = CONST_DOUBLE_HIGH (elt);\n-\t\t      break;\n-\n-\t\t    default:\n-\t\t      gcc_unreachable ();\n-\t\t    }\n+\t\t  double_int val = rtx_to_double_int (elt);\n \n \t\t  if (elt_size <= sizeof (HOST_WIDE_INT))\n-\t\t    insert_int (lo, elt_size, p);\n+\t\t    insert_int (double_int_to_shwi (val), elt_size, p);\n \t\t  else\n \t\t    {\n-\t\t      unsigned char *p0 = p;\n-\t\t      unsigned char *p1 = p + sizeof (HOST_WIDE_INT);\n-\n \t\t      gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));\n-\t\t      if (WORDS_BIG_ENDIAN)\n-\t\t\t{\n-\t\t\t  p0 = p1;\n-\t\t\t  p1 = p;\n-\t\t\t}\n-\t\t      insert_int (lo, sizeof (HOST_WIDE_INT), p0);\n-\t\t      insert_int (hi, sizeof (HOST_WIDE_INT), p1);\n+\t\t      insert_double (val, p);\n \t\t    }\n \t\t}\n \t      break;\n@@ -15334,6 +15308,24 @@ extract_int (const unsigned char *src, unsigned int size)\n   return val;\n }\n \n+/* Writes double_int values to dw_vec_const array.  */\n+\n+static void\n+insert_double (double_int val, unsigned char *dest)\n+{\n+  unsigned char *p0 = dest;\n+  unsigned char *p1 = dest + sizeof (HOST_WIDE_INT);\n+\n+  if (WORDS_BIG_ENDIAN)\n+    {\n+      p0 = p1;\n+      p1 = dest;\n+    }\n+\n+  insert_int ((HOST_WIDE_INT) val.low, sizeof (HOST_WIDE_INT), p0);\n+  insert_int ((HOST_WIDE_INT) val.high, sizeof (HOST_WIDE_INT), p1);\n+}\n+\n /* Writes floating point values to dw_vec_const array.  */\n \n static void\n@@ -15413,39 +15405,14 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \t    for (i = 0, p = array; i < length; i++, p += elt_size)\n \t      {\n \t\trtx elt = CONST_VECTOR_ELT (rtl, i);\n-\t\tHOST_WIDE_INT lo, hi;\n-\n-\t\tswitch (GET_CODE (elt))\n-\t\t  {\n-\t\t  case CONST_INT:\n-\t\t    lo = INTVAL (elt);\n-\t\t    hi = -(lo < 0);\n-\t\t    break;\n-\n-\t\t  case CONST_DOUBLE:\n-\t\t    lo = CONST_DOUBLE_LOW (elt);\n-\t\t    hi = CONST_DOUBLE_HIGH (elt);\n-\t\t    break;\n-\n-\t\t  default:\n-\t\t    gcc_unreachable ();\n-\t\t  }\n+\t\tdouble_int val = rtx_to_double_int (elt);\n \n \t\tif (elt_size <= sizeof (HOST_WIDE_INT))\n-\t\t  insert_int (lo, elt_size, p);\n+\t\t  insert_int (double_int_to_shwi (val), elt_size, p);\n \t\telse\n \t\t  {\n-\t\t    unsigned char *p0 = p;\n-\t\t    unsigned char *p1 = p + sizeof (HOST_WIDE_INT);\n-\n \t\t    gcc_assert (elt_size == 2 * sizeof (HOST_WIDE_INT));\n-\t\t    if (WORDS_BIG_ENDIAN)\n-\t\t      {\n-\t\t\tp0 = p1;\n-\t\t\tp1 = p;\n-\t\t      }\n-\t\t    insert_int (lo, sizeof (HOST_WIDE_INT), p0);\n-\t\t    insert_int (hi, sizeof (HOST_WIDE_INT), p1);\n+\t\t    insert_double (val, p);\n \t\t  }\n \t      }\n \t    break;"}, {"sha": "e0acc0c276605680bac77968985b3874821b0d41", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "patch": "@@ -518,6 +518,27 @@ const_fixed_from_fixed_value (FIXED_VALUE_TYPE value, enum machine_mode mode)\n   return lookup_const_fixed (fixed);\n }\n \n+/* Constructs double_int from rtx CST.  */\n+\n+double_int\n+rtx_to_double_int (const_rtx cst)\n+{\n+  double_int r;\n+\n+  if (CONST_INT_P (cst))\n+      r = shwi_to_double_int (INTVAL (cst));\n+  else if (CONST_DOUBLE_P (cst) && GET_MODE (cst) == VOIDmode)\n+    {\n+      r.low = CONST_DOUBLE_LOW (cst);\n+      r.high = CONST_DOUBLE_HIGH (cst);\n+    }\n+  else\n+    gcc_unreachable ();\n+  \n+  return r;\n+}\n+\n+\n /* Return a CONST_DOUBLE or CONST_INT for a value specified as\n    a double_int.  */\n "}, {"sha": "fe17ae7cba57ed0164d77d05bb4673be122b26eb", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e93ff81965fedc0eaa06c8646a0ae6788f2fec5/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3e93ff81965fedc0eaa06c8646a0ae6788f2fec5", "patch": "@@ -375,6 +375,10 @@ struct GTY(()) rtvec_def {\n /* Predicate yielding nonzero iff X is an rtx for a constant integer.  */\n #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)\n \n+/* Predicate yielding true iff X is an rtx for a double-int\n+   or floating point constant.  */\n+#define CONST_DOUBLE_P(X) (GET_CODE (X) == CONST_DOUBLE)\n+\n /* Predicate yielding nonzero iff X is a label insn.  */\n #define LABEL_P(X) (GET_CODE (X) == CODE_LABEL)\n \n@@ -1627,6 +1631,7 @@ extern void start_sequence (void);\n extern void push_to_sequence (rtx);\n extern void push_to_sequence2 (rtx, rtx);\n extern void end_sequence (void);\n+extern double_int rtx_to_double_int (const_rtx);\n extern rtx immed_double_int_const (double_int, enum machine_mode);\n extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t       enum machine_mode);"}]}