{"sha": "fbac336391e238f8e92714fce5431f69d4f2d338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhYzMzNjM5MWUyMzhmOGU5MjcxNGZjZTU0MzFmNjlkNGYyZDMzOA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-01-23T00:14:31Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-01-23T00:14:31Z"}, "message": "re PR libfortran/19052 (unit 0 not preconnected to standard error)\n\n        PR libgfortran/19052\n        * libgfortran.h (options_t): Add stderr_unit.\n        * io/io.h (error_stream): Declare.\n        * io/open.c (new_unit): Do not terminate abnormally if opening\n        file preconnected to stdin, stdout, or stderr.\n        * io/unit.c (init_units): Initialize stderr_unit.\n        * io/unix.c (error_stream): New function.\n        * runtime/environ.c (GFORTRAN_STDERR_UNIT): New environment variable.\n\nFrom-SVN: r94090", "tree": {"sha": "58334819ab2857c14b05d08b9782ac195c0413b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58334819ab2857c14b05d08b9782ac195c0413b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbac336391e238f8e92714fce5431f69d4f2d338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbac336391e238f8e92714fce5431f69d4f2d338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbac336391e238f8e92714fce5431f69d4f2d338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbac336391e238f8e92714fce5431f69d4f2d338/comments", "author": null, "committer": null, "parents": [{"sha": "a059cdb8632f1a0a64d0ae2b4ada084ab69cac5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a059cdb8632f1a0a64d0ae2b4ada084ab69cac5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a059cdb8632f1a0a64d0ae2b4ada084ab69cac5e"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "c2218fba7179f20167d8321404635d8c89a318fd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -1,3 +1,14 @@\n+2005-01-22  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR libgfortran/19052\n+\t* libgfortran.h (options_t): Add stderr_unit.\n+\t* io/io.h (error_stream): Declare.\n+\t* io/open.c (new_unit): Do not terminate abnormally if opening\n+\tfile preconnected to stdin, stdout, or stderr.\n+\t* io/unit.c (init_units): Initialize stderr_unit.\n+\t* io/unix.c (error_stream): New function.\n+\t* runtime/environ.c (GFORTRAN_STDERR_UNIT): New environment variable.\n+\n 2005-01-22  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/18982"}, {"sha": "694ca1d7ac553bb3eaa5d994bc169e179b2b43a6", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -395,6 +395,9 @@ internal_proto(input_stream);\n extern stream *output_stream (void);\n internal_proto(output_stream);\n \n+extern stream *error_stream (void);\n+internal_proto(error_stream);\n+\n extern int compare_file_filename (stream *, const char *, int);\n internal_proto(compare_file_filename);\n "}, {"sha": "eaeb5a298c0c694c94363af9a73593fb26948cb2", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -323,9 +323,14 @@ new_unit (unit_flags * flags)\n       internal_error (\"new_unit(): Bad status\");\n     }\n \n-  /* Make sure the file isn't already open someplace else.  */\n-\n-  if (find_file () != NULL)\n+  /* Make sure the file isn't already open someplace else.\n+     Do not error if opening file preconnected to stdin, stdout, stderr.  */\n+\n+  u = find_file ();\n+  if (u != NULL\n+      && (options.stdin_unit < 0 || u->unit_number != options.stdin_unit)\n+      && (options.stdout_unit < 0 || u->unit_number != options.stdout_unit)\n+      && (options.stderr_unit < 0 || u->unit_number != options.stderr_unit))\n     {\n       generate_error (ERROR_ALREADY_OPEN, NULL);\n       goto cleanup;"}, {"sha": "ae0771f0816027b6d2c5ddbbe230309d5b8fd233", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -334,6 +334,27 @@ init_units (void)\n       insert_unit (u);\n     }\n \n+  if (options.stderr_unit >= 0)\n+    {\t\t\t\t/* STDERR */\n+      u = get_mem (sizeof (gfc_unit));\n+\n+      u->unit_number = options.stderr_unit;\n+      u->s = error_stream ();\n+\n+      u->flags.action = ACTION_WRITE;\n+\n+      u->flags.access = ACCESS_SEQUENTIAL;\n+      u->flags.form = FORM_FORMATTED;\n+      u->flags.status = STATUS_OLD;\n+      u->flags.blank = BLANK_ZERO;\n+      u->flags.position = POSITION_ASIS;\n+\n+      u->recl = options.default_recl;\n+      u->endfile = AT_ENDFILE;\n+\n+      insert_unit (u);\n+    }\n+\n   /* Calculate the maximum file offset in a portable manner.\n    * max will be the largest signed number for the type gfc_offset.\n    *"}, {"sha": "5dc31a513d9511d40616306268be0b3ab688dba4", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -1160,7 +1160,7 @@ input_stream (void)\n }\n \n \n-/* output_stream()-- Return a stream pointer to the default input stream.\n+/* output_stream()-- Return a stream pointer to the default output stream.\n  * Called on initialization. */\n \n stream *\n@@ -1170,6 +1170,15 @@ output_stream (void)\n }\n \n \n+/* error_stream()-- Return a stream pointer to the default error stream.\n+ * Called on initialization. */\n+\n+stream *\n+error_stream (void)\n+{\n+  return fd_to_stream (STDERR_FILENO, PROT_WRITE);\n+}\n+\n /* init_error_stream()-- Return a pointer to the error stream.  This\n  * subroutine is called when the stream is needed, rather than at\n  * initialization.  We want to work even if memory has been seriously"}, {"sha": "dfa2e409f4b69b338aea3be95cc3036898f2e8f5", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -292,7 +292,7 @@ enum\n \n typedef struct\n {\n-  int stdin_unit, stdout_unit, optional_plus;\n+  int stdin_unit, stdout_unit, stderr_unit, optional_plus;\n   int allocate_init_flag, allocate_init_value;\n   int locus;\n "}, {"sha": "ae82f562b7548841454eaa81444f32aa1634a854", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbac336391e238f8e92714fce5431f69d4f2d338/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=fbac336391e238f8e92714fce5431f69d4f2d338", "patch": "@@ -443,6 +443,11 @@ static variable variable_table[] = {\n    \"Unit number that will be preconnected to standard output\\n\"\n    \"(No preconnection if negative)\"},\n \n+  {\"GFORTRAN_STDERR_UNIT\", 0, &options.stderr_unit, init_integer,\n+   show_integer,\n+   \"Unit number that will be preconnected to standard error\\n\"\n+   \"(No preconnection if negative)\"},\n+\n   {\"GFORTRAN_USE_STDERR\", 1, &options.use_stderr, init_boolean,\n    show_boolean,\n    \"Sends library output to standard error instead of standard output.\"},"}]}