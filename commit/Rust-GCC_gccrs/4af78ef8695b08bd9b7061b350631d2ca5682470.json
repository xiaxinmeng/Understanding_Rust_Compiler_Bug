{"sha": "4af78ef8695b08bd9b7061b350631d2ca5682470", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmNzhlZjg2OTViMDhiZDliNzA2MWIzNTA2MzFkMmNhNTY4MjQ3MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-06-08T12:50:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-06-08T12:50:19Z"}, "message": "Convert dump and optgroup flags to enums\n\ngcc/brig/ChangeLog:\n\t* brigfrontend/brig-to-generic.cc\n\t(brig_to_generic::write_globals): Use TDF_NONE rather than 0.\n\t(dump_function): Likewise.\n\ngcc/c-family/ChangeLog:\n\t* c-pretty-print.c (c_pretty_printer::statement): Use TDF_NONE\n\trather than 0.\n\ngcc/ChangeLog:\n\t* cfg.c (debug): Use TDF_NONE rather than 0.\n\t* cfghooks.c (debug): Likewise.\n\t* dumpfile.c (DUMP_FILE_INFO): Likewise; also for OPTGROUP.\n\t(struct dump_option_value_info): Convert to...\n\t(struct kv_pair): ...this template type.\n\t(dump_options): Convert to kv_pair<dump_flags_t>; use TDF_NONE\n\trather than 0.\n\t(optinfo_verbosity_options): Likewise.\n\t(optgroup_options): Convert to kv_pair<optgroup_flags_t>; use\n\tOPTGROUP_NONE.\n\t(gcc::dump_manager::dump_register): Use optgroup_flags_t rather\n\tthan int for \"optgroup_flags\" param.\n\t(dump_generic_expr_loc): Use dump_flags_t rather than int for\n\t\"dump_kind\" param.\n\t(dump_dec): Likewise.\n\t(dump_finish): Use TDF_NONE rather than 0.\n\t(gcc::dump_manager::opt_info_enable_passes): Use optgroup_flags_t\n\trather than int for \"optgroup_flags\" param.  Use TDF_NONE rather\n\tthan 0.  Update for change to option_ptr.\n\t(opt_info_switch_p_1): Convert \"optgroup_flags\" param from int *\n\tto optgroup_flags_t *.  Use TDF_NONE and OPTGROUP_NONE rather than\n\t0.  Update for changes to optinfo_verbosity_options and\n\toptgroup_options.\n\t(opt_info_switch_p): Convert optgroup_flags from int to\n\toptgroup_flags_t.\n\t(dump_basic_block): Use dump_flags_t rather than int\n\tfor \"dump_kind\" param.\n\t* dumpfile.h (TDF_ADDRESS, TDF_SLIM, TDF_RAW, TDF_DETAILS,\n\tTDF_STATS, TDF_BLOCKS, TDF_VOPS, TDF_LINENO, TDF_UID)\n\tTDF_STMTADDR, TDF_GRAPH, TDF_MEMSYMS, TDF_RHS_ONLY, TDF_ASMNAME,\n\tTDF_EH, TDF_NOUID, TDF_ALIAS, TDF_ENUMERATE_LOCALS, TDF_CSELIB,\n\tTDF_SCEV, TDF_GIMPLE, TDF_FOLDING, MSG_OPTIMIZED_LOCATIONS,\n\tMSG_MISSED_OPTIMIZATION, MSG_NOTE, MSG_ALL, TDF_COMPARE_DEBUG,\n\tTDF_NONE): Convert from macros to...\n\t(enum dump_flag): ...this new enum.\n\t(dump_flags_t): Update to use enum.\n\t(operator|, operator&, operator~, operator|=, operator&=):\n\tImplement for dump_flags_t.\n\t(OPTGROUP_NONE, OPTGROUP_IPA, OPTGROUP_LOOP, OPTGROUP_INLINE,\n\tOPTGROUP_OMP, OPTGROUP_VEC, OPTGROUP_OTHER, OPTGROUP_ALL):\n\tConvert from macros to...\n\t(enum optgroup_flag): ...this new enum.\n\t(optgroup_flags_t): New typedef.\n\t(operator|, operator|=): Implement for optgroup_flags_t.\n\t(struct dump_file_info): Convert field \"alt_flags\" to\n\tdump_flags_t.  Convert field \"optgroup_flags\" to\n\toptgroup_flags_t.\n\t(dump_basic_block): Use dump_flags_t rather than int for param.\n\t(dump_generic_expr_loc): Likewise.\n\t(dump_dec): Likewise.\n\t(dump_register): Convert param \"optgroup_flags\" to\n\toptgroup_flags_t.\n\t(opt_info_enable_passes): Likewise.\n\t* early-remat.c (early_remat::dump_edge_list): Use TDF_NONE rather\n\tthan 0.\n\t* gimple-pretty-print.c (debug): Likewise.\n\t* gimple-ssa-store-merging.c (bswap_replace): Likewise.\n\t(merged_store_group::apply_stores): Likewise.\n\t* gimple-ssa-strength-reduction.c (insert_initializers): Likewise.\n\t* gimple.c (verify_gimple_pp): Likewise.\n\t* graphite-poly.c (print_pbb_body): Likewise.\n\t* passes.c (pass_manager::register_one_dump_file): Convert\n\tlocal \"optgroup_flags\" to optgroup_flags_t.\n\t* print-tree.c (print_node): Use TDF_NONE rather than 0.\n\t(debug): Likewise.\n\t(debug_body): Likewise.\n\t* tree-pass.h (struct pass_data): Convert field \"optgroup_flags\"\n\tto optgroup_flags_t.\n\t* tree-pretty-print.c (print_struct_decl): Use TDF_NONE rather\n\tthan 0.\n\t* tree-ssa-math-opts.c (convert_mult_to_fma_1): Likewise.\n\t(convert_mult_to_fma): Likewise.\n\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n\t* tree-ssa-sccvn.c (vn_eliminate): Likewise.\n\t* tree-vect-data-refs.c (dump_lower_bound): Convert param\n\t\"dump_kind\" to dump_flags_t.\n\nFrom-SVN: r261325", "tree": {"sha": "9b0395fcd2992bfb4e0d71fc9ccf656400b80e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0395fcd2992bfb4e0d71fc9ccf656400b80e1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af78ef8695b08bd9b7061b350631d2ca5682470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af78ef8695b08bd9b7061b350631d2ca5682470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af78ef8695b08bd9b7061b350631d2ca5682470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af78ef8695b08bd9b7061b350631d2ca5682470/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7efc32b58491ec3b1293c41354ff96d458ef884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7efc32b58491ec3b1293c41354ff96d458ef884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7efc32b58491ec3b1293c41354ff96d458ef884"}], "stats": {"total": 447, "additions": 326, "deletions": 121}, "files": [{"sha": "231f673bda54cd22a2cb841e33feafbaec60062f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -1,3 +1,82 @@\n+2018-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cfg.c (debug): Use TDF_NONE rather than 0.\n+\t* cfghooks.c (debug): Likewise.\n+\t* dumpfile.c (DUMP_FILE_INFO): Likewise; also for OPTGROUP.\n+\t(struct dump_option_value_info): Convert to...\n+\t(struct kv_pair): ...this template type.\n+\t(dump_options): Convert to kv_pair<dump_flags_t>; use TDF_NONE\n+\trather than 0.\n+\t(optinfo_verbosity_options): Likewise.\n+\t(optgroup_options): Convert to kv_pair<optgroup_flags_t>; use\n+\tOPTGROUP_NONE.\n+\t(gcc::dump_manager::dump_register): Use optgroup_flags_t rather\n+\tthan int for \"optgroup_flags\" param.\n+\t(dump_generic_expr_loc): Use dump_flags_t rather than int for\n+\t\"dump_kind\" param.\n+\t(dump_dec): Likewise.\n+\t(dump_finish): Use TDF_NONE rather than 0.\n+\t(gcc::dump_manager::opt_info_enable_passes): Use optgroup_flags_t\n+\trather than int for \"optgroup_flags\" param.  Use TDF_NONE rather\n+\tthan 0.  Update for change to option_ptr.\n+\t(opt_info_switch_p_1): Convert \"optgroup_flags\" param from int *\n+\tto optgroup_flags_t *.  Use TDF_NONE and OPTGROUP_NONE rather than\n+\t0.  Update for changes to optinfo_verbosity_options and\n+\toptgroup_options.\n+\t(opt_info_switch_p): Convert optgroup_flags from int to\n+\toptgroup_flags_t.\n+\t(dump_basic_block): Use dump_flags_t rather than int\n+\tfor \"dump_kind\" param.\n+\t* dumpfile.h (TDF_ADDRESS, TDF_SLIM, TDF_RAW, TDF_DETAILS,\n+\tTDF_STATS, TDF_BLOCKS, TDF_VOPS, TDF_LINENO, TDF_UID)\n+\tTDF_STMTADDR, TDF_GRAPH, TDF_MEMSYMS, TDF_RHS_ONLY, TDF_ASMNAME,\n+\tTDF_EH, TDF_NOUID, TDF_ALIAS, TDF_ENUMERATE_LOCALS, TDF_CSELIB,\n+\tTDF_SCEV, TDF_GIMPLE, TDF_FOLDING, MSG_OPTIMIZED_LOCATIONS,\n+\tMSG_MISSED_OPTIMIZATION, MSG_NOTE, MSG_ALL, TDF_COMPARE_DEBUG,\n+\tTDF_NONE): Convert from macros to...\n+\t(enum dump_flag): ...this new enum.\n+\t(dump_flags_t): Update to use enum.\n+\t(operator|, operator&, operator~, operator|=, operator&=):\n+\tImplement for dump_flags_t.\n+\t(OPTGROUP_NONE, OPTGROUP_IPA, OPTGROUP_LOOP, OPTGROUP_INLINE,\n+\tOPTGROUP_OMP, OPTGROUP_VEC, OPTGROUP_OTHER, OPTGROUP_ALL):\n+\tConvert from macros to...\n+\t(enum optgroup_flag): ...this new enum.\n+\t(optgroup_flags_t): New typedef.\n+\t(operator|, operator|=): Implement for optgroup_flags_t.\n+\t(struct dump_file_info): Convert field \"alt_flags\" to\n+\tdump_flags_t.  Convert field \"optgroup_flags\" to\n+\toptgroup_flags_t.\n+\t(dump_basic_block): Use dump_flags_t rather than int for param.\n+\t(dump_generic_expr_loc): Likewise.\n+\t(dump_dec): Likewise.\n+\t(dump_register): Convert param \"optgroup_flags\" to\n+\toptgroup_flags_t.\n+\t(opt_info_enable_passes): Likewise.\n+\t* early-remat.c (early_remat::dump_edge_list): Use TDF_NONE rather\n+\tthan 0.\n+\t* gimple-pretty-print.c (debug): Likewise.\n+\t* gimple-ssa-store-merging.c (bswap_replace): Likewise.\n+\t(merged_store_group::apply_stores): Likewise.\n+\t* gimple-ssa-strength-reduction.c (insert_initializers): Likewise.\n+\t* gimple.c (verify_gimple_pp): Likewise.\n+\t* graphite-poly.c (print_pbb_body): Likewise.\n+\t* passes.c (pass_manager::register_one_dump_file): Convert\n+\tlocal \"optgroup_flags\" to optgroup_flags_t.\n+\t* print-tree.c (print_node): Use TDF_NONE rather than 0.\n+\t(debug): Likewise.\n+\t(debug_body): Likewise.\n+\t* tree-pass.h (struct pass_data): Convert field \"optgroup_flags\"\n+\tto optgroup_flags_t.\n+\t* tree-pretty-print.c (print_struct_decl): Use TDF_NONE rather\n+\tthan 0.\n+\t* tree-ssa-math-opts.c (convert_mult_to_fma_1): Likewise.\n+\t(convert_mult_to_fma): Likewise.\n+\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n+\t* tree-ssa-sccvn.c (vn_eliminate): Likewise.\n+\t* tree-vect-data-refs.c (dump_lower_bound): Convert param\n+\t\"dump_kind\" to dump_flags_t.\n+\n 2018-06-08  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (min, max): Delete."}, {"sha": "90c51a06e04dea2290ad3bf004427bdf0b6b3fb6", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -1,3 +1,9 @@\n+2018-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* brigfrontend/brig-to-generic.cc\n+\t(brig_to_generic::write_globals): Use TDF_NONE rather than 0.\n+\t(dump_function): Likewise.\n+\n 2018-05-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* brigfrontend/brig-function.cc"}, {"sha": "6629db0fdf56edeacabfae3d5962adbd0ce067d2", "filename": "gcc/brig/brigfrontend/brig-to-generic.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -932,8 +932,9 @@ brig_to_generic::write_globals ()\n \t  fprintf (m_dump_file, \"\\n;; Function %s\", kern_name.c_str());\n \t  fprintf (m_dump_file, \"\\n;; enabled by -%s\\n\\n\",\n \t\t   dump_flag_name (TDI_original));\n-\t  print_generic_decl (m_dump_file, launcher, 0);\n-\t  print_generic_expr (m_dump_file, DECL_SAVED_TREE (launcher), 0);\n+\t  print_generic_decl (m_dump_file, launcher, TDF_NONE);\n+\t  print_generic_expr (m_dump_file, DECL_SAVED_TREE (launcher),\n+\t\t\t      TDF_NONE);\n \t  fprintf (m_dump_file, \"\\n\");\n \t}\n \n@@ -1018,8 +1019,8 @@ dump_function (FILE *dump_file, brig_function *f)\n       fprintf (dump_file, \"\\n;; Function %s\", f->m_name.c_str ());\n       fprintf (dump_file, \"\\n;; enabled by -%s\\n\\n\",\n \t       dump_flag_name (TDI_original));\n-      print_generic_decl (dump_file, f->m_func_decl, 0);\n-      print_generic_expr (dump_file, f->m_current_bind_expr, 0);\n+      print_generic_decl (dump_file, f->m_func_decl, TDF_NONE);\n+      print_generic_expr (dump_file, f->m_current_bind_expr, TDF_NONE);\n       fprintf (dump_file, \"\\n\");\n     }\n }"}, {"sha": "0ac89d432da742e93c05b23ee760ab72e590115a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -1,3 +1,8 @@\n+2018-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-pretty-print.c (c_pretty_printer::statement): Use TDF_NONE\n+\trather than 0.\n+\n 2018-06-08  Martin Liska  <mliska@suse.cz>\n \n \t* c-attribs.c (handle_bnd_variable_size_attribute): Remove support"}, {"sha": "efb41c5b9050aebb540efe0988251e6b463778f5", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -2341,7 +2341,7 @@ c_pretty_printer::statement (tree stmt)\n   if (pp_needs_newline (this))\n     pp_newline_and_indent (this, 0);\n \n-  dump_generic_node (this, stmt, pp_indentation (this), 0, true);\n+  dump_generic_node (this, stmt, pp_indentation (this), TDF_NONE, true);\n }\n \n \f"}, {"sha": "6d55516adadc330ce537b50d3cdc51b2153960d3", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -545,8 +545,8 @@ DEBUG_FUNCTION void\n debug (edge_def &ref)\n {\n   /* FIXME (crowl): Is this desireable?  */\n-  dump_edge_info (stderr, &ref, 0, false);\n-  dump_edge_info (stderr, &ref, 0, true);\n+  dump_edge_info (stderr, &ref, TDF_NONE, false);\n+  dump_edge_info (stderr, &ref, TDF_NONE, true);\n }\n \n DEBUG_FUNCTION void"}, {"sha": "ea106e0cb32affd108379dfe4c449e8a3173fe5b", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -288,7 +288,7 @@ dump_bb (FILE *outf, basic_block bb, int indent, dump_flags_t flags)\n DEBUG_FUNCTION void\n debug (basic_block_def &ref)\n {\n-  dump_bb (stderr, &ref, 0, 0);\n+  dump_bb (stderr, &ref, 0, TDF_NONE);\n }\n \n DEBUG_FUNCTION void"}, {"sha": "e94e274782934b5bcb5306337ff157c880b3e861", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -50,8 +50,8 @@ const char *dump_file_name;\n dump_flags_t dump_flags;\n \n #define DUMP_FILE_INFO(suffix, swtch, dkind, num) \\\n-  {suffix, swtch, NULL, NULL, NULL, NULL, NULL, dkind, 0, 0, 0, 0, 0, num, \\\n-   false, false}\n+  {suffix, swtch, NULL, NULL, NULL, NULL, NULL, dkind, TDF_NONE, TDF_NONE, \\\n+   OPTGROUP_NONE, 0, 0, num, false, false}\n \n /* Table of tree dump switches. This must be consistent with the\n    TREE_DUMP_INDEX enumeration in dumpfile.h.  */\n@@ -74,15 +74,16 @@ static struct dump_file_info dump_files[TDI_end] =\n };\n \n /* Define a name->number mapping for a dump flag value.  */\n-struct dump_option_value_info\n+template <typename ValueType>\n+struct kv_pair\n {\n   const char *const name;\t/* the name of the value */\n-  const dump_flags_t value;\t/* the value of the name */\n+  const ValueType value;\t/* the value of the name */\n };\n \n /* Table of dump options. This must be consistent with the TDF_* flags\n    in dumpfile.h and opt_info_options below. */\n-static const struct dump_option_value_info dump_options[] =\n+static const kv_pair<dump_flags_t> dump_options[] =\n {\n   {\"address\", TDF_ADDRESS},\n   {\"asmname\", TDF_ASMNAME},\n@@ -114,31 +115,31 @@ static const struct dump_option_value_info dump_options[] =\n   {\"all\", dump_flags_t (~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_GRAPH\n \t\t\t| TDF_STMTADDR | TDF_RHS_ONLY | TDF_NOUID\n \t\t\t| TDF_ENUMERATE_LOCALS | TDF_SCEV | TDF_GIMPLE))},\n-  {NULL, 0}\n+  {NULL, TDF_NONE}\n };\n \n /* A subset of the dump_options table which is used for -fopt-info\n    types. This must be consistent with the MSG_* flags in dumpfile.h.\n  */\n-static const struct dump_option_value_info optinfo_verbosity_options[] =\n+static const kv_pair<dump_flags_t> optinfo_verbosity_options[] =\n {\n   {\"optimized\", MSG_OPTIMIZED_LOCATIONS},\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n   {\"all\", MSG_ALL},\n-  {NULL, 0}\n+  {NULL, TDF_NONE}\n };\n \n /* Flags used for -fopt-info groups.  */\n-static const struct dump_option_value_info optgroup_options[] =\n+static const kv_pair<optgroup_flags_t> optgroup_options[] =\n {\n   {\"ipa\", OPTGROUP_IPA},\n   {\"loop\", OPTGROUP_LOOP},\n   {\"inline\", OPTGROUP_INLINE},\n   {\"omp\", OPTGROUP_OMP},\n   {\"vec\", OPTGROUP_VEC},\n   {\"optall\", OPTGROUP_ALL},\n-  {NULL, 0}\n+  {NULL, OPTGROUP_NONE}\n };\n \n gcc::dump_manager::dump_manager ():\n@@ -173,7 +174,8 @@ gcc::dump_manager::~dump_manager ()\n unsigned int\n gcc::dump_manager::\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       dump_kind dkind, int optgroup_flags, bool take_ownership)\n+\t       dump_kind dkind, optgroup_flags_t optgroup_flags,\n+\t       bool take_ownership)\n {\n   int num = m_next_dump++;\n \n@@ -425,7 +427,7 @@ dump_generic_expr (dump_flags_t dump_kind, dump_flags_t extra_dump_flags,\n    location.  */\n \n void\n-dump_generic_expr_loc (int dump_kind, source_location loc,\n+dump_generic_expr_loc (dump_flags_t dump_kind, source_location loc,\n \t\t       dump_flags_t extra_dump_flags, tree t)\n {\n   if (dump_file && (dump_kind & pflags))\n@@ -492,7 +494,7 @@ dump_printf_loc (dump_flags_t dump_kind, source_location loc,\n \n template<unsigned int N, typename C>\n void\n-dump_dec (int dump_kind, const poly_int<N, C> &value)\n+dump_dec (dump_flags_t dump_kind, const poly_int<N, C> &value)\n {\n   STATIC_ASSERT (poly_coeff_traits<C>::signedness >= 0);\n   signop sgn = poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED;\n@@ -503,11 +505,11 @@ dump_dec (int dump_kind, const poly_int<N, C> &value)\n     print_dec (value, alt_dump_file, sgn);\n }\n \n-template void dump_dec (int, const poly_uint16 &);\n-template void dump_dec (int, const poly_int64 &);\n-template void dump_dec (int, const poly_uint64 &);\n-template void dump_dec (int, const poly_offset_int &);\n-template void dump_dec (int, const poly_widest_int &);\n+template void dump_dec (dump_flags_t, const poly_uint16 &);\n+template void dump_dec (dump_flags_t, const poly_int64 &);\n+template void dump_dec (dump_flags_t, const poly_uint64 &);\n+template void dump_dec (dump_flags_t, const poly_offset_int &);\n+template void dump_dec (dump_flags_t, const poly_widest_int &);\n \n /* Start a dump for PHASE. Store user-supplied dump flags in\n    *FLAG_PTR.  Return the number of streams opened.  Set globals\n@@ -581,9 +583,9 @@ dump_finish (int phase)\n   dfi->pstream = NULL;\n   dump_file = NULL;\n   alt_dump_file = NULL;\n-  dump_flags = TDI_none;\n-  alt_flags = 0;\n-  pflags = 0;\n+  dump_flags = TDF_NONE;\n+  alt_flags = TDF_NONE;\n+  pflags = TDF_NONE;\n }\n \n /* Begin a tree dump for PHASE. Stores any user supplied flag in\n@@ -749,7 +751,7 @@ dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename)\n \n int\n gcc::dump_manager::\n-opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,\n+opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,\n \t\t\tconst char *filename)\n {\n   int n = 0;\n@@ -816,11 +818,11 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n     return 0;\n \n   ptr = option_value;\n-  flags = 0;\n+  flags = TDF_NONE;\n \n   while (*ptr)\n     {\n-      const struct dump_option_value_info *option_ptr;\n+      const struct kv_pair<dump_flags_t> *option_ptr;\n       const char *end_ptr;\n       const char *eq_ptr;\n       unsigned length;\n@@ -902,8 +904,8 @@ dump_switch_p (const char *arg)\n    and filename.  Return non-zero if it is a recognized switch.  */\n \n static int\n-opt_info_switch_p_1 (const char *arg, dump_flags_t *flags, int *optgroup_flags,\n-                     char **filename)\n+opt_info_switch_p_1 (const char *arg, dump_flags_t *flags,\n+\t\t     optgroup_flags_t *optgroup_flags, char **filename)\n {\n   const char *option_value;\n   const char *ptr;\n@@ -912,15 +914,14 @@ opt_info_switch_p_1 (const char *arg, dump_flags_t *flags, int *optgroup_flags,\n   ptr = option_value;\n \n   *filename = NULL;\n-  *flags = 0;\n-  *optgroup_flags = 0;\n+  *flags = TDF_NONE;\n+  *optgroup_flags = OPTGROUP_NONE;\n \n   if (!ptr)\n     return 1;       /* Handle '-fopt-info' without any additional options.  */\n \n   while (*ptr)\n     {\n-      const struct dump_option_value_info *option_ptr;\n       const char *end_ptr;\n       const char *eq_ptr;\n       unsigned length;\n@@ -937,16 +938,17 @@ opt_info_switch_p_1 (const char *arg, dump_flags_t *flags, int *optgroup_flags,\n \tend_ptr = ptr + strlen (ptr);\n       length = end_ptr - ptr;\n \n-      for (option_ptr = optinfo_verbosity_options; option_ptr->name;\n-           option_ptr++)\n+      for (const kv_pair<dump_flags_t> *option_ptr = optinfo_verbosity_options;\n+\t   option_ptr->name; option_ptr++)\n \tif (strlen (option_ptr->name) == length\n \t    && !memcmp (option_ptr->name, ptr, length))\n           {\n             *flags |= option_ptr->value;\n \t    goto found;\n           }\n \n-      for (option_ptr = optgroup_options; option_ptr->name; option_ptr++)\n+      for (const kv_pair<optgroup_flags_t> *option_ptr = optgroup_options;\n+\t   option_ptr->name; option_ptr++)\n \tif (strlen (option_ptr->name) == length\n \t    && !memcmp (option_ptr->name, ptr, length))\n           {\n@@ -981,7 +983,7 @@ int\n opt_info_switch_p (const char *arg)\n {\n   dump_flags_t flags;\n-  int optgroup_flags;\n+  optgroup_flags_t optgroup_flags;\n   char *filename;\n   static char *file_seen = NULL;\n   gcc::dump_manager *dumps = g->get_dumps ();\n@@ -1012,7 +1014,7 @@ opt_info_switch_p (const char *arg)\n /* Print basic block on the dump streams.  */\n \n void\n-dump_basic_block (int dump_kind, basic_block bb, int indent)\n+dump_basic_block (dump_flags_t dump_kind, basic_block bb, int indent)\n {\n   if (dump_file && (dump_kind & pflags))\n     dump_bb (dump_file, bb, indent, TDF_DETAILS);"}, {"sha": "153f91ef57e54305c1543ecae52b0aa35e6cbbbe", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 171, "deletions": 60, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -58,65 +58,175 @@ enum dump_kind\n    the DUMP_OPTIONS array in dumpfile.c. The TDF_* flags coexist with\n    MSG_* flags (for -fopt-info) and the bit values must be chosen to\n    allow that.  */\n-#define TDF_ADDRESS\t(1 << 0)\t/* dump node addresses */\n-#define TDF_SLIM\t(1 << 1)\t/* don't go wild following links */\n-#define TDF_RAW\t\t(1 << 2)\t/* don't unparse the function */\n-#define TDF_DETAILS\t(1 << 3)\t/* show more detailed info about\n-\t\t\t\t\t   each pass */\n-#define TDF_STATS\t(1 << 4)\t/* dump various statistics about\n-\t\t\t\t\t   each pass */\n-#define TDF_BLOCKS\t(1 << 5)\t/* display basic block boundaries */\n-#define TDF_VOPS\t(1 << 6)\t/* display virtual operands */\n-#define TDF_LINENO\t(1 << 7)\t/* display statement line numbers */\n-#define TDF_UID\t\t(1 << 8)\t/* display decl UIDs */\n-\n-#define TDF_STMTADDR\t(1 << 9)       /* Address of stmt.  */\n-\n-#define TDF_GRAPH\t(1 << 10)\t/* a graph dump is being emitted */\n-#define TDF_MEMSYMS\t(1 << 11)\t/* display memory symbols in expr.\n-\t\t\t\t\t   Implies TDF_VOPS.  */\n-\n-#define TDF_RHS_ONLY\t(1 << 12)\t/* a flag to only print the RHS of\n-\t\t\t\t\t   a gimple stmt.  */\n-#define TDF_ASMNAME\t(1 << 13)\t/* display asm names of decls  */\n-#define TDF_EH\t\t(1 << 14)\t/* display EH region number\n-\t\t\t\t\t   holding this gimple statement.  */\n-#define TDF_NOUID\t(1 << 15)\t/* omit UIDs from dumps.  */\n-#define TDF_ALIAS\t(1 << 16)\t/* display alias information  */\n-#define TDF_ENUMERATE_LOCALS (1 << 17)\t/* Enumerate locals by uid.  */\n-#define TDF_CSELIB\t(1 << 18)\t/* Dump cselib details.  */\n-#define TDF_SCEV\t(1 << 19)\t/* Dump SCEV details.  */\n-#define TDF_GIMPLE\t(1 << 20)\t/* Dump in GIMPLE FE syntax  */\n-#define TDF_FOLDING\t(1 << 21)\t/* Dump folding details.  */\n-#define MSG_OPTIMIZED_LOCATIONS\t (1 << 22)  /* -fopt-info optimized sources */\n-#define MSG_MISSED_OPTIMIZATION\t (1 << 23)  /* missed opportunities */\n-#define MSG_NOTE\t\t (1 << 24)  /* general optimization info */\n-#define MSG_ALL\t\t(MSG_OPTIMIZED_LOCATIONS | MSG_MISSED_OPTIMIZATION \\\n-\t\t\t | MSG_NOTE)\n-#define TDF_COMPARE_DEBUG (1 << 25)\t/* Dumping for -fcompare-debug.  */\n-\n-\n-/* Value of TDF_NONE is used just for bits filtered by TDF_KIND_MASK.  */\n-\n-#define TDF_NONE 0\n+enum dump_flag\n+{\n+  /* Value of TDF_NONE is used just for bits filtered by TDF_KIND_MASK.  */\n+  TDF_NONE  = 0,\n+\n+  /* Dump node addresses.  */\n+  TDF_ADDRESS = (1 << 0),\n+\n+  /* Don't go wild following links.  */\n+  TDF_SLIM = (1 << 1),\n+\n+  /* Don't unparse the function.  */\n+  TDF_RAW = (1 << 2),\n+\n+  /* Show more detailed info about each pass.  */\n+  TDF_DETAILS = (1 << 3),\n+\n+  /* Dump various statistics about each pass.  */\n+  TDF_STATS = (1 << 4),\n+\n+  /* Display basic block boundaries.  */\n+  TDF_BLOCKS = (1 << 5),\n+\n+  /* Display virtual operands.  */\n+  TDF_VOPS = (1 << 6),\n+\n+  /* Display statement line numbers.  */\n+  TDF_LINENO = (1 << 7),\n+\n+  /* Display decl UIDs.  */\n+  TDF_UID  = (1 << 8),\n+\n+  /* Address of stmt.  */\n+  TDF_STMTADDR = (1 << 9),\n+\n+  /* A graph dump is being emitted.  */\n+  TDF_GRAPH = (1 << 10),\n+\n+  /* Display memory symbols in expr.\n+     Implies TDF_VOPS.  */\n+  TDF_MEMSYMS = (1 << 11),\n+\n+  /* A flag to only print the RHS of a gimple stmt.  */\n+  TDF_RHS_ONLY = (1 << 12),\n+\n+  /* Display asm names of decls.  */\n+  TDF_ASMNAME = (1 << 13),\n+\n+  /* Display EH region number holding this gimple statement.  */\n+  TDF_EH  = (1 << 14),\n+\n+  /* Omit UIDs from dumps.  */\n+  TDF_NOUID = (1 << 15),\n+\n+  /* Display alias information.  */\n+  TDF_ALIAS = (1 << 16),\n+\n+  /* Enumerate locals by uid.  */\n+  TDF_ENUMERATE_LOCALS = (1 << 17),\n+\n+  /* Dump cselib details.  */\n+  TDF_CSELIB = (1 << 18),\n+\n+  /* Dump SCEV details.  */\n+  TDF_SCEV = (1 << 19),\n+\n+  /* Dump in GIMPLE FE syntax  */\n+  TDF_GIMPLE = (1 << 20),\n+\n+  /* Dump folding details.  */\n+  TDF_FOLDING = (1 << 21),\n+\n+  /* -fopt-info optimized sources.  */\n+  MSG_OPTIMIZED_LOCATIONS = (1 << 22),\n+\n+  /* Missed opportunities.  */\n+  MSG_MISSED_OPTIMIZATION = (1 << 23),\n+\n+  /* General optimization info.  */\n+  MSG_NOTE = (1 << 24),\n+\n+  MSG_ALL = (MSG_OPTIMIZED_LOCATIONS\n+\t     | MSG_MISSED_OPTIMIZATION\n+\t     | MSG_NOTE),\n+\n+  /* Dumping for -fcompare-debug.  */\n+  TDF_COMPARE_DEBUG = (1 << 25)\n+};\n+\n+/* Dump flags type.  */\n+\n+typedef enum dump_flag dump_flags_t;\n+\n+static inline dump_flags_t\n+operator| (dump_flags_t lhs, dump_flags_t rhs)\n+{\n+  return (dump_flags_t)((int)lhs | (int)rhs);\n+}\n+\n+static inline dump_flags_t\n+operator& (dump_flags_t lhs, dump_flags_t rhs)\n+{\n+  return (dump_flags_t)((int)lhs & (int)rhs);\n+}\n+\n+static inline dump_flags_t\n+operator~ (dump_flags_t flags)\n+{\n+  return (dump_flags_t)~((int)flags);\n+}\n+\n+static inline dump_flags_t &\n+operator|= (dump_flags_t &lhs, dump_flags_t rhs)\n+{\n+  lhs = (dump_flags_t)((int)lhs | (int)rhs);\n+  return lhs;\n+}\n+\n+static inline dump_flags_t &\n+operator&= (dump_flags_t &lhs, dump_flags_t rhs)\n+{\n+  lhs = (dump_flags_t)((int)lhs & (int)rhs);\n+  return lhs;\n+}\n \n /* Flags to control high-level -fopt-info dumps.  Usually these flags\n    define a group of passes.  An optimization pass can be part of\n    multiple groups.  */\n-#define OPTGROUP_NONE\t     (0)\n-#define OPTGROUP_IPA\t     (1 << 1)\t/* IPA optimization passes */\n-#define OPTGROUP_LOOP\t     (1 << 2)\t/* Loop optimization passes */\n-#define OPTGROUP_INLINE\t     (1 << 3)\t/* Inlining passes */\n-#define OPTGROUP_OMP\t     (1 << 4)\t/* OMP (Offloading and Multi\n-\t\t\t\t\t   Processing) transformations */\n-#define OPTGROUP_VEC\t     (1 << 5)\t/* Vectorization passes */\n-#define OPTGROUP_OTHER\t     (1 << 6)\t/* All other passes */\n-#define OPTGROUP_ALL\t     (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE \\\n-\t\t\t      | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)\n \n-/* Dump flags type.  */\n+enum optgroup_flag\n+{\n+  OPTGROUP_NONE = 0,\n+\n+  /* IPA optimization passes */\n+  OPTGROUP_IPA  = (1 << 1),\n+\n+  /* Loop optimization passes */\n+  OPTGROUP_LOOP = (1 << 2),\n+\n+  /* Inlining passes */\n+  OPTGROUP_INLINE = (1 << 3),\n \n-typedef uint64_t dump_flags_t;\n+  /* OMP (Offloading and Multi Processing) transformations */\n+  OPTGROUP_OMP = (1 << 4),\n+\n+  /* Vectorization passes */\n+  OPTGROUP_VEC = (1 << 5),\n+\n+  /* All other passes */\n+  OPTGROUP_OTHER = (1 << 6),\n+\n+  OPTGROUP_ALL = (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE\n+\t\t  | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)\n+};\n+\n+typedef enum optgroup_flag optgroup_flags_t;\n+\n+static inline optgroup_flags_t\n+operator| (optgroup_flags_t lhs, optgroup_flags_t rhs)\n+{\n+  return (optgroup_flags_t)((int)lhs | (int)rhs);\n+}\n+\n+static inline optgroup_flags_t &\n+operator|= (optgroup_flags_t &lhs, optgroup_flags_t rhs)\n+{\n+  lhs = (optgroup_flags_t)((int)lhs | (int)rhs);\n+  return lhs;\n+}\n \n /* Define a tree dump switch.  */\n struct dump_file_info\n@@ -140,9 +250,9 @@ struct dump_file_info\n   /* Dump flags.  */\n   dump_flags_t pflags;\n   /* A pass flags for -fopt-info.  */\n-  int alt_flags;\n+  dump_flags_t alt_flags;\n   /* Flags for -fopt-info given by a user.  */\n-  int optgroup_flags;\n+  optgroup_flags_t optgroup_flags;\n   /* State of pass-specific stream.  */\n   int pstate;\n   /* State of the -fopt-info stream.  */\n@@ -166,8 +276,8 @@ extern void dump_printf (dump_flags_t, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void dump_printf_loc (dump_flags_t, source_location,\n                              const char *, ...) ATTRIBUTE_PRINTF_3;\n extern void dump_function (int phase, tree fn);\n-extern void dump_basic_block (int, basic_block, int);\n-extern void dump_generic_expr_loc (int, source_location, int, tree);\n+extern void dump_basic_block (dump_flags_t, basic_block, int);\n+extern void dump_generic_expr_loc (dump_flags_t, source_location, dump_flags_t, tree);\n extern void dump_generic_expr (dump_flags_t, dump_flags_t, tree);\n extern void dump_gimple_stmt_loc (dump_flags_t, source_location, dump_flags_t,\n \t\t\t\t  gimple *, int);\n@@ -176,7 +286,7 @@ extern void print_combine_total_stats (void);\n extern bool enable_rtl_dump_file (void);\n \n template<unsigned int N, typename C>\n-void dump_dec (int, const poly_int<N, C> &);\n+void dump_dec (dump_flags_t, const poly_int<N, C> &);\n \n /* In tree-dump.c  */\n extern void dump_node (const_tree, dump_flags_t, FILE *);\n@@ -214,7 +324,8 @@ class dump_manager\n      SUFFIX, SWTCH, and GLOB. */\n   unsigned int\n   dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t\t dump_kind dkind, int optgroup_flags, bool take_ownership);\n+\t\t dump_kind dkind, optgroup_flags_t optgroup_flags,\n+\t\t bool take_ownership);\n \n   /* Allow languages and middle-end to register their dumps before the\n      optimization passes.  */\n@@ -275,7 +386,7 @@ class dump_manager\n   dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename);\n \n   int\n-  opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,\n+  opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,\n \t\t\t  const char *filename);\n \n private:"}, {"sha": "776b2d03f43e0f194f12f3aaf3783eaa8c50b79e", "filename": "gcc/early-remat.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fearly-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fearly-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fearly-remat.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -657,7 +657,7 @@ early_remat::dump_edge_list (basic_block bb, bool do_succ)\n   edge e;\n   edge_iterator ei;\n   FOR_EACH_EDGE (e, ei, do_succ ? bb->succs : bb->preds)\n-    dump_edge_info (dump_file, e, 0, do_succ);\n+    dump_edge_info (dump_file, e, TDF_NONE, do_succ);\n }\n \n /* Print information about basic block BB to the dump file.  */"}, {"sha": "405d9e3e3bc5adce8d3f6ccd7647ec2d007a0b03", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -153,7 +153,7 @@ print_gimple_stmt (FILE *file, gimple *g, int spc, dump_flags_t flags)\n DEBUG_FUNCTION void\n debug (gimple &ref)\n {\n-  print_gimple_stmt (stderr, &ref, 0, 0);\n+  print_gimple_stmt (stderr, &ref, 0, TDF_NONE);\n }\n \n DEBUG_FUNCTION void"}, {"sha": "6d7e0ebe717d7be8d5a16222addac07c27fc3c7b", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -1083,7 +1083,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \t    print_gimple_stmt (dump_file, cur_stmt, 0);\n \t  else\n \t    {\n-\t      print_generic_expr (dump_file, tgt, 0);\n+\t      print_generic_expr (dump_file, tgt, TDF_NONE);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}\n@@ -1153,7 +1153,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \tprint_gimple_stmt (dump_file, cur_stmt, 0);\n       else\n \t{\n-\t  print_generic_expr (dump_file, tgt, 0);\n+\t  print_generic_expr (dump_file, tgt, TDF_NONE);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -2020,7 +2020,7 @@ merged_store_group::apply_stores ()\n \t  if (ret)\n \t    {\n \t      fputs (\"After writing \", dump_file);\n-\t      print_generic_expr (dump_file, cst, 0);\n+\t      print_generic_expr (dump_file, cst, TDF_NONE);\n \t      fprintf (dump_file, \" of size \" HOST_WIDE_INT_PRINT_DEC\n \t\t       \" at position %d\\n\", info->bitsize, pos_in_buffer);\n \t      fputs (\"  the merged value contains \", dump_file);"}, {"sha": "ea81adca7ea8338483292553f3b93c330f976275", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -3379,7 +3379,7 @@ insert_initializers (slsr_cand_t c)\n \t      fputs (\"Using existing initializer: \", dump_file);\n \t      print_gimple_stmt (dump_file,\n \t\t\t\t SSA_NAME_DEF_STMT (incr_vec[i].initializer),\n-\t\t\t\t 0, 0);\n+\t\t\t\t 0, TDF_NONE);\n \t    }\n \t  continue;\n \t}"}, {"sha": "afdf583256ca1012fcd6a4074db0791b7d67275e", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -3153,7 +3153,7 @@ static void\n verify_gimple_pp (const char *expected, gimple *stmt)\n {\n   pretty_printer pp;\n-  pp_gimple_stmt_1 (&pp, stmt, 0 /* spc */, 0 /* flags */);\n+  pp_gimple_stmt_1 (&pp, stmt, 0 /* spc */, TDF_NONE /* flags */);\n   ASSERT_STREQ (expected, pp_formatted_text (&pp));\n }\n "}, {"sha": "51ca03895e49f6a006d9392c5c0ed77c96e91b47", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -402,7 +402,7 @@ static void\n print_pbb_body (FILE *file, poly_bb_p pbb)\n {\n   fprintf (file, \"Body (\\n\");\n-  dump_bb (file, pbb_bb (pbb), 0, 0);\n+  dump_bb (file, pbb_bb (pbb), 0, TDF_NONE);\n   fprintf (file, \")\\n\");\n }\n "}, {"sha": "01a441ab280dab4262446997d5ddee0982b22abd", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -746,7 +746,7 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n   char num[11];\n   dump_kind dkind;\n   int id;\n-  int optgroup_flags = OPTGROUP_NONE;\n+  optgroup_flags_t optgroup_flags = OPTGROUP_NONE;\n   gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n \n   /* See below in next_pass_1.  */"}, {"sha": "5c736c5b129da30e8b39926e38451b50db08c6bd", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -894,7 +894,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  {\n \t    pretty_printer buffer;\n \t    buffer.buffer->stream = file;\n-\t    pp_gimple_stmt_1 (&buffer, SSA_NAME_DEF_STMT (node), indent + 4, 0);\n+\t    pp_gimple_stmt_1 (&buffer, SSA_NAME_DEF_STMT (node), indent + 4,\n+\t\t\t      TDF_NONE);\n \t    pp_flush (&buffer);\n \t  }\n \n@@ -1039,7 +1040,7 @@ dump_tree_via_hooks (const tree_node *ptr, dump_flags_t options)\n DEBUG_FUNCTION void\n debug (const tree_node &ref)\n {\n-  dump_tree_via_hooks (&ref, 0);\n+  dump_tree_via_hooks (&ref, TDF_NONE);\n }\n \n DEBUG_FUNCTION void\n@@ -1070,7 +1071,7 @@ DEBUG_FUNCTION void\n debug_body (const tree_node &ref)\n {\n   if (TREE_CODE (&ref) == FUNCTION_DECL)\n-    dump_function_to_file (const_cast <tree_node*> (&ref), stderr, 0);\n+    dump_function_to_file (const_cast <tree_node*> (&ref), stderr, TDF_NONE);\n   else\n     debug (ref);\n }"}, {"sha": "af15adc8e0cf39246791fd87a50e3f9502eb99a1", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -47,7 +47,7 @@ struct pass_data\n   const char *name;\n \n   /* The -fopt-info optimization group flags as defined in dumpfile.h. */\n-  unsigned int optinfo_flags;\n+  optgroup_flags_t optinfo_flags;\n \n   /* The timevar id associated with this pass.  */\n   /* ??? Ideally would be dynamically assigned.  */"}, {"sha": "63276bce5be47cb819270c4723df565ece2e6c03", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -3416,7 +3416,7 @@ print_struct_decl (pretty_printer *pp, const_tree node, int spc,\n \t\t|| TREE_CODE (node) == QUAL_UNION_TYPE))\n \tpp_string (pp, \"union \");\n \n-      dump_generic_node (pp, TYPE_NAME (node), spc, 0, false);\n+      dump_generic_node (pp, TYPE_NAME (node), spc, TDF_NONE, false);\n     }\n \n   /* Print the contents of the structure.  */"}, {"sha": "187ca5a3b019b489138bc9cd75b77be05fa76130", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -2711,7 +2711,7 @@ convert_mult_to_fma_1 (tree mul_result, tree op1, tree op2)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Generated FMA \");\n-\t  print_gimple_stmt (dump_file, gsi_stmt (gsi), 0, 0);\n+\t  print_gimple_stmt (dump_file, gsi_stmt (gsi), 0, TDF_NONE);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -3047,7 +3047,7 @@ convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Deferred generating FMA for multiplication \");\n-\t  print_gimple_stmt (dump_file, mul_stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, mul_stmt, 0, TDF_NONE);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n "}, {"sha": "97a53cd27cdfafba631f4d1984c03043a7c22125", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -1606,7 +1606,7 @@ undistribute_ops_list (enum tree_code opcode,\n     {\n       fprintf (dump_file, \"searching for un-distribute opportunities \");\n       print_generic_expr (dump_file,\n-\t(*ops)[bitmap_first_set_bit (candidates)]->op, 0);\n+\t(*ops)[bitmap_first_set_bit (candidates)]->op, TDF_NONE);\n       fprintf (dump_file, \" %d\\n\", nr_candidates);\n     }\n "}, {"sha": "3d025c288dd633cf0001eb86ab4fd7cc19d84d54", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -5992,7 +5992,7 @@ vn_eliminate (bitmap inserted_exprs)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Removing dead stmt \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0, TDF_NONE);\n \t}\n \n       gimple_stmt_iterator gsi = gsi_for_stmt (stmt);"}, {"sha": "3eb67c93dff07e18f6ea98805f5a06920385c960", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af78ef8695b08bd9b7061b350631d2ca5682470/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4af78ef8695b08bd9b7061b350631d2ca5682470", "patch": "@@ -3254,7 +3254,7 @@ dependence_distance_ge_vf (data_dependence_relation *ddr,\n /* Dump LOWER_BOUND using flags DUMP_KIND.  Dumps are known to be enabled.  */\n \n static void\n-dump_lower_bound (int dump_kind, const vec_lower_bound &lower_bound)\n+dump_lower_bound (dump_flags_t dump_kind, const vec_lower_bound &lower_bound)\n {\n   dump_printf (dump_kind, \"%s (\", lower_bound.unsigned_p ? \"unsigned\" : \"abs\");\n   dump_generic_expr (dump_kind, TDF_SLIM, lower_bound.expr);"}]}