{"sha": "139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5Mzg2YmE1NmNlZjNhOWVkNjBhMWE5ODI3ZWViODM5ZjMzZjhiMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-06-21T15:39:02Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-06-21T15:39:02Z"}, "message": "Alpha patch from Jeff Sturm:\n\n\t* os_dep.c (GC_init_linuxalpha): New function.\n\t* misc.c: Initialize for alpha linux.\n\t* gc_priv.h (GC_test_and_set): Define for alpha.\n\t* config.h: Don't assume __data_start on alpha.\n\nFrom-SVN: r27670", "tree": {"sha": "3106fd3ac81e89c3228b996bdc3635c9cd0205f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3106fd3ac81e89c3228b996bdc3635c9cd0205f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/comments", "author": null, "committer": null, "parents": [{"sha": "d0dd4837f817c8bf12a9778a6b4128b346b6f77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dd4837f817c8bf12a9778a6b4128b346b6f77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0dd4837f817c8bf12a9778a6b4128b346b6f77d"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "af461baff29be48d537f88d07f877147f3a2144d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "patch": "@@ -1,5 +1,11 @@\n 1999-06-21  Tom Tromey  <tromey@cygnus.com>\n \n+\tAlpha patch from Jeff Sturm:\n+\t* os_dep.c (GC_init_linuxalpha): New function.\n+\t* misc.c: Initialize for alpha linux.\n+\t* gc_priv.h (GC_test_and_set): Define for alpha.\n+\t* config.h: Don't assume __data_start on alpha.\n+\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (libgcjgc_la_LDFLAGS): Use -version-info, not\n \t-release."}, {"sha": "89110a6b82472d1b4c66468f7c45ee805f5a1033", "filename": "boehm-gc/config.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfig.h?ref=139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "patch": "@@ -844,8 +844,8 @@\n #       define CPP_WORDSZ 64\n #       define STACKBOTTOM ((ptr_t) 0x120000000)\n #       ifdef __ELF__\n-            extern int __data_start;\n-#           define DATASTART &__data_start\n+#           define DATASTART GC_data_start\n+#           define USE_PROC\n #           define DYNAMIC_LOADING\n #       else\n #           define DATASTART ((ptr_t) 0x140000000)"}, {"sha": "cc8b1476ddc2da6e56ab5b9751bc9168cea68e19", "filename": "boehm-gc/gc_priv.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_priv.h?ref=139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "patch": "@@ -442,10 +442,32 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n \t\t: \"0\"(1), \"m\"(*(addr)));\n \t  return oldval;\n        }\n+       inline static void GC_clear(volatile unsigned int *addr) {\n+          *(addr) = 0;\n+       }\n+#    elif defined(__alpha__)\n+       inline static int GC_test_and_set(volatile unsigned int *addr) {\n+        long oldval, temp;\n+\n+        __asm__ __volatile__(\n+              \"1:\\tldl_l %0,%3\\n\"\n+              \"\\tbne %0,2f\\n\"\n+              \"\\tor $31,1,%1\\n\"\n+              \"\\tstl_c %1,%2\\n\"\n+              \"\\tbeq %1,1b\\n\"\n+              \"2:\\tmb\\n\"\n+              : \"=&r\"(oldval), \"=&r\"(temp), \"=m\"(*(addr))\n+              : \"m\"(*(addr))\n+              : \"memory\");\n+        return (int)oldval;\n+       }\n+       inline static void GC_clear(volatile unsigned int *addr) {\n+          __asm__ __volatile__(\"mb\": : :\"memory\");\n+          *(addr) = 0;\n+       }\n #    else\n        -- > Need implementation of GC_test_and_set()\n #    endif\n-#    define GC_clear(addr) (*(addr) = 0)\n \n      extern volatile unsigned int GC_allocate_lock;\n \t/* This is not a mutex because mutexes that obey the (optional)     */"}, {"sha": "70f583f982d5d91b726698fefd908e92e2c77c80", "filename": "boehm-gc/misc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmisc.c?ref=139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "patch": "@@ -436,6 +436,9 @@ void GC_init_inner()\n #   if defined(LINUX) && defined(POWERPC)\n \tGC_init_linuxppc();\n #   endif\n+#   if defined(LINUX) && defined(ALPHA)\n+      GC_init_linuxalpha();\n+#   endif\n #   ifdef SOLARIS_THREADS\n \tGC_thr_init();\n \t/* We need dirty bits in order to find live stack sections.\t*/"}, {"sha": "29cf8ff99ecd21151e74188a7e59937c1ed267d6", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139386ba56cef3a9ed60a1a9827eeb839f33f8b2/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=139386ba56cef3a9ed60a1a9827eeb839f33f8b2", "patch": "@@ -68,7 +68,7 @@\n #   define NEED_FIND_LIMIT\n # endif\n \n-# if defined(LINUX) && defined(POWERPC)\n+# if defined(LINUX) && (defined(POWERPC) || defined(ALPHA))\n #   define NEED_FIND_LIMIT\n # endif\n \n@@ -148,6 +148,82 @@\n   }\n #endif\n \n+#if defined(LINUX) && defined(ALPHA)\n+  ptr_t GC_data_start;\n+\n+  void GC_init_linuxalpha()\n+  {\n+# ifdef USE_PROC\n+    FILE *fp = fopen(\"/proc/self/maps\", \"r\");\n+\n+    if (fp) {\n+      extern void *_etext;\n+      ptr_t stacktop = 0, stackbottom = 0;\n+      ptr_t textstart = 0, textend = 0;\n+      ptr_t datastart = 0, dataend = 0;\n+      ptr_t bssstart = 0, bssend = 0;\n+\n+      while (!feof(fp)) {\n+        ptr_t start, end, offset;\n+        unsigned short major, minor;\n+        char r, w, x, p;\n+        unsigned int inode;\n+\n+        int n = fscanf(fp, \"%lx-%lx %c%c%c%c %lx %hx:%hx %d\",\n+          &start, &end, &r, &w, &x, &p, &offset, &major, &minor, &inode);\n+        if (n < 10) break;\n+\n+        /*\n+         * If local variable lies within segment, it is stack.\n+         * Else if segment lies below _end and is executable,\n+         * it is text.  Otherwise, if segment start lies between\n+         * _etext and _end and segment is writable and is mapped\n+         * to the executable image it is data, otherwise bss.\n+         */\n+         if (start < (ptr_t)&fp && end > (ptr_t)&fp && w == 'w') {\n+           stacktop = start;\n+           stackbottom = end;\n+         } else if (start < (ptr_t)&_end && w == '-' && x == 'x') {\n+           textstart = start;\n+           textend = end;\n+         } else if (start >= (ptr_t)&_etext &&\n+                      start < (ptr_t)&_end && w == 'w') {\n+           if (inode > 0) {\n+             datastart = start;\n+             dataend = end;\n+           } else {\n+             bssstart = start;\n+             bssend = end;\n+           }\n+         }\n+\n+         //printf(\"%016lx-%016lx %c%c%c%c %016lx %02hx:%02hx %d\\n\",\n+         //      start, end, r, w, x, p, offset, major, minor, inode);\n+\n+         while (fgetc(fp) != '\\n') ;\n+       }\n+       fclose(fp);\n+\n+       //fprintf(stderr, \"text:  %lx-%lx\\n\", textstart, textend);\n+       //fprintf(stderr, \"data:  %lx-%lx\\n\", datastart, dataend);\n+       //fprintf(stderr, \"bss:   %lx-%lx\\n\", bssstart, bssend);\n+       //fprintf(stderr, \"stack: %lx-%lx\\n\", stacktop, stackbottom);\n+\n+       GC_data_start = datastart;\n+     } else {\n+# endif\n+       extern ptr_t GC_find_limit();\n+       extern int _edata;\n+       /* This may need to be environ, without the underscore, for */\n+       /* some versions.  */\n+       GC_data_start = GC_find_limit((ptr_t)&_edata, FALSE);\n+# ifdef USE_PROC\n+     }\n+# endif\n+     //fprintf(stderr, \"GC_data_start = %p\\n\", GC_data_start);\n+  }\n+#endif\n+\n # ifdef ECOS\n \n # ifndef ECOS_GC_MEMORY_SIZE"}]}