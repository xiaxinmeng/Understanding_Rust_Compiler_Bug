{"sha": "6356f8928853bc14e841e5b4e990ce2508c38f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1NmY4OTI4ODUzYmMxNGU4NDFlNWI0ZTk5MGNlMjUwOGMzOGYyNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-12T19:01:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-12T19:01:08Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* ChangeLog.2: Likewise.\n\t* c-decl.c: Likewise.\n\t* cfgloop.h: Likewise.\n\t* cgraph.c: Likewise.\n\t* coverage.c: Likewise.\n\t* cppcharset.c: Likewise.\n\t* cpphash.h: Likewise.\n\t* cpplex.c: Likewise.\n\t* cpplib.c: Likewise.\n\t* dbxout.c: Likewise.\n\t* df.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* explow.c: Likewise.\n\t* gcov-io.c: Likewise.\n\t* gcov-io.h: Likewise.\n\t* gcov.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* ggc.h: Likewise.\n\t* opts.c: Likewise.\n\t* real.c: Likewise.\n\t* reload.c: Likewise.\n\t* stmt.c: Likewise.\n\nFrom-SVN: r67849", "tree": {"sha": "0f2925fe84100a624006d902c347d9fea822e422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2925fe84100a624006d902c347d9fea822e422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6356f8928853bc14e841e5b4e990ce2508c38f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6356f8928853bc14e841e5b4e990ce2508c38f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6356f8928853bc14e841e5b4e990ce2508c38f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6356f8928853bc14e841e5b4e990ce2508c38f26/comments", "author": null, "committer": null, "parents": [{"sha": "25f47a4c2358896aa2498b357a51166c0024d761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f47a4c2358896aa2498b357a51166c0024d761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f47a4c2358896aa2498b357a51166c0024d761"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "4777c1568ea5a963a278ac18dd9c123c298a0314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1,3 +1,31 @@\n+2003-06-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* ChangeLog.2: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* cfgloop.h: Likewise.\n+\t* cgraph.c: Likewise.\n+\t* coverage.c: Likewise.\n+\t* cppcharset.c: Likewise.\n+\t* cpphash.h: Likewise.\n+\t* cpplex.c: Likewise.\n+\t* cpplib.c: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* df.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* explow.c: Likewise.\n+\t* gcov-io.c: Likewise.\n+\t* gcov-io.h: Likewise.\n+\t* gcov.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* ggc.h: Likewise.\n+\t* opts.c: Likewise.\n+\t* real.c: Likewise.\n+\t* reload.c: Likewise.\n+\t* stmt.c: Likewise.\n+\n 2003-06-12  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/install.texi (m32r-*-elf): Change company to Renesas.\n@@ -2420,7 +2448,7 @@ Fri May 23 21:19:31 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-05-21  Danny Smith  <dannysmith@users.sourceforge.net>\n \n-\t* gthr-win32.h (__GTHREAD_HIDE_WIN32API): Test for non-zero\n+\t* gthr-win32.h (__GTHREAD_HIDE_WIN32API): Test for nonzero\n \tvalue, not just if defined.\n \tUpdate copyright year.\n \n@@ -5060,7 +5088,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t\t%call* relocs if generating explicit-reloc PIC.  Don't generate\n \t\tan exception_receiver pattern.\n \t\t(override_options): Initialize mips_got_alias_set.\n-\t\t(print_relocation): Remove in favour of...\n+\t\t(print_relocation): Remove in favor of...\n \t\t(mips_reloc_string): ...this new function.\n \t\t(print_operand): Handle '%R'.  Use mips_reloc_string.\n \t\t(print_operand_address): Use print_operand to print the symbolic\n@@ -6459,7 +6487,7 @@ Sat Apr 19 14:56:17 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-04-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* doc/invoke.texi (-fprofile-arcs): Mention -lgcov, locking and\n-\tfork behaviour.\n+\tfork behavior.\n \n 2003-04-19  Neil Booth  <neil@daikokuya.co.uk>\n \n@@ -7921,7 +7949,7 @@ Tue Apr  8 11:12:07 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR c/9516\n \t* expr.c (safe_from_p): Rearrange to avoid deep recursion in\n-\tfavour of looping and tail recursion for TREE_LIST and binops.\n+\tfavor of looping and tail recursion for TREE_LIST and binops.\n \n 2003-04-08  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n@@ -11463,7 +11491,7 @@ Mon Mar 24 20:03:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* function.c (STACK_ALIGNMENT_NEEDED): New macro.  Default to 1.\n \t(assign_stack_local_1): Perform overall stack alignment only when\n-\tSTACK_ALIGNMENT_NEEDED is non-zero.\n+\tSTACK_ALIGNMENT_NEEDED is nonzero.\n \t* doc/tm.texi (STACK_ALIGNMENT_NEEDED): Document.\n \n \t* pa.c (compute_frame_size): Rename fsize to size.  Account for"}, {"sha": "39b4f3a0d613aebdc8da70ae38abccd69e4817cf", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -4782,7 +4782,7 @@ Tue Oct 19 15:26:11 1999  Richard Earnshaw  (rearnsha@arm.com)\n Tue Oct 19 14:01:34 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* toplev.c (main): Do not generate an error message if an\n-\tunrecognized command line switch is recognisable by another\n+\tunrecognized command line switch is recognizable by another\n \tlanguage.  If extra_warnings are enabled, then generate a\n \twarning message instead.\n \n@@ -10733,7 +10733,7 @@ Thu Aug 19 11:51:22 EDT 1999  John Wehle  (john@feith.com)\n Thu Aug 19 15:02:01 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/rs6000/rs6000.c (rs6000_override_options): Fix test for\n-\tunrecognisable switches.\n+\tunrecognizable switches.\n \n Wed Aug 18 23:31:57 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n "}, {"sha": "ae921d06100c53333f0f3ae6fb7f991b43ffa39e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1793,7 +1793,7 @@ pushdecl (x)\n }\n \n /* Record X as belonging to the global scope (C99 \"file scope\").\n-   This is used only internally by the Objective C front end,\n+   This is used only internally by the Objective-C front end,\n    and is limited to its needs.  It will hork if there is _any_\n    visible binding for X (not just a global one).  */\n tree"}, {"sha": "0f6b04537a5576b6e446fd399c1504b6c058659c", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -144,7 +144,7 @@ struct loop\n   /* Loop that is copy of this loop.  */\n   struct loop *copy;\n \n-  /* Non-zero if the loop is invalid (e.g., contains setjmp.).  */\n+  /* Nonzero if the loop is invalid (e.g., contains setjmp.).  */\n   int invalid;\n \n   /* Auxiliary info specific to a pass.  */\n@@ -153,10 +153,10 @@ struct loop\n   /* The following are currently used by loop.c but they are likely to\n      disappear as loop.c is converted to use the CFG.  */\n \n-  /* Non-zero if the loop has a NOTE_INSN_LOOP_VTOP.  */\n+  /* Nonzero if the loop has a NOTE_INSN_LOOP_VTOP.  */\n   rtx vtop;\n \n-  /* Non-zero if the loop has a NOTE_INSN_LOOP_CONT.\n+  /* Nonzero if the loop has a NOTE_INSN_LOOP_CONT.\n      A continue statement will generate a branch to NEXT_INSN (cont).  */\n   rtx cont;\n "}, {"sha": "fd77f663bba6ff2bf717af1da07c1f162ee7429a", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -71,7 +71,7 @@ hash_node (p)\n \t\t       (((struct cgraph_node *) p)->decl));\n }\n \n-/* Returns non-zero if P1 and P2 are equal.  */\n+/* Returns nonzero if P1 and P2 are equal.  */\n \n static int\n eq_node (p1, p2)"}, {"sha": "9f33b811605e7beeb4531389264368e3345a1160", "filename": "gcc/coverage.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -340,7 +340,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n   return entry->counts;\n }\n \n-/* Allocate NUM counters of type COUNTER. Returns non-zero if the\n+/* Allocate NUM counters of type COUNTER. Returns nonzero if the\n    allocation succeeded.  */\n \n int\n@@ -426,7 +426,7 @@ compute_checksum ()\n \f\n /* Begin output to the graph file for the current function.\n    Opens the output file, if not already done. Writes the\n-   function header, if not already done. Returns non-zero if data\n+   function header, if not already done. Returns nonzero if data\n    should be output.  */\n \n int"}, {"sha": "b11e6424ad80c71ae6f30d65a510c6480d1b1c80", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -42,7 +42,7 @@ static int ucn_valid_in_identifier PARAMS ((cpp_reader *, cppchar_t));\n    are not part of the relevant standard, or if the string beginning\n    at *PSTR doesn't syntactically match the form 'NNNN' or 'NNNNNNNN'.\n \n-   Otherwise the non-zero value of the UCN, whether valid or invalid,\n+   Otherwise the nonzero value of the UCN, whether valid or invalid,\n    is returned.  Diagnostics are emitted for invalid values.  PSTR\n    is updated to point one beyond the UCN, or to the syntactically\n    invalid character."}, {"sha": "f6dbb10c18c748d4102b295e833f1a2fb123d768", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -343,7 +343,7 @@ struct cpp_reader\n   struct cpp_path *quote_include;\t/* \"\" */\n   struct cpp_path *bracket_include;\t/* <> */\n \n-  /* Multiple include optimisation.  */\n+  /* Multiple include optimization.  */\n   const cpp_hashnode *mi_cmacro;\n   const cpp_hashnode *mi_ind_cmacro;\n   bool mi_valid;"}, {"sha": "72a5e4d612570d9defaca67237d041bedd75381c", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -192,7 +192,7 @@ warn_in_comment (pfile, note)\n \n   /* Within comments we don't warn about trigraphs, unless the\n      trigraph forms an escaped newline, as that may change\n-     behaviour.  */\n+     behavior.  */\n   if (note->type != '/')\n     return false;\n \n@@ -710,7 +710,7 @@ _cpp_lex_token (pfile)\n \n       /* Outside a directive, invalidate controlling macros.  At file\n \t EOF, _cpp_lex_direct takes care of popping the buffer, so we never\n-\t get here and MI optimisation works.  */\n+\t get here and MI optimization works.  */\n       pfile->mi_valid = false;\n \n       if (!pfile->state.skipping || result->type == CPP_EOF)"}, {"sha": "bd69642a0b0b37575929dd16bb677b6cbac1a13a", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1490,7 +1490,7 @@ do_ifndef (pfile)\n \n /* _cpp_parse_expr puts a macro in a \"#if !defined ()\" expression in\n    pfile->mi_ind_cmacro so we can handle multiple-include\n-   optimisations.  If macro expansion occurs in the expression, we\n+   optimizations.  If macro expansion occurs in the expression, we\n    cannot treat it as a controlling conditional, since the expansion\n    could change in the future.  That is handled by cpp_get_token.  */\n static void"}, {"sha": "baf473b9006215e7113129a33e069a9283d8f2a6", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1804,7 +1804,7 @@ dbxout_type (type, full)\n     }\n }\n \n-/* Return non-zero if the given type represents an integer whose bounds\n+/* Return nonzero if the given type represents an integer whose bounds\n    should be printed in octal format.  */\n \n static bool"}, {"sha": "25396bd371acc236a93ad82ab66ca640dd2ac447", "filename": "gcc/df.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -149,7 +149,7 @@ Similarly, should the first entry in the use list be the last use\n 4) Working with a sub-CFG.\n \n Often the whole CFG does not need to be analyzed, for example,\n-when optimising a loop, only certain registers are of interest.\n+when optimizing a loop, only certain registers are of interest.\n Perhaps there should be a bitmap argument to df_analyse to specify\n which registers should be analyzed?\n \n@@ -885,7 +885,7 @@ df_ref_record (df, reg, loc, insn, ref_type, ref_flags)\n }\n \n \n-/* Return non-zero if writes to paradoxical SUBREGs, or SUBREGs which\n+/* Return nonzero if writes to paradoxical SUBREGs, or SUBREGs which\n    are too narrow, are read-modify-write.  */\n bool\n read_modify_subreg_p (x)"}, {"sha": "62528b8979a766bbaacef3f1e26a093c899aabef", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -11291,7 +11291,7 @@ gen_label_die (decl, context_die)\n       insn = DECL_RTL (decl);\n \n       /* Deleted labels are programmer specified labels which have been\n-\t eliminated because of various optimisations.  We still emit them\n+\t eliminated because of various optimizations.  We still emit them\n \t here so that it is possible to put breakpoints on them.  */\n       if (GET_CODE (insn) == CODE_LABEL\n \t  || ((GET_CODE (insn) == NOTE"}, {"sha": "663bb9fa9a5847d2279eaf4c3cce6af50436cf9d", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -3948,7 +3948,7 @@ output_label_die (arg)\n       rtx insn = DECL_RTL (decl);\n \n       /* Deleted labels are programmer specified labels which have been\n-\t eliminated because of various optimisations.  We still emit them\n+\t eliminated because of various optimizations.  We still emit them\n \t here so that it is possible to put breakpoints on them.  */\n       if (GET_CODE (insn) == CODE_LABEL\n \t  || ((GET_CODE (insn) == NOTE\n@@ -5741,7 +5741,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n \t normal built-in types for the language we are compiling, except\n \t in cases where the types in question are *not* DWARF fundamental\n \t types.  We make an exception in the case of non-fundamental types\n-\t for the sake of objective C (and perhaps C++) because the GNU\n+\t for the sake of Objective-C (and perhaps C++) because the GNU\n \t front-ends for these languages may in fact create certain \"built-in\"\n \t types which are (for example) RECORD_TYPEs.  In such cases, we\n \t really need to output these (non-fundamental) types because other"}, {"sha": "03ee0caf75c0e1a0af14f5dc1b866af57ca453c1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -351,7 +351,7 @@ reg_attrs_htab_hash (x)\n   return ((p->offset * 1000) ^ (long) p->decl);\n }\n \n-/* Returns non-zero if the value represented by X (which is really a\n+/* Returns nonzero if the value represented by X (which is really a\n    reg_attrs *) is the same as that given by Y (which is also really a\n    reg_attrs *).  */\n "}, {"sha": "cd0a15836a3643bb51fbf95bf98734a0cec3dcd7", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -663,7 +663,7 @@ maybe_set_unchanging (ref, t)\n      contents of the initializer.  Yes, this does eliminate a good fraction\n      of the number of uses of RTX_UNCHANGING_P for a language like Ada.\n      It also eliminates a good quantity of bugs.  Let this be incentive to\n-     eliminate RTX_UNCHANGING_P entirely in favour of a more reliable\n+     eliminate RTX_UNCHANGING_P entirely in favor of a more reliable\n      solution, perhaps based on alias sets.  */\n \n   if ((TREE_READONLY (t) && DECL_P (t)"}, {"sha": "112e77caa77a34bf36f59f8460a038f02edb9c8a", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -313,7 +313,7 @@ gcov_write_tag_length (gcov_unsigned_t tag, gcov_unsigned_t length)\n   return;\n }\n \n-/* Write a summary structure to the gcov file.  Return non-zero on\n+/* Write a summary structure to the gcov file.  Return nonzero on\n    overflow.  */\n \n GCOV_LINKAGE void\n@@ -489,7 +489,7 @@ gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n \n #if IN_LIBGCOV\n /* Move to the a set position in a gcov file.  BASE is zero to move to\n-   the end, and non-zero to move to that position. */\n+   the end, and nonzero to move to that position. */\n \n GCOV_LINKAGE void\n gcov_seek (gcov_position_t base)"}, {"sha": "e512783e89dc3c5f09899a14cc76e211b843883f", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -147,8 +147,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    This file is included by both the compiler, gcov tools and the\n    runtime support library libgcov. IN_LIBGCOV and IN_GCOV are used to\n-   distinguish which case is which.  If IN_LIBGCOV is non-zero,\n-   libgcov is being built. If IN_GCOV is non-zero, the gcov tools are\n+   distinguish which case is which.  If IN_LIBGCOV is nonzero,\n+   libgcov is being built. If IN_GCOV is nonzero, the gcov tools are\n    being built. Otherwise the compiler is being built. IN_GCOV may be\n    positive or negative. If positive, we are compiling a tool that\n    requires additional functions (see the code for knowledge of what\n@@ -480,15 +480,15 @@ gcov_position (void)\n   return gcov_var.start + gcov_var.offset;\n }\n \n-/* Return non-zero if we read to end of file.  */\n+/* Return nonzero if we read to end of file.  */\n \n static inline int\n gcov_is_eof ()\n {\n   return !gcov_var.overread;\n }\n \n-/* Return non-zero if the error flag is set.  */\n+/* Return nonzero if the error flag is set.  */\n \n static inline int\n gcov_is_error ()"}, {"sha": "fd18c007356f7a4dd947139c0f0c68ad729cbc7c", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1745,7 +1745,7 @@ accumulate_line_counts (src)\n     }\n }\n \n-/* Ouput information about ARC number IX.  Returns non-zero if\n+/* Ouput information about ARC number IX.  Returns nonzero if\n    anything is output.  */\n \n static int"}, {"sha": "0e58dc0c717c8d6dcd6c31774dbf8f02fdb16f5c", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -1654,7 +1654,7 @@ walk_type (type_p t, struct walk_type_data *d)\n \tconst char *oldval = d->val;\n \tchar *newval;\n \n-\t/* If it's an array of scalars, we optimise by not generating\n+\t/* If it's an array of scalars, we optimize by not generating\n \t   any code.  */\n \tif (t->u.a.p->kind == TYPE_SCALAR)\n \t  break;"}, {"sha": "e2a76e53946409cb61089cbd4800e9b81f2f7d22", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -103,7 +103,7 @@ extern const struct ggc_cache_tab * const gt_ggc_cache_rtab[];\n \n /* Actually set the mark on a particular region of memory, but don't\n    follow pointers.  This function is called by ggc_mark_*.  It\n-   returns zero if the object was not previously marked; non-zero if\n+   returns zero if the object was not previously marked; nonzero if\n    the object was already marked, or if, for any other reason,\n    pointers in this data structure should not be traversed.  */\n extern int ggc_set_mark\t(const void *);"}, {"sha": "83561b2679f45fde036f11a631e2c4dbfd9d3914", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -163,7 +163,7 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n       if (!on && (option->flags & CL_REJECT_NEGATIVE))\n \tgoto done;\n \n-      /* We've recognised this switch.  */\n+      /* We've recognized this switch.  */\n       result = 1;\n \n       /* Sort out any argument the switch takes.  */"}, {"sha": "4e1dc227f12e4eb7a6d2f782305c63d38a66e716", "filename": "gcc/real.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -2281,7 +2281,7 @@ real_nan (r, str, quiet, mode)\n }\n \n /* Fills R with the largest finite value representable in mode MODE.\n-   If SIGN is non-zero, R is set to the most negative finite value.  */\n+   If SIGN is nonzero, R is set to the most negative finite value.  */\n \n void\n real_maxval (r, sign, mode)\n@@ -3033,7 +3033,7 @@ const struct real_format mips_double_format =\n \n \f\n /* IEEE extended double precision format.  This comes in three\n-   flavours: Intel's as a 12 byte image, Intel's as a 16 byte image,\n+   flavors: Intel's as a 12 byte image, Intel's as a 16 byte image,\n    and Motorola's.  */\n \n static void encode_ieee_extended PARAMS ((const struct real_format *fmt,"}, {"sha": "7ab823db6058c29f5ceb1e3ecc928bdfb99d8734", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -4887,7 +4887,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels, insn)\n      of it.\n \n      Handle all base registers here, not just fp/ap/sp, because on some\n-     targets (namely Sparc) we can also get invalid addresses from preventive\n+     targets (namely SPARC) we can also get invalid addresses from preventive\n      subreg big-endian corrections made by find_reloads_toplev.\n \n      If we decide to do something, it must be that `double_reg_address_ok'"}, {"sha": "1bf70f8d6a7e1096609accb0d401c60d0ecde556", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6356f8928853bc14e841e5b4e990ce2508c38f26/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6356f8928853bc14e841e5b4e990ce2508c38f26", "patch": "@@ -5592,7 +5592,7 @@ expand_end_case_type (orig_index, orig_type)\n \t      /* For constant index expressions we need only\n \t\t issue an unconditional branch to the appropriate\n \t\t target code.  The job of removing any unreachable\n-\t\t code is left to the optimisation phase if the\n+\t\t code is left to the optimization phase if the\n \t\t \"-O\" option is specified.  */\n \t      for (n = thiscase->data.case_stmt.case_list; n; n = n->right)\n \t\tif (! tree_int_cst_lt (index_expr, n->low)"}]}