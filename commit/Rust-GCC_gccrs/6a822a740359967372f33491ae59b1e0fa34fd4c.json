{"sha": "6a822a740359967372f33491ae59b1e0fa34fd4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MjJhNzQwMzU5OTY3MzcyZjMzNDkxYWU1OWIxZTBmYTM0ZmQ0Yw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-31T14:02:43Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-31T14:02:43Z"}, "message": "re PR fortran/47571 (undefined reference to clock_gettime in Linux build of 02/01/2011)\n\n\tPR libfortran/47571\n\t* acinclude.m4 (LIBGFOR_GTHREAD_WEAK): Reinstate.\n\t* configure.ac: Call LIBGFOR_GTHREAD_WEAK again.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r227347", "tree": {"sha": "c9054c51386948d792f44e8f5e9259a9285492d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9054c51386948d792f44e8f5e9259a9285492d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a822a740359967372f33491ae59b1e0fa34fd4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a822a740359967372f33491ae59b1e0fa34fd4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a822a740359967372f33491ae59b1e0fa34fd4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a822a740359967372f33491ae59b1e0fa34fd4c/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0eb889bf88eff3316690c6397a7f3dc75fbeda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0eb889bf88eff3316690c6397a7f3dc75fbeda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0eb889bf88eff3316690c6397a7f3dc75fbeda7"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "b3fa76334184bc2d96d10b4391d1b17e34b4f769", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6a822a740359967372f33491ae59b1e0fa34fd4c", "patch": "@@ -1,3 +1,11 @@\n+2015-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47571\n+\t* acinclude.m4 (LIBGFOR_GTHREAD_WEAK): Reinstate.\n+\t* configure.ac: Call LIBGFOR_GTHREAD_WEAK again.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2015-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/47571"}, {"sha": "7280bc37a0bd2fb3f4727b788b3fefa28ca78c10", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=6a822a740359967372f33491ae59b1e0fa34fd4c", "patch": "@@ -69,6 +69,28 @@ if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);]])],\n \t      [Define to 1 if the target supports __sync_fetch_and_add])\n   fi])\n \n+dnl Check for pragma weak.\n+AC_DEFUN([LIBGFOR_GTHREAD_WEAK], [\n+  AC_CACHE_CHECK([whether pragma weak works],\n+\t\t libgfor_cv_have_pragma_weak, [\n+  gfor_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+void foo (void);\n+#pragma weak foo\n+]], [[if (foo) foo ();]])],\n+\t\t    libgfor_cv_have_pragma_weak=yes, libgfor_cv_have_pragma_weak=no)])\n+  if test $libgfor_cv_have_pragma_weak = yes; then\n+    AC_DEFINE(SUPPORTS_WEAK, 1,\n+\t      [Define to 1 if the target supports #pragma weak])\n+  fi\n+  case \"$host\" in\n+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )\n+      AC_DEFINE(GTHREAD_USE_WEAK, 0,\n+\t\t[Define to 0 if the target shouldn't use #pragma weak])\n+      ;;\n+  esac])\n+\n dnl Check whether target effectively supports weakref\n AC_DEFUN([LIBGFOR_CHECK_WEAKREF], [\n   AC_CACHE_CHECK([whether the target supports weakref],"}, {"sha": "22449e6892b93b3550cb93c68c494e6157f761f4", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=6a822a740359967372f33491ae59b1e0fa34fd4c", "patch": "@@ -1,5 +1,8 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define to 0 if the target shouldn't use #pragma weak */\n+#undef GTHREAD_USE_WEAK\n+\n /* Define to 1 if you have the `access' function. */\n #undef HAVE_ACCESS\n \n@@ -871,6 +874,9 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n+/* Define to 1 if the target supports #pragma weak */\n+#undef SUPPORTS_WEAK\n+\n /* Define to 1 if the target supports weakref */\n #undef SUPPORTS_WEAKREF\n "}, {"sha": "f746f6f5d1d676a941909260be5d792cdf82e286", "filename": "libgfortran/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=6a822a740359967372f33491ae59b1e0fa34fd4c", "patch": "@@ -25953,6 +25953,52 @@ $as_echo \"#define HAVE_SYNC_FETCH_AND_ADD 1\" >>confdefs.h\n \n   fi\n \n+# Check out #pragma weak.\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether pragma weak works\" >&5\n+$as_echo_n \"checking whether pragma weak works... \" >&6; }\n+if test \"${libgfor_cv_have_pragma_weak+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  gfor_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+void foo (void);\n+#pragma weak foo\n+\n+int\n+main ()\n+{\n+if (foo) foo ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgfor_cv_have_pragma_weak=yes\n+else\n+  libgfor_cv_have_pragma_weak=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_pragma_weak\" >&5\n+$as_echo \"$libgfor_cv_have_pragma_weak\" >&6; }\n+  if test $libgfor_cv_have_pragma_weak = yes; then\n+\n+$as_echo \"#define SUPPORTS_WEAK 1\" >>confdefs.h\n+\n+  fi\n+  case \"$host\" in\n+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )\n+\n+$as_echo \"#define GTHREAD_USE_WEAK 0\" >>confdefs.h\n+\n+      ;;\n+  esac\n+\n # Check out weakref support.\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports weakref\" >&5"}, {"sha": "8f377bb4b50c28a172443e338698e1bed784cbee", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a822a740359967372f33491ae59b1e0fa34fd4c/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=6a822a740359967372f33491ae59b1e0fa34fd4c", "patch": "@@ -595,6 +595,9 @@ LIBGFOR_CHECK_ATTRIBUTE_ALIAS\n # Check out sync builtins support.\n LIBGFOR_CHECK_SYNC_FETCH_AND_ADD\n \n+# Check out #pragma weak.\n+LIBGFOR_GTHREAD_WEAK\n+\n # Check out weakref support.\n LIBGFOR_CHECK_WEAKREF\n "}]}