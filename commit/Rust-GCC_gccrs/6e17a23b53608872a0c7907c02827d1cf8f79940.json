{"sha": "6e17a23b53608872a0c7907c02827d1cf8f79940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxN2EyM2I1MzYwODg3MmEwYzc5MDdjMDI4MjdkMWNmOGY3OTk0MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-09-01T10:32:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-09-01T10:32:24Z"}, "message": "[AArch64] Fix FAIL: gcc.target/aarch64/target_attr_crypto_ice_1.c (internal compiler error)\n\n\t* config/aarch64/aarch64.c (aarch64_set_current_function):\n\tRe-layout any vector parameters have non-simd layout.\n\t* config/aarch64/aarch64-builtins.c (aarch64_relayout_simd_param):\n\tDelete.\n\t(aarch64_simd_expand_args): Delete call to the above.\n\n\t* gcc.target/aarch64/target_attr_crypto_ice_2.c: New test.\n\nFrom-SVN: r227363", "tree": {"sha": "1e44c690fbbb37f38561dac95e9a12b01bdf9d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e44c690fbbb37f38561dac95e9a12b01bdf9d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e17a23b53608872a0c7907c02827d1cf8f79940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e17a23b53608872a0c7907c02827d1cf8f79940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e17a23b53608872a0c7907c02827d1cf8f79940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e17a23b53608872a0c7907c02827d1cf8f79940/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6853b04cdd6269c596bf4dd24b41eee2170caef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6853b04cdd6269c596bf4dd24b41eee2170caef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6853b04cdd6269c596bf4dd24b41eee2170caef3"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "401c0c4f453615f74bef3af789441b60645f14d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e17a23b53608872a0c7907c02827d1cf8f79940", "patch": "@@ -1,3 +1,11 @@\n+2015-09-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_set_current_function):\n+\tRe-layout any vector parameters have non-simd layout.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_relayout_simd_param):\n+\tDelete.\n+\t(aarch64_simd_expand_args): Delete call to the above.\n+\n 2015-08-31  Mike Frysinger  <vapier@gentoo.org>\n \n \t* doc/invoke.texi (asan-stack): Add space before option."}, {"sha": "e3a90b5e4dd95c753afc51be3492cfa3e5df92b3", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=6e17a23b53608872a0c7907c02827d1cf8f79940", "patch": "@@ -886,30 +886,6 @@ typedef enum\n   SIMD_ARG_STOP\n } builtin_simd_arg;\n \n-/* Relayout the decl of a function arg.  Keep the RTL component the same,\n-   as varasm.c ICEs.  It doesn't like reinitializing the RTL\n-   on PARM decls.  Something like this needs to be done when compiling a\n-   file without SIMD and then tagging a function with +simd and using SIMD\n-   intrinsics in there.  The types will have been laid out assuming no SIMD,\n-   so we want to re-lay them out.  */\n-\n-static void\n-aarch64_relayout_simd_param (tree arg)\n-{\n-  tree argdecl = arg;\n-  if (TREE_CODE (argdecl) == SSA_NAME)\n-    argdecl = SSA_NAME_VAR (argdecl);\n-\n-  if (argdecl\n-      && (TREE_CODE (argdecl) == PARM_DECL\n-\t  || TREE_CODE (argdecl) == VAR_DECL))\n-    {\n-      rtx rtl = NULL_RTX;\n-      rtl = DECL_RTL_IF_SET (argdecl);\n-      relayout_decl (argdecl);\n-      SET_DECL_RTL (argdecl, rtl);\n-    }\n-}\n \n static rtx\n aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n@@ -940,7 +916,6 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t{\n \t  tree arg = CALL_EXPR_ARG (exp, opc - have_retval);\n \t  enum machine_mode mode = insn_data[icode].operand[opc].mode;\n-\t  aarch64_relayout_simd_param (arg);\n \t  op[opc] = expand_normal (arg);\n \n \t  switch (thisarg)"}, {"sha": "bc612e47d4ff536882977b6135c10c07c5d4775f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6e17a23b53608872a0c7907c02827d1cf8f79940", "patch": "@@ -8111,6 +8111,23 @@ aarch64_set_current_function (tree fndecl)\n \t      = save_target_globals_default_opts ();\n \t}\n     }\n+\n+  if (!fndecl)\n+    return;\n+\n+  /* If we turned on SIMD make sure that any vector parameters are re-laid out\n+     so that they use proper vector modes.  */\n+  if (TARGET_SIMD)\n+    {\n+      tree parms = DECL_ARGUMENTS (fndecl);\n+      for (; parms && parms != void_list_node; parms = TREE_CHAIN (parms))\n+\t{\n+\t  if (TREE_CODE (parms) == PARM_DECL\n+\t      && VECTOR_TYPE_P (TREE_TYPE (parms))\n+\t      && DECL_MODE (parms) != TYPE_MODE (TREE_TYPE (parms)))\n+\t    relayout_decl (parms);\n+\t}\n+    }\n }\n \n /* Enum describing the various ways we can handle attributes."}, {"sha": "f14ff330e3f7759a5743442a1b3619cc11d93766", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e17a23b53608872a0c7907c02827d1cf8f79940", "patch": "@@ -1,3 +1,7 @@\n+2015-09-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/target_attr_crypto_ice_2.c: New test.\n+\n 2015-09-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61753"}, {"sha": "d6e7b6818325003051ee3afb5e497876930d8d26", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_crypto_ice_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e17a23b53608872a0c7907c02827d1cf8f79940/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_2.c?ref=6e17a23b53608872a0c7907c02827d1cf8f79940", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=thunderx+nofp\" } */\n+\n+/* Make sure that we don't ICE when dealing with vector parameters\n+   in a simd-tagged function within a non-simd translation unit.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+simd\")\n+typedef unsigned int __uint32_t;\n+typedef __uint32_t uint32_t ;\n+typedef __Uint32x4_t uint32x4_t;\n+#pragma GCC pop_options\n+\n+\n+__attribute__ ((target (\"cpu=cortex-a57\")))\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b, uint32x4_t c)\n+{\n+  return c;\n+}"}]}