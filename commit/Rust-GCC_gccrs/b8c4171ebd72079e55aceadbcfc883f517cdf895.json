{"sha": "b8c4171ebd72079e55aceadbcfc883f517cdf895", "node_id": "C_kwDOANBUbNoAKGI4YzQxNzFlYmQ3MjA3OWU1NWFjZWFkYmNmYzg4M2Y1MTdjZGY4OTU", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-03-24T13:02:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-03-24T13:02:27Z"}, "message": "hardcmp: split before dispatch edge\n\nIf we harden a compare at the end of a block with an edge to the\nabnormal dispatch block, it won't have a single successor.  Arrange to\nsplit the block at its final stmt so as to have a single succ.\n\n\nfor  gcc/ChangeLog\n\n\tPR middle-end/104975\n\t* gimple-harden-conditionals.cc\n\t(pass_harden_compares::execute): Force split in case of\n\tmultiple edges.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR middle-end/104975\n\t* gcc.dg/pr104975.c: New.", "tree": {"sha": "858d5d1021ab843e7cfc4fdfda75b0546d16fd1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/858d5d1021ab843e7cfc4fdfda75b0546d16fd1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c4171ebd72079e55aceadbcfc883f517cdf895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c4171ebd72079e55aceadbcfc883f517cdf895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c4171ebd72079e55aceadbcfc883f517cdf895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c4171ebd72079e55aceadbcfc883f517cdf895/comments", "author": null, "committer": null, "parents": [{"sha": "11fb784ac592567dbcb7874c27e67ee0feb8fbf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fb784ac592567dbcb7874c27e67ee0feb8fbf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11fb784ac592567dbcb7874c27e67ee0feb8fbf0"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "be01f3ea8c44af2e1f3d9429698d9902aa421257", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c4171ebd72079e55aceadbcfc883f517cdf895/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c4171ebd72079e55aceadbcfc883f517cdf895/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=b8c4171ebd72079e55aceadbcfc883f517cdf895", "patch": "@@ -509,10 +509,16 @@ pass_harden_compares::execute (function *fun)\n \tgsi_insert_before (&gsi_split, asgnck, GSI_SAME_STMT);\n \n \t/* We wish to insert a cond_expr after the compare, so arrange\n-\t   for it to be at the end of a block if it isn't.  */\n-\tif (!gsi_end_p (gsi_split))\n+\t   for it to be at the end of a block if it isn't, and for it\n+\t   to have a single successor in case there's more than\n+\t   one, as in PR104975.  */\n+\tif (!gsi_end_p (gsi_split)\n+\t    || !single_succ_p (gsi_bb (gsi_split)))\n \t  {\n-\t    gsi_prev (&gsi_split);\n+\t    if (!gsi_end_p (gsi_split))\n+\t      gsi_prev (&gsi_split);\n+\t    else\n+\t      gsi_split = gsi_last_bb (gsi_bb (gsi_split));\n \t    basic_block obb = gsi_bb (gsi_split);\n \t    basic_block nbb = split_block (obb, gsi_stmt (gsi_split))->dest;\n \t    gsi_next (&gsi_split);"}, {"sha": "04532fc444340c862819685cd8cadabadd2c2cb8", "filename": "gcc/testsuite/gcc.dg/pr104975.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c4171ebd72079e55aceadbcfc883f517cdf895/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104975.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c4171ebd72079e55aceadbcfc883f517cdf895/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104975.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104975.c?ref=b8c4171ebd72079e55aceadbcfc883f517cdf895", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fharden-compares -fno-inline -fno-ipa-pure-const\" } */\n+\n+__attribute__ ((pure, returns_twice)) int\n+bar (int);\n+\n+int\n+quux (void)\n+{\n+  return 0;\n+}\n+\n+int\n+foo (short int x)\n+{\n+  x = !x;\n+  bar (quux ());\n+\n+  return x;\n+}"}]}