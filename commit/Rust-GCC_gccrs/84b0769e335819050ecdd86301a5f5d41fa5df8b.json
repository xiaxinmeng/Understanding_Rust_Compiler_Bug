{"sha": "84b0769e335819050ecdd86301a5f5d41fa5df8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiMDc2OWUzMzU4MTkwNTBlY2RkODYzMDFhNWY1ZDQxZmE1ZGY4Yg==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2016-12-02T07:39:27Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2016-12-02T07:39:27Z"}, "message": "Add support for ASan odr_indicator.\n\nconfig/\n\n        * bootstrap-asan.mk: Replace LSAN_OPTIONS=detect_leaks=0 with\n        ASAN_OPTIONS=detect_leaks=0:use_odr_indicator=1.\n\ngcc/\n\n        * asan.c (asan_global_struct): Refactor.\n        (create_odr_indicator): New function.\n        (asan_needs_odr_indicator_p): Likewise.\n        (is_odr_indicator): Likewise.\n        (asan_add_global): Introduce odr_indicator_ptr. Pass it into global's\n        constructor.\n        (asan_protect_global): Do not protect odr indicators.\n\ngcc/c-family/\n\n\t* c-attribs.c (asan odr indicator): New attribute.\n\t(handle_asan_odr_indicator_attribute): New function.\n\ngcc/testsuite/\n\n        * c-c++-common/asan/no-redundant-odr-indicators-1.c: New test.\n\nFrom-SVN: r243153", "tree": {"sha": "9fbdf0659d0c0d3375472bd8ec482b390381fa99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fbdf0659d0c0d3375472bd8ec482b390381fa99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b0769e335819050ecdd86301a5f5d41fa5df8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b0769e335819050ecdd86301a5f5d41fa5df8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b0769e335819050ecdd86301a5f5d41fa5df8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b0769e335819050ecdd86301a5f5d41fa5df8b/comments", "author": null, "committer": null, "parents": [{"sha": "b06496b1617ffcaec0e82fd4cca9eae5e0301cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06496b1617ffcaec0e82fd4cca9eae5e0301cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06496b1617ffcaec0e82fd4cca9eae5e0301cd5"}], "stats": {"total": 144, "additions": 135, "deletions": 9}, "files": [{"sha": "a823d21626bb51edc8e2878497bdcbcab7cfa80a", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1,3 +1,8 @@\n+2016-12-02  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* bootstrap-asan.mk: Replace LSAN_OPTIONS=detect_leaks=0 with\n+\tASAN_OPTIONS=detect_leaks=0:use_odr_indicator=1.\n+\n 2016-12-01  Matthias Klose  <doko@ubuntu.com>\n \n \t* pkg.m4: Remove."}, {"sha": "e73d4c2cfb8078f0f65cf4b4b529b51c27442b07", "filename": "config/bootstrap-asan.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/config%2Fbootstrap-asan.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/config%2Fbootstrap-asan.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-asan.mk?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1,7 +1,7 @@\n # This option enables -fsanitize=address for stage2 and stage3.\n \n # Suppress LeakSanitizer in bootstrap.\n-export LSAN_OPTIONS=\"detect_leaks=0\"\n+export ASAN_OPTIONS=detect_leaks=0:use_odr_indicator=1\n \n STAGE2_CFLAGS += -fsanitize=address\n STAGE3_CFLAGS += -fsanitize=address"}, {"sha": "ef080c77ed39ff54c31cebbdb4fdf9540e28664d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1,3 +1,13 @@\n+2016-12-02  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* asan.c (asan_global_struct): Refactor.\n+\t(create_odr_indicator): New function.\n+\t(asan_needs_odr_indicator_p): Likewise.\n+\t(is_odr_indicator): Likewise.\n+\t(asan_add_global): Introduce odr_indicator_ptr. Pass it into global's\n+\tconstructor.\n+\t(asan_protect_global): Do not protect odr indicators.\n+\n 2016-12-01  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadedge.c"}, {"sha": "5af95472db9cafc08321fe805f4912f47d0b078a", "filename": "gcc/asan.c", "status": "modified", "additions": 79, "deletions": 8, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1388,6 +1388,16 @@ asan_needs_local_alias (tree decl)\n   return DECL_WEAK (decl) || !targetm.binds_local_p (decl);\n }\n \n+/* Return true if DECL, a global var, is an artificial ODR indicator symbol\n+   therefore doesn't need protection.  */\n+\n+static bool\n+is_odr_indicator (tree decl)\n+{\n+  return (DECL_ARTIFICIAL (decl)\n+\t  && lookup_attribute (\"asan odr indicator\", DECL_ATTRIBUTES (decl)));\n+}\n+\n /* Return true if DECL is a VAR_DECL that should be protected\n    by Address Sanitizer, by appending a red zone with protected\n    shadow memory after it and aligning it to at least\n@@ -1436,7 +1446,8 @@ asan_protect_global (tree decl)\n       || ASAN_RED_ZONE_SIZE * BITS_PER_UNIT > MAX_OFILE_ALIGNMENT\n       || !valid_constant_size_p (DECL_SIZE_UNIT (decl))\n       || DECL_ALIGN_UNIT (decl) > 2 * ASAN_RED_ZONE_SIZE\n-      || TREE_TYPE (decl) == ubsan_get_source_location_type ())\n+      || TREE_TYPE (decl) == ubsan_get_source_location_type ()\n+      || is_odr_indicator (decl))\n     return false;\n \n   rtl = DECL_RTL (decl);\n@@ -2266,14 +2277,15 @@ asan_dynamic_init_call (bool after_p)\n static tree\n asan_global_struct (void)\n {\n-  static const char *field_names[8]\n+  static const char *field_names[]\n     = { \"__beg\", \"__size\", \"__size_with_redzone\",\n-\t\"__name\", \"__module_name\", \"__has_dynamic_init\", \"__location\", \"__odr_indicator\"};\n-  tree fields[8], ret;\n-  int i;\n+\t\"__name\", \"__module_name\", \"__has_dynamic_init\", \"__location\",\n+\t\"__odr_indicator\" };\n+  tree fields[ARRAY_SIZE (field_names)], ret;\n+  unsigned i;\n \n   ret = make_node (RECORD_TYPE);\n-  for (i = 0; i < 8; i++)\n+  for (i = 0; i < ARRAY_SIZE (field_names); i++)\n     {\n       fields[i]\n \t= build_decl (UNKNOWN_LOCATION, FIELD_DECL,\n@@ -2295,6 +2307,63 @@ asan_global_struct (void)\n   return ret;\n }\n \n+/* Create and return odr indicator symbol for DECL.\n+   TYPE is __asan_global struct type as returned by asan_global_struct.  */\n+\n+static tree\n+create_odr_indicator (tree decl, tree type)\n+{\n+  char *name;\n+  tree uptr = TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (type)));\n+  tree decl_name\n+    = (HAS_DECL_ASSEMBLER_NAME_P (decl) ? DECL_ASSEMBLER_NAME (decl)\n+\t\t\t\t\t: DECL_NAME (decl));\n+  /* DECL_NAME theoretically might be NULL.  Bail out with 0 in this case.  */\n+  if (decl_name == NULL_TREE)\n+    return build_int_cst (uptr, 0);\n+  size_t len = strlen (IDENTIFIER_POINTER (decl_name)) + sizeof (\"__odr_asan_\");\n+  name = XALLOCAVEC (char, len);\n+  snprintf (name, len, \"__odr_asan_%s\", IDENTIFIER_POINTER (decl_name));\n+#ifndef NO_DOT_IN_LABEL\n+  name[sizeof (\"__odr_asan\") - 1] = '.';\n+#elif !defined(NO_DOLLAR_IN_LABEL)\n+  name[sizeof (\"__odr_asan\") - 1] = '$';\n+#endif\n+  tree var = build_decl (UNKNOWN_LOCATION, VAR_DECL, get_identifier (name),\n+\t\t\t char_type_node);\n+  TREE_ADDRESSABLE (var) = 1;\n+  TREE_READONLY (var) = 0;\n+  TREE_THIS_VOLATILE (var) = 1;\n+  DECL_GIMPLE_REG_P (var) = 0;\n+  DECL_ARTIFICIAL (var) = 1;\n+  DECL_IGNORED_P (var) = 1;\n+  TREE_STATIC (var) = 1;\n+  TREE_PUBLIC (var) = 1;\n+  DECL_VISIBILITY (var) = DECL_VISIBILITY (decl);\n+  DECL_VISIBILITY_SPECIFIED (var) = DECL_VISIBILITY_SPECIFIED (decl);\n+\n+  TREE_USED (var) = 1;\n+  tree ctor = build_constructor_va (TREE_TYPE (var), 1, NULL_TREE,\n+\t\t\t\t    build_int_cst (unsigned_type_node, 0));\n+  TREE_CONSTANT (ctor) = 1;\n+  TREE_STATIC (ctor) = 1;\n+  DECL_INITIAL (var) = ctor;\n+  DECL_ATTRIBUTES (var) = tree_cons (get_identifier (\"asan odr indicator\"),\n+\t\t\t\t     NULL, DECL_ATTRIBUTES (var));\n+  make_decl_rtl (var);\n+  varpool_node::finalize_decl (var);\n+  return fold_convert (uptr, build_fold_addr_expr (var));\n+}\n+\n+/* Return true if DECL, a global var, might be overridden and needs\n+   an additional odr indicator symbol.  */\n+\n+static bool\n+asan_needs_odr_indicator_p (tree decl)\n+{\n+  return !DECL_ARTIFICIAL (decl) && !DECL_WEAK (decl) && TREE_PUBLIC (decl);\n+}\n+\n /* Append description of a single global DECL into vector V.\n    TYPE is __asan_global struct type as returned by asan_global_struct.  */\n \n@@ -2335,6 +2404,9 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n       assemble_alias (refdecl, DECL_ASSEMBLER_NAME (decl));\n     }\n \n+  tree odr_indicator_ptr\n+    = (asan_needs_odr_indicator_p (decl) ? create_odr_indicator (decl, type)\n+\t\t\t\t\t : build_int_cst (uptr, 0));\n   CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE,\n \t\t\t  fold_convert (const_ptr_type_node,\n \t\t\t\t\tbuild_fold_addr_expr (refdecl)));\n@@ -2382,8 +2454,7 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n   else\n     locptr = build_int_cst (uptr, 0);\n   CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE, locptr);\n-  /* TODO: support ODR indicators.  */\n-  CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE, build_int_cst (uptr, 0));\n+  CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE, odr_indicator_ptr);\n   init = build_constructor (type, vinner);\n   CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n }"}, {"sha": "58907981b96986bb508d90a7260666aa76be4d65", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1,3 +1,8 @@\n+2016-12-02  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* c-attribs.c (asan odr indicator): New attribute.\n+\t(handle_asan_odr_indicator_attribute): New function.\n+\n 2016-11-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* c-common.c (c_common_nodes_and_builtins): Remove initialization of"}, {"sha": "f5adadee3af02d83a7faa7a02b2d81b9cca3550a", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -57,6 +57,8 @@ static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *);\n static tree handle_no_sanitize_undefined_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t    bool *);\n+static tree handle_asan_odr_indicator_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *);\n static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n@@ -292,6 +294,9 @@ const struct attribute_spec c_common_attribute_table[] =\n   { \"no_sanitize_undefined\",  0, 0, true, false, false,\n \t\t\t      handle_no_sanitize_undefined_attribute,\n \t\t\t      false },\n+  { \"asan odr indicator\",     0, 0, true, false, false,\n+\t\t\t      handle_asan_odr_indicator_attribute,\n+\t\t\t      false },\n   { \"warning\",\t\t      1, 1, true,  false, false,\n \t\t\t      handle_error_attribute, false },\n   { \"error\",\t\t      1, 1, true,  false, false,\n@@ -591,6 +596,15 @@ handle_no_sanitize_undefined_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle an \"asan odr indicator\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_asan_odr_indicator_attribute (tree *, tree, tree, int, bool *)\n+{\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"stack_protect\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "c000e07cade92d003136ee3ee7785d25291c74dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -1,3 +1,7 @@\n+2016-12-02  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* c-c++-common/asan/no-redundant-odr-indicators-1.c: New test.\n+\n 2016-12-01  Elizebeth Punnoose  <elizebeth.punnoose@hpe.com>\n \n \tPR fortran/77505"}, {"sha": "9231264e3d99419ceb9a9f38a3710a5c7a07746a", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-odr-indicators-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-odr-indicators-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b0769e335819050ecdd86301a5f5d41fa5df8b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-odr-indicators-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-odr-indicators-1.c?ref=84b0769e335819050ecdd86301a5f5d41fa5df8b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+/* Local variables should not have odr indicators.  */\n+static int a = 2;\n+/* Thread local variables should not have odr indicators.  */\n+__thread int b = 3;\n+/* Externally visible  variables should have odr indicators.  */\n+int c = 1;\n+\n+int main () {\n+    return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"odr_asan\\[\\.\\$\\]a\" } } */\n+/* { dg-final { scan-assembler-not \"odr_asan\\[\\.\\$\\]b\" } } */\n+/* { dg-final { scan-assembler \"odr_asan\\[\\.\\$\\]c\" } } */"}]}