{"sha": "7ac6a832c3122846bcd0aa81af47f0e62519da92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjNmE4MzJjMzEyMjg0NmJjZDBhYTgxYWY0N2YwZTYyNTE5ZGE5Mg==", "commit": {"author": {"name": "Alessandro Fanfarillo", "email": "fanfarillo.gcc@gmail.com", "date": "2012-06-03T13:21:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-03T13:21:50Z"}, "message": "re PR fortran/48831 (check.c: Constant expression (PARAMETER array element) rejected as nonconstant)\n\n2012-06-03  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48831\n        * gfortran.h (gfc_check_init_expr): Add prototype declaration\n        of function.\n        * check.c (kind_check): Change if condition to use\n        to gfc_check_init_expr.\n        * expr.c (check_init_expr): Remove forward declaration\n        and static keyword. Change name in gfc_check_init_expr.\n\n2012-06-03  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n\n        PR fortran/48831\n        * gfortran.dg/parameter_array_element_2.f90: New.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r188152", "tree": {"sha": "38b87eb240d110d5069eecd3848c7bb6a0d57705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b87eb240d110d5069eecd3848c7bb6a0d57705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac6a832c3122846bcd0aa81af47f0e62519da92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac6a832c3122846bcd0aa81af47f0e62519da92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac6a832c3122846bcd0aa81af47f0e62519da92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac6a832c3122846bcd0aa81af47f0e62519da92/comments", "author": null, "committer": null, "parents": [{"sha": "a43434ffab6e7983ed1b9233490e38d4a1bc6f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43434ffab6e7983ed1b9233490e38d4a1bc6f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a43434ffab6e7983ed1b9233490e38d4a1bc6f1a"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "a561a8c803eb47cf1c4a7c8204a9b7fa7598df74", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -1,3 +1,17 @@\n+2012-06-03  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48831\n+\t* gfortran.h (gfc_check_init_expr): Add prototype declaration\n+\tof function.\n+\t* check.c (kind_check): Change if condition to use\n+\tto gfc_check_init_expr.\n+\t* expr.c (check_init_expr): Remove forward declaration\n+\tand static keyword. Change name in gfc_check_init_expr.\n+\t(scalarize_intrinsic_call, check_init_expr_arguments,\n+\tcheck_inquiry, check_conversion, gfc_reduce_init_expr): Update\n+\tcall to gfc_check_init_expr.\n+\n 2012-05-31  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* trans-common.c: Do not include output.h."}, {"sha": "9926f0506f6237b8bff94e4828b051f138d650f2", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -163,7 +163,7 @@ kind_check (gfc_expr *k, int n, bt type)\n   if (scalar_check (k, n) == FAILURE)\n     return FAILURE;\n \n-  if (k->expr_type != EXPR_CONSTANT)\n+  if (gfc_check_init_expr (k) != SUCCESS)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a constant\",\n \t\t gfc_current_intrinsic_arg[n]->name, gfc_current_intrinsic,"}, {"sha": "4765afa367fcd70ed9402f81b264edaaa89e76fc", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -1943,12 +1943,6 @@ et0 (gfc_expr *e)\n }\n \n \n-/* Check an intrinsic arithmetic operation to see if it is consistent\n-   with some type of expression.  */\n-\n-static gfc_try check_init_expr (gfc_expr *);\n-\n-\n /* Scalarize an expression for an elemental intrinsic call.  */\n \n static gfc_try\n@@ -1994,7 +1988,7 @@ scalarize_intrinsic_call (gfc_expr *e)\n   for (; a; a = a->next)\n     {\n       /* Check that this is OK for an initialization expression.  */\n-      if (a->expr && check_init_expr (a->expr) == FAILURE)\n+      if (a->expr && gfc_check_init_expr (a->expr) == FAILURE)\n \tgoto cleanup;\n \n       rank[n] = 0;\n@@ -2231,7 +2225,7 @@ check_init_expr_arguments (gfc_expr *e)\n   gfc_actual_arglist *ap;\n \n   for (ap = e->value.function.actual; ap; ap = ap->next)\n-    if (check_init_expr (ap->expr) == FAILURE)\n+    if (gfc_check_init_expr (ap->expr) == FAILURE)\n       return MATCH_ERROR;\n \n   return MATCH_YES;\n@@ -2319,7 +2313,7 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \t\t\t&ap->expr->where);\n \t      return MATCH_ERROR;\n \t  }\n-\telse if (not_restricted && check_init_expr (ap->expr) == FAILURE)\n+\telse if (not_restricted && gfc_check_init_expr (ap->expr) == FAILURE)\n \t  return MATCH_ERROR;\n \n \tif (not_restricted == 0\n@@ -2437,8 +2431,8 @@ check_conversion (gfc_expr *e)\n    intrinsics in the context of initialization expressions.  If\n    FAILURE is returned an error message has been generated.  */\n \n-static gfc_try\n-check_init_expr (gfc_expr *e)\n+gfc_try\n+gfc_check_init_expr (gfc_expr *e)\n {\n   match m;\n   gfc_try t;\n@@ -2449,7 +2443,7 @@ check_init_expr (gfc_expr *e)\n   switch (e->expr_type)\n     {\n     case EXPR_OP:\n-      t = check_intrinsic_op (e, check_init_expr);\n+      t = check_intrinsic_op (e, gfc_check_init_expr);\n       if (t == SUCCESS)\n \tt = gfc_simplify_expr (e, 0);\n \n@@ -2573,11 +2567,11 @@ check_init_expr (gfc_expr *e)\n       break;\n \n     case EXPR_SUBSTRING:\n-      t = check_init_expr (e->ref->u.ss.start);\n+      t = gfc_check_init_expr (e->ref->u.ss.start);\n       if (t == FAILURE)\n \tbreak;\n \n-      t = check_init_expr (e->ref->u.ss.end);\n+      t = gfc_check_init_expr (e->ref->u.ss.end);\n       if (t == SUCCESS)\n \tt = gfc_simplify_expr (e, 0);\n \n@@ -2592,14 +2586,14 @@ check_init_expr (gfc_expr *e)\n       if (t == FAILURE)\n \tbreak;\n \n-      t = gfc_check_constructor (e, check_init_expr);\n+      t = gfc_check_constructor (e, gfc_check_init_expr);\n       if (t == FAILURE)\n \tbreak;\n \n       break;\n \n     case EXPR_ARRAY:\n-      t = gfc_check_constructor (e, check_init_expr);\n+      t = gfc_check_constructor (e, gfc_check_init_expr);\n       if (t == FAILURE)\n \tbreak;\n \n@@ -2629,7 +2623,7 @@ gfc_reduce_init_expr (gfc_expr *expr)\n   gfc_init_expr_flag = true;\n   t = gfc_resolve_expr (expr);\n   if (t == SUCCESS)\n-    t = check_init_expr (expr);\n+    t = gfc_check_init_expr (expr);\n   gfc_init_expr_flag = false;\n \n   if (t == FAILURE)"}, {"sha": "759074aa01ac912c30fb98e0ec0f2db34fe1516d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -2708,6 +2708,7 @@ gfc_actual_arglist *gfc_copy_actual_arglist (gfc_actual_arglist *);\n const char *gfc_extract_int (gfc_expr *, int *);\n bool is_subref_array (gfc_expr *);\n bool gfc_is_simply_contiguous (gfc_expr *, bool);\n+gfc_try gfc_check_init_expr (gfc_expr *);\n \n gfc_expr *gfc_build_conversion (gfc_expr *);\n void gfc_free_ref_list (gfc_ref *);"}, {"sha": "cb5c8820323db5dae09d35afc27fe8490865530a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -1,3 +1,8 @@\n+2012-06-03  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\n+\tPR fortran/48831\n+\t* gfortran.dg/parameter_array_element_2.f90: New.\n+\n 2012-06-03  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53512"}, {"sha": "352ed57f545b6ec28833b7cc3f1cc95d17a0160b", "filename": "gcc/testsuite/gfortran.dg/parameter_array_element_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_element_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac6a832c3122846bcd0aa81af47f0e62519da92/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_element_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_element_2.f90?ref=7ac6a832c3122846bcd0aa81af47f0e62519da92", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR fortran/48831\n+! Contributed by Tobias Burnus\n+\n+program p1\n+    implicit none\n+    integer, parameter  :: i1    = kind(0)\n+    integer, parameter  :: i2(1) = [i1]\n+    integer(kind=i2(1)) :: i3\n+\n+    i3 = int(0, i1)\n+    print *, i3\n+\n+    i3 = int(0, i2(1))  ! This line gives an error when compiling.\n+    print *, i3\n+end program p1"}]}