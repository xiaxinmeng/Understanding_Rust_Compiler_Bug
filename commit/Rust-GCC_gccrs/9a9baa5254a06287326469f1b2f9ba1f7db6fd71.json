{"sha": "9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5YmFhNTI1NGEwNjI4NzMyNjQ2OWYxYjJmOWJhMWY3ZGI2ZmQ3MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-09-18T16:03:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-18T16:03:01Z"}, "message": "strnlen.c: New file.\n\n\t* strnlen.c: New file.\n\t* configure.ac: Check for strnlen, add it to AC_LIBOBJ if it's not\n\tpresent.\n\t* Makefile.in: Rebuild dependencies.\n\t(CFILES): Add strnlen.c.\n\t(CONFIGURED_OFILES): Add ./strnlen.$(objext).\n\t* configure, config.in, functions.texi: Rebuild.\n\n\t* maint-tool: Accept .def files in the include directory.\n\nFrom-SVN: r191432", "tree": {"sha": "e4924912fd85dad90b6a534928ada8aac3840841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4924912fd85dad90b6a534928ada8aac3840841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/comments", "author": null, "committer": null, "parents": [{"sha": "fb5e0707d18e9fd0bc6a0e92b6571512aafd0e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5e0707d18e9fd0bc6a0e92b6571512aafd0e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5e0707d18e9fd0bc6a0e92b6571512aafd0e43"}], "stats": {"total": 163, "additions": 141, "deletions": 22}, "files": [{"sha": "3f601a8546e0cbd1946db7b2dd4968a4fcf6990f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -1,3 +1,15 @@\n+2012-09-18  Ian Lance Taylor  <iant@google.com>\n+\n+\t* strnlen.c: New file.\n+\t* configure.ac: Check for strnlen, add it to AC_LIBOBJ if it's not\n+\tpresent.\n+\t* Makefile.in: Rebuild dependencies.\n+\t(CFILES): Add strnlen.c.\n+\t(CONFIGURED_OFILES): Add ./strnlen.$(objext).\n+\t* configure, config.in, functions.texi: Rebuild.\n+\n+\t* maint-tool: Accept .def files in the include directory.\n+\n 2012-09-18  Florian Weimer  <fweimer@redhat.com>\n \n \tPR other/54411"}, {"sha": "1ba8cf1ccb2a31e111186ed1ac3bbc0c69c4c8a3", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -151,7 +151,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t spaces.c splay-tree.c stack-limit.c stpcpy.c stpncpy.c\t\t\\\n \t strcasecmp.c strchr.c strdup.c strerror.c strncasecmp.c\t\\\n \t strncmp.c strrchr.c strsignal.c strstr.c strtod.c strtol.c\t\\\n-\t strtoul.c strndup.c strverscmp.c\t\t\t\t\\\n+\t strtoul.c strndup.c strnlen.c strverscmp.c\t\t\t\\\n \ttimeval-utils.c tmpnam.c\t\t\t\t\t\\\n \tunlink-if-ordinary.c\t\t\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n@@ -215,9 +215,9 @@ CONFIGURED_OFILES = ./asprintf.$(objext) ./atexit.$(objext)\t\t\\\n \t ./sigsetmask.$(objext) ./snprintf.$(objext)\t\t\t\\\n \t ./stpcpy.$(objext) ./stpncpy.$(objext) ./strcasecmp.$(objext)\t\\\n \t ./strchr.$(objext) ./strdup.$(objext) ./strncasecmp.$(objext)\t\\\n-\t ./strncmp.$(objext) ./strndup.$(objext) ./strrchr.$(objext)\t\\\n-\t ./strstr.$(objext) ./strtod.$(objext) ./strtol.$(objext)\t\\\n-\t ./strtoul.$(objext) ./strverscmp.$(objext)\t\t\t\\\n+\t ./strncmp.$(objext) ./strndup.$(objext) ./strnlen.$(objext)\t\\\n+\t ./strrchr.$(objext) ./strstr.$(objext) ./strtod.$(objext)\t\\\n+\t ./strtol.$(objext) ./strtoul.$(objext) ./strverscmp.$(objext)\t\\\n \t./tmpnam.$(objext)\t\t\t\t\t\t\\\n \t./vasprintf.$(objext) ./vfork.$(objext) ./vfprintf.$(objext)\t\\\n \t ./vprintf.$(objext) ./vsnprintf.$(objext) ./vsprintf.$(objext)\t\\\n@@ -622,8 +622,8 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/crc32.c $(OUTPUT_OPTION)\n \n-./dwarfnames.$(objext): $(srcdir)/dwarfnames.c $(INCDIR)/dwarf2.h \\\n-\t$(INCDIR)/dwarf2.def\n+./dwarfnames.$(objext): $(srcdir)/dwarfnames.c $(INCDIR)/dwarf2.def \\\n+\t$(INCDIR)/dwarf2.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/dwarfnames.c -o pic/$@; \\\n \telse true; fi\n@@ -656,7 +656,8 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/fibheap.c $(OUTPUT_OPTION)\n \n-./filename_cmp.$(objext): $(srcdir)/filename_cmp.c config.h $(INCDIR)/filenames.h \\\n+./filename_cmp.$(objext): $(srcdir)/filename_cmp.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/filenames.h $(INCDIR)/hashtab.h \\\n \t$(INCDIR)/safe-ctype.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/filename_cmp.c -o pic/$@; \\\n@@ -757,7 +758,7 @@ $(CONFIGURED_OFILES): stamp-picdir\n \t$(COMPILE.c) $(srcdir)/insque.c $(OUTPUT_OPTION)\n \n ./lbasename.$(objext): $(srcdir)/lbasename.c config.h $(INCDIR)/ansidecl.h \\\n-\t$(INCDIR)/filenames.h $(INCDIR)/libiberty.h \\\n+\t$(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/safe-ctype.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/lbasename.c -o pic/$@; \\\n@@ -1043,7 +1044,7 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/splay-tree.c $(OUTPUT_OPTION)\n \n-./stack-limit.$(objext): $(srcdir)/stack-limit.c config.h\n+./stack-limit.$(objext): $(srcdir)/stack-limit.c config.h $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/stack-limit.c -o pic/$@; \\\n \telse true; fi\n@@ -1104,6 +1105,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/strndup.c $(OUTPUT_OPTION)\n \n+./strnlen.$(objext): $(srcdir)/strnlen.c config.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/strnlen.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/strnlen.c $(OUTPUT_OPTION)\n+\n ./strrchr.$(objext): $(srcdir)/strrchr.c $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/strrchr.c -o pic/$@; \\"}, {"sha": "1cf9c11b6ee7735bd0d7cac2fc07d9b513626d73", "filename": "libiberty/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -262,6 +262,9 @@\n /* Define to 1 if you have the `strndup' function. */\n #undef HAVE_STRNDUP\n \n+/* Define to 1 if you have the `strnlen' function. */\n+#undef HAVE_STRNLEN\n+\n /* Define to 1 if you have the `strrchr' function. */\n #undef HAVE_STRRCHR\n "}, {"sha": "536702742dd418b60431890a472681ef0bedf84d", "filename": "libiberty/configure", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -5340,6 +5340,7 @@ funcs=\"$funcs strchr\"\n funcs=\"$funcs strdup\"\n funcs=\"$funcs strncasecmp\"\n funcs=\"$funcs strndup\"\n+funcs=\"$funcs strnlen\"\n funcs=\"$funcs strrchr\"\n funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n@@ -5380,8 +5381,8 @@ if test \"x\" = \"y\"; then\n     random realpath rename rindex \\\n     sbrk setenv setproctitle setrlimit sigsetmask snprintf spawnve spawnvpe \\\n      stpcpy stpncpy strcasecmp strchr strdup \\\n-     strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n-     strtoul strverscmp sysconf sysctl sysmp \\\n+     strerror strncasecmp strndup strnlen strrchr strsignal strstr strtod \\\n+     strtol strtoul strverscmp sysconf sysctl sysmp \\\n     table times tmpnam \\\n     vasprintf vfprintf vprintf vsprintf \\\n     wait3 wait4 waitpid\n@@ -5662,6 +5663,12 @@ esac\n  ;;\n esac\n \n+    case \" $LIBOBJS \" in\n+  *\" strnlen.$ac_objext \"* ) ;;\n+  *) LIBOBJS=\"$LIBOBJS strnlen.$ac_objext\"\n+ ;;\n+esac\n+\n     case \" $LIBOBJS \" in\n   *\" strverscmp.$ac_objext \"* ) ;;\n   *) LIBOBJS=\"$LIBOBJS strverscmp.$ac_objext\"\n@@ -5683,7 +5690,7 @@ esac\n \n     for f in $funcs; do\n       case \"$f\" in\n-\tasprintf | basename | bcmp | bcopy | bzero | clock | ffs | getpagesize | index | insque | mempcpy | mkstemps | random | rindex | sigsetmask | stpcpy | stpncpy | strdup | strndup | strverscmp | vasprintf | waitpid)\n+\tasprintf | basename | bcmp | bcopy | bzero | clock | ffs | getpagesize | index | insque | mempcpy | mkstemps | random | rindex | sigsetmask | stpcpy | stpncpy | strdup | strndup | strnlen | strverscmp | vasprintf | waitpid)\n \t  ;;\n \t*)\n \t  n=HAVE_`echo $f | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"}, {"sha": "c76389426447c6881c71d9f1e06b9700bcce0b87", "filename": "libiberty/configure.ac", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -322,6 +322,7 @@ funcs=\"$funcs strchr\"\n funcs=\"$funcs strdup\"\n funcs=\"$funcs strncasecmp\"\n funcs=\"$funcs strndup\"\n+funcs=\"$funcs strnlen\"\n funcs=\"$funcs strrchr\"\n funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n@@ -362,8 +363,8 @@ if test \"x\" = \"y\"; then\n     random realpath rename rindex \\\n     sbrk setenv setproctitle setrlimit sigsetmask snprintf spawnve spawnvpe \\\n      stpcpy stpncpy strcasecmp strchr strdup \\\n-     strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n-     strtoul strverscmp sysconf sysctl sysmp \\\n+     strerror strncasecmp strndup strnlen strrchr strsignal strstr strtod \\\n+     strtol strtoul strverscmp sysconf sysctl sysmp \\\n     table times tmpnam \\\n     vasprintf vfprintf vprintf vsprintf \\\n     wait3 wait4 waitpid)\n@@ -442,13 +443,14 @@ if test -n \"${with_target_subdir}\"; then\n     AC_LIBOBJ([stpcpy])\n     AC_LIBOBJ([stpncpy])\n     AC_LIBOBJ([strndup])\n+    AC_LIBOBJ([strnlen])\n     AC_LIBOBJ([strverscmp])\n     AC_LIBOBJ([vasprintf])\n     AC_LIBOBJ([waitpid])\n \n     for f in $funcs; do\n       case \"$f\" in\n-\tasprintf | basename | bcmp | bcopy | bzero | clock | ffs | getpagesize | index | insque | mempcpy | mkstemps | random | rindex | sigsetmask | stpcpy | stpncpy | strdup | strndup | strverscmp | vasprintf | waitpid)\n+\tasprintf | basename | bcmp | bcopy | bzero | clock | ffs | getpagesize | index | insque | mempcpy | mkstemps | random | rindex | sigsetmask | stpcpy | stpncpy | strdup | strndup | strnlen | strverscmp | vasprintf | waitpid)\n \t  ;;\n \t*)\n \t  n=HAVE_`echo $f | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"}, {"sha": "9323ff9f2e4f3098081d066b9105ed86ae8ca217", "filename": "libiberty/functions.texi", "status": "modified", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -84,7 +84,7 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n-@c argv.c:142\n+@c argv.c:135\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n Given a pointer to a string, parse the string extracting fields\n@@ -95,7 +95,7 @@ remains unchanged.  The last element of the vector is followed by a\n @code{NULL} element.\n \n All of the memory for the pointer array and copies of the string\n-is obtained from @code{malloc}.  All of the memory can be returned to the\n+is obtained from @code{xmalloc}.  All of the memory can be returned to the\n system with the single function call @code{freeargv}, which takes the\n returned result of @code{buildargv}, as it's argument.\n \n@@ -166,6 +166,14 @@ pointer encountered.  Pointers to empty strings are ignored.\n \n @end deftypefn\n \n+@c argv.c:470\n+@deftypefn Extension int countargv (char **@var{argv})\n+\n+Return the number of elements in @var{argv}.\n+Returns zero if @var{argv} is NULL.\n+\n+@end deftypefn\n+\n @c crc32.c:141\n @deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @\n   int @var{len}, unsigned int @var{init})\n@@ -224,7 +232,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:361\n+@c argv.c:341\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual\n@@ -296,7 +304,24 @@ and backward slashes are equal.\n \n @end deftypefn\n \n-@c filename_cmp.c:81\n+@c filename_cmp.c:178\n+@deftypefn Extension int filename_eq (const void *@var{s1}, const void *@var{s2})\n+\n+Return non-zero if file names @var{s1} and @var{s2} are equivalent.\n+This function is for use with hashtab.c hash tables.\n+\n+@end deftypefn\n+\n+@c filename_cmp.c:147\n+@deftypefn Extension hashval_t filename_hash (const void *@var{s})\n+\n+Return the hash value for file name @var{s} that will be compared\n+using filename_cmp.\n+This function is for use with hashtab.c hash tables.\n+\n+@end deftypefn\n+\n+@c filename_cmp.c:89\n @deftypefn Extension int filename_ncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n \n Return zero if the two file names @var{s1} and @var{s2} are equivalent\n@@ -376,7 +401,7 @@ unchanged.\n \n @end deftypefn\n \n-@c argv.c:97\n+@c argv.c:90\n @deftypefn Extension void freeargv (char **@var{vector})\n \n Free an argument vector that was built using @code{buildargv}.  Simply\n@@ -1465,6 +1490,13 @@ deallocate values.\n \n @end deftypefn\n \n+@c stack-limit.c:28\n+@deftypefn Extension void stack_limit_increase (unsigned long @var{pref})\n+\n+Attempt to increase stack size limit to @var{pref} bytes if possible.\n+\n+@end deftypefn\n+\n @c stpcpy.c:23\n @deftypefn Supplemental char* stpcpy (char *@var{dst}, const char *@var{src})\n \n@@ -1574,6 +1606,16 @@ memory was available.  The result is always NUL terminated.\n \n @end deftypefn\n \n+@c strnlen.c:6\n+@deftypefn Supplemental size_t strnlen (const char *@var{s}, size_t @var{maxlen})\n+\n+Returns the length of @var{s}, as with @code{strlen}, but never looks\n+past the first @var{maxlen} characters in the string.  If there is no\n+'\\0' character in the first @var{maxlen} characters, returns\n+@var{maxlen}.\n+\n+@end deftypefn\n+\n @c strrchr.c:6\n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n@@ -1728,6 +1770,22 @@ This function is especially useful when dealing with filename sorting,\n because filenames frequently hold indices/version numbers.\n @end deftypefun\n \n+@c timeval-utils.c:43\n+@deftypefn Extension void timeval_add (struct timeval *@var{a}, @\n+  struct timeval *@var{b}, struct timeval *@var{result})\n+\n+Adds @var{a} to @var{b} and stores the result in @var{result}.\n+\n+@end deftypefn\n+\n+@c timeval-utils.c:67\n+@deftypefn Extension void timeval_sub (struct timeval *@var{a}, @\n+  struct timeval *@var{b}, struct timeval *@var{result})\n+\n+Subtracts @var{b} from @var{a} and stores the result in @var{result}.\n+\n+@end deftypefn\n+\n @c tmpnam.c:3\n @deftypefn Supplemental char* tmpnam (char *@var{s})\n \n@@ -1829,7 +1887,7 @@ does the return value.  The third argument is unused in @libib{}.\n \n @end deftypefn\n \n-@c argv.c:306\n+@c argv.c:286\n @deftypefn Extension int writeargv (const char **@var{argv}, FILE *@var{file})\n \n Write each member of ARGV, handling all necessary quoting, to the file"}, {"sha": "d50f8959a388f70efe2c3653cf508808e8886a85", "filename": "libiberty/maint-tool", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fmaint-tool", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fmaint-tool", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmaint-tool?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -222,7 +222,7 @@ sub deps {\n \n     opendir(INC, $incdir);\n     while ($f = readdir INC) {\n-\tnext unless $f =~ /\\.h$/;\n+\tnext unless $f =~ /\\.h$/ || $f =~ /\\.def$/;\n \t$mine{$f} = \"\\$(INCDIR)/$f\";\n \t$deps{$f} = join(' ', &deps_for(\"$incdir/$f\"));\n     }"}, {"sha": "4934973adcac15dce91f907915432b7e3b56fe9d", "filename": "libiberty/strnlen.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fstrnlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9baa5254a06287326469f1b2f9ba1f7db6fd71/libiberty%2Fstrnlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrnlen.c?ref=9a9baa5254a06287326469f1b2f9ba1f7db6fd71", "patch": "@@ -0,0 +1,30 @@\n+/* Portable version of strnlen.\n+   This function is in the public domain.  */\n+\n+/*\n+\n+@deftypefn Supplemental size_t strnlen (const char *@var{s}, size_t @var{maxlen})\n+\n+Returns the length of @var{s}, as with @code{strlen}, but never looks\n+past the first @var{maxlen} characters in the string.  If there is no\n+'\\0' character in the first @var{maxlen} characters, returns\n+@var{maxlen}.\n+\n+@end deftypefn\n+\n+*/\n+\n+#include \"config.h\"\n+\n+#include <stddef.h>\n+\n+size_t\n+strnlen (const char *s, size_t maxlen)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < maxlen; ++i)\n+    if (s[i] == '\\0')\n+      break;\n+  return i;\n+}"}]}