{"sha": "35a76aacf6174d280b49051a7e1cf1bc9334ce11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhNzZhYWNmNjE3NGQyODBiNDkwNTFhN2UxY2YxYmM5MzM0Y2UxMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-21T19:57:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-21T19:57:39Z"}, "message": "reg-stack.c (swap_rtx_condition, [...]): Use unspec names, not numbers.\n\n        * reg-stack.c (swap_rtx_condition, subst_stack_regs_pat): Use\n        unspec names, not numbers.\n\nFrom-SVN: r53693", "tree": {"sha": "28f9b88e7b95bf3b95f9038c6e2e475f6642fa18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28f9b88e7b95bf3b95f9038c6e2e475f6642fa18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35a76aacf6174d280b49051a7e1cf1bc9334ce11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a76aacf6174d280b49051a7e1cf1bc9334ce11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a76aacf6174d280b49051a7e1cf1bc9334ce11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a76aacf6174d280b49051a7e1cf1bc9334ce11/comments", "author": null, "committer": null, "parents": [{"sha": "32d3f6346aa1a54bf186cf7498ecb46ce1b4a8d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d3f6346aa1a54bf186cf7498ecb46ce1b4a8d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d3f6346aa1a54bf186cf7498ecb46ce1b4a8d1"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "84fbe3f6faf9e1c625ef181545fbac7bf9315ee2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a76aacf6174d280b49051a7e1cf1bc9334ce11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a76aacf6174d280b49051a7e1cf1bc9334ce11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35a76aacf6174d280b49051a7e1cf1bc9334ce11", "patch": "@@ -1,3 +1,8 @@\n+2002-05-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* reg-stack.c (swap_rtx_condition, subst_stack_regs_pat): Use\n+\tunspec names, not numbers.\n+\n 2002-05-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/sourcebuild.texi: Mention snapshot-README and"}, {"sha": "942f2579488a06efae119cd158caaa34737c6a26", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a76aacf6174d280b49051a7e1cf1bc9334ce11/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a76aacf6174d280b49051a7e1cf1bc9334ce11/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=35a76aacf6174d280b49051a7e1cf1bc9334ce11", "patch": "@@ -1260,7 +1260,7 @@ swap_rtx_condition (insn)\n \n   if (GET_CODE (pat) == SET\n       && GET_CODE (SET_SRC (pat)) == UNSPEC\n-      && XINT (SET_SRC (pat), 1) == 9)\n+      && XINT (SET_SRC (pat), 1) == UNSPEC_FNSTSW)\n     {\n       rtx dest = SET_DEST (pat);\n \n@@ -1281,7 +1281,7 @@ swap_rtx_condition (insn)\n       pat = PATTERN (insn);\n       if (GET_CODE (pat) != SET\n \t  || GET_CODE (SET_SRC (pat)) != UNSPEC\n-\t  || XINT (SET_SRC (pat), 1) != 10\n+\t  || XINT (SET_SRC (pat), 1) != UNSPEC_SAHF\n \t  || ! dead_or_set_p (insn, dest))\n \treturn 0;\n \n@@ -1705,8 +1705,8 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t  case UNSPEC:\n \t    switch (XINT (pat_src, 1))\n \t      {\n-\t      case 1: /* sin */\n-\t      case 2: /* cos */\n+\t      case UNSPEC_SIN:\n+\t      case UNSPEC_COS:\n \t\t/* These insns only operate on the top of the stack.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n@@ -1728,19 +1728,17 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\tbreak;\n \n-\t      case 10:\n-\t\t/* (unspec [(unspec [(compare ..)] 9)] 10)\n-\t\t   Unspec 9 is fnstsw; unspec 10 is sahf.  The combination\n-\t\t   matches the PPRO fcomi instruction.  */\n+\t      case UNSPEC_SAHF:\n+\t\t/* (unspec [(unspec [(compare)] UNSPEC_FNSTSW)] UNSPEC_SAHF)\n+\t\t   The combination matches the PPRO fcomi instruction.  */\n \n \t\tpat_src = XVECEXP (pat_src, 0, 0);\n \t\tif (GET_CODE (pat_src) != UNSPEC\n-\t\t    || XINT (pat_src, 1) != 9)\n+\t\t    || XINT (pat_src, 1) != UNSPEC_FNSTSW)\n \t\t  abort ();\n \t\t/* FALLTHRU */\n \n-\t      case 9:\n-\t\t/* (unspec [(compare ..)] 9) */\n+\t      case UNSPEC_FNSTSW:\n \t\t/* Combined fcomp+fnstsw generated for doing well with\n \t\t   CSE.  When optimizing this would have been broken\n \t\t   up before now.  */\n@@ -1775,8 +1773,8 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\t&& REGNO (*dest) != regstack->reg[regstack->top])\n \t      {\n \t\t/* In case one of operands is the top of stack and the operands\n-\t\t   dies, it is safe to make it the destination operand by reversing\n-\t\t   the direction of cmove and avoid fxch.  */\n+\t\t   dies, it is safe to make it the destination operand by\n+\t\t   reversing the direction of cmove and avoid fxch.  */\n \t\tif ((REGNO (*src1) == regstack->reg[regstack->top]\n \t\t     && src1_note)\n \t\t    || (REGNO (*src2) == regstack->reg[regstack->top]"}]}