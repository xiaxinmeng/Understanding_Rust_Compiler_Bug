{"sha": "b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjOWQ3MGZkN2ViOGUzOWFlZmI3ZDZkMjMyOWNjYmQ1ZGExNWIzNg==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-08-11T17:41:09Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-08-11T17:41:09Z"}, "message": "predicates.md (qi_mask_operand, [...]): New predicates.\n\n\t* config/mips/predicates.md (qi_mask_operand, hi_mask_operand,\n\tsi_mask_operand, and_load_operand, low_bitmask_operand,\n\tand_reg_operand, and_operand): New predicates.\n\t* config/mips/constraints.md (Yb, Yh, Yw, Yz): New constraints.\n\t* config/mips/mips.c (and_operands_ok): New function.\n\t* config/mips/mips-protos.h (and_operands_ok): Declare it.\n\t* config/mips/mips.md (move_type): Add ext_ins and logical.\n\t(type): Handle them.\n\t(and<mode>3): Use and_reg_operand as the second operand's\n\tpredicate.\n\t(*and<mode>3): Add alternatives for lbu, lhu, lwu, <d>ext and\n\tshift_shift.  Remove commutative constraint modifier.\n\t(*and<mode>3_mips16): Add alternatives for lbu, lhu, lwu and\n\tshift_shift.\n\t(*clear_upper32_dext): Remove define_insn_and_split.\n\t(*clear_upper32): Turn this define_insn_and_split ...\n\t(splitter for ANDing register with 0xffff_ffff): .. into this.\n\ntestsuite/\n\t* gcc.target/mips/ext-5.c: New test.\n\t* gcc.target/mips/ext-6.c: New test.\n\t* gcc.target/mips/ext-7.c: New test.\n\t* gcc.target/mips/ext-8.c: New test.\n\t* gcc.target/mips/extend-2.c: New test.\n\nFrom-SVN: r150657", "tree": {"sha": "65c7c636969426abfeb559712330ea2dbb860d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c7c636969426abfeb559712330ea2dbb860d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/comments", "author": null, "committer": null, "parents": [{"sha": "842e098c5ff56730b4d84d5560eb4053a12ebd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842e098c5ff56730b4d84d5560eb4053a12ebd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842e098c5ff56730b4d84d5560eb4053a12ebd61"}], "stats": {"total": 292, "additions": 238, "deletions": 54}, "files": [{"sha": "d146a2efe08eddb8830527a73449dc3dd7da7f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -1,3 +1,23 @@\n+2009-08-11  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/predicates.md (qi_mask_operand, hi_mask_operand,\n+\tsi_mask_operand, and_load_operand, low_bitmask_operand,\n+\tand_reg_operand, and_operand): New predicates.\n+\t* config/mips/constraints.md (Yb, Yh, Yw, Yz): New constraints.\n+\t* config/mips/mips.c (and_operands_ok): New function.\n+\t* config/mips/mips-protos.h (and_operands_ok): Declare it.\n+\t* config/mips/mips.md (move_type): Add ext_ins and logical.\n+\t(type): Handle them.\n+\t(and<mode>3): Use and_reg_operand as the second operand's\n+\tpredicate.\n+\t(*and<mode>3): Add alternatives for lbu, lhu, lwu, <d>ext and\n+\tshift_shift.  Remove commutative constraint modifier.\n+\t(*and<mode>3_mips16): Add alternatives for lbu, lhu, lwu and\n+\tshift_shift.\n+\t(*clear_upper32_dext): Remove define_insn_and_split.\n+\t(*clear_upper32): Turn this define_insn_and_split ...\n+\t(splitter for ANDing register with 0xffff_ffff): .. into this.\n+\n 2009-08-11  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* combine.c (try_widen_shift_mode): Factor out code to check if an"}, {"sha": "a29d2c976962bd27da74bcd23b80672ba8b56087", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -215,3 +215,19 @@\n    A signed 10-bit constant.\"\n   (and (match_code \"const_int\")\n        (match_test \"IMM10_OPERAND (ival)\")))\n+\n+(define_constraint \"Yb\"\n+   \"@internal\"\n+   (match_operand 0 \"qi_mask_operand\"))\n+\n+(define_constraint \"Yh\"\n+   \"@internal\"\n+    (match_operand 0 \"hi_mask_operand\"))\n+\n+(define_constraint \"Yw\"\n+   \"@internal\"\n+    (match_operand 0 \"si_mask_operand\"))\n+\n+(define_constraint \"Yx\"\n+   \"@internal\"\n+   (match_operand 0 \"low_bitmask_operand\"))"}, {"sha": "40ffd7fd7d1fbf5c475fb2f92c92e0d7699af951", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -316,6 +316,7 @@ extern bool mips16e_save_restore_pattern_p (rtx, HOST_WIDE_INT,\n \n extern bool mask_low_and_shift_p (enum machine_mode, rtx, rtx, int);\n extern int mask_low_and_shift_len (enum machine_mode, rtx, rtx);\n+extern bool and_operands_ok (enum machine_mode, rtx, rtx);\n \n union mips_gen_fn_ptrs\n {"}, {"sha": "2dd01184775f475365a6f1afad56c65e6dc0de9e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -6786,6 +6786,18 @@ mask_low_and_shift_p (enum machine_mode mode, rtx mask, rtx shift, int maxlen)\n   return IN_RANGE (mask_low_and_shift_len (mode, mask, shift), 1, maxlen);\n }\n \n+/* Return true iff OP1 and OP2 are valid operands together for the\n+   *and<MODE>3 and *and<MODE>3_mips16 patterns.  For the cases to consider,\n+   see the table in the comment before the pattern.  */\n+\n+bool\n+and_operands_ok (enum machine_mode mode, rtx op1, rtx op2)\n+{\n+  return (memory_operand (op1, mode)\n+\t  ? and_load_operand (op2, mode)\n+\t  : and_reg_operand (op2, mode));\n+}\n+\n /* The canonical form of a mask-low-and-shift-left operation is\n    (and (ashift X SHIFT) MASK) where MASK has the lower SHIFT number of bits\n    cleared.  Thus we need to shift MASK to the right before checking if it"}, {"sha": "bbea6f3401ec80d5e058ffc8209cf94323e63b7e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 92, "deletions": 54, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -301,6 +301,7 @@\n ;; sll0\t\t\"sll DEST,SRC,0\", which on 64-bit targets is guaranteed\n ;;\t\tto produce a sign-extended DEST, even if SRC is not\n ;;\t\tproperly sign-extended\n+;; ext_ins\tEXT, DEXT, INS or DINS instruction\n ;; andi\t\ta single ANDI instruction\n ;; loadpool\tmove a constant into a MIPS16 register by loading it\n ;;\t\tfrom the pool\n@@ -313,7 +314,8 @@\n ;; scheduling type to be \"multi\" instead.\n (define_attr \"move_type\"\n   \"unknown,load,fpload,store,fpstore,mtc,mfc,mthilo,mfhilo,move,fmove,\n-   const,constN,signext,arith,sll0,andi,loadpool,shift_shift,lui_movf\"\n+   const,constN,signext,ext_ins,logical,arith,sll0,andi,loadpool,\n+   shift_shift,lui_movf\"\n   (const_string \"unknown\"))\n \n ;; Main data type used by the insn\n@@ -408,7 +410,9 @@\n \t (eq_attr \"move_type\" \"fmove\") (const_string \"fmove\")\n \t (eq_attr \"move_type\" \"loadpool\") (const_string \"load\")\n \t (eq_attr \"move_type\" \"signext\") (const_string \"signext\")\n+\t (eq_attr \"move_type\" \"ext_ins\") (const_string \"arith\")\n \t (eq_attr \"move_type\" \"arith\") (const_string \"arith\")\n+\t (eq_attr \"move_type\" \"logical\") (const_string \"logical\")\n \t (eq_attr \"move_type\" \"sll0\") (const_string \"shift\")\n \t (eq_attr \"move_type\" \"andi\") (const_string \"logical\")\n \n@@ -2561,31 +2565,91 @@\n (define_expand \"and<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\")\n \t(and:GPR (match_operand:GPR 1 \"register_operand\")\n-\t\t (match_operand:GPR 2 \"uns_arith_operand\")))]\n-  \"\"\n-{\n-  if (TARGET_MIPS16)\n-    operands[2] = force_reg (<MODE>mode, operands[2]);\n-})\n+\t\t (match_operand:GPR 2 \"and_reg_operand\")))])\n+\n+;; The middle-end is not allowed to convert ANDing with 0xffff_ffff into a\n+;; zero_extendsidi2 because of TRULY_NOOP_TRUNCATION, so handle these here.\n+;; Note that this variant does not trigger for SI mode because we require\n+;; a 64-bit HOST_WIDE_INT and 0xffff_ffff wouldn't be a canonical\n+;; sign-extended SImode value.\n+;;\n+;; These are possible combinations for operand 1 and 2.  The table\n+;; includes both MIPS and MIPS16 cases.  (r=register, mem=memory,\n+;; 16=MIPS16, x=match, S=split):\n+;;\n+;;     \\ op1    r/EXT   r/!EXT  mem   r/16   mem/16\n+;;  op2\n+;;\n+;;  andi           x     x\n+;;  0xff           x     x       x             x\n+;;  0xffff         x     x       x             x\n+;;  0xffff_ffff    x     S       x     S       x\n+;;  low-bitmask    x\n+;;  register       x     x\n+;;  register =op1                      x\n \n (define_insn \"*and<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-\t(and:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n-\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"!TARGET_MIPS16\"\n-  \"@\n-   and\\t%0,%1,%2\n-   andi\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d,d,d,d,d\")\n+\t(and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"o,o,W,d,d,d,d\")\n+\t\t (match_operand:GPR 2 \"and_operand\" \"Yb,Yh,Yw,K,Yx,Yw,d\")))]\n+  \"!TARGET_MIPS16 && and_operands_ok (<MODE>mode, operands[1], operands[2])\"\n+{\n+  int len;\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      operands[1] = gen_lowpart (QImode, operands[1]);\n+      return \"lbu\\t%0,%1\";\n+    case 1:\n+      operands[1] = gen_lowpart (HImode, operands[1]);\n+      return \"lhu\\t%0,%1\";\n+    case 2:\n+      operands[1] = gen_lowpart (SImode, operands[1]);\n+      return \"lwu\\t%0,%1\";\n+    case 3:\n+      return \"andi\\t%0,%1,%x2\";\n+    case 4:\n+      len = low_bitmask_len (<MODE>mode, INTVAL (operands[2]));\n+      operands[2] = GEN_INT (len);\n+      return \"<d>ext\\t%0,%1,0,%2\";\n+    case 5:\n+      return \"#\";\n+    case 6:\n+      return \"and\\t%0,%1,%2\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"move_type\" \"load,load,load,andi,ext_ins,shift_shift,logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and<mode>3_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(and:GPR (match_operand:GPR 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n-  \"TARGET_MIPS16\"\n-  \"and\\t%0,%2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d,d,d\")\n+\t(and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%o,o,W,d,0\")\n+\t\t (match_operand:GPR 2 \"and_operand\" \"Yb,Yh,Yw,Yw,d\")))]\n+  \"TARGET_MIPS16 && and_operands_ok (<MODE>mode, operands[1], operands[2])\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      operands[1] = gen_lowpart (QImode, operands[1]);\n+      return \"lbu\\t%0,%1\";\n+    case 1:\n+      operands[1] = gen_lowpart (HImode, operands[1]);\n+      return \"lhu\\t%0,%1\";\n+    case 2:\n+      operands[1] = gen_lowpart (SImode, operands[1]);\n+      return \"lwu\\t%0,%1\";\n+    case 3:\n+      return \"#\";\n+    case 4:\n+      return \"and\\t%0,%2\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"move_type\" \"load,load,load,shift_shift,logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"ior<mode>3\"\n@@ -2778,44 +2842,18 @@\n   [(set_attr \"move_type\" \"arith,load\")\n    (set_attr \"mode\" \"DI\")])\n \n-;; Combine is not allowed to convert this insn into a zero_extendsidi2\n-;; because of TRULY_NOOP_TRUNCATION.\n+;; See the comment before the *and<mode>3 pattern why this is generated by\n+;; combine.\n \n-(define_insn_and_split \"*clear_upper32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"d,W\")\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (and:DI (match_operand:DI 1 \"register_operand\")\n \t\t(const_int 4294967295)))]\n-  \"TARGET_64BIT && !ISA_HAS_EXT_INS\"\n-{\n-  if (which_alternative == 0)\n-    return \"#\";\n-\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  return \"lwu\\t%0,%1\";\n-}\n-  \"&& reload_completed && REG_P (operands[1])\"\n+  \"TARGET_64BIT && !ISA_HAS_EXT_INS && reload_completed\"\n   [(set (match_dup 0)\n         (ashift:DI (match_dup 1) (const_int 32)))\n    (set (match_dup 0)\n-        (lshiftrt:DI (match_dup 0) (const_int 32)))]\n-  \"\"\n-  [(set_attr \"move_type\" \"shift_shift,load\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*clear_upper32_dext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"d,W\")\n-\t\t(const_int 4294967295)))]\n-  \"TARGET_64BIT && ISA_HAS_EXT_INS\"\n-{\n-  if (which_alternative == 0)\n-    return \"dext\\t%0,%1,0,32\";\n-\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  return \"lwu\\t%0,%1\";\n-}\n-  [(set_attr \"move_type\" \"arith,load\")\n-   (set_attr \"mode\" \"DI\")])\n+        (lshiftrt:DI (match_dup 0) (const_int 32)))])\n \n (define_expand \"zero_extend<SHORT:mode><GPR:mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\")"}, {"sha": "a9a0177197e5f9c472aa9bbbce2933540c6c6c8e", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -76,6 +76,39 @@\n        (ior (match_test \"op == CONST0_RTX (GET_MODE (op))\")\n \t    (match_test \"op == CONST1_RTX (GET_MODE (op))\"))))\n \n+(define_predicate \"qi_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) == 0xff\")))\n+\n+(define_predicate \"hi_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) == 0xffff\")))\n+\n+(define_predicate \"si_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) == 0xffffffff\")))\n+\n+(define_predicate \"and_load_operand\"\n+  (ior (match_operand 0 \"qi_mask_operand\")\n+       (match_operand 0 \"hi_mask_operand\")\n+       (match_operand 0 \"si_mask_operand\")))\n+\n+(define_predicate \"low_bitmask_operand\"\n+  (and (match_test \"ISA_HAS_EXT_INS\")\n+       (match_code \"const_int\")\n+       (match_test \"low_bitmask_len (mode, INTVAL (op)) > 16\")))\n+\n+(define_predicate \"and_reg_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_test \"!TARGET_MIPS16\")\n+\t    (match_operand 0 \"const_uns_arith_operand\"))\n+       (match_operand 0 \"low_bitmask_operand\")\n+       (match_operand 0 \"si_mask_operand\")))\n+\n+(define_predicate \"and_operand\"\n+  (ior (match_operand 0 \"and_load_operand\")\n+       (match_operand 0 \"and_reg_operand\")))\n+\n (define_predicate \"d_operand\"\n   (and (match_code \"reg\")\n        (match_test \"TARGET_MIPS16"}, {"sha": "017a12b388f7537c27703c3e31342ebc61c020ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -1,3 +1,11 @@\n+2009-08-11  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/ext-5.c: New test.\n+\t* gcc.target/mips/ext-6.c: New test.\n+\t* gcc.target/mips/ext-7.c: New test.\n+\t* gcc.target/mips/ext-8.c: New test.\n+\t* gcc.target/mips/extend-2.c: New test.\n+\n 2009-08-10  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/other/linkage2.C: New test for types-without-linkage"}, {"sha": "64186383cb2c09c0f24cae826324ee6df7ff4bd9", "filename": "gcc/testsuite/gcc.target/mips/ext-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-5.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -0,0 +1,11 @@\n+/* For MIPS32r2 use EXT when ANDing with low-order bitmasks.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O isa_rev>=2\" } */\n+/* { dg-final { scan-assembler \"\\text\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tandi?\\t\" } } */\n+\n+NOMIPS16 unsigned\n+f (unsigned i)\n+{\n+  return i & 0x7ffffff;\n+}"}, {"sha": "b4a7dd2515ce4f06ba8d988dadc17cbaa658b77a", "filename": "gcc/testsuite/gcc.target/mips/ext-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-6.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -0,0 +1,11 @@\n+/* For MIPS64r2 use DEXT when ANDing with low-order bitmasks.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O isa_rev>=2 -mgp64\" } */\n+/* { dg-final { scan-assembler \"\\tdext\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tandi?\\t\" } } */\n+\n+NOMIPS16 unsigned long long\n+f (unsigned long long i)\n+{\n+  return i & 0x7ffffffffff;\n+}"}, {"sha": "394d41f06c883f4c40c5df09dc4521697fbf7f31", "filename": "gcc/testsuite/gcc.target/mips/ext-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-7.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -0,0 +1,11 @@\n+/* No need to use ext if we can use andi.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O isa_rev>=2\" } */\n+/* { dg-final { scan-assembler \"\\tandi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\td?ext\\t\" } } */\n+\n+NOMIPS16 unsigned\n+f (unsigned i)\n+{\n+  return i & 0x7fff;\n+}"}, {"sha": "90241dd2f19db81861e59b78fbf1c5ff496b6061", "filename": "gcc/testsuite/gcc.target/mips/ext-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext-8.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -0,0 +1,11 @@\n+/* Also make sure we don't use ext for MIPS*r1.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O isa_rev<=1\" } */\n+/* { dg-final { scan-assembler \"\\tand\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\td?ext\\t\" } } */\n+\n+unsigned\n+f (unsigned i)\n+{\n+  return i & 0x7fffff;\n+}"}, {"sha": "b91ae209c0cc81ada7cd9a08a410b37b3a16ff58", "filename": "gcc/testsuite/gcc.target/mips/extend-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fextend-2.c?ref=b2c9d70fd7eb8e39aefb7d6d2329ccbd5da15b36", "patch": "@@ -0,0 +1,12 @@\n+/* Check the shift_shift alternative of the AND patterns.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O isa_rev<=1 -mgp64\" } */\n+/* { dg-final { scan-assembler \"\\tdsrl\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tdsll\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\td?ext\\t\" } } */\n+\n+unsigned long long\n+f (unsigned long long i)\n+{\n+  return i & 0xffffffff;\n+}"}]}