{"sha": "3d90ff935245a9cd141d939019502d4b72dce430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5MGZmOTM1MjQ1YTljZDE0MWQ5MzkwMTk1MDJkNGI3MmRjZTQzMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-31T16:16:17Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-31T16:16:17Z"}, "message": "stl_bvector.h: Change calls to 3-argument distance() into standard 2-argument version.\n\n2001-12-31  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/bits/stl_bvector.h:  Change calls to 3-argument distance()\n\tinto standard 2-argument version.\n\t* include/bits/stl_deque.h:  Likewise.\n\t* include/bits/stl_tempbuf.h:  Likewise.\n\t* include/bits/stl_tree.h:  Likewise.\n\t* include/bits/stl_vector.h:  Likewise.\n\t* include/ext/stl_hashtable.h:  Likewise.\n\t* include/bits/stl_iterator_base_funcs.h:  Move distance() extension...\n\t* include/ext/iterator:  to here.  New file.\n\t* include/Makefile.am (ext_headers):  Add new file, alphabatize.\n\t* include/Makefile.in:  Regenerate.\n\nFrom-SVN: r48428", "tree": {"sha": "f671316afd088f9ab242e9dc8453dfaaccc659aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f671316afd088f9ab242e9dc8453dfaaccc659aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d90ff935245a9cd141d939019502d4b72dce430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d90ff935245a9cd141d939019502d4b72dce430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d90ff935245a9cd141d939019502d4b72dce430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d90ff935245a9cd141d939019502d4b72dce430/comments", "author": null, "committer": null, "parents": [{"sha": "c49b2550b76527b191417b4185388ac19e35b8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49b2550b76527b191417b4185388ac19e35b8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49b2550b76527b191417b4185388ac19e35b8dd"}], "stats": {"total": 396, "additions": 238, "deletions": 158}, "files": [{"sha": "41f8178c8c3ae79959a7d89785fb88de2a0e25e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -1,3 +1,17 @@\n+2001-12-31  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/bits/stl_bvector.h:  Change calls to 3-argument distance()\n+\tinto standard 2-argument version.\n+\t* include/bits/stl_deque.h:  Likewise.\n+\t* include/bits/stl_tempbuf.h:  Likewise.\n+\t* include/bits/stl_tree.h:  Likewise.\n+\t* include/bits/stl_vector.h:  Likewise.\n+\t* include/ext/stl_hashtable.h:  Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h:  Move distance() extension...\n+\t* include/ext/iterator:  to here.  New file.\n+\t* include/Makefile.am (ext_headers):  Add new file, alphabatize.\n+\t* include/Makefile.in:  Regenerate.\n+\n 2001-12-31  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/stl_deque.h:  Doxygenate with initial/example hooks."}, {"sha": "1f20d457ff07cc8be2c75f6a54b16b9ed530f15e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -173,14 +173,15 @@ ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/iterator \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/stl_rope.h \\\n \t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/stl_hash_fun.h \\\n \t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_hash_fun.h\n+\t${ext_srcdir}/stl_rope.h\n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@/bits"}, {"sha": "b25cd32a34d22a1a3751ef3a207c10b87f9f1603", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 99, "deletions": 92, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -1,7 +1,6 @@\n-# Makefile.in generated automatically by automake 1.5 from Makefile.am.\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n \n-# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-# Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -11,7 +10,6 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n-@SET_MAKE@\n \n SHELL = @SHELL@\n \n@@ -33,9 +31,13 @@ infodir = @infodir@\n mandir = @mandir@\n includedir = @includedir@\n oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n+\n top_builddir = ..\n \n ACLOCAL = @ACLOCAL@\n@@ -44,11 +46,11 @@ AUTOMAKE = @AUTOMAKE@\n AUTOHEADER = @AUTOHEADER@\n \n INSTALL = @INSTALL@\n-INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n-INSTALL_HEADER = $(INSTALL_DATA)\n transform = @program_transform_name@\n+\n NORMAL_INSTALL = :\n PRE_INSTALL = :\n POST_INSTALL = :\n@@ -82,6 +84,7 @@ C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n@@ -105,6 +108,7 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n MKINSTALLDIRS = @MKINSTALLDIRS@\n MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n@@ -142,23 +146,16 @@ libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n-# Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-\n-# Target includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n-\n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n-gxx_include_dir = @gxx_include_dir@\n-\n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_builddir = @glibcpp_builddir@\n+\n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n@@ -303,14 +300,15 @@ ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/iterator \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/stl_rope.h \\\n \t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/stl_hash_fun.h \\\n \t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_hash_fun.h\n+\t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n@@ -412,108 +410,116 @@ thread_headers = \\\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n \tstamp-target stamp-thread \n \n+\n+# Target includes for threads\n+glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n-subdir = include\n-CONFIG_HEADER = $(top_builddir)/config.h\n-CONFIG_CLEAN_FILES =\n-depcomp =\n-DIST_SOURCES =\n-all: all-am\n \n-.SUFFIXES:\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+CONFIG_HEADER = ../config.h\n+CONFIG_CLEAN_FILES = \n+DIST_COMMON =  Makefile.am Makefile.in\n \n-mostlyclean-libtool:\n-\t-rm -f *.lo\n \n-clean-libtool:\n-\t-rm -rf .libs _libs\n+DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+all: all-redirect\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --gnits include/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n-distclean-libtool:\n-\t-rm -f libtool\n-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)\n-\tcd $(top_srcdir) && \\\n-\t  $(AUTOMAKE) --cygnus  include/Makefile\n-Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status\n-\tcd $(top_builddir) && \\\n-\t  CONFIG_HEADERS= CONFIG_LINKS= \\\n-\t  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status\n-uninstall-info-am:\n tags: TAGS\n TAGS:\n \n-check-am:\n-check: check-am\n-all-am: Makefile all-local\n \n-installdirs:\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n \n-install: install-am\n+subdir = include\n+\n+distdir: $(DISTFILES)\n+\there=`cd $(top_builddir) && pwd`; \\\n+\ttop_distdir=`cd $(top_distdir) && pwd`; \\\n+\tdistdir=`cd $(distdir) && pwd`; \\\n+\tcd $(top_srcdir) \\\n+\t  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnits include/Makefile\n+\t@for file in $(DISTFILES); do \\\n+\t  d=$(srcdir); \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am: all-am\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-exec-am:\n install-exec: install-exec-am\n+\n+install-data-am: install-data-local\n install-data: install-data-am\n-uninstall: uninstall-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n-\n-installcheck: installcheck-am\n+install: install-am\n+uninstall-am:\n+uninstall: uninstall-am\n+all-am: Makefile all-local\n+all-redirect: all-am\n install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t  `test -z '$(STRIP)' || \\\n-\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\n+\n mostlyclean-generic:\n \n clean-generic:\n \n distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-\t@echo \"This command is intended for maintainers to use\"\n-\t@echo \"it deletes files that may require special tools to rebuild.\"\n-clean: clean-am\n-\n-clean-am: clean-generic clean-libtool mostlyclean-am\n-\n-distclean: distclean-am\n+mostlyclean-am:  mostlyclean-generic\n \n-distclean-am: clean-am distclean-generic distclean-libtool\n-\n-dvi: dvi-am\n-\n-dvi-am:\n-\n-info: info-am\n-\n-info-am:\n+mostlyclean: mostlyclean-am\n \n-install-data-am: install-data-local\n+clean-am:  clean-generic mostlyclean-am\n \n-install-exec-am:\n+clean: clean-am\n \n-install-info:\n+distclean-am:  distclean-generic clean-am\n+\t-rm -f libtool\n \n-install-man:\n+distclean: distclean-am\n \n-installcheck-am:\n+maintainer-clean-am:  maintainer-clean-generic distclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n \n maintainer-clean: maintainer-clean-am\n \n-maintainer-clean-am: distclean-am maintainer-clean-generic\n-\n-mostlyclean: mostlyclean-am\n-\n-mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n-\n-uninstall-am:\n-\n-.PHONY: all all-am all-local check check-am clean clean-generic \\\n-\tclean-libtool distclean distclean-generic distclean-libtool dvi \\\n-\tdvi-am info info-am install install-am install-data \\\n-\tinstall-data-am install-data-local install-exec install-exec-am \\\n-\tinstall-info install-info-am install-man install-strip \\\n-\tinstallcheck installcheck-am installdirs maintainer-clean \\\n-\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n-\tmostlyclean-libtool uninstall uninstall-am uninstall-info-am\n+.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-exec-am install-exec \\\n+install-data-local install-data-am install-data install-am install \\\n+uninstall-am uninstall all-local all-redirect all-am all installdirs \\\n+mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n # Here are the rules for building the headers\n@@ -620,6 +626,7 @@ install-data-local:\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "9c108c5e3ef5a704accb55fc428e15643457aaad", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -416,8 +416,7 @@ template <typename _Alloc>\n     template <class _ForwardIterator>\n     void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,\n                              forward_iterator_tag) {\n-      size_type __n = 0;\n-      distance(__first, __last, __n);\n+      size_type __n = distance(__first, __last);\n       _M_initialize(__n);\n       copy(__first, __last, _M_start);\n     }\n@@ -437,8 +436,7 @@ template <typename _Alloc>\n                          _ForwardIterator __first, _ForwardIterator __last,\n                          forward_iterator_tag) {\n       if (__first != __last) {\n-        size_type __n = 0;\n-        distance(__first, __last, __n);\n+        size_type __n = distance(__first, __last);\n         if (capacity() - size() >= __n) {\n           copy_backward(__position, end(), _M_finish + difference_type(__n));\n           copy(__first, __last, __position);\n@@ -600,8 +598,7 @@ template <typename _Alloc>\n     template <class _ForwardIterator>\n     void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n                        forward_iterator_tag) {\n-      size_type __len = 0;\n-      distance(__first, __last, __len);\n+      size_type __len = distance(__first, __last);\n       if (__len < size())\n         erase(copy(__first, __last, begin()), end());\n       else {"}, {"sha": "b2d58d8f0a69fedfd7a0ce1c95ab086c4bd77bbc", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -695,8 +695,7 @@ class deque : protected _Deque_base<_Tp, _Alloc>\n   template <class _ForwardIterator>\n   void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n                      forward_iterator_tag) {\n-    size_type __len = 0;\n-    distance(__first, __last, __len);\n+    size_type __len = distance(__first, __last);\n     if (__len > size()) {\n       _ForwardIterator __mid = __first;\n       advance(__mid, size());\n@@ -1097,8 +1096,7 @@ void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,\n                                             _ForwardIterator __last,\n                                             forward_iterator_tag)\n {\n-  size_type __n = 0;\n-  distance(__first, __last, __n);\n+  size_type __n = distance(__first, __last);\n   _M_initialize_map(__n);\n \n   _Map_pointer __cur_node;\n@@ -1237,8 +1235,7 @@ void\n deque<_Tp,_Alloc>::insert(iterator __pos,\n                           _ForwardIterator __first, _ForwardIterator __last,\n                           forward_iterator_tag) {\n-  size_type __n = 0;\n-  distance(__first, __last, __n);\n+  size_type __n = distance(__first, __last);\n   if (__pos._M_cur == _M_start._M_cur) {\n     iterator __new_start = _M_reserve_elements_at_front(__n);\n     try {"}, {"sha": "3034fce079c2fa5eeab6ad7267f5c135e7a53e1a", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -71,40 +71,6 @@\n \n namespace std\n {\n-\n-  // There are two signatures for distance.  In addition to the one taking\n-  // two iterators and returning a result, there is another taking two\n-  // iterators and a reference-to-result variable, and returning nothing.\n-  // The latter seems to be an SGI extension.   -- pedwards\n-  template<typename _InputIterator, typename _Distance>\n-    inline void\n-    __distance(_InputIterator __first, _InputIterator __last,\n-\t       _Distance& __n, input_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      while (__first != __last) { ++__first; ++__n; }\n-    }\n-\n-  template<typename _RandomAccessIterator, typename _Distance>\n-    inline void\n-    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last, \n-\t       _Distance& __n, random_access_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __n += __last - __first;\n-    }\n-\n-  template<typename _InputIterator, typename _Distance>\n-    inline void\n-    distance(_InputIterator __first, _InputIterator __last,\n-             _Distance& __n)\n-    {\n-      // concept requirements -- taken care of in __distance\n-      __distance(__first, __last, __n, __iterator_category(__first));\n-    }\n-\n   template<typename _InputIterator>\n     inline typename iterator_traits<_InputIterator>::difference_type\n     __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)"}, {"sha": "794b6ac914585a5341f31759632ffbc1eb83056d", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -137,8 +137,7 @@ class _Temporary_buffer {\n             _Trivial;\n \n     try {\n-      _M_len = 0;\n-      distance(__first, __last, _M_len);\n+      _M_len = distance(__first, __last);\n       _M_allocate_buffer();\n       if (_M_len > 0)\n         _M_initialize_buffer(*__first, _Trivial());"}, {"sha": "0ef936a7c0febc004239992c6fd4203232743201", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -1022,8 +1022,7 @@ typename _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::size_type\n _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)\n {\n   pair<iterator,iterator> __p = equal_range(__x);\n-  size_type __n = 0;\n-  distance(__p.first, __p.second, __n);\n+  size_type __n = distance(__p.first, __p.second);\n   erase(__p.first, __p.second);\n   return __n;\n }\n@@ -1139,8 +1138,7 @@ _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>\n   ::count(const _Key& __k) const\n {\n   pair<const_iterator, const_iterator> __p = equal_range(__k);\n-  size_type __n = 0;\n-  distance(__p.first, __p.second, __n);\n+  size_type __n = distance(__p.first, __p.second);\n   return __n;\n }\n "}, {"sha": "f84614b1b91842505464f4a49d16849cb89a730f", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -462,8 +462,7 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n   void _M_range_initialize(_ForwardIterator __first,\n                            _ForwardIterator __last, forward_iterator_tag)\n   {\n-    size_type __n = 0;\n-    distance(__first, __last, __n);\n+    size_type __n = distance(__first, __last);\n     _M_start = _M_allocate(__n);\n     _M_end_of_storage = _M_start + __n;\n     _M_finish = uninitialized_copy(__first, __last, _M_start);\n@@ -583,8 +582,7 @@ template <class _Tp, class _Alloc> template <class _ForwardIter>\n void\n vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,\n                                    forward_iterator_tag) {\n-  size_type __len = 0;\n-  distance(__first, __last, __len);\n+  size_type __len = distance(__first, __last);\n \n   if (__len > capacity()) {\n     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));\n@@ -752,8 +750,7 @@ vector<_Tp, _Alloc>::_M_range_insert(iterator __position,\n                                      forward_iterator_tag)\n {\n   if (__first != __last) {\n-    size_type __n = 0;\n-    distance(__first, __last, __n);\n+    size_type __n = distance(__first, __last);\n     if (size_type(_M_end_of_storage - _M_finish) >= __n) {\n       const size_type __elems_after = end() - __position;\n       iterator __old_finish(_M_finish);"}, {"sha": "84820583b3b6bda48830ce54d55fe5bae83b42c2", "filename": "libstdc++-v3/include/ext/iterator", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -0,0 +1,106 @@\n+// HP/SGI iterator extensions -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996-1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/*  @file dont_know_what_to_call_this_yet\n+ *  This header file is an extension to the Standard C++ Library.  You should\n+ *  use the \"ext/\" path prefix in your @c #include statements.\n+ */\n+\n+#ifndef _EXT_ITERATOR\n+#define _EXT_ITERATOR\n+\n+#pragma GCC system_header\n+#include <bits/concept_check.h>\n+\n+namespace __gnu_cxx\n+{\n+\n+  // There are two signatures for distance.  In addition to the one taking\n+  // two iterators and returning a result, there is another taking two\n+  // iterators and a reference-to-result variable, and returning nothing.\n+  // The latter seems to be an SGI extension.   -- pedwards\n+  template<typename _InputIterator, typename _Distance>\n+    inline void\n+    __distance(_InputIterator __first, _InputIterator __last,\n+\t       _Distance& __n, input_iterator_tag)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      while (__first != __last) { ++__first; ++__n; }\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Distance>\n+    inline void\n+    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last, \n+\t       _Distance& __n, random_access_iterator_tag)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __n += __last - __first;\n+    }\n+\n+  template<typename _InputIterator, typename _Distance>\n+    inline void\n+    distance(_InputIterator __first, _InputIterator __last,\n+             _Distance& __n)\n+    {\n+      // concept requirements -- taken care of in __distance\n+      __distance(__first, __last, __n, __iterator_category(__first));\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+#endif /* _EXT_ITERATOR */\n+"}, {"sha": "23176386aec2d885b2b22f3decb67fad07b36504", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90ff935245a9cd141d939019502d4b72dce430/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=3d90ff935245a9cd141d939019502d4b72dce430", "patch": "@@ -422,8 +422,7 @@ class hashtable {\n   void insert_unique(_ForwardIterator __f, _ForwardIterator __l,\n                      forward_iterator_tag)\n   {\n-    size_type __n = 0;\n-    distance(__f, __l, __n);\n+    size_type __n = distance(__f, __l);\n     resize(_M_num_elements + __n);\n     for ( ; __n > 0; --__n, ++__f)\n       insert_unique_noresize(*__f);\n@@ -433,8 +432,7 @@ class hashtable {\n   void insert_equal(_ForwardIterator __f, _ForwardIterator __l,\n                     forward_iterator_tag)\n   {\n-    size_type __n = 0;\n-    distance(__f, __l, __n);\n+    size_type __n = distance(__f, __l);\n     resize(_M_num_elements + __n);\n     for ( ; __n > 0; --__n, ++__f)\n       insert_equal_noresize(*__f);"}]}