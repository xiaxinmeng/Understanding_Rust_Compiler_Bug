{"sha": "54eb01bee0c81f661b4a952f38621af31a138356", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlYjAxYmVlMGM4MWY2NjFiNGE5NTJmMzg2MjFhZjMxYTEzODM1Ng==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-05-30T17:05:02Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-05-30T17:05:02Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_C99): Reorder output messages.\n\n2001-05-30  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_C99):  Reorder output messages.\n\t* aclocal.m4:  Regenerate.\n\t* configure:  Regenerate.\n\nFrom-SVN: r42712", "tree": {"sha": "68c5f3a18c161bb8da0ff14eefe2bbbe1a16151a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c5f3a18c161bb8da0ff14eefe2bbbe1a16151a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54eb01bee0c81f661b4a952f38621af31a138356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54eb01bee0c81f661b4a952f38621af31a138356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54eb01bee0c81f661b4a952f38621af31a138356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54eb01bee0c81f661b4a952f38621af31a138356/comments", "author": null, "committer": null, "parents": [{"sha": "1de16a5cb15fb64186171b6d79c3322f21745343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de16a5cb15fb64186171b6d79c3322f21745343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de16a5cb15fb64186171b6d79c3322f21745343"}], "stats": {"total": 1805, "additions": 909, "deletions": 896}, "files": [{"sha": "1924998508b4f1ac69a7b1f41cadcbc13e04e31f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54eb01bee0c81f661b4a952f38621af31a138356", "patch": "@@ -1,3 +1,9 @@\n+2001-05-30  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_C99):  Reorder output messages.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure:  Regenerate.\n+\n 2001-05-29  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n  \n        * include/c_std/bits/std_cstdlib.h:: Move C99 thingies to __gnu_cxx::. "}, {"sha": "e7ea1c11843807702fda727e0a4ae5ce7bff3bf3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=54eb01bee0c81f661b4a952f38621af31a138356", "patch": "@@ -1316,6 +1316,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   # Check for the existence of <math.h> functions used if C99 is enabled.\n   ac_c99_math=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n   AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n@@ -1331,41 +1332,40 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [islessgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n \t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n-  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n   AC_MSG_RESULT($ac_c99_math)\n \n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n   ac_c99_stdlib=yes;\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n-\t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n   AC_TRY_COMPILE([#include <stdlib.h>], \n                    [ lldiv_t mydivt;], \n                    [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n+\n+  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n-  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n   AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n   ac_c99_wchar=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])"}, {"sha": "0b85fdb0ae273356675c4482f878f1c48dd91559", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=54eb01bee0c81f661b4a952f38621af31a138356", "patch": "@@ -1328,6 +1328,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   # Check for the existence of <math.h> functions used if C99 is enabled.\n   ac_c99_math=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n   AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n@@ -1343,41 +1344,40 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [islessgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n \t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n-  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n   AC_MSG_RESULT($ac_c99_math)\n \n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n   ac_c99_stdlib=yes;\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n-\t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n   AC_TRY_COMPILE([#include <stdlib.h>], \n                    [ lldiv_t mydivt;], \n                    [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n+\n+  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n-  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n   AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n   ac_c99_wchar=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n   AC_TRY_COMPILE([#include <wchar.h>], \n \t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])"}, {"sha": "2a981e38625cd74d47e14353bd41ccc76acbaaae", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 881, "deletions": 874, "changes": 1755, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54eb01bee0c81f661b4a952f38621af31a138356/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=54eb01bee0c81f661b4a952f38621af31a138356"}]}