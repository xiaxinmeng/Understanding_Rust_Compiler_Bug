{"sha": "d56ee62bfe7847ec4a100f3773827c2e3697879a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2ZWU2MmJmZTc4NDdlYzRhMTAwZjM3NzM4MjdjMmUzNjk3ODc5YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-09T14:54:11Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-09T14:54:11Z"}, "message": "re PR middle-end/26561 (ACATS failures c34004a, c46033a and cxg2024 at -O0)\n\n2006-03-09  Roger Sayle  <roger@eyesopen.com>\n\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\tPR middle-end/26561\n\t* fold-const.c (fold_div_compare): When optimizing X/C1 op C2 as\n\tX op C3, consider whether C3 overflows towards +Inf or -Inf.\n\n\t* gcc.c-torture/execute/divcmp-5.c: New test case.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r111862", "tree": {"sha": "e916d0c1fbf47882c6b59b371a0f0040a79db41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e916d0c1fbf47882c6b59b371a0f0040a79db41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d56ee62bfe7847ec4a100f3773827c2e3697879a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56ee62bfe7847ec4a100f3773827c2e3697879a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56ee62bfe7847ec4a100f3773827c2e3697879a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56ee62bfe7847ec4a100f3773827c2e3697879a/comments", "author": null, "committer": null, "parents": [{"sha": "ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "55391749ffe67cf22e47b3d66417eda0696feffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d56ee62bfe7847ec4a100f3773827c2e3697879a", "patch": "@@ -1,3 +1,9 @@\n+2006-03-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/26561\n+\t* fold-const.c (fold_div_compare): When optimizing X/C1 op C2 as\n+\tX op C3, consider whether C3 overflows towards +Inf or -Inf.\n+\n 2006-03-08  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/addsub.md (addqi3): Disparage a0/a1."}, {"sha": "be0c461f58677532c5b8b268832f5fd00760c4d5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d56ee62bfe7847ec4a100f3773827c2e3697879a", "patch": "@@ -6014,6 +6014,7 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n   tree arg01 = TREE_OPERAND (arg0, 1);\n   unsigned HOST_WIDE_INT lpart;\n   HOST_WIDE_INT hpart;\n+  bool neg_overflow;\n   int overflow;\n \n   /* We have to do this the hard way to detect unsigned overflow.\n@@ -6024,6 +6025,7 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \t\t\t TREE_INT_CST_HIGH (arg1), &lpart, &hpart);\n   prod = build_int_cst_wide (TREE_TYPE (arg00), lpart, hpart);\n   prod = force_fit_type (prod, -1, overflow, false);\n+  neg_overflow = false;\n \n   if (TYPE_UNSIGNED (TREE_TYPE (arg0)))\n     {\n@@ -6046,6 +6048,7 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n       switch (tree_int_cst_sgn (arg1))\n \t{\n \tcase -1:\n+\t  neg_overflow = true;\n \t  lo = int_const_binop (MINUS_EXPR, prod, tmp, 0);\n \t  hi = prod;\n \t  break;\n@@ -6083,7 +6086,8 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \t  break;\n \n \tcase  1:\n-          lo = int_const_binop (PLUS_EXPR, prod, tmp, 0);\n+\t  neg_overflow = true;\n+\t  lo = int_const_binop (PLUS_EXPR, prod, tmp, 0);\n \t  hi = prod;\n \t  break;\n \n@@ -6114,22 +6118,34 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \n     case LT_EXPR:\n       if (TREE_OVERFLOW (lo))\n-\treturn omit_one_operand (type, integer_one_node, arg00);\n+\t{\n+\t  tmp = neg_overflow ? integer_zero_node : integer_one_node;\n+\t  return omit_one_operand (type, tmp, arg00);\n+\t}\n       return fold_build2 (LT_EXPR, type, arg00, lo);\n \n     case LE_EXPR:\n       if (TREE_OVERFLOW (hi))\n-\treturn omit_one_operand (type, integer_one_node, arg00);\n+\t{\n+\t  tmp = neg_overflow ? integer_zero_node : integer_one_node;\n+\t  return omit_one_operand (type, tmp, arg00);\n+\t}\n       return fold_build2 (LE_EXPR, type, arg00, hi);\n \n     case GT_EXPR:\n       if (TREE_OVERFLOW (hi))\n-\treturn omit_one_operand (type, integer_zero_node, arg00);\n+\t{\n+\t  tmp = neg_overflow ? integer_one_node : integer_zero_node;\n+\t  return omit_one_operand (type, tmp, arg00);\n+\t}\n       return fold_build2 (GT_EXPR, type, arg00, hi);\n \n     case GE_EXPR:\n       if (TREE_OVERFLOW (lo))\n-\treturn omit_one_operand (type, integer_zero_node, arg00);\n+\t{\n+\t  tmp = neg_overflow ? integer_one_node : integer_zero_node;\n+\t  return omit_one_operand (type, tmp, arg00);\n+\t}\n       return fold_build2 (GE_EXPR, type, arg00, lo);\n \n     default:"}, {"sha": "b082e5653e46517fd42350639ccf9965dbc4cc6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d56ee62bfe7847ec4a100f3773827c2e3697879a", "patch": "@@ -1,3 +1,9 @@\n+2006-03-09  Roger Sayle  <roger@eyesopen.com>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/26561\n+\t* gcc.c-torture/execute/divcmp-5.c: New test case.\n+\n 2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n \n \t* PR fortran/26257"}, {"sha": "f6d1af3be1258a85887e9b71170e4d727bbe7009", "filename": "gcc/testsuite/gcc.c-torture/execute/divcmp-5.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56ee62bfe7847ec4a100f3773827c2e3697879a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-5.c?ref=d56ee62bfe7847ec4a100f3773827c2e3697879a", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/26561 */\n+\n+extern void abort(void);\n+\n+int always_one_1 (int a)\n+{\n+  if (a/100 >= -999999999)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int always_one_2 (int a)\n+{\n+  if (a/100 < -999999999)\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n+int main(void)\n+{\n+  if (always_one_1 (0) != 1)\n+    abort ();\n+\n+  if (always_one_2 (0) != 1)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}