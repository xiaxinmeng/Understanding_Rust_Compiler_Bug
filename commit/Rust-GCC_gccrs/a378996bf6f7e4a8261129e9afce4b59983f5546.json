{"sha": "a378996bf6f7e4a8261129e9afce4b59983f5546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3ODk5NmJmNmY3ZTRhODI2MTEyOWU5YWZjZTRiNTk5ODNmNTU0Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-04-24T13:58:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-24T13:58:11Z"}, "message": "re PR c++/56970 (SFINAE does not apply correctly to sizeof.)\n\n/cp\n2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56970\n\t* init.c (build_offset_ref): Add tsubst_flags_t parameter.\n\t* semantics.c (finish_qualified_id_expr): Likewise.\n\t(finish_id_expression): Update.\n\t* typeck.c (cp_build_addr_expr_1): Likewise.\n\t* pt.c (tsubst_qualified_id, resolve_nondeduced_context): Likewise.\n\t* cp-tree.h: Update declarations.\n\n/testsuite\n2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56970\n\t* g++.dg/cpp0x/sfinae45.C: New.\n\nFrom-SVN: r198232", "tree": {"sha": "ab973de9cde7ee1d253e0b8c86d0ef0a5f1b5212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab973de9cde7ee1d253e0b8c86d0ef0a5f1b5212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a378996bf6f7e4a8261129e9afce4b59983f5546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a378996bf6f7e4a8261129e9afce4b59983f5546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a378996bf6f7e4a8261129e9afce4b59983f5546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a378996bf6f7e4a8261129e9afce4b59983f5546/comments", "author": null, "committer": null, "parents": [{"sha": "07c2f65903ff83e0797ceaf627ac858f7ce74377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c2f65903ff83e0797ceaf627ac858f7ce74377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c2f65903ff83e0797ceaf627ac858f7ce74377"}], "stats": {"total": 102, "additions": 81, "deletions": 21}, "files": [{"sha": "1f37496e35ca7c953d0078fddfe5485a6a94b572", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -1,3 +1,13 @@\n+2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56970\n+\t* init.c (build_offset_ref): Add tsubst_flags_t parameter.\n+\t* semantics.c (finish_qualified_id_expr): Likewise.\n+\t(finish_id_expression): Update.\n+\t* typeck.c (cp_build_addr_expr_1): Likewise.\n+\t* pt.c (tsubst_qualified_id, resolve_nondeduced_context): Likewise.\n+\t* cp-tree.h: Update declarations.\n+\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n \tCore 1586"}, {"sha": "339892ecea5933091bb3ef172cc2d742363c5474", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -5351,7 +5351,8 @@ extern tree get_type_value\t\t\t(tree);\n extern tree build_zero_init\t\t\t(tree, tree, bool);\n extern tree build_value_init\t\t\t(tree, tsubst_flags_t);\n extern tree build_value_init_noctor\t\t(tree, tsubst_flags_t);\n-extern tree build_offset_ref\t\t\t(tree, tree, bool);\n+extern tree build_offset_ref\t\t\t(tree, tree, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_new\t\t\t\t(vec<tree, va_gc> **, tree, tree,\n \t\t\t\t\t\t vec<tree, va_gc> **, int,\n                                                  tsubst_flags_t);\n@@ -5748,7 +5749,7 @@ extern void add_typedef_to_current_template_for_access_check (tree, tree,\n \t\t\t\t\t\t\t      location_t);\n extern void check_accessibility_of_qualified_id (tree, tree, tree);\n extern tree finish_qualified_id_expr\t\t(tree, tree, bool, bool,\n-\t\t\t\t\t\t bool, bool);\n+\t\t\t\t\t\t bool, bool, tsubst_flags_t);\n extern void simplify_aggr_init_expr\t\t(tree *);\n extern void finalize_nrv\t\t\t(tree *, tree, tree);\n extern void note_decl_for_pch\t\t\t(tree);"}, {"sha": "28e25558bbe9f278a0dc1cf1ad6c61daef0f830d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -1817,7 +1817,8 @@ get_type_value (tree name)\n    @@ This function should be rewritten and placed in search.c.  */\n \n tree\n-build_offset_ref (tree type, tree member, bool address_p)\n+build_offset_ref (tree type, tree member, bool address_p,\n+\t\t  tsubst_flags_t complain)\n {\n   tree decl;\n   tree basebinfo = NULL_TREE;\n@@ -1841,7 +1842,8 @@ build_offset_ref (tree type, tree member, bool address_p)\n   type = TYPE_MAIN_VARIANT (type);\n   if (!COMPLETE_OR_OPEN_TYPE_P (complete_type (type)))\n     {\n-      error (\"incomplete type %qT does not have member %qD\", type, member);\n+      if (complain & tf_error)\n+\terror (\"incomplete type %qT does not have member %qD\", type, member);\n       return error_mark_node;\n     }\n \n@@ -1854,7 +1856,8 @@ build_offset_ref (tree type, tree member, bool address_p)\n \n   if (TREE_CODE (member) == FIELD_DECL && DECL_C_BIT_FIELD (member))\n     {\n-      error (\"invalid pointer to bit-field %qD\", member);\n+      if (complain & tf_error)\n+\terror (\"invalid pointer to bit-field %qD\", member);\n       return error_mark_node;\n     }\n \n@@ -1883,10 +1886,10 @@ build_offset_ref (tree type, tree member, bool address_p)\n \t  if (address_p && DECL_P (t)\n \t      && DECL_NONSTATIC_MEMBER_P (t))\n \t    perform_or_defer_access_check (TYPE_BINFO (type), t, t,\n-\t\t\t\t\t   tf_warning_or_error);\n+\t\t\t\t\t   complain);\n \t  else\n \t    perform_or_defer_access_check (basebinfo, t, t,\n-\t\t\t\t\t   tf_warning_or_error);\n+\t\t\t\t\t   complain);\n \n \t  if (DECL_STATIC_FUNCTION_P (t))\n \t    return t;\n@@ -1900,7 +1903,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n        check_accessibility_of_qualified_id in case it is\n        a pointer to non-static member.  */\n     perform_or_defer_access_check (TYPE_BINFO (type), member, member,\n-\t\t\t\t   tf_warning_or_error);\n+\t\t\t\t   complain);\n \n   if (!address_p)\n     {\n@@ -1932,15 +1935,17 @@ build_offset_ref (tree type, tree member, bool address_p)\n \t  if (flag_ms_extensions)\n \t    {\n \t      PTRMEM_OK_P (member) = 1;\n-\t      return cp_build_addr_expr (member, tf_warning_or_error);\n+\t      return cp_build_addr_expr (member, complain);\n \t    }\n-\t  error (\"invalid use of non-static member function %qD\",\n-\t\t TREE_OPERAND (member, 1));\n+\t  if (complain & tf_error)\n+\t    error (\"invalid use of non-static member function %qD\",\n+\t\t   TREE_OPERAND (member, 1));\n \t  return error_mark_node;\n \t}\n       else if (TREE_CODE (member) == FIELD_DECL)\n \t{\n-\t  error (\"invalid use of non-static data member %qD\", member);\n+\t  if (complain & tf_error)\n+\t    error (\"invalid use of non-static data member %qD\", member);\n \t  return error_mark_node;\n \t}\n       return member;"}, {"sha": "7d169b764c8a56cb0fa37f5d1baf7fd7954f5f78", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -12053,7 +12053,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n       expr = (finish_qualified_id_expr\n \t      (scope, expr, done, address_p && PTRMEM_OK_P (qualified_id),\n \t       QUALIFIED_NAME_IS_TEMPLATE (qualified_id),\n-\t       /*template_arg_p=*/false));\n+\t       /*template_arg_p=*/false, complain));\n     }\n \n   /* Expressions do not generally have reference type.  */\n@@ -16040,7 +16040,7 @@ resolve_nondeduced_context (tree orig_expr)\n \t    {\n \t      tree base\n \t\t= TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (offset, 0)));\n-\t      expr = build_offset_ref (base, expr, addr);\n+\t      expr = build_offset_ref (base, expr, addr, tf_warning_or_error);\n \t    }\n \t  if (addr)\n \t    expr = cp_build_addr_expr (expr, tf_warning_or_error);"}, {"sha": "5c0fc72480694008a2922c3b9b07bbfc609a839c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -1772,7 +1772,8 @@ finish_qualified_id_expr (tree qualifying_class,\n \t\t\t  bool done,\n \t\t\t  bool address_p,\n \t\t\t  bool template_p,\n-\t\t\t  bool template_arg_p)\n+\t\t\t  bool template_arg_p,\n+\t\t\t  tsubst_flags_t complain)\n {\n   gcc_assert (TYPE_P (qualifying_class));\n \n@@ -1792,7 +1793,7 @@ finish_qualified_id_expr (tree qualifying_class,\n       if (TREE_CODE (expr) == SCOPE_REF)\n \texpr = TREE_OPERAND (expr, 1);\n       expr = build_offset_ref (qualifying_class, expr,\n-\t\t\t       /*address_p=*/true);\n+\t\t\t       /*address_p=*/true, complain);\n       return expr;\n     }\n \n@@ -1826,11 +1827,12 @@ finish_qualified_id_expr (tree qualifying_class,\n \t\t expr,\n \t\t BASELINK_ACCESS_BINFO (expr),\n \t\t /*preserve_reference=*/false,\n-\t\t tf_warning_or_error));\n+\t\t complain));\n       else if (done)\n \t/* The expression is a qualified name whose address is not\n \t   being taken.  */\n-\texpr = build_offset_ref (qualifying_class, expr, /*address_p=*/false);\n+\texpr = build_offset_ref (qualifying_class, expr, /*address_p=*/false,\n+\t\t\t\t complain);\n     }\n   else if (BASELINK_P (expr))\n     ;\n@@ -3278,7 +3280,8 @@ finish_id_expression (tree id_expression,\n \t\t    decl = finish_qualified_id_expr (scope, decl,\n \t\t\t\t\t\t     done, address_p,\n \t\t\t\t\t\t     template_p,\n-\t\t\t\t\t\t     template_arg_p);\n+\t\t\t\t\t\t     template_arg_p,\n+\t\t\t\t\t\t     tf_warning_or_error);\n \t\t  else\n \t\t    {\n \t\t      tree type = NULL_TREE;\n@@ -3394,7 +3397,8 @@ finish_id_expression (tree id_expression,\n \t\t\t\t\t     done,\n \t\t\t\t\t     address_p,\n \t\t\t\t\t     template_p,\n-\t\t\t\t\t     template_arg_p);\n+\t\t\t\t\t     template_arg_p,\n+\t\t\t\t\t     tf_warning_or_error);\n \t  else\n \t    decl = convert_from_reference (decl);\n \t}"}, {"sha": "b45b685799fdc0c4c8068236234c6f516fa6e05d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -5164,7 +5164,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t\t       \"  Say %<&%T::%D%>\",\n \t\t       base, name);\n \t}\n-      arg = build_offset_ref (base, fn, /*address_p=*/true);\n+      arg = build_offset_ref (base, fn, /*address_p=*/true, complain);\n     }\n \n   /* Uninstantiated types are all functions.  Taking the"}, {"sha": "7be7560d1333d1c278dc0096e2e9db3f3528f6e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -1,3 +1,8 @@\n+2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56970\n+\t* g++.dg/cpp0x/sfinae45.C: New.\n+\n 2013-04-24  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/57050"}, {"sha": "bd375145fea3de2266df46b28a1457afec62542d", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae45.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a378996bf6f7e4a8261129e9afce4b59983f5546/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae45.C?ref=a378996bf6f7e4a8261129e9afce4b59983f5546", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/56970\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct has\n+{\n+  template <typename>\n+  constexpr static int test(...) {\n+    return 0;\n+  }\n+  \n+  template <typename C>\n+  constexpr static int test(decltype(sizeof(C::x))) {  // Doesn't compile.\n+    return 1;   // Is a member variable.\n+  }\n+  \n+  template <typename C, int c = sizeof(decltype(((C*)nullptr)->x()))>\n+  constexpr static int test(int) {\n+    return 2;   // Is a member function.\n+  }\n+\n+  static const int value = test<T>(0);\n+};\n+\n+struct foo {\n+  int x;\n+};\n+\n+struct bar {\n+  int x();\n+};\n+\n+static_assert(has<int>::value == 0, \"\");\n+static_assert(has<foo>::value == 1, \"\");\n+static_assert(has<bar>::value == 2, \"\");"}]}