{"sha": "ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhZDM3ZjNlMWZiOTljMTUxYTg4NDZlM2M4YTA2ZmUzYmY2OGIwYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-29T13:40:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:40:27Z"}, "message": "sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build body to inline in GNATprove mode when subprogran is marked Inline_Always.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build body to\n\tinline in GNATprove mode when subprogran is marked Inline_Always.\n\t* sem_res.adb (Resolve_Call): Expand call in place in GNATProve\n\tmode if body to inline is available.\n\t* sem_prag.adb (Analyze_Pragma, case Inline_Always): Make pragma\n\teffective in GNATprove mode.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Call\n\tCheck_Package_Body_For_Inlining in GNATprove mode, so that body\n\tcontaining subprograms with Inline_Always can be available before\n\tcalls to them.\n\nFrom-SVN: r213182", "tree": {"sha": "7ca435f6be6979c11a17e1283d6c27717621daae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ca435f6be6979c11a17e1283d6c27717621daae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1773d80bb69879c5460954c729b3c254cb002426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1773d80bb69879c5460954c729b3c254cb002426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1773d80bb69879c5460954c729b3c254cb002426"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "1aeabb2a4f541466531bddd4017ee13b60d37b3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "patch": "@@ -1,3 +1,16 @@\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build body to\n+\tinline in GNATprove mode when subprogran is marked Inline_Always.\n+\t* sem_res.adb (Resolve_Call): Expand call in place in GNATProve\n+\tmode if body to inline is available.\n+\t* sem_prag.adb (Analyze_Pragma, case Inline_Always): Make pragma\n+\teffective in GNATprove mode.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Call\n+\tCheck_Package_Body_For_Inlining in GNATprove mode, so that body\n+\tcontaining subprograms with Inline_Always can be available before\n+\tcalls to them.\n+\n 2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* inline.ads, inline.adb, sem_ch10.adb: Rename Check_Body_For_Inlining"}, {"sha": "fac22c606e0fd042a067e3fb47425d8ac9a569c0", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "patch": "@@ -1198,7 +1198,7 @@ package body Sem_Ch10 is\n \n       if Nkind (Unit_Node) = N_Package_Declaration\n         and then Get_Cunit_Unit_Number (N) /= Main_Unit\n-        and then Expander_Active\n+        and then (Expander_Active or GNATprove_Mode)\n       then\n          declare\n             Save_Style_Check : constant Boolean := Style_Check;"}, {"sha": "a9f206769d8a3e6abeb341700bad0be717155d93", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "patch": "@@ -3340,11 +3340,14 @@ package body Sem_Ch6 is\n       --  Handle frontend inlining. There is no need to prepare us for inlining\n       --  if we will not generate the code.\n \n+      --  However, in GNATprove_Mode we want to expand calls in place\n+      --  whenever possible, even with expansion desabled.\n+\n       --  Old semantics\n \n       if not Debug_Flag_Dot_K then\n          if Present (Spec_Id)\n-           and then Expander_Active\n+           and then (Expander_Active or else GNATprove_Mode)\n            and then\n              (Has_Pragma_Inline_Always (Spec_Id)\n                or else (Has_Pragma_Inline (Spec_Id) and Front_End_Inlining))\n@@ -3354,7 +3357,7 @@ package body Sem_Ch6 is\n \n       --  New semantics\n \n-      elsif Expander_Active\n+      elsif (Expander_Active or else GNATprove_Mode)\n         and then Serious_Errors_Detected = 0\n         and then Present (Spec_Id)\n         and then Has_Pragma_Inline (Spec_Id)"}, {"sha": "e2fa97e62293557c5b62d7ef7d6ebd3172e473d7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "patch": "@@ -15379,10 +15379,12 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer or GNATprove mode,\n+            --  Pragma always active unless in CodePeer mode,\n             --  since this causes walk order issues.\n+            --  This was disabled as well in GNATprove_Mode, even though\n+            --  walk order should not be an issue here. ???\n \n-            if not (CodePeer_Mode or GNATprove_Mode) then\n+            if not CodePeer_Mode then\n                Process_Inline (Enabled);\n             end if;\n "}, {"sha": "5e23d0a0c20ec1a48b1bdcdd9a19c8d025d5f2b4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "patch": "@@ -37,6 +37,7 @@ with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n+with Inline;   use Inline;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n@@ -6122,6 +6123,17 @@ package body Sem_Res is\n \n       Eval_Call (N);\n       Check_Elab_Call (N);\n+\n+      --  In GNATprove_Mode expansion is disabled, but we want to inline\n+      --  subprograms that are marked Inline_Always.\n+\n+      if GNATprove_Mode\n+        and then Nkind (Unit_Declaration_Node (Nam)) = N_Subprogram_Declaration\n+        and then Present (Body_To_Inline (Unit_Declaration_Node (Nam)))\n+      then\n+         Expand_Inlined_Call (N, Nam, Nam);\n+      end if;\n+\n       Warn_On_Overlapping_Actuals (Nam, N);\n    end Resolve_Call;\n "}]}