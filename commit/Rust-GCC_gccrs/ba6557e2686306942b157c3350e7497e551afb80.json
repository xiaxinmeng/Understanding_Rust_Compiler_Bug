{"sha": "ba6557e2686306942b157c3350e7497e551afb80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2NTU3ZTI2ODYzMDY5NDJiMTU3YzMzNTBlNzQ5N2U1NTFhZmI4MA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2018-05-24T20:47:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-05-24T20:47:03Z"}, "message": "fold-const.c (tree_nonzero_bits): New function.\n\n        * fold-const.c (tree_nonzero_bits): New function.\n        * fold-const.h (tree_nonzero_bits): Likewise.\n        * match.pd (POPCOUNT): New patterns to fold BUILTIN_POPCOUNT and\n        friends.  POPCOUNT(x&1) => x&1, POPCOUNT(x)==0 => x==0, etc.\n\n        * gcc.dg/fold-popcount-1.c: New testcase.\n        * gcc.dg/fold-popcount-2.c: New testcase.\n        * gcc.dg/fold-popcount-3.c: New testcase.\n        * gcc.dg/fold-popcount-4.c: New testcase.\n\nFrom-SVN: r260689", "tree": {"sha": "4a8896b5cc8eb4200c03939215754c0b775e381e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a8896b5cc8eb4200c03939215754c0b775e381e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6557e2686306942b157c3350e7497e551afb80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6557e2686306942b157c3350e7497e551afb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6557e2686306942b157c3350e7497e551afb80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6557e2686306942b157c3350e7497e551afb80/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "520fe2e324da4b1aa2c1fbac29741bd45afa98c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520fe2e324da4b1aa2c1fbac29741bd45afa98c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520fe2e324da4b1aa2c1fbac29741bd45afa98c1"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "b2ce6864e1da9342e4394f23221087382477cc71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -1,3 +1,10 @@\n+2018-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+        * fold-const.c (tree_nonzero_bits): New function.\n+        * fold-const.h (tree_nonzero_bits): Likewise.\n+        * match.pd (POPCOUNT): New patterns to fold BUILTIN_POPCOUNT and\n+        friends.  POPCOUNT(x&1) => x&1, POPCOUNT(x)==0 => x==0, etc.\n+\n 2018-05-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85900"}, {"sha": "0f57f078199987aa6f44afcc73cd378c01a411fd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -14571,6 +14571,74 @@ c_getstr (tree src, unsigned HOST_WIDE_INT *strlen)\n   return string + offset;\n }\n \n+/* Given a tree T, compute which bits in T may be nonzero.  */\n+\n+wide_int\n+tree_nonzero_bits (const_tree t)\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_CST:\n+      return wi::to_wide (t);\n+    case SSA_NAME:\n+      return get_nonzero_bits (t);\n+    case NON_LVALUE_EXPR:\n+    case SAVE_EXPR:\n+      return tree_nonzero_bits (TREE_OPERAND (t, 0));\n+    case BIT_AND_EXPR:\n+      return wi::bit_and (tree_nonzero_bits (TREE_OPERAND (t, 0)),\n+\t\t\t  tree_nonzero_bits (TREE_OPERAND (t, 1)));\n+    case BIT_IOR_EXPR:\n+    case BIT_XOR_EXPR:\n+      return wi::bit_or (tree_nonzero_bits (TREE_OPERAND (t, 0)),\n+\t\t\t tree_nonzero_bits (TREE_OPERAND (t, 1)));\n+    case COND_EXPR:\n+      return wi::bit_or (tree_nonzero_bits (TREE_OPERAND (t, 1)),\n+\t\t\t tree_nonzero_bits (TREE_OPERAND (t, 2)));\n+    CASE_CONVERT:\n+      return wide_int::from (tree_nonzero_bits (TREE_OPERAND (t, 0)),\n+\t\t\t     TYPE_PRECISION (TREE_TYPE (t)),\n+\t\t\t     TYPE_SIGN (TREE_TYPE (TREE_OPERAND (t, 0))));\n+    case PLUS_EXPR:\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\t{\n+\t  wide_int nzbits1 = tree_nonzero_bits (TREE_OPERAND (t, 0));\n+\t  wide_int nzbits2 = tree_nonzero_bits (TREE_OPERAND (t, 1));\n+\t  if (wi::bit_and (nzbits1, nzbits2) == 0)\n+\t    return wi::bit_or (nzbits1, nzbits2);\n+\t}\n+      break;\n+    case LSHIFT_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (t, 1)) == INTEGER_CST)\n+\t{\n+\t  tree type = TREE_TYPE (t);\n+\t  wide_int nzbits = tree_nonzero_bits (TREE_OPERAND (t, 0));\n+\t  wide_int arg1 = wi::to_wide (TREE_OPERAND (t, 1),\n+\t\t\t\t       TYPE_PRECISION (type));\n+\t  return wi::neg_p (arg1)\n+\t\t ? wi::rshift (nzbits, -arg1, TYPE_SIGN (type))\n+\t\t : wi::lshift (nzbits, arg1);\n+\t}\n+      break;\n+    case RSHIFT_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (t, 1)) == INTEGER_CST)\n+        {\n+\t  tree type = TREE_TYPE (t);\n+\t  wide_int nzbits = tree_nonzero_bits (TREE_OPERAND (t, 0));\n+\t  wide_int arg1 = wi::to_wide (TREE_OPERAND (t, 1),\n+\t\t\t\t       TYPE_PRECISION (type));\n+\t  return wi::neg_p (arg1)\n+\t\t ? wi::lshift (nzbits, -arg1)\n+\t\t : wi::rshift (nzbits, arg1, TYPE_SIGN (type));\n+        }\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return wi::shwi (-1, TYPE_PRECISION (TREE_TYPE (t)));\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "337818a3319e3626ed71dcf1cbf8bb5a81241f5d", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -181,6 +181,7 @@ extern tree const_unop (enum tree_code, tree, tree);\n extern tree const_binop (enum tree_code, tree, tree, tree);\n extern bool negate_mathfn_p (combined_fn);\n extern const char *c_getstr (tree, unsigned HOST_WIDE_INT *strlen = NULL);\n+extern wide_int tree_nonzero_bits (const_tree);\n \n /* Return OFF converted to a pointer offset type suitable as offset for\n    POINTER_PLUS_EXPR.  Use location LOC for this conversion.  */"}, {"sha": "8a71141eac910be7fbb0bfdf677c719c91ced3c7", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -4760,3 +4760,23 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (negate (IFN_FNMS@3 @0 @1 @2))\n   (if (single_use (@3))\n    (IFN_FMA @0 @1 @2))))\n+\n+/* POPCOUNT simplifications.  */\n+(for popcount (BUILT_IN_POPCOUNT BUILT_IN_POPCOUNTL BUILT_IN_POPCOUNTLL\n+\t       BUILT_IN_POPCOUNTIMAX)\n+  /* popcount(X&1) is nop_expr(X&1).  */\n+  (simplify\n+    (popcount @0)\n+    (if (tree_nonzero_bits (@0) == 1)\n+      (convert @0)))\n+  /* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */\n+  (simplify\n+    (plus (popcount:s @0) (popcount:s @1))\n+    (if (wi::bit_and (tree_nonzero_bits (@0), tree_nonzero_bits (@1)) == 0)\n+      (popcount (bit_ior @0 @1))))\n+  /* popcount(X) == 0 is X == 0, and related (in)equalities.  */\n+  (for cmp (le eq ne gt)\n+       rep (eq eq ne ne)\n+    (simplify\n+      (cmp (popcount @0) integer_zerop)\n+      (rep @0 { build_zero_cst (TREE_TYPE (@0)); }))))"}, {"sha": "f7d0c3a4fb4326e179f9dc414d6c62b6d3050306", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -1,3 +1,10 @@\n+2018-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+        * gcc.dg/fold-popcount-1.c: New testcase.\n+        * gcc.dg/fold-popcount-2.c: New testcase.\n+        * gcc.dg/fold-popcount-3.c: New testcase.\n+        * gcc.dg/fold-popcount-4.c: New testcase.\n+\n 2018-05-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85847"}, {"sha": "32bb7e2a321758b94fc54a97fcd40903d5fd8727", "filename": "gcc/testsuite/gcc.dg/fold-popcount-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-1.c?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test_eqzero(unsigned int a)\n+{\n+  return __builtin_popcount(a) == 0;\n+}\n+\n+int test_eqzerol(unsigned long b)\n+{\n+  return __builtin_popcountl(b) == 0;\n+}\n+\n+int test_eqzeroll(unsigned long long c)\n+{\n+  return __builtin_popcountll(c) == 0;\n+}\n+\n+int test_nezero(unsigned int d)\n+{\n+  return __builtin_popcount(d) != 0;\n+}\n+\n+int test_nezerol(unsigned long e)\n+{\n+  return __builtin_popcountl(e) != 0;\n+}\n+\n+int test_nezeroll(unsigned long long f)\n+{\n+  return __builtin_popcountll(f) != 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"popcount\" 0 \"original\" } } */\n+"}, {"sha": "27557da7cb131c3ed1347300d9fda9e2875e709e", "filename": "gcc/testsuite/gcc.dg/fold-popcount-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-2.c?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+\n+int test_andone(unsigned int a)\n+{\n+  return __builtin_popcount(a&1);\n+}\n+\n+int test_andonel(unsigned long b)\n+{\n+  return __builtin_popcountl(b&1);\n+}\n+\n+int test_andonell(unsigned long long c)\n+{\n+  return __builtin_popcountll(c&1);\n+}\n+\n+int test_oneand(unsigned int d)\n+{\n+  return __builtin_popcount(1&d);\n+}\n+\n+int test_oneandl(unsigned long e)\n+{\n+  return __builtin_popcountl(1&e);\n+}\n+\n+int test_oneandll(unsigned long long f)\n+{\n+  return __builtin_popcountll(1&f);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"popcount\" 0 \"cddce1\" } } */\n+"}, {"sha": "eda007796bd7f0bf69f3aee7e6c7cd05e6e5edd8", "filename": "gcc/testsuite/gcc.dg/fold-popcount-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-3.c?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+\n+int test_combine(unsigned int a, unsigned int b)\n+{\n+  return __builtin_popcount(a&8) + __builtin_popcount(b&2);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"popcount\" 1 \"cddce1\" } } */\n+"}, {"sha": "424c3d86692c8937da0dc6f6f5ec8e4f04c3b22d", "filename": "gcc/testsuite/gcc.dg/fold-popcount-4.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6557e2686306942b157c3350e7497e551afb80/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-4.c?ref=ba6557e2686306942b157c3350e7497e551afb80", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+\n+int test_shiftmax(unsigned int a)\n+{\n+  return __builtin_popcount(a>>(8*sizeof(a)-1));\n+}\n+\n+int test_shiftmaxl(unsigned long b)\n+{\n+  return __builtin_popcountl(b>>(8*sizeof(b)-1));\n+}\n+\n+int test_shiftmaxll(unsigned long long c)\n+{\n+  return __builtin_popcountll(c>>(8*sizeof(c)-1));\n+}\n+\n+int test_shift7(unsigned char d)\n+{\n+  return __builtin_popcount(d>>7);\n+}\n+\n+int test_shift7l(unsigned char e)\n+{\n+  return __builtin_popcountl(e>>7);\n+}\n+\n+int test_shift7ll(unsigned char f)\n+{\n+  return __builtin_popcountll(f>>7);\n+}\n+\n+int test_shift15(unsigned short g)\n+{\n+  return __builtin_popcount(g>>15);\n+}\n+\n+int test_shift15l(unsigned short h)\n+{\n+  return __builtin_popcountl(h>>15);\n+}\n+\n+int test_shift15ll(unsigned short i)\n+{\n+  return __builtin_popcountll(i>>15);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"popcount\" 0 \"cddce1\" } } */\n+"}]}