{"sha": "ec0f9f7d88861198d9a94b51eb301567b6752fc5", "node_id": "C_kwDOANBUbNoAKGVjMGY5ZjdkODg4NjExOThkOWE5NGI1MWViMzAxNTY3YjY3NTJmYzU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-02-11T13:31:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:40Z"}, "message": "[Ada] Fix warning about generic subprograms withed but not referenced\n\nFor warnings about unreferenced entities and unused WITH clauses we\ntypically exclude references outside of the extended main source unit.\nHowever, we include references to variables of formal private types to\nwarn in the instance if the corresponding type is not a fully\ninitialized type.\n\nThis special case was unnecessarily applied to references to other\nentities of formal private types. In particular, we applied it to the\nreferences to generic functions, where the full initialization of the\nformal private type doesn't matter.\n\nAs an extreme example, this special case was unnecessarily applied to\n\"pragma Pure (Unchecked_Conversion)\" in the runtime unit.\n\ngcc/ada/\n\n\t* lib-xref.adb (Generate_Reference): Fix comment and implement\n\tit precisely.", "tree": {"sha": "219c41f7d405e618cfbf35c2931bc233f61bc95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/219c41f7d405e618cfbf35c2931bc233f61bc95c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec0f9f7d88861198d9a94b51eb301567b6752fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0f9f7d88861198d9a94b51eb301567b6752fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0f9f7d88861198d9a94b51eb301567b6752fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0f9f7d88861198d9a94b51eb301567b6752fc5/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3707c8feb1b68028d3967f16c9c4b89d86a14488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3707c8feb1b68028d3967f16c9c4b89d86a14488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3707c8feb1b68028d3967f16c9c4b89d86a14488"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "919e41fd2c24825eb216cacd2f614757b6324fde", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0f9f7d88861198d9a94b51eb301567b6752fc5/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0f9f7d88861198d9a94b51eb301567b6752fc5/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=ec0f9f7d88861198d9a94b51eb301567b6752fc5", "patch": "@@ -664,7 +664,7 @@ package body Lib.Xref is\n       --  a default in an instance.\n \n       --  We also set the referenced flag in a generic package that is not in\n-      --  then main source unit, when the variable is of a formal private type,\n+      --  the main source unit, when the object is of a formal private type,\n       --  to warn in the instance if the corresponding type is not a fully\n       --  initialized type.\n \n@@ -694,6 +694,7 @@ package body Lib.Xref is\n             return;\n \n          elsif Inside_A_Generic\n+           and then Is_Object (E)\n            and then Is_Generic_Type (Etype (E))\n          then\n             Set_Referenced (E);"}]}