{"sha": "8e77f71eda4610040727c69a782b12976dd9228b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3N2Y3MWVkYTQ2MTAwNDA3MjdjNjlhNzgyYjEyOTc2ZGQ5MjI4Yg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-12T22:18:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-12T22:18:11Z"}, "message": "[nvptx] Enable large vectors -- test-cases\n\nAdd various test-cases with vector length 128.\n\n2019-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c: New test.\n\nFrom-SVN: r267891", "tree": {"sha": "5bf5a3e235eb726246cc91c3b80785cbffe0cd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bf5a3e235eb726246cc91c3b80785cbffe0cd26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e77f71eda4610040727c69a782b12976dd9228b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e77f71eda4610040727c69a782b12976dd9228b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e77f71eda4610040727c69a782b12976dd9228b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e77f71eda4610040727c69a782b12976dd9228b/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52d22ece49ac0517d4288d65a5ee6dd8d9441d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d22ece49ac0517d4288d65a5ee6dd8d9441d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d22ece49ac0517d4288d65a5ee6dd8d9441d4c"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "9cd9a79f0babece793a9ad7856882e2b550034be", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8e77f71eda4610040727c69a782b12976dd9228b", "patch": "@@ -1,3 +1,9 @@\n+2019-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c: New test.\n+\n 2019-01-12  Tom de Vries  <tdevries@suse.de>\n \n \t* plugin/plugin-nvptx.c (nvptx_exec): Update insufficient hardware"}, {"sha": "e5d1df09b8a314088daf20f7b6c28174ba81b887", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c?ref=8e77f71eda4610040727c69a782b12976dd9228b", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+#pragma acc parallel num_workers (2) vector_length (128) copyin (a,b) copyout (c)\n+  {\n+#pragma acc loop worker\n+    for (unsigned int i = 0; i < 4; i++)\n+#pragma acc loop vector\n+      for (unsigned int j = 0; j < n / 4; j++)\n+\tc[(i * N / 4) + j] = a[(i * N / 4) + j] + b[(i * N / 4) + j];\n+  }\n+\n+  for (unsigned int i = 0; i < n; ++i)\n+    if (c[i] != (i % 3) + (i % 5))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "a1f67622f84d87cc119befc54cc1dfb856583127", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c?ref=8e77f71eda4610040727c69a782b12976dd9228b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \":2:\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+#pragma acc parallel vector_length (128) copyin (a,b) copyout (c)\n+  {\n+#pragma acc loop worker\n+    for (unsigned int i = 0; i < 4; i++)\n+#pragma acc loop vector\n+      for (unsigned int j = 0; j < n / 4; j++)\n+\tc[(i * N / 4) + j] = a[(i * N / 4) + j] + b[(i * N / 4) + j];\n+  }\n+\n+  for (unsigned int i = 0; i < n; ++i)\n+    if (c[i] != (i % 3) + (i % 5))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "c419f6499b539b1b4cb4c43635938c5d3b91f75d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e77f71eda4610040727c69a782b12976dd9228b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c?ref=8e77f71eda4610040727c69a782b12976dd9228b", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+#pragma acc parallel vector_length (128) copyin (a,b) copyout (c)\n+  {\n+#pragma acc loop worker\n+    for (unsigned int i = 0; i < 4; i++)\n+#pragma acc loop vector\n+      for (unsigned int j = 0; j < n / 4; j++)\n+\tc[(i * N / 4) + j] = a[(i * N / 4) + j] + b[(i * N / 4) + j];\n+  }\n+\n+  for (unsigned int i = 0; i < n; ++i)\n+    if (c[i] != (i % 3) + (i % 5))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=8, vectors=128\" } */"}]}