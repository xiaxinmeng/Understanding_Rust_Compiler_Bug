{"sha": "17f385d8dabbfff8eeb45012d63c8cd232958330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmMzg1ZDhkYWJiZmZmOGVlYjQ1MDEyZDYzYzhjZDIzMjk1ODMzMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-29T00:07:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-29T00:07:51Z"}, "message": "Make insn_addresses_new require an rtx_insn\n\ngcc/\n2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n\n\t* insn-addr.h (insn_addresses_new): Strengthen param \"insn\" from\n\trtx to rtx_insn *.\n\t* config/s390/s390.c (s390_split_branches): Eliminate top-level\n\tlocal rtx \"tmp\", in favor of new local rtx \"mem\" and rtx_insn *\n\t\"set_insn\".\n\t(s390_mainpool_finish): In three places, split out a local rtx\n\t\"insn\" into a local rtx - \"set\" or \"pat\" - and a rtx_insn *\n\t\"insn\".  Strengthen local \"pool_end\" from rtx to rtx_code_label *\n\t and split another local rtx \"insn\" out into rtx \"pat\" and\n\trtx_insn * \"insn\".\n\t* config/sh/sh.c (output_branchy_insn): Rather than working\n\tdirectly on operands[9], introduce local rtx_code_label *\n\tvariables named \"lab\" in two places, working on them, and then\n\tassigning them to operands[9], so that the intervening operations\n\tare known by the type system to be on insns.\n\nFrom-SVN: r214701", "tree": {"sha": "8f06167e65a551690e63c81678d1990d5e257be2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f06167e65a551690e63c81678d1990d5e257be2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f385d8dabbfff8eeb45012d63c8cd232958330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f385d8dabbfff8eeb45012d63c8cd232958330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f385d8dabbfff8eeb45012d63c8cd232958330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f385d8dabbfff8eeb45012d63c8cd232958330/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3064b94272037d53a8c9886c3e347c063d2f0a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3064b94272037d53a8c9886c3e347c063d2f0a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3064b94272037d53a8c9886c3e347c063d2f0a40"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "a928f92f9e14835efe1a54f25a82f77e136a79dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f385d8dabbfff8eeb45012d63c8cd232958330", "patch": "@@ -1,3 +1,21 @@\n+2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* insn-addr.h (insn_addresses_new): Strengthen param \"insn\" from\n+\trtx to rtx_insn *.\n+\t* config/s390/s390.c (s390_split_branches): Eliminate top-level\n+\tlocal rtx \"tmp\", in favor of new local rtx \"mem\" and rtx_insn *\n+\t\"set_insn\".\n+\t(s390_mainpool_finish): In three places, split out a local rtx\n+\t\"insn\" into a local rtx - \"set\" or \"pat\" - and a rtx_insn *\n+\t\"insn\".  Strengthen local \"pool_end\" from rtx to rtx_code_label *\n+\t and split another local rtx \"insn\" out into rtx \"pat\" and\n+\trtx_insn * \"insn\".\n+\t* config/sh/sh.c (output_branchy_insn): Rather than working\n+\tdirectly on operands[9], introduce local rtx_code_label *\n+\tvariables named \"lab\" in two places, working on them, and then\n+\tassigning them to operands[9], so that the intervening operations\n+\tare known by the type system to be on insns.\n+\n 2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (INSN_HAS_LOCATION): Strengthen param from const_rtx to"}, {"sha": "5933b96b4425171cb57362a41bcda8c66fcc328f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=17f385d8dabbfff8eeb45012d63c8cd232958330", "patch": "@@ -6030,7 +6030,7 @@ s390_split_branches (void)\n   rtx temp_reg = gen_rtx_REG (Pmode, RETURN_REGNUM);\n   int new_literal = 0, ret;\n   rtx_insn *insn;\n-  rtx pat, tmp, target;\n+  rtx pat, target;\n   rtx *label;\n \n   /* We need correct insn addresses.  */\n@@ -6076,10 +6076,10 @@ s390_split_branches (void)\n       if (!flag_pic)\n \t{\n \t  new_literal = 1;\n-\t  tmp = force_const_mem (Pmode, *label);\n-\t  tmp = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, tmp), insn);\n-\t  INSN_ADDRESSES_NEW (tmp, -1);\n-\t  annotate_constant_pool_refs (&PATTERN (tmp));\n+\t  rtx mem = force_const_mem (Pmode, *label);\n+\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, mem), insn);\n+\t  INSN_ADDRESSES_NEW (set_insn, -1);\n+\t  annotate_constant_pool_refs (&PATTERN (set_insn));\n \n \t  target = temp_reg;\n \t}\n@@ -6090,9 +6090,9 @@ s390_split_branches (void)\n \t\t\t\t   UNSPEC_LTREL_OFFSET);\n \t  target = gen_rtx_CONST (Pmode, target);\n \t  target = force_const_mem (Pmode, target);\n-\t  tmp = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, target), insn);\n-\t  INSN_ADDRESSES_NEW (tmp, -1);\n-\t  annotate_constant_pool_refs (&PATTERN (tmp));\n+\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, target), insn);\n+\t  INSN_ADDRESSES_NEW (set_insn, -1);\n+\t  annotate_constant_pool_refs (&PATTERN (set_insn));\n \n           target = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, XEXP (target, 0),\n \t\t\t\t\t\t\tcfun->machine->base_reg),\n@@ -6759,8 +6759,8 @@ s390_mainpool_finish (struct constant_pool *pool)\n      located in the .rodata section, so we emit it after the function.  */\n   if (TARGET_CPU_ZARCH)\n     {\n-      rtx insn = gen_main_base_64 (base_reg, pool->label);\n-      insn = emit_insn_after (insn, pool->pool_insn);\n+      rtx set = gen_main_base_64 (base_reg, pool->label);\n+      rtx_insn *insn = emit_insn_after (set, pool->pool_insn);\n       INSN_ADDRESSES_NEW (insn, -1);\n       remove_insn (pool->pool_insn);\n \n@@ -6777,8 +6777,8 @@ s390_mainpool_finish (struct constant_pool *pool)\n   else if (INSN_ADDRESSES (INSN_UID (pool->emit_pool_after))\n \t   + pool->size + 8 /* alignment slop */ < 4096)\n     {\n-      rtx insn = gen_main_base_31_small (base_reg, pool->label);\n-      insn = emit_insn_after (insn, pool->pool_insn);\n+      rtx set = gen_main_base_31_small (base_reg, pool->label);\n+      rtx_insn *insn = emit_insn_after (set, pool->pool_insn);\n       INSN_ADDRESSES_NEW (insn, -1);\n       remove_insn (pool->pool_insn);\n \n@@ -6800,10 +6800,10 @@ s390_mainpool_finish (struct constant_pool *pool)\n      over it, setting up the pool register at the same time.  */\n   else\n     {\n-      rtx pool_end = gen_label_rtx ();\n+      rtx_code_label *pool_end = gen_label_rtx ();\n \n-      rtx insn = gen_main_base_31_large (base_reg, pool->label, pool_end);\n-      insn = emit_jump_insn_after (insn, pool->pool_insn);\n+      rtx pat = gen_main_base_31_large (base_reg, pool->label, pool_end);\n+      rtx_insn *insn = emit_jump_insn_after (pat, pool->pool_insn);\n       JUMP_LABEL (insn) = pool_end;\n       INSN_ADDRESSES_NEW (insn, -1);\n       remove_insn (pool->pool_insn);"}, {"sha": "dbfaade91b61be5e42936a215ca2d297fa64c94a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=17f385d8dabbfff8eeb45012d63c8cd232958330", "patch": "@@ -2856,11 +2856,12 @@ output_branchy_insn (enum rtx_code code, const char *templ,\n       if (GET_CODE (src) == IF_THEN_ELSE && GET_CODE (XEXP (src, 0)) != code)\n \t{\n \t  /* Following branch not taken */\n-\t  operands[9] = gen_label_rtx ();\n-\t  emit_label_after (operands[9], next_insn);\n-\t  INSN_ADDRESSES_NEW (operands[9],\n+\t  rtx_code_label *lab = gen_label_rtx ();\n+\t  emit_label_after (lab, next_insn);\n+\t  INSN_ADDRESSES_NEW (lab,\n \t\t\t      INSN_ADDRESSES (INSN_UID (next_insn))\n \t\t\t      + get_attr_length (next_insn));\n+\t  operands[9] = lab;\n \t  return templ;\n \t}\n       else\n@@ -2877,11 +2878,12 @@ output_branchy_insn (enum rtx_code code, const char *templ,\n \t    }\n \t}\n     }\n-  operands[9] = gen_label_rtx ();\n-  emit_label_after (operands[9], insn);\n-  INSN_ADDRESSES_NEW (operands[9],\n+  rtx_code_label *lab = gen_label_rtx ();\n+  emit_label_after (lab, insn);\n+  INSN_ADDRESSES_NEW (lab,\n \t\t      INSN_ADDRESSES (INSN_UID (insn))\n \t\t      + get_attr_length (insn));\n+  operands[9] = lab;\n   return templ;\n }\n "}, {"sha": "e255ac48f50713d9c4f15252e6fc971d05018011", "filename": "gcc/insn-addr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Finsn-addr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f385d8dabbfff8eeb45012d63c8cd232958330/gcc%2Finsn-addr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-addr.h?ref=17f385d8dabbfff8eeb45012d63c8cd232958330", "patch": "@@ -38,7 +38,7 @@ extern int insn_current_address;\n #define INSN_ADDRESSES_SIZE() (insn_addresses_.length ())\n \n static inline void\n-insn_addresses_new (rtx insn, int insn_addr)\n+insn_addresses_new (rtx_insn *insn, int insn_addr)\n {\n   unsigned insn_uid = INSN_UID ((insn));\n "}]}