{"sha": "4c8125f4de1e413c735193f8f3a7181974d6d3f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MTI1ZjRkZTFlNDEzYzczNTE5M2Y4ZjNhNzE4MTk3NGQ2ZDNmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-23T16:13:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-23T16:13:49Z"}, "message": "gigi.h (mark_visited): Declare.\n\n\t* gigi.h (mark_visited): Declare.\n\t* decl.c (gnat_to_gnu_entity): Use mark_visited instead of marking\n\tonly the topmost node of expressions.\n\t(elaborate_expression_1): Look deeper for read-only variable.\n\t* trans.c (add_decl_expr): Use mark_visited instead of marking by hand.\n\t(mark_visited): Move logic to mark_visited_r.  Invoke walk_tree.\n\t(mark_visited_r): New function.\n\nFrom-SVN: r135819", "tree": {"sha": "6e4db698b40380eeb24f253993cf5765ad5c25eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e4db698b40380eeb24f253993cf5765ad5c25eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c8125f4de1e413c735193f8f3a7181974d6d3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8125f4de1e413c735193f8f3a7181974d6d3f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8125f4de1e413c735193f8f3a7181974d6d3f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8125f4de1e413c735193f8f3a7181974d6d3f6/comments", "author": null, "committer": null, "parents": [{"sha": "e793b0fe876d3e89c5aac4449d172c88f9fa3729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e793b0fe876d3e89c5aac4449d172c88f9fa3729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e793b0fe876d3e89c5aac4449d172c88f9fa3729"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "c38afea1c02a1802d185c8ae894383dcf4ed3b0a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c8125f4de1e413c735193f8f3a7181974d6d3f6", "patch": "@@ -1,3 +1,13 @@\n+2008-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gigi.h (mark_visited): Declare.\n+\t* decl.c (gnat_to_gnu_entity): Use mark_visited instead of marking\n+\tonly the topmost node of expressions.\n+\t(elaborate_expression_1): Look deeper for read-only variable.\n+\t* trans.c (add_decl_expr): Use mark_visited instead of marking by hand.\n+\t(mark_visited): Move logic to mark_visited_r.  Invoke walk_tree.\n+\t(mark_visited_r): New function.\n+\n 2008-05-23  Vincent Celier  <celier@adacore.com>\n \n \t* snames.adb:"}, {"sha": "a61c2f0f28e059f0349d817bed9b7a56d9ce5ffa", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=4c8125f4de1e413c735193f8f3a7181974d6d3f6", "patch": "@@ -876,7 +876,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t/* ??? No DECL_EXPR is created so we need to mark\n \t\t\t   the expression manually lest it is shared.  */\n \t\t\tif (global_bindings_p ())\n-\t\t\t  TREE_VISITED (gnu_decl) = 1;\n+\t\t\t  mark_visited (&gnu_decl);\n \t\t\tsave_gnu_tree (gnat_entity, gnu_decl, true);\n \t\t\tsaved = true;\n \t\t\tbreak;\n@@ -2343,7 +2343,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t\t  /* ??? create_type_decl is not invoked on the inner types so\n \t\t     the MULT_EXPR node built above will never be marked.  */\n-\t\t  TREE_VISITED (TYPE_SIZE_UNIT (gnu_arr_type)) = 1;\n+\t\t  mark_visited (&TYPE_SIZE_UNIT (gnu_arr_type));\n \t\t}\n \t    }\n \n@@ -4379,9 +4379,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t\t/* ??? The context of gnu_field is not necessarily gnu_type so\n \t\t   the MULT_EXPR node built above may not be marked by the call\n-\t\t   to create_type_decl below.  Mark it manually for now.  */\n+\t\t   to create_type_decl below.  */\n \t\tif (global_bindings_p ())\n-\t\t  TREE_VISITED (DECL_FIELD_OFFSET (gnu_field)) = 1;\n+\t\t  mark_visited (&DECL_FIELD_OFFSET (gnu_field));\n \t\t}\n \t    }\n \n@@ -5295,10 +5295,12 @@ elaborate_expression_1 (Node_Id gnat_expr, Entity_Id gnat_entity,\n \t\t\tbool need_debug)\n {\n   tree gnu_decl = NULL_TREE;\n-  /* Strip any conversions to see if the expression is a readonly variable.\n-     ??? This really should remain readonly, but we have to think about\n+  /* Skip any conversions and simple arithmetics to see if the expression\n+     is a read-only variable.\n+     ??? This really should remain read-only, but we have to think about\n      the typing of the tree here.  */\n-  tree gnu_inner_expr = remove_conversions (gnu_expr, true);\n+  tree gnu_inner_expr\n+    = skip_simple_arithmetic (remove_conversions (gnu_expr, true));\n   bool expr_global = Is_Public (gnat_entity) || global_bindings_p ();\n   bool expr_variable;\n \n@@ -5314,7 +5316,7 @@ elaborate_expression_1 (Node_Id gnat_expr, Entity_Id gnat_entity,\n \t\t       gnu_expr, NULL_TREE);\n \n   /* If GNU_EXPR is neither a placeholder nor a constant, nor a variable\n-     that is a constant, make a variable that is initialized to contain the\n+     that is read-only, make a variable that is initialized to contain the\n      bound when the package containing the definition is elaborated.  If\n      this entity is defined at top level and a bound or discriminant value\n      isn't a constant or a reference to a discriminant, replace the bound"}, {"sha": "9b0c2bec8d57c80f422974e1ad4ecb1158b7e609", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=4c8125f4de1e413c735193f8f3a7181974d6d3f6", "patch": "@@ -102,6 +102,11 @@ extern void set_block_for_group (tree);\n    Get SLOC from GNAT_ENTITY.  */\n extern void add_decl_expr (tree gnu_decl, Entity_Id gnat_entity);\n \n+/* Mark nodes rooted at *TP with TREE_VISITED and types as having their\n+   sized gimplified.  We use this to indicate all variable sizes and\n+   positions in global types may not be shared by any subprograms.  */\n+extern void mark_visited (tree *);\n+\n /* Finalize any From_With_Type incomplete types.  We do this after processing\n    our compilation unit and after processing its spec, if this is a body.  */\n extern void finalize_from_with_types (void);"}, {"sha": "4bc772ddfeca1665df7b4337cea918111aa5d8ee", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8125f4de1e413c735193f8f3a7181974d6d3f6/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=4c8125f4de1e413c735193f8f3a7181974d6d3f6", "patch": "@@ -186,7 +186,6 @@ static void Compilation_Unit_to_gnu (Node_Id);\n static void record_code_position (Node_Id);\n static void insert_code_for (Node_Id);\n static void add_cleanup (tree, Node_Id);\n-static tree mark_visited (tree *, int *, void *);\n static tree unshare_save_expr (tree *, int *, void *);\n static void add_stmt_list (List_Id);\n static void push_exception_label_stack (tree *, Entity_Id);\n@@ -5102,21 +5101,21 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n       /* Mark everything as used to prevent node sharing with subprograms.\n \t Note that walk_tree knows how to deal with TYPE_DECL, but neither\n \t VAR_DECL nor CONST_DECL.  This appears to be somewhat arbitrary.  */\n-      walk_tree (&gnu_stmt, mark_visited, NULL, NULL);\n+      mark_visited (&gnu_stmt);\n       if (TREE_CODE (gnu_decl) == VAR_DECL\n \t  || TREE_CODE (gnu_decl) == CONST_DECL)\n \t{\n-\t  walk_tree (&DECL_SIZE (gnu_decl), mark_visited, NULL, NULL);\n-\t  walk_tree (&DECL_SIZE_UNIT (gnu_decl), mark_visited, NULL, NULL);\n-\t  walk_tree (&DECL_INITIAL (gnu_decl), mark_visited, NULL, NULL);\n+\t  mark_visited (&DECL_SIZE (gnu_decl));\n+\t  mark_visited (&DECL_SIZE_UNIT (gnu_decl));\n+\t  mark_visited (&DECL_INITIAL (gnu_decl));\n \t}\n       /* In any case, we have to deal with our own TYPE_ADA_SIZE field.  */\n       if (TREE_CODE (gnu_decl) == TYPE_DECL\n \t  && (TREE_CODE (type) == RECORD_TYPE\n \t      || TREE_CODE (type) == UNION_TYPE\n \t      || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t  && (t = TYPE_ADA_SIZE (type)))\n-\twalk_tree (&t, mark_visited, NULL, NULL);\n+\tmark_visited (&t);\n     }\n   else\n     add_stmt_with_node (gnu_stmt, gnat_entity);\n@@ -5150,13 +5149,10 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n     }\n }\n \n-/* Utility function to mark nodes with TREE_VISITED and types as having their\n-   sized gimplified.  Called from walk_tree.  We use this to indicate all\n-   variable sizes and positions in global types may not be shared by any\n-   subprogram.  */\n+/* Callback for walk_tree to mark the visited trees rooted at *TP.  */\n \n static tree\n-mark_visited (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+mark_visited_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n   if (TREE_VISITED (*tp))\n     *walk_subtrees = 0;\n@@ -5186,6 +5182,16 @@ unshare_save_expr (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return NULL_TREE;\n }\n \n+/* Mark nodes rooted at *TP with TREE_VISITED and types as having their\n+   sized gimplified.  We use this to indicate all variable sizes and\n+   positions in global types may not be shared by any subprogram.  */\n+\n+void\n+mark_visited (tree *tp)\n+{\n+  walk_tree (tp, mark_visited_r, NULL, NULL);\n+}\n+\n /* Add GNU_CLEANUP, a cleanup action, to the current code group and\n    set its location to that of GNAT_NODE if present.  */\n "}]}