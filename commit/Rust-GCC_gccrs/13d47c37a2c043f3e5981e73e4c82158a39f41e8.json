{"sha": "13d47c37a2c043f3e5981e73e4c82158a39f41e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkNDdjMzdhMmMwNDNmM2U1OTgxZTczZTRjODIxNThhMzlmNDFlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-12T10:03:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-12T10:03:40Z"}, "message": "reassoc: Optimize in reassoc x < 0 && y < 0 to (x | y) < 0 etc. [PR95731]\n\nWe already had x != 0 && y != 0 to (x | y) != 0 and\nx != -1 && y != -1 to (x & y) != -1 and\nx < 32U && y < 32U to (x | y) < 32U, this patch adds signed\nx < 0 && y < 0 to (x | y) < 0.  In that case, the low/high seem to be\nalways the same and just in_p indices whether it is >= 0 or < 0,\nalso, all types in the same bucket (same precision) should be type\ncompatible, but we can have some >= 0 and some < 0 comparison mixed,\nso the patch handles that by using the right BIT_IOR_EXPR or BIT_AND_EXPR\nand doing one set of < 0 or >= 0 first, then BIT_NOT_EXPR and then the other\none.  I had to move optimize_range_tests_var_bound before this optimization\nbecause that one deals with signed a >= 0 && a < b, and limited it to the\nlast reassoc pass as reassoc itself can't virtually undo this optimization\nyet (and not sure if vrp would be able to).\n\n2021-01-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/95731\n\t* tree-ssa-reassoc.c (optimize_range_tests_cmp_bitwise): Also optimize\n\tx < 0 && y < 0 && z < 0 into (x | y | z) < 0 for signed x, y, z.\n\t(optimize_range_tests): Call optimize_range_tests_cmp_bitwise\n\tonly after optimize_range_tests_var_bound.\n\n\t* gcc.dg/tree-ssa/pr95731.c: New test.\n\t* gcc.c-torture/execute/pr95731.c: New test.", "tree": {"sha": "a7069386bc37834678a8f0c7b5989121a4213060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7069386bc37834678a8f0c7b5989121a4213060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13d47c37a2c043f3e5981e73e4c82158a39f41e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d47c37a2c043f3e5981e73e4c82158a39f41e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d47c37a2c043f3e5981e73e4c82158a39f41e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d47c37a2c043f3e5981e73e4c82158a39f41e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff99d05f40fc573ee405f1278f2bc5ac55019bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff99d05f40fc573ee405f1278f2bc5ac55019bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff99d05f40fc573ee405f1278f2bc5ac55019bdb"}], "stats": {"total": 124, "additions": 112, "deletions": 12}, "files": [{"sha": "4d9593cd359a56cbbc4fd84300f0ee22b058e49f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr95731.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr95731.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr95731.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr95731.c?ref=13d47c37a2c043f3e5981e73e4c82158a39f41e8", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/95731 */\n+\n+__attribute__((noipa)) int\n+foo (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return x >= 0 && y >= 0 && z < 0 && u < 0 && w >= 0 && v < 0;\n+}\n+\n+__attribute__((noipa)) int\n+bar (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return u >= 0 && x >= 0 && y >= 0 && v < 0 && z >= 0 && w >= 0;\n+}\n+\n+__attribute__((noipa)) int\n+baz (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return x >= 0 || u < 0 || y >= 0 || v < 0 || z >= 0 || w >= 0;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 64; i++)\n+    {\n+      int a = foo ((i & 1) ? -123 : 456, (i & 2) ? -123 : 456,\n+\t\t   (i & 4) ? -123 : 456, (i & 8) ? -123 : 456,\n+\t\t   (i & 16) ? -123 : 456, (i & 32) ? -123 : 456);\n+      int b = bar ((i & 1) ? -123 : 456, (i & 2) ? -123 : 456,\n+\t\t   (i & 4) ? -123 : 456, (i & 8) ? -123 : 456,\n+\t\t   (i & 16) ? -123 : 456, (i & 32) ? -123 : 456);\n+      int c = baz ((i & 1) ? -123 : 456, (i & 2) ? -123 : 456,\n+\t\t   (i & 4) ? -123 : 456, (i & 8) ? -123 : 456,\n+\t\t   (i & 16) ? -123 : 456, (i & 32) ? -123 : 456);\n+      if (a != (i == 52) || b != (i == 32) || c != (i != 15))\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "39889be6cbbb1512cb8beed9a5c34cf406602ac7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95731.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95731.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95731.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95731.c?ref=13d47c37a2c043f3e5981e73e4c82158a39f41e8", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/95731 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" >= 0\\| < 0\" 6 \"optimized\" } } */\n+\n+int\n+foo (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return x >= 0 && y >= 0 && z < 0 && u < 0 && w >= 0 && v < 0;\n+}\n+\n+int\n+bar (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return u >= 0 && x >= 0 && y >= 0 && v < 0 && z >= 0 && w >= 0;\n+}\n+\n+int\n+baz (int x, int y, int z, int w, long long u, long long v)\n+{\n+  return x >= 0 || u < 0 || y >= 0 || v < 0 || z >= 0 || w >= 0;\n+}"}, {"sha": "8e2a4896d14b79c7b34e5da0605990550278dd36", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d47c37a2c043f3e5981e73e4c82158a39f41e8/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=13d47c37a2c043f3e5981e73e4c82158a39f41e8", "patch": "@@ -3320,7 +3320,8 @@ optimize_range_tests_to_bit_test (enum tree_code opcode, int first, int length,\n /* Optimize x != 0 && y != 0 && z != 0 into (x | y | z) != 0\n    and similarly x != -1 && y != -1 && y != -1 into (x & y & z) != -1.\n    Also, handle x < C && y < C && z < C where C is power of two as\n-   (x | y | z) < C.  */\n+   (x | y | z) < C.  And also handle signed x < 0 && y < 0 && z < 0\n+   as (x | y | z) < 0.  */\n \n static bool\n optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n@@ -3340,21 +3341,22 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \n       if (ranges[i].exp == NULL_TREE\n \t  || TREE_CODE (ranges[i].exp) != SSA_NAME\n-\t  || !ranges[i].in_p\n \t  || TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) <= 1\n \t  || TREE_CODE (TREE_TYPE (ranges[i].exp)) == BOOLEAN_TYPE)\n \tcontinue;\n \n       if (ranges[i].low != NULL_TREE\n \t  && ranges[i].high != NULL_TREE\n+\t  && ranges[i].in_p\n \t  && tree_int_cst_equal (ranges[i].low, ranges[i].high))\n \t{\n \t  idx = !integer_zerop (ranges[i].low);\n \t  if (idx && !integer_all_onesp (ranges[i].low))\n \t    continue;\n \t}\n       else if (ranges[i].high != NULL_TREE\n-\t       && TREE_CODE (ranges[i].high) == INTEGER_CST)\n+\t       && TREE_CODE (ranges[i].high) == INTEGER_CST\n+\t       && ranges[i].in_p)\n \t{\n \t  wide_int w = wi::to_wide (ranges[i].high);\n \t  int prec = TYPE_PRECISION (TREE_TYPE (ranges[i].exp));\n@@ -3370,10 +3372,20 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t\t    && integer_zerop (ranges[i].low))))\n \t    continue;\n \t}\n+      else if (ranges[i].high == NULL_TREE\n+\t       && ranges[i].low != NULL_TREE\n+\t       /* Perform this optimization only in the last\n+\t\t  reassoc pass, as it interferes with the reassociation\n+\t\t  itself or could also with VRP etc. which might not\n+\t\t  be able to virtually undo the optimization.  */\n+\t       && !reassoc_insert_powi_p\n+\t       && !TYPE_UNSIGNED (TREE_TYPE (ranges[i].exp))\n+\t       && integer_zerop (ranges[i].low))\n+\tidx = 3;\n       else\n \tcontinue;\n \n-      b = TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) * 3 + idx;\n+      b = TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) * 4 + idx;\n       if (buckets.length () <= b)\n \tbuckets.safe_grow_cleared (b + 1, true);\n       if (chains.length () <= (unsigned) i)\n@@ -3386,7 +3398,7 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n     if (i && chains[i - 1])\n       {\n \tint j, k = i;\n-\tif ((b % 3) == 2)\n+\tif ((b % 4) == 2)\n \t  {\n \t    /* When ranges[X - 1].high + 1 is a power of two,\n \t       we need to process the same bucket up to\n@@ -3439,6 +3451,19 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t  {\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    strict_overflow_p |= ranges[j - 1].strict_overflow_p;\n+\t    if ((b % 4) == 3)\n+\t      {\n+\t\t/* For the signed < 0 cases, the types should be\n+\t\t   really compatible (all signed with the same precision,\n+\t\t   instead put ranges that have different in_p from\n+\t\t   k first.  */\n+\t\tif (!useless_type_conversion_p (type1, type))\n+\t\t  continue;\n+\t\tif (ranges[j - 1].in_p != ranges[k - 1].in_p)\n+\t\t  candidates.safe_push (&ranges[j - 1]);\n+\t\ttype2 = type1;\n+\t\tcontinue;\n+\t      }\n \t    if (j == k\n \t\t|| useless_type_conversion_p (type1, type))\n \t      ;\n@@ -3456,6 +3481,14 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    if (j == k)\n \t      continue;\n+\t    if ((b % 4) == 3)\n+\t      {\n+\t\tif (!useless_type_conversion_p (type1, type))\n+\t\t  continue;\n+\t\tif (ranges[j - 1].in_p == ranges[k - 1].in_p)\n+\t\t  candidates.safe_push (&ranges[j - 1]);\n+\t\tcontinue;\n+\t      }\n \t    if (useless_type_conversion_p (type1, type))\n \t      ;\n \t    else if (type2 == NULL_TREE\n@@ -3471,14 +3504,16 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \tFOR_EACH_VEC_ELT (candidates, id, r)\n \t  {\n \t    gimple *g;\n+\t    enum tree_code code;\n \t    if (id == 0)\n \t      {\n \t\top = r->exp;\n \t\tcontinue;\n \t      }\n \t    if (id == l)\n \t      {\n-\t\tg = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, op);\n+\t\tcode = (b % 4) == 3 ? BIT_NOT_EXPR : NOP_EXPR;\n+\t\tg = gimple_build_assign (make_ssa_name (type1), code, op);\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t\top = gimple_assign_lhs (g);\n \t      }\n@@ -3490,21 +3525,24 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t\texp = gimple_assign_lhs (g);\n \t      }\n+\t    if ((b % 4) == 3)\n+\t      code = r->in_p ? BIT_IOR_EXPR : BIT_AND_EXPR;\n+\t    else\n+\t      code = (b % 4) == 1 ? BIT_AND_EXPR : BIT_IOR_EXPR;\n \t    g = gimple_build_assign (make_ssa_name (id >= l ? type1 : type2),\n-\t\t\t\t     (b % 3) == 1\n-\t\t\t\t     ? BIT_AND_EXPR : BIT_IOR_EXPR, op, exp);\n+\t\t\t\t     code, op, exp);\n \t    gimple_seq_add_stmt_without_update (&seq, g);\n \t    op = gimple_assign_lhs (g);\n \t  }\n \tcandidates.pop ();\n \tif (update_range_test (&ranges[k - 1], NULL, candidates.address (),\n \t\t\t       candidates.length (), opcode, ops, op,\n-\t\t\t       seq, true, ranges[k - 1].low,\n+\t\t\t       seq, ranges[k - 1].in_p, ranges[k - 1].low,\n \t\t\t       ranges[k - 1].high, strict_overflow_p))\n \t  any_changes = true;\n \telse\n \t  gimple_seq_discard (seq);\n-\tif ((b % 3) == 2 && buckets[b] != i)\n+\tif ((b % 4) == 2 && buckets[b] != i)\n \t  /* There is more work to do for this bucket.  */\n \t  b--;\n       }\n@@ -3909,10 +3947,10 @@ optimize_range_tests (enum tree_code opcode,\n   if (lshift_cheap_p (optimize_function_for_speed_p (cfun)))\n     any_changes |= optimize_range_tests_to_bit_test (opcode, first, length,\n \t\t\t\t\t\t     ops, ranges);\n-  any_changes |= optimize_range_tests_cmp_bitwise (opcode, first, length,\n-\t\t\t\t\t\t   ops, ranges);\n   any_changes |= optimize_range_tests_var_bound (opcode, first, length, ops,\n \t\t\t\t\t\t ranges, first_bb);\n+  any_changes |= optimize_range_tests_cmp_bitwise (opcode, first, length,\n+\t\t\t\t\t\t   ops, ranges);\n \n   if (any_changes && opcode != ERROR_MARK)\n     {"}]}