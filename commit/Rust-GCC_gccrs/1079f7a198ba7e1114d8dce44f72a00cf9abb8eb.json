{"sha": "1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3OWY3YTE5OGJhN2UxMTE0ZDhkY2U0NGY3MmEwMGNmOWFiYjhlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-30T17:59:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-30T17:59:44Z"}, "message": "re PR target/47754 ([missed optimization] AVX allows unaligned memory operands but GCC uses unaligned load and register operand)\n\n\tPR target/47754\n\t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign): If\n\top1 is misaligned_operand, just use *mov<mode>_internal insn\n\trather than UNSPEC_LOADU load.\n\t(ix86_expand_vector_move_misalign): Likewise (for TARGET_AVX only).\n\tAvoid gen_lowpart on op0 if it isn't MEM.\n\n\t* gcc.target/i386/avx256-unaligned-load-1.c: Adjust scan-assembler\n\tand scan-assembler-not regexps.\n\t* gcc.target/i386/avx256-unaligned-load-2.c: Likewise.\n\t* gcc.target/i386/avx256-unaligned-load-3.c: Likewise.\n\t* gcc.target/i386/avx256-unaligned-load-4.c: Likewise.\n\t* gcc.target/i386/l_fma_float_1.c: Use pattern for\n\tscan-assembler-times instead of just one insn name.\n\t* gcc.target/i386/l_fma_float_2.c: Likewise.\n\t* gcc.target/i386/l_fma_float_3.c: Likewise.\n\t* gcc.target/i386/l_fma_float_4.c: Likewise.\n\t* gcc.target/i386/l_fma_float_5.c: Likewise.\n\t* gcc.target/i386/l_fma_float_6.c: Likewise.\n\t* gcc.target/i386/l_fma_double_1.c: Likewise.\n\t* gcc.target/i386/l_fma_double_2.c: Likewise.\n\t* gcc.target/i386/l_fma_double_3.c: Likewise.\n\t* gcc.target/i386/l_fma_double_4.c: Likewise.\n\t* gcc.target/i386/l_fma_double_5.c: Likewise.\n\t* gcc.target/i386/l_fma_double_6.c: Likewise.\n\nFrom-SVN: r204219", "tree": {"sha": "2cf379154dd0a87b9e80401eb835d6d1776b4529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cf379154dd0a87b9e80401eb835d6d1776b4529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/comments", "author": null, "committer": null, "parents": [{"sha": "3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4403a4c4affc7ba55f69136e74c25a0a74d84e"}], "stats": {"total": 244, "additions": 139, "deletions": 105}, "files": [{"sha": "93a8b288c05dfc0ba29b7744c69571f428dfd510", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -16560,6 +16560,12 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n \t  r = gen_rtx_VEC_CONCAT (GET_MODE (op0), r, m);\n \t  emit_move_insn (op0, r);\n \t}\n+      /* Normal *mov<mode>_internal pattern will handle\n+\t unaligned loads just fine if misaligned_operand\n+\t is true, and without the UNSPEC it can be combined\n+\t with arithmetic instructions.  */\n+      else if (misaligned_operand (op1, GET_MODE (op1)))\n+\temit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n       else\n \temit_insn (load_unaligned (op0, op1));\n     }\n@@ -16634,7 +16640,7 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n void\n ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n {\n-  rtx op0, op1, m;\n+  rtx op0, op1, orig_op0 = NULL_RTX, m;\n   rtx (*load_unaligned) (rtx, rtx);\n   rtx (*store_unaligned) (rtx, rtx);\n \n@@ -16647,7 +16653,16 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t{\n \tcase MODE_VECTOR_INT:\n \tcase MODE_INT:\n-\t  op0 = gen_lowpart (V16SImode, op0);\n+\t  if (GET_MODE (op0) != V16SImode)\n+\t    {\n+\t      if (!MEM_P (op0))\n+\t\t{\n+\t\t  orig_op0 = op0;\n+\t\t  op0 = gen_reg_rtx (V16SImode);\n+\t\t}\n+\t      else\n+\t\top0 = gen_lowpart (V16SImode, op0);\n+\t    }\n \t  op1 = gen_lowpart (V16SImode, op1);\n \t  /* FALLTHRU */\n \n@@ -16676,6 +16691,8 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t    emit_insn (store_unaligned (op0, op1));\n \t  else\n \t    gcc_unreachable ();\n+\t  if (orig_op0)\n+\t    emit_move_insn (orig_op0, gen_lowpart (GET_MODE (orig_op0), op0));\n \t  break;\n \n \tdefault:\n@@ -16692,12 +16709,23 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t{\n \tcase MODE_VECTOR_INT:\n \tcase MODE_INT:\n-\t  op0 = gen_lowpart (V32QImode, op0);\n+\t  if (GET_MODE (op0) != V32QImode)\n+\t    {\n+\t      if (!MEM_P (op0))\n+\t\t{\n+\t\t  orig_op0 = op0;\n+\t\t  op0 = gen_reg_rtx (V32QImode);\n+\t\t}\n+\t      else\n+\t\top0 = gen_lowpart (V32QImode, op0);\n+\t    }\n \t  op1 = gen_lowpart (V32QImode, op1);\n \t  /* FALLTHRU */\n \n \tcase MODE_VECTOR_FLOAT:\n \t  ix86_avx256_split_vector_move_misalign (op0, op1);\n+\t  if (orig_op0)\n+\t    emit_move_insn (orig_op0, gen_lowpart (GET_MODE (orig_op0), op0));\n \t  break;\n \n \tdefault:\n@@ -16709,15 +16737,30 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \n   if (MEM_P (op1))\n     {\n+      /* Normal *mov<mode>_internal pattern will handle\n+\t unaligned loads just fine if misaligned_operand\n+\t is true, and without the UNSPEC it can be combined\n+\t with arithmetic instructions.  */\n+      if (TARGET_AVX\n+\t  && (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t      || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n+\t  && misaligned_operand (op1, GET_MODE (op1)))\n+\temit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n       /* ??? If we have typed data, then it would appear that using\n \t movdqu is the only way to get unaligned data loaded with\n \t integer type.  */\n-      if (TARGET_SSE2 && GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n+      else if (TARGET_SSE2 && GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n \t{\n-\t  op0 = gen_lowpart (V16QImode, op0);\n+\t  if (GET_MODE (op0) != V16QImode)\n+\t    {\n+\t      orig_op0 = op0;\n+\t      op0 = gen_reg_rtx (V16QImode);\n+\t    }\n \t  op1 = gen_lowpart (V16QImode, op1);\n \t  /* We will eventually emit movups based on insn attributes.  */\n \t  emit_insn (gen_sse2_loaddquv16qi (op0, op1));\n+\t  if (orig_op0)\n+\t    emit_move_insn (orig_op0, gen_lowpart (GET_MODE (orig_op0), op0));\n \t}\n       else if (TARGET_SSE2 && mode == V2DFmode)\n         {\n@@ -16765,9 +16808,16 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n \t      || optimize_insn_for_size_p ())\n \t    {\n-\t      op0 = gen_lowpart (V4SFmode, op0);\n+\t      if (GET_MODE (op0) != V4SFmode)\n+\t\t{\n+\t\t  orig_op0 = op0;\n+\t\t  op0 = gen_reg_rtx (V4SFmode);\n+\t\t}\n \t      op1 = gen_lowpart (V4SFmode, op1);\n \t      emit_insn (gen_sse_loadups (op0, op1));\n+\t      if (orig_op0)\n+\t\temit_move_insn (orig_op0,\n+\t\t\t\tgen_lowpart (GET_MODE (orig_op0), op0));\n \t      return;\n             }\n "}, {"sha": "1fe52bbb598e60835c562ea90491eb2d785f3338", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"avx_loadups256\" } } */\n-/* { dg-final { scan-assembler \"sse_loadups\" } } */\n+/* { dg-final { scan-assembler-not \"(avx_loadups256|vmovups\\[^\\n\\r]*movv8sf_internal)\" } } */\n+/* { dg-final { scan-assembler \"(sse_loadups|movv4sf_internal)\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "933f265eed53a1084656091f14e19e82439d9864", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -10,6 +10,6 @@ avx_test (char **cp, char **ep)\n     *ap++ = *cp++;\n }\n \n-/* { dg-final { scan-assembler-not \"avx_loaddqu256\" } } */\n-/* { dg-final { scan-assembler \"sse2_loaddqu\" } } */\n+/* { dg-final { scan-assembler-not \"(avx_loaddqu256|vmovdqu\\[^\\n\\r]*movv32qi_internal)\" } } */\n+/* { dg-final { scan-assembler \"(sse2_loaddqu|vmovdqu\\[^\\n\\r]*movv16qi_internal)\" } } */\n /* { dg-final { scan-assembler \"vinsert.128\" } } */"}, {"sha": "fe66e0b1713cb4c4656f983bdc6f909d032c427b", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"avx_loadupd256\" } } */\n-/* { dg-final { scan-assembler \"sse2_loadupd\" } } */\n+/* { dg-final { scan-assembler-not \"(avx_loadupd256|vmovupd\\[^\\n\\r]*movv4df_internal)\" } } */\n+/* { dg-final { scan-assembler \"(sse2_loadupd|vmovupd\\[^\\n\\r]*movv2df_internal)\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "1d35ef57b48d3261f2b7f9fb7e437b50f0fe090e", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     b[i] = a[i+3] * 2;\n }\n \n-/* { dg-final { scan-assembler \"avx_loadups256\" } } */\n-/* { dg-final { scan-assembler-not \"sse_loadups\" } } */\n+/* { dg-final { scan-assembler \"(avx_loadups256|vmovups\\[^\\n\\r]*movv8sf_internal)\" } } */\n+/* { dg-final { scan-assembler-not \"(sse_loadups|vmovups\\[^\\n\\r]*movv4sf_internal)\" } } */\n /* { dg-final { scan-assembler-not \"vinsertf128\" } } */"}, {"sha": "1d99b4caa5b0981419d997cf3d3a4981393cdf04", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_1.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,15 +9,11 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_1.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56 } } */"}, {"sha": "e10110006f3afc13c626efc6199e960e43f32714", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,11 +9,11 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_2.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56 } } */"}, {"sha": "f099e25f8edb7f4ee79e740510a7e17761ca0f9e", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_3.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,14 +9,10 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_3.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub231pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */"}, {"sha": "969f31c7f3545d30733c36acf70922d1769ffee1", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,10 +9,10 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_4.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */"}, {"sha": "85ccdd0da44419f26f9f13c684dea24cda97fee2", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,11 +9,11 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_5.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56 } } */"}, {"sha": "019ed9ad0283e19f476d91f9d9885a58a109aaa4", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_6.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -9,11 +9,11 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n \n #include \"l_fma_6.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+pd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+pd\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+sd\" 56 } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+sd\" 56 } } */"}, {"sha": "d1913d7683f78043c4e1ff8159b96f1451c3a74f", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_1.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,14 +8,10 @@\n \n #include \"l_fma_1.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub231ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n /* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */"}, {"sha": "5e0142545c8618baf177b8d1fc831cfe52ac9664", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,11 +8,11 @@\n \n #include \"l_fma_2.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120 } } */"}, {"sha": "7b9e3f54528353ec8b780b9f983ac4d4c006356b", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_3.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,15 +8,11 @@\n \n #include \"l_fma_3.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120 } } */"}, {"sha": "cc675c14aae471915f354b1ba6136f48cd990d62", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_4.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,11 +8,11 @@\n \n #include \"l_fma_4.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120 } } */"}, {"sha": "ac0b361475ad47e46fa57d06a593521088ef52f5", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_5.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,11 +8,11 @@\n \n #include \"l_fma_5.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120 } } */"}, {"sha": "c84ac1196b427e805d56a16e72d09bff26a08f4f", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_6.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c?ref=1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "patch": "@@ -8,11 +8,11 @@\n \n #include \"l_fma_6.h\"\n \n-/* { dg-final { scan-assembler-times \"vfmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ps\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ps\" 8 } } */\n /* { dg-final { scan-assembler-times \"vfmadd\\[123\\]+ss\" 120 } } */\n-/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[123\\]+ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[123\\]+ss\" 120 } } */"}]}