{"sha": "cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzMGQ5MzJkNDEzMGYwOTU3NGZlMWJkYzU5N2E3ZmQ1YTliYTJlNQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2019-01-25T22:13:43Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2019-01-25T22:13:43Z"}, "message": "2019-01-25  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/888846\n\t* ira.c (process_set_for_memref_referenced_p): New.\n\t(memref_referenced_p): Add new param.  Use\n\tprocess_set_for_memref_referenced_p.  Add new switch cases.\n\t(memref_used_between_p): Pass new arg to memref_referenced_p.\n\nFrom-SVN: r268280", "tree": {"sha": "7e712be80bf2df74158844e0bb82cf215fc71cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e712be80bf2df74158844e0bb82cf215fc71cf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6edee4b3d3a2c970eee897443c9b580ed5d8226b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edee4b3d3a2c970eee897443c9b580ed5d8226b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edee4b3d3a2c970eee897443c9b580ed5d8226b"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "88293be0c0a0810f8664b30160e18dd90e47433c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "patch": "@@ -1,3 +1,11 @@\n+2019-01-25  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/888846\n+\t* ira.c (process_set_for_memref_referenced_p): New.\n+\t(memref_referenced_p): Add new param.  Use\n+\tprocess_set_for_memref_referenced_p.  Add new switch cases.\n+\t(memref_used_between_p): Pass new arg to memref_referenced_p.\n+\n 2019-01-25  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/88469"}, {"sha": "fd481d6e0e2f7a8e4c8f11573d6b94238ee051f0", "filename": "gcc/ira.c", "status": "modified", "additions": 65, "deletions": 24, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=cc30d932d4130f09574fe1bdc597a7fd5a9ba2e5", "patch": "@@ -3140,10 +3140,30 @@ equiv_init_movable_p (rtx x, int regno)\n   return 1;\n }\n \n-/* TRUE if X references a memory location that would be affected by a store\n-   to MEMREF.  */\n-static int\n-memref_referenced_p (rtx memref, rtx x)\n+static bool memref_referenced_p (rtx memref, rtx x, bool read_p);\n+\n+/* Auxiliary function for memref_referenced_p.  Process setting X for\n+   MEMREF store.  */\n+static bool\n+process_set_for_memref_referenced_p (rtx memref, rtx x)\n+{\n+  /* If we are setting a MEM, it doesn't count (its address does), but any\n+     other SET_DEST that has a MEM in it is referencing the MEM.  */\n+  if (MEM_P (x))\n+    {\n+      if (memref_referenced_p (memref, XEXP (x, 0), true))\n+\treturn true;\n+    }\n+  else if (memref_referenced_p (memref, x, false))\n+    return true;\n+  \n+  return false;\n+}\n+\n+/* TRUE if X references a memory location (as a read if READ_P) that\n+   would be affected by a store to MEMREF.  */\n+static bool\n+memref_referenced_p (rtx memref, rtx x, bool read_p)\n {\n   int i, j;\n   const char *fmt;\n@@ -3159,30 +3179,51 @@ memref_referenced_p (rtx memref, rtx x)\n     case CC0:\n     case HIGH:\n     case LO_SUM:\n-      return 0;\n+      return false;\n \n     case REG:\n       return (reg_equiv[REGNO (x)].replacement\n \t      && memref_referenced_p (memref,\n-\t\t\t\t      reg_equiv[REGNO (x)].replacement));\n+\t\t\t\t      reg_equiv[REGNO (x)].replacement, read_p));\n \n     case MEM:\n-      if (true_dependence (memref, VOIDmode, x))\n-\treturn 1;\n+      /* Memory X might have another effective type than MEMREF.  */\n+      if (read_p || true_dependence (memref, VOIDmode, x))\n+\treturn true;\n       break;\n \n     case SET:\n-      /* If we are setting a MEM, it doesn't count (its address does), but any\n-\t other SET_DEST that has a MEM in it is referencing the MEM.  */\n-      if (MEM_P (SET_DEST (x)))\n-\t{\n-\t  if (memref_referenced_p (memref, XEXP (SET_DEST (x), 0)))\n-\t    return 1;\n-\t}\n-      else if (memref_referenced_p (memref, SET_DEST (x)))\n-\treturn 1;\n+      if (process_set_for_memref_referenced_p (memref, SET_DEST (x)))\n+\treturn true;\n \n-      return memref_referenced_p (memref, SET_SRC (x));\n+      return memref_referenced_p (memref, SET_SRC (x), true);\n+\n+    case CLOBBER:\n+    case CLOBBER_HIGH:\n+      if (process_set_for_memref_referenced_p (memref, XEXP (x, 0)))\n+\treturn true;\n+\n+      return false;\n+\n+    case PRE_DEC:\n+    case POST_DEC:\n+    case PRE_INC:\n+    case POST_INC:\n+      if (process_set_for_memref_referenced_p (memref, XEXP (x, 0)))\n+\treturn true;\n+\n+      return memref_referenced_p (memref, XEXP (x, 0), true);\n+      \n+    case POST_MODIFY:\n+    case PRE_MODIFY:\n+      /* op0 = op0 + op1 */\n+      if (process_set_for_memref_referenced_p (memref, XEXP (x, 0)))\n+\treturn true;\n+\n+      if (memref_referenced_p (memref, XEXP (x, 0), true))\n+\treturn true;\n+\n+      return memref_referenced_p (memref, XEXP (x, 1), true);\n \n     default:\n       break;\n@@ -3193,17 +3234,17 @@ memref_referenced_p (rtx memref, rtx x)\n     switch (fmt[i])\n       {\n       case 'e':\n-\tif (memref_referenced_p (memref, XEXP (x, i)))\n-\t  return 1;\n+\tif (memref_referenced_p (memref, XEXP (x, i), read_p))\n+\t  return true;\n \tbreak;\n       case 'E':\n \tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  if (memref_referenced_p (memref, XVECEXP (x, i, j)))\n-\t    return 1;\n+\t  if (memref_referenced_p (memref, XVECEXP (x, i, j), read_p))\n+\t    return true;\n \tbreak;\n       }\n \n-  return 0;\n+  return false;\n }\n \n /* TRUE if some insn in the range (START, END] references a memory location\n@@ -3224,7 +3265,7 @@ memref_used_between_p (rtx memref, rtx_insn *start, rtx_insn *end)\n       if (!NONDEBUG_INSN_P (insn))\n \tcontinue;\n \n-      if (memref_referenced_p (memref, PATTERN (insn)))\n+      if (memref_referenced_p (memref, PATTERN (insn), false))\n \treturn 1;\n \n       /* Nonconst functions may access memory.  */"}]}