{"sha": "24eaa47a4602eb72be70eefa3622f7da76e0212e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlYWE0N2E0NjAyZWI3MmJlNzBlZWZhMzYyMmY3ZGE3NmUwMjEyZQ==", "commit": {"author": {"name": "Kenneth Block", "email": "block@zk3.dec.com", "date": "2000-04-28T22:22:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-04-28T22:22:22Z"}, "message": "* libiberty/cplus-dem.c\n        (libiberty_demanglers): new table for demangle styles\n        (cplus_demangle_set_style): New function for setting style\n        (cplus_demangle_name_to_style): New function to translate name\n        * include/demangle.h\n        (libiberty_demanglers): new table for different styles\n        (cplus_demangle_set_style): New function for setting style\n        (cplus_demangle_name_to_style): New function to translate name\n\nCo-Authored-By: Jason Merrill <jason@casey.cygnus.com>\n\nFrom-SVN: r33525", "tree": {"sha": "337c266bb462da8cbfb40786ddcc09afe574025b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337c266bb462da8cbfb40786ddcc09afe574025b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24eaa47a4602eb72be70eefa3622f7da76e0212e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24eaa47a4602eb72be70eefa3622f7da76e0212e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24eaa47a4602eb72be70eefa3622f7da76e0212e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24eaa47a4602eb72be70eefa3622f7da76e0212e/comments", "author": null, "committer": null, "parents": [{"sha": "34332678dad233a6d4ec0a85e47f6d65397def1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34332678dad233a6d4ec0a85e47f6d65397def1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34332678dad233a6d4ec0a85e47f6d65397def1c"}], "stats": {"total": 179, "additions": 150, "deletions": 29}, "files": [{"sha": "b905153da02bcd5367b235e022ba15027b31db58", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24eaa47a4602eb72be70eefa3622f7da76e0212e/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24eaa47a4602eb72be70eefa3622f7da76e0212e/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=24eaa47a4602eb72be70eefa3622f7da76e0212e", "patch": "@@ -1,3 +1,10 @@\n+2000-04-28  Kenneth Block  <block@zk3.dec.com>\n+\t    Jason Merrill  <jason@casey.cygnus.com>\n+\n+        * demangle.h (libiberty_demanglers): new table for different styles.\n+        (cplus_demangle_set_style): New function for setting style.\n+        (cplus_demangle_name_to_style): New function to translate name.\n+\n 2000-04-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* hashtab.h (hash_pointer): Declare."}, {"sha": "2ebc2a5043f4beacf721daea688602747b2e3e23", "filename": "include/demangle.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24eaa47a4602eb72be70eefa3622f7da76e0212e/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24eaa47a4602eb72be70eefa3622f7da76e0212e/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=24eaa47a4602eb72be70eefa3622f7da76e0212e", "patch": "@@ -78,6 +78,16 @@ extern enum demangling_styles\n #define HP_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_HP)\n #define EDG_DEMANGLING (((int) CURRENT_DEMANGLING_STYLE) & DMGL_EDG)\n \n+/* Provide information about the available demangle styles. This code is\n+   pulled from gdb into libiberty because it is useful to binutils also.  */\n+\n+extern struct demangler_engine\n+{\n+  char *demangling_style_name;\n+  enum demangling_styles demangling_style;\n+  char *demangling_style_doc;\n+} libiberty_demanglers[];\n+\n extern char *\n cplus_demangle PARAMS ((const char *mangled, int options));\n \n@@ -92,4 +102,9 @@ cplus_mangle_opname PARAMS ((const char *opname, int options));\n extern void\n set_cplus_marker_for_demangling PARAMS ((int ch));\n \n+extern enum demangling_styles \n+cplus_demangle_set_style PARAMS ((enum demangling_styles style));\n+\n+extern enum demangling_styles \n+cplus_demangle_name_to_style PARAMS ((const char *name));\n #endif\t/* DEMANGLE_H */"}, {"sha": "994511e76515bad77eb2e8634fe1f303176a4c39", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24eaa47a4602eb72be70eefa3622f7da76e0212e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24eaa47a4602eb72be70eefa3622f7da76e0212e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=24eaa47a4602eb72be70eefa3622f7da76e0212e", "patch": "@@ -1,3 +1,10 @@\n+2000-04-28  Kenneth Block  <block@zk3.dec.com>\n+\t    Jason Merrill  <jason@casey.cygnus.com>\n+\n+        * cplus-dem.c (libiberty_demanglers): New table for demangle styles.\n+        (cplus_demangle_set_style): New function for setting style.\n+        (cplus_demangle_name_to_style): New function to translate name.\n+\n 2000-04-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* aclocal.m4: New file with new test libiberty_AC_FUNC_STRNCMP."}, {"sha": "4ea2c95832999f141e4b72282222015cfeb329b3", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 121, "deletions": 29, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24eaa47a4602eb72be70eefa3622f7da76e0212e/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24eaa47a4602eb72be70eefa3622f7da76e0212e/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=24eaa47a4602eb72be70eefa3622f7da76e0212e", "patch": "@@ -252,6 +252,49 @@ typedef enum type_kind_t\n   tk_real\n } type_kind_t;\n \n+struct demangler_engine libiberty_demanglers[] =\n+{\n+  {\n+    AUTO_DEMANGLING_STYLE_STRING,\n+      auto_demangling,\n+      \"Automatic selection based on executable\"\n+  }\n+  ,\n+  {\n+    GNU_DEMANGLING_STYLE_STRING,\n+      gnu_demangling,\n+      \"GNU (g++) style demangling\"\n+  }\n+  ,\n+  {\n+    LUCID_DEMANGLING_STYLE_STRING,\n+      lucid_demangling,\n+      \"Lucid (lcc) style demangling\"\n+  }\n+  ,\n+  {\n+    ARM_DEMANGLING_STYLE_STRING,\n+      arm_demangling,\n+      \"ARM style demangling\"\n+  }\n+  ,\n+  {\n+    HP_DEMANGLING_STYLE_STRING,\n+      hp_demangling,\n+      \"HP (aCC) style demangling\"\n+  }\n+  ,\n+  {\n+    EDG_DEMANGLING_STYLE_STRING,\n+      edg_demangling,\n+      \"EDG style demangling\"\n+  }\n+  ,\n+  {\n+    NULL, unknown_demangling, NULL\n+  }\n+};\n+\n #define STRING_EMPTY(str)\t((str) -> b == (str) -> p)\n #define PREPEND_BLANK(str)\t{if (!STRING_EMPTY(str)) \\\n     string_prepend(str, \" \");}\n@@ -733,6 +776,7 @@ cplus_demangle_opname (opname, result, options)\n   return ret;\n \n }\n+\n /* Takes operator name as e.g. \"++\" and returns mangled\n    operator name (e.g. \"postincrement_expr\"), or NULL if not found.\n \n@@ -758,6 +802,40 @@ cplus_mangle_opname (opname, options)\n   return (0);\n }\n \n+/* Add a routine to set the demangling style to be sure it is valid and\n+   allow for any demangler initialization that maybe necessary. */\n+\n+enum demangling_styles\n+cplus_demangle_set_style (style)\n+     enum demangling_styles style;\n+{\n+  struct demangler_engine *demangler = libiberty_demanglers; \n+\n+  for (; demangler->demangling_style != unknown_demangling; ++demangler)\n+    if (style == demangler->demangling_style)\n+      {\n+\tcurrent_demangling_style = style;\n+\treturn current_demangling_style;\n+      }\n+\n+  return unknown_demangling;\n+}\n+\n+/* Do string name to style translation */\n+\n+enum demangling_styles\n+cplus_demangle_name_to_style (name)\n+     const char *name;\n+{\n+  struct demangler_engine *demangler = libiberty_demanglers; \n+\n+  for (; demangler->demangling_style != unknown_demangling; ++demangler)\n+    if (strcmp (name, demangler->demangling_style_name) == 0)\n+      return demangler->demangling_style;\n+\n+  return unknown_demangling;\n+}\n+\n /* char *cplus_demangle (const char *mangled, int options)\n \n    If MANGLED is a mangled function name produced by GNU C++, then\n@@ -4421,16 +4499,43 @@ demangle_it (mangled_name)\n     }\n }\n \n+static void \n+print_demangler_list (stream)\n+     FILE *stream;\n+{\n+  struct demangler_engine *demangler; \n+\n+  fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n+  \n+  for (demangler = libiberty_demanglers + 1;\n+       demangler->demangling_style != unknown_demangling;\n+       ++demangler)\n+    fprintf (stream, \",%s\", demangler->demangling_style_name);\n+\n+  fprintf (stream, \"}\");\n+}\n+\n static void\n usage (stream, status)\n      FILE *stream;\n      int status;\n {\n   fprintf (stream, \"\\\n-Usage: %s [-_] [-n] [-s {gnu,lucid,arm,hp,edg}] [--strip-underscores]\\n\\\n-       [--no-strip-underscores] [--format={gnu,lucid,arm,hp,edg}]\\n\\\n-      [--help] [--version] [arg...]\\n\",\n+Usage: %s [-_] [-n] [--strip-underscores] [--no-strip-underscores] \\n\",\n \t   program_name);\n+\n+  fprintf (stream, \"\\\n+       [-s \");\n+  print_demangler_list (stream);\n+  fprintf (stream, \"]\\n\");\n+\n+  fprintf (stream, \"\\\n+       [--format \");\n+  print_demangler_list (stream);\n+  fprintf (stream, \"]\\n\");\n+\n+  fprintf (stream, \"\\\n+       [--help] [--version] [arg...]\\n\");\n   exit (status);\n }\n \n@@ -4553,32 +4658,19 @@ main (argc, argv)\n \t  flags |= DMGL_JAVA;\n \t  break;\n \tcase 's':\n-\t  if (strcmp (optarg, \"gnu\") == 0)\n-\t    {\n-\t      current_demangling_style = gnu_demangling;\n-\t    }\n-\t  else if (strcmp (optarg, \"lucid\") == 0)\n-\t    {\n-\t      current_demangling_style = lucid_demangling;\n-\t    }\n-\t  else if (strcmp (optarg, \"arm\") == 0)\n-\t    {\n-\t      current_demangling_style = arm_demangling;\n-\t    }\n-\t  else if (strcmp (optarg, \"hp\") == 0)\n-\t    {\n-\t      current_demangling_style = hp_demangling;\n-\t    }\n-          else if (strcmp (optarg, \"edg\") == 0)\n-            {\n-              current_demangling_style = edg_demangling;\n-            }\n-\t  else\n-\t    {\n-\t      fprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n-\t\t       program_name, optarg);\n-\t      return (1);\n-\t    }\n+\t  {\n+\t    enum demangling_styles style;\n+\n+\t    style = cplus_demangle_name_to_style (optarg);\n+\t    if (style == unknown_demangling)\n+\t      {\n+\t\tfprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n+\t\t\t program_name, optarg);\n+\t\treturn (1);\n+\t      }\n+\t    else\n+\t      cplus_demangle_set_style (style);\n+\t  }\n \t  break;\n \t}\n     }"}]}