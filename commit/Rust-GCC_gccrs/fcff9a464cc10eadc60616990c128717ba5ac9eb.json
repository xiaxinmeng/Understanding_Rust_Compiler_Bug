{"sha": "fcff9a464cc10eadc60616990c128717ba5ac9eb", "node_id": "C_kwDOANBUbNoAKGZjZmY5YTQ2NGNjMTBlYWRjNjA2MTY5OTBjMTI4NzE3YmE1YWM5ZWI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-23T16:25:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-29T03:02:11Z"}, "message": "c++: traits, array of unknown bound of incomplete\n\nMy r161129 changed check_trait_type to reject arrays of unknown bound of\nincomplete type, but I can't find a rationale for that, and now think it's\nwrong: the standard just requires that the type be \"complete, cv void, or an\narray of unknown bound.\"  I imagine that allowing arrays of unknown bound is\nbecause an array of unknown bound can't change from incomplete to complete\nlater in the translation unit, so there's no caching problem.\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (check_trait_type): Don't check completeness\n\tof element type of array of unknown bound.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/unary_trait_incomplete.C: Adjust.", "tree": {"sha": "3b8f54a03064c1778ddd5aed5c89900a88c54351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b8f54a03064c1778ddd5aed5c89900a88c54351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcff9a464cc10eadc60616990c128717ba5ac9eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcff9a464cc10eadc60616990c128717ba5ac9eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcff9a464cc10eadc60616990c128717ba5ac9eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcff9a464cc10eadc60616990c128717ba5ac9eb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b30a399ef561f6f37a2c08c830fdf3141bb504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b30a399ef561f6f37a2c08c830fdf3141bb504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b30a399ef561f6f37a2c08c830fdf3141bb504"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "377f61113c0d3d915c7db05d71376a63073a1a75", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcff9a464cc10eadc60616990c128717ba5ac9eb/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcff9a464cc10eadc60616990c128717ba5ac9eb/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=fcff9a464cc10eadc60616990c128717ba5ac9eb", "patch": "@@ -11978,8 +11978,7 @@ check_trait_type (tree type)\n     return (check_trait_type (TREE_VALUE (type))\n \t    && check_trait_type (TREE_CHAIN (type)));\n \n-  if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type)\n-      && COMPLETE_TYPE_P (TREE_TYPE (type)))\n+  if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type))\n     return true;\n \n   if (VOID_TYPE_P (type))"}, {"sha": "6c83279c030f73891fe891a470f5ddbe57ce4218", "filename": "gcc/testsuite/g++.dg/ext/unary_trait_incomplete.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcff9a464cc10eadc60616990c128717ba5ac9eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcff9a464cc10eadc60616990c128717ba5ac9eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C?ref=fcff9a464cc10eadc60616990c128717ba5ac9eb", "patch": "@@ -5,72 +5,72 @@ struct C { };\n \n bool nas1 = __has_nothrow_assign(I); // { dg-error \"incomplete type\" }\n bool nas2 = __has_nothrow_assign(C[]);\n-bool nas3 = __has_nothrow_assign(I[]); // { dg-error \"incomplete type\" }\n+bool nas3 = __has_nothrow_assign(I[]);\n bool nas4 = __has_nothrow_assign(void);\n bool nas5 = __has_nothrow_assign(const void);\n \n bool tas1 = __has_trivial_assign(I); // { dg-error \"incomplete type\" }\n bool tas2 = __has_trivial_assign(C[]);\n-bool tas3 = __has_trivial_assign(I[]); // { dg-error \"incomplete type\" }\n+bool tas3 = __has_trivial_assign(I[]);\n bool tas4 = __has_trivial_assign(void);\n bool tas5 = __has_trivial_assign(const void);\n \n bool nco1 = __has_nothrow_constructor(I); // { dg-error \"incomplete type\" }\n bool nco2 = __has_nothrow_constructor(C[]);\n-bool nco3 = __has_nothrow_constructor(I[]); // { dg-error \"incomplete type\" }\n+bool nco3 = __has_nothrow_constructor(I[]);\n bool nco4 = __has_nothrow_constructor(void);\n bool nco5 = __has_nothrow_constructor(const void);\n \n bool tco1 = __has_trivial_constructor(I); // { dg-error \"incomplete type\" }\n bool tco2 = __has_trivial_constructor(C[]);\n-bool tco3 = __has_trivial_constructor(I[]); // { dg-error \"incomplete type\" }\n+bool tco3 = __has_trivial_constructor(I[]);\n bool tco4 = __has_trivial_constructor(void);\n bool tco5 = __has_trivial_constructor(const void);\n \n bool ncp1 = __has_nothrow_copy(I); // { dg-error \"incomplete type\" }\n bool ncp2 = __has_nothrow_copy(C[]);\n-bool ncp3 = __has_nothrow_copy(I[]); // { dg-error \"incomplete type\" }\n+bool ncp3 = __has_nothrow_copy(I[]);\n bool ncp4 = __has_nothrow_copy(void);\n bool ncp5 = __has_nothrow_copy(const void);\n \n bool tcp1 = __has_trivial_copy(I); // { dg-error \"incomplete type\" }\n bool tcp2 = __has_trivial_copy(C[]);\n-bool tcp3 = __has_trivial_copy(I[]); // { dg-error \"incomplete type\" }\n+bool tcp3 = __has_trivial_copy(I[]);\n bool tcp4 = __has_trivial_copy(void);\n bool tcp5 = __has_trivial_copy(const void);\n \n bool vde1 = __has_virtual_destructor(I); // { dg-error \"incomplete type\" }\n bool vde2 = __has_virtual_destructor(C[]);\n-bool vde3 = __has_virtual_destructor(I[]); // { dg-error \"incomplete type\" }\n+bool vde3 = __has_virtual_destructor(I[]);\n bool vde4 = __has_virtual_destructor(void);\n bool vde5 = __has_virtual_destructor(const void);\n \n bool tde1 = __has_trivial_destructor(I); // { dg-error \"incomplete type\" }\n bool tde2 = __has_trivial_destructor(C[]);\n-bool tde3 = __has_trivial_destructor(I[]); // { dg-error \"incomplete type\" }\n+bool tde3 = __has_trivial_destructor(I[]);\n bool tde4 = __has_trivial_destructor(void);\n bool tde5 = __has_trivial_destructor(const void);\n \n bool abs1 = __is_abstract(I); // { dg-error \"incomplete type\" }\n bool abs2 = __is_abstract(C[]);\n-bool abs3 = __is_abstract(I[]); // { dg-error \"incomplete type\" }\n+bool abs3 = __is_abstract(I[]);\n bool abs4 = __is_abstract(void);\n bool abs5 = __is_abstract(const void);\n \n bool pod1 = __is_pod(I); // { dg-error \"incomplete type\" }\n bool pod2 = __is_pod(C[]);\n-bool pod3 = __is_pod(I[]); // { dg-error \"incomplete type\" }\n+bool pod3 = __is_pod(I[]);\n bool pod4 = __is_pod(void);\n bool pod5 = __is_pod(const void);\n \n bool emp1 = __is_empty(I); // { dg-error \"incomplete type\" }\n bool emp2 = __is_empty(C[]);\n-bool emp3 = __is_empty(I[]); // { dg-error \"incomplete type\" }\n+bool emp3 = __is_empty(I[]);\n bool emp4 = __is_empty(void);\n bool emp5 = __is_empty(const void);\n \n bool pol1 = __is_polymorphic(I); // { dg-error \"incomplete type\" }\n bool pol2 = __is_polymorphic(C[]);\n-bool pol3 = __is_polymorphic(I[]); // { dg-error \"incomplete type\" }\n+bool pol3 = __is_polymorphic(I[]);\n bool pol4 = __is_polymorphic(void);\n bool pol5 = __is_polymorphic(const void);"}]}