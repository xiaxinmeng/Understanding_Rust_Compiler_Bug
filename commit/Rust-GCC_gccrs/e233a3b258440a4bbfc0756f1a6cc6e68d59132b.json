{"sha": "e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzM2EzYjI1ODQ0MGE0YmJmYzA3NTZmMWE2Y2M2ZTY4ZDU5MTMyYg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-25T19:48:40Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-25T19:48:40Z"}, "message": "double-int.h (double_int_and): New.\n\n\t* double-int.h (double_int_and): New.\n\t* combine.c (try_combine): Clean up, use double_int_* and\n\timmed_double_int_const functions.\n\nFrom-SVN: r159842", "tree": {"sha": "b56860024c6450400eb54a4ddab72b811df1bca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56860024c6450400eb54a4ddab72b811df1bca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/comments", "author": null, "committer": null, "parents": [{"sha": "bc492e47c89a4f5c21bcbab7adcc2c897d48a761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc492e47c89a4f5c21bcbab7adcc2c897d48a761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc492e47c89a4f5c21bcbab7adcc2c897d48a761"}], "stats": {"total": 90, "additions": 26, "deletions": 64}, "files": [{"sha": "9476e77f74a1883bbeacc1670979b8e10e99ee20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "patch": "@@ -1,3 +1,9 @@\n+2010-05-25  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* double-int.h (double_int_and): New.\n+\t* combine.c (try_combine): Clean up, use double_int_* and\n+\timmed_double_int_const functions.\n+\n 2010-05-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_as_ld_jalr_reloc): Redirect grep stdout,"}, {"sha": "9809565a77c46983d700fd8aad482c4a4d304310", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 64, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "patch": "@@ -2595,74 +2595,20 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \n       if (offset >= 0\n \t  && (GET_MODE_BITSIZE (GET_MODE (SET_DEST (temp)))\n-\t      <= HOST_BITS_PER_WIDE_INT * 2))\n+\t      <= HOST_BITS_PER_DOUBLE_INT))\n \t{\n-\t  HOST_WIDE_INT mhi, ohi, ihi;\n-\t  HOST_WIDE_INT mlo, olo, ilo;\n+\t  double_int m, o, i;\n \t  rtx inner = SET_SRC (PATTERN (i3));\n \t  rtx outer = SET_SRC (temp);\n \n-\t  if (CONST_INT_P (outer))\n-\t    {\n-\t      olo = INTVAL (outer);\n-\t      ohi = olo < 0 ? -1 : 0;\n-\t    }\n-\t  else\n-\t    {\n-\t      olo = CONST_DOUBLE_LOW (outer);\n-\t      ohi = CONST_DOUBLE_HIGH (outer);\n-\t    }\n-\n-\t  if (CONST_INT_P (inner))\n-\t    {\n-\t      ilo = INTVAL (inner);\n-\t      ihi = ilo < 0 ? -1 : 0;\n-\t    }\n-\t  else\n-\t    {\n-\t      ilo = CONST_DOUBLE_LOW (inner);\n-\t      ihi = CONST_DOUBLE_HIGH (inner);\n-\t    }\n-\n-\t  if (width < HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      mlo = ((unsigned HOST_WIDE_INT) 1 << width) - 1;\n-\t      mhi = 0;\n-\t    }\n-\t  else if (width < HOST_BITS_PER_WIDE_INT * 2)\n-\t    {\n-\t      mhi = ((unsigned HOST_WIDE_INT) 1\n-\t\t     << (width - HOST_BITS_PER_WIDE_INT)) - 1;\n-\t      mlo = -1;\n-\t    }\n-\t  else\n-\t    {\n-\t      mlo = -1;\n-\t      mhi = -1;\n-\t    }\n-\n-\t  ilo &= mlo;\n-\t  ihi &= mhi;\n-\n-\t  if (offset >= HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      mhi = mlo << (offset - HOST_BITS_PER_WIDE_INT);\n-\t      mlo = 0;\n-\t      ihi = ilo << (offset - HOST_BITS_PER_WIDE_INT);\n-\t      ilo = 0;\n-\t    }\n-\t  else if (offset > 0)\n-\t    {\n-\t      mhi = (mhi << offset) | ((unsigned HOST_WIDE_INT) mlo\n-\t\t     \t\t       >> (HOST_BITS_PER_WIDE_INT - offset));\n-\t      mlo = mlo << offset;\n-\t      ihi = (ihi << offset) | ((unsigned HOST_WIDE_INT) ilo\n-\t\t     \t\t       >> (HOST_BITS_PER_WIDE_INT - offset));\n-\t      ilo = ilo << offset;\n-\t    }\n+\t  o = rtx_to_double_int (outer);\n+\t  i = rtx_to_double_int (inner);\n \n-\t  olo = (olo & ~mlo) | ilo;\n-\t  ohi = (ohi & ~mhi) | ihi;\n+\t  m = double_int_mask (width);\n+\t  i = double_int_and (i, m);\n+\t  m = double_int_lshift (m, offset, HOST_BITS_PER_DOUBLE_INT, false);\n+\t  i = double_int_lshift (i, offset, HOST_BITS_PER_DOUBLE_INT, false);\n+\t  o = double_int_ior (double_int_and (o, double_int_not (m)), i);\n \n \t  combine_merges++;\n \t  subst_insn = i3;\n@@ -2675,7 +2621,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t     resulting insn the new pattern for I3.  Then skip to where we\n \t     validate the pattern.  Everything was set up above.  */\n \t  SUBST (SET_SRC (temp),\n-\t\t immed_double_const (olo, ohi, GET_MODE (SET_DEST (temp))));\n+\t\t immed_double_int_const (o, GET_MODE (SET_DEST (temp))));\n \n \t  newpat = PATTERN (i2);\n "}, {"sha": "c13b112d496b5722e6de775f919a627a01aff38e", "filename": "gcc/double-int.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233a3b258440a4bbfc0756f1a6cc6e68d59132b/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "patch": "@@ -147,6 +147,16 @@ double_int_ior (double_int a, double_int b)\n   return a;\n }\n \n+/* Returns A & B.  */\n+\n+static inline double_int\n+double_int_and (double_int a, double_int b)\n+{\n+  a.low &= b.low;\n+  a.high &= b.high;\n+  return a;\n+}\n+\n /* Shift operations.  */\n double_int double_int_lshift (double_int, HOST_WIDE_INT, unsigned int, bool);\n double_int double_int_rshift (double_int, HOST_WIDE_INT, unsigned int, bool);"}]}