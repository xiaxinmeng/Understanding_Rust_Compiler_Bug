{"sha": "878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4Y2ZmYmQ5ZTZlMWIxMzhhNmUwZDM2MmU3YjI5YmMwYTI1OTk0MA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-31T09:25:47Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-04T08:06:13Z"}, "message": "Objective-C++ : Fix ICE in potential_constant_expression_1.\n\nWe cannot, as things stand, handle Objective-C tree codes in\nthe switch and deal with this by calling out to a function that\nhas a dummy version when Objective-C is not enabled.\n\nBecause of the way the logic works (with a fall through to a\n'sorry' in case of unhandled expressions), the function reports\ncases that are known to be unsuitable for constant exprs. The\ndummy function always reports 'false' and thus will fall through\nto the 'sorry'.\n\ngcc/c-family/ChangeLog:\n\n\t* c-objc.h (objc_non_constant_expr_p): New.\n\t* stub-objc.c (objc_non_constant_expr_p): New.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (potential_constant_expression_1): Handle\n\texpressions known to be non-constant for Objective-C.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_non_constant_expr_p): New.", "tree": {"sha": "68cbe595c0a38ade3813ac1e25e631f12998840e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68cbe595c0a38ade3813ac1e25e631f12998840e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "4577e4f1c7f570579a0063b6a32decd1f5a1ae0d", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "patch": "@@ -101,6 +101,7 @@ extern void objc_add_synthesize_declaration (location_t, tree);\n extern void objc_add_dynamic_declaration (location_t, tree);\n extern const char * objc_maybe_printable_name (tree, int);\n extern bool objc_is_property_ref (tree);\n+extern bool objc_non_constant_expr_p (tree);\n extern bool objc_string_ref_type_p (tree);\n extern void objc_check_format_arg (tree, tree);\n extern void objc_finish_function (void);"}, {"sha": "d017acfd6fe857ca5c2b491c4eef8672bf2947a3", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "patch": "@@ -331,6 +331,12 @@ objc_is_property_ref (tree ARG_UNUSED (node))\n   return 0;\n }\n \n+bool\n+objc_non_constant_expr_p (tree)\n+{\n+  return 0;\n+}\n+\n tree\n objc_maybe_build_component_ref (tree ARG_UNUSED (datum), tree ARG_UNUSED (component))\n {"}, {"sha": "b6f9c439a1794e67ef5309c4d8576a841b5b70c1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "patch": "@@ -8413,7 +8413,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return false;\n \n     default:\n-      if (objc_is_property_ref (t))\n+      if (objc_non_constant_expr_p (t))\n \treturn false;\n \n       sorry (\"unexpected AST of kind %s\", get_tree_code_name (TREE_CODE (t)));"}, {"sha": "c0d07ae9182ad8fa903155af43841971a69aec75", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cffbd9e6e1b138a6e0d362e7b29bc0a259940/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "patch": "@@ -1720,7 +1720,6 @@ objc_build_class_component_ref (tree class_name, tree property_ident)\n }\n \n \n-\n /* This is used because we don't want to expose PROPERTY_REF to the\n    C/C++ frontends.  Maybe we should!  */\n bool\n@@ -1732,6 +1731,21 @@ objc_is_property_ref (tree node)\n     return false;\n }\n \n+/* We use this to report tree codes that are known to be invalid in const-\n+   expression contexts.  */\n+bool\n+objc_non_constant_expr_p (tree node)\n+{\n+  switch (TREE_CODE (node))\n+    {\n+      default:\n+\treturn false;\n+      case MESSAGE_SEND_EXPR:\n+      case PROPERTY_REF:\n+\treturn true;\n+    }\n+}\n+\n /* This function builds a setter call for a PROPERTY_REF (real, for a\n    declared property, or artificial, for a dot-syntax accessor which\n    is not corresponding to a property).  'lhs' must be a PROPERTY_REF"}]}