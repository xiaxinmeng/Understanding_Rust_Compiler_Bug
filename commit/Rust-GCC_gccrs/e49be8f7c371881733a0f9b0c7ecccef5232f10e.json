{"sha": "e49be8f7c371881733a0f9b0c7ecccef5232f10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5YmU4ZjdjMzcxODgxNzMzYTBmOWIwYzdlY2NjZWY1MjMyZjEwZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-03-31T20:05:44Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-03-31T20:05:44Z"}, "message": "re PR fortran/38917 (Can't use DATA to initialize pointer to array to NULL())\n\n2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38917\n\t* expr.c (gfc_check_assign): Allow pointer components when\n\tchecking for NULL.\n\n\tPR fortran/38918\n\t* resolve.c (check_data_variable): Treat pointer arrays with\n\tscalars.\n\n2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38917\n\tPR fortran/38918\n\t* gfortran.dg/data_pointer_1.f90: New test.\n\nFrom-SVN: r145371", "tree": {"sha": "821da1a5b2c279999ca9eb0b101be73abc85c3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821da1a5b2c279999ca9eb0b101be73abc85c3ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49be8f7c371881733a0f9b0c7ecccef5232f10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49be8f7c371881733a0f9b0c7ecccef5232f10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49be8f7c371881733a0f9b0c7ecccef5232f10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49be8f7c371881733a0f9b0c7ecccef5232f10e/comments", "author": null, "committer": null, "parents": [{"sha": "bf0d171aead0443d546cf48d714ea84ecbb6ab91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0d171aead0443d546cf48d714ea84ecbb6ab91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0d171aead0443d546cf48d714ea84ecbb6ab91"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "0b9bc88fe20eacaec324d7c8d25b0d43e0f718a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e49be8f7c371881733a0f9b0c7ecccef5232f10e", "patch": "@@ -137,6 +137,16 @@\n \tAdd 2009 to copyright years.\n \t* trans.c (gfc_trans_code): Likewise on both counts.\n \n+2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38917\n+\t* expr.c (gfc_check_assign): Allow pointer components when\n+\tchecking for NULL.\n+\n+\tPR fortran/38918\n+\t* resolve.c (check_data_variable): Treat pointer arrays with\n+\tscalars.\n+\n 2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38915"}, {"sha": "233516ec51c15568f750dff6fc6056709e1b5643", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e49be8f7c371881733a0f9b0c7ecccef5232f10e", "patch": "@@ -2913,7 +2913,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \n   if (rvalue->expr_type == EXPR_NULL)\n     {  \n-      if (lvalue->symtree->n.sym->attr.pointer\n+      if (has_pointer && (ref == NULL || ref->next == NULL)\n \t  && lvalue->symtree->n.sym->attr.data)\n         return SUCCESS;\n       else"}, {"sha": "1fa1a79e23aa1418669e361852f548723035c111", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e49be8f7c371881733a0f9b0c7ecccef5232f10e", "patch": "@@ -9647,6 +9647,8 @@ check_data_variable (gfc_data_variable *var, locus *where)\n   mpz_t section_index[GFC_MAX_DIMENSIONS];\n   gfc_ref *ref;\n   gfc_array_ref *ar;\n+  gfc_symbol *sym;\n+  int has_pointer;\n \n   if (gfc_resolve_expr (var->expr) == FAILURE)\n     return FAILURE;\n@@ -9658,21 +9660,39 @@ check_data_variable (gfc_data_variable *var, locus *where)\n   if (e->expr_type != EXPR_VARIABLE)\n     gfc_internal_error (\"check_data_variable(): Bad expression\");\n \n-  if (e->symtree->n.sym->ns->is_block_data\n-      && !e->symtree->n.sym->attr.in_common)\n+  sym = e->symtree->n.sym;\n+\n+  if (sym->ns->is_block_data && !sym->attr.in_common)\n     {\n       gfc_error (\"BLOCK DATA element '%s' at %L must be in COMMON\",\n-\t\t e->symtree->n.sym->name, &e->symtree->n.sym->declared_at);\n+\t\t sym->name, &sym->declared_at);\n     }\n \n-  if (e->ref == NULL && e->symtree->n.sym->as)\n+  if (e->ref == NULL && sym->as)\n     {\n       gfc_error (\"DATA array '%s' at %L must be specified in a previous\"\n-\t\t \" declaration\", e->symtree->n.sym->name, where);\n+\t\t \" declaration\", sym->name, where);\n       return FAILURE;\n     }\n \n-  if (e->rank == 0)\n+  has_pointer = sym->attr.pointer;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    {\n+      if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n+\thas_pointer = 1;\n+\n+      if (has_pointer\n+\t    && ref->type == REF_ARRAY\n+\t    && ref->u.ar.type != AR_FULL)\n+\t  {\n+\t    gfc_error (\"DATA element '%s' at %L is a pointer and so must \"\n+\t\t\t\"be a full array\", sym->name, where);\n+\t    return FAILURE;\n+\t  }\n+    }\n+\n+  if (e->rank == 0 || has_pointer)\n     {\n       mpz_init_set_ui (size, 1);\n       ref = NULL;"}, {"sha": "132d026f2dfb5d85b125f0b1de4dad256e64bb82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e49be8f7c371881733a0f9b0c7ecccef5232f10e", "patch": "@@ -1,3 +1,9 @@\n+2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38917\n+\tPR fortran/38918\n+\t* gfortran.dg/data_pointer_1.f90: New test.\n+\n 2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38915"}, {"sha": "8f081474ca498f9b4b4fb0a7e403500373c53b69", "filename": "gcc/testsuite/gfortran.dg/data_pointer_1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_pointer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49be8f7c371881733a0f9b0c7ecccef5232f10e/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_pointer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_pointer_1.f90?ref=e49be8f7c371881733a0f9b0c7ecccef5232f10e", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! Test the fixes for PR38917 and 38918, in which the NULL values caused errors.\n+!\n+! Contributed by Dick Hendrickson  <dick.hendrickson@gmail.com>\n+!             and Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+      SUBROUTINE PF0009\n+!  PR38918\n+      TYPE  :: HAS_POINTER\n+        INTEGER, POINTER            :: PTR_S\n+      END TYPE HAS_POINTER\n+      TYPE (HAS_POINTER)  ::  PTR_ARRAY(5)\n+\n+      DATA PTR_ARRAY(1)%PTR_S  /NULL()/\n+\n+      end subroutine pf0009\n+\n+      SUBROUTINE PF0005\n+! PR38917\n+      REAL, SAVE, POINTER :: PTR1\n+      INTEGER, POINTER       :: PTR2(:,:,:)\n+      CHARACTER(LEN=1), SAVE, POINTER :: PTR3(:)\n+\n+      DATA  PTR1 / NULL() /\n+      DATA  PTR2 / NULL() /\n+      DATA  PTR3 / NULL() /\n+\n+      end subroutine pf0005\n+\n+! Tobias pointed out that this would cause an ICE rather than an error.\n+      subroutine tobias\n+      integer, pointer :: ptr(:)\n+      data ptr(1) /NULL()/  ! { dg-error \"must be a full array\" }\n+      end subroutine tobias\n+"}]}