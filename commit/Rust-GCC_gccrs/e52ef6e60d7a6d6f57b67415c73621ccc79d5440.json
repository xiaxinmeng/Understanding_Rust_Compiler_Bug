{"sha": "e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyZWY2ZTYwZDdhNmQ2ZjU3YjY3NDE1YzczNjIxY2NjNzlkNTQ0MA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-01-05T19:55:09Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-03-04T13:33:41Z"}, "message": "Add input_modes parameter to TARGET_MD_ASM_ADJUST hook\n\nIf TARGET_MD_ASM_ADJUST changes a mode of an input operand (which\nshould be ok as long as the hook itself as well as after_md_seq make up\nfor it), input_mode will contain stale information.\n\nIt might be tempting to fix this by removing input_mode altogether and\njust using GET_MODE (), but this will not work correctly with constants.\nSo add input_modes parameter and document that it should be updated\nwhenever inputs parameter is updated.\n\ngcc/ChangeLog:\n\n2021-01-05  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* cfgexpand.c (expand_asm_loc): Pass new parameter.\n\t(expand_asm_stmt): Likewise.\n\t* config/arm/aarch-common-protos.h (arm_md_asm_adjust): Add new\n\tparameter.\n\t* config/arm/aarch-common.c (arm_md_asm_adjust): Likewise.\n\t* config/arm/arm.c (thumb1_md_asm_adjust): Likewise.\n\t* config/cris/cris.c (cris_md_asm_adjust): Likewise.\n\t* config/i386/i386.c (ix86_md_asm_adjust): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_md_asm_adjust): Likewise.\n\t* config/nds32/nds32.c (nds32_md_asm_adjust): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_md_asm_adjust): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_md_asm_adjust): Likewise.\n\t* config/vax/vax.c (vax_md_asm_adjust): Likewise.\n\t* config/visium/visium.c (visium_md_asm_adjust): Likewise.\n\t* doc/tm.texi (md_asm_adjust): Likewise.\n\t* target.def (md_asm_adjust): Likewise.", "tree": {"sha": "748d8b9122bf5fc6a66e7ea0e7bb06dcfd8c4c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/748d8b9122bf5fc6a66e7ea0e7bb06dcfd8c4c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af60228addb5a8b6294d2ba9e81e134d359ca043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af60228addb5a8b6294d2ba9e81e134d359ca043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af60228addb5a8b6294d2ba9e81e134d359ca043"}], "stats": {"total": 121, "additions": 69, "deletions": 52}, "files": [{"sha": "a6b48d3e48f0f033f6c330c91c22e711a2ddf409", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -2880,6 +2880,7 @@ expand_asm_loc (tree string, int vol, location_t locus)\n       rtx asm_op, clob;\n       unsigned i, nclobbers;\n       auto_vec<rtx> input_rvec, output_rvec;\n+      auto_vec<machine_mode> input_mode;\n       auto_vec<const char *> constraints;\n       auto_vec<rtx> clobber_rvec;\n       HARD_REG_SET clobbered_regs;\n@@ -2889,9 +2890,8 @@ expand_asm_loc (tree string, int vol, location_t locus)\n       clobber_rvec.safe_push (clob);\n \n       if (targetm.md_asm_adjust)\n-\ttargetm.md_asm_adjust (output_rvec, input_rvec,\n-\t\t\t       constraints, clobber_rvec,\n-\t\t\t       clobbered_regs);\n+\ttargetm.md_asm_adjust (output_rvec, input_rvec, input_mode,\n+\t\t\t       constraints, clobber_rvec, clobbered_regs);\n \n       asm_op = body;\n       nclobbers = clobber_rvec.length ();\n@@ -3068,8 +3068,8 @@ expand_asm_stmt (gasm *stmt)\n       return;\n     }\n \n-  /* There are some legacy diagnostics in here, and also avoids a\n-     sixth parameger to targetm.md_asm_adjust.  */\n+  /* There are some legacy diagnostics in here, and also avoids an extra\n+     parameter to targetm.md_asm_adjust.  */\n   save_input_location s_i_l(locus);\n \n   unsigned noutputs = gimple_asm_noutputs (stmt);\n@@ -3420,9 +3420,9 @@ expand_asm_stmt (gasm *stmt)\n      the flags register.  */\n   rtx_insn *after_md_seq = NULL;\n   if (targetm.md_asm_adjust)\n-    after_md_seq = targetm.md_asm_adjust (output_rvec, input_rvec,\n-\t\t\t\t\t  constraints, clobber_rvec,\n-\t\t\t\t\t  clobbered_regs);\n+    after_md_seq\n+\t= targetm.md_asm_adjust (output_rvec, input_rvec, input_mode,\n+\t\t\t\t constraints, clobber_rvec, clobbered_regs);\n \n   /* Do not allow the hook to change the output and input count,\n      lest it mess up the operand numbering.  */"}, {"sha": "b6171e8668deb8104780fae55587c0514a5e6773", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -144,9 +144,9 @@ struct cpu_cost_table\n   const struct vector_cost_table vect;\n };\n \n-rtx_insn *\n-arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n-\t\t    vec<const char *> &constraints,\n-\t\t    vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs);\n+rtx_insn *arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n+\t\t\t     vec<machine_mode> & /*input_modes*/,\n+\t\t\t     vec<const char *> &constraints,\n+\t\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs);\n \n #endif /* GCC_AARCH_COMMON_PROTOS_H */"}, {"sha": "24711d5b4f77820c13aa225118d7599c0c5bc0d5", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -531,9 +531,10 @@ arm_mac_accumulator_is_mul_result (rtx producer, rtx consumer)\n    We implement asm flag outputs.  */\n \n rtx_insn *\n-arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n-\t\t    vec<const char *> &constraints,\n-\t\t    vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n+arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n+\t\t   vec<machine_mode> & /*input_modes*/,\n+\t\t   vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n+\t\t   HARD_REG_SET & /*clobbered_regs*/)\n {\n   bool saw_asm_flag = false;\n "}, {"sha": "49635bc2d86edf35d216ad05bfacbad90780dedf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -328,9 +328,10 @@ static unsigned int arm_hard_regno_nregs (unsigned int, machine_mode);\n static bool arm_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool arm_modes_tieable_p (machine_mode, machine_mode);\n static HOST_WIDE_INT arm_constant_alignment (const_tree, HOST_WIDE_INT);\n-static rtx_insn * thumb1_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n-\t\t\t\t\tvec<const char *> &, vec<rtx> &,\n-\t\t\t\t\tHARD_REG_SET &);\n+static rtx_insn *thumb1_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n+\t\t\t\t       vec<machine_mode> &,\n+\t\t\t\t       vec<const char *> &, vec<rtx> &,\n+\t\t\t\t       HARD_REG_SET &);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -33915,9 +33916,10 @@ arm_run_selftests (void)\n    Unlike the arm version, we do NOT implement asm flag outputs.  */\n \n rtx_insn *\n-thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n-\t\t      vec<const char *> &constraints,\n-\t\t      vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n+thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n+\t\t      vec<machine_mode> & /*input_modes*/,\n+\t\t      vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n+\t\t      HARD_REG_SET & /*clobbered_regs*/)\n {\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n     if (strncmp (constraints[i], \"=@cc\", 4) == 0)"}, {"sha": "42f0a529f652fbe153813a90f4eac5ca8ded6afb", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -150,7 +150,7 @@ static rtx cris_function_incoming_arg (cumulative_args_t,\n static void cris_function_arg_advance (cumulative_args_t,\n \t\t\t\t       const function_arg_info &);\n static rtx_insn *cris_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n-\t\t\t\t     vec<const char *> &,\n+\t\t\t\t     vec<machine_mode> &, vec<const char *> &,\n \t\t\t\t     vec<rtx> &, HARD_REG_SET &);\n \n static void cris_option_override (void);\n@@ -3501,8 +3501,9 @@ cris_function_arg_advance (cumulative_args_t ca_v,\n \n static rtx_insn *\n cris_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &inputs,\n-\t\t    vec<const char *> &constraints,\n-\t\t    vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+\t\t    vec<machine_mode> & /*input_modes*/,\n+\t\t    vec<const char *> &constraints, vec<rtx> &clobbers,\n+\t\t    HARD_REG_SET &clobbered_regs)\n {\n   /* For the time being, all asms clobber condition codes.\n      Revisit when there's a reasonable use for inputs/outputs"}, {"sha": "2603333f87b4df48b307683dc2353592586fc250", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -21373,9 +21373,10 @@ ix86_c_mode_for_suffix (char suffix)\n    with the old cc0-based compiler.  */\n \n static rtx_insn *\n-ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n-\t\t    vec<const char *> &constraints,\n-\t\t    vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n+\t\t    vec<machine_mode> & /*input_modes*/,\n+\t\t    vec<const char *> &constraints, vec<rtx> &clobbers,\n+\t\t    HARD_REG_SET &clobbered_regs)\n {\n   bool saw_asm_flag = false;\n "}, {"sha": "c1c2e6e3b5cdf589cc6458d245ac650e4fcd902a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -2847,9 +2847,10 @@ mn10300_conditional_register_usage (void)\n    with the old cc0-based compiler.  */\n \n static rtx_insn *\n-mn10300_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n-\t\t       vec<const char *> &/*constraints*/,\n-\t\t       vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+mn10300_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n+\t\t       vec<machine_mode> & /*input_modes*/,\n+\t\t       vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n+\t\t       HARD_REG_SET &clobbered_regs)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, CC_REG));\n   SET_HARD_REG_BIT (clobbered_regs, CC_REG);"}, {"sha": "7217d7879b67862e5daf554f33a2496a34edf237", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -4197,6 +4197,7 @@ nds32_option_override (void)\n static rtx_insn *\n nds32_md_asm_adjust (vec<rtx> &outputs ATTRIBUTE_UNUSED,\n \t\t     vec<rtx> &inputs ATTRIBUTE_UNUSED,\n+\t\t     vec<machine_mode> &input_modes ATTRIBUTE_UNUSED,\n \t\t     vec<const char *> &constraints ATTRIBUTE_UNUSED,\n \t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n {"}, {"sha": "eb3bea497bfdba33494dbdd5b530923927100330", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -155,7 +155,7 @@ static bool pdp11_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n static int pdp11_addr_cost (rtx, machine_mode, addr_space_t, bool);\n static int pdp11_insn_cost (rtx_insn *insn, bool speed);\n static rtx_insn *pdp11_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n-\t\t\t\t      vec<const char *> &,\n+\t\t\t\t      vec<machine_mode> &, vec<const char *> &,\n \t\t\t\t      vec<rtx> &, HARD_REG_SET &);\n static bool pdp11_return_in_memory (const_tree, const_tree);\n static rtx pdp11_function_value (const_tree, const_tree, bool);\n@@ -2139,9 +2139,10 @@ pdp11_cmp_length (rtx *operands, int words)\n    compiler.  */\n \n static rtx_insn *\n-pdp11_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n-\t\t     vec<const char *> &/*constraints*/,\n-\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+pdp11_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n+\t\t     vec<machine_mode> & /*input_modes*/,\n+\t\t     vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n+\t\t     HARD_REG_SET &clobbered_regs)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, CC_REGNUM));\n   SET_HARD_REG_BIT (clobbered_regs, CC_REGNUM);"}, {"sha": "cf8e5d820f32c97e4c860b46d17cb512b7747c37", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -3412,9 +3412,10 @@ rs6000_builtin_mask_calculate (void)\n    not such a great idea.  */\n \n static rtx_insn *\n-rs6000_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n-\t\t      vec<const char *> &/*constraints*/,\n-\t\t      vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+rs6000_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n+\t\t      vec<machine_mode> & /*input_modes*/,\n+\t\t      vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n+\t\t      HARD_REG_SET &clobbered_regs)\n {\n   clobbers.safe_push (gen_rtx_REG (SImode, CA_REGNO));\n   SET_HARD_REG_BIT (clobbered_regs, CA_REGNO);"}, {"sha": "726c371913822717ce63eb3aea74e740c93cb6c7", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -56,7 +56,7 @@ static int vax_address_cost (rtx, machine_mode, addr_space_t, bool);\n static bool vax_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n static machine_mode vax_cc_modes_compatible (machine_mode, machine_mode);\n static rtx_insn *vax_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n-\t\t\t\t    vec<const char *> &,\n+\t\t\t\t    vec<machine_mode> &, vec<const char *> &,\n \t\t\t\t    vec<rtx> &, HARD_REG_SET &);\n static rtx vax_function_arg (cumulative_args_t, const function_arg_info &);\n static void vax_function_arg_advance (cumulative_args_t,\n@@ -1174,6 +1174,7 @@ vax_cc_modes_compatible (machine_mode m1, machine_mode m2)\n static rtx_insn *\n vax_md_asm_adjust (vec<rtx> &outputs ATTRIBUTE_UNUSED,\n \t\t   vec<rtx> &inputs ATTRIBUTE_UNUSED,\n+\t\t   vec<machine_mode> &input_modes ATTRIBUTE_UNUSED,\n \t\t   vec<const char *> &constraints ATTRIBUTE_UNUSED,\n \t\t   vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n {"}, {"sha": "7eb22485297b6d12be113374cbbe271a19c9cf9d", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -188,8 +188,9 @@ static bool visium_frame_pointer_required (void);\n static tree visium_build_builtin_va_list (void);\n \n static rtx_insn *visium_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n-\t\t\t\t       vec<const char *> &,\n-\t\t\t\t       vec<rtx> &, HARD_REG_SET &);\n+\t\t\t\t       vec<machine_mode> &,\n+\t\t\t\t       vec<const char *> &, vec<rtx> &,\n+\t\t\t\t       HARD_REG_SET &);\n \n static bool visium_legitimate_constant_p (machine_mode, rtx);\n \n@@ -791,9 +792,10 @@ visium_conditional_register_usage (void)\n    the original cc0-based compiler.  */\n \n static rtx_insn *\n-visium_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n-\t\t      vec<const char *> &/*constraints*/,\n-\t\t      vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+visium_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n+\t\t      vec<machine_mode> & /*input_modes*/,\n+\t\t      vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n+\t\t      HARD_REG_SET &clobbered_regs)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, FLAGS_REGNUM));\n   SET_HARD_REG_BIT (clobbered_regs, FLAGS_REGNUM);"}, {"sha": "b272fa4806d08bea1783da74c7ce89326f0b4721", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -11491,15 +11491,17 @@ from shared libraries (DLLs).\n You need not define this macro if it would always evaluate to zero.\n @end defmac\n \n-@deftypefn {Target Hook} {rtx_insn *} TARGET_MD_ASM_ADJUST (vec<rtx>& @var{outputs}, vec<rtx>& @var{inputs}, vec<const char *>& @var{constraints}, vec<rtx>& @var{clobbers}, HARD_REG_SET& @var{clobbered_regs})\n+@deftypefn {Target Hook} {rtx_insn *} TARGET_MD_ASM_ADJUST (vec<rtx>& @var{outputs}, vec<rtx>& @var{inputs}, vec<machine_mode>& @var{input_modes}, vec<const char *>& @var{constraints}, vec<rtx>& @var{clobbers}, HARD_REG_SET& @var{clobbered_regs})\n This target hook may add @dfn{clobbers} to @var{clobbers} and\n @var{clobbered_regs} for any hard regs the port wishes to automatically\n clobber for an asm.  The @var{outputs} and @var{inputs} may be inspected\n to avoid clobbering a register that is already used by the asm.\n \n-It may modify the @var{outputs}, @var{inputs}, and @var{constraints}\n-as necessary for other pre-processing.  In this case the return value is\n-a sequence of insns to emit after the asm.\n+It may modify the @var{outputs}, @var{inputs}, @var{input_modes}, and\n+@var{constraints} as necessary for other pre-processing.  In this case the\n+return value is a sequence of insns to emit after the asm.  Note that\n+changes to @var{inputs} must be accompanied by the corresponding changes\n+to @var{input_modes}.\n @end deftypefn\n \n @defmac MATH_LIBRARY"}, {"sha": "d7b94bd8e5d7ff17dff855a63a97adef32c14792", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52ef6e60d7a6d6f57b67415c73621ccc79d5440/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e52ef6e60d7a6d6f57b67415c73621ccc79d5440", "patch": "@@ -4172,12 +4172,15 @@ DEFHOOK\n clobber for an asm.  The @var{outputs} and @var{inputs} may be inspected\\n\\\n to avoid clobbering a register that is already used by the asm.\\n\\\n \\n\\\n-It may modify the @var{outputs}, @var{inputs}, and @var{constraints}\\n\\\n-as necessary for other pre-processing.  In this case the return value is\\n\\\n-a sequence of insns to emit after the asm.\",\n+It may modify the @var{outputs}, @var{inputs}, @var{input_modes}, and\\n\\\n+@var{constraints} as necessary for other pre-processing.  In this case the\\n\\\n+return value is a sequence of insns to emit after the asm.  Note that\\n\\\n+changes to @var{inputs} must be accompanied by the corresponding changes\\n\\\n+to @var{input_modes}.\",\n  rtx_insn *,\n- (vec<rtx>& outputs, vec<rtx>& inputs, vec<const char *>& constraints,\n-  vec<rtx>& clobbers, HARD_REG_SET& clobbered_regs),\n+ (vec<rtx>& outputs, vec<rtx>& inputs, vec<machine_mode>& input_modes,\n+  vec<const char *>& constraints, vec<rtx>& clobbers,\n+  HARD_REG_SET& clobbered_regs),\n  NULL)\n \n /* This target hook allows the backend to specify a calling convention"}]}