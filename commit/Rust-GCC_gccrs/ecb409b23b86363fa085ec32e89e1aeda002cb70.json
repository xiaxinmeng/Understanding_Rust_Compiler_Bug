{"sha": "ecb409b23b86363fa085ec32e89e1aeda002cb70", "node_id": "C_kwDOANBUbNoAKGVjYjQwOWIyM2I4NjM2M2ZhMDg1ZWMzMmU4OWUxYWVkYTAwMmNiNzA", "commit": {"author": {"name": "Raiki Tamura", "email": "tamaron1203@gmail.com", "date": "2022-12-15T17:27:59Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:54Z"}, "message": "gccrs: add math intrinsics\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-builtins.cc (BuiltinsContext::setup_math_fns): New functions.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/torture/intrinsics-math.rs: New test.", "tree": {"sha": "63338a4f0d6ad9020cc439321e0b0e9bca687f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63338a4f0d6ad9020cc439321e0b0e9bca687f65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecb409b23b86363fa085ec32e89e1aeda002cb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb409b23b86363fa085ec32e89e1aeda002cb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb409b23b86363fa085ec32e89e1aeda002cb70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb409b23b86363fa085ec32e89e1aeda002cb70/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064bbd0fe10437ab0b2b5a386c77c9e285dda760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064bbd0fe10437ab0b2b5a386c77c9e285dda760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064bbd0fe10437ab0b2b5a386c77c9e285dda760"}], "stats": {"total": 295, "additions": 291, "deletions": 4}, "files": [{"sha": "0517a9aeaf0f9c2c2e2a4bee76e01f0accd9df47", "filename": "gcc/rust/backend/rust-builtins.cc", "status": "modified", "additions": 118, "deletions": 4, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb409b23b86363fa085ec32e89e1aeda002cb70/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb409b23b86363fa085ec32e89e1aeda002cb70/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.cc?ref=ecb409b23b86363fa085ec32e89e1aeda002cb70", "patch": "@@ -59,13 +59,127 @@ BuiltinsContext::setup_overflow_fns ()\n void\n BuiltinsContext::setup_math_fns ()\n {\n-  tree math_function_type_f32\n+  tree fn_type_f32_to_f32\n     = build_function_type_list (float_type_node, float_type_node, NULL_TREE);\n+  tree fn_type_f64_to_f64\n+    = build_function_type_list (double_type_node, double_type_node, NULL_TREE);\n+  tree fn_type_f32_f32_to_f32\n+    = build_function_type_list (float_type_node, float_type_node,\n+\t\t\t\tfloat_type_node, NULL_TREE);\n+  tree fn_type_f64_f64_to_f64\n+    = build_function_type_list (double_type_node, double_type_node,\n+\t\t\t\tdouble_type_node, NULL_TREE);\n+  tree fn_type_f32_i32_to_f32\n+    = build_function_type_list (float_type_node, float_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree fn_type_f64_i32_to_f64\n+    = build_function_type_list (double_type_node, double_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n \n-  define_builtin (\"sinf32\", BUILT_IN_SINF, \"__builtin_sinf\", \"sinf\",\n-\t\t  math_function_type_f32, builtin_const);\n   define_builtin (\"sqrtf32\", BUILT_IN_SQRTF, \"__builtin_sqrtf\", \"sqrtf\",\n-\t\t  math_function_type_f32, builtin_const);\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"sqrtf64\", BUILT_IN_SQRT, \"__builtin_sqrt\", \"sqrt\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"powif32\", BUILT_IN_POWIF, \"__builtin_powif\", \"powif\",\n+\t\t  fn_type_f32_i32_to_f32, builtin_const);\n+  define_builtin (\"powif64\", BUILT_IN_POWI, \"__builtin_powi\", \"powi\",\n+\t\t  fn_type_f64_i32_to_f64, builtin_const);\n+\n+  define_builtin (\"sinf32\", BUILT_IN_SINF, \"__builtin_sinf\", \"sinf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"sinf64\", BUILT_IN_SIN, \"__builtin_sin\", \"sin\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"cosf32\", BUILT_IN_COSF, \"__builtin_cosf\", \"cosf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"cosf64\", BUILT_IN_COS, \"__builtin_cos\", \"cos\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"powf32\", BUILT_IN_POWF, \"__builtin_powf\", \"powf\",\n+\t\t  fn_type_f32_f32_to_f32, builtin_const);\n+  define_builtin (\"powf64\", BUILT_IN_POW, \"__builtin_pow\", \"pow\",\n+\t\t  fn_type_f64_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"expf32\", BUILT_IN_EXPF, \"__builtin_expf\", \"expf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"expf64\", BUILT_IN_EXP, \"__builtin_exp\", \"exp\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"exp2f32\", BUILT_IN_EXP2F, \"__builtin_exp2f\", \"exp2f\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"exp2f64\", BUILT_IN_EXP2, \"__builtin_exp2\", \"exp2\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"logf32\", BUILT_IN_LOGF, \"__builtin_logf\", \"logf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"logf64\", BUILT_IN_LOG, \"__builtin_log\", \"log\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"log10f32\", BUILT_IN_LOG10F, \"__builtin_log10f\", \"log10f\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"log10f64\", BUILT_IN_LOG10, \"__builtin_log10\", \"log10\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"log2f32\", BUILT_IN_LOG2F, \"__builtin_log2f\", \"log2f\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"log2f64\", BUILT_IN_LOG2, \"__builtin_log2\", \"log2\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"fmaf32\", BUILT_IN_FMAF, \"__builtin_fmaf\", \"fmaf\",\n+\t\t  fn_type_f32_f32_to_f32, builtin_const);\n+  define_builtin (\"fmaf64\", BUILT_IN_FMA, \"__builtin_fma\", \"fma\",\n+\t\t  fn_type_f64_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"fabsf32\", BUILT_IN_FABSF, \"__builtin_fabsf\", \"fabsf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"fabsf64\", BUILT_IN_FABS, \"__builtin_fabs\", \"fabs\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"minnumf32\", BUILT_IN_FMINF, \"__builtin_fminf\", \"fminf\",\n+\t\t  fn_type_f32_f32_to_f32, builtin_const);\n+  define_builtin (\"minnumf64\", BUILT_IN_FMIN, \"__builtin_fmin\", \"fmin\",\n+\t\t  fn_type_f64_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"maxnumf32\", BUILT_IN_FMAXF, \"__builtin_fmaxf\", \"fmaxf\",\n+\t\t  fn_type_f32_f32_to_f32, builtin_const);\n+  define_builtin (\"maxnumf64\", BUILT_IN_FMAX, \"__builtin_fmax\", \"fmax\",\n+\t\t  fn_type_f64_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"copysignf32\", BUILT_IN_COPYSIGNF, \"__builtin_copysignf\",\n+\t\t  \"copysignf\", fn_type_f32_f32_to_f32, builtin_const);\n+  define_builtin (\"copysignf64\", BUILT_IN_COPYSIGN, \"__builtin_copysign\",\n+\t\t  \"copysign\", fn_type_f64_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"floorf32\", BUILT_IN_FLOORF, \"__builtin_floorf\", \"floorf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"floorf64\", BUILT_IN_FLOOR, \"__builtin_floor\", \"floor\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"ceilf32\", BUILT_IN_CEILF, \"__builtin_ceilf\", \"ceilf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"ceilf64\", BUILT_IN_CEIL, \"__builtin_ceil\", \"ceil\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"truncf32\", BUILT_IN_TRUNCF, \"__builtin_truncf\", \"truncf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"truncf64\", BUILT_IN_TRUNC, \"__builtin_trunc\", \"trunc\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"rintf32\", BUILT_IN_RINTF, \"__builtin_rintf\", \"rintf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"rintf64\", BUILT_IN_RINT, \"__builtin_rint\", \"rint\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"nearbyintf32\", BUILT_IN_NEARBYINTF, \"__builtin_nearbyintf\",\n+\t\t  \"nearbyintf\", fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"nearbyintf64\", BUILT_IN_NEARBYINT, \"__builtin_nearbyint\",\n+\t\t  \"nearbyint\", fn_type_f64_to_f64, builtin_const);\n+\n+  define_builtin (\"roundf32\", BUILT_IN_ROUNDF, \"__builtin_roundf\", \"roundf\",\n+\t\t  fn_type_f32_to_f32, builtin_const);\n+  define_builtin (\"roundf64\", BUILT_IN_ROUND, \"__builtin_round\", \"round\",\n+\t\t  fn_type_f64_to_f64, builtin_const);\n }\n \n void"}, {"sha": "fb329baafdd5a69f61d5f793170788e41ca23089", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-math.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb409b23b86363fa085ec32e89e1aeda002cb70/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-math.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb409b23b86363fa085ec32e89e1aeda002cb70/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-math.rs?ref=ecb409b23b86363fa085ec32e89e1aeda002cb70", "patch": "@@ -0,0 +1,173 @@\n+// { dg-additional-options -fdump-tree-original }\n+\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    pub fn sqrtf32(x: f32) -> f32;\n+    pub fn sqrtf64(x: f64) -> f64;\n+\n+    pub fn sinf32(x: f32) -> f32;\n+    pub fn sinf64(x: f64) -> f64;\n+\n+    pub fn cosf32(x: f32) -> f32;\n+    pub fn cosf64(x: f64) -> f64;\n+\n+    pub fn powf32(a: f32, x: f32) -> f32;\n+    pub fn powf64(a: f64, x: f64) -> f64;\n+\n+    pub fn expf32(x: f32) -> f32;\n+    pub fn expf64(x: f64) -> f64;\n+\n+    pub fn exp2f32(x: f32) -> f32;\n+    pub fn exp2f64(x: f64) -> f64;\n+\n+    pub fn logf32(x: f32) -> f32;\n+    pub fn logf64(x: f64) -> f64;\n+\n+    pub fn log10f32(x: f32) -> f32;\n+    pub fn log10f64(x: f64) -> f64;\n+\n+    pub fn log2f32(x: f32) -> f32;\n+    pub fn log2f64(x: f64) -> f64;\n+\n+    pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n+    pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n+\n+    pub fn fabsf32(x: f32) -> f32;\n+    pub fn fabsf64(x: f64) -> f64;\n+\n+    pub fn minnumf32(x: f32, y: f32) -> f32;\n+    pub fn minnumf64(x: f64, y: f64) -> f64;\n+\n+    pub fn maxnumf32(x: f32, y: f32) -> f32;\n+    pub fn maxnumf64(x: f64, y: f64) -> f64;\n+\n+    pub fn copysignf32(x: f32, y: f32) -> f32;\n+    pub fn copysignf64(x: f64, y: f64) -> f64;\n+\n+    pub fn floorf32(x: f32) -> f32;\n+    pub fn floorf64(x: f64) -> f64;\n+\n+    pub fn ceilf32(x: f32) -> f32;\n+    pub fn ceilf64(x: f64) -> f64;\n+\n+    pub fn truncf32(x: f32) -> f32;\n+    pub fn truncf64(x: f64) -> f64;\n+\n+    pub fn rintf32(x: f32) -> f32;\n+    pub fn rintf64(x: f64) -> f64;\n+\n+    pub fn nearbyintf32(x: f32) -> f32;\n+    pub fn nearbyintf64(x: f64) -> f64;\n+\n+    pub fn roundf32(x: f32) -> f32;\n+    pub fn roundf64(x: f64) -> f64;\n+}\n+\n+fn main() {\n+    unsafe fn foo() {\n+        let mut f32;\n+        let mut f64;\n+\n+        f32 = sqrtf32(1f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sqrtf \\(1\\.0e\\+0\\);$} 1 original } }\n+        f64 = sqrtf64(2f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_sqrt \\(2\\.0e\\+0\\);$} 1 original } }\n+\n+        f32 = sinf32(39f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sinf \\(3\\.9e\\+1\\);$} 1 original } }\n+        f64 = sinf64(40f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_sin \\(4\\.0e\\+1\\);$} 1 original } }\n+\n+        f32 = cosf32(5f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_cosf \\(5\\.0e\\+0\\);$} 1 original } }\n+        f64 = cosf64(6f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_cos \\(6\\.0e\\+0\\);$} 1 original } }\n+\n+        f32 = powf32(7f32, 8f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_powf \\(7\\.0e\\+0, 8\\.0e\\+0\\);$} 1 original } }\n+        f64 = powf64(9f64, 10f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_pow \\(9\\.0e\\+0, 1\\.0e\\+1\\);$} 1 original } }\n+\n+        f32 = expf32(11f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_expf \\(1\\.1e\\+1\\);$} 1 original } }\n+        f64 = expf64(12f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_exp \\(1\\.2e\\+1\\);$} 1 original } }\n+\n+        f32 = exp2f32(13f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_expf \\(1\\.1e\\+1\\);$} 1 original } }\n+        f64 = exp2f64(14f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_exp \\(1\\.2e\\+1\\);$} 1 original } }\n+\n+        f32 = logf32(15f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_logf \\(1\\.5e\\+1\\);$} 1 original } }\n+        f64 = logf64(16f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_log \\(1\\.6e\\+1\\);$} 1 original } }\n+\n+        f32 = log10f32(17f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_log10f \\(1\\.7e\\+1\\);$} 1 original } }\n+        f64 = log10f64(18f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_log10 \\(1\\.8e\\+1\\);$} 1 original } }\n+\n+        f32 = log2f32(19f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_log2f \\(1\\.9e\\+1\\);$} 1 original } }\n+        f64 = log2f64(20f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_log2 \\(2\\.0e\\+1\\);$} 1 original } }\n+\n+        f32 = fmaf32(21f32, 22f32, 23f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_fmaf \\(2\\.1e\\+1, 2\\.2e\\+1, 2\\.3e\\+1\\);$} 1 original } }\n+        f64 = fmaf64(24f64, 25f64, 26f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_fma \\(2\\.4e\\+1, 2\\.5e\\+1, 2\\.6e\\+1\\);$} 1 original } }\n+\n+        f32 = fabsf32(27f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_fabsf \\(2\\.7e\\+1\\);$} 1 original } }\n+        f64 = fabsf64(28f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_fabs \\(2\\.8e\\+1\\);$} 1 original } }\n+\n+        f32 = minnumf32(29f32, 30f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_fminf \\(2\\.9e\\+1, 3\\.0e\\+1\\);$} 1 original } }\n+        f64 = minnumf64(31f64, 32f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_fmin \\(3\\.1e\\+1, 3\\.2e\\+1\\);$} 1 original } }\n+\n+        f32 = maxnumf32(33f32, 34f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_fmaxf \\(3\\.3e\\+1, 3\\.4e\\+1\\);$} 1 original } }\n+        f64 = maxnumf64(35f64, 36f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_fmax \\(3\\.5e\\+1, 3\\.6e\\+1\\);$} 1 original } }\n+\n+        f32 = copysignf32(37f32, 38f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_copysignf \\(3\\.7e\\+1, 3\\.8e\\+1\\);$} 1 original } }\n+        f64 = copysignf64(39f64, 40f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_copysign \\(3\\.9e\\+1, 4\\.0e\\+1\\);$} 1 original } }\n+\n+        f32 = floorf32(41f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_floorf \\(4\\.1e\\+1\\);$} 1 original } }\n+        f64 = floorf64(42f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_floor \\(4\\.2e\\+1\\);$} 1 original } }\n+\n+        f32 = ceilf32(43f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_ceilf \\(4\\.3e\\+1\\);$} 1 original } }\n+        f64 = ceilf64(44f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_ceil \\(4\\.4e\\+1\\);$} 1 original } }\n+\n+        f32 = truncf32(45f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_truncf \\(4\\.5e\\+1\\);$} 1 original } }\n+        f64 = truncf64(46f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_trunc \\(4\\.6e\\+1\\);$} 1 original } }\n+\n+        f32 = rintf32(47f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_rintf \\(4\\.7e\\+1\\);$} 1 original } }\n+        f64 = rintf64(48f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_rint \\(4\\.8e\\+1\\);$} 1 original } }\n+\n+        f32 = nearbyintf32(49f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_nearbyintf \\(4\\.9e\\+1\\);$} 1 original } }\n+        f64 = nearbyintf64(50f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_nearbyint \\(5\\.0e\\+1\\);$} 1 original } }\n+\n+        f32 = roundf32(51f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_roundf \\(5\\.1e\\+1\\);$} 1 original } }\n+        f64 = roundf64(52f64);\n+        // { dg-final { scan-tree-dump-times {(?n)f64 = __builtin_round \\(5\\.2e\\+1\\);$} 1 original } }\n+    }\n+\n+    unsafe { foo() };\n+}"}]}