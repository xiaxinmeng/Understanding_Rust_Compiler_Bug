{"sha": "b757b9f8b210b691f72fe418db8c0767bda54cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1N2I5ZjhiMjEwYjY5MWY3MmZlNDE4ZGI4YzA3NjdiZGE1NGNiNw==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2004-10-18T18:46:06Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-10-18T18:46:06Z"}, "message": "simplify-rtx.c (mode_signbit_p): Externalize function...\n\n2004-10-18  Pat Haugen  <pthaugen@us.ibm.com>\n\n        * simplify-rtx.c (mode_signbit_p): Externalize function...\n        * rtl.h (mode_signbit_p): ... to here.\n        * combine.c (simplify_shift_const): Recognize PLUS signbit as\n        canonical form of XOR signbit and move to outer op.\n\nFrom-SVN: r89235", "tree": {"sha": "4c36b35633d0f938381ebc4187f4b32439f4546d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c36b35633d0f938381ebc4187f4b32439f4546d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b757b9f8b210b691f72fe418db8c0767bda54cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b757b9f8b210b691f72fe418db8c0767bda54cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b757b9f8b210b691f72fe418db8c0767bda54cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b757b9f8b210b691f72fe418db8c0767bda54cb7/comments", "author": null, "committer": null, "parents": [{"sha": "1a1804c27017289c540fd8b193209a8598af858a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1804c27017289c540fd8b193209a8598af858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1804c27017289c540fd8b193209a8598af858a"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "7e1ab3c3f18a8420279c0810ee399801a808dee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b757b9f8b210b691f72fe418db8c0767bda54cb7", "patch": "@@ -1,3 +1,10 @@\n+2004-10-18  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* simplify-rtx.c (mode_signbit_p): Externalize function...\n+\t* rtl.h (mode_signbit_p): ... to here.\n+\t* combine.c (simplify_shift_const): Recognize PLUS signbit as\n+\tcanonical form of XOR signbit and move to outer op.\n+\n 2004-10-18  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-cfg.c (bsi_for_stmt): Rename from stmt_for_bsi."}, {"sha": "98efe3eb1476ffeef290169cf7afdbb1190c2cdd", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b757b9f8b210b691f72fe418db8c0767bda54cb7", "patch": "@@ -9022,6 +9022,26 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \t      varop = XEXP (varop, 0);\n \t      continue;\n \t    }\n+\n+\t  /* Check for 'PLUS signbit', which is the canonical form of 'XOR\n+\t     signbit', and attempt to change the PLUS to an XOR and move it to\n+\t     the outer operation as is done above in the AND/IOR/XOR case\n+\t     leg for shift(logical). See details in logical handling above\n+\t     for reasoning in doing so. */\n+\t  if (code == LSHIFTRT\n+\t      && GET_CODE (XEXP (varop, 1)) == CONST_INT\n+\t      && mode_signbit_p (result_mode, XEXP (varop, 1))\n+\t      && (new = simplify_binary_operation (code, result_mode,\n+\t\t\t\t\t\t   XEXP (varop, 1),\n+\t\t\t\t\t\t   GEN_INT (count))) != 0\n+\t      && GET_CODE (new) == CONST_INT\n+\t      && merge_outer_ops (&outer_op, &outer_const, XOR,\n+\t\t\t\t  INTVAL (new), result_mode, &complement_p))\n+\t    {\n+\t      varop = XEXP (varop, 0);\n+\t      continue;\n+\t    }\n+\n \t  break;\n \n \tcase MINUS:"}, {"sha": "ca2a0174ae55b05221438a242f757d1416618290", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b757b9f8b210b691f72fe418db8c0767bda54cb7", "patch": "@@ -1570,6 +1570,7 @@ extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,\n extern rtx simplify_replace_rtx (rtx, rtx, rtx);\n extern rtx simplify_rtx (rtx);\n extern rtx avoid_constant_pool_reference (rtx);\n+extern bool mode_signbit_p (enum machine_mode, rtx);\n \n /* In regclass.c  */\n extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,"}, {"sha": "4af468a40ca8f057e74ff75eaba645d8334ad2c5", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757b9f8b210b691f72fe418db8c0767bda54cb7/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b757b9f8b210b691f72fe418db8c0767bda54cb7", "patch": "@@ -50,7 +50,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n  ((((HOST_WIDE_INT) low) < 0) ? ((HOST_WIDE_INT) -1) : ((HOST_WIDE_INT) 0))\n \n static rtx neg_const_int (enum machine_mode, rtx);\n-static bool mode_signbit_p (enum machine_mode, rtx);\n static int simplify_plus_minus_op_data_cmp (const void *, const void *);\n static rtx simplify_plus_minus (enum rtx_code, enum machine_mode, rtx,\n \t\t\t\trtx, int);\n@@ -72,7 +71,7 @@ neg_const_int (enum machine_mode mode, rtx i)\n /* Test whether expression, X, is an immediate constant that represents\n    the most significant bit of machine mode MODE.  */\n \n-static bool\n+bool\n mode_signbit_p (enum machine_mode mode, rtx x)\n {\n   unsigned HOST_WIDE_INT val;"}]}