{"sha": "4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0NWIzODNiYjZjZTExNDFhNGFhYzhmN2VhZWMxNGU0YWNmODk1Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-27T16:02:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-27T16:02:43Z"}, "message": "dojump.c: Fix comment typos.\n\n\t* dojump.c: Fix comment typos.  emit-rtl.c, expmed.c, expr.c,\n\tstmt.c, stor-layout.c: Use fold_buildN instead of\n\tfold (buildN (...)).\n\nFrom-SVN: r98848", "tree": {"sha": "cb76f3875be6539713ada23941496242dccb3731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb76f3875be6539713ada23941496242dccb3731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/comments", "author": null, "committer": null, "parents": [{"sha": "8fc6e9abc89e12defa8080adc2fc2117e3251dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc6e9abc89e12defa8080adc2fc2117e3251dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc6e9abc89e12defa8080adc2fc2117e3251dad"}], "stats": {"total": 132, "additions": 68, "deletions": 64}, "files": [{"sha": "717e7a18bf9141b915701ce323ce601d3148c699", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -8,6 +8,10 @@\n \t(init_ssanames, fini_ssa_names, make_ssanames,\n \trelease_ssa_name): Update uses of ssa_names.\n \n+\t* dojump.c: Fix comment typos.  emit-rtl.c, expmed.c, expr.c,\n+\tstmt.c, stor-layout.c: Use fold_buildN instead of\n+\tfold (buildN (...)).\n+\n 2005-04-27  Devang Patel <dpatel@apple.com>\n \n \t* dbxout.c (dbxout_type): Check use_gnu_debug_info_extensions."}, {"sha": "c274a6ecff4a7772c9ac3e215e13388e1254230d", "filename": "gcc/dojump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -504,8 +504,8 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t    if (if_true_label == 0)\n \t      drop_through_label = if_true_label = gen_label_rtx ();\n \t      \n-            cmp0 = fold (build2 (tcode1, TREE_TYPE (exp), op0, op1));\n-            cmp1 = fold (build2 (tcode2, TREE_TYPE (exp), op0, op1));\n+            cmp0 = fold_build2 (tcode1, TREE_TYPE (exp), op0, op1);\n+            cmp1 = fold_build2 (tcode2, TREE_TYPE (exp), op0, op1);\n \t    do_jump (cmp0, 0, if_true_label);\n \t    do_jump (cmp1, if_false_label, if_true_label);\n           }"}, {"sha": "3ed2321450fda0266c2bcd27a30cca075225136e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -1579,8 +1579,8 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t index, then convert to sizetype and multiply by the size of\n \t\t the array element.  */\n \t      if (! integer_zerop (low_bound))\n-\t\tindex = fold (build2 (MINUS_EXPR, TREE_TYPE (index),\n-\t\t\t\t      index, low_bound));\n+\t\tindex = fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n+\t\t\t\t     index, low_bound);\n \n \t      off_tree = size_binop (PLUS_EXPR,\n \t\t\t\t     size_binop (MULT_EXPR, convert (sizetype,"}, {"sha": "c814233d24c733ebf539ebc39d8e08021a999415", "filename": "gcc/expmed.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -2232,9 +2232,9 @@ expand_shift (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t      tree type = TREE_TYPE (amount);\n \t      tree new_amount = make_tree (type, op1);\n \t      tree other_amount\n-\t\t= fold (build2 (MINUS_EXPR, type, \n-\t\t\t\tbuild_int_cst (type, GET_MODE_BITSIZE (mode)),\n-\t\t\t\tamount));\n+\t\t= fold_build2 (MINUS_EXPR, type,\n+\t\t\t       build_int_cst (type, GET_MODE_BITSIZE (mode)),\n+\t\t\t       amount);\n \n \t      shifted = force_reg (mode, shifted);\n \n@@ -4890,23 +4890,23 @@ make_tree (tree type, rtx x)\n       }\n \n     case PLUS:\n-      return fold (build2 (PLUS_EXPR, type, make_tree (type, XEXP (x, 0)),\n-\t\t\t   make_tree (type, XEXP (x, 1))));\n+      return fold_build2 (PLUS_EXPR, type, make_tree (type, XEXP (x, 0)),\n+\t\t\t  make_tree (type, XEXP (x, 1)));\n \n     case MINUS:\n-      return fold (build2 (MINUS_EXPR, type, make_tree (type, XEXP (x, 0)),\n-\t\t\t   make_tree (type, XEXP (x, 1))));\n+      return fold_build2 (MINUS_EXPR, type, make_tree (type, XEXP (x, 0)),\n+\t\t\t  make_tree (type, XEXP (x, 1)));\n \n     case NEG:\n-      return fold (build1 (NEGATE_EXPR, type, make_tree (type, XEXP (x, 0))));\n+      return fold_build1 (NEGATE_EXPR, type, make_tree (type, XEXP (x, 0)));\n \n     case MULT:\n-      return fold (build2 (MULT_EXPR, type, make_tree (type, XEXP (x, 0)),\n-\t\t\t   make_tree (type, XEXP (x, 1))));\n+      return fold_build2 (MULT_EXPR, type, make_tree (type, XEXP (x, 0)),\n+\t\t\t  make_tree (type, XEXP (x, 1)));\n \n     case ASHIFT:\n-      return fold (build2 (LSHIFT_EXPR, type, make_tree (type, XEXP (x, 0)),\n-\t\t\t   make_tree (type, XEXP (x, 1))));\n+      return fold_build2 (LSHIFT_EXPR, type, make_tree (type, XEXP (x, 0)),\n+\t\t\t  make_tree (type, XEXP (x, 1)));\n \n     case LSHIFTRT:\n       t = lang_hooks.types.unsigned_type (type);\n@@ -4986,11 +4986,11 @@ const_mult_add_overflow_p (rtx x, rtx mult, rtx add,\n   add_type = (GET_MODE (add) == VOIDmode ? mult_type\n \t      : lang_hooks.types.type_for_mode (GET_MODE (add), unsignedp));\n \n-  result = fold (build2 (PLUS_EXPR, mult_type,\n-\t\t\t fold (build2 (MULT_EXPR, mult_type,\n-\t\t\t\t       make_tree (mult_type, x),\n-\t\t\t\t       make_tree (mult_type, mult))),\n-\t\t\t make_tree (add_type, add)));\n+  result = fold_build2 (PLUS_EXPR, mult_type,\n+\t\t\tfold_build2 (MULT_EXPR, mult_type,\n+\t\t\t\t     make_tree (mult_type, x),\n+\t\t\t\t     make_tree (mult_type, mult)),\n+\t\t\tmake_tree (add_type, add));\n \n   return TREE_CONSTANT_OVERFLOW (result);\n }\n@@ -5011,11 +5011,11 @@ expand_mult_add (rtx x, rtx target, rtx mult, rtx add, enum machine_mode mode,\n   tree add_type = (GET_MODE (add) == VOIDmode\n \t\t   ? type: lang_hooks.types.type_for_mode (GET_MODE (add),\n \t\t\t\t\t\t\t   unsignedp));\n-  tree result =  fold (build2 (PLUS_EXPR, type,\n-\t\t\t       fold (build2 (MULT_EXPR, type,\n-\t\t\t\t\t     make_tree (type, x),\n-\t\t\t\t\t     make_tree (type, mult))),\n-\t\t\t       make_tree (add_type, add)));\n+  tree result = fold_build2 (PLUS_EXPR, type,\n+\t\t\t     fold_build2 (MULT_EXPR, type,\n+\t\t\t\t\t  make_tree (type, x),\n+\t\t\t\t\t  make_tree (type, mult)),\n+\t\t\t     make_tree (add_type, add));\n \n   return expand_expr (result, target, VOIDmode, 0);\n }"}, {"sha": "25bdd0f79cef681878cd17544492d09c92a038a7", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -4783,9 +4783,9 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\n \t\tif (BYTES_BIG_ENDIAN)\n \t\t  value\n-\t\t    = fold (build2 (LSHIFT_EXPR, type, value,\n-\t\t\t\t    build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t   BITS_PER_WORD - bitsize)));\n+\t\t   = fold_build2 (LSHIFT_EXPR, type, value,\n+\t\t\t\t   build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t  BITS_PER_WORD - bitsize));\n \t\tbitsize = BITS_PER_WORD;\n \t\tmode = word_mode;\n \t      }\n@@ -4986,8 +4986,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    /* Assign value to element index.  */\n \t\t    position\n \t\t      = convert (ssizetype,\n-\t\t\t\t fold (build2 (MINUS_EXPR, TREE_TYPE (index),\n-\t\t\t\t\t       index, TYPE_MIN_VALUE (domain))));\n+\t\t\t\t fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n+\t\t\t\t\t      index, TYPE_MIN_VALUE (domain)));\n \t\t    position = size_binop (MULT_EXPR, position,\n \t\t\t\t\t   convert (ssizetype,\n \t\t\t\t\t\t    TYPE_SIZE_UNIT (elttype)));\n@@ -5029,10 +5029,10 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\n \t\tif (minelt)\n \t\t  index = fold_convert (ssizetype,\n-\t\t\t\t\tfold (build2 (MINUS_EXPR,\n-\t\t\t\t\t\t      TREE_TYPE (index),\n-\t\t\t\t\t\t      index,\n-\t\t\t\t\t\t      TYPE_MIN_VALUE (domain))));\n+\t\t\t\t\tfold_build2 (MINUS_EXPR,\n+\t\t\t\t\t\t     TREE_TYPE (index),\n+\t\t\t\t\t\t     index,\n+\t\t\t\t\t\t     TYPE_MIN_VALUE (domain)));\n \t\t\n \t\tposition = size_binop (MULT_EXPR, index,\n \t\t\t\t       convert (ssizetype,\n@@ -5485,8 +5485,8 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t       index, then convert to sizetype and multiply by the size of\n \t       the array element.  */\n \t    if (! integer_zerop (low_bound))\n-\t      index = fold (build2 (MINUS_EXPR, TREE_TYPE (index),\n-\t\t\t\t    index, low_bound));\n+\t      index = fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n+\t\t\t\t   index, low_bound);\n \n \t    offset = size_binop (PLUS_EXPR, offset,\n \t\t\t         size_binop (MULT_EXPR,\n@@ -8971,9 +8971,9 @@ try_tablejump (tree index_type, tree index_expr, tree minval, tree range,\n   if (! HAVE_tablejump)\n     return 0;\n \n-  index_expr = fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t     convert (index_type, index_expr),\n-\t\t\t     convert (index_type, minval)));\n+  index_expr = fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t    convert (index_type, index_expr),\n+\t\t\t    convert (index_type, minval));\n   index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n   do_pending_stack_adjust ();\n "}, {"sha": "94b018adba84eb3721d9178299503f616549de5d", "filename": "gcc/stmt.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -2238,10 +2238,10 @@ emit_case_bit_tests (tree index_type, tree index_expr, tree minval,\n       else\n         test[i].bits++;\n \n-      lo = tree_low_cst (fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t\t       n->low, minval)), 1);\n-      hi = tree_low_cst (fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t\t       n->high, minval)), 1);\n+      lo = tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t      n->low, minval), 1);\n+      hi = tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t      n->high, minval), 1);\n       for (j = lo; j <= hi; j++)\n         if (j >= HOST_BITS_PER_WIDE_INT)\n \t  test[i].hi |= (HOST_WIDE_INT) 1 << (j - HOST_BITS_PER_INT);\n@@ -2251,9 +2251,9 @@ emit_case_bit_tests (tree index_type, tree index_expr, tree minval,\n \n   qsort (test, count, sizeof(*test), case_bit_test_cmp);\n \n-  index_expr = fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t     fold_convert (index_type, index_expr),\n-\t\t\t     fold_convert (index_type, minval)));\n+  index_expr = fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t    fold_convert (index_type, index_expr),\n+\t\t\t    fold_convert (index_type, minval));\n   index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n   do_pending_stack_adjust ();\n \n@@ -2417,7 +2417,7 @@ expand_case (tree exp)\n \t}\n \n       /* Compute span of values.  */\n-      range = fold (build2 (MINUS_EXPR, index_type, maxval, minval));\n+      range = fold_build2 (MINUS_EXPR, index_type, maxval, minval);\n \n       /* Try implementing this switch statement by a short sequence of\n \t bit-wise comparisons.  However, we let the binary-tree case\n@@ -2543,11 +2543,11 @@ expand_case (tree exp)\n \t\t value since that should fit in a HOST_WIDE_INT while the\n \t\t actual values may not.  */\n \t      HOST_WIDE_INT i_low\n-\t\t= tree_low_cst (fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t\t\t      n->low, minval)), 1);\n+\t\t= tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t\t     n->low, minval), 1);\n \t      HOST_WIDE_INT i_high\n-\t\t= tree_low_cst (fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t\t\t      n->high, minval)), 1);\n+\t\t= tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t\t     n->high, minval), 1);\n \t      HOST_WIDE_INT i;\n \n \t      for (i = i_low; i <= i_high; i ++)\n@@ -2828,8 +2828,8 @@ node_has_low_bound (case_node_ptr node, tree index_type)\n   if (node->left)\n     return 0;\n \n-  low_minus_one = fold (build2 (MINUS_EXPR, TREE_TYPE (node->low),\n-\t\t\t\tnode->low, integer_one_node));\n+  low_minus_one = fold_build2 (MINUS_EXPR, TREE_TYPE (node->low),\n+\t\t\t       node->low, integer_one_node);\n \n   /* If the subtraction above overflowed, we can't verify anything.\n      Otherwise, look for a parent that tests our value - 1.  */\n@@ -2878,8 +2878,8 @@ node_has_high_bound (case_node_ptr node, tree index_type)\n   if (node->right)\n     return 0;\n \n-  high_plus_one = fold (build2 (PLUS_EXPR, TREE_TYPE (node->high),\n-\t\t\t\tnode->high, integer_one_node));\n+  high_plus_one = fold_build2 (PLUS_EXPR, TREE_TYPE (node->high),\n+\t\t\t       node->high, integer_one_node);\n \n   /* If the addition above overflowed, we can't verify anything.\n      Otherwise, look for a parent that tests our value + 1.  */\n@@ -3303,8 +3303,8 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      new_index = expand_simple_binop (mode, MINUS, index, low_rtx,\n \t\t\t\t\t       NULL_RTX, unsignedp,\n \t\t\t\t\t       OPTAB_WIDEN);\n-\t      new_bound = expand_expr (fold (build2 (MINUS_EXPR, type,\n-\t\t\t\t\t\t     high, low)),\n+\t      new_bound = expand_expr (fold_build2 (MINUS_EXPR, type,\n+\t\t\t\t\t\t    high, low),\n \t\t\t\t       NULL_RTX, mode, 0);\n \n \t      emit_cmp_and_jump_insns (new_index, new_bound, GT, NULL_RTX,"}, {"sha": "41d316543e77a41d2a98738253a6ea00fe1cdebc", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845b383bb6ce1141a4aac8f7eaec14e4acf8956/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=4845b383bb6ce1141a4aac8f7eaec14e4acf8956", "patch": "@@ -746,9 +746,9 @@ place_union_field (record_layout_info rli, tree field)\n   if (TREE_CODE (rli->t) == UNION_TYPE)\n     rli->offset = size_binop (MAX_EXPR, rli->offset, DECL_SIZE_UNIT (field));\n   else if (TREE_CODE (rli->t) == QUAL_UNION_TYPE)\n-    rli->offset = fold (build3 (COND_EXPR, sizetype,\n-\t\t\t\tDECL_QUALIFIER (field),\n-\t\t\t\tDECL_SIZE_UNIT (field), rli->offset));\n+    rli->offset = fold_build3 (COND_EXPR, sizetype,\n+\t\t\t       DECL_QUALIFIER (field),\n+\t\t\t       DECL_SIZE_UNIT (field), rli->offset);\n }\n \n #if defined (PCC_BITFIELD_TYPE_MATTERS) || defined (BITFIELD_NBYTES_LIMITED)\n@@ -1641,9 +1641,9 @@ layout_type (tree type)\n \t       that (possible) negative values are handled appropriately.  */\n \t    length = size_binop (PLUS_EXPR, size_one_node,\n \t\t\t\t fold_convert (sizetype,\n-\t\t\t\t\t       fold (build2 (MINUS_EXPR,\n-\t\t\t\t\t\t\t     TREE_TYPE (lb),\n-\t\t\t\t\t\t\t     ub, lb))));\n+\t\t\t\t\t       fold_build2 (MINUS_EXPR,\n+\t\t\t\t\t\t\t    TREE_TYPE (lb),\n+\t\t\t\t\t\t\t    ub, lb)));\n \n \t    /* Special handling for arrays of bits (for Chill).  */\n \t    element_size = TYPE_SIZE (element);"}]}