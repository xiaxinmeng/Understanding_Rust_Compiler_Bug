{"sha": "d508e6f85fb526c4a1c06cd761bb4925b60111ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwOGU2Zjg1ZmI1MjZjNGExYzA2Y2Q3NjFiYjQ5MjViNjAxMTFhZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-07-08T00:56:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-07-08T00:56:45Z"}, "message": "struct-layout-1_generate.c (vector_types): Add v32qi, v16hi, v8si, v4di, v8sf, v4df, u32qi, u16hi, u8si, u4di, u8sf and u4df.\n\n2008-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.dg/compat/struct-layout-1_generate.c (vector_types): Add\n\tv32qi, v16hi, v8si, v4di, v8sf, v4df, u32qi, u16hi, u8si, u4di,\n\tu8sf and u4df.\n\n\t* gcc.dg/compat/union-m128-1_main.c: Run only on x86.  Remove\n\t__x86_64__ check.  Include \"cpuid.h\".\n\t(main): Check SSE2 at runtime.\n\n\t* gcc.dg/compat/union-m128-1_x.c: Compile with -msse2.  Remove\n\t__x86_64__ check.\n\t* gcc.dg/compat/union-m128-1_y.c: Likewise.\n\n\t* gcc.dg/compat/vector-1_x.c: Add 32byte vector tests.\n\t* gcc.dg/compat/vector-1_y.c: Likewise.\n\t* gcc.dg/compat/vector-2_x.c: Likewise.\n\t* gcc.dg/compat/vector-2_y.c: Likewise.\n\n\t* gcc.dg/compat/vector-1a_main.c: New.\n\t* gcc.dg/compat/vector-1a_x.c: Likewise.\n\t* gcc.dg/compat/vector-1a_y.c: Likewise.\n\t* gcc.dg/compat/vector-2a_main.c: Likewise.\n\t* gcc.dg/compat/vector-2a_x.c: Likewise.\n\t* gcc.dg/compat/vector-2a_y.c: Likewise.\n\n\t* gcc.dg/compat/vector-defs.h (v32qi): New.\n\t(v16hi): Likewise.\n\t(v8si): Likewise.\n\t(v4di): Likewise.\n\t(v8sf): Likewise.\n\t(v4df): Likewise.\n\t(u32qi): Likewise.\n\t(u16hi): Likewise.\n\t(u8si): Likewise.\n\t(u4di): Likewise.\n\t(u8sf): Likewise.\n\t(u4df): Likewise.\n\n\t* lib/compat.exp (compat-get-options-main): Support dg-skip-if.\n\nFrom-SVN: r137611", "tree": {"sha": "13b68faa2dab77d87a223581c01cd38382315c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b68faa2dab77d87a223581c01cd38382315c8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d508e6f85fb526c4a1c06cd761bb4925b60111ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d508e6f85fb526c4a1c06cd761bb4925b60111ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d508e6f85fb526c4a1c06cd761bb4925b60111ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d508e6f85fb526c4a1c06cd761bb4925b60111ad/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5510cef5b53a07e5d1ac7849faaa1e7592ff1a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5510cef5b53a07e5d1ac7849faaa1e7592ff1a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5510cef5b53a07e5d1ac7849faaa1e7592ff1a4e"}], "stats": {"total": 187, "additions": 166, "deletions": 21}, "files": [{"sha": "f73e0443f8a6f2ece81ddd2c9e73629e3ebfe09e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -1,3 +1,44 @@\n+2008-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/compat/struct-layout-1_generate.c (vector_types): Add\n+\tv32qi, v16hi, v8si, v4di, v8sf, v4df, u32qi, u16hi, u8si, u4di,\n+\tu8sf and u4df.\n+\n+\t* gcc.dg/compat/union-m128-1_main.c: Run only on x86.  Remove\n+\t__x86_64__ check.  Include \"cpuid.h\".\n+\t(main): Check SSE2 at runtime.\n+\n+\t* gcc.dg/compat/union-m128-1_x.c: Compile with -msse2.  Remove\n+\t__x86_64__ check.\n+\t* gcc.dg/compat/union-m128-1_y.c: Likewise.\n+\n+\t* gcc.dg/compat/vector-1_x.c: Add 32byte vector tests.\n+\t* gcc.dg/compat/vector-1_y.c: Likewise.\n+\t* gcc.dg/compat/vector-2_x.c: Likewise.\n+\t* gcc.dg/compat/vector-2_y.c: Likewise.\n+\n+\t* gcc.dg/compat/vector-1a_main.c: New.\n+\t* gcc.dg/compat/vector-1a_x.c: Likewise.\n+\t* gcc.dg/compat/vector-1a_y.c: Likewise.\n+\t* gcc.dg/compat/vector-2a_main.c: Likewise.\n+\t* gcc.dg/compat/vector-2a_x.c: Likewise.\n+\t* gcc.dg/compat/vector-2a_y.c: Likewise.\n+\n+\t* gcc.dg/compat/vector-defs.h (v32qi): New.\n+\t(v16hi): Likewise.\n+\t(v8si): Likewise.\n+\t(v4di): Likewise.\n+\t(v8sf): Likewise.\n+\t(v4df): Likewise.\n+\t(u32qi): Likewise.\n+\t(u16hi): Likewise.\n+\t(u8si): Likewise.\n+\t(u4di): Likewise.\n+\t(u8sf): Likewise.\n+\t(u4df): Likewise.\n+\n+\t* lib/compat.exp (compat-get-options-main): Support dg-skip-if.\n+\n 2008-07-07  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \t* gcc.c-torture/compile/20080625-1.c: Skip for AVR target."}, {"sha": "f6a217e6f56481ffb73d70de712f9540fe80b993", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -186,30 +186,42 @@ struct types vector_types[] = {\n /* vector-defs.h typedefs */\n { \"v8qi\", TYPE_OTHER, 0, 0 },\n { \"v16qi\", TYPE_OTHER, 0, 0 },\n+{ \"v32qi\", TYPE_OTHER, 0, 0 },\n { \"v2hi\", TYPE_OTHER, 0, 0 },\n { \"v4hi\", TYPE_OTHER, 0, 0 },\n { \"v8hi\", TYPE_OTHER, 0, 0 },\n+{ \"v16hi\", TYPE_OTHER, 0, 0 },\n { \"v2si\", TYPE_OTHER, 0, 0 },\n { \"v4si\", TYPE_OTHER, 0, 0 },\n+{ \"v8si\", TYPE_OTHER, 0, 0 },\n { \"v1di\", TYPE_OTHER, 0, 0 },\n { \"v2di\", TYPE_OTHER, 0, 0 },\n+{ \"v4di\", TYPE_OTHER, 0, 0 },\n { \"v2sf\", TYPE_OTHER, 0, 0 },\n { \"v4sf\", TYPE_OTHER, 0, 0 },\n+{ \"v8sf\", TYPE_OTHER, 0, 0 },\n { \"v16sf\", TYPE_OTHER, 0, 0 },\n { \"v2df\", TYPE_OTHER, 0, 0 },\n+{ \"v4df\", TYPE_OTHER, 0, 0 },\n { \"u8qi\", TYPE_OTHER, 0, 0 },\n { \"u16qi\", TYPE_OTHER, 0, 0 },\n+{ \"u32qi\", TYPE_OTHER, 0, 0 },\n { \"u2hi\", TYPE_OTHER, 0, 0 },\n { \"u4hi\", TYPE_OTHER, 0, 0 },\n { \"u8hi\", TYPE_OTHER, 0, 0 },\n+{ \"u16hi\", TYPE_OTHER, 0, 0 },\n { \"u2si\", TYPE_OTHER, 0, 0 },\n { \"u4si\", TYPE_OTHER, 0, 0 },\n+{ \"u8si\", TYPE_OTHER, 0, 0 },\n { \"u1di\", TYPE_OTHER, 0, 0 },\n { \"u2di\", TYPE_OTHER, 0, 0 },\n+{ \"u4di\", TYPE_OTHER, 0, 0 },\n { \"u2sf\", TYPE_OTHER, 0, 0 },\n { \"u4sf\", TYPE_OTHER, 0, 0 },\n+{ \"u8sf\", TYPE_OTHER, 0, 0 },\n { \"u16sf\", TYPE_OTHER, 0, 0 },\n { \"u2df\", TYPE_OTHER, 0, 0 },\n+{ \"u4df\", TYPE_OTHER, 0, 0 },\n { \"__m64\", TYPE_OTHER, 0, 0 },\n { \"__m128\", TYPE_OTHER, 0, 0 }\n #define NVTYPES2 (sizeof (vector_types) / sizeof (vector_types[0]))"}, {"sha": "11f872154eba28386f4c7c4e6c5ee463f96243e2", "filename": "gcc/testsuite/gcc.dg/compat/union-m128-1_main.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -1,6 +1,8 @@\n+/* { dg-skip-if \"test SSE2 support\" { ! { i?86-*-* x86_64-*-* } } } */\n /* { dg-options \"-O\" } */\n \n-#ifdef __x86_64__\n+#include \"cpuid.h\"\n+\n /* Test function argument passing.  PR target/15301.  */\n \n extern void union_m128_1_x (void);\n@@ -9,13 +11,14 @@ extern void exit (int);\n int\n main ()\n {\n-  union_m128_1_x ();\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE vector test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    union_m128_1_x ();\n+\n   exit (0);\n }\n-#else\n-int\n-main ()\n-{\n-  return 0;\n-}\n-#endif"}, {"sha": "1f92303d95b148e9fe877598cf124a6fb7fe12d5", "filename": "gcc/testsuite/gcc.dg/compat/union-m128-1_x.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_x.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msse2\" } */\n \n-#ifdef __x86_64__\n #include \"union-m128-1.h\"\n \n SS_union_mi128 un;\n@@ -23,7 +22,3 @@ union_m128_1_x ()\n   foo(un);\n   foo(st);\n }\n-#else\n-int dummy_x;\n-#endif\n-"}, {"sha": "be9d6e8f3d59d56d818b4598bce92535cb77a879", "filename": "gcc/testsuite/gcc.dg/compat/union-m128-1_y.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_y.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msse2\" } */\n \n-#ifdef __x86_64__\n #include <stdlib.h>\n \n #include \"union-m128-1.h\"\n@@ -26,7 +25,3 @@ foo (SS_struct_mi128 st)\n       || x.u [1] != 0xfedcba9876543210LL)\n     abort ();\n }\n-#else\n-int dummy_y;\n-#endif\n-"}, {"sha": "ab4f88bf48b89e2642ac4f41dd3b3f3caee288a8", "filename": "gcc/testsuite/gcc.dg/compat/vector-1_x.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_x.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -8,13 +8,17 @@\n \n SETUP (8, qi);\n SETUP (16, qi);\n+SETUP (32, qi);\n SETUP (2, hi);\n SETUP (4, hi);\n SETUP (8, hi);\n+SETUP (16, hi);\n SETUP (2, si);\n SETUP (4, si);\n+SETUP (8, si);\n SETUP (1, di);\n SETUP (2, di);\n+SETUP (4, di);\n \n #endif\n \n@@ -26,13 +30,17 @@ vector_1_x (void)\n \n   CHECK (8, qi);\n   CHECK (16, qi);\n+  CHECK (32, qi);\n   CHECK (2, hi);\n   CHECK (4, hi);\n   CHECK (8, hi);\n+  CHECK (16, hi);\n   CHECK (2, si);\n   CHECK (4, si);\n+  CHECK (8, si);\n   CHECK (1, di);\n   CHECK (2, di);\n+  CHECK (4, di);\n \n   DEBUG_FINI\n "}, {"sha": "5a09c0eadb67f95b101b6c62677415c63844036f", "filename": "gcc/testsuite/gcc.dg/compat/vector-1_y.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1_y.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -8,12 +8,16 @@\n \n TEST (8, qi, 101)\n TEST (16, qi, 101)\n+TEST (32, qi, 90)\n TEST (2, hi, 201)\n TEST (4, hi, 202)\n TEST (8, hi, 203)\n+TEST (16, hi, 203)\n TEST (2, si, 301)\n TEST (4, si, 302)\n+TEST (8, si, 303)\n TEST (1, di, 401)\n TEST (2, di, 402)\n+TEST (4, di, 403)\n \n #endif"}, {"sha": "76fb2915e1d096d877ad83b20926b25eb4d44f47", "filename": "gcc/testsuite/gcc.dg/compat/vector-1a_main.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-skip-if \"test SSE2 vector\" { ! { i?86-*-* x86_64-*-* } } } */\n+\n+/* Test compatibility of vector types: layout between separately-compiled\n+   modules, parameter passing, and function return.  This test uses\n+   vectors of integer values.  */\n+\n+#include \"cpuid.h\"\n+\n+extern void vector_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE vector test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    vector_1_x ();\n+\n+  exit (0);\n+}"}, {"sha": "aa0fa7f208cf141082dfeb06ef31554e23fd2310", "filename": "gcc/testsuite/gcc.dg/compat/vector-1a_x.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_x.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -msse2\" } */\n+\n+#include \"vector-1_x.c\""}, {"sha": "2c88e198845f326a7096b2813cf3c0012581ddda", "filename": "gcc/testsuite/gcc.dg/compat/vector-1a_y.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_y.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -msse2\" } */\n+\n+#include \"vector-1_y.c\""}, {"sha": "d08c77fe3a05dd47d4928fabc90e14c912dc6635", "filename": "gcc/testsuite/gcc.dg/compat/vector-2_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_x.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -10,7 +10,9 @@\n SETUP (2, sf);\n SETUP (4, sf);\n SETUP (16, sf);\n+SETUP (8, sf);\n SETUP (2, df);\n+SETUP (4, df);\n \n #endif\n \n@@ -22,7 +24,9 @@ vector_2_x (void)\n \n   CHECK (2, sf);\n   CHECK (4, sf);\n+  CHECK (8, sf);\n   CHECK (16, sf);\n+  CHECK (4, df);\n   CHECK (2, df);\n \n   DEBUG_FINI"}, {"sha": "fd5830c35b3f916a8838c645769af97f308da394", "filename": "gcc/testsuite/gcc.dg/compat/vector-2_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2_y.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -9,7 +9,9 @@\n \n TEST (2, sf, 301.0)\n TEST (4, sf, 302.0)\n+TEST (8, sf, 303.0)\n TEST (16, sf, 304.0)\n TEST (2, df, 402.0)\n+TEST (4, df, 402.0)\n \n #endif"}, {"sha": "96c1111fddcdb5f79d8ea7e3721af2f332a3e0b0", "filename": "gcc/testsuite/gcc.dg/compat/vector-2a_main.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-skip-if \"test SSE2 support\" { ! { i?86-*-* x86_64-*-* } } } */\n+\n+/* Test compatibility of vector types: layout between separately-compiled\n+   modules, parameter passing, and function return.  This test uses\n+   vectors of floating points values.  */\n+\n+#include \"cpuid.h\"\n+\n+extern void vector_2_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE vector test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    vector_2_x ();\n+\n+  exit (0);\n+}"}, {"sha": "fcfacec04e8faecda9f0ad9d48959c9ab1df77e9", "filename": "gcc/testsuite/gcc.dg/compat/vector-2a_x.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_x.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -msse2\" } */\n+\n+#include \"vector-2_x.c\""}, {"sha": "3797acb6a575b8eaf0d9746e62b4bfaca0caa920", "filename": "gcc/testsuite/gcc.dg/compat/vector-2a_y.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_y.c?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -msse2\" } */\n+\n+#include \"vector-2_y.c\""}, {"sha": "f2f050527ecdb4977a3ccc6b7943fdffb6ab39b3", "filename": "gcc/testsuite/gcc.dg/compat/vector-defs.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -56,6 +56,20 @@ typedef float __attribute__((mode(V2DF))) v2df;\n \n #endif\n \n+typedef qi __attribute__((vector_size (32))) v32qi;\n+typedef hi __attribute__((vector_size (32))) v16hi;\n+typedef si __attribute__((vector_size (32))) v8si;\n+typedef di __attribute__((vector_size (32))) v4di;\n+typedef sf __attribute__((vector_size (32))) v8sf;\n+typedef df __attribute__((vector_size (32))) v4df;\n+\n+typedef union U32QI { v32qi v; qi a[32]; } u32qi;\n+typedef union U16HI { v16hi v; hi a[16]; } u16hi;\n+typedef union U8SI { v8si v; si a[8]; } u8si;\n+typedef union U4DI { v4di v; di a[4]; } u4di;\n+typedef union U8SF { v8sf v; sf a[8]; } u8sf;\n+typedef union U4DF { v4df v; df a[4]; } u4df;\n+\n typedef union U8QI { v8qi v; qi a[8]; } u8qi;\n typedef union U16QI { v16qi v; qi a[16]; } u16qi;\n "}, {"sha": "ee7cff56fbe2ff316dd2118f0e3444f133e773c0", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508e6f85fb526c4a1c06cd761bb4925b60111ad/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=d508e6f85fb526c4a1c06cd761bb4925b60111ad", "patch": "@@ -156,6 +156,8 @@ proc compat-run { testname objlist dest optall optfile optstr } {\n proc compat-get-options-main { src } {\n     # dg-options sets a variable called dg-extra-tool-flags.\n     set dg-extra-tool-flags \"\"\n+    # dg-options sets a variable called tool_flags.\n+    set tool_flags \"\"\n \n     # dg-require-* sets dg-do-what.\n     upvar dg-do-what dg-do-what \n@@ -164,6 +166,7 @@ proc compat-get-options-main { src } {\n     foreach op $tmp {\n \tset cmd [lindex $op 0]\n \tif { ![string compare \"dg-options\" $cmd] \\\n+\t     || [string match \"dg-skip-if\" $cmd] \\\n \t     || [string match \"dg-require-*\" $cmd]  } {\n \t    set status [catch \"$op\" errmsg]\n \t    if { $status != 0 } {"}]}