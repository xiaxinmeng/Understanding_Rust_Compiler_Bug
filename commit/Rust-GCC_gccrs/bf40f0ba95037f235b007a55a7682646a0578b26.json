{"sha": "bf40f0ba95037f235b007a55a7682646a0578b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MGYwYmE5NTAzN2YyMzViMDA3YTU1YTc2ODI2NDZhMDU3OGIyNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-26T13:28:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-26T22:00:46Z"}, "message": "jit: fix missing types for builtins [PR 95306]\n\nPR jit/95306 reports that attempts to use builtins\n__builtin_sadd_overflow\" and \"__builtin_memcpy\" via\ngcc_jit_context_get_builtin_function lead to inscrutable error\nmessages of the form:\n  unimplemented primitive type for builtin: 42\nand:\n  unimplemented primitive type for builtin: 38\n\nThe root cause is that jit-builtins.c only implements a subset\nof the types defined via DEF_PRIMITIVE_TYPE in builtin-types.def.\n\nThis patch:\n- implements enough types to enable the above two builtins to be\n  referenced\n- documents gcc_jit_context_get_builtin_function, and notes the\n  limitation that not all types are supported (supporting\n  some of them would take a lot of extra work)\n- improves the error message for the unsupported cases\n- adds a testcase for __builtin_memcpy.  This required\n  jit_langhook_global_bindings_p to be implemented (otherwise\n  the assertion there failed deep inside \"expand\" on the builtin)\n- adds test coverage for the above\n\ngcc/jit/ChangeLog:\n\tPR jit/95306\n\t* docs/topics/functions.rst\n\t(gcc_jit_context_get_builtin_function): Document.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* dummy-frontend.c (jit_langhook_global_bindings_p): Remove\n\tgcc_unreachable.\n\t* jit-builtins.c (type_names): New array.\n\t(get_string_for_type_id): New function.\n\t(gcc::jit::builtins_manager::make_primitive_type): Show name of\n\ttype in error messages.  Update cases to reflect the order in\n\tbuiltin-types.def.  Implement cases for BT_INT8, BT_INT16,\n\tBT_UINT8, BT_CONST_PTR, BT_VOLATILE_PTR, BT_INT_PTR, BT_FLOAT_PTR,\n\tBT_CONST_DOUBLE_PTR, BT_SIZE, BT_CONST_SIZE.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/95306\n\t* jit.dg/all-non-failing-tests.h: Add test-builtin-memcpy.c and\n\ttest-pr95306-builtin-types.c.\n\t* jit.dg/test-builtin-memcpy.c: New test.\n\t* jit.dg/test-error-gcc_jit_context_get_builtin_function-unimplemented-type.c:\n\tNew test.\n\t* jit.dg/test-pr95306-builtin-types.c: New test.", "tree": {"sha": "7d94d8725092b5961d9d641b62a141da11cc6ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d94d8725092b5961d9d641b62a141da11cc6ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf40f0ba95037f235b007a55a7682646a0578b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf40f0ba95037f235b007a55a7682646a0578b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf40f0ba95037f235b007a55a7682646a0578b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf40f0ba95037f235b007a55a7682646a0578b26/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f03cd12be26828788a27f6f3c250041a958e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f03cd12be26828788a27f6f3c250041a958e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f03cd12be26828788a27f6f3c250041a958e45"}], "stats": {"total": 290, "additions": 279, "deletions": 11}, "files": [{"sha": "6114f8194a5f32d17e780c68b1c2287ed4cf9a78", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -7037,7 +7037,26 @@ buffer.\n \n @geindex gcc_jit_context_get_builtin_function (C function)\n @anchor{topics/functions c gcc_jit_context_get_builtin_function}@anchor{df}\n-@deffn {C Function} gcc_jit_function *gcc_jit_context_get_builtin_function (gcc_jit_context@w{ }*ctxt, const char@w{ }*name)\n+@deffn {C Function} gcc_jit_function *            gcc_jit_context_get_builtin_function (gcc_jit_context@w{ }*ctxt, const char@w{ }*name)\n+\n+Get the @ref{29,,gcc_jit_function} for the built-in function with the\n+given name.  For example:\n+\n+@example\n+gcc_jit_function *fn\n+  = gcc_jit_context_get_builtin_function (ctxt, \"__builtin_memcpy\");\n+@end example\n+\n+@cartouche\n+@quotation Note \n+Due to technical limitations with how libgccjit interacts with\n+the insides of GCC, not all built-in functions are supported.  More\n+precisely, not all types are supported for parameters of built-in\n+functions from libgccjit.  Attempts to get a built-in function that\n+uses such a parameter will lead to an error being emitted within\n+the context.\n+@end quotation\n+@end cartouche\n @end deffn\n \n @geindex gcc_jit_function_as_object (C function)"}, {"sha": "eb40d64010e22b411d698659936d27c0164da32f", "filename": "gcc/jit/docs/topics/functions.rst", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -125,6 +125,21 @@ Functions\n                gcc_jit_context_get_builtin_function (gcc_jit_context *ctxt,\\\n                                                      const char *name)\n \n+   Get the :type:`gcc_jit_function` for the built-in function with the\n+   given name.  For example:\n+\n+   .. code-block:: c\n+\n+      gcc_jit_function *fn\n+        = gcc_jit_context_get_builtin_function (ctxt, \"__builtin_memcpy\");\n+\n+   .. note:: Due to technical limitations with how libgccjit interacts with\n+      the insides of GCC, not all built-in functions are supported.  More\n+      precisely, not all types are supported for parameters of built-in\n+      functions from libgccjit.  Attempts to get a built-in function that\n+      uses such a parameter will lead to an error being emitted within\n+      the context.\n+\n .. function::  gcc_jit_object *\\\n                gcc_jit_function_as_object (gcc_jit_function *func)\n "}, {"sha": "27fe9d3db9699568f20a44288efb913db1dcd630", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -230,7 +230,6 @@ jit_langhook_builtin_function (tree decl)\n static bool\n jit_langhook_global_bindings_p (void)\n {\n-  gcc_unreachable ();\n   return true;\n }\n "}, {"sha": "4842ff3ea968b7239b465c4875aab1d2f9a269a8", "filename": "gcc/jit/jit-builtins.c", "status": "modified", "additions": 113, "deletions": 9, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fjit-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Fjit%2Fjit-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.c?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -245,6 +245,85 @@ builtins_manager::make_builtin_function (enum built_in_function builtin_id)\n   return result;\n }\n \n+/* Build an array of type names for use by get_string_for_type_id.  */\n+\n+static const char * const type_names[] = {\n+#define DEF_PRIMITIVE_TYPE(ENUM, VALUE) #ENUM,\n+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN) #ENUM,\n+#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1) #ENUM,\n+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2) #ENUM,\n+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3) #ENUM,\n+#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) #ENUM,\n+#define DEF_FUNCTION_TYPE_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) #ENUM,\n+#define DEF_FUNCTION_TYPE_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6)\t\t\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6, ARG7)\t\t\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_8(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6, ARG7, ARG8)\t\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_9(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6, ARG7, ARG8, ARG9)\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_10(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t     ARG6, ARG7, ARG8, ARG9, ARG10)\t\t \\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_11(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t     ARG6, ARG7, ARG8, ARG9, ARG10, ARG11)\t \\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN) #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1) #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2) #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3) #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6)\t\t\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_FUNCTION_TYPE_VAR_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t\tARG6, ARG7)\t\t\t\t\\\n+\t\t\t\t\t  #ENUM,\n+#define DEF_POINTER_TYPE(ENUM, TYPE) #ENUM,\n+\n+#include \"builtin-types.def\"\n+\n+#undef DEF_PRIMITIVE_TYPE\n+#undef DEF_FUNCTION_TYPE_0\n+#undef DEF_FUNCTION_TYPE_1\n+#undef DEF_FUNCTION_TYPE_2\n+#undef DEF_FUNCTION_TYPE_3\n+#undef DEF_FUNCTION_TYPE_4\n+#undef DEF_FUNCTION_TYPE_5\n+#undef DEF_FUNCTION_TYPE_6\n+#undef DEF_FUNCTION_TYPE_7\n+#undef DEF_FUNCTION_TYPE_8\n+#undef DEF_FUNCTION_TYPE_9\n+#undef DEF_FUNCTION_TYPE_10\n+#undef DEF_FUNCTION_TYPE_11\n+#undef DEF_FUNCTION_TYPE_VAR_0\n+#undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_3\n+#undef DEF_FUNCTION_TYPE_VAR_4\n+#undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_FUNCTION_TYPE_VAR_6\n+#undef DEF_FUNCTION_TYPE_VAR_7\n+#undef DEF_POINTER_TYPE\n+};\n+\n+/* Get a string for TYPE_ID suitable for use in logs and error messages\n+   (e.g. \"BT_PID\").  */\n+\n+static const char *\n+get_string_for_type_id (enum jit_builtin_type type_id)\n+{\n+  gcc_assert (type_id < sizeof (type_names)/sizeof(type_names[0]));\n+  return type_names[type_id];\n+}\n+\n /* Get the recording::type for a given type of builtin function,\n    by ID, creating it if it doesn't already exist.  */\n \n@@ -383,7 +462,8 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     default:\n       // only some of these types are implemented so far:\n       m_ctxt->add_error (NULL,\n-\t\t\t \"unimplemented primitive type for builtin: %d\", type_id);\n+\t\t\t \"unimplemented primitive type for builtin (type: %s)\",\n+\t\t\t get_string_for_type_id (type_id));\n       return NULL;\n \n     case BT_VOID: return m_ctxt->get_type (GCC_JIT_TYPE_VOID);\n@@ -395,10 +475,11 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     case BT_LONGLONG: return m_ctxt->get_type (GCC_JIT_TYPE_LONG_LONG);\n     case BT_ULONGLONG:\n       return m_ctxt->get_type (GCC_JIT_TYPE_UNSIGNED_LONG_LONG);\n-    // case BT_INT128:\n-    // case BT_UINT128:\n     // case BT_INTMAX:\n     // case BT_UINTMAX:\n+    case BT_INT8: return m_ctxt->get_int_type (1, true);\n+    case BT_INT16: return m_ctxt->get_int_type (2, true);\n+    case BT_UINT8: return m_ctxt->get_int_type (1, false);\n     case BT_UINT16: return m_ctxt->get_int_type (2, false);\n     case BT_UINT32: return m_ctxt->get_int_type (4, false);\n     case BT_UINT64: return m_ctxt->get_int_type (8, false);\n@@ -407,6 +488,13 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     case BT_FLOAT: return m_ctxt->get_type (GCC_JIT_TYPE_FLOAT);\n     case BT_DOUBLE: return m_ctxt->get_type (GCC_JIT_TYPE_DOUBLE);\n     case BT_LONGDOUBLE: return m_ctxt->get_type (GCC_JIT_TYPE_LONG_DOUBLE);\n+    // case BT_FLOAT16:\n+    // case BT_FLOAT32:\n+    // case BT_FLOAT64:\n+    // case BT_FLOAT128:\n+    // case BT_FLOAT32X:\n+    // case BT_FLOAT64X:\n+    // case BT_FLOAT128X:\n     case BT_COMPLEX_FLOAT:\n       return m_ctxt->get_type (GCC_JIT_TYPE_COMPLEX_FLOAT);\n     case BT_COMPLEX_DOUBLE:\n@@ -415,18 +503,33 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n       return m_ctxt->get_type (GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE);\n     case BT_PTR: return m_ctxt->get_type (GCC_JIT_TYPE_VOID_PTR);\n     case BT_FILEPTR: return m_ctxt->get_type (GCC_JIT_TYPE_FILE_PTR);\n-    // case BT_CONST:\n-    // case BT_VOLATILE_PTR:\n+    // case BT_CONST_TM_PTR:\n+    // case BT_FENV_T_PTR:\n+    // case BT_CONST_FENV_T_PTR:\n+    // case BT_FEXCEPT_T_PTR:\n+    // case BT_CONST_FEXCEPT_T_PTR:\n+    case BT_CONST_PTR:\n+      return m_ctxt->get_type (GCC_JIT_TYPE_VOID)->get_const ()->get_pointer ();\n+    case BT_VOLATILE_PTR:\n+      return (m_ctxt->get_type (GCC_JIT_TYPE_VOID)->get_volatile ()\n+\t      ->get_pointer ());\n     // case BT_CONST_VOLATILE_PTR:\n     // case BT_PTRMODE:\n-    // case BT_INT_PTR:\n-    // case BT_FLOAT_PTR:\n+    case BT_INT_PTR:\n+      return m_ctxt->get_type (GCC_JIT_TYPE_INT)->get_pointer ();\n+    case BT_FLOAT_PTR:\n+      return m_ctxt->get_type (GCC_JIT_TYPE_FLOAT)->get_pointer ();\n     case BT_DOUBLE_PTR:\n       return m_ctxt->get_type (GCC_JIT_TYPE_DOUBLE)->get_pointer ();\n-    // case BT_CONST_DOUBLE_PTR:\n+    case BT_CONST_DOUBLE_PTR:\n+      return (m_ctxt->get_type (GCC_JIT_TYPE_DOUBLE)->get_const ()\n+\t      ->get_pointer ());\n     // case BT_LONGDOUBLE_PTR:\n     // case BT_PID:\n-    // case BT_SIZE:\n+    case BT_SIZE:\n+      return m_ctxt->get_type (GCC_JIT_TYPE_SIZE_T);\n+    case BT_CONST_SIZE:\n+      return m_ctxt->get_type (GCC_JIT_TYPE_SIZE_T)->get_const ();\n     // case BT_SSIZE:\n     // case BT_WINT:\n     // case BT_STRING:\n@@ -441,6 +544,7 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     // case BT_I4:\n     // case BT_I8:\n     // case BT_I16:\n+    // case BT_PTR_CONST_STRING:\n     }\n }\n "}, {"sha": "babcd3979b751752bca6ddff9cfb15ef5b5b64f3", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -67,6 +67,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-builtin-memcpy.c */\n+#define create_code create_code_builtin_memcpy\n+#define verify_code verify_code_builtin_memcpy\n+#include \"test-builtin-memcpy.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-calling-external-function.c */\n #define create_code create_code_calling_external_function\n #define verify_code verify_code_calling_external_function\n@@ -220,6 +227,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-pr95306-builtin-types.c.  */\n+#define create_code create_code_pr95306_builtin_types\n+#define verify_code verify_code_pr95306_builtin_types\n+#include \"test-pr95306-builtin-types.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-reading-struct.c */\n #define create_code create_code_reading_struct\n #define verify_code verify_code_reading_struct\n@@ -318,6 +332,9 @@ const struct testcase testcases[] = {\n   {\"autovectorize\",\n    create_code_autovectorize,\n    verify_code_autovectorize},\n+  {\"builtin-memcpy\",\n+   create_code_builtin_memcpy,\n+   verify_code_builtin_memcpy},\n   {\"calling_external_function\",\n    create_code_calling_external_function,\n    verify_code_calling_external_function},\n@@ -381,6 +398,9 @@ const struct testcase testcases[] = {\n   {\"pr66779\",\n    create_code_pr66779,\n    verify_code_pr66779},\n+  {\"pr95306_builtin_types\",\n+   create_code_pr95306_builtin_types,\n+   verify_code_pr95306_builtin_types},\n   {\"reading_struct \",\n    create_code_reading_struct ,\n    verify_code_reading_struct },"}, {"sha": "ba4fa59fb1be400316dcf636e3bff574dc0d3d63", "filename": "gcc/testsuite/jit.dg/test-builtin-memcpy.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-memcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-memcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-memcpy.c?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -0,0 +1,69 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+      void *\n+      test_memcpy (void *dest, const void *src, size_t n)\n+      {\n+        return __builtin_memcpy (dest, src, n);\n+      }\n+   */\n+  gcc_jit_type *t_void_ptr\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID_PTR);\n+  gcc_jit_type *t_const_void_ptr\n+    = gcc_jit_type_get_pointer (gcc_jit_type_get_const\n+\t\t\t\t(gcc_jit_context_get_type\n+\t\t\t\t (ctxt, GCC_JIT_TYPE_VOID)));\n+  gcc_jit_type *t_size_t\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_SIZE_T);\n+\n+  gcc_jit_param *dest\n+    = gcc_jit_context_new_param (ctxt, NULL, t_void_ptr, \"dest\");\n+  gcc_jit_param *src\n+    = gcc_jit_context_new_param (ctxt, NULL, t_const_void_ptr, \"src\");\n+  gcc_jit_param *n = gcc_jit_context_new_param (ctxt, NULL, t_size_t, \"n\");\n+  gcc_jit_param *params[3] = {dest, src, n};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  t_void_ptr,\n+\t\t\t\t  \"test_memcpy\",\n+\t\t\t\t  3, params, 0);\n+\n+  gcc_jit_function *jit_memcpy\n+    = gcc_jit_context_get_builtin_function (ctxt, \"__builtin_memcpy\");\n+\n+\n+  gcc_jit_block *b_initial\n+    = gcc_jit_function_new_block (func, \"initial\");\n+  gcc_jit_rvalue *args[3] = {gcc_jit_param_as_rvalue (dest),\n+\t\t\t     gcc_jit_param_as_rvalue (src),\n+\t\t\t     gcc_jit_param_as_rvalue (n)};\n+  gcc_jit_rvalue *call\n+    = gcc_jit_context_new_call (ctxt, NULL, jit_memcpy, 3, args);\n+  gcc_jit_block_end_with_return (b_initial, NULL, call);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef void *(*test_memcpy_type) (void *, const void *, size_t);\n+  CHECK_NON_NULL (result);\n+  test_memcpy_type test_memcpy =\n+    (test_memcpy_type)gcc_jit_result_get_code (result, \"test_memcpy\");\n+  CHECK_NON_NULL (test_memcpy);\n+\n+  int dst = 13;\n+  int src = 42;\n+  void *out = test_memcpy (&dst, &src, sizeof(int));\n+  CHECK_VALUE(out, &dst);\n+  CHECK_VALUE(dst, 42);\n+}"}, {"sha": "89b59d4c7a8be629944bebf0407d514cbe53e135", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_context_get_builtin_function-unimplemented-type.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_get_builtin_function-unimplemented-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_get_builtin_function-unimplemented-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_get_builtin_function-unimplemented-type.c?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -0,0 +1,20 @@\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_context_get_builtin_function(ctxt, \"__builtin_fork\");\n+}\n+\n+extern void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"unimplemented primitive type for builtin\"\n+\t\t      \" (type: BT_PID)\");\n+}"}, {"sha": "6c3b087ab981bb929492233316aba3566ebb7226", "filename": "gcc/testsuite/jit.dg/test-pr95306-builtin-types.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95306-builtin-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf40f0ba95037f235b007a55a7682646a0578b26/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95306-builtin-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95306-builtin-types.c?ref=bf40f0ba95037f235b007a55a7682646a0578b26", "patch": "@@ -0,0 +1,22 @@\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+#define CHECK_BUILTIN(NAME) \\\n+  CHECK_NON_NULL (gcc_jit_context_get_builtin_function (ctxt, NAME));\n+  \n+  CHECK_BUILTIN (\"__builtin_memcpy\");\n+  CHECK_BUILTIN (\"__builtin_sadd_overflow\");\n+\n+#undef CHECK_BUILTIN\n+}\n+\n+extern void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Verify that no errors were emitted.  */\n+  CHECK_NON_NULL (result);\n+}"}]}