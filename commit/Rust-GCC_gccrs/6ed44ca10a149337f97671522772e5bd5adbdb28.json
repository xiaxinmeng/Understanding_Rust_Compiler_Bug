{"sha": "6ed44ca10a149337f97671522772e5bd5adbdb28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkNDRjYTEwYTE0OTMzN2Y5NzY3MTUyMjc3MmU1YmQ1YWRiZGIyOA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-09-13T17:16:29Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-09-13T17:16:29Z"}, "message": "bfin.md (reload_outpdi, [...]): New patterns.\n\n\t* config/bfin/bfin.md (reload_outpdi, reload_inpdi): New patterns.\n\t* config/bfin/bfin.c (bfin_secondary_reload): Make sure we use them.\n\nFrom-SVN: r128470", "tree": {"sha": "21fca4f31236f2a1b35aab2da3e1312b75e988f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21fca4f31236f2a1b35aab2da3e1312b75e988f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed44ca10a149337f97671522772e5bd5adbdb28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed44ca10a149337f97671522772e5bd5adbdb28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed44ca10a149337f97671522772e5bd5adbdb28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed44ca10a149337f97671522772e5bd5adbdb28/comments", "author": null, "committer": null, "parents": [{"sha": "468b40bcb95976311b1ed4f1b988d186b45dab49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/468b40bcb95976311b1ed4f1b988d186b45dab49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/468b40bcb95976311b1ed4f1b988d186b45dab49"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "be124600231c7694affb3e957cd3a199052894f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ed44ca10a149337f97671522772e5bd5adbdb28", "patch": "@@ -1,3 +1,8 @@\n+2007-09-13  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (reload_outpdi, reload_inpdi): New patterns.\n+\t* config/bfin/bfin.c (bfin_secondary_reload): Make sure we use them.\n+\n 2007-09-13  James E. Wilson  <wilson@specifix.com>\n \n \tPR tree-optimization/33389"}, {"sha": "ed456a880bb42b4ec4930d7cb93747719add563e", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=6ed44ca10a149337f97671522772e5bd5adbdb28", "patch": "@@ -2045,8 +2045,8 @@ bfin_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    scratch register.  */\n \n static enum reg_class\n-bfin_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x, enum reg_class class,\n-\t\t     enum machine_mode mode, secondary_reload_info *sri)\n+bfin_secondary_reload (bool in_p, rtx x, enum reg_class class,\n+\t\t       enum machine_mode mode, secondary_reload_info *sri)\n {\n   /* If we have HImode or QImode, we can only use DREGS as secondary registers;\n      in most other cases we can also use PREGS.  */\n@@ -2099,8 +2099,16 @@ bfin_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x, enum reg_class class,\n \n   if (class == AREGS || class == EVEN_AREGS || class == ODD_AREGS)\n     {\n+      if (code == MEM)\n+\t{\n+\t  sri->icode = in_p ? CODE_FOR_reload_inpdi : CODE_FOR_reload_outpdi;\n+\t  return NO_REGS;\n+\t}\n+\n       if (x != const0_rtx && x_class != DREGS)\n-\treturn DREGS;\n+\t{\n+\t  return DREGS;\n+\t}\n       else\n \treturn NO_REGS;\n     }\n@@ -2116,6 +2124,7 @@ bfin_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x, enum reg_class class,\n   if (code == MEM)\n     if (! reg_class_subset_p (class, default_class))\n       return default_class;\n+\n   return NO_REGS;\n }\n \f"}, {"sha": "0184999ab17cf9e0b18cb9e3719bae79d9c0209c", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed44ca10a149337f97671522772e5bd5adbdb28/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=6ed44ca10a149337f97671522772e5bd5adbdb28", "patch": "@@ -1746,6 +1746,46 @@\n   DONE;\n })\n \n+(define_insn \"reload_inpdi\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n+\t(match_operand:PDI 1 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n+  \"\"\n+{\n+  rtx xops[4];\n+  xops[0] = operands[0];\n+  xops[1] = operands[2];\n+  split_di (operands + 1, 1, xops + 2, xops + 3);\n+  output_asm_insn (\"%1 = %2;\", xops);\n+  output_asm_insn (\"%w0 = %1;\", xops);\n+  output_asm_insn (\"%1 = %3;\", xops);\n+  output_asm_insn (\"%x0 = %1;\", xops);\n+  return \"\";\n+}\n+ [(set_attr \"seq_insns\" \"multi\")\n+  (set_attr \"type\" \"mcld\")\n+  (set_attr \"length\" \"12\")])\n+\n+(define_insn \"reload_outpdi\"\n+  [(set (match_operand:PDI 0 \"memory_operand\" \"=m\")\n+\t(match_operand:PDI 1 \"register_operand\" \"e\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n+  \"\"\n+{\n+  rtx xops[4];\n+  xops[0] = operands[1];\n+  xops[1] = operands[2];\n+  split_di (operands, 1, xops + 2, xops + 3);\n+  output_asm_insn (\"%1 = %w0;\", xops);\n+  output_asm_insn (\"%2 = %1;\", xops);\n+  output_asm_insn (\"%1 = %x0;\", xops);\n+  output_asm_insn (\"%3 = %1;\", xops);\n+  return \"\";\n+}\n+ [(set_attr \"seq_insns\" \"multi\")\n+  (set_attr \"type\" \"mcld\")\n+  (set_attr \"length\" \"12\")])\n+\n ;; Jump instructions\n \n (define_insn \"jump\""}]}