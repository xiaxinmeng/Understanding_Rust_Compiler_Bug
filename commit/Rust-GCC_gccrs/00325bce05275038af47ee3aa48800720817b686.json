{"sha": "00325bce05275038af47ee3aa48800720817b686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzMjViY2UwNTI3NTAzOGFmNDdlZTNhYTQ4ODAwNzIwODE3YjY4Ng==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-08-21T22:49:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-08-21T22:49:46Z"}, "message": "c-decl.c (set_array_declarator_type): Rename to set_array_declarator_inner.\n\n\t* c-decl.c (set_array_declarator_type): Rename to\n\tset_array_declarator_inner.\n\t(build_c_parm, build_attrs_declarator, build_function_declarator):\n\tNew functions.\n\t(make_pointer_declarator): Call build_attrs_declarator.\n\t* c-tree.h (set_array_declarator_type): Rename to\n\tset_array_declarator_inner.\n\t(build_c_parm, build_attrs_declarator, build_function_declarator):\n\tNew prototypes.\n\t* c-parse.in (after_type_declarator,\n\tparm_declarator_starttypename, parm_declarator_nostarttypename,\n\tnotype_declarator, absdcl_maybe_attribute, direct_absdcl1, parm,\n\tfirstparm): Use these functions\n\nFrom-SVN: r86367", "tree": {"sha": "0bc86a46dabfe5f3217a90c3285ceb99d445d1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bc86a46dabfe5f3217a90c3285ceb99d445d1c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00325bce05275038af47ee3aa48800720817b686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00325bce05275038af47ee3aa48800720817b686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00325bce05275038af47ee3aa48800720817b686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00325bce05275038af47ee3aa48800720817b686/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60919bce329ac4f5f398f9e9343ac12b859fdab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60919bce329ac4f5f398f9e9343ac12b859fdab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60919bce329ac4f5f398f9e9343ac12b859fdab9"}], "stats": {"total": 133, "additions": 86, "deletions": 47}, "files": [{"sha": "13f3e15a9c58da1a4add2217bc949a4d81489cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00325bce05275038af47ee3aa48800720817b686/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00325bce05275038af47ee3aa48800720817b686/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00325bce05275038af47ee3aa48800720817b686", "patch": "@@ -1,3 +1,19 @@\n+2004-08-21  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-decl.c (set_array_declarator_type): Rename to\n+\tset_array_declarator_inner.\n+\t(build_c_parm, build_attrs_declarator, build_function_declarator):\n+\tNew functions.\n+\t(make_pointer_declarator): Call build_attrs_declarator.\n+\t* c-tree.h (set_array_declarator_type): Rename to\n+\tset_array_declarator_inner.\n+\t(build_c_parm, build_attrs_declarator, build_function_declarator):\n+\tNew prototypes.\n+\t* c-parse.in (after_type_declarator,\n+\tparm_declarator_starttypename, parm_declarator_nostarttypename,\n+\tnotype_declarator, absdcl_maybe_attribute, direct_absdcl1, parm,\n+\tfirstparm): Use these functions\n+\n 2004-08-21  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-decl.c (build_array_declarator, set_array_declarator_type,"}, {"sha": "9220194f4e50c8673f3e21d56539cfc621b13809", "filename": "gcc/c-decl.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=00325bce05275038af47ee3aa48800720817b686", "patch": "@@ -2629,7 +2629,7 @@ shadow_tag_warned (tree declspecs, int warned)\n    nevertheless a complete type (not currently implemented by GCC),\n    false otherwise.  The declarator is constructed as an ARRAY_REF\n    (to be decoded by grokdeclarator), whose operand 0 is what's on the\n-   left of the [] (filled by in set_array_declarator_type) and operand 1\n+   left of the [] (filled by in set_array_declarator_inner) and operand 1\n    is the expression inside; whose TREE_TYPE is the type qualifiers and\n    which has TREE_STATIC set if \"static\" is used.  */\n \n@@ -2661,7 +2661,7 @@ build_array_declarator (tree expr, tree quals, bool static_p,\n    C99 grammar.  */\n \n tree\n-set_array_declarator_type (tree decl, tree type, bool abstract_p)\n+set_array_declarator_inner (tree decl, tree type, bool abstract_p)\n {\n   TREE_OPERAND (decl, 0) = type;\n   if (abstract_p && (TREE_TYPE (decl) != NULL_TREE || TREE_STATIC (decl)))\n@@ -6640,6 +6640,34 @@ build_void_list_node (void)\n   return t;\n }\n \n+/* Return a structure for a parameter with the given SPECS, ATTRS and\n+   DECLARATOR.  */\n+\n+tree\n+build_c_parm (tree specs, tree attrs, tree declarator)\n+{\n+  return build_tree_list (build_tree_list (specs, declarator), attrs);\n+}\n+\n+/* Return a declarator with nested attributes.  TARGET is the inner\n+   declarator to which these attributes apply.  ATTRS are the\n+   attributes.  */\n+\n+tree\n+build_attrs_declarator (tree attrs, tree target)\n+{\n+  return tree_cons (attrs, target, NULL_TREE);\n+}\n+\n+/* Return a declarator for a function with arguments specified by ARGS\n+   and return type specified by TARGET.  */\n+\n+tree\n+build_function_declarator (tree args, tree target)\n+{\n+  return build_nt (CALL_EXPR, target, args, NULL_TREE);\n+}\n+\n /* Return something to represent absolute declarators containing a *.\n    TARGET is the absolute declarator that the * contains.\n    TYPE_QUALS_ATTRS is a list of modifiers such as const or volatile\n@@ -6656,7 +6684,7 @@ make_pointer_declarator (tree type_quals_attrs, tree target)\n   tree itarget = target;\n   split_specs_attrs (type_quals_attrs, &quals, &attrs);\n   if (attrs != NULL_TREE)\n-    itarget = tree_cons (attrs, target, NULL_TREE);\n+    itarget = build_attrs_declarator (attrs, target);\n   return build1 (INDIRECT_REF, quals, itarget);\n }\n "}, {"sha": "2269bef9a8c096d7575e032f357cb3d6582369d9", "filename": "gcc/c-parse.in", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=00325bce05275038af47ee3aa48800720817b686", "patch": "@@ -1620,11 +1620,11 @@ declarator:\n \n after_type_declarator:\n \t  '(' maybe_attribute after_type_declarator ')'\n-\t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n+\t\t{ $$ = $2 ? build_attrs_declarator ($2, $3) : $3; }\n \t| after_type_declarator '(' parmlist_or_identifiers  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($3, $1); }\n \t| after_type_declarator array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n+\t\t{ $$ = set_array_declarator_inner ($2, $1, false); }\n \t| '*' maybe_type_quals_attrs after_type_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| TYPENAME\n@@ -1644,9 +1644,9 @@ parm_declarator:\n \n parm_declarator_starttypename:\n \t  parm_declarator_starttypename '(' parmlist_or_identifiers  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($3, $1); }\n \t| parm_declarator_starttypename array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n+\t\t{ $$ = set_array_declarator_inner ($2, $1, false); }\n \t| TYPENAME\n @@ifobjc\n \t| OBJECTNAME\n@@ -1655,29 +1655,29 @@ parm_declarator_starttypename:\n \n parm_declarator_nostarttypename:\n \t  parm_declarator_nostarttypename '(' parmlist_or_identifiers  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($3, $1); }\n \t| parm_declarator_nostarttypename array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n+\t\t{ $$ = set_array_declarator_inner ($2, $1, false); }\n \t| '*' maybe_type_quals_attrs parm_declarator_starttypename  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| '*' maybe_type_quals_attrs parm_declarator_nostarttypename  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| '(' maybe_attribute parm_declarator_nostarttypename ')'\n-\t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n+\t\t{ $$ = $2 ? build_attrs_declarator ($2, $3) : $3; }\n \t;\n \n /* A declarator allowed whether or not there has been\n    an explicit typespec.  These cannot redeclare a typedef-name.  */\n \n notype_declarator:\n \t  notype_declarator '(' parmlist_or_identifiers  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($3, $1); }\n \t| '(' maybe_attribute notype_declarator ')'\n-\t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n+\t\t{ $$ = $2 ? build_attrs_declarator ($2, $3) : $3; }\n \t| '*' maybe_type_quals_attrs notype_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| notype_declarator array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n+\t\t{ $$ = set_array_declarator_inner ($2, $1, false); }\n \t| IDENTIFIER\n \t;\n \n@@ -1909,17 +1909,15 @@ absdcl:   /* an absolute declarator */\n \n absdcl_maybe_attribute:   /* absdcl maybe_attribute, but not just attributes */\n \t/* empty */\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t NULL_TREE),\n-\t\t\t\t\tall_prefix_attributes); }\n+\t\t{ $$ = build_c_parm (current_declspecs, all_prefix_attributes,\n+\t\t\t\t     NULL_TREE); }\n \t| absdcl1\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $1),\n-\t\t\t\t\tall_prefix_attributes); }\n+\t\t{ $$ = build_c_parm (current_declspecs, all_prefix_attributes,\n+\t\t\t\t     $1); }\n \t| absdcl1_noea attributes\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $1),\n-\t\t\t\t\tchainon ($2, all_prefix_attributes)); }\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($2, all_prefix_attributes),\n+\t\t\t\t     $1); }\n \t;\n \n absdcl1:  /* a nonempty absolute declarator */\n@@ -1942,15 +1940,15 @@ absdcl1_ea:\n \n direct_absdcl1:\n \t  '(' maybe_attribute absdcl1 ')'\n-\t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n+\t\t{ $$ = $2 ? build_attrs_declarator ($2, $3) : $3; }\n \t| direct_absdcl1 '(' parmlist\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($3, $1); }\n \t| direct_absdcl1 array_declarator\n-\t\t{ $$ = set_array_declarator_type ($2, $1, true); }\n+\t\t{ $$ = set_array_declarator_inner ($2, $1, true); }\n \t| '(' parmlist\n-\t\t{ $$ = build_nt (CALL_EXPR, NULL_TREE, $2, NULL_TREE); }\n+\t\t{ $$ = build_function_declarator ($2, NULL_TREE); }\n \t| array_declarator\n-\t\t{ $$ = set_array_declarator_type ($1, NULL_TREE, true); }\n+\t\t{ $$ = set_array_declarator_inner ($1, NULL_TREE, true); }\n \t;\n \n /* The [...] part of a declarator for an array type.  */\n@@ -2526,22 +2524,19 @@ parms:\n    as found in a parmlist.  */\n parm:\n \t  declspecs_ts setspecs parm_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts setspecs notype_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts setspecs absdcl_maybe_attribute\n \t\t{ $$ = $3;\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_nots setspecs notype_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \n \t| declspecs_nots setspecs absdcl_maybe_attribute\n@@ -2553,22 +2548,19 @@ parm:\n    stack.  */\n firstparm:\n \t  declspecs_ts_nosa setspecs_fp parm_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts_nosa setspecs_fp notype_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts_nosa setspecs_fp absdcl_maybe_attribute\n \t\t{ $$ = $3;\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_nots_nosa setspecs_fp notype_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $3),\n-\t\t\t\t\tchainon ($4, all_prefix_attributes));\n+\t\t{ $$ = build_c_parm (current_declspecs,\n+\t\t\t\t     chainon ($4, all_prefix_attributes), $3);\n \t\t  POP_DECLSPEC_STACK; }\n \n \t| declspecs_nots_nosa setspecs_fp absdcl_maybe_attribute"}, {"sha": "e1da715ac8db27a8ea2ed7b36394362044c3cd45", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00325bce05275038af47ee3aa48800720817b686/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=00325bce05275038af47ee3aa48800720817b686", "patch": "@@ -188,7 +188,7 @@ extern void c_push_function_context (struct function *);\n extern void c_pop_function_context (struct function *);\n extern void push_parm_decl (tree);\n extern tree pushdecl_top_level (tree);\n-extern tree set_array_declarator_type (tree, tree, bool);\n+extern tree set_array_declarator_inner (tree, tree, bool);\n extern tree builtin_function (const char *, tree, int, enum built_in_class,\n \t\t\t      const char *, tree);\n extern void shadow_tag (tree);\n@@ -200,6 +200,9 @@ extern tree start_struct (enum tree_code, tree);\n extern void store_parm_decls (void);\n extern tree xref_tag (enum tree_code, tree);\n extern int c_expand_decl (tree);\n+extern tree build_c_parm (tree, tree, tree);\n+extern tree build_attrs_declarator (tree, tree);\n+extern tree build_function_declarator (tree, tree);\n extern tree make_pointer_declarator (tree, tree);\n \n /* in c-objc-common.c */"}]}