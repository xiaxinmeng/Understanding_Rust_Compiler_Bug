{"sha": "5294e4c32d617f2a52e47fb08d9b83b83885f469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5NGU0YzMyZDYxN2YyYTUyZTQ3ZmIwOGQ5YjgzYjgzODg1ZjQ2OQ==", "commit": {"author": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2014-03-28T20:41:45Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2014-03-28T20:41:45Z"}, "message": "re PR c++/60573 ([c++1y] ICE with defining generic function of nested class in class scope)\n\nFix PR c++/60573\n\n\tPR c++/60573\n\t* name-lookup.h (cp_binding_level): New transient field defining_class_p\n\tto indicate whether a scope is in the process of defining a class.\n\t* semantics.c (begin_class_definition): Set defining_class_p.\n\t* name-lookup.c (leave_scope): Reset defining_class_p.\n\t* parser.c (synthesize_implicit_template_parm): Use cp_binding_level::\n\tdefining_class_p rather than TYPE_BEING_DEFINED as the predicate for\n\tunwinding to class-defining scope to handle the erroneous definition of\n\ta generic function of an arbitrarily nested class within an enclosing\n\tclass.\n\n\tPR c++/60573\n\t* g++.dg/cpp1y/pr60573.C: New testcase.\n\nFrom-SVN: r208921", "tree": {"sha": "4b3b534d549cd7d1a2b7dadf8525239410356854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b3b534d549cd7d1a2b7dadf8525239410356854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5294e4c32d617f2a52e47fb08d9b83b83885f469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5294e4c32d617f2a52e47fb08d9b83b83885f469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5294e4c32d617f2a52e47fb08d9b83b83885f469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5294e4c32d617f2a52e47fb08d9b83b83885f469/comments", "author": null, "committer": null, "parents": [{"sha": "eee32b5ea3226842340d5779d5f02af7951d3842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee32b5ea3226842340d5779d5f02af7951d3842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee32b5ea3226842340d5779d5f02af7951d3842"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "49f0d4af2c502f6feb336ee773e49ba1e4ceb80d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -1,6 +1,20 @@\n+2014-03-28  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/60573\n+\t* name-lookup.h (cp_binding_level): New transient field defining_class_p\n+\tto indicate whether a scope is in the process of defining a class.\n+\t* semantics.c (begin_class_definition): Set defining_class_p.\n+\t* name-lookup.c (leave_scope): Reset defining_class_p.\n+\t* parser.c (synthesize_implicit_template_parm): Use cp_binding_level::\n+\tdefining_class_p rather than TYPE_BEING_DEFINED as the predicate for\n+\tunwinding to class-defining scope to handle the erroneous definition of\n+\ta generic function of an arbitrarily nested class within an enclosing\n+\tclass.\n+\n 2014-03-26  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n-        PR c++/52369\n-        * cp/method.c (walk_field_subobs): improve the diagnostic\n+\n+\tPR c++/52369\n+\t* cp/method.c (walk_field_subobs): improve the diagnostic\n \tlocations for both REFERENCE_TYPEs and non-static const members.\n \t* cp/init.c (diagnose_uninitialized_cst_or_ref_member): use %q#D\n \tinstead of %qD to be consistent with the c++11 diagnostic."}, {"sha": "0137c3f4a337019c974b9484e4231e445652a24c", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -1630,10 +1630,14 @@ leave_scope (void)\n       free_binding_level = scope;\n     }\n \n-  /* Find the innermost enclosing class scope, and reset\n-     CLASS_BINDING_LEVEL appropriately.  */\n   if (scope->kind == sk_class)\n     {\n+      /* Reset DEFINING_CLASS_P to allow for reuse of a\n+\t class-defining scope in a non-defining context.  */\n+      scope->defining_class_p = 0;\n+\n+      /* Find the innermost enclosing class scope, and reset\n+\t CLASS_BINDING_LEVEL appropriately.  */\n       class_binding_level = NULL;\n       for (scope = current_binding_level; scope; scope = scope->level_chain)\n \tif (scope->kind == sk_class)"}, {"sha": "40e0338ca7337ce5ca7bb22f56c9bd9a3614412d", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -255,7 +255,14 @@ struct GTY(()) cp_binding_level {\n   unsigned more_cleanups_ok : 1;\n   unsigned have_cleanups : 1;\n \n-  /* 24 bits left to fill a 32-bit word.  */\n+  /* Transient state set if this scope is of sk_class kind\n+     and is in the process of defining 'this_entity'.  Reset\n+     on leaving the class definition to allow for the scope\n+     to be subsequently re-used as a non-defining scope for\n+     'this_entity'.  */\n+  unsigned defining_class_p : 1;\n+\n+  /* 23 bits left to fill a 32-bit word.  */\n };\n \n /* The binding level currently in effect.  */"}, {"sha": "5d8446d86405b5295edb53251a9d4619c2d190e3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -31999,7 +31999,7 @@ synthesize_implicit_template_parm  (cp_parser *parser)\n \t{\n \t  /* If not defining a class, then any class scope is a scope level in\n \t     an out-of-line member definition.  In this case simply wind back\n-\t     beyond the first such scope to inject the template argument list.\n+\t     beyond the first such scope to inject the template parameter list.\n \t     Otherwise wind back to the class being defined.  The latter can\n \t     occur in class member friend declarations such as:\n \n@@ -32010,12 +32010,23 @@ synthesize_implicit_template_parm  (cp_parser *parser)\n \t\t friend void A::foo (auto);\n \t       };\n \n-\t    The template argument list synthesized for the friend declaration\n-\t    must be injected in the scope of 'B', just beyond the scope of 'A'\n-\t    introduced by 'A::'.  */\n+\t    The template parameter list synthesized for the friend declaration\n+\t    must be injected in the scope of 'B'.  This can also occur in\n+\t    erroneous cases such as:\n \n-\t  while (scope->kind == sk_class\n-\t\t && !TYPE_BEING_DEFINED (scope->this_entity))\n+\t       struct A {\n+\t         struct B {\n+\t\t   void foo (auto);\n+\t\t };\n+\t\t void B::foo (auto) {}\n+\t       };\n+\n+\t    Here the attempted definition of 'B::foo' within 'A' is ill-formed\n+\t    but, nevertheless, the template parameter list synthesized for the\n+\t    declarator should be injected into the scope of 'A' as if the\n+\t    ill-formed template was specified explicitly.  */\n+\n+\t  while (scope->kind == sk_class && !scope->defining_class_p)\n \t    {\n \t      parent_scope = scope;\n \t      scope = scope->level_chain;"}, {"sha": "07d105769576f4cc85983809a9d92a2b49ede21c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -2777,6 +2777,7 @@ begin_class_definition (tree t)\n   maybe_process_partial_specialization (t);\n   pushclass (t);\n   TYPE_BEING_DEFINED (t) = 1;\n+  class_binding_level->defining_class_p = 1;\n \n   if (flag_pack_struct)\n     {"}, {"sha": "5d9b43358f707e8432469cb8cc9bbc146d0f46d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -1,3 +1,8 @@\n+2014-03-28  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/60573\n+\t* g++.dg/cpp1y/pr60573.C: New testcase.\n+\n 2014-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/60693"}, {"sha": "2f607071c4fdcc3720fd33012d6187a2da215515", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60573.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294e4c32d617f2a52e47fb08d9b83b83885f469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C?ref=5294e4c32d617f2a52e47fb08d9b83b83885f469", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/60573\n+// { dg-do compile { target c++1y } }\n+// { dg-options \"\" }\n+\n+struct A\n+{\n+  struct B\n+  {\n+    void foo(auto);\n+  };\n+\n+  void B::foo(auto) {}  // { dg-error \"cannot define\" }\n+\n+  struct X\n+  {\n+    struct Y\n+    {\n+      struct Z\n+      {\n+        void foo(auto);\n+      };\n+    };\n+\n+    void Y::Z::foo(auto) {}  // { dg-error \"cannot define\" }\n+  };\n+\n+  void X::Y::Z::foo(auto) {}  // { dg-error \"cannot define\" }\n+};"}]}