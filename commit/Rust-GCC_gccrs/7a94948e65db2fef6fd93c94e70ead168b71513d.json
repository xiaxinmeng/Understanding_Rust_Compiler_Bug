{"sha": "7a94948e65db2fef6fd93c94e70ead168b71513d", "node_id": "C_kwDOANBUbNoAKDdhOTQ5NDhlNjVkYjJmZWY2ZmQ5M2M5NGU3MGVhZDE2OGI3MTUxM2Q", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-26T18:50:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-26T18:50:14Z"}, "message": "Merge #1283\n\n1283: const folding in gccrs: remove ConstCtx class. r=philberty a=abbasfaisal\n\nCard: [Link](https://github.com/Rust-GCC/gccrs/projects/16#card-82300522)\r\n\r\nThis class had potential to hinder porting further const folding code from C++. This edit makes it easy to copy code from constexpr.cc to rust-constexpr.cc and so on.\r\n\r\nStructs `constexpr_ctx` and `constexpr_global_ctx` have been copied as well as to keep `constexpr_ops_count` after removing the class. These structs will be filled further as the port carries on. The prototypes inside ConstCtx have been copied over to rust-constexpr.cc as static prototypes.\r\n\n\nCo-authored-by: Faisal Abbas <90.abbasfaisal@gmail.com>", "tree": {"sha": "9d408e4971321f0e1bd887efda2ccf1f1c8553bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d408e4971321f0e1bd887efda2ccf1f1c8553bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a94948e65db2fef6fd93c94e70ead168b71513d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJij8vmCRBK7hj4Ov3rIwAA7sQIAEAxvkF/bTeLL39C/fDxFjmN\ninTFjrm42jKGKkCu3Gt7tWap8WxMWpgeUgiIgYw2rD4mVsf7zezU4bw9m+Qk72wX\nhf0dS1TxpfT+JYhLqXjAI34DxDUOOFclUK7Vocf/wNmLWDDzZ0I7y6xZpwm+ao9V\nscO0HJxvG1CPJknknwZZ7aBsXfXOC8eRSuCj3uj/Sg7LsHOC5akn4dLyKrko3P3X\nXqFW9QX1GwO0EW8/TqtUUdQtjE4+SN+Jk2rXKXlgFoRQHEcPVh72TdS7a3GXd1+n\ng2AsQmhKO/YoxWTkSWAYmRrv8NW8XM9drwGlme15hKn/f6c8x0f8IvcFhQ+eyQg=\n=Vgjw\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d408e4971321f0e1bd887efda2ccf1f1c8553bf\nparent a4455d8f522cad015f3540f118f8c6ce2775fccb\nparent 1a04c501e41ec0dee74d520a7ca4373cb7df7a48\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1653591014 +0000\ncommitter GitHub <noreply@github.com> 1653591014 +0000\n\nMerge #1283\n\n1283: const folding in gccrs: remove ConstCtx class. r=philberty a=abbasfaisal\n\nCard: [Link](https://github.com/Rust-GCC/gccrs/projects/16#card-82300522)\r\n\r\nThis class had potential to hinder porting further const folding code from C++. This edit makes it easy to copy code from constexpr.cc to rust-constexpr.cc and so on.\r\n\r\nStructs `constexpr_ctx` and `constexpr_global_ctx` have been copied as well as to keep `constexpr_ops_count` after removing the class. These structs will be filled further as the port carries on. The prototypes inside ConstCtx have been copied over to rust-constexpr.cc as static prototypes.\r\n\n\nCo-authored-by: Faisal Abbas <90.abbasfaisal@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a94948e65db2fef6fd93c94e70ead168b71513d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a94948e65db2fef6fd93c94e70ead168b71513d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a94948e65db2fef6fd93c94e70ead168b71513d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4455d8f522cad015f3540f118f8c6ce2775fccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4455d8f522cad015f3540f118f8c6ce2775fccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4455d8f522cad015f3540f118f8c6ce2775fccb"}, {"sha": "1a04c501e41ec0dee74d520a7ca4373cb7df7a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a04c501e41ec0dee74d520a7ca4373cb7df7a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a04c501e41ec0dee74d520a7ca4373cb7df7a48"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "3de80d995323825fedf6227c6d46d9a0216d42ea", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -555,7 +555,7 @@ HIRCompileBase::compile_constant_item (\n   if (!is_block_expr)\n     {\n       tree value = CompileExpr::Compile (const_value_expr, ctx);\n-      folded_expr = ConstCtx::fold (value);\n+      folded_expr = fold_expr (value);\n     }\n   else\n     {\n@@ -605,7 +605,7 @@ HIRCompileBase::compile_constant_item (\n       // lets fold it into a call expr\n       tree call = build_call_array_loc (locus.gcc_location (), const_type,\n \t\t\t\t\tfndecl, 0, NULL);\n-      folded_expr = ConstCtx::fold (call);\n+      folded_expr = fold_expr (call);\n     }\n \n   return named_constant_expression (const_type, ident, folded_expr, locus);"}, {"sha": "b7dad12edd4cfdb6537979fa0300c6d52f8e0d01", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -449,7 +449,7 @@ CompileExpr::visit (HIR::CallExpr &expr)\n \t{\n \t  HIR::Expr *discrim_expr = variant->get_discriminant ();\n \t  tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n-\t  tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+\t  tree folded_discrim_expr = fold_expr (discrim_expr_node);\n \t  tree qualifier = folded_discrim_expr;\n \n \t  ctor_arguments.push_back (qualifier);"}, {"sha": "593e1f978fe030493927c3215373ccf5200b2d3f", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -492,7 +492,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n       {\n \tHIR::Expr *discrim_expr = variant->get_discriminant ();\n \ttree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n-\ttree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+\ttree folded_discrim_expr = fold_expr (discrim_expr_node);\n \ttree qualifier = folded_discrim_expr;\n \n \tctor_arguments.push_back (qualifier);"}, {"sha": "2f3449a1eb799d75612ff38dea18b1d25f7817a9", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -52,7 +52,7 @@ CompilePatternCaseLabelExpr::visit (HIR::PathInExpression &pattern)\n \n   HIR::Expr *discrim_expr = variant->get_discriminant ();\n   tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n-  tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+  tree folded_discrim_expr = fold_expr (discrim_expr_node);\n   tree case_low = folded_discrim_expr;\n \n   case_label_expr\n@@ -132,7 +132,7 @@ compile_range_pattern_bound (HIR::RangePatternBound *bound,\n \tresult = ResolvePathRef::Compile (ref.get_path (), ctx);\n \n \t// If the path resolves to a const expression, fold it.\n-\tresult = ConstCtx::fold (result);\n+\tresult = fold_expr (result);\n       }\n       break;\n \n@@ -143,7 +143,7 @@ compile_range_pattern_bound (HIR::RangePatternBound *bound,\n \tresult = ResolvePathRef::Compile (ref.get_qualified_path (), ctx);\n \n \t// If the path resolves to a const expression, fold it.\n-\tresult = ConstCtx::fold (result);\n+\tresult = fold_expr (result);\n       }\n     }\n "}, {"sha": "4423912237978e3be0369cbac9e21052b042a9cf", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -99,7 +99,7 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n       // make the ctor for the union\n       HIR::Expr *discrim_expr = variant->get_discriminant ();\n       tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n-      tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+      tree folded_discrim_expr = fold_expr (discrim_expr_node);\n       tree qualifier = folded_discrim_expr;\n \n       return ctx->get_backend ()->constructor_expression (compiled_adt_type,"}, {"sha": "240abe0497e330a17f12dc8ab724a32ff6ee13d7", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -371,7 +371,7 @@ TyTyResolveCompile::visit (const TyTy::ArrayType &type)\n   tree element_type\n     = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n   tree capacity_expr = CompileExpr::Compile (&type.get_capacity_expr (), ctx);\n-  tree folded_capacity_expr = ConstCtx::fold (capacity_expr);\n+  tree folded_capacity_expr = fold_expr (capacity_expr);\n \n   translated\n     = ctx->get_backend ()->array_type (element_type, folded_capacity_expr);"}, {"sha": "f77fb3a8e6d3f4d64ca9d9d8040ca1a4c8241054", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -29,6 +29,18 @@\n namespace Rust {\n namespace Compile {\n \n+struct constexpr_global_ctx\n+{\n+  HOST_WIDE_INT constexpr_ops_count;\n+\n+  constexpr_global_ctx () : constexpr_ops_count (0) {}\n+};\n+\n+struct constexpr_ctx\n+{\n+  constexpr_global_ctx *global;\n+};\n+\n static tree\n constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p,\n \t\t  bool unshare_p);\n@@ -39,22 +51,39 @@ static void\n non_const_var_error (location_t loc, tree r);\n \n static tree\n-get_function_named_in_call (tree t);\n+constexpr_expression (const constexpr_ctx *ctx, tree);\n \n-ConstCtx::ConstCtx () : constexpr_ops_count (0) {}\n+static tree\n+constexpr_fn_retval (const constexpr_ctx *ctx, tree r);\n+\n+static tree\n+eval_store_expression (const constexpr_ctx *ctx, tree r);\n+\n+static tree\n+eval_call_expression (const constexpr_ctx *ctx, tree r);\n+\n+static tree\n+eval_binary_expression (const constexpr_ctx *ctx, tree r);\n+\n+static tree\n+get_function_named_in_call (tree t);\n \n tree\n-ConstCtx::fold (tree expr)\n+fold_expr (tree expr)\n {\n-  tree folded = ConstCtx ().constexpr_expression (expr);\n+  constexpr_global_ctx global_ctx;\n+  constexpr_ctx ctx = {&global_ctx};\n+\n+  tree folded = constexpr_expression (&ctx, expr);\n   rust_assert (folded != NULL_TREE);\n   return folded;\n }\n \n-tree\n-ConstCtx::constexpr_expression (tree t)\n+static tree\n+constexpr_expression (const constexpr_ctx *ctx, tree t)\n {\n   location_t loc = EXPR_LOCATION (t);\n+\n   if (CONSTANT_CLASS_P (t))\n     {\n       if (TREE_OVERFLOW (t))\n@@ -67,7 +96,7 @@ ConstCtx::constexpr_expression (tree t)\n     }\n \n   // Avoid excessively long constexpr evaluations\n-  if (++constexpr_ops_count >= constexpr_ops_limit)\n+  if (++ctx->global->constexpr_ops_count >= constexpr_ops_limit)\n     {\n       rust_error_at (\n \tLocation (loc),\n@@ -136,20 +165,20 @@ ConstCtx::constexpr_expression (tree t)\n     case LTGT_EXPR:\n     case RANGE_EXPR:\n     case COMPLEX_EXPR:\n-      r = eval_binary_expression (t);\n+      r = eval_binary_expression (ctx, t);\n       break;\n \n     case CALL_EXPR:\n-      r = eval_call_expression (t);\n+      r = eval_call_expression (ctx, t);\n       break;\n \n     case RETURN_EXPR:\n       rust_assert (TREE_OPERAND (t, 0) != NULL_TREE);\n-      r = constexpr_expression (TREE_OPERAND (t, 0));\n+      r = constexpr_expression (ctx, TREE_OPERAND (t, 0));\n       break;\n \n     case MODIFY_EXPR:\n-      r = eval_store_expression (t);\n+      r = eval_store_expression (ctx, t);\n       break;\n \n     default:\n@@ -159,8 +188,8 @@ ConstCtx::constexpr_expression (tree t)\n   return r;\n }\n \n-tree\n-ConstCtx::eval_store_expression (tree t)\n+static tree\n+eval_store_expression (const constexpr_ctx *ctx, tree t)\n {\n   tree init = TREE_OPERAND (t, 1);\n   if (TREE_CLOBBER_P (init))\n@@ -176,7 +205,7 @@ ConstCtx::eval_store_expression (tree t)\n     {\n       /* Evaluate the value to be stored without knowing what object it will be\n \t stored in, so that any side-effects happen first.  */\n-      init = ConstCtx::fold (init);\n+      init = fold_expr (init);\n     }\n \n   bool evaluated = false;\n@@ -190,7 +219,7 @@ ConstCtx::eval_store_expression (tree t)\n \t    object = probe;\n \t  else\n \t    {\n-\t      probe = constexpr_expression (probe);\n+\t      probe = constexpr_expression (ctx, probe);\n \t      evaluated = true;\n \t    }\n \t  break;\n@@ -202,16 +231,15 @@ ConstCtx::eval_store_expression (tree t)\n \n /* Subroutine of cxx_eval_constant_expression.\n  Like cxx_eval_unary_expression, except for binary expressions.  */\n-\n-tree\n-ConstCtx::eval_binary_expression (tree t)\n+static tree\n+eval_binary_expression (const constexpr_ctx *ctx, tree t)\n {\n   tree orig_lhs = TREE_OPERAND (t, 0);\n   tree orig_rhs = TREE_OPERAND (t, 1);\n   tree lhs, rhs;\n \n-  lhs = constexpr_expression (orig_lhs);\n-  rhs = constexpr_expression (orig_rhs);\n+  lhs = constexpr_expression (ctx, orig_lhs);\n+  rhs = constexpr_expression (ctx, orig_rhs);\n \n   location_t loc = EXPR_LOCATION (t);\n   enum tree_code code = TREE_CODE (t);\n@@ -223,27 +251,27 @@ ConstCtx::eval_binary_expression (tree t)\n // Subroutine of cxx_eval_constant_expression.\n // Evaluate the call expression tree T in the context of OLD_CALL expression\n // evaluation.\n-tree\n-ConstCtx::eval_call_expression (tree t)\n+static tree\n+eval_call_expression (const constexpr_ctx *ctx, tree t)\n {\n   tree fun = get_function_named_in_call (t);\n-  return constexpr_fn_retval (DECL_SAVED_TREE (fun));\n+  return constexpr_fn_retval (ctx, DECL_SAVED_TREE (fun));\n }\n \n // Subroutine of check_constexpr_fundef.  BODY is the body of a function\n // declared to be constexpr, or a sub-statement thereof.  Returns the\n // return value if suitable, error_mark_node for a statement not allowed in\n // a constexpr function, or NULL_TREE if no return value was found.\n-tree\n-ConstCtx::constexpr_fn_retval (tree body)\n+static tree\n+constexpr_fn_retval (const constexpr_ctx *ctx, tree body)\n {\n   switch (TREE_CODE (body))\n     {\n       case STATEMENT_LIST: {\n \ttree expr = NULL_TREE;\n \tfor (tree stmt : tsi_range (body))\n \t  {\n-\t    tree s = constexpr_fn_retval (stmt);\n+\t    tree s = constexpr_fn_retval (ctx, stmt);\n \t    if (s == error_mark_node)\n \t      return error_mark_node;\n \t    else if (s == NULL_TREE)\n@@ -258,7 +286,7 @@ ConstCtx::constexpr_fn_retval (tree body)\n       }\n \n     case RETURN_EXPR:\n-      return constexpr_expression (body);\n+      return constexpr_expression (ctx, body);\n \n       case DECL_EXPR: {\n \ttree decl = DECL_EXPR_DECL (body);\n@@ -270,11 +298,11 @@ ConstCtx::constexpr_fn_retval (tree body)\n       }\n \n     case CLEANUP_POINT_EXPR:\n-      return constexpr_fn_retval (TREE_OPERAND (body, 0));\n+      return constexpr_fn_retval (ctx, TREE_OPERAND (body, 0));\n \n       case BIND_EXPR: {\n \ttree b = BIND_EXPR_BODY (body);\n-\treturn constexpr_fn_retval (b);\n+\treturn constexpr_fn_retval (ctx, b);\n       }\n       break;\n "}, {"sha": "3cfcec817a9ff59baa72a1114c1c36c65a249cb7", "filename": "gcc/rust/backend/rust-constexpr.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-constexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a94948e65db2fef6fd93c94e70ead168b71513d/gcc%2Frust%2Fbackend%2Frust-constexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.h?ref=7a94948e65db2fef6fd93c94e70ead168b71513d", "patch": "@@ -23,22 +23,7 @@\n namespace Rust {\n namespace Compile {\n \n-class ConstCtx\n-{\n-public:\n-  static tree fold (tree);\n-\n-  tree constexpr_expression (tree);\n-  tree eval_binary_expression (tree);\n-  tree eval_call_expression (tree);\n-  tree constexpr_fn_retval (tree);\n-  tree eval_store_expression (tree);\n-\n-private:\n-  ConstCtx ();\n-\n-  HOST_WIDE_INT constexpr_ops_count;\n-};\n+extern tree fold_expr (tree);\n \n } // namespace Compile\n } // namespace Rust"}]}