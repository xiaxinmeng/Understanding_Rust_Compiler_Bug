{"sha": "58487c21b6a47c3fff6c6958684de866216a5593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg0ODdjMjFiNmE0N2MzZmZmNmM2OTU4Njg0ZGU4NjYyMTZhNTU5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-20T11:32:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-20T11:32:51Z"}, "message": "PR c++/90532 Ensure __is_constructible(T[]) is false\n\nAn array of an unknown bound is an incomplete type, so no object of such\na type can be constructed. This means __is_constructible should always\nbe false for an array of unknown bound.\n\nThis patch also changes the std::is_default_constructible trait to use\nstd::is_constructible, which now gives the right answer for arrays of\nunknown bound.\n\ngcc/cp:\n\n\tPR c++/90532 Ensure __is_constructible(T[]) is false\n\t* method.c (is_xible_helper): Return error_mark_node for construction\n\tof an array of unknown bound.\n\ngcc/testsuite:\n\n\tPR c++/90532 Ensure __is_constructible(T[]) is false\n\t* g++.dg/ext/90532.C: New test.\n\nlibstdc++-v3:\n\n\tPR c++/90532 Ensure __is_constructible(T[]) is false\n\t* include/std/type_traits (__do_is_default_constructible_impl)\n\t(__is_default_constructible_atom, __is_default_constructible_safe):\n\tRemove.\n\t(is_default_constructible): Use is_constructible.\n\t* testsuite/20_util/is_constructible/value.cc: Check int[] case.\n\t* testsuite/20_util/is_default_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_default_constructible/value.cc:\n\tLikewise.\n\nFrom-SVN: r271412", "tree": {"sha": "283b8a54c46647b461db6ecb01b894ed536af56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283b8a54c46647b461db6ecb01b894ed536af56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58487c21b6a47c3fff6c6958684de866216a5593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58487c21b6a47c3fff6c6958684de866216a5593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58487c21b6a47c3fff6c6958684de866216a5593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58487c21b6a47c3fff6c6958684de866216a5593/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eefa592aa0b0e0ba9f144ede15389cbf7496cc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefa592aa0b0e0ba9f144ede15389cbf7496cc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefa592aa0b0e0ba9f144ede15389cbf7496cc64"}], "stats": {"total": 133, "additions": 86, "deletions": 47}, "files": [{"sha": "c8eb936aec378ea97026ae69f630b63bf6e1a5fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -1,3 +1,9 @@\n+2019-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/90532 Ensure __is_constructible(T[]) is false\n+\t* method.c (is_xible_helper): Return error_mark_node for construction\n+\tof an array of unknown bound.\n+\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR c++/89433"}, {"sha": "53fa85b9790f87e1b7f115c2353e012989d30e40", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -1201,6 +1201,8 @@ is_xible_helper (enum tree_code code, tree to, tree from, bool trivial)\n     expr = assignable_expr (to, from);\n   else if (trivial && from && TREE_CHAIN (from))\n     return error_mark_node; // only 0- and 1-argument ctors can be trivial\n+  else if (TREE_CODE (to) == ARRAY_TYPE && !TYPE_DOMAIN (to))\n+    return error_mark_node; // can't construct an array of unknown bound\n   else\n     expr = constructible_expr (to, from);\n   return expr;"}, {"sha": "36db11bb183c201dcea4a705aa7c3ca47dcc2566", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -1,3 +1,8 @@\n+2019-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/90532 Ensure __is_constructible(T[]) is false\n+\t* g++.dg/ext/90532.C: New test.\n+\n 2019-05-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/avx512f-simd-1.c: New test."}, {"sha": "acdc4e2b07e2a3d3bb4a2a378acc2f01f4c604d9", "filename": "gcc/testsuite/g++.dg/ext/90532.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2F90532.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2F90532.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2F90532.C?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile { target c++11 } }\n+// PR c++/90532\n+static_assert( !__is_constructible(int[]), \"\" );\n+static_assert( !__is_constructible(int[], int), \"\" );\n+static_assert( !__is_constructible(int[], int[]), \"\" );\n+static_assert( !__is_trivially_constructible(int[]), \"\" );\n+static_assert( !__is_trivially_constructible(int[], int), \"\" );\n+static_assert( !__is_trivially_constructible(int[], int[]), \"\" );\n+static_assert( !__is_trivially_constructible(int[], int(&)[]), \"\" );\n+static_assert( !__is_trivially_constructible(int[], void), \"\" );\n+struct A { };\n+static_assert( !__is_constructible(A[]), \"\" );\n+static_assert( !__is_constructible(A[], const A&), \"\" );\n+static_assert( !__is_constructible(A[], const A[]), \"\" );\n+static_assert( !__is_trivially_constructible(A[]), \"\" );\n+static_assert( !__is_trivially_constructible(A[], const A&), \"\" );\n+static_assert( !__is_trivially_constructible(A[], const A[]), \"\" );\n+static_assert( !__is_trivially_constructible(A[], A(&)[]), \"\" );\n+static_assert( !__is_trivially_constructible(A[], void), \"\" );\n+struct B { B(); };\n+static_assert( !__is_constructible(B[]), \"\" );\n+static_assert( !__is_constructible(B[], const B&), \"\" );\n+static_assert( !__is_trivially_constructible(B[]), \"\" );\n+static_assert( !__is_trivially_constructible(B[], const B&), \"\" );\n+static_assert( !__is_trivially_constructible(B[], const B[]), \"\" );\n+static_assert( !__is_trivially_constructible(B[], B(&)[]), \"\" );\n+static_assert( !__is_trivially_constructible(B[], void), \"\" );"}, {"sha": "c5b8d6016b0d7f403877905e6ec9987fd5c66433", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -1,3 +1,16 @@\n+2019-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/90532 Ensure __is_constructible(T[]) is false\n+\t* include/std/type_traits (__do_is_default_constructible_impl)\n+\t(__is_default_constructible_atom, __is_default_constructible_safe):\n+\tRemove.\n+\t(is_default_constructible): Use is_constructible.\n+\t* testsuite/20_util/is_constructible/value.cc: Check int[] case.\n+\t* testsuite/20_util/is_default_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_default_constructible/value.cc:\n+\tLikewise.\n+\n 2019-05-20  P\u00e1draig Brady  <pbrady@fb.com>\n \n \t* libstdc++-v3/include/ext/new_allocator.h (deallocate): Pass the size"}, {"sha": "3a622eb61e01a493347ea7bb4447dd0861b37fc2", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -878,58 +878,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_nt_destructible_safe<_Tp>::type\n     { };\n \n-  struct __do_is_default_constructible_impl\n-  {\n-    template<typename _Tp, typename = decltype(_Tp())>\n-      static true_type __test(int);\n-\n-    template<typename>\n-      static false_type __test(...);\n-  };\n-\n-  template<typename _Tp>\n-    struct __is_default_constructible_impl\n-    : public __do_is_default_constructible_impl\n-    {\n-      typedef decltype(__test<_Tp>(0)) type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_default_constructible_atom\n-    : public __and_<__not_<is_void<_Tp>>,\n-                    __is_default_constructible_impl<_Tp>>\n-    { };\n-\n-  template<typename _Tp, bool = is_array<_Tp>::value>\n-    struct __is_default_constructible_safe;\n-\n-  // The following technique is a workaround for a current core language\n-  // restriction, which does not allow for array types to occur in\n-  // functional casts of the form T().  Complete arrays can be default-\n-  // constructed, if the element type is default-constructible, but\n-  // arrays with unknown bounds are not.\n-  template<typename _Tp>\n-    struct __is_default_constructible_safe<_Tp, true>\n-    : public __and_<__is_array_known_bounds<_Tp>,\n-\t\t    __is_default_constructible_atom<typename\n-                      remove_all_extents<_Tp>::type>>\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_default_constructible_safe<_Tp, false>\n-    : public __is_default_constructible_atom<_Tp>::type\n+  /// is_constructible\n+  template<typename _Tp, typename... _Args>\n+    struct is_constructible\n+      : public __bool_constant<__is_constructible(_Tp, _Args...)>\n     { };\n \n   /// is_default_constructible\n   template<typename _Tp>\n     struct is_default_constructible\n-    : public __is_default_constructible_safe<_Tp>::type\n-    { };\n-\n-  /// is_constructible\n-  template<typename _Tp, typename... _Args>\n-    struct is_constructible\n-      : public __bool_constant<__is_constructible(_Tp, _Args...)>\n+    : public is_constructible<_Tp>::type\n     { };\n \n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>"}, {"sha": "a8b40921d929ee67b26c9969e21002fcdf641efb", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -35,4 +35,11 @@ void test01()\n   static_assert(test_property<is_constructible, ExplicitClass>(false), \"\");\n   static_assert(test_property<is_constructible, ExplicitClass,\n \t\tint, double>(false), \"\");\n+  static_assert(test_property<is_constructible, int[]>(false), \"PR c++/90532\");\n+  static_assert(test_property<is_constructible,\n+\t\t__gnu_test::construct::Empty[]>(false), \"PR c++/90532\");\n+  static_assert(test_property<is_constructible,\n+\t\t__gnu_test::construct::Ukn[]>(false), \"PR c++/90532\");\n+  static_assert(test_property<is_constructible,\n+\t\t__gnu_test::construct::nAny[]>(false), \"PR c++/90532\");\n }"}, {"sha": "f6df45d841bc9f696e2c7ded411d3638a745a5ca", "filename": "libstdc++-v3/testsuite/20_util/is_default_constructible/value.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -138,3 +138,13 @@ static_assert(!std::is_default_constructible<DelCopy>::value, \"Error\");\n static_assert(!std::is_default_constructible<const DelCopy>::value, \"Error\");\n static_assert(!std::is_default_constructible<DelDtor>::value, \"Error\");\n static_assert(!std::is_default_constructible<const DelDtor>::value, \"Error\");\n+\n+static_assert(!std::is_default_constructible<int[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<Empty[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<B[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<D[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<U[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<Ukn[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<Ellipsis[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<Any[]>::value, \"PR c++/90532\");\n+static_assert(!std::is_default_constructible<nAny[]>::value, \"PR c++/90532\");"}, {"sha": "0979ceff7e37f686f8d6a5129ed8db9857c9f8ce", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_constructible/value.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -180,4 +180,6 @@ void test01()\n \t\tMoveOnly, const MoveOnly&>(false), \"\");\n   static_assert(test_property<is_trivially_constructible,\n \t\tMoveOnly2>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible,\n+\t\tint[]>(false), \"PR c++/90532\");\n }"}, {"sha": "f457721925d2e5758aa57a878d72d740ebda0c33", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_default_constructible/value.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58487c21b6a47c3fff6c6958684de866216a5593/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc?ref=58487c21b6a47c3fff6c6958684de866216a5593", "patch": "@@ -62,4 +62,13 @@ void test01()\n \t\tconstruct::Nontrivial>(false), \"\");\n   static_assert(test_category<is_trivially_default_constructible, \n \t\tHasTemplateCtor>(true), \"\");\n+\n+  static_assert(test_category<is_trivially_default_constructible,\n+\t\tint[]>(false), \"PR c++/90532\");\n+  struct A { };\n+  static_assert(test_category<is_trivially_default_constructible,\n+\t\tA[]>(false), \"PR c++/90532\");\n+  struct B { B() { } };\n+  static_assert(test_category<is_trivially_default_constructible,\n+\t\tB[]>(false), \"PR c++/90532\");\n }"}]}