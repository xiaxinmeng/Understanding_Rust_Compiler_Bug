{"sha": "9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzYmNhMTE0M2JiNDA2YWEzNTllNjhhYjllMmU3YmJkYjJmNjk0Yw==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-11-21T15:52:49Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-11-21T15:52:49Z"}, "message": "Support clwb x86 instruction.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_CLWB_UNSET,\n\tOPTION_MASK_ISA_CLWB_SET): New.\n\t(ix86_handle_option): Handle OPT_mclwb.\n\t* config.gcc: Add clwbintrin.h.\n\t* config/i386/clwbintrin.h: New file.\n\t* config/i386/cpuid.h (bit_CLWB): Define.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect clwb. \n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__CLWB__.\n\t* config/i386/i386.c (ix86_target_string): Add -mclwb.\n\t(PTA_CLWB): Define.\n\t(ix86_option_override_internal): Handle new option.\n\t(ix86_valid_target_attribute_inner_p): Add clwb.\n\t(ix86_builtins): Add IX86_BUILTIN_CLWB.\n\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_clwb.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_CLWB.\n\t* config/i386/i386.h (TARGET_CLWB, TARGET_CLWB_P): Define.\n\t* config/i386/i386.md (unspecv): Add UNSPECV_CLWB.\n\t(clwb): New instruction.\n\t* config/i386/i386.opt: Add mclwb.\n\t* config/i386/x86intrin.h: Include clwbintrin.h.\n\ngcc/testsuite/\n\n\t* g++.dg/other/i386-2.C: Add -mclwb.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/clwb-1.c: New test.\n\t* gcc.target/i386/sse-12.c: Add new options.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r217933", "tree": {"sha": "61c4509cf0f85572ee22147effc6cd91804db37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c4509cf0f85572ee22147effc6cd91804db37f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dcc8af5cd0888813279eacb4fada71b2fbd359d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcc8af5cd0888813279eacb4fada71b2fbd359d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcc8af5cd0888813279eacb4fada71b2fbd359d"}], "stats": {"total": 180, "additions": 169, "deletions": 11}, "files": [{"sha": "5f8ede5caa3191c6e32f843fdaf07533384d9ca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,3 +1,27 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_CLWB_UNSET,\n+\tOPTION_MASK_ISA_CLWB_SET): New.\n+\t(ix86_handle_option): Handle OPT_mclwb.\n+\t* config.gcc: Add clwbintrin.h.\n+\t* config/i386/clwbintrin.h: New file.\n+\t* config/i386/cpuid.h (bit_CLWB): Define.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect clwb. \n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__CLWB__.\n+\t* config/i386/i386.c (ix86_target_string): Add -mclwb.\n+\t(PTA_CLWB): Define.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(ix86_valid_target_attribute_inner_p): Add clwb.\n+\t(ix86_builtins): Add IX86_BUILTIN_CLWB.\n+\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_clwb.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_CLWB.\n+\t* config/i386/i386.h (TARGET_CLWB, TARGET_CLWB_P): Define.\n+\t* config/i386/i386.md (unspecv): Add UNSPECV_CLWB.\n+\t(clwb): New instruction.\n+\t* config/i386/i386.opt: Add mclwb.\n+\t* config/i386/x86intrin.h: Include clwbintrin.h.\n+\n 2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VBMI_SET"}, {"sha": "bad09887706628761d205973221dea01a20c96e4", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -85,6 +85,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_XSAVES | OPTION_MASK_ISA_XSAVE)\n #define OPTION_MASK_ISA_XSAVEC_SET \\\n   (OPTION_MASK_ISA_XSAVEC | OPTION_MASK_ISA_XSAVE)\n+#define OPTION_MASK_ISA_CLWB_SET OPTION_MASK_ISA_CLWB\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -181,6 +182,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_CLFLUSHOPT_UNSET OPTION_MASK_ISA_CLFLUSHOPT\n #define OPTION_MASK_ISA_XSAVEC_UNSET OPTION_MASK_ISA_XSAVEC\n #define OPTION_MASK_ISA_XSAVES_UNSET OPTION_MASK_ISA_XSAVES\n+#define OPTION_MASK_ISA_CLWB_UNSET OPTION_MASK_ISA_CLWB\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -901,6 +903,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mclwb:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLWB_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLWB_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CLWB_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLWB_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "766f13b363ec8397e41f82e98d86142f8a266c23", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -369,7 +369,7 @@ i[34567]86-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -390,7 +390,7 @@ x86_64-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "9020c95521320bc9c9c3e3d9431800e77d1cdf5e", "filename": "gcc/config/i386/clwbintrin.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fclwbintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fclwbintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fclwbintrin.h?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <clwbintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _CLWBINTRIN_H_INCLUDED\n+#define _CLWBINTRIN_H_INCLUDED\n+\n+#ifndef __CLWB__\n+#pragma GCC push_options\n+#pragma GCC target(\"clwb\")\n+#define __DISABLE_CLWB__\n+#endif /* __CLWB__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_clwb (void *__A)\n+{\n+  __builtin_ia32_clwb (__A);\n+}\n+\n+#ifdef __DISABLE_CLWB__\n+#undef __DISABLE_CLWB__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_CLWB__ */\n+\n+#endif /* _CLWBINTRIN_H_INCLUDED */"}, {"sha": "6ee928bc746f4d4c9473324829317ed6971d1af2", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -78,6 +78,7 @@\n #define bit_ADX\t(1 << 19)\n #define bit_AVX512IFMA\t(1 << 21)\n #define bit_CLFLUSHOPT\t(1 << 23)\n+#define bit_CLWB\t(1 << 24)\n #define bit_AVX512PF\t(1 << 26)\n #define bit_AVX512ER\t(1 << 27)\n #define bit_AVX512CD\t(1 << 28)"}, {"sha": "c7acfbac3ee15a2f6fa76263eff160453ebbc2f0", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -412,7 +412,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n   unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n-  unsigned int has_avx512vbmi = 0, has_avx512ifma = 0;\n+  unsigned int has_avx512vbmi = 0, has_avx512ifma = 0, has_clwb = 0;\n \n   bool arch;\n \n@@ -491,6 +491,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512cd = ebx & bit_AVX512CD;\n       has_sha = ebx & bit_SHA;\n       has_clflushopt = ebx & bit_CLFLUSHOPT;\n+      has_clwb = ebx & bit_CLWB;\n       has_avx512dq = ebx & bit_AVX512DQ;\n       has_avx512bw = ebx & bit_AVX512BW;\n       has_avx512vl = ebx & bit_AVX512VL;\n@@ -930,6 +931,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512vl = has_avx512vl ? \" -mavx512vl\" : \" -mno-avx512vl\";\n       const char *avx512ifma = has_avx512ifma ? \" -mavx512ifma\" : \" -mno-avx512ifma\";\n       const char *avx512vbmi = has_avx512vbmi ? \" -mavx512vbmi\" : \" -mno-avx512vbmi\";\n+      const char *clwb = has_clwb ? \" -mclwb\" : \" -mno-clwb\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n@@ -939,7 +941,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tavx512ifma, avx512vbmi, NULL);\n+\t\t\tavx512ifma, avx512vbmi, clwb, NULL);\n     }\n \n done:"}, {"sha": "9742536083f9a119cdbf8a425bee8d777c9fa279", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -411,6 +411,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__XSAVES__\");\n   if (isa_flag & OPTION_MASK_ISA_MPX)\n     def_or_undef (parse_in, \"__MPX__\");\n+  if (isa_flag & OPTION_MASK_ISA_CLWB)\n+    def_or_undef (parse_in, \"__CLWB__\");\n }\n \n \f"}, {"sha": "960e4406366ed1fa86710f6afaa9d061418d00a5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -2657,6 +2657,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mxsavec\",\tOPTION_MASK_ISA_XSAVEC },\n     { \"-mxsaves\",\tOPTION_MASK_ISA_XSAVES },\n     { \"-mmpx\",          OPTION_MASK_ISA_MPX },\n+    { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB },\n   };\n \n   /* Flag options.  */\n@@ -3157,6 +3158,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512VL\t\t(HOST_WIDE_INT_1 << 52)\n #define PTA_AVX512IFMA\t\t(HOST_WIDE_INT_1 << 53)\n #define PTA_AVX512VBMI\t\t(HOST_WIDE_INT_1 << 54)\n+#define PTA_CLWB\t\t(HOST_WIDE_INT_1 << 55)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3716,6 +3718,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_PREFETCHWT1\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PREFETCHWT1))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PREFETCHWT1;\n+\tif (processor_alias_table[i].flags & PTA_CLWB\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLWB))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLWB;\n \tif (processor_alias_table[i].flags & PTA_CLFLUSHOPT\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLFLUSHOPT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLFLUSHOPT;\n@@ -4667,6 +4672,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"xsaves\",\tOPT_mxsaves),\n     IX86_ATTR_ISA (\"avx512vbmi\",\tOPT_mavx512vbmi),\n     IX86_ATTR_ISA (\"avx512ifma\",\tOPT_mavx512ifma),\n+    IX86_ATTR_ISA (\"clwb\",\tOPT_mclwb),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30128,6 +30134,9 @@ enum ix86_builtins\n   IX86_BUILTIN_SHA256MSG2,\n   IX86_BUILTIN_SHA256RNDS2,\n \n+  /* CLWB instructions.  */\n+  IX86_BUILTIN_CLWB,\n+\n   /* CLFLUSHOPT instructions.  */\n   IX86_BUILTIN_CLFLUSHOPT,\n \n@@ -33988,6 +33997,10 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_CLFLUSHOPT, \"__builtin_ia32_clflushopt\",\n \t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLFLUSHOPT);\n \n+  /* CLWB.  */\n+  def_builtin (OPTION_MASK_ISA_CLWB, \"__builtin_ia32_clwb\",\n+\t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLWB);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -38707,6 +38720,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n \n+    case IX86_BUILTIN_CLWB:\n+\targ0 = CALL_EXPR_ARG (exp, 0);\n+\top0 = expand_normal (arg0);\n+\ticode = CODE_FOR_clwb;\n+\tif (!insn_data[icode].operand[0].predicate (op0, Pmode))\n+\t  op0 = ix86_zero_extend_to_Pmode (op0);\n+\n+\temit_insn (gen_clwb (op0));\n+\treturn 0;\n+\n     case IX86_BUILTIN_CLFLUSHOPT:\n \targ0 = CALL_EXPR_ARG (exp, 0);\n \top0 = expand_normal (arg0);"}, {"sha": "03d1b063e3eea52af69de91a2111ae033e6a4160", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -150,6 +150,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_PREFETCHWT1_P(x)\tTARGET_ISA_PREFETCHWT1_P(x)\n #define TARGET_MPX\tTARGET_ISA_MPX\n #define TARGET_MPX_P(x)\tTARGET_ISA_MPX_P(x)\n+#define TARGET_CLWB\tTARGET_ISA_CLWB\n+#define TARGET_CLWB_P(x)\tTARGET_ISA_CLWB_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "a60e2de2782bcf405c8b91b0287afcbcec93daa1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -253,6 +253,9 @@\n \n   UNSPECV_NLGR\n \n+  ;; For CLWB support\n+  UNSPECV_CLWB\n+\n   ;; For CLFLUSHOPT support\n   UNSPECV_CLFLUSHOPT\n ])\n@@ -18668,6 +18671,15 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n+(define_insn \"clwb\"\n+  [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n+                   UNSPECV_CLWB)]\n+  \"TARGET_CLWB\"\n+  \"clwb\\t%a0\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n (define_insn \"clflushopt\"\n   [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n                    UNSPECV_CLFLUSHOPT)]"}, {"sha": "2c7ca21224cc313eeed28ce69003ccb6b9b5fbcc", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -721,6 +721,10 @@ mclflushopt\n Target Report Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n Support CLFLUSHOPT instructions\n \n+mclwb\n+Target Report Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n+Support CLWB instruction\n+\n mfxsr\n Target Report Mask(ISA_FXSR) Var(ix86_isa_flags) Save\n Support FXSAVE and FXRSTOR instructions"}, {"sha": "7f9a519d609d77173177011966a981658dd3e372", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -75,6 +75,8 @@\n \n #include <adxintrin.h>\n \n+#include <clwbintrin.h>\n+\n #include <clflushoptintrin.h>\n \n #include <xsavesintrin.h>"}, {"sha": "2f81d840e19b9904a9c35ac7b518bb4596704fca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,3 +1,14 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mclwb.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/clwb-1.c: New test.\n+\t* gcc.target/i386/sse-12.c: Add new options.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mavx512vbmi."}, {"sha": "dbbe0bce1690b31067033fb379ff1366472a541d", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "185f4030b5c030549fa4c5e194815eff11d9d397", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "d6f5023ecb29df46b259d743c0c7baca5522ab20", "filename": "gcc/testsuite/gcc.target/i386/clwb-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclwb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclwb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclwb-1.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mclwb\" } */\n+/* { dg-final { scan-assembler \"clwb\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_clwb (void *__A)\n+{\n+  _mm_clwb (__A);\n+}"}, {"sha": "9af6f7053ce0627e80c311a77eaebad8d7457afb", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "98b0936b90a30dee9669734ef78ab72fb27ecd35", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "3c462c05b3eb6e935fe35a22cebc04edb9aa8222", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "b1def103c1baf570c6128be1de0aca6dfbf6c75f", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -695,7 +695,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt,clwb\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "5f149cb68da2e2d44354f99b02fc34d279f70741", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "patch": "@@ -594,7 +594,7 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}