{"sha": "1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3YmNlZmJjOTUyMjBjZDc0Y2VlN2MyMzlmNmQ3MjNmNzVhMGNjYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-28T00:55:36Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-06-05T18:21:17Z"}, "message": "diagnostics: Consistently add fixit hint for implicit builtin declaration\n\nThere are two warnings that might trigger when a builtin function is\nused but not declared yet. Both called through implicitly_declare in\nc-decl. The first in implicit_decl_warning does warn for builtins,\nbut does not add a fixit hint for them (only for non-builtins when\na header is suggested through lookup_name_fuzzy). This warning is\nguarded by -Wimplicit-function-declaration. The second warning, which\ndoes include a fixit hint if possible, is given when the implicit\nbuiltin declaration has an incompatible signature. This second warning\ncannot be disabled.\n\nThis setup means that you only get a fixit-hint for usage of builtin\nfunctions where the implicit signature is different than the actual\nsignature of the builtin. No fixit hints with header suggestions\nare ever generated for builtins like abs, isdigit or putchar.\n\nIt seems more consistent to always generate a fixit-hint if possible\nfor the -Wimplicit-function-declaration warning. And for the second\nwarning to make it depend on -Wbuiltin-declaration-mismatch like\nother warnings about builtin declaration mismatches.\n\nInclude a new test to show we get fixit-hints for abs, isdigit and\nputchar now. Some small tweaks to existing tests to show the\neffect of -Wno-builtin-declaration-mismatch with this change. And\na testcase to show that #pragma GCC diagnostic ignored now works.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (implicit_decl_warning): When warned and olddecl is\n\tan undeclared builtin, then add a fixit header hint, if found.\n\t(implicitly_declare): Add OPT_Wbuiltin_declaration_mismatch to\n\twarning_at about implicit builtin declaration type mismatch.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/missing-header-fixit-3.c: Add\n\t-Wno-implicit-function-declaration.\n\t* gcc.dg/missing-header-fixit-4.c: Add new expected output.\n\t* gcc.dg/missing-header-fixit-5.c: New testcase.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-ignore.c: Likewise.", "tree": {"sha": "135fe4efe728f939d0d86cb7ee7e4ca10292ed32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135fe4efe728f939d0d86cb7ee7e4ca10292ed32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/comments", "author": null, "committer": null, "parents": [{"sha": "0cdc55f5ed881436c49d313b6cead244bdcf0654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdc55f5ed881436c49d313b6cead244bdcf0654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdc55f5ed881436c49d313b6cead244bdcf0654"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "81bd2ee94f02dd465a9ecf51916204c1ddcdfec2", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "patch": "@@ -3368,8 +3368,30 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n     warned = warning_at (loc, OPT_Wimplicit_function_declaration,\n \t\t\t G_(\"implicit declaration of function %qE\"), id);\n \n-  if (olddecl && warned)\n-    locate_old_decl (olddecl);\n+  if (warned)\n+    {\n+      /* Whether the olddecl is an undeclared builtin function.\n+\t locate_old_decl will not generate a diagnostic for those,\n+\t so in that case we want to look elsewhere.  */\n+      bool undeclared_builtin = (olddecl\n+\t\t\t\t && TREE_CODE (olddecl) == FUNCTION_DECL\n+\t\t\t\t && fndecl_built_in_p (olddecl)\n+\t\t\t\t && !C_DECL_DECLARED_BUILTIN (olddecl));\n+      if (undeclared_builtin)\n+\t{\n+\t  const char *header = header_for_builtin_fn (olddecl);\n+\t  if (header)\n+\t    {\n+\t      rich_location richloc (line_table, loc);\n+\t      maybe_add_include_fixit (&richloc, header, true);\n+\t      inform (&richloc,\n+\t\t      \"include %qs or provide a declaration of %qE\",\n+\t\t      header, id);\n+\t    }\n+\t}\n+      else if (olddecl)\n+\tlocate_old_decl (olddecl);\n+    }\n \n   if (!warned)\n     hint.suppress ();\n@@ -3631,7 +3653,9 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t\t\t\t\t      (TREE_TYPE (decl)));\n \t      if (!comptypes (newtype, TREE_TYPE (decl)))\n \t\t{\n-\t\t  bool warned = warning_at (loc, 0, \"incompatible implicit \"\n+\t\t  bool warned = warning_at (loc,\n+\t\t\t\t\t    OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t\t\t    \"incompatible implicit \"\n \t\t\t\t\t    \"declaration of built-in \"\n \t\t\t\t\t    \"function %qD\", decl);\n \t\t  /* See if we can hint which header to include.  */"}, {"sha": "732c23f91b10af2bfc716ee50a9b4cae364fe255", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-ignore.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-ignore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-ignore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-ignore.c?ref=1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "patch": "@@ -0,0 +1,11 @@\n+/* Check -Wbuiltin-declaration-mismatch can be ignored with pragma.  */\n+/* { dg-do compile }\n+   { dg-options \"-Wno-implicit-function-declaration -Wno-int-conversion -Wbuiltin-declaration-mismatch\" } */\n+\n+#pragma GCC diagnostic ignored \"-Wbuiltin-declaration-mismatch\"\n+int foo (const char *str)\n+{\n+  int i;\n+  sscanf (str, \"%d\", &i);\n+  return i;\n+}"}, {"sha": "8394010c1ac19ed1d8f2ba8db08e3bef7341f564", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c?ref=1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "patch": "@@ -2,7 +2,7 @@\n    adding them to the top of the file, given that there is no\n    pre-existing #include.  */\n \n-/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers\" } */\n+/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers -Wno-implicit-function-declaration\" } */\n \n void test (int i, int j)\n {"}, {"sha": "b6680563dc13d89dc63ea447bfe3fd7fc173c268", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c?ref=1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "patch": "@@ -9,6 +9,10 @@ void test (int i, int j)\n {\n   printf (\"%i of %i\\n\", i, j); /* { dg-line printf } */\n   /* { dg-warning \"implicit declaration of function\" \"\" { target *-*-* } printf } */\n+  /* { dg-begin-multiline-output \"\" }\n+   10 |   printf (\"%i of %i\\n\", i, j);\n+      |   ^~~~~~\n+   { dg-end-multiline-output \"\" } */\n   /* { dg-warning \"incompatible implicit declaration\" \"\" { target *-*-* } printf } */\n   /* { dg-begin-multiline-output \"\" }\n    10 |   printf (\"%i of %i\\n\", i, j);"}, {"sha": "916033c689c90dcc8597a7a5bfa5f55e029d771d", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-5.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7bcefbc95220cd74cee7c239f6d723f75a0ccc/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-5.c?ref=1c7bcefbc95220cd74cee7c239f6d723f75a0ccc", "patch": "@@ -0,0 +1,36 @@\n+\n+/* Forget to include any standard headers, all for built-in functions.\n+   Rely on -Wimplicit-function-declaration for fixit hints, not on\n+   -Wbuiltin-declaration-mismatch (which misses abs, isdigit, putchar).  */\n+\n+/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers -Wimplicit-function-declaration -Wno-builtin-declaration-mismatch\" } */\n+\n+int\n+foo (char *m, int i)\n+{\n+  if (isdigit (m[0])) /* { dg-warning \"implicit declaration of function\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   11 |   if (isdigit (m[0]))\n+      |       ^~~~~~~\n+  +++ |+#include <ctype.h>\n+    1 | \n+     { dg-end-multiline-output \"\" } */\n+    {\n+      return abs (i); /* { dg-warning \"implicit declaration of function\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   19 |       return abs (i);\n+      |              ^~~\n+  +++ |+#include <stdlib.h>\n+    1 | \n+     { dg-end-multiline-output \"\" } */\n+    }\n+  else\n+    putchar (m[0]); /* { dg-warning \"implicit declaration of function\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   28 |     putchar (m[0]);\n+      |     ^~~~~~~\n+  +++ |+#include <stdio.h>\n+    1 | \n+     { dg-end-multiline-output \"\" } */\n+  return i;\n+}"}]}