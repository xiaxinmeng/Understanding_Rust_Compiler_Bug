{"sha": "09768159b3f4b5343848d12d6cd5e95b574d8cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3NjgxNTliM2Y0YjUzNDM4NDhkMTJkNmNkNWU5NWI1NzRkOGNjYQ==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-05-11T18:45:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-06T14:46:59Z"}, "message": "[Ada] Enable Ada 2020 Put_Image and Image support for tagged types\n\ngcc/ada/\n\n\t* exp_put_image.adb: Eliminate references to\n\tDebug_Flag_Underscore_Z.  Change the meaning of the function\n\tEnable_Put_Image. Previously, a result of False for a tagged\n\ttype would mean that the type does not get a Put_Image (PI)\n\troutine at all. Now, it means that the type gets a PI routine\n\twith very abbreviated functionality (just a call to\n\tUnknown_Put_Image). This resolves problems in mixing code\n\tcompiled with and without the -gnat2022 switch.\n\t* exp_ch3.adb: Enable_Put_Image no longer participates in\n\tdetermining whether a tagged type gets a Put_Image procedure.  A\n\ttagged type does not get a Put_Image procedure if the type\n\tRoot_Buffer_Type is unavailable. This is needed to support cross\n\ttargets where tagged types are supported but the type\n\tRoot_Buffer_Type is not available.\n\t* exp_dist.adb: Add workarounds for some problems that arise\n\twhen using the (obsolete?) Garlic implementation of the\n\tdistributed systems annex with Ada 2022 constructs.\n\t* libgnat/a-sttebu.ads: Workaround a bootstrapping problem.\n\tOlder compilers do not support raise expressions, so revise the\n\tthe Pre'Class condition to meet this requirement without\n\tchanging the condition's behavior at run time.", "tree": {"sha": "04971ee305f0b66c33a7d5c53bc11a25873ca31f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04971ee305f0b66c33a7d5c53bc11a25873ca31f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09768159b3f4b5343848d12d6cd5e95b574d8cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09768159b3f4b5343848d12d6cd5e95b574d8cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09768159b3f4b5343848d12d6cd5e95b574d8cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09768159b3f4b5343848d12d6cd5e95b574d8cca/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4206000ac40ef24704cf9bf936f8aac900cdbff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4206000ac40ef24704cf9bf936f8aac900cdbff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4206000ac40ef24704cf9bf936f8aac900cdbff5"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "ad6c7a71da322d53611b2aecc07ddbd6ae539966", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=09768159b3f4b5343848d12d6cd5e95b574d8cca", "patch": "@@ -10334,7 +10334,14 @@ package body Exp_Ch3 is\n \n       --  Spec of Put_Image\n \n-      if Enable_Put_Image (Tag_Typ) then\n+      if (not No_Run_Time_Mode)\n+         and then RTE_Available (RE_Root_Buffer_Type)\n+      then\n+         --  No_Run_Time_Mode implies that the declaration of Tag_Typ\n+         --  (like any tagged type) will be rejected. Given this, avoid\n+         --  cascading errors associated with the Tag_Typ's TSS_Put_Image\n+         --  procedure.\n+\n          Append_To (Res, Predef_Spec_Or_Body (Loc,\n            Tag_Typ => Tag_Typ,\n            Name    => Make_TSS_Name (Tag_Typ, TSS_Put_Image),\n@@ -10936,8 +10943,9 @@ package body Exp_Ch3 is\n \n       --  Body of Put_Image\n \n-      if Enable_Put_Image (Tag_Typ)\n-        and then No (TSS (Tag_Typ, TSS_Put_Image))\n+      if No (TSS (Tag_Typ, TSS_Put_Image))\n+         and then (not No_Run_Time_Mode)\n+         and then RTE_Available (RE_Root_Buffer_Type)\n       then\n          Build_Record_Put_Image_Procedure (Loc, Tag_Typ, Decl, Ent);\n          Append_To (Res, Decl);"}, {"sha": "35ccf9d3731a8d485fd36ed43129a0f987573073", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=09768159b3f4b5343848d12d6cd5e95b574d8cca", "patch": "@@ -4211,6 +4211,14 @@ package body Exp_Dist is\n          --  Used only for the PolyORB case\n \n       begin\n+         --  workaround for later failures in Exp_Util.Find_Prim_Op\n+         if Is_TSS (Defining_Unit_Name (Spec), TSS_Put_Image) then\n+            Append_To (Statements,\n+                       Make_Raise_Program_Error (Loc,\n+                         Reason => PE_Stream_Operation_Not_Allowed));\n+            return;\n+         end if;\n+\n          --  The general form of a calling stub for a given subprogram is:\n \n          --    procedure X (...) is P : constant Partition_ID :=\n@@ -4726,11 +4734,11 @@ package body Exp_Dist is\n          --  Formal parameter for receiving stubs: a descriptor for an incoming\n          --  request.\n \n-         Decls : constant List_Id := New_List;\n+         Decls : List_Id := New_List;\n          --  All the parameters will get declared before calling the real\n          --  subprograms. Also the out parameters will be declared.\n \n-         Statements : constant List_Id := New_List;\n+         Statements : List_Id := New_List;\n \n          Extra_Formal_Statements : constant List_Id := New_List;\n          --  Statements concerning extra formal parameters\n@@ -5165,6 +5173,19 @@ package body Exp_Dist is\n                  Parameter_Type      =>\n                    New_Occurrence_Of (RTE (RE_Request_Access), Loc))));\n \n+         --  workaround for later failures in Exp_Util.Find_Prim_Op\n+         if Is_TSS (Defining_Unit_Name (Specification (Vis_Decl)),\n+                    TSS_Put_Image)\n+         then\n+            --  drop everything on the floor\n+            Decls := New_List;\n+            Statements := New_List;\n+            Excep_Handlers := New_List;\n+            Append_To (Statements,\n+                       Make_Raise_Program_Error (Loc,\n+                         Reason => PE_Stream_Operation_Not_Allowed));\n+         end if;\n+\n          return\n            Make_Subprogram_Body (Loc,\n              Specification              => Subp_Spec,"}, {"sha": "082e08b6dde7b3ddcae90547000e76a146761c8b", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=09768159b3f4b5343848d12d6cd5e95b574d8cca", "patch": "@@ -26,7 +26,6 @@\n with Aspects;        use Aspects;\n with Atree;          use Atree;\n with Csets;          use Csets;\n-with Debug;          use Debug;\n with Einfo;          use Einfo;\n with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n@@ -45,15 +44,13 @@ with Sinfo.Nodes;    use Sinfo.Nodes;\n with Sinfo.Utils;    use Sinfo.Utils;\n with Snames;         use Snames;\n with Stand;\n+with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n \n package body Exp_Put_Image is\n \n-   Tagged_Put_Image_Enabled : Boolean renames Debug_Flag_Underscore_Z;\n-   --  Temporary until we resolve mixing Ada 2012 and 2022 code\n-\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -531,6 +528,7 @@ package body Exp_Put_Image is\n       Pnam : out Entity_Id)\n    is\n       Btyp : constant Entity_Id := Base_Type (Typ);\n+      pragma Assert (not Is_Class_Wide_Type (Btyp));\n       pragma Assert (not Is_Unchecked_Union (Btyp));\n \n       First_Time : Boolean := True;\n@@ -789,7 +787,31 @@ package body Exp_Put_Image is\n    --  Start of processing for Build_Record_Put_Image_Procedure\n \n    begin\n-      if Is_Null_Record_Type (Btyp, Ignore_Privacy => True) then\n+      if (Ada_Version < Ada_2022)\n+        or else not Enable_Put_Image (Btyp)\n+      then\n+         --  generate a very simple Put_Image implementation\n+\n+         if Is_RTE (Typ, RE_Root_Buffer_Type) then\n+            --  Avoid introducing a cyclic dependency between\n+            --  Ada.Strings.Text_Buffers and System.Put_Images.\n+\n+            Append_To (Stms,\n+              Make_Raise_Program_Error (Loc,\n+              Reason => PE_Explicit_Raise));\n+         else\n+            Append_To (Stms,\n+              Make_Procedure_Call_Statement (Loc,\n+                Name => New_Occurrence_Of (RTE (RE_Put_Image_Unknown), Loc),\n+                Parameter_Associations => New_List\n+                  (Make_Identifier (Loc, Name_S),\n+                   Make_String_Literal (Loc,\n+                     To_String (Fully_Qualified_Name_String (Btyp))))));\n+         end if;\n+      elsif Is_Null_Record_Type (Btyp, Ignore_Privacy => True) then\n+\n+         --  Interface types take this path.\n+\n          Append_To (Stms,\n            Make_Procedure_Call_Statement (Loc,\n              Name => New_Occurrence_Of (RTE (RE_Put_UTF_8), Loc),\n@@ -908,42 +930,29 @@ package body Exp_Put_Image is\n \n    function Enable_Put_Image (Typ : Entity_Id) return Boolean is\n    begin\n+      --  If this function returns False for a non-scalar type Typ, then\n+      --    a) calls to Typ'Image will result in calls to\n+      --       System.Put_Images.Put_Image_Unknown to generate the image.\n+      --    b) If Typ is a tagged type, then similarly the implementation\n+      --       of Typ's Put_Image procedure will call Put_Image_Unknown\n+      --       and will ignore its formal parameter of type Typ.\n+      --       Note that Typ will still have a Put_Image procedure\n+      --       in this case, albeit one with a simplified implementation.\n+      --\n       --  The name \"Sink\" here is a short nickname for\n       --  \"Ada.Strings.Text_Buffers.Root_Buffer_Type\".\n-\n-      --  There's a bit of a chicken&egg problem. The compiler is likely to\n-      --  have trouble if we refer to the Put_Image of Sink itself, because\n-      --  Sink is part of the parameter profile:\n-      --\n-      --     function Sink'Put_Image (S : in out Sink'Class; V : T);\n-      --\n-      --  Likewise, the Ada.Strings.Buffer package, where Sink is\n-      --  declared, depends on various other packages, so if we refer to\n-      --  Put_Image of types declared in those other packages, we could create\n-      --  cyclic dependencies. Therefore, we disable Put_Image for some\n-      --  types. It's not clear exactly what types should be disabled. Scalar\n-      --  types are OK, even if predefined, because calls to Put_Image of\n-      --  scalar types are expanded inline. We certainly want to be able to use\n-      --  Integer'Put_Image, for example.\n-\n-      --  ???Temporarily disable to work around bugs:\n       --\n       --  Put_Image does not work for Remote_Types. We check the containing\n       --  package, rather than the type itself, because we want to include\n       --  types in the private part of a Remote_Types package.\n-      --\n-      --  Put_Image on tagged types triggers some bugs.\n \n-      if Ada_Version < Ada_2022\n-        or else Is_Remote_Types (Scope (Typ))\n+      if Is_Remote_Types (Scope (Typ))\n+        or else Is_Remote_Call_Interface (Typ)\n         or else (Is_Tagged_Type (Typ) and then In_Predefined_Unit (Typ))\n-        or else (Is_Tagged_Type (Typ) and then not Tagged_Put_Image_Enabled)\n       then\n          return False;\n       end if;\n \n-      --  End of workarounds.\n-\n       --  No sense in generating code for Put_Image if there are errors. This\n       --  avoids certain cascade errors.\n \n@@ -1192,8 +1201,6 @@ package body Exp_Put_Image is\n       --  Don't do it if type Root_Buffer_Type is unavailable in the runtime.\n \n       if not In_Predefined_Unit (Compilation_Unit)\n-        and then Ada_Version >= Ada_2022\n-        and then Tagged_Put_Image_Enabled\n         and then Tagged_Seen\n         and then not No_Run_Time_Mode\n         and then RTE_Available (RE_Root_Buffer_Type)"}, {"sha": "39144a6b2fe9cbfc7bfbea4749d8ea95d835262b", "filename": "gcc/ada/libgnat/a-sttebu.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09768159b3f4b5343848d12d6cd5e95b574d8cca/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads?ref=09768159b3f4b5343848d12d6cd5e95b574d8cca", "patch": "@@ -59,7 +59,8 @@ is\n      (Buffer : in out Root_Buffer_Type;\n       Amount :        Text_Buffer_Count := Standard_Indent) with\n       Pre'Class => Current_Indent (Buffer) >= Amount\n-      or else raise Constraint_Error,\n+      --  or else raise Constraint_Error,\n+      or else Boolean'Val (Current_Indent (Buffer) - Amount),\n       Post'Class => Current_Indent (Buffer) =\n       Current_Indent (Buffer)'Old - Amount;\n "}]}