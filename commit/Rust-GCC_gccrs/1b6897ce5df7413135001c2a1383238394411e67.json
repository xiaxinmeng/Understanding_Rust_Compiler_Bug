{"sha": "1b6897ce5df7413135001c2a1383238394411e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2ODk3Y2U1ZGY3NDEzMTM1MDAxYzJhMTM4MzIzODM5NDQxMWU2Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:29:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:29:35Z"}, "message": "[multiple changes]\n\n2012-01-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_aggr.adb (Expand_Record_Aggregate): After creating the\n\t_parent aggregate for an extension aggregate, check whether it\n\trequires delayed (top-down) expansion.\n\n2012-01-30  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_dim.adb (Expand_Put_Call_With_Dimension_Symbol): Rewritten.\n\t* snames.ads-tmpl: Name_Item and Name_Symbols added.\n\t* s-diflio.adb, s-diflio.ads, s-diinio.adb, s-diinio.ads: Rename\n\tand change the position of parameter Symbols in every Put routine.\n\t* s-dimmks.ads: Convert long float type Mks_Type into long\n\tlong float.\n\t* s-llflex.ads: Modifications in comments.\n\n2012-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Earlier): Do not use the\n\ttop level source locations of the two input nodes.\n\nFrom-SVN: r183701", "tree": {"sha": "d9201c492389a759dbc8f2701a43d5164ee35435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9201c492389a759dbc8f2701a43d5164ee35435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b6897ce5df7413135001c2a1383238394411e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6897ce5df7413135001c2a1383238394411e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6897ce5df7413135001c2a1383238394411e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6897ce5df7413135001c2a1383238394411e67/comments", "author": null, "committer": null, "parents": [{"sha": "50decc819b575dabf113df739e5244c04a53db87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50decc819b575dabf113df739e5244c04a53db87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50decc819b575dabf113df739e5244c04a53db87"}], "stats": {"total": 387, "additions": 237, "deletions": 150}, "files": [{"sha": "704ff4b48e576332621e51d1df65b8e1672d8c0b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -1,3 +1,24 @@\n+2012-01-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate): After creating the\n+\t_parent aggregate for an extension aggregate, check whether it\n+\trequires delayed (top-down) expansion.\n+\n+2012-01-30  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_dim.adb (Expand_Put_Call_With_Dimension_Symbol): Rewritten.\n+\t* snames.ads-tmpl: Name_Item and Name_Symbols added.\n+\t* s-diflio.adb, s-diflio.ads, s-diinio.adb, s-diinio.ads: Rename\n+\tand change the position of parameter Symbols in every Put routine.\n+\t* s-dimmks.ads: Convert long float type Mks_Type into long\n+\tlong float.\n+\t* s-llflex.ads: Modifications in comments.\n+\n+2012-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Earlier): Do not use the\n+\ttop level source locations of the two input nodes.\n+\n 2012-01-30  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, sem_prag.adb, sem_attr.adb, aspects.ads,"}, {"sha": "94f2c3dd68d6b2c59e98ad8a766ef2e497d54d0e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -5658,6 +5658,13 @@ package body Exp_Aggr is\n \n                   Expand_Record_Aggregate\n                     (Parent_Aggr, Tag_Value, Parent_Expr);\n+\n+                  --  The ancestor part may be a nested aggregate that has\n+                  --  delayed expansion: recheck now.\n+\n+                  if Component_Not_OK_For_Backend then\n+                     Convert_To_Assignments (N, Typ);\n+                  end if;\n                end;\n \n             --  For a root type, the tag component is added (unless compiling"}, {"sha": "82c47bddf003c3548a7452c41831250d980e5686", "filename": "gcc/ada/s-diflio.adb", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.adb?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,40 +38,40 @@ package body System.Dim_Float_IO is\n    ---------\n \n    procedure Put\n-     (File : File_Type;\n-      Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Fore : Field  := Default_Fore;\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp)\n+     (File    : File_Type;\n+      Item    : Num_Dim_Float;\n+      Fore    : Field  := Default_Fore;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String := \"\")\n    is\n    begin\n       Num_Dim_Float_IO.Put (File, Item, Fore, Aft, Exp);\n-      Ada.Text_IO.Put (File, Unit);\n+      Ada.Text_IO.Put (File, Symbols);\n    end Put;\n \n    procedure Put\n-     (Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Fore : Field  := Default_Fore;\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp)\n+     (Item    : Num_Dim_Float;\n+      Fore    : Field  := Default_Fore;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String := \"\")\n    is\n    begin\n       Num_Dim_Float_IO.Put (Item, Fore, Aft, Exp);\n-      Ada.Text_IO.Put (Unit);\n+      Ada.Text_IO.Put (Symbols);\n    end Put;\n \n    procedure Put\n-     (To   : out String;\n-      Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp)\n+     (To      : out String;\n+      Item    : Num_Dim_Float;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String := \"\")\n    is\n    begin\n       Num_Dim_Float_IO.Put (To, Item, Aft, Exp);\n-      To := To & Unit;\n+      To := To & Symbols;\n    end Put;\n \n end System.Dim_Float_IO;"}, {"sha": "2eee802f7a10ed133dc88bf1b3bd97a14a538e89", "filename": "gcc/ada/s-diflio.ads", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.ads?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,26 +48,26 @@ package System.Dim_Float_IO is\n    Default_Exp  : Field := 3;\n \n    procedure Put\n-     (File : File_Type;\n-      Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Fore : Field  := Default_Fore;\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp);\n+     (File    : File_Type;\n+      Item    : Num_Dim_Float;\n+      Fore    : Field  := Default_Fore;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String      := \"\");\n \n    procedure Put\n-     (Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Fore : Field  := Default_Fore;\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp);\n+     (Item    : Num_Dim_Float;\n+      Fore    : Field  := Default_Fore;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String := \"\");\n \n    procedure Put\n-     (To   : out String;\n-      Item : Num_Dim_Float;\n-      Unit : String := \"\";\n-      Aft  : Field  := Default_Aft;\n-      Exp  : Field  := Default_Exp);\n+     (To      : out String;\n+      Item    : Num_Dim_Float;\n+      Aft     : Field  := Default_Aft;\n+      Exp     : Field  := Default_Exp;\n+      Symbols : String := \"\");\n \n    pragma Inline (Put);\n "}, {"sha": "c1de526545110bd0fd0a7a8bd266647a1cd140cc", "filename": "gcc/ada/s-diinio.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diinio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diinio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diinio.adb?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,40 +38,40 @@ package body System.Dim_Integer_IO is\n    ---------\n \n    procedure Put\n-     (File  : File_Type;\n-      Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Width : Field       := Default_Width;\n-      Base  : Number_Base := Default_Base)\n+     (File    : File_Type;\n+      Item    : Num_Dim_Integer;\n+      Width   : Field       := Default_Width;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\")\n \n    is\n    begin\n       Num_Dim_Integer_IO.Put (File, Item, Width, Base);\n-      Ada.Text_IO.Put (File, Unit);\n+      Ada.Text_IO.Put (File, Symbols);\n    end Put;\n \n    procedure Put\n-     (Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Width : Field       := Default_Width;\n-      Base  : Number_Base := Default_Base)\n+     (Item    : Num_Dim_Integer;\n+      Width   : Field       := Default_Width;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\")\n \n    is\n    begin\n       Num_Dim_Integer_IO.Put (Item, Width, Base);\n-      Ada.Text_IO.Put (Unit);\n+      Ada.Text_IO.Put (Symbols);\n    end Put;\n \n    procedure Put\n-     (To    : out String;\n-      Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Base  : Number_Base := Default_Base)\n+     (To      : out String;\n+      Item    : Num_Dim_Integer;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\")\n \n    is\n    begin\n       Num_Dim_Integer_IO.Put (To, Item, Base);\n-      To := To & Unit;\n+      To := To & Symbols;\n    end Put;\n \n end System.Dim_Integer_IO;"}, {"sha": "dfbcb79375548c11cf083d297cdc3c679dac9b87", "filename": "gcc/ada/s-diinio.ads", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diinio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-diinio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diinio.ads?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,23 +47,23 @@ package System.Dim_Integer_IO is\n    Default_Base  : Number_Base := 10;\n \n    procedure Put\n-     (File  : File_Type;\n-      Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Width : Field       := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+     (File    : File_Type;\n+      Item    : Num_Dim_Integer;\n+      Width   : Field       := Default_Width;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\");\n \n    procedure Put\n-     (Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Width : Field       := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+     (Item    : Num_Dim_Integer;\n+      Width   : Field       := Default_Width;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\");\n \n    procedure Put\n-     (To    : out String;\n-      Item  : Num_Dim_Integer;\n-      Unit  : String      := \"\";\n-      Base  : Number_Base := Default_Base);\n+     (To      : out String;\n+      Item    : Num_Dim_Integer;\n+      Base    : Number_Base := Default_Base;\n+      Symbols : String      := \"\");\n \n    pragma Inline (Put);\n "}, {"sha": "1ee738721360a2ce86fe21c741cbcc1532415cf0", "filename": "gcc/ada/s-dimmks.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-dimmks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-dimmks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-dimmks.ads?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ package System.Dim_Mks is\n \n    --  Dimensioned type Mks_Type\n \n-   type Mks_Type is new Long_Float\n+   type Mks_Type is new Long_Long_Float\n      with\n       Dimension_System => ((Meter, 'm'),\n         (Kilogram, \"kg\"),"}, {"sha": "7575383885a4256a5f99d9fc5388a67f62bbc039", "filename": "gcc/ada/s-llflex.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-llflex.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fs-llflex.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-llflex.ads?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,8 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains an instantiation of the functions \"**\" and Sqrt\n---  between two long long floats.\n+--  This package contains an instantiation of the exponentiation between two\n+--  long long floats.\n \n with Ada.Numerics.Long_Long_Elementary_Functions;\n "}, {"sha": "90ff36346e03bda45ed9f225dd6bebe3cd9404a4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -7142,13 +7142,12 @@ package body Sem_Ch12 is\n       end if;\n \n       --  At this point either both nodes came from source or we approximated\n-      --  their source locations through neighbouring source statements.\n+      --  their source locations through neighbouring source statements. There\n+      --  is no need to look at the top level locations of P1 and P2 because\n+      --  both nodes are in the same list and whether the enclosing context is\n+      --  instantiated is irrelevant.\n \n-      if Top_Level_Location (Sloc (P1)) < Top_Level_Location (Sloc (P2)) then\n-         return True;\n-      else\n-         return False;\n-      end if;\n+      return Sloc (P1) < Sloc (P2);\n    end Earlier;\n \n    ----------------------"}, {"sha": "16cbf8c7b19902dd98c4dca905f88f79a716acdc", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 129, "deletions": 71, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2160,21 +2160,63 @@ package body Sem_Dim is\n       Actuals        : constant List_Id := Parameter_Associations (N);\n       Loc            : constant Source_Ptr := Sloc (N);\n       Name_Call      : constant Node_Id := Name (N);\n+      New_Actuals    : constant List_Id := New_List;\n       Actual         : Node_Id;\n-      Base_Typ       : Node_Id;\n       Dims_Of_Actual : Dimension_Type;\n       Etyp           : Entity_Id;\n-      First_Actual   : Node_Id;\n-      New_Actuals    : List_Id;\n-      New_Str_Lit    : Node_Id;\n+      New_Str_Lit    : Node_Id := Empty;\n       Package_Name   : Name_Id;\n       System         : System_Type;\n \n+      function Has_Dimension_Symbols return Boolean;\n+      --  Return True if the current Put call already has a parameter\n+      --  association for parameter \"Symbols\" with the correct string of\n+      --  symbols.\n+\n       function Is_Procedure_Put_Call return Boolean;\n       --  Return True if the current call is a call of an instantiation of a\n       --  procedure Put defined in the package System.Dim_Float_IO and\n       --  System.Dim_Integer_IO.\n \n+      function Item_Actual return Node_Id;\n+      --  Return the item actual parameter node in the put call\n+\n+      ---------------------------\n+      -- Has_Dimension_Symbols --\n+      ---------------------------\n+\n+      function Has_Dimension_Symbols return Boolean is\n+         Actual : Node_Id;\n+\n+      begin\n+         Actual := First (Actuals);\n+\n+         --  Look for a symbols parameter association in the list of actuals\n+\n+         while Present (Actual) loop\n+            if Nkind (Actual) = N_Parameter_Association\n+              and then Chars (Selector_Name (Actual)) = Name_Symbols\n+            then\n+\n+               --  return True if the actual comes from source or if the string\n+               --  of symbols doesn't have the default value (i.e \"\").\n+\n+               return Comes_From_Source (Actual)\n+                        or else String_Length\n+                                  (Strval\n+                                    (Explicit_Actual_Parameter (Actual))) /= 0;\n+            end if;\n+\n+            Next (Actual);\n+         end loop;\n+\n+         --  At this point, the call has no parameter association\n+         --  Look to the last actual since the symbols parameter is the last\n+         --  one.\n+\n+         return Nkind (Last (Actuals)) = N_String_Literal;\n+      end Has_Dimension_Symbols;\n+\n       ---------------------------\n       -- Is_Procedure_Put_Call --\n       ---------------------------\n@@ -2214,100 +2256,116 @@ package body Sem_Dim is\n          return False;\n       end Is_Procedure_Put_Call;\n \n-   --  Start of processing for Expand_Put_Call_With_Dimension_Symbol\n-\n-   begin\n-      if Is_Procedure_Put_Call then\n+      -----------------\n+      -- Item_Actual --\n+      -----------------\n \n-         --  Get the first parameter\n+      function Item_Actual return Node_Id is\n+         Actual            : Node_Id;\n \n-         First_Actual := First (Actuals);\n+      begin\n+         Actual := First (Actuals);\n \n-         --  Case when the Put routine has four (System.Dim_Integer_IO) or five\n-         --  (System.Dim_Float_IO) parameters.\n+         --  Look for the item actual as a parameter association\n \n-         if List_Length (Actuals) = 5\n-           or else List_Length (Actuals) = 4\n-         then\n-            Actual := Next (First_Actual);\n+         while Present (Actual) loop\n+            if Nkind (Actual) = N_Parameter_Association\n+              and then Chars (Selector_Name (Actual)) = Name_Item\n+            then\n+               return Explicit_Actual_Parameter (Actual);\n+            end if;\n \n-            if Nkind (Actual) = N_Parameter_Association then\n+            Next (Actual);\n+         end loop;\n \n-               --  Get the dimensions and the corresponding dimension system\n-               --  from the first actual.\n+         --  Case where the item has been defined without an association\n \n-               Actual := First_Actual;\n-            end if;\n+         Actual := First (Actuals);\n \n-         --  Case when the Put routine has six parameters\n+         --  Depending on the procedure Put, Item actual could be first or\n+         --  second in the list of actuals.\n \n+         if Has_Dimension_System (Base_Type (Etype (Actual))) then\n+            return Actual;\n          else\n-            Actual := Next (First_Actual);\n+            return Next (Actual);\n          end if;\n+      end Item_Actual;\n \n-         Base_Typ := Base_Type (Etype (Actual));\n-         System := System_Of (Base_Typ);\n-\n-         --  Check the base type of Actual is a dimensioned type\n-\n-         if Exists (System) then\n-            Dims_Of_Actual := Dimensions_Of (Actual);\n-            Etyp := Etype (Actual);\n-\n-            --  Add the symbol as a suffix of the value if the subtype has a\n-            --  dimension symbol or if the parameter is not dimensionless.\n+   --  Start of processing for Expand_Put_Call_With_Dimension_Symbol\n \n-            if Exists (Dims_Of_Actual)\n-              or else Symbol_Of (Etyp) /= No_String\n-            then\n-               New_Actuals := New_List;\n+   begin\n+      if Is_Procedure_Put_Call\n+        and then not Has_Dimension_Symbols\n+      then\n+         Actual := Item_Actual;\n+         Dims_Of_Actual := Dimensions_Of (Actual);\n+         Etyp := Etype (Actual);\n \n-               --  Add to the list First_Actual and Actual if they differ\n+         --  Add the symbol as a suffix of the value if the subtype has a\n+         --  dimension symbol or if the parameter is not dimensionless.\n \n-               if Actual /= First_Actual then\n-                  Append (New_Copy (First_Actual), New_Actuals);\n-               end if;\n+         if Symbol_Of (Etyp) /= No_String then\n+            Start_String;\n \n-               Append (New_Copy (Actual), New_Actuals);\n+            --  Put a space between the value and the dimension\n \n-               --  Look to the next parameter\n+            Store_String_Char (' ');\n+            Store_String_Chars (Symbol_Of (Etyp));\n+            New_Str_Lit := Make_String_Literal (Loc, End_String);\n \n-               Next (Actual);\n+         --  Check that the item is not dimensionless\n+         --  Create the new String_Literal with the new String_Id generated by\n+         --  the routine From_Dimension_To_String.\n \n-               --  Check if the type of N is a subtype that has a symbol of\n-               --  dimensions in Aspect_Dimension_String_Id_Hash_Table.\n+         elsif Exists (Dims_Of_Actual) then\n+            System := System_Of (Base_Type (Etyp));\n+            New_Str_Lit :=\n+              Make_String_Literal (Loc,\n+                From_Dimension_To_String_Of_Symbols (Dims_Of_Actual, System));\n+         end if;\n \n-               if Symbol_Of (Etyp) /= No_String then\n-                  Start_String;\n+         if Present (New_Str_Lit) then\n+            --  Insert all actuals in New_Actuals\n \n-                  --  Put a space between the value and the dimension\n+            Actual := First (Actuals);\n \n-                  Store_String_Char (' ');\n-                  Store_String_Chars (Symbol_Of (Etyp));\n-                  New_Str_Lit := Make_String_Literal (Loc, End_String);\n+            while Present (Actual) loop\n+               --  Copy every comes from source actuals in New_Actuals\n+\n+               if Comes_From_Source (Actual) then\n+                  if Nkind (Actual) = N_Parameter_Association then\n+                     Append (\n+                        Make_Parameter_Association (Loc,\n+                           Selector_Name => New_Copy (Selector_Name (Actual)),\n+                           Explicit_Actual_Parameter =>\n+                              New_Copy (Explicit_Actual_Parameter (Actual))),\n+                        New_Actuals);\n+                  else\n+                     Append (New_Copy (Actual), New_Actuals);\n+                  end if;\n+               end if;\n \n-               --  Rewrite the String_Literal of the second actual with the\n-               --  new String_Id created by the routine\n-               --  From_Dimension_To_String.\n+               Next (Actual);\n+            end loop;\n \n-               else\n-                  New_Str_Lit :=\n-                    Make_String_Literal (Loc,\n-                      From_Dimension_To_String_Of_Symbols (Dims_Of_Actual,\n-                        System));\n-               end if;\n+            --  Create the new Symbols parameter association and append it in\n+            --  New_Actuals.\n \n-               Append (New_Str_Lit, New_Actuals);\n+            Append (\n+              Make_Parameter_Association (Loc,\n+                Selector_Name => Make_Identifier (Loc, Name_Symbols),\n+                Explicit_Actual_Parameter => New_Str_Lit),\n+              New_Actuals);\n \n-               --  Rewrite the procedure call with the new list of parameters\n+            --  Rewrite and analyze the procedure call\n \n-               Rewrite (N,\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name =>                   New_Copy (Name_Call),\n-                   Parameter_Associations => New_Actuals));\n+            Rewrite (N,\n+              Make_Procedure_Call_Statement (Loc,\n+                Name =>                   New_Copy (Name_Call),\n+                Parameter_Associations => New_Actuals));\n \n-               Analyze (N);\n-            end if;\n+            Analyze (N);\n          end if;\n       end if;\n    end Expand_Put_Call_With_Dimension_Symbol;"}, {"sha": "f004adfd00c69815a923414528193e13b8ef1f92", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6897ce5df7413135001c2a1383238394411e67/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=1b6897ce5df7413135001c2a1383238394411e67", "patch": "@@ -228,7 +228,9 @@ package Snames is\n    Name_Dim_Float_IO                 : constant Name_Id := N + $; -- Ada 12\n    Name_Dim_Integer_IO               : constant Name_Id := N + $; -- Ada 12\n    Name_Generic_Elementary_Functions : constant Name_Id := N + $; -- Ada 12\n+   Name_Item                         : constant Name_Id := N + $; -- Ada 12\n    Name_Sqrt                         : constant Name_Id := N + $; -- Ada 12\n+   Name_Symbols                      : constant Name_Id := N + $; -- Ada 12\n \n    --  Some miscellaneous names used for error detection/recovery\n "}]}