{"sha": "e67ae07334003536ec8c29f656b8ef5c863bba3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3YWUwNzMzNDAwMzUzNmVjOGMyOWY2NTZiOGVmNWM4NjNiYmEzZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T21:59:21Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T21:59:21Z"}, "message": "re PR target/34777 (uClibc-0.9.29 compilation error for sh4 arch with gcc-4.x)\n\n\tPR target/34777\n\t* gcc.target/sh/torture/sh-torture.exp: New.\n\t* gcc.target/sh/torture/pr34777.c: New.\n\nFrom-SVN: r192478", "tree": {"sha": "94fd4d2fac3e88c77db68abf76f97d54bc46edb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fd4d2fac3e88c77db68abf76f97d54bc46edb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e67ae07334003536ec8c29f656b8ef5c863bba3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67ae07334003536ec8c29f656b8ef5c863bba3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67ae07334003536ec8c29f656b8ef5c863bba3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67ae07334003536ec8c29f656b8ef5c863bba3e/comments", "author": null, "committer": null, "parents": [{"sha": "9945a8768187bb1e8f9d566bb4f6b51665619b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9945a8768187bb1e8f9d566bb4f6b51665619b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9945a8768187bb1e8f9d566bb4f6b51665619b4c"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "805bfb2fad42a7f5d77af7ed04fc3d2ce7044795", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e67ae07334003536ec8c29f656b8ef5c863bba3e", "patch": "@@ -1,3 +1,9 @@\n+2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/34777\n+\t* gcc.target/sh/torture/sh-torture.exp: New.\n+\t* gcc.target/sh/torture/pr34777.c: New.\n+\n 2012-10-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* lib/target-supports.exp (check_profiling_available): Match"}, {"sha": "b2ec56adff7d0cffc2ce6c3ce7e14662a89c4591", "filename": "gcc/testsuite/gcc.target/sh/torture/pr34777.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr34777.c?ref=e67ae07334003536ec8c29f656b8ef5c863bba3e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-additional-options \"-fschedule-insns -fPIC -mprefergot\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n+\n+static __inline __attribute__ ((__always_inline__)) void *\n+_dl_mmap (void * start, int length, int prot, int flags, int fd,\n+\t  int offset)\n+{\n+  register long __sc3 __asm__ (\"r3\") = 90;\n+  register long __sc4 __asm__ (\"r4\") = (long) start;\n+  register long __sc5 __asm__ (\"r5\") = (long) length;\n+  register long __sc6 __asm__ (\"r6\") = (long) prot;\n+  register long __sc7 __asm__ (\"r7\") = (long) flags;\n+  register long __sc0 __asm__ (\"r0\") = (long) fd;\n+  register long __sc1 __asm__ (\"r1\") = (long) offset;\n+  __asm__ __volatile__ (\"trapa\t%1\"\n+\t\t\t: \"=z\" (__sc0)\n+\t\t\t: \"i\" (0x10 + 6), \"0\" (__sc0), \"r\" (__sc4),\n+\t\t\t  \"r\" (__sc5), \"r\" (__sc6), \"r\" (__sc7),\n+\t\t\t  \"r\" (__sc3), \"r\" (__sc1)\n+\t\t\t: \"memory\" );\n+}\n+\n+extern int _dl_pagesize;\n+void\n+_dl_dprintf(int fd, const char *fmt, ...)\n+{\n+  static char *buf;\n+  buf = _dl_mmap ((void *) 0, _dl_pagesize, 0x1 | 0x2, 0x02 | 0x20, -1, 0);\n+}"}, {"sha": "f025aa3ef24621c5795a8a674d15668625475599", "filename": "gcc/testsuite/gcc.target/sh/torture/sh-torture.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fsh-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67ae07334003536ec8c29f656b8ef5c863bba3e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fsh-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fsh-torture.exp?ref=e67ae07334003536ec8c29f656b8ef5c863bba3e", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `gcc-dg.exp' driver, looping over\n+# optimization options.\n+\n+# Exit immediately if this isn't a SH target.\n+if { ![istarget sh*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}