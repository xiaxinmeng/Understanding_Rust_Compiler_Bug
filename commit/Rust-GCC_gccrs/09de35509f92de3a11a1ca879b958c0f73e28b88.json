{"sha": "09de35509f92de3a11a1ca879b958c0f73e28b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkZTM1NTA5ZjkyZGUzYTExYTFjYTg3OWI5NThjMGY3M2UyOGI4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-02-28T13:59:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-02-28T13:59:44Z"}, "message": "c-ada-spec.c (dump_ada_node): Do not use generic address for incomplete structures.\n\n\t* c-ada-spec.c (dump_ada_node) <POINTER_TYPE>: Do not use generic\n\taddress for incomplete structures.\n\t(dump_forward_type): Do not bail out for incomplete structures.\n\t(dump_ada_declaration): Do not special-case incomplete structures\n\tfor subtypes.  Dump them as null records for types.\n\nFrom-SVN: r258066", "tree": {"sha": "f9a59c0225ccd0b2297a5192de8558d2587ae915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9a59c0225ccd0b2297a5192de8558d2587ae915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09de35509f92de3a11a1ca879b958c0f73e28b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09de35509f92de3a11a1ca879b958c0f73e28b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09de35509f92de3a11a1ca879b958c0f73e28b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09de35509f92de3a11a1ca879b958c0f73e28b88/comments", "author": null, "committer": null, "parents": [{"sha": "e02f4b9298b75d7f4294574f7eb8baef9a48ff0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02f4b9298b75d7f4294574f7eb8baef9a48ff0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02f4b9298b75d7f4294574f7eb8baef9a48ff0c"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "ea203c3894b54d9ab8640600c64dc38d7fbc1d3e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=09de35509f92de3a11a1ca879b958c0f73e28b88", "patch": "@@ -1,3 +1,11 @@\n+2018-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_node) <POINTER_TYPE>: Do not use generic\n+\taddress for incomplete structures.\n+\t(dump_forward_type): Do not bail out for incomplete structures.\n+\t(dump_ada_declaration): Do not special-case incomplete structures\n+\tfor subtypes.  Dump them as null records for types.\n+\n 2018-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_ada_import): Use boolean and fix formatting."}, {"sha": "588dc5d228916ef6ddd905ec4941cd3551667791", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=09de35509f92de3a11a1ca879b958c0f73e28b88", "patch": "@@ -2266,11 +2266,8 @@ dump_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t{\n \t\t  tree type_name = TYPE_NAME (TREE_TYPE (node));\n \n-\t\t  /* For now, handle access-to-access and access-to-incomplete\n-\t\t     as opaque System.Address.  */\n-\t\t  if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE\n-\t\t      || (RECORD_OR_UNION_TYPE_P (TREE_TYPE (node))\n-\t\t\t  && !COMPLETE_TYPE_P (TREE_TYPE (node))))\n+\t\t  /* For now, handle access-to-access as System.Address.  */\n+\t\t  if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE)\n \t\t    {\n \t\t      if (package_prefix)\n \t\t\t{\n@@ -2515,11 +2512,6 @@ dump_forward_type (pretty_printer *buffer, tree type, tree t, int spc)\n   if (DECL_IS_BUILTIN (decl) || TREE_VISITED (decl))\n     return;\n \n-  /* We'll need to generate a completion at some point.  */\n-  if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n-      && !COMPLETE_TYPE_P (TREE_TYPE (decl)))\n-    return;\n-\n   /* Forward declarations are only needed within a given file.  */\n   if (DECL_SOURCE_FILE (decl) != DECL_SOURCE_FILE (t))\n     return;\n@@ -2743,23 +2735,15 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n \t      INDENT (spc);\n \n-\t      if (RECORD_OR_UNION_TYPE_P (typ) && !COMPLETE_TYPE_P (typ))\n-\t\t{\n-\t\t  pp_string (buffer, \"--  skipped incomplete struct \");\n-\t\t  dump_ada_node (buffer, t, type, spc, false, true);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (RECORD_OR_UNION_TYPE_P (typ))\n-\t\t    dump_forward_type (buffer, stub, t, spc);\n-\n-\t\t  pp_string (buffer, \"subtype \");\n-\t\t  dump_ada_node (buffer, t, type, spc, false, true);\n-\t\t  pp_string (buffer, \" is \");\n-\t\t  dump_ada_node (buffer, typ, type, spc, false, true);\n-\t\t  pp_string (buffer, \";  -- \");\n-\t\t  dump_sloc (buffer, t);\n-\t\t}\n+\t      if (RECORD_OR_UNION_TYPE_P (typ))\n+\t\tdump_forward_type (buffer, stub, t, spc);\n+\n+\t      pp_string (buffer, \"subtype \");\n+\t      dump_ada_node (buffer, t, type, spc, false, true);\n+\t      pp_string (buffer, \" is \");\n+\t      dump_ada_node (buffer, typ, type, spc, false, true);\n+\t      pp_string (buffer, \";  -- \");\n+\t      dump_sloc (buffer, t);\n \n \t      TREE_VISITED (t) = 1;\n \t      return 1;\n@@ -2788,8 +2772,10 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t  case UNION_TYPE:\n \t    if (!COMPLETE_TYPE_P (TREE_TYPE (t)))\n \t      {\n-\t\tpp_string (buffer, \"--  skipped incomplete struct \");\n+\t\tpp_string (buffer, \"type \");\n \t\tdump_ada_node (buffer, t, type, spc, false, true);\n+\t\tpp_string (buffer, \" is null record;   -- incomplete struct\");\n+\t\tTREE_VISITED (t) = 1;\n \t\treturn 1;\n \t      }\n "}, {"sha": "dd2651f240780e8776193803704177ee4b1c4ff4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09de35509f92de3a11a1ca879b958c0f73e28b88", "patch": "@@ -1,3 +1,7 @@\n+2018-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-11.c: New test.\n+\n 2018-02-28  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/84597"}, {"sha": "c8126044bd1e553e8ddc06c0676dc72d4adea2a2", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-11.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de35509f92de3a11a1ca879b958c0f73e28b88/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-11.c?ref=09de35509f92de3a11a1ca879b958c0f73e28b88", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+typedef struct T My_T;\n+\n+int foo1 (My_T *);\n+\n+int foo2 (My_T *);\n+\n+/* { dg-final { scan-ada-spec-not \"System.Address\" } } */\n+/* { dg-final { cleanup-ada-spec } } */"}]}