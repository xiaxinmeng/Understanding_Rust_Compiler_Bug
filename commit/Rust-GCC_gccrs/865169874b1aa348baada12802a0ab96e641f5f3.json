{"sha": "865169874b1aa348baada12802a0ab96e641f5f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY1MTY5ODc0YjFhYTM0OGJhYWRhMTI4MDJhMGFiOTZlNjQxZjVmMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-03-28T03:22:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-28T03:22:25Z"}, "message": "re PR target/80162 (ICE on invalid code (address of register variable))\n\n        PR tree-optimization/80162\n\t* tree-ssa-dom.c (derive_equivalences_from_bit_ior): Fix typo in\n\tfunction name.  Limit recursion depth.\n\t(record_temporary_equivalences): Corresponding changes.\n\n\tPR tree-optimization/80162\n\t* gcc.c-torture/compile/pr80216.c: New test.\n\nFrom-SVN: r246517", "tree": {"sha": "ea0b4f860253c327ab9e18c57e63b77337cc0e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea0b4f860253c327ab9e18c57e63b77337cc0e72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865169874b1aa348baada12802a0ab96e641f5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865169874b1aa348baada12802a0ab96e641f5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865169874b1aa348baada12802a0ab96e641f5f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865169874b1aa348baada12802a0ab96e641f5f3/comments", "author": null, "committer": null, "parents": [{"sha": "980999836f645cc9d3444ea41fceb06f8fd78ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980999836f645cc9d3444ea41fceb06f8fd78ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980999836f645cc9d3444ea41fceb06f8fd78ead"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "10bb56bada237b99efc162436aae38336d3fd0cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=865169874b1aa348baada12802a0ab96e641f5f3", "patch": "@@ -1,3 +1,10 @@\n+017-03-27  Jeff Law  <law@redhat.com>\n+\n+        PR tree-optimization/80162\n+\t* tree-ssa-dom.c (derive_equivalences_from_bit_ior): Fix typo in\n+\tfunction name.  Limit recursion depth.\n+\t(record_temporary_equivalences): Corresponding changes.\n+\n 2017-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/invoke.texi (-Wno-narrowing): Reorder so default behavior is"}, {"sha": "9c7f2cf9ae9e695e8f5de18c9f770ffe6333b034", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=865169874b1aa348baada12802a0ab96e641f5f3", "patch": "@@ -1,3 +1,8 @@\n+2017-03-27  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/80162\n+\t* gcc.c-torture/compile/pr80216.c: New test.\n+\n 2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/80162"}, {"sha": "cf5b27d3451749630cb64927ef66ad6ae03eb7b1", "filename": "gcc/testsuite/gcc.c-torture/compile/pr80216.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80216.c?ref=865169874b1aa348baada12802a0ab96e641f5f3", "patch": "@@ -0,0 +1,37 @@\n+int u4, lx, e0, zy, pz;\n+\n+void\n+tb (int m6)\n+{\n+  for (pz = 0; pz < 1; ++pz)\n+    {\n+      for (zy = 0; zy < 1; ++zy)\n+        for (u4 = 0; u4 < 1; ++u4)\n+          for (e0 = 0; e0 < 1; ++e0)\n+            {\n+ as:\n+              for (;;)\n+                {\n+                }\n+            }\n+\n+      if (e0 != 0)\n+        goto ql;\n+\n+      if (0)\n+        {\n+ o3:\n+          for (lx = 0; lx < 1; ++lx)\n+            {\n+              m6 |= lx;\n+              if (m6 == 0)\n+                lx = 0;\n+ ql:\n+              ;\n+            }\n+          goto as;\n+        }\n+    }\n+  goto o3;\n+}\n+"}, {"sha": "d2263bb13e698c41ca7262972f3b2b45a00b2c90", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865169874b1aa348baada12802a0ab96e641f5f3/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=865169874b1aa348baada12802a0ab96e641f5f3", "patch": "@@ -692,11 +692,18 @@ back_propagate_equivalences (tree lhs, edge e,\n }\n \n /* Record NAME has the value zero and if NAME was set from a BIT_IOR_EXPR\n-   recurse into both operands recording their values as zero too.  */\n+   recurse into both operands recording their values as zero too. \n+   RECURSION_DEPTH controls how far back we recurse through the operands\n+   of the BIT_IOR_EXPR.  */\n \n static void\n-derive_equivalencs_from_bit_ior (tree name, const_and_copies *const_and_copies)\n+derive_equivalences_from_bit_ior (tree name,\n+\t\t\t\t  const_and_copies *const_and_copies,\n+\t\t\t\t  int recursion_limit)\n {\n+  if (recursion_limit == 0)\n+    return;\n+\n   if (TREE_CODE (name) == SSA_NAME)\n     {\n       tree value = fold_convert (TREE_TYPE (name), integer_zero_node);\n@@ -710,10 +717,12 @@ derive_equivalencs_from_bit_ior (tree name, const_and_copies *const_and_copies)\n       if (is_gimple_assign (def_stmt)\n \t  && gimple_assign_rhs_code (def_stmt) == BIT_IOR_EXPR)\n \t{\n-\t  derive_equivalencs_from_bit_ior (gimple_assign_rhs1 (def_stmt),\n-\t\t\t\t\t   const_and_copies);\n-\t  derive_equivalencs_from_bit_ior (gimple_assign_rhs2 (def_stmt),\n-\t\t\t\t\t   const_and_copies);\n+\t  derive_equivalences_from_bit_ior (gimple_assign_rhs1 (def_stmt),\n+\t\t\t\t\t    const_and_copies,\n+\t\t\t\t\t    recursion_limit - 1);\n+\t  derive_equivalences_from_bit_ior (gimple_assign_rhs2 (def_stmt),\n+\t\t\t\t\t    const_and_copies,\n+\t\t\t\t\t    recursion_limit - 1);\n \t}\n     }\n }\n@@ -751,7 +760,7 @@ record_temporary_equivalences (edge e,\n \t      enum tree_code code = eq->cond.ops.binary.op;\n \t      if ((code == EQ_EXPR && eq->value == boolean_true_node)\n \t\t  || (code == NE_EXPR && eq->value == boolean_false_node))\n-\t\tderive_equivalencs_from_bit_ior (op0, const_and_copies);\n+\t\tderive_equivalences_from_bit_ior (op0, const_and_copies, 4);\n \n \t      /* TODO: We could handle BIT_AND_EXPR in a similar fashion\n \t\t recording that the operands have a nonzero value.  */"}]}