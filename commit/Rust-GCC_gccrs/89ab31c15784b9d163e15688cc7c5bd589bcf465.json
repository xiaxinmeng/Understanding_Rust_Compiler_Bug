{"sha": "89ab31c15784b9d163e15688cc7c5bd589bcf465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhYjMxYzE1Nzg0YjlkMTYzZTE1Njg4Y2M3YzViZDU4OWJjZjQ2NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-03-28T15:29:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-03-28T15:29:40Z"}, "message": "data-streamer-in.c (streamer_read_gcov_count): New function.\n\n\n\t* data-streamer-in.c (streamer_read_gcov_count): New function.\n\t* gimple-streamer-out.c: Include value-prof.h.\n\t(output_gimple_stmt): Output histogram.\n\t(output_bb): Use streamer_write_gcov_count.\n\t* value-prof.c: Include data-streamer.h\n\t(dump_histogram_value): Add HIST_TYPE_MAX.\n\t(stream_out_histogram_value): New function.\n\t(stream_in_histogram_value): New function.\n\t* value-prof.h (enum hist_type): Add HIST_TYPE_MAX.\n\t(stream_out_histogram_value, stream_in_histogram_value): Declare.\n\t* data-streamer-out.c (streamer_write_gcov_count): New function.\n\t(streamer_write_gcov_count_stream): New function.\n\t* lto-cgraph.c (lto_output_edge): Update counter streaming.\n\t(lto_output_node): Likewise.\n\t(input_node, input_edge): Likewise.\n\t* lto-streamer-out.c (output_cfg): Update streaming.\n\t* lto-streamer-in.c (input_cfg): Likewise.\n\t* data-streamer.h (streamer_write_gcov_count,\n\tstreamer_write_gcov_count_stream, streamer_read_gcov_count): Declare.\n\t* gimple-streamer-in.c: Include value-prof.h\n\t(input_gimple_stmt): Input histograms.\n\t(input_bb): Update profile streaming.\n\nFrom-SVN: r197205", "tree": {"sha": "35ba8ad462caf0907fefeff0406e6ef831248073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ba8ad462caf0907fefeff0406e6ef831248073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ab31c15784b9d163e15688cc7c5bd589bcf465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ab31c15784b9d163e15688cc7c5bd589bcf465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ab31c15784b9d163e15688cc7c5bd589bcf465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ab31c15784b9d163e15688cc7c5bd589bcf465/comments", "author": null, "committer": null, "parents": [{"sha": "525ec7ee9ca06a99b3826ded6fcba68cd5ab88c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525ec7ee9ca06a99b3826ded6fcba68cd5ab88c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525ec7ee9ca06a99b3826ded6fcba68cd5ab88c1"}], "stats": {"total": 184, "additions": 172, "deletions": 12}, "files": [{"sha": "36ba256ea7bb3981706f21e31357e0bbfac8168b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -1,9 +1,35 @@\n+2013-03-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* data-streamer-in.c (streamer_read_gcov_count): New function.\n+\t* gimple-streamer-out.c: Include value-prof.h.\n+\t(output_gimple_stmt): Output histogram.\n+\t(output_bb): Use streamer_write_gcov_count.\n+\t* value-prof.c: Include data-streamer.h\n+\t(dump_histogram_value): Add HIST_TYPE_MAX.\n+\t(stream_out_histogram_value): New function.\n+\t(stream_in_histogram_value): New function.\n+\t* value-prof.h (enum hist_type): Add HIST_TYPE_MAX.\n+\t(stream_out_histogram_value, stream_in_histogram_value): Declare.\n+\t* data-streamer-out.c (streamer_write_gcov_count): New function.\n+\t(streamer_write_gcov_count_stream): New function.\n+\t* lto-cgraph.c (lto_output_edge): Update counter streaming.\n+\t(lto_output_node): Likewise.\n+\t(input_node, input_edge): Likewise.\n+\t* lto-streamer-out.c (output_cfg): Update streaming.\n+\t* lto-streamer-in.c (input_cfg): Likewise.\n+\t* data-streamer.h (streamer_write_gcov_count,\n+\tstreamer_write_gcov_count_stream, streamer_read_gcov_count): Declare.\n+\t* gimple-streamer-in.c: Include value-prof.h\n+\t(input_gimple_stmt): Input histograms.\n+\t(input_bb): Update profile streaming.\n+\n 2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n    \t* genmodes.c (emit_max_int): New function.\n \t(emit_insn_modes_h): Added call to emit_max_function.\n \t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_INT, MAX_BITSIZE_MODE_ANY_MODE): Added doc.\n \t* machmode.def: Fixed comment.\n+\n 2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* combine.c (try_combine): Removed useless assert."}, {"sha": "54ec7e1260e6ee5723ef52fa2e7636b89dce8702", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -2137,9 +2137,9 @@ lto-compress.o: lto-compress.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TREE_H) langhooks.h $(LTO_STREAMER_H) $(LTO_SECTION_H) \\\n \tlto-compress.h $(DIAGNOSTIC_CORE_H) $(DIAGNOSTIC_CORE_H)\n data-streamer-in.o: data-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-    $(DATA_STREAMER_H) $(DIAGNOSTIC_H)\n+    $(DATA_STREAMER_H) $(DIAGNOSTIC_H) value-prof.h\n data-streamer-out.o: data-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-    $(DATA_STREAMER_H)\n+    $(DATA_STREAMER_H) value-prof.h\n data-streamer.o: data-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(DATA_STREAMER_H)\n gimple-streamer-in.o: gimple-streamer-in.c $(CONFIG_H) $(SYSTEM_H) \\\n@@ -3088,7 +3088,7 @@ value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n    tree-flow-inline.h $(TIMEVAR_H) $(DIAGNOSTIC_CORE_H) pointer-set.h \\\n-   $(GIMPLE_PRETTY_PRINT_H)\n+   $(GIMPLE_PRETTY_PRINT_H) $(DATA_STREAMER_H)\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H) $(PARAMS_H) $(TARGET_H)"}, {"sha": "e9ceb29312a3ea962cd2dc5b86b6b3cccac5ab01", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -158,3 +158,13 @@ streamer_read_hwi (struct lto_input_block *ib)\n \t}\n     }\n }\n+\n+/* Read gcov_type value from IB.  */\n+\n+gcov_type\n+streamer_read_gcov_count (struct lto_input_block *ib)\n+{\n+  gcov_type ret = streamer_read_hwi (ib);\n+  gcc_assert (ret >= 0);\n+  return ret;\n+}"}, {"sha": "72f4f72e1bbf5483930c9dcfd0aaa0f82b52aaf6", "filename": "gcc/data-streamer-out.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-out.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -174,6 +174,13 @@ streamer_write_hwi (struct output_block *ob, HOST_WIDE_INT work)\n   streamer_write_hwi_stream (ob->main_stream, work);\n }\n \n+/* Write a gcov counter value WORK to OB->main_stream.  */\n+\n+void\n+streamer_write_gcov_count (struct output_block *ob, gcov_type work)\n+{\n+  streamer_write_gcov_count_stream (ob->main_stream, work);\n+}\n \n /* Write an unsigned HOST_WIDE_INT value WORK to OBS.  */\n \n@@ -216,3 +223,13 @@ streamer_write_hwi_stream (struct lto_output_stream *obs, HOST_WIDE_INT work)\n     }\n   while (more);\n }\n+\n+/* Write a GCOV counter value WORK to OBS.  */\n+\n+void\n+streamer_write_gcov_count_stream (struct lto_output_stream *obs, gcov_type work)\n+{\n+  gcc_assert (work >= 0);\n+  gcc_assert ((HOST_WIDE_INT) work == work);\n+  streamer_write_hwi_stream (obs, work);\n+}"}, {"sha": "e2ab7adfad65b8550781f2ab91bacd5350e7ee3b", "filename": "gcc/data-streamer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fdata-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer.h?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -63,6 +63,7 @@ HOST_WIDE_INT bp_unpack_var_len_int (struct bitpack_d *);\n void streamer_write_zero (struct output_block *);\n void streamer_write_uhwi (struct output_block *, unsigned HOST_WIDE_INT);\n void streamer_write_hwi (struct output_block *, HOST_WIDE_INT);\n+void streamer_write_gcov_count (struct output_block *, gcov_type);\n void streamer_write_string (struct output_block *, struct lto_output_stream *,\n \t\t\t    const char *, bool);\n unsigned streamer_string_index (struct output_block *, const char *,\n@@ -77,6 +78,7 @@ void bp_pack_string (struct output_block *, struct bitpack_d *,\n void streamer_write_uhwi_stream (struct lto_output_stream *,\n \t\t\t\t unsigned HOST_WIDE_INT);\n void streamer_write_hwi_stream (struct lto_output_stream *, HOST_WIDE_INT);\n+void streamer_write_gcov_count_stream (struct lto_output_stream *, gcov_type);\n \n /* In data-streamer-in.c  */\n const char *string_for_index (struct data_in *, unsigned int, unsigned int *);\n@@ -89,6 +91,7 @@ const char *bp_unpack_indexed_string (struct data_in *, struct bitpack_d *,\n const char *bp_unpack_string (struct data_in *, struct bitpack_d *);\n unsigned HOST_WIDE_INT streamer_read_uhwi (struct lto_input_block *);\n HOST_WIDE_INT streamer_read_hwi (struct lto_input_block *);\n+gcov_type streamer_read_gcov_count (struct lto_input_block *);\n \n /* Returns a hash code for P.  Adapted from libiberty's htab_hash_string\n    to support strings that may not end in '\\0'.  */"}, {"sha": "cedacb6642c5038d2c3239ce5318ccd2b6995e4d", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"gimple-streamer.h\"\n+#include \"value-prof.h\"\n \n /* Read a PHI function for basic block BB in function FN.  DATA_IN is\n    the file being read.  IB is the input block to use for reading.  */\n@@ -86,6 +87,7 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n   unsigned HOST_WIDE_INT num_ops;\n   size_t i;\n   struct bitpack_d bp;\n+  bool has_hist;\n \n   code = lto_tag_to_gimple_code (tag);\n \n@@ -97,6 +99,7 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n   if (is_gimple_assign (stmt))\n     stmt->gsbase.nontemporal_move = bp_unpack_value (&bp, 1);\n   stmt->gsbase.has_volatile_ops = bp_unpack_value (&bp, 1);\n+  has_hist = bp_unpack_value (&bp, 1);\n   stmt->gsbase.subcode = bp_unpack_var_len_unsigned (&bp);\n \n   /* Read location information.  */\n@@ -300,6 +303,8 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \n   /* Mark the statement modified so its operand vectors can be filled in.  */\n   gimple_set_modified (stmt, true);\n+  if (has_hist)\n+    stream_in_histogram_value (ib, stmt);\n \n   return stmt;\n }\n@@ -324,7 +329,7 @@ input_bb (struct lto_input_block *ib, enum LTO_tags tag,\n   index = streamer_read_uhwi (ib);\n   bb = BASIC_BLOCK_FOR_FUNCTION (fn, index);\n \n-  bb->count = (streamer_read_hwi (ib) * count_materialization_scale\n+  bb->count = (streamer_read_gcov_count (ib) * count_materialization_scale\n \t       + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n   bb->frequency = streamer_read_hwi (ib);\n   bb->flags = streamer_read_hwi (ib);"}, {"sha": "0b8d8c1d2513517a906776d7d33fcee398eb1f1c", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-streamer.h\"\n #include \"lto-streamer.h\"\n #include \"tree-streamer.h\"\n+#include \"value-prof.h\"\n \n /* Output PHI function PHI to the main stream in OB.  */\n \n@@ -59,6 +60,7 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n   enum gimple_code code;\n   enum LTO_tags tag;\n   struct bitpack_d bp;\n+  histogram_value hist;\n \n   /* Emit identifying tag.  */\n   code = gimple_code (stmt);\n@@ -72,6 +74,8 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n   if (is_gimple_assign (stmt))\n     bp_pack_value (&bp, gimple_assign_nontemporal_move_p (stmt), 1);\n   bp_pack_value (&bp, gimple_has_volatile_ops (stmt), 1);\n+  hist = gimple_histogram_value (cfun, stmt);\n+  bp_pack_value (&bp, hist != NULL, 1);\n   bp_pack_var_len_unsigned (&bp, stmt->gsbase.subcode);\n \n   /* Emit location information for the statement.  */\n@@ -167,6 +171,8 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n     default:\n       gcc_unreachable ();\n     }\n+  if (hist)\n+    stream_out_histogram_value (ob, hist);\n }\n \n \n@@ -183,7 +189,7 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \t\t\t\t: LTO_bb0);\n \n   streamer_write_uhwi (ob, bb->index);\n-  streamer_write_hwi (ob, bb->count);\n+  streamer_write_gcov_count (ob, bb->count);\n   streamer_write_hwi (ob, bb->frequency);\n   streamer_write_hwi (ob, bb->flags);\n "}, {"sha": "d9d798a2ade3b634c92a406b6ed746237d86a419", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -267,7 +267,7 @@ lto_output_edge (struct lto_simple_output_block *ob, struct cgraph_edge *edge,\n       streamer_write_hwi_stream (ob->main_stream, ref);\n     }\n \n-  streamer_write_hwi_stream (ob->main_stream, edge->count);\n+  streamer_write_gcov_count_stream (ob->main_stream, edge->count);\n \n   bp = bitpack_create (ob->main_stream);\n   uid = (!gimple_has_body_p (edge->caller->symbol.decl)\n@@ -429,7 +429,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \n \n   lto_output_fn_decl_index (ob->decl_state, ob->main_stream, node->symbol.decl);\n-  streamer_write_hwi_stream (ob->main_stream, node->count);\n+  streamer_write_gcov_count_stream (ob->main_stream, node->count);\n   streamer_write_hwi_stream (ob->main_stream, node->count_materialization_scale);\n \n   streamer_write_hwi_stream (ob->main_stream,\n@@ -948,7 +948,7 @@ input_node (struct lto_file_decl_data *file_data,\n   if (order >= symtab_order)\n     symtab_order = order + 1;\n \n-  node->count = streamer_read_hwi (ib);\n+  node->count = streamer_read_gcov_count (ib);\n   node->count_materialization_scale = streamer_read_hwi (ib);\n \n   count = streamer_read_hwi (ib);\n@@ -1109,7 +1109,7 @@ input_edge (struct lto_input_block *ib, vec<symtab_node> nodes,\n   else\n     callee = NULL;\n \n-  count = (gcov_type) streamer_read_hwi (ib);\n+  count = streamer_read_gcov_count (ib);\n \n   bp = streamer_read_bitpack (ib);\n   inline_failed = bp_unpack_enum (&bp, cgraph_inline_failed_enum, CIF_N_REASONS);"}, {"sha": "0e128fddd7885e083f7300ad111b90e9f713e70f", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -622,7 +622,7 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n \n \t  dest_index = streamer_read_uhwi (ib);\n \t  probability = (int) streamer_read_hwi (ib);\n-\t  count = ((gcov_type) streamer_read_hwi (ib) * count_materialization_scale\n+\t  count = ((gcov_type) streamer_read_gcov_count (ib) * count_materialization_scale\n \t\t   + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n \t  edge_flags = streamer_read_uhwi (ib);\n "}, {"sha": "f9184c3c16f7725624f171a0b66c70d3190c5683", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -644,7 +644,7 @@ output_cfg (struct output_block *ob, struct function *fn)\n \t{\n \t  streamer_write_uhwi (ob, e->dest->index);\n \t  streamer_write_hwi (ob, e->probability);\n-\t  streamer_write_hwi (ob, e->count);\n+\t  streamer_write_gcov_count (ob, e->count);\n \t  streamer_write_uhwi (ob, e->flags);\n \t}\n     }"}, {"sha": "39bbdbf02e7410d694261e74d4377b72ec6e4e1c", "filename": "gcc/value-prof.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"pointer-set.h\"\n #include \"profile.h\"\n+#include \"data-streamer.h\"\n \n /* In this file value profile based optimizations are placed.  Currently the\n    following optimizations are implemented (for more detailed descriptions\n@@ -333,9 +334,98 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n+    case HIST_TYPE_MAX:\n+      gcc_unreachable ();\n    }\n }\n \n+/* Dump information about HIST to DUMP_FILE.  */\n+\n+void\n+stream_out_histogram_value (struct output_block *ob, histogram_value hist)\n+{\n+  struct bitpack_d bp;\n+  unsigned int i;\n+\n+  bp = bitpack_create (ob->main_stream);\n+  bp_pack_enum (&bp, hist_type, HIST_TYPE_MAX, hist->type);\n+  bp_pack_value (&bp, hist->hvalue.next != NULL, 1);\n+  streamer_write_bitpack (&bp);\n+  switch (hist->type)\n+    {\n+    case HIST_TYPE_INTERVAL:\n+      streamer_write_hwi (ob, hist->hdata.intvl.int_start);\n+      streamer_write_uhwi (ob, hist->hdata.intvl.steps);\n+      break;\n+    default:\n+      break;\n+    }\n+  for (i = 0; i < hist->n_counters; i++)\n+    streamer_write_gcov_count (ob, hist->hvalue.counters[i]);\n+  if (hist->hvalue.next)\n+    stream_out_histogram_value (ob, hist->hvalue.next);\n+}\n+/* Dump information about HIST to DUMP_FILE.  */\n+\n+void\n+stream_in_histogram_value (struct lto_input_block *ib, gimple stmt)\n+{\n+  enum hist_type type;\n+  unsigned int ncounters = 0;\n+  struct bitpack_d bp;\n+  unsigned int i;\n+  histogram_value new_val;\n+  bool next;\n+  histogram_value *next_p = NULL;\n+\n+  do\n+    {\n+      bp = streamer_read_bitpack (ib);\n+      type = bp_unpack_enum (&bp, hist_type, HIST_TYPE_MAX);\n+      next = bp_unpack_value (&bp, 1);\n+      new_val = gimple_alloc_histogram_value (cfun, type, stmt, NULL);\n+      switch (type)\n+\t{\n+\tcase HIST_TYPE_INTERVAL:\n+\t  new_val->hdata.intvl.int_start = streamer_read_hwi (ib);\n+\t  new_val->hdata.intvl.steps = streamer_read_uhwi (ib);\n+\t  ncounters = new_val->hdata.intvl.steps + 2;\n+\t  break;\n+\n+\tcase HIST_TYPE_POW2:\n+\tcase HIST_TYPE_AVERAGE:\n+\t  ncounters = 2;\n+\t  break;\n+\n+\tcase HIST_TYPE_SINGLE_VALUE:\n+\tcase HIST_TYPE_INDIR_CALL:\n+\t  ncounters = 3;\n+\t  break;\n+\n+\tcase HIST_TYPE_CONST_DELTA:\n+\t  ncounters = 4;\n+\t  break;\n+\n+\tcase HIST_TYPE_IOR:\n+\t  ncounters = 1;\n+\t  break;\n+\tcase HIST_TYPE_MAX:\n+\t  gcc_unreachable ();\n+\t}\n+      new_val->hvalue.counters = XNEWVAR (gcov_type, sizeof (*new_val->hvalue.counters) * ncounters);\n+      new_val->n_counters = ncounters;\n+      for (i = 0; i < ncounters; i++)\n+\tnew_val->hvalue.counters[i] = streamer_read_gcov_count (ib);\n+      debug_gimple_stmt (stmt);\n+      if (!next_p)\n+\tgimple_add_histogram_value (cfun, stmt, new_val);\n+      else\n+\t*next_p = new_val;\n+      next_p = &new_val->hvalue.next;\n+    }\n+  while (next);\n+}\n+\n /* Dump all histograms attached to STMT to DUMP_FILE.  */\n \n void"}, {"sha": "7030d90e988a58a499a4a8a022627aab62980fac", "filename": "gcc/value-prof.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab31c15784b9d163e15688cc7c5bd589bcf465/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=89ab31c15784b9d163e15688cc7c5bd589bcf465", "patch": "@@ -33,7 +33,8 @@ enum hist_type\n   HIST_TYPE_INDIR_CALL,   /* Tries to identify the function that is (almost)\n \t\t\t    called in indirect call */\n   HIST_TYPE_AVERAGE,\t/* Compute average value (sum of all values).  */\n-  HIST_TYPE_IOR\t\t/* Used to compute expected alignment.  */\n+  HIST_TYPE_IOR,\t/* Used to compute expected alignment.  */\n+  HIST_TYPE_MAX\n };\n \n #define COUNTER_FOR_HIST_TYPE(TYPE) ((int) (TYPE) + GCOV_FIRST_VALUE_COUNTER)\n@@ -98,6 +99,8 @@ extern void gimple_gen_const_delta_profiler (histogram_value,\n \t\t\t\t\t     unsigned, unsigned);\n extern void gimple_gen_average_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_ior_profiler (histogram_value, unsigned, unsigned);\n+extern void stream_out_histogram_value (struct output_block *, histogram_value);\n+extern void stream_in_histogram_value (struct lto_input_block *, gimple);\n \n /* In profile.c.  */\n extern void init_branch_prob (void);"}]}