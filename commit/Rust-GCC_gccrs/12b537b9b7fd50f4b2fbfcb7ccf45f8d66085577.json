{"sha": "12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "node_id": "C_kwDOANBUbNoAKDEyYjUzN2I5YjdmZDUwZjRiMmZiZmNiN2NjZjQ1ZjhkNjYwODU1Nzc", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2022-09-21T20:55:02Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-09-22T16:35:07Z"}, "message": "Fortran: Fix automatic reallocation inside select rank [PR100103]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100103\n\t* trans-array.cc (gfc_is_reallocatable_lhs): Add select rank\n\ttemporary associate names as possible targets of automatic\n\treallocation.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100103\n\t* gfortran.dg/PR100103.f90: New test.", "tree": {"sha": "c62bd86b06c68972447c01645552673126147511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62bd86b06c68972447c01645552673126147511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc71318a91286b5f00e88f07aab818ac82510692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc71318a91286b5f00e88f07aab818ac82510692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc71318a91286b5f00e88f07aab818ac82510692"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "795ce14af08eab0fe6128f1f8a9071817d2b18c0", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "patch": "@@ -10378,7 +10378,7 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n \n   /* An allocatable class variable with no reference.  */\n   if (sym->ts.type == BT_CLASS\n-      && !sym->attr.associate_var\n+      && (!sym->attr.associate_var || sym->attr.select_rank_temporary)\n       && CLASS_DATA (sym)->attr.allocatable\n       && expr->ref\n       && ((expr->ref->type == REF_ARRAY && expr->ref->u.ar.type == AR_FULL\n@@ -10393,7 +10393,7 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n \n   /* An allocatable variable.  */\n   if (sym->attr.allocatable\n-      && !sym->attr.associate_var\n+      && (!sym->attr.associate_var || sym->attr.select_rank_temporary)\n       && expr->ref\n       && expr->ref->type == REF_ARRAY\n       && expr->ref->u.ar.type == AR_FULL)"}, {"sha": "21405610a71dd5f4a50a26edde74e0e6dac6bd82", "filename": "gcc/testsuite/gfortran.dg/PR100103.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100103.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100103.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100103.f90?ref=12b537b9b7fd50f4b2fbfcb7ccf45f8d66085577", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR100103\n+!\n+\n+program main_p\n+  implicit none\n+\n+  integer            :: i\n+  integer, parameter :: n = 11\n+\n+  type :: foo_t\n+    integer :: i\n+  end type foo_t\n+\n+  type(foo_t), parameter :: a(*) = [(foo_t(i), i=1,n)]\n+\n+  type(foo_t),  allocatable :: bar_d(:)\n+  class(foo_t), allocatable :: bar_p(:)\n+  class(*),     allocatable :: bar_u(:)\n+\n+\n+  call foo_d(bar_d)\n+  if(.not.allocated(bar_d)) stop 1\n+  if(any(bar_d%i/=a%i)) stop 2\n+  deallocate(bar_d)\n+  call foo_p(bar_p)\n+  if(.not.allocated(bar_p)) stop 3\n+  if(any(bar_p%i/=a%i)) stop 4\n+  deallocate(bar_p)\n+  call foo_u(bar_u)\n+  if(.not.allocated(bar_u)) stop 5\n+  select type(bar_u)\n+  type is(foo_t)\n+    if(any(bar_u%i/=a%i)) stop 6\n+  class default\n+    stop 7\n+  end select\n+  deallocate(bar_u)\n+\n+contains\n+\n+  subroutine foo_d(that)\n+    type(foo_t), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+      that = a\n+    rank default\n+      stop 8\n+    end select\n+  end subroutine foo_d\n+\n+  subroutine foo_p(that)\n+    class(foo_t), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+      that = a\n+    rank default\n+      stop 9\n+    end select\n+  end subroutine foo_p\n+\n+  subroutine foo_u(that)\n+    class(*), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+      that = a\n+    rank default\n+      stop 10\n+    end select\n+  end subroutine foo_u\n+\n+end program main_p"}]}