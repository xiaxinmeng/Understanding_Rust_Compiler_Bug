{"sha": "d4aef883b7470379c369588dbea57315e1c67a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhZWY4ODNiNzQ3MDM3OWMzNjk1ODhkYmVhNTczMTVlMWM2N2E0Yw==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T18:40:33Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T18:40:33Z"}, "message": "gigi.h: Likewise.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* gcc-interface/gigi.h: Likewise.\n\t* gcc-interface/trans.c: Likewise.\n\t* gcc-interface/utils2.c: Likewise.\n\t* gnat_rm.texi: Likewise.\n\t* gnat_ugn.texi: Likewise.\n\t* raise-gcc.c: Likewise.\n\t* sigtramp-ppcvxw.c: Likewise.\n\t* sysdep.c: Likewise.\n\t* terminals.c: Likewise.\n\nFrom-SVN: r201111", "tree": {"sha": "a4c17100219c6730eb84bf3d9da2bdf66c0bc5cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4c17100219c6730eb84bf3d9da2bdf66c0bc5cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4aef883b7470379c369588dbea57315e1c67a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4aef883b7470379c369588dbea57315e1c67a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4aef883b7470379c369588dbea57315e1c67a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4aef883b7470379c369588dbea57315e1c67a4c/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "688010bad0375a275466ac1adb98aff80c0e77ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688010bad0375a275466ac1adb98aff80c0e77ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688010bad0375a275466ac1adb98aff80c0e77ac"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "4e0b0a8e349805b99a07144a5566a72eab70e9b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -1,3 +1,15 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* gcc-interface/gigi.h: Likewise.\n+\t* gcc-interface/trans.c: Likewise.\n+\t* gcc-interface/utils2.c: Likewise.\n+\t* gnat_rm.texi: Likewise.\n+\t* gnat_ugn.texi: Likewise.\n+\t* raise-gcc.c: Likewise.\n+\t* sigtramp-ppcvxw.c: Likewise.\n+\t* sysdep.c: Likewise.\n+\t* terminals.c: Likewise.\n+\n 2013-07-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/57934"}, {"sha": "d18fd4d2207f558dbf913d9ebbc2cc76b6e825b1", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -1043,7 +1043,7 @@ extern void enumerate_modes (void (*f) (const char *, int, int, int, int, int,\n }\n #endif\n \n-/* Let code know whether we are targetting VMS without need of\n+/* Let code know whether we are targeting VMS without need of\n    intrusive preprocessor directives.  */\n #ifndef TARGET_ABI_OPEN_VMS\n #define TARGET_ABI_OPEN_VMS 0"}, {"sha": "f91f4b83a6e4545598f84f460ec6493e2a2f6887", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -64,7 +64,7 @@\n    instead.  */\n #define ALLOCA_THRESHOLD 1000\n \n-/* Let code below know whether we are targetting VMS without need of\n+/* Let code below know whether we are targeting VMS without need of\n    intrusive preprocessor directives.  */\n #ifndef TARGET_ABI_OPEN_VMS\n #define TARGET_ABI_OPEN_VMS 0\n@@ -9163,7 +9163,7 @@ set_end_locus_from_node (tree gnu_node, Node_Id gnat_node)\n   /* Pick the GNAT node of which we'll take the sloc to assign to the GCC node\n      end_locus when there is one.  We consider only GNAT nodes with a possible\n      End_Label attached.  If the End_Label actually was unassigned, fallback\n-     on the orginal node.  We'd better assign an explicit sloc associated with\n+     on the original node.  We'd better assign an explicit sloc associated with\n      the outer construct in any case.  */\n \n   switch (Nkind (gnat_node))"}, {"sha": "7f7f6af034ae9cc3886020f518b3b8fa7bf6b5a0", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -1902,15 +1902,15 @@ build_simple_component_ref (tree record_variable, tree component,\n     {\n       tree new_field;\n \n-      /* First loop thru normal components.  */\n+      /* First loop through normal components.  */\n       for (new_field = TYPE_FIELDS (record_type);\n \t   new_field;\n \t   new_field = DECL_CHAIN (new_field))\n \tif (SAME_FIELD_P (field, new_field))\n \t  break;\n \n       /* Next, see if we're looking for an inherited component in an extension.\n-\t If so, look thru the extension directly, but not if the type contains\n+\t If so, look through the extension directly, but not if the type contains\n \t a placeholder, as it might be needed for a later substitution.  */\n       if (!new_field\n \t  && TREE_CODE (record_variable) == VIEW_CONVERT_EXPR\n@@ -1926,7 +1926,7 @@ build_simple_component_ref (tree record_variable, tree component,\n \t    return ref;\n \t}\n \n-      /* Next, loop thru DECL_INTERNAL_P components if we haven't found the\n+      /* Next, loop through DECL_INTERNAL_P components if we haven't found the\n \t component in the first search.  Doing this search in two steps is\n \t required to avoid hidden homonymous fields in the _Parent field.  */\n       if (!new_field)"}, {"sha": "c1109b9c98a4c6be597dd26f7b5452b00a0bc834", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -2488,7 +2488,7 @@ location of the declaration of the entity to eliminate in a generic unit.\n \n Note that the @code{Source_Location} argument specifies which of a set of\n similarly named entities is being eliminated, dealing both with overloading,\n-and also appearence of the same entity name in different scopes.\n+and also appearance of the same entity name in different scopes.\n \n This pragma indicates that the given entity is not used in the program to be\n compiled and built. The effect of the pragma is to allow the compiler to\n@@ -7072,7 +7072,7 @@ these three specific cases are treated as literal characters in the match.\n The above use of patterns to match the message applies only to warning\n messages generated by the front end. This form of the pragma with a\n string argument can also be used to control back end warnings controlled\n-by a \"-Wxxx\" switch. Such warnings can be identified by the appearence\n+by a \"-Wxxx\" switch. Such warnings can be identified by the appearance\n of a string of the form \"[-Wxxx]\" in the message which identifies the\n \"-W\" switch that controls the message. By using the text of the\n \"-W\" switch in the pragma, such back end warnings can be turned on and off."}, {"sha": "0a5f07db04aa995d1734a24165a7601d7b73adce", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -2316,7 +2316,7 @@ are unlikely to be able to be passed.\n \n Note that in the case of GNAT running\n on a platform that supports HP Ada 83, a higher degree of compatibility\n-can be guaranteed, and in particular records are layed out in an identical\n+can be guaranteed, and in particular records are laid out in an identical\n manner in the two compilers. Note also that if output from two different\n compilers is mixed, the program is responsible for dealing with elaboration\n issues. Probably the safest approach is to write the main program in the\n@@ -26171,7 +26171,7 @@ would prefer this precondition to be considered True at run time).\n \n @noindent\n To deal with the portability issue, and with the problem of\n-mathematical versus run-time intepretation of the expressions in\n+mathematical versus run-time interpretation of the expressions in\n assertions, GNAT provides comprehensive control over the handling\n of intermediate overflow. GNAT can operate in three modes, and\n furthemore, permits separate selection of operating modes for"}, {"sha": "d80456436ec2c9d26ee119b4c87cf7d499cd5bf9", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -231,7 +231,7 @@ db_phases (int phases)\n \n    If it is determined that indeed an action should be taken, that\n    is, if one action filter matches the exception being propagated,\n-   then control should be transfered to landing-pad.\n+   then control should be transferred to landing-pad.\n \n    A null first-action-index indicates that there are only cleanups\n    to run there."}, {"sha": "69baa1420dff697260e7c7b603a98aa5b227978e", "filename": "gcc/ada/sigtramp-ppcvxw.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fsigtramp-ppcvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fsigtramp-ppcvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-ppcvxw.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -131,7 +131,7 @@ void __gnat_sigtramp (int signo, void *si, void *sc,\n \n #define REGNO_PC  67  /* ARG_POINTER_REGNUM  */\n \n-/* asm string contruction helpers.  */\n+/* asm string construction helpers.  */\n \n #define STR(TEXT) #TEXT\n /* stringify expanded TEXT, surrounding it with double quotes.  */"}, {"sha": "58c51c01ff709a0443b4feadcd871e068409f2a4", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -721,7 +721,7 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n       && SystemTimeToTzSpecificLocalTime (&tzi, &utc_sys_time, &local_sys_time)\n       && SystemTimeToFileTime (&local_sys_time, &local_time.ft_time);\n \n-    /* An error has occured, return invalid_tzoff */\n+    /* An error has occurred, return invalid_tzoff */\n \n     if (!status) {\n       *off = __gnat_invalid_tzoff;"}, {"sha": "dfadca8d6a9a8655e6a0c506eb6643e6978face3", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4aef883b7470379c369588dbea57315e1c67a4c/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=d4aef883b7470379c369588dbea57315e1c67a4c", "patch": "@@ -295,7 +295,7 @@ nt_spawnve (char *exe, char **argv, char *env, struct TTY_Process *process)\n \n      Note that using backslash to escape embedded quotes requires\n      additional special handling if an embedded quote is already\n-     preceeded by backslash, or if an arg requiring quoting ends with\n+     preceded by backslash, or if an arg requiring quoting ends with\n      backslash.  In such cases, the run of escape characters needs to be\n      doubled.  For consistency, we apply this special handling as long\n      as the escape character is not quote.\n@@ -1332,7 +1332,7 @@ __gnat_setup_child_communication\n #endif\n \n #ifdef TIOCSCTTY\n-  /* make the tty the controling terminal */\n+  /* make the tty the controlling terminal */\n   status = ioctl (desc->slave_fd, TIOCSCTTY, 0);\n #endif\n \n@@ -1420,7 +1420,7 @@ int __gnat_terminate_process (pty_desc *desc)\n   return kill (desc->child_pid, SIGKILL);\n }\n \n-/* __gnat_tty_waitpid - wait for the child proces to die\n+/* __gnat_tty_waitpid - wait for the child process to die\n  *\n  * PARAMETERS\n  *   desc pty_desc structure"}]}