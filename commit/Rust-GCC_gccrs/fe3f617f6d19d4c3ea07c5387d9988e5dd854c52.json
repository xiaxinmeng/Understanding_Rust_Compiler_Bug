{"sha": "fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUzZjYxN2Y2ZDE5ZDRjM2VhMDdjNTM4N2Q5OTg4ZTVkZDg1NGM1Mg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-07-11T02:52:54Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-07-11T02:52:54Z"}, "message": "re PR rtl-optimization/16001 (unable to find a register to spill in class `AREG' (-O2 -funroll-loops))\n\n\tPR rtl-optimization/16001\n\t* loop-iv.c (iv_number_of_iterations): Prevent copy propagation in\n\tniter_expr.\n\nFrom-SVN: r84486", "tree": {"sha": "ab4910e33839a441a5e0100c82084557764f3c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab4910e33839a441a5e0100c82084557764f3c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52/comments", "author": null, "committer": null, "parents": [{"sha": "ef262483b88692efa90b6ef51cdada2d1b30e78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef262483b88692efa90b6ef51cdada2d1b30e78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef262483b88692efa90b6ef51cdada2d1b30e78c"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "a8e979df06cd1ffd6e3fe0bbb0ac58c1560588ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "patch": "@@ -1,3 +1,9 @@\n+2004-07-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\tPR rtl-optimization/16001\n+\t* loop-iv.c (iv_number_of_iterations): Prevent copy propagation in\n+\tniter_expr.\n+\n 2004-07-10  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h (LINK_COMMAND_SPEC): Don't call c++filt.\n@@ -10,6 +16,7 @@\n \n 2004-07-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n+\tPR rtl-optimization/15387\n \t* calls.c (check_sibcall_argument_overlap_1): Handle pointers\n \tto incoming args space correctly.\n "}, {"sha": "f390cdd487c34c08cd7f400d26aa170cee98d9ec", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f617f6d19d4c3ea07c5387d9988e5dd854c52/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=fe3f617f6d19d4c3ea07c5387d9988e5dd854c52", "patch": "@@ -1967,6 +1967,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   unsigned HOST_WIDEST_INT s, size, d, inv;\n   HOST_WIDEST_INT up, down, inc;\n   int was_sharp = false;\n+  rtx old_niter;\n \n   /* The meaning of these assumptions is this:\n      if !assumptions\n@@ -2366,6 +2367,8 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n       desc->niter_expr = delta;\n     }\n \n+  old_niter = desc->niter_expr;\n+\n   simplify_using_initial_values (loop, AND, &desc->assumptions);\n   if (desc->assumptions\n       && XEXP (desc->assumptions, 0) == const0_rtx)\n@@ -2408,8 +2411,19 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n       desc->const_iter = true;\n       desc->niter_max = desc->niter = val & GET_MODE_MASK (desc->mode);\n     }\n-  else if (!desc->niter_max)\n-    desc->niter_max = determine_max_iter (desc);\n+  else\n+    {\n+      if (!desc->niter_max)\n+\tdesc->niter_max = determine_max_iter (desc);\n+\n+      /* simplify_using_initial_values does a copy propagation on the registers\n+\t in the expression for the number of iterations.  This prolongs life\n+\t ranges of registers and increases register pressure, and usually\n+\t brings no gain (and if it happens to do, the cse pass will take care\n+\t of it anyway).  So prevent this behavior, unless it enabled us to\n+\t derive that the number of iterations is a constant.  */\n+      desc->niter_expr = old_niter;\n+    }\n \n   return;\n "}]}