{"sha": "13b93d4b899bd7390429113d2ac98ec057a8c3d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiOTNkNGI4OTliZDczOTA0MjkxMTNkMmFjOThlYzA1N2E4YzNkMg==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-03-05T14:37:54Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-03-05T14:37:54Z"}, "message": "Enable WBOINVD and PCONFIG instructions.\n\n2018-03-05  Olga Makhotina  <olga.makhotina@intel.com>\n\nEnable WBOINVD and PCONFIG instructions.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PCONFIG_SET,\n\tOPTION_MASK_ISA_PCONFIG_UNSET, OPTION_MASK_ISA_WBNOINVD_SET,\n\tOPTION_MASK_ISA_WBNOINVD_UNSET): New definitions.\n\t(ix86_handle_option): Handle -mpconfig and -mwbnoinvd.\n\t* config.gcc (pconfigintrin.h, wbnoinvdintrin.h) : Add headers.\n\t* config/i386/cpuid.h (bit_PCONFIG, bit_WBNOINVD): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mpconfig\n\tand -mwbnoinvd.\n\t* config/i386/i386-builtin.def (__builtin_ia32_wbnoinvd,\n\t__builtin_ia32_wbinvd): New builtins.\n\t(SPECIAL_ARGS2): New.\n\t* config/i386/i386-c.c (__WBNOINVD__, __PCONFIG__): New.\n\t(SPECIAL_ARGS2): New.\n\t* config/i386/i386.c (ix86_target_string): Add -mpconfig and -mwbnoinvd.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t(ix86_init_mmx_sse_builtins): Add special_args2.\n\t* config/i386/i386.h (TARGET_PCONFIG, TARGET_PCONFIG_P, TARGET_WBNOINVD,\n\tTARGET_WBNOINVD_P): New.\n\t* config/i386/i386.md (UNSPECV_WBINVD, UNSPECV_WBNOINVD): New.\n\t(define_insn \"wbinvd\", define_insn \"wbnoinvd\"): New.\n\t* config/i386/i386.opt: Add -mpconfig and -mwbnoinvd.\n\t* config/i386/immintrin.h (_wbinvd): New intrinsic.\n\t* config/i386/pconfigintrin.h: New file.\n\t* config/i386/wbnoinvdintrin.h: Ditto.\n\t* config/i386/x86intrin.h: Add headers pconfigintrin.h and wbnoinvdintrin.h.\n\t* doc/invoke.texi (-mpconfig, -mwbnoinvd): New.\n\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add -mpconfig and -mwbnoinvd.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Add pconfig and wbnoinvd.\n\t* gcc.target/i386/wbinvd-1.c: New test.\n\t* gcc.target/i386/wbnoinvd-1.c: Ditto.\n\t* gcc.target/i386/pconfig-1.c: Ditto.\n\nFrom-SVN: r258247", "tree": {"sha": "f79016a651eed7dc6e9d6acc697d6d291b651207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f79016a651eed7dc6e9d6acc697d6d291b651207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b93d4b899bd7390429113d2ac98ec057a8c3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b93d4b899bd7390429113d2ac98ec057a8c3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b93d4b899bd7390429113d2ac98ec057a8c3d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b93d4b899bd7390429113d2ac98ec057a8c3d2/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35a313aaf210f8b4c901de178b46820383dbfd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a313aaf210f8b4c901de178b46820383dbfd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a313aaf210f8b4c901de178b46820383dbfd3b"}], "stats": {"total": 313, "additions": 301, "deletions": 12}, "files": [{"sha": "28e31de036f440cca36e6cb2e0527d28e5bb5243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,3 +1,32 @@\n+2018-03-05  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PCONFIG_SET,\n+\tOPTION_MASK_ISA_PCONFIG_UNSET, OPTION_MASK_ISA_WBNOINVD_SET,\n+\tOPTION_MASK_ISA_WBNOINVD_UNSET): New definitions.\n+\t(ix86_handle_option): Handle -mpconfig and -mwbnoinvd.\n+\t* config.gcc (pconfigintrin.h, wbnoinvdintrin.h) : Add headers.\n+\t* config/i386/cpuid.h (bit_PCONFIG, bit_WBNOINVD): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mpconfig\n+\tand -mwbnoinvd.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_wbnoinvd,\n+\t__builtin_ia32_wbinvd): New builtins.\n+\t(SPECIAL_ARGS2): New.\n+\t* config/i386/i386-c.c (__WBNOINVD__, __PCONFIG__): New.\n+\t(SPECIAL_ARGS2): New.\n+\t* config/i386/i386.c (ix86_target_string): Add -mpconfig and -mwbnoinvd.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t(ix86_init_mmx_sse_builtins): Add special_args2.\n+\t* config/i386/i386.h (TARGET_PCONFIG, TARGET_PCONFIG_P, TARGET_WBNOINVD,\n+\tTARGET_WBNOINVD_P): New.\n+\t* config/i386/i386.md (UNSPECV_WBINVD, UNSPECV_WBNOINVD): New.\n+\t(define_insn \"wbinvd\", define_insn \"wbnoinvd\"): New.\n+\t* config/i386/i386.opt: Add -mpconfig and -mwbnoinvd.\n+\t* config/i386/immintrin.h (_wbinvd): New intrinsic.\n+\t* config/i386/pconfigintrin.h: New file.\n+\t* config/i386/wbnoinvdintrin.h: Ditto.\n+\t* config/i386/x86intrin.h: Add headers pconfigintrin.h and wbnoinvdintrin.h.\n+\t* doc/invoke.texi (-mpconfig, -mwbnoinvd): New.\n+\n 2018-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84670"}, {"sha": "7e492899261a794c7028a6e52b7d893b14f36d68", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -125,6 +125,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_ABM_SET \\\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n \n+#define OPTION_MASK_ISA_PCONFIG_SET OPTION_MASK_ISA_PCONFIG\n+#define OPTION_MASK_ISA_WBNOINVD_SET OPTION_MASK_ISA_WBNOINVD\n #define OPTION_MASK_ISA_SGX_SET OPTION_MASK_ISA_SGX\n #define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n #define OPTION_MASK_ISA_BMI2_SET OPTION_MASK_ISA_BMI2\n@@ -241,6 +243,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_SHA_UNSET OPTION_MASK_ISA_SHA\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n+#define OPTION_MASK_ISA_PCONFIG_UNSET OPTION_MASK_ISA_PCONFIG\n+#define OPTION_MASK_ISA_WBNOINVD_UNSET OPTION_MASK_ISA_WBNOINVD\n #define OPTION_MASK_ISA_SGX_UNSET OPTION_MASK_ISA_SGX\n #define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n #define OPTION_MASK_ISA_BMI2_UNSET OPTION_MASK_ISA_BMI2\n@@ -690,6 +694,32 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mpconfig:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_PCONFIG_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_PCONFIG_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_PCONFIG_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_PCONFIG_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mwbnoinvd:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_WBNOINVD_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_WBNOINVD_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_WBNOINVD_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_WBNOINVD_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx512dq:\n       if (value)\n \t{"}, {"sha": "81627d5d1c75b7958f79035aae2ef32a427e76e4", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -382,7 +382,8 @@ i[34567]86-*-*)\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n-\t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\"\n+\t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n+\t\t       pconfigintrin.h wbnoinvdintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -410,7 +411,8 @@ x86_64-*-*)\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n-\t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\"\n+\t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n+\t\t       pconfigintrin.h wbnoinvdintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "4096a0b4e680e5d916dcb804d3558540817f0608", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -67,6 +67,7 @@\n \n /* %ebx  */\n #define bit_CLZERO\t(1 << 0)\n+#define bit_WBNOINVD\t(1 << 9)\n \n /* Extended Features (%eax == 7) */\n /* %ebx */\n@@ -111,7 +112,7 @@\n #define bit_AVX5124VNNIW (1 << 2)\n #define bit_AVX5124FMAPS (1 << 3)\n #define bit_IBT\t(1 << 20)\n-\n+#define bit_PCONFIG\t(1 << 18)\n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)\n #define bit_BNDCSR      (1 << 4)"}, {"sha": "8c95c2eab8108edc19b1c363d1cf2749580f9ef5", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -407,6 +407,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n   unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n   unsigned int has_hle = 0, has_rtm = 0, has_sgx = 0;\n+  unsigned int has_pconfig = 0, has_wbnoinvd = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n   unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n   unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n@@ -523,6 +524,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       has_shstk = ecx & bit_SHSTK;\n       has_ibt = edx & bit_IBT;\n+      has_pconfig = edx & bit_PCONFIG;\n     }\n \n   if (max_level >= 13)\n@@ -561,6 +563,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     {\n       __cpuid (0x80000008, eax, ebx, ecx, edx);\n       has_clzero = ebx & bit_CLZERO;\n+      has_wbnoinvd = ebx & bit_WBNOINVD;\n     }\n \n   /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n@@ -1042,6 +1045,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *fma4 = has_fma4 ? \" -mfma4\" : \" -mno-fma4\";\n       const char *xop = has_xop ? \" -mxop\" : \" -mno-xop\";\n       const char *bmi = has_bmi ? \" -mbmi\" : \" -mno-bmi\";\n+      const char *pconfig = has_pconfig ? \" -mpconfig\" : \" -mno-pconfig\";\n+      const char *wbnoinvd = has_wbnoinvd ? \" -mwbnoinvd\" : \" -mno-wbnoinvd\";\n       const char *sgx = has_sgx ? \" -msgx\" : \" -mno-sgx\";\n       const char *bmi2 = has_bmi2 ? \" -mbmi2\" : \" -mno-bmi2\";\n       const char *tbm = has_tbm ? \" -mtbm\" : \" -mno-tbm\";\n@@ -1092,6 +1097,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n+\t\t\tpconfig, wbnoinvd,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n \t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,"}, {"sha": "7b4ad2b8466480cad5ce5e28b700a3c5ea091923", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -415,6 +415,8 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv1\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandloadhi128_mask\", IX86_BUILTIN_PEXPANDWLOAD128, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandloadhi128_maskz\", IX86_BUILTIN_PEXPANDWLOAD128Z, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n \n+BDESC (0, CODE_FOR_wbinvd, \"__builtin_ia32_wbinvd\", IX86_BUILTIN_WBINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */\n@@ -2835,7 +2837,13 @@ BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v16qi, \"__builtin_ia32_vaesenc\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v32qi, \"__builtin_ia32_vaesenclast_v32qi\", IX86_BUILTIN_VAESENCLAST32, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v64qi, \"__builtin_ia32_vaesenclast_v64qi\", IX86_BUILTIN_VAESENCLAST64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n \n-BDESC_END (ARGS2, MPX)\n+BDESC_END (ARGS2, SPECIAL_ARGS2)\n+\n+BDESC_FIRST (special_args2, SPECIAL_ARGS2,\n+\tOPTION_MASK_ISA_WBNOINVD, CODE_FOR_wbnoinvd, \"__builtin_ia32_wbnoinvd\", IX86_BUILTIN_WBNOINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n+\n+BDESC_END (SPECIAL_ARGS2, MPX)\n+\n \n /* Builtins for MPX.  */\n BDESC_FIRST (mpx, MPX,"}, {"sha": "644958a9ea04a735e714b1d7c707be89da123923", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -353,6 +353,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       ;\n     }\n \n+  if (isa_flag2 & OPTION_MASK_ISA_WBNOINVD)\n+    def_or_undef (parse_in, \"__WBNOINVD__\");\n   if (isa_flag & OPTION_MASK_ISA_MMX)\n     def_or_undef (parse_in, \"__MMX__\");\n   if (isa_flag & OPTION_MASK_ISA_3DNOW)\n@@ -405,6 +407,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX512VBMI2__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX512VNNI)\n     def_or_undef (parse_in, \"__AVX512VNNI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_PCONFIG)\n+    def_or_undef (parse_in, \"__PCONFIG__\");\n   if (isa_flag2 & OPTION_MASK_ISA_SGX)\n     def_or_undef (parse_in, \"__SGX__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)"}, {"sha": "9cdc96f63da219a4cd0aee74aa8abeaf541f8616", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -2757,6 +2757,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mvaes\",\t\tOPTION_MASK_ISA_VAES },\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n+    { \"-mpconfig\",\tOPTION_MASK_ISA_PCONFIG },\n+    { \"-mwbnoinvd\",     OPTION_MASK_ISA_WBNOINVD },\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n@@ -5324,6 +5326,8 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     int mask;\n   } attrs[] = {\n     /* isa options */\n+    IX86_ATTR_ISA (\"pconfig\",\tOPT_mpconfig),\n+    IX86_ATTR_ISA (\"wbnoinvd\",\tOPT_mwbnoinvd),\n     IX86_ATTR_ISA (\"sgx\",\tOPT_msgx),\n     IX86_ATTR_ISA (\"avx5124fmaps\", OPT_mavx5124fmaps),\n     IX86_ATTR_ISA (\"avx5124vnniw\", OPT_mavx5124vnniw),\n@@ -31287,8 +31291,10 @@ BDESC_VERIFYS (IX86_BUILTIN__BDESC_ROUND_ARGS_FIRST,\n \t       IX86_BUILTIN__BDESC_ARGS_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ROUND_ARGS_LAST, 1);\n-BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_FIRST,\n+BDESC_VERIFYS (IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ARGS2_LAST, 1);\n+BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_FIRST,\n+\t       IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_CONST_FIRST,\n \t       IX86_BUILTIN__BDESC_MPX_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_MULTI_ARG_FIRST,\n@@ -31327,6 +31333,22 @@ ix86_init_mmx_sse_builtins (void)\n \t\t IX86_BUILTIN__BDESC_SPECIAL_ARGS_FIRST,\n \t\t ARRAY_SIZE (bdesc_special_args) - 1);\n \n+  /* Add all special builtins with variable number of operands.  */\n+  for (i = 0, d = bdesc_special_args2;\n+       i < ARRAY_SIZE (bdesc_special_args2);\n+       i++, d++)\n+    {\n+      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST, i);\n+      if (d->name == 0)\n+\tcontinue;\n+\n+      ftype = (enum ix86_builtin_func_type) d->flag;\n+      def_builtin2 (d->mask, d->name, ftype, d->code);\n+    }\n+  BDESC_VERIFYS (IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST,\n+\t\t IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST,\n+\t\t ARRAY_SIZE (bdesc_special_args2) - 1);\n+\n   /* Add all builtins with variable number of operands.  */\n   for (i = 0, d = bdesc_args;\n        i < ARRAY_SIZE (bdesc_args);\n@@ -38364,6 +38386,14 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t\t\t\t       target);\n     }\n \n+  if (fcode >= IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST\n+      && fcode <= IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST)\n+    {\n+      i = fcode - IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST;\n+      return ix86_expand_special_args_builtin (bdesc_special_args2 + i, exp,\n+\t\t\t\t\t       target);\n+    }\n+\n   if (fcode >= IX86_BUILTIN__BDESC_ARGS_FIRST\n       && fcode <= IX86_BUILTIN__BDESC_ARGS_LAST)\n     {"}, {"sha": "e43edd77b56212e541ac660d02224a6c04b44656", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -105,6 +105,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_LWP_P(x)\tTARGET_ISA_LWP_P(x)\n #define TARGET_ABM\tTARGET_ISA_ABM\n #define TARGET_ABM_P(x)\tTARGET_ISA_ABM_P(x)\n+#define TARGET_PCONFIG\tTARGET_ISA_PCONFIG\n+#define TARGET_PCONFIG_P(x)\tTARGET_ISA_PCONFIG_P(x)\n+#define TARGET_WBNOINVD\tTARGET_ISA_WBNOINVD\n+#define TARGET_WBNOINVD_P(x)\tTARGET_ISA_WBNOINVD_P(x)\n #define TARGET_SGX\tTARGET_ISA_SGX\n #define TARGET_SGX_P(x)\tTARGET_ISA_SGX_P(x)\n #define TARGET_RDPID\tTARGET_ISA_RDPID"}, {"sha": "f4f01c3c0f405ae5767ca54863085c4126f9d09a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -237,6 +237,8 @@\n   UNSPECV_XSAVEC64\n   UNSPECV_XGETBV\n   UNSPECV_XSETBV\n+  UNSPECV_WBINVD\n+  UNSPECV_WBNOINVD\n \n   ;; For atomic compound assignments.\n   UNSPECV_FNSTENV\n@@ -20582,6 +20584,20 @@\n   \"rdpid\\t%0\"\n   [(set_attr \"type\" \"other\")])\n \n+;; Intirinsics for > i486\n+\n+(define_insn \"wbinvd\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_WBINVD)]\n+  \"\"\n+  \"wbinvd\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_insn \"wbnoinvd\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_WBNOINVD)]\n+  \"TARGET_WBNOINVD\"\n+  \"wbnoinvd\"\n+  [(set_attr \"type\" \"other\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "150d78e345a995d46365744c934873737b76cbbd", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -777,6 +777,14 @@ mpopcnt\n Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n Support code generation of popcnt instruction.\n \n+mpconfig\n+Target Report Mask(ISA_PCONFIG) Var(ix86_isa_flags2) Save\n+Support PCONFIG built-in functions and code generation.\n+\n+mwbnoinvd\n+Target Report Mask(ISA_WBNOINVD) Var(ix86_isa_flags2) Save\n+Support WBNOINVD built-in functions and code generation.\n+\n msgx\n Target Report Mask(ISA_SGX) Var(ix86_isa_flags2) Save\n Support SGX built-in functions and code generation."}, {"sha": "ad0fb216fa740f45ea2c267b78208ff00a886eba", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -110,6 +110,13 @@\n \n #include <vpclmulqdqintrin.h>\n \n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_wbinvd (void)\n+{\n+  __builtin_ia32_wbinvd ();\n+}\n+\n #ifndef __RDRND__\n #pragma GCC push_options\n #pragma GCC target(\"rdrnd\")"}, {"sha": "1c9c35c5e2bc39b22c3397aa5af42957666e55ce", "filename": "gcc/config/i386/pconfigintrin.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -0,0 +1,55 @@\n+#ifndef _X86INTRIN_H_INCLUDED\n+#error \"Never use <pconfigintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _PCONFIGINTRIN_H_INCLUDED\n+#define _PCONFIGINTRIN_H_INCLUDED\n+\n+#ifndef __PCONFIG__\n+#pragma GCC push_options\n+#pragma GCC target(\"pconfig\")\n+#define __DISABLE_PCONFIG__\n+#endif /* __PCONFIG__ */\n+\n+#define __pconfig_b(leaf, b, retval)\t\t\t\\\n+  __asm__ __volatile__ (\"pconfig\\n\\t\"\t\t\t\\\n+\t: \"=a\" (retval)\t\t\t\t\t\\\n+\t: \"a\" (leaf), \"b\" (b)\t\t\t\t\\\n+\t: \"cc\")\n+\n+#define __pconfig_generic(leaf, b, c, d, retval)\t\\\n+  __asm__ __volatile__ (\"pconfig\\n\\t\"\t\t\t\\\n+\t: \"=a\" (retval), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t: \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\t\\\n+\t: \"cc\")\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pconfig_u32 (const unsigned int __L, size_t __D[])\n+{\n+  enum __pconfig_type\n+  {\n+    __PCONFIG_KEY_PROGRAM = 0x01,\n+  };\n+\n+  unsigned int __R = 0;\n+\n+  if (!__builtin_constant_p (__L))\n+    __pconfig_generic (__L, __D[0], __D[1], __D[2], __R);\n+  else switch (__L)\n+    {\n+    case __PCONFIG_KEY_PROGRAM:\n+      __pconfig_b (__L, __D[0], __R);\n+      break;\n+    default:\n+      __pconfig_generic (__L, __D[0], __D[1], __D[2], __R);\n+    }\n+  return __R;\n+}\n+\n+#ifdef __DISABLE_PCONFIG__\n+#undef __DISABLE_PCONFIG__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PCONFIG__ */\n+\n+#endif /* _PCONFIGINTRIN_H_INCLUDED */"}, {"sha": "9312a0082c9ffa85bece37aa16582be24ea6ae42", "filename": "gcc/config/i386/wbnoinvdintrin.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -0,0 +1,26 @@\n+#ifndef _X86INTRIN_H_INCLUDED\n+#error \"Never use <wbnoinvdintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _WBNOINVDINTRIN_H_INCLUDED\n+#define _WBNOINVDINTRIN_H_INCLUDED\n+\n+#ifndef __WBNOINVD__\n+#pragma GCC push_options\n+#pragma GCC target(\"wbnoinvd\")\n+#define __DISABLE_WBNOINVD__\n+#endif /* __WBNOINVD__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_wbnoinvd (void)\n+{\n+  __builtin_ia32_wbnoinvd ();\n+}\n+\n+#ifdef __DISABLE_WBNOINVD__\n+#undef __DISABLE_WBNOINVD__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_WBNOINVD__ */\n+\n+#endif /* _WBNOINVDINTRIN_H_INCLUDED */"}, {"sha": "b12aecc80b51a740b37a2b8924c0c747c5c0dae8", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -77,6 +77,8 @@\n \n #include <sgxintrin.h>\n \n+#include <pconfigintrin.h>\n+\n #endif /* __iamcu__ */\n \n #include <adxintrin.h>\n@@ -95,6 +97,8 @@\n \n #include <clzerointrin.h>\n \n+#include <wbnoinvdintrin.h>\n+\n #include <pkuintrin.h>\n \n #endif /* __iamcu__ */"}, {"sha": "80e4efffe11d7f3d610f104e1d207fa9d3006e3f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1249,7 +1249,7 @@ See RS/6000 and PowerPC Options.\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl @gol\n -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes @gol\n--mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma @gol\n+-mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma -mpconfig -mwbnoinvd @gol\n -mprefetchwt1  -mclflushopt  -mxsavec  -mxsaves @gol\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n@@ -27174,6 +27174,12 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mfma\n @opindex mfma\n @need 200\n+@itemx -mpconfig\n+@opindex mpconfig\n+@need 200\n+@itemx -mwbnoinvd\n+@opindex mwbnoinvd\n+@need 200\n @itemx -mfma4\n @opindex mfma4\n @need 200"}, {"sha": "569f040a6bfc36d6f85fc8619a7f960d810549ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,3 +1,15 @@\n+2018-03-05  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mpconfig and -mwbnoinvd.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Add pconfig and wbnoinvd.\n+\t* gcc.target/i386/wbinvd-1.c: New test.\n+\t* gcc.target/i386/wbnoinvd-1.c: Ditto.\n+\t* gcc.target/i386/pconfig-1.c: Ditto.\n+\n 2018-03-05  P\u00e1draig Brady  <P@draigBrady.com>\n \t    Nathan Sidwell  <nathan@acm.org>\n "}, {"sha": "a70d9f413a61dbd4043265613575ac7b558cd4a4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "73eb5e74c9a32908b15894d8c536f93fd5117854", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "a3fc4f411fee4ceaf98812ccece1451004364df8", "filename": "gcc/testsuite/gcc.target/i386/pconfig-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpconfig-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpconfig-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpconfig-1.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mpconfig\" } */\n+/* { dg-final { scan-assembler-times \"pconfig\" 5 } } */\n+\n+#include <x86intrin.h>\n+\n+extern unsigned int leaf;\n+\n+#define PCONFIG_KEY_PROGRAM 0x01\n+\n+int test ()\n+{\n+  size_t D[3] = {1, 2, 3};\n+\n+  unsigned int res1 = _pconfig_u32 (leaf, D);\n+\n+  unsigned int res2 = _pconfig_u32 (PCONFIG_KEY_PROGRAM, D);\n+\n+  return 0;\n+}"}, {"sha": "f7f55f4317e69335bc13fc08814a7043bab1e480", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "310ebfff73a5dba02d96a7e6e600434bf003c6e0", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "0f663bec702f1409a849484e70fea10d6db13d35", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "cb5cdd8cd107af53e049309232222691de4759f4", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -678,6 +678,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd\")\n \n #include <x86intrin.h>"}, {"sha": "7854cc2267961edfd0c155ec4b43dbd9929e566f", "filename": "gcc/testsuite/gcc.target/i386/wbinvd-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbinvd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbinvd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbinvd-1.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"wbinvd\" 2 } } */\n+\n+#include \"immintrin.h\"\n+\n+volatile void\n+test ()\n+{\n+  _wbinvd();\n+}"}, {"sha": "bda84cd4c9437bf29eb19fb11495ab3a685152fa", "filename": "gcc/testsuite/gcc.target/i386/wbnoinvd-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbnoinvd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b93d4b899bd7390429113d2ac98ec057a8c3d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbnoinvd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwbnoinvd-1.c?ref=13b93d4b899bd7390429113d2ac98ec057a8c3d2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mwbnoinvd\" } */\n+/* { dg-final { scan-assembler-times \"wbnoinvd\" 2 } } */\n+\n+#include \"x86intrin.h\"\n+\n+void test ()\n+{\n+  _wbnoinvd();\n+}"}]}