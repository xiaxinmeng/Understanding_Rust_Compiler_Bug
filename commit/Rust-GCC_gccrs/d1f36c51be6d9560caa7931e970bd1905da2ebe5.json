{"sha": "d1f36c51be6d9560caa7931e970bd1905da2ebe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmMzZjNTFiZTZkOTU2MGNhYTc5MzFlOTcwYmQxOTA1ZGEyZWJlNQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-10-19T10:37:31Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-10-19T10:37:31Z"}, "message": "re PR target/19672 (Performance regression in simple loop code)\n\n2005-10-18  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR #19672\n\t* dojump.c (do_jump): Handle TRUTH_AND_EXPR and TRUTH_OR_EXPR here.\n\nFrom-SVN: r105606", "tree": {"sha": "b8428a9212e5f6527a8b3d2f126a792184341e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8428a9212e5f6527a8b3d2f126a792184341e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f36c51be6d9560caa7931e970bd1905da2ebe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f36c51be6d9560caa7931e970bd1905da2ebe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f36c51be6d9560caa7931e970bd1905da2ebe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f36c51be6d9560caa7931e970bd1905da2ebe5/comments", "author": null, "committer": null, "parents": [{"sha": "2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cdc88b64d540cd3ab1c5d1b89dd828abf373068"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "c032c98142aabe90adea5a7ecd50ccf7f09d4d6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f36c51be6d9560caa7931e970bd1905da2ebe5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f36c51be6d9560caa7931e970bd1905da2ebe5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f36c51be6d9560caa7931e970bd1905da2ebe5", "patch": "@@ -1,11 +1,16 @@\n+2005-10-18  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR #19672\n+\t* dojump.c (do_jump): Handle TRUTH_AND_EXPR and TRUTH_OR_EXPR here.\n+\n 2005-10-18  Daniel Berlin <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/24231\n \n \t* tree-ssa-pre.c (try_look_through_load): Skip abnormal phi names\n \t(compute_avail): Ditto.\n \n-2006-10-18  Richard Henderson  <rth@redhat.com>\n+2005-10-18  Richard Henderson  <rth@redhat.com>\n \n \tPR target/24428\n \t* config/i386/i386.c (legitimate_constant_p): Check"}, {"sha": "6dca9d32b57ba38697d6a36ec803fdbd76454757", "filename": "gcc/dojump.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f36c51be6d9560caa7931e970bd1905da2ebe5/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f36c51be6d9560caa7931e970bd1905da2ebe5/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=d1f36c51be6d9560caa7931e970bd1905da2ebe5", "patch": "@@ -510,6 +510,42 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n       }\n       break;\n \n+    case TRUTH_AND_EXPR:\n+      /* High branch cost, expand as the bitwise AND of the conditions.  */\n+      if (BRANCH_COST >= 4)\n+\tgoto normal;\n+\n+      if (if_false_label == NULL_RTX)\n+        {\n+\t  drop_through_label = gen_label_rtx ();\n+          do_jump (TREE_OPERAND (exp, 0), drop_through_label, NULL_RTX);\n+          do_jump (TREE_OPERAND (exp, 1), NULL_RTX, if_true_label);\n+\t}\n+      else\n+\t{\n+\t  do_jump (TREE_OPERAND (exp, 0), if_false_label, NULL_RTX);\n+          do_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+\t}\n+      break;\n+\n+    case TRUTH_OR_EXPR:\n+      /* High branch cost, expand as the bitwise OR of the conditions.  */\n+      if (BRANCH_COST >= 4)\n+\tgoto normal;\n+\n+      if (if_true_label == NULL_RTX)\n+\t{\n+          drop_through_label = gen_label_rtx ();\n+          do_jump (TREE_OPERAND (exp, 0), NULL_RTX, drop_through_label);\n+          do_jump (TREE_OPERAND (exp, 1), if_false_label, NULL_RTX);\n+\t}\n+      else\n+\t{\n+          do_jump (TREE_OPERAND (exp, 0), NULL_RTX, if_true_label);\n+          do_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+\t}\n+      break;\n+\n       /* Special case:\n           __builtin_expect (<test>, 0)\tand\n           __builtin_expect (<test>, 1)\n@@ -540,8 +576,8 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t      }\n \t  }\n       }\n+ \n       /* Fall through and generate the normal code.  */\n-\n     default:\n     normal:\n       temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);"}]}