{"sha": "a4b531b21339af47c4bdd69384e4a0b5289ffc64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiNTMxYjIxMzM5YWY0N2M0YmRkNjkzODRlNGEwYjUyODlmZmM2NA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-06-18T03:37:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-07-02T02:38:31Z"}, "message": "RISC-V: Handle multi-letter extension for multilib-generator\n\n - The order of multi-lib config could be wrong if multi-ltter are\n   used, e.g. `./multilib-generator rv32izfh-ilp32--c`, would expect\n   rv32ic_zfh/ilp32 reuse rv32i_zfh/ilp32, however the multi-ltter is not\n   handled correctly, it will generate reuse rule for rv32izfhc/ilp32\n   which is invalid arch configuration.\n\n - Remove re-use rule gen for g/imafd, because we canonicalize the -march at\n   gcc driver too, so we don't need handle 'g' for multilib now.\n\ngcc/ChangeLog:\n\n\t* config/riscv/multilib-generator (arch_canonicalize): Handle\n\tmulti-letter extension.\n\tUsing underline as separator between different extensions.", "tree": {"sha": "c5145c4853d46b49e734da43ab49798f9f5b24fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5145c4853d46b49e734da43ab49798f9f5b24fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4b531b21339af47c4bdd69384e4a0b5289ffc64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b531b21339af47c4bdd69384e4a0b5289ffc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b531b21339af47c4bdd69384e4a0b5289ffc64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b531b21339af47c4bdd69384e4a0b5289ffc64/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f761e4ac8df02994074fede3948c91f61115be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f761e4ac8df02994074fede3948c91f61115be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f761e4ac8df02994074fede3948c91f61115be"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "8f4df183db212facc1f187961a5311cafe695351", "filename": "gcc/config/riscv/multilib-generator", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b531b21339af47c4bdd69384e4a0b5289ffc64/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b531b21339af47c4bdd69384e4a0b5289ffc64/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fmultilib-generator?ref=a4b531b21339af47c4bdd69384e4a0b5289ffc64", "patch": "@@ -39,12 +39,12 @@ reuse = []\n canonical_order = \"mafdgqlcbjtpvn\"\n \n def arch_canonicalize(arch):\n-  # TODO: Support Z, S, H, or X extensions.\n   # TODO: Support implied extensions, e.g. D implied F in latest spec.\n   # TODO: Support extension version.\n   new_arch = \"\"\n   if arch[:5] in ['rv32e', 'rv32i', 'rv32g', 'rv64i', 'rv64g']:\n-    new_arch = arch[:5]\n+    # TODO: We should expand g to imadzifencei once we support newer spec.\n+    new_arch = arch[:5].replace(\"g\", \"imafd\")\n   else:\n     raise Exception(\"Unexpected arch: `%s`\" % arch[:5])\n \n@@ -56,30 +56,44 @@ def arch_canonicalize(arch):\n   long_ext_prefixes_idx = list(filter(lambda x: x != -1, long_ext_prefixes_idx))\n   if long_ext_prefixes_idx:\n     first_long_ext_idx = min(long_ext_prefixes_idx)\n-    long_exts = arch[first_long_ext_idx:]\n+    long_exts = arch[first_long_ext_idx:].split(\"_\")\n     std_exts = arch[5:first_long_ext_idx]\n   else:\n-    long_exts = \"\"\n+    long_exts = []\n     std_exts = arch[5:]\n \n+  # Single letter extension might appear in the long_exts list,\n+  # becasue we just append extensions list to the arch string.\n+  std_exts += \"\".join(filter(lambda x:len(x) == 1, long_exts))\n+\n+  # Multi-letter extension must be in lexicographic order.\n+  long_exts = sorted(filter(lambda x:len(x) != 1, long_exts))\n+\n   # Put extensions in canonical order.\n   for ext in canonical_order:\n     if ext in std_exts:\n       new_arch += ext\n \n+  # Check every extension is processed.\n+  for ext in std_exts:\n+    if ext == '_':\n+      continue\n+    if ext not in canonical_order:\n+      raise Exception(\"Unsupported extension `%s`\" % ext)\n+\n   # Concat rest of the multi-char extensions.\n-  new_arch += long_exts\n+  if long_exts:\n+    new_arch += \"_\" + \"_\".join(long_exts)\n   return new_arch\n \n for cfg in sys.argv[1:]:\n   (arch, abi, extra, ext) = cfg.split('-')\n+  arch = arch_canonicalize (arch)\n   arches[arch] = 1\n   abis[abi] = 1\n   extra = list(filter(None, extra.split(',')))\n   ext = list(filter(None, ext.split(',')))\n-  alts = sum([[x] + [x + y for y in ext] for x in [arch] + extra], [])\n-  # TODO: We should expand g to imadzifencei once we support newer spec.\n-  alts = alts + [x.replace('imafd', 'g') for x in alts if 'imafd' in x]\n+  alts = sum([[x] + [x + \"_\" + y for y in ext] for x in [arch] + extra], [])\n   alts = list(map(arch_canonicalize, alts))\n   for alt in alts[1:]:\n     arches[alt] = 1"}]}