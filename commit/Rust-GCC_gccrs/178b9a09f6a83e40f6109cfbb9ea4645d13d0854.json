{"sha": "178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4YjlhMDlmNmE4M2U0MGY2MTA5Y2ZiYjllYTQ2NDVkMTNkMDg1NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-11-16T21:27:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-11-16T21:27:39Z"}, "message": "* gcc.dg/cpp/assert4.c: New test.\n\nFrom-SVN: r73654", "tree": {"sha": "d3ab91f0d792f5dfc2b8788be3644031932830d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ab91f0d792f5dfc2b8788be3644031932830d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178b9a09f6a83e40f6109cfbb9ea4645d13d0854/comments", "author": null, "committer": null, "parents": [{"sha": "edc6a9c48b7238308505927268cdbe9a4b2205db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc6a9c48b7238308505927268cdbe9a4b2205db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc6a9c48b7238308505927268cdbe9a4b2205db"}], "stats": {"total": 376, "additions": 376, "deletions": 0}, "files": [{"sha": "d216a7901335e2ee618fdd413bdf42c1cc323fd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b9a09f6a83e40f6109cfbb9ea4645d13d0854/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b9a09f6a83e40f6109cfbb9ea4645d13d0854/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "patch": "@@ -1,3 +1,7 @@\n+2003-11-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/cpp/assert4.c: New test.\n+\n 2003-11-14  Giovanni Bajo  <giovannibajo@libero.it>\n \n         PR c++/2294"}, {"sha": "557d1c0ec28483e4580bd4630d2c31c58d49e62e", "filename": "gcc/testsuite/gcc.dg/cpp/assert4.c", "status": "added", "additions": 372, "deletions": 0, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b9a09f6a83e40f6109cfbb9ea4645d13d0854/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b9a09f6a83e40f6109cfbb9ea4645d13d0854/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c?ref=178b9a09f6a83e40f6109cfbb9ea4645d13d0854", "patch": "@@ -0,0 +1,372 @@\n+/* Copyright (C) 2003 Free Software Foundation, Inc.\n+   Test builtin preprocessor assertions.\n+   By Kaveh Ghazi <ghazi@caip.rutgers.edu>.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* Check for #system assertions.  */\n+\n+#if defined __gnu_linux__\n+# if !#system(linux) || !#system(unix) || !#system(posix)\n+#  error\n+# endif\n+#elif #system(linux)\n+# error\n+#endif\n+\n+#if defined __gnu_hurd__\n+# if !#system(gnu) || !#system(unix) || !#system(posix)\n+#  error\n+# endif\n+#elif #system(gnu)\n+# error\n+#endif\n+\n+#if defined __FreeBSD__\n+# if !#system(FreeBSD) || !#system(unix) || !#system(bsd)\n+#  error\n+# endif\n+#elif #system(FreeBSD)\n+# error\n+#endif\n+\n+#if defined __NetBSD__\n+# if !#system(NetBSD) || !#system(unix) || !#system(bsd)\n+#  error\n+# endif\n+#elif #system(NetBSD)\n+# error\n+#endif\n+\n+#if defined __OpenBSD__\n+# if !#system(OpenBSD) || !#system(unix) || !#system(bsd)\n+#  error\n+# endif\n+#elif #system(OpenBSD)\n+# error\n+#endif\n+\n+#if defined __svr4__ || defined __SYSTYPE_SVR4__\n+# if !#system(svr4) || !#system(unix)\n+#  error\n+# endif\n+#elif #system(svr4)\n+# error\n+#endif\n+\n+#if defined __hpux__\n+# if !#system(hpux) || !#system(unix)\n+#  error\n+# endif\n+#elif #system(hpux)\n+# error\n+#endif\n+\n+#if defined _AIX\n+# if !#system(aix) || !#system(unix)\n+#  error\n+# endif\n+#elif #system(aix)\n+# error\n+#endif\n+\n+#if defined __lynx__\n+# if !#system(lynx) || !#system(unix)\n+#  error\n+# endif\n+#elif #system(lynx)\n+# error\n+#endif\n+\n+#if defined __rtems__\n+# if !#system(rtems)\n+#  error\n+# endif\n+#elif #system(rtems)\n+# error\n+#endif\n+\n+\n+/* Check for #cpu and #machine assertions.  */\n+\n+#if defined __arc__\n+# if !#cpu(arc) || !#machine(arc)\n+#  error\n+# endif\n+#elif #cpu(arc) || #machine(arc)\n+# error\n+#endif\n+\n+#if defined __alpha__\n+# if !#cpu(alpha) || !#machine(alpha) \\\n+\t|| (defined __alpha_cix__ && !#cpu(cix)) \\\n+\t|| (!defined __alpha_cix__ && #cpu(cix)) \\\n+\t|| (defined __alpha_fix__ && !#cpu(fix)) \\\n+\t|| (!defined __alpha_fix__ && #cpu(fix)) \\\n+\t|| (defined __alpha_bwx__ && !#cpu(bwx)) \\\n+\t|| (!defined __alpha_bwx__ && #cpu(bwx)) \\\n+\t|| (defined __alpha_max__ && !#cpu(max)) \\\n+\t|| (!defined __alpha_max__ && #cpu(max)) \\\n+\t|| (defined __alpha_ev6__ && !#cpu(ev6)) \\\n+\t|| (!defined __alpha_ev6__ && #cpu(ev6)) \\\n+\t|| (defined __alpha_ev5__ && !#cpu(ev5)) \\\n+\t|| (!defined __alpha_ev5__ && #cpu(ev5)) \\\n+\t|| (defined __alpha_ev4__ && !#cpu(ev4)) \\\n+\t|| (!defined __alpha_ev4__ && #cpu(ev4))\n+#  error\n+# endif\n+#elif #cpu(alpha) || #machine(alpha) || #cpu(cix) || #cpu(fix) || #cpu(bwx) \\\n+\t|| #cpu(max) || #cpu(ev6) || #cpu(ev5) || #cpu(ev4)\n+# error\n+#endif\n+\n+#if defined __arm__\n+# if !#cpu(arm) || !#machine(arm)\n+#  error\n+# endif\n+#elif #cpu(arm) || #machine(arm)\n+# error\n+#endif\n+\n+#if defined __d30v__\n+# if !#cpu(d30v) || !#machine(d30v)\n+#  error\n+# endif\n+#elif #cpu(d30v) || #machine(d30v)\n+# error\n+#endif\n+\n+#if defined __fr30__\n+# if !#cpu(fr30) || !#machine(fr30)\n+#  error\n+# endif\n+#elif #cpu(fr30) || #machine(fr30)\n+# error\n+#endif\n+\n+#if defined __frv__\n+# if !#cpu(frv) || !#machine(frv)\n+#  error\n+# endif\n+#elif #cpu(frv) || #machine(frv)\n+# error\n+#endif\n+\n+#if defined __h8300__ \n+# if !#cpu(h8300) || !#machine(h8300) \\\n+  || (defined __H8300__ && (!#cpu(h8300) || !#machine(h8300))) \\\n+  || (defined __H8300H__ && (!#cpu(h8300h) || !#machine(h8300h))) \\\n+  || (!defined __H8300H__ && (#cpu(h8300h) || #machine(h8300h))) \\\n+  || (defined __H8300S__ && (!#cpu(h8300s) || !#machine(h8300s))) \\\n+  || (!defined __H8300S__ && (#cpu(h8300s) || #machine(h8300s)))\n+#  error\n+# endif\n+#elif #cpu(h8300) || #machine(h8300) || #cpu(h8300h) || #machine(h8300h) || \\\n+  #cpu(h8300s) || #machine(h8300s)\n+# error\n+#endif\n+\n+#if defined __hppa__\n+# if !#cpu(hppa) || !#machine(hppa)\n+#  error\n+# endif\n+#elif #cpu(hppa) || #machine(hppa)\n+# error\n+#endif\n+\n+#if defined __i370__\n+# if !#cpu(i370) || !#machine(i370)\n+#  error\n+# endif\n+#elif #cpu(i370) || #machine(i370)\n+# error\n+#endif\n+\n+#if defined __x86_64__\n+# if !#cpu(x86_64) || !#machine(x86_64)\n+#  error\n+# endif\n+#elif #cpu(x86_64) || #machine(x86_64)\n+# error\n+#endif\n+\n+#if defined __i386__\n+# if !#cpu(i386) || !#machine(i386)\n+#  error\n+# endif\n+#elif #cpu(i386) || #machine(i386)\n+# error\n+#endif\n+\n+#if defined __i860__\n+# if !#cpu(i860) || !#machine(i860)\n+#  error\n+# endif\n+#elif #cpu(i860) || #machine(i860)\n+# error\n+#endif\n+\n+#if defined __i960__\n+# if !#cpu(i960) || !#machine(i960)\n+#  error\n+# endif\n+#elif #cpu(i960) || #machine(i960)\n+# error\n+#endif\n+\n+#if defined __ia64__\n+# if !#cpu(ia64) || !#machine(ia64)\n+#  error\n+# endif\n+#elif #cpu(ia64) || #machine(ia64)\n+# error\n+#endif\n+\n+#if defined __iq2000__\n+# if !#cpu(iq2000) || !#machine(iq2000)\n+#  error\n+# endif\n+#elif #cpu(iq2000) || #machine(iq2000)\n+# error\n+#endif\n+\n+#if defined __M32R__\n+# if !#cpu(m32r) || !#machine(m32r)\n+#  error\n+# endif\n+#elif #cpu(m32r) || #machine(m32r)\n+# error\n+#endif\n+\n+#if defined __m68k__\n+# if !#cpu(m68k) || !#machine(m68k)\n+#  error\n+# endif\n+#elif #cpu(m68k) || #machine(m68k)\n+# error\n+#endif\n+\n+#if defined __mcore__\n+# if !#cpu(mcore) || !#machine(mcore)\n+#  error\n+# endif\n+#elif #cpu(mcore) || #machine(mcore)\n+# error\n+#endif\n+\n+#if defined __mips__\n+# if !#cpu(mips) || (defined __sgi__ && !#machine(sgi)) \\\n+  || (!defined __sgi__ && !#machine(mips))\n+#  error\n+# endif\n+#elif #cpu(mips) || #machine(sgi) || #machine(mips)\n+# error\n+#endif\n+\n+#if defined __mmix__\n+# if !#cpu(mmix) || !#machine(mmix)\n+#  error\n+# endif\n+#elif #cpu(mmix) || #machine(mcore)\n+# error\n+#endif\n+\n+#if defined __mn10300__\n+# if !#cpu(mn10300) || !#machine(mn10300)\n+#  error\n+# endif\n+#elif #cpu(mn10300) || #machine(mn10300)\n+# error\n+#endif\n+\n+#if defined __ns32k__\n+# if !#cpu(ns32k) || !#machine(ns32k)\n+#  error\n+# endif\n+#elif #cpu(ns32k) || #machine(ns32k)\n+# error\n+#endif\n+\n+#if defined __pdp11__\n+# if !#cpu(pdp11) || !#machine(pdp11)\n+#  error\n+# endif\n+#elif #cpu(pdp11) || #machine(pdp11)\n+# error\n+#endif\n+\n+#if defined __powerpc__\n+# if !#cpu(powerpc) || !#machine(powerpc)\n+#  error\n+# endif\n+#elif #cpu(powerpc) || #machine(powerpc)\n+# error\n+#endif\n+\n+#if defined __rs6000__\n+# if !#cpu(rs6000) || !#machine(rs6000)\n+#  error\n+# endif\n+#elif #cpu(rs6000) || #machine(rs6000)\n+# error\n+#endif\n+\n+#if defined __s390__\n+# if !#cpu(s390) || !#machine(s390)\n+#  error\n+# endif\n+#elif #cpu(s390) || #machine(s390)\n+# error\n+#endif\n+\n+#if defined __sh__\n+# if !#cpu(sh) || !#machine(sh)\n+#  error\n+# endif\n+#elif #cpu(sh) || #machine(sh)\n+# error\n+#endif\n+\n+#if defined __sparc__\n+# if (defined __arch64__ \\\n+      && (!#cpu(sparc64) || !#machine(sparc64) || #cpu(sparc) || #machine(sparc)))\n+  || (!defined __arch64__ \\\n+      && (#cpu(sparc64) || #machine(sparc64) || !#cpu(sparc) || !#machine(sparc)))\n+#  error\n+# endif\n+#elif #cpu(sparc64) || #machine(sparc64) || #cpu(sparc) || #machine(sparc)\n+# error\n+#endif\n+\n+#if defined __xstormy16__\n+# if !#cpu(xstormy16) || !#machine(xstormy16)\n+#  error\n+# endif\n+#elif #cpu(xstormy16) || #machine(xstormy16)\n+# error\n+#endif\n+\n+#if defined __v850__\n+# if !#cpu(v850) || !#machine(v850)\n+#  error\n+# endif\n+#elif #cpu(v850) || #machine(v850)\n+# error\n+#endif\n+\n+#if defined __vax__\n+# if !#cpu(vax) || !#machine(vax)\n+#  error\n+# endif\n+#elif #cpu(vax) || #machine(vax)\n+# error\n+#endif\n+\n+#if defined __XTENSA__\n+# if !#cpu(xtensa) || !#machine(xtensa)\n+#  error\n+# endif\n+#elif #cpu(xtensa) || #machine(xtensa)\n+# error\n+#endif\n+"}]}