{"sha": "0b6bc904227e2dae47f178e4d5468931669df197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2YmM5MDQyMjdlMmRhZTQ3ZjE3OGU0ZDU0Njg5MzE2NjlkZjE5Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-08T14:23:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-08T14:23:43Z"}, "message": "cfgrtl.c (cfg_layout_initialize): Check crtl->has_bb_partition instead of flag_reorder_blocks_and_partition.\n\n\t* cfgrtl.c (cfg_layout_initialize): Check crtl->has_bb_partition\n\tinstead of flag_reorder_blocks_and_partition.\n\t* dbxout.c (dbxout_function_end): Likewise.\n\t* dwarf2out.c (gen_subprogram_die): Likewise.\n\t* haifa-sched.c (sched_create_recovery_edges): Likewise.\n\t* hw-doloop.c (reorg_loops): Likewise.\n\t* varasm.c (assemble_start_function,\n\tassemble_end_function): Likewise.\n\t(decide_function_section): Do not check for\n\tflag_reorder_blocks_and_partition.\n\nFrom-SVN: r249017", "tree": {"sha": "e7bbda0646d5e5eead946cd91b6a15bf7a0e2862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7bbda0646d5e5eead946cd91b6a15bf7a0e2862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6bc904227e2dae47f178e4d5468931669df197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6bc904227e2dae47f178e4d5468931669df197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6bc904227e2dae47f178e4d5468931669df197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6bc904227e2dae47f178e4d5468931669df197/comments", "author": null, "committer": null, "parents": [{"sha": "1ac644c8d04230fd1be85de1b102a819c11c87bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac644c8d04230fd1be85de1b102a819c11c87bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac644c8d04230fd1be85de1b102a819c11c87bd"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "d0e14d7b7b9569f70953c7406bc97a8961073b45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -1,3 +1,16 @@\n+2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cfgrtl.c (cfg_layout_initialize): Check crtl->has_bb_partition\n+\tinstead of flag_reorder_blocks_and_partition.\n+\t* dbxout.c (dbxout_function_end): Likewise.\n+\t* dwarf2out.c (gen_subprogram_die): Likewise.\n+\t* haifa-sched.c (sched_create_recovery_edges): Likewise.\n+\t* hw-doloop.c (reorg_loops): Likewise.\n+\t* varasm.c (assemble_start_function,\n+\tassemble_end_function): Likewise.\n+\t(decide_function_section): Do not check for\n+\tflag_reorder_blocks_and_partition.\n+\n 2017-06-08  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* tree-chkp.c (chkp_get_hard_register_var_fake_base_address):"}, {"sha": "623d04f44997cd53f95f331ccbf319938c035515", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -4249,8 +4249,7 @@ cfg_layout_initialize (int flags)\n      layout required moving a block from the hot to the cold\n      section. This would create an illegal partitioning unless some\n      manual fixup was performed.  */\n-  gcc_assert (!(crtl->bb_reorder_complete\n-\t\t&& flag_reorder_blocks_and_partition));\n+  gcc_assert (!crtl->bb_reorder_complete || !crtl->has_bb_partition);\n \n   initialize_original_copy_tables ();\n "}, {"sha": "bb8ca3254c09f5034b3cadb4ab686e292683d19a", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -916,7 +916,7 @@ dbxout_function_end (tree decl ATTRIBUTE_UNUSED)\n \n   /* By convention, GCC will mark the end of a function with an N_FUN\n      symbol and an empty string.  */\n-  if (flag_reorder_blocks_and_partition)\n+  if (crtl->has_bb_partition)\n     {\n       dbxout_begin_empty_stabs (N_FUN);\n       dbxout_stab_value_label_diff (crtl->subsections.hot_section_end_label,"}, {"sha": "2a27ad53aacfeb23ce1f346a05bf05cdfc592f38", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -22152,7 +22152,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n       struct function *fun = DECL_STRUCT_FUNCTION (decl);\n \n-      if (!flag_reorder_blocks_and_partition)\n+      if (!crtl->has_bb_partition)\n \t{\n \t  dw_fde_ref fde = fun->fde;\n \t  if (fde->dw_fde_begin)\n@@ -26472,7 +26472,7 @@ set_cur_line_info_table (section *sec)\n     {\n       const char *end_label;\n \n-      if (flag_reorder_blocks_and_partition)\n+      if (crtl->has_bb_partition)\n \t{\n \t  if (in_cold_section_p)\n \t    end_label = crtl->subsections.cold_section_end_label;\n@@ -26514,7 +26514,7 @@ dwarf2out_begin_function (tree fun)\n   if (sec != text_section)\n     have_multiple_function_sections = true;\n \n-  if (flag_reorder_blocks_and_partition && !cold_text_section)\n+  if (crtl->has_bb_partition && !cold_text_section)\n     {\n       gcc_assert (current_function_decl == fun);\n       cold_text_section = unlikely_text_section ();"}, {"sha": "9632a6d75dbac8e82d131c252c2ffda3cdcb8f48", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -8313,8 +8313,7 @@ sched_create_recovery_edges (basic_block first_bb, basic_block rec,\n     /* Partition type is the same, if it is \"unpartitioned\".  */\n     {\n       /* Rewritten from cfgrtl.c.  */\n-      if (flag_reorder_blocks_and_partition\n-\t  && targetm_common.have_named_sections)\n+      if (crtl->has_bb_partition && targetm_common.have_named_sections)\n \t{\n \t  /* We don't need the same note for the check because\n \t     any_condjump_p (check) == true.  */"}, {"sha": "09ee6eaf179e9fe7be81760360c55762fd43e86c", "filename": "gcc/hw-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fhw-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fhw-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhw-doloop.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -634,7 +634,7 @@ reorg_loops (bool do_reorder, struct hw_doloop_hooks *hooks)\n \n   /* We can't enter cfglayout mode anymore if basic block partitioning\n      already happened.  */\n-  if (do_reorder && !flag_reorder_blocks_and_partition)\n+  if (do_reorder && !crtl->has_bb_partition)\n     {\n       reorder_loops (loops);\n       free_loops (loops);"}, {"sha": "fbaebc1b5c024ab1a5792c00f60b4531b552e06d", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6bc904227e2dae47f178e4d5468931669df197/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0b6bc904227e2dae47f178e4d5468931669df197", "patch": "@@ -1670,10 +1670,6 @@ decide_function_section (tree decl)\n {\n   first_function_block_is_cold = false;\n \n-  if (flag_reorder_blocks_and_partition)\n-    /* We will decide in assemble_start_function.  */\n-    return;\n-\n  if (DECL_SECTION_NAME (decl))\n     {\n       struct cgraph_node *node = cgraph_node::get (current_function_decl);\n@@ -1711,7 +1707,7 @@ assemble_start_function (tree decl, const char *fnname)\n   char tmp_label[100];\n   bool hot_label_written = false;\n \n-  if (flag_reorder_blocks_and_partition)\n+  if (crtl->has_bb_partition)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (tmp_label, \"LHOTB\", const_labelno);\n       crtl->subsections.hot_section_label = ggc_strdup (tmp_label);\n@@ -1746,7 +1742,7 @@ assemble_start_function (tree decl, const char *fnname)\n      has both hot and cold sections, because we don't want to re-set\n      the alignment when the section switch happens mid-function.  */\n \n-  if (flag_reorder_blocks_and_partition)\n+  if (crtl->has_bb_partition)\n     {\n       first_function_block_is_cold = false;\n \n@@ -1773,8 +1769,7 @@ assemble_start_function (tree decl, const char *fnname)\n   /* Switch to the correct text section for the start of the function.  */\n \n   switch_to_section (function_section (decl));\n-  if (flag_reorder_blocks_and_partition\n-      && !hot_label_written)\n+  if (crtl->has_bb_partition && !hot_label_written)\n     ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.hot_section_label);\n \n   /* Tell assembler to move to target machine's alignment for functions.  */\n@@ -1850,7 +1845,7 @@ assemble_end_function (tree decl, const char *fnname ATTRIBUTE_UNUSED)\n {\n #ifdef ASM_DECLARE_FUNCTION_SIZE\n   /* We could have switched section in the middle of the function.  */\n-  if (flag_reorder_blocks_and_partition)\n+  if (crtl->has_bb_partition)\n     switch_to_section (function_section (decl));\n   ASM_DECLARE_FUNCTION_SIZE (asm_out_file, fnname, decl);\n #endif\n@@ -1861,7 +1856,7 @@ assemble_end_function (tree decl, const char *fnname ATTRIBUTE_UNUSED)\n     }\n   /* Output labels for end of hot/cold text sections (to be used by\n      debug info.)  */\n-  if (flag_reorder_blocks_and_partition)\n+  if (crtl->has_bb_partition)\n     {\n       section *save_text_section;\n "}]}