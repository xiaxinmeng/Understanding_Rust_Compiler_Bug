{"sha": "9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjYjE3MzAxZjM2ZTY2ODZjMGMwYTFjZDM1NjNhMjBhOWEzZDdhYw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-23T00:11:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-23T00:11:55Z"}, "message": "sbitmap.h (sbitmap_ptr, [...]): Move from here...\n\n\t* sbitmap.h (sbitmap_ptr, const_sbitmap_ptr): Move from here...\n\t* sbitmap.c: ...to here to internalize sbitmap element access.\n\tDo not include tm.h, rtl.h, flags.h, hard-reg-set.h, and obstack.h.\n\tExplain why basic-block.h is included.\n\t* function.h: Include tm.h for CUMULATIVE_ARGS.\n\t* Makefile.in: Update dependencies.\n\nFrom-SVN: r159749", "tree": {"sha": "80716b09a5f6c1d08784c4b1727ced48d103ed33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80716b09a5f6c1d08784c4b1727ced48d103ed33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/comments", "author": null, "committer": null, "parents": [{"sha": "62a00d08999857afe805900d1892a4af09dead8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a00d08999857afe805900d1892a4af09dead8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a00d08999857afe805900d1892a4af09dead8a"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "c1baa8e6ab7aaafee227640400bf01e09116ddba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "patch": "@@ -1,3 +1,12 @@\n+2010-05-23  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* sbitmap.h (sbitmap_ptr, const_sbitmap_ptr): Move from here...\n+\t* sbitmap.c: ...to here to internalize sbitmap element access.\n+\tDo not include tm.h, rtl.h, flags.h, hard-reg-set.h, and obstack.h.\n+\tExplain why basic-block.h is included.\n+\t* function.h: Include tm.h for CUMULATIVE_ARGS.\n+\t* Makefile.in: Update dependencies.\n+\n 2010-05-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* coretypes.h (struct simple_bitmap_def, sbitmap, const_sbitmap):"}, {"sha": "6899b5fa530a4ef428198d02952ebe49d1463e66", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "patch": "@@ -889,7 +889,7 @@ RECOG_H = recog.h\n ALIAS_H = alias.h coretypes.h\n EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h coretypes.h options.h\n-FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h\n+FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h $(TM_H)\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)\n@@ -2013,8 +2013,7 @@ c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) $(FLAGS_H) output.h \\\n     $(RTL_H) $(FUNCTION_H) hard-reg-set.h $(BASIC_BLOCK_H) graph.h $(OBSTACK_H) \\\n     $(CONFIG_H)\n-sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-    $(FLAGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(OBSTACK_H)\n+sbitmap.o: sbitmap.c sbitmap.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(BASIC_BLOCK_H)\n ebitmap.o: ebitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(EBITMAP_H) $(RTL_H) $(FLAGS_H) $(OBSTACK_H)\n sparseset.o: sparseset.c $(SYSTEM_H) sparseset.h $(CONFIG_H)"}, {"sha": "9063e52558ce37ead6331287ef10c16a4f40d98f", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hashtab.h\"\n #include \"vecprim.h\"\n+#include \"tm.h\"\t\t/* For CUMULATIVE_ARGS.  */\n \n /* Stack of pending (incomplete) sequences saved by `start_sequence'.\n    Each element describes one pending sequence."}, {"sha": "8ffc6f334b729f3fe2257e94c00422557b95e6b1", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "patch": "@@ -21,27 +21,33 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"rtl.h\"\n-#include \"flags.h\"\n-#include \"hard-reg-set.h\"\n-#include \"obstack.h\"\n-#include \"basic-block.h\"\n #include \"sbitmap.h\"\n \n-#if GCC_VERSION >= 3400\n-#if HOST_BITS_PER_WIDEST_FAST_INT == HOST_BITS_PER_LONG\n-#define do_popcount(x) __builtin_popcountl(x)\n-#elif HOST_BITS_PER_WIDEST_FAST_INT == HOST_BITS_PER_LONGLONG\n-#define do_popcount(x) __builtin_popcountll(x)\n-#else\n-#error \"internal error: sbitmap.h and hwint.h are inconsistent\"\n+#ifdef IN_GCC\n+/* FIXME: sbitmap is just a data structure, but we define dataflow functions\n+   here also.  This is conditional on IN_GCC (see second #ifdef IN_GCC\n+   further down).\n+   For now, also only conditionally include basic-block.h, but we should\n+   find a better place for the dataflow functions.  Perhaps cfganal.c?  */\n+#include \"basic-block.h\"\n #endif\n+\n+#if GCC_VERSION >= 3400\n+#  if HOST_BITS_PER_WIDEST_FAST_INT == HOST_BITS_PER_LONG\n+#    define do_popcount(x) __builtin_popcountl(x)\n+#  elif HOST_BITS_PER_WIDEST_FAST_INT == HOST_BITS_PER_LONGLONG\n+#    define do_popcount(x) __builtin_popcountll(x)\n+#  else\n+#    error \"internal error: sbitmap.h and hwint.h are inconsistent\"\n+#  endif\n #else\n static unsigned long sbitmap_elt_popcount (SBITMAP_ELT_TYPE);\n-#define do_popcount(x) sbitmap_elt_popcount((x))\n+#  define do_popcount(x) sbitmap_elt_popcount((x))\n #endif\n \n+typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n+typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;\n+\n /* This macro controls debugging that is as expensive as the\n    operations it verifies.  */\n \n@@ -739,6 +745,14 @@ sbitmap_a_and_b_or_c (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitm\n }\n \n #ifdef IN_GCC\n+/* FIXME: depends on basic-block.h, see comment at start of this file.\n+\n+   Ironically, the comments before the functions below suggest they do\n+   dataflow using the \"new flow graph structures\", but that's the *old*\n+   new data structures.  The functions receive basic block numbers and\n+   use BASIC_BLOCK(idx) to get the basic block.  They should receive\n+   the basic block directly,  *sigh*.  */\n+\n /* Set the bitmap DST to the intersection of SRC of successors of\n    block number BB, using the new flow graph structures.  */\n "}, {"sha": "2e2c6245b1c3a44897b59ab2f11e7aaa0adaac8f", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=9ecb17301f36e6686c0c0a1cd3563a20a9a3d7ac", "patch": "@@ -44,9 +44,6 @@ struct simple_bitmap_def\n   SBITMAP_ELT_TYPE elms[1];\t/* The elements.  */\n };\n \n-typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n-typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;\n-\n /* Return the set size needed for N elements.  */\n #define SBITMAP_SET_SIZE(N) (((N) + SBITMAP_ELT_BITS - 1) / SBITMAP_ELT_BITS)\n #define SBITMAP_SIZE_BYTES(BITMAP) ((BITMAP)->size * sizeof (SBITMAP_ELT_TYPE))"}]}