{"sha": "a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiMDFkMzQwMzZjODVmMjNiN2NhMWEyYzk5ZTViNmJiMGI4ZTY4Yw==", "commit": {"author": {"name": "Aurelien Jarno", "email": "aurelien@aurel32.net", "date": "2016-07-21T08:27:47Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2016-07-21T08:27:47Z"}, "message": "[ARM] Fix PR target/59833\n\nFor Aurelien Jarno <aurelien@aurel32.net>\n\nOn ARM soft-float, the float to double conversion doesn't convert a sNaN\nto qNaN as the IEEE Std 754 standard mandates:\n\n\"Under default exception handling, any operation signaling an invalid\noperation exception and for which a floating-point result is to be\ndelivered shall deliver a quiet NaN.\"\n\nGiven the soft float ARM code ignores exceptions and always provides a\nresult, a float to double conversion of a signaling NaN should return a\nquiet NaN. Fix this in extendsfdf2.\n\ngcc/ChangeLog:\n\n\tPR target/59833\n\t* config/arm/ieee754-df.S (extendsfdf2): Convert sNaN to qNaN.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr59833.c: New testcase.\n\nFrom-SVN: r238584", "tree": {"sha": "3973337fb07a5c53e6c89382ef87a62c8ee3a2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3973337fb07a5c53e6c89382ef87a62c8ee3a2c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/comments", "author": {"login": "aurel32", "id": 7688913, "node_id": "MDQ6VXNlcjc2ODg5MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7688913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aurel32", "html_url": "https://github.com/aurel32", "followers_url": "https://api.github.com/users/aurel32/followers", "following_url": "https://api.github.com/users/aurel32/following{/other_user}", "gists_url": "https://api.github.com/users/aurel32/gists{/gist_id}", "starred_url": "https://api.github.com/users/aurel32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aurel32/subscriptions", "organizations_url": "https://api.github.com/users/aurel32/orgs", "repos_url": "https://api.github.com/users/aurel32/repos", "events_url": "https://api.github.com/users/aurel32/events{/privacy}", "received_events_url": "https://api.github.com/users/aurel32/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23974819345d2dc793cc77c85a5d84d05c787fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23974819345d2dc793cc77c85a5d84d05c787fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23974819345d2dc793cc77c85a5d84d05c787fa2"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "e0e4ed5c5cc10e3648c550291649a693168fdc26", "filename": "gcc/testsuite/gcc.dg/pr59833.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59833.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59833.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59833.c?ref=a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target { *-*-linux* *-*-gnu* } } } */\n+/* { dg-options \"-O0 -lm\" } */\n+/* { dg-require-effective-target issignaling } */\n+\n+#define _GNU_SOURCE\n+#include <math.h>\n+\n+int main (void)\n+{\n+  float sNaN = __builtin_nansf (\"\");\n+  double x = (double) sNaN;\n+  if (issignaling(x))\n+  {\n+    __builtin_abort();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "f3e9104f8964d1d7e729a967389bbed8aaada88e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "patch": "@@ -1,3 +1,8 @@\n+2016-07-21  Aurelien Jarno <aurelien@aurel32.net>\n+\n+\tPR target/59833\n+\t* config/arm/ieee754-df.S (extendsfdf2): Convert sNaN to qNaN.\n+\n 2016-07-19  Nick Clifton  <nickc@redhat.com>\n \n \t* config.host (m32r): Add m32r/t-m32r to tmake_file."}, {"sha": "1ecaa9dac2053267d39b8b5948b8a303afca760d", "filename": "libgcc/config/arm/ieee754-df.S", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-df.S?ref=a1b01d34036c85f23b7ca1a2c99e5b6bb0b8e68c", "patch": "@@ -507,11 +507,15 @@ ARM_FUNC_ALIAS aeabi_f2d extendsfdf2\n \teorne\txh, xh, #0x38000000\t@ fixup exponent otherwise.\n \tRETc(ne)\t\t\t@ and return it.\n \n-\tteq\tr2, #0\t\t\t@ if actually 0\n-\tdo_it\tne, e\n-\tteqne\tr3, #0xff000000\t\t@ or INF or NAN\n+\tbics\tr2, r2, #0xff000000\t@ isolate mantissa\n+\tdo_it\teq\t\t\t@ if 0, that is ZERO or INF,\n \tRETc(eq)\t\t\t@ we are done already.\n \n+\tteq\tr3, #0xff000000\t\t@ check for NAN\n+\tdo_it\teq, t\n+\torreq\txh, xh, #0x00080000\t@ change to quiet NAN\n+\tRETc(eq)\t\t\t@ and return it.\n+\n \t@ value was denormalized.  We can normalize it now.\n \tdo_push\t{r4, r5, lr}\n \t.cfi_adjust_cfa_offset 12   @ CFA is now sp + previousOffset + 12"}]}