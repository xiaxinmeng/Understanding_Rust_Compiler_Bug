{"sha": "eed566698034311c58eea585da1ddb5a6e0807fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkNTY2Njk4MDM0MzExYzU4ZWVhNTg1ZGExZGRiNWE2ZTA4MDdmYg==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2001-08-18T01:01:51Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-18T01:01:51Z"}, "message": "boehm.cc: Include gc_local_alloc.h if appropriate.\n\n2001-08-17  Hans-J. Boehm <Hans_Boehm@hp.com>\n\n\t* boehm.cc: Include gc_local_alloc.h if appropriate.\n\t(GC_GENERIC_MALLOC): Don't define.\n\t(MAYBE_MARK): Redefine for GC 6.0.\n\t(_Jv_MarkObj): Mark class differently.\n\t(_Jv_AllocArray): Use GC_generic_malloc.\n\nFrom-SVN: r44993", "tree": {"sha": "db04425374ce32b6c8045e86cc6a0842345b6820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db04425374ce32b6c8045e86cc6a0842345b6820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eed566698034311c58eea585da1ddb5a6e0807fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed566698034311c58eea585da1ddb5a6e0807fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eed566698034311c58eea585da1ddb5a6e0807fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed566698034311c58eea585da1ddb5a6e0807fb/comments", "author": null, "committer": null, "parents": [{"sha": "c8af3574e39507d08798c890c034c1935b51885c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af3574e39507d08798c890c034c1935b51885c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8af3574e39507d08798c890c034c1935b51885c"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "9f42ad101b3e6e3552987346c07cef280469a33f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eed566698034311c58eea585da1ddb5a6e0807fb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eed566698034311c58eea585da1ddb5a6e0807fb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eed566698034311c58eea585da1ddb5a6e0807fb", "patch": "@@ -1,3 +1,11 @@\n+2001-08-17  Hans-J. Boehm <Hans_Boehm@hp.com>\n+\n+\t* boehm.cc: Include gc_local_alloc.h if appropriate.\n+\t(GC_GENERIC_MALLOC): Don't define.\n+\t(MAYBE_MARK): Redefine for GC 6.0.\n+\t(_Jv_MarkObj): Mark class differently.\n+\t(_Jv_AllocArray): Use GC_generic_malloc.\n+\n 2001-08-17  Mark J Roberts  <mjr@anarcast.net>\n \n \t* java/math/BigInteger.java (randBytes): New method."}, {"sha": "7982eda095137e90a661a677da5df57fffa3d19b", "filename": "libjava/boehm.cc", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eed566698034311c58eea585da1ddb5a6e0807fb/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eed566698034311c58eea585da1ddb5a6e0807fb/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=eed566698034311c58eea585da1ddb5a6e0807fb", "patch": "@@ -30,24 +30,19 @@ extern \"C\"\n #include <private/gc_pmark.h>\n #include <gc_gcj.h>\n \n+#ifdef THREAD_LOCAL_ALLOC\n+# define GC_REDIRECT_TO_LOCAL\n+# include <gc_local_alloc.h>\n+#endif\n+\n   // These aren't declared in any Boehm GC header.\n   void GC_finalize_all (void);\n   ptr_t GC_debug_generic_malloc (size_t size, int k, GC_EXTRA_PARAMS);\n };\n \n-// FIXME: this should probably be defined in some GC header.\n-#ifdef GC_DEBUG\n-#  define GC_GENERIC_MALLOC(Size, Type) \\\n-    GC_debug_generic_malloc (Size, Type, GC_EXTRAS)\n-#else\n-#  define GC_GENERIC_MALLOC(Size, Type) GC_generic_malloc (Size, Type)\n-#endif\n-\n // We must check for plausibility ourselves.\n #define MAYBE_MARK(Obj, Top, Limit, Source, Exit)  \\\n-      if ((ptr_t) (Obj) >= GC_least_plausible_heap_addr \\\n-\t  && (ptr_t) (Obj) <= GC_greatest_plausible_heap_addr) \\\n-        PUSH_CONTENTS (Obj, Top, Limit, Source, Exit)\n+\tTop=GC_MARK_AND_PUSH((GC_PTR)Obj, Top, Limit, (GC_PTR *)Source)\n \n \f\n \n@@ -312,7 +307,7 @@ _Jv_MarkArray (void *addr, void *msp, void *msl, void * /*env*/)\n # endif\n   // Mark the object's class.\n   p = (ptr_t) klass;\n-  MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, obj, o2label);\n+  MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, &(dt -> clas), o2label);\n \n   for (int i = 0; i < JvGetArrayLength (array); ++i)\n     {\n@@ -374,7 +369,7 @@ _Jv_AllocArray (jsize size, jclass klass)\n   if (size < min_heap_addr) \n     obj = GC_MALLOC(size);\n   else \n-    obj = GC_GENERIC_MALLOC (size, array_kind_x);\n+    obj = GC_generic_malloc (size, array_kind_x);\n #endif\n   *((_Jv_VTable **) obj) = klass->vtable;\n   return obj;"}]}