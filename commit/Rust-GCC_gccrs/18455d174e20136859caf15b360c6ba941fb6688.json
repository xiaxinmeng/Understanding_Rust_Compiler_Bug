{"sha": "18455d174e20136859caf15b360c6ba941fb6688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0NTVkMTc0ZTIwMTM2ODU5Y2FmMTViMzYwYzZiYTk0MWZiNjY4OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-05-07T21:03:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-05-07T21:03:55Z"}, "message": "re PR middle-end/27409 (ICE in get_constraint_for_component_ref)\n\n2006-05-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/27409\n\t* tree-ssa-structalias.c (get_constraint_for_component_ref):\n\tDo not try to find zero-sized subvars.\n\n\t* gcc.dg/torture/pr27409.c: New testcase.\n\nFrom-SVN: r113607", "tree": {"sha": "73589bc29516aec8ae6263c78c3d383887aaa764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73589bc29516aec8ae6263c78c3d383887aaa764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18455d174e20136859caf15b360c6ba941fb6688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18455d174e20136859caf15b360c6ba941fb6688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18455d174e20136859caf15b360c6ba941fb6688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18455d174e20136859caf15b360c6ba941fb6688/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e716a54401ce2848a0143d5e02a5b9f11015886a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e716a54401ce2848a0143d5e02a5b9f11015886a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e716a54401ce2848a0143d5e02a5b9f11015886a"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "7f3cd34604d02bcd14a6a69cc9ed98b1c788bf61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18455d174e20136859caf15b360c6ba941fb6688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18455d174e20136859caf15b360c6ba941fb6688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18455d174e20136859caf15b360c6ba941fb6688", "patch": "@@ -1,3 +1,9 @@\n+2006-05-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27409\n+\t* tree-ssa-structalias.c (get_constraint_for_component_ref):\n+\tDo not try to find zero-sized subvars.\n+\n 2006-05-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/27136"}, {"sha": "7041216ac224e9f9a95a3d8ee6e750c5cfb5c1a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18455d174e20136859caf15b360c6ba941fb6688", "patch": "@@ -1,3 +1,8 @@\n+2006-05-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27409\n+\t* gcc.dg/torture/pr27409.c: New testcase.\n+\n 2006-05-07  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/27457"}, {"sha": "430e6c8cc5e2f30dbb789f8c15a036f751f0dede", "filename": "gcc/testsuite/gcc.dg/torture/pr27409.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27409.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27409.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27409.c?ref=18455d174e20136859caf15b360c6ba941fb6688", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+typedef struct {\n+        struct { } z;\n+} thang_t;\n+\n+struct {\n+        short           e;\n+        thang_t         f;\n+        int g;\n+} my_struct;\n+\n+void function(int blaz)\n+{\n+  thang_t *fp = &my_struct.f;\n+  foo(fp);\n+}"}, {"sha": "26dbd0dcca70f3e9d2f81d9b9e373185d2812d1f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18455d174e20136859caf15b360c6ba941fb6688/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=18455d174e20136859caf15b360c6ba941fb6688", "patch": "@@ -2378,7 +2378,8 @@ get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results)\n \t ignore this constraint. When we handle pointer subtraction,\n \t we may have to do something cute here.  */\n       \n-      if (result->offset < get_varinfo (result->var)->fullsize)\n+      if (result->offset < get_varinfo (result->var)->fullsize\n+\t  && bitmaxsize != 0)\n \t{\n \t  /* It's also not true that the constraint will actually start at the\n \t     right offset, it may start in some padding.  We only care about\n@@ -2400,6 +2401,12 @@ get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results)\n \t     embedded in a struct resulting in accessing *only* padding.  */\n \t  gcc_assert (curr || ref_contains_array_ref (orig_t));\n \t}\n+      else if (bitmaxsize == 0)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"Access to zero-sized part of variable,\"\n+\t\t     \"ignoring\\n\");\n+\t}\n       else\n \tif (dump_file && (dump_flags & TDF_DETAILS))\n \t  fprintf (dump_file, \"Access to past the end of variable, ignoring\\n\");"}]}