{"sha": "a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmYTFlY2RhYjc4MTk3OGYxODlmNmZlN2ZmZjgzYWIwNGI0ZTZlMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-11-15T14:57:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-11-15T14:57:12Z"}, "message": "i386-protos.h (x86_function_profiler): New function\n\n\t* i386-protos.h (x86_function_profiler): New function\n\t* i386.h (MCOUNT_NAME): New.\n\t(PROFILE_COUNT_REGISTER): New.\n\t(OUTPUT_FUNCTION_PROFILER): Move offline to ...\n\t* i386.c (x86_function_profiler) ... here; fix 64bit support\n\t* beos-elf.h (FUNCTION_PROFILER): Kill.\n\t(MCOUNT_NAME): New.\n\t* freebsd-aout.h (FUNCTION_PROFILER): Kill.\n\t(MCOUNT_NAME): New.\n\t(PROFILE_COUNT_REGISTER): New.\n\t* linux.h (FUNCTION_PROFILER): Kill.\n\t(MCOUNT_NAME): New.\n\t* x86-64.h (FUNCTION_PROFILER): Kill.\n\t(MCOUNT_NAME): New.\n\t* freebsd.h (FUNCTION_PROFILER): Kill.\n\t(MCOUNT_NAME): New.\n\nFrom-SVN: r59132", "tree": {"sha": "43591b0682e50da60e903e7c99507c3f031bfdad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43591b0682e50da60e903e7c99507c3f031bfdad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/comments", "author": null, "committer": null, "parents": [{"sha": "f7109dea6c8f8ebeda06c297487d71475bf54d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7109dea6c8f8ebeda06c297487d71475bf54d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7109dea6c8f8ebeda06c297487d71475bf54d99"}], "stats": {"total": 148, "additions": 77, "deletions": 71}, "files": [{"sha": "c43ef69650aac29be936eae2cbc89e664b8268dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -1,3 +1,22 @@\n+Fri Nov 15 14:54:19 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (x86_function_profiler): New function\n+\t* i386.h (MCOUNT_NAME): New.\n+\t(PROFILE_COUNT_REGISTER): New.\n+\t(OUTPUT_FUNCTION_PROFILER): Move offline to ...\n+\t* i386.c (x86_function_profiler) ... here; fix 64bit support\n+\t* beos-elf.h (FUNCTION_PROFILER): Kill.\n+\t(MCOUNT_NAME): New.\n+\t* freebsd-aout.h (FUNCTION_PROFILER): Kill.\n+\t(MCOUNT_NAME): New.\n+\t(PROFILE_COUNT_REGISTER): New.\n+\t* linux.h (FUNCTION_PROFILER): Kill.\n+\t(MCOUNT_NAME): New.\n+\t* x86-64.h (FUNCTION_PROFILER): Kill.\n+\t(MCOUNT_NAME): New.\n+\t* freebsd.h (FUNCTION_PROFILER): Kill.\n+\t(MCOUNT_NAME): New.\n+\n 2002-11-14  Jeroen Dobbelaere  <jeroen.dobbelaere@acunia.com>\n \n \t* config/arm/arm.h (EXPAND_BUILTIN_VA_ARG,"}, {"sha": "b84519f4d67aded1c85fb1a02a60b0ce42d7d544", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -40,21 +40,8 @@ Boston, MA 02111-1307, USA.  */\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%edx\\n\",\t\t\\\n-\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", LPREFIX, (LABELNO));\t\\\n-      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \"mcount\"\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\""}, {"sha": "a2b616e700b8335496ae5bccbc8f861c89b9ddbc", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -94,22 +94,10 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Profiling routines, partially copied from i386/osfrose.h.  */\n \n-/* Redefine this to use %eax instead of %edx.  */\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%eax\\n\",\t\t\\\n-\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovl $%sP%d,%%eax\\n\", LPREFIX, (LABELNO));\t\\\n-      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \"mcount\"\n+#undef PROFILE_COUNT_REGISTER\n+#define PROFILE_COUNT_REGISTER \"eax\"\n \n /*\n  * Some imports from svr4.h in support of shared libraries."}, {"sha": "e0160b1e0480c7def4993d69dbcc66004e4b696b", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -47,14 +47,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Tell final.c that we don't need a label passed to mcount.  */\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tcall *.mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tcall .mcount\\n\");\t\t\t\t\\\n-}\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \".mcount\"\n \n /* Make gcc agree with <machine/ansi.h>.  */\n "}, {"sha": "a594014093751f4262dbfb15d3725d4d52d2f664", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -184,6 +184,7 @@ extern void ix86_set_move_mem_attrs PARAMS ((rtx, rtx, rtx, rtx, rtx));\n extern void emit_i387_cw_initialization PARAMS ((rtx, rtx));\n extern bool ix86_fp_jump_nontrivial_p PARAMS ((enum rtx_code));\n extern void x86_order_regs_for_local_alloc PARAMS ((void));\n+extern void x86_function_profiler PARAMS ((FILE *, int));\n \n \n #ifdef TREE_CODE"}, {"sha": "0ccb62c3213e01742861fe8f693e05866de96ec1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -14297,6 +14297,46 @@ x86_field_alignment (field, computed)\n   return computed;\n }\n \n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+void\n+x86_function_profiler (file, labelno)\n+     FILE *file;\n+     int labelno;\n+{\n+  if (TARGET_64BIT)\n+    if (flag_pic)\n+      {\n+#ifndef NO_PROFILE_COUNTERS\n+\tfprintf (file, \"\\tleaq\\t%sP%d@(%%rip),%%r11\\n\", LPREFIX, labelno);\n+#endif\n+\tfprintf (file, \"\\tcall\\t*%s@GOTPCREL(%%rip)\\n\", MCOUNT_NAME);\n+      }\n+    else\n+      {\n+#ifndef NO_PROFILE_COUNTERS\n+\tfprintf (file, \"\\tmovq\\t$%sP%d,%%r11\\n\", LPREFIX, labelno);\n+#endif\n+\tfprintf (file, \"\\tcall\\t%s\\n\", MCOUNT_NAME);\n+      }\n+  else if (flag_pic)\n+    {\n+#ifndef NO_PROFILE_COUNTERS\n+      fprintf (file, \"\\tleal\\t%sP%d@GOTOFF(%%ebx),%%%s\\n\",\n+\t       LPREFIX, labelno, PROFILE_COUNT_REGISTER);\n+#endif\n+      fprintf (file, \"\\tcall\\t*%s@GOT(%%ebx)\\n\", MCOUNT_NAME);\n+    }\n+  else\n+    {\n+#ifndef NO_PROFILE_COUNTERS\n+      fprintf (file, \"\\tmovl\\t$%sP%d,%%$s\\n\", LPREFIX, labelno,\n+\t       PROFILE_COUNT_REGISTER);\n+#endif\n+      fprintf (file, \"\\tcall\\t%s\\n\", MCOUNT_NAME);\n+    }\n+}\n+\n /* Implement machine specific optimizations.  \n    At the moment we implement single transformation: AMD Athlon works faster\n    when RET is not destination of conditional jump or directly preceeded"}, {"sha": "ceba0b627ecab6b110762107cd71318ec570fd61", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -1758,20 +1758,11 @@ typedef struct ix86_args {\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tleal\\t%sP%d@GOTOFF(%%ebx),%%edx\\n\",\t\t\\\n-\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tcall\\t*_mcount@GOT(%%ebx)\\n\");\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tmovl\\t$%sP%d,%%edx\\n\", LPREFIX, (LABELNO));\t\\\n-      fprintf ((FILE), \"\\tcall\\t_mcount\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#define FUNCTION_PROFILER(FILE, LABELNO) x86_function_profiler (FILE, LABELNO)\n+\n+#define MCOUNT_NAME \"_mcount\"\n+\n+#define PROFILE_COUNT_REGISTER \"edx\"\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}, {"sha": "6b553cd4cb57bbe68e7cef6f2e93eeb4810b95a7", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -53,14 +53,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define NO_PROFILE_COUNTERS\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tcall\\t*mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tcall\\tmcount\\n\");\t\t\t\t\t\\\n-}\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \"mcount\"\n \n /* The GLIBC version of mcount for the x86 assumes that there is a\n    frame, so we cannot allow profiling without a frame pointer.  */"}, {"sha": "7af95fe8b3b14eeb9df42f39bbf3fe3ae88cf0e5", "filename": "gcc/config/i386/x86-64.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fx86-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0/gcc%2Fconfig%2Fi386%2Fx86-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-64.h?ref=a5fa1ecdab781978f189f6fe7fff83ab04b4e6e0", "patch": "@@ -29,16 +29,8 @@ Boston, MA 02111-1307, USA.  */\n /* Output assembler code to FILE to call the profiler.  */\n #define NO_PROFILE_COUNTERS\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && flag_pic)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tcall\\t*mcount@PLT\\n\");\t\t\t\t\\\n-  else if (flag_pic)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tcall\\t*mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tcall\\tmcount\\n\");\t\t\t\t\t\\\n-}\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME mcount\n \n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")"}]}