{"sha": "718364340fa052641189523e41a5006ba6c9966d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4MzY0MzQwZmEwNTI2NDExODk1MjNlNDFhNTAwNmJhNmM5OTY2ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-07-07T10:06:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-07-07T10:06:08Z"}, "message": "decl.c (gnat_to_gnu_param): Minor tweak.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_param): Minor tweak.\n\t(gnat_to_gnu_subprog_type): New pure_flag local variable.  Set it for\n\ta pure Ada function with a by-ref In parameter.  Propagate it onto the\n\tfunction type by means of the TYPE_QUAL_RESTRICT flag.\n\t* gcc-interface/utils.c (finish_subprog_decl): Set DECL_PURE_P if the\n\tfunction type has the TYPE_QUAL_RESTRICT flag set.\n\nFrom-SVN: r262495", "tree": {"sha": "570d31e7786608bb116879802c177ebeb03e7bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570d31e7786608bb116879802c177ebeb03e7bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718364340fa052641189523e41a5006ba6c9966d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718364340fa052641189523e41a5006ba6c9966d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718364340fa052641189523e41a5006ba6c9966d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718364340fa052641189523e41a5006ba6c9966d/comments", "author": null, "committer": null, "parents": [{"sha": "4a669ac35988fa6de5931455fb59c713563bc58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a669ac35988fa6de5931455fb59c713563bc58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a669ac35988fa6de5931455fb59c713563bc58b"}], "stats": {"total": 119, "additions": 106, "deletions": 13}, "files": [{"sha": "c5cf06c4cddf10ae9284d5ce2430bfe243aa5240", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -1,3 +1,12 @@\n+2018-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Minor tweak.\n+\t(gnat_to_gnu_subprog_type): New pure_flag local variable.  Set it for\n+\ta pure Ada function with a by-ref In parameter.  Propagate it onto the\n+\tfunction type by means of the TYPE_QUAL_RESTRICT flag.\n+\t* gcc-interface/utils.c (finish_subprog_decl): Set DECL_PURE_P if the\n+\tfunction type has the TYPE_QUAL_RESTRICT flag set.\n+\n 2018-07-06  Jim Wilson  <jimw@sifive.com>\n \n \t* Makefile.rtl: Add riscv*-linux* support."}, {"sha": "def48f169744a8e1ba96cfcc0dc47e22bed3bb67", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -5228,14 +5228,14 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n \t     && TYPE_MULTI_ARRAY_P (TREE_TYPE (gnu_param_type)))\n \tgnu_param_type = TREE_TYPE (gnu_param_type);\n \n-      by_component_ptr = true;\n       gnu_param_type = TREE_TYPE (gnu_param_type);\n \n       if (ro_param)\n \tgnu_param_type\n \t  = change_qualified_type (gnu_param_type, TYPE_QUAL_CONST);\n \n       gnu_param_type = build_pointer_type (gnu_param_type);\n+      by_component_ptr = true;\n     }\n \n   /* Fat pointers are passed as thin pointers for foreign conventions.  */\n@@ -5561,14 +5561,15 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n   /* Fields in return type of procedure with copy-in copy-out parameters.  */\n   tree gnu_field_list = NULL_TREE;\n   /* The semantics of \"pure\" in Ada essentially matches that of \"const\"\n-     in the back-end.  In particular, both properties are orthogonal to\n-     the \"nothrow\" property if the EH circuitry is explicit in the\n-     internal representation of the back-end.  If we are to completely\n+     or \"pure\" in GCC.  In particular, both properties are orthogonal\n+     to the \"nothrow\" property if the EH circuitry is explicit in the\n+     internal representation of the middle-end.  If we are to completely\n      hide the EH circuitry from it, we need to declare that calls to pure\n      Ada subprograms that can throw have side effects since they can\n-     trigger an \"abnormal\" transfer of control flow; thus they can be\n-     neither \"const\" nor \"pure\" in the back-end sense.  */\n+     trigger an \"abnormal\" transfer of control flow; therefore, they can\n+     be neither \"const\" nor \"pure\" in the GCC sense.  */\n   bool const_flag = (Back_End_Exceptions () && Is_Pure (gnat_subprog));\n+  bool pure_flag = false;\n   bool return_by_direct_ref_p = false;\n   bool return_by_invisi_ref_p = false;\n   bool return_unconstrained_p = false;\n@@ -5849,13 +5850,19 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t  gnu_param_list = chainon (gnu_param, gnu_param_list);\n \t  save_gnu_tree (gnat_param, gnu_param, false);\n \n-\t  /* If a parameter is a pointer, a function may modify memory through\n-\t     it and thus shouldn't be considered a const function.   Also, the\n-\t     memory may be modified between two calls, so they can't be CSE'ed.\n-\t     The latter case also handles by-ref parameters.  */\n-\t  if (POINTER_TYPE_P (gnu_param_type)\n-\t      || TYPE_IS_FAT_POINTER_P (gnu_param_type))\n-\t    const_flag = false;\n+\t  /* A pure function in the Ada sense which takes an access parameter\n+\t     may modify memory through it and thus need be considered neither\n+\t     const nor pure in the GCC sense.  Likewise it if takes a by-ref\n+\t     In Out or Out parameter.  But if it takes a by-ref In parameter,\n+\t     then it may only read memory through it and can be considered\n+\t     pure in the GCC sense.  */\n+\t  if ((const_flag || pure_flag)\n+\t      && (POINTER_TYPE_P (gnu_param_type)\n+\t\t  || TYPE_IS_FAT_POINTER_P (gnu_param_type)))\n+\t    {\n+\t      const_flag = false;\n+\t      pure_flag = DECL_POINTS_TO_READONLY_P (gnu_param);\n+\t    }\n \t}\n \n       /* If the parameter uses the copy-in copy-out mechanism, allocate a field\n@@ -6007,6 +6014,9 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n       if (const_flag)\n \tgnu_type = change_qualified_type (gnu_type, TYPE_QUAL_CONST);\n \n+      if (pure_flag)\n+\tgnu_type = change_qualified_type (gnu_type, TYPE_QUAL_RESTRICT);\n+\n       if (No_Return (gnat_subprog))\n \tgnu_type = change_qualified_type (gnu_type, TYPE_QUAL_VOLATILE);\n "}, {"sha": "e0e5cfe4de2ac9d379058c2395db09829a76564d", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -3330,6 +3330,9 @@ finish_subprog_decl (tree decl, tree asm_name, tree type)\n   /* Propagate the \"const\" property.  */\n   TREE_READONLY (decl) = TYPE_READONLY (type);\n \n+  /* Propagate the \"pure\" property.  */\n+  DECL_PURE_P (decl) = TYPE_RESTRICT (type);\n+\n   /* Propagate the \"noreturn\" property.  */\n   TREE_THIS_VOLATILE (decl) = TYPE_VOLATILE (type);\n "}, {"sha": "f8a33d809b38c71c3b58d5b5b0a207da4d44a694", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -1,3 +1,10 @@\n+2018-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pure_function3a.adb: New test.\n+\t* gnat.dg/pure_function3b.adb: Likewise.\n+\t* gnat.dg/pure_function3c.adb: Likewise.\n+\t* gnat.dg/pure_function3_pkg.ads: New helper.\n+\n 2018-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/84711"}, {"sha": "62ad9d29105cf1fe5dec867e508daf40ae634906", "filename": "gcc/testsuite/gnat.dg/pure_function3_pkg.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3_pkg.ads?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -0,0 +1,14 @@\n+package Pure_Function3_Pkg is\n+\n+   type T is limited private;\n+   function F (Self : T) return Integer with Pure_Function;\n+   procedure Set (Self : in out T);\n+   function F_And_Set (Self : in out T) return Integer with Pure_Function;\n+\n+private\n+\n+   type T is limited record\n+      F : Integer;\n+   end record;\n+\n+end Pure_Function3_Pkg;"}, {"sha": "879c6bc2b6ceaeecab6cf91371d12cc0268a341c", "filename": "gcc/testsuite/gnat.dg/pure_function3a.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3a.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3a.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3a.adb?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws -fdump-tree-optimized\" }\n+\n+with Pure_Function3_Pkg; use Pure_Function3_Pkg;\n+\n+procedure Pure_Function3a is\n+   V : T;\n+begin\n+   if F (V) = 1 then\n+      raise Program_Error;\n+   elsif F (V) = 2 then\n+      raise Program_Error;\n+   end if;\n+end;\n+\n+-- { dg-final { scan-tree-dump-times \"pure_function3_pkg.f\" 1 \"optimized\" } }"}, {"sha": "97e19fcd2e46ebad52ab9f24c69d537f4605c05a", "filename": "gcc/testsuite/gnat.dg/pure_function3b.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3b.adb?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws -fdump-tree-optimized\" }\n+\n+with Pure_Function3_Pkg; use Pure_Function3_Pkg;\n+\n+procedure Pure_Function3b is\n+   V : T;\n+begin\n+   if F (V) = 1 then\n+      raise Program_Error;\n+   end if;\n+   Set (V);\n+   if F (V) = 2 then\n+      raise Program_Error;\n+   end if;\n+end;\n+\n+-- { dg-final { scan-tree-dump-times \"pure_function3_pkg.f\" 2 \"optimized\" } }"}, {"sha": "0e3ec81d1424f577bdf00a750f401a2743c52618", "filename": "gcc/testsuite/gnat.dg/pure_function3c.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718364340fa052641189523e41a5006ba6c9966d/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpure_function3c.adb?ref=718364340fa052641189523e41a5006ba6c9966d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws -fdump-tree-optimized\" }\n+\n+with Pure_Function3_Pkg; use Pure_Function3_Pkg;\n+\n+procedure Pure_Function3c is\n+   V : T;\n+begin\n+   if F_And_Set (V) = 1 then\n+      raise Program_Error;\n+   elsif F_And_Set (V) = 2 then\n+      raise Program_Error;\n+   end if;\n+end;\n+\n+-- { dg-final { scan-tree-dump-times \"pure_function3_pkg.f\" 2 \"optimized\" } }"}]}