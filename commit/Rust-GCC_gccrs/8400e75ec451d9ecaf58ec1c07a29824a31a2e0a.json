{"sha": "8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwMGU3NWVjNDUxZDllY2FmNThlYzFjMDdhMjk4MjRhMzFhMmUwYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-11-22T14:18:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-11-22T14:18:13Z"}, "message": "Remove macros that implicitly use input_location\n\ngcc/\n\t* input.h (input_line): Remove.\n\t(input_filename): Likewise.\n\t(in_system_header): Likewise.\n\t* tree.h (EXPR_LOC_OR_HERE): Remove.\n\t* config/bfin/bfin.c (output_file_start): Remove use of\n\tinput_filename macro.\n\t* builtins.c (c_strlen): Remove use of EXPR_LOC_OR_HERE macro.\n\t* gimplify.c (internal_get_tmp_var): Likewise.\n\tEXPR_LOC_OR_HERE macro.\n\t(shortcut_cond_expr): Likewise.\n\t* tree-diagnostic.c (diagnostic_report_current_function): Remove\n\tuse of input_filename macro.\n\t* tree.c (get_file_function_name): Likewise.\n\ngcc/ada\n\t* gcc-interface/utils2.c (build_call_raise): Remove use of\n\tinput_line macro.\n\t(build_call_raise_range): Likewise.\n\t(build_call_raise_column): Likewise.\n\ngcc/c-family\n\t* c-common.c (unsafe_conversion_p): Remove use of\n\tEXPR_LOC_OR_HERE macro.\n\t(conversion_warning): Likewise.\n\t(warnings_for_convert_and_check): Likewise.\n\t(warn_for_collisions_1): Likewise.\n\t(shorten_compare): Likewise, and remove use of in_system_header\n\tmacro, using the location from the former.\n\t* c-lex.c (dump_one_header): Remove use of input_filename macro.\n\t(cb_def_pragma): Remove use of in_system_header macro.\n\t(lex_string): Likewise.\n\t* c-pragma.c (handle_pragma_float_const_decimal64): Likewise.\n\ngcc/c\n\t* c-decl.c (define_label, shadow_tag_warned)\n\t(check_bitfield_type_and_width, grokdeclarator, grokparms,\n\tstore_parm_decls_newstyle, store_parm_decls_oldstyle)\n\t(declspecs_add_type): Remove use of in_system_header macro.\n\t* c-parser.c (c_parser_unary_expression): Likewise.\n\t* c-typeck.c (store_init_value, process_init_element)\n\t(c_start_case): Likewise.\n\n\t* c-decl.c (build_enumerator): Remove use of EXPR_LOC_OR_HERE\n\tmacro.\n\n\t* c-parser.c (c_parser_set_source_position_from_token): Remove\n\treference to in_system_header from comment.\n\ngcc/cp\n\t* call.c (build_integral_nontype_arg_conv): Remove use of\n\tEXPR_LOC_OR_HERE macro.\n\t(convert_like_real): Likewise.\n\t(convert_arg_to_ellipsis): Likewise.\n\t(build_cxx_call): Likewise.\n\t(perform_implicit_conversion_flags): Likewise.\n\t(initialize_reference): Likewise.\n\t* cvt.c (cp_convert_to_pointer): Likewise.\n\t(convert_to_reference): Likewise.\n\t(ocp_convert): Likewise.\n\t(convert_to_void): Likewise.\n\t* decl.c (pop_label): Update comment.\n\t(pop_switch): Remove use of EXPR_LOC_OR_HERE macro.\n\t(check_tag_decl): Remove use of in_system_header macro.\n\t(make_rtl_for_nonlocal_decl): Remove use of input_filename\n\tmacro.\n\t(compute_array_index_type): Remove use of in_system_header\n\tmacro.\n\t(grokdeclarator): Likewise.\n\t* error.c (dump_global_iord): Remove use of input_filename\n\tmacro.\n\t(location_of): Remove use of EXPR_LOC_OR_HERE macro.\n\t(maybe_warn_cpp0x): Remove use of in_system_header macro.\n\t* init.c (build_new_1): Remove use of EXPR_LOC_OR_HERE macro.\n\t* lex.c (handle_pragma_interface): Remove use of input_filename\n\tmacro.\n\t(handle_pragma_implementation): Likewise.\n\t(cxx_make_type): Likewise.\n\t(in_main_input_context): Likewise.\n\t* name-lookup.c (push_binding_level): Remove use of\n\tinput_line macro.\n\t(leave_scope): Likewise.\n\t(resume_scope): Likewise.\n\t* parser.c (cp_parser_unqualified_id): Remove use of\n\tin_system_header macro.\n\t(cp_parser_cast_expression): Likewise.\n\t(cp_parser_declaration_seq_opt): Likewise.\n\t(cp_parser_enumerator_list): Likewise.\n\t(cp_parser_parameter_declaration_clause): Likewise.\n\t(cp_parser_exception_specification_opt): Likewise.\n\t* pt.c (unify_arg_conversion): Remove use of EXPR_LOC_OR_HERE\n\tmacro.\n\t(convert_nontype_argument): Likewise.\n\t(push_tinst_level): Remove use of in_system_header macro.\n\t(tsubst_copy_and_build): Remove use of EXPR_LOC_OR_HERE\n\tmacros.\n\t(do_decl_instantiation): Remove use of in_system_header macro.\n\t(do_type_instantiation): Likewise.\n\t* semantics.c (finish_call_expr): Remove use of EXPR_LOC_OR_HERE\n\tmacro.\n\t(begin_class_definition): Remove use of input_filename macro.\n\t(cxx_eval_call_expression): Remove use of EXPR_LOC_OR_HERE\n\tmacro.\n\t(cxx_eval_constant_expression): Likewise.\n\t(potential_constant_expression_1): Likewise.\n\t* typeck.c (decay_conversion): Likewise.\n\t(rationalize_conditional_expr): Likewise.\n\t(build_x_compound_expr_from_list): Likewise.\n\t(convert_for_assignment): Likewise.\n\t* typeck2.c (check_narrowing): Likewise.\n\ngcc/fortran\n\t* trans.c (trans_runtime_error_vararg): Remove use of input_line\n\tmacro.\n\ngcc/java\n\t* class.c (maybe_layout_super_class): Update comment.\n\t* decl.c (java_add_stmt): Remove use of input_filename macro.\n\t* jcf-parse.c (set_source_filename): Remove use of\n\tinput_filename macro.\n\t(parse_class_file): Remove use of input_line and input_filename\n\tmacros.\n\t(java_parse_file): Remove use of input_filename macro.\n\nFrom-SVN: r205262", "tree": {"sha": "a7c4dbecf9c3315f9546fbd414900591eab0b7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c4dbecf9c3315f9546fbd414900591eab0b7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f81448f7525462e58bc1393eb3b2157a66672cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81448f7525462e58bc1393eb3b2157a66672cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81448f7525462e58bc1393eb3b2157a66672cb0"}], "stats": {"total": 409, "additions": 281, "deletions": 128}, "files": [{"sha": "15459d3e30728cb5a68a4f09e8f02be86d55b83d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,19 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.h (input_line): Remove.\n+\t(input_filename): Likewise.\n+\t(in_system_header): Likewise.\n+\t* tree.h (EXPR_LOC_OR_HERE): Remove.\n+\t* config/bfin/bfin.c (output_file_start): Remove use of\n+\tinput_filename macro.\n+\t* builtins.c (c_strlen): Remove use of EXPR_LOC_OR_HERE macro.\n+\t* gimplify.c (internal_get_tmp_var): Likewise.\n+\tEXPR_LOC_OR_HERE macro.\n+\t(shortcut_cond_expr): Likewise.\n+\t* tree-diagnostic.c (diagnostic_report_current_function): Remove\n+\tuse of input_filename macro.\n+\t* tree.c (get_file_function_name): Likewise.\n+\n 2013-11-22  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* store-layout.c (place-field): Fix hwi test and accessor mismatch."}, {"sha": "41b129c6be2881a5eab6377926b703211da4b7b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,10 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc-interface/utils2.c (build_call_raise): Remove use of\n+\tinput_line macro.\n+\t(build_call_raise_range): Likewise.\n+\t(build_call_raise_column): Likewise.\n+\n 2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "224a87d87774071749a8855254c74ec7d82f4f67", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1715,7 +1715,8 @@ build_call_raise (int msg, Node_Id gnat_node, char kind)\n   filename = build_string (len, str);\n   line_number\n     = (gnat_node != Empty && Sloc (gnat_node) != No_Location)\n-      ? Get_Logical_Line_Number (Sloc(gnat_node)) : input_line;\n+      ? Get_Logical_Line_Number (Sloc(gnat_node))\n+      : LOCATION_LINE (input_location);\n \n   TREE_TYPE (filename) = build_array_type (unsigned_char_type_node,\n \t\t\t\t\t   build_index_type (size_int (len)));\n@@ -1761,7 +1762,7 @@ build_call_raise_range (int msg, Node_Id gnat_node,\n     }\n   else\n     {\n-      line_number = input_line;\n+      line_number = LOCATION_LINE (input_location);\n       column_number = 0;\n     }\n \n@@ -1811,7 +1812,7 @@ build_call_raise_column (int msg, Node_Id gnat_node)\n     }\n   else\n     {\n-      line_number = input_line;\n+      line_number = LOCATION_LINE (input_location);\n       column_number = 0;\n     }\n "}, {"sha": "280387f38d025470435c2abf11edbc228c67a99e", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -588,7 +588,7 @@ c_strlen (tree src, int only_value)\n       && (only_value || !TREE_SIDE_EFFECTS (TREE_OPERAND (src, 0))))\n     return c_strlen (TREE_OPERAND (src, 1), only_value);\n \n-  loc = EXPR_LOC_OR_HERE (src);\n+  loc = EXPR_LOC_OR_LOC (src, input_location);\n \n   src = string_constant (src, &offset_node);\n   if (src == 0)"}, {"sha": "40415847d87d80b0173a8f951b0d9aee9f34941e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,17 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (unsafe_conversion_p): Remove use of\n+\tEXPR_LOC_OR_HERE macro.\n+\t(conversion_warning): Likewise.\n+\t(warnings_for_convert_and_check): Likewise.\n+\t(warn_for_collisions_1): Likewise.\n+\t(shorten_compare): Likewise, and remove use of in_system_header\n+\tmacro, using the location from the former.\n+\t* c-lex.c (dump_one_header): Remove use of input_filename macro.\n+\t(cb_def_pragma): Remove use of in_system_header macro.\n+\t(lex_string): Likewise.\n+\t* c-pragma.c (handle_pragma_float_const_decimal64): Likewise.\n+\n 2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "1ceaeb51d7d7476c38e8a08fc79e8ef82defff30", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -2552,7 +2552,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n {\n   enum conversion_safety give_warning = SAFE_CONVERSION; /* is 0 or false */\n   tree expr_type = TREE_TYPE (expr);\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (TREE_CODE (expr) == REAL_CST || TREE_CODE (expr) == INTEGER_CST)\n     {\n@@ -2718,7 +2718,7 @@ static void\n conversion_warning (tree type, tree expr)\n {\n   tree expr_type = TREE_TYPE (expr);\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n   enum conversion_safety conversion_kind;\n \n   if (!warn_conversion && !warn_sign_conversion && !warn_float_conversion)\n@@ -2791,7 +2791,7 @@ conversion_warning (tree type, tree expr)\n void\n warnings_for_convert_and_check (tree type, tree expr, tree result)\n {\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (TREE_CODE (expr) == INTEGER_CST\n       && (TREE_CODE (type) == INTEGER_TYPE\n@@ -3001,7 +3001,7 @@ warn_for_collisions_1 (tree written, tree writer, struct tlist *list,\n \t  && (!only_writes || list->writer))\n \t{\n \t  warned_ids = new_tlist (warned_ids, written, NULL_TREE);\n-\t  warning_at (EXPR_LOC_OR_HERE (writer),\n+\t  warning_at (EXPR_LOC_OR_LOC (writer, input_location),\n \t\t      OPT_Wsequence_point, \"operation on %qE may be undefined\",\n \t\t      list->expr);\n \t}\n@@ -3999,7 +3999,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n   int real1, real2;\n   tree primop0, primop1;\n   enum tree_code code = *rescode_ptr;\n-  location_t loc = EXPR_LOC_OR_HERE (op0);\n+  location_t loc = EXPR_LOC_OR_LOC (op0, input_location);\n \n   /* Throw away any conversions to wider types\n      already present in the operands.  */\n@@ -4297,7 +4297,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t     the comparison isn't an issue, so suppress the\n \t     warning.  */\n \t  bool warn = \n-\t    warn_type_limits && !in_system_header\n+\t    warn_type_limits && !in_system_header_at (loc)\n \t    && c_inhibit_evaluation_warnings == 0\n \t    && !(TREE_CODE (primop0) == INTEGER_CST\n \t\t && !TREE_OVERFLOW (convert (c_common_signed_type (type),"}, {"sha": "2130296a39076bc267e53c46218fdcdcd1538ba6", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -147,7 +147,7 @@ dump_one_header (splay_tree_node n, void * ARG_UNUSED (dummy))\n void\n dump_time_statistics (void)\n {\n-  struct c_fileinfo *file = get_fileinfo (input_filename);\n+  struct c_fileinfo *file = get_fileinfo (LOCATION_FILE (input_location));\n   int this_time = get_run_time ();\n   file->time += this_time - body_time;\n \n@@ -243,7 +243,7 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n   /* Issue a warning message if we have been asked to do so.  Ignore\n      unknown pragmas in system headers unless an explicit\n      -Wunknown-pragmas has been given.  */\n-  if (warn_unknown_pragmas > in_system_header)\n+  if (warn_unknown_pragmas > in_system_header_at (input_location))\n     {\n       const unsigned char *space, *name;\n       const cpp_token *s;\n@@ -1071,7 +1071,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string, bool translate)\n   if (concats)\n     strs = XOBFINISH (&str_ob, cpp_string *);\n \n-  if (concats && !objc_string && !in_system_header)\n+  if (concats && !objc_string && !in_system_header_at (input_location))\n     warning (OPT_Wtraditional,\n \t     \"traditional C rejects string constant concatenation\");\n "}, {"sha": "64a5b66749918061f2e0519659cc68d6d8a246ea", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1121,7 +1121,7 @@ handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n {\n   if (c_dialect_cxx ())\n     {\n-      if (warn_unknown_pragmas > in_system_header)\n+      if (warn_unknown_pragmas > in_system_header_at (input_location))\n \twarning (OPT_Wunknown_pragmas,\n \t\t \"%<#pragma STDC FLOAT_CONST_DECIMAL64%> is not supported\"\n \t\t \" for C++\");\n@@ -1130,7 +1130,7 @@ handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n \n   if (!targetm.decimal_float_supported_p ())\n     {\n-      if (warn_unknown_pragmas > in_system_header)\n+      if (warn_unknown_pragmas > in_system_header_at (input_location))\n \twarning (OPT_Wunknown_pragmas,\n \t\t \"%<#pragma STDC FLOAT_CONST_DECIMAL64%> is not supported\"\n \t\t \" on this target\");"}, {"sha": "7dab092f3105cec2028f3e1e4c13ff2f5d9f02d5", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,19 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (define_label, shadow_tag_warned)\n+\t(check_bitfield_type_and_width, grokdeclarator, grokparms,\n+\tstore_parm_decls_newstyle, store_parm_decls_oldstyle)\n+\t(declspecs_add_type): Remove use of in_system_header macro.\n+\t* c-parser.c (c_parser_unary_expression): Likewise.\n+\t* c-typeck.c (store_init_value, process_init_element)\n+\t(c_start_case): Likewise.\n+\n+\t* c-decl.c (build_enumerator): Remove use of EXPR_LOC_OR_HERE\n+\tmacro.\n+\n+\t* c-parser.c (c_parser_set_source_position_from_token): Remove\n+\treference to in_system_header from comment.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-decl.c (grokdeclarator): Update comment to refer to"}, {"sha": "1d4f1af41a7930c6b3c59a164d317ba9d88b72c5", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -3328,7 +3328,7 @@ define_label (location_t location, tree name)\n       bind_label (name, label, current_function_scope, label_vars);\n     }\n \n-  if (!in_system_header && lookup_name (name))\n+  if (!in_system_header_at (input_location) && lookup_name (name))\n     warning_at (location, OPT_Wtraditional,\n \t\t\"traditional C lacks a separate namespace \"\n \t\t\"for labels, identifier %qE conflicts\", name);\n@@ -3762,15 +3762,16 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t}\n       else\n \t{\n-\t  if (warned != 1 && !in_system_header)\n+\t  if (warned != 1 && !in_system_header_at (input_location))\n \t    {\n \t      pedwarn (input_location, 0,\n \t\t       \"useless type name in empty declaration\");\n \t      warned = 1;\n \t    }\n \t}\n     }\n-  else if (warned != 1 && !in_system_header && declspecs->typedef_p)\n+  else if (warned != 1 && !in_system_header_at (input_location)\n+\t   && declspecs->typedef_p)\n     {\n       pedwarn (input_location, 0, \"useless type name in empty declaration\");\n       warned = 1;\n@@ -3802,30 +3803,34 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n       warned = 1;\n     }\n \n-  if (!warned && !in_system_header && declspecs->storage_class != csc_none)\n+  if (!warned && !in_system_header_at (input_location)\n+      && declspecs->storage_class != csc_none)\n     {\n       warning (0, \"useless storage class specifier in empty declaration\");\n       warned = 2;\n     }\n \n-  if (!warned && !in_system_header && declspecs->thread_p)\n+  if (!warned && !in_system_header_at (input_location) && declspecs->thread_p)\n     {\n       warning (0, \"useless %qs in empty declaration\",\n \t       declspecs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");\n       warned = 2;\n     }\n \n-  if (!warned && !in_system_header && (declspecs->const_p\n-\t\t\t\t       || declspecs->volatile_p\n-\t\t\t\t       || declspecs->atomic_p\n-\t\t\t\t       || declspecs->restrict_p\n-\t\t\t\t       || declspecs->address_space))\n+  if (!warned\n+      && !in_system_header_at (input_location)\n+      && (declspecs->const_p\n+\t  || declspecs->volatile_p\n+\t  || declspecs->atomic_p\n+\t  || declspecs->restrict_p\n+\t  || declspecs->address_space))\n     {\n       warning (0, \"useless type qualifier in empty declaration\");\n       warned = 2;\n     }\n \n-  if (!warned && !in_system_header && declspecs->alignas_p)\n+  if (!warned && !in_system_header_at (input_location)\n+      && declspecs->alignas_p)\n     {\n       warning (0, \"useless %<_Alignas%> in empty declaration\");\n       warned = 2;\n@@ -4821,7 +4826,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n     }\n \n   type_mv = TYPE_MAIN_VARIANT (*type);\n-  if (!in_system_header\n+  if (!in_system_header_at (input_location)\n       && type_mv != integer_type_node\n       && type_mv != unsigned_type_node\n       && type_mv != boolean_type_node)\n@@ -5071,7 +5076,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   /* Diagnose defaulting to \"int\".  */\n \n-  if (declspecs->default_int_p && !in_system_header)\n+  if (declspecs->default_int_p && !in_system_header_at (input_location))\n     {\n       /* Issue a warning if this is an ISO C 99 program or if\n \t -Wreturn-type and this is a function, or if -Wimplicit;\n@@ -5351,7 +5356,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\ttype = error_mark_node;\n \t      }\n \n-\t    if (pedantic && !in_system_header && flexible_array_type_p (type))\n+\t    if (pedantic && !in_system_header_at (input_location)\n+\t\t&& flexible_array_type_p (type))\n \t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"invalid use of structure with flexible array member\");\n \n@@ -5529,7 +5535,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    flexible_array_member = (t->kind == cdk_id);\n \t\t  }\n \t\tif (flexible_array_member\n-\t\t    && pedantic && !flag_isoc99 && !in_system_header)\n+\t\t    && pedantic && !flag_isoc99\n+\t\t    && !in_system_header_at (input_location))\n \t\t  pedwarn (loc, OPT_Wpedantic,\n \t\t\t   \"ISO C90 does not support flexible array members\");\n \n@@ -6383,7 +6390,8 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       error (\"%<[*]%> not allowed in other than function prototype scope\");\n     }\n \n-  if (arg_types == 0 && !funcdef_flag && !in_system_header)\n+  if (arg_types == 0 && !funcdef_flag\n+      && !in_system_header_at (input_location))\n     warning (OPT_Wstrict_prototypes,\n \t     \"function declaration isn%'t a prototype\");\n \n@@ -7782,7 +7790,7 @@ build_enumerator (location_t decl_loc, location_t loc,\n \n   /* Set basis for default for next value.  */\n   the_enum->enum_next_value\n-    = build_binary_op (EXPR_LOC_OR_HERE (value),\n+    = build_binary_op (EXPR_LOC_OR_LOC (value, input_location),\n \t\t       PLUS_EXPR, value, integer_one_node, 0);\n   the_enum->enum_overflow = tree_int_cst_lt (the_enum->enum_next_value, value);\n \n@@ -8056,7 +8064,8 @@ store_parm_decls_newstyle (tree fndecl, const struct c_arg_info *arg_info)\n      warning if we got here because ARG_INFO_TYPES was error_mark_node\n      (this happens when a function definition has just an ellipsis in\n      its parameter list).  */\n-  else if (!in_system_header && !current_function_scope\n+  else if (!in_system_header_at (input_location)\n+\t   && !current_function_scope\n \t   && arg_info->types != error_mark_node)\n     warning_at (DECL_SOURCE_LOCATION (fndecl), OPT_Wtraditional,\n \t\t\"traditional C rejects ISO C style function definitions\");\n@@ -8110,7 +8119,7 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n   tree parmids = arg_info->parms;\n   struct pointer_set_t *seen_args = pointer_set_create ();\n \n-  if (!in_system_header)\n+  if (!in_system_header_at (input_location))\n     warning_at (DECL_SOURCE_LOCATION (fndecl),\n \t\tOPT_Wold_style_definition, \"old-style function definition\");\n \n@@ -9468,7 +9477,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\t  error_at (loc, \"%<__int128%> is not supported for this target\");\n \t\t  return specs;\n \t\t}\n-\t      if (!in_system_header)\n+\t      if (!in_system_header_at (input_location))\n \t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"ISO C does not support %<__int128%> type\");\n "}, {"sha": "1e3689fe1a54756331b4f3b027b0f4703960e379", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -775,8 +775,7 @@ c_parser_consume_pragma (c_parser *parser)\n   parser->in_pragma = true;\n }\n \n-/* Update the globals input_location and in_system_header from\n-   TOKEN.  */\n+/* Update the global input_location from TOKEN.  */\n static inline void\n c_parser_set_source_position_from_token (c_token *token)\n {\n@@ -6301,7 +6300,7 @@ c_parser_unary_expression (c_parser *parser)\n       ret.value = build_indirect_ref (op_loc, op.value, RO_UNARY_STAR);\n       return ret;\n     case CPP_PLUS:\n-      if (!c_dialect_objc () && !in_system_header)\n+      if (!c_dialect_objc () && !in_system_header_at (input_location))\n \twarning_at (op_loc,\n \t\t    OPT_Wtraditional,\n \t\t    \"traditional C rejects the unary plus operator\");"}, {"sha": "1ae75fb998d055c28fff7141c5a5b63b4097dd2e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -6185,7 +6185,7 @@ store_init_value (location_t init_loc, tree decl, tree init, tree origtype)\n \n   /* Store the expression if valid; else report error.  */\n \n-  if (!in_system_header\n+  if (!in_system_header_at (input_location)\n       && AGGREGATE_TYPE_P (TREE_TYPE (decl)) && !TREE_STATIC (decl))\n     warning (OPT_Wtraditional, \"traditional C rejects automatic \"\n \t     \"aggregate initialization\");\n@@ -8686,7 +8686,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t     again on the assumption that this must be conditional on\n \t     __STDC__ anyway (and we've already complained about the\n \t     member-designator already).  */\n-\t  if (!in_system_header && !constructor_designated\n+\t  if (!in_system_header_at (input_location) && !constructor_designated\n \t      && !(value.value && (integer_zerop (value.value)\n \t\t\t\t   || real_zerop (value.value))))\n \t    warning (OPT_Wtraditional, \"traditional C rejects initialization \"\n@@ -9287,7 +9287,7 @@ c_start_case (location_t switch_loc,\n \t{\n \t  tree type = TYPE_MAIN_VARIANT (orig_type);\n \n-\t  if (!in_system_header\n+\t  if (!in_system_header_at (input_location)\n \t      && (type == long_integer_type_node\n \t\t  || type == long_unsigned_type_node))\n \t    warning_at (switch_cond_loc,"}, {"sha": "6fdf15302f9c554aeb44fd88b392d53eacc66b68", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -105,7 +105,7 @@ output_file_start (void)\n   FILE *file = asm_out_file;\n   int i;\n \n-  fprintf (file, \".file \\\"%s\\\";\\n\", input_filename);\n+  fprintf (file, \".file \\\"%s\\\";\\n\", LOCATION_FILE (input_location));\n   \n   for (i = 0; arg_regs[i] >= 0; i++)\n     ;"}, {"sha": "ebff99b1e09e897b06bc4e1213c95da4e0530bbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,66 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call.c (build_integral_nontype_arg_conv): Remove use of\n+\tEXPR_LOC_OR_HERE macro.\n+\t(convert_like_real): Likewise.\n+\t(convert_arg_to_ellipsis): Likewise.\n+\t(build_cxx_call): Likewise.\n+\t(perform_implicit_conversion_flags): Likewise.\n+\t(initialize_reference): Likewise.\n+\t* cvt.c (cp_convert_to_pointer): Likewise.\n+\t(convert_to_reference): Likewise.\n+\t(ocp_convert): Likewise.\n+\t(convert_to_void): Likewise.\n+\t* decl.c (pop_label): Update comment.\n+\t(pop_switch): Remove use of EXPR_LOC_OR_HERE macro.\n+\t(check_tag_decl): Remove use of in_system_header macro.\n+\t(make_rtl_for_nonlocal_decl): Remove use of input_filename\n+\tmacro.\n+\t(compute_array_index_type): Remove use of in_system_header\n+\tmacro.\n+\t(grokdeclarator): Likewise.\n+\t* error.c (dump_global_iord): Remove use of input_filename\n+\tmacro.\n+\t(location_of): Remove use of EXPR_LOC_OR_HERE macro.\n+\t(maybe_warn_cpp0x): Remove use of in_system_header macro.\n+\t* init.c (build_new_1): Remove use of EXPR_LOC_OR_HERE macro.\n+\t* lex.c (handle_pragma_interface): Remove use of input_filename\n+\tmacro.\n+\t(handle_pragma_implementation): Likewise.\n+\t(cxx_make_type): Likewise.\n+\t(in_main_input_context): Likewise.\n+\t* name-lookup.c (push_binding_level): Remove use of\n+\tinput_line macro.\n+\t(leave_scope): Likewise.\n+\t(resume_scope): Likewise.\n+\t* parser.c (cp_parser_unqualified_id): Remove use of\n+\tin_system_header macro.\n+\t(cp_parser_cast_expression): Likewise.\n+\t(cp_parser_declaration_seq_opt): Likewise.\n+\t(cp_parser_enumerator_list): Likewise.\n+\t(cp_parser_parameter_declaration_clause): Likewise.\n+\t(cp_parser_exception_specification_opt): Likewise.\n+\t* pt.c (unify_arg_conversion): Remove use of EXPR_LOC_OR_HERE\n+\tmacro.\n+\t(convert_nontype_argument): Likewise.\n+\t(push_tinst_level): Remove use of in_system_header macro.\n+\t(tsubst_copy_and_build): Remove use of EXPR_LOC_OR_HERE\n+\tmacros.\n+\t(do_decl_instantiation): Remove use of in_system_header macro.\n+\t(do_type_instantiation): Likewise.\n+\t* semantics.c (finish_call_expr): Remove use of EXPR_LOC_OR_HERE\n+\tmacro.\n+\t(begin_class_definition): Remove use of input_filename macro.\n+\t(cxx_eval_call_expression): Remove use of EXPR_LOC_OR_HERE\n+\tmacro.\n+\t(cxx_eval_constant_expression): Likewise.\n+\t(potential_constant_expression_1): Likewise.\n+\t* typeck.c (decay_conversion): Likewise.\n+\t(rationalize_conditional_expr): Likewise.\n+\t(build_x_compound_expr_from_list): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\t* typeck2.c (check_narrowing): Likewise.\n+\n 2013-11-22  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* parser.c, semantics.c: Change some local variables from vec to"}, {"sha": "935e0116771261744a4c6ae4bf0a825481f7299b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -3687,7 +3687,7 @@ build_integral_nontype_arg_conv (tree type, tree expr, tsubst_flags_t complain)\n   conversion *conv;\n   void *p;\n   tree t;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (error_operand_p (expr))\n     return error_mark_node;\n@@ -5850,7 +5850,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n   tree totype = convs->type;\n   diagnostic_t diag_kind;\n   int flags;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (convs->bad_p && !(complain & tf_error))\n     return error_mark_node;\n@@ -6263,7 +6263,7 @@ tree\n convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n {\n   tree arg_type;\n-  location_t loc = EXPR_LOC_OR_HERE (arg);\n+  location_t loc = EXPR_LOC_OR_LOC (arg, input_location);\n \n   /* [expr.call]\n \n@@ -7168,7 +7168,7 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n   int optimize_sav;\n \n   /* Remember roughly where this call is.  */\n-  location_t loc = EXPR_LOC_OR_HERE (fn);\n+  location_t loc = EXPR_LOC_OR_LOC (fn, input_location);\n   fn = build_call_a (fn, nargs, argarray);\n   SET_EXPR_LOCATION (fn, loc);\n \n@@ -8979,7 +8979,7 @@ perform_implicit_conversion_flags (tree type, tree expr,\n {\n   conversion *conv;\n   void *p;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (error_operand_p (expr))\n     return error_mark_node;\n@@ -9295,7 +9295,7 @@ initialize_reference (tree type, tree expr,\n {\n   conversion *conv;\n   void *p;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (type == error_mark_node || error_operand_p (expr))\n     return error_mark_node;"}, {"sha": "c1dfdcf3599fac359b963f506c62414e74a3aae2", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -78,7 +78,7 @@ cp_convert_to_pointer (tree type, tree expr, tsubst_flags_t complain)\n   tree intype = TREE_TYPE (expr);\n   enum tree_code form;\n   tree rval;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (intype == error_mark_node)\n     return error_mark_node;\n@@ -413,7 +413,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n   tree rval = NULL_TREE;\n   tree rval_as_conversion = NULL_TREE;\n   bool can_convert_intype_to_type;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (TREE_CODE (type) == FUNCTION_TYPE\n       && TREE_TYPE (expr) == unknown_type_node)\n@@ -656,7 +656,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n   enum tree_code code = TREE_CODE (type);\n   const char *invalid_conv_diag;\n   tree e1;\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (error_operand_p (e) || type == error_mark_node)\n     return error_mark_node;\n@@ -912,7 +912,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n tree\n convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n {\n-  location_t loc = EXPR_LOC_OR_HERE (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n   if (expr == error_mark_node\n       || TREE_TYPE (expr) == error_mark_node)"}, {"sha": "40a9a8cb7cc5671b74a993eb4fd2f7329e717ec8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -376,7 +376,8 @@ pop_label (tree label, tree old_value)\n \t  location_t location;\n \n \t  error (\"label %q+D used but not defined\", label);\n-\t  location = input_location; /* FIXME want (input_filename, (line)0) */\n+\t  location = input_location;\n+\t    /* FIXME want (LOCATION_FILE (input_location), (line)0) */\n \t  /* Avoid crashing later.  */\n \t  define_label (location, DECL_NAME (label));\n \t}\n@@ -3092,7 +3093,7 @@ pop_switch (void)\n   location_t switch_location;\n \n   /* Emit warnings as needed.  */\n-  switch_location = EXPR_LOC_OR_HERE (cs->switch_stmt);\n+  switch_location = EXPR_LOC_OR_LOC (cs->switch_stmt, input_location);\n   if (!processing_template_decl)\n     c_do_switch_warnings (cs->cases, switch_location,\n \t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt),\n@@ -4241,7 +4242,7 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n     error (\"multiple types in one declaration\");\n   else if (declspecs->redefined_builtin_type)\n     {\n-      if (!in_system_header)\n+      if (!in_system_header_at (input_location))\n \tpermerror (declspecs->locations[ds_redefined_builtin_type_spec],\n \t\t   \"redeclaration of C++ built-in type %qT\",\n \t\t   declspecs->redefined_builtin_type);\n@@ -4292,7 +4293,8 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n       /* Anonymous unions are objects, so they can have specifiers.  */;\n       SET_ANON_AGGR_TYPE_P (declared_type);\n \n-      if (TREE_CODE (declared_type) != UNION_TYPE && !in_system_header)\n+      if (TREE_CODE (declared_type) != UNION_TYPE\n+\t  && !in_system_header_at (input_location))\n \tpedwarn (input_location, OPT_Wpedantic, \"ISO C++ prohibits anonymous structs\");\n     }\n \n@@ -5846,7 +5848,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n \n   /* We try to defer namespace-scope static constants so that they are\n      not emitted into the object file unnecessarily.  */\n-  filename = input_filename;\n+  filename = LOCATION_FILE (input_location);\n   if (!DECL_VIRTUAL_P (decl)\n       && TREE_READONLY (decl)\n       && DECL_INITIAL (decl) != NULL_TREE\n@@ -8309,7 +8311,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t       indicated by the state of complain), so that\n \t       another substitution can be found.  */\n \t    return error_mark_node;\n-\t  else if (in_system_header)\n+\t  else if (in_system_header_at (input_location))\n \t    /* Allow them in system headers because glibc uses them.  */;\n \t  else if (name)\n \t    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids zero-size array %qD\", name);\n@@ -9096,7 +9098,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (type_was_error_mark_node)\n \t/* We've already issued an error, don't complain more.  */;\n-      else if (in_system_header || flag_ms_extensions)\n+      else if (in_system_header_at (input_location) || flag_ms_extensions)\n \t/* Allow it, sigh.  */;\n       else if (! is_main)\n \tpermerror (input_location, \"ISO C++ forbids declaration of %qs with no type\", name);\n@@ -9119,7 +9121,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  error (\"%<__int128%> is not supported by this target\");\n \t  explicit_int128 = false;\n \t}\n-      else if (pedantic && ! in_system_header)\n+      else if (pedantic && ! in_system_header_at (input_location))\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ does not support %<__int128%> for %qs\", name);\n     }"}, {"sha": "72aa936c129c82d51fbf9dc6bbeea0010715cba6", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -924,7 +924,7 @@ dump_global_iord (cxx_pretty_printer *pp, tree t)\n   else\n     gcc_unreachable ();\n \n-  pp_printf (pp, p, input_filename);\n+  pp_printf (pp, p, LOCATION_FILE (input_location));\n }\n \n static void\n@@ -2804,7 +2804,7 @@ location_of (tree t)\n \n   if (DECL_P (t))\n     return DECL_SOURCE_LOCATION (t);\n-  return EXPR_LOC_OR_HERE (t);\n+  return EXPR_LOC_OR_LOC (t, input_location);\n }\n \n /* Now the interfaces from error et al to dump_type et al. Each takes an\n@@ -3463,7 +3463,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n void\n maybe_warn_cpp0x (cpp0x_warn_str str)\n {\n-  if ((cxx_dialect == cxx98) && !in_system_header)\n+  if ((cxx_dialect == cxx98) && !in_system_header_at (input_location))\n     /* We really want to suppress this warning in system headers,\n        because libstdc++ uses variadic templates even when we aren't\n        in C++0x mode. */"}, {"sha": "29ed2a9a9bfba0604ca2c38e3218379845d579d2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -2319,7 +2319,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t{\n \t  if (complain & tf_error)\n \t    {\n-\t      error_at (EXPR_LOC_OR_HERE (inner_nelts),\n+\t      error_at (EXPR_LOC_OR_LOC (inner_nelts, input_location),\n \t\t\t\"array size in operator new must be constant\");\n \t      cxx_constant_value(inner_nelts);\n \t    }\n@@ -2347,7 +2347,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       && !TREE_CONSTANT (maybe_constant_value (outer_nelts)))\n     {\n       if (complain & tf_warning_or_error)\n-\tpedwarn(EXPR_LOC_OR_HERE (outer_nelts), OPT_Wvla,\n+\tpedwarn(EXPR_LOC_OR_LOC (outer_nelts, input_location), OPT_Wvla,\n \t\t\"ISO C++ does not support variable-length array types\");\n       else\n \treturn error_mark_node;"}, {"sha": "2d517a4c7febe110c998d36c319c0a6c30a8857e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -352,18 +352,18 @@ handle_pragma_interface (cpp_reader* /*dfile*/)\n   if (fname == error_mark_node)\n     return;\n   else if (fname == 0)\n-    filename = lbasename (input_filename);\n+    filename = lbasename (LOCATION_FILE (input_location));\n   else\n     filename = TREE_STRING_POINTER (fname);\n \n-  finfo = get_fileinfo (input_filename);\n+  finfo = get_fileinfo (LOCATION_FILE (input_location));\n \n   if (impl_file_chain == 0)\n     {\n       /* If this is zero at this point, then we are\n \t auto-implementing.  */\n       if (main_input_filename == 0)\n-\tmain_input_filename = input_filename;\n+\tmain_input_filename = LOCATION_FILE (input_location);\n     }\n \n   finfo->interface_only = interface_strcmp (filename);\n@@ -397,7 +397,7 @@ handle_pragma_implementation (cpp_reader* /*dfile*/)\n       if (main_input_filename)\n \tfilename = main_input_filename;\n       else\n-\tfilename = input_filename;\n+\tfilename = LOCATION_FILE (input_location);\n       filename = lbasename (filename);\n     }\n   else\n@@ -683,7 +683,8 @@ cxx_make_type (enum tree_code code)\n   /* Set up some flags that give proper default behavior.  */\n   if (RECORD_OR_UNION_CODE_P (code))\n     {\n-      struct c_fileinfo *finfo = get_fileinfo (input_filename);\n+      struct c_fileinfo *finfo = \\\n+\tget_fileinfo (LOCATION_FILE (input_location));\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, finfo->interface_unknown);\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;\n     }\n@@ -711,5 +712,5 @@ in_main_input_context (void)\n     return filename_cmp (main_input_filename,\n \t\t\t LOCATION_FILE (tl->locus)) == 0;\n   else\n-    return filename_cmp (main_input_filename, input_filename) == 0;\n+    return filename_cmp (main_input_filename, LOCATION_FILE (input_location)) == 0;\n }"}, {"sha": "f527638e71382b064ee54f95d228de5d8b0ef113", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1504,7 +1504,8 @@ push_binding_level (cp_binding_level *scope)\n     {\n       scope->binding_depth = binding_depth;\n       indent (binding_depth);\n-      cp_binding_level_debug (scope, input_line, \"push\");\n+      cp_binding_level_debug (scope, LOCATION_LINE (input_location),\n+\t\t\t      \"push\");\n       binding_depth++;\n     }\n }\n@@ -1590,7 +1591,8 @@ leave_scope (void)\n   if (ENABLE_SCOPE_CHECKING)\n     {\n       indent (--binding_depth);\n-      cp_binding_level_debug (scope, input_line, \"leave\");\n+      cp_binding_level_debug (scope, LOCATION_LINE (input_location),\n+\t\t\t      \"leave\");\n     }\n \n   /* Move one nesting level up.  */\n@@ -1639,7 +1641,7 @@ resume_scope (cp_binding_level* b)\n     {\n       b->binding_depth = binding_depth;\n       indent (binding_depth);\n-      cp_binding_level_debug (b, input_line, \"resume\");\n+      cp_binding_level_debug (b, LOCATION_LINE (input_location), \"resume\");\n       binding_depth++;\n     }\n }"}, {"sha": "141974745b15c7b3111986adc86532a3381696bb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -5088,7 +5088,8 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    {\n \t      /* 17.6.3.3.5  */\n \t      const char *name = UDLIT_OP_SUFFIX (id);\n-\t      if (name[0] != '_' && !in_system_header && declarator_p)\n+\t      if (name[0] != '_' && !in_system_header_at (input_location)\n+\t\t  && declarator_p)\n \t\twarning (0, \"literal operator suffixes not preceded by %<_%>\"\n \t\t\t    \" are reserved for future standardization\");\n \t    }\n@@ -7686,7 +7687,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \n \t  /* Warn about old-style casts, if so requested.  */\n \t  if (warn_old_style_cast\n-\t      && !in_system_header\n+\t      && !in_system_header_at (input_location)\n \t      && !VOID_TYPE_P (type)\n \t      && current_lang_name != lang_name_c)\n \t    warning (OPT_Wold_style_cast, \"use of old-style cast\");\n@@ -10765,7 +10766,7 @@ cp_parser_declaration_seq_opt (cp_parser* parser)\n \t  /* A declaration consisting of a single semicolon is\n \t     invalid.  Allow it unless we're being pedantic.  */\n \t  cp_lexer_consume_token (parser->lexer);\n-\t  if (!in_system_header)\n+\t  if (!in_system_header_at (input_location))\n \t    pedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n \t  continue;\n \t}\n@@ -15527,7 +15528,7 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n       /* If the next token is a `}', there is a trailing comma.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))\n \t{\n-\t  if (cxx_dialect < cxx11 && !in_system_header)\n+\t  if (cxx_dialect < cxx11 && !in_system_header_at (input_location))\n \t    pedwarn (input_location, OPT_Wpedantic,\n                      \"comma at end of enumerator list\");\n \t  break;\n@@ -18056,7 +18057,8 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n     /* There are no parameters.  */\n     {\n #ifndef NO_IMPLICIT_EXTERN_C\n-      if (in_system_header && current_class_type == NULL\n+      if (in_system_header_at (input_location)\n+\t  && current_class_type == NULL\n \t  && current_lang_name == lang_name_c)\n \treturn NULL_TREE;\n       else\n@@ -20793,7 +20795,7 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n \n #if 0\n   /* Enable this once a lot of code has transitioned to noexcept?  */\n-  if (cxx_dialect >= cxx11 && !in_system_header)\n+  if (cxx_dialect >= cxx11 && !in_system_header_at (input_location))\n     warning (OPT_Wdeprecated, \"dynamic exception specifications are \"\n \t     \"deprecated in C++0x; use %<noexcept%> instead\");\n #endif"}, {"sha": "96343edecdac94d81fc48b304125338b0b7286d8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -5437,7 +5437,7 @@ unify_arg_conversion (bool explain_p, tree to_type,\n \t\t      tree from_type, tree arg)\n {\n   if (explain_p)\n-    inform (EXPR_LOC_OR_HERE (arg),\n+    inform (EXPR_LOC_OR_LOC (arg, input_location),\n \t    \"  cannot convert %qE (type %qT) to type %qT\",\n \t    arg, from_type, to_type);\n   return 1;\n@@ -5677,7 +5677,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\treturn NULL_TREE;\n \t      expr = cxx_constant_value (expr);\n \t      if (errorcount > errs || warningcount + werrorcount > warns)\n-\t\tinform (EXPR_LOC_OR_HERE (expr),\n+\t\tinform (EXPR_LOC_OR_LOC (expr, input_location),\n \t\t\t\"in template argument for type %qT \", type);\n \t      if (expr == error_mark_node)\n \t\treturn NULL_TREE;\n@@ -8093,7 +8093,7 @@ push_tinst_level (tree d)\n   new_level->decl = d;\n   new_level->locus = input_location;\n   new_level->errors = errorcount+sorrycount;\n-  new_level->in_system_header_p = in_system_header;\n+  new_level->in_system_header_p = in_system_header_at (input_location);\n   new_level->next = current_tinst_level;\n   current_tinst_level = new_level;\n \n@@ -14505,7 +14505,7 @@ tsubst_copy_and_build (tree t,\n \t\t      fn = TREE_OPERAND (fn, 1);\n \t\t    if (is_overloaded_fn (fn))\n \t\t      fn = get_first_fn (fn);\n-\t\t    if (permerror (EXPR_LOC_OR_HERE (t),\n+\t\t    if (permerror (EXPR_LOC_OR_LOC (t, input_location),\n \t\t\t\t   \"%qD was not declared in this scope, \"\n \t\t\t\t   \"and no declarations were found by \"\n \t\t\t\t   \"argument-dependent lookup at the point \"\n@@ -14515,15 +14515,17 @@ tsubst_copy_and_build (tree t,\n \t\t\t  /* Can't say anything more.  */;\n \t\t\telse if (DECL_CLASS_SCOPE_P (fn))\n \t\t\t  {\n-\t\t\t    inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t    location_t loc = EXPR_LOC_OR_LOC (t,\n+\t\t\t\t\t\t\t      input_location);\n+\t\t\t    inform (loc,\n \t\t\t\t    \"declarations in dependent base %qT are \"\n \t\t\t\t    \"not found by unqualified lookup\",\n \t\t\t\t    DECL_CLASS_CONTEXT (fn));\n \t\t\t    if (current_class_ptr)\n-\t\t\t      inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t      inform (loc,\n \t\t\t\t      \"use %<this->%D%> instead\", function);\n \t\t\t    else\n-\t\t\t      inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t      inform (loc,\n \t\t\t\t      \"use %<%T::%D%> instead\",\n \t\t\t\t      current_class_name, function);\n \t\t\t  }\n@@ -18807,7 +18809,7 @@ do_decl_instantiation (tree decl, tree storage)\n     ;\n   else if (storage == ridpointers[(int) RID_EXTERN])\n     {\n-      if (!in_system_header && (cxx_dialect == cxx98))\n+      if (!in_system_header_at (input_location) && (cxx_dialect == cxx98))\n \tpedwarn (input_location, OPT_Wpedantic, \n \t\t \"ISO C++ 1998 forbids the use of %<extern%> on explicit \"\n \t\t \"instantiations\");\n@@ -18900,7 +18902,7 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \n   if (storage != NULL_TREE)\n     {\n-      if (!in_system_header)\n+      if (!in_system_header_at (input_location))\n \t{\n \t  if (storage == ridpointers[(int) RID_EXTERN])\n \t    {"}, {"sha": "83f23a6480c1ba68f4ac24b72a69d7434ebecd9d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -2146,7 +2146,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t      && type_dependent_expression_p (current_class_ref)))\n \t{\n \t  result = build_nt_call_vec (fn, *args);\n-\t  SET_EXPR_LOCATION (result, EXPR_LOC_OR_HERE (fn));\n+\t  SET_EXPR_LOCATION (result, EXPR_LOC_OR_LOC (fn, input_location));\n \t  KOENIG_LOOKUP_P (result) = koenig_p;\n \t  if (cfun)\n \t    {\n@@ -2721,7 +2721,8 @@ begin_class_definition (tree t)\n      before.  */\n   if (! TYPE_ANONYMOUS_P (t))\n     {\n-      struct c_fileinfo *finfo = get_fileinfo (input_filename);\n+      struct c_fileinfo *finfo = \\\n+\tget_fileinfo (LOCATION_FILE (input_location));\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X\n \t(t, finfo->interface_unknown);\n@@ -8266,7 +8267,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n \t\t\t  bool allow_non_constant, bool addr,\n \t\t\t  bool *non_constant_p, bool *overflow_p)\n {\n-  location_t loc = EXPR_LOC_OR_HERE (t);\n+  location_t loc = EXPR_LOC_OR_LOC (t, input_location);\n   tree fun = get_function_named_in_call (t);\n   tree result;\n   constexpr_call new_call = { NULL, NULL, NULL, 0 };\n@@ -9647,7 +9648,7 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \t    && !integer_zerop (op))\n \t  {\n \t    if (!allow_non_constant)\n-\t      error_at (EXPR_LOC_OR_HERE (t),\n+\t      error_at (EXPR_LOC_OR_LOC (t, input_location),\n \t\t\t\"reinterpret_cast from integer to pointer\");\n \t    *non_constant_p = true;\n \t    return t;\n@@ -9693,7 +9694,7 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n     case EXPR_STMT:\n     case OFFSET_REF:\n       if (!allow_non_constant)\n-        error_at (EXPR_LOC_OR_HERE (t),\n+        error_at (EXPR_LOC_OR_LOC (t, input_location),\n \t\t  \"expression %qE is not a constant-expression\", t);\n       *non_constant_p = true;\n       break;\n@@ -9966,7 +9967,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \t\t  {\n \t\t    if (flags & tf_error)\n \t\t      {\n-\t\t\terror_at (EXPR_LOC_OR_HERE (t),\n+\t\t\terror_at (EXPR_LOC_OR_LOC (t, input_location),\n \t\t\t\t  \"call to non-constexpr function %qD\", fun);\n \t\t\texplain_invalid_constexpr_fn (fun);\n \t\t      }\n@@ -10058,7 +10059,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \t    && !integer_zerop (from))\n \t  {\n \t    if (flags & tf_error)\n-\t      error_at (EXPR_LOC_OR_HERE (t),\n+\t      error_at (EXPR_LOC_OR_LOC (t, input_location),\n \t\t\t\"reinterpret_cast from integer to pointer\");\n \t    return false;\n \t  }"}, {"sha": "493453bef8ef7dc7f31331c8a2a0c99b1f6a0e2a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1883,7 +1883,7 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n {\n   tree type;\n   enum tree_code code;\n-  location_t loc = EXPR_LOC_OR_HERE (exp);\n+  location_t loc = EXPR_LOC_OR_LOC (exp, input_location);\n \n   type = TREE_TYPE (exp);\n   if (type == error_mark_node)\n@@ -2133,6 +2133,8 @@ static tree\n rationalize_conditional_expr (enum tree_code code, tree t,\n                               tsubst_flags_t complain)\n {\n+  location_t loc = EXPR_LOC_OR_LOC (t, input_location);\n+\n   /* For MIN_EXPR or MAX_EXPR, fold-const.c has arranged things so that\n      the first operand is always the one to be used if both operands\n      are equal, so we know what conditional expression this used to be.  */\n@@ -2145,8 +2147,8 @@ rationalize_conditional_expr (enum tree_code code, tree t,\n       gcc_assert (!TREE_SIDE_EFFECTS (op0)\n \t\t  && !TREE_SIDE_EFFECTS (op1));\n       return\n-\tbuild_conditional_expr (EXPR_LOC_OR_HERE (t),\n-\t\t\t\tbuild_x_binary_op (EXPR_LOC_OR_HERE (t),\n+\tbuild_conditional_expr (loc,\n+\t\t\t\tbuild_x_binary_op (loc,\n \t\t\t\t\t\t   (TREE_CODE (t) == MIN_EXPR\n \t\t\t\t\t\t    ? LE_EXPR : GE_EXPR),\n \t\t\t\t\t\t   op0, TREE_CODE (op0),\n@@ -2159,7 +2161,7 @@ rationalize_conditional_expr (enum tree_code code, tree t,\n     }\n \n   return\n-    build_conditional_expr (EXPR_LOC_OR_HERE (t), TREE_OPERAND (t, 0),\n+    build_conditional_expr (loc, TREE_OPERAND (t, 0),\n \t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 1), 0,\n                                                complain),\n \t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 2), 0,\n@@ -6042,8 +6044,9 @@ build_x_compound_expr_from_list (tree list, expr_list_kind exp,\n       && !CONSTRUCTOR_IS_DIRECT_INIT (expr))\n     {\n       if (complain & tf_error)\n-\tpedwarn (EXPR_LOC_OR_HERE (expr), 0, \"list-initializer for \"\n-\t\t \"non-class type must not be parenthesized\");\n+\tpedwarn (EXPR_LOC_OR_LOC (expr, input_location), 0,\n+\t\t \"list-initializer for non-class type must not \"\n+\t\t \"be parenthesized\");\n       else\n \treturn error_mark_node;\n     }\n@@ -8101,7 +8104,7 @@ convert_for_assignment (tree type, tree rhs,\n       && TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE\n       && (complain & tf_warning))\n     {\n-      location_t loc = EXPR_LOC_OR_HERE (rhs);\n+      location_t loc = EXPR_LOC_OR_LOC (rhs, input_location);\n \n       warning_at (loc, OPT_Wparentheses,\n \t\t  \"suggest parentheses around assignment used as truth value\");"}, {"sha": "9fa201dca2c3b57e9d37ab79aa6254bcf3f4713f", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -896,11 +896,11 @@ check_narrowing (tree type, tree init)\n   if (!ok)\n     {\n       if (cxx_dialect >= cxx11)\n-\tpedwarn (EXPR_LOC_OR_HERE (init), OPT_Wnarrowing,\n+\tpedwarn (EXPR_LOC_OR_LOC (init, input_location), OPT_Wnarrowing,\n \t\t \"narrowing conversion of %qE from %qT to %qT inside { }\",\n \t\t init, ftype, type);\n       else\n-\twarning_at (EXPR_LOC_OR_HERE (init), OPT_Wnarrowing,\n+\twarning_at (EXPR_LOC_OR_LOC (init, input_location), OPT_Wnarrowing,\n \t\t    \"narrowing conversion of %qE from %qT to %qT inside { } \"\n \t\t    \"is ill-formed in C++11\", init, ftype, type);\n     }"}, {"sha": "5625c97bd4b3526e218197901123536f4d841574", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,8 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* trans.c (trans_runtime_error_vararg): Remove use of input_line\n+\tmacro.\n+\n 2013-11-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* fortran/trans-intrinsic.c: Include tree-nested.h."}, {"sha": "7805b57bc9bf500442a849fc008dc26fbbd44240", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -424,7 +424,7 @@ trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n     }\n   else\n     asprintf (&message, \"In file '%s', around line %d\",\n-\t      gfc_source_file, input_line + 1);\n+\t      gfc_source_file, LOCATION_LINE (input_location) + 1);\n \n   arg = gfc_build_addr_expr (pchar_type_node,\n \t\t\t     gfc_build_localized_cstring_const (message));"}, {"sha": "fa09d8c58f89be0235d8118fdbcc41256cfd8d4e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -515,7 +515,7 @@ internal_get_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n \n   mod = build2 (INIT_EXPR, TREE_TYPE (t), t, unshare_expr (val));\n \n-  SET_EXPR_LOCATION (mod, EXPR_LOC_OR_HERE (val));\n+  SET_EXPR_LOCATION (mod, EXPR_LOC_OR_LOC (val, input_location));\n \n   /* gimplify_modify_expr might want to reduce this further.  */\n   gimplify_and_add (mod, pre_p);\n@@ -2514,7 +2514,7 @@ shortcut_cond_expr (tree expr)\n       while (TREE_CODE (pred) == TRUTH_ANDIF_EXPR)\n \t{\n \t  /* Keep the original source location on the first 'if'.  */\n-\t  location_t locus = EXPR_LOC_OR_HERE (expr);\n+\t  location_t locus = EXPR_LOC_OR_LOC (expr, input_location);\n \t  TREE_OPERAND (expr, 0) = TREE_OPERAND (pred, 1);\n \t  /* Set the source location of the && on the second 'if'.  */\n \t  if (EXPR_HAS_LOCATION (pred))\n@@ -2536,7 +2536,7 @@ shortcut_cond_expr (tree expr)\n       while (TREE_CODE (pred) == TRUTH_ORIF_EXPR)\n \t{\n \t  /* Keep the original source location on the first 'if'.  */\n-\t  location_t locus = EXPR_LOC_OR_HERE (expr);\n+\t  location_t locus = EXPR_LOC_OR_LOC (expr, input_location);\n \t  TREE_OPERAND (expr, 0) = TREE_OPERAND (pred, 1);\n \t  /* Set the source location of the || on the second 'if'.  */\n \t  if (EXPR_HAS_LOCATION (pred))\n@@ -2600,7 +2600,7 @@ shortcut_cond_expr (tree expr)\n   /* If there was nothing else in our arms, just forward the label(s).  */\n   if (!then_se && !else_se)\n     return shortcut_cond_r (pred, true_label_p, false_label_p,\n-\t\t\t    EXPR_LOC_OR_HERE (expr));\n+\t\t\t    EXPR_LOC_OR_LOC (expr, input_location));\n \n   /* If our last subexpression already has a terminal label, reuse it.  */\n   if (else_se)\n@@ -2632,7 +2632,7 @@ shortcut_cond_expr (tree expr)\n   jump_over_else = block_may_fallthru (then_);\n \n   pred = shortcut_cond_r (pred, true_label_p, false_label_p,\n-\t\t\t  EXPR_LOC_OR_HERE (expr));\n+\t\t\t  EXPR_LOC_OR_LOC (expr, input_location));\n \n   expr = NULL;\n   append_to_statement_list (pred, &expr);"}, {"sha": "55bd4260b0a90f4ef38f7f87e0ed546dbcbed48a", "filename": "gcc/input.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -57,11 +57,8 @@ extern location_t input_location;\n   ((tree) ((IS_ADHOC_LOC (LOC)) ? get_data_from_adhoc_loc (line_table, (LOC)) \\\n    : NULL))\n \n-#define input_line LOCATION_LINE (input_location)\n-#define input_filename LOCATION_FILE (input_location)\n #define in_system_header_at(LOC) \\\n   ((linemap_location_in_system_header_p (line_table, LOC)))\n-#define in_system_header (in_system_header_at (input_location))\n \n void dump_line_table_statistics (void);\n "}, {"sha": "684392679f8733d6c60140dcac689ffb3e7be03f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1,3 +1,13 @@\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* class.c (maybe_layout_super_class): Update comment.\n+\t* decl.c (java_add_stmt): Remove use of input_filename macro.\n+\t* jcf-parse.c (set_source_filename): Remove use of\n+\tinput_filename macro.\n+\t(parse_class_file): Remove use of input_line and input_filename\n+\tmacros.\n+\t(java_parse_file): Remove use of input_filename macro.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* class.c, expr.c: Replace tree_low_cst (..., 0) with tree_to_shwi"}, {"sha": "532c9c1d94f5197adb084efee781ee20f5d84103", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -2415,7 +2415,7 @@ maybe_layout_super_class (tree super_class, tree this_class ATTRIBUTE_UNUSED)\n }\n \n /* safe_layout_class just makes sure that we can load a class without\n-   disrupting the current_class, input_file, input_line, etc, information\n+   disrupting the current_class, input_location, etc, information\n    about the class processed currently.  */\n \n void"}, {"sha": "39b76a5cea08f7ee8725d05e3dd1bc51db86c00e", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -2018,7 +2018,7 @@ java_add_stmt (tree new_stmt)\n   tree stmts = current_binding_level->stmts;\n   tree_stmt_iterator i;\n \n-  if (input_filename)\n+  if (LOCATION_FILE (input_location))\n     walk_tree (&new_stmt, set_input_location, NULL, NULL);\n \n   if (stmts == NULL)"}, {"sha": "b6f099a921d5bcc275c5d3c317385ba995bbda4c", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -313,13 +313,14 @@ set_source_filename (JCF *jcf, int index)\n {\n   tree sfname_id = get_name_constant (jcf, index);\n   const char *sfname = IDENTIFIER_POINTER (sfname_id);\n-  const char *old_filename = input_filename;\n+  const char *old_filename = LOCATION_FILE (input_location);\n   int new_len = IDENTIFIER_LENGTH (sfname_id);\n   if (old_filename != NULL)\n     {\n       int old_len = strlen (old_filename);\n-      /* Use the current input_filename (derived from the class name)\n-\t if it has a directory prefix, but otherwise matches sfname. */\n+      /* Use the filename from current input_location (derived from the\n+\t class name) if it has a directory prefix, but otherwise matches\n+\t sfname.  */\n       if (old_len > new_len\n \t  && filename_cmp (sfname, old_filename + old_len - new_len) == 0\n \t  && (old_filename[old_len - new_len - 1] == '/'\n@@ -1560,7 +1561,8 @@ parse_class_file (void)\n     linemap_add (line_table, LC_ENTER, 0, loc.file, loc.line);\n   }\n   file_start_location = input_location;\n-  (*debug_hooks->start_source_file) (input_line, input_filename);\n+  (*debug_hooks->start_source_file) (LOCATION_LINE (input_location),\n+\t\t\t\t     LOCATION_FILE (input_location));\n \n   java_mark_class_local (current_class);\n \n@@ -1618,7 +1620,8 @@ parse_class_file (void)\n \t  for (ptr += 2; --i >= 0; ptr += 4)\n \t    {\n \t      int line = GET_u2 (ptr);\n-\t      /* Set initial input_line to smallest linenumber.\n+\t      /* Set initial line of input_location to smallest\n+\t       * linenumber.\n \t       * Needs to be set before init_function_start. */\n \t      if (min_line == 0 || line < min_line)\n \t\tmin_line = line;\n@@ -1748,7 +1751,7 @@ java_parse_file (void)\n       int avail = 2000;\n       finput = fopen (main_input_filename, \"r\");\n       if (finput == NULL)\n-\tfatal_error (\"can%'t open %s: %m\", input_filename);\n+\tfatal_error (\"can%'t open %s: %m\", LOCATION_FILE (input_location));\n       list = XNEWVEC (char, avail);\n       next = list;\n       for (;;)\n@@ -1767,7 +1770,8 @@ java_parse_file (void)\n \t  if (count == 0)\n \t    {\n \t      if (! feof (finput))\n-\t\tfatal_error (\"error closing %s: %m\", input_filename);\n+\t\tfatal_error (\"error closing %s: %m\",\n+\t\t\t     LOCATION_FILE (input_location));\n \t      *next = '\\0';\n \t      break;\n \t    }"}, {"sha": "2942365e3cf3b2bad5fac6acfb1d7d2a44d7e4d6", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -39,7 +39,8 @@ diagnostic_report_current_function (diagnostic_context *context,\n \t\t\t\t    diagnostic_info *diagnostic)\n {\n   diagnostic_report_current_module (context, diagnostic->location);\n-  lang_hooks.print_error_function (context, input_filename, diagnostic);\n+  lang_hooks.print_error_function (context, LOCATION_FILE (input_location),\n+\t\t\t\t   diagnostic);\n }\n \n static void"}, {"sha": "153243bff0b97a561df08b5042ea719c3eacde40", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -9101,7 +9101,7 @@ get_file_function_name (const char *type)\n     {\n       const char *file = main_input_filename;\n       if (! file)\n-\tfile = input_filename;\n+\tfile = LOCATION_FILE (input_location);\n       /* Just use the file's basename, because the full pathname\n \t might be quite long.  */\n       p = q = ASTRDUP (lbasename (file));\n@@ -9118,7 +9118,7 @@ get_file_function_name (const char *type)\n       if (! name)\n \tname = \"\";\n       if (! file)\n-\tfile = input_filename;\n+\tfile = LOCATION_FILE (input_location);\n \n       len = strlen (file);\n       q = (char *) alloca (9 + 17 + len + 1);"}, {"sha": "68f98261b5636a8f42df6ebac6fe524d14bce1ed", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8400e75ec451d9ecaf58ec1c07a29824a31a2e0a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8400e75ec451d9ecaf58ec1c07a29824a31a2e0a", "patch": "@@ -1044,8 +1044,6 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   != UNKNOWN_LOCATION)\n /* The location to be used in a diagnostic about this expression.  Do not\n    use this macro if the location will be assigned to other expressions.  */\n-#define EXPR_LOC_OR_HERE(NODE) (EXPR_HAS_LOCATION (NODE) \\\n-\t\t\t\t? (NODE)->exp.locus : input_location)\n #define EXPR_LOC_OR_LOC(NODE, LOCUS) (EXPR_HAS_LOCATION (NODE) \\\n \t\t\t\t      ? (NODE)->exp.locus : (LOCUS))\n #define EXPR_FILENAME(NODE) LOCATION_FILE (EXPR_CHECK ((NODE))->exp.locus)"}]}