{"sha": "c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmNzcyODk0YjZiM2NkOGVkNWM1ZGQwOWQwYzc5MTdmNTFjZjcwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-13T07:41:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-13T07:41:20Z"}, "message": "simplify-rtx: Punt on simplify_{,gen_}subreg to IBM double double if bits are lost [PR99648]\n\nSimilarly to PR95450 done on GIMPLE, this patch punts if we try to\nsimplify_{gen_,}subreg from some constant into the IBM double double\nIFmode (or sometimes TFmode) if the double double format wouldn't preserve\nthe bits.  Not all values are valid in IBM double double, e.g. the format\nrequires that the upper double is the whole value rounded to double, and\nif in some cases such as in the pr71522.c testcase with -m32 -Os -mcpu=power7\nsome non-floating data is copied through long double variable, we can\nsimplify a subreg into something that has different value.\n\nFixed by punting if the planned simplify_immed_subreg result doesn't\nencode to bitwise identical values compared to what we were decoding.\n\nAs for the simplify_gen_subreg change, I think it would be desirable\nto just avoid creating SUBREGs of constants on all targets and for all\nconstants, if simplify_immed_subreg simplified, fine, otherwise punt,\nbut as we are late in GCC11 development, the patch instead guards this\nbehavior on MODE_COMPOSITE_P (outermode) - i.e. only conversions to\npowerpc{,64,64le} double double long double - and only for the cases where\nsimplify_immed_subreg was called.\n\n2021-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99648\n\t* simplify-rtx.c (simplify_immed_subreg): For MODE_COMPOSITE_P\n\toutermode, return NULL if the result doesn't encode back to the\n\toriginal byte sequence.\n\t(simplify_gen_subreg): Don't create SUBREGs from constants to\n\tMODE_COMPOSITE_P outermode.", "tree": {"sha": "f3c9b87a6f383fe48a8a5d70620442faab556002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c9b87a6f383fe48a8a5d70620442faab556002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "d13c390a20ccf1dfafcbaf57839554c7ef215f22", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c0f772894b6b3cd8ed5c5dd09d0c7917f51cf70f", "patch": "@@ -7035,12 +7035,19 @@ simplify_immed_subreg (fixed_size_mode outermode, rtx x,\n       while (buffer.length () < buffer_bytes)\n \tbuffer.quick_push (filler);\n     }\n-  else\n+  else if (!native_encode_rtx (innermode, x, buffer, first_byte, inner_bytes))\n+    return NULL_RTX;\n+  rtx ret = native_decode_rtx (outermode, buffer, 0);\n+  if (ret && MODE_COMPOSITE_P (outermode))\n     {\n-      if (!native_encode_rtx (innermode, x, buffer, first_byte, inner_bytes))\n+      auto_vec<target_unit, 128> buffer2 (buffer_bytes);\n+      if (!native_encode_rtx (outermode, ret, buffer2, 0, buffer_bytes))\n \treturn NULL_RTX;\n-      }\n-  return native_decode_rtx (outermode, buffer, 0);\n+      for (unsigned int i = 0; i < buffer_bytes; ++i)\n+\tif (buffer[i] != buffer2[i])\n+\t  return NULL_RTX;\n+    }\n+  return ret;\n }\n \n /* Simplify SUBREG:OUTERMODE(OP:INNERMODE, BYTE)\n@@ -7336,6 +7343,13 @@ simplify_context::simplify_gen_subreg (machine_mode outermode, rtx op,\n       || GET_MODE (op) == VOIDmode)\n     return NULL_RTX;\n \n+  if (MODE_COMPOSITE_P (outermode)\n+      && (CONST_SCALAR_INT_P (op)\n+\t  || CONST_DOUBLE_AS_FLOAT_P (op)\n+\t  || CONST_FIXED_P (op)\n+\t  || GET_CODE (op) == CONST_VECTOR))\n+    return NULL_RTX;\n+\n   if (validate_subreg (outermode, innermode, op, byte))\n     return gen_rtx_SUBREG (outermode, op, byte);\n "}]}