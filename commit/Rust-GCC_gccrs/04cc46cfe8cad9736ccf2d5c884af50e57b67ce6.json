{"sha": "04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "node_id": "C_kwDOANBUbNoAKDA0Y2M0NmNmZThjYWQ5NzM2Y2NmMmQ1Yzg4NGFmNTBlNTdiNjdjZTY", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-22T00:21:10Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-06-28T23:22:56Z"}, "message": "backend: handle deprecated attribute\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>", "tree": {"sha": "5af977f854130cdbb443e4819841d3aa634fed1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af977f854130cdbb443e4819841d3aa634fed1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a06a817585faf7fb44fbc1c71173a00f9a407f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a06a817585faf7fb44fbc1c71173a00f9a407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a06a817585faf7fb44fbc1c71173a00f9a407f"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "81791135bc4dbc140268dbf77d3dfad7158e2ad0", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -20,10 +20,12 @@ along with GCC; see the file COPYING3.  If not see\n // FIXME: This does not work on Windows\n #include <string>\n #include <unistd.h>\n+#include <memory>\n \n #include \"rust-ast-full.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-ast-visitor.h\"\n+#include \"rust-macro.h\"\n #include \"rust-session-manager.h\"\n #include \"rust-lex.h\"\n #include \"rust-parse.h\"\n@@ -3862,7 +3864,12 @@ MetaItemInner::~MetaItemInner () = default;\n std::unique_ptr<MetaNameValueStr>\n MetaItemInner::to_meta_name_value_str () const\n {\n-  // TODO parse foo = bar\n+  if (is_key_value_pair ())\n+    {\n+      auto converted_item = static_cast<const MetaNameValueStr *> (this);\n+      return converted_item->to_meta_name_value_str ();\n+    }\n+  // TODO actually parse foo = bar\n   return nullptr;\n }\n "}, {"sha": "51fe3c49c59137a9b9a4af3b1d751e2db197c219", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -645,6 +645,8 @@ class MetaItemInner\n   virtual Attribute to_attribute () const { return Attribute::create_empty (); }\n \n   virtual bool check_cfg_predicate (const Session &session) const = 0;\n+\n+  virtual bool is_key_value_pair () const { return false; }\n };\n \n // Container used to store MetaItems as AttrInput (bridge-ish kinda thing)"}, {"sha": "ce515db0aad20c0b4785429d212860dd236369c3", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast.h\"\n #include \"rust-location.h\"\n+#include <string>\n \n namespace Rust {\n namespace AST {\n@@ -816,6 +817,13 @@ class MetaNameValueStr : public MetaItem\n \n   Attribute to_attribute () const override;\n \n+  inline std::pair<Identifier, std::string> get_name_value_pair () const\n+  {\n+    return std::pair<Identifier, std::string> (ident, str);\n+  }\n+\n+  bool is_key_value_pair () const override { return true; }\n+\n protected:\n   // Use covariance to implement clone function as returning this type\n   MetaNameValueStr *clone_meta_item_inner_impl () const override"}, {"sha": "335a6d411a507b8aaa2e26f066b8891d31a4602b", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -22,7 +22,8 @@\n #include \"rust-compile-fnparam.h\"\n #include \"rust-compile-var-decl.h\"\n \n-#include \"rust-expr.h\" // for AST::AttrInputLiteral\n+#include \"rust-expr.h\"\t// for AST::AttrInputLiteral\n+#include \"rust-macro.h\" // for AST::MetaNameValueStr\n \n #include \"fold-const.h\"\n #include \"stringpool.h\"\n@@ -66,6 +67,9 @@ HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n       bool is_link_section\n \t= attr.get_path ().as_string ().compare (\"link_section\") == 0;\n       bool no_mangle = attr.get_path ().as_string ().compare (\"no_mangle\") == 0;\n+      bool is_deprecated\n+\t= attr.get_path ().as_string ().compare (\"deprecated\") == 0;\n+\n       if (is_inline)\n \t{\n \t  handle_inline_attribute_on_fndecl (fndecl, attr);\n@@ -82,6 +86,10 @@ HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n \t{\n \t  handle_link_section_attribute_on_fndecl (fndecl, attr);\n \t}\n+      else if (is_deprecated)\n+\t{\n+\t  handle_deprecated_attribute_on_fndecl (fndecl, attr);\n+\t}\n       else if (no_mangle)\n \t{\n \t  handle_no_mangle_attribute_on_fndecl (fndecl, attr);\n@@ -147,6 +155,64 @@ HIRCompileBase::handle_no_mangle_attribute_on_fndecl (\n \t\t\t\t\tDECL_ATTRIBUTES (fndecl));\n }\n \n+void\n+HIRCompileBase::handle_deprecated_attribute_on_fndecl (\n+  tree fndecl, const AST::Attribute &attr)\n+{\n+  tree value = NULL_TREE;\n+  TREE_DEPRECATED (fndecl) = 1;\n+\n+  // simple #[deprecated]\n+  if (!attr.has_attr_input ())\n+    return;\n+\n+  const AST::AttrInput &input = attr.get_attr_input ();\n+  auto input_type = input.get_attr_input_type ();\n+\n+  if (input_type == AST::AttrInput::AttrInputType::LITERAL)\n+    {\n+      // handle #[deprecated = \"message\"]\n+      auto &literal\n+\t= static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n+      const auto &msg_str = literal.get_literal ().as_string ();\n+      value = build_string (msg_str.size (), msg_str.c_str ());\n+    }\n+  else if (input_type == AST::AttrInput::AttrInputType::TOKEN_TREE)\n+    {\n+      // handle #[deprecated(since = \"...\", note = \"...\")]\n+      const auto &option = static_cast<const AST::DelimTokenTree &> (input);\n+      AST::AttrInputMetaItemContainer *meta_item = option.parse_to_meta_item ();\n+      for (const auto &item : meta_item->get_items ())\n+\t{\n+\t  auto converted_item = item->to_meta_name_value_str ();\n+\t  if (!converted_item)\n+\t    continue;\n+\t  auto key_value = converted_item->get_name_value_pair ();\n+\t  if (key_value.first.compare (\"since\") == 0)\n+\t    {\n+\t      // valid, but this is handled by Cargo and some third-party audit\n+\t      // tools\n+\t      continue;\n+\t    }\n+\t  else if (key_value.first.compare (\"note\") == 0)\n+\t    {\n+\t      const auto &msg_str = key_value.second;\n+\t      if (value)\n+\t\trust_error_at (attr.get_locus (), \"multiple %<note%> items\");\n+\t      value = build_string (msg_str.size (), msg_str.c_str ());\n+\t    }\n+\t  else\n+\t    {\n+\t      rust_error_at (attr.get_locus (), \"unknown meta item %qs\",\n+\t\t\t     key_value.first.c_str ());\n+\t    }\n+\t}\n+    }\n+\n+  DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"deprecated\"), value,\n+\t\t\t\t\tDECL_ATTRIBUTES (fndecl));\n+}\n+\n void\n HIRCompileBase::handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t   const AST::Attribute &attr)"}, {"sha": "f993d06cb33c52e24dbc3e12c1d54df9909dde50", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -92,6 +92,9 @@ class HIRCompileBase\n   static void\n   handle_link_section_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t   const AST::Attribute &attr);\n+  static void\n+  handle_deprecated_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t const AST::Attribute &attr);\n \n   static void handle_no_mangle_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t    const AST::Attribute &attr);"}, {"sha": "870ca21f87cbe542be915b66c28e962128127088", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc46cfe8cad9736ccf2d5c884af50e57b67ce6/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=04cc46cfe8cad9736ccf2d5c884af50e57b67ce6", "patch": "@@ -27,6 +27,7 @@ static const BuiltinAttrDefinition __definitions[] = {\n   {\"cold\", CODE_GENERATION},\n   {\"cfg\", EXPANSION},\n   {\"cfg_attr\", EXPANSION},\n+  {\"deprecated\", STATIC_ANALYSIS},\n   {\"allow\", STATIC_ANALYSIS},\n   {\"doc\", HIR_LOWERING},\n   {\"must_use\", STATIC_ANALYSIS},"}]}