{"sha": "8bd206211ddadcfb501aeed34d137ffd5baee59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkMjA2MjExZGRhZGNmYjUwMWFlZWQzNGQxMzdmZmQ1YmFlZTU5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-08-05T22:22:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-08-05T22:22:00Z"}, "message": "re PR c++/37016 (member function pointer failure with optimization)\n\n        PR c++/37016\n        * tree-ssa.c (useless_type_conversion_p_1): Call langhook\n        if TYPE_STRUCTURAL_EQUALITY_P is true for both types.\n\nFrom-SVN: r138740", "tree": {"sha": "71ca7eb04a3cd8b370ea8d9edf3dc041fb540baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71ca7eb04a3cd8b370ea8d9edf3dc041fb540baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bd206211ddadcfb501aeed34d137ffd5baee59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd206211ddadcfb501aeed34d137ffd5baee59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd206211ddadcfb501aeed34d137ffd5baee59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd206211ddadcfb501aeed34d137ffd5baee59a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a24bf0486b5a23c2772b29ee38e6a8372eaeac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a24bf0486b5a23c2772b29ee38e6a8372eaeac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a24bf0486b5a23c2772b29ee38e6a8372eaeac1"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "eb2467b18b4cdc61fc9915ed3a97ec881f3cf346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bd206211ddadcfb501aeed34d137ffd5baee59a", "patch": "@@ -1,3 +1,9 @@\n+2008-08-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37016\n+\t* tree-ssa.c (useless_type_conversion_p_1): Call langhook\n+\tif TYPE_STRUCTURAL_EQUALITY_P is true for both types.\n+\n 2008-08-05  Richard Henderson  <rth@redhat.com>\n \n \t* configure.ac (HAVE_GAS_CFI_DIRECTIVE): Check .cfi_personality."}, {"sha": "428e7530b2cbaf877bd1da8c42a5419380ac937a", "filename": "gcc/testsuite/g++.dg/opt/pmf1.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpmf1.C?ref=8bd206211ddadcfb501aeed34d137ffd5baee59a", "patch": "@@ -0,0 +1,76 @@\n+// PR c++/37016\n+// { dg-do run }\n+// { dg-options \"-O2 -Wall\" }\n+\n+/*                                                                              \n+  Basic design concept is that WorldObject implements remote method call        \n+  functionality using the \"curiously recurring template pattern\" to enable      \n+  forwarding calls from the generic base class that implements the transport    \n+  layer to the derived class.                                                   \n+\n+  The specific failure was in forwarding calls to items in a container.         \n+  This is emulated here by wrapping a single item.                              \n+\n+  In the main program there are two forms of the call.  In the last             \n+  (uncommented) form the member function pointer is for clarity                 \n+  assigned to a variable (itemfunptr) before making the call.                   \n+  With 4.3.0 and 4.3.1 this code compiles incorrectly with -O1 or greater       \n+  to produce this warning                                                       \n+\n+  reproduce.cc: In function \u2018int main()\u2019:                                       \n+  reproduce.cc:26: warning: \u2018itemfunptr.void (Container::*)(void\n+(Item::*)(int), int)::__pfn\u2019 is used uninitialized in this function             \n+  reproduce.cc:47: note: \u2018itemfunptr.void (Container::*)(void (Item::*)(int),\n+int)::__pfn\u2019 was declared here                                                  \n+\n+  and the resulting executable segvs.  It works correctly with -O0.             \n+\n+  With 4.2.3 and earlier it works correctly with optimization.                  \n+\n+  In the first (commented out) form of the call in the main program             \n+  we directly refer to desired member function.  This compiles                  \n+  and executes correctly with all tested versions.                              \n+*/\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+template <class Derived>\n+struct WorldObject {\n+    template <typename memfunT, typename arg1T, typename arg2T>\n+    void forward(memfunT memfun, arg1T arg1, arg2T arg2) {\n+        Derived* obj = static_cast<Derived*>(this);\n+        (obj->*memfun)(arg1, arg2);\n+    }\n+};\n+\n+struct Item {\n+    void fred(int a) {\n+      printf (\"a=%d\\n\", a);\n+    }\n+};\n+\n+struct Container : public WorldObject<Container> {\n+    Item item;\n+    template <typename itemfunT, typename arg1T>\n+    void itemfun(itemfunT itemfun, int a) {\n+        (item.*itemfun)(a);\n+    }\n+};\n+\n+int main() {\n+    typedef void (Item::*itemfun)(int);\n+\n+    Container t;\n+\n+    // This call compiles and executes correctly with all versions tested       \n+    //t.forward(&Container::itemfun<itemfun,int>, &Item::fred, 1);              \n+\n+    // This call compiles with a warning and segvs on execution if using        \n+    // -O1 or greater with 4.3.*.  4.2.* is correct.                            \n+    void (Container::*itemfunptr)(itemfun, int) =\n+&Container::itemfun<itemfun,int>;\n+    t.forward(itemfunptr, &Item::fred, 1);\n+\n+    return 0;\n+}\n+"}, {"sha": "c308a359dd5842d450a5e81f15dfb0509f4253b1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd206211ddadcfb501aeed34d137ffd5baee59a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=8bd206211ddadcfb501aeed34d137ffd5baee59a", "patch": "@@ -1165,12 +1165,18 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n       if (TREE_CODE (inner_type) != TREE_CODE (outer_type))\n \treturn false;\n \n-      /* ???  Add structural equivalence check.  */\n+      /* ???  This seems to be necessary even for aggregates that don't\n+\t have TYPE_STRUCTURAL_EQUALITY_P set.  */\n \n       /* ???  This should eventually just return false.  */\n       return lang_hooks.types_compatible_p (inner_type, outer_type);\n     }\n-\n+  /* Also for functions and possibly other types with\n+     TYPE_STRUCTURAL_EQUALITY_P set.  */\n+  else if (TYPE_STRUCTURAL_EQUALITY_P (inner_type)\n+\t   && TYPE_STRUCTURAL_EQUALITY_P (outer_type))\n+    return lang_hooks.types_compatible_p (inner_type, outer_type);\n+  \n   return false;\n }\n "}]}