{"sha": "2efc367f256dbe4b503c22df0a590a841e2b39dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmYzM2N2YyNTZkYmU0YjUwM2MyMmRmMGE1OTBhODQxZTJiMzlkZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-25T00:33:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-25T00:33:48Z"}, "message": "* libiberty.h (ASTRDUP): Adjust cast to avoid warning.\n\nFrom-SVN: r248442", "tree": {"sha": "99de44def0f52c5545bba3a5149adbf31bc790cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99de44def0f52c5545bba3a5149adbf31bc790cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efc367f256dbe4b503c22df0a590a841e2b39dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efc367f256dbe4b503c22df0a590a841e2b39dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efc367f256dbe4b503c22df0a590a841e2b39dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efc367f256dbe4b503c22df0a590a841e2b39dd/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0a2c9a28b95db914c78bcea3eb827b4c9e71fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a2c9a28b95db914c78bcea3eb827b4c9e71fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a2c9a28b95db914c78bcea3eb827b4c9e71fce"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "47318dac9f0325972d73e3e9df5ead230f69a2e6", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc367f256dbe4b503c22df0a590a841e2b39dd/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc367f256dbe4b503c22df0a590a841e2b39dd/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=2efc367f256dbe4b503c22df0a590a841e2b39dd", "patch": "@@ -1,3 +1,7 @@\n+2017-05-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libiberty.h (ASTRDUP): Adjust cast to avoid warning.\n+\n 2017-05-19  Eli Zaretskii <eliz@gnu.org>\n \n \t* environ.h: Add #ifndef guard."}, {"sha": "a0cbbcfa693ad30e6b7374d798513e5f9233135f", "filename": "include/libiberty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc367f256dbe4b503c22df0a590a841e2b39dd/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc367f256dbe4b503c22df0a590a841e2b39dd/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=2efc367f256dbe4b503c22df0a590a841e2b39dd", "patch": "@@ -724,7 +724,7 @@ extern void *C_alloca (size_t) ATTRIBUTE_MALLOC;\n # define ASTRDUP(X) \\\n   (__extension__ ({ const char *const libiberty_optr = (X); \\\n    const unsigned long libiberty_len = strlen (libiberty_optr) + 1; \\\n-   char *const libiberty_nptr = (char *const) alloca (libiberty_len); \\\n+   char *const libiberty_nptr = (char *) alloca (libiberty_len); \\\n    (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }))\n #else\n # define alloca(x) C_alloca(x)"}]}