{"sha": "1ef33ef304cedbeca446e79d677cd18036a5dc66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmMzNlZjMwNGNlZGJlY2E0NDZlNzlkNjc3Y2QxODAzNmE1ZGM2Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-12T13:46:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-12T13:46:26Z"}, "message": "re PR tree-optimization/71059 (gcc ICE at -O3 on valid code on x86_64-linux-gnu in \"vn_nary_op_insert_into\")\n\n2016-05-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71059\n\t* tree-ssa-pre.c (phi_translate_1): Fully fold translated\n\tnary before looking up or entering the expression into the VN\n\thashes.\n\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup): Fix comment typo.\n\tMake sure to re-use NARYs without result as inserted by\n\tphi-translation.\n\n\t* gcc.dg/torture/pr71059.c: New testcase.\n\nFrom-SVN: r236175", "tree": {"sha": "08146efd808e84c14b2bdd4c476c5540b75f9f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08146efd808e84c14b2bdd4c476c5540b75f9f33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef33ef304cedbeca446e79d677cd18036a5dc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef33ef304cedbeca446e79d677cd18036a5dc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef33ef304cedbeca446e79d677cd18036a5dc66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef33ef304cedbeca446e79d677cd18036a5dc66/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "763baff6f54ec6070e0ec6497363f5116ab4c874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763baff6f54ec6070e0ec6497363f5116ab4c874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763baff6f54ec6070e0ec6497363f5116ab4c874"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "4edaf4ba2a487ebe22ff3e27814199e653f755fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ef33ef304cedbeca446e79d677cd18036a5dc66", "patch": "@@ -1,3 +1,13 @@\n+2016-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71059\n+\t* tree-ssa-pre.c (phi_translate_1): Fully fold translated\n+\tnary before looking up or entering the expression into the VN\n+\thashes.\n+\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup): Fix comment typo.\n+\tMake sure to re-use NARYs without result as inserted by\n+\tphi-translation.\n+\n 2016-05-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71062"}, {"sha": "5ecb1a331e56516342bd0fc1c06174f1067cacce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ef33ef304cedbeca446e79d677cd18036a5dc66", "patch": "@@ -1,3 +1,8 @@\n+2016-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71059\n+\t* gcc.dg/torture/pr71059.c: New testcase.\n+\n 2016-05-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71062"}, {"sha": "7c0ab7f14932c265563e46d7981cee6940f0e484", "filename": "gcc/testsuite/gcc.dg/torture/pr71059.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71059.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71059.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71059.c?ref=1ef33ef304cedbeca446e79d677cd18036a5dc66", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+short a, c;\n+union {\n+    unsigned f0;\n+    unsigned short f1;\n+} b;\n+volatile int d;\n+short fn1(short p1) { return p1 + a; }\n+void fn2()\n+{\n+  b.f0 = 0;\n+  for (;; b.f0 = fn1(b.f0))\n+    (c && b.f1) || d;\n+}"}, {"sha": "3ce87d9d23f4865541c360b996cb79e475c2d193", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=1ef33ef304cedbeca446e79d677cd18036a5dc66", "patch": "@@ -1464,6 +1464,12 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    pre_expr constant;\n \t    unsigned int new_val_id;\n \n+\t    PRE_EXPR_NARY (expr) = newnary;\n+\t    constant = fully_constant_expression (expr);\n+\t    PRE_EXPR_NARY (expr) = nary;\n+\t    if (constant != expr)\n+\t      return constant;\n+\n \t    tree result = vn_nary_op_lookup_pieces (newnary->length,\n \t\t\t\t\t\t    newnary->opcode,\n \t\t\t\t\t\t    newnary->type,\n@@ -1478,10 +1484,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    if (nary)\n \t      {\n \t\tPRE_EXPR_NARY (expr) = nary;\n-\t\tconstant = fully_constant_expression (expr);\n-\t\tif (constant != expr)\n-\t\t  return constant;\n-\n \t\tnew_val_id = nary->value_id;\n \t\tget_or_alloc_expression_id (expr);\n \t      }\n@@ -1495,9 +1497,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t\t\t\t\t &newnary->op[0],\n \t\t\t\t\t\t result, new_val_id);\n \t\tPRE_EXPR_NARY (expr) = nary;\n-\t\tconstant = fully_constant_expression (expr);\n-\t\tif (constant != expr)\n-\t\t  return constant;\n \t\tget_or_alloc_expression_id (expr);\n \t      }\n \t    add_to_value (new_val_id, expr);"}, {"sha": "730db04ff8bfa47f3b07aba9eac591fce8af37cf", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef33ef304cedbeca446e79d677cd18036a5dc66/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1ef33ef304cedbeca446e79d677cd18036a5dc66", "patch": "@@ -1632,7 +1632,7 @@ vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n {\n   tree result = NULL_TREE;\n   /* We will be creating a value number for\n-       ROCDE (OPS...).\n+       RCODE (OPS...).\n      So first simplify and lookup this expression to see if it\n      is already available.  */\n   mprts_hook = vn_lookup_simplify_result;\n@@ -1682,14 +1682,24 @@ vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n       gimple_seq_add_stmt_without_update (&VN_INFO (result)->expr,\n \t\t\t\t\t  new_stmt);\n       VN_INFO (result)->needs_insertion = true;\n+      /* ???  PRE phi-translation inserts NARYs without corresponding\n+         SSA name result.  Re-use those but set their result according\n+\t to the stmt we just built.  */\n+      vn_nary_op_t nary = NULL;\n+      vn_nary_op_lookup_stmt (new_stmt, &nary);\n+      if (nary)\n+\t{\n+\t  gcc_assert (nary->result == NULL_TREE);\n+\t  nary->result = gimple_assign_lhs (new_stmt);\n+\t}\n       /* As all \"inserted\" statements are singleton SCCs, insert\n \t to the valid table.  This is strictly needed to\n \t avoid re-generating new value SSA_NAMEs for the same\n \t expression during SCC iteration over and over (the\n \t optimistic table gets cleared after each iteration).\n \t We do not need to insert into the optimistic table, as\n \t lookups there will fall back to the valid table.  */\n-      if (current_info == optimistic_info)\n+      else if (current_info == optimistic_info)\n \t{\n \t  current_info = valid_info;\n \t  vn_nary_op_insert_stmt (new_stmt, result);"}]}