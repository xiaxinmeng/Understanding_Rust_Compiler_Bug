{"sha": "01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkNWNhYWQwMmM1YzliOGRkMTRjN2NhNjA3ZDMxNGFhOGFjYTQ4Zg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-02-12T12:25:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-12T12:25:44Z"}, "message": "h8300.md (zero_extendhisi2 H8/300 variant): Correctly handle extending a CONST_INT.\n\nFri Feb 12 13:20:52 1999  Jeffrey A Law  (law@cygnus.com)\n        * h8300.md (zero_extendhisi2 H8/300 variant): Correctly handle\n        extending a CONST_INT.\n        * h8300.md (peephole for combining memrefs): Delete incorrect peephole.\n\nFrom-SVN: r25168", "tree": {"sha": "fb86637a99ff15575763487e6fdb38dd0e9e4115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb86637a99ff15575763487e6fdb38dd0e9e4115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f/comments", "author": null, "committer": null, "parents": [{"sha": "a6207a2b7e0d334b7fdab31d7969256892577349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6207a2b7e0d334b7fdab31d7969256892577349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6207a2b7e0d334b7fdab31d7969256892577349"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "2a8e93845b80e9bfd04662095a5978af6f9750a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "patch": "@@ -1,3 +1,10 @@\n+Fri Feb 12 13:20:52 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* h8300.md (zero_extendhisi2 H8/300 variant): Correctly handle\n+\textending a CONST_INT.\n+\n+\t* h8300.md (peephole for combining memrefs): Delete incorrect peephole.\n+\n Fri Feb 12 18:29:11 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* loop.c (loop_insn_first_p, biv_elimination_giv_has_0_offset):"}, {"sha": "d892cad9cb71d772d8d0f2c95b4c90a8e3f404ea", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d5caad02c5c9b8dd14c7ca607d314aa8aca48f/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=01d5caad02c5c9b8dd14c7ca607d314aa8aca48f", "patch": "@@ -1687,15 +1687,17 @@\n   \"TARGET_H8300\"\n   \"\")\n \n+;; %e prints the high part of a CONST_INT, not the low part.  Arggh.\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"general_operand_src\" \"0,g>\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_operand_src\" \"0,i,g>\")))]\n   \"TARGET_H8300\"\n   \"@\n   sub.w\t%e0,%e0\n+  mov.w %f1,%f0\\;sub.w %e0,%e0\n   mov.w %e1,%f0\\;sub.w %e0,%e0\"\n-  [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+  [(set_attr \"length\" \"2,4,4\")\n+   (set_attr \"cc\" \"clobber,clobber,clobber\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2245,32 +2247,6 @@\n ;; Peepholes go at the end.\n ;; ----------------------------------------------\n \n-;; Notice when two byte moves in a row could be a word move.\n-\n-(define_peephole\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(mem:QI (plus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:HI 2 \"immediate_operand\" \"n\"))))\n-   (set (match_operand:QI 3 \"register_operand\" \"=r\")\n-\t(mem:QI (plus:HI (match_dup 1)\n-\t\t\t (match_operand:HI 4 \"immediate_operand\" \"n\"))))]\n-  \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n-  \"mov.w\t@(%u4,%T1),%T0\"\n-  [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set_znv\")])\n-\n-(define_peephole\n-  [(set (mem:QI (plus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:HI 2 \"immediate_operand\" \"n\")))\n-\t(match_operand:QI 0 \"register_operand\" \"r\"))\n-   (set (mem:QI (plus:HI (match_dup 1)\n-\t\t\t (match_operand:HI 4 \"immediate_operand\" \"n\")))\n-\t(match_operand:QI 3 \"register_operand\" \"r\"))]\n-  \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n-  \"mov.w\t%T0,@(%u4,%T1)\"\n-  [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set_znv\")])\n-\n ;; Notice a move which could be post incremented.\n \n (define_peephole "}]}