{"sha": "6877306fbd70a365ebb8e427e108a399ae924498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3NzMwNmZiZDcwYTM2NWViYjhlNDI3ZTEwOGEzOTlhZTkyNDQ5OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T10:27:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T10:27:22Z"}, "message": "[multiple changes]\n\n2017-09-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Suspicious_Index): Improve warning when the\n\tliteral index used to access a string is null or negative.\n\n2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Status_Flag_Or_Transient_Decl): The attribute is now\n\tallowed on loop parameters.\n\t(Set_Status_Flag_Or_Transient_Decl): The attribute is now allowed\n\ton loop parameters.\n\t(Write_Field15_Name): Update the output for\n\tStatus_Flag_Or_Transient_Decl.\n\t* einfo.ads: Attribute Status_Flag_Or_Transient_Decl now applies\n\tto loop parameters. Update the documentation of the attribute\n\tand the E_Loop_Parameter entity.\n\t* exp_ch7.adb (Process_Declarations): Remove the bogus guard\n\twhich assumes that cursors can never be controlled.\n\t* exp_util.adb (Requires_Cleanup_Actions): Remove the bogus\n\tguard which assumes that cursors can never be controlled.\n\nFrom-SVN: r251773", "tree": {"sha": "0758041d03d4c279d0aa4bcef4ba7910ad86db60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0758041d03d4c279d0aa4bcef4ba7910ad86db60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6877306fbd70a365ebb8e427e108a399ae924498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6877306fbd70a365ebb8e427e108a399ae924498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6877306fbd70a365ebb8e427e108a399ae924498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6877306fbd70a365ebb8e427e108a399ae924498/comments", "author": null, "committer": null, "parents": [{"sha": "c99ab5f9320ddbdb2501ed766ea9c3891b620c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99ab5f9320ddbdb2501ed766ea9c3891b620c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99ab5f9320ddbdb2501ed766ea9c3891b620c8f"}], "stats": {"total": 133, "additions": 93, "deletions": 40}, "files": [{"sha": "f7ec8616684dba3417afd1459b98503d2986703a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -1,3 +1,24 @@\n+2017-09-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Suspicious_Index): Improve warning when the\n+\tliteral index used to access a string is null or negative.\n+\n+2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Status_Flag_Or_Transient_Decl): The attribute is now\n+\tallowed on loop parameters.\n+\t(Set_Status_Flag_Or_Transient_Decl): The attribute is now allowed\n+\ton loop parameters.\n+\t(Write_Field15_Name): Update the output for\n+\tStatus_Flag_Or_Transient_Decl.\n+\t* einfo.ads: Attribute Status_Flag_Or_Transient_Decl now applies\n+\tto loop parameters. Update the documentation of the attribute\n+\tand the E_Loop_Parameter entity.\n+\t* exp_ch7.adb (Process_Declarations): Remove the bogus guard\n+\twhich assumes that cursors can never be controlled.\n+\t* exp_util.adb (Requires_Cleanup_Actions): Remove the bogus\n+\tguard which assumes that cursors can never be controlled.\n+\n 2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb, sem_util.adb, sem_attr.adb, sem_ch6.adb, sem_ch8.adb,"}, {"sha": "4c9f5747e8046bf4198d99dadb49b0d1aca865c7", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -3371,7 +3371,9 @@ package body Einfo is\n \n    function Status_Flag_Or_Transient_Decl (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind_In (Id, E_Constant,\n+                                   E_Loop_Parameter,\n+                                   E_Variable));\n       return Node15 (Id);\n    end Status_Flag_Or_Transient_Decl;\n \n@@ -6546,7 +6548,9 @@ package body Einfo is\n \n    procedure Set_Status_Flag_Or_Transient_Decl (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind_In (Id, E_Constant,\n+                                   E_Loop_Parameter,\n+                                   E_Variable));\n       Set_Node15 (Id, V);\n    end Set_Status_Flag_Or_Transient_Decl;\n \n@@ -10087,6 +10091,7 @@ package body Einfo is\n             Write_Str (\"Related_Instance\");\n \n          when E_Constant\n+            | E_Loop_Parameter\n             | E_Variable\n          =>\n             Write_Str (\"Status_Flag_Or_Transient_Decl\");"}, {"sha": "7826d42093cdfa4f3a861df6e55f991570ce0fdc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -4325,12 +4325,12 @@ package Einfo is\n --       expression may consist of the above xxxPredicate call on its own.\n \n --    Status_Flag_Or_Transient_Decl (Node15)\n---       Defined in variables and constants. Applies to objects that require\n---       special treatment by the finalization machinery, such as extended\n---       return results, IF and CASE expression results, and objects inside\n---       N_Expression_With_Actions nodes. The attribute contains the entity\n---       of a flag which specifies particular behavior over a region of code\n---       or the declaration of a \"hook\" object.\n+--       Defined in constant, loop, and variable entities. Applies to objects\n+--       that require special treatment by the finalization machinery, such as\n+--       extended return results, IF and CASE expression results, and objects\n+--       inside N_Expression_With_Actions nodes. The attribute contains the\n+--       entity of a flag which specifies particular behavior over a region of\n+--       code or the declaration of a \"hook\" object.\n --       In which case is it a flag, or a hook object???\n \n --    Storage_Size_Variable (Node26) [implementation base type only]\n@@ -5846,7 +5846,7 @@ package Einfo is\n    --    Esize                               (Uint12)\n    --    Extra_Accessibility                 (Node13)   (constants only)\n    --    Alignment                           (Uint14)\n-   --    Status_Flag_Or_Transient_Decl       (Node15)   (constants only)\n+   --    Status_Flag_Or_Transient_Decl       (Node15)\n    --    Actual_Subtype                      (Node17)\n    --    Renamed_Object                      (Node18)\n    --    Size_Check_Code                     (Node19)   (constants only)"}, {"sha": "f8225452f5a6a7453d325b62aedd26fb99ee58f5", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -2100,15 +2100,6 @@ package body Exp_Ch7 is\n                elsif Is_Ignored_Ghost_Entity (Obj_Id) then\n                   null;\n \n-               --  The expansion of iterator loops generates an object\n-               --  declaration where the Ekind is explicitly set to loop\n-               --  parameter. This is to ensure that the loop parameter behaves\n-               --  as a constant from user code point of view. Such object are\n-               --  never controlled and do not require finalization.\n-\n-               elsif Ekind (Obj_Id) = E_Loop_Parameter then\n-                  null;\n-\n                --  The object is of the form:\n                --    Obj : [constant] Typ [:= Expr];\n "}, {"sha": "baffe28ad69a54f0f143d8d5fb0f8ce6e58aad63", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -11972,16 +11972,6 @@ package body Exp_Util is\n             elsif Is_Ignored_Ghost_Entity (Obj_Id) then\n                null;\n \n-            --  The expansion of iterator loops generates an object declaration\n-            --  where the Ekind is explicitly set to loop parameter. This is to\n-            --  ensure that the loop parameter behaves as a constant from user\n-            --  code point of view. Such object are never controlled and do not\n-            --  require cleanup actions. An iterator loop over a container of\n-            --  controlled objects does not produce such object declarations.\n-\n-            elsif Ekind (Obj_Id) = E_Loop_Parameter then\n-               return False;\n-\n             --  The object is of the form:\n             --    Obj : [constant] Typ [:= Expr];\n             --"}, {"sha": "fd31316eb5d05948dd11238682571bc45f0da876", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877306fbd70a365ebb8e427e108a399ae924498/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=6877306fbd70a365ebb8e427e108a399ae924498", "patch": "@@ -46,6 +46,7 @@ with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n+with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n package body Sem_Warn is\n@@ -3878,6 +3879,13 @@ package body Sem_Warn is\n          procedure Warn1;\n          --  Generate first warning line\n \n+         procedure Warn_On_Index_Below_Lower_Bound;\n+         --  Generate a warning on indexing the array with a literal value\n+         --  below the lower bound of the index type.\n+\n+         procedure Warn_On_Literal_Index;\n+         --  Generate a warning on indexing the array with a literal value\n+\n          ----------------------\n          -- Length_Reference --\n          ----------------------\n@@ -3903,21 +3911,31 @@ package body Sem_Warn is\n               (\"?w?index for& may assume lower bound of^\", X, Ent);\n          end Warn1;\n \n-      --  Start of processing for Test_Suspicious_Index\n-\n-      begin\n-         --  Nothing to do if subscript does not come from source (we don't\n-         --  want to give garbage warnings on compiler expanded code, e.g. the\n-         --  loops generated for slice assignments. Such junk warnings would\n-         --  be placed on source constructs with no subscript in sight).\n+         -------------------------------------\n+         -- Warn_On_Index_Below_Lower_Bound --\n+         -------------------------------------\n \n-         if not Comes_From_Source (Original_Node (X)) then\n-            return;\n-         end if;\n+         procedure Warn_On_Index_Below_Lower_Bound is\n+         begin\n+            if Is_Standard_String_Type (Typ) then\n+               Discard_Node\n+                 (Compile_Time_Constraint_Error\n+                   (N   => X,\n+                    Msg => \"?w?string index should be positive\"));\n+            else\n+               Discard_Node\n+                 (Compile_Time_Constraint_Error\n+                   (N   => X,\n+                    Msg => \"?w?index out of the allowed range\"));\n+            end if;\n+         end Warn_On_Index_Below_Lower_Bound;\n \n-         --  Case where subscript is a constant integer\n+         ---------------------------\n+         -- Warn_On_Literal_Index --\n+         ---------------------------\n \n-         if Nkind (X) = N_Integer_Literal then\n+         procedure Warn_On_Literal_Index is\n+         begin\n             Warn1;\n \n             --  Case where original form of subscript is an integer literal\n@@ -4037,6 +4055,34 @@ package body Sem_Warn is\n                Error_Msg_FE -- CODEFIX\n                  (\"\\?w?suggested replacement: `&~`\", Original_Node (X), Ent);\n             end if;\n+         end Warn_On_Literal_Index;\n+\n+      --  Start of processing for Test_Suspicious_Index\n+\n+      begin\n+         --  Nothing to do if subscript does not come from source (we don't\n+         --  want to give garbage warnings on compiler expanded code, e.g. the\n+         --  loops generated for slice assignments. Such junk warnings would\n+         --  be placed on source constructs with no subscript in sight).\n+\n+         if not Comes_From_Source (Original_Node (X)) then\n+            return;\n+         end if;\n+\n+         --  Case where subscript is a constant integer\n+\n+         if Nkind (X) = N_Integer_Literal then\n+\n+            --  Case where subscript is lower than the lowest possible bound.\n+            --  This might be the case for example when programmers try to\n+            --  access a string at index 0, as they are used to in other\n+            --  programming languages like C.\n+\n+            if Intval (X) < Low_Bound then\n+               Warn_On_Index_Below_Lower_Bound;\n+            else\n+               Warn_On_Literal_Index;\n+            end if;\n \n          --  Case where subscript is of the form X'Length\n "}]}