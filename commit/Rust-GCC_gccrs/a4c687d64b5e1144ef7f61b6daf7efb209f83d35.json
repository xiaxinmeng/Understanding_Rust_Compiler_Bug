{"sha": "a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjNjg3ZDY0YjVlMTE0NGVmN2Y2MWI2ZGFmN2VmYjIwOWY4M2QzNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-16T15:28:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-16T15:28:02Z"}, "message": "PR libstdc++/80041 fix codecvt_utf16<wchar_t> to use UTF-16 not UTF-8\n\n\tPR libstdc++/80041\n\t* src/c++11/codecvt.cc (__codecvt_utf16_base<wchar_t>::do_out)\n\t(__codecvt_utf16_base<wchar_t>::do_in): Convert char arguments to\n\tchar16_t to work with UTF-16 instead of UTF-8.\n\t* testsuite/22_locale/codecvt/codecvt_utf16/80041.cc: New test.\n\nFrom-SVN: r246202", "tree": {"sha": "db2ed66b6f2e7d0be362185cae557fa867c2d319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db2ed66b6f2e7d0be362185cae557fa867c2d319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516231de7317bbaf0f83a27047924bb690a217e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516231de7317bbaf0f83a27047924bb690a217e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516231de7317bbaf0f83a27047924bb690a217e5"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "cf94ab538e3cd220d30795034702b343b7b76543", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "patch": "@@ -1,5 +1,11 @@\n 2017-03-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/80041\n+\t* src/c++11/codecvt.cc (__codecvt_utf16_base<wchar_t>::do_out)\n+\t(__codecvt_utf16_base<wchar_t>::do_in): Convert char arguments to\n+\tchar16_t to work with UTF-16 instead of UTF-8.\n+\t* testsuite/22_locale/codecvt/codecvt_utf16/80041.cc: New test.\n+\n \t* src/c++11/codecvt.cc (codecvt<char16_t, char, mbstate_t>)\n \t(codecvt<char32_t, char, mbstate_t>, __codecvt_utf8_base<char16_t>)\n \t(__codecvt_utf8_base<char32_t>, __codecvt_utf8_base<wchar_t>)"}, {"sha": "ef38267e855c5254fe1e030de8c3763f2f1aafff", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "patch": "@@ -1217,7 +1217,10 @@ do_out(state_type&, const intern_type* __from, const intern_type* __from_end,\n        extern_type* __to, extern_type* __to_end,\n        extern_type*& __to_next) const\n {\n-  range<char> to{ __to, __to_end };\n+  range<char16_t> to{\n+    reinterpret_cast<char16_t*>(__to),\n+    reinterpret_cast<char16_t*>(__to_end)\n+  };\n #if __SIZEOF_WCHAR_T__ == 2\n   range<const char16_t> from{\n     reinterpret_cast<const char16_t*>(__from),\n@@ -1234,7 +1237,7 @@ do_out(state_type&, const intern_type* __from, const intern_type* __from_end,\n   return codecvt_base::error;\n #endif\n   __from_next = reinterpret_cast<const wchar_t*>(from.next);\n-  __to_next = to.next;\n+  __to_next = reinterpret_cast<char*>(to.next);\n   return res;\n }\n \n@@ -1254,7 +1257,10 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n       intern_type* __to, intern_type* __to_end,\n       intern_type*& __to_next) const\n {\n-  range<const char> from{ __from, __from_end };\n+  range<const char16_t> from{\n+    reinterpret_cast<const char16_t*>(__from),\n+    reinterpret_cast<const char16_t*>(__from_end)\n+  };\n #if __SIZEOF_WCHAR_T__ == 2\n   range<char16_t> to{\n     reinterpret_cast<char16_t*>(__to),\n@@ -1270,7 +1276,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n #else\n   return codecvt_base::error;\n #endif\n-  __from_next = from.next;\n+  __from_next = reinterpret_cast<const char*>(from.next);\n   __to_next = reinterpret_cast<wchar_t*>(to.next);\n   return res;\n }"}, {"sha": "a78b194212dc2a3164cebe0be9a53e156578923f", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf16/80041.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2F80041.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c687d64b5e1144ef7f61b6daf7efb209f83d35/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2F80041.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2F80041.cc?ref=a4c687d64b5e1144ef7f61b6daf7efb209f83d35", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::codecvt_utf16<wchar_t> conv;\n+  const wchar_t wc = 0x6557;\n+  char bytes[2] = {0};\n+  const wchar_t* wcnext;\n+  std::mbstate_t st{};\n+  char* next = nullptr;\n+  auto res = conv.out(st, &wc, &wc+ 1, wcnext, bytes, std::end(bytes), next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( wcnext == &wc + 1 );\n+  VERIFY( next == std::end(bytes) );\n+  VERIFY( bytes[0] == 0x65 );\n+  VERIFY( bytes[1] == 0x57 );\n+  VERIFY( conv.length(st, bytes, next, 1) == (next - bytes) );\n+\n+  wchar_t w;\n+  wchar_t* wnext;\n+  const char* cnext;\n+  st = {};\n+  res = conv.in(st, bytes, next, cnext, &w, &w + 1, wnext);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( wnext == &w + 1 );\n+  VERIFY( cnext == next );\n+  VERIFY( w == wc );\n+#endif\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::codecvt_utf16<wchar_t, 0x10FFFF, std::little_endian> conv;\n+  wchar_t wc = 0x6557;\n+  char bytes[2] = {0};\n+  const wchar_t* wcnext;\n+  std::mbstate_t st{};\n+  char* next = nullptr;\n+  auto res = conv.out(st, &wc, &wc+ 1, wcnext, bytes, std::end(bytes), next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( wcnext == &wc + 1 );\n+  VERIFY( next == std::end(bytes) );\n+  VERIFY( bytes[0] == 0x57 );\n+  VERIFY( bytes[1] == 0x65 );\n+  VERIFY( conv.length(st, bytes, next, 1) == (next - bytes) );\n+\n+  wchar_t w;\n+  wchar_t* wnext;\n+  const char* cnext;\n+  st = {};\n+  res = conv.in(st, bytes, next, cnext, &w, &w + 1, wnext);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( wnext == &w + 1 );\n+  VERIFY( cnext == next );\n+  VERIFY( w == wc );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}