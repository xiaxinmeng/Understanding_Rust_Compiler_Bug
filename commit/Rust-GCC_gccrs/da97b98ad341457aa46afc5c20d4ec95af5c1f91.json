{"sha": "da97b98ad341457aa46afc5c20d4ec95af5c1f91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5N2I5OGFkMzQxNDU3YWE0NmFmYzVjMjBkNGVjOTVhZjVjMWY5MQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2019-03-26T15:00:05Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2019-03-26T15:00:05Z"}, "message": "re PR libstdc++/89825 (Jump table for variant visitation could be shortened for never empty variants)\n\nPR libstdc++/89825\n\nFix based on a suggestion by Antony Polukhin.\n* include/std/variant (_Extra_visit_slot_needed): New.\n(_Multi_array): Use it.\n(_S_apply_all_alts): Likewise.\n\nFrom-SVN: r269947", "tree": {"sha": "60ef3f98de7b5703ab6778a1ab26bb6b84d4c042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ef3f98de7b5703ab6778a1ab26bb6b84d4c042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da97b98ad341457aa46afc5c20d4ec95af5c1f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97b98ad341457aa46afc5c20d4ec95af5c1f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da97b98ad341457aa46afc5c20d4ec95af5c1f91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97b98ad341457aa46afc5c20d4ec95af5c1f91/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf66c831c1e05bbea0ef859ed3ae0027c476c618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf66c831c1e05bbea0ef859ed3ae0027c476c618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf66c831c1e05bbea0ef859ed3ae0027c476c618"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "2e595b3eca8b4c5153780f8991699bff7c47a201", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97b98ad341457aa46afc5c20d4ec95af5c1f91/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97b98ad341457aa46afc5c20d4ec95af5c1f91/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da97b98ad341457aa46afc5c20d4ec95af5c1f91", "patch": "@@ -1,3 +1,13 @@\n+2019-03-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/89825\n+\tFix based on a suggestion by Antony Polukhin.\n+\t* include/std/variant (__never_valueless): New.\n+\t(_M_valid): Use it.\n+\t(_Extra_visit_slot_needed): New.\n+\t(_Multi_array): Use it.\n+\t(_S_apply_all_alts): Likewise.\n+\n 2019-03-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/89824"}, {"sha": "3932a8a0d1476bc073d8ee45fdb80c881cd66673", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97b98ad341457aa46afc5c20d4ec95af5c1f91/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97b98ad341457aa46afc5c20d4ec95af5c1f91/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=da97b98ad341457aa46afc5c20d4ec95af5c1f91", "patch": "@@ -323,6 +323,12 @@ namespace __variant\n       _Variadic_union<_Rest...> _M_rest;\n     };\n \n+  template <typename... _Types>\n+  constexpr bool __never_valueless()\n+  {\n+    return (is_trivially_copyable_v<_Types> && ...);\n+  }\n+\n   // Defines index and the dtor, possibly trivial.\n   template<bool __trivially_destructible, typename... _Types>\n     struct _Variant_storage;\n@@ -408,7 +414,7 @@ namespace __variant\n       constexpr bool\n       _M_valid() const noexcept\n       {\n-\tif constexpr ((is_trivially_copyable_v<_Types> && ...))\n+\tif constexpr (__never_valueless<_Types...>())\n \t  return true;\n \treturn this->_M_index != __index_type(variant_npos);\n       }\n@@ -747,6 +753,20 @@ namespace __variant\n     void* __get_storage(_Variant&& __v)\n     { return __v._M_storage(); }\n \n+  template <typename _Maybe_variant_cookie, typename _Variant>\n+  struct _Extra_visit_slot_needed\n+  {\n+    template <typename> struct _Variant_never_valueless;\n+\n+    template <typename... _Types>\n+    struct _Variant_never_valueless<variant<_Types...>>\n+      : bool_constant<__never_valueless<_Types...>()> {};\n+\n+    static constexpr bool value =\n+      is_same_v<_Maybe_variant_cookie, __variant_cookie>\n+      && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;\n+  };\n+\n   // Used for storing multi-dimensional vtable.\n   template<typename _Tp, size_t... _Dimensions>\n     struct _Multi_array\n@@ -764,8 +784,11 @@ namespace __variant\n \t   size_t __first, size_t... __rest>\n     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>\n     {\n+      static constexpr size_t __index =\n+\tsizeof...(_Variants) - sizeof...(__rest) - 1;\n+      using _Variant = typename _Nth_type<__index, _Variants...>::type;\n       static constexpr int __do_cookie =\n-\tis_same_v<_Ret, __variant_cookie> ? 1 : 0;\n+\t_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;\n       using _Tp = _Ret(*)(_Visitor, _Variants...);\n       template<typename... _Args>\n \tconstexpr const _Tp&\n@@ -832,7 +855,7 @@ namespace __variant\n \t_S_apply_all_alts(_Array_type& __vtable,\n \t\t\t  std::index_sequence<__var_indices...>)\n \t{\n-\t  if constexpr (is_same_v<_Result_type, __variant_cookie>)\n+\t  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)\n \t    (_S_apply_single_alt<true, __var_indices>(\n \t      __vtable._M_arr[__var_indices + 1],\n \t      &(__vtable._M_arr[0])), ...);"}]}