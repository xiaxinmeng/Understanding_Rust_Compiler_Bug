{"sha": "24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjNDBmOWEyY2M4MzJkZTc0Y2I1NWY2ZWMxZGZiNDViNzE2MTM3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-24T11:27:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-24T11:27:44Z"}, "message": "tree-ssa-sccvn.h (run_scc_vn): Adjust prototype.\n\n2017-04-24  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.h (run_scc_vn): Adjust prototype.\n\t* tree-ssa-sccvn.c (print_scc): Print SCC size.\n\t(extract_and_process_scc_for_name): Never fail but drop SCC to varying.\n\t(DFS): Adjust and never fail.\n\t(sccvn_dom_walker::fail): Remove.\n\t(sccvn_dom_walker::before_dom_children): Adjust.\n\t(run_scc_vn): Likewise and never fail.\n\t* tree-ssa-pre.c (pass_pre::execute): Adjust.\n\t(pass_fre::execute): Likewise.\n\nFrom-SVN: r247092", "tree": {"sha": "98e267958ca86ac35056a2cef5bb910aa9e9ded9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98e267958ca86ac35056a2cef5bb910aa9e9ded9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c7c437cb1c851c54b991cb0d6da3c7c53900e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7c437cb1c851c54b991cb0d6da3c7c53900e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7c437cb1c851c54b991cb0d6da3c7c53900e3c"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "86ec5c1a3f4603c447c0b4b2a07910745fd79125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "patch": "@@ -1,3 +1,15 @@\n+2017-04-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.h (run_scc_vn): Adjust prototype.\n+\t* tree-ssa-sccvn.c (print_scc): Print SCC size.\n+\t(extract_and_process_scc_for_name): Never fail but drop SCC to varying.\n+\t(DFS): Adjust and never fail.\n+\t(sccvn_dom_walker::fail): Remove.\n+\t(sccvn_dom_walker::before_dom_children): Adjust.\n+\t(run_scc_vn): Likewise and never fail.\n+\t* tree-ssa-pre.c (pass_pre::execute): Adjust.\n+\t(pass_fre::execute): Likewise.\n+\n 2017-04-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79725"}, {"sha": "b4095bfdeed1d518f8d1d947b5f0827883b5582e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "patch": "@@ -5086,11 +5086,7 @@ pass_pre::execute (function *fun)\n      loop_optimizer_init may create new phis, etc.  */\n   loop_optimizer_init (LOOPS_NORMAL);\n \n-  if (!run_scc_vn (VN_WALK))\n-    {\n-      loop_optimizer_finalize ();\n-      return 0;\n-    }\n+  run_scc_vn (VN_WALK);\n \n   init_pre ();\n   scev_initialize ();\n@@ -5202,8 +5198,7 @@ pass_fre::execute (function *fun)\n {\n   unsigned int todo = 0;\n \n-  if (!run_scc_vn (VN_WALKREWRITE))\n-    return 0;\n+  run_scc_vn (VN_WALKREWRITE);\n \n   memset (&pre_stats, 0, sizeof (pre_stats));\n "}, {"sha": "f307e2e8fe050896da47e9ff93c15a18fa32c7bc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "patch": "@@ -3153,7 +3153,7 @@ print_scc (FILE *out, vec<tree> scc)\n   tree var;\n   unsigned int i;\n \n-  fprintf (out, \"SCC consists of:\");\n+  fprintf (out, \"SCC consists of %u:\", scc.length ());\n   FOR_EACH_VEC_ELT (scc, i, var)\n     {\n       fprintf (out, \" \");\n@@ -4316,7 +4316,7 @@ process_scc (vec<tree> scc)\n    and process them.  Returns true if all went well, false if\n    we run into resource limits.  */\n \n-static bool\n+static void\n extract_and_process_scc_for_name (tree name)\n {\n   auto_vec<tree> scc;\n@@ -4332,24 +4332,37 @@ extract_and_process_scc_for_name (tree name)\n       scc.safe_push (x);\n     } while (x != name);\n \n-  /* Bail out of SCCVN in case a SCC turns out to be incredibly large.  */\n-  if (scc.length ()\n-      > (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE))\n+  /* Drop all defs in the SCC to varying in case a SCC turns out to be\n+     incredibly large.\n+     ???  Just switch to a non-optimistic mode that avoids any iteration.  */\n+  if (scc.length () > (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE))\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"WARNING: Giving up with SCCVN due to \"\n-\t\t \"SCC size %u exceeding %u\\n\", scc.length (),\n-\t\t (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE));\n-\n-      return false;\n+\t{\n+\t  print_scc (dump_file, scc);\n+\t  fprintf (dump_file, \"WARNING: Giving up value-numbering SCC due to \"\n+\t\t   \"size %u exceeding %u\\n\", scc.length (),\n+\t\t   (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE));\n+\t}\n+      tree var;\n+      unsigned i;\n+      FOR_EACH_VEC_ELT (scc, i, var)\n+\t{\n+\t  gimple *def = SSA_NAME_DEF_STMT (var);\n+\t  mark_use_processed (var);\n+\t  if (SSA_NAME_IS_DEFAULT_DEF (var)\n+\t      || gimple_code (def) == GIMPLE_PHI)\n+\t    set_ssa_val_to (var, var);\n+\t  else\n+\t    defs_to_varying (def);\n+\t}\n+      return;\n     }\n \n   if (scc.length () > 1)\n     sort_scc (scc);\n \n   process_scc (scc);\n-\n-  return true;\n }\n \n /* Depth first search on NAME to discover and process SCC's in the SSA\n@@ -4359,7 +4372,7 @@ extract_and_process_scc_for_name (tree name)\n    Returns true if successful, false if we stopped processing SCC's due\n    to resource constraints.  */\n \n-static bool\n+static void\n DFS (tree name)\n {\n   auto_vec<ssa_op_iter> itervec;\n@@ -4399,12 +4412,11 @@ DFS (tree name)\n \t{\n \t  /* See if we found an SCC.  */\n \t  if (VN_INFO (name)->low == VN_INFO (name)->dfsnum)\n-\t    if (!extract_and_process_scc_for_name (name))\n-\t      return false;\n+\t    extract_and_process_scc_for_name (name);\n \n \t  /* Check if we are done.  */\n \t  if (namevec.is_empty ())\n-\t    return true;\n+\t    return;\n \n \t  /* Restore the last use walker and continue walking there.  */\n \t  use = name;\n@@ -4687,7 +4699,7 @@ class sccvn_dom_walker : public dom_walker\n {\n public:\n   sccvn_dom_walker ()\n-    : dom_walker (CDI_DOMINATORS, true), fail (false), cond_stack (0) {}\n+    : dom_walker (CDI_DOMINATORS, true), cond_stack (0) {}\n \n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n@@ -4697,7 +4709,6 @@ class sccvn_dom_walker : public dom_walker\n   void record_conds (basic_block,\n \t\t     enum tree_code code, tree lhs, tree rhs, bool value);\n \n-  bool fail;\n   auto_vec<std::pair <basic_block, std::pair <vn_nary_op_t, vn_nary_op_t> > >\n     cond_stack;\n };\n@@ -4793,9 +4804,6 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n   edge e;\n   edge_iterator ei;\n \n-  if (fail)\n-    return NULL;\n-\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Visiting BB %d\\n\", bb->index);\n \n@@ -4851,25 +4859,17 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n     {\n       gphi *phi = gsi.phi ();\n       tree res = PHI_RESULT (phi);\n-      if (!VN_INFO (res)->visited\n-\t  && !DFS (res))\n-\t{\n-\t  fail = true;\n-\t  return NULL;\n-\t}\n+      if (!VN_INFO (res)->visited)\n+\tDFS (res);\n     }\n   for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n        !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       ssa_op_iter i;\n       tree op;\n       FOR_EACH_SSA_TREE_OPERAND (op, gsi_stmt (gsi), i, SSA_OP_ALL_DEFS)\n-\tif (!VN_INFO (op)->visited\n-\t    && !DFS (op))\n-\t  {\n-\t    fail = true;\n-\t    return NULL;\n-\t  }\n+\tif (!VN_INFO (op)->visited)\n+\t  DFS (op);\n     }\n \n   /* Finally look at the last stmt.  */\n@@ -4941,7 +4941,7 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n    due to resource constraints.  DEFAULT_VN_WALK_KIND_ specifies\n    how we use the alias oracle walking during the VN process.  */\n \n-bool\n+void\n run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n {\n   size_t i;\n@@ -4977,12 +4977,6 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n      SSA defs and decide whether outgoing edges are not executable.  */\n   sccvn_dom_walker walker;\n   walker.walk (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-  if (walker.fail)\n-    {\n-      scc_vn_restore_ssa_info ();\n-      free_scc_vn ();\n-      return false;\n-    }\n \n   /* Initialize the value ids and prune out remaining VN_TOPs\n      from dead code.  */\n@@ -5027,8 +5021,6 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n \t    }\n \t}\n     }\n-\n-  return true;\n }\n \n /* Return the maximum value id we have ever seen.  */"}, {"sha": "53a21afb300660d3d6efb1cdd8059333b23149d7", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c40f9a2cc832de74cb55f6ec1dfb45b7161379/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=24c40f9a2cc832de74cb55f6ec1dfb45b7161379", "patch": "@@ -212,7 +212,7 @@ enum vn_lookup_kind { VN_NOWALK, VN_WALK, VN_WALKREWRITE };\n extern vn_ssa_aux_t VN_INFO (tree);\n extern vn_ssa_aux_t VN_INFO_GET (tree);\n tree vn_get_expr_for (tree);\n-bool run_scc_vn (vn_lookup_kind);\n+void run_scc_vn (vn_lookup_kind);\n void free_scc_vn (void);\n void scc_vn_restore_ssa_info (void);\n tree vn_nary_op_lookup (tree, vn_nary_op_t *);"}]}