{"sha": "36427b78add2e9f6b5a479319bae80b0387835bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0MjdiNzhhZGQyZTlmNmI1YTQ3OTMxOWJhZTgwYjAzODc4MzViZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T22:31:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T22:31:57Z"}, "message": "(layout_type...\n\n(layout_type, case ARRAY_TYPE): Compute length using MAX of length and\nzero if sizetype signed and neither bound constant.\n\nFrom-SVN: r9668", "tree": {"sha": "aeb86d521519ea147ee57f10d508fccbc5869220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb86d521519ea147ee57f10d508fccbc5869220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36427b78add2e9f6b5a479319bae80b0387835bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36427b78add2e9f6b5a479319bae80b0387835bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36427b78add2e9f6b5a479319bae80b0387835bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36427b78add2e9f6b5a479319bae80b0387835bd/comments", "author": null, "committer": null, "parents": [{"sha": "74a35b2b7d4acd85a5c08c0b52cbe479bbed7167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a35b2b7d4acd85a5c08c0b52cbe479bbed7167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a35b2b7d4acd85a5c08c0b52cbe479bbed7167"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "e37c8dfdacf39cd478db87a74d4135274aa75267", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36427b78add2e9f6b5a479319bae80b0387835bd/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36427b78add2e9f6b5a479319bae80b0387835bd/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=36427b78add2e9f6b5a479319bae80b0387835bd", "patch": "@@ -1,5 +1,5 @@\n /* C-compiler utilities for types and variables storage layout\n-   Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -740,6 +740,15 @@ layout_type (type)\n \t\t\t    size_binop (MINUS_EXPR, TYPE_MAX_VALUE (index),\n \t\t\t\t\tTYPE_MIN_VALUE (index)));\n \n+\t    /* If neither bound is a constant and sizetype is signed, make\n+\t       sure the size is never negative.  We should really do this\n+\t       if *either* bound is non-constant, but this is the best\n+\t       compromise between C and Ada.  */\n+\t    if (! TREE_UNSIGNED (sizetype)\n+\t\t&& TREE_CODE (TYPE_MIN_VALUE (index)) != INTEGER_CST\n+\t\t&& TREE_CODE (TYPE_MAX_VALUE (index)) != INTEGER_CST)\n+\t      length = size_binop (MAX_EXPR, length, size_zero_node);\n+\n \t    TYPE_SIZE (type) = size_binop (MULT_EXPR, length,\n \t\t\t\t\t   TYPE_SIZE (element));\n \t  }"}]}