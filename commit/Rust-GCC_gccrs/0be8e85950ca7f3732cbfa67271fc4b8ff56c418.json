{"sha": "0be8e85950ca7f3732cbfa67271fc4b8ff56c418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlOGU4NTk1MGNhN2YzNzMyY2JmYTY3MjcxZmM0YjhmZjU2YzQxOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-04-08T04:51:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-04-08T04:51:39Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r707", "tree": {"sha": "e36d99a84fc0b8aa4a10f5ac31209199024aea27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e36d99a84fc0b8aa4a10f5ac31209199024aea27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be8e85950ca7f3732cbfa67271fc4b8ff56c418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be8e85950ca7f3732cbfa67271fc4b8ff56c418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be8e85950ca7f3732cbfa67271fc4b8ff56c418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be8e85950ca7f3732cbfa67271fc4b8ff56c418/comments", "author": null, "committer": null, "parents": [{"sha": "b82fb2631beb78bef09e7aefb3d7821a5816f97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82fb2631beb78bef09e7aefb3d7821a5816f97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82fb2631beb78bef09e7aefb3d7821a5816f97c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "b997b4ac5f5945ea1b41070adebe53ce2625fe6e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be8e85950ca7f3732cbfa67271fc4b8ff56c418/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be8e85950ca7f3732cbfa67271fc4b8ff56c418/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=0be8e85950ca7f3732cbfa67271fc4b8ff56c418", "patch": "@@ -88,7 +88,11 @@ extern int target_flags;\n    Like -dalign in Sun cc.  */\n #define TARGET_HOPE_ALIGN (target_flags & 16)\n \n-/* Nonzero means that make sure all doubles are on 8-byte boundaries.  */\n+/* Nonzero means make sure all doubles are on 8-byte boundaries.\n+   This option results in a calling convention that is incompatible with\n+   every other sparc compiler in the world, and thus should only ever be\n+   used for experimenting.  Also, varargs won't work with it, but it doesn't\n+   seem worth trying to fix.  */\n #define TARGET_FORCE_ALIGN (target_flags & 32)\n \n /* Macro to define tables used to set the flags.\n@@ -559,14 +563,11 @@ extern char leaf_reg_backmap[];\n \n /* Offset of first parameter from the argument pointer register value.\n    This is 64 for the ins and locals, plus 4 for the struct-return reg\n-   even if this function isn't going to use it.  */\n-#define FIRST_PARM_OFFSET(FNDECL) (STRUCT_VALUE_OFFSET + UNITS_PER_WORD)\n-\n-/* Offset from top-of-stack address to location to store the\n-   function parameter if it can't go in a register.\n-   Addresses for following parameters are computed relative to this one.  */\n-#define FIRST_PARM_CALLER_OFFSET(FNDECL)\t\\\n-  (STRUCT_VALUE_OFFSET + UNITS_PER_WORD - STACK_POINTER_OFFSET)\n+   even if this function isn't going to use it.\n+   If TARGET_FORCE_ALIGN, we must reserve 4 more bytes to ensure that the\n+   stack remains aligned.  */\n+#define FIRST_PARM_OFFSET(FNDECL) \\\n+  (STRUCT_VALUE_OFFSET + UNITS_PER_WORD + (TARGET_FORCE_ALIGN ? 4 : 0))\n \n /* When a parameter is passed in a register, stack space is still\n    allocated for it.  */"}]}