{"sha": "ca90b9623d969a09ff5c54fca968d9cf65160049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5MGI5NjIzZDk2OWEwOWZmNWM1NGZjYTk2OGQ5Y2Y2NTE2MDA0OQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2016-05-02T10:29:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:29:12Z"}, "message": "exp_ch9.adb, [...]: Minor reformatting and typo fixes.\n\n2016-05-02  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch9.adb, sem_ch6.adb, sem_ch6.ads: Minor reformatting and typo\n\tfixes.\n\nFrom-SVN: r235741", "tree": {"sha": "3c69af14d8e5ba04b0e9a520ff10ab063f47b9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c69af14d8e5ba04b0e9a520ff10ab063f47b9fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca90b9623d969a09ff5c54fca968d9cf65160049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90b9623d969a09ff5c54fca968d9cf65160049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca90b9623d969a09ff5c54fca968d9cf65160049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90b9623d969a09ff5c54fca968d9cf65160049/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac5ba153d4e3c4aca45288c3009dcedabe64bb9"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "866df4e94c42869f6e294e77c0e11962b544ae00", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca90b9623d969a09ff5c54fca968d9cf65160049", "patch": "@@ -1,3 +1,8 @@\n+2016-05-02  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.adb, sem_ch6.adb, sem_ch6.ads: Minor reformatting and typo\n+\tfixes.\n+\n 2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb, exp_ch9.adb, einfo.adb, sem_ch4.adb, sem_ch6.adb: Minor"}, {"sha": "dc167225bd9f4ec33764c40e13fb0a97fad7b69e", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=ca90b9623d969a09ff5c54fca968d9cf65160049", "patch": "@@ -2641,7 +2641,7 @@ package body Exp_Ch9 is\n       pragma Assert (Is_Tagged_Type (Obj_Typ));\n \n       --  Check if this subprogram has a profile that matches some interface\n-      --  primitive\n+      --  primitive.\n \n       Check_Synchronized_Overriding (Subp_Id, Overridden_Subp);\n \n@@ -2694,8 +2694,8 @@ package body Exp_Ch9 is\n       end if;\n \n       --  Do not generate the wrapper if no interface primitive is covered by\n-      --  the subprogram and it is not a primitive declared declared between\n-      --  two views (see Process_Full_View).\n+      --  the subprogram and it is not a primitive declared between two views\n+      --  (see Process_Full_View).\n \n       if No (First_Param)\n         and then not Is_Private_Primitive_Subprogram (Subp_Id)\n@@ -4214,7 +4214,7 @@ package body Exp_Ch9 is\n         Make_Defining_Identifier (Loc,\n           Chars => Build_Selected_Name (Prot_Typ, Def_Id, Append_Chr (Mode)));\n \n-      --  Reference the original non-dispatching subprogram since the analysis\n+      --  Reference the original nondispatching subprogram since the analysis\n       --  of the object.operation notation may need its original name (see\n       --  Sem_Ch4.Names_Match).\n \n@@ -9648,7 +9648,7 @@ package body Exp_Ch9 is\n \n             --  Generate an overriding primitive operation specification for\n             --  this subprogram if the protected type implements an interface\n-            --  and Build_Wrapper_Spec did not not generate its wrapper.\n+            --  and Build_Wrapper_Spec did not generate its wrapper.\n \n             if Ada_Version >= Ada_2005\n               and then\n@@ -9800,7 +9800,7 @@ package body Exp_Ch9 is\n    -- Expand_N_Requeue_Statement --\n    --------------------------------\n \n-   --  A non-dispatching requeue statement is expanded into one of four GNARLI\n+   --  A nondispatching requeue statement is expanded into one of four GNARLI\n    --  operations, depending on the source and destination (task or protected\n    --  object). A dispatching requeue statement is expanded into a call to the\n    --  predefined primitive _Disp_Requeue. In addition, code is generated to\n@@ -10004,7 +10004,7 @@ package body Exp_Ch9 is\n       --  and perform the appropriate kind of dispatching select.\n \n       function Build_Normal_Requeue return Node_Id;\n-      --  N denotes a non-dispatching requeue statement to either a task or a\n+      --  N denotes a nondispatching requeue statement to either a task or a\n       --  protected entry. Build the appropriate runtime call to perform the\n       --  action.\n \n@@ -10556,7 +10556,7 @@ package body Exp_Ch9 is\n             end if;\n          end;\n \n-      --  Processing for regular (non-dispatching) requeues\n+      --  Processing for regular (nondispatching) requeues\n \n       else\n          Rewrite (N, Build_Normal_Requeue);\n@@ -12826,7 +12826,7 @@ package body Exp_Ch9 is\n              Else_Statements => D_Stats));\n \n       else\n-         --  Simple case of a non-dispatching trigger. Skip assignments to\n+         --  Simple case of a nondispatching trigger. Skip assignments to\n          --  temporaries created for in-out parameters.\n \n          --  This makes unwarranted assumptions about the shape of the expanded"}, {"sha": "cd6a6d4fcac812410d82e380bf3edd5918f53d81", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ca90b9623d969a09ff5c54fca968d9cf65160049", "patch": "@@ -3246,9 +3246,9 @@ package body Sem_Ch6 is\n                  --  modular analysis of the subprogram instead of a contextual\n                  --  analysis at each call site. The same test is performed in\n                  --  Inline.Can_Be_Inlined_In_GNATprove_Mode. It is repeated\n-                 --  here in another form (because the contract has not\n-                 --  been attached to the body) to avoid frontend errors in\n-                 --  case pragmas are used instead of aspects, because the\n+                 --  here in another form (because the contract has not been\n+                 --  attached to the body) to avoid front-end errors in case\n+                 --  pragmas are used instead of aspects, because the\n                  --  corresponding pragmas in the body would not be transferred\n                  --  to the spec, leading to legality errors.\n \n@@ -3743,7 +3743,7 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  Handle frontend inlining\n+      --  Handle front-end inlining\n \n       --  Note: Normally we don't do any inlining if expansion is off, since\n       --  we won't generate code in any case. An exception arises in GNATprove\n@@ -3756,7 +3756,7 @@ package body Sem_Ch6 is\n         and then Present (Spec_Id)\n         and then Has_Pragma_Inline (Spec_Id)\n       then\n-         --  Legacy implementation (relying on frontend inlining)\n+         --  Legacy implementation (relying on front-end inlining)\n \n          if not Back_End_Inlining then\n             if (Has_Pragma_Inline_Always (Spec_Id)\n@@ -3829,7 +3829,7 @@ package body Sem_Ch6 is\n \n       --  In GNATprove mode, inline only when there is a separate subprogram\n       --  declaration for now, as inlining of subprogram bodies acting as\n-      --  declarations, or subprogram stubs, are not supported by frontend\n+      --  declarations, or subprogram stubs, are not supported by front-end\n       --  inlining. This inlining should occur after analysis of the body, so\n       --  that it is known whether the value of SPARK_Mode, which can be\n       --  defined by a pragma inside the body, is applicable to the body.\n@@ -4074,7 +4074,7 @@ package body Sem_Ch6 is\n \n       begin\n          --  Skip initial labels (for one thing this occurs when we are in\n-         --  front end ZCX mode, but in any case it is irrelevant), and also\n+         --  front-end ZCX mode, but in any case it is irrelevant), and also\n          --  initial Push_xxx_Error_Label nodes, which are also irrelevant.\n \n          Stm := First (Statements (HSS));\n@@ -6550,8 +6550,8 @@ package body Sem_Ch6 is\n             return False;\n          end if;\n \n-         --  The checks on the object parameters are done, move onto the rest\n-         --  of the parameters.\n+         --  The checks on the object parameters are done, so move on to the\n+         --  rest of the parameters.\n \n          if not In_Scope then\n             Prim_Param := Next (Prim_Param);\n@@ -6616,7 +6616,7 @@ package body Sem_Ch6 is\n       Overridden_Subp := Empty;\n \n       --  Def_Id must be an entry or a subprogram. We should skip predefined\n-      --  primitives internally generated by the frontend; however at this\n+      --  primitives internally generated by the front end; however at this\n       --  stage predefined primitives are still not fully decorated. As a\n       --  minor optimization we skip here internally generated subprograms.\n \n@@ -6677,8 +6677,8 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  There is no overriding to check if is an inherited operation in a\n-      --  type derivation on for a generic actual.\n+      --  There is no overriding to check if this is an inherited operation in\n+      --  a type derivation for a generic actual.\n \n       Collect_Interfaces (Typ, Ifaces_List);\n \n@@ -6732,7 +6732,7 @@ package body Sem_Ch6 is\n                begin\n                   --  In order for an entry or a protected procedure to\n                   --  override, the first parameter of the overridden routine\n-                  --  must be of mode \"out\", \"in out\" or access-to-variable.\n+                  --  must be of mode \"out\", \"in out\", or access-to-variable.\n \n                   if Ekind_In (Candidate, E_Entry, E_Procedure)\n                     and then Is_Protected_Type (Typ)\n@@ -6760,15 +6760,14 @@ package body Sem_Ch6 is\n               and then Matches_Prefixed_View_Profile\n                          (Parameter_Specifications (Parent (Def_Id)),\n                           Parameter_Specifications (Parent (Subp)))\n-              and then Etype (Result_Definition (Parent (Def_Id))) =\n-                       Etype (Result_Definition (Parent (Subp)))\n+              and then Etype (Def_Id) = Etype (Subp)\n             then\n                Candidate := Subp;\n \n                --  If an inherited subprogram is implemented by a protected\n                --  function, then the first parameter of the inherited\n                --  subprogram shall be of mode in, but not an access-to-\n-               --  variable parameter (RM 9.4(11/9)\n+               --  variable parameter (RM 9.4(11/9)).\n \n                if Present (First_Formal (Subp))\n                  and then Ekind (First_Formal (Subp)) = E_In_Parameter\n@@ -6786,7 +6785,7 @@ package body Sem_Ch6 is\n          end loop;\n \n          --  After examining all candidates for overriding, we are left with\n-         --  the best match which is a mode incompatible interface routine.\n+         --  the best match, which is a mode-incompatible interface routine.\n \n          if In_Scope and then Present (Candidate) then\n             Error_Msg_PT (Def_Id, Candidate);\n@@ -9360,7 +9359,7 @@ package body Sem_Ch6 is\n       --  instances that contain accidental overloadings.\n \n       procedure Report_Conflict (S : Entity_Id; E : Entity_Id);\n-      --  Report conflict between entities S and E.\n+      --  Report conflict between entities S and E\n \n       ------------------------------------\n       -- Check_For_Primitive_Subprogram --\n@@ -9698,8 +9697,8 @@ package body Sem_Ch6 is\n            (E1_Param : Node_Id;\n             E2_Param : Node_Id) return Boolean;\n          --  Starting from the given parameters, check that all the parameters\n-         --  of two entries or subprograms are are subtype conformant. Used to\n-         --  skip the check on the controlling argument.\n+         --  of two entries or subprograms are subtype conformant. Used to skip\n+         --  the check on the controlling argument.\n \n          function Matching_Entry_Or_Subprogram\n            (Conc_Typ : Entity_Id;\n@@ -9712,7 +9711,7 @@ package body Sem_Ch6 is\n            (Conc_Typ : Entity_Id;\n             Ent      : Entity_Id) return Entity_Id;\n          --  Return the first dispatching primitive of Conc_Type defined in the\n-         --  enclosing scope of Conc_Type (ie. before the full definition of\n+         --  enclosing scope of Conc_Type (i.e. before the full definition of\n          --  this concurrent type) whose name matches the entry Ent and has a\n          --  profile conformant with the profile of the corresponding (not yet\n          --  built) dispatching primitive of Ent; return Empty if not found.\n@@ -9905,7 +9904,7 @@ package body Sem_Ch6 is\n          --  its profile is conformant with the profile of E. We check the\n          --  name of the original protected subprogram associated with E since\n          --  the expander builds dispatching primitives of protected functions\n-         --  and procedures with other name (see Exp_Ch9.Build_Selected_Name).\n+         --  and procedures with other names (see Exp_Ch9.Build_Selected_Name).\n \n          elsif not Comes_From_Source (E)\n            and then Is_Subprogram (E)\n@@ -9924,9 +9923,9 @@ package body Sem_Ch6 is\n                  Subp => E));\n             return True;\n \n-         --  Case : E is an entry of a synchronized type and a matching\n+         --  Case 3: E is an entry of a synchronized type and a matching\n          --  procedure has been previously defined in the enclosing scope\n-         --  of the synchronzed type.\n+         --  of the synchronized type.\n \n          elsif Comes_From_Source (E)\n            and then Ekind (E) = E_Entry\n@@ -10063,8 +10062,8 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  For synchronized types check conflicts of this entity with\n-      --  previously defined entities.\n+      --  For synchronized types check conflicts of this entity with previously\n+      --  defined entities.\n \n       if Ada_Version >= Ada_2005\n         and then Has_Matching_Entry_Or_Subprogram (S)\n@@ -11181,7 +11180,7 @@ package body Sem_Ch6 is\n          --  Discriminants\" in Einfo.\n \n          --  We also exclude the case of Discrim_SO_Functions (functions used\n-         --  in front end layout mode for size/offset values), since in such\n+         --  in front-end layout mode for size/offset values), since in such\n          --  functions only discriminants are referenced, and not only are such\n          --  subtypes not needed, but they cannot always be generated, because\n          --  of order of elaboration issues."}, {"sha": "c5d9b3ee251f9df95669bc4715d5279d25f3fd96", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90b9623d969a09ff5c54fca968d9cf65160049/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=ca90b9623d969a09ff5c54fca968d9cf65160049", "patch": "@@ -125,10 +125,10 @@ package Sem_Ch6 is\n    procedure Check_Synchronized_Overriding\n      (Def_Id          : Entity_Id;\n       Overridden_Subp : out Entity_Id);\n-   --  First determine if Def_Id is an entry or a subprogram either defined\n-   --  in the scope of a task or protected type, or is a primitive of such\n+   --  First determine if Def_Id is an entry or a subprogram either defined in\n+   --  the scope of a task or protected type, or that is a primitive of such\n    --  a type. Check whether Def_Id overrides a subprogram of an interface\n-   --  implemented by the synchronized type, return the overridden entity\n+   --  implemented by the synchronized type, returning the overridden entity\n    --  or Empty.\n \n    procedure Check_Type_Conformant"}]}