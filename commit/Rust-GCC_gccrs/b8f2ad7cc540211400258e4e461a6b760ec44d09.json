{"sha": "b8f2ad7cc540211400258e4e461a6b760ec44d09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhmMmFkN2NjNTQwMjExNDAwMjU4ZTRlNDYxYTZiNzYwZWM0NGQwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-13T22:25:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-13T22:25:12Z"}, "message": "re PR c++/48969 (ICE with -std=c++0x)\n\n\tPR c++/48969\n\t* pt.c (deduction_tsubst_fntype): New.\n\t(fn_type_unification): Use it.\n\nFrom-SVN: r173741", "tree": {"sha": "e214036feed4481cbe3c587323e0d207911a0d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e214036feed4481cbe3c587323e0d207911a0d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8f2ad7cc540211400258e4e461a6b760ec44d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f2ad7cc540211400258e4e461a6b760ec44d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f2ad7cc540211400258e4e461a6b760ec44d09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f2ad7cc540211400258e4e461a6b760ec44d09/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4877e471e3738add6d7724a6976dcbdee16c1702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4877e471e3738add6d7724a6976dcbdee16c1702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4877e471e3738add6d7724a6976dcbdee16c1702"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "9a42e3e3ac89264fa264ee18ff33615a57d99c18", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8f2ad7cc540211400258e4e461a6b760ec44d09", "patch": "@@ -1,5 +1,11 @@\n 2011-05-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48969\n+\t* pt.c (deduction_tsubst_fntype): New.\n+\t(fn_type_unification): Use it.\n+\t(init_template_processing): Initialize hash table.\n+\t(print_template_statistics): Print hash table stats.\n+\n \t* call.c (build_op_call): Use timevar_cond_start/stop.\n \t(build_user_type_conversion): Likewise.\n "}, {"sha": "f155c1ab61d3bacf083cca177a9dd6c041db6da1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b8f2ad7cc540211400258e4e461a6b760ec44d09", "patch": "@@ -13525,6 +13525,53 @@ check_instantiated_args (tree tmpl, tree args, tsubst_flags_t complain)\n   return result;\n }\n \n+static GTY((param_is (spec_entry))) htab_t current_deduction_substs;\n+\n+/* In C++0x, it's possible to have a function template whose type depends\n+   on itself recursively.  This is most obvious with decltype, but can also\n+   occur with enumeration scope (c++/48969).  So we need to catch infinite\n+   recursion and reject the substitution at deduction time.  */\n+\n+static tree\n+deduction_tsubst_fntype (tree fn, tree targs)\n+{\n+  spec_entry **slot;\n+  spec_entry elt;\n+  tree r;\n+  hashval_t hash;\n+\n+  tree fntype = TREE_TYPE (fn);\n+\n+  /* We don't need to worry about this in C++98.  */\n+  if (cxx_dialect < cxx0x)\n+    return tsubst (fntype, targs, tf_none, NULL_TREE);\n+\n+  elt.tmpl = fn;\n+  elt.args = targs;\n+  elt.spec = NULL_TREE;\n+  hash = hash_specialization (&elt);\n+\n+  slot = (spec_entry **)\n+    htab_find_slot_with_hash (current_deduction_substs, &elt, hash, INSERT);\n+  if (*slot)\n+    /* We already have an entry for this.  */\n+    (*slot)->spec = r = error_mark_node;\n+  else\n+    {\n+      /* Create a new entry.  */\n+      spec_entry *p = *slot = ggc_alloc_spec_entry ();\n+      *p = elt;\n+\n+      r = tsubst (fntype, targs, tf_none, NULL_TREE);\n+      if (p->spec == error_mark_node)\n+\tr = error_mark_node;\n+\n+      htab_remove_elt_with_hash (current_deduction_substs, p, hash);\n+    }\n+\n+  return r;\n+}\n+\n /* Instantiate the indicated variable or function template TMPL with\n    the template arguments in TARG_PTR.  */\n \n@@ -13788,7 +13835,7 @@ fn_type_unification (tree fn,\n         incomplete = NUM_TMPL_ARGS (explicit_targs) != NUM_TMPL_ARGS (targs);\n \n       processing_template_decl += incomplete;\n-      fntype = tsubst (fntype, converted_args, tf_none, NULL_TREE);\n+      fntype = deduction_tsubst_fntype (fn, converted_args);\n       processing_template_decl -= incomplete;\n \n       if (fntype == error_mark_node)\n@@ -13859,7 +13906,7 @@ fn_type_unification (tree fn,\n        substitution results in an invalid type, as described above,\n        type deduction fails.  */\n     {\n-      tree substed = tsubst (TREE_TYPE (fn), targs, tf_none, NULL_TREE);\n+      tree substed = deduction_tsubst_fntype (fn, targs);\n       if (substed == error_mark_node)\n \treturn 1;\n \n@@ -19283,6 +19330,10 @@ init_template_processing (void)\n \t\t\t\t\t  hash_specialization,\n \t\t\t\t\t  eq_specializations,\n \t\t\t\t\t  ggc_free);\n+  if (cxx_dialect >= cxx0x)\n+    current_deduction_substs = htab_create_ggc (37, hash_specialization,\n+\t\t\t\t\t\teq_specializations,\n+\t\t\t\t\t\tggc_free);\n }\n \n /* Print stats about the template hash tables for -fstats.  */\n@@ -19298,6 +19349,10 @@ print_template_statistics (void)\n \t   \"%f collisions\\n\", (long) htab_size (type_specializations),\n \t   (long) htab_elements (type_specializations),\n \t   htab_collisions (type_specializations));\n+  fprintf (stderr, \"current_deduction_substs: size %ld, %ld elements, \"\n+\t   \"%f collisions\\n\", (long) htab_size (current_deduction_substs),\n+\t   (long) htab_elements (current_deduction_substs),\n+\t   htab_collisions (current_deduction_substs));\n }\n \n #include \"gt-cp-pt.h\""}, {"sha": "1f20a8f13c15d37062cc70f2aed7ef2cfc616ced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8f2ad7cc540211400258e4e461a6b760ec44d09", "patch": "@@ -1,3 +1,8 @@\n+2011-05-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/decltype26.C: New.\n+\t* g++.dg/cpp0x/enum11.C: New.\n+\n 2011-05-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48972"}, {"sha": "9eb94116a6d06753c37be8286a1d0a32cf7d950b", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype26.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C?ref=b8f2ad7cc540211400258e4e461a6b760ec44d09", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -std=c++0x }\n+\n+struct A { };\n+\n+template <class T>\n+decltype(f(T())) f(T t)\n+{\n+  return f(t);\n+}\n+\n+int main()\n+{\n+  f(A());\t\t\t// { dg-error \"no match\" }\n+}\n+\n+// { dg-prune-output \"note\" }"}, {"sha": "98b6b00c6b4c0523c5ce0d675dff51045c9f7937", "filename": "gcc/testsuite/g++.dg/cpp0x/enum11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f2ad7cc540211400258e4e461a6b760ec44d09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C?ref=b8f2ad7cc540211400258e4e461a6b760ec44d09", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/48969\n+// { dg-options -std=c++0x }\n+\n+template<unsigned int N> struct Pair { };\n+struct Foo { enum { Mask = 1 }; } foo;\n+template<typename A, typename B> class Pair<A::Mask | B::Mask>\n+operator|(const A &, const B &)\n+{ }\n+\n+Pair<Foo::Mask> f = foo|foo;"}]}