{"sha": "2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzOTY0NzYzYTljMGYxMmNjMTViMmI3ODdlM2QwZWQ1YzkzY2E2Mw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-01-21T22:57:49Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-01-21T22:57:49Z"}, "message": "pa-protos.h (reg_before_reload_operand): New function prototype.\n\n\t* pa-protos.h (reg_before_reload_operand): New function prototype.\n\t* pa.c (reg_before_reload_operand): New function implementation.\n\t* pa.md (decrement_and_branch_until_zero, movb): Use it.  Change \"!*m\"\n\tcontraints to \"*m\".\n\nFrom-SVN: r49058", "tree": {"sha": "9828f88120bec160ceaa396807c48710a31f7fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9828f88120bec160ceaa396807c48710a31f7fd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/comments", "author": null, "committer": null, "parents": [{"sha": "3b5708e7e67f0e50a7d67545d898ac69cdbb9846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5708e7e67f0e50a7d67545d898ac69cdbb9846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5708e7e67f0e50a7d67545d898ac69cdbb9846"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "513425dcf8cddf59cfdf00e31b19b6efa7a6554a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "patch": "@@ -1,3 +1,10 @@\n+2002-01-21  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa-protos.h (reg_before_reload_operand): New function prototype.\n+\t* pa.c (reg_before_reload_operand): New function implementation.\n+\t* pa.md (decrement_and_branch_until_zero, movb): Use it.  Change \"!*m\"\n+\tcontraints to \"*m\".\n+\n 2002-01-21  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* combine.c (simplify_and_const_int): Properly sign-extend CONSTOP."}, {"sha": "0c81ae0681483820de1e30a41dcc03347dce9aa3", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for pa.c functions used in the md file & elsewhere.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -83,6 +83,7 @@ extern int ior_operand PARAMS ((rtx, enum machine_mode));\n extern int arith32_operand PARAMS ((rtx, enum machine_mode));\n extern int uint32_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_nonsymb_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_before_reload_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_0_or_nonsymb_mem_operand PARAMS ((rtx, enum machine_mode));\n extern int pre_cint_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "40fe3dab139f41c9bb47b8252cd401450e517417", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "patch": "@@ -364,6 +364,28 @@ reg_or_0_or_nonsymb_mem_operand (op, mode)\n   return 0;\n }\n \n+/* Return 1 if the operand is a register operand or a non-symbolic memory\n+   operand after reload.  This predicate is used for branch patterns that\n+   internally handle register reloading.  We need to accept non-symbolic\n+   memory operands after reload to ensure that the pattern is still valid\n+   if reload didn't find a hard register for the operand.  */\n+\n+int\n+reg_before_reload_operand (op, mode)\n+    register rtx op;\n+    enum machine_mode mode;\n+{\n+  if (register_operand (op, mode))\n+    return 1;\n+\n+  if (reload_completed\n+      && memory_operand (op, mode)\n+      && ! symbolic_memory_operand (op, mode))\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Accept any constant that can be moved in one instructions into a\n    general register.  */\n int"}, {"sha": "846cc49fc72ace26332d58995a469c5018f960d7", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2e3964763a9c0f12cc15b2b787e3d0ed5c93ca63", "patch": "@@ -6589,7 +6589,7 @@\n \t(if_then_else\n \t  (match_operator 2 \"comparison_operator\"\n \t   [(plus:SI\n-\t      (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\" \"+!r,!*f,!*m\")\n+\t      (match_operand:SI 0 \"reg_before_reload_operand\" \"+!r,!*f,*m\")\n \t      (match_operand:SI 1 \"int5_operand\" \"L,L,L\"))\n \t    (const_int 0)])\n \t  (label_ref (match_operand 3 \"\" \"\"))\n@@ -6646,7 +6646,7 @@\n \t   [(match_operand:SI 1 \"register_operand\" \"r,r,r,r\") (const_int 0)])\n \t  (label_ref (match_operand 3 \"\" \"\"))\n \t  (pc)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=!r,!*f,!*m,!*q\")\n+   (set (match_operand:SI 0 \"reg_before_reload_operand\" \"=!r,!*f,*m,!*q\")\n \t(match_dup 1))]\n   \"\"\n \"* return output_movb (operands, insn, which_alternative, 0); \"\n@@ -6692,7 +6692,7 @@\n \t   [(match_operand:SI 1 \"register_operand\" \"r,r,r,r\") (const_int 0)])\n \t  (pc)\n \t  (label_ref (match_operand 3 \"\" \"\"))))\n-   (set (match_operand:SI 0 \"register_operand\" \"=!r,!*f,!*m,!*q\")\n+   (set (match_operand:SI 0 \"reg_before_reload_operand\" \"=!r,!*f,*m,!*q\")\n \t(match_dup 1))]\n   \"\"\n \"* return output_movb (operands, insn, which_alternative, 1); \""}]}