{"sha": "d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0YmU1ZTAyZDRhMjUyNDFlNmUzYjFjZmJmMDk4YjVmMWI2OGIzOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-12-15T08:37:41Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-12-15T08:37:41Z"}, "message": "re PR fortran/41235 (Missing explicit interface for variable-length character functions)\n\n2009-12-15  Tobias Burnus  <burnus@net-b.de>\n            Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/41235\n        * resolve.c (resolve_global_procedure): Add check for\n        presence of an explicit interface for nonconstant,\n        nonassumed character-length functions.\n        (resolve_fl_procedure): Remove check for nonconstant\n        character-length functions.\n\n2009-12-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41235\n        * auto_char_len_1.f90: New test.\n        * auto_char_len_2.f90: New test.\n        * auto_char_len_4.f90: Correct test.\n\nFrom-SVN: r155247", "tree": {"sha": "92ef7de4a9cf22100b58f3b5c8cbf637eab6a487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ef7de4a9cf22100b58f3b5c8cbf637eab6a487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/comments", "author": null, "committer": null, "parents": [{"sha": "0857d1f0b1161a03207d64708f083c16880a65f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0857d1f0b1161a03207d64708f083c16880a65f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0857d1f0b1161a03207d64708f083c16880a65f8"}], "stats": {"total": 136, "additions": 112, "deletions": 24}, "files": [{"sha": "7e0a55183dd5471f7342d2fa13b594e3c1932277", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -1,3 +1,13 @@\n+2009-12-15  Tobias Burnus  <burnus@net-b.de>\n+\t    Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/41235\n+\t* resolve.c (resolve_global_procedure): Add check for\n+\tpresence of an explicit interface for nonconstant,\n+\tnonassumed character-length functions.\n+\t(resolve_fl_procedure): Remove check for nonconstant\n+\tcharacter-length functions.\n+\n 2009-12-14  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/42354\n@@ -10,13 +20,13 @@\n \n 2009-12-11  Daniel Franke  <franke.daniel@gmail.com>\n \n-        PR fortran/40290\n-        * expr.c (gfc_type_convert_binary): Added warn-on-conversion flag,\n-        passed on to gfc_convert_type_warn() instead of gfc_convert_type();\n-        enabled warnings on all callers but ...\n-        * arith.c (eval_intrinsic): Disabled warnings on implicit type\n-        conversion.\n-        * gfortran.h gfc_type_convert_binary): Adjusted prototype.\n+\tPR fortran/40290\n+\t* expr.c (gfc_type_convert_binary): Added warn-on-conversion flag,\n+\tpassed on to gfc_convert_type_warn() instead of gfc_convert_type();\n+\tenabled warnings on all callers but ...\n+\t* arith.c (eval_intrinsic): Disabled warnings on implicit type\n+\tconversion.\n+\t* gfortran.h gfc_type_convert_binary): Adjusted prototype.\n \n 2009-12-11 Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "78b0a7850d6c1a22c595997b2f884e91aab5626d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -1830,6 +1830,21 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \tgfc_error (\"The reference to function '%s' at %L either needs an \"\n \t\t   \"explicit INTERFACE or the rank is incorrect\", sym->name,\n \t\t   where);\n+     \n+      /* Non-assumed length character functions.  */\n+      if (sym->attr.function && sym->ts.type == BT_CHARACTER\n+\t  && gsym->ns->proc_name->ts.u.cl->length != NULL)\n+\t{\n+\t  gfc_charlen *cl = sym->ts.u.cl;\n+\n+\t  if (!sym->attr.entry_master && sym->attr.if_source == IFSRC_UNKNOWN\n+              && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n+\t    {\n+              gfc_error (\"Nonconstant character-length function '%s' at %L \"\n+\t\t\t \"must have an explicit interface\", sym->name,\n+\t\t\t &sym->declared_at);\n+\t    }\n+\t}\n \n       if (gfc_option.flag_whole_file == 1\n \t    || ((gfc_option.warn_std & GFC_STD_LEGACY)\n@@ -9038,23 +9053,12 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t     && resolve_charlen (cl) == FAILURE)\n \treturn FAILURE;\n \n-      if (!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT)\n+      if ((!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT)\n+\t  && sym->attr.proc == PROC_ST_FUNCTION)\n \t{\n-\t  if (sym->attr.proc == PROC_ST_FUNCTION)\n-\t    {\n-\t      gfc_error (\"Character-valued statement function '%s' at %L must \"\n-\t\t\t \"have constant length\", sym->name, &sym->declared_at);\n-\t      return FAILURE;\n-\t    }\n-\n-\t  if (sym->attr.external && sym->formal == NULL\n-\t      && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n-\t    {\n-\t      gfc_error (\"Automatic character length function '%s' at %L must \"\n-\t\t\t \"have an explicit interface\", sym->name,\n-\t\t\t &sym->declared_at);\n-\t      return FAILURE;\n-\t    }\n+\t  gfc_error (\"Character-valued statement function '%s' at %L must \"\n+\t\t     \"have constant length\", sym->name, &sym->declared_at);\n+\t  return FAILURE;\n \t}\n     }\n "}, {"sha": "eb9cf471eeebe7f816539d15aae0d570956e5092", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -1,3 +1,10 @@\n+2009-12-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41235\n+\t* auto_char_len_1.f90: New test.\n+\t* auto_char_len_2.f90: New test.\n+\t* auto_char_len_4.f90: Correct test.\n+\n 2009-12-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42364"}, {"sha": "628e6e9148e89e921468983e618398ca6022e808", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_1.f90?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"\" }\n+! [option to disable -pedantic as assumed character length\n+!  functions are obsolescent]\n+!\n+! PR fortran/41235\n+!\n+\n+character(len=*) function func()\n+  func = 'ABC'\n+end function func\n+\n+subroutine test(i)\n+  integer :: i\n+  character(len=i), external :: func\n+  print *, func()\n+end subroutine test\n+\n+subroutine test2(i)\n+  integer :: i\n+  character(len=i) :: func\n+  print *, func()\n+end subroutine test2\n+\n+call test(2)\n+call test2(2)\n+end"}, {"sha": "95825c4205a926701e0b0f0acf0f30cfd5f189a8", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fwhole-file\" }\n+!\n+! PR fortran/41235\n+!\n+\n+character(len=*) function func()\n+  func = 'ABC'\n+end function func\n+\n+subroutine test(i)\n+  integer :: i\n+  character(len=i), external :: func\n+  print *, func()\n+end subroutine test\n+\n+subroutine test2(i)\n+  integer :: i\n+  character(len=i) :: func\n+  print *, func()\n+end subroutine test2\n+\n+call test(2)\n+call test2(2)\n+end"}, {"sha": "6b4e26e6b453f8168d702b533be1a3064d936719", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_4.f90", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90?ref=d94be5e02d4a25241e6e3b1cfbf098b5f1b68b39", "patch": "@@ -1,24 +1,39 @@\n ! { dg-do compile }\n+! { dg-options \"-fwhole-file\" }\n+!\n ! Tests the fix for PR25087, in which the following invalid code\n ! was not detected.\n !\n ! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n !\n+! Modified by Tobias Burnus to fix PR fortran/41235.\n+!\n+FUNCTION a()\n+  CHARACTER(len=10) :: a\n+  a = ''\n+END FUNCTION a\n+\n SUBROUTINE s(n)\n   CHARACTER(LEN=n), EXTERNAL :: a ! { dg-error \"must have an explicit interface\" }\n+  CHARACTER(LEN=n), EXTERNAL :: d ! { dg-error \"must have an explicit interface\" }\n   interface\n     function b (m)                ! This is OK\n       CHARACTER(LEN=m) :: b\n       integer :: m\n     end function b\n   end interface\n-  write(6,*) a(n)\n+  write(6,*) a()\n   write(6,*) b(n)\n   write(6,*) c()\n+  write(6,*) d()\n contains\n     function c ()                ! This is OK\n       CHARACTER(LEN=n):: c\n       c = \"\"\n     end function c\n END SUBROUTINE s\n \n+FUNCTION d()\n+  CHARACTER(len=99) :: d\n+  d = ''\n+END FUNCTION d"}]}