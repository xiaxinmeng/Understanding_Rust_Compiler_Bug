{"sha": "bbdf56821d76d939438fc91d7b921a387ac4e498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkZjU2ODIxZDc2ZDkzOTQzOGZjOTFkN2I5MjFhMzg3YWM0ZTQ5OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-10-10T18:22:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-10T18:22:17Z"}, "message": "re PR c++/37146 (Invalid types with COND_EXPR)\n\n\tPR c++/37146\n\t* cp-gimplify.c (cp_genericize_r): Fix up bitfield operands of\n\tCOND_EXPR.\n\n\t* g++.dg/torture/pr37146-1.C: New test.\n\t* g++.dg/torture/pr37146-2.C: New test.\n\t* g++.dg/expr/bitfield10.C: New test.\n\nFrom-SVN: r141045", "tree": {"sha": "2b5676fd735f4abebca2c0c12519e44ac76713d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5676fd735f4abebca2c0c12519e44ac76713d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbdf56821d76d939438fc91d7b921a387ac4e498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf56821d76d939438fc91d7b921a387ac4e498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdf56821d76d939438fc91d7b921a387ac4e498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf56821d76d939438fc91d7b921a387ac4e498/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e14165f41af35dad913956a1edaad7874daba6f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14165f41af35dad913956a1edaad7874daba6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14165f41af35dad913956a1edaad7874daba6f4"}], "stats": {"total": 207, "additions": 207, "deletions": 0}, "files": [{"sha": "6b38199aa55c78ecedbf522ae645256dcc026aa5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -1,3 +1,9 @@\n+2008-10-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37146\n+\t* cp-gimplify.c (cp_genericize_r): Fix up bitfield operands of\n+\tCOND_EXPR.\n+\n 2008-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37568"}, {"sha": "1641be5ebdc17cec803f39b260d349e815672ffb", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -803,6 +803,34 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t\t      CLEANUP_BODY (stmt),\n \t\t      CLEANUP_EXPR (stmt));\n \n+  /* COND_EXPR might have incompatible types in branches if one or both\n+     arms are bitfields.  Fix it up now.  */\n+  else if (TREE_CODE (stmt) == COND_EXPR)\n+    {\n+      tree type_left\n+\t= (TREE_OPERAND (stmt, 1)\n+\t   ? is_bitfield_expr_with_lowered_type (TREE_OPERAND (stmt, 1))\n+\t   : NULL_TREE);\n+      tree type_right\n+\t= (TREE_OPERAND (stmt, 2)\n+\t   ? is_bitfield_expr_with_lowered_type (TREE_OPERAND (stmt, 2))\n+\t   : NULL_TREE);\n+      if (type_left)\n+\t{\n+\t  TREE_OPERAND (stmt, 1)\n+\t    = fold_convert (type_left, TREE_OPERAND (stmt, 1));\n+\t  gcc_assert (useless_type_conversion_p (TREE_TYPE (stmt),\n+\t\t\t\t\t\t type_left));\n+\t}\n+      if (type_right)\n+\t{\n+\t  TREE_OPERAND (stmt, 2)\n+\t    = fold_convert (type_right, TREE_OPERAND (stmt, 2));\n+\t  gcc_assert (useless_type_conversion_p (TREE_TYPE (stmt),\n+\t\t\t\t\t\t type_right));\n+\t}\n+    }\n+\n   pointer_set_insert (p_set, *stmt_p);\n \n   return NULL;"}, {"sha": "92a0f4102fb74a249485886ea67f510364b2647e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -1,3 +1,10 @@\n+2008-10-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37146\n+\t* g++.dg/torture/pr37146-1.C: New test.\n+\t* g++.dg/torture/pr37146-2.C: New test.\n+\t* g++.dg/expr/bitfield10.C: New test.\n+\n 2008-10-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org\n \n \tPR libfortran/37707"}, {"sha": "0a6581e32b70217bfcd1b68ad719b54e3cdb3c2b", "filename": "gcc/testsuite/g++.dg/expr/bitfield10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield10.C?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/37146\n+// { dg-do compile }\n+\n+enum E { E0 = 0, E1 = 'E' };\n+\n+struct S\n+{\n+  E s0 : 8;\n+  enum E foo (bool, E);\n+};\n+\n+E\n+S::foo (bool a, E b)\n+{\n+  return a ? s0 : b;\n+}"}, {"sha": "ea65226f13dfdbb95181cfa9f742565c7b73757b", "filename": "gcc/testsuite/g++.dg/torture/pr37146-1.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-1.C?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -0,0 +1,83 @@\n+// PR c++/37146\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+int a, b;\n+struct A { int i:8; int j:8; int k:16; int l:32; } c;\n+\n+void\n+f1 (int x, int y)\n+{\n+  (x ? a : b) = y;\n+}\n+\n+void\n+f2 (int x, int y)\n+{\n+  (x ? c.i : c.j) = y;\n+}\n+\n+void\n+f3 (int x, int y)\n+{\n+  (x ? c.i : a) = y;\n+}\n+\n+void\n+f4 (int x, int y)\n+{\n+  (x ? c.i : c.k) = y;\n+}\n+\n+void\n+f5 (int x, int y)\n+{\n+  (x ? c.l : b) = y;\n+}\n+\n+#define CHECK(var, exp)\t\t\\\n+  do\t\t\t\t\\\n+    {\t\t\t\t\\\n+      if (var != exp)\t\t\\\n+\t abort ();\t\t\\\n+      var = -1;\t\t\t\\\n+      if (a != -1\t\t\\\n+\t  || b != -1\t\t\\\n+\t  || c.i != -1\t\t\\\n+\t  || c.j != -1\t\t\\\n+\t  || c.k != -1\t\t\\\n+\t  || c.l != -1)\t\t\\\n+\tabort ();\t\t\\\n+    }\t\t\t\t\\\n+  while (0)\n+\n+int\n+main ()\n+{\n+  a = -1;\n+  b = -1;\n+  c.i = -1;\n+  c.j = -1;\n+  c.k = -1;\n+  c.l = -1;\n+  f1 (1, 264);\n+  CHECK (a, 264);\n+  f1 (0, 264);\n+  CHECK (b, 264);\n+  f2 (1, 112);\n+  CHECK (c.i, 112);\n+  f2 (0, 112);\n+  CHECK (c.j, 112);\n+  f3 (1, 26);\n+  CHECK (c.i, 26);\n+  f3 (0, 26);\n+  CHECK (a, 26);\n+  f4 (1, 107);\n+  CHECK (c.i, 107);\n+  f4 (0, 107);\n+  CHECK (c.k, 107);\n+  f5 (1, 95);\n+  CHECK (c.l, 95);\n+  f5 (0, 95);\n+  CHECK (b, 95);\n+}"}, {"sha": "2a541769492232b830e354223a9353f12c18d5ed", "filename": "gcc/testsuite/g++.dg/torture/pr37146-2.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf56821d76d939438fc91d7b921a387ac4e498/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37146-2.C?ref=bbdf56821d76d939438fc91d7b921a387ac4e498", "patch": "@@ -0,0 +1,67 @@\n+// PR c++/37146\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+int a, b;\n+struct A { int i:8; int j:8; int k:16; int l:32; } c;\n+\n+int\n+f1 (int x)\n+{\n+  return x ? a : b;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  return x ? c.i : c.j;\n+}\n+\n+int\n+f3 (int x)\n+{\n+  return x ? c.i : a;\n+}\n+\n+int\n+f4 (int x)\n+{\n+  return x ? c.i : c.k;\n+}\n+\n+int\n+f5 (int x)\n+{\n+  return x ? c.l : b;\n+}\n+\n+int\n+main ()\n+{\n+  a = 17;\n+  b = 18;\n+  c.i = 19;\n+  c.j = 20;\n+  c.k = 21;\n+  c.l = 22;\n+  if (f1 (1) != a)\n+    abort ();\n+  if (f1 (0) != b)\n+    abort ();\n+  if (f2 (1) != c.i)\n+    abort ();\n+  if (f2 (0) != c.j)\n+    abort ();\n+  if (f3 (1) != c.i)\n+    abort ();\n+  if (f3 (0) != a)\n+    abort ();\n+  if (f4 (1) != c.i)\n+    abort ();\n+  if (f4 (0) != c.k)\n+    abort ();\n+  if (f5 (1) != c.l)\n+    abort ();\n+  if (f5 (0) != b)\n+    abort ();\n+}"}]}