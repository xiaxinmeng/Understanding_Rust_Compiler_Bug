{"sha": "80cab2f00f15d8e04e946f5c536825be2865ba89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjYWIyZjAwZjE1ZDhlMDRlOTQ2ZjVjNTM2ODI1YmUyODY1YmE4OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-13T19:19:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-13T19:19:57Z"}, "message": "i386.c (ix86_expand_movmem, [...]): Avoid processing too many bytes on misalligned blocks.\n\n\n\t* i386.c (ix86_expand_movmem, ix86_expand_movstr): Avoid processing too\n\tmany bytes on misalligned blocks.\n\nFrom-SVN: r140348", "tree": {"sha": "c19f3d2901447f8c6067288ddc9ae197bba8fd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c19f3d2901447f8c6067288ddc9ae197bba8fd14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80cab2f00f15d8e04e946f5c536825be2865ba89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cab2f00f15d8e04e946f5c536825be2865ba89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cab2f00f15d8e04e946f5c536825be2865ba89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cab2f00f15d8e04e946f5c536825be2865ba89/comments", "author": null, "committer": null, "parents": [{"sha": "d1facce0e3947c1761f18f384adeb51de4411847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1facce0e3947c1761f18f384adeb51de4411847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1facce0e3947c1761f18f384adeb51de4411847"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "d93fec3b6cae92013f0adfc33b123840c9c7eb04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cab2f00f15d8e04e946f5c536825be2865ba89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cab2f00f15d8e04e946f5c536825be2865ba89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80cab2f00f15d8e04e946f5c536825be2865ba89", "patch": "@@ -1,3 +1,8 @@\n+2008-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_expand_movmem, ix86_expand_movstr): Avoid processing too\n+\tmany bytes on misalligned blocks.\n+\n 2008-09-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/cfg.texi: Fix some typos."}, {"sha": "79531a3d5a1832e0e94823f09d24bfbe15a88f4a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cab2f00f15d8e04e946f5c536825be2865ba89/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cab2f00f15d8e04e946f5c536825be2865ba89/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=80cab2f00f15d8e04e946f5c536825be2865ba89", "patch": "@@ -17222,6 +17222,7 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n   int desired_align = 0;\n   enum stringop_alg alg;\n   int dynamic_check;\n+  bool need_zero_guard = false;\n \n   if (CONST_INT_P (align_exp))\n     align = INTVAL (align_exp);\n@@ -17260,9 +17261,11 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n     case no_stringop:\n       gcc_unreachable ();\n     case loop:\n+      need_zero_guard = true;\n       size_needed = GET_MODE_SIZE (Pmode);\n       break;\n     case unrolled_loop:\n+      need_zero_guard = true;\n       size_needed = GET_MODE_SIZE (Pmode) * (TARGET_64BIT ? 4 : 2);\n       break;\n     case rep_prefix_8_byte:\n@@ -17272,7 +17275,10 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n       size_needed = 4;\n       break;\n     case rep_prefix_1_byte:\n+      size_needed = 1;\n+      break;\n     case loop_1_byte:\n+      need_zero_guard = true;\n       size_needed = 1;\n       break;\n     }\n@@ -17350,6 +17356,19 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n       dst = change_address (dst, BLKmode, destreg);\n       expand_movmem_prologue (dst, src, destreg, srcreg, count_exp, align,\n \t\t\t      desired_align);\n+      if (need_zero_guard && !count)\n+\t{\n+\t  /* It is possible that we copied enough so the main loop will not\n+\t     execute.  */\n+\t  emit_cmp_and_jump_insns (count_exp,\n+\t\t\t\t   GEN_INT (size_needed),\n+\t\t\t\t   LTU, 0, counter_mode (count_exp), 1, label);\n+\t  if (expected_size == -1\n+\t      || expected_size < (desired_align - align) / 2 + size_needed)\n+\t    predict_jump (REG_BR_PROB_BASE * 20 / 100);\n+\t  else\n+\t    predict_jump (REG_BR_PROB_BASE * 60 / 100);\n+\t}\n     }\n   if (label && size_needed == 1)\n     {\n@@ -17550,6 +17569,7 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n   rtx promoted_val = NULL;\n   bool force_loopy_epilogue = false;\n   int dynamic_check;\n+  bool need_zero_guard = false;\n \n   if (CONST_INT_P (align_exp))\n     align = INTVAL (align_exp);\n@@ -17587,9 +17607,11 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n     case no_stringop:\n       gcc_unreachable ();\n     case loop:\n+      need_zero_guard = true;\n       size_needed = GET_MODE_SIZE (Pmode);\n       break;\n     case unrolled_loop:\n+      need_zero_guard = true;\n       size_needed = GET_MODE_SIZE (Pmode) * 4;\n       break;\n     case rep_prefix_8_byte:\n@@ -17599,7 +17621,10 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n       size_needed = 4;\n       break;\n     case rep_prefix_1_byte:\n+      size_needed = 1;\n+      break;\n     case loop_1_byte:\n+      need_zero_guard = true;\n       size_needed = 1;\n       break;\n     }\n@@ -17675,6 +17700,19 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n       dst = change_address (dst, BLKmode, destreg);\n       expand_setmem_prologue (dst, destreg, promoted_val, count_exp, align,\n \t\t\t      desired_align);\n+      if (need_zero_guard && !count)\n+\t{\n+\t  /* It is possible that we copied enough so the main loop will not\n+\t     execute.  */\n+\t  emit_cmp_and_jump_insns (count_exp,\n+\t\t\t\t   GEN_INT (size_needed),\n+\t\t\t\t   LTU, 0, counter_mode (count_exp), 1, label);\n+\t  if (expected_size == -1\n+\t      || expected_size < (desired_align - align) / 2 + size_needed)\n+\t    predict_jump (REG_BR_PROB_BASE * 20 / 100);\n+\t  else\n+\t    predict_jump (REG_BR_PROB_BASE * 60 / 100);\n+\t}\n     }\n   if (label && size_needed == 1)\n     {"}]}