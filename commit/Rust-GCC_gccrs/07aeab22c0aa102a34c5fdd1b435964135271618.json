{"sha": "07aeab22c0aa102a34c5fdd1b435964135271618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhZWFiMjJjMGFhMTAyYTM0YzVmZGQxYjQzNTk2NDEzNTI3MTYxOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-18T23:31:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-18T23:31:17Z"}, "message": "(assemble_variable): Likewise.\n\nFrom-SVN: r6819", "tree": {"sha": "87ab8ec3694d85c65b7e7774bee251a3bec11712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ab8ec3694d85c65b7e7774bee251a3bec11712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07aeab22c0aa102a34c5fdd1b435964135271618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aeab22c0aa102a34c5fdd1b435964135271618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07aeab22c0aa102a34c5fdd1b435964135271618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aeab22c0aa102a34c5fdd1b435964135271618/comments", "author": null, "committer": null, "parents": [{"sha": "bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "17117c0f8b48b223ec09f16bc1ecd2367c99eace", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aeab22c0aa102a34c5fdd1b435964135271618/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aeab22c0aa102a34c5fdd1b435964135271618/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=07aeab22c0aa102a34c5fdd1b435964135271618", "patch": "@@ -1142,11 +1142,22 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     named_section (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)));\n   else\n     {\n+      /* C++ can have const variables that get initialized from constructors,\n+\t and thus can not be in a readonly section.  We prevent this by\n+\t verifying that the initial value is constant for objects put in a\n+\t readonly section.\n+\n+\t error_mark_node is used by the C front end to indicate that the\n+\t initializer has not been seen yet.  In this case, we assume that\n+\t the initializer must be constant.  */\n #ifdef SELECT_SECTION\n       SELECT_SECTION (decl, reloc);\n #else\n       if (TREE_READONLY (decl)\n \t  && ! TREE_THIS_VOLATILE (decl)\n+\t  && DECL_INITIAL (decl)\n+\t  && (DECL_INITIAL (decl) == error_mark_node\n+\t      || TREE_CONSTANT (DECL_INITIAL (decl)))\n \t  && ! (flag_pic && reloc))\n \treadonly_data_section ();\n       else\n@@ -1194,6 +1205,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #else\n       if (TREE_READONLY (decl)\n \t  && ! TREE_THIS_VOLATILE (decl)\n+\t  && DECL_INITIAL (decl)\n+\t  && (DECL_INITIAL (decl) == error_mark_node\n+\t      || TREE_CONSTANT (DECL_INITIAL (decl)))\n \t  && ! (flag_pic && reloc))\n \treadonly_data_section ();\n       else\n@@ -1289,6 +1303,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #else\n \t  if (TREE_READONLY (decl)\n \t      && ! TREE_THIS_VOLATILE (decl)\n+\t      && DECL_INITIAL (decl)\n+\t      && (DECL_INITIAL (decl) == error_mark_node\n+\t\t  || TREE_CONSTANT (DECL_INITIAL (decl)))\n \t      && ! (flag_pic && reloc))\n \t    readonly_data_section ();\n \t  else"}]}