{"sha": "7cf3d079762588156f447a45a888fdb544ade528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmM2QwNzk3NjI1ODgxNTZmNDQ3YTQ1YTg4OGZkYjU0NGFkZTUyOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-11-21T01:19:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-11-21T01:19:00Z"}, "message": "combine.c (try_combine): Do not run subst on i1src and i2src in the case of generating a PARALLEL for a...\n\n\t* combine.c (try_combine): Do not run subst on i1src and i2src in\n\tthe case of generating a PARALLEL for a comparison.\n\nFrom-SVN: r107273", "tree": {"sha": "106b0a4bb98f19639b7050a889350329f74b64a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/106b0a4bb98f19639b7050a889350329f74b64a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf3d079762588156f447a45a888fdb544ade528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf3d079762588156f447a45a888fdb544ade528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf3d079762588156f447a45a888fdb544ade528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf3d079762588156f447a45a888fdb544ade528/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d116ffa6c26c2e431f9bf72db7b36e8ba84b8d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d116ffa6c26c2e431f9bf72db7b36e8ba84b8d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d116ffa6c26c2e431f9bf72db7b36e8ba84b8d04"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "bc2a54edb17fa6efb19f0b0cd72bf7dfaab44087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3d079762588156f447a45a888fdb544ade528/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3d079762588156f447a45a888fdb544ade528/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cf3d079762588156f447a45a888fdb544ade528", "patch": "@@ -1,3 +1,8 @@\n+2005-11-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* combine.c (try_combine): Do not run subst on i1src and i2src in\n+\tthe case of generating a PARALLEL for a comparison.\n+\n 2005-11-20  Richard Henderson  <rth@redhat.com>\n \n \tPR 24931"}, {"sha": "6497336bf4424b55faea31795d8fed5874701bae", "filename": "gcc/combine.c", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3d079762588156f447a45a888fdb544ade528/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3d079762588156f447a45a888fdb544ade528/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7cf3d079762588156f447a45a888fdb544ade528", "patch": "@@ -2080,35 +2080,6 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \n   subst_insn = i3;\n \n-  /* It is possible that the source of I2 or I1 may be performing an\n-     unneeded operation, such as a ZERO_EXTEND of something that is known\n-     to have the high part zero.  Handle that case by letting subst look at\n-     the innermost one of them.\n-\n-     Another way to do this would be to have a function that tries to\n-     simplify a single insn instead of merging two or more insns.  We don't\n-     do this because of the potential of infinite loops and because\n-     of the potential extra memory required.  However, doing it the way\n-     we are is a bit of a kludge and doesn't catch all cases.\n-\n-     But only do this if -fexpensive-optimizations since it slows things down\n-     and doesn't usually win.  */\n-\n-  if (flag_expensive_optimizations)\n-    {\n-      /* Pass pc_rtx so no substitutions are done, just simplifications.  */\n-      if (i1)\n-\t{\n-\t  subst_low_cuid = INSN_CUID (i1);\n-\t  i1src = subst (i1src, pc_rtx, pc_rtx, 0, 0);\n-\t}\n-      else\n-\t{\n-\t  subst_low_cuid = INSN_CUID (i2);\n-\t  i2src = subst (i2src, pc_rtx, pc_rtx, 0, 0);\n-\t}\n-    }\n-\n #ifndef HAVE_cc0\n   /* Many machines that don't use CC0 have insns that can both perform an\n      arithmetic operation and set the condition code.  These operations will\n@@ -2171,6 +2142,41 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   else\n #endif\n     {\n+      /* It is possible that the source of I2 or I1 may be performing\n+\t an unneeded operation, such as a ZERO_EXTEND of something\n+\t that is known to have the high part zero.  Handle that case\n+\t by letting subst look at the innermost one of them.\n+\n+\t Another way to do this would be to have a function that tries\n+\t to simplify a single insn instead of merging two or more\n+\t insns.  We don't do this because of the potential of infinite\n+\t loops and because of the potential extra memory required.\n+\t However, doing it the way we are is a bit of a kludge and\n+\t doesn't catch all cases.\n+\n+\t But only do this if -fexpensive-optimizations since it slows\n+\t things down and doesn't usually win.\n+\n+\t This is not done in the COMPARE case above because the\n+\t unmodified I2PAT is used in the PARALLEL and so a pattern\n+\t with a modified I2SRC would not match.  */\n+\n+      if (flag_expensive_optimizations)\n+\t{\n+\t  /* Pass pc_rtx so no substitutions are done, just\n+\t     simplifications.  */\n+\t  if (i1)\n+\t    {\n+\t      subst_low_cuid = INSN_CUID (i1);\n+\t      i1src = subst (i1src, pc_rtx, pc_rtx, 0, 0);\n+\t    }\n+\t  else\n+\t    {\n+\t      subst_low_cuid = INSN_CUID (i2);\n+\t      i2src = subst (i2src, pc_rtx, pc_rtx, 0, 0);\n+\t    }\n+\t}\n+\n       n_occurrences = 0;\t\t/* `subst' counts here */\n \n       /* If I1 feeds into I2 (not into I3) and I1DEST is in I1SRC, we"}]}