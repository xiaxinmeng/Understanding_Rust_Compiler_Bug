{"sha": "f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1M2U3YmMxMmRlOGE3ZDQ3ZjUxY2M1ZWEwYzNkMmEyMmRlNDg3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T14:49:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T14:49:52Z"}, "message": "[multiple changes]\n\n2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch13.adb: Add with and use clauses for Restrict and Rident.\n\t(Expand_N_Free_Statement): Add a guard to protect against run-times\n\twhich do not support controlled types.\n\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Add a guard to protect\n\tagainst run-times which do not support controlled types.\n\t* exp_ch4.adb (Complete_Controlled_Allocation): Add a guard to protect\n\tagainst run-times which do not support controlled types.\n\t* exp_ch7.adb (Build_Finalization_Collection): Add a guard to protect\n\tagainst run-times which do not support controlled types.\n\t* exp_util.adb (Needs_Finalization): Code reformatting. Add a guard to\n\tprotect against run-times which do not support controlled types.\n\n2011-08-03  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_intr.adb: Put back with and use clauses for Exp_Ch11.\n\t(Expand_Unc_Deallocation): Expand the AT_END handler at the very end.\n\nFrom-SVN: r177280", "tree": {"sha": "59d55631d2c1913cb618b2b073968fcf83a2a2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59d55631d2c1913cb618b2b073968fcf83a2a2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/comments", "author": null, "committer": null, "parents": [{"sha": "78277376769b518b84f67ccc852af06d1842bad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78277376769b518b84f67ccc852af06d1842bad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78277376769b518b84f67ccc852af06d1842bad3"}], "stats": {"total": 95, "additions": 81, "deletions": 14}, "files": [{"sha": "6abd4106cf0eb63c86fbaddcc44ce608b253c062", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -1,3 +1,22 @@\n+2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch13.adb: Add with and use clauses for Restrict and Rident.\n+\t(Expand_N_Free_Statement): Add a guard to protect against run-times\n+\twhich do not support controlled types.\n+\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Add a guard to protect\n+\tagainst run-times which do not support controlled types.\n+\t* exp_ch4.adb (Complete_Controlled_Allocation): Add a guard to protect\n+\tagainst run-times which do not support controlled types.\n+\t* exp_ch7.adb (Build_Finalization_Collection): Add a guard to protect\n+\tagainst run-times which do not support controlled types.\n+\t* exp_util.adb (Needs_Finalization): Code reformatting. Add a guard to\n+\tprotect against run-times which do not support controlled types.\n+\n+2011-08-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_intr.adb: Put back with and use clauses for Exp_Ch11.\n+\t(Expand_Unc_Deallocation): Expand the AT_END handler at the very end.\n+\n 2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb (Expand_Iterator_Loop): indicate that the cursor is"}, {"sha": "761a2818ccb597cc070c7239b655ac3200f65c65", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -35,6 +35,8 @@ with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n+with Restrict; use Restrict;\n+with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Ch7;  use Sem_Ch7;\n@@ -215,10 +217,16 @@ package body Exp_Ch13 is\n       Typ  : Entity_Id := Etype (Expr);\n \n    begin\n+      --  Certain run-time configurations and targets do not provide support\n+      --  for controlled types.\n+\n+      if Restriction_Active (No_Finalization) then\n+         return;\n+\n       --  Do not create a specialized Deallocate since .NET/JVM compilers do\n       --  not support pools and address arithmetic.\n \n-      if VM_Target /= No_VM then\n+      elsif VM_Target /= No_VM then\n          return;\n       end if;\n "}, {"sha": "6c98ef8aed6a7a884b3d343a22fb7a40f2a4a8f4", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -5574,11 +5574,17 @@ package body Exp_Ch3 is\n    --  Start of processing for Expand_Freeze_Class_Wide_Type\n \n    begin\n+      --  Certain run-time configurations and targets do not provide support\n+      --  for controlled types.\n+\n+      if Restriction_Active (No_Finalization) then\n+         return;\n+\n       --  Do not create TSS routine Finalize_Address for concurrent class-wide\n       --  types. Ignore C, C++, CIL and Java types since it is assumed that the\n       --  non-Ada side will handle their destruction.\n \n-      if Is_Concurrent_Type (Root)\n+      elsif Is_Concurrent_Type (Root)\n         or else Is_C_Derivation (Root)\n         or else Convention (Typ) = Convention_CIL\n         or else Convention (Typ) = Convention_CPP"}, {"sha": "58516cdf36b2e97646d4bc9b53a2e23cd6336048", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -427,9 +427,15 @@ package body Exp_Ch4 is\n    --  Start of processing for Complete_Controlled_Allocation\n \n    begin\n+      --  Certain run-time configurations and targets do not provide support\n+      --  for controlled types.\n+\n+      if Restriction_Active (No_Finalization) then\n+         return;\n+\n       --  Do nothing if the access type may never allocate an object\n \n-      if No_Pool_Assigned (Ptr_Typ) then\n+      elsif No_Pool_Assigned (Ptr_Typ) then\n          return;\n \n       --  Access-to-controlled types are not supported on .NET/JVM"}, {"sha": "00992691d1ae48f56b664ba14754363e6ec702a9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -855,7 +855,16 @@ package body Exp_Ch7 is\n    --  Start of processing for Build_Finalization_Collection\n \n    begin\n-      if Present (Associated_Collection (Typ)) then\n+      --  Certain run-time configurations and targets do not provide support\n+      --  for controlled types.\n+\n+      if Restriction_Active (No_Finalization) then\n+         return;\n+\n+      --  Various machinery such as freezing may have already created a\n+      --  collection.\n+\n+      elsif Present (Associated_Collection (Typ)) then\n          return;\n \n       --  Do not process types that return on the secondary stack\n@@ -2077,6 +2086,7 @@ package body Exp_Ch7 is\n          Is_Protected : Boolean := False)\n       is\n          Obj_Id    : constant Entity_Id := Defining_Identifier (Decl);\n+         Loc       : constant Source_Ptr := Sloc (Decl);\n          Body_Ins  : Node_Id;\n          Count_Ins : Node_Id;\n          Fin_Call  : Node_Id;\n@@ -2926,11 +2936,13 @@ package body Exp_Ch7 is\n          Raise_Id := RTE (RE_Reraise_Occurrence);\n \n       --  Standard run-time library\n+\n       elsif RTE_Available (RE_Raise_From_Controlled_Operation) then\n          Raise_Id := RTE (RE_Raise_From_Controlled_Operation);\n \n       --  Restricted runtime: exception messages are not supported and hence\n       --  Raise_From_Controlled_Operation is not supported.\n+\n       else\n          Raise_Id := RTE (RE_Reraise_Occurrence);\n       end if;"}, {"sha": "c5c6181c68ec85822af0a02bcd5ee4ed1918cfc0", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -31,6 +31,7 @@ with Errout;   use Errout;\n with Exp_Atag; use Exp_Atag;\n with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch7;  use Exp_Ch7;\n+with Exp_Ch11; use Exp_Ch11;\n with Exp_Code; use Exp_Code;\n with Exp_Fixd; use Exp_Fixd;\n with Exp_Util; use Exp_Util;\n@@ -883,7 +884,7 @@ package body Exp_Intr is\n       Pool    : constant Entity_Id  := Associated_Storage_Pool (Rtyp);\n       Stmts   : constant List_Id    := New_List;\n \n-      Blk          : Node_Id;\n+      Blk          : Node_Id := Empty;\n       Deref        : Node_Id;\n       Exc_Occ_Decl : Node_Id;\n       Exc_Occ_Id   : Entity_Id := Empty;\n@@ -1279,6 +1280,14 @@ package body Exp_Intr is\n \n       Rewrite (N, Gen_Code);\n       Analyze (N);\n+\n+      --  If we generated a block with an At_End_Proc, expand the exception\n+      --  handler. We need to wait until after everything else is analyzed.\n+\n+      if Present (Blk) then\n+         Expand_At_End_Handler\n+           (Handled_Statement_Sequence (Blk), Entity (Identifier (Blk)));\n+      end if;\n    end Expand_Unc_Deallocation;\n \n    -----------------------"}, {"sha": "57751033c5cca2b813a4e3e44535a50ea57763d7", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f553e7bc12de8a7d47f51cc5ea0c3d2a22de487e", "patch": "@@ -5367,19 +5367,26 @@ package body Exp_Util is\n    --  Start of processing for Needs_Finalization\n \n    begin\n-      --  Class-wide types must be treated as controlled because they may\n-      --  contain an extension that has controlled components\n+      --  Certain run-time configurations and targets do not provide support\n+      --  for controlled types.\n \n-      --  We can skip this if finalization is not available\n+      if Restriction_Active (No_Finalization) then\n+         return False;\n \n-      return (Is_Class_Wide_Type (T)\n-                and then not Restriction_Active (No_Finalization))\n-        or else Is_Controlled (T)\n-        or else Has_Controlled_Component (T)\n-        or else Has_Some_Controlled_Component (T)\n-        or else (Is_Concurrent_Type (T)\n+      else\n+         --  Class-wide types are treated as controlled because derivations\n+         --  from the root type can introduce controlled components.\n+\n+         return\n+           Is_Class_Wide_Type (T)\n+             or else Is_Controlled (T)\n+             or else Has_Controlled_Component (T)\n+             or else Has_Some_Controlled_Component (T)\n+             or else\n+               (Is_Concurrent_Type (T)\n                   and then Present (Corresponding_Record_Type (T))\n                   and then Needs_Finalization (Corresponding_Record_Type (T)));\n+      end if;\n    end Needs_Finalization;\n \n    ----------------------------"}]}