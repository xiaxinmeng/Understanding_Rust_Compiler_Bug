{"sha": "2e1dd13741b328e317e511e7930738473e4463ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxZGQxMzc0MWIzMjhlMzE3ZTUxMWU3OTMwNzM4NDczZTQ0NjNhYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-21T10:08:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-21T10:08:21Z"}, "message": "re PR tree-optimization/71351 (ICE: Segmentation fault (graphite))\n\n2017-09-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71351\n\t* graphite-isl-ast-to-gimple.c (translate_isl_ast_to_gimple::\n\tgraphite_create_new_loop_guard): Remove, fold remaining parts\n\tinto caller ...\n\t(translate_isl_ast_node_for): ... here and simplify.\n\n\t* gfortran.dg/graphite/pr71351.f90: New testcase.\n\t* gfortran.dg/graphite/interchange-3.f90: Adjust.\n\nFrom-SVN: r253052", "tree": {"sha": "0768cdc2d5eb2719f3a948e61220d6022a983329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0768cdc2d5eb2719f3a948e61220d6022a983329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e1dd13741b328e317e511e7930738473e4463ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1dd13741b328e317e511e7930738473e4463ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1dd13741b328e317e511e7930738473e4463ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1dd13741b328e317e511e7930738473e4463ac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3f08c3f03f2cf096aaac5d4a24b729796e22a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f08c3f03f2cf096aaac5d4a24b729796e22a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f08c3f03f2cf096aaac5d4a24b729796e22a4b"}], "stats": {"total": 132, "additions": 45, "deletions": 87}, "files": [{"sha": "80803d622948bd98e60aaff51e8d00b4b90d4781", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e1dd13741b328e317e511e7930738473e4463ac", "patch": "@@ -1,3 +1,11 @@\n+2017-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71351\n+\t* graphite-isl-ast-to-gimple.c (translate_isl_ast_to_gimple::\n+\tgraphite_create_new_loop_guard): Remove, fold remaining parts\n+\tinto caller ...\n+\t(translate_isl_ast_node_for): ... here and simplify.\n+\n 2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82260"}, {"sha": "ccf0c21286c9a3593275ecfa416038a0db06287e", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 15, "deletions": 86, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=2e1dd13741b328e317e511e7930738473e4463ac", "patch": "@@ -193,10 +193,6 @@ class translate_isl_ast_to_gimple\n \t\t\t\t\t __isl_keep isl_ast_node *node_for,\n \t\t\t\t\t loop_p outer, tree type,\n \t\t\t\t\t tree lb, tree ub, ivs_params &ip);\n-  edge graphite_create_new_loop_guard (edge entry_edge,\n-\t\t\t\t       __isl_keep isl_ast_node *node_for,\n-\t\t\t\t       tree *type,\n-\t\t\t\t       tree *lb, tree *ub, ivs_params &ip);\n   edge graphite_create_new_guard (edge entry_edge,\n \t\t\t\t  __isl_take isl_ast_expr *if_cond,\n \t\t\t\t  ivs_params &ip);\n@@ -731,98 +727,31 @@ get_upper_bound (__isl_keep isl_ast_node *node_for)\n   return res;\n }\n \n-/* All loops generated by create_empty_loop_on_edge have the form of\n-   a post-test loop:\n-\n-   do\n-\n-   {\n-     body of the loop;\n-   } while (lower bound < upper bound);\n-\n-   We create a new if region protecting the loop to be executed, if\n-   the execution count is zero (lower bound > upper bound).  */\n-\n-edge translate_isl_ast_to_gimple::\n-graphite_create_new_loop_guard (edge entry_edge,\n-\t\t\t\t__isl_keep isl_ast_node *node_for, tree *type,\n-\t\t\t\ttree *lb, tree *ub, ivs_params &ip)\n-{\n-  gcc_assert (isl_ast_node_get_type (node_for) == isl_ast_node_for);\n-  tree cond_expr;\n-  edge exit_edge;\n-\n-  *type =\n-    build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n-  isl_ast_expr *for_init = isl_ast_node_for_get_init (node_for);\n-  *lb = gcc_expression_from_isl_expression (*type, for_init, ip);\n-\n-  /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error_p ())\n-    *lb = integer_zero_node;\n-\n-  isl_ast_expr *upper_bound = get_upper_bound (node_for);\n-  *ub = gcc_expression_from_isl_expression (*type, upper_bound, ip);\n-\n-  /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error_p ())\n-    *ub = integer_zero_node;\n-  \n-  /* When ub is simply a constant or a parameter, use lb <= ub.  */\n-  if (TREE_CODE (*ub) == INTEGER_CST || TREE_CODE (*ub) == SSA_NAME)\n-    cond_expr = fold_build2 (LE_EXPR, boolean_type_node, *lb, *ub);\n-  else\n-    {\n-      tree one = (POINTER_TYPE_P (*type)\n-\t\t  ? convert_to_ptrofftype (integer_one_node)\n-\t\t  : fold_convert (*type, integer_one_node));\n-      /* Adding +1 and using LT_EXPR helps with loop latches that have a\n-\t loop iteration count of \"PARAMETER - 1\".  For PARAMETER == 0 this\n-\t becomes 2^k-1 due to integer overflow, and the condition lb <= ub\n-\t is true, even if we do not want this.  However lb < ub + 1 is false,\n-\t as expected.  */\n-      tree ub_one = fold_build2 (POINTER_TYPE_P (*type) ? POINTER_PLUS_EXPR\n-\t\t\t\t : PLUS_EXPR, *type, *ub, one);\n-\n-      cond_expr = fold_build2 (LT_EXPR, boolean_type_node, *lb, ub_one);\n-    }\n-\n-  if (integer_onep (cond_expr))\n-    exit_edge = entry_edge;\n-  else\n-    exit_edge = create_empty_if_region_on_edge (entry_edge,\n-\t\t\t\t\t\tunshare_expr (cond_expr));\n-\n-  return exit_edge;\n-}\n-\n /* Translates an isl_ast_node_for to Gimple. */\n \n edge translate_isl_ast_to_gimple::\n translate_isl_ast_node_for (loop_p context_loop, __isl_keep isl_ast_node *node,\n \t\t\t    edge next_e, ivs_params &ip)\n {\n   gcc_assert (isl_ast_node_get_type (node) == isl_ast_node_for);\n-  tree type, lb, ub;\n-  edge last_e = graphite_create_new_loop_guard (next_e, node, &type,\n-\t\t\t\t\t\t&lb, &ub, ip);\n-\n-  if (last_e == next_e)\n-    {\n-      /* There was no guard generated.  */\n-      last_e = single_succ_edge (split_edge (last_e));\n-\n-      translate_isl_ast_for_loop (context_loop, node, next_e,\n-\t\t\t\t  type, lb, ub, ip);\n-      return last_e;\n-    }\n+  tree type\n+    = build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n \n-  edge true_e = get_true_edge_from_guard_bb (next_e->dest);\n-  merge_points.safe_push (last_e);\n+  isl_ast_expr *for_init = isl_ast_node_for_get_init (node);\n+  tree lb = gcc_expression_from_isl_expression (type, for_init, ip);\n+  /* To fail code generation, we generate wrong code until we discard it.  */\n+  if (codegen_error_p ())\n+    lb = integer_zero_node;\n \n-  last_e = single_succ_edge (split_edge (last_e));\n-  translate_isl_ast_for_loop (context_loop, node, true_e, type, lb, ub, ip);\n+  isl_ast_expr *upper_bound = get_upper_bound (node);\n+  tree ub = gcc_expression_from_isl_expression (type, upper_bound, ip);\n+  /* To fail code generation, we generate wrong code until we discard it.  */\n+  if (codegen_error_p ())\n+    ub = integer_zero_node;\n \n+  edge last_e = single_succ_edge (split_edge (next_e));\n+  translate_isl_ast_for_loop (context_loop, node, next_e,\n+\t\t\t      type, lb, ub, ip);\n   return last_e;\n }\n "}, {"sha": "870d2543179414df26b0634b431f51d283568b61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e1dd13741b328e317e511e7930738473e4463ac", "patch": "@@ -1,3 +1,9 @@\n+2017-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71351\n+\t* gfortran.dg/graphite/pr71351.f90: New testcase.\n+\t* gfortran.dg/graphite/interchange-3.f90: Adjust.\n+\n 2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82260"}, {"sha": "8070bbb4a8d5a0860c92585126955100a765f51c", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90?ref=2e1dd13741b328e317e511e7930738473e4463ac", "patch": "@@ -24,4 +24,4 @@ Program FOO\n \n end Program FOO\n \n-! { dg-final { scan-tree-dump-times \"codegen error: reverting back to the original code.\" \"1\" \"graphite\" } }\n+! { dg-final { scan-tree-dump \"tiled\" \"graphite\" } }"}, {"sha": "8251930928b9cd9fad344454d9d103233a7a53de", "filename": "gcc/testsuite/gfortran.dg/graphite/pr71351.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71351.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1dd13741b328e317e511e7930738473e4463ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71351.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71351.f90?ref=2e1dd13741b328e317e511e7930738473e4463ac", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -floop-nest-optimize\" }\n+\n+SUBROUTINE print_crys_symmetry(nc,v)\n+  INTEGER :: nc\n+  REAL(KIND=8), DIMENSION(3,48) :: v\n+  INTEGER  :: n,i\n+  vs = 0.0_8\n+  DO n = 1, nc \n+     DO i = 1, 3\n+        vs = vs + ABS(v(i,n))\n+     END DO\n+  END DO\n+  CALL foo(vs)\n+END SUBROUTINE print_crys_symmetry"}]}