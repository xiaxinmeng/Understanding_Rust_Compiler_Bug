{"sha": "db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5OWM0NmUxZDZkM2FlMzMyM2QwZTVhZTFkYzczOTI5MWFmNzE0Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:55:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:55:18Z"}, "message": "[multiple changes]\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* a-coinve.adb, a-comutr.adb, a-conhel.adb, a-convec.adb,\n\texp_util.adb: Remove assertions that can fail in obscure cases when\n\tassertions are turned on but tampering checks are turned off.\n\n2016-04-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch6.adb (Add_Call_By_Copy_Code,\n\tAdd_Simple_Call_By_Copy_Code, Expand_Actuals): Handle formals\n\twhose type comes from the limited view.\n\n2016-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* a-textio.adb: Complete previous patch.\n\n2016-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): Use Cannot_Inline instead of\n\tError_Msg_N to issue message about impossibility to inline call,\n\twith slight change of message.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_spark.adb (Expand_Potential_Renaming): Removed.\n\t(Expand_SPARK): Update the call to expand a potential renaming.\n\t(Expand_SPARK_Potential_Renaming): New routine.\n\t* exp_spark.ads (Expand_SPARK_Potential_Renaming): New routine.\n\t* sem.adb Add with and use clauses for Exp_SPARK.\n\t(Analyze): Expand a non-overloaded potential renaming for SPARK.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Constrain_Discriminated_Type): In an instance,\n\tcheck full view for the presence of defaulted discriminants,\n\teven when the partial view of a private type has no visible and\n\tno unknown discriminants.\n\nFrom-SVN: r235497", "tree": {"sha": "3b852b556143ed9a1fe9a1f0c8a1c04e811bffd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b852b556143ed9a1fe9a1f0c8a1c04e811bffd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/comments", "author": null, "committer": null, "parents": [{"sha": "c6c8d059421efe3d025483c11c66941a8d1926a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c8d059421efe3d025483c11c66941a8d1926a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c8d059421efe3d025483c11c66941a8d1926a4"}], "stats": {"total": 323, "additions": 188, "deletions": 135}, "files": [{"sha": "a4a1c09e22fa283d2e9c16d2dad203fe1900e1a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -1,3 +1,41 @@\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* a-coinve.adb, a-comutr.adb, a-conhel.adb, a-convec.adb,\n+\texp_util.adb: Remove assertions that can fail in obscure cases when\n+\tassertions are turned on but tampering checks are turned off.\n+\n+2016-04-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code,\n+\tAdd_Simple_Call_By_Copy_Code, Expand_Actuals): Handle formals\n+\twhose type comes from the limited view.\n+\n+2016-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-textio.adb: Complete previous patch.\n+\n+2016-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Use Cannot_Inline instead of\n+\tError_Msg_N to issue message about impossibility to inline call,\n+\twith slight change of message.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_spark.adb (Expand_Potential_Renaming): Removed.\n+\t(Expand_SPARK): Update the call to expand a potential renaming.\n+\t(Expand_SPARK_Potential_Renaming): New routine.\n+\t* exp_spark.ads (Expand_SPARK_Potential_Renaming): New routine.\n+\t* sem.adb Add with and use clauses for Exp_SPARK.\n+\t(Analyze): Expand a non-overloaded potential renaming for SPARK.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Discriminated_Type): In an instance,\n+\tcheck full view for the presence of defaulted discriminants,\n+\teven when the partial view of a private type has no visible and\n+\tno unknown discriminants.\n+\n 2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* lib-xref.adb, exp_ch3.adb: Minor reformatting."}, {"sha": "3c1972771f6c716ab5f2b6e1280a9a22d47401fd", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -748,9 +748,6 @@ package body Ada.Containers.Indefinite_Vectors is\n    end Finalize;\n \n    procedure Finalize (Object : in out Iterator) is\n-      pragma Warnings (Off);\n-      pragma Assert (T_Check); -- not called if check suppressed\n-      pragma Warnings (On);\n    begin\n       Unbusy (Object.Container.TC);\n    end Finalize;"}, {"sha": "7804b0f574f4fee4461706b5599bd502e9689e08", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,8 @@ package body Ada.Containers.Multiway_Trees is\n    record\n       Container : Tree_Access;\n       Subtree   : Tree_Node_Access;\n-   end record;\n+   end record\n+     with Disable_Controlled => not T_Check;\n \n    overriding procedure Finalize (Object : in out Root_Iterator);\n \n@@ -71,7 +72,8 @@ package body Ada.Containers.Multiway_Trees is\n    ---------------------\n \n    type Child_Iterator is new Root_Iterator and\n-     Tree_Iterator_Interfaces.Reversible_Iterator with null record;\n+     Tree_Iterator_Interfaces.Reversible_Iterator with null record\n+       with Disable_Controlled => not T_Check;\n \n    overriding function First (Object : Child_Iterator) return Cursor;\n "}, {"sha": "864b217367eefd7c474adca5e0f581d896556ed1", "filename": "gcc/ada/a-conhel.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-conhel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-conhel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-conhel.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2015, Free Software Foundation, Inc.           --\n+--           Copyright (C) 2015-2016, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,10 +36,6 @@ package body Ada.Containers.Helpers is\n       ------------\n \n       procedure Adjust (Control : in out Reference_Control_Type) is\n-         pragma Warnings (Off);\n-         --  GNAT warns here if checks are turned off, but assertions on\n-         pragma Assert (T_Check); -- not called if check suppressed\n-         pragma Warnings (On);\n       begin\n          if Control.T_Counts /= null then\n             Lock (Control.T_Counts.all);\n@@ -62,9 +58,6 @@ package body Ada.Containers.Helpers is\n       --------------\n \n       procedure Finalize (Control : in out Reference_Control_Type) is\n-         pragma Warnings (Off);\n-         pragma Assert (T_Check); -- not called if check suppressed\n-         pragma Warnings (On);\n       begin\n          if Control.T_Counts /= null then\n             Unlock (Control.T_Counts.all);"}, {"sha": "d77e011c20294927cab12b8dc5d0721c81df449b", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -617,9 +617,6 @@ package body Ada.Containers.Vectors is\n    end Finalize;\n \n    procedure Finalize (Object : in out Iterator) is\n-      pragma Warnings (Off);\n-      pragma Assert (T_Check); -- not called if check suppressed\n-      pragma Warnings (On);\n    begin\n       Unbusy (Object.Container.TC);\n    end Finalize;"}, {"sha": "59f9190ac1889bd85ecb0e5d938e9318ac3f428c", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -714,11 +714,12 @@ package body Ada.Text_IO is\n \n       function Get_Rest (S : String) return String is\n \n-         --  Each time we allocate a buffer the same size as what we have\n-         --  read so far. This limits us to a logarithmic number of calls\n-         --  to Get_Rest and also ensures only a linear use of stack space.\n+         --  The first time we allocate a buffer of size 500. Each following\n+         --  time we allocate a buffer the same size as what we have read so\n+         --  far. This limits us to a logarithmic number of calls to Get_Rest\n+         --  and also ensures only a linear use of stack space.\n \n-         Buffer : String (1 .. S'Length);\n+         Buffer : String (1 .. Integer'Max (500, S'Length));\n          Last   : Natural;\n \n       begin\n@@ -731,43 +732,26 @@ package body Ada.Text_IO is\n                return R;\n \n             else\n-               return Get_Rest (R);\n+               pragma Assert (Last = Buffer'Last);\n+\n+               --  If the String has the same length as the buffer, and there\n+               --  is no end of line, check whether we are at the end of file,\n+               --  in which case we have the full String in the buffer.\n+\n+               if End_Of_File (File) then\n+                  return R;\n+\n+               else\n+                  return Get_Rest (R);\n+               end if;\n             end if;\n          end;\n       end Get_Rest;\n \n-      --  Local variables\n-\n-      Buffer : String (1 .. 500);\n-      ch     : int;\n-      Last   : Natural;\n-\n    --  Start of processing for Get_Line\n \n    begin\n-      Get_Line (File, Buffer, Last);\n-\n-      if Last < Buffer'Last then\n-         return Buffer (1 .. Last);\n-\n-      --  If the String has the same length as the buffer, and there is no end\n-      --  of line, check whether we are at the end of file, in which case we\n-      --  have the full String in the buffer.\n-\n-      elsif Last = Buffer'Last then\n-         ch := Getc (File);\n-\n-         if ch = EOF then\n-            return Buffer;\n-\n-         else\n-            Ungetc (ch, File);\n-            return Get_Rest (Buffer (1 .. Last));\n-         end if;\n-\n-      else\n-         return Get_Rest (Buffer (1 .. Last));\n-      end if;\n+      return Get_Rest (\"\");\n    end Get_Line;\n \n    function Get_Line return String is"}, {"sha": "c34f17d13ab9059ab7da03edf2eb298253f98e02", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -1198,14 +1198,14 @@ package body Exp_Ch6 is\n       ---------------------------\n \n       procedure Add_Call_By_Copy_Code is\n+         Crep  : Boolean;\n          Expr  : Node_Id;\n+         F_Typ : Entity_Id := Etype (Formal);\n+         Indic : Node_Id;\n          Init  : Node_Id;\n          Temp  : Entity_Id;\n-         Indic : Node_Id;\n-         Var   : Entity_Id;\n-         F_Typ : constant Entity_Id := Etype (Formal);\n          V_Typ : Entity_Id;\n-         Crep  : Boolean;\n+         Var   : Entity_Id;\n \n       begin\n          if not Is_Legal_Copy then\n@@ -1214,14 +1214,22 @@ package body Exp_Ch6 is\n \n          Temp := Make_Temporary (Loc, 'T', Actual);\n \n+         --  Handle formals whose type comes from the limited view\n+\n+         if From_Limited_With (F_Typ)\n+           and then Has_Non_Limited_View (F_Typ)\n+         then\n+            F_Typ := Non_Limited_View (F_Typ);\n+         end if;\n+\n          --  Use formal type for temp, unless formal type is an unconstrained\n          --  array, in which case we don't have to worry about bounds checks,\n          --  and we use the actual type, since that has appropriate bounds.\n \n          if Is_Array_Type (F_Typ) and then not Is_Constrained (F_Typ) then\n             Indic := New_Occurrence_Of (Etype (Actual), Loc);\n          else\n-            Indic := New_Occurrence_Of (Etype (Formal), Loc);\n+            Indic := New_Occurrence_Of (F_Typ, Loc);\n          end if;\n \n          if Nkind (Actual) = N_Type_Conversion then\n@@ -1473,28 +1481,36 @@ package body Exp_Ch6 is\n       ----------------------------------\n \n       procedure Add_Simple_Call_By_Copy_Code is\n-         Temp   : Entity_Id;\n          Decl   : Node_Id;\n+         F_Typ  : Entity_Id := Etype (Formal);\n          Incod  : Node_Id;\n-         Outcod : Node_Id;\n+         Indic  : Node_Id;\n          Lhs    : Node_Id;\n+         Outcod : Node_Id;\n          Rhs    : Node_Id;\n-         Indic  : Node_Id;\n-         F_Typ  : constant Entity_Id := Etype (Formal);\n+         Temp   : Entity_Id;\n \n       begin\n          if not Is_Legal_Copy then\n             return;\n          end if;\n \n+         --  Handle formals whose type comes from the limited view\n+\n+         if From_Limited_With (F_Typ)\n+           and then Has_Non_Limited_View (F_Typ)\n+         then\n+            F_Typ := Non_Limited_View (F_Typ);\n+         end if;\n+\n          --  Use formal type for temp, unless formal type is an unconstrained\n          --  array, in which case we don't have to worry about bounds checks,\n          --  and we use the actual type, since that has appropriate bounds.\n \n          if Is_Array_Type (F_Typ) and then not Is_Constrained (F_Typ) then\n             Indic := New_Occurrence_Of (Etype (Actual), Loc);\n          else\n-            Indic := New_Occurrence_Of (Etype (Formal), Loc);\n+            Indic := New_Occurrence_Of (F_Typ, Loc);\n          end if;\n \n          --  Prepare to generate code\n@@ -1517,7 +1533,7 @@ package body Exp_Ch6 is\n          if Ekind (Formal) = E_Out_Parameter then\n             Incod := Empty;\n \n-            if Has_Discriminants (Etype (Formal)) then\n+            if Has_Discriminants (F_Typ) then\n                Indic := New_Occurrence_Of (Etype (Actual), Loc);\n             end if;\n \n@@ -1719,6 +1735,14 @@ package body Exp_Ch6 is\n          E_Formal := Etype (Formal);\n          E_Actual := Etype (Actual);\n \n+         --  Handle formals whose type comes from the limited view\n+\n+         if From_Limited_With (E_Formal)\n+           and then Has_Non_Limited_View (E_Formal)\n+         then\n+            E_Formal := Non_Limited_View (E_Formal);\n+         end if;\n+\n          if Is_Scalar_Type (E_Formal)\n            or else Nkind (Actual) = N_Slice\n          then"}, {"sha": "6ac38d6162e077c4b2dec269f2b4592d9242dc11", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,10 +42,6 @@ package body Exp_SPARK is\n    procedure Expand_SPARK_N_Object_Renaming_Declaration (N : Node_Id);\n    --  Perform name evaluation for a renamed object\n \n-   procedure Expand_Potential_Renaming (N : Node_Id);\n-   --  N denotes a N_Identifier or N_Expanded_Name. If N references a renaming,\n-   --  replace N with the renamed object.\n-\n    ------------------\n    -- Expand_SPARK --\n    ------------------\n@@ -73,7 +69,7 @@ package body Exp_SPARK is\n \n          when N_Expanded_Name |\n               N_Identifier    =>\n-            Expand_Potential_Renaming (N);\n+            Expand_SPARK_Potential_Renaming (N);\n \n          when N_Object_Renaming_Declaration =>\n             Expand_SPARK_N_Object_Renaming_Declaration (N);\n@@ -116,41 +112,41 @@ package body Exp_SPARK is\n       Evaluate_Name (Name (N));\n    end Expand_SPARK_N_Object_Renaming_Declaration;\n \n-   -------------------------------\n-   -- Expand_Potential_Renaming --\n-   -------------------------------\n+   -------------------------------------\n+   -- Expand_SPARK_Potential_Renaming --\n+   -------------------------------------\n \n-   procedure Expand_Potential_Renaming (N : Node_Id) is\n-      Id     : constant Entity_Id  := Entity (N);\n+   procedure Expand_SPARK_Potential_Renaming (N : Node_Id) is\n       Loc    : constant Source_Ptr := Sloc (N);\n+      Ren_Id : constant Entity_Id  := Entity (N);\n       Typ    : constant Entity_Id  := Etype (N);\n-      Ren_Id : Node_Id;\n+      Obj_Id : Node_Id;\n \n    begin\n       --  Replace a reference to a renaming with the actual renamed object\n \n-      if Ekind (Id) in Object_Kind then\n-         Ren_Id := Renamed_Object (Id);\n+      if Ekind (Ren_Id) in Object_Kind then\n+         Obj_Id := Renamed_Object (Ren_Id);\n \n-         if Present (Ren_Id) then\n+         if Present (Obj_Id) then\n \n             --  The renamed object is an entity when instantiating generics\n             --  or inlining bodies. In this case the renaming is part of the\n             --  mapping \"prologue\" which links actuals to formals.\n \n-            if Nkind (Ren_Id) in N_Entity then\n-               Rewrite (N, New_Occurrence_Of (Ren_Id, Loc));\n+            if Nkind (Obj_Id) in N_Entity then\n+               Rewrite (N, New_Occurrence_Of (Obj_Id, Loc));\n \n             --  Otherwise the renamed object denotes a name\n \n             else\n-               Rewrite (N, New_Copy_Tree (Ren_Id));\n+               Rewrite (N, New_Copy_Tree (Obj_Id));\n                Reset_Analyzed_Flags (N);\n             end if;\n \n             Analyze_And_Resolve (N, Typ);\n          end if;\n       end if;\n-   end Expand_Potential_Renaming;\n+   end Expand_SPARK_Potential_Renaming;\n \n end Exp_SPARK;"}, {"sha": "9fc7f690359463f530372d561ce376844985824a", "filename": "gcc/ada/exp_spark.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.ads?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,4 +35,8 @@ package Exp_SPARK is\n \n    procedure Expand_SPARK (N : Node_Id);\n \n+   procedure Expand_SPARK_Potential_Renaming (N : Node_Id);\n+   --  N must denote an N_Expanded_Name or N_Identifier. If N is a reference to\n+   --  a renaming, replace N with the renamed object.\n+\n end Exp_SPARK;"}, {"sha": "954855d8e2e02072957f493cc92d38fd016437c7", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -7028,6 +7028,9 @@ package body Exp_Util is\n       elsif Disable_Controlled (T) then\n          return False;\n \n+      elsif Is_Class_Wide_Type (T) and then Disable_Controlled (Etype (T)) then\n+         return False;\n+\n       else\n          --  Class-wide types are treated as controlled because derivations\n          --  from the root type can introduce controlled components."}, {"sha": "9b142c1a0c84da33005cc29ede919efd4af08777", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -2761,17 +2761,9 @@ package body Inline is\n       --  subprograms this must be done explicitly.\n \n       if In_Open_Scopes (Subp) then\n-         Error_Msg_N (\"call to recursive subprogram cannot be inlined??\", N);\n+         Cannot_Inline\n+           (\"cannot inline call to recursive subprogram?\", N, Subp);\n          Set_Is_Inlined (Subp, False);\n-\n-         --  In GNATprove mode, issue a warning, and indicate that the\n-         --  subprogram is not always inlined by setting flag Is_Inlined_Always\n-         --  to False.\n-\n-         if GNATprove_Mode then\n-            Set_Is_Inlined_Always (Subp, False);\n-         end if;\n-\n          return;\n \n       --  Skip inlining if this is not a true inlining since the attribute\n@@ -2787,8 +2779,8 @@ package body Inline is\n \n       elsif Is_Unc\n         and then\n-          Nkind (First (Statements (Handled_Statement_Sequence (Orig_Bod))))\n-            = N_Extended_Return_Statement\n+          Nkind (First (Statements (Handled_Statement_Sequence (Orig_Bod)))) =\n+            N_Extended_Return_Statement\n         and then not Back_End_Inlining\n       then\n          return;"}, {"sha": "36c62983298ddd2bd86396ba498fca160400315c", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -23,39 +23,40 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Atree;    use Atree;\n-with Debug;    use Debug;\n-with Debug_A;  use Debug_A;\n-with Elists;   use Elists;\n-with Expander; use Expander;\n-with Fname;    use Fname;\n-with Ghost;    use Ghost;\n-with Lib;      use Lib;\n-with Lib.Load; use Lib.Load;\n-with Nlists;   use Nlists;\n-with Output;   use Output;\n-with Restrict; use Restrict;\n-with Sem_Attr; use Sem_Attr;\n-with Sem_Aux;  use Sem_Aux;\n-with Sem_Ch2;  use Sem_Ch2;\n-with Sem_Ch3;  use Sem_Ch3;\n-with Sem_Ch4;  use Sem_Ch4;\n-with Sem_Ch5;  use Sem_Ch5;\n-with Sem_Ch6;  use Sem_Ch6;\n-with Sem_Ch7;  use Sem_Ch7;\n-with Sem_Ch8;  use Sem_Ch8;\n-with Sem_Ch9;  use Sem_Ch9;\n-with Sem_Ch10; use Sem_Ch10;\n-with Sem_Ch11; use Sem_Ch11;\n-with Sem_Ch12; use Sem_Ch12;\n-with Sem_Ch13; use Sem_Ch13;\n-with Sem_Prag; use Sem_Prag;\n-with Sem_Util; use Sem_Util;\n-with Sinfo;    use Sinfo;\n-with Stand;    use Stand;\n-with Stylesw;  use Stylesw;\n-with Uintp;    use Uintp;\n-with Uname;    use Uname;\n+with Atree;     use Atree;\n+with Debug;     use Debug;\n+with Debug_A;   use Debug_A;\n+with Elists;    use Elists;\n+with Exp_SPARK; use Exp_SPARK;\n+with Expander;  use Expander;\n+with Fname;     use Fname;\n+with Ghost;     use Ghost;\n+with Lib;       use Lib;\n+with Lib.Load;  use Lib.Load;\n+with Nlists;    use Nlists;\n+with Output;    use Output;\n+with Restrict;  use Restrict;\n+with Sem_Attr;  use Sem_Attr;\n+with Sem_Aux;   use Sem_Aux;\n+with Sem_Ch2;   use Sem_Ch2;\n+with Sem_Ch3;   use Sem_Ch3;\n+with Sem_Ch4;   use Sem_Ch4;\n+with Sem_Ch5;   use Sem_Ch5;\n+with Sem_Ch6;   use Sem_Ch6;\n+with Sem_Ch7;   use Sem_Ch7;\n+with Sem_Ch8;   use Sem_Ch8;\n+with Sem_Ch9;   use Sem_Ch9;\n+with Sem_Ch10;  use Sem_Ch10;\n+with Sem_Ch11;  use Sem_Ch11;\n+with Sem_Ch12;  use Sem_Ch12;\n+with Sem_Ch13;  use Sem_Ch13;\n+with Sem_Prag;  use Sem_Prag;\n+with Sem_Util;  use Sem_Util;\n+with Sinfo;     use Sinfo;\n+with Stand;     use Stand;\n+with Stylesw;   use Stylesw;\n+with Uintp;     use Uintp;\n+with Uname;     use Uname;\n \n with Unchecked_Deallocation;\n \n@@ -726,6 +727,21 @@ package body Sem is\n                   and then Etype (N) = Standard_Void_Type)\n       then\n          Expand (N);\n+\n+      --  Replace a reference to a renaming with the renamed object for SPARK.\n+      --  In general this modification is performed by Expand_SPARK, however\n+      --  certain constructs may not reach the resolution or expansion phase\n+      --  and thus remain unchanged. The replacement is not performed when the\n+      --  construct is overloaded as resolution must first take place. This is\n+      --  also not done when analyzing a generic to preserve the original tree\n+      --  and because the reference may become overloaded in the instance.\n+\n+      elsif GNATprove_Mode\n+        and then Nkind_In (N, N_Expanded_Name, N_Identifier)\n+        and then not Is_Overloaded (N)\n+        and then not Inside_A_Generic\n+      then\n+         Expand_SPARK_Potential_Renaming (N);\n       end if;\n \n       Ghost_Mode := Save_Ghost_Mode;"}, {"sha": "0d378ec082fd8742917726f89bbeb9a4f80b0492", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db99c46e1d6d3ae3323d0e5ae1dc739291af7143/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "patch": "@@ -13033,7 +13033,7 @@ package body Sem_Ch3 is\n       Related_Nod : Node_Id;\n       For_Access  : Boolean := False)\n    is\n-      E     : constant Entity_Id := Entity (Subtype_Mark (S));\n+      E     : Entity_Id := Entity (Subtype_Mark (S));\n       T     : Entity_Id;\n       C     : Node_Id;\n       Elist : Elist_Id := New_Elmt_List;\n@@ -13083,15 +13083,22 @@ package body Sem_Ch3 is\n       end if;\n \n       --  In an instance it may be necessary to retrieve the full view of a\n-      --  type with unknown discriminants. In other contexts the constraint\n-      --  is illegal.\n+      --  type with unknown discriminants, or a full view with defaulted\n+      --  discriminants. In other contexts the constraint is illegal.\n \n       if In_Instance\n         and then Is_Private_Type (T)\n-        and then Has_Unknown_Discriminants (T)\n         and then Present (Full_View (T))\n+        and then\n+          (Has_Unknown_Discriminants (T)\n+             or else (not Has_Discriminants (T)\n+               and then Has_Discriminants (Full_View (T))\n+               and then Present\n+                 (Discriminant_Default_Value\n+                    (First_Discriminant (Full_View (T))))))\n       then\n          T := Full_View (T);\n+         E := Full_View (E);\n       end if;\n \n       --  Ada 2005 (AI-412): Constrained incomplete subtypes are illegal.\n@@ -20522,14 +20529,14 @@ package body Sem_Ch3 is\n \n       May_Have_Null_Exclusion : Boolean;\n \n-      procedure Check_Incomplete (T : Entity_Id);\n+      procedure Check_Incomplete (T : Node_Id);\n       --  Called to verify that an incomplete type is not used prematurely\n \n       ----------------------\n       -- Check_Incomplete --\n       ----------------------\n \n-      procedure Check_Incomplete (T : Entity_Id) is\n+      procedure Check_Incomplete (T : Node_Id) is\n       begin\n          --  Ada 2005 (AI-412): Incomplete subtypes are legal\n "}]}