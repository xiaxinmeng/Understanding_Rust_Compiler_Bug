{"sha": "df2a1cc48b45a5493646e14bcd81eff7d684e15b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyYTFjYzQ4YjQ1YTU0OTM2NDZlMTRiY2Q4MWVmZjdkNjg0ZTE1Yg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2015-09-24T09:00:22Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2015-09-24T09:00:22Z"}, "message": "Support PIE on Solaris\n\n\tgcc/testsuite:\n\t* lib/target-supports.exp (check_effective_target_pie): Check for\n\tPIE support on Solaris 11.x and 12.\n\n\tlibgcc:\n\t* config.host (*-*-solaris2*): Add t-crtstuff-pic to tmake_file.\n\tAdd crtbeginS.o, crtendS.o to extra_parts if libgcc_cv_solaris_crts.\n\t* config/sol2/gmon.c: (monstartup): Don't write trailing NUL of\n\tmessages.\n\t(internal_mcount): Likewise.\n\t* config/sol2/t-sol2 (crtp.o, crtpg.o, gmon.o): Compile with\n\tcrt_compile, add CRTSTUFF_T_CFLAGS_S.\n\n\tgcc:\n\t* configure.ac (gcc_cv_ld_pie): Check for gld >= 2.26 on Solaris.\n\tCheck for ld -type pie on Solaris 11.x and 12.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\n\t* gcc.c (LD_PIE_SPEC): Allow redefinition.\n\n\t* config/sol2.h (STARTFILE_CRTBEGIN_SPEC): Define.\n\t(STARTFILE_SPEC): Use it.\n\t(ENDFILE_CRTEND_SPEC): Define.\n\t(ENDFILE_SPEC): Use it and ENDFILE_ARCH_SPEC.\n\t(SUBTARGET_EXTRA_SPECS): Add STARTFILE_CRTBEGIN_SPEC,\n\tENDFILE_ARCH_SPEC, ENDFILE_CRTEND_SPEC.\n\t[HAVE_LD_PIE && HAVE_SOLARIS_CRTS] (LD_PIE_SPEC): Define.\n\t(!(HAVE_LD_PIE && HAVE_SOLARIS_CRTS)] (LINK_PIE_SPEC): Define.\n\t* config/i386/sol2.h (ENDFILE_SPEC): Remove.\n\t(ENDFILE_ARCH_SPEC): Define.\n\t* config/sparc/sol2.h (ENDFILE_ARCH_SPEC): Define.\n\nFrom-SVN: r228078", "tree": {"sha": "f52d2a26a4f1a076c6412585f560c29447771e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52d2a26a4f1a076c6412585f560c29447771e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2a1cc48b45a5493646e14bcd81eff7d684e15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a1cc48b45a5493646e14bcd81eff7d684e15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a1cc48b45a5493646e14bcd81eff7d684e15b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a1cc48b45a5493646e14bcd81eff7d684e15b/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d11044217edd9168eafea1c8c60603f87b0e00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d11044217edd9168eafea1c8c60603f87b0e00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d11044217edd9168eafea1c8c60603f87b0e00d"}], "stats": {"total": 192, "additions": 158, "deletions": 34}, "files": [{"sha": "9c2ad9d5d2e8f1944a8587a04034912f8f633b22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -1,3 +1,24 @@\n+2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_ld_pie): Check for gld >= 2.26 on Solaris.\n+\tCheck for ld -type pie on Solaris 11.x and 12.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n+\t* gcc.c (LD_PIE_SPEC): Allow redefinition.\n+\n+\t* config/sol2.h (STARTFILE_CRTBEGIN_SPEC): Define.\n+\t(STARTFILE_SPEC): Use it.\n+\t(ENDFILE_CRTEND_SPEC): Define.\n+\t(ENDFILE_SPEC): Use it and ENDFILE_ARCH_SPEC.\n+\t(SUBTARGET_EXTRA_SPECS): Add STARTFILE_CRTBEGIN_SPEC,\n+\tENDFILE_ARCH_SPEC, ENDFILE_CRTEND_SPEC.\n+\t[HAVE_LD_PIE && HAVE_SOLARIS_CRTS] (LD_PIE_SPEC): Define.\n+\t(!(HAVE_LD_PIE && HAVE_SOLARIS_CRTS)] (LINK_PIE_SPEC): Define.\n+\t* config/i386/sol2.h (ENDFILE_SPEC): Remove.\n+\t(ENDFILE_ARCH_SPEC): Define.\n+\t* config/sparc/sol2.h (ENDFILE_ARCH_SPEC): Define.\n+\n 2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_solaris_crts): New test."}, {"sha": "8556986ccfa29c0ef7cffb917842eef72821d8d5", "filename": "gcc/config.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -1474,7 +1474,7 @@\n #endif\n \n \n-/* Define if your linker supports -pie option. */\n+/* Define if your linker supports PIE option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_PIE\n #endif"}, {"sha": "ed963f8920122299e16fc2f74613c732684ec23e", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -86,13 +86,10 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n #endif\n \n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{mpc32:crtprec32.o%s} \\\n+#define ENDFILE_ARCH_SPEC \\\n+  \"%{mpc32:crtprec32.o%s} \\\n    %{mpc64:crtprec64.o%s} \\\n-   %{mpc80:crtprec80.o%s} \\\n-   crtend.o%s crtn.o%s\"\n+   %{mpc80:crtprec80.o%s}\"\n \n #define SUBTARGET_CPU_EXTRA_SPECS \\\n   { \"cpp_subtarget\",\t CPP_SUBTARGET_SPEC },\t\t\\"}, {"sha": "f444e48659db7d9cc039b13d8eb1e34fd0332217", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -154,6 +154,14 @@ along with GCC; see the file COPYING3.  If not see\n #define STARTFILE_ARCH_SPEC \"%{ansi:values-Xc.o%s} \\\n \t\t\t    %{!ansi:values-Xa.o%s}\"\n \n+#if defined(HAVE_LD_PIE) && defined(HAVE_SOLARIS_CRTS)\n+#define STARTFILE_CRTBEGIN_SPEC \"%{shared:crtbeginS.o%s} \\\n+\t\t\t\t %{\" PIE_SPEC \":crtbeginS.o%s} \\\n+\t\t\t\t %{\" NO_PIE_SPEC \":crtbegin.o%s}\"\n+#else\n+#define STARTFILE_CRTBEGIN_SPEC\t\"crtbegin.o%s\"\n+#endif\n+\n /* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.  */\n #undef STARTFILE_SPEC\n #ifdef HAVE_SOLARIS_CRTS\n@@ -164,21 +172,27 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t  %{p:%e-p is not supported; \\\n \t\t\t    pg:crtpg.o%s gmon.o%s; \\\n \t\t\t      :crtp.o%s}}} \\\n-\t\t\tcrti.o%s %(startfile_arch) \\\n-\t\t\tcrtbegin.o%s\"\n+\t\t\tcrti.o%s %(startfile_arch) %(startfile_crtbegin)\"\n #else\n #define STARTFILE_SPEC \"%{!shared:%{!symbolic: \\\n \t\t\t  %{p:mcrt1.o%s; \\\n                             pg:gcrt1.o%s gmon.o%s; \\\n                               :crt1.o%s}}} \\\n-\t\t\tcrti.o%s %(startfile_arch) \\\n-\t\t\tcrtbegin.o%s\"\n+\t\t\tcrti.o%s %(startfile_arch) %(startfile_crtbegin)\"\n+#endif\n+\n+#if defined(HAVE_LD_PIE) && defined(HAVE_SOLARIS_CRTS)\n+#define ENDFILE_CRTEND_SPEC \"%{shared:crtendS.o%s;: \\\n+\t\t\t       %{\" PIE_SPEC \":crtendS.o%s} \\\n+\t\t\t       %{\" NO_PIE_SPEC \":crtend.o%s}}\"\n+#else\n+#define ENDFILE_CRTEND_SPEC \"crtend.o%s\"\n #endif\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   crtend.o%s crtn.o%s\"\n+   %(endfile_arch) %(endfile_crtend) crtn.o%s\"\n \n #undef LINK_ARCH32_SPEC_BASE\n #define LINK_ARCH32_SPEC_BASE \\\n@@ -251,11 +265,14 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS \\\n-  { \"startfile_arch\",\t STARTFILE_ARCH_SPEC },\t\t\\\n-  { \"link_arch32\",       LINK_ARCH32_SPEC },            \\\n-  { \"link_arch64\",       LINK_ARCH64_SPEC },            \\\n-  { \"link_arch_default\", LINK_ARCH_DEFAULT_SPEC },\t\\\n-  { \"link_arch\",\t LINK_ARCH_SPEC },\t\t\\\n+  { \"startfile_arch\",\t \tSTARTFILE_ARCH_SPEC },\t\t\\\n+  { \"startfile_crtbegin\",\tSTARTFILE_CRTBEGIN_SPEC },\t\\\n+  { \"link_arch32\",       \tLINK_ARCH32_SPEC },\t\t\\\n+  { \"link_arch64\",       \tLINK_ARCH64_SPEC },\t\t\\\n+  { \"link_arch_default\", \tLINK_ARCH_DEFAULT_SPEC },\t\\\n+  { \"link_arch\",\t \tLINK_ARCH_SPEC },\t\t\\\n+  { \"endfile_arch\",\t \tENDFILE_ARCH_SPEC },\t\t\\\n+  { \"endfile_crtend\",\t\tENDFILE_CRTEND_SPEC },\t\\\n   SUBTARGET_CPU_EXTRA_SPECS\n \n /* C++11 programs need -lrt for nanosleep.  */\n@@ -310,6 +327,20 @@ along with GCC; see the file COPYING3.  If not see\n #endif /* HAVE_LD_EH_FRAME && TARGET_DL_ITERATE_PHDR */\n #endif\n \n+#if defined(HAVE_LD_PIE) && defined(HAVE_SOLARIS_CRTS)\n+#ifdef USE_GLD\n+/* Assert -z text by default to match Solaris ld.  */\n+#define LD_PIE_SPEC \"-pie %{!mimpure-text:-z text}\"\n+#else\n+/* Solaris ld needs -z type=pie instead of -pie.  */\n+#define LD_PIE_SPEC \"-z type=pie %{mimpure-text:-z textoff}\"\n+#endif\n+#else\n+/* Error out if some part of PIE support is missing.  */\n+#define LINK_PIE_SPEC \\\n+  \"%{no-pie:} %{pie:%e-pie is not supported in this configuration} \"\n+#endif\n+\n /* collect2.c can only parse GNU nm -n output.  Solaris nm needs -png to\n    produce the same format.  */\n #define NM_FLAGS \"-png\""}, {"sha": "9912e8c517d66f112a16a277421dc350af148644", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -280,6 +280,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define SUBTARGET_CPU_EXTRA_SPECS\n \n+#define ENDFILE_ARCH_SPEC \"\"\n+\n \f\n \n /* Register the Solaris-specific #pragma directives.  */"}, {"sha": "608d2645c4cbb385e2debb3090b675fd45f67d85", "filename": "gcc/configure", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -27398,15 +27398,37 @@ $as_echo \"$gcc_cv_ld_eh_frame_ciev3\" >&6; }\n $as_echo_n \"checking linker position independent executable support... \" >&6; }\n gcc_cv_ld_pie=no\n if test $in_tree_ld = yes ; then\n-  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 15 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+  case \"$target\" in\n+    # Full PIE support on Solaris was only introduced in gld 2.26.\n+    *-*-solaris2*)  gcc_gld_pie_min_version=26 ;;\n+    *) \t\t    gcc_gld_pie_min_version=15 ;;\n+  esac\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge \"$gcc_gld_pie_min_version\" -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n      && test $in_tree_ld_is_elf = yes; then\n     gcc_cv_ld_pie=yes\n   fi\n elif test x$gcc_cv_ld != x; then\n-\t# Check if linker supports -pie option\n-\tif $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n-\t\tgcc_cv_ld_pie=yes\n+  # Check if linker supports -pie option\n+  if $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n+    gcc_cv_ld_pie=yes\n+    case \"$target\" in\n+      *-*-solaris2*)\n+\tif echo \"$ld_ver\" | grep GNU > /dev/null \\\n+\t  && test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 26; then\n+\t  gcc_cv_ld_pie=no\n \tfi\n+\t;;\n+    esac\n+  else\n+    case \"$target\" in\n+      *-*-solaris2.1[1-9]*)\n+\t# Solaris 11.x and Solaris 12 added PIE support.\n+\tif $gcc_cv_ld -z help 2>&1 | grep -- type.*pie > /dev/null; then\n+\t  gcc_cv_ld_pie=yes\n+\tfi\n+\t;;\n+    esac\n+  fi\n fi\n if test x\"$gcc_cv_ld_pie\" = xyes; then\n "}, {"sha": "65b5d704e3b74a19378b868018a0f3c4a61d6bca", "filename": "gcc/configure.ac", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -4751,19 +4751,41 @@ AC_MSG_RESULT($gcc_cv_ld_eh_frame_ciev3)\n AC_MSG_CHECKING(linker position independent executable support)\n gcc_cv_ld_pie=no\n if test $in_tree_ld = yes ; then\n-  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 15 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+  case \"$target\" in\n+    # Full PIE support on Solaris was only introduced in gld 2.26.\n+    *-*-solaris2*)  gcc_gld_pie_min_version=26 ;;\n+    *) \t\t    gcc_gld_pie_min_version=15 ;;\n+  esac\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge \"$gcc_gld_pie_min_version\" -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n      && test $in_tree_ld_is_elf = yes; then\n     gcc_cv_ld_pie=yes\n   fi\n elif test x$gcc_cv_ld != x; then\n-\t# Check if linker supports -pie option\n-\tif $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n-\t\tgcc_cv_ld_pie=yes\n+  # Check if linker supports -pie option\n+  if $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n+    gcc_cv_ld_pie=yes\n+    case \"$target\" in\n+      *-*-solaris2*)\n+\tif echo \"$ld_ver\" | grep GNU > /dev/null \\\n+\t  && test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 26; then\n+\t  gcc_cv_ld_pie=no\n \tfi\n+\t;;\n+    esac\n+  else\n+    case \"$target\" in\n+      *-*-solaris2.1[[1-9]]*)\n+\t# Solaris 11.x and Solaris 12 added PIE support.\n+\tif $gcc_cv_ld -z help 2>&1 | grep -- type.*pie > /dev/null; then\n+\t  gcc_cv_ld_pie=yes\n+\tfi\n+\t;;\n+    esac\n+  fi\n fi\n if test x\"$gcc_cv_ld_pie\" = xyes; then\n \tAC_DEFINE(HAVE_LD_PIE, 1,\n-[Define if your linker supports -pie option.])\n+[Define if your linker supports PIE option.])\n fi\n AC_MSG_RESULT($gcc_cv_ld_pie)\n "}, {"sha": "55a725583b87406e79c4f470d80fc0502e122d00", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -909,7 +909,9 @@ proper position among the other output files.  */\n \n #ifndef LINK_PIE_SPEC\n #ifdef HAVE_LD_PIE\n+#ifndef LD_PIE_SPEC\n #define LD_PIE_SPEC \"-pie\"\n+#endif\n #else\n #define LD_PIE_SPEC \"\"\n #endif"}, {"sha": "68f4100e2758830f3571af99ed06c152e0930ce3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -1,3 +1,8 @@\n+2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/target-supports.exp (check_effective_target_pie): Check for\n+\tPIE support on Solaris 11.x and 12.\n+\n 2015-09-24  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/tree-ssa/restrict3.C: New testcase."}, {"sha": "82697f4e4df4ff24c09a625e0692a1f89b5fe817", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -1046,6 +1046,13 @@ proc check_effective_target_pie { } {\n \t || [istarget *-*-gnu*] } {\n \treturn 1;\n     }\n+    if { [istarget *-*-solaris2.1\\[1-9\\]*] } {\n+\t# Full PIE support was added in Solaris 11.x and Solaris 12, but gcc\n+\t# errors out if missing, so check for that.\n+\treturn [check_no_compiler_messages pie executable {\n+\t    int main (void) { return 0; }\n+\t} \"-pie -fpie\"]\n+    }\n     return 0\n }\n "}, {"sha": "cc5c2c3903b1e4301f6c757e5f1721bbe83621b7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -1,3 +1,13 @@\n+2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.host (*-*-solaris2*): Add t-crtstuff-pic to tmake_file.\n+\tAdd crtbeginS.o, crtendS.o to extra_parts if libgcc_cv_solaris_crts.\n+\t* config/sol2/gmon.c: (monstartup): Don't write trailing NUL of\n+\tmessages.\n+\t(internal_mcount): Likewise.\n+\t* config/sol2/t-sol2 (crtp.o, crtpg.o, gmon.o): Compile with\n+\tcrt_compile, add CRTSTUFF_T_CFLAGS_S.\n+\n 2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (libgcc_cv_solaris_crts): New test."}, {"sha": "2c6475625c9cb830b9a9d8598f406a5a03fa3793", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -267,7 +267,7 @@ case ${host} in\n *-*-solaris2*)\n   # Unless linker support and dl_iterate_phdr are present,\n   # unwind-dw2-fde-dip.c automatically falls back to unwind-dw2-fde.c.\n-  tmake_file=\"$tmake_file sol2/t-sol2 t-eh-dw2-dip t-libgcc-pic t-slibgcc t-slibgcc-elf-ver\"\n+  tmake_file=\"$tmake_file sol2/t-sol2 t-eh-dw2-dip t-crtstuff-pic t-libgcc-pic t-slibgcc t-slibgcc-elf-ver\"\n   if test $with_gnu_ld = yes; then\n     tmake_file=\"$tmake_file t-slibgcc-gld\"\n   else\n@@ -280,6 +280,8 @@ case ${host} in\n     # Solaris 11.x and 12 provide crt1.o, crti.o, and crtn.o as part of the\n     # base system.  crtp.o and crtpg.o implement the compiler-dependent parts.\n     extra_parts=\"$extra_parts crtp.o crtpg.o\"\n+    # If the Solaris CRTs are present, both ld and gld will have PIE support.\n+    extra_parts=\"$extra_parts crtbeginS.o crtendS.o\"\n   else\n     case ${host} in\n       i?86-*-solaris2.1[0-9]* | x86_64-*-solaris2.1[0-9]*)"}, {"sha": "4d33411e40857ffaa6448c14a385852f78c55d9f", "filename": "libgcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -21,6 +21,9 @@\n /* Define if the system-provided CRTs are present on Solaris. */\n #undef HAVE_SOLARIS_CRTS\n \n+/* Define if the system-provided CRTs are present on Solaris. */\n+#undef HAVE_SOLARIS_CRTS\n+\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n "}, {"sha": "81a03468b6eae781ed9fc3e8adea600c98af8dcc", "filename": "libgcc/config/sol2/gmon.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig%2Fsol2%2Fgmon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig%2Fsol2%2Fgmon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Fgmon.c?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -114,12 +114,12 @@ monstartup (char *lowpc, char *highpc)\n   monsize = (s_textsize / HISTFRACTION) + sizeof (struct phdr);\n   buffer = sbrk (monsize);\n   if (buffer == (void *) -1) {\n-    write (STDERR_FILENO, MSG, sizeof (MSG));\n+    write (STDERR_FILENO, MSG, sizeof (MSG) - 1);\n     return;\n   }\n   froms = sbrk (s_textsize / HASHFRACTION);\n   if (froms == (void *) -1) {\n-    write (STDERR_FILENO, MSG, sizeof (MSG));\n+    write (STDERR_FILENO, MSG, sizeof (MSG) - 1);\n     froms = NULL;\n     return;\n   }\n@@ -131,7 +131,7 @@ monstartup (char *lowpc, char *highpc)\n   }\n   tos = sbrk (tolimit * sizeof (struct tostruct));\n   if (tos == (void *) -1) {\n-    write (STDERR_FILENO, MSG, sizeof (MSG));\n+    write (STDERR_FILENO, MSG, sizeof (MSG) - 1);\n     froms = NULL;\n     tos = NULL;\n     return;\n@@ -429,7 +429,7 @@ internal_mcount (char *selfpc, unsigned short *frompcindex)\n   profiling++;\n \n #define\tTOLIMIT\t\"mcount: tos overflow\\n\"\n-  write (STDERR_FILENO, TOLIMIT, sizeof (TOLIMIT));\n+  write (STDERR_FILENO, TOLIMIT, sizeof (TOLIMIT) - 1);\n   goto out;\n }\n "}, {"sha": "75b05883b14e9478eb42171c9e1f7d4e040639d3", "filename": "libgcc/config/sol2/t-sol2", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig%2Fsol2%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a1cc48b45a5493646e14bcd81eff7d684e15b/libgcc%2Fconfig%2Fsol2%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Ft-sol2?ref=df2a1cc48b45a5493646e14bcd81eff7d684e15b", "patch": "@@ -18,13 +18,13 @@\n \n # crtp, crtpg build rules\n crtp.o: $(srcdir)/config/sol2/crtp.c\n-\t$(gcc_compile) -c $<\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -c $<\n crtpg.o: $(srcdir)/config/sol2/crtpg.c\n-\t$(gcc_compile) -c $<\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -c $<\n \n # gmon build rule\n gmon.o:\t$(srcdir)/config/sol2/gmon.c\n-\t$(gcc_compile) -c $<\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -c $<\n \n # Assemble startup files.\n crt1.o: $(srcdir)/config/$(cpu_type)/sol2-c1.S"}]}