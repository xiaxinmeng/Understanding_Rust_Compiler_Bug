{"sha": "b1801c0246be659c50616cda377cd982087e01c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4MDFjMDI0NmJlNjU5YzUwNjE2Y2RhMzc3Y2Q5ODIwODdlMDFjNg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-03-16T22:46:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-16T22:46:40Z"}, "message": "Fix compile time warning building cp/method.o\n\nFrom-SVN: r32595", "tree": {"sha": "7e4a5fbda1a8ec2305b3fc0c892b8fc94000a0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4a5fbda1a8ec2305b3fc0c892b8fc94000a0c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1801c0246be659c50616cda377cd982087e01c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1801c0246be659c50616cda377cd982087e01c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1801c0246be659c50616cda377cd982087e01c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1801c0246be659c50616cda377cd982087e01c6/comments", "author": null, "committer": null, "parents": [{"sha": "d30d6e76fd650dff04d00082cb1a0e9865545a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30d6e76fd650dff04d00082cb1a0e9865545a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30d6e76fd650dff04d00082cb1a0e9865545a39"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "b9169550ab4f2fe79de0a5ac91e0083938e23680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1801c0246be659c50616cda377cd982087e01c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1801c0246be659c50616cda377cd982087e01c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1801c0246be659c50616cda377cd982087e01c6", "patch": "@@ -1,3 +1,8 @@\n+2000-03-16  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.h (ASM_OUTPUT_MI_THUNK): Fix compile time\n+\twarning.\n+\n 2000-03-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libgcc2.h: Move prototypes above macros with the same name."}, {"sha": "bc02db7f8037bd217dae95c623ec4935d8bd4937", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1801c0246be659c50616cda377cd982087e01c6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1801c0246be659c50616cda377cd982087e01c6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b1801c0246be659c50616cda377cd982087e01c6", "patch": "@@ -250,6 +250,22 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define SUBTARGET_CPP_SPEC      \"\"\n #endif\n \n+#ifndef SUBTARGET_EXTRA_ASM_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC\n+#endif\n+\n+#ifndef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{mbig-endian:-EB} \\\n+%{mcpu=*:-m%*} \\\n+%{march=*:-m%*} \\\n+%{mapcs-*:-mapcs-%*} \\\n+%{matpcs:-matpcs} \\\n+%{mapcs-float:-mfloat} \\\n+%{msoft-float:-mno-fpu} \\\n+%{mthumb-interwork:-mthumb-interwork} \\\n+\" SUBTARGET_EXTRA_ASM_SPEC\n+#endif\n \f\n /* Run-time Target Specification.  */\n #ifndef TARGET_VERSION\n@@ -321,6 +337,15 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Nonzero if all call instructions should be indirect.  */\n #define ARM_FLAG_LONG_CALLS\t(1 << 15)\n \n+/* Set if ATPCS compliance is required.  Note there *are* some\n+   incompatabilities between APCS and ATPCS.  */\n+#define ARM_FLAG_ATPCS\t\t(1 << 16)\n+\n+/* Set if compatability with older versions of GCC is required,\n+   where struct { float a; } would be returned from a function\n+   by a hidden extra argument rather than in r0.  */\n+#define ARM_FLAG_BUGGY_RETURN_IN_MEMORY\t(1 << 17)\n+\n #define TARGET_APCS\t\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n@@ -338,6 +363,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define TARGET_ABORT_NORETURN\t\t(target_flags & ARM_FLAG_ABORT_NORETURN)\n #define TARGET_SINGLE_PIC_BASE\t\t(target_flags & ARM_FLAG_SINGLE_PIC_BASE)\n #define TARGET_LONG_CALLS\t\t(target_flags & ARM_FLAG_LONG_CALLS)\n+#define TARGET_ATPCS\t\t\t(target_flags & ARM_FLAG_ATPCS)\n+#define TARGET_BUGGY_RETURN_IN_MEMORY\t(target_flags & ARM_FLAG_BUGGY_RETURN_IN_MEMORY)\n \n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis.\n    Bit 31 is reserved.  See riscix.h.  */\n@@ -399,6 +426,12 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\\\n      \"Generate call insns as indirect calls, if necessary\"},\t\\\n   {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\"},\t\\\n+  {\"atpcs\",\t\t\tARM_FLAG_ATPCS, \t\t\\\n+    \"generate ATPCS compliant code, rather than APCS compliant code\" }, \\\n+  {\"no-atpcs\", \t\t       -ARM_FLAG_ATPCS,  \"\" },\t\t\\\n+  {\"buggy-return-in-memory\",\tARM_FLAG_BUGGY_RETURN_IN_MEMORY,\\\n+    \"return struct { float a; } in memory\" },\t\t\t\\\n+  {\"no-buggy-return-in-memory\",-ARM_FLAG_BUGGY_RETURN_IN_MEMORY, \"\" }, \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\\\n }\n@@ -1978,6 +2011,10 @@ extern int making_const_table;\n \n /* Handle pragmas for compatibility with Intel's compilers.  */\n #define HANDLE_PRAGMA(GET, UNGET, NAME) arm_process_pragma (GET, UNGET, NAME)\n+\n+/* Allow short-call attribute functions to be inlined.  */\n+#define FUNCTION_ATTRIBUTE_INLINABLE_P(fndecl) \\\n+  arm_function_attribute_inlineable_p (fndecl);\n \f\n /* Condition code information. */\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n@@ -2244,10 +2281,11 @@ extern struct rtx_def * arm_compare_op1;\n       int shift = 0;\t\t\t\t\t\t\t\t\\\n       int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION)))\t\\\n \t\t        ? 1 : 0);\t\t\t\t\t\t\\\n-      if (mi_delta < 0) mi_delta = -mi_delta;\t\t\t\t\t\\\n+      if (mi_delta < 0)\t\t\t\t\t\t\t\t\\\n+        mi_delta = - mi_delta;\t\t\t\t\t\t\t\\\n       while (mi_delta != 0)\t\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\t\t\\\n-          if (mi_delta & (3 << shift) == 0)\t\t\t\t\t\\\n+          if ((mi_delta & (3 << shift)) == 0)\t\t\t\t\t\\\n \t    shift += 2;\t\t\t\t\t\t\t\t\\\n           else\t\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\t\\"}]}