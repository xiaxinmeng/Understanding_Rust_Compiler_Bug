{"sha": "238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4MjM1ZWZmZDY3YWRkZDNkMGI0YmI0ZWQzN2ZjNWUxYzg4MGFhYQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2003-08-27T21:14:28Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2003-08-27T21:14:28Z"}, "message": "aclocal.m4: Include acx.m4 and no-executables.m4.\n\n\t* aclocal.m4: Include acx.m4 and no-executables.m4.\n\t(libiberty_AC_FUNC_STRNCMP): Use AC_LIBOBJ.\n\t(LIB_AC_PROG_CC): Remove.\n\t* configure.in: Update AC_PREREQ to 2.57.  Use GCC_NO_EXECUTABLES.\n\tUse AC_PROG_CC and set ac_libiberty_warn_cflags instead of using\n\tLIB_AC_PROG_CC.  Use AC_LIBOBJ.  Call AC_ISC_POSIX later, only if\n\tperforming link tests.\n\t* configure: Regenerated.\n\nFrom-SVN: r70860", "tree": {"sha": "4fea23385e1755469d9361528c856f31c336d981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fea23385e1755469d9361528c856f31c336d981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/comments", "author": null, "committer": null, "parents": [{"sha": "3d7ca1673b3387bf420f02e3b45122ab75ff15e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7ca1673b3387bf420f02e3b45122ab75ff15e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7ca1673b3387bf420f02e3b45122ab75ff15e5"}], "stats": {"total": 8108, "additions": 5989, "deletions": 2119}, "files": [{"sha": "3ea130d226efa9c6a8ccb94258f25ff5c843c88f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "patch": "@@ -1,3 +1,14 @@\n+2003-08-27  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* aclocal.m4: Include acx.m4 and no-executables.m4.\n+\t(libiberty_AC_FUNC_STRNCMP): Use AC_LIBOBJ.\n+\t(LIB_AC_PROG_CC): Remove.\n+\t* configure.in: Update AC_PREREQ to 2.57.  Use GCC_NO_EXECUTABLES.\n+\tUse AC_PROG_CC and set ac_libiberty_warn_cflags instead of using\n+\tLIB_AC_PROG_CC.  Use AC_LIBOBJ.  Call AC_ISC_POSIX later, only if\n+\tperforming link tests.\n+\t* configure: Regenerated.\n+\n 2003-08-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n         * cp-demangle.c: Clarify what package(s) this is part of."}, {"sha": "118cb029afcff6c3bf5b869643a5bbed0f8fb79c", "filename": "libiberty/aclocal.m4", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Faclocal.m4?ref=238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "patch": "@@ -1,4 +1,6 @@\n sinclude(../config/accross.m4)\n+sinclude(../config/acx.m4)\n+sinclude(../config/no-executables.m4)\n \n dnl See whether strncmp reads past the end of its string parameters.\n dnl On some versions of SunOS4 at least, strncmp reads a word at a time\n@@ -71,7 +73,7 @@ main ()\n   ac_cv_func_strncmp_works=no)\n rm -f core core.* *.core])\n if test $ac_cv_func_strncmp_works = no ; then\n-  LIBOBJS=\"$LIBOBJS strncmp.o\"\n+  AC_LIBOBJ([strncmp])\n fi\n ])\n \n@@ -118,48 +120,6 @@ if test $libiberty_cv_decl_needed_$1 = yes; then\n fi\n ])dnl\n \n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n-\n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  ac_libiberty_warn_cflags=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-AC_SUBST(ac_libiberty_warn_cflags)\n-])\n-\n # Work around a bug in autoheader.  This can go away when we switch to\n # autoconf >2.50.  The use of define instead of AC_DEFUN is\n # deliberate."}, {"sha": "9d6b2cff52238793dd3af0e9e993074b1922e2a2", "filename": "libiberty/configure", "status": "modified", "additions": 5948, "deletions": 2067, "changes": 8015, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=238235effd67addd3d0b4bb4ed37fc5e1c880aaa"}, {"sha": "56e8a198321e132eab079d2caf4e5cd0e64435c6", "filename": "libiberty/configure.in", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238235effd67addd3d0b4bb4ed37fc5e1c880aaa/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=238235effd67addd3d0b4bb4ed37fc5e1c880aaa", "patch": "@@ -1,6 +1,6 @@\n dnl Process this file with autoconf to produce a configure script\n \n-AC_PREREQ(2.13)\n+AC_PREREQ(2.57)\n AC_INIT(xmalloc.c)\n \n # This works around the fact that libtool configuration may change LD\n@@ -99,7 +99,13 @@ dnl to call AC_CHECK_PROG.\n AC_CHECK_TOOL(AR, ar)\n AC_CHECK_TOOL(RANLIB, ranlib, :)\n \n-LIB_AC_PROG_CC\n+GCC_NO_EXECUTABLES\n+AC_PROG_CC\n+\n+if test x$GCC = xyes; then\n+  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n+fi\n+AC_SUBST(ac_libiberty_warn_cflags)\n \n AC_PROG_CC_C_O\n # autoconf is lame and doesn't give us any substitution variable for this.\n@@ -111,7 +117,6 @@ fi\n AC_SUBST(NO_MINUS_C_MINUS_O)\n AC_SUBST(OUTPUT_OPTION)\n \n-AC_ISC_POSIX\n AC_C_CONST\n AC_C_INLINE\n AC_C_BIGENDIAN_CROSS\n@@ -250,7 +255,12 @@ if test -n \"${with_target_subdir}\"; then\n   # newlib provide and which ones we will be expected to provide.\n \n   if test \"x${with_newlib}\" = \"xyes\"; then\n-    LIBOBJS=\"asprintf.o basename.o insque.o random.o strdup.o vasprintf.o\"\n+    AC_LIBOBJ([asprintf])\n+    AC_LIBOBJ([basename])\n+    AC_LIBOBJ([insque])\n+    AC_LIBOBJ([random])\n+    AC_LIBOBJ([strdup])\n+    AC_LIBOBJ([vasprintf])\n \n     for f in $funcs; do\n       case \"$f\" in\n@@ -318,8 +328,16 @@ if test -z \"${setobjs}\"; then\n     # Handle VxWorks configuration specially, since on VxWorks the\n     # libraries are actually on the target board, not in the file\n     # system.\n-    LIBOBJS=\"basename.o getpagesize.o insque.o random.o strcasecmp.o\"\n-    LIBOBJS=\"$LIBOBJS strncasecmp.o strdup.o vfork.o waitpid.o vasprintf.o\"\n+    AC_LIBOBJ([basename])\n+    AC_LIBOBJ([getpagesize])\n+    AC_LIBOBJ([insque])\n+    AC_LIBOBJ([random])\n+    AC_LIBOBJ([strcasecmp])\n+    AC_LIBOBJ([strncasecmp])\n+    AC_LIBOBJ([strdup])\n+    AC_LIBOBJ([vfork])\n+    AC_LIBOBJ([waitpid])\n+    AC_LIBOBJ([vasprintf])\n     for f in $funcs; do\n       case \"$f\" in\n \tbasename | getpagesize | insque | random | strcasecmp)\n@@ -366,7 +384,7 @@ if test -z \"${setobjs}\"; then\n     if test -n \"${with_target_subdir}\"\n     then\n       funcs=\"`echo $funcs | sed -e 's/random//'`\"\n-      LIBOBJS=\"$LIBOBJS random.o\"\n+      AC_LIBOBJ([random])\n       vars=\"`echo $vars | sed -e 's/sys_siglist//'`\"\n       checkfuncs=\"`echo $checkfuncs | sed -e 's/strsignal//' -e 's/psignal//'`\"\n     fi\n@@ -402,12 +420,12 @@ if test -z \"${setobjs}\"; then\n \n   # We haven't set the list of objects yet.  Use the standard autoconf\n   # tests.  This will only work if the compiler works.\n-  AC_PROG_CC_WORKS\n+  AC_ISC_POSIX\n   AC_REPLACE_FUNCS($funcs)\n   libiberty_AC_FUNC_C_ALLOCA\n   AC_FUNC_VFORK\n   if test $ac_cv_func_vfork_works = no; then\n-    LIBOBJS=\"$LIBOBJS vfork.o\"\n+    AC_LIBOBJ([vfork])\n   fi\n   # We only need _doprnt if we might use it to implement v*printf.\n   if test $ac_cv_func_vprintf != yes \\"}]}