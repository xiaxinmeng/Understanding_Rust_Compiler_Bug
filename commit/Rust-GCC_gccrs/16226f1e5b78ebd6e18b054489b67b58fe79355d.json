{"sha": "16226f1e5b78ebd6e18b054489b67b58fe79355d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyMjZmMWU1Yjc4ZWJkNmUxOGIwNTQ0ODliNjdiNThmZTc5MzU1ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-23T16:56:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-23T16:56:04Z"}, "message": "invoke.texi (ggc-min-expand, [...]): Document new default behavior.\n\n\t* doc/invoke.texi (ggc-min-expand, ggc-min-heapsize): Document\n\tnew default behavior.\n\t* ggc-common.c: Include sys/resource.h.\n\t(ggc_rlimit_bound): New function.\n\t(ggc_min_expand_heuristic, ggc_min_heapsize_heuristic): Update\n\tdefaults to account for rlimits.\n\nFrom-SVN: r63323", "tree": {"sha": "cfe1a9e59e70d3dbd2ef4ee6e573924fe4e282b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe1a9e59e70d3dbd2ef4ee6e573924fe4e282b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16226f1e5b78ebd6e18b054489b67b58fe79355d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16226f1e5b78ebd6e18b054489b67b58fe79355d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16226f1e5b78ebd6e18b054489b67b58fe79355d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16226f1e5b78ebd6e18b054489b67b58fe79355d/comments", "author": null, "committer": null, "parents": [{"sha": "53be1a8d37abfbfc82c2b9508053d1d00b85ddf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53be1a8d37abfbfc82c2b9508053d1d00b85ddf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53be1a8d37abfbfc82c2b9508053d1d00b85ddf8"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "b8c4d6fab51d50277fdfa804eb100ab33449a609", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16226f1e5b78ebd6e18b054489b67b58fe79355d", "patch": "@@ -1,3 +1,12 @@\n+2003-02-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* doc/invoke.texi (ggc-min-expand, ggc-min-heapsize): Document\n+\tnew default behavior.\n+\t* ggc-common.c: Include sys/resource.h.\n+\t(ggc_rlimit_bound): New function.\n+\t(ggc_min_expand_heuristic, ggc_min_heapsize_heuristic): Update\n+\tdefaults to account for rlimits.\n+\n 2003-02-22  Richard Henderson  <rth@redhat.com>\n \n \t* i386.c, i386.h (TUNEMASK): Rename from CPUMASK."}, {"sha": "ff9a9a7642e31b88f9d35f60f86f6e63a32a3250", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=16226f1e5b78ebd6e18b054489b67b58fe79355d", "patch": "@@ -4474,8 +4474,10 @@ Tuning this may improve compilation speed; it has no effect on code\n generation.\n \n The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when\n-RAM >= 1GB.  If GCC is not able to calculate RAM on a particular\n-platform, the lower bound of 30% is used.  Setting this parameter and\n+RAM >= 1GB.  If @code{getrlimit} is available, the notion of \"RAM\" is\n+the smallest of actual RAM, RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If\n+GCC is not able to calculate RAM on a particular platform, the lower\n+bound of 30% is used.  Setting this parameter and\n @option{ggc-min-heapsize} to zero causes a full collection to occur at\n every opportunity.  This is extremely slow, but can be useful for\n debugging.\n@@ -4489,7 +4491,9 @@ tuning this may improve compilation speed, and has no effect on code\n generation.\n \n The default is RAM/8, with a lower bound of 4096 (four megabytes) and an\n-upper bound of 131072 (128 megabytes).  If GCC is not able to calculate\n+upper bound of 131072 (128 megabytes).  If @code{getrlimit} is\n+available, the notion of \"RAM\" is the smallest of actual RAM,\n+RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If GCC is not able to calculate\n RAM on a particular platform, the lower bound is used.  Setting this\n parameter very large effectively disables garbage collection.  Setting\n this parameter and @option{ggc-min-expand} to zero causes a full"}, {"sha": "5b0e330ecfdb74832aad7392d782c6f288dbaaf2", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16226f1e5b78ebd6e18b054489b67b58fe79355d/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=16226f1e5b78ebd6e18b054489b67b58fe79355d", "patch": "@@ -29,6 +29,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"params.h\"\n \n+#ifdef HAVE_SYS_RESOURCE_H\n+# include <sys/resource.h>\n+#endif\n+\n #ifdef HAVE_MMAP_FILE\n # include <sys/mman.h>\n #endif\n@@ -54,6 +58,7 @@ static int compare_ptr_data PARAMS ((const void *, const void *));\n static void relocate_ptrs PARAMS ((void *, void *));\n static void write_pch_globals PARAMS ((const struct ggc_root_tab * const *tab,\n \t\t\t\t       struct traversal_state *state));\n+static double ggc_rlimit_bound PARAMS ((double));\n \n /* Maintain global roots that are preserved during GC.  */\n \n@@ -626,11 +631,44 @@ gt_pch_restore (f)\n   gt_pch_restore_stringpool ();\n }\n \n+/* Modify the bound based on rlimits.  Keep the smallest number found.  */\n+static double\n+ggc_rlimit_bound (limit)\n+     double limit;\n+{\n+#if defined(HAVE_GETRLIMIT)\n+  struct rlimit rlim;\n+# ifdef RLIMIT_RSS\n+  if (getrlimit (RLIMIT_RSS, &rlim) == 0\n+      && rlim.rlim_cur != RLIM_INFINITY\n+      && rlim.rlim_cur < limit)\n+    limit = rlim.rlim_cur;\n+# endif\n+# ifdef RLIMIT_DATA\n+  if (getrlimit (RLIMIT_DATA, &rlim) == 0\n+      && rlim.rlim_cur != RLIM_INFINITY\n+      && rlim.rlim_cur < limit)\n+    limit = rlim.rlim_cur;\n+# endif\n+# ifdef RLIMIT_AS\n+  if (getrlimit (RLIMIT_AS, &rlim) == 0\n+      && rlim.rlim_cur != RLIM_INFINITY\n+      && rlim.rlim_cur < limit)\n+    limit = rlim.rlim_cur;\n+# endif\n+#endif /* HAVE_GETRLIMIT */\n+\n+  return limit;\n+}\n+\n /* Heuristic to set a default for GGC_MIN_EXPAND.  */\n int\n ggc_min_expand_heuristic()\n {\n   double min_expand = physmem_total();\n+\n+  /* Adjust for rlimits.  */\n+  min_expand = ggc_rlimit_bound (min_expand);\n   \n   /* The heuristic is a percentage equal to 30% + 70%*(RAM/1GB), yielding\n      a lower bound of 30% and an upper bound of 100% (when RAM >= 1GB).  */\n@@ -646,7 +684,12 @@ ggc_min_expand_heuristic()\n int\n ggc_min_heapsize_heuristic()\n {\n-  double min_heap_kbytes = physmem_total() / 1024;\n+  double min_heap_kbytes = physmem_total();\n+\n+  /* Adjust for rlimits.  */\n+  min_heap_kbytes = ggc_rlimit_bound (min_heap_kbytes);\n+\n+  min_heap_kbytes /= 1024; /* convert to Kbytes. */\n   \n   /* The heuristic is RAM/8, with a lower bound of 4M and an upper\n      bound of 128M (when RAM >= 1GB).  */"}]}