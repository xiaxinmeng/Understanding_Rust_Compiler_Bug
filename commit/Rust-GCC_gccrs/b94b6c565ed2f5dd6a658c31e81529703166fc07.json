{"sha": "b94b6c565ed2f5dd6a658c31e81529703166fc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0YjZjNTY1ZWQyZjVkZDZhNjU4YzMxZTgxNTI5NzAzMTY2ZmMwNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-29T13:41:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:41:27Z"}, "message": "sem_ch10.adb, [...]: Minor reformatting.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch10.adb, debug.adb, sem_prag.adb, sem_res.adb, sem_ch6.adb:\n\tMinor reformatting.\n\nFrom-SVN: r213183", "tree": {"sha": "2d0ceca8aebadb1de09e2050c12f4c467ddf026e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d0ceca8aebadb1de09e2050c12f4c467ddf026e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b94b6c565ed2f5dd6a658c31e81529703166fc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94b6c565ed2f5dd6a658c31e81529703166fc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94b6c565ed2f5dd6a658c31e81529703166fc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94b6c565ed2f5dd6a658c31e81529703166fc07/comments", "author": null, "committer": null, "parents": [{"sha": "ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecad37f3e1fb99c151a8846e3c8a06fe3bf68b0b"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "78d81fdd1fa96837b0f5b98ed7eafe0927423a46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -1,3 +1,8 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch10.adb, debug.adb, sem_prag.adb, sem_res.adb, sem_ch6.adb:\n+\tMinor reformatting.\n+\n 2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build body to"}, {"sha": "d375205e73bae94363d12fa6e69efec4cf4990eb", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -541,8 +541,9 @@ package body Debug is\n    --       to the backend. This is useful to locate skipped calls that must be\n    --       inlined by the frontend.\n \n-   --  d.k  Enable new semantics of frontend inlining.  This is useful to test\n-   --       this new feature in all the platforms.\n+   --  d.k  Enable new semantics of frontend inlining. This is useful to test\n+   --       this new feature in all the platforms. What *is* this new semantics\n+   --       which doesn't seem to be documented anywhere???\n \n    --  d.l  Use Ada 95 semantics for limited function returns. This may be\n    --       used to work around the incompatibility introduced by AI-318-2."}, {"sha": "f0f0ba169475a4fe8e3a222fb86388fb915130c1", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -1196,8 +1196,16 @@ package body Sem_Ch10 is\n \n       Set_Analyzed (N);\n \n+      --  Call Check_Package_Body so that a body containing subprograms with\n+      --  Inline_Always can be made available for front end inlining.\n+\n       if Nkind (Unit_Node) = N_Package_Declaration\n         and then Get_Cunit_Unit_Number (N) /= Main_Unit\n+\n+        --  We don't need to do this if the Expander is not active, since there\n+        --  is no code to inline. However an exception is that we do the call\n+        --  in GNATprove mode, since the resulting inlining eases proofs.\n+\n         and then (Expander_Active or GNATprove_Mode)\n       then\n          declare\n@@ -1209,6 +1217,7 @@ package body Sem_Ch10 is\n             Save_Style_Check_Options (Options);\n             Reset_Style_Check_Options;\n             Opt.Warning_Mode := Suppress;\n+\n             Check_Package_Body_For_Inlining (N, Defining_Entity (Unit_Node));\n \n             Reset_Style_Check_Options;"}, {"sha": "92e7998c1cdedc293f5c9f5efb16820cebe97014", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -3337,11 +3337,12 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  Handle frontend inlining. There is no need to prepare us for inlining\n-      --  if we will not generate the code.\n+      --  Handle frontend inlining\n \n-      --  However, in GNATprove_Mode we want to expand calls in place\n-      --  whenever possible, even with expansion desabled.\n+      --  Note: Normally we don't do any inlining if expansion is off, since\n+      --  we won't generate code in any case. An exception arises in GNATprove\n+      --  mode where we want to expand calls in place whenever possible, even\n+      --  with expansion disabled since the inlining eases proofs.\n \n       --  Old semantics\n \n@@ -3355,7 +3356,7 @@ package body Sem_Ch6 is\n             Build_Body_To_Inline (N, Spec_Id);\n          end if;\n \n-      --  New semantics\n+      --  New semantics (enabled by debug flag gnatd.k for testing)\n \n       elsif (Expander_Active or else GNATprove_Mode)\n         and then Serious_Errors_Detected = 0"}, {"sha": "c7967ca58042e9734160687f5745a671f698bb55", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -15379,10 +15379,15 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer mode,\n-            --  since this causes walk order issues.\n-            --  This was disabled as well in GNATprove_Mode, even though\n-            --  walk order should not be an issue here. ???\n+            --  Pragma always active unless in CodePeer mode. It is disabled\n+            --  in CodePeer mode because inlining is not helpful, and enabling\n+            --  if caused walk order issues.\n+\n+            --  Historical note: this pragma used to be disabled in GNATprove\n+            --  mode as well, but that was odd since walk order shoult not be\n+            --  an issue in that case. Furthermore, we now like to do as much\n+            --  front-end inlining as possible in GNATprove mode since it makes\n+            --  proving things easier.\n \n             if not CodePeer_Mode then\n                Process_Inline (Enabled);"}, {"sha": "221d15b0ccf0b64a72e101c408e3f66b812094ef", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94b6c565ed2f5dd6a658c31e81529703166fc07/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b94b6c565ed2f5dd6a658c31e81529703166fc07", "patch": "@@ -6125,7 +6125,8 @@ package body Sem_Res is\n       Check_Elab_Call (N);\n \n       --  In GNATprove_Mode expansion is disabled, but we want to inline\n-      --  subprograms that are marked Inline_Always.\n+      --  subprograms that are marked Inline_Always, since the inlining\n+      --  is useful in making it easier to prove things about the inlined body.\n \n       if GNATprove_Mode\n         and then Nkind (Unit_Declaration_Node (Nam)) = N_Subprogram_Declaration"}]}