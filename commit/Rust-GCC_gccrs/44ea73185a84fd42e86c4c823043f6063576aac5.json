{"sha": "44ea73185a84fd42e86c4c823043f6063576aac5", "node_id": "C_kwDOANBUbNoAKDQ0ZWE3MzE4NWE4NGZkNDJlODZjNGM4MjMwNDNmNjA2MzU3NmFhYzU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-13T00:16:51Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-13T00:16:51Z"}, "message": "Daily bump.", "tree": {"sha": "468b2e5212c4983f80e5ab05ca4c9fa52d0fc78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/468b2e5212c4983f80e5ab05ca4c9fa52d0fc78e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44ea73185a84fd42e86c4c823043f6063576aac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ea73185a84fd42e86c4c823043f6063576aac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ea73185a84fd42e86c4c823043f6063576aac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ea73185a84fd42e86c4c823043f6063576aac5/comments", "author": null, "committer": null, "parents": [{"sha": "13071c3c7d1baed8426bd054744de887eb82446d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13071c3c7d1baed8426bd054744de887eb82446d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13071c3c7d1baed8426bd054744de887eb82446d"}], "stats": {"total": 358, "additions": 357, "deletions": 1}, "files": [{"sha": "8520271b3d92667acc3b6e01c0e0557ecb3e6d36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1,3 +1,109 @@\n+2023-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/aarch64/aarch64.h (aarch64_bf16_type_node): Remove.\n+\t(aarch64_bf16_ptr_type_node): Adjust comment.\n+\t* config/aarch64/aarch64.cc (aarch64_gimplify_va_arg_expr): Use\n+\tbfloat16_type_node rather than aarch64_bf16_type_node.\n+\t(aarch64_libgcc_floating_mode_supported_p,\n+\taarch64_scalar_mode_supported_p): Also support BFmode.\n+\t(aarch64_invalid_conversion, aarch64_invalid_unary_op): Remove.\n+\t(aarch64_invalid_binary_op): Remove BFmode related rejections.\n+\t(TARGET_INVALID_CONVERSION, TARGET_INVALID_UNARY_OP): Don't redefine.\n+\t* config/aarch64/aarch64-builtins.cc (aarch64_bf16_type_node): Remove.\n+\t(aarch64_int_or_fp_type): Use bfloat16_type_node rather than\n+\taarch64_bf16_type_node.\n+\t(aarch64_init_simd_builtin_types): Likewise.\n+\t(aarch64_init_bf16_types): Likewise.  Don't create bfloat16_type_node,\n+\twhich is created in tree.cc already.\n+\t* config/aarch64/aarch64-sve-builtins.def (svbfloat16_t): Likewise.\n+\n+2023-03-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/109031\n+\t* tree-chrec.cc (chrec_apply): When folding \"{a, +, a} (x-1)\",\n+\tensure that the type of x is as wide or wider than the type of a.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/108583\n+\t* config/aarch64/aarch64-simd.md (@aarch64_bitmask_udiv<mode>3): Remove.\n+\t(*bitmask_shift_plus<mode>): New.\n+\t* config/aarch64/aarch64-sve2.md (*bitmask_shift_plus<mode>): New.\n+\t(@aarch64_bitmask_udiv<mode>3): Remove.\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_vectorize_can_special_div_by_constant,\n+\tTARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST): Removed.\n+\t(TARGET_VECTORIZE_PREFERRED_DIV_AS_SHIFTS_OVER_MULT,\n+\taarch64_vectorize_preferred_div_as_shifts_over_mult): New.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/108583\n+\t* target.def (preferred_div_as_shifts_over_mult): New.\n+\t* doc/tm.texi.in: Document it.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.cc (default_preferred_div_as_shifts_over_mult): New.\n+\t* targhooks.h (default_preferred_div_as_shifts_over_mult): New.\n+\t* tree-vect-patterns.cc (vect_recog_divmod_pattern): Use it.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/108583\n+\t* tree-ssa-math-opts.cc (convert_mult_to_fma): Inhibit FMA in case not\n+\tsingle use.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR target/108583\n+\t* gimple-range-op.h (gimple_range_op_handler): Add maybe_non_standard.\n+\t* gimple-range-op.cc (gimple_range_op_handler::gimple_range_op_handler):\n+\tUse it.\n+\t(gimple_range_op_handler::maybe_non_standard): New.\n+\t* range-op.cc (class operator_widen_plus_signed,\n+\toperator_widen_plus_signed::wi_fold, class operator_widen_plus_unsigned,\n+\toperator_widen_plus_unsigned::wi_fold, class operator_widen_mult_signed,\n+\toperator_widen_mult_signed::wi_fold, class operator_widen_mult_unsigned,\n+\toperator_widen_mult_unsigned::wi_fold,\n+\tptr_op_widen_mult_signed, ptr_op_widen_mult_unsigned,\n+\tptr_op_widen_plus_signed, ptr_op_widen_plus_unsigned): New.\n+\t* range-op.h (ptr_op_widen_mult_signed, ptr_op_widen_mult_unsigned,\n+\tptr_op_widen_plus_signed, ptr_op_widen_plus_unsigned): New\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/108583\n+\t* doc/tm.texi (TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST): Remove.\n+\t* doc/tm.texi.in: Likewise.\n+\t* explow.cc (round_push, align_dynamic_address): Revert previous patch.\n+\t* expmed.cc (expand_divmod): Likewise.\n+\t* expmed.h (expand_divmod): Likewise.\n+\t* expr.cc (force_operand, expand_expr_divmod): Likewise.\n+\t* optabs.cc (expand_doubleword_mod, expand_doubleword_divmod): Likewise.\n+\t* target.def (can_special_div_by_const): Remove.\n+\t* target.h: Remove tree-core.h include\n+\t* targhooks.cc (default_can_special_div_by_const): Remove.\n+\t* targhooks.h (default_can_special_div_by_const): Remove.\n+\t* tree-vect-generic.cc (expand_vector_operation): Remove hook.\n+\t* tree-vect-patterns.cc (vect_recog_divmod_pattern): Remove hook.\n+\t* tree-vect-stmts.cc (vectorizable_operation): Remove hook.\n+\n+2023-03-12  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/install.texi2html: Fix issue number typo in comment.\n+\n+2023-03-12  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* doc/gm2.texi (Elementary data types): Equivalence BOOLEAN with\n+\tbool.\n+\n+2023-03-12  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (Optimize Options):  Add markup to\n+\tdescription of asan-kernel-mem-intrinsic-prefix, and clarify\n+\twording slightly.\n+\n 2023-03-11  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/extend.texi (Named Address Spaces): Drop a redundant link"}, {"sha": "356057bf73a6ae5fc68bf8332aa6fc820f9c0c1d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1 +1 @@\n-20230312\n+20230313"}, {"sha": "d9a79b73eb1b714de3adcb638a274e22c9520eff", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1,3 +1,186 @@\n+2023-03-12  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109089\n+\t* gm2-compiler/M2GCCDeclare.mod (DeclareKnownType): Import.\n+\t* gm2-gcc/gcc-consolidation.h (stdbool.h): Include.\n+\t* gm2-gcc/init.h (defined): Change block start.\n+\t* gm2-gcc/m2block.cc: Change FALSE to false, change TRUE to true.\n+\t* gm2-gcc/m2block.h: Change int to bool.\n+\t* gm2-gcc/m2builtins.cc: Ditto.\n+\t* gm2-gcc/m2builtins.h: Ditto.\n+\t* gm2-gcc/m2convert.cc: Change FALSE to false, TRUE to true and\n+\tint to bool.\n+\t* gm2-gcc/m2convert.h: Change int to bool.\n+\t* gm2-gcc/m2decl.cc: Change int to bool.\n+\t* gm2-gcc/m2decl.h: Change int to bool.\n+\t* gm2-gcc/m2expr.cc: Change FALSE to false, TRUE to true and\n+\tint to bool.\n+\t* gm2-gcc/m2expr.h: Change int to bool.\n+\t* gm2-gcc/m2statement.cc: Change FALSE to false, TRUE to true and\n+\tint to bool.\n+\t* gm2-gcc/m2statement.h: Change int to bool.\n+\t* gm2-gcc/m2top.cc: Change int to bool.\n+\t* gm2-gcc/m2top.h: Change int to bool.\n+\t* gm2-gcc/m2tree.cc: Change int to bool.\n+\t* gm2-gcc/m2tree.h: Change int to bool.\n+\t* gm2-gcc/m2type.cc: Change int to bool.\n+\t* gm2-gcc/m2type.h: Change int to bool.\n+\t* gm2-lang.cc (convert_loc): Call convert_to_integer for BOOLEAN_TYPE.\n+\t* gm2-libs/Builtins.def (isfinitef): Change return value from\n+\tBOOLEAN to INTEGER.\n+\t(isfinite): Ditto.\n+\t(isfinitel): Ditto.\n+\t* gm2-libs/Builtins.mod (isfinitef): Change return value from\n+\tBOOLEAN to INTEGER.\n+\t(isfinite): Ditto.\n+\t(isfinitel): Ditto.\n+\t* mc-boot/GASCII.cc: Rebuild.\n+\t* mc-boot/GASCII.h: Rebuild.\n+\t* mc-boot/GArgs.cc: Rebuild.\n+\t* mc-boot/GArgs.h: Rebuild.\n+\t* mc-boot/GAssertion.cc: Rebuild.\n+\t* mc-boot/GAssertion.h: Rebuild.\n+\t* mc-boot/GBreak.cc: Rebuild.\n+\t* mc-boot/GBreak.h: Rebuild.\n+\t* mc-boot/GCOROUTINES.h: Rebuild.\n+\t* mc-boot/GCmdArgs.cc: Rebuild.\n+\t* mc-boot/GCmdArgs.h: Rebuild.\n+\t* mc-boot/GDebug.cc: Rebuild.\n+\t* mc-boot/GDebug.h: Rebuild.\n+\t* mc-boot/GDynamicStrings.cc: Rebuild.\n+\t* mc-boot/GDynamicStrings.h: Rebuild.\n+\t* mc-boot/GEnvironment.cc: Rebuild.\n+\t* mc-boot/GEnvironment.h: Rebuild.\n+\t* mc-boot/GFIO.cc: Rebuild.\n+\t* mc-boot/GFIO.h: Rebuild.\n+\t* mc-boot/GFormatStrings.cc: Rebuild.\n+\t* mc-boot/GFormatStrings.h: Rebuild.\n+\t* mc-boot/GFpuIO.cc: Rebuild.\n+\t* mc-boot/GFpuIO.h: Rebuild.\n+\t* mc-boot/GIO.cc: Rebuild.\n+\t* mc-boot/GIO.h: Rebuild.\n+\t* mc-boot/GIndexing.cc: Rebuild.\n+\t* mc-boot/GIndexing.h: Rebuild.\n+\t* mc-boot/GM2Dependent.cc: Rebuild.\n+\t* mc-boot/GM2Dependent.h: Rebuild.\n+\t* mc-boot/GM2EXCEPTION.cc: Rebuild.\n+\t* mc-boot/GM2EXCEPTION.h: Rebuild.\n+\t* mc-boot/GM2LINK.h: Rebuild.\n+\t* mc-boot/GM2RTS.cc: Rebuild.\n+\t* mc-boot/GM2RTS.h: Rebuild.\n+\t* mc-boot/GMemUtils.cc: Rebuild.\n+\t* mc-boot/GMemUtils.h: Rebuild.\n+\t* mc-boot/GNumberIO.cc: Rebuild.\n+\t* mc-boot/GNumberIO.h: Rebuild.\n+\t* mc-boot/GPushBackInput.cc: Rebuild.\n+\t* mc-boot/GPushBackInput.h: Rebuild.\n+\t* mc-boot/GRTExceptions.cc: Rebuild.\n+\t* mc-boot/GRTExceptions.h: Rebuild.\n+\t* mc-boot/GRTco.h: Rebuild.\n+\t* mc-boot/GRTentity.h: Rebuild.\n+\t* mc-boot/GRTint.cc: Rebuild.\n+\t* mc-boot/GRTint.h: Rebuild.\n+\t* mc-boot/GSArgs.cc: Rebuild.\n+\t* mc-boot/GSArgs.h: Rebuild.\n+\t* mc-boot/GSFIO.cc: Rebuild.\n+\t* mc-boot/GSFIO.h: Rebuild.\n+\t* mc-boot/GSYSTEM.h: Rebuild.\n+\t* mc-boot/GSelective.h: Rebuild.\n+\t* mc-boot/GStdIO.cc: Rebuild.\n+\t* mc-boot/GStdIO.h: Rebuild.\n+\t* mc-boot/GStorage.cc: Rebuild.\n+\t* mc-boot/GStorage.h: Rebuild.\n+\t* mc-boot/GStrCase.cc: Rebuild.\n+\t* mc-boot/GStrCase.h: Rebuild.\n+\t* mc-boot/GStrIO.cc: Rebuild.\n+\t* mc-boot/GStrIO.h: Rebuild.\n+\t* mc-boot/GStrLib.cc: Rebuild.\n+\t* mc-boot/GStrLib.h: Rebuild.\n+\t* mc-boot/GStringConvert.cc: Rebuild.\n+\t* mc-boot/GStringConvert.h: Rebuild.\n+\t* mc-boot/GSysExceptions.h: Rebuild.\n+\t* mc-boot/GSysStorage.cc: Rebuild.\n+\t* mc-boot/GSysStorage.h: Rebuild.\n+\t* mc-boot/GTimeString.cc: Rebuild.\n+\t* mc-boot/GTimeString.h: Rebuild.\n+\t* mc-boot/GUnixArgs.h: Rebuild.\n+\t* mc-boot/Galists.cc: Rebuild.\n+\t* mc-boot/Galists.h: Rebuild.\n+\t* mc-boot/Gdecl.cc: Rebuild.\n+\t* mc-boot/Gdecl.h: Rebuild.\n+\t* mc-boot/Gdtoa.h: Rebuild.\n+\t* mc-boot/Gerrno.h: Rebuild.\n+\t* mc-boot/Gkeyc.cc: Rebuild.\n+\t* mc-boot/Gkeyc.h: Rebuild.\n+\t* mc-boot/Gldtoa.h: Rebuild.\n+\t* mc-boot/Glibc.h: Rebuild.\n+\t* mc-boot/Glibm.h: Rebuild.\n+\t* mc-boot/Glists.cc: Rebuild.\n+\t* mc-boot/Glists.h: Rebuild.\n+\t* mc-boot/GmcComment.cc: Rebuild.\n+\t* mc-boot/GmcComment.h: Rebuild.\n+\t* mc-boot/GmcComp.cc: Rebuild.\n+\t* mc-boot/GmcComp.h: Rebuild.\n+\t* mc-boot/GmcDebug.cc: Rebuild.\n+\t* mc-boot/GmcDebug.h: Rebuild.\n+\t* mc-boot/GmcError.cc: Rebuild.\n+\t* mc-boot/GmcError.h: Rebuild.\n+\t* mc-boot/GmcFileName.cc: Rebuild.\n+\t* mc-boot/GmcFileName.h: Rebuild.\n+\t* mc-boot/GmcLexBuf.cc: Rebuild.\n+\t* mc-boot/GmcLexBuf.h: Rebuild.\n+\t* mc-boot/GmcMetaError.cc: Rebuild.\n+\t* mc-boot/GmcMetaError.h: Rebuild.\n+\t* mc-boot/GmcOptions.cc: Rebuild.\n+\t* mc-boot/GmcOptions.h: Rebuild.\n+\t* mc-boot/GmcPreprocess.cc: Rebuild.\n+\t* mc-boot/GmcPreprocess.h: Rebuild.\n+\t* mc-boot/GmcPretty.cc: Rebuild.\n+\t* mc-boot/GmcPretty.h: Rebuild.\n+\t* mc-boot/GmcPrintf.cc: Rebuild.\n+\t* mc-boot/GmcPrintf.h: Rebuild.\n+\t* mc-boot/GmcQuiet.cc: Rebuild.\n+\t* mc-boot/GmcQuiet.h: Rebuild.\n+\t* mc-boot/GmcReserved.cc: Rebuild.\n+\t* mc-boot/GmcReserved.h: Rebuild.\n+\t* mc-boot/GmcSearch.cc: Rebuild.\n+\t* mc-boot/GmcSearch.h: Rebuild.\n+\t* mc-boot/GmcStack.cc: Rebuild.\n+\t* mc-boot/GmcStack.h: Rebuild.\n+\t* mc-boot/GmcStream.cc: Rebuild.\n+\t* mc-boot/GmcStream.h: Rebuild.\n+\t* mc-boot/Gmcflex.h: Rebuild.\n+\t* mc-boot/Gmcp1.cc: Rebuild.\n+\t* mc-boot/Gmcp1.h: Rebuild.\n+\t* mc-boot/Gmcp2.cc: Rebuild.\n+\t* mc-boot/Gmcp2.h: Rebuild.\n+\t* mc-boot/Gmcp3.cc: Rebuild.\n+\t* mc-boot/Gmcp3.h: Rebuild.\n+\t* mc-boot/Gmcp4.cc: Rebuild.\n+\t* mc-boot/Gmcp4.h: Rebuild.\n+\t* mc-boot/Gmcp5.cc: Rebuild.\n+\t* mc-boot/Gmcp5.h: Rebuild.\n+\t* mc-boot/GnameKey.cc: Rebuild.\n+\t* mc-boot/GnameKey.h: Rebuild.\n+\t* mc-boot/GsymbolKey.cc: Rebuild.\n+\t* mc-boot/GsymbolKey.h: Rebuild.\n+\t* mc-boot/Gtermios.h: Rebuild.\n+\t* mc-boot/Gtop.cc: Rebuild.\n+\t* mc-boot/Gvarargs.cc: Rebuild.\n+\t* mc-boot/Gvarargs.h: Rebuild.\n+\t* mc-boot/Gwlists.cc: Rebuild.\n+\t* mc-boot/Gwlists.h: Rebuild.\n+\t* mc-boot/Gwrapc.h: Rebuild.\n+\t* mc/decl.mod (doBoolC): New procedure.\n+\t(doBaseC): Call doBoolC.\n+\t* mc/keyc.mod: Import useBool.\n+\t(genBool): New procedure.\n+\t(genDefs): Call genBool.\n+\t* mc/mcOptions.def (useBool): New procedure.\n+\t* mc/mcOptions.mod (useBool): New procedure.\n+\t(useBoolType): New variable.\n+\t(optionIs): Assign useBoolType to TRUE.\n+\n 2023-03-04  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* mc-boot-ch/GBuiltins.cc: New file."}, {"sha": "6a5307260eac559fea6dc3aff89e7a198081e77a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1,3 +1,48 @@\n+2023-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c:\n+\tDon't expect one __bf16 related error.\n+\t* gcc.target/aarch64/bfloat16_vector_typecheck_1.c: Adjust or remove\n+\tdg-error directives for __bf16 being an extended arithmetic type.\n+\t* gcc.target/aarch64/bfloat16_vector_typecheck_2.c: Likewise.\n+\t* gcc.target/aarch64/bfloat16_scalar_typecheck.c: Likewise.\n+\t* g++.target/aarch64/bfloat_cpp_typecheck.C: Don't expect two __bf16\n+\trelated errors.\n+\n+2023-03-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/109031\n+\t* gcc.dg/tree-ssa/pr109031-1.c: New test case.\n+\t* gcc.dg/tree-ssa/pr109031-2.c: Likewise.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/108583\n+\t* gcc.dg/vect/vect-div-bitmask-4.c: New test.\n+\t* gcc.dg/vect/vect-div-bitmask-5.c: New test.\n+\n+2023-03-12  Tamar Christina  <tamar.christina@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/108583\n+\t* gcc.dg/mla_1.c: New test.\n+\n+2023-03-12  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109089\n+\t* gm2/pimlib/run/pass/limittests.mod: Rewritten to reflect\n+\tthe external definitions of isfinite.\n+\n+2023-03-12  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* gcc.dg/builtins-69.c: Use (long )*regex pattern to\n+\tallow long long instead of just long.\n+\t* gcc.dg/pr80163.c: Use __INTPTR_TYPE__ for LLP64 tagets.\n+\n+2023-03-12  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* gcc.c-torture/compile/103818.c: Enable test for llp64.\n+\n 2023-03-11  Cupertino Miranda  <cupertino.miranda@oracle.com>\n \n \t* gcc.dg/pr25521.c: Skip for !const_volatile_readonly_section"}, {"sha": "79da8308275195bae221357275b61cc59361cea4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1,3 +1,14 @@\n+2023-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/aarch64/t-softfp (softfp_extensions): Add bfsf.\n+\t(softfp_truncations): Add tfbf dfbf sfbf hfbf.\n+\t(softfp_extras): Add floatdibf floatundibf floattibf floatuntibf.\n+\t* config/aarch64/libgcc-softfp.ver (GCC_13.0.0): Export\n+\t__extendbfsf2 and __trunc{s,d,t,h}fbf2.\n+\t* config/aarch64/sfp-machine.h (_FP_NANFRAC_B, _FP_NANSIGN_B): Define.\n+\t* soft-fp/floatundibf.c: New file.\n+\t* soft-fp/floatdibf.c: New file.\n+\n 2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/107703"}, {"sha": "27f3a2f9a6b009b959182e97c53e6f26f9430a61", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ea73185a84fd42e86c4c823043f6063576aac5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ea73185a84fd42e86c4c823043f6063576aac5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44ea73185a84fd42e86c4c823043f6063576aac5", "patch": "@@ -1,3 +1,14 @@\n+2023-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.14): Also export __bf16 tinfos\n+\tif it isn't mangled as DF16b but u6__bf16.\n+\n+2023-03-12  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/documentation_hacking.xml: Move www.graphviz.org\n+\tto https.\n+\t* doc/html/manual/documentation_hacking.html: Regenerate.\n+\n 2023-03-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/109064"}]}