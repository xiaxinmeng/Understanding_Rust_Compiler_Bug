{"sha": "b1115dbfea4d6df51d608cece7416d658d2e2822", "node_id": "C_kwDOANBUbNoAKGIxMTE1ZGJmZWE0ZDZkZjUxZDYwOGNlY2U3NDE2ZDY1OGQyZTI4MjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-19T09:17:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-19T09:17:01Z"}, "message": "i386: Outline fast BF -> SF conversion and fix up sNaN handling in it [PR107628]\n\nOn Fri, Oct 21, 2022 at 10:23:14AM +0200, Uros Bizjak wrote:\n> OK, but now we have two more copies of a function that effectively\n> extends BF to SF. Can you please split this utility function out and\n> use it here and in cbranchbf4/cstorebf4? I'm talking about this part:\n>\n> +      op = gen_lowpart (HImode, op1);\n> +      if (CONST_INT_P (op))\n> +       op = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n> +                                            op1, BFmode);\n> +      else\n> +       {\n> +         rtx t1 = gen_reg_rtx (SImode);\n> +         emit_insn (gen_zero_extendhisi2 (t1, op));\n> +         emit_insn (gen_ashlsi3 (t1, t1, GEN_INT (16)));\n> +         op = gen_lowpart (SFmode, t1);\n> +       }\n>\n> Taking this a bit further, it looks like a generic function to extend\n> BF to SF, when extendbfsf2 named function is not defined.\n>\n> The above could be a follow-up patch, the proposed patch is OK.\n\nSorry for the delay, only got to this now.\nAnd I'm fixing the sNaN handling in it too.  If the argument is a BFmode sNaN\nconstant, we want in this case just a SFmode sNaN constant, but\nsimplify_const_unary_operation (FLOAT_EXTEND, ...)\nin that case returns NULL (as normally conversions of a sNaN to some\nother float type should raise an exception).  In this case we want\nto bypass that, as we know the sNaN will be used immediately in the SFmode\ncomparison a few instructions later.  The patch fixes it by just\nsimplifying the lowpart to HImode and its zero extension to SImode, then\nforce into a pseudo and do the left shift and subreg to SFmode on the\npseudo.  CSE or combine can handle it later.\n\n2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107628\n\t* config/i386/i386-protos.h (ix86_expand_fast_convert_bf_to_sf):\n\tDeclare.\n\t* config/i386/i386-expand.cc (ix86_expand_fast_convert_bf_to_sf): New\n\tfunction.\n\t* config/i386/i386.md (cbranchbf4, cstorebf4): Use it.\n\n\t* gcc.target/i386/pr107628.c: New test.", "tree": {"sha": "3f7b6188de8f9d48b063dac8f0098af67fa501eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f7b6188de8f9d48b063dac8f0098af67fa501eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1115dbfea4d6df51d608cece7416d658d2e2822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1115dbfea4d6df51d608cece7416d658d2e2822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1115dbfea4d6df51d608cece7416d658d2e2822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1115dbfea4d6df51d608cece7416d658d2e2822/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d16fe9d7e347bc58e7fad316ed7923e1d0f65c"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "0373c3614a4c96be258daf622ebb875ae51f431b", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=b1115dbfea4d6df51d608cece7416d658d2e2822", "patch": "@@ -24138,4 +24138,30 @@ ix86_expand_cmpxchg_loop (rtx *ptarget_bool, rtx target_val,\n   *ptarget_bool = target_bool;\n }\n \n+/* Convert a BFmode VAL to SFmode without signaling sNaNs.\n+   This is done by returning SF SUBREG of ((HI SUBREG) (VAL)) << 16.  */\n+\n+rtx\n+ix86_expand_fast_convert_bf_to_sf (rtx val)\n+{\n+  rtx op = gen_lowpart (HImode, val), ret;\n+  if (CONST_INT_P (op))\n+    {\n+      ret = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n+\t\t\t\t\t    val, BFmode);\n+      if (ret)\n+\treturn ret;\n+      /* FLOAT_EXTEND simplification will fail if VAL is a sNaN.  */\n+      ret = gen_reg_rtx (SImode);\n+      emit_move_insn (ret, GEN_INT (INTVAL (op) & 0xffff));\n+    }\n+  else\n+    {\n+      ret = gen_reg_rtx (SImode);\n+      emit_insn (gen_zero_extendhisi2 (ret, op));\n+    }\n+  emit_insn (gen_ashlsi3 (ret, ret, GEN_INT (16)));\n+  return gen_lowpart (SFmode, ret);\n+}\n+\n #include \"gt-i386-expand.h\""}, {"sha": "e136f6ec17573cded43286a9db7c6f839b34b36b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b1115dbfea4d6df51d608cece7416d658d2e2822", "patch": "@@ -227,6 +227,7 @@ extern void ix86_expand_atomic_fetch_op_loop (rtx, rtx, rtx, enum rtx_code,\n \t\t\t\t\t      bool, bool);\n extern void ix86_expand_cmpxchg_loop (rtx *, rtx, rtx, rtx, rtx, rtx,\n \t\t\t\t      bool, rtx_code_label *);\n+extern rtx ix86_expand_fast_convert_bf_to_sf (rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);"}, {"sha": "01faa911b7795df00263e2629e29c680c0519a9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b1115dbfea4d6df51d608cece7416d658d2e2822", "patch": "@@ -1668,28 +1668,8 @@\n \t      (pc)))]\n   \"\"\n {\n-  rtx op1 = gen_lowpart (HImode, operands[1]);\n-  if (CONST_INT_P (op1))\n-    op1 = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n-\t\t\t\t\t  operands[1], BFmode);\n-  else\n-    {\n-      rtx t1 = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendhisi2 (t1, op1));\n-      emit_insn (gen_ashlsi3 (t1, t1, GEN_INT (16)));\n-      op1 = gen_lowpart (SFmode, t1);\n-    }\n-  rtx op2 = gen_lowpart (HImode, operands[2]);\n-  if (CONST_INT_P (op2))\n-    op2 = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n-\t\t\t\t\t  operands[2], BFmode);\n-  else\n-    {\n-      rtx t2 = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendhisi2 (t2, op2));\n-      emit_insn (gen_ashlsi3 (t2, t2, GEN_INT (16)));\n-      op2 = gen_lowpart (SFmode, t2);\n-    }\n+  rtx op1 = ix86_expand_fast_convert_bf_to_sf (operands[1]);\n+  rtx op2 = ix86_expand_fast_convert_bf_to_sf (operands[2]);\n   do_compare_rtx_and_jump (op1, op2, GET_CODE (operands[0]), 0,\n \t\t\t   SFmode, NULL_RTX, NULL,\n \t\t\t   as_a <rtx_code_label *> (operands[3]),\n@@ -1723,28 +1703,8 @@\n \t   (const_int 0)]))]\n   \"\"\n {\n-  rtx op1 = gen_lowpart (HImode, operands[2]);\n-  if (CONST_INT_P (op1))\n-    op1 = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n-\t\t\t\t\t  operands[2], BFmode);\n-  else\n-    {\n-      rtx t1 = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendhisi2 (t1, op1));\n-      emit_insn (gen_ashlsi3 (t1, t1, GEN_INT (16)));\n-      op1 = gen_lowpart (SFmode, t1);\n-    }\n-  rtx op2 = gen_lowpart (HImode, operands[3]);\n-  if (CONST_INT_P (op2))\n-    op2 = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n-\t\t\t\t\t  operands[3], BFmode);\n-  else\n-    {\n-      rtx t2 = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendhisi2 (t2, op2));\n-      emit_insn (gen_ashlsi3 (t2, t2, GEN_INT (16)));\n-      op2 = gen_lowpart (SFmode, t2);\n-    }\n+  rtx op1 = ix86_expand_fast_convert_bf_to_sf (operands[2]);\n+  rtx op2 = ix86_expand_fast_convert_bf_to_sf (operands[3]);\n   rtx res = emit_store_flag_force (operands[0], GET_CODE (operands[1]),\n \t\t\t\t   op1, op2, SFmode, 0, 1);\n   if (!rtx_equal_p (res, operands[0]))"}, {"sha": "a0de1179e6726b9a34168ac3a0fb38066a83a00a", "filename": "gcc/testsuite/gcc.target/i386/pr107628.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107628.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1115dbfea4d6df51d608cece7416d658d2e2822/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107628.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107628.c?ref=b1115dbfea4d6df51d608cece7416d658d2e2822", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/107628 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsignaling-nans -msse2\" } */\n+\n+typedef __bf16 __attribute__((__vector_size__ (2))) V;\n+\n+void\n+foo (V v)\n+{\n+  v < (V) (short) 65436;\n+}"}]}