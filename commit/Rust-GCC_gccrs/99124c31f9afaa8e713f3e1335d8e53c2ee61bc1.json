{"sha": "99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxMjRjMzFmOWFmYWE4ZTcxM2YzZTEzMzVkOGU1M2MyZWU2MWJjMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-27T13:06:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-27T13:06:34Z"}, "message": "graphite.h (scop::max_alias_set): New member.\n\n2017-09-27  Richard Biener  <rguenther@suse.de>\n\n\t* graphite.h (scop::max_alias_set): New member.\n\t* graphite-scop-detection.c: Remove references to non-existing\n\t--param in comments.\n\t(build_alias_sets): Record the maximum alias set used for drs.\n\t(build_scops): Support zero as unlimited for\n\t--param graphite-max-arrays-per-scop.\n\t* graphite-sese-to-poly.c (add_scalar_version_numbers): Remove\n\tand inline into ...\n\t(build_poly_sr_1): ... here.  Compute alias set based on the\n\tmaximum alias set used for drs rather than\n\tPARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP\n\nFrom-SVN: r253229", "tree": {"sha": "583e879371e4870ee09a7e4b6505ebe81d9052b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/583e879371e4870ee09a7e4b6505ebe81d9052b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84c8627ce00ccd0d1b644c8c72450626b3e111fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c8627ce00ccd0d1b644c8c72450626b3e111fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c8627ce00ccd0d1b644c8c72450626b3e111fd"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "d35c497b888946a7b1db899f309c011d855add4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "patch": "@@ -1,3 +1,17 @@\n+2017-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite.h (scop::max_alias_set): New member.\n+\t* graphite-scop-detection.c: Remove references to non-existing\n+\t--param in comments.\n+\t(build_alias_sets): Record the maximum alias set used for drs.\n+\t(build_scops): Support zero as unlimited for\n+\t--param graphite-max-arrays-per-scop.\n+\t* graphite-sese-to-poly.c (add_scalar_version_numbers): Remove\n+\tand inline into ...\n+\t(build_poly_sr_1): ... here.  Compute alias set based on the\n+\tmaximum alias set used for drs rather than\n+\tPARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP\n+\n 2017-09-27  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-optimize-isl.c (get_schedule_for_node_st): Allow"}, {"sha": "351e944e9c8b199ba8c57afbb45ab570756d9135", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "patch": "@@ -389,10 +389,7 @@ class scop_detection\n \n   void remove_intersecting_scops (sese_l s1);\n \n-  /* Return true when a statement in SCOP cannot be represented by Graphite.\n-     The assumptions are that L1 dominates L2, and SCOP->entry dominates L1.\n-     Limit the number of bbs between adjacent loops to\n-     PARAM_SCOP_MAX_NUM_BBS_BETWEEN_LOOPS.  */\n+  /* Return true when a statement in SCOP cannot be represented by Graphite.  */\n \n   bool harmful_loop_in_region (sese_l scop) const;\n \n@@ -760,10 +757,7 @@ scop_detection::add_scop (sese_l s)\n   DEBUG_PRINT (dp << \"[scop-detection] Adding SCoP: \"; print_sese (dump_file, s));\n }\n \n-/* Return true when a statement in SCOP cannot be represented by Graphite.\n-   The assumptions are that L1 dominates L2, and SCOP->entry dominates L1.\n-   Limit the number of bbs between adjacent loops to\n-   PARAM_SCOP_MAX_NUM_BBS_BETWEEN_LOOPS.  */\n+/* Return true when a statement in SCOP cannot be represented by Graphite.  */\n \n bool\n scop_detection::harmful_loop_in_region (sese_l scop) const\n@@ -1531,7 +1525,8 @@ build_alias_set (scop_p scop)\n   for (i = 0; i < num_vertices; i++)\n     all_vertices[i] = i;\n \n-  graphds_dfs (g, all_vertices, num_vertices, NULL, true, NULL);\n+  scop->max_alias_set\n+    = graphds_dfs (g, all_vertices, num_vertices, NULL, true, NULL) + 1;\n   free (all_vertices);\n \n   for (i = 0; i < g->n_vertices; i++)\n@@ -1755,7 +1750,8 @@ build_scops (vec<scop_p> *scops)\n \t}\n \n       unsigned max_arrays = PARAM_VALUE (PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP);\n-      if (scop->drs.length () >= max_arrays)\n+      if (max_arrays > 0\n+\t  && scop->drs.length () >= max_arrays)\n \t{\n \t  DEBUG_PRINT (dp << \"[scop-detection-fail] too many data references: \"\n \t\t       << scop->drs.length ()"}, {"sha": "087a44a891d80ac74f0c7184f13f3f3da825558e", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "patch": "@@ -491,25 +491,6 @@ pdr_add_alias_set (isl_map *acc, dr_info &dri)\n   return isl_map_add_constraint (acc, c);\n }\n \n-/* Add a constrain to the ACCESSES polyhedron for the alias set of\n-   data reference DR.  ACCESSP_NB_DIMS is the dimension of the\n-   ACCESSES polyhedron, DOM_NB_DIMS is the dimension of the iteration\n-   domain.  */\n-\n-static isl_map *\n-add_scalar_version_numbers (isl_map *acc, tree var)\n-{\n-  isl_constraint *c = isl_equality_alloc\n-      (isl_local_space_from_space (isl_map_get_space (acc)));\n-  int max_arrays = PARAM_VALUE (PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP);\n-  /* Each scalar variables has a unique alias set number starting from\n-     max_arrays.  */\n-  c = isl_constraint_set_constant_si (c, -max_arrays - SSA_NAME_VERSION (var));\n-  c = isl_constraint_set_coefficient_si (c, isl_dim_out, 0, 1);\n-\n-  return isl_map_add_constraint (acc, c);\n-}\n-\n /* Assign the affine expression INDEX to the output dimension POS of\n    MAP and return the result.  */\n \n@@ -684,13 +665,21 @@ static void\n build_poly_sr_1 (poly_bb_p pbb, gimple *stmt, tree var, enum poly_dr_type kind,\n \t\t isl_map *acc, isl_set *subscript_sizes)\n {\n-  int max_arrays = PARAM_VALUE (PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP);\n+  scop_p scop = PBB_SCOP (pbb);\n   /* Each scalar variables has a unique alias set number starting from\n-     max_arrays.  */\n+     the maximum alias set assigned to a dr.  */\n+  int alias_set = scop->max_alias_set + SSA_NAME_VERSION (var);\n   subscript_sizes = isl_set_fix_si (subscript_sizes, isl_dim_set, 0,\n-\t\t\t\t    max_arrays + SSA_NAME_VERSION (var));\n+\t\t\t\t    alias_set);\n+\n+  /* Add a constrain to the ACCESSES polyhedron for the alias set of\n+     data reference DR.  */\n+  isl_constraint *c\n+    = isl_equality_alloc (isl_local_space_from_space (isl_map_get_space (acc)));\n+  c = isl_constraint_set_constant_si (c, -alias_set);\n+  c = isl_constraint_set_coefficient_si (c, isl_dim_out, 0, 1);\n \n-  new_poly_dr (pbb, stmt, kind, add_scalar_version_numbers (acc, var),\n+  new_poly_dr (pbb, stmt, kind, isl_map_add_constraint (acc, c),\n \t       subscript_sizes);\n }\n "}, {"sha": "79793ee15bbf7b06d66bfa87c7b494bc221f9ce6", "filename": "gcc/graphite.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99124c31f9afaa8e713f3e1335d8e53c2ee61bc1/gcc%2Fgraphite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.h?ref=99124c31f9afaa8e713f3e1335d8e53c2ee61bc1", "patch": "@@ -379,6 +379,9 @@ struct scop\n   /* Number of parameters in SCoP.  */\n   graphite_dim_t nb_params;\n \n+  /* The maximum alias set as assigned to drs by build_alias_sets.  */\n+  unsigned max_alias_set;\n+\n   /* All the basic blocks in this scop that contain memory references\n      and that will be represented as statements in the polyhedral\n      representation.  */"}]}