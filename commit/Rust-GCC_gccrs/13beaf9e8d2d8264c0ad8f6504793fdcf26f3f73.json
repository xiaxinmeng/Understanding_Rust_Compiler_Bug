{"sha": "13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiZWFmOWU4ZDJkODI2NGMwYWQ4ZjY1MDQ3OTNmZGNmMjZmM2Y3Mw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-07T04:25:11Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-07T04:28:50Z"}, "message": "Fortran: Revert to non-multilib-specific ISO_Fortran_binding.h\n\nCommit fef67987cf502fe322e92ddce22eea7ac46b4d75 changed the\nlibgfortran build process to generate multilib-specific versions of\nISO_Fortran_binding.h from a template, by running gfortran to identify\nthe values of the Fortran kind constants C_LONG_DOUBLE, C_FLOAT128,\nand C_INT128_T.  This caused multiple problems with search paths, both\nfor build-tree testing and installed-tree use, not all of which have\nbeen fixed.\n\nThis patch reverts to a non-multilib-specific .h file that uses GCC's\npredefined preprocessor symbols to detect the supported types and map\nthem to kind values in the same way as the Fortran front end.\n\n2021-09-06  Sandra Loosemore  <sandra@codesourcery.com>\n\nlibgfortran/\n\t* ISO_Fortran_binding-1-tmpl.h: Deleted.\n\t* ISO_Fortran_binding-2-tmpl.h: Deleted.\n\t* ISO_Fortran_binding-3-tmpl.h: Deleted.\n\t* ISO_Fortran_binding.h: New file to replace the above.\n\t* Makefile.am (gfor_cdir): Remove MULTISUBDIR.\n\t(ISO_Fortran_binding.h): Simplify to just copy the file.\n\t* Makefile.in: Regenerated.\n\t* mk-kinds-h.sh: Revert pieces no longer needed for\n\tISO_Fortran_binding.h.", "tree": {"sha": "8ea243d3de3ba6344f71871647a24076a4363e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ea243d3de3ba6344f71871647a24076a4363e3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546ecb0054af302acf0839c7f3eb78598f8c0672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ecb0054af302acf0839c7f3eb78598f8c0672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546ecb0054af302acf0839c7f3eb78598f8c0672"}], "stats": {"total": 173, "additions": 87, "deletions": 86}, "files": [{"sha": "ad88f8b1ad2269b82d5915f7eb1017fbdbe5eb6f", "filename": "libgfortran/ISO_Fortran_binding-2-tmpl.h", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ecb0054af302acf0839c7f3eb78598f8c0672/libgfortran%2FISO_Fortran_binding-2-tmpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ecb0054af302acf0839c7f3eb78598f8c0672/libgfortran%2FISO_Fortran_binding-2-tmpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding-2-tmpl.h?ref=546ecb0054af302acf0839c7f3eb78598f8c0672", "patch": "@@ -1,42 +0,0 @@\n-#include \"config.h\"\n-#include \"kinds.inc\"\n-\n-/* Note that -1 is used by CFI_type_other, hence, -2 is used for unavailable kinds.  */\n-\n-#if GFC_C_INT128_T_KIND == 16\n-#define CFI_type_int128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#define CFI_type_int_least128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#define CFI_type_int_fast128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#elif GFC_C_INT128_T_KIND < 0\n-#define CFI_type_int128_t -2\n-#define CFI_type_int_least128_t -2\n-#define CFI_type_int_fast128_t -2\n-#else\n-#error \"Unexpected value for GFC_C_INT128_T_KIND\"\n-#endif \n-\n-#if GFC_C_LONG_DOUBLE_KIND == 16\n-#define CFI_type_long_double (CFI_type_Real + (16 << CFI_type_kind_shift))\n-#define CFI_type_long_double_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n-#elif GFC_C_LONG_DOUBLE_KIND == 10 \n-#define CFI_type_long_double (CFI_type_Real + (10 << CFI_type_kind_shift))\n-#define CFI_type_long_double_Complex (CFI_type_Complex + (10 << CFI_type_kind_shift))\n-#elif GFC_C_LONG_DOUBLE_KIND == 8 \n-#define CFI_type_long_double (CFI_type_Real + (8 << CFI_type_kind_shift))\n-#define CFI_type_long_double_Complex (CFI_type_Complex + (8 << CFI_type_kind_shift))\n-#elif GFC_C_LONG_DOUBLE_KIND < 0 \n-#define CFI_type_long_double -2\n-#define CFI_type_long_double_Complex -2\n-#else\n-#error \"Unexpected value for GFC_C_LONG_DOUBLE_KIND\"\n-#endif \n-\n-#if GFC_C_FLOAT128_KIND == 16\n-#define CFI_type_float128 (CFI_type_Real + (16 << CFI_type_kind_shift))\n-#define CFI_type_float128_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n-#elif GFC_C_FLOAT128_KIND < 0\n-#define CFI_type_float128 -2\n-#define CFI_type_float128_Complex -2\n-#else\n-#error \"Unexpected value for GFC_C_FLOAT128_KIND\"\n-#endif "}, {"sha": "aec4288a6045e1cf49a998c7f351ce4f15455f63", "filename": "libgfortran/ISO_Fortran_binding-3-tmpl.h", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ecb0054af302acf0839c7f3eb78598f8c0672/libgfortran%2FISO_Fortran_binding-3-tmpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ecb0054af302acf0839c7f3eb78598f8c0672/libgfortran%2FISO_Fortran_binding-3-tmpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding-3-tmpl.h?ref=546ecb0054af302acf0839c7f3eb78598f8c0672", "patch": "@@ -1,5 +0,0 @@\n-#ifdef __cplusplus\n-}\n-#endif\n-\n-#endif /* ISO_FORTRAN_BINDING_H */"}, {"sha": "5335ea471c73ac8fe6b6dd00c163038ff749000b", "filename": "libgfortran/ISO_Fortran_binding.h", "status": "renamed", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FISO_Fortran_binding.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FISO_Fortran_binding.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding.h?ref=13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "patch": "@@ -32,6 +32,7 @@ extern \"C\" {\n \n #include <stddef.h>  /* Standard ptrdiff_t tand size_t. */\n #include <stdint.h>  /* Integer types. */\n+#include <float.h>  /* Macros for floating-point type characteristics.  */\n \n /* Constants, defined as macros. */\n #define CFI_VERSION 1\n@@ -198,3 +199,79 @@ extern int CFI_setpointer (CFI_cdesc_t *, CFI_cdesc_t *, const CFI_index_t []);\n #define CFI_type_double (CFI_type_Real + (sizeof (double) << CFI_type_kind_shift))\n #define CFI_type_float_Complex (CFI_type_Complex + (sizeof (float) << CFI_type_kind_shift))\n #define CFI_type_double_Complex (CFI_type_Complex + (sizeof (double) << CFI_type_kind_shift))\n+\n+/* If GCC supports int128_t on this target, it predefines\n+   __SIZEOF_INT128__ to 16.  */\n+#if defined(__SIZEOF_INT128__)\n+#if (__SIZEOF_INT128__ == 16)\n+#define CFI_type_int128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#define CFI_type_int_least128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#define CFI_type_int_fast128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#else\n+#error \"Can't determine kind of int128_t\"\n+#endif\n+#else\n+#define CFI_type_int128_t -2\n+#define CFI_type_int_least128_t -2\n+#define CFI_type_int_fast128_t -2\n+#endif\n+\n+/* The situation with long double support is more complicated; we need to\n+   examine the type in more detail to figure out its kind.  */\n+\n+/* Long double is the same kind as double.  */\n+#if (LDBL_MANT_DIG == DBL_MANT_DIG \\\n+     && LDBL_MIN_EXP == DBL_MIN_EXP \\\n+     && LDBL_MAX_EXP == DBL_MAX_EXP)\n+#define CFI_type_long_double CFI_type_double\n+#define CFI_type_long_double_Complex CFI_type_double_Complex\n+\n+/* This is the 80-bit encoding on x86; Fortran assigns it kind 10.  */\n+#elif (LDBL_MANT_DIG == 64 \\\n+       && LDBL_MIN_EXP == -16381 \\\n+       && LDBL_MAX_EXP == 16384)\n+#define CFI_type_long_double (CFI_type_Real + (10 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (10 << CFI_type_kind_shift))\n+\n+/* This is the IEEE 128-bit encoding, same as float128.  */\n+#elif (LDBL_MANT_DIG == 113 \\\n+       && LDBL_MIN_EXP == -16381 \\\n+       && LDBL_MAX_EXP == 16384)\n+#define CFI_type_long_double (CFI_type_Real + (16 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n+\n+/* This is the IBM128 encoding used on PowerPC; also assigned kind 16.  */\n+#elif (LDBL_MANT_DIG == 106 \\\n+       && LDBL_MIN_EXP == -968 \\\n+       && LDBL_MAX_EXP == 1024)\n+#define CFI_type_long_double (CFI_type_Real + (16 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n+#define CFI_no_float128 1\n+\n+/* It's a bug if we get here.  If you've got a target that has some other\n+   long double encoding, you need add something here for Fortran to\n+   recognize it.  */\n+#else\n+#error \"Can't determine kind of long double\"\n+#endif\n+\n+/* Similarly for __float128.  This always refers to the IEEE encoding\n+   and not some other 128-bit representation, so if we already used\n+   kind 16 for a non-IEEE representation, this one must be unsupported\n+   in Fortran even if it's available in C.  */\n+#if (!defined (CFI_no_float128) \\\n+     && defined(__FLT128_MANT_DIG__) && __FLT128_MANT_DIG__ == 113  \\\n+     && defined(__FLT128_MIN_EXP__) && __FLT128_MIN_EXP__ == -16381 \\\n+     && defined(__FLT128_MAX_EXP__) && __FLT128_MAX_EXP__ == 16384)\n+#define CFI_type_float128 (CFI_type_Real + (16 << CFI_type_kind_shift))\n+#define CFI_type_float128_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n+#else\n+#define CFI_type_float128 -2\n+#define CFI_type_float128_Complex -2\n+#endif\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* ISO_FORTRAN_BINDING_H */", "previous_filename": "libgfortran/ISO_Fortran_binding-1-tmpl.h"}, {"sha": "366198b59384b80aa0237937f0c85e68ee8bb974", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "patch": "@@ -31,7 +31,7 @@ version_dep =\n endif\n \n gfor_c_HEADERS = ISO_Fortran_binding.h\n-gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)/include\n+gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    $(lt_host_flags)\n@@ -1079,15 +1079,9 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n # Place ISO_Fortran_binding.h also under include/ in the build directory such\n # that it can be used for in-built-tree testsuite runs without interference of\n # other files in the build dir - like intrinsic .mod files or other .h files.\n-ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n-\t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n-\t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n-\t\t       kinds.inc\n+ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding.h\n \t-rm -f $@\n-\tcp $(srcdir)/ISO_Fortran_binding-1-tmpl.h $@\n-\t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n-\t| grep '^#define CFI_type' >> $@\n-\tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\tcp $(srcdir)/ISO_Fortran_binding.h $@\n \t$(MKDIR_P) include\n \t-rm -f include/ISO_Fortran_binding.h\n \tcp $@ include/ISO_Fortran_binding.h"}, {"sha": "a3cb6f4c5ca076bf8dd8ac1a903c68c64eeda91a", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "patch": "@@ -725,7 +725,7 @@ gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n @LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = $(srcdir)/gfortran.map\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = gfortran.map-sun\n gfor_c_HEADERS = ISO_Fortran_binding.h\n-gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)/include\n+gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    $(lt_host_flags)\n \n@@ -7045,15 +7045,9 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n # Place ISO_Fortran_binding.h also under include/ in the build directory such\n # that it can be used for in-built-tree testsuite runs without interference of\n # other files in the build dir - like intrinsic .mod files or other .h files.\n-ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n-\t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n-\t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n-\t\t       kinds.inc\n+ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding.h\n \t-rm -f $@\n-\tcp $(srcdir)/ISO_Fortran_binding-1-tmpl.h $@\n-\t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n-\t| grep '^#define CFI_type' >> $@\n-\tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\tcp $(srcdir)/ISO_Fortran_binding.h $@\n \t$(MKDIR_P) include\n \t-rm -f include/ISO_Fortran_binding.h\n \tcp $@ include/ISO_Fortran_binding.h"}, {"sha": "249619061c6a585675ebeffd7b6334b1eb7c9202", "filename": "libgfortran/mk-kinds-h.sh", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2Fmk-kinds-h.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73/libgfortran%2Fmk-kinds-h.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-kinds-h.sh?ref=13beaf9e8d2d8264c0ad8f6504793fdcf26f3f73", "patch": "@@ -35,8 +35,8 @@ for k in $possible_integer_kinds; do\n     echo \"typedef ${prefix}int${s}_t GFC_INTEGER_${k};\"\n     echo \"typedef ${prefix}uint${s}_t GFC_UINTEGER_${k};\"\n     echo \"typedef GFC_INTEGER_${k} GFC_LOGICAL_${k};\"\n-    echo \"#define HAVE_GFC_LOGICAL_${k} 1\"\n-    echo \"#define HAVE_GFC_INTEGER_${k} 1\"\n+    echo \"#define HAVE_GFC_LOGICAL_${k}\"\n+    echo \"#define HAVE_GFC_INTEGER_${k}\"\n     echo \"\"\n   fi\n   rm -f tmp$$.*\n@@ -98,8 +98,8 @@ for k in $possible_real_kinds; do\n     # Output the information we've gathered\n     echo \"typedef ${ctype} GFC_REAL_${k};\"\n     echo \"typedef ${cplxtype} GFC_COMPLEX_${k};\"\n-    echo \"#define HAVE_GFC_REAL_${k} 1\"\n-    echo \"#define HAVE_GFC_COMPLEX_${k} 1\"\n+    echo \"#define HAVE_GFC_REAL_${k}\"\n+    echo \"#define HAVE_GFC_COMPLEX_${k}\"\n     echo \"#define GFC_REAL_${k}_HUGE ${huge}${suffix}\"\n     echo \"#define GFC_REAL_${k}_LITERAL_SUFFIX ${suffix}\"\n     if [ \"x$suffix\" = \"x\" ]; then\n@@ -114,23 +114,6 @@ for k in $possible_real_kinds; do\n   rm -f tmp$$.*\n done\n \n-# For ISO_Fortran_binding.h\n-for k in \"C_LONG_DOUBLE\" \"C_FLOAT128\" \"C_INT128_T\"; do\n-  fname=\"tmp$$.val\"\n-  echo \"use iso_c_binding, only: $k; end\" > tmp$$.f90\n-  if $compile -S -fdump-parse-tree tmp$$.f90 > \"$fname\"; then\n-    kind=`grep \"value:\" \"$fname\" |grep value: | sed -e 's/.*value: *//'`\n-    if [ \"x$kind\" = \"x\" ]; then\n-      echo \"ERROR: Failed to extract kind for $k\" 1>&2\n-      exit 1\n-    fi\n-    echo \"#define GFC_${k}_KIND ${kind}\"\n-  else\n-    echo \"ERROR: Failed to extract kind for $k\" 1>&2\n-    exit 1\n-  fi\n-  rm -f tmp$$.*\n-done\n \n # After this, we include a header that can override some of the\n # autodetected settings."}]}