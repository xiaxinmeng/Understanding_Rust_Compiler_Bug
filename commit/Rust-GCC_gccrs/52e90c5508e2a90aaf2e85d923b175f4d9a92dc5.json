{"sha": "52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlOTBjNTUwOGUyYTkwYWFmMmU4NWQ5MjNiMTc1ZjRkOWE5MmRjNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-21T09:19:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-21T09:19:42Z"}, "message": "* splay-tree.h: New file.\n\nFrom-SVN: r23211", "tree": {"sha": "7c54cd32a35f2ef5e5054f2cb8d0ce69d6d1c622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c54cd32a35f2ef5e5054f2cb8d0ce69d6d1c622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5/comments", "author": null, "committer": null, "parents": [{"sha": "ed87f9c82725d149cff124d68cc2c4ffe14091a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed87f9c82725d149cff124d68cc2c4ffe14091a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed87f9c82725d149cff124d68cc2c4ffe14091a6"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "1e395b1711c439c685e0bf3a4e3e49d6a068be0f", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "patch": "@@ -1,3 +1,7 @@\n+1998-10-21  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* splay-tree.h: New file.\n+\n Fri Oct  9 00:02:03 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* Merge devo and egcs include directories."}, {"sha": "0088106792d5644ce21d2ec06d119fafd7c07ab8", "filename": "include/splay-tree.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5/include%2Fsplay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e90c5508e2a90aaf2e85d923b175f4d9a92dc5/include%2Fsplay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsplay-tree.h?ref=52e90c5508e2a90aaf2e85d923b175f4d9a92dc5", "patch": "@@ -0,0 +1,116 @@\n+/* A splay-tree datatype.  \n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Contributed by Mark Mitchell (mark@markmitchell.com).\n+\n+   This file is part of GNU CC.\n+   \n+   GNU CC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  \n+\n+   For an easily readable description of splay-trees, see:\n+\n+     Lewis, Harry R. and Denenberg, Larry.  Data Structures and Their\n+     Algorithms.  Harper-Collins, Inc.  1991.  \n+\n+   The major feature of splay trees is that all basic tree operations\n+   are amortized O(log n) time for a tree with n nodes.  */\n+\n+#ifndef _SPLAY_TREE_H\n+#define _SPLAY_TREE_H\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+#ifdef IN_GCC\n+#include \"gansidecl.h\"\n+#define PARAMS(ARGS) PROTO(ARGS)\n+#else /* ! IN_GCC */\n+#include <ansidecl.h>\n+#endif /* IN_GCC */\n+\n+/* Use typedefs for the key and data types to facilitate changing\n+   these types, if necessary.  These types should be sufficiently wide\n+   that any pointer or scalar can be cast to these types, and then\n+   cast back, without loss of precision.  */\n+typedef unsigned long int splay_tree_key;\n+typedef unsigned long int splay_tree_value;\n+\n+/* Forward declaration for a node in the tree.  */\n+typedef struct splay_tree_node *splay_tree_node;\n+\n+/* The type of a function which compares two splay-tree keys.  The\n+   function should return values as for qsort.  */\n+typedef int (*splay_tree_compare_fn)(splay_tree_key, splay_tree_key);\n+\n+/* The type of a function used to deallocate any resources associated\n+   with the key.  */\n+typedef void (*splay_tree_delete_key_fn)(splay_tree_key);\n+\n+/* The type of a function used to deallocate any resources associated\n+   with the value.  */\n+typedef void (*splay_tree_delete_value_fn)(splay_tree_value);\n+\n+/* The type of a function used to iterate over the tree.  */\n+typedef int (*splay_tree_foreach_fn)(splay_tree_node, void*);\n+\n+/* The nodes in the splay tree.  */\n+struct splay_tree_node\n+{\n+  /* The key.  */\n+  splay_tree_key key;\n+\n+  /* The value.  */\n+  splay_tree_value value;\n+\n+  /* The left and right children, respectively.  */\n+  splay_tree_node left;\n+  splay_tree_node right;\n+};\n+\n+/* The splay tree itself.  */\n+typedef struct splay_tree\n+{\n+  /* The root of the tree.  */\n+  splay_tree_node root;\n+\n+  /* The comparision function.  */\n+  splay_tree_compare_fn comp;\n+\n+  /* The deallocate-key function.  NULL if no cleanup is necessary.  */\n+  splay_tree_delete_key_fn delete_key;\n+\n+  /* The deallocate-value function.  NULL if no cleanup is necessary.  */\n+  splay_tree_delete_value_fn delete_value;\n+} *splay_tree;\n+\n+extern splay_tree splay_tree_new        PARAMS((splay_tree_compare_fn,\n+\t\t\t\t\t        splay_tree_delete_key_fn,\n+\t\t\t\t\t        splay_tree_delete_value_fn));\n+extern void splay_tree_delete           PARAMS((splay_tree));\n+extern void splay_tree_insert           PARAMS((splay_tree,\n+\t\t\t\t\t        splay_tree_key,\n+\t\t\t\t\t        splay_tree_value));\n+extern splay_tree_node splay_tree_lookup   \n+                                        PARAMS((splay_tree,\n+\t\t\t\t\t        splay_tree_key));\n+extern int splay_tree_foreach           PARAMS((splay_tree,\n+\t\t\t\t\t        splay_tree_foreach_fn,\n+\t\t\t\t\t        void*));\n+\t\t\t\t\t       \n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* _SPLAY_TREE_H */"}]}