{"sha": "2ff7c604377c1220702aeb4c4b63ed76e56aa577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmN2M2MDQzNzdjMTIyMDcwMmFlYjRjNGI2M2VkNzZlNTZhYTU3Nw==", "commit": {"author": {"name": "Joffrey Huguet", "email": "huguet@adacore.com", "date": "2019-07-05T07:03:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:03:44Z"}, "message": "[Ada] Add contracts to Ada.Text_IO for SPARK\n\nThis change removes the warnings returned when using Ada.Text_IO library\nin SPARK. An abstract state and global contracts were added to modelize\nthe action of Text_IO procedures and function on the memory and the\nfiles.\n\n2019-07-05  Joffrey Huguet  <huguet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-textio.adb: Add abstract state refinment.\n\t* libgnat/a-textio.ads: Add File_System abstract state.  Add\n\tglobal contracts, contract cases, preconditions and\n\tpostconditions to procedures and functions.\n\t(Set_Input, Set_Output, Set_Error, Standard_Input,\n\tStandard_Output, Standard_Error, Current_Input, Current_Output,\n\tCurrent_Error): Turn SPARK_Mode off.\n\t(Get_Line): Turn SPARK_Mode off on Get_Line functions.\n\t* libgnat/a-tideio.ads, libgnat/a-tienio.ads,\n\tlibgnat/a-tifiio.ads, libgnat/a-tiflio.ads,\n\tlibgnat/a-tiinio.ads, libgnat/a-timoio.ads: Add global\n\tcontracts, contract cases, preconditions and postconditions to\n\tprocedures and functions.\n\nFrom-SVN: r273127", "tree": {"sha": "c26a9e2ca3352dd371768c728d2630b38260a0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26a9e2ca3352dd371768c728d2630b38260a0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ff7c604377c1220702aeb4c4b63ed76e56aa577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff7c604377c1220702aeb4c4b63ed76e56aa577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff7c604377c1220702aeb4c4b63ed76e56aa577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff7c604377c1220702aeb4c4b63ed76e56aa577/comments", "author": {"login": "joffreyhuguet", "id": 36951399, "node_id": "MDQ6VXNlcjM2OTUxMzk5", "avatar_url": "https://avatars.githubusercontent.com/u/36951399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joffreyhuguet", "html_url": "https://github.com/joffreyhuguet", "followers_url": "https://api.github.com/users/joffreyhuguet/followers", "following_url": "https://api.github.com/users/joffreyhuguet/following{/other_user}", "gists_url": "https://api.github.com/users/joffreyhuguet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joffreyhuguet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joffreyhuguet/subscriptions", "organizations_url": "https://api.github.com/users/joffreyhuguet/orgs", "repos_url": "https://api.github.com/users/joffreyhuguet/repos", "events_url": "https://api.github.com/users/joffreyhuguet/events{/privacy}", "received_events_url": "https://api.github.com/users/joffreyhuguet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7469acf1c7f70bebd703bb25120f18e509f90f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7469acf1c7f70bebd703bb25120f18e509f90f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7469acf1c7f70bebd703bb25120f18e509f90f3"}], "stats": {"total": 703, "additions": 561, "deletions": 142}, "files": [{"sha": "882011336c12c00bd6bc05825a35f9ae45871a1e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -1,3 +1,19 @@\n+2019-07-05  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-textio.adb: Add abstract state refinment.\n+\t* libgnat/a-textio.ads: Add File_System abstract state.  Add\n+\tglobal contracts, contract cases, preconditions and\n+\tpostconditions to procedures and functions.\n+\t(Set_Input, Set_Output, Set_Error, Standard_Input,\n+\tStandard_Output, Standard_Error, Current_Input, Current_Output,\n+\tCurrent_Error): Turn SPARK_Mode off.\n+\t(Get_Line): Turn SPARK_Mode off on Get_Line functions.\n+\t* libgnat/a-tideio.ads, libgnat/a-tienio.ads,\n+\tlibgnat/a-tifiio.ads, libgnat/a-tiflio.ads,\n+\tlibgnat/a-tiinio.ads, libgnat/a-timoio.ads: Add global\n+\tcontracts, contract cases, preconditions and postconditions to\n+\tprocedures and functions.\n+\n 2019-07-05  Arnaud Charlet  <charlet@adacore.com>\n \n \t* doc/gnat_ugn/platform_specific_information.rst: Refresh doc on"}, {"sha": "276be122c0917337b3ba7617a26110558705d35a", "filename": "gcc/ada/libgnat/a-textio.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-textio.adb?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -43,7 +43,18 @@ with Ada.Unchecked_Deallocation;\n pragma Elaborate_All (System.File_IO);\n --  Needed because of calls to Chain_File in package body elaboration\n \n-package body Ada.Text_IO is\n+package body Ada.Text_IO with\n+  Refined_State => (File_System => (Standard_In,\n+                                    Standard_Out,\n+                                    Standard_Err,\n+                                    Current_In,\n+                                    Current_Out,\n+                                    Current_Err,\n+                                    In_Name,\n+                                    Out_Name,\n+                                    Err_Name,\n+                                    WC_Encoding))\n+is\n \n    package FIO renames System.File_IO;\n "}, {"sha": "a2e1daf043ede01a2e0f6386e9392b7b09040ad8", "filename": "gcc/ada/libgnat/a-textio.ads", "status": "modified", "additions": 361, "deletions": 105, "changes": 466, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-textio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -33,6 +33,14 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. These preconditions\n+--  are partial and protect against Status_Error, Mode_Error, and Layout_Error,\n+--  but not against other types of errors.\n+\n+pragma Assertion_Policy (Pre => Ignore);\n+\n --  Note: the generic subpackages of Text_IO (Integer_IO, Float_IO, Fixed_IO,\n --  Modular_IO, Decimal_IO and Enumeration_IO) appear as private children in\n --  GNAT. These children are with'ed automatically if they are referenced, so\n@@ -46,10 +54,15 @@ with System;\n with System.File_Control_Block;\n with System.WCh_Con;\n \n-package Ada.Text_IO is\n+package Ada.Text_IO with\n+  Abstract_State    => (File_System),\n+  Initializes       => (File_System),\n+  Initial_Condition => Line_Length = 0 and Page_Length = 0\n+is\n    pragma Elaborate_Body;\n \n-   type File_Type is limited private with Default_Initial_Condition;\n+   type File_Type is limited private with\n+     Default_Initial_Condition => (not Is_Open (File_Type));\n    type File_Mode is (In_File, Out_File, Append_File);\n \n    --  The following representation clause allows the use of unchecked\n@@ -87,50 +100,97 @@ package Ada.Text_IO is\n      (File : in out File_Type;\n       Mode : File_Mode := Out_File;\n       Name : String := \"\";\n-      Form : String := \"\");\n+      Form : String := \"\")\n+   with\n+     Pre    => not Is_Open (File),\n+     Post   =>\n+       Is_Open (File)\n+       and then Ada.Text_IO.Mode (File) = Mode\n+       and then (if Mode /= In_File\n+                   then (Line_Length (File) = 0\n+                         and then Page_Length (File) = 0)),\n+     Global => (In_Out => File_System);\n \n    procedure Open\n      (File : in out File_Type;\n       Mode : File_Mode;\n       Name : String;\n-      Form : String := \"\");\n-\n-   procedure Close  (File : in out File_Type);\n-   procedure Delete (File : in out File_Type);\n-   procedure Reset  (File : in out File_Type; Mode : File_Mode);\n-   procedure Reset  (File : in out File_Type);\n-\n-   function Mode (File : File_Type) return File_Mode;\n-   function Name (File : File_Type) return String;\n-   function Form (File : File_Type) return String;\n-\n-   function Is_Open (File : File_Type) return Boolean;\n+      Form : String := \"\")\n+   with\n+     Pre    => not Is_Open (File),\n+     Post   =>\n+      Is_Open (File)\n+      and then Ada.Text_IO.Mode (File) = Mode\n+      and then (if Mode /= In_File\n+                  then (Line_Length (File) = 0\n+                        and then Page_Length (File) = 0)),\n+     Global => (In_Out => File_System);\n+\n+   procedure Close  (File : in out File_Type) with\n+     Pre    => Is_Open (File),\n+     Post   => not Is_Open (File),\n+     Global => (In_Out => File_System);\n+   procedure Delete (File : in out File_Type) with\n+     Pre    => Is_Open (File),\n+     Post   => not Is_Open (File),\n+     Global => (In_Out => File_System);\n+   procedure Reset  (File : in out File_Type; Mode : File_Mode) with\n+     Pre    => Is_Open (File),\n+     Post   =>\n+       Is_Open (File)\n+       and then Ada.Text_IO.Mode (File) = Mode\n+       and then (if Mode /= In_File\n+                   then (Line_Length (File) = 0\n+                         and then Page_Length (File) = 0)),\n+     Global => (In_Out => File_System);\n+   procedure Reset  (File : in out File_Type) with\n+     Pre    => Is_Open (File),\n+     Post   =>\n+       Is_Open (File)\n+       and Mode (File)'Old = Mode (File)\n+       and (if Mode (File) /= In_File\n+                then (Line_Length (File) = 0\n+                      and then Page_Length (File) = 0)),\n+     Global => (In_Out => File_System);\n+\n+   function Mode (File : File_Type) return File_Mode with\n+     Pre    => Is_Open (File),\n+     Global => null;\n+   function Name (File : File_Type) return String with\n+     Pre    => Is_Open (File),\n+     Global => null;\n+   function Form (File : File_Type) return String with\n+     Pre    => Is_Open (File),\n+     Global => null;\n+\n+   function Is_Open (File : File_Type) return Boolean with\n+     Global => null;\n \n    ------------------------------------------------------\n    -- Control of default input, output and error files --\n    ------------------------------------------------------\n \n-   procedure Set_Input  (File : File_Type);\n-   procedure Set_Output (File : File_Type);\n-   procedure Set_Error  (File : File_Type);\n+   procedure Set_Input  (File : File_Type) with SPARK_Mode => Off;\n+   procedure Set_Output (File : File_Type) with SPARK_Mode => Off;\n+   procedure Set_Error  (File : File_Type) with SPARK_Mode => Off;\n \n-   function Standard_Input  return File_Type;\n-   function Standard_Output return File_Type;\n-   function Standard_Error  return File_Type;\n+   function Standard_Input  return File_Type with SPARK_Mode => Off;\n+   function Standard_Output return File_Type with SPARK_Mode => Off;\n+   function Standard_Error  return File_Type with SPARK_Mode => Off;\n \n-   function Current_Input  return File_Type;\n-   function Current_Output return File_Type;\n-   function Current_Error  return File_Type;\n+   function Current_Input  return File_Type with SPARK_Mode => Off;\n+   function Current_Output return File_Type with SPARK_Mode => Off;\n+   function Current_Error  return File_Type with SPARK_Mode => Off;\n \n    type File_Access is access constant File_Type;\n \n-   function Standard_Input  return File_Access;\n-   function Standard_Output return File_Access;\n-   function Standard_Error  return File_Access;\n+   function Standard_Input  return File_Access with SPARK_Mode => Off;\n+   function Standard_Output return File_Access with SPARK_Mode => Off;\n+   function Standard_Error  return File_Access with SPARK_Mode => Off;\n \n-   function Current_Input  return File_Access;\n-   function Current_Output return File_Access;\n-   function Current_Error  return File_Access;\n+   function Current_Input  return File_Access with SPARK_Mode => Off;\n+   function Current_Output return File_Access with SPARK_Mode => Off;\n+   function Current_Error  return File_Access with SPARK_Mode => Off;\n \n    --------------------\n    -- Buffer control --\n@@ -139,129 +199,319 @@ package Ada.Text_IO is\n    --  Note: The parameter file is IN OUT in the RM, but this is clearly\n    --  an oversight, and was intended to be IN, see AI95-00057.\n \n-   procedure Flush (File : File_Type);\n-   procedure Flush;\n+   procedure Flush (File : File_Type) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure Flush with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    --------------------------------------------\n    -- Specification of line and page lengths --\n    --------------------------------------------\n \n-   procedure Set_Line_Length (File : File_Type; To : Count);\n-   procedure Set_Line_Length (To : Count);\n-\n-   procedure Set_Page_Length (File : File_Type; To : Count);\n-   procedure Set_Page_Length (To : Count);\n-\n-   function Line_Length (File : File_Type) return Count;\n-   function Line_Length return Count;\n-\n-   function Page_Length (File : File_Type) return Count;\n-   function Page_Length return Count;\n+   procedure Set_Line_Length (File : File_Type; To : Count) with\n+     Pre    => Is_Open (File)  and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File) = To\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure Set_Line_Length (To : Count) with\n+     Post   =>\n+       Line_Length = To\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   procedure Set_Page_Length (File : File_Type; To : Count) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Page_Length (File) = To\n+       and Line_Length (File)'Old = Line_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure Set_Page_Length (To : Count) with\n+     Post   =>\n+       Page_Length = To\n+       and Line_Length'Old = Line_Length,\n+     Global => (In_Out => File_System);\n+\n+   function Line_Length (File : File_Type) return Count with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Global => (Input => File_System);\n+   function Line_Length return Count with\n+     Global => (Input => File_System);\n+\n+   function Page_Length (File : File_Type) return Count with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Global => (Input => File_System);\n+   function Page_Length return Count with\n+     Global => (Input => File_System);\n \n    ------------------------------------\n    -- Column, Line, and Page Control --\n    ------------------------------------\n \n-   procedure New_Line (File : File_Type; Spacing : Positive_Count := 1);\n-   procedure New_Line (Spacing : Positive_Count := 1);\n-\n-   procedure Skip_Line (File : File_Type; Spacing : Positive_Count := 1);\n-   procedure Skip_Line (Spacing : Positive_Count := 1);\n-\n-   function End_Of_Line (File : File_Type) return Boolean;\n-   function End_Of_Line return Boolean;\n-\n-   procedure New_Page (File : File_Type);\n-   procedure New_Page;\n-\n-   procedure Skip_Page (File : File_Type);\n-   procedure Skip_Page;\n-\n-   function End_Of_Page (File : File_Type) return Boolean;\n-   function End_Of_Page return Boolean;\n-\n-   function End_Of_File (File : File_Type) return Boolean;\n-   function End_Of_File return Boolean;\n-\n-   procedure Set_Col (File : File_Type;  To : Positive_Count);\n-   procedure Set_Col (To : Positive_Count);\n-\n-   procedure Set_Line (File : File_Type; To : Positive_Count);\n-   procedure Set_Line (To : Positive_Count);\n-\n-   function Col (File : File_Type) return Positive_Count;\n-   function Col return Positive_Count;\n-\n-   function Line (File : File_Type) return Positive_Count;\n-   function Line return Positive_Count;\n-\n-   function Page (File : File_Type) return Positive_Count;\n-   function Page return Positive_Count;\n+   procedure New_Line (File : File_Type; Spacing : Positive_Count := 1) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure New_Line (Spacing : Positive_Count := 1) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   procedure Skip_Line (File : File_Type; Spacing : Positive_Count := 1) with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n+   procedure Skip_Line (Spacing : Positive_Count := 1) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   function End_Of_Line (File : File_Type) return Boolean with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (Input => File_System);\n+   function End_Of_Line return Boolean with\n+     Global => (Input => File_System);\n+\n+   procedure New_Page (File : File_Type) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure New_Page with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   procedure Skip_Page (File : File_Type) with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n+   procedure Skip_Page with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   function End_Of_Page (File : File_Type) return Boolean with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (Input => File_System);\n+   function End_Of_Page return Boolean with\n+     Global => (Input => File_System);\n+\n+   function End_Of_File (File : File_Type) return Boolean with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (Input => File_System);\n+   function End_Of_File return Boolean with\n+     Global => (Input => File_System);\n+\n+   procedure Set_Col (File : File_Type;  To : Positive_Count) with\n+     Pre            =>\n+       Is_Open (File)\n+       and then (if Mode (File) /= In_File\n+                     then (Line_Length (File) = 0\n+                           or else To <= Line_Length (File))),\n+     Contract_Cases =>\n+       (Mode (File) /= In_File =>\n+              Line_Length (File)'Old = Line_Length (File)\n+              and Page_Length (File)'Old = Page_Length (File),\n+        others                 => True),\n+     Global         => (In_Out => File_System);\n+   procedure Set_Col (To : Positive_Count) with\n+     Pre    => Line_Length = 0 or To <= Line_Length,\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   procedure Set_Line (File : File_Type; To : Positive_Count) with\n+     Pre            =>\n+       Is_Open (File)\n+       and then (if Mode (File) /= In_File\n+                     then (Page_Length (File) = 0\n+                           or else To <= Page_Length (File))),\n+     Contract_Cases =>\n+       (Mode (File) /= In_File =>\n+              Line_Length (File)'Old = Line_Length (File)\n+              and Page_Length (File)'Old = Page_Length (File),\n+        others                 => True),\n+     Global         => (In_Out => File_System);\n+   procedure Set_Line (To : Positive_Count) with\n+     Pre    => Page_Length = 0 or To <= Page_Length,\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+\n+   function Col (File : File_Type) return Positive_Count with\n+     Pre    => Is_Open (File),\n+     Global => (Input => File_System);\n+   function Col return Positive_Count with\n+     Global => (Input => File_System);\n+\n+   function Line (File : File_Type) return Positive_Count with\n+     Pre    => Is_Open (File),\n+     Global => (Input => File_System);\n+   function Line return Positive_Count with\n+     Global => (Input => File_System);\n+\n+   function Page (File : File_Type) return Positive_Count with\n+     Pre => Is_Open (File),\n+     Global => (Input => File_System);\n+   function Page return Positive_Count with\n+     Global => (Input => File_System);\n \n    ----------------------------\n    -- Character Input-Output --\n    ----------------------------\n \n-   procedure Get (File : File_Type; Item : out Character);\n-   procedure Get (Item : out Character);\n-   procedure Put (File : File_Type; Item : Character);\n-   procedure Put (Item : Character);\n+   procedure Get (File : File_Type; Item : out Character) with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n+   procedure Get (Item : out Character) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+   procedure Put (File : File_Type; Item : Character) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure Put (Item : Character) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Look_Ahead\n      (File        : File_Type;\n       Item        : out Character;\n-      End_Of_Line : out Boolean);\n+      End_Of_Line : out Boolean)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (Input => File_System);\n \n    procedure Look_Ahead\n      (Item        : out Character;\n-      End_Of_Line : out Boolean);\n+      End_Of_Line : out Boolean)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (Input => File_System);\n \n    procedure Get_Immediate\n      (File : File_Type;\n-      Item : out Character);\n+      Item : out Character)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get_Immediate\n-     (Item : out Character);\n+     (Item : out Character)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get_Immediate\n      (File      : File_Type;\n       Item      : out Character;\n-      Available : out Boolean);\n+      Available : out Boolean)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get_Immediate\n      (Item      : out Character;\n-      Available : out Boolean);\n+      Available : out Boolean)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    -------------------------\n    -- String Input-Output --\n    -------------------------\n \n-   procedure Get (File : File_Type; Item : out String);\n-   procedure Get (Item : out String);\n-   procedure Put (File : File_Type; Item : String);\n-   procedure Put (Item : String);\n+   procedure Get (File : File_Type; Item : out String) with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n+   procedure Get (Item : out String) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n+   procedure Put (File : File_Type; Item : String) with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n+   procedure Put (Item : String) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get_Line\n      (File : File_Type;\n       Item : out String;\n-      Last : out Natural);\n+      Last : out Natural)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Post   => (if Item'Length > 0 then Last in Item'First - 1 .. Item'Last\n+               else Last = Item'First - 1),\n+     Global => (In_Out => File_System);\n \n    procedure Get_Line\n      (Item : out String;\n-      Last : out Natural);\n-\n-   function Get_Line (File : File_Type) return String;\n+      Last : out Natural)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length\n+       and (if Item'Length > 0 then Last in Item'First - 1 .. Item'Last\n+            else Last = Item'First - 1),\n+     Global => (In_Out => File_System);\n+\n+   function Get_Line (File : File_Type) return String with SPARK_Mode => Off;\n    pragma Ada_05 (Get_Line);\n \n-   function Get_Line return String;\n+   function Get_Line return String with SPARK_Mode => Off;\n    pragma Ada_05 (Get_Line);\n \n    procedure Put_Line\n      (File : File_Type;\n-      Item : String);\n+      Item : String)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put_Line\n-     (Item : String);\n+     (Item : String)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    ---------------------------------------\n    -- Generic packages for Input-Output --\n@@ -447,14 +697,20 @@ private\n    Standard_Out_AFCB : aliased Text_AFCB;\n    Standard_Err_AFCB : aliased Text_AFCB;\n \n-   Standard_In  : aliased File_Type := Standard_In_AFCB'Access;\n-   Standard_Out : aliased File_Type := Standard_Out_AFCB'Access;\n-   Standard_Err : aliased File_Type := Standard_Err_AFCB'Access;\n+   Standard_In  : aliased File_Type := Standard_In_AFCB'Access with\n+     Part_Of => File_System;\n+   Standard_Out : aliased File_Type := Standard_Out_AFCB'Access with\n+     Part_Of => File_System;\n+   Standard_Err : aliased File_Type := Standard_Err_AFCB'Access with\n+     Part_Of => File_System;\n    --  Standard files\n \n-   Current_In   : aliased File_Type := Standard_In;\n-   Current_Out  : aliased File_Type := Standard_Out;\n-   Current_Err  : aliased File_Type := Standard_Err;\n+   Current_In   : aliased File_Type := Standard_In with\n+     Part_Of => File_System;\n+   Current_Out  : aliased File_Type := Standard_Out with\n+     Part_Of => File_System;\n+   Current_Err  : aliased File_Type := Standard_Err with\n+     Part_Of => File_System;\n    --  Current files\n \n    function EOF_Char return Integer;"}, {"sha": "efe52c565d2d8f0dbc479aaf47dea734f8e859ae", "filename": "gcc/ada/libgnat/a-tideio.ads", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tideio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tideio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tideio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -52,35 +52,58 @@ package Ada.Text_IO.Decimal_IO is\n    procedure Get\n      (File  : File_Type;\n       Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File : File_Type;\n       Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Global => null;\n \n private\n    pragma Inline (Get);"}, {"sha": "fb80abdf8ff79817db1b0b8912ded4a2c5f1dc16", "filename": "gcc/ada/libgnat/a-tienio.ads", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tienio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tienio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tienio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -28,28 +28,49 @@ package Ada.Text_IO.Enumeration_IO is\n    Default_Width : Field := 0;\n    Default_Setting : Type_Set := Upper_Case;\n \n-   procedure Get (File : File_Type; Item : out Enum);\n-   procedure Get (Item : out Enum);\n+   procedure Get (File : File_Type; Item : out Enum) with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n+   procedure Get (Item : out Enum) with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Enum;\n       Width : Field := Default_Width;\n-      Set   : Type_Set := Default_Setting);\n+      Set   : Type_Set := Default_Setting)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item  : Enum;\n       Width : Field := Default_Width;\n-      Set   : Type_Set := Default_Setting);\n+      Set   : Type_Set := Default_Setting)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Enum;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Enum;\n-      Set  : Type_Set := Default_Setting);\n+      Set  : Type_Set := Default_Setting)\n+   with\n+     Global => null;\n \n end Ada.Text_IO.Enumeration_IO;"}, {"sha": "1acf67ab760c546017107c4982b38eec02891ac8", "filename": "gcc/ada/libgnat/a-tifiio.ads", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -32,35 +32,58 @@ package Ada.Text_IO.Fixed_IO is\n    procedure Get\n      (File  : File_Type;\n       Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File : File_Type;\n       Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Global => null;\n \n private\n    pragma Inline (Get);"}, {"sha": "16e65a55de2482b8af7b22b9ab43c24357e0c3da", "filename": "gcc/ada/libgnat/a-tiflio.ads", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -52,35 +52,58 @@ package Ada.Text_IO.Float_IO is\n    procedure Get\n      (File  : File_Type;\n       Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File : File_Type;\n       Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Exp  : Field := Default_Exp)\n+   with\n+     Global => null;\n \n private\n    pragma Inline (Get);"}, {"sha": "28f8d54abf79bf1cb92b09d69a4f96c7d7d4243a", "filename": "gcc/ada/libgnat/a-tiinio.ads", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -51,32 +51,55 @@ package Ada.Text_IO.Integer_IO is\n    procedure Get\n      (File  : File_Type;\n       Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Num;\n       Width : Field := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+      Base  : Number_Base := Default_Base)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item  : Num;\n       Width : Field := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+      Base  : Number_Base := Default_Base)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n-      Base : Number_Base := Default_Base);\n+      Base : Number_Base := Default_Base)\n+   with\n+     Global => null;\n \n private\n    pragma Inline (Get);"}, {"sha": "2d1ab91d4a4d573933ac798a4ad6953dc7bf79d9", "filename": "gcc/ada/libgnat/a-timoio.ads", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-timoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff7c604377c1220702aeb4c4b63ed76e56aa577/gcc%2Fada%2Flibgnat%2Fa-timoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-timoio.ads?ref=2ff7c604377c1220702aeb4c4b63ed76e56aa577", "patch": "@@ -51,32 +51,55 @@ package Ada.Text_IO.Modular_IO is\n    procedure Get\n      (File  : File_Type;\n       Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) = In_File,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (Item  : out Num;\n-      Width : Field := 0);\n+      Width : Field := 0)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Num;\n       Width : Field := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+      Base  : Number_Base := Default_Base)\n+   with\n+     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n+     Post   =>\n+       Line_Length (File)'Old = Line_Length (File)\n+       and Page_Length (File)'Old = Page_Length (File),\n+     Global => (In_Out => File_System);\n \n    procedure Put\n      (Item  : Num;\n       Width : Field := Default_Width;\n-      Base  : Number_Base := Default_Base);\n+      Base  : Number_Base := Default_Base)\n+   with\n+     Post   =>\n+       Line_Length'Old = Line_Length\n+       and Page_Length'Old = Page_Length,\n+     Global => (In_Out => File_System);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n-      Last : out Positive);\n+      Last : out Positive)\n+   with\n+     Global => null;\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n-      Base : Number_Base := Default_Base);\n+      Base : Number_Base := Default_Base)\n+   with\n+     Global => null;\n \n private\n    pragma Inline (Get);"}]}