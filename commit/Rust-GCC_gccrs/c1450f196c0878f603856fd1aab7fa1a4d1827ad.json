{"sha": "c1450f196c0878f603856fd1aab7fa1a4d1827ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0NTBmMTk2YzA4NzhmNjAzODU2ZmQxYWFiN2ZhMWE0ZDE4MjdhZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-15T19:33:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-15T19:33:07Z"}, "message": "Do not use separate 386 patterns for SF/DF/XF/DI pushes; allow SF/DF/XF/DI pushes to push from memory if no scratch register available; allow use of leal on 486; allow XF<-XF memory moves on 386\n\nFrom-SVN: r8088", "tree": {"sha": "a2f318a1cca5fcd074c68949b67c325accec6969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f318a1cca5fcd074c68949b67c325accec6969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1450f196c0878f603856fd1aab7fa1a4d1827ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1450f196c0878f603856fd1aab7fa1a4d1827ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1450f196c0878f603856fd1aab7fa1a4d1827ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1450f196c0878f603856fd1aab7fa1a4d1827ad/comments", "author": null, "committer": null, "parents": [{"sha": "11203ed8a9ef35a115e16f0b618f0d02cc98736e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11203ed8a9ef35a115e16f0b618f0d02cc98736e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11203ed8a9ef35a115e16f0b618f0d02cc98736e"}], "stats": {"total": 143, "additions": 68, "deletions": 75}, "files": [{"sha": "330002be909afd05acd3358b4dc4febe6a6d96c9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 68, "deletions": 75, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1450f196c0878f603856fd1aab7fa1a4d1827ad/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1450f196c0878f603856fd1aab7fa1a4d1827ad/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c1450f196c0878f603856fd1aab7fa1a4d1827ad", "patch": "@@ -1070,11 +1070,9 @@\n       && GET_CODE (operands[0]) == MEM\n       && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], SFmode)))\n     {\n-      rtx (*genfunc) PROTO((rtx, rtx));\n-      if (push_operand (operands[0], SFmode))\n-\tgenfunc = (TARGET_386) ? gen_movsf_push386 : gen_movsf_push486;\n-      else\n-\tgenfunc = gen_movsf_mem;\n+      rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], SFmode))\n+\t\t\t\t\t\t? gen_movsf_push\n+\t\t\t\t\t\t: gen_movsf_mem;\n \n       emit_insn ((*genfunc) (operands[0], operands[1]));\n       DONE;\n@@ -1084,7 +1082,7 @@\n (define_insn \"movsf_push386\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:SF 1 \"general_operand\" \"gF,f\"))]\n-  \"TARGET_386 || !TARGET_MOVE\"\n+  \"!TARGET_MOVE\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1109,11 +1107,11 @@\n   return AS1 (push%L1,%1);\n }\")\n \n-(define_insn \"movsf_push486\"\n+(define_insn \"movsf_push\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=<,<,<\")\n \t(match_operand:SF 1 \"general_operand\" \"rF,f,m\"))\n    (clobber (match_scratch:SI 2 \"=X,X,r\"))]\n-  \"!TARGET_386\"\n+  \"\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1241,21 +1239,19 @@\n       && GET_CODE (operands[0]) == MEM\n       && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], DFmode)))\n     {\n-      rtx (*genfunc) PROTO((rtx, rtx));\n-      if (push_operand (operands[0], DFmode))\n-\tgenfunc = (TARGET_386) ? gen_movdf_push386 : gen_movdf_push486;\n-      else\n-\tgenfunc = gen_movdf_mem;\n+      rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], DFmode))\n+\t\t\t\t\t\t? gen_movdf_push\n+\t\t\t\t\t\t: gen_movdf_mem;\n \n       emit_insn ((*genfunc) (operands[0], operands[1]));\n       DONE;\n     }\n }\")\n \n-(define_insn \"movdf_push386\"\n+(define_insn \"movdf_push_nomove\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:DF 1 \"general_operand\" \"gF,f\"))]\n-  \"TARGET_386 || !TARGET_MOVE\"\n+  \"!TARGET_MOVE\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1279,12 +1275,12 @@\n     return output_move_double (operands);\n }\")\n \n-(define_insn \"movdf_push486\"\n-  [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<\")\n-\t(match_operand:DF 1 \"general_operand\" \"rF,f,o,o\"))\n-   (clobber (match_scratch:SI 2 \"=X,X,&r,&r\"))\n-   (clobber (match_scratch:SI 3 \"=X,X,&r,X\"))]\n-  \"!TARGET_386\"\n+(define_insn \"movdf_push\"\n+  [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<,<\")\n+\t(match_operand:DF 1 \"general_operand\" \"rF,f,o,o,o\"))\n+   (clobber (match_scratch:SI 2 \"=X,X,&r,&r,X\"))\n+   (clobber (match_scratch:SI 3 \"=X,X,&r,X,X\"))]\n+  \"\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1305,7 +1301,8 @@\n       RET;\n     }\n \n-  else if (GET_CODE (operands[1]) != MEM)\n+  else if (GET_CODE (operands[1]) != MEM\n+\t   || GET_CODE (operands[2]) != REG)\n     return output_move_double (operands);\n \n   else\n@@ -1459,21 +1456,20 @@\n       && GET_CODE (operands[0]) == MEM\n       && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], XFmode)))\n     {\n-      rtx (*genfunc) PROTO((rtx, rtx));\n-      if (push_operand (operands[0], XFmode))\n-\tgenfunc = (TARGET_386) ? gen_movxf_push386 : gen_movxf_push486;\n-      else\n-\tgenfunc = gen_movxf_mem;\n+      rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], XFmode))\n+\t\t\t\t\t\t? gen_movxf_push\n+\t\t\t\t\t\t: gen_movxf_mem;\n \n       emit_insn ((*genfunc) (operands[0], operands[1]));\n       DONE;\n     }\n }\")\n \n-(define_insn \"movxf_push386\"\n+\n+(define_insn \"movxf_push_nomove\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n  \t(match_operand:XF 1 \"general_operand\" \"gF,f\"))]\n-  \"TARGET_386 || !TARGET_MOVE\"\n+  \"!TARGET_MOVE\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1495,12 +1491,12 @@\n     return output_move_double (operands);\n  }\")\n \n-(define_insn \"movxf_push486\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<,<,<,<\")\n- \t(match_operand:XF 1 \"general_operand\" \"rF,f,o,o\"))\n-   (clobber (match_scratch:SI 2 \"=X,X,&r,&r\"))\n-   (clobber (match_scratch:SI 3 \"=X,X,&r,X\"))]\n-  \"!TARGET_386\"\n+(define_insn \"movxf_push\"\n+  [(set (match_operand:XF 0 \"push_operand\" \"=<,<,<,<,<\")\n+ \t(match_operand:XF 1 \"general_operand\" \"rF,f,o,o,o\"))\n+   (clobber (match_scratch:SI 2 \"=X,X,&r,&r,X\"))\n+   (clobber (match_scratch:SI 3 \"=X,X,&r,X,X\"))]\n+  \"\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1519,7 +1515,8 @@\n       RET;\n     }\n \n-  else if (GET_CODE (operands[1]) != MEM)\n+  else if (GET_CODE (operands[1]) != MEM\n+\t   || GET_CODE (operands[2]) != REG)\n     return output_move_double (operands);\n \n   else\n@@ -1575,7 +1572,7 @@\n \t(match_operand:XF 1 \"memory_operand\" \"o,o\"))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))\n    (clobber (match_scratch:SI 3 \"=&r,X\"))]\n-  \"!TARGET_386\"\n+  \"\"\n   \"*\n {\n   rtx xop[8];\n@@ -1693,32 +1690,31 @@\n       && GET_CODE (operands[0]) == MEM\n       && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], DImode)))\n     {\n-      rtx (*genfunc) PROTO((rtx, rtx));\n-      if (push_operand (operands[0], DImode))\n-\tgenfunc = (TARGET_386) ? gen_movdi_push386 : gen_movdi_push486;\n-      else\n-\tgenfunc = gen_movdi_mem;\n+      rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], DImode))\n+\t\t\t\t\t\t? gen_movdi_push\n+\t\t\t\t\t\t: gen_movdi_mem;\n \n       emit_insn ((*genfunc) (operands[0], operands[1]));\n       DONE;\n     }\n }\")\n \n-(define_insn \"movdi_push386\"\n+(define_insn \"movdi_push_nomove\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n \t(match_operand:DI 1 \"general_operand\" \"roiF\"))]\n-  \"TARGET_386 || !TARGET_MOVE\"\n+  \"!TARGET_MOVE\"\n   \"* return output_move_double (operands);\")\n \n-(define_insn \"movdi_push486\"\n-  [(set (match_operand:DI 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:DI 1 \"general_operand\" \"riF,o,o\"))\n-   (clobber (match_scratch:SI 2 \"=X,&r,=&r\"))\n-   (clobber (match_scratch:SI 3 \"=X,&r,X\"))]\n-  \"!TARGET_386\"\n+(define_insn \"movdi_push\"\n+  [(set (match_operand:DI 0 \"push_operand\" \"=<,<,<,<\")\n+\t(match_operand:DI 1 \"general_operand\" \"riF,o,o,o\"))\n+   (clobber (match_scratch:SI 2 \"=X,&r,&r,X\"))\n+   (clobber (match_scratch:SI 3 \"=X,&r,X,X\"))]\n+  \"\"\n   \"*\n {\n-  if (GET_CODE (operands[1]) != MEM)\n+  if (GET_CODE (operands[1]) != MEM\n+      || GET_CODE (operands[2]) != REG)\n     return output_move_double (operands);\n \n   else\n@@ -1810,7 +1806,7 @@\n   \"\"\n   \"*\n {\n-  if ((TARGET_486 || REGNO (operands[0]) == 0)\n+  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -1834,7 +1830,7 @@\n   \"\"\n   \"*\n {\n-  if ((TARGET_486 || REGNO (operands[0]) == 0)\n+  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -1858,7 +1854,7 @@\n   \"\"\n   \"*\n {\n-  if ((TARGET_486 || REGNO (operands[0]) == 0)\n+  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -2599,23 +2595,20 @@\n       if (REG_P (operands[2]) && REGNO (operands[0]) == REGNO (operands[2]))\n \treturn AS2 (add%L0,%1,%0);\n \n-      if (! TARGET_486 || ! REG_P (operands[2]))\n-        {\n-\t  CC_STATUS_INIT;\n+      if (operands[2] == stack_pointer_rtx)\n+\t{\n+\t  rtx temp;\n \n-\t  if (operands[2] == stack_pointer_rtx)\n-\t    {\n-\t      rtx temp;\n+\t  temp = operands[1];\n+\t  operands[1] = operands[2];\n+\t  operands[2] = temp;\n+\t}\n \n-\t      temp = operands[1];\n-\t      operands[1] = operands[2];\n-\t      operands[2] = temp;\n-\t    }\n-\t  if (operands[2] != stack_pointer_rtx)\n-\t    {\n-\t      operands[1] = SET_SRC (PATTERN (insn));\n-\t      return AS2 (lea%L0,%a1,%0);\n-\t    }\n+      if (operands[2] != stack_pointer_rtx)\n+\t{\n+\t  CC_STATUS_INIT;\n+\t  operands[1] = SET_SRC (PATTERN (insn));\n+\t  return AS2 (lea%L0,%a1,%0);\n \t}\n \n       output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n@@ -3094,7 +3087,7 @@\n       if (INTVAL (operands[2]) == 0xffff && REG_P (operands[0])\n \t  && (! REG_P (operands[1])\n \t      || REGNO (operands[0]) != 0 || REGNO (operands[1]) != 0)\n-\t  && (! TARGET_486 || ! rtx_equal_p (operands[0], operands[1])))\n+\t  && (TARGET_386 || ! rtx_equal_p (operands[0], operands[1])))\n \t{\n \t  /* ??? tege: Should forget CC_STATUS only if we clobber a\n \t     remembered operand.  Fix that later.  */\n@@ -3110,7 +3103,7 @@\n \t  && !(REG_P (operands[1]) && NON_QI_REG_P (operands[1]))\n \t  && (! REG_P (operands[1])\n \t      || REGNO (operands[0]) != 0 || REGNO (operands[1]) != 0)\n-\t  && (! TARGET_486 || ! rtx_equal_p (operands[0], operands[1])))\n+\t  && (TARGET_386 || ! rtx_equal_p (operands[0], operands[1])))\n \t{\n \t  /* ??? tege: Should forget CC_STATUS only if we clobber a\n \t     remembered operand.  Fix that later.  */\n@@ -3753,7 +3746,7 @@\n {\n   if (REG_P (operands[0]) && REGNO (operands[0]) != REGNO (operands[1]))\n     {\n-      if (TARGET_486 && INTVAL (operands[2]) == 1)\n+      if (!TARGET_386 && INTVAL (operands[2]) == 1)\n \t{\n \t  output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n \t  return AS2 (add%L0,%1,%0);\n@@ -4254,7 +4247,7 @@\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 2 \"general_operand\" \"r\"))\n \t(match_operand:SI 3 \"const_int_operand\" \"n\"))]\n-  \"! TARGET_486 && GET_CODE (operands[2]) != CONST_INT\"\n+  \"TARGET_386 && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -4272,7 +4265,7 @@\n \t(xor:SI (ashift:SI (const_int 1)\n \t\t\t   (match_operand:SI 1 \"general_operand\" \"r\"))\n \t\t(match_operand:SI 2 \"general_operand\" \"0\")))]\n-  \"! TARGET_486 && GET_CODE (operands[1]) != CONST_INT\"\n+  \"TARGET_386 && GET_CODE (operands[1]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -4285,7 +4278,7 @@\n \t(xor:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t(ashift:SI (const_int 1)\n \t\t\t   (match_operand:SI 2 \"general_operand\" \"r\"))))]\n-  \"! TARGET_486 && GET_CODE (operands[2]) != CONST_INT\"\n+  \"TARGET_386 && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;"}]}