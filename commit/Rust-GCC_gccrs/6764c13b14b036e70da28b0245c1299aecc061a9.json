{"sha": "6764c13b14b036e70da28b0245c1299aecc061a9", "node_id": "C_kwDOANBUbNoAKDY3NjRjMTNiMTRiMDM2ZTcwZGEyOGIwMjQ1YzEyOTlhZWNjMDYxYTk", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:33:58Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:22Z"}, "message": "arm: improve tests for vcaddq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c: Likewise.", "tree": {"sha": "2c32dbc89d13a5eb670f778eefaef4ac3b635105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c32dbc89d13a5eb670f778eefaef4ac3b635105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6764c13b14b036e70da28b0245c1299aecc061a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6764c13b14b036e70da28b0245c1299aecc061a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6764c13b14b036e70da28b0245c1299aecc061a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6764c13b14b036e70da28b0245c1299aecc061a9/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d46d5ba0bf81a7431c0bae1ad8d1024249be47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d46d5ba0bf81a7431c0bae1ad8d1024249be47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d46d5ba0bf81a7431c0bae1ad8d1024249be47"}], "stats": {"total": 1456, "additions": 1312, "deletions": 144}, "files": [{"sha": "fb83a1cd8fc070b9f0372be59e1f9b7cadbc0d04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcaddq_rot270_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f8341a74e4afef50fbf2586b06ee67c81dcd9bda", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcaddq_rot270_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b4e2ffda2803cb74a31ace1da2457bc67c6ec9e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e7adc1be243f649ab3672988941f4439c900a064", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fdde2f56b202f4fdb97b790aa109112ba41367e4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1cb6afb4e4d40461e38911e62472245373678307", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "39f063970f72319ef04d7fab9655074b7df43c6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fd285288487af92a85a16f7ed8ddc821b816eca0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "053a61197d68c450458436bbbd68ec313b9faadb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "869983a0a0b43a21d86f80371a89f0ab323ab526", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "67b0d0a4d0f994ed9f9cbe190d6180ba725526cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcaddq_rot270_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ab28458130e5d4106d37f4900fa9c8e6072e622c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcaddq_rot270_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "842d6adf96d431d5ab1243ed168085abad0f32f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcaddq_rot270_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "97773d8daa9ea448e5b589e845714b058106d910", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcaddq_rot270_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "17d5c1472954db7de73b48564510e58ecade20f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcaddq_rot270_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "faf01a188241f0f0d4acca2325daed7e018c8566", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcaddq_rot270_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcaddq_rot270 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f35aaf01a59ee5a9cc37f8746e33346efbffd8a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6446d9edc429941c5bb1d518ab6e1468c6f9d43c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b92fd2ee8aae6fa897defb2996697aef5d5b567a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b8acc67feb94751c633af9af821c737e549628eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "78ec786257437253734f36e668d9556a945d61a3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ea7816224241a6d0de7ade56c9d85a9c192144e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a43d806ac3d9dbdf35d8a45347d8a0c109d38bda", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eb9cf0cffb67676fd53b1a9c09befbf8ecc744cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot270_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1e78bd144b20907c60192a4e15e3f3138c43921b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcaddq_rot90_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9611f8938dc6ded1814fc660212ae99fccb1c225", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcaddq_rot90_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "58608b4961ea480f8daf0f25ad3e4a75782ce19e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "125dbe5405c6f040a57b91f92cb15518f08875a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "38e0e47b50020e077bc0e4ea21182f7db28a83ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "455d8388f0fc7c4c1d64d2a9b215ef825344f9c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7217dadaac0de05735468f0297d521067dea0584", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d3edbaa478c98c57ef9a77c785e238d49f8ff194", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eb1bf2a4274dd4eab9fc1b8014891aaaaac18fed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3343399b2c3ab61bb9ef81c773c0c864d4470d27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "134fba6280fddba44675cef54701f989fa2675a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcaddq_rot90_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b8e81679e9e0729a7d8125d69d6346f3391188c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcaddq_rot90_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2a37b8e7b8350a11223b5f79aa0f576e8ade78ff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcaddq_rot90_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "51e1871b690a0ee03516579f0423b0455c51ca78", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcaddq_rot90_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5905062064a2c01df1e40e24e9fbfecafebadee0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcaddq_rot90_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "37374637eb399b600f29b59c63916b44cbba190f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcaddq_rot90_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcaddq_rot90 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4223c4d0f335f4b7d5df802b2a9d932ba091f520", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9e67c56b5e81ff17ce082dc53f3e9ebddeb60766", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "553fc2801fb432f03842538d9f5d81c81336940f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1cd7338d16230f42d0ffa2863f6c7481b8e141c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "13373d46154f50e7ae668f41755a2eb5a5c13007", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3f8957783e38ee47cf48edcdfd2df456d10af042", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "34cb036357406a1dace5896743f4600455e1cf48", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d383404052dff3bc5d62db2446feb43b70b64c11", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6764c13b14b036e70da28b0245c1299aecc061a9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c?ref=6764c13b14b036e70da28b0245c1299aecc061a9", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcaddq_rot90_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}