{"sha": "9f90d12301fa640d4664b7924cbacb75e9e304d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5MGQxMjMwMWZhNjQwZDQ2NjRiNzkyNGNiYWNiNzVlOWUzMDRkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T07:42:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T07:42:46Z"}, "message": "[multiple changes]\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor reformatting.\n\t* sem_prag.adb: Minor reformatting.\n\n2011-08-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* vms_data.ads: Add VMS qualifier for -gnateP.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch13.adb (P_Aspect_Specification): New meaning of Decl = Empty\n\t* par-ch7.adb (P_Package): Proper placement of aspects for package\n\tdecl/instantiation.\n\t* par-endh.adb (Check_End): Ad Is_Sloc parameter\n\t(End_Statements): Add Is_Sloc parameterr\n\t* par.adb (P_Aspect_Specification): New meaning of Decl = Empty\n\t(Check_End): Ad Is_Sloc parameter\n\t(End_Statements): Add Is_Sloc parameterr\n\n2011-08-02  Vincent Celier  <celier@adacore.com>\n\n\t* ug_words: Add VMS qualifier equivalent to -gnateP:\n\t/SYMBOL_PREPROCESSING.\n\n2011-08-02  Jose Ruiz  <ruiz@adacore.com>\n\n\t* gnat-style.texi: For hexadecimal numeric literals the typical\n\tgrouping of digits is 4 to represent 2 bytes.\n\tA procedure spec which is split into several lines is indented two\n\tcharacters.\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* exp_aggr.adb (Is_Others_Aggregate): move function to other unit.\n\t* sem_aggr.adb, sem_aggr.ads (Is_Others_Aggregate): move function here\n\t(Resolve_Aggregate): issue errors in formal modes when aggregate is not\n\tproperly qualified\n\t(Resolve_Array_Aggregate): issue errors in formal modes on non-static\n\tchoice in array aggregate\n\t(Resolve_Extension_Aggregate): issue errors in formal modes on subtype\n\tmark as ancestor\n\t(Resolve_Record_Aggregate): issue errors in formal modes on mixed\n\tpositional and named aggregate for record, or others in record\n\taggregate, or multiple choice in record aggregate\n\t* sem_res.adb (Resolve_Logical_Op): issue errors in formal mode when\n\tarray operands to logical operations AND, OR and XOR do not have the\n\tsame static lower and higher bounds\n\t* sem_ch5.adb, sinfo.ads: Correct typos in comments\n\nFrom-SVN: r177086", "tree": {"sha": "72abc89b907673e095c09bd0dd495a685a603aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72abc89b907673e095c09bd0dd495a685a603aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f90d12301fa640d4664b7924cbacb75e9e304d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f90d12301fa640d4664b7924cbacb75e9e304d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f90d12301fa640d4664b7924cbacb75e9e304d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f90d12301fa640d4664b7924cbacb75e9e304d2/comments", "author": null, "committer": null, "parents": [{"sha": "390fa58886e1151f7844702ad2525febc18cfbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390fa58886e1151f7844702ad2525febc18cfbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/390fa58886e1151f7844702ad2525febc18cfbf1"}], "stats": {"total": 405, "additions": 355, "deletions": 50}, "files": [{"sha": "8702efb41f2261f46b228b9c295a4fcc0220e502", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -1,3 +1,53 @@\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor reformatting.\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2011-08-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* vms_data.ads: Add VMS qualifier for -gnateP.\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch13.adb (P_Aspect_Specification): New meaning of Decl = Empty\n+\t* par-ch7.adb (P_Package): Proper placement of aspects for package\n+\tdecl/instantiation.\n+\t* par-endh.adb (Check_End): Ad Is_Sloc parameter\n+\t(End_Statements): Add Is_Sloc parameterr\n+\t* par.adb (P_Aspect_Specification): New meaning of Decl = Empty\n+\t(Check_End): Ad Is_Sloc parameter\n+\t(End_Statements): Add Is_Sloc parameterr\n+\n+2011-08-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* ug_words: Add VMS qualifier equivalent to -gnateP:\n+\t/SYMBOL_PREPROCESSING.\n+\n+2011-08-02  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* gnat-style.texi: For hexadecimal numeric literals the typical\n+\tgrouping of digits is 4 to represent 2 bytes.\n+\tA procedure spec which is split into several lines is indented two\n+\tcharacters.\n+\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_aggr.adb (Is_Others_Aggregate): move function to other unit.\n+\t* sem_aggr.adb, sem_aggr.ads (Is_Others_Aggregate): move function here\n+\t(Resolve_Aggregate): issue errors in formal modes when aggregate is not\n+\tproperly qualified\n+\t(Resolve_Array_Aggregate): issue errors in formal modes on non-static\n+\tchoice in array aggregate\n+\t(Resolve_Extension_Aggregate): issue errors in formal modes on subtype\n+\tmark as ancestor\n+\t(Resolve_Record_Aggregate): issue errors in formal modes on mixed\n+\tpositional and named aggregate for record, or others in record\n+\taggregate, or multiple choice in record aggregate\n+\t* sem_res.adb (Resolve_Logical_Op): issue errors in formal mode when\n+\tarray operands to logical operations AND, OR and XOR do not have the\n+\tsame static lower and higher bounds\n+\t* sem_ch5.adb, sinfo.ads: Correct typos in comments\n+\n 2011-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.ads, sem_util.adb, sem_ch6.adb (Last_Source_Statement):"}, {"sha": "536b317cab848b8da6decbcc9d563a0f14e025a2", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -49,6 +49,7 @@ with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Ttypes;   use Ttypes;\n with Sem;      use Sem;\n+with Sem_Aggr; use Sem_Aggr;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Eval; use Sem_Eval;\n@@ -4510,10 +4511,6 @@ package body Exp_Aggr is\n          Obj_Lo  : Node_Id;\n          Obj_Hi  : Node_Id;\n \n-         function Is_Others_Aggregate (Aggr : Node_Id) return Boolean;\n-         --  Aggregates that consist of a single Others choice are safe\n-         --  if the single expression is.\n-\n          function Safe_Aggregate (Aggr : Node_Id) return Boolean;\n          --  Check recursively that each component of a (sub)aggregate does\n          --  not depend on the variable being assigned to.\n@@ -4522,18 +4519,6 @@ package body Exp_Aggr is\n          --  Verify that an expression cannot depend on the variable being\n          --  assigned to. Room for improvement here (but less than before).\n \n-         -------------------------\n-         -- Is_Others_Aggregate --\n-         -------------------------\n-\n-         function Is_Others_Aggregate (Aggr : Node_Id) return Boolean is\n-         begin\n-            return No (Expressions (Aggr))\n-              and then Nkind\n-                (First (Choices (First (Component_Associations (Aggr)))))\n-                  = N_Others_Choice;\n-         end Is_Others_Aggregate;\n-\n          --------------------\n          -- Safe_Aggregate --\n          --------------------"}, {"sha": "1bba70309359f501d1cad65e6a64e233dd02030d", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -196,7 +196,7 @@ readability.\n \n @smallexample\n       1_000_000\n-      16#8000_000#\n+      16#8000_0000#\n       3.14159_26535_89793_23846\n @end smallexample\n @end itemize\n@@ -637,10 +637,10 @@ the colons, as in:\n @smallexample @c adanocomment\n @group\n      procedure Set_Heading\n-        (Source : String;\n-         Count  : Natural;\n-         Pad    : Character := Space;\n-         Fill   : Boolean   := True);\n+       (Source : String;\n+        Count  : Natural;\n+        Pad    : Character := Space;\n+        Fill   : Boolean   := True);\n @end group\n @end smallexample\n "}, {"sha": "85fb454101ff623ebd8175d5c485e32b06ad7c2d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -4613,21 +4613,27 @@ pragma SPARK_95;\n @end smallexample\n \n @noindent\n-A configuration pragma that establishes SPARK 95 mode for the unit to which\n+This is a configuration pragma that establishes SPARK 95 mode\n+for the unit to which\n it applies, regardless of the mode set by the command line switches.\n-In this mode, the compiler rejects constructs outside the SPARK 95 subset of\n-Ada, which provides a useful initial filter for those projects developed in\n-SPARK. Syntax and semantic error messages related to SPARK restrictions have\n-the form:\n+In this mode, the compiler rejects constructs not permitted by SPARK 95.\n+Error messages related to SPARK restrictions have the form:\n \n @code{(spark) error message}.\n \n This is not a replacement for the semantic checks performed by the\n SPARK Examiner tool, as the compiler only deals currently with code,\n-not at all with SPARK annotations, so it may well be the case that code which\n+not at all with SPARK annotations and does not guarantee catching all\n+cases of constructs forbidden by SPARK 95.\n+\n+Thus it may well be the case that code which\n passes the compiler in SPARK 95 mode is rejected by the SPARK Examiner,\n e.g. due to the different visibility rules of the Examiner based on\n-@code{inherit} SPARK annotations.\n+SPARK @code{inherit} annotations.\n+\n+SPARK 95 mode can be useful in providing an initial filter for\n+code developed using SPARK 95, or in examining legacy code to see how far\n+it is from meeting SPARK 95 restrictions.\n \n @node Pragma Static_Elaboration_Desired\n @unnumberedsec Pragma Static_Elaboration_Desired"}, {"sha": "95da89c19f9b84b5b0b2146d1e15700a6cdc50bf", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -556,11 +556,23 @@ package body Ch13 is\n          end if;\n       end loop;\n \n-      --  If aspects scanned, store them\n+      --  Here if aspects present\n \n       if Is_Non_Empty_List (Aspects) then\n-         if Decl = Error then\n+\n+         --  If Decl is Empty, we just ignore the aspects (the caller in this\n+         --  case has always issued an appropriate error message).\n+\n+         if Decl = Empty then\n+            null;\n+\n+         --  If Decl is Error, we ignore the aspects, and issue a message\n+\n+         elsif Decl = Error then\n             Error_Msg (\"aspect specifications not allowed here\", Ptr);\n+\n+         --  Here aspects are allowed, and we store them\n+\n          else\n             Set_Parent (Aspects, Decl);\n             Set_Aspect_Specifications (Decl, Aspects);"}, {"sha": "d05aa889801364ed19e2a68410e5575875990df1", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -98,6 +98,13 @@ package body Ch7 is\n       Name_Node          : Node_Id;\n       Package_Sloc       : Source_Ptr;\n \n+      Aspect_Sloc : Source_Ptr := No_Location;\n+      --  Save location of WITH for scanned aspects. Left set to No_Location\n+      --  if no aspects scanned before the IS keyword.\n+\n+      Is_Sloc : Source_Ptr;\n+      --  Save location of IS token for package declaration\n+\n       Dummy_Node : constant Node_Id :=\n                      New_Node (N_Package_Specification, Token_Ptr);\n       --  Dummy node to attach aspect specifications to until we properly\n@@ -178,7 +185,12 @@ package body Ch7 is\n          --  Generic package instantiation or package declaration\n \n          else\n-            P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n+            if Aspect_Specifications_Present then\n+               Aspect_Sloc := Token_Ptr;\n+               P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n+            end if;\n+\n+            Is_Sloc := Token_Ptr;\n             TF_Is;\n \n             --  Case of generic instantiation\n@@ -189,6 +201,12 @@ package body Ch7 is\n                      (\"generic instantiation cannot appear here!\");\n                end if;\n \n+               if Aspect_Sloc /= No_Location then\n+                  Error_Msg\n+                    (\"misplaced aspects for package instantiation\",\n+                     Aspect_Sloc);\n+               end if;\n+\n                Scan; -- past NEW\n \n                Package_Node :=\n@@ -197,7 +215,15 @@ package body Ch7 is\n                Set_Name (Package_Node, P_Qualified_Simple_Name);\n                Set_Generic_Associations\n                  (Package_Node, P_Generic_Actual_Part_Opt);\n-               P_Aspect_Specifications (Error);\n+\n+               if Aspect_Sloc /= No_Location\n+                 and then not Aspect_Specifications_Present\n+               then\n+                  Error_Msg_SC (\"\\info: aspect specifications belong here\");\n+                  Move_Aspects (From => Dummy_Node, To => Package_Node);\n+               end if;\n+\n+               P_Aspect_Specifications (Package_Node);\n                Pop_Scope_Stack;\n \n             --  Case of package declaration or package specification\n@@ -251,12 +277,12 @@ package body Ch7 is\n                   Discard_Junk_List (P_Sequence_Of_Statements (SS_None));\n                end if;\n \n-               End_Statements (Specification_Node);\n+               End_Statements (Specification_Node, Empty, Is_Sloc);\n+               Move_Aspects (From => Dummy_Node, To => Package_Node);\n             end if;\n          end if;\n       end if;\n \n-      Move_Aspects (From => Dummy_Node, To => Package_Node);\n       return Package_Node;\n    end P_Package;\n "}, {"sha": "8b0897e1a83d2a60d64f3c65fbece252dda5b250", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -166,7 +166,10 @@ package body Endh is\n    -- Check_End --\n    ---------------\n \n-   function Check_End (Decl : Node_Id := Empty) return Boolean is\n+   function Check_End\n+     (Decl   : Node_Id    := Empty;\n+      Is_Loc : Source_Ptr := No_Location) return Boolean\n+   is\n       Name_On_Separate_Line : Boolean;\n       --  Set True if the name on an END line is on a separate source line\n       --  from the END. This is highly suspicious, but is allowed. The point\n@@ -401,11 +404,31 @@ package body Endh is\n \n          if End_Type /= E_Record then\n \n-            --  Scan aspect specifications if permitted here\n+            --  Scan aspect specifications\n \n             if Aspect_Specifications_Present then\n+\n+               --  Aspect specifications not allowed\n+\n                if No (Decl) then\n-                  P_Aspect_Specifications (Error);\n+\n+                  --  Package declaration case\n+\n+                  if Is_Loc /= No_Location then\n+                     Error_Msg_SC\n+                       (\"misplaced aspects for package declaration\");\n+                     Error_Msg\n+                       (\"info: aspect specifications belong here\", Is_Loc);\n+                     P_Aspect_Specifications (Empty);\n+\n+                  --  Other cases where aspect specifications are not allowed\n+\n+                  else\n+                     P_Aspect_Specifications (Error);\n+                  end if;\n+\n+               --  Aspect specifications allowed\n+\n                else\n                   P_Aspect_Specifications (Decl);\n                end if;\n@@ -664,15 +687,16 @@ package body Endh is\n    --  Error recovery: cannot raise Error_Resync;\n \n    procedure End_Statements\n-     (Parent : Node_Id := Empty;\n-      Decl   : Node_Id := Empty)\n+     (Parent  : Node_Id    := Empty;\n+      Decl    : Node_Id    := Empty;\n+      Is_Sloc : Source_Ptr := No_Location)\n    is\n    begin\n       --  This loop runs more than once in the case where Check_End rejects\n       --  the END sequence, as indicated by Check_End returning False.\n \n       loop\n-         if Check_End (Decl) then\n+         if Check_End (Decl, Is_Sloc) then\n             if Present (Parent) then\n                Set_End_Label (Parent, End_Labl);\n             end if;"}, {"sha": "4d3e379f938c06f752a7c6f0e1ff2ba65f8fa586", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -870,7 +870,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  Semicolon is True, a terminating semicolon is also scanned. If this\n       --  argument is False, the scan pointer is left pointing past the aspects\n       --  and the caller must check for a proper terminator.\n-      --  left pointing past the aspects, presumably pointing to a terminator.\n       --\n       --  P_Aspect_Specification is called with the current token pointing to\n       --  either a WITH keyword starting an aspect specification, or an\n@@ -880,9 +879,13 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  the given declaration node. A list of aspects is built and stored for\n       --  this declaration node using a call to Set_Aspect_Specifications. If\n       --  no WITH keyword is present, then this call has no effect other than\n-      --  scanning out the terminator if it is a semicolon. If Decl is Error on\n-      --  entry, any scanned aspect specifications are ignored and a message is\n-      --  output saying aspect specifications not permitted here.\n+      --  scanning out the terminator if it is a semicolon.\n+\n+      --  If Decl is Error on entry, any scanned aspect specifications are\n+      --  ignored and a message is output saying aspect specifications not\n+      --  permitted here. If Decl is Empty, then scanned aspect specifications\n+      --  are also ignored, but no error message is given (this is used when\n+      --  the caller has already taken care of the error message).\n \n       function P_Code_Statement (Subtype_Mark : Node_Id) return Node_Id;\n       --  Function to parse a code statement. The caller has scanned out\n@@ -908,7 +911,9 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    --  Routines for handling end lines, including scope recovery\n \n    package Endh is\n-      function Check_End (Decl : Node_Id := Empty) return Boolean;\n+      function Check_End\n+        (Decl   : Node_Id    := Empty;\n+         Is_Loc : Source_Ptr := No_Location) return Boolean;\n       --  Called when an end sequence is required. In the absence of an error\n       --  situation, Token contains Tok_End on entry, but in a missing end\n       --  case, this may not be the case. Pop_End_Context is used to determine\n@@ -922,7 +927,15 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --\n       --  If Decl is non-empty, then aspect specifications are permitted\n       --  following the end, and Decl is the declaration node with which\n-      --  these aspect specifications are to be associated.\n+      --  these aspect specifications are to be associated. If Decl is empty,\n+      --  then aspect specifications are not permitted and will generate an\n+      --  error message.\n+      --\n+      --  Is_Loc is set to other than the default only for the case of a\n+      --  package declaration. It points to the IS keyword of the declaration,\n+      --  and is used to specialize the error messages for misplaced aspect\n+      --  specifications in this case. Note that Decl is always Empty if Is_Loc\n+      --  is set.\n \n       procedure End_Skip;\n       --  Skip past an end sequence. On entry Token contains Tok_End, and we\n@@ -933,8 +946,9 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  error messages while carrying this out.\n \n       procedure End_Statements\n-        (Parent : Node_Id := Empty;\n-         Decl   : Node_Id := Empty);\n+        (Parent  : Node_Id    := Empty;\n+         Decl    : Node_Id    := Empty;\n+         Is_Sloc : Source_Ptr := No_Location);\n       --  Called when an end is required or expected to terminate a sequence\n       --  of statements. The caller has already made an appropriate entry in\n       --  the Scope.Table to describe the expected form of the end. This can\n@@ -945,6 +959,14 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  If Decl is non-null, then it is a declaration node, and aspect\n       --  specifications are permitted after the end statement. These aspect\n       --  specifications, if present, are stored in this declaration node.\n+      --  If Decl is null, then aspect specifications are not permitted after\n+      --  the end statement.\n+      --\n+      --  In the case where Decl is null, Is_Sloc determines the handling. If\n+      --  it is set to No_Location, then aspect specifications are ignored and\n+      --  an error message is given. Is_Sloc is used in the package declaration\n+      --  case to point to the IS, and is used to specialize the error emssages\n+      --  issued in this case.\n    end Endh;\n \n    --------------"}, {"sha": "3800008954aa81abe3be32dfd6b29595a367cb76", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -848,6 +848,18 @@ package body Sem_Aggr is\n       Set_Size_Known_At_Compile_Time (T);\n    end Check_Static_Discriminated_Subtype;\n \n+   -------------------------\n+   -- Is_Others_Aggregate --\n+   -------------------------\n+\n+   function Is_Others_Aggregate (Aggr : Node_Id) return Boolean is\n+   begin\n+      return No (Expressions (Aggr))\n+        and then\n+          Nkind (First (Choices (First (Component_Associations (Aggr)))))\n+            = N_Others_Choice;\n+   end Is_Others_Aggregate;\n+\n    --------------------------------\n    -- Make_String_Into_Aggregate --\n    --------------------------------\n@@ -1085,6 +1097,45 @@ package body Sem_Aggr is\n          Error_Msg_N (\"illegal context for aggregate\", N);\n       end if;\n \n+      if Formal_Verification_Mode and then Comes_From_Source (N) then\n+\n+         --  An unqualified aggregate is restricted in SPARK or ALFA to:\n+         --    An 'aggregate item' inside an multi-dimensional aggregate\n+         --    An expression being assigned to an unconstrained array, but only\n+         --    if the aggregate specifies a value for OTHERS only.\n+\n+         if Nkind (Parent (N)) /= N_Qualified_Expression then\n+            if Is_Array_Type (Etype (N)) then\n+               if Nkind (Parent (N)) = N_Assignment_Statement\n+                 and then not Is_Constrained (Etype (Name (Parent (N))))\n+               then\n+                  if not Is_Others_Aggregate (N) then\n+                     Error_Msg_F\n+                       (\"|~~array aggregate should have only OTHERS\", N);\n+                  end if;\n+\n+               elsif not (Nkind (Parent (N)) = N_Aggregate\n+                           and then Is_Array_Type (Etype (Parent (N)))\n+                           and then Number_Dimensions (Etype (Parent (N))) > 1)\n+               then\n+                  Error_Msg_F (\"|~~array aggregate should be qualified\", N);\n+               else\n+                  null;\n+               end if;\n+\n+            elsif Is_Record_Type (Etype (N)) then\n+               Error_Msg_F (\"|~~record aggregate should be qualified\", N);\n+\n+            --  The type of aggregate is neither array nor record, so an error\n+            --  must have occurred during resolution. Do not report an\n+            --  additional message here.\n+\n+            else\n+               null;\n+            end if;\n+         end if;\n+      end if;\n+\n       --  If we can determine statically that the evaluation of the aggregate\n       --  raises Constraint_Error, then replace the aggregate with an\n       --  N_Raise_Constraint_Error node, but set the Etype to the right\n@@ -1731,6 +1782,15 @@ package body Sem_Aggr is\n                      --  bounds of the array aggregate are within range.\n \n                      Set_Do_Range_Check (Choice, False);\n+\n+                     --  In SPARK or ALFA, the choice must be static\n+\n+                     if Formal_Verification_Mode\n+                       and then Comes_From_Source (Original_Node (Choice))\n+                       and then not Is_Static_Expression (Choice)\n+                     then\n+                        Error_Msg_F (\"|~~choice should be static\", Choice);\n+                     end if;\n                   end if;\n \n                   --  If we could not resolve the discrete choice stop here\n@@ -2372,6 +2432,16 @@ package body Sem_Aggr is\n       Analyze (A);\n       Check_Parameterless_Call (A);\n \n+      --  In SPARK or ALFA, the ancestor part cannot be a subtype mark\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (N)\n+        and then Is_Entity_Name (A)\n+        and then Is_Type (Entity (A))\n+      then\n+         Error_Msg_F (\"|~~ancestor part cannot be a subtype mark\", A);\n+      end if;\n+\n       if not Is_Tagged_Type (Typ) then\n          Error_Msg_N (\"type of extension aggregate must be tagged\", N);\n          return;\n@@ -3043,6 +3113,43 @@ package body Sem_Aggr is\n    --  Start of processing for Resolve_Record_Aggregate\n \n    begin\n+      --  A record aggregate is restricted in SPARK or ALFA:\n+      --    Each named association can have only a single choice.\n+      --    OTHERS cannot be used.\n+      --    Positional and named associations cannot be mixed.\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (N)\n+        and then Present (Component_Associations (N))\n+      then\n+         if Present (Expressions (N)) then\n+            Error_Msg_F\n+              (\"|~~named association cannot follow positional association\",\n+               First (Choices (First (Component_Associations (N)))));\n+         end if;\n+\n+         declare\n+            Assoc : Node_Id;\n+\n+         begin\n+            Assoc := First (Component_Associations (N));\n+            while Present (Assoc) loop\n+               if List_Length (Choices (Assoc)) > 1 then\n+                  Error_Msg_F\n+                    (\"|~~component association in record aggregate must \"\n+                     & \"contain a single choice\", Assoc);\n+               end if;\n+\n+               if Nkind (First (Choices (Assoc))) = N_Others_Choice then\n+                  Error_Msg_F\n+                    (\"|~~record aggregate cannot contain OTHERS\", Assoc);\n+               end if;\n+\n+               Assoc := Next (Assoc);\n+            end loop;\n+         end;\n+      end if;\n+\n       --  We may end up calling Duplicate_Subexpr on expressions that are\n       --  attached to New_Assoc_List. For this reason we need to attach it\n       --  to the tree by setting its parent pointer to N. This parent point"}, {"sha": "597ffe4757427e5294b5357ecb8514cd8a4b20b1", "filename": "gcc/ada/sem_aggr.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_aggr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_aggr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.ads?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,4 +33,7 @@ package Sem_Aggr is\n    procedure Resolve_Aggregate           (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Extension_Aggregate (N : Node_Id; Typ : Entity_Id);\n \n+   function Is_Others_Aggregate (Aggr : Node_Id) return Boolean;\n+   --  Returns True is aggregate Aggr consists of a single OTHERS choice\n+\n end Sem_Aggr;"}, {"sha": "a6d4e4ab6f68a9c4133c8e15f0434f0704eeffdc", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -1101,7 +1101,7 @@ package body Sem_Ch5 is\n \n       Analyze_Choices (N, Exp_Type, Dont_Care, Others_Present);\n \n-      --  A case statement with a single \"others\" alternative is not allowed\n+      --  A case statement with a single OTHERS alternative is not allowed\n       --  in SPARK or ALFA.\n \n       if Formal_Verification_Mode"}, {"sha": "c42f8bbd9998e70f98b85d79e83b317fce9a07e6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -4406,6 +4406,10 @@ package body Sem_Prag is\n                else\n                   Make_Inline (Subp);\n \n+                  --  For the pragma case, climb homonym chain. This is\n+                  --  what implements allowing the pragma in the renaming\n+                  --  case, with the result applying to the ancestors.\n+\n                   if not From_Aspect_Specification (N) then\n                      while Present (Homonym (Subp))\n                        and then Scope (Homonym (Subp)) = Current_Scope"}, {"sha": "319b2ff8295161647340f19e06b7c8d7f1f494b5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -7156,6 +7156,57 @@ package body Sem_Res is\n       Set_Etype (N, B_Typ);\n       Generate_Operator_Reference (N, B_Typ);\n       Eval_Logical_Op (N);\n+\n+      --  In SPARK or ALFA, logical operations AND, OR and XOR for arrays are\n+      --  defined only when both operands have same static lower and higher\n+      --  bounds.\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (N))\n+        and then Is_Array_Type (Etype (N))\n+      then\n+         declare\n+            L_Index : Node_Id;\n+            R_Index : Node_Id;\n+            L_Low   : Node_Id;\n+            L_High  : Node_Id;\n+            R_Low   : Node_Id;\n+            R_High  : Node_Id;\n+\n+            L_Typ : constant Node_Id := Etype (Left_Opnd (N));\n+            R_Typ : constant Node_Id := Etype (Right_Opnd (N));\n+\n+         begin\n+            L_Index := First_Index (L_Typ);\n+            R_Index := First_Index (R_Typ);\n+\n+            Get_Index_Bounds (L_Index, L_Low, L_High);\n+            Get_Index_Bounds (R_Index, R_Low, R_High);\n+\n+            --  Another error is issued for constrained array types with\n+            --  non-static bounds elsewhere, so only deal with different\n+            --  constrained types, or unconstrained types.\n+\n+            if L_Typ /= R_Typ or else not Is_Constrained (L_Typ) then\n+               if not Is_Static_Expression (L_Low)\n+                 or else not Is_Static_Expression (R_Low)\n+                 or else Expr_Value (L_Low) /= Expr_Value (R_Low)\n+               then\n+                  Error_Msg_F (\"|~~operation defined only when both operands \"\n+                               & \"have the same static lower bound\", N);\n+               end if;\n+\n+               if not Is_Static_Expression (L_High)\n+                 or else not Is_Static_Expression (R_High)\n+                 or else Expr_Value (L_High) /= Expr_Value (R_High)\n+               then\n+                  Error_Msg_F (\"|~~operation defined only when both operands \"\n+                               & \"have the same static higher bound\", N);\n+               end if;\n+            end if;\n+         end;\n+      end if;\n+\n    end Resolve_Logical_Op;\n \n    ---------------------------"}, {"sha": "eb0a57bbc4aff08d9fe6636d16022cee6607f0ac", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -65,6 +65,7 @@ gcc -c          ^ GNAT COMPILE\n -gnateG         ^ /GENERATE_PROCESSED_SOURCE\n -gnatem         ^ /MAPPING_FILE\n -gnatep         ^ /DATA_PREPROCESSING\n+-gnateP         ^ /CATEGORIZATION_WARNINGS\n -gnateS         ^ /SCO_OUTPUT\n -gnatE          ^ /CHECKS=ELABORATION\n -gnatf          ^ /REPORT_ERRORS=FULL"}, {"sha": "3d66e1833b611c49a0b1a7eb84db339366a8b994", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f90d12301fa640d4664b7924cbacb75e9e304d2/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=9f90d12301fa640d4664b7924cbacb75e9e304d2", "patch": "@@ -1293,6 +1293,19 @@ package VMS_Data is\n    --   be sure that they are valid, and code is generated to allow for this\n    --   possibility. The use of /ASSUME_VALID will improve the code.\n \n+   S_GCC_CategW  : aliased constant S := \"/CATEGORIZATION_WARNINGS \"  &\n+                                             \"-gnateP\";\n+   --        /NO_CATEGORIZATION_WARNINGS (D)\n+   --        /CATEGORIZATION_WARNINGS\n+   --\n+   --   Use to tell the compiler to disable categorization dependency errors.\n+   --   Ada requires that units that WITH one another have compatible\n+   --   categories, for example a Pure unit cannot WITH a Preelaborate unit.\n+   --   If this switch is used, these errors become warnings (which can be\n+   --   ignored, or suppressed in the usual manner). This can be useful in\n+   --   some specialized circumstances such as the temporary use of special\n+   --   test software.\n+\n    S_GCC_Checks  : aliased constant S := \"/CHECKS=\"                        &\n                                              \"FULL \"                       &\n                                                 \"-gnato,!-gnatE,!-gnatp \"  &\n@@ -3517,6 +3530,7 @@ package VMS_Data is\n                      S_GCC_Add     'Access,\n                      S_GCC_Asm     'Access,\n                      S_GCC_AValid  'Access,\n+                     S_GCC_CategW  'Access,\n                      S_GCC_Checks  'Access,\n                      S_GCC_ChecksX 'Access,\n                      S_GCC_Compres 'Access,"}]}