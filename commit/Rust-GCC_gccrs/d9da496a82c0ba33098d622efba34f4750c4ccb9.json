{"sha": "d9da496a82c0ba33098d622efba34f4750c4ccb9", "node_id": "C_kwDOANBUbNoAKGQ5ZGE0OTZhODJjMGJhMzMwOThkNjIyZWZiYTM0ZjQ3NTBjNGNjYjk", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-31T13:06:07Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-12-31T13:06:52Z"}, "message": "testsuite: XFAIL some Wstringop-overflow tests ...\n\n... for targets that support vectorization of 2-byte char stores\nwith unaligned address at plain O2.\n\n2021-12-31  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_vect_slp_store_usage):\n\tHandle TEST_V2QI_2.\n\t(check_effective_target_vect_slp_v2qi_store_unalign): New procedure.\n\t* c-c++-common/Wstringop-overflow-2.c: XFAIL specific tests for\n\tvect_slp_v2qi_store_unalign targets.\n\t* g++.dg/warn/Wstringop-overflow-3.C: Ditto.\n\t* gcc.dg/Wstringop-overflow-28.c: Ditto.\n\t* gcc.dg/Wstringop-overflow-68.c: Ditto.\n\t* gcc.dg/Wstringop-overflow-75.c: Ditto.\n\t* gcc.dg/Wstringop-overflow-76.c: Ditto.", "tree": {"sha": "3958ea02955c3097d771dc631174c17e34f9e51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3958ea02955c3097d771dc631174c17e34f9e51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9da496a82c0ba33098d622efba34f4750c4ccb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9da496a82c0ba33098d622efba34f4750c4ccb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9da496a82c0ba33098d622efba34f4750c4ccb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9da496a82c0ba33098d622efba34f4750c4ccb9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84790a9d4bb828acc8d45f484934d53641ecb6e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84790a9d4bb828acc8d45f484934d53641ecb6e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84790a9d4bb828acc8d45f484934d53641ecb6e5"}], "stats": {"total": 176, "additions": 96, "deletions": 80}, "files": [{"sha": "3f9171947c252d4f6159d5f617015fc9a239a97a", "filename": "gcc/testsuite/c-c++-common/Wstringop-overflow-2.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow-2.c?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -19,7 +19,7 @@ struct Ax ax_;\n void gax_ (void)\n {\n   ax_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax_.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -30,7 +30,7 @@ struct Ax ax0 = { 0 };\n void gax0 (void)\n {\n   ax0.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax0.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax0.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax0.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -41,7 +41,7 @@ struct Ax ax0_ = { 0, { } };\n void gax0_ (void)\n {\n   ax0_.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax0_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax0_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax0_.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -51,8 +51,8 @@ struct Ax ax1 = { 1, { 0 } };\n \n void gax1 (void)\n {\n-  ax1.a[0] = 0;\n-  ax1.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax1.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  ax1.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax1.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -100,7 +100,7 @@ struct A0 a0_;\n void ga0_ (void)\n {\n   a0_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a0_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a0_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a0_.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -111,7 +111,7 @@ struct A0 a00 = { 0 };\n void ga00 (void)\n {\n   a00.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a00.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a00.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a00.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -122,7 +122,7 @@ struct A0 a00_ = { 0, { } };\n void ga00_ (void)\n {\n   a00_.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a00_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a00_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a00_.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -166,13 +166,13 @@ struct A1 a1_;\n \n void ga1_ (void)\n {\n-  a1_.a[0] = 0;\n-  a1_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a;\n-  a.a[0] = 0;\n-  a.a[1] = 1;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a.a[0] = 0;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a.a[1] = 1;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a.a[2] = 2;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n   sink (&a);\n }\n@@ -183,8 +183,8 @@ struct A1 a1__ = { 0 };\n \n void ga1__ (void)\n {\n-  a1__.a[0] = 0;\n-  a1__.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1__.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1__.a[1] = 1;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1__.a[2] = 2;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a = { 1 };\n@@ -200,8 +200,8 @@ struct A1 a1_0 = { 0, { } };\n \n void ga1_0_ (void)\n {\n-  a1_0.a[0] = 0;\n-  a1_0.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_0.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_0.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_0.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a = { 1, { } };\n@@ -217,8 +217,8 @@ struct A1 a1_1 = { 0, { 1 } };\n \n void ga1_1 (void)\n {\n-  a1_1.a[0] = 0;\n-  a1_1.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_1.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_1.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_1.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a = { 0, { 1 } };   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr102706\" { target { vect_slp_v4qi_store_align } } }\n@@ -266,12 +266,12 @@ struct A1i a1i_;\n void ga1i_ (void)\n {\n   a1i_.a[0] = 0;\n-  a1i_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1i a;\n   a.a[0] = 1;\n-  a.a[1] = 2;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a.a[1] = 2;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a.a[2] = 3;                   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n   sink (&a);\n }\n@@ -283,7 +283,7 @@ struct A1i a1i__ = { 0 };\n void ga1i__ (void)\n {\n   a1i__.a[0] = 0;\n-  a1i__.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i__.a[1] = 1;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i__.a[2] = 2;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1i a = { 0 };\n@@ -299,8 +299,8 @@ struct A1 a1i_0 = { 0, { } };\n \n void ga1i_0_ (void)\n {\n-  a1i_0.a[0] = 0;\n-  a1i_0.a[1] = 1;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_0.a[0] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1i_0.a[1] = 1;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_0.a[2] = 2;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a = { 0, { } };\n@@ -316,8 +316,8 @@ struct A1 a1i_1 = { 0, { 1 } };\n \n void ga1i_1 (void)\n {\n-  a1i_1.a[0] = 0;\n-  a1i_1.a[1] = 1;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_1.a[0] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1i_1.a[1] = 1;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_1.a[2] = 2;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n \n   struct A1 a = { 0, { 1 } };   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr102462\" { target { vect_slp_v4qi_store_align } } }"}, {"sha": "e1d547fe4d40c4bbc8b7ec365abb1c32c6938e29", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overflow-3.C", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-3.C?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -21,7 +21,7 @@ Ax ax_;\n NOIPA void gax_ ()\n {\n   ax_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax_.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -32,7 +32,7 @@ Ax ax0 = { 0 };\n NOIPA void gax0 ()\n {\n   ax0.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax0.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax0.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax0.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -43,7 +43,7 @@ Ax ax0_ = { 0, { } };\n NOIPA void gax0_ ()\n {\n   ax0_.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  ax0_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax0_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax0_.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -53,8 +53,8 @@ Ax ax1 = { 1, { 0 } };\n \n NOIPA void gax1 ()\n {\n-  ax1.a[0] = 0;\n-  ax1.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  ax1.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  ax1.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   ax1.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -102,7 +102,7 @@ A0 a0_;\n NOIPA void ga0_ ()\n {\n   a0_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a0_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a0_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a0_.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -113,7 +113,7 @@ A0 a00 = { 0 };\n NOIPA void ga00 ()\n {\n   a00.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a00.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a00.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a00.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -124,7 +124,7 @@ A0 a00_ = { 0, { } };\n NOIPA void ga00_ ()\n {\n   a00_.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  a00_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a00_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a00_.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -168,8 +168,8 @@ A1 a1_;\n \n NOIPA void ga1_ ()\n {\n-  a1_.a[0] = 0;\n-  a1_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -179,8 +179,8 @@ A1 a1__ = { 0 };\n \n NOIPA void ga1__ ()\n {\n-  a1__.a[0] = 0;\n-  a1__.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1__.a[0] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1__.a[1] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1__.a[2] = 0;                 // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -190,8 +190,8 @@ A1 a1_0 = { 0, { } };\n \n NOIPA void ga1_0_ ()\n {\n-  a1_0.a[0] = 0;\n-  a1_0.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_0.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_0.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_0.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -201,8 +201,8 @@ A1 a1_1 = { 0, { 1 } };\n \n NOIPA void ga1_1 ()\n {\n-  a1_1.a[0] = 0;\n-  a1_1.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1_1.a[0] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1_1.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1_1.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -244,7 +244,7 @@ A1i a1i_;\n NOIPA void ga1i_ ()\n {\n   a1i_.a[0] = 0;\n-  a1i_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -255,7 +255,7 @@ A1i a1i__ = { 0 };\n NOIPA void ga1i__ ()\n {\n   a1i__.a[0] = 0;\n-  a1i__.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i__.a[1] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i__.a[2] = 0;                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -265,8 +265,8 @@ A1 a1i_0 = { 0, { } };\n \n NOIPA void ga1i_0_ ()\n {\n-  a1i_0.a[0] = 0;\n-  a1i_0.a[1] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_0.a[0] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1i_0.a[1] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_0.a[2] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n@@ -276,8 +276,8 @@ A1 a1i_1 = { 0, { 1 } };\n \n NOIPA void ga1i_1 ()\n {\n-  a1i_1.a[0] = 0;\n-  a1i_1.a[1] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  a1i_1.a[0] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  a1i_1.a[1] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n   a1i_1.a[2] = 0;               // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n "}, {"sha": "f3e31fbade3780586339afc3958e309ba75531b1", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-28.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-28.c?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -152,8 +152,8 @@ void ptr_add_2 (int n, int i0, int i1)\n   q += i0;\n   q[0] = 0;   // p[0]\n   q += i1;\n-  q[0] = 1;   // p[1]\n-  q[1] = 2;   // p[2]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  q[0] = 1;   // p[1]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  q[1] = 2;   // p[2]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n \n   sink (p, q);\n }\n@@ -175,8 +175,8 @@ void ptr_add_3 (int n, int i0, int i1, int i2)\n   q[0] = 1;   // p[1]\n   q[1] = 2;   // p[2]\n   q += i2;\n-  q[0] = 3;   // p[3]\n-  q[1] = 4;   // p[4]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  q[0] = 3;   // p[3]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  q[1] = 4;   // p[4]     // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n \n   sink (p, q);\n }"}, {"sha": "e69178f45384d5e9b6110954c995ace17e34cac0", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-68.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -57,7 +57,7 @@ void warn_comp_lit_zero (void)\n \n void warn_comp_lit (void)\n {\n-  *(AC2*)a1 = Ac2;      // { dg-warning \"writing 2 bytes into a region of size 1\" \"pr101475\" { xfail *-*-* } }\n+  *(AC2*)a1 = Ac2;      // { dg-warning \"writing 2 bytes into a region of size 1\" \"pr101475\" { target { vect_slp_v2qi_store_unalign } } }\n   // After vectorization, below codes are optimized to\n   // MEM <vector(4) char> [(char *)&a2] = { 0, 1, 2, 3 };\n   // MEM <vector(4) char> [(char *)&a3] = { 0, 1, 2, 3 };"}, {"sha": "9f9c3a9c2a7ad6964468ea865e726c86ec7e6899", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-75.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-75.c?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -9,7 +9,7 @@\n    the offset into it (although the offset might be better included in\n    the warning).  */\n extern char a3[3];\n-extern char a5[5];  // { dg-message \"at offset 5 into destination object 'a5' of size 5\" \"note\" }\n+extern char a5[5];  // { dg-message \"at offset \\[^a-zA-Z\\n\\r\\]*5\\[^a-zA-Z0-9\\]* into destination object 'a5' of size 5\" \"note\" }\n \n void min_a3_a5 (int i)\n {\n@@ -20,51 +20,51 @@ void min_a3_a5 (int i)\n      by its own warning independently of -Wstringop-overflow.  */\n   char *d = p < q ? p : q;\n \n-  d[4] = 0;\n-  d[5] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[4] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[5] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n // Same as above but with the larger array as the first MIN_EXPR operand.\n extern char b4[4];\n-extern char b6[6];  // { dg-message \"at offset 6 into destination object 'b6' of size 6\" \"note\" }\n+extern char b6[6];  // { dg-message \"at offset \\[^a-zA-Z\\n\\r\\]*6\\[^a-zA-Z0-9\\]* into destination object 'b6' of size 6\" \"note\" }\n \n void min_b6_b4 (int i)\n {\n   char *p = b6 + i;\n   char *q = b4 + i;\n   char *d = p < q ? p : q;\n \n-  d[5] = 0;\n-  d[6] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[5] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[6] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n /* Same as above but with the first MIN_EXPR operand pointing to an unknown\n    object.  */\n-extern char c7[7];  // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" }\n+extern char c7[7];  // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" { xfail { vect_slp_v2qi_store_unalign } } }\n \n void min_p_c7 (char *p, int i)\n {\n   char *q = c7 + i;\n   char *d = p < q ? p : q;\n \n-  d[6] = 0;\n-  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[6] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n /* Same as above but with the second MIN_EXPR operand pointing to an unknown\n    object.  */\n-extern char d8[8];  // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" }\n+extern char d8[8];  // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" { xfail { vect_slp_v2qi_store_unalign } } }\n \n void min_d8_p (char *q, int i)\n {\n   char *p = d8 + i;\n   char *d = p < q ? p : q;\n \n-  d[7] = 0;\n-  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[7] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n@@ -89,7 +89,7 @@ void min_A3_A5 (int i, struct A3_5 *pa3_5)\n struct B4_B6\n {\n   char b4[4];\n-  char b6[6];       // { dg-message \"at offset 6 into destination object 'b6' of size 6\" \"note\" }\n+  char b6[6];       // { dg-message \"at offset 6 into destination object 'b6' of size 6\" \"note\" { xfail { vect_slp_v2qi_store_unalign } } }\n };\n \n void min_B6_B4 (int i, struct B4_B6 *pb4_b6)\n@@ -99,13 +99,13 @@ void min_B6_B4 (int i, struct B4_B6 *pb4_b6)\n   char *d = p < q ? p : q;\n \n   d[5] = 0;\n-  d[6] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[6] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n struct C7\n {\n-  char c7[7];       // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" }\n+  char c7[7];       // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" { xfail { vect_slp_v2qi_store_unalign } } }\n };\n \n void min_p_C7 (char *p, int i, struct C7 *pc7)\n@@ -114,13 +114,13 @@ void min_p_C7 (char *p, int i, struct C7 *pc7)\n   char *d = p < q ? p : q;\n \n   d[6] = 0;\n-  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n struct D8\n {\n-  char d8[8];       // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" }\n+  char d8[8];       // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" { xfail { vect_slp_v2qi_store_unalign } } }\n };\n \n void min_D8_p (char *q, int i, struct D8 *pd8)\n@@ -129,5 +129,5 @@ void min_D8_p (char *q, int i, struct D8 *pd8)\n   char *d = p < q ? p : q;\n \n   d[7] = 0;\n-  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }"}, {"sha": "d5cf8662c439a068cabba249d49fa1b14aea6cb0", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-76.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-76.c?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -53,29 +53,29 @@ void max_b6_b4 (int i)\n \n /* Same as above but with the first MAX_EXPR operand pointing to an unknown\n    object.  */\n-extern char c7[7];  // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" }\n+extern char c7[7];  // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\"  { xfail { vect_slp_v2qi_store_unalign } } }\n \n void max_p_c7 (char *p, int i)\n {\n   char *q = c7 + i;\n   char *d = MAX (p, q);\n \n-  d[6] = 0;\n-  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[6] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n /* Same as above but with the second MIN_EXPR operand pointing to an unknown\n    object.  */\n-extern char d8[8];  // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" }\n+extern char d8[8];  // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\"  { xfail { vect_slp_v2qi_store_unalign } } }\n \n void max_d8_p (char *q, int i)\n {\n   char *p = d8 + i;\n   char *d = MAX (p, q);\n \n-  d[7] = 0;\n-  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[7] = 0;         // { dg-warning \"writing 2 bytes into a region of size 1\" \"\" { target { vect_slp_v2qi_store_unalign } } }\n+  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n@@ -122,7 +122,7 @@ void max_B6_B4 (int i, struct B4_B6 *pb4_b6)\n \n struct C7\n {\n-  char c7[7];       // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\" }\n+  char c7[7];       // { dg-message \"at offset 7 into destination object 'c7' of size 7\" \"note\"  { xfail { vect_slp_v2qi_store_unalign } } }\n };\n \n void max_p_C7 (char *p, int i, struct C7 *pc7)\n@@ -131,13 +131,13 @@ void max_p_C7 (char *p, int i, struct C7 *pc7)\n   char *d = MAX (p, q);\n \n   d[6] = 0;\n-  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[7] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }\n \n \n struct D8\n {\n-  char d8[8];       // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\" }\n+  char d8[8];       // { dg-message \"at offset 8 into destination object 'd8' of size 8\" \"note\"  { xfail { vect_slp_v2qi_store_unalign } } }\n };\n \n void max_D8_p (char *q, int i, struct D8 *pd8)\n@@ -146,5 +146,5 @@ void max_D8_p (char *q, int i, struct D8 *pd8)\n   char *d = MAX (p, q);\n \n   d[7] = 0;\n-  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" }\n+  d[8] = 0;         // { dg-warning \"writing 1 byte into a region of size 0\" \"\" { xfail { vect_slp_v2qi_store_unalign } } }\n }"}, {"sha": "47bf413c262846614f42903ac3c41f8a894f30fa", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da496a82c0ba33098d622efba34f4750c4ccb9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d9da496a82c0ba33098d622efba34f4750c4ccb9", "patch": "@@ -7665,6 +7665,14 @@ proc check_vect_slp_store_usage { pattern macro } {\n \t    a.a[1] = 4;\n \t    sink (&a);\n \t}\n+\t#elif TEST_V2QI_2\n+\textern char p[2];\n+\tvoid\n+\tfoo3_2 ()\n+\t{\n+\t    p[0] = 0;\n+\t    p[1] = 1;\n+\t}\n \t#elif TEST_V4HI\n \tstruct Ax\n \t{\n@@ -7763,7 +7771,15 @@ proc check_effective_target_vect_slp_v2qi_store_align { } {\n     set macro \"TEST_V2QI\"\n     return [check_cached_effective_target vect_slp_v2qi_store_align {\n \texpr [check_vect_slp_store_usage $pattern $macro] }]\n+}\n \n+# Return the true if target support vectorization of 2-byte char stores\n+# with unaligned address at plain O2.\n+proc check_effective_target_vect_slp_v2qi_store_unalign { } {\n+    set pattern {add new stmt: MEM <vector\\(2\\) char>}\n+    set macro \"TEST_V2QI_2\"\n+    return [check_cached_effective_target vect_slp_v2qi_store_unalign {\n+\texpr [check_vect_slp_store_usage $pattern $macro ] }]\n }\n \n # Return the true if target support vectorization of 4-byte char stores"}]}