{"sha": "27b097f8d7c060abbbc76596725d96a069fca575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiMDk3ZjhkN2MwNjBhYmJiYzc2NTk2NzI1ZDk2YTA2OWZjYTU3NQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-11-20T21:46:18Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-11-20T21:46:18Z"}, "message": "vsx.md (vsx_set_<mode>): Adjust for little endian.\n\ngcc:\n\n2013-11-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/vsx.md (vsx_set_<mode>): Adjust for little endian.\n\t(vsx_extract_<mode>): Likewise.\n\t(*vsx_extract_<mode>_one_le): New LE variant on\n\t*vsx_extract_<mode>_zero.\n\t(vsx_extract_v4sf): Adjust for little endian.\n\n\ngcc/testsuite:\n\n2013-11-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/pr48258-1.c: Skip for little endian.\n\nFrom-SVN: r205146", "tree": {"sha": "9918673ff25de0213208b73aaae9d4b8b6bc21bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9918673ff25de0213208b73aaae9d4b8b6bc21bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27b097f8d7c060abbbc76596725d96a069fca575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b097f8d7c060abbbc76596725d96a069fca575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b097f8d7c060abbbc76596725d96a069fca575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b097f8d7c060abbbc76596725d96a069fca575/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "892f5efeb19a528a513227c81353a7840b7772bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27b097f8d7c060abbbc76596725d96a069fca575", "patch": "@@ -1,3 +1,11 @@\n+2013-11-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (vsx_set_<mode>): Adjust for little endian.\n+\t(vsx_extract_<mode>): Likewise.\n+\t(*vsx_extract_<mode>_one_le): New LE variant on\n+\t*vsx_extract_<mode>_zero.\n+\t(vsx_extract_v4sf): Adjust for little endian.\n+\n 2013-11-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/59133"}, {"sha": "977ef963411bf7038a2f144cf4bf6c287b8c5541", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=27b097f8d7c060abbbc76596725d96a069fca575", "patch": "@@ -1497,9 +1497,10 @@\n \t\t      UNSPEC_VSX_SET))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  if (INTVAL (operands[3]) == 0)\n+  int idx_first = BYTES_BIG_ENDIAN ? 0 : 1;\n+  if (INTVAL (operands[3]) == idx_first)\n     return \\\"xxpermdi %x0,%x2,%x1,1\\\";\n-  else if (INTVAL (operands[3]) == 1)\n+  else if (INTVAL (operands[3]) == 1 - idx_first)\n     return \\\"xxpermdi %x0,%x1,%x2,0\\\";\n   else\n     gcc_unreachable ();\n@@ -1514,8 +1515,12 @@\n \t\t\t[(match_operand:QI 2 \"u5bit_cint_operand\" \"i,i,i\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n+  int fldDM;\n   gcc_assert (UINTVAL (operands[2]) <= 1);\n-  operands[3] = GEN_INT (INTVAL (operands[2]) << 1);\n+  fldDM = INTVAL (operands[2]) << 1;\n+  if (!BYTES_BIG_ENDIAN)\n+    fldDM = 3 - fldDM;\n+  operands[3] = GEN_INT (fldDM);\n   return \\\"xxpermdi %x0,%x1,%x1,%3\\\";\n }\n   [(set_attr \"type\" \"vecperm\")])\n@@ -1535,6 +1540,21 @@\n \t(const_string \"fpload\")))\n    (set_attr \"length\" \"4\")])  \n \n+;; Optimize extracting element 1 from memory for little endian\n+(define_insn \"*vsx_extract_<mode>_one_le\"\n+  [(set (match_operand:<VS_scalar> 0 \"vsx_register_operand\" \"=ws,d,?wa\")\n+\t(vec_select:<VS_scalar>\n+\t (match_operand:VSX_D 1 \"indexed_or_indirect_operand\" \"Z,Z,Z\")\n+\t (parallel [(const_int 1)])))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && !WORDS_BIG_ENDIAN\"\n+  \"lxsd%U1x %x0,%y1\"\n+  [(set (attr \"type\")\n+      (if_then_else\n+\t(match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n+\t(const_string \"fpload_ux\")\n+\t(const_string \"fpload\")))\n+   (set_attr \"length\" \"4\")])  \n+\n ;; Extract a SF element from V4SF\n (define_insn_and_split \"vsx_extract_v4sf\"\n   [(set (match_operand:SF 0 \"vsx_register_operand\" \"=f,f\")\n@@ -1555,7 +1575,7 @@\n   rtx op2 = operands[2];\n   rtx op3 = operands[3];\n   rtx tmp;\n-  HOST_WIDE_INT ele = INTVAL (op2);\n+  HOST_WIDE_INT ele = BYTES_BIG_ENDIAN ? INTVAL (op2) : 3 - INTVAL (op2);\n \n   if (ele == 0)\n     tmp = op1;"}, {"sha": "d47ec92a4be2f2c1f966cd3ac25640677ad4fc47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27b097f8d7c060abbbc76596725d96a069fca575", "patch": "@@ -1,3 +1,7 @@\n+2013-11-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr48258-1.c: Skip for little endian.\n+\n 2013-11-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/59133"}, {"sha": "3ccbf7693d9dac8d2ae1de38d77cbe723e848f1e", "filename": "gcc/testsuite/gcc.target/powerpc/pr48258-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48258-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b097f8d7c060abbbc76596725d96a069fca575/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48258-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48258-1.c?ref=27b097f8d7c060abbbc76596725d96a069fca575", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { powerpc*le-*-* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O3 -mcpu=power7 -mabi=altivec -ffast-math -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"xvaddsp\" 3 } } */"}]}