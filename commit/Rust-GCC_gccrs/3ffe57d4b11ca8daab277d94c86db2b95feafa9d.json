{"sha": "3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmZTU3ZDRiMTFjYThkYWFiMjc3ZDk0Yzg2ZGIyYjk1ZmVhZmE5ZA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-12-23T18:06:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:22Z"}, "message": "[Ada] Expansion in _postconditions confusing CodePeer\n\ngcc/ada/\n\n\t* contracts.adb (Build_Postconditions_Procedure): Remove\n\tinternally generated if statement used to control finalization\n\tactions.\n\t* exp_ch6.adb (Add_Return, Expand_Non_Function_Return,\n\tExpand_Simple_Function_Return): Add if statement around\n\t_postconditions to control finalization.\n\t* exp_ch7.adb (Build_Finalizer): Likewise.\n\t* sem_prag.adb (Find_Related_Declaration_Or_Body): Add case to\n\thandle Context itself being a handled sequence of statements.", "tree": {"sha": "73f9ae627dd71a8d35e3b7bbd2a0f797b5762a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f9ae627dd71a8d35e3b7bbd2a0f797b5762a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b48ea9dacdae9edae491d72b5db8864109a48a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b48ea9dacdae9edae491d72b5db8864109a48a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b48ea9dacdae9edae491d72b5db8864109a48a1"}], "stats": {"total": 116, "additions": 78, "deletions": 38}, "files": [{"sha": "f42a95008db56ef54da8d4d384d7d70406058688", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "patch": "@@ -2367,6 +2367,10 @@ package body Contracts is\n          --  postconditions until finalization has been performed when cleanup\n          --  actions are present.\n \n+         --  NOTE: This flag could be made into a predicate since we should be\n+         --  able at compile time to recognize when finalization and cleanup\n+         --  actions occur, but in practice this is not possible ???\n+\n          --  Generate:\n          --\n          --    Postcond_Enabled : Boolean := True;\n@@ -2405,16 +2409,16 @@ package body Contracts is\n          --  the postconditions: this would cause confusing debug info to be\n          --  produced, interfering with coverage-analysis tools.\n \n-         --  Also, wrap the postcondition checks in a conditional which can be\n-         --  used to delay their evaluation when clean-up actions are present.\n+         --  NOTE: Coverage-analysis and static-analysis tools rely on the\n+         --  postconditions procedure being free of internally generated code\n+         --  since some of these tools, like CodePeer, treat _postconditions\n+         --  as original source.\n \n          --  Generate:\n          --\n          --    procedure _postconditions is\n          --    begin\n-         --       if Postcond_Enabled and then Return_Success_For_Postcond then\n-         --          [Stmts];\n-         --       end if;\n+         --       [Stmts];\n          --    end;\n \n          Proc_Bod :=\n@@ -2425,19 +2429,7 @@ package body Contracts is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  End_Label  => Make_Identifier (Loc, Chars (Proc_Id)),\n-                 Statements => New_List (\n-                   Make_If_Statement (Loc,\n-                     Condition      =>\n-                       Make_And_Then (Loc,\n-                         Left_Opnd  =>\n-                           New_Occurrence_Of\n-                             (Defining_Identifier\n-                               (Postcond_Enabled_Decl), Loc),\n-                         Right_Opnd =>\n-                           New_Occurrence_Of\n-                             (Defining_Identifier\n-                               (Return_Success_Decl), Loc)),\n-                      Then_Statements => Stmts))));\n+                 Statements => Stmts));\n          Insert_After_And_Analyze (Last_Decl, Proc_Bod);\n \n       end Build_Postconditions_Procedure;"}, {"sha": "cc6c177c006e46150ac3010dac7e884e3fffa615", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "patch": "@@ -6246,27 +6246,39 @@ package body Exp_Ch6 is\n             --  has contract assertions that need to be verified on exit.\n \n             --  Also, mark the successful return to signal that postconditions\n-            --  need to be evaluated when finalization occurs.\n+            --  need to be evaluated when finalization occurs by setting\n+            --  Return_Success_For_Postcond to be True.\n \n             if Ekind (Spec_Id) = E_Procedure\n               and then Present (Postconditions_Proc (Spec_Id))\n             then\n                --  Generate:\n                --\n                --    Return_Success_For_Postcond := True;\n-               --    _postconditions;\n+               --    if Postcond_Enabled then\n+               --       _postconditions;\n+               --    end if;\n \n                Insert_Action (Stmt,\n                  Make_Assignment_Statement (Loc,\n                    Name       =>\n                      New_Occurrence_Of\n-                      (Get_Return_Success_For_Postcond (Spec_Id), Loc),\n+                       (Get_Return_Success_For_Postcond (Spec_Id), Loc),\n                    Expression => New_Occurrence_Of (Standard_True, Loc)));\n \n+               --  Wrap the call to _postconditions within a test of the\n+               --  Postcond_Enabled flag to delay postcondition evaluation\n+               --  until after finalization when required.\n+\n                Insert_Action (Stmt,\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name =>\n-                     New_Occurrence_Of (Postconditions_Proc (Spec_Id), Loc)));\n+                 Make_If_Statement (Loc,\n+                   Condition       =>\n+                     New_Occurrence_Of (Get_Postcond_Enabled (Spec_Id), Loc),\n+                   Then_Statements => New_List (\n+                     Make_Procedure_Call_Statement (Loc,\n+                       Name =>\n+                         New_Occurrence_Of\n+                           (Postconditions_Proc (Spec_Id), Loc)))));\n             end if;\n \n             --  Ada 2020 (AI12-0279): append the call to 'Yield unless this is\n@@ -6699,7 +6711,9 @@ package body Exp_Ch6 is\n          --  Generate:\n          --\n          --    Return_Success_For_Postcond := True;\n-         --    _postconditions;\n+         --    if Postcond_Enabled then\n+         --       _postconditions;\n+         --    end if;\n \n          Insert_Action (N,\n            Make_Assignment_Statement (Loc,\n@@ -6708,9 +6722,19 @@ package body Exp_Ch6 is\n                 (Get_Return_Success_For_Postcond (Scope_Id), Loc),\n              Expression => New_Occurrence_Of (Standard_True, Loc)));\n \n+         --  Wrap the call to _postconditions within a test of the\n+         --  Postcond_Enabled flag to delay postcondition evaluation until\n+         --  after finalization when required.\n+\n          Insert_Action (N,\n-           Make_Procedure_Call_Statement (Loc,\n-             Name => New_Occurrence_Of (Postconditions_Proc (Scope_Id), Loc)));\n+           Make_If_Statement (Loc,\n+             Condition       =>\n+               New_Occurrence_Of (Get_Postcond_Enabled (Scope_Id), Loc),\n+             Then_Statements => New_List (\n+               Make_Procedure_Call_Statement (Loc,\n+                 Name =>\n+                   New_Occurrence_Of\n+                     (Postconditions_Proc (Scope_Id), Loc)))));\n       end if;\n \n       --  Ada 2020 (AI12-0279)\n@@ -7621,6 +7645,9 @@ package body Exp_Ch6 is\n          --  Generate:\n          --\n          --    Return_Success_For_Postcond := True;\n+         --    if Postcond_Enabled then\n+         --       _Postconditions ([exp]);\n+         --    end if;\n \n          Insert_Action (Exp,\n            Make_Assignment_Statement (Loc,\n@@ -7629,13 +7656,20 @@ package body Exp_Ch6 is\n                 (Get_Return_Success_For_Postcond (Scope_Id), Loc),\n              Expression => New_Occurrence_Of (Standard_True, Loc)));\n \n-         --  Generate call to _Postconditions\n+         --  Wrap the call to _postconditions within a test of the\n+         --  Postcond_Enabled flag to delay postcondition evaluation until\n+         --  after finalization when required.\n \n          Insert_Action (Exp,\n-           Make_Procedure_Call_Statement (Loc,\n-             Name                   =>\n-               New_Occurrence_Of (Postconditions_Proc (Scope_Id), Loc),\n-             Parameter_Associations => New_List (New_Copy_Tree (Exp))));\n+           Make_If_Statement (Loc,\n+             Condition       =>\n+               New_Occurrence_Of (Get_Postcond_Enabled (Scope_Id), Loc),\n+             Then_Statements => New_List (\n+               Make_Procedure_Call_Statement (Loc,\n+                 Name                   =>\n+                   New_Occurrence_Of\n+                     (Postconditions_Proc (Scope_Id), Loc),\n+                 Parameter_Associations => New_List (New_Copy_Tree (Exp))))));\n       end if;\n \n       --  Ada 2005 (AI-251): If this return statement corresponds with an"}, {"sha": "7b2676d032cafdfd5d9c8647d40145dffb8111d9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "patch": "@@ -3795,7 +3795,9 @@ package body Exp_Ch7 is\n       --       --  Perform postcondition checks after general finalization, but\n       --       --  before finalization of 'Old related objects.\n       --\n-      --       if not Raised_Finalization_Exception then\n+      --       if not Raised_Finalization_Exception\n+      --         and then Return_Success_For_Postcond\n+      --       then\n       --          begin\n       --             --  Re-enable postconditions and check them\n       --\n@@ -3973,7 +3975,9 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --\n-         --    if not Raised_Finalization_Exception then\n+         --    if not Raised_Finalization_Exception\n+         --      and then Return_Success_For_Postcond\n+         --    then\n          --       begin\n          --          Postcond_Enabled := True;\n          --          _postconditions [(Result_Obj_For_Postcond[.all])];\n@@ -3988,10 +3992,15 @@ package body Exp_Ch7 is\n          Append_To (Fin_Controller_Stmts,\n            Make_If_Statement (Loc,\n              Condition       =>\n-               Make_Op_Not (Loc,\n+               Make_And_Then (Loc,\n+                 Left_Opnd  =>\n+                   Make_Op_Not (Loc,\n+                     Right_Opnd =>\n+                       New_Occurrence_Of\n+                         (Raised_Finalization_Exception_Id, Loc)),\n                  Right_Opnd =>\n                    New_Occurrence_Of\n-                     (Raised_Finalization_Exception_Id, Loc)),\n+                     (Get_Return_Success_For_Postcond (Def_Ent), Loc)),\n              Then_Statements => New_List (\n                Make_Block_Statement (Loc,\n                  Handled_Statement_Sequence =>"}, {"sha": "6e209d4a3d3144e7465140c532860dac6ebe472e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffe57d4b11ca8daab277d94c86db2b95feafa9d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3ffe57d4b11ca8daab277d94c86db2b95feafa9d", "patch": "@@ -30689,14 +30689,19 @@ package body Sem_Prag is\n       elsif Nkind (Context) = N_Entry_Body then\n          return Context;\n \n-      --  The pragma appears inside the statements of a subprogram body. This\n-      --  placement is the result of subprogram contract expansion.\n+      --  The pragma appears inside the statements of a subprogram body at\n+      --  some nested level.\n \n       elsif Is_Statement (Context)\n         and then Present (Enclosing_HSS (Context))\n       then\n          return Parent (Enclosing_HSS (Context));\n \n+      --  The pragma appears directly in the statements of a subprogram body\n+\n+      elsif Nkind (Context) = N_Handled_Sequence_Of_Statements then\n+         return Parent (Context);\n+\n       --  The pragma appears inside the declarative part of a package body\n \n       elsif Nkind (Context) = N_Package_Body then"}]}