{"sha": "cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5NzVmMzhmYmZiNWQ1ZDBjZDEwOTJiMDEzYzY0Y2Q1NGEyYTFjZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1998-12-13T15:24:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1998-12-13T15:24:48Z"}, "message": "gjavah.c (decompile_method): Handle all types of `return' opcode.\n\n\t* gjavah.c (decompile_method): Handle all types of `return'\n\topcode.  Decompile `return this' and `return'.\n\t(method_access): New global.\n\t(print_method_info): Set it.\n\t(decompile_method): Don't decompile a synchronized method.\n\nFrom-SVN: r24297", "tree": {"sha": "678d4fc66d8748a4b2002a45f61b96e7d26623de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678d4fc66d8748a4b2002a45f61b96e7d26623de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce/comments", "author": null, "committer": null, "parents": [{"sha": "f181d4aea017cdd3597d324a78cdd60f1989cddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f181d4aea017cdd3597d324a78cdd60f1989cddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f181d4aea017cdd3597d324a78cdd60f1989cddf"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "1db8ce2ce00b9549f3552bcb48347ca1eda32e29", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "patch": "@@ -1,3 +1,11 @@\n+1998-12-13  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gjavah.c (decompile_method): Handle all types of `return'\n+\topcode.  Decompile `return this' and `return'.\n+\t(method_access): New global.\n+\t(print_method_info): Set it.\n+\t(decompile_method): Don't decompile a synchronized method.\n+\n 1998-12-13  Tom Tromey  <tromey@cygnus.com>\n \n \t* jcf-reader.c (jcf_parse_one_method): Recognize"}, {"sha": "5e879c75469a56b19dd85b5b6e6c6bb7be2b743f", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=cb975f38fbfb5d5d0cd1092b013c64cd54a2a1ce", "patch": "@@ -124,6 +124,7 @@ static int field_pass;\n \n #define HANDLE_CONSTANTVALUE(VALUEINDEX) current_field_value = (VALUEINDEX)\n \n+static int method_access = 0;\n #define HANDLE_METHOD(ACCESS_FLAGS, NAME, SIGNATURE, ATTRIBUTE_COUNT) \\\n   if (out) { decompiled = 0; \\\n       print_method_info (out, jcf, NAME, SIGNATURE, ACCESS_FLAGS); \\\n@@ -398,6 +399,7 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n   int length, is_init = 0;\n   char *override = NULL;\n \n+  method_access = flags;\n   if (JPOOL_TAG (jcf, name_index) != CONSTANT_Utf8)\n     fprintf (stream, \"<not a UTF8 constant>\");\n   str = JPOOL_UTF_DATA (jcf, name_index);\n@@ -465,12 +467,20 @@ decompile_method (out, jcf, code_len)\n   int index;\n   uint16 name_and_type, name;\n \n+  /* If the method is synchronized, don't touch it.  */\n+  if ((method_access & ACC_SYNCHRONIZED))\n+    return;\n+\n   if (code_len == 5\n       && codes[0] == OPCODE_aload_0\n       && codes[1] == OPCODE_getfield\n-      && codes[4] == OPCODE_areturn)\n+      && (codes[4] == OPCODE_areturn\n+\t  || codes[4] == OPCODE_dreturn\n+\t  || codes[4] == OPCODE_freturn\n+\t  || codes[4] == OPCODE_ireturn\n+\t  || codes[4] == OPCODE_lreturn))\n     {\n-      /* Found something useful to decompile.  */\n+      /* Found code like `return FIELD'.  */\n       fputs (\" { return \", out);\n       index = (codes[2] << 8) | codes[3];\n       /* FIXME: ensure that tag is CONSTANT_Fieldref.  */\n@@ -482,6 +492,20 @@ decompile_method (out, jcf, code_len)\n       fputs (\"; }\", out);\n       decompiled = 1;\n     }\n+  else if (code_len == 2\n+\t   && codes[0] == OPCODE_aload_0\n+\t   && codes[1] == OPCODE_areturn)\n+    {\n+      /* Found `return this'.  */\n+      fputs (\" { return this; }\", out);\n+      decompiled = 1;\n+    }\n+  else if (code_len == 1 && codes[0] == OPCODE_return)\n+    {\n+      /* Found plain `return'.  */\n+      fputs (\" { }\", out);\n+      decompiled = 1;\n+    }\n }\n \n /* Print one piece of a signature.  Returns pointer to next parseable"}]}