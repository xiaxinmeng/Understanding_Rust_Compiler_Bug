{"sha": "8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwYWExOWI0M2YyMzRjM2E3YzQxMjg3ZDlmYjk4NWUyYTZlODgyZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-11-21T11:51:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:51:15Z"}, "message": "sem_ch3.adb: Minor reformatting.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* s-utf_32.adb (Is_UTF_32_Line_Terminator): Recognize NEL as\n\tline terminator.\n\t* sinput.ads: Add section on Handling of Source Line Terminators.\n\t* types.ads (Line_Terminator): Adjust comments.\n\nFrom-SVN: r181567", "tree": {"sha": "4182c16d1e441ea1af4f9377c89d7d05f407c16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4182c16d1e441ea1af4f9377c89d7d05f407c16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/comments", "author": null, "committer": null, "parents": [{"sha": "51fb9b7396ee1201ea65164507f53c66a5a7d770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fb9b7396ee1201ea65164507f53c66a5a7d770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fb9b7396ee1201ea65164507f53c66a5a7d770"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "b98c7db1e7533115c9058f8db2c07f0abaa47aef", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "patch": "@@ -1,3 +1,14 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-utf_32.adb (Is_UTF_32_Line_Terminator): Recognize NEL as\n+\tline terminator.\n+\t* sinput.ads: Add section on Handling of Source Line Terminators.\n+\t* types.ads (Line_Terminator): Adjust comments.\n+\n 2011-11-21  Robert Dewar  <dewar@adacore.com>\n \n \t* frontend.adb (Frontend): Capture restrictions from config files"}, {"sha": "f044b9bcc70bb2346811b5842cb0f522b2b179eb", "filename": "gcc/ada/s-utf_32.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fs-utf_32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fs-utf_32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.adb?ref=8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6182,6 +6182,7 @@ package body System.UTF_32 is\n    function Is_UTF_32_Line_Terminator (U : UTF_32) return Boolean is\n    begin\n       return U in 10 .. 13     -- Ascii.LF Ascii.VT Ascii.FF Ascii.CR\n+        or else U = 16#00085#  -- NEL\n         or else U = 16#02028#  -- LINE SEPARATOR\n         or else U = 16#02029#; -- PARAGRAPH SEPARATOR\n    end Is_UTF_32_Line_Terminator;"}, {"sha": "8aa644aea64525a4b038d7cccf0011ce2ddc119f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "patch": "@@ -2664,8 +2664,8 @@ package body Sem_Ch3 is\n       --  Process expression, replacing error by integer zero, to avoid\n       --  cascaded errors or aborts further along in the processing\n \n-      --  Replace Error by integer zero, which seems least likely to\n-      --  cause cascaded errors.\n+      --  Replace Error by integer zero, which seems least likely to cause\n+      --  cascaded errors.\n \n       if E = Error then\n          Rewrite (E, Make_Integer_Literal (Sloc (E), Uint_0));"}, {"sha": "1bf84af3955303b22e2963dac4c5fb90bae16142", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,7 @@\n --    described in RM 2.2 (13). Any of the characters FF, LF, CR or VT or any\n --    wide character that is a Line or Paragraph Separator acts as an end of\n --    logical line in this sense, and it is essentially irrelevant whether one\n---    or more appears in sequence (since if sequence of such characters is\n+--    or more appears in sequence (since if a sequence of such characters is\n --    regarded as separate ends of line, then the intervening logical lines\n --    are null in any case).\n \n@@ -451,6 +451,75 @@ package Sinput is\n                            Internal_Source'Unrestricted_Access;\n    --  Pointer to internal source buffer\n \n+   -----------------------------------------\n+   -- Handling of Source Line Terminators --\n+   -----------------------------------------\n+\n+   --  In this section we discuss in detail the issue of terminators used to\n+   --  terminate source lines. The RM says that one or more format effectors\n+   --  (other than horizontal tab) end a source line, and defines the set of\n+   --  such format effectors, but does not talk about exactly how they are\n+   --  represented in the source program (since in general the RM is not in\n+   --  the business of specifying source program formats).\n+\n+   --  The type Types.Line_Terminator is defined as a subtype of Character\n+   --  that includes CR/LF/VT/FF. The most common line enders in practice\n+   --  are CR (some MAC systems), LF (Unix systems), and CR/LF (DOS/Windows\n+   --  systems). Any of these sequences is recognized as ending a physical\n+   --  source line, and if multiple such terminators appear (e.g. LF/LF),\n+   --  then we consider we have an extra blank line.\n+\n+   --  VT and FF are recognized as terminating source lines, but they are\n+   --  considered to end a logical line instead of a physical line, so that\n+   --  the line numbering ignores such terminators. The use of VT and FF is\n+   --  mandated by the standard, and correctly handled in a conforming manner\n+   --  by GNAT, but their use is not recommended.\n+\n+   --  In addition to the set of characters defined by the type in Types, in\n+   --  wide character encoding, then the codes returning True for a call to\n+   --  System.UTF_32.Is_UTF_32_Line_Terminator are also recognized as ending\n+   --  a physical source line. This includes the standard codes defined above\n+   --  in addition to NEL (NEXT LINE), LINE SEPARATOR and PARAGRAPH SEPARATOR.\n+   --  Again, as in the case of VT and FF, the standard requires we recognize\n+   --  these as line terminators, but we consider them to be logical line\n+   --  terminators. The only physical line terminators recognized are the\n+   --  standard ones (CR, LF, or CR/LF).\n+\n+   --  However, we do not recognize the NEL (16#85#) character as having the\n+   --  significance of an end of line character when operating in normal 8-bit\n+   --  Latin-n input mode for the compiler. Instead the rule in this mode is\n+   --  that all upper half control codes (16#80# .. 16#9F#) are illegal if they\n+   --  occur in program text, and are ignored if they appear in comments.\n+\n+   --  First, note that this behavior is fully conforming with the standard.\n+   --  The standard has nothing whatever to say about source representation\n+   --  and implementations are completely free to make there own rules. In\n+   --  this case, in 8-bit mode, GNAT decides that the 16#0085# character is\n+   --  not a representation of the NEL character, even though it looks like it.\n+   --  If you have NEL's in your program, which you expect to be treated as\n+   --  end of line characters, you must use a wide character encoding such as\n+   --  UTF-8 for this code to be recognized.\n+\n+   --  Second, an explanation of why we take this slightly surprising choice.\n+   --  We have never encountered anyone actually using the NEL character to\n+   --  end lines. One user raised the issue as a result of some experiments,\n+   --  but no one has ever submitted a program encoded this way, in any of\n+   --  the possible encodings. It seems that even when using wide character\n+   --  codes extensively, the normal approach is to use standard line enders\n+   --  (LF or CR/LF). So the failure to recognize NEL in this mode seems to\n+   --  have no practical downside.\n+\n+   --  Moreover, what we have seen in a significant number of programs from\n+   --  multiple sources is the practice of writing all program text in lower\n+   --  half (ASCII) form, but using UTF-8 encoded wide characters freely in\n+   --  comments, where the comments are terminated by normal line endings\n+   --  (LF or CR/LF). The comments do not contain NEL codes, but they can and\n+   --  do contain other UTF-8 encoding sequences where one of the bytes is the\n+   --  NEL code. Now such programs can of course be compiled in UTF-8 mode,\n+   --  but in practice they also compile fine in standard 8-bit mode without\n+   --  specifying a character encoding. Since this is common practice, it would\n+   --  be a signficant upwards incompatibility to recognize NEL in 8-bit mode.\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "75a910d33011a1d32683dba00afc8a80049ae63c", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0aa19b43f234c3a7c41287d9fb985e2a6e882f/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=8e0aa19b43f234c3a7c41287d9fb985e2a6e882f", "patch": "@@ -102,12 +102,8 @@ package Types is\n    --  Graphic characters, as defined in ARM\n \n    subtype Line_Terminator is Character range ASCII.LF .. ASCII.CR;\n-   --  Line terminator characters (LF, VT, FF, CR)\n-   --\n-   --  This definition is dubious now that we have two more wide character\n-   --  sequences that constitute a line terminator. Every reference to this\n-   --  subtype needs checking to make sure the wide character case is handled\n-   --  appropriately. ???\n+   --  Line terminator characters (LF, VT, FF, CR). For further details,\n+   --  see the extensive discussion of line termination in the Sinput spec.\n \n    subtype Upper_Half_Character is\n      Character range Character'Val (16#80#) .. Character'Val (16#FF#);"}]}