{"sha": "c7a136d3ef16cf20fcd5314036508e31870b4849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhMTM2ZDNlZjE2Y2YyMGZjZDUzMTQwMzY1MDhlMzE4NzBiNDg0OQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-07-12T03:32:07Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-07-12T03:32:07Z"}, "message": "Big AWT patch.\n\nFrom-SVN: r34976", "tree": {"sha": "d9865dd4f3595d22c9fd5c93cc63eb0b226278d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9865dd4f3595d22c9fd5c93cc63eb0b226278d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a136d3ef16cf20fcd5314036508e31870b4849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a136d3ef16cf20fcd5314036508e31870b4849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a136d3ef16cf20fcd5314036508e31870b4849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a136d3ef16cf20fcd5314036508e31870b4849/comments", "author": null, "committer": null, "parents": [{"sha": "406a65d0db1eb80f45a7a3bf8c85f534e1a3960a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406a65d0db1eb80f45a7a3bf8c85f534e1a3960a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406a65d0db1eb80f45a7a3bf8c85f534e1a3960a"}], "stats": {"total": 5083, "additions": 4822, "deletions": 261}, "files": [{"sha": "e99ca616fa578030d713a860453afa01d5b3ab4d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,3 +1,82 @@\n+2000-07-12  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tAWT Stuff:\n+\t* java/util/ResourceBundle.java (getLocale): stub.\n+\t* Makefile.am: Added new AWT classes.\n+\t* Makefile.in: Rebuilt.\n+\t* java/awt/AWTEvent.java: Add EVENT_MASK constants, isConsumed, \n+\tconstructors. Fix toString() and paramString().\n+\t* java/awt/AWTEventMulticaster.java: New class. Implemented.\n+\t* java/awt/CheckboxGroup.java: New class.\n+\t* java/awt/ColorModel.java: New class.\n+\t* java/awt/Component.java: Added stubs for most methods. Implemented \n+\tevent dispatch.\n+\t* java/awt/Container.java: ditto.\n+\t* java/awt/ComponentOrientation.java: New class. Partly implemented.\n+\t* java/awt/Cursor.java: ditto.\n+\t* java/awt/Event.java: Fix paramString().\n+\t* java/awt/EventQueue.java: New class. Implemented.\n+\t* java/awt/Font.java: Added additional stub methods. Implemented \n+\ttoString().\n+\t* java/awt/FontMetrics.java: New class. Stubbed.\n+\t* java/awt/GraphicsConfiguration.java: New class. Complete, except for \n+\tJava2D parts.\n+\t* java/awt/Insets.java: New class. Implemented.\n+\t* java/awt/Menu.java: Add new methods. Partially implemented.\n+\t* java/awt/MenuItem.java: Add new methods and fields. Partially \n+\timplemented.\n+\t* java/awt/MenuShortcut.java: New class. Implemented.\n+\t* java/awt/Panel.java: New class. Placeholder.\n+\t* java/awt/PopupMenu.java: New class. Stubbed.\n+\t* java/awt/Rectangle.java: New class. Implemented.\n+\t* java/awt/Toolkit.java: Added getSystemEventQueue() stub.\n+\t* java/awt/event/ActionEvent.java: Implement paramString().\n+\t* java/awt/event/AdjustmentEvent.java: Implement paramString().\n+\t* java/awt/event/ComponentEvent.java: Implement paramString().\n+\t* java/awt/event/ContainerEvent.java: Implement paramString().\n+\t* java/awt/event/FocusEvent.java: Implement paramString().\n+\t* java/awt/event/HierarchyBoundsAdapter.java: New class.\n+\t* java/awt/event/HierarchyBoundsListener.java: New class.\n+\t* java/awt/event/HierarchyEvent.java: New class.\n+\t* java/awt/event/HierarchyListener.java: New class.\n+\t* java/awt/event/InputMethodEvent.java: Implement paramString().\n+\t* java/awt/event/InvocationEvent.java: Implement paramString(). Throw \n+\texception if !catchExceptions.\n+\t* java/awt/event/ItemEvent.java: Implement paramString().\n+\t* java/awt/event/KeyEvent.java: Implement paramString().\n+\t* java/awt/event/MouseEvent.java: Implement paramString().\n+\t* java/awt/event/PaintEvent.java: Implement paramString().\n+\t* java/awt/event/TextEvent.java: Implement paramString().\n+\t* java/awt/event/WindowEvent.java: Implement paramString().\n+\t\n+\tAWT Peer interfaces:\n+\t* java/awt/peer/ButtonPeer.java: New file.\n+\t* java/awt/peer/ListPeer.java: New file.\n+\t* java/awt/peer/CanvasPeer.java: New file.\n+\t* java/awt/peer/MenuBarPeer.java: New file.\n+\t* java/awt/peer/CheckboxMenuItemPeer.java: New file.\n+\t* java/awt/peer/MenuComponentPeer.java: New file.\n+\t* java/awt/peer/CheckboxPeer.java: New file.\n+\t* java/awt/peer/MenuItemPeer.java: New file.\n+\t* java/awt/peer/ChoicePeer.java: New file.\n+\t* java/awt/peer/MenuPeer.java: New file.\n+\t* java/awt/peer/ComponentPeer.java: Implemented.\n+\t* java/awt/peer/PanelPeer.java: New file.\n+\t* java/awt/peer/ContainerPeer.java: Implemented.\n+\t* java/awt/peer/PopupMenuPeer.java: New file.\n+\t* java/awt/peer/DialogPeer.java: New file.\n+\t* java/awt/peer/ScrollPanePeer.java: New file.\n+\t* java/awt/peer/FileDialogPeer.java: New file.\n+\t* java/awt/peer/ScrollbarPeer.java: New file.\n+\t* java/awt/peer/FontPeer.java: New file.\n+\t* java/awt/peer/TextAreaPeer.java: New file.\n+\t* java/awt/peer/FramePeer.java: Implemented.\n+\t* java/awt/peer/TextComponentPeer.java: New file.\n+\t* java/awt/peer/LabelPeer.java: New file.\n+\t* java/awt/peer/TextFieldPeer.java: New file.\n+\t* java/awt/peer/LightweightPeer.java: New file.\n+\t* java/awt/peer/WindowPeer.java: Implemented.\n+\n 2000-07-06  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/natClassLoader.cc (_Jv_PrepareCompiledClass):\n@@ -32,7 +111,7 @@\n \n 2000-06-28  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* ThreadGroup.java: Added synchronized flag to many methods.\n+\t* java/lang/ThreadGroup.java: Added synchronized flag to many methods.\n \t(destroyed_flag): Removed.\n \t(isDestroyed, removeGroup, removeThread): Test for parent == null.\t\n \t(activeCount): Added spec note."}, {"sha": "e48a35b24a38287a1cbfa9a1cb3a96ec2ff11b1e", "filename": "libjava/Makefile.am", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -489,8 +489,12 @@ awt_java_source_files =\t\\\n java/awt/event/ActionEvent.java\t\\\n java/awt/event/ActionListener.java \\\n java/awt/event/ComponentEvent.java \\\n-java/awt/event/KeyAdapter.java \\\n+java/awt/event/HierarchyBoundsAdapter.java \\\n+java/awt/event/HierarchyBoundsListener.java \\\n+java/awt/event/HierarchyEvent.java \\\n+java/awt/event/HierarchyListener.java \\\n java/awt/event/InputEvent.java \\\n+java/awt/event/KeyAdapter.java \\\n java/awt/event/KeyEvent.java \\\n java/awt/event/KeyListener.java\t\\\n java/awt/event/TextEvent.java \\\n@@ -520,33 +524,71 @@ java/awt/event/ItemEvent.java \\\n java/awt/event/InvocationEvent.java \\\n java/awt/event/PaintEvent.java \\\n java/awt/event/ContainerEvent.java \\\n+java/awt/AWTError.java \\\n java/awt/AWTEvent.java \\\n+java/awt/AWTEventMulticaster.java \\\n java/awt/BorderLayout.java \\\n+java/awt/CheckboxGroup.java \\\n+java/awt/ColorModel.java \\\n java/awt/Component.java\t\\\n+java/awt/ComponentOrientation.java \\\n java/awt/Container.java\t\\\n+java/awt/Cursor.java \\\n java/awt/Dimension.java\t\\\n java/awt/Event.java \\\n+java/awt/EventDispatchThread.java \\\n+java/awt/EventQueue.java \\\n java/awt/Font.java \\\n+java/awt/FontMetrics.java \\\n java/awt/Frame.java \\\n+java/awt/GraphicsConfiguration.java \\\n+java/awt/Insets.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/Menu.java \\\n java/awt/MenuBar.java \\\n java/awt/MenuComponent.java \\\n java/awt/MenuContainer.java \\\n java/awt/MenuItem.java \\\n+java/awt/MenuShortcut.java \\\n+java/awt/Panel.java \\\n java/awt/Point.java \\\n-java/awt/AWTError.java \\\n+java/awt/PopupMenu.java \\\n java/awt/Shape.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/Toolkit.java \\\n java/awt/Window.java \\\n+java/awt/image/ImageConsumer.java \\\n+java/awt/image/ImageObserver.java \\\n+java/awt/image/ImageProducer.java \\\n java/awt/geom/Dimension2D.java \\\n java/awt/geom/Point2D.java \\\n+java/awt/peer/ButtonPeer.java \\\n+java/awt/peer/CanvasPeer.java \\\n+java/awt/peer/CheckboxMenuItemPeer.java \\\n+java/awt/peer/CheckboxPeer.java \\\n+java/awt/peer/ChoicePeer.java \\\n java/awt/peer/ComponentPeer.java \\\n java/awt/peer/ContainerPeer.java \\\n+java/awt/peer/DialogPeer.java \\\n+java/awt/peer/FileDialogPeer.java \\\n+java/awt/peer/FontPeer.java \\\n java/awt/peer/FramePeer.java \\\n+java/awt/peer/LabelPeer.java \\\n+java/awt/peer/LightweightPeer.java \\\n+java/awt/peer/ListPeer.java \\\n+java/awt/peer/MenuBarPeer.java \\\n+java/awt/peer/MenuComponentPeer.java \\\n+java/awt/peer/MenuItemPeer.java \\\n+java/awt/peer/MenuPeer.java \\\n+java/awt/peer/PanelPeer.java \\\n+java/awt/peer/PopupMenuPeer.java \\\n+java/awt/peer/ScrollPanePeer.java \\\n+java/awt/peer/ScrollbarPeer.java \\\n+java/awt/peer/TextAreaPeer.java \\\n+java/awt/peer/TextComponentPeer.java \\\n+java/awt/peer/TextFieldPeer.java \\\n java/awt/peer/WindowPeer.java \\\n java/awt/Adjustable.java \\\n java/awt/Color.java \\"}, {"sha": "3657a60d5d61198b359a62f33c3650a480c3574d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 105, "deletions": 68, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -265,8 +265,12 @@ awt_java_source_files = \\\n java/awt/event/ActionEvent.java\t\\\n java/awt/event/ActionListener.java \\\n java/awt/event/ComponentEvent.java \\\n-java/awt/event/KeyAdapter.java \\\n+java/awt/event/HierarchyBoundsAdapter.java \\\n+java/awt/event/HierarchyBoundsListener.java \\\n+java/awt/event/HierarchyEvent.java \\\n+java/awt/event/HierarchyListener.java \\\n java/awt/event/InputEvent.java \\\n+java/awt/event/KeyAdapter.java \\\n java/awt/event/KeyEvent.java \\\n java/awt/event/KeyListener.java\t\\\n java/awt/event/TextEvent.java \\\n@@ -296,33 +300,71 @@ java/awt/event/ItemEvent.java \\\n java/awt/event/InvocationEvent.java \\\n java/awt/event/PaintEvent.java \\\n java/awt/event/ContainerEvent.java \\\n+java/awt/AWTError.java \\\n java/awt/AWTEvent.java \\\n+java/awt/AWTEventMulticaster.java \\\n java/awt/BorderLayout.java \\\n+java/awt/CheckboxGroup.java \\\n+java/awt/ColorModel.java \\\n java/awt/Component.java\t\\\n+java/awt/ComponentOrientation.java \\\n java/awt/Container.java\t\\\n+java/awt/Cursor.java \\\n java/awt/Dimension.java\t\\\n java/awt/Event.java \\\n+java/awt/EventDispatchThread.java \\\n+java/awt/EventQueue.java \\\n java/awt/Font.java \\\n+java/awt/FontMetrics.java \\\n java/awt/Frame.java \\\n+java/awt/GraphicsConfiguration.java \\\n+java/awt/Insets.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/Menu.java \\\n java/awt/MenuBar.java \\\n java/awt/MenuComponent.java \\\n java/awt/MenuContainer.java \\\n java/awt/MenuItem.java \\\n+java/awt/MenuShortcut.java \\\n+java/awt/Panel.java \\\n java/awt/Point.java \\\n-java/awt/AWTError.java \\\n+java/awt/PopupMenu.java \\\n java/awt/Shape.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/Toolkit.java \\\n java/awt/Window.java \\\n+java/awt/image/ImageConsumer.java \\\n+java/awt/image/ImageObserver.java \\\n+java/awt/image/ImageProducer.java \\\n java/awt/geom/Dimension2D.java \\\n java/awt/geom/Point2D.java \\\n+java/awt/peer/ButtonPeer.java \\\n+java/awt/peer/CanvasPeer.java \\\n+java/awt/peer/CheckboxMenuItemPeer.java \\\n+java/awt/peer/CheckboxPeer.java \\\n+java/awt/peer/ChoicePeer.java \\\n java/awt/peer/ComponentPeer.java \\\n java/awt/peer/ContainerPeer.java \\\n+java/awt/peer/DialogPeer.java \\\n+java/awt/peer/FileDialogPeer.java \\\n+java/awt/peer/FontPeer.java \\\n java/awt/peer/FramePeer.java \\\n+java/awt/peer/LabelPeer.java \\\n+java/awt/peer/LightweightPeer.java \\\n+java/awt/peer/ListPeer.java \\\n+java/awt/peer/MenuBarPeer.java \\\n+java/awt/peer/MenuComponentPeer.java \\\n+java/awt/peer/MenuItemPeer.java \\\n+java/awt/peer/MenuPeer.java \\\n+java/awt/peer/PanelPeer.java \\\n+java/awt/peer/PopupMenuPeer.java \\\n+java/awt/peer/ScrollPanePeer.java \\\n+java/awt/peer/ScrollbarPeer.java \\\n+java/awt/peer/TextAreaPeer.java \\\n+java/awt/peer/TextComponentPeer.java \\\n+java/awt/peer/TextFieldPeer.java \\\n java/awt/peer/WindowPeer.java \\\n java/awt/Adjustable.java \\\n java/awt/Color.java \\\n@@ -904,14 +946,13 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DATA =  $(data_DATA) $(toolexeclib_DATA)\n \n DIST_COMMON =  README COPYING ChangeLog Makefile.am Makefile.in NEWS \\\n-THANKS acconfig.h acinclude.m4 aclocal.m4 configure configure.in \\\n-include/config.h.in include/stamp-h.in libgcj-test.spec.in \\\n-libgcj.spec.in\n+THANKS acinclude.m4 aclocal.m4 configure configure.in \\\n+libgcj-test.spec.in libgcj.spec.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -971,19 +1012,26 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/security/provider/SHA.P \\\n .deps/gnu/java/security/provider/SHA1PRNG.P .deps/interpret.P \\\n .deps/java/awt/AWTError.P .deps/java/awt/AWTEvent.P \\\n-.deps/java/awt/AWTException.P .deps/java/awt/ActiveEvent.P \\\n-.deps/java/awt/Adjustable.P .deps/java/awt/BorderLayout.P \\\n-.deps/java/awt/Color.P .deps/java/awt/Component.P \\\n-.deps/java/awt/Container.P .deps/java/awt/Dimension.P \\\n-.deps/java/awt/Event.P .deps/java/awt/Font.P .deps/java/awt/Frame.P \\\n-.deps/java/awt/Graphics.P \\\n+.deps/java/awt/AWTEventMulticaster.P .deps/java/awt/AWTException.P \\\n+.deps/java/awt/ActiveEvent.P .deps/java/awt/Adjustable.P \\\n+.deps/java/awt/BorderLayout.P .deps/java/awt/CheckboxGroup.P \\\n+.deps/java/awt/Color.P .deps/java/awt/ColorModel.P \\\n+.deps/java/awt/Component.P .deps/java/awt/ComponentOrientation.P \\\n+.deps/java/awt/Container.P .deps/java/awt/Cursor.P \\\n+.deps/java/awt/Dimension.P .deps/java/awt/Event.P \\\n+.deps/java/awt/EventDispatchThread.P .deps/java/awt/EventQueue.P \\\n+.deps/java/awt/Font.P .deps/java/awt/FontMetrics.P \\\n+.deps/java/awt/Frame.P .deps/java/awt/Graphics.P \\\n+.deps/java/awt/GraphicsConfiguration.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n-.deps/java/awt/ItemSelectable.P .deps/java/awt/LayoutManager.P \\\n-.deps/java/awt/LayoutManager2.P .deps/java/awt/Menu.P \\\n-.deps/java/awt/MenuBar.P .deps/java/awt/MenuComponent.P \\\n-.deps/java/awt/MenuContainer.P .deps/java/awt/MenuItem.P \\\n+.deps/java/awt/Insets.P .deps/java/awt/ItemSelectable.P \\\n+.deps/java/awt/LayoutManager.P .deps/java/awt/LayoutManager2.P \\\n+.deps/java/awt/Menu.P .deps/java/awt/MenuBar.P \\\n+.deps/java/awt/MenuComponent.P .deps/java/awt/MenuContainer.P \\\n+.deps/java/awt/MenuItem.P .deps/java/awt/MenuShortcut.P \\\n .deps/java/awt/Paint.P .deps/java/awt/PaintContext.P \\\n-.deps/java/awt/Point.P .deps/java/awt/Rectangle.P \\\n+.deps/java/awt/Panel.P .deps/java/awt/Point.P \\\n+.deps/java/awt/PopupMenu.P .deps/java/awt/Rectangle.P \\\n .deps/java/awt/Shape.P .deps/java/awt/TextArea.P \\\n .deps/java/awt/TextComponent.P .deps/java/awt/Toolkit.P \\\n .deps/java/awt/Transparency.P .deps/java/awt/Window.P \\\n@@ -999,7 +1047,12 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/event/ContainerEvent.P \\\n .deps/java/awt/event/ContainerListener.P \\\n .deps/java/awt/event/FocusAdapter.P .deps/java/awt/event/FocusEvent.P \\\n-.deps/java/awt/event/FocusListener.P .deps/java/awt/event/InputEvent.P \\\n+.deps/java/awt/event/FocusListener.P \\\n+.deps/java/awt/event/HierarchyBoundsAdapter.P \\\n+.deps/java/awt/event/HierarchyBoundsListener.P \\\n+.deps/java/awt/event/HierarchyEvent.P \\\n+.deps/java/awt/event/HierarchyListener.P \\\n+.deps/java/awt/event/InputEvent.P \\\n .deps/java/awt/event/InputMethodEvent.P \\\n .deps/java/awt/event/InputMethodListener.P \\\n .deps/java/awt/event/InvocationEvent.P .deps/java/awt/event/ItemEvent.P \\\n@@ -1013,12 +1066,27 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/event/TextListener.P \\\n .deps/java/awt/event/WindowAdapter.P .deps/java/awt/event/WindowEvent.P \\\n .deps/java/awt/event/WindowListener.P .deps/java/awt/geom/Dimension2D.P \\\n-.deps/java/awt/geom/Point2D.P .deps/java/awt/peer/ComponentPeer.P \\\n-.deps/java/awt/peer/ContainerPeer.P .deps/java/awt/peer/FramePeer.P \\\n-.deps/java/awt/peer/WindowPeer.P .deps/java/beans/BeanDescriptor.P \\\n-.deps/java/beans/BeanInfo.P .deps/java/beans/Beans.P \\\n-.deps/java/beans/Customizer.P .deps/java/beans/DesignMode.P \\\n-.deps/java/beans/EventSetDescriptor.P \\\n+.deps/java/awt/geom/Point2D.P .deps/java/awt/image/ImageConsumer.P \\\n+.deps/java/awt/image/ImageObserver.P \\\n+.deps/java/awt/image/ImageProducer.P .deps/java/awt/peer/ButtonPeer.P \\\n+.deps/java/awt/peer/CanvasPeer.P \\\n+.deps/java/awt/peer/CheckboxMenuItemPeer.P \\\n+.deps/java/awt/peer/CheckboxPeer.P .deps/java/awt/peer/ChoicePeer.P \\\n+.deps/java/awt/peer/ComponentPeer.P .deps/java/awt/peer/ContainerPeer.P \\\n+.deps/java/awt/peer/DialogPeer.P .deps/java/awt/peer/FileDialogPeer.P \\\n+.deps/java/awt/peer/FontPeer.P .deps/java/awt/peer/FramePeer.P \\\n+.deps/java/awt/peer/LabelPeer.P .deps/java/awt/peer/LightweightPeer.P \\\n+.deps/java/awt/peer/ListPeer.P .deps/java/awt/peer/MenuBarPeer.P \\\n+.deps/java/awt/peer/MenuComponentPeer.P \\\n+.deps/java/awt/peer/MenuItemPeer.P .deps/java/awt/peer/MenuPeer.P \\\n+.deps/java/awt/peer/PanelPeer.P .deps/java/awt/peer/PopupMenuPeer.P \\\n+.deps/java/awt/peer/ScrollPanePeer.P \\\n+.deps/java/awt/peer/ScrollbarPeer.P .deps/java/awt/peer/TextAreaPeer.P \\\n+.deps/java/awt/peer/TextComponentPeer.P \\\n+.deps/java/awt/peer/TextFieldPeer.P .deps/java/awt/peer/WindowPeer.P \\\n+.deps/java/beans/BeanDescriptor.P .deps/java/beans/BeanInfo.P \\\n+.deps/java/beans/Beans.P .deps/java/beans/Customizer.P \\\n+.deps/java/beans/DesignMode.P .deps/java/beans/EventSetDescriptor.P \\\n .deps/java/beans/FeatureDescriptor.P \\\n .deps/java/beans/IndexedPropertyDescriptor.P \\\n .deps/java/beans/IntrospectionException.P \\\n@@ -1296,34 +1364,6 @@ config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n-\n-include/config.h: include/stamp-h\n-\t@if test ! -f $@; then \\\n-\t\trm -f include/stamp-h; \\\n-\t\t$(MAKE) include/stamp-h; \\\n-\telse :; fi\n-include/stamp-h: $(srcdir)/include/config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=include/config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > include/stamp-h 2> /dev/null\n-$(srcdir)/include/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/include/stamp-h.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/include/stamp-h.in; \\\n-\t\t$(MAKE) $(srcdir)/include/stamp-h.in; \\\n-\telse :; fi\n-$(srcdir)/include/stamp-h.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/include/stamp-h.in 2> /dev/null\n-\n-mostlyclean-hdr:\n-\n-clean-hdr:\n-\n-distclean-hdr:\n-\t-rm -f include/config.h\n-\n-maintainer-clean-hdr:\n libgcj.spec: $(top_builddir)/config.status libgcj.spec.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n libgcj-test.spec: $(top_builddir)/config.status libgcj-test.spec.in\n@@ -1786,33 +1826,31 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLIBRARIES \\\n-\t\tmostlyclean-compile mostlyclean-libtool \\\n-\t\tmostlyclean-toolexeclibLTLIBRARIES \\\n+mostlyclean-am:  mostlyclean-toolexeclibLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-toolexeclibLTLIBRARIES \\\n \t\tmostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \\\n \t\tmostlyclean-tags mostlyclean-depend mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-hdr clean-toolexeclibLIBRARIES clean-compile \\\n-\t\tclean-libtool clean-toolexeclibLTLIBRARIES \\\n-\t\tclean-binPROGRAMS clean-noinstPROGRAMS clean-tags \\\n-\t\tclean-depend clean-generic mostlyclean-am clean-local\n+clean-am:  clean-toolexeclibLIBRARIES clean-compile clean-libtool \\\n+\t\tclean-toolexeclibLTLIBRARIES clean-binPROGRAMS \\\n+\t\tclean-noinstPROGRAMS clean-tags clean-depend \\\n+\t\tclean-generic mostlyclean-am clean-local\n \n clean: clean-recursive\n \n-distclean-am:  distclean-hdr distclean-toolexeclibLIBRARIES \\\n-\t\tdistclean-compile distclean-libtool \\\n-\t\tdistclean-toolexeclibLTLIBRARIES distclean-binPROGRAMS \\\n-\t\tdistclean-noinstPROGRAMS distclean-tags \\\n-\t\tdistclean-depend distclean-generic clean-am\n+distclean-am:  distclean-toolexeclibLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-toolexeclibLTLIBRARIES \\\n+\t\tdistclean-binPROGRAMS distclean-noinstPROGRAMS \\\n+\t\tdistclean-tags distclean-depend distclean-generic \\\n+\t\tclean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n-maintainer-clean-am:  maintainer-clean-hdr \\\n-\t\tmaintainer-clean-toolexeclibLIBRARIES \\\n+maintainer-clean-am:  maintainer-clean-toolexeclibLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-binPROGRAMS \\\n@@ -1825,8 +1863,7 @@ maintainer-clean-am:  maintainer-clean-hdr \\\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n-.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n-mostlyclean-toolexeclibLIBRARIES distclean-toolexeclibLIBRARIES \\\n+.PHONY: mostlyclean-toolexeclibLIBRARIES distclean-toolexeclibLIBRARIES \\\n clean-toolexeclibLIBRARIES maintainer-clean-toolexeclibLIBRARIES \\\n uninstall-toolexeclibLIBRARIES install-toolexeclibLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\"}, {"sha": "bb09f0cab98b423849683afe1631056e199cd58f", "filename": "libjava/java/awt/AWTEvent.java", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FAWTEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FAWTEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAWTEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,38 +1,87 @@\n /* Copyright (C) 1999, 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt;\n \n-/* A very incomplete placeholder. */\n+/* Written using on-line Java 2 Platform Standard Edition v1.3 API \n+ * Specification, as well as \"The Java Class Libraries\", 2nd edition \n+ * (Addison-Wesley, 1998).\n+ * Status:  Believed complete and correct, except for the java.awt.Event \n+ * compatibility constructor.\n+ */\n+\n+/**\n+ * AWTEvent is the root event class for all AWT events in the JDK 1.1 event \n+ * model. It supercedes the Event class from JDK 1.0.\n+ */\n \n public abstract class AWTEvent extends java.util.EventObject\n {\n   protected boolean consumed;\n   protected int id;\n \n+  /* Event selection masks */\n+  public static final long COMPONENT_EVENT_MASK    = 1 << 0,\n+\t\t\t   CONTAINER_EVENT_MASK    = 1 << 1,\n+\t\t\t   FOCUS_EVENT_MASK        = 1 << 2,\n+\t\t\t   KEY_EVENT_MASK          = 1 << 3,\n+\t\t\t   MOUSE_EVENT_MASK        = 1 << 4, \n+\t\t\t   MOUSE_MOTION_EVENT_MASK = 1 << 5,\n+\t\t\t   WINDOW_EVENT_MASK       = 1 << 6,\n+\t\t\t   ACTION_EVENT_MASK       = 1 << 7,\n+\t\t\t   ADJUSTMENT_EVENT_MASK   = 1 << 8,\n+\t\t\t   ITEM_EVENT_MASK         = 1 << 9,\n+\t\t\t   TEXT_EVENT_MASK         = 1 << 10,\n+\t\t\t   INPUT_METHOD_EVENT_MASK = 1 << 11;\n+\n+  /* Additional event selection masks from JDK 1.3 javadocs */\n+  public static final long PAINT_EVENT_MASK            = 1 << 13,\n+\t\t\t   INVOCATION_EVENT_MASK       = 1 << 14,\n+\t\t\t   HIERARCHY_EVENT_MASK        = 1 << 15,\n+\t\t\t   HIERARCHY_BOUNDS_EVENT_MASK = 1 << 16;\n+\n+  public static final int RESERVED_ID_MAX = 0x7cf;\n+\n+  public AWTEvent(Event event)\n+  {\n+    // FIXME??\n+    super(event.target);\n+    this.id = event.id;\n+  }\n+  \n+  public AWTEvent(Object source, int id)\n+  {\n+    super(source);\n+    this.id = id;\n+  }\n+\n   public int getID()\n   {\n     return id;\n   }\n \n   public String paramString ()\n   {\n-    return toString ();\n+    return \"\";\n   }\n \n   public String toString ()\n   {\n-    return getClass().getName() + \"[\" + id + \"]\";\n+    return getClass().getName() + \"[\" + paramString() + \"] on \" + source;\n   }\n-\n-  public AWTEvent (Object source, int id)\n+  \n+  protected void consume()\n   {\n-    super(source);\n-    this.id = id;\n+    consumed = true;\n+  }\n+  \n+  protected boolean isConsumed()\n+  {\n+    return consumed;\n   }\n }"}, {"sha": "560ebbe3b660b68d2059f9ce9202599e7e24a6f7", "filename": "libjava/java/awt/AWTEventMulticaster.java", "status": "added", "additions": 463, "deletions": 0, "changes": 463, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FAWTEventMulticaster.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FAWTEventMulticaster.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAWTEventMulticaster.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,463 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+import java.awt.event.*;\n+import java.util.EventListener;\n+import java.io.ObjectOutputStream;\n+\n+/* Written using on-line Java 2 Platform Standard Edition v1.3 API \n+ * Specification, as well as \"The Java Class Libraries\", 2nd edition \n+ * (Addison-Wesley, 1998).\n+ * Status:  Believed complete and correct to J2SE 1.3, except for \n+ * serialization support methods, save() and saveInternal(), which are \n+ * stubbed.\n+ */\n+\n+/**\n+ * Convienience class for thread-safe multicasting of AWT events,\n+ * without synchronization.\n+ *\n+ * @author Bryce McKinlay\n+ */\n+\n+public class AWTEventMulticaster implements ComponentListener, \n+  ContainerListener, FocusListener, KeyListener, MouseListener,\n+  MouseMotionListener, WindowListener, ActionListener, ItemListener, \n+  AdjustmentListener, TextListener, InputMethodListener, HierarchyListener, \n+  HierarchyBoundsListener\n+{\n+  protected final EventListener a, b;                            \n+\n+  protected AWTEventMulticaster(EventListener a,\n+                        \tEventListener b)\n+  {\n+    this.a = a;\n+    this.b = b;\n+  }\n+\n+  protected static EventListener addInternal(EventListener a, EventListener b)\n+  {\n+    if (a == null)\n+      return b;\n+    else if (b == null)\n+      return a;\n+    else return new AWTEventMulticaster(a, b);\n+  }\n+  \n+  protected static EventListener removeInternal(EventListener l, \n+\t\t\t\t\t\tEventListener oldl)\n+  {\n+    if (l == oldl)\n+      return null;\n+    else if (l instanceof AWTEventMulticaster)\n+      {\n+\tAWTEventMulticaster mc = (AWTEventMulticaster) l;\n+\treturn mc.remove(oldl);\n+      }\n+    return l;\n+  }\n+\n+  /* Remove oldl from this multicaster. */\n+  protected EventListener remove(EventListener oldl)\n+  {\n+    // If oldl is an immediate child, return the other child.\n+    if (a == oldl)\n+      return b;\n+    if (b == oldl)\n+      return a;\n+\n+    // If a and/or b are Multicaster's, search them recursivly. \n+    if (a instanceof AWTEventMulticaster)\n+      {\n+        AWTEventMulticaster mc = (AWTEventMulticaster) a;\n+\tEventListener newa = mc.remove(oldl);\n+\tif (newa != a)\n+\t  return new AWTEventMulticaster (newa, b);\n+      }    \n+    if (b instanceof AWTEventMulticaster)\n+      {\n+        AWTEventMulticaster mc = (AWTEventMulticaster) a;\n+\tEventListener newb = mc.remove(oldl);\n+\tif (newb != b)\n+\t  return new AWTEventMulticaster (a, newb);\n+      }\n+      \n+    // oldl was not found.\n+    return this;\n+  }\n+\n+  public static ActionListener add(ActionListener a, ActionListener b)\n+  {\n+    return (ActionListener) addInternal(a, b);\n+  }\n+  \n+  public static AdjustmentListener add(AdjustmentListener a, \n+\t\t\t\t       AdjustmentListener b)\n+  {\n+    return (AdjustmentListener) addInternal(a, b);\n+  }\t\t\t\t       \n+\t\t\t\t       \n+  public static ComponentListener add(ComponentListener a, ComponentListener b)\n+  {\n+    return (ComponentListener) addInternal(a, b);\n+  }\n+  \n+  public static ContainerListener add(ContainerListener a, ContainerListener b)\n+  {\n+    return (ContainerListener) addInternal(a, b);\n+  }\n+  \n+  public static FocusListener add(FocusListener a, FocusListener b) \n+  {\n+    return (FocusListener) addInternal(a, b);\n+  }\n+  \n+  public static HierarchyBoundsListener add(HierarchyBoundsListener a, \n+\t\t\t\t\t    HierarchyBoundsListener b)\n+  {\n+    return (HierarchyBoundsListener) addInternal(a, b);\n+  }\n+\t\t\t\t\t    \n+  public static HierarchyListener add(HierarchyListener a, HierarchyListener b)\n+  {\n+    return (HierarchyListener) addInternal(a, b);\n+  }\n+  \n+  public static InputMethodListener add(InputMethodListener a, \n+\t\t\t\t\tInputMethodListener b)\n+  {\n+    return (InputMethodListener) addInternal(a, b);\n+  }\n+\t\t\t\t\t\n+  public static ItemListener add(ItemListener a, ItemListener b)\n+  {\n+    return (ItemListener) addInternal(a, b);\n+  }\n+  \n+  public static KeyListener add(KeyListener a, KeyListener b)\n+  {\n+    return (KeyListener) addInternal(a, b);\n+  }\n+\n+  public static MouseListener add(MouseListener a, MouseListener b)\n+  {\n+    return (MouseListener) addInternal(a, b);\n+  }\n+  \n+  public static MouseMotionListener add(MouseMotionListener a, \n+\t\t\t\t\tMouseMotionListener b)\n+  {\n+    return (MouseMotionListener) addInternal(a, b);\n+  }\n+\t\t\t\t\t\n+  public static TextListener add(TextListener a, TextListener b)\n+  {\n+    return (TextListener) addInternal(a, b);\n+  }\n+  \n+  public static WindowListener add(WindowListener a, WindowListener b)\n+  {\n+    return (WindowListener) addInternal(a, b);\n+  }\n+  \n+  public static ActionListener remove(ActionListener l, ActionListener oldl)\n+  {\n+    return (ActionListener) removeInternal(l, oldl);\n+  }\n+  \n+  public static AdjustmentListener remove(AdjustmentListener l, \n+\t\t\t\t\t  AdjustmentListener oldl) \n+  {\n+    return (AdjustmentListener) removeInternal(l, oldl);\n+  }\n+\n+  public static ComponentListener remove(ComponentListener l, \n+\t\t\t\t\t ComponentListener oldl) \n+  {\n+    return (ComponentListener) removeInternal(l, oldl);\n+  }\n+\n+  public static ContainerListener remove(ContainerListener l, \n+\t\t\t\t\t ContainerListener oldl) \n+  {\n+    return (ContainerListener) removeInternal(l, oldl);\n+  }\n+\n+  public static FocusListener remove(FocusListener l, FocusListener oldl) \n+  {\n+    return (FocusListener) removeInternal(l, oldl);\n+  }\n+\n+  public static HierarchyBoundsListener remove(HierarchyBoundsListener l,\n+                \t\t\t       HierarchyBoundsListener oldl) \n+  {\n+    return (HierarchyBoundsListener) removeInternal(l, oldl);\n+  }\n+\n+  public static HierarchyListener remove(HierarchyListener l, \n+\t\t\t\t\t HierarchyListener oldl) \n+  {\n+    return (HierarchyListener) removeInternal(l, oldl);\n+  }\n+\n+  public static InputMethodListener remove(InputMethodListener l, \n+\t\t\t\t\t   InputMethodListener oldl) \n+  {\n+    return (InputMethodListener) removeInternal(l, oldl);\n+  }\n+\n+  public static ItemListener remove(ItemListener l, ItemListener oldl) \n+  {\n+    return (ItemListener) removeInternal(l, oldl);\n+  }\n+\n+  public static KeyListener remove(KeyListener l, KeyListener oldl) \n+  {\n+    return (KeyListener) removeInternal(l, oldl);\n+  }\n+\n+  public static MouseListener remove(MouseListener l, MouseListener oldl) \n+  {\n+    return (MouseListener) removeInternal(l, oldl);\n+  }\n+\n+  public static MouseMotionListener remove(MouseMotionListener l, \n+\t\t\t\t\t   MouseMotionListener oldl) \n+  {\n+    return (MouseMotionListener) removeInternal(l, oldl);\n+  }\n+\n+  public static TextListener remove(TextListener l, TextListener oldl)                                            \n+  {\n+    return (TextListener) removeInternal(l, oldl);\n+  }\n+\n+  public static WindowListener remove(WindowListener l, WindowListener oldl) \n+  {\n+    return (WindowListener) removeInternal(l, oldl);\n+  }\n+\n+  public void actionPerformed(ActionEvent e) \n+  {\n+    ((ActionListener) a).actionPerformed(e);\n+    ((ActionListener) b).actionPerformed(e);\n+  }\n+  \n+  public void adjustmentValueChanged(AdjustmentEvent e) \n+  {\n+    ((AdjustmentListener) a).adjustmentValueChanged(e);\n+    ((AdjustmentListener) b).adjustmentValueChanged(e);\n+  }\n+  \n+  public void componentHidden(ComponentEvent e)\n+  {\n+    ((ComponentListener) a).componentHidden(e);\n+    ((ComponentListener) b).componentHidden(e);\n+  }\n+  \n+  public void componentMoved(ComponentEvent e)\n+  {\n+    ((ComponentListener) a).componentMoved(e);\n+    ((ComponentListener) b).componentMoved(e);\n+  }\n+    \n+  public void componentResized(ComponentEvent e)\n+  {\n+    ((ComponentListener) a).componentResized(e);\n+    ((ComponentListener) b).componentResized(e);\n+  }\n+  \n+  public void componentShown(ComponentEvent e)\n+  {\n+    ((ComponentListener) a).componentShown(e);\n+    ((ComponentListener) b).componentShown(e);\n+  }\n+  \n+  public void componentAdded(ContainerEvent e)\n+  {\n+    ((ContainerListener) a).componentAdded(e);\n+    ((ContainerListener) b).componentAdded(e);\n+  }\n+\n+  public void componentRemoved(ContainerEvent e)\n+  {\n+    ((ContainerListener) a).componentRemoved(e);\n+    ((ContainerListener) b).componentRemoved(e);\n+  }\n+  \n+  public void focusGained(FocusEvent e)\n+  {\n+    ((FocusListener) a).focusGained(e);\n+    ((FocusListener) b).focusGained(e);\n+  }\n+  \n+  public void focusLost(FocusEvent e) \n+  {\n+    ((FocusListener) a).focusLost(e);\n+    ((FocusListener) b).focusLost(e);\n+  }\n+  \n+\n+  public void ancestorMoved(HierarchyEvent e) \n+  {\n+    ((HierarchyBoundsListener) a).ancestorMoved(e);\n+    ((HierarchyBoundsListener) b).ancestorMoved(e);\n+  }\n+  \n+  public void ancestorResized(HierarchyEvent e) \n+  {\n+    ((HierarchyBoundsListener) a).ancestorResized(e);\n+    ((HierarchyBoundsListener) b).ancestorResized(e);\n+  }\n+  \n+  public void hierarchyChanged(HierarchyEvent e) \n+  {\n+    ((HierarchyListener) a).hierarchyChanged(e);\n+    ((HierarchyListener) b).hierarchyChanged(e);\n+  }\n+\n+  public void caretPositionChanged(InputMethodEvent e)\n+  {\n+    ((InputMethodListener) a).caretPositionChanged(e);\n+    ((InputMethodListener) b).caretPositionChanged(e);\n+  }\n+\n+  public void inputMethodTextChanged(InputMethodEvent e) \n+  {\n+    ((InputMethodListener) a).inputMethodTextChanged(e);\n+    ((InputMethodListener) b).inputMethodTextChanged(e);\n+  }\n+\n+  public void itemStateChanged(ItemEvent e) \n+  {\n+    ((ItemListener) a).itemStateChanged(e);\n+    ((ItemListener) b).itemStateChanged(e);\n+  }  \n+\n+  public void keyPressed(KeyEvent e)\n+  {\n+    ((KeyListener) a).keyPressed(e);\n+    ((KeyListener) b).keyPressed(e);\n+  }\n+    \n+  public void keyReleased(KeyEvent e) \n+  {\n+    ((KeyListener) a).keyReleased(e);\n+    ((KeyListener) b).keyReleased(e);\n+  }\n+  \n+  public void keyTyped(KeyEvent e) \n+  {\n+    ((KeyListener) a).keyTyped(e);\n+    ((KeyListener) b).keyTyped(e);\n+  }\n+  \n+  public void mouseClicked(MouseEvent e) \n+  {\n+    ((MouseListener) a).mouseClicked(e);\n+    ((MouseListener) b).mouseClicked(e);\n+  }\n+  \n+  \n+  public void mouseEntered(MouseEvent e) \n+  {\n+    ((MouseListener) a).mouseEntered(e);\n+    ((MouseListener) b).mouseEntered(e);\n+  }\n+  \n+  public void mouseExited(MouseEvent e) \n+  {\n+    ((MouseListener) a).mouseExited(e);\n+    ((MouseListener) b).mouseExited(e);\n+  }\n+\n+  public void mousePressed(MouseEvent e) \n+  {\n+    ((MouseListener) a).mousePressed(e);\n+    ((MouseListener) b).mousePressed(e);\n+  }\n+  \n+  public void mouseReleased(MouseEvent e) \n+  {\n+    ((MouseListener) a).mouseReleased(e);\n+    ((MouseListener) b).mouseReleased(e);\n+  }\n+  \n+  public void mouseDragged(MouseEvent e) \n+  {\n+    ((MouseMotionListener) a).mouseDragged(e);\n+    ((MouseMotionListener) b).mouseDragged(e);\n+  }\n+\n+  public void mouseMoved(MouseEvent e) \n+  {\n+    ((MouseMotionListener) a).mouseMoved(e);\n+    ((MouseMotionListener) b).mouseMoved(e);\n+  }\n+    \n+  public void textValueChanged(TextEvent e) \n+  {\n+    ((TextListener) a).textValueChanged(e);\n+    ((TextListener) b).textValueChanged(e);\n+  }\n+  \n+  public void windowActivated(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowActivated(e);\n+    ((WindowListener) b).windowActivated(e);\n+  }\n+  \n+  public void windowClosed(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowClosed(e);\n+    ((WindowListener) b).windowClosed(e);\n+  }\n+  \n+  public void windowClosing(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowClosing(e);\n+    ((WindowListener) b).windowClosing(e);\n+  }\n+  \n+  public void windowDeactivated(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowDeactivated(e);\n+    ((WindowListener) b).windowDeactivated(e);\n+  }\n+  \n+  public void windowDeiconified(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowDeiconified(e);\n+    ((WindowListener) b).windowDeiconified(e);\n+  }\n+  \n+  public void windowIconified(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowIconified(e);\n+    ((WindowListener) b).windowIconified(e);\n+  }\n+  \n+  public void windowOpened(WindowEvent e) \n+  {\n+    ((WindowListener) a).windowOpened(e);\n+    ((WindowListener) b).windowOpened(e);\n+  }\n+  \n+  protected static void save(ObjectOutputStream s, String k, EventListener l) \n+  {\n+    // FIXME\n+  }\n+\n+  protected void saveInternal(ObjectOutputStream s, String k)\n+  {\n+    // FIXME\n+  }\n+\n+}"}, {"sha": "0acd7b559743c09cfb6e7195564ec1d4f3e3952e", "filename": "libjava/java/awt/CheckboxGroup.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxGroup.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* Status: Empty placeholder. */\n+\n+public class CheckboxGroup\n+{\n+  // Fields from the serialization spec. Decalare others \"transient\".\n+  boolean state;\n+  int checkboxMenuItemSerializedDataVersion;\n+}"}, {"sha": "0e58df1292c8faefac61029101d27a86b525d0ea", "filename": "libjava/java/awt/ColorModel.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FColorModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FColorModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColorModel.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* Status: Just a placeholder. */\n+\n+public class ColorModel implements Transparency\n+{\n+  public int getTransparency()\n+  {\n+    // FIXME\n+    return 0;  \n+  }\n+}"}, {"sha": "d578826775a6824a807249198a1febeb2f2bfb73", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 1280, "deletions": 49, "changes": 1329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,108 +1,1339 @@\n /* Copyright (C) 1999, 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt;\n import java.awt.event.*;\n-//import java.awt.peer.ComponentPeer;\n+import java.awt.image.*;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.lang.reflect.*;\n+import java.util.EventListener;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+import java.util.Vector;\n+import java.awt.peer.ComponentPeer;\n+import java.beans.PropertyChangeSupport;\n+import java.beans.PropertyChangeListener;\n+// import javax.accessibility.AccessibleContext;\n \n-/* A very incomplete placeholder. */\n+/* Status: Incomplete. The event dispatch mechanism is implemented. All \n+   other methods defined in the J2SE 1.3 API javadoc exist, but are mostly \n+   incomplete or only stubs; except for methods relating to the Drag and Drop, \n+   Input Method, and Accessibility frameworks: These methods are present but \n+   commented out. */\n \n-public abstract class Component implements MenuContainer\n+public abstract class Component implements ImageObserver, MenuContainer, \n+\t\t\t\t\t   java.io.Serializable\n {\n-  Container parent;\n-  java.awt.peer.ComponentPeer peer;\n-  int x, y, width, height;\n \n-  public Container getParent () { return parent; }\n+  /* Constants for use with getAlignmentX()/getAlignmentY(). */\n+  public static final float BOTTOM_ALIGNMENT = 1.0f,\n+\t\t\t    CENTER_ALIGNMENT = 0.5f,\n+\t\t\t    LEFT_ALIGNMENT   = 0.0f,\n+\t\t\t    RIGHT_ALIGNMENT  = 1.0f,\n+\t\t\t    TOP_ALIGNMENT    = 0.0f;\n \n+  /* Serialized fields from the serialization spec. */\n+  // FIXME: Default values?\n+  int x;\n+  int y;\n+  int width;\n+  int height;\n+  Color foreground;\n+  Color background;\n+  Font font;\n+  Font peerFont;\n+  Cursor cursor;\n+  Locale locale;\n+  boolean visible;\n+  boolean enabled;\n+  boolean valid;\n+  boolean hasFocus;\n+  //DropTarget dropTarget;\n+  Vector popups;\n+  String name;\n+  boolean nameExplicitlySet;\n+  Dimension minSize;\n+  Dimension prefSize;\n+  boolean newEventsOnly;  \n+  long eventMask;\n+  PropertyChangeSupport changeSupport;\n+  boolean isPacked;\n+  int componentSerializedDataVersion;\n+  /* AccessibleContext accessibleContext; */\n+\n+  /* Anything else is non-serializable, and should be declared \"transient\". */\n+  transient Container parent;\n+  transient java.awt.peer.ComponentPeer peer;\n+\n+  transient ComponentListener componentListener;\n+  transient FocusListener focusListener;\n+  transient KeyListener keyListener;\n+  transient MouseListener mouseListener;\n+  transient MouseMotionListener mouseMotionListener;\n+  transient InputMethodListener inputMethodListener;\n+  transient HierarchyListener hierarchyListener;\n+  transient HierarchyBoundsListener hierarchyBoundsListener;\n+\n+  protected Component()\n+  {\n+  }\n+\n+  public String getName()\n+  {\n+    if (name == null && !nameExplicitlySet)\n+      name = generateName();\n+    return name;\n+  }\n+  \n+  public void setName(String name)\n+  {\n+    nameExplicitlySet = true;\n+    this.name = name;\n+  }\n+  \n+  /** Subclasses should override this to return unique component names like \n+    * \"menuitem0\".\n+    */\n+  String generateName()\n+  {\n+    // Component is abstract.\n+    return null;\n+  }\n+  \n+  public Container getParent()\n+  {\n+    return parent;  \n+  }\n+  \n+  /** @deprecated */\n+  public java.awt.peer.ComponentPeer getPeer()\n+  {\n+    return peer;\n+  }\n+  \n+  // FIXME: java.awt.dnd classes not yet implemented\n+  /*\n+  public void setDropTarget(DropTarget dt)\n+  {\n+    this.dropTarget = dt;\n+  }\n+  \n+  public DropTarget getDropTarget()\n+  {\n+    return dropTarget;\n+  }\n+  */\n+  \n+  /** @since 1.3 */\n+  public GraphicsConfiguration getGraphicsConfiguration()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public final Object getTreeLock()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public Toolkit getToolkit()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public boolean isValid()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  /** @since 1.2 */\n+  public boolean isDisplayable()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public boolean isVisible()\n+  {\n+    return visible;\n+  }\n+  \n+  public boolean isShowing()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public boolean isEnabled()\n+  {\n+    return enabled;\n+  }\n+  \n+  public void setEnabled(boolean b)\n+  {\n+    this.enabled = b;\n+  }\n+  \n+  /** @deprecated */\n+  public void enable()\n+  {\n+    setEnabled(true);\n+  }\n+  \n+  /** @deprecated */\n+  public void enable(boolean b)\n+  {\n+    setEnabled(b);\n+  }\n+  \n   /** @deprecated */\n-  public java.awt.peer.ComponentPeer getPeer () { return peer; }\n+  public void disable()\n+  {\n+    setEnabled(false);\n+  }\n+  \n+  public boolean isDoubleBuffered()\n+  {\n+    return false;\n+  }\n+  \n+  /** @since 1.2 */\n+  public void enableInputMethods(boolean enable)\n+  {\n+    // FIXME\n+  }\n+  \n+  public void setVisible(boolean b)\n+  {\n+    visible = true;\n+    // FIXME\n+  }\n+  \n+  /** @deprecated */\n+  public void show()\n+  {\n+    setVisible(true);\n+  }\n+  \n+  /** @deprecated */\n+  public void show(boolean b)\n+  {\n+    setVisible(b);\n+  }\n+  \n+  /** @deprecated */\n+  public void hide()\n+  {\n+    setVisible(false);\n+  }\n+  \n+  public Color getForeground()\n+  {\n+    return this.foreground;\n+  }\n+  \n+  public void setForeground(Color c)\n+  {\n+    this.foreground = c;\n+  }\n+  \n+  public Color getBackground()\n+  {\n+    return this.background;\n+  }\n+  \n+  public void setBackground(Color c)\n+  {\n+    this.background = c;\n+  }\n+  \n+  public Font getFont()\n+  {\n+    return this.font;\n+  }\n+  \n+  public void setFont(Font f)\n+  {\n+    this.font = f;\n+  }\n \n-  public void setVisible (boolean b)\n-  { /* FIXME */ }\n+  public Locale getLocale() throws IllegalComponentStateException\n+  {\n+    if (locale != null)\n+      return locale;\n+    if (parent == null)\n+      throw new IllegalComponentStateException\n+        (\"Component has no parent: Can not determine Locale\");\n+    return parent.getLocale();\n+  }\n+  \n+  public void setLocale(Locale l)  \n+  {\n+    this.locale = l;\n+  }\n+  \n+  public ColorModel getColorModel()\n+  {\n+    // FIXME\n+    return null;\n+  }\n \n-  public void setSize (Dimension d)\n-  { setSize(d.width, d.height); }\n+  public Point getLocation()\n+  {\n+    return new Point(x, y);\n+  }\n \n-  public void setSize (int width, int height)\n+  public Point getLocationOnScreen()\n   {\n-    this.width = width;  this.height = height;\n-    if (peer != null)\n-      peer.setBounds(x, y, width, height);\n+    // FIXME\n+    return null;\n+  }\n+\n+  /** @deprecated Use getLocation() instead. */\n+  public Point location()\n+  {\n+    return getLocation();\n   }\n \n   public void setLocation (int x, int y)\n   {\n-    this.x = x;  this.y = y;\n+    this.x = x;\n+    this.y = y;\n     if (peer != null)\n       peer.setBounds(x, y, width, height);\n   }\n \n-  public void setLocation (Point pt)\n-  { setLocation(pt.x, pt.y); }\n-\n-  public void setBounds (int x, int y, int w, int h)\n+  /** @deprecated */\n+  public void move(int x, int y)\n+  {\n+    setLocation(x,y);\n+  }\n+  \n+  public void setLocation(Point p)\n+  {\n+    setLocation(p.x, p.y);\n+  }\n+  \n+  public Dimension getSize()\n+  {\n+    return new Dimension(width, height);\n+  }\n+  \n+  /** @deprecated */\n+  public Dimension size()\n+  {\n+    return getSize();\n+  }\n+  \n+  public void setSize(int width, int height)\n   {\n-    this.x = x;  this.y = y;\n-    this.width = w;  this.height = h;\n+    this.width = width;\n+    this.height = height;\n     if (peer != null)\n-      peer.setBounds(x, y, w, h);\n+      peer.setBounds(x, y, width, height);\n+  }\n+  \n+  /** @deprecated */\n+  public void resize(int width, int height)\n+  {\n+    setSize(width, height);\n+  }\n+  \n+  public void setSize(Dimension d)\n+  {\n+    setSize(d.width, d.height);\n   }\n \n-  public void setBounds (Rectangle rect)\n-  { setBounds(rect.x, rect.y, rect.width, rect.height); }\n-\n-  public Rectangle getBounds ()\n+  /** @deprecated */\n+  public void resize(Dimension d)\n   {\n-    return new Rectangle(x, y, width, height);\n+    setSize(d.width, d.height);\n   }\n \n-  public Point getLocation ()\n+  public Rectangle getBounds()\n   {\n-    return new Point(x, y);\n+    return new Rectangle (x, y, width, height);\n   }\n \n-  public int getX ()\n+  /** @deprecated */\n+  public Rectangle bounds()\n+  {\n+    return getBounds();\n+  }\n+  \n+  public void setBounds(int x, int y, int w, int h)\n+  {\n+    this.x = x;\n+    this.y = y;\n+    this.width = w;\n+    this.height = h;\n+    if (peer != null)\n+      peer.setBounds(x, y, w, h);\n+  }\n+  \n+  /** @deprecated */\n+  public void reshape(int x, int y, int width, int height)\n+  {\n+    setBounds(x, y, width, height);\n+  }\n+  \n+  public void setBounds(Rectangle r)\n+  { \n+    setBounds(r.x, r.y, r.width, r.height);\n+  }\n+  \n+  /** @since 1.2 */\n+  public int getX()\n   {\n     return x;\n   }\n-\n-  public int getY ()\n+  \n+  /** @since 1.2 */\n+  public int getY()\n   {\n     return y;\n   }\n-\n-  public Dimension getSize ()\n+  \n+  /** @since 1.2 */\n+  public int getWidth()\n   {\n-    return new Dimension(width, height);\n+    return width;\n   }\n-\n-  public Dimension getMinimumSize ()\n+  \n+  /** @since 1.2 */\n+  public int getHeight()\n+  {\n+    return height;\n+  }\n+  \n+  public Rectangle getBounds(Rectangle r)\n+  {\n+    r.x = this.x;\n+    r.y = this.y;\n+    r.width = this.width;\n+    r.height = this.height;\n+    return r;\n+  }\n+  \n+  public Dimension getSize(Dimension d)\n+  {\n+    d.width = this.width;\n+    d.height = this.height;\n+    return d;\n+  }\n+  \n+  public Point getLocation(Point p)\n+  {\n+    p.x = x;\n+    p.y = y;\n+    return p;\n+  }\n+  \n+  /** @since 1.2 */\n+  public boolean isOpaque()\n+  {\n+    return false;\n+  }\n+  \n+  /** @since 1.2 */  \n+  public boolean isLightweight()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public Dimension getPreferredSize()\n   {\n+    // FIXME?\n     if (peer == null)\n       return new Dimension(width, height);\n     else\n-      return peer.getMinimumSize();\n+      return peer.getPreferredSize();\n   }\n \n-  public Dimension getPreferredSize ()\n+  /** @deprecated */\n+  public Dimension preferredSize()\n   {\n+    return getPreferredSize();\n+  }\n+  \n+  public Dimension getMinimumSize()\n+  {\n+    // FIXME?\n     if (peer == null)\n       return new Dimension(width, height);\n     else\n-      return peer.getPreferredSize();\n+      return peer.getMinimumSize();\n   }\n \n-  public synchronized void addKeyListener (KeyListener listener)\n-  { /* FIXME */ }\n+  /** @deprecated */\n+  public Dimension minimumSize()\n+  {\n+    return getMinimumSize();\n+  }\n+  \n+  public Dimension getMaximumSize()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public float getAlignmentX()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+  \n+  public float getAlignmentY()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+  \n+  public void doLayout()\n+  {\n+    // FIXME\n+  }\n+  \n+  /** @deprecated */\n+  public void layout()\n+  {\n+    doLayout();\n+  }\n+  \n+  public void validate()\n+  {\n+    // FIXME\n+  }\n+  \n+  public void invalidate()\n+  {\n+    // FIXME\n+  }\n+  \n+  public Graphics getGraphics()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public FontMetrics getFontMetrics(Font font)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public void setCursor(Cursor cursor)\n+  {\n+    this.cursor = cursor;\n+  }\n+  \n+  public Cursor getCursor()\n+  {\n+    return this.cursor;\n+  }\n+  \n+  public void paint(Graphics g)\n+  {  \n+  }\n+  \n+  public void update(Graphics g)\n+  {\n+    // FIXME\n+  }\n+  \n+  public void paintAll(Graphics g)\n+  {    \n+  }\n+  \n+  public void repaint()\n+  {\n+    // FIXME\n+  }\n+  \n+  public void repaint(long tm)\n+  {\n+    // FIXME\n+  }\n+  \n+  public void repaint(int x, int y, int width, int height)\n+  {\n+    // FIXME  \n+  }\n+  \n+  public void repaint(long tm, int x, int y, int width, int height)\n+  {    \n+    // FIXME  \n+  }\n+  \n+  public void print(Graphics g)\n+  {\n+    // FIXME    \n+  }\n+  \n+  public void printAll(Graphics g)\n+  {\n+    // FIXME      \n+  }\n+  \n+  public boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h)\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public Image createImage(ImageProducer producer)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public Image createImage(int width, int height)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public boolean prepareImage(Image image, ImageObserver observer)\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public boolean prepareImage(Image image, int width, int height, ImageObserver observer)\n+  {\n+    // FIXME\n+    return false;\n+  }\n \n-  public boolean isFocusTraversable ()\n-  { /* FIXME */ return false; }\n+  public int checkImage(Image image, ImageObserver observer)\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public int checkImage(Image image, int width, int height, ImageObserver observer)\n+  {\n+    // FIXME\n+    return 0; \n+  }\n+  \n+  public boolean contains(int x, int y)\n+  {\n+    return (x >= 0) && (y >= 0) && (x < width) && (y < height);\n+  }\n+  \n+  /** @deprecated */\n+  public boolean inside(int x, int y)\n+  {\n+    return contains(x,y);\n+  }\n+  \n+  public boolean contains(Point p)\n+  {\n+    return contains(p.x, p.y);\n+  }\n+  \n+  public Component getComponentAt(int x, int y)\n+  {\n+    if (contains(x,y))\n+      return this;\n+    return null;\n+  }\n+  \n+  /** @deprecated */\n+  public Component locate(int x, int y)\n+  {\n+    return getComponentAt(x, y);\n+  }\n+  \n+  public Component getComponentAt(Point p)\n+  {\n+    return getComponentAt(p.x, p.y);\n+  }\n+    \n+  /** @deprecated */\n+  public void deliverEvent(Event e)\n+  {\n+    \n+  }\n+  \n+  /** Forward AWT events to processEvent() if:\n+    *     - Events have been enabled for this type of event via enableEvents(),\n+    *   OR:\n+    *\t - There is at least one registered listener for this type of event\n+    * \n+    * @specnote This method is final, but we need to be able to \n+    *           override it in order to handle other event types in our \n+    *\t        subclasses. The solution is to define a second, non-final\n+    *           method - dispatchEventImpl() - to actually do the work. \n+    *           Investigations with Thread.dumpStack() on the dispatch thread \n+    *           in JDK 1.3 show Sun's implementation is doing the same \n+    *           thing.\n+    */\n+  public final void dispatchEvent(AWTEvent e)\n+  {\n+    dispatchEventImpl(e);\n+  }\n+  /* This code needs to be split up and put in to dispatchEventImpl() in the\n+     appropriate Component subclasses:\n+   \n+    else if ((e.id <= WindowEvent.WINDOW_LAST\n+             && e.id >= WindowEvent.WINDOW_FIRST)\n+\t&& (windowListener != null\n+\t    || eventMask & AWTEvent.WINDOW_EVENT_MASK != 0))\n+      processEvent(e);\n+    else if ((e.id <= AdjustmentEvent.ADJUSTMENT_LAST\n+             && e.id >= AdjustmentEvent.ADJUSTMENT_FIRST)\n+\t&& (adjustmentListener != null\n+\t    || eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK != 0))\n+      processEvent(e);\n+    else if ((e.id <= ItemEvent.ITEM_LAST\n+             && e.id >= ItemEvent.ITEM_FIRST)\n+\t&& (itemListener != null\n+\t    || eventMask & AWTEvent.ITEM_EVENT_MASK != 0))\n+      processEvent(e);\n+    else if ((e.id <= PaintEvent.PAINT_LAST\n+             && e.id >= PaintEvent.PAINT_FIRST)\n+\t&& (paintListener != null\n+\t    || eventMask & AWTEvent.PAINT_EVENT_MASK != 0))\n+      processEvent(e);\n+    else if ((e.id <= TextEvent.TEXT_LAST\n+             && e.id >= TextEvent.TEXT_FIRST)\n+\t&& (textListener != null\n+\t    || eventMask & AWTEvent.TEXT_EVENT_MASK != 0))\n+      processEvent(e);\n+    else if ((e.id <= InvocationEvent.INVOCATION_LAST\n+             && e.id >= InvocationEvent.INVOCATION_FIRST)\n+\t&& (invocationListener != null\n+\t    || eventMask & AWTEvent.INVOCATION_EVENT_MASK != 0))\n+      processEvent(e);\n+  }\n+  */      \n+  \n+  void dispatchEventImpl(AWTEvent e)\n+  {\n+    // Make use of event id's in order to avoid multiple instanceof tests.\n+    if (e.id <= ComponentEvent.COMPONENT_LAST \n+        && e.id >= ComponentEvent.COMPONENT_FIRST\n+        && (componentListener != null \n+\t    || (eventMask & AWTEvent.COMPONENT_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else if (e.id <= KeyEvent.KEY_LAST\n+             && e.id >= KeyEvent.KEY_FIRST\n+\t     && (keyListener != null\n+\t\t || (eventMask & AWTEvent.KEY_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else if (e.id <= MouseEvent.MOUSE_LAST\n+             && e.id >= MouseEvent.MOUSE_FIRST\n+\t     && (mouseListener != null\n+\t\t || mouseMotionListener != null\n+\t\t || (eventMask & AWTEvent.MOUSE_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else if (e.id <= FocusEvent.FOCUS_LAST\n+             && e.id >= FocusEvent.FOCUS_FIRST\n+\t     && (focusListener != null\n+\t\t || (eventMask & AWTEvent.FOCUS_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else if (e.id <= InputMethodEvent.INPUT_METHOD_LAST\n+             && e.id >= InputMethodEvent.INPUT_METHOD_FIRST\n+\t     && (inputMethodListener != null\n+\t\t || (eventMask & AWTEvent.INPUT_METHOD_EVENT_MASK) != 0))\n+      processEvent(e);\n+    else if (e.id <= HierarchyEvent.HIERARCHY_LAST\n+             && e.id >= HierarchyEvent.HIERARCHY_FIRST\n+\t     && (hierarchyListener != null\n+\t\t || hierarchyBoundsListener != null\n+\t\t || (eventMask & AWTEvent.HIERARCHY_EVENT_MASK) != 0))\n+      processEvent(e);\n+  }\n+  \n+  /** @deprecated */\n+  public boolean postEvent(Event e)\n+  {\n+    return false;\n+  }\n+  \n+  public synchronized void addComponentListener(ComponentListener l)\n+  {\n+    componentListener = AWTEventMulticaster.add(componentListener, l);\n+    if (componentListener != null)\n+      enableEvents(AWTEvent.COMPONENT_EVENT_MASK);\n+  }\n+  \n+  public synchronized void removeComponentListener(ComponentListener l)\n+  {\n+    componentListener = AWTEventMulticaster.remove(componentListener, l);\n+  }\n+  \n+  public synchronized void addFocusListener(FocusListener l)\n+  {\n+    focusListener = AWTEventMulticaster.add(focusListener, l);\n+    if (focusListener != null)\n+      enableEvents(AWTEvent.FOCUS_EVENT_MASK);    \n+  }\n+  \n+  public synchronized void removeFocusListener(FocusListener l)\n+  {\n+    focusListener = AWTEventMulticaster.remove(focusListener, l);\n+  }\n+  \n+  /** @since 1.3 */\n+  public synchronized void addHierarchyListener(HierarchyListener l)\n+  {\n+    hierarchyListener = AWTEventMulticaster.add(hierarchyListener, l);\n+    if (hierarchyListener != null)\n+      enableEvents(AWTEvent.HIERARCHY_EVENT_MASK);    \n+  }\n+  \n+  /** @since 1.3 */\n+  public synchronized void removeHierarchyListener(HierarchyListener l)\n+  {\n+    hierarchyListener = AWTEventMulticaster.remove(hierarchyListener, l);\n+  }\n+\n+  /** @since 1.3 */\n+  public synchronized void addHierarchyBoundsListener(HierarchyBoundsListener l)\n+  {\n+    hierarchyBoundsListener = \n+      AWTEventMulticaster.add(hierarchyBoundsListener, l);\n+    if (hierarchyBoundsListener != null)\n+      enableEvents(AWTEvent.HIERARCHY_EVENT_MASK);    \n+  }\n+\n+  /** @since 1.3 */\n+  public synchronized void \n+    removeHierarchyBoundsListener(HierarchyBoundsListener l)\n+  {\n+    hierarchyBoundsListener = \n+      AWTEventMulticaster.remove(hierarchyBoundsListener, l);\n+  }\n+\n+  public synchronized void addKeyListener(KeyListener l)\n+  {\n+    keyListener = AWTEventMulticaster.add(keyListener, l);\n+    if (keyListener != null)\n+      enableEvents(AWTEvent.KEY_EVENT_MASK);    \n+  }\n+\n+  public synchronized void removeKeyListener(KeyListener l)\n+  {\n+    keyListener = AWTEventMulticaster.remove(keyListener, l);\n+  }\n \n-  public void addNotify () { }\n+  public synchronized void addMouseListener(MouseListener l)\n+  {\n+    mouseListener = AWTEventMulticaster.add(mouseListener, l);\n+    if (mouseListener != null)\n+      enableEvents(AWTEvent.MOUSE_EVENT_MASK);    \n+  }\n+\n+  public synchronized void removeMouseListener(MouseListener l)\n+  {\n+    mouseListener = AWTEventMulticaster.remove(mouseListener, l);    \n+  }\n+\n+  public synchronized void addMouseMotionListener(MouseMotionListener l)\n+  {\n+    mouseMotionListener = AWTEventMulticaster.add(mouseMotionListener, l);\n+    if (mouseMotionListener != null)\n+      enableEvents(AWTEvent.MOUSE_EVENT_MASK);    \n+  }\n+\n+  public synchronized void removeMouseMotionListener(MouseMotionListener l)\n+  {\n+    mouseMotionListener = AWTEventMulticaster.remove(mouseMotionListener, l);\n+  }\n+\n+  /** @since 1.2 */\n+  public synchronized void addInputMethodListener(InputMethodListener l)\n+  {\n+    inputMethodListener = AWTEventMulticaster.add(inputMethodListener, l);\n+    if (inputMethodListener != null)\n+      enableEvents(AWTEvent.INPUT_METHOD_EVENT_MASK);    \n+  }\n+\n+  /** @since 1.2 */\n+  public synchronized void removeInputMethodListener(InputMethodListener l)\n+  {\n+    inputMethodListener = AWTEventMulticaster.remove(inputMethodListener, l);\n+  }\n+\n+  /** Returns all registered EventListers of the given listenerType. \n+    * listenerType must be a subclass of EventListener, or a \n+    * ClassClassException is thrown.\n+    * @since 1.3 \n+    */\n+  public EventListener[] getListeners(Class listenerType)\n+  {\n+    if (listenerType == ComponentListener.class)\n+      return getListenersImpl(listenerType, componentListener);\n+    else if (listenerType == FocusListener.class)\n+      return getListenersImpl(listenerType, focusListener);\n+    else if (listenerType == KeyListener.class)\n+      return getListenersImpl(listenerType, keyListener);\n+    else if (listenerType == MouseListener.class)\n+      return getListenersImpl(listenerType, mouseListener);\n+    else if (listenerType == MouseMotionListener.class)\n+      return getListenersImpl(listenerType, mouseMotionListener);\n+    else if (listenerType == InputMethodListener.class)\n+      return getListenersImpl(listenerType, inputMethodListener);\n+    else if (listenerType == HierarchyListener.class)\n+      return getListenersImpl(listenerType, hierarchyListener);\n+    else if (listenerType == HierarchyBoundsListener.class)\n+      return getListenersImpl(listenerType, hierarchyBoundsListener);\n+    else\n+      return getListenersImpl(listenerType, null);\n+  }\n+  \n+  static EventListener[] getListenersImpl(Class listenerType, EventListener el)\n+  {\n+    if (! EventListener.class.isAssignableFrom(listenerType))\n+      throw new ClassCastException();\n+    \n+    Vector v = new Vector();\n+    if (el != null)\n+      getListenerList (el, v);    \n+    EventListener[] el_a = (EventListener[]) Array.newInstance(listenerType, \n+\t\t\t\t\t\t\t       v.size());\n+    v.copyInto(el_a);\n+    return el_a;\n+  }\n+  \n+  static void getListenerList(EventListener el, Vector v)\n+  {\n+    if (el instanceof AWTEventMulticaster)\n+      {\n+        AWTEventMulticaster mc = (AWTEventMulticaster) el;\n+        getListenerList(mc.a, v);\n+\tgetListenerList(mc.b, v);\n+      }\n+    else\n+      v.addElement(el);      \n+  }\n+\n+  // The input method framework is currently unimplemented.  \n+  // /** @since 1.2 */\n+  //\n+  //public InputMethodRequests getInputMethodRequests()\n+  //\n+  // /** @since 1.2 */\n+  //\n+  // public InputContext getInputContext()\n+  \n+  protected final void enableEvents(long eventsToEnable)\n+  {\n+    eventMask |= eventsToEnable;\n+    // TODO: Unlike Sun's implementation, I think we should try and \n+    // enable/disable events at the peer (gtk/X) level. This will avoid \n+    // clogging the event pipeline with useless mousemove events that \n+    // we arn't interested in, etc. This will involve extending the peer \n+    // interface, but thats okay because the peer interfaces have been\n+    // deprecated for a long time, and no longer feature in the \n+    // API specification at all.\n+  }\n+  \n+  protected final void disableEvents(long eventsToDisable)\n+  {\n+    eventMask &= ~eventsToDisable;\n+    // forward new event mask to peer?\n+  }\n+  \n+  /** coalesceEvents is called by the EventQueue if two events with the same \n+    * event id are queued. Returns a new combined event, or null if no \n+    * combining is done. \n+    */\n+  protected AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent)\n+  {\n+    if (existingEvent instanceof MouseEvent\n+        && (existingEvent.id == MouseEvent.MOUSE_DRAGGED\n+\t    || existingEvent.id == MouseEvent.MOUSE_MOVED))\n+      {\n+        // Just drop the old (intermediate) event and return the new one.\n+\treturn newEvent;\n+      }\n+    /*\n+    else if (existingEvent instanceof PaintEvent)\n+      {\n+        // The JDK 1.3 documentation says that in this case a complex \n+\t// RepaintArea is generated. We don't do that yet, and creating a \n+\t// union area as suggested by older documentation sounds ugly.\n+      }\n+    */\n+      \n+    // FIXME\n+    return null;\n+  }\n+  \n+  /** Forward event to the appropriate processXXXEvent method based on the\n+    * event type.\n+    */\n+  protected void processEvent(AWTEvent e)\n+  {\n+    if (e instanceof ComponentEvent)\n+      processComponentEvent((ComponentEvent) e);\n+    else if (e instanceof FocusEvent)\n+      processFocusEvent((FocusEvent) e);\n+    else if (e instanceof KeyEvent)\n+      processKeyEvent((KeyEvent) e);\n+    else if (e instanceof MouseEvent)\n+      {\n+        if (e.id == MouseEvent.MOUSE_MOVED \n+\t    || e.id == MouseEvent.MOUSE_DRAGGED)\n+\t  processMouseMotionEvent((MouseEvent) e);\n+\telse\n+\t  processMouseEvent((MouseEvent) e);\n+      }\n+    else if (e instanceof InputMethodEvent)\n+      processInputMethodEvent((InputMethodEvent) e);\n+    else if (e instanceof HierarchyEvent)\n+      {\n+        if (e.id == HierarchyEvent.HIERARCHY_CHANGED)\n+\t  processHierarchyEvent((HierarchyEvent) e);\n+\telse\n+\t  processHierarchyBoundsEvent((HierarchyEvent) e);\n+      }\n+  }\n+  \n+  protected void processComponentEvent(ComponentEvent e)\n+  {\n+    if (componentListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+        case ComponentEvent.COMPONENT_HIDDEN:\n+\t  componentListener.componentHidden(e);\n+\tbreak;\n+\t\t\n+        case ComponentEvent.COMPONENT_MOVED:\n+\t  componentListener.componentMoved(e);\n+\tbreak;\n+\t\n+\tcase ComponentEvent.COMPONENT_RESIZED:\n+\t  componentListener.componentResized(e);\n+\tbreak;\n+\t\n+\tcase ComponentEvent.COMPONENT_SHOWN:\n+\t  componentListener.componentShown(e);\n+\tbreak;\n+      }\n+  }\n+  \n+  protected void processFocusEvent(FocusEvent e)\n+  {\n+    if (focusListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+        case FocusEvent.FOCUS_GAINED:\n+\t  focusListener.focusGained(e);\n+\tbreak;\n+        case FocusEvent.FOCUS_LOST:\n+\t  focusListener.focusLost(e);\n+\tbreak;\n+      }    \n+  }\n+  \n+  protected void processKeyEvent(KeyEvent e)\n+  {\n+    if (keyListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+\tcase KeyEvent.KEY_PRESSED:\n+\t  keyListener.keyPressed(e);\n+\tbreak;\n+\tcase KeyEvent.KEY_RELEASED:\n+\t  keyListener.keyReleased(e);\n+\tbreak;\n+\tcase KeyEvent.KEY_TYPED:\n+\t  keyListener.keyTyped(e);\n+\tbreak;\n+      }\n+  }\n+  \n+  protected void processMouseEvent(MouseEvent e)\n+  {\n+    if (mouseListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+\tcase MouseEvent.MOUSE_CLICKED:\n+\t  mouseListener.mousePressed(e);\n+\tbreak;\n+        case MouseEvent.MOUSE_ENTERED:\n+\t  mouseListener.mouseEntered(e);\n+\tbreak;\n+\tcase MouseEvent.MOUSE_EXITED:\n+\t  mouseListener.mouseExited(e);\n+\tbreak;\n+\tcase MouseEvent.MOUSE_PRESSED:\n+\t  mouseListener.mousePressed(e);\n+\tbreak;\n+\tcase MouseEvent.MOUSE_RELEASED:\n+\t  mouseListener.mouseReleased(e);\n+\tbreak;\n+      }\n+  }\n+\n+  protected void processMouseMotionEvent(MouseEvent e)\n+  {\n+    if (mouseMotionListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+\tcase MouseEvent.MOUSE_DRAGGED:\n+\t  mouseMotionListener.mouseDragged(e);\n+\tbreak;\n+        case MouseEvent.MOUSE_MOVED:\n+\t  mouseMotionListener.mouseMoved(e);\n+\tbreak;\n+      }\t\n+  }\n+  \n+  /** @since 1.2 */\n+  protected void processInputMethodEvent(InputMethodEvent e)\n+  {\n+    if (inputMethodListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+\tcase InputMethodEvent.CARET_POSITION_CHANGED:\n+          inputMethodListener.caretPositionChanged(e);\n+\tbreak;\n+\tcase InputMethodEvent.INPUT_METHOD_TEXT_CHANGED:\n+          inputMethodListener.inputMethodTextChanged(e);\n+\tbreak;\n+      }\t\n+  }\n+  \n+  /** @since 1.3 */\n+  protected void processHierarchyEvent(HierarchyEvent e)\n+  {\n+    if (hierarchyListener == null)\n+      return;\n+    if (e.id == HierarchyEvent.HIERARCHY_CHANGED)\n+      hierarchyListener.hierarchyChanged(e);\n+  }\n+  \n+  /** @since 1.3 */\n+  protected void processHierarchyBoundsEvent(HierarchyEvent e)\n+  {\n+    if (hierarchyBoundsListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+        case HierarchyEvent.ANCESTOR_MOVED:\n+\t  hierarchyBoundsListener.ancestorMoved(e);\n+\tbreak;\n+\tcase HierarchyEvent.ANCESTOR_RESIZED:\n+\t  hierarchyBoundsListener.ancestorResized(e);\n+\tbreak;\n+      }\n+  }\n+  \n+  /** @deprecated */\n+  public boolean handleEvent(Event evt)\n+  {\n+    return false;\n+  }\n+  \n+  /** @deprecated */\n+  public boolean mouseDown(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+  \n+  /** @deprecated */\n+  public boolean mouseDrag(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean mouseUp(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean mouseMove(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean mouseEnter(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean mouseExit(Event evt, int x, int y)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean keyDown(Event evt, int key)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean keyUp(Event evt, int key)\n+  {\n+    return false;\n+  }\n+\n+  /** @deprecated */\n+  public boolean action(Event evt, Object what)\n+  {\n+    return false;\n+  }\n+\n+  public void addNotify()\n+  {\n+    // FIXME\n+  }\n+  \n+  public void removeNotify()\n+  {\n+    // FIXME\n+  }\n+  \n+  /** @deprecated */\n+  public boolean gotFocus(Event evt, Object what)\n+  {\n+    return false;\n+  }\n+  \n+  /** @deprecated */\n+  public boolean lostFocus(Event evt, Object what)\n+  {\n+    return false;\n+  }\n+\n+  public boolean isFocusTraversable()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public void requestFocus()\n+  {\n+    // FIXME\n+  }\n+  \n+  public void transferFocus()\n+  {\n+    // FIXME\n+  }\n+  \n+  /** @deprecated */\n+  public void nextFocus()\n+  {\n+    transferFocus();\n+  }\n+  \n+  /** @since 1.2 */\n+  public boolean hasFocus()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+  \n+  public synchronized void add(PopupMenu popup)\n+  {\n+    if (popups == null)\n+      popups = new Vector();\n+    popups.addElement(popup);    \n+  }\n+  \n+  public synchronized void remove(MenuComponent popup)\n+  {\n+    popups.removeElement(popup);\n+  }\n+  \n+  protected String paramString()\n+  {\n+    // FIXME\n+    return \"FIXME\";\n+  }\n+  \n+  public String toString()\n+  {\n+    return paramString();\n+  }\n+  \n+  public void list()\n+  {\n+  }\n+  \n+  public void list(PrintStream out)\n+  {\n+  }\n+  \n+  public void list(PrintStream out, int indent)\n+  {\n+  }\n+  \n+  public void list(PrintWriter out)\n+  {\n+  }\n+  \n+  public void list(PrintWriter out, int indent)\n+  {\n+  }\n+  \n+  public void addPropertyChangeListener(PropertyChangeListener listener)\n+  {\n+\n+  }\n+  \n+  public void removePropertyChangeListener(PropertyChangeListener listener)\n+  {\n+  }\n+  \n+  public void addPropertyChangeListener(String propertyName,\n+                                \tPropertyChangeListener listener)\n+  {\n+  }\n+  \n+  public void removePropertyChangeListener(String propertyName,\n+                                           PropertyChangeListener listener)\n+  {\n+  }\n+  \n+  protected void firePropertyChange(String propertyName, Object oldValue, \n+                                    Object newValue)\n+  {\n+  }\n+  \n+  public void setComponentOrientation(ComponentOrientation o)\n+  {\n+    // FIXME\n+  }\n+  \n+  public ComponentOrientation getComponentOrientation()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  /*\n+  public AccessibleContext getAccessibleContext()\n+  {\n+    return accessibleContext;\n+  }\n+  */\n }"}, {"sha": "739db00fbe6176ec992892a3e403de54145398a0", "filename": "libjava/java/awt/ComponentOrientation.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponentOrientation.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,84 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Status: Incomplete. Needs a Locale lookup table. */\n+\n+package java.awt;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+public class ComponentOrientation implements java.io.Serializable\n+{\n+  public static final ComponentOrientation LEFT_TO_RIGHT\n+    = new ComponentOrientation(HORIZONTAL_ID & LEFT_TO_RIGHT_ID);\n+  public static final ComponentOrientation RIGHT_TO_LEFT\n+    = new ComponentOrientation(HORIZONTAL_ID);\n+  public static final ComponentOrientation UNKNOWN\n+    = new ComponentOrientation(0);\n+\n+  // FIXME: This field is from the serialization spec, but what are the \n+  // correct values?\n+  int orientation;\n+  \n+  // Here is a wild guess.\n+  private static int HORIZONTAL_ID    = 1 << 0,\n+                     LEFT_TO_RIGHT_ID = 1 << 1;\n+\n+  ComponentOrientation(int orientation)\n+  {\n+    this.orientation = orientation;\n+  }\n+\n+  public boolean isHorizontal()\n+  {\n+    return ((orientation & HORIZONTAL_ID) != 0);\n+  }\n+\n+  public boolean isLeftToRight()\n+  {\n+    return ((orientation & LEFT_TO_RIGHT_ID) != 0);\n+  }\n+\n+  public static ComponentOrientation getOrientation(Locale locale)\n+  {\n+    // FIXME: Use a table to look this up.\n+    return LEFT_TO_RIGHT;\n+  }\n+\n+  public static ComponentOrientation getOrientation(ResourceBundle bdl)\n+  {\n+    ComponentOrientation r;\n+    \n+    try\n+    {\n+      Object obj = bdl.getObject(\"Orientation\");\n+      r = (ComponentOrientation) obj;\n+      if (r != null)\n+\treturn r;  \n+    }\n+    catch (Exception x)\n+    {\n+      // Fall through\n+    }\n+\n+    try\n+    {\n+      Locale l = bdl.getLocale();\n+      r = getOrientation(l);\n+      if (r != null)\n+\treturn r;\n+    }\n+    catch (Exception x)\n+    {\n+      // Fall through  \n+    }\n+\n+    return (getOrientation (Locale.getDefault ()));\n+  }\n+}"}, {"sha": "84840246b755af578153d5eb2e110fe5ca84425f", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 314, "deletions": 20, "changes": 334, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -8,26 +8,320 @@\n \n package java.awt;\n \n+import java.awt.event.*;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.EventListener;\n+\n /* A very incomplete placeholder. */\n \n public abstract class Container extends Component\n {\n-  int componentCount;\n-  Component[] components;\n+  /* Serialized fields from the serialization spec. */\n+  int ncomponents;\n+  Component[] component;\n+  LayoutManager layoutMgr;\n+  /* LightweightDispatcher dispatcher; */ // wtf?\n+  Dimension maxSize;\n+  int containerSerializedDataVersion;\n \n-  public Component[] getComponents()\n+  /* Anything else is non-serializable, and should be declared \"transient\". */\n+  transient ContainerListener containerListener;  \n+  \n+  public Container()\n   {\n-    Component[] result = new Component[componentCount];\n-    if (componentCount > 0)\n-      System.arraycopy(components, 0, result, 0, componentCount);\n-    return result;\n+  }\n+\n+  public int getComponentCount()\n+  {\n+    return ncomponents;\n+  }\n+\n+  /** @deprecated Use getComponentCount() instead. */\n+  public int countComponents()\n+  {\n+    return ncomponents;\n   }\n \n   public Component getComponent (int n)\n   {\n-    if (n < 0 || n >= componentCount)\n+    if (n < 0 || n >= ncomponents)\n       throw new ArrayIndexOutOfBoundsException(\"no such component\");\n-    return components[n];\n+    return component[n];\n+  }\n+\n+  public Component[] getComponents()\n+  {\n+    Component[] result = new Component[ncomponents];\n+    if (ncomponents > 0)\n+      System.arraycopy(component, 0, result, 0, ncomponents);\n+    return result;\n+  }\n+\n+  public Insets getInsets()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  /** @deprecated Use getInsets() instead. */\n+  public Insets insets()\n+  {\n+    return getInsets();\n+  }\n+  \n+  public Component add(Component comp)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  public Component add(String name, Component comp)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public Component add(Component comp, int index)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public void add(Component comp, Object constraints)\n+  {\n+    // FIXME\n+  }\n+\n+  public void add(Component comp, Object constraints, int index)\n+  {\n+    // FIXME\n+  }\n+\n+  protected void addImpl(Component comp, Object constraints, int index)\n+  {\n+    // FIXME\n+  }\n+\n+  public void remove(int index)\n+  {\n+    // FIXME\n+  }\n+\n+  public void remove(Component comp)\n+  {\n+    // FIXME\n+  }\n+\n+  public void removeAll()\n+  {\n+    // FIXME\n+  }\n+\n+  public LayoutManager getLayout()\n+  {\n+    return layoutMgr;\n+  }\n+  \n+  public void setLayout(LayoutManager mgr)\n+  {\n+    layoutMgr = mgr;\n+    // FIXME\n+  }\n+  \n+  public void doLayout()\n+  {\n+    // FIXME\n+  }\n+\n+  /** @deprecated Use doLayout() instead. */\n+  public void layout()\n+  {\n+    doLayout();\n+  }\n+\n+  public void invalidate()\n+  {\n+    // FIXME\n+  }\n+\n+  public void validate()\n+  {\n+    // FIXME\n+  }\n+\n+  protected void validateTree()\n+  {\n+    // FIXME\n+  }\n+\n+  public void setFont(Font f)\n+  {\n+    // FIXME\n+  }\n+\n+  public Dimension getPreferredSize()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  /** @deprecated Use getPreferredSize() instead */\n+  public Dimension preferredSize()\n+  {\n+    return getPreferredSize();\n+  }\n+  \n+  public Dimension getMinimumSize()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  /** @deprecated Use getMinimumSize() instead */\n+  public Dimension minimumSize()\n+  {\n+    return getMinimumSize();\n+  }\n+  \n+  public Dimension getMaximumSize()\n+  {\n+    // FIXME\n+    return null;    \n+  }\n+  \n+  public float getAlignmentX()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public float getAlignmentY()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public void paint(Graphics g)\n+  {\n+    // FIXME\n+  }\n+\n+  public void update(Graphics g)\n+  {\n+    // FIXME\n+  }\n+\n+  public void print(Graphics g)\n+  {\n+    // FIXME\n+  }\n+\n+  public void paintComponents(Graphics g)\n+  {\n+    // FIXME\n+  }\n+\n+  public void printComponents(Graphics g)\n+  {\n+    // FIXME\n+  }\n+  \n+  void dispatchEventImpl(AWTEvent e)\n+  {\n+    if ((e.id <= ContainerEvent.CONTAINER_LAST\n+             && e.id >= ContainerEvent.CONTAINER_FIRST)\n+\t&& (containerListener != null\n+\t    || (eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0))\n+      processEvent(e); \n+    else super.dispatchEventImpl(e);\n+  }  \n+\n+  public void addContainerListener(ContainerListener l)\n+  {\n+    containerListener = (ContainerListener) \n+                          AWTEventMulticaster.add(containerListener, l);\n+  }\n+\n+  public void removeContainerListener(ContainerListener l)\n+  {\n+    containerListener = (ContainerListener)\n+\t\t\t  AWTEventMulticaster.remove(containerListener, l);\n+  }\n+\n+  /** @since 1.3 */\n+  public EventListener[] getListeners(Class listenerType)\n+  {\n+    if (listenerType == ContainerListener.class)\n+      return getListenersImpl(listenerType, containerListener);\n+    else return super.getListeners(listenerType);\n+  }\n+  \n+  protected void processEvent(AWTEvent e)\n+  {\n+    if (e instanceof ContainerEvent)\n+      processContainerEvent((ContainerEvent) e);\n+    else super.processEvent(e);\n+  }\n+  \n+  protected void processContainerEvent(ContainerEvent e)\n+  {\n+    if (componentListener == null)\n+      return;\n+    switch (e.id)\n+      {\n+\tcase ContainerEvent.COMPONENT_ADDED:\n+\t  containerListener.componentAdded(e);\n+\tbreak;\n+\n+\tcase ContainerEvent.COMPONENT_REMOVED:\n+\t  containerListener.componentRemoved(e);\n+\tbreak;    \n+      }\n+  }\n+\n+  /** @deprecated */\n+  public void deliverEvent(Event e)\n+  {\n+  }\n+  \n+  public Component getComponentAt(int x, int y)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  /** @deprecated Use getComponentAt() instead */\n+  public Component locate(int x, int y)\n+  {\n+    return getComponentAt(x, y);\n+  }\n+\n+  public Component getComponentAt(Point p)\n+  {\n+    return getComponentAt(p.x, p.y);\n+  }\n+\n+  public Component findComponentAt(int x, int y)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public Component findComponentAt(Point p)\n+  {\n+    return findComponentAt(p.x, p.y);\n+  }\n+\n+  public void addNotify ()\n+  {\n+    for (int i = ncomponents;  --i >= 0; )\n+      component[i].addNotify();\n+  }  \n+\n+  public void removeNotify()\n+  {\n+    // FIXME\n   }\n \n   public boolean isAncestorOf (Component comp)\n@@ -42,18 +336,18 @@ public boolean isAncestorOf (Component comp)\n       }\n   }\n \n-  public Component add (String name, Component comp)\n+  protected String paramString()\n   {\n-    /* FIXME */\n-    return comp;\n+    return \"FIXME\";\n   }\n-\n-  public void addNotify ()\n+  \n+  public void list(PrintStream out, int indent)\n   {\n-    for (int i = componentCount;  --i >= 0; )\n-      components[i].addNotify();\n+    // FIXME  \n+  }\n+  \n+  public void list(PrintWriter out, int indent)\n+  {\n+    // FIXME  \n   }\n-\n-  public void setLayout (LayoutManager layout)\n-  { /* FIXME */ }\n }"}, {"sha": "96d36e70934f9d6de19ab85a59ee14a9569477e5", "filename": "libjava/java/awt/Cursor.java", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FCursor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FCursor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCursor.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,87 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A somewhat incomplete placeholder. */\n+\n+public class Cursor\n+{\n+  public static final int DEFAULT_CURSOR   = 0,\n+\t\t\t  CROSSHAIR_CURSOR = 1,\n+\t\t\t  TEXT_CURSOR      = 2,\n+\t\t\t  WAIT_CURSOR      = 3,\n+\t\t\t  SW_RESIZE_CURSOR = 4,\n+\t\t\t  SE_RESIZE_CURSOR = 5,\n+\t\t\t  NW_RESIZE_CURSOR = 6,\n+\t\t\t  NE_RESIZE_CURSOR = 7,\n+\t\t\t  N_RESIZE_CURSOR  = 8,\n+\t\t\t  S_RESIZE_CURSOR  = 9,\n+\t\t\t  W_RESIZE_CURSOR  = 10,\n+\t\t\t  E_RESIZE_CURSOR  = 11,\n+\t\t\t  HAND_CURSOR      = 12,\n+\t\t\t  MOVE_CURSOR      = 13,\n+\t\t\t  CUSTOM_CURSOR    = 0xFFFFFFFF;\n+\n+  private static final int PREDEFINED_COUNT = 14;\n+\n+  protected static Cursor[] predefined = new Cursor[PREDEFINED_COUNT];\n+  protected String name;\n+  int type;\n+\n+  public Cursor(int type)\n+  {\n+    this.type = type;\n+    // FIXME: lookup and set name?\n+  }\n+\n+  /** This constructor is used internally only. \n+    * Application code should call Toolkit.createCustomCursor().\n+    */\n+  protected Cursor(String name)\n+  {\n+    this.name = name;\n+    // FIXME\n+  }\n+\n+  public static Cursor getPredefinedCursor(int type)\n+  {\n+    if (type >= PREDEFINED_COUNT)\n+      return null;\n+    if (predefined[type] == null)\n+      predefined[type] = new Cursor(type);\n+    return predefined[type];\n+  }\n+\n+  public static Cursor getSystemCustomCursor(String name)\n+                                      throws AWTException\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public static Cursor getDefaultCursor()\n+  {\n+    return getPredefinedCursor(0);\n+  }\n+\n+  public int getType()\n+  {\n+    return type;\n+  }\n+\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  public String toString()\n+  {\n+    return (this.getClass() + \"[\" + getName() + \"]\");\n+  }\n+}"}, {"sha": "f1f81c170e7c8f414466a7f854fc7d6f349b9aa1", "filename": "libjava/java/awt/Event.java", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -11,8 +11,7 @@\n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct, except for the paramString()\n- * method, which is stubbed.\n+ * Status:  Believed complete and correct.\n  */\n \n public class Event\n@@ -132,7 +131,7 @@ public boolean metaDown ()\n \n   protected String paramString ()\n   {\n-    return \"Event.paramString() not implemented\";\n+    return \"id=\" + id + \",x=\" + x + \",y=\" + y + \"target=\" + target;\n   }\n \n   public boolean shiftDown() \n@@ -142,9 +141,7 @@ public boolean shiftDown()\n \n   public String toString()\n   {\n-    String r = getClass() + \"[id=\" + id + \",x=\" + x + \",y=\" + y + \"target=\" \n-               + ((target == null) ? \"null\" : target) + \"]\";\n-    return r;\n+    return getClass().getName() + \"[\" + paramString() + \"]\";\n   }\n \n   public void translate (int x, int y)"}, {"sha": "cf2e7a676d915efd893dc1f4ce701235a641f0b3", "filename": "libjava/java/awt/EventDispatchThread.java", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEventDispatchThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEventDispatchThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventDispatchThread.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/** @author Bryce McKinlay */\n+\n+/* Status: believed complete, but untested. */\n+\n+package java.awt;\n+\n+class EventDispatchThread extends Thread\n+{\n+  private static int dispatchThreadNum = 1;\n+\n+  private EventQueue queue;\n+\n+  EventDispatchThread(EventQueue queue)\n+  {\n+    super();\n+    setName(\"AWT-EventQueue-\" + dispatchThreadNum++);\n+    this.queue = queue;\n+    setPriority(NORM_PRIORITY + 1);\n+  }\n+\n+  public void run()\n+  {\n+    while (true)\n+      {\n+        try\n+\t{\n+\t  AWTEvent evt = queue.getNextEvent();\n+\t  queue.dispatchEvent(evt);\n+\t}\n+\tcatch (Throwable x)\n+\t{\n+\t  System.err.println(\"Exception during event dispatch:\");\n+\t  x.printStackTrace(System.err);\n+\t}\n+      }\n+  }\n+}"}, {"sha": "0a60d69d4703b346beb8b844aad6d491f2f99c5e", "filename": "libjava/java/awt/EventQueue.java", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEventQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FEventQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventQueue.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,259 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+import java.awt.event.*;\n+import java.util.EmptyStackException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+/* Written using on-line Java 2 Platform Standard Edition v1.3 API \n+ * Specification, as well as \"The Java Class Libraries\", 2nd edition \n+ * (Addison-Wesley, 1998).\n+ * Status:  Believed complete, but untested. Check FIXME's.\n+ */\n+\n+/** @author Bryce McKinlay */\n+\n+public class EventQueue\n+{\n+  private static final int INITIAL_QUEUE_DEPTH = 8;\n+  private AWTEvent[] queue = new AWTEvent[INITIAL_QUEUE_DEPTH];\n+  \n+  private int next_in = 0; // Index where next event will be added to queue\n+  private int next_out = 0; // Index of next event to be removed from queue\n+\n+  private EventQueue next;\n+  private EventQueue prev;\n+\n+  private EventDispatchThread dispatchThread = new EventDispatchThread(this);\n+\n+  public EventQueue()\n+  {\n+  }\n+  \n+  public synchronized AWTEvent getNextEvent()\n+    throws InterruptedException\n+  {\n+    if (next != null)\n+      return next.getNextEvent();\n+      \n+    while (next_in == next_out)\n+      wait();\n+    \n+    AWTEvent res = queue[next_out];\n+    \n+    if (++next_out == queue.length)\n+      next_out = 0;\n+    return res;\n+  }\n+  \n+  /** @specnote Does not block. Returns null if there are no events on the \n+   *            queue. \n+   */ \n+  public synchronized AWTEvent peekEvent()\n+  {\n+    if (next != null)\n+      return next.peekEvent();\n+      \n+    if (next_in != next_out)\n+      return queue[next_out];\n+    else return null;\n+  }\n+  \n+  /** @specnote Does not block. Returns null if there are no matching events \n+   *            on the queue. \n+   */ \n+  public synchronized AWTEvent peekEvent(int id)\n+  {\n+    if (next != null)\n+      return next.peekEvent(id);\n+\n+    int i = next_out;\n+    while (i != next_in)\n+      {\n+        AWTEvent qevt = queue[i];\n+        if (qevt.id == id)\n+\t  return qevt;\n+      }\n+    return null;\n+  }\n+  \n+  public synchronized void postEvent(AWTEvent evt)\n+  {\n+    if (next != null)\n+      {\n+        next.postEvent(evt);\n+\treturn;\n+      }\n+    // FIXME: Security checks?\n+    \n+    /* Check for any events already on the queue with the same source \n+       and ID. */\t\n+    int i = next_out;\n+    while (i != next_in)\n+      {\n+        AWTEvent qevt = queue[i];\n+\tObject src;\n+\tif (qevt.id == evt.id\n+\t    && (src = qevt.getSource()) == evt.getSource()\n+\t    && src instanceof Component)\n+\t  {\n+\t    /* If there are, call coalesceEvents on the source component \n+\t       to see if they can be combined. */\n+\t    Component srccmp = (Component) src;\n+\t    AWTEvent coalesced_evt = srccmp.coalesceEvents(qevt, evt);\n+\t    if (coalesced_evt != null)\n+\t      {\n+\t        /* Yes. Replace the existing event with the combined event. */\n+\t        queue[i] = coalesced_evt;\n+\t\treturn;\n+\t      }\n+            break;\n+\t  }\n+\tif (++i == queue.length)\n+\t  i = 0;\n+      }\n+\n+    queue[next_in] = evt;    \n+    if (++next_in == queue.length)\n+      next_in = 0;\n+      \n+    if (next_in == next_out)\n+      {\n+        /* Queue is full. Extend it. */\n+        AWTEvent[] oldQueue = queue;\n+\tqueue = new AWTEvent[queue.length * 2];\n+\t\n+\tint len = oldQueue.length - next_out;\n+\tSystem.arraycopy(oldQueue, next_out, queue, 0, len);\n+\tif (next_out != 0)\n+\t  System.arraycopy(oldQueue, 0, queue, len, next_out);\n+\t  \n+\tnext_out = 0;\n+\tnext_in = oldQueue.length;\n+      }\n+    notify();\n+  }\n+  \n+  /** @since JDK1.2 */\n+  public static void invokeAndWait(Runnable runnable)\n+    throws InterruptedException, InvocationTargetException\n+  {\n+    // FIXME: Is this an appropriate way to access the event queue?\n+    EventQueue eq = Toolkit.systemEventQueue; \n+    Thread current = Thread.currentThread();\n+    if (current == eq.dispatchThread)\n+      throw new Error(\"Can't call invokeAndWait from event dispatch thread\");\n+  \n+    InvocationEvent ie = \n+      new InvocationEvent(eq, runnable, current, true);\n+    \n+    eq.postEvent(ie);\n+    \n+    synchronized (current)\n+      {\n+\tcurrent.wait();\n+      }\n+\n+    Exception exception;\n+    \n+    if ((exception = ie.getException()) != null)\n+      throw new InvocationTargetException(exception);\n+  }\n+  \n+  /** @since JDK1.2 */\n+  static void invokeLater(Runnable runnable)\n+  {\n+    // FIXME: Is this an appropriate way to access the event queue?\n+    EventQueue eq = Toolkit.systemEventQueue; \n+\n+    InvocationEvent ie = \n+      new InvocationEvent(eq, runnable, null, false);\n+\n+    eq.postEvent(ie);\n+  }\n+  \n+  static boolean isDispatchThread()\n+  {\n+    // FIXME: Is this an appropriate way to access the event queue?\n+    EventQueue eq = Toolkit.systemEventQueue; \n+    return (Thread.currentThread() == eq.dispatchThread);\n+  }\n+  \n+  /** Allows a custom EventQueue implementation to replace this one. \n+    * All pending events are transferred to the new queue. Calls to postEvent,\n+    * getNextEvent, and peekEvent are forwarded to the pushed queue until it\n+    * is removed with a pop().\n+    */\n+  public synchronized void push(EventQueue newEventQueue)\n+  {\n+    int i = next_out;\n+    while (i != next_in)\n+      {\n+        newEventQueue.postEvent(queue[i]);\n+\tnext_out = i;\n+\tif (++i == queue.length)\n+\t  i = 0;\n+      }\n+\n+    next = newEventQueue;\n+    newEventQueue.prev = this;    \n+  }\n+  \n+  /** Transfer any pending events from this queue back to the parent queue that\n+    * was previously push()ed. Event dispatch from this queue is suspended. */\n+  protected void pop() throws EmptyStackException\n+  {\n+    if (prev == null)\n+      throw new EmptyStackException();\n+    \n+    // Don't synchronize both this and prev at the same time, or deadlock could\n+    // occur.\n+    synchronized (prev)\n+      {\n+\tprev.next = null;\n+      }\n+      \n+    synchronized (this)\n+      {\n+\tint i = next_out;\n+\twhile (i != next_in)\n+\t  {\n+            prev.postEvent(queue[i]);\n+\t    next_out = i;\n+\t    if (++i == queue.length)\n+\t      i = 0;\n+\t  }\n+      }\n+  }\n+  \n+  protected void dispatchEvent(AWTEvent evt)\n+  {\n+    if (evt instanceof ActiveEvent)\n+      {\n+        ActiveEvent active_evt = (ActiveEvent) evt;\n+\tactive_evt.dispatch();\n+      }\n+    else\n+      {\n+\tObject source = evt.getSource();\n+\n+\tif (source instanceof Component)\n+\t  {\n+            Component srccmp = (Component) source;\n+\t    srccmp.dispatchEvent(evt);\n+\t  }\n+\telse if (source instanceof MenuComponent)\n+\t  {\n+\t    MenuComponent srccmp = (MenuComponent) source;\n+\t    srccmp.dispatchEvent(evt);\n+\t  }\n+      }\n+  }\n+}"}, {"sha": "833b3c85b2b6ddabed19887913b96f244c4153f3", "filename": "libjava/java/awt/Font.java", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FFont.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FFont.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFont.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -8,6 +8,8 @@\n \n package java.awt;\n \n+import java.util.Locale;\n+\n /**\n  * @author Warren Levy <warrenl@cygnus.com>\n  * @date March 16, 2000.\n@@ -71,6 +73,18 @@ public String getName()\n     return name;\n   }\n \n+  public String getFamily()\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n+  public String getFamily(Locale l)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+\n   public int getStyle()\n   {\n     return style;\n@@ -87,4 +101,20 @@ public float getSize2D()\n   }\n \n   public static Font decode(String str) { return null; } // FIXME\n+  \n+  public String toString()\n+  {\n+    String style_str = \"\";\n+    if (isPlain())\n+      style_str = \"plain\";\n+    else \n+      {\n+        if (isBold())\n+\t  style_str += \"bold\";\t\n+\tif (isItalic())\n+\t  style_str += \"italic\";\n+      }\n+    return getClass().getName() + \"[family=\" + getFamily() + \",name=\" + \n+           getName() + \",style=\" + style_str + \",size=\" + getSize() + \"]\";\n+  }\n }"}, {"sha": "560481d482d3230cffe51f6d07f4c554de0cca0d", "filename": "libjava/java/awt/FontMetrics.java", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFontMetrics.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,153 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/**\n+ * Status:  Stubbed; A very incomplete implementation.\n+ */\n+\n+public class FontMetrics implements java.io.Serializable\n+{\n+  protected Font font;\n+  \n+  protected FontMetrics(Font font)\n+  {\n+    this.font = font;\n+  }\n+\n+  public Font getFont()\n+  {\n+    return font;\n+  }\n+\n+  public int getLeading()\n+  {\n+    // FIXME??\n+    return getHeight() - (getDescent() + getAscent());\n+  }\n+\n+  public int getAscent()\n+  {\n+    // FIXME??\n+    return getHeight() - (getDescent() + getLeading());\n+  }\n+\n+  public int getDescent()\n+  {\n+    // FIXME??\n+    return getHeight() - getDescent();\n+  }\n+\n+  public int getHeight()\n+  {\n+    // FIXME??\n+    return getLeading() + getAscent() + getDescent();\n+  }\n+\n+  public int getMaxAscent()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public int getMaxDescent()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  /* @deprecated Use getMaxDescent() instead. */\n+  public int getMaxDecent()\n+  {\n+    return getMaxDescent();\n+  }\n+\n+  public int getMaxAdvance()\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public int charWidth(int ch)\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public int charWidth(char ch)\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  public int stringWidth(String str)\n+  {\n+    return charsWidth(str.toCharArray(), 0, str.length());\n+  }\n+\n+  public int charsWidth(char[] data, int off, int len)\n+  {\n+    // FIXME\n+    return -1;\n+  }\n+\n+  public int bytesWidth(byte[] data, int off, int len)\n+  {\n+    // FIXME?\n+    return -1;\n+  }\n+\n+  public int[] getWidths()\n+  {\n+    // FIXME\n+    return new int[0];\n+  }\n+\n+  public boolean hasUniformLineMetrics()\n+  {\n+    // FIXME\n+    return false;\n+  }\n+\n+  // Don't have LineMetrics yet...\n+  /*\n+  public LineMetrics getLineMetrics(String str, Graphics context)\n+\n+  public LineMetrics getLineMetrics(String str, int beginIndex, int limit,\n+                                    Graphics context)\n+\n+  public LineMetrics getLineMetrics(char[] chars, int beginIndex, int limit,\n+                                    Graphics context)\n+\n+  public LineMetrics getLineMetrics(CharacterIterator ci, int beginIndex,\n+\t\t\t\t    int limit, Graphics context)\n+  */\n+\n+  // Don't have Java2D yet.\n+  /*\n+  public Rectangle2D getStringBounds(String str, Graphics context)\n+\n+  public Rectangle2D getStringBounds(String str, int beginIndex, int limit,\n+                                     Graphics context)\n+\n+  public Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit,\n+                                     Graphics context)\n+\n+  public Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex,\n+                                     int limit, Graphics context)\n+\n+  public Rectangle2D getMaxCharBounds(Graphics context)\n+  */\n+\n+  public String toString()\n+  {\n+    return this.getClass() + \"[font=\" + font + \",ascent=\" + getAscent() \n+\t   + \",descent=\" + getDescent() + \",height=\" + getHeight() + \"]\";\n+  }\n+}"}, {"sha": "cd37a0ba0e27a41d2dcbda71162a57eb5980feb7", "filename": "libjava/java/awt/GraphicsConfiguration.java", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FGraphicsConfiguration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FGraphicsConfiguration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphicsConfiguration.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Status: Complete, but commented out until we have the required Java2D\n+   classes. */\n+\n+package java.awt;\n+\n+public abstract class GraphicsConfiguration\n+{\n+  /*\n+  public abstract GraphicsDevice getDevice();\n+  public abstract BufferedImage createCompatibleImage(int width, int height);\n+  public abstract BufferedImage createCompatibleImage(int width, int height,\n+                                                      int transparency);\n+  public abstract ColorModel getColorModel();\n+  public abstract ColorModel getColorModel(int transparency);\n+  public abstract AffineTransform getDefaultTransform();\n+  public abstract AffineTransform getNormalizingTransform();\n+  */\n+  /* @since 1.3 */\n+  public abstract Rectangle getBounds();\n+}"}, {"sha": "c28353e435e3166dcaa2a14e53f40b8ffc438733", "filename": "libjava/java/awt/Insets.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FInsets.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FInsets.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FInsets.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+public class Insets implements Cloneable, java.io.Serializable\n+{\n+  public int top;\n+  public int left;\n+  public int bottom;\n+  public int right;\n+  \n+  public Insets(int top, int left, int bottom, int right)\n+  {\n+    this.top = top;\n+    this.left = left;\n+    this.bottom = bottom;\n+    this.right = right;  \n+  }\n+\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof Insets)\n+      {\n+        Insets i = (Insets) obj;\n+\treturn (i.top == top \n+        \t&& i.left == left \n+\t\t&& i.bottom == bottom \n+\t\t&& i.right == right);    \n+      }\n+    return false;\n+  }\n+\n+  public int hashCode()\n+  {\n+    // FIXME: what is the correct algorithm for this?\n+    return (top * (2 * left) * (3 * right) * (4 * bottom));\n+  }\n+\n+  public String toString()\n+  {\n+    return (getClass() + \"[top=\" + top + \",left=\" + left + \",bottom=\" \n+            + bottom + \",right=\" + right + \"]\");\n+  }\n+  \n+  public Object clone()\n+  {\n+    Insets r = new Insets(top, left, bottom, right);\n+    return r;\n+  }\n+}"}, {"sha": "34dd600d779595dfce12c2e4f3cf7e1bdbfb02b0", "filename": "libjava/java/awt/Menu.java", "status": "modified", "additions": 114, "deletions": 12, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenu.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -8,26 +8,128 @@\n \n package java.awt;\n \n-/* A very incomplete placeholder. */\n+import java.util.Vector;\n+\n+/* Status: Incomplete. */\n \n public class Menu extends MenuItem implements MenuContainer\n {\n-  public Menu (String label)\n+  // Fields from the serialization spec. Decalare others \"transient\".\n+  Vector items = new Vector();\n+  boolean tearOff;\n+  boolean isHelpMenu;\n+  int menuSerializedDataVersion;\n+  \n+  static final MenuItem separator = new MenuItem(\"-\");\n+\n+  public Menu()\n+  {\n+    this(null, false);\n+  }\n+  \n+  public Menu(String label)\n   {\n-    super(label);  // ???\n-    throw new Error (\"java.awt.Menu: not implemented\");\n+    this(label, false);\n+  }\n+  \n+  public Menu(String label, boolean tearOff)\n+  {\n+    super(label);\n+    this.tearOff = tearOff;\n   }\n \n-  public void add (String label)\n-  { /* FIXME */ }\n+  public void addNotify()\n+  {\n+    // FIXME\n+  }\n+\n+  public void removeNotify()\n+  {\n+    // FIXME\n+  }\n \n-  public synchronized MenuItem add (MenuItem item)\n+  public boolean isTearOff()\n   {\n-    /* FIXME */\n-    return item;\n+    return tearOff;\n   }\n \n-  public Font getFont() { return null; } // FIXME\n-  public boolean postEvent(Event evt) { return false; } // FIXME\n-  public void remove(MenuComponent comp) { } // FIXME\n+  public int getItemCount()\n+  {\n+    return items.size();\n+  }\n+\n+  /** @deprecated Use getItemCount() instead. */\n+  public int countItems()\n+  {\n+    return getItemCount();\n+  }\n+\n+  public MenuItem getItem(int index)\n+  {\n+    return (MenuItem) items.elementAt(index);\n+  }\n+\n+  public synchronized MenuItem add(MenuItem mi)\n+  {\n+    items.addElement(mi);\n+    if (mi.parent != null)\n+      {\n+\tmi.parent.remove(mi);\n+      }\n+    mi.parent = this;\n+    return mi;\n+  }\n+\n+  public void add(String label)\n+  {\n+    MenuItem mi = new MenuItem(label);\n+    this.add(mi);\n+  }\n+\n+  public synchronized void insert(MenuItem menuitem, int index)\n+  {\n+    if (index < 0)\n+      throw new IllegalArgumentException();\n+    items.insertElementAt(menuitem, index);\n+  }\n+\n+  public void insert(String label, int index)\n+  {\n+    MenuItem mi = new MenuItem(label);\n+    this.insert(mi, index);\n+  }\n+\n+  public void addSeparator()\n+  {\n+    this.add(separator);\n+  }\n+\n+  public void insertSeparator(int index)\n+  {\n+    this.insert(separator, index);    \n+  }\n+\n+  public synchronized void remove(int index)\n+  {\n+    items.removeElementAt(index);\n+  }\n+\n+  public synchronized void remove(MenuComponent item)\n+  {\n+    items.removeElement(item);\n+  }\n+\n+  public synchronized void removeAll()\n+  {\n+    items.removeAllElements();\n+  }\n+\n+  public String paramString()\n+  {\n+    return getName() + \",label\" + label + \",tearOff=\" + tearOff + \n+           \",isHelpMenu=\" + isHelpMenu;\n+  }\n+  \n+  // Accessibility API not yet implemented.\n+  // public AccessibleContext getAccessibleContext()\n }"}, {"sha": "5c0ea69419a396e10f7e12619c3fa193824cea13", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 107, "deletions": 4, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,15 +1,118 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt;\n \n-/* A very incomplete placeholder. */\n+/* Status: partially complete, untested. */\n \n public abstract class MenuComponent\n {\n+  // Fields from the serialization spec. Decalare others \"transient\".\n+  Font font;\n+  String name;\n+  boolean nameExplicitlySet;\n+  boolean newEventsOnly;\n+  //AccessibleContext accessibleContext;\n+  \n+  transient MenuContainer parent;\n+  transient java.awt.peer.MenuComponentPeer peer;\n+\n+  public MenuComponent()\n+  {\n+  }\n+\n+  public String getName()\n+  {\n+    if (name == null && !nameExplicitlySet)\n+      name = generateName();\n+    return name;\n+  }\n+  \n+  /** Subclasses should override this to generate unique names like \n+    * \"menuitem0\".\n+    */\n+  String generateName()\n+  {\n+    // MenuComponent is abstract.\n+    return null;\n+  }\n+\n+  public void setName(String name)\n+  {\n+    nameExplicitlySet = true;\n+    this.name = name;\n+  }\n+\n+  public MenuContainer getParent()\n+  {\n+    return parent;\n+  }\n+\n+  /** @deprecated Don't use this. */\n+  public java.awt.peer.MenuComponentPeer getPeer()\n+  {\n+    return peer;\n+  }\n+\n+  public Font getFont()\n+  {\n+    return font;\n+  }\n+\n+  public void setFont(Font f)\n+  {\n+    this.font = f;\n+  }\n+\n+  public void removeNotify()\n+  {\n+    // FIXME\n+  }\n+\n+  /** @deprecated Replaced by dispatchEvent(AWTEvent) */\n+  public boolean postEvent(Event evt)\n+  {\n+    return false;\n+  }\n+\n+  public final void dispatchEvent(AWTEvent e)\n+  {\n+    // FIXME\n+    dispatchEventImpl(e);\n+  }\n+  \n+  void dispatchEventImpl(AWTEvent e)\n+  {\n+    // This is overridden by subclasses that support events.\n+  }\n+\n+  protected void processEvent(AWTEvent e)\n+  {\n+    // Nothing to do here? This is be overridden by subclasses that \n+    // support events.\n+  }\n+\n+  protected String paramString()\n+  {\n+    return name;\n+  }\n+\n+  public String toString()\n+  {\n+    return this.getClass().getName() + \"[\" + paramString() + \"]\";\n+  }\n+\n+  protected final Object getTreeLock()\n+  {\n+    // FIXME: figure out how the tree lock works.\n+    return null;\n+  }\n+\n+  // Accessibility API not yet implemented.\n+  // public AccessibleContext getAccessibleContext()\n }"}, {"sha": "d766d42b56a94c49d2c22699f6f59b471db455b1", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 140, "deletions": 6, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,25 +1,159 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt;\n import java.awt.event.*;\n+import java.util.EventListener;\n \n /* A very incomplete placeholder. */\n \n public class MenuItem extends MenuComponent\n {\n+  // Fields from the serialization spec. Decalare others \"transient\".\n+  boolean enabled;\n+  String label;\n+  String actionCommand;\n+  long eventMask;\n+  MenuShortcut shortcut;\n+  int menuItemSerializedDataVersion;\n+\n+  transient ActionListener actionListener;\n+\n   public MenuItem (String label)\n   {\n-    throw new Error(\"java.awt.MenuItem: not implemented\");\n+    this.label = label;\n+  }\n+\n+  public String getLabel()\n+  {\n+    return label;\n+  }\n+\n+  public synchronized void setLabel(String label)\n+  {\n+    this.label = label;\n+  }\n+\n+  public boolean isEnabled()\n+  {\n+    return enabled;\n+  }\n+\n+  public synchronized void setEnabled(boolean b)\n+  {\n+    this.enabled = b;\n+  }\n+\n+  /** @deprecated Use setEnabled() instead. */\n+  public void enable()\n+  {\n+    setEnabled(true);\n+  }\n+\n+  /** @deprecated Use setEnabled() instead. */\n+  public void enable(boolean b)\n+  {\n+    setEnabled(b);\n+  }\n+\n+  /** @deprecated Use setEnabled() instead. */\n+  public void disable()\n+  {\n+    setEnabled(false);\n+  }\n+\n+  public MenuShortcut getShortcut()\n+  {\n+    return shortcut;\n+  }\n+\n+  public void setShortcut(MenuShortcut s)\n+  {\n+    this.shortcut = s;\n+  }\n+\n+  public void deleteShortcut()\n+  {\n+    setShortcut(null);\n   }\n \n-  public synchronized void addActionListener (ActionListener listener)\n+  protected final void enableEvents(long eventsToEnable)\n   {\n-    /* FIXME */\n+    eventMask |= eventsToEnable;\n+    // TODO: see comment in Component.enableEvents().    \n   }\n+\n+  protected final void disableEvents(long eventsToDisable)\n+  {\n+    eventMask &= ~eventsToDisable;    \n+  }\n+\n+  public void setActionCommand(String command)\n+  {\n+    this.actionCommand = command;\n+  }\n+\n+  public String getActionCommand()\n+  {\n+    return actionCommand;\n+  }\n+\n+  public synchronized void addActionListener(ActionListener l)\n+  {\n+    actionListener = AWTEventMulticaster.add(actionListener, l);\n+    if (actionListener != null)\n+      enableEvents(AWTEvent.ACTION_EVENT_MASK);\n+  }\n+\n+  public synchronized void removeActionListener(ActionListener l)\n+  {\n+    actionListener = AWTEventMulticaster.remove(actionListener, l);\n+  }\n+\n+  /** Returns all registered EventListers of the given listenerType. \n+    * listenerType must be a subclass of EventListener, or a \n+    * ClassClassException is thrown.\n+    * @since 1.3 \n+    */\n+  public EventListener[] getListeners(Class listenerType)\n+  {\n+    if (listenerType == ActionListener.class)\n+      return Component.getListenersImpl(listenerType, actionListener);\n+    else\n+      return Component.getListenersImpl(listenerType, null);\n+  }\n+\n+  void dispatchEventImpl(AWTEvent e)\n+  {\n+    if (e.id <= ActionEvent.ACTION_LAST \n+\t&& e.id >= ActionEvent.ACTION_FIRST\n+\t&& (actionListener != null\n+\t    || (eventMask & AWTEvent.ACTION_EVENT_MASK) != 0))\n+      processEvent(e);\n+  }\n+\n+  protected void processEvent(AWTEvent e)\n+  {\n+    if (e instanceof ActionEvent)\n+      processActionEvent((ActionEvent) e);\n+  }\n+\n+  protected void processActionEvent(ActionEvent e)\n+  {\n+    if (actionListener != null)\n+      actionListener.actionPerformed(e);\n+  }\n+\n+  public String paramString()\n+  {\n+    return name + \",label=\" + label;\n+  }\n+\n+  // Accessibility API not yet implemented.\n+  // public AccessibleContext getAccessibleContext()\n }"}, {"sha": "b19892627716a3f15fd89791e4d9652c153b1b23", "filename": "libjava/java/awt/MenuShortcut.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuShortcut.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FMenuShortcut.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuShortcut.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+import java.awt.event.KeyEvent;\n+\n+/* Status: Complete, except for hashCode(). Untested. */\n+\n+public class MenuShortcut\n+{\n+  // Fields from the serialization spec. Decalare others \"transient\".\n+  int key;\n+  boolean usesShift;\n+\n+  public MenuShortcut(int key)\n+  {\n+    this.key = key;\n+  }\n+\n+  public MenuShortcut(int key, boolean useShiftModifier)\n+  {\n+    this.key = key;\n+    this.usesShift = useShiftModifier;\n+  }\n+\n+  public int getKey()\n+  {\n+    return key;\n+  }\n+\n+  public boolean usesShiftModifier()\n+  {\n+    return usesShift;\n+  }\n+\n+  public boolean equals(MenuShortcut ms)\n+  {\n+    return (ms.key == key && ms.usesShift == usesShift);\n+  }\n+\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof MenuShortcut)\n+      {\n+        MenuShortcut ms = (MenuShortcut) obj;\n+\treturn (ms.key == key && ms.usesShift == usesShift);\n+      }      \n+    return false;\n+  }\n+\n+  public int hashCode()\n+  {\n+    // FIXME: find/implement the correct algorithm for this\n+    if (usesShift)\n+      return (2 * key);\n+    else\n+      return key;\n+  }\n+\n+  public String toString()\n+  {\n+    return paramString(); // ?\n+  }\n+  \n+  protected String paramString()\n+  {\n+    return KeyEvent.getKeyText(key);\n+  }\n+}"}, {"sha": "59aa6e273d57b798019e0bad5a49c69b4b5307aa", "filename": "libjava/java/awt/Panel.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPanel.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* An incomplete placeholder. */\n+\n+public class Panel extends Container\n+{\n+  public Panel()\n+  {\n+    super();\n+  }\n+  \n+  public Panel(LayoutManager layout)\n+  {\n+    super();\n+    setLayout (layout);    \n+  }\n+\n+  //public AccessibleContext getAccessibleContext()\n+\n+  public void addNotify()\n+  {\n+    // FIXME\n+  }\n+}"}, {"sha": "3be7f847cae07ef46f06e3fd925302f76b370700", "filename": "libjava/java/awt/PopupMenu.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FPopupMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FPopupMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPopupMenu.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* Status: Incomplete. */\n+\n+public class PopupMenu extends Menu\n+{\n+  public PopupMenu()\n+  {\n+    super();\n+  }\n+\n+  public PopupMenu(String label)\n+  {\n+    super(label);\n+  }\n+\n+  public void addNotify()\n+  {\n+    // FIXME\n+  }\n+\n+  public void show(Component origin, int x, int y)\n+  {\n+    // FIXME\n+  }\n+  \n+  // Accessibility API not yet implemented.\n+  // public AccessibleContext getAccessibleContext()\n+}"}, {"sha": "c741a337aa52186e74c34f7a357400fd8464be36", "filename": "libjava/java/awt/Rectangle.java", "status": "modified", "additions": 305, "deletions": 9, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FRectangle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FRectangle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FRectangle.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -8,28 +8,324 @@\n \n package java.awt;\n \n-/* Status:  Quite imcomplete. */\n+/* Status:  Mostly complete. Some of the Java2D stuff is commented out. */\n \n-public class Rectangle implements Shape\n+// FIXME: Should extend Rectangle2D for 1.2 implementation\n+public class Rectangle implements Cloneable, Shape\n {\n   public int x;\n   public int y;\n   public int width;\n   public int height;\n \n-  public Rectangle () { }\n+  public Rectangle()\n+  {\n+    x = 0;\n+    y = 0;\n+    width = 0;\n+    height = 0;\n+  }\n+\n+  public Rectangle(Rectangle r)\n+  {\n+    x = r.x;\n+    y = r.y;\n+    width = r.width;\n+    height = r.height;\n+  }\n+\n+  public Rectangle(int x, int y, int width, int height)\n+  {\n+    this.x = x;\n+    this.y = y;\n+    this.width = width;\n+    this.height = height;\n+  }\n \n-  public Rectangle (int width, int height)\n-  { this.width = width;  this.height = height; }\n+  public Rectangle(int width, int height)\n+  {\n+    x = 0;\n+    y = 0;\n+    this.width = width;\n+    this.height = height;\n+  }\n+\n+  public Rectangle(Point p, Dimension d)\n+  {\n+    x = p.x;\n+    y = p.y;\n+    width = d.width;\n+    height = d.height;\n+  }\n+\n+  public Rectangle(Point p)\n+  {\n+    x = p.x;\n+    y = p.y;\n+    width = 0;\n+    height = 0;\n+  }\n \n-  public Rectangle (int x, int y, int width, int height) \n+  public Rectangle(Dimension d)\n   {\n-    this.x = x;  this.y = y;\n-    this.width = width;  this.height = height;\n+    x = 0;\n+    y = 0;\n+    width = d.width;\n+    height = d.height;\n   }\n \n   public Rectangle getBounds ()\n   {\n-    return new Rectangle (x, y, width, height);\n+    return (Rectangle) this.clone();\n+  }\n+\n+  public void add(int newx, int newy)\n+  {\n+    int x = this.x > newx ? newx : this.x;\n+    int y = this.y > newy ? newy : this.y;\n+    width = (this.x + width > newx ? this.x + width : newx) - x;\n+    height = (this.y + height > newy ? this.y + height : newy) - y;\n+    this.x = x;\n+    this.y = y;\n+  }\n+\n+  public void add(Point pt)\n+  {\n+    add (pt.x, pt.y);\n+  }\n+\n+  public void add(Rectangle r)\n+  {\n+    int x = this.x > r.x ? r.x : this.x;\n+    int y = this.y > r.y ? r.y : this.y;\n+    width = (this.x + width > r.x + r.width ? \n+             this.x + width : r.x + r.width) - x;\n+    height = (this.y + height > r.y + r.height ?\n+              this.y + height : r.y + r.height) - y;\n+    this.x = x;\n+    this.y = y;\n+  }\n+\n+  public boolean contains(int x, int y)\n+  {\n+    return (x >= this.x && x <= this.x + this.width\n+            && y >= this.y && y <= this.y + this.height);\n+  }   \n+\n+  public boolean contains(int x, int y, int w, int h)\n+  {\n+    return (x >= this.x && x + w <= this.x + this.width\n+            && y >= this.y && y + h <= this.y + this.height);\n+  }\n+\n+  public boolean contains(Point p)\n+  {\n+    return contains(p.x, p.y);\n+  }\n+\n+  public boolean contains(Rectangle r)\n+  {\n+    return contains(r.x, r.y, r.width, r.height);\n+  }\n+\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof Rectangle)\n+      {\n+\tRectangle r = (Rectangle) obj;\n+\treturn (r.x == x \n+\t        && r.y == y \n+\t\t&& r.width == width \n+\t\t&& r.height == height);\n+      }\n+    return false;\n+  }\n+\n+  public double getHeight()\n+  {\n+    return (double) this.height;     \n+  }\n+\n+  public Point getLocation()\n+  {\n+    return new Point(x,y);\n+  }\n+\n+  public Dimension getSize()\n+  {\n+    return new Dimension(width, height);\n+  }\n+\n+  public double getWidth()\n+  {\n+    return (double) this.width;\n+  }\n+\n+  public double getX()\n+  {\n+    return (double) x;\n+  }\n+\n+  public double getY()\n+  {\n+    return (double) y;\n+  }\n+\n+  public void grow(int h, int v)\n+  {\n+    width += h;\n+    height += v;\n+  }\n+\n+  /** @deprecated Use contains() instead. */\n+  public boolean inside(int x, int y)\n+  {\n+    return contains(x, y);\n   }\n+\n+  /** @specnote If there is no intersection, an empty rectangle at 0,0 \n+    *           is returned.\n+    */\n+  public Rectangle intersection(Rectangle r)\n+  {\n+    int newx = x < r.x ? r.x : x;\n+    int newy = y < r.y ? r.y : y;\n+    int neww = (x + width < r.x + r.width ?\n+        \tx + width : r.x + r.width) - newx;\n+    int newh = (y + height < r.y + r.height ?\n+        \ty + height : r.y + r.height) - newy;\n+    if (neww >= 0 && newh >= 0)\n+      return new Rectangle(newx, newy, neww, newh);\n+    else\n+      return new Rectangle(0, 0, 0, 0);\n+  }\n+\n+  /** @specnote If the intersection is at an edge or corner only (an empty\n+    *           intersection with a non-zero location), false is returned.\n+    */\n+  public boolean intersects(Rectangle r)\n+  {\n+    int neww = (x + width < r.x + r.width ?\n+        \tx + width : r.x + r.width) - (x < r.x ? r.x : x);\n+    int newh = (y + height < r.y + r.height ?\n+        \ty + height : r.y + r.height) - (y < r.y ? r.y : y);\n+    return (neww > 0 && newh > 0);\n+  }\n+\n+  public boolean isEmpty()\n+  {\n+    return (width > 0 && height > 0);\n+  }\n+\n+  /** @deprecated Use setLocation() instead. */\n+  public void move(int x, int y)\n+  {\n+    setLocation(x, y);\n+  }\n+\n+  public int outcode(double x, double y)\n+  {\n+    // FIXME\n+    return 0;\n+  }\n+\n+  /** @deprecated Use setBounds() instead. */\n+  public void reshape(int x, int y, int width, int height)\n+  {\n+    setBounds(x, y, width, height);\n+  }\n+\n+  /** @deprecated Use setSize() instead. */\n+  public void resize(int width, int height)\n+  {\n+    setSize(width, height);\n+  }\n+\n+  public void setBounds(int x, int y, int width, int height)\n+  {\n+    this.x = x;\n+    this.y = y;\n+    this.width = width;\n+    this.height = height;\n+  }\n+\n+  public void setBounds(Rectangle r)\n+  {\n+    this.x = r.x;\n+    this.y = r.y;\n+    this.width = r.width;\n+    this.height = r.height;     \n+  }\n+\n+  public void setLocation(int x, int y)\n+  {\n+    this.x = x;\n+    this.y = y;\n+  }\n+\n+  public void setLocation(Point p)\n+  {\n+    this.x = p.x;\n+    this.y = p.y;\n+  }\n+\n+  public void setRect(double x, double y, double width, double height)\n+  {\n+    this.x = (int) x;\n+    this.y = (int) y;\n+    this.width = (int) width;\n+    this.height = (int) height;\n+  }\n+\n+  public void setSize(Dimension d)\n+  {\n+    this.width = d.width;\n+    this.height = d.height;\n+  }\n+\n+  public void setSize(int width, int height)\n+  {\n+    this.width = width;\n+    this.height = height;\n+  }\n+\n+  public void translate(int x, int y)\n+  {\n+    x += x;\n+    y += y;\n+  }\n+\n+  public Rectangle union(Rectangle r)\n+  {\n+    int newx = x > r.x ? r.x : x;\n+    int newy = y > r.y ? r.y : y;     \n+    int neww = (this.x + width > r.x + r.width ? \n+               this.x + width : r.x + r.width) - newx;\n+    int newh = (this.y + height > r.y + r.height ?\n+        \tthis.y + height : r.y + r.height) - newy;\n+    return new Rectangle(newx, newy, neww, newh);\n+  }\n+\n+  // Commented out until we have Rectangle2D\n+  /*\n+  public Rectangle2D createIntersection(Rectangle2D r)\n+  {\n+  }\n+\n+  public Rectangle2D createUnion(Rectangle2D r)\n+  {\n+  }\n+\n+  public Rectangle2D getBounds2D()\n+  {\n+  }\n+  */\n+\n+  public String toString()\n+  {\n+    return getClass().getName() + \"[x=\" + x + \",y=\" + y + \",width=\" + width + \n+           \",height=\" + height + \"]\";\n+  }\n+\n+\n }"}, {"sha": "f7ec764990bdc0783c5d9f8cc142a1ae3ec471b5", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -15,6 +15,7 @@\n public abstract class Toolkit\n {\n   static Toolkit defaultToolkit;\n+  static EventQueue systemEventQueue = new EventQueue();\n \n   public static synchronized Toolkit getDefaultToolkit()\n   {\n@@ -26,6 +27,11 @@ public static synchronized Toolkit getDefaultToolkit()\n   protected abstract FramePeer createFrame(Frame target);\n   public abstract Image getImage(URL url);\n \n+  public final EventQueue getSystemEventQueue()\n+  {\n+    return systemEventQueue;\n+  }\n+\n   private static void init() { }\n   // private static native void init();\n   // static { init(); }"}, {"sha": "cd0761cdd9388c4734f61d914f29d3865072f9fa", "filename": "libjava/java/awt/event/ActionEvent.java", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -21,25 +21,25 @@ public class ActionEvent extends AWTEvent\n   public static final int META_MASK = 4;\n   public static final int SHIFT_MASK = 1;\n \n-  String actionCommand;\n+  String cmd;\n   int modifiers;\n \n   public ActionEvent (Object source, int id, String command)\n   {\n     super(source, id);\n-    actionCommand = command;\n+    cmd = command;\n   }\n \n   public ActionEvent (Object source, int id, String command, int modifiers)\n   {\n     super(source, id);\n-    actionCommand = command;\n+    cmd = command;\n     this.modifiers = modifiers;\n   }\n \n-  public String getActionCommand ()\n+  public String getcmd ()\n   {\n-    return actionCommand;\n+    return cmd;\n   }\n \n   public int getModifiers ()\n@@ -49,7 +49,18 @@ public int getModifiers ()\n \n   public String paramString ()\n   {\n-    return (\"ActionEvent[\" + actionCommand + \",\" + modifiers\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case ACTION_PERFORMED:\n+\t  r = \"ACTION_PERFORMED\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown type\";\n+\tbreak;\n+      }\n+        \n+    r += \",cmd=\" + cmd;\n+    return r;\n   }\n }"}, {"sha": "9da9993a7942aecf09cf0e0a1b93f83b4da5ed92", "filename": "libjava/java/awt/event/AdjustmentEvent.java", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FAdjustmentEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FAdjustmentEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FAdjustmentEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -30,7 +30,7 @@ public class AdjustmentEvent extends AWTEvent\n   public AdjustmentEvent (Adjustable source, int id, int type, int value)\n   {\n     super (source, id);\n-    this.type = type;\n+    this.adjType = type;\n     this.value = value;\n   }\n \n@@ -41,7 +41,7 @@ public Adjustable getAdjustable ()\n \n   public int getAdjustmentType ()\n   {\n-    return type;\n+    return adjType;\n   }\n \n   public int getValue ()\n@@ -51,10 +51,45 @@ public int getValue ()\n \n   public String paramString ()\n   {\n-    return (\"AdjustmentEvent[\" + type + \",\" + value\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case ADJUSTMENT_VALUE_CHANGED:\n+\t  r = \"ADJUSTMENT_VALUE_CHANGED\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\n+      }\n+    \n+    r += \",adjType=\";\n+    \n+    switch (adjType)\n+      {\n+\tcase BLOCK_DECREMENT:\n+\t  r += \"BLOCK_DECREMENT\";\n+\tbreak;\n+\tcase BLOCK_INCREMENT:\n+\t  r += \"BLOCK_INCREMENT\";\n+\tbreak;\n+\tcase TRACK:\n+\t  r += \"TRACK\";\n+\tbreak;\n+\tcase UNIT_DECREMENT:\n+\t  r += \"UNIT_DECREMENT\";\n+\tbreak;\n+\tcase UNIT_INCREMENT:\n+\t  r += \"UNIT_INCREMENT\";\n+\tbreak;\n+\tdefault:\n+\t  r += \"unknown type\";\n+\tbreak;\n+      }\n+  \n+    r += \",value=\" + value;  \n+    return r;\n   }\n \n-  private int type;\n+  private int adjType;\n   private int value;\n }"}, {"sha": "bdf80ce2f35b13f44ed4f13e1d349cb64346a25d", "filename": "libjava/java/awt/event/ComponentEvent.java", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FComponentEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FComponentEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FComponentEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -37,6 +37,25 @@ public Component getComponent ()\n \n   public String paramString ()\n   {\n-    return super.paramString ();\n+    String r;\n+    switch (id)\n+      {\n+        case COMPONENT_HIDDEN:\n+\t  r = \"COMPONENT_HIDDEN\";\n+\tbreak;\n+        case COMPONENT_MOVED:\n+\t  r = \"COMPONENT_MOVED\";\n+\tbreak;\n+        case COMPONENT_RESIZED:\n+\t  r = \"COMPONENT_RESIZED\";\n+\tbreak;\n+        case COMPONENT_SHOWN:\n+\t  r = \"COMPONENT_SHOWN\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\t\n+      }      \n+    return r;\n   }\n }"}, {"sha": "fc68d1403bd83b7c3ad78ae1e1b208494b75fbaa", "filename": "libjava/java/awt/event/ContainerEvent.java", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -23,8 +23,8 @@ public class ContainerEvent extends ComponentEvent\n   public static final int CONTAINER_FIRST = 300;\n   public static final int CONTAINER_LAST = 301;\n \n-  // FIXME: jdk1.2 docs say source is a Component.\n-  public ContainerEvent (Container source, int id, Component child)\n+  /** @specnote In JDK1.2 and 1.3, source is a Component. */\n+  public ContainerEvent (Component source, int id, Component child)\n   {\n     super (source, id);\n     this.child = child;\n@@ -35,15 +35,29 @@ public Component getChild ()\n     return child;\n   }\n \n-  public Component getContainer ()\n+  public Component getComponent ()\n   {\n-    return (Container) source;\n+    return (Component) source;\n   }\n \n   public String paramString ()\n   {\n-    return (\"ContainerEvent[\" + child\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case COMPONENT_ADDED:\n+\t r = \"COMPONENT_ADDED\";\n+\tbreak;\n+\tcase COMPONENT_REMOVED:\n+\t r = \"COMPONENT_REMOVED\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\n+\n+      }\n+    r += \",child=\" + child;\n+    return r;\n   }\n \n   private Component child;"}, {"sha": "ab125f55cab3a687e23a579ab6a18256361bd2ff", "filename": "libjava/java/awt/event/FocusEvent.java", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FFocusEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FFocusEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FFocusEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -42,8 +42,21 @@ public boolean isTemporary ()\n \n   public String paramString ()\n   {\n-    return (\"FocusEvent[\" + temporary\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r = \"\";\n+    switch (id)\n+      {\n+        case FOCUS_GAINED:\n+\t  r += \"FOCUS_GAINED\";\n+\tbreak;\n+\tcase FOCUS_LOST:\n+\t  r += \"FOCUS_LOST\";\n+\tbreak;\n+\tdefault:\n+\t  r += \"unknown id\";\n+\tbreak;\n+      }\n+    r += (temporary ? \"temporary\" : \"permanent\");\n+    return r;\n   }\n \n   private boolean temporary;"}, {"sha": "39ce1ab1592612cd6f8fe34c20f12603f955ecd1", "filename": "libjava/java/awt/event/HierarchyBoundsAdapter.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsAdapter.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.event;\n+\n+/**\n+ * @since 1.3\n+ * @author Bryce McKinlay\n+ */\n+\n+/* Status:  Believed complete and correct. */\n+\n+public abstract class HierarchyBoundsAdapter implements HierarchyBoundsListener\n+{\n+  public void ancestorMoved(HierarchyEvent e)\n+  {\n+  }\n+  \n+  public void ancestorResized(HierarchyEvent e)\n+  {\n+  }\n+}"}, {"sha": "aa853a0c27d9c2101e3891844c0edfe8e63757b8", "filename": "libjava/java/awt/event/HierarchyBoundsListener.java", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyBoundsListener.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,22 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.event;\n+\n+/**\n+ * @since 1.3\n+ * @author Bryce McKinlay\n+ */\n+\n+/* Status:  Believed complete and correct. */\n+\n+public interface HierarchyBoundsListener extends java.util.EventListener\n+{\n+  public void ancestorMoved(HierarchyEvent e);\n+  public void ancestorResized(HierarchyEvent e);\n+}"}, {"sha": "171d8b212abd0178afcf96f60dcc8b5e30445c47", "filename": "libjava/java/awt/event/HierarchyEvent.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,96 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.event;\n+import java.awt.*;\n+\n+/**\n+ * @since 1.3\n+ * @author Bryce McKinlay\n+ */\n+\n+/* Status: thought to be complete and correct.  */\n+\n+public class HierarchyEvent extends AWTEvent\n+{\n+  public static final int PARENT_CHANGED         = 1 << 0,\n+\t\t\t  DISPLAYABILITY_CHANGED = 1 << 1,\n+\t\t\t  SHOWING_CHANGED        = 1 << 2,\n+\t\t\t  HIERARCHY_FIRST        = 1400,\n+\t\t\t  HIERARCHY_CHANGED      = 1400,\n+\t\t\t  ANCESTOR_MOVED         = 1401,\n+\t\t\t  ANCESTOR_RESIZED       = 1402,\n+\t\t\t  HIERARCHY_LAST         = 1402;\n+  \n+  /* Serialized fields from the serialization spec. */\n+  Component changed;\n+  Container changedParent;\n+  long changeFlags = 0;\n+  \n+  public HierarchyEvent(Component source, int id, Component changed,\n+                \tContainer changedParent)\n+  {\n+    super(source, id);\n+    this.changed = changed;\n+    this.changedParent = changedParent;\n+  }\n+  \n+  public HierarchyEvent(Component source, int id, Component changed, \n+                        Container changedParent, long changeFlags)\n+  {\n+    super(source,id);\n+    this.changed = changed;\n+    this.changedParent = changedParent;\n+    this.changeFlags = changeFlags;\n+  }\n+  \n+  public Component getComponent()\n+  {\n+    return (Component) source;\n+  }\n+  \n+  public Component getChanged()\n+  {\n+    return changed;\n+  }\n+  \n+  public Container getChangedParent()\n+  {\n+    return changedParent;\n+  }\n+    \n+  public long getChangeFlags()\n+  {\n+    return changeFlags;\n+  }\n+  \n+  public String paramString()\n+  {\n+    String r;\n+    switch (id)\n+      {\n+      \tcase HIERARCHY_CHANGED:\n+\t  r = \"HIERARCHY_CHANGED\";\n+\t  break;\n+\n+\tcase ANCESTOR_MOVED:   \n+\t  r = \"ANCESTOR_MOVED\";\n+\t  break;\n+\t  \n+\tcase ANCESTOR_RESIZED:\n+\t  r = \"ANCESTOR_RESIZED\";\n+\t  break;\n+\t  \t\n+\tdefault:\n+\t  return \"unknown type\";\n+      }\n+    \n+    r += \"(\" + changed + \",\" + changedParent + \")\";\n+    return r;\n+  }\n+}"}, {"sha": "b78e857a46eff37a56aafd2b9c8a613ed9b84b59", "filename": "libjava/java/awt/event/HierarchyListener.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FHierarchyListener.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.event;\n+\n+/**\n+ * @since 1.3\n+ * @author Bryce McKinlay\n+ */\n+\n+/* Status:  Believed complete and correct. */\n+\n+public interface HierarchyListener extends java.util.EventListener\n+{\n+  public void hierarchyChanged(HierarchyEvent e);\n+}"}, {"sha": "3cafd3508a301dee7e8c4e077164c695f3611b0f", "filename": "libjava/java/awt/event/InputMethodEvent.java", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FInputMethodEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FInputMethodEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FInputMethodEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -43,7 +43,21 @@ public InputMethodEvent (Component source, int id, TextHitInfo caret,\n   public TextHitInfo getVisiblePosition ();\n   public boolean isConsumed ();\n \n-  public String paramString ();\n+  public String paramString ()\n+  {\n+    String r;\n+    switch (id)\n+      {\n+        case CARET_POSITION_CHANGED:\n+\t  r = \"CARET_POSITION_CHANGED\";\n+\tbreak;\n+\tcase INPUT_METHOD_TEXT_CHANGED:\n+\t  r = \"INPUT_METHOD_TEXT_CHANGED\";\n+\tbreak;\n+      }\n+    r += \"\"; // FIXME\n+    return r;\n+  }\n   */\n \n   // FIXME: this is just to let it compile."}, {"sha": "778eb18fab3458b1bdf9d924a0c50f82145c410c", "filename": "libjava/java/awt/event/InvocationEvent.java", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FInvocationEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FInvocationEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FInvocationEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -14,7 +14,7 @@\n  * @date April 8, 2000\n  */\n \n-/* Status: Still one bug.  */\n+/* Status: Believed to be complete and correct.  */\n \n public class InvocationEvent extends AWTEvent implements ActiveEvent\n {\n@@ -37,28 +37,29 @@ public InvocationEvent (Object source, Runnable runnable)\n     this.runnable = runnable;\n   }\n \n-  public InvocationEvent (Object source, Runnable runnable, Object notifier)\n+  public InvocationEvent(Object source, Runnable runnable, Object notifier,\n+                \t boolean catchExceptions)\n   {\n     super (source, INVOCATION_DEFAULT);\n     this.runnable = runnable;\n     this.notifier = notifier;\n+    this.catchExceptions = catchExceptions;\n   }\n \n   public void dispatch ()\n   {\n     Exception e = null;\n-    try\n-      {\n-\trunnable.run ();\n-      }\n-    catch (Exception _)\n-      {\n-\te = _;\n-      }\n-\n-    // FIXME: what to do if !catchExceptions?\n     if (catchExceptions)\n-      exception = e;\n+      try\n+\t{\n+\t  runnable.run ();\n+\t}\n+      catch (Exception x)\n+\t{\n+\t  exception = x;\n+\t}\n+    else\n+      runnable.run ();\n \n     if (notifier != null)\n       notifier.notifyAll ();\n@@ -71,9 +72,15 @@ public Exception getException ()\n \n   public String paramString ()\n   {\n-    return (\"InvocationEvent[\" + notifier + \",\" + runnable\n-\t    + \",\" + catchExceptions\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    if (id == INVOCATION_DEFAULT)\n+      r = \"INVOCATION_DEFAULT\";\n+    else\n+      r = \"unknown type\";\n+\n+    r += \",runnable=\" + runnable + \",notifier=\" + notifier + \n+         \",catchExceptions=\" + catchExceptions;    \n+    return r;\n   }\n \n   protected boolean catchExceptions;"}, {"sha": "3d2e502655a7b0632934840ba10b3754c977a034", "filename": "libjava/java/awt/event/ItemEvent.java", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FItemEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FItemEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FItemEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -48,8 +48,32 @@ public int getStateChange ()\n \n   public String paramString ()\n   {\n-    return (\"ItemEvent[\" + item + \",\" + stateChange\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case ITEM_STATE_CHANGED:\n+\t  r = \"ITEM_STATE_CHANGED\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\n+      }\n+    \n+    r += \",item=\" + item + \",stateChange=\";\n+    switch (stateChange)\n+      {\n+        case SELECTED:\n+\t  r += \"SELECTED\";\n+\tbreak;\n+\tcase DESELECTED:\n+\t  r += \"DESELECTED\";\n+\tbreak;\n+\tdefault:\n+\t  r += \"unknown\";\n+\tbreak;\n+      }\n+      \n+    return r;\n   }\n \n   private Object item;"}, {"sha": "3f6a14c3a8bc3dfe92115c500a0a4d0c3db8f57d", "filename": "libjava/java/awt/event/KeyEvent.java", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FKeyEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -251,8 +251,22 @@ public boolean isActionKey ()\n \n   public String paramString ()\n   {\n-    return (\"KeyEvent[\" + keyCode + \",\" + keyChar + \",\" + modifiers\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case KEY_PRESSED:\n+\t  r = \"KEY_PRESSED\";\n+\tbreak;\n+\tcase KEY_RELEASED:\n+\t  r = \"KEY_RELEASED\";\n+\tbreak;\n+\tcase KEY_TYPED:\n+\t  r = \"KEY_TYPED\";\n+\tbreak;\n+      }    \n+    r += \",keyCode=\" + keyCode + \",\" + getKeyText(keyCode) + \",modifiers=\" +\n+         getKeyModifiersText(modifiers);\n+    return r;\t \n   }\n \n   private int keyCode;"}, {"sha": "bb9602cd17b12bcd7bb42341e7b8f4e9c40e4dee", "filename": "libjava/java/awt/event/MouseEvent.java", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FMouseEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FMouseEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FMouseEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -67,10 +67,37 @@ public boolean isPopupTrigger ()\n \n   public String paramString ()\n   {\n-    return (\"MouseEvent[\" + when + \",\" + modifiers\n-\t    + \",(\" + x + \",\" + y + \"),\"\n-\t    + clickCount + \",\" + popupTrigger\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+\tcase MOUSE_CLICKED:\n+\t  r = \"MOUSE_CLICKED\";\n+\tbreak;\n+\tcase MOUSE_DRAGGED:\n+\t  r = \"MOUSE_DRAGGED\";\n+\tbreak;\n+\tcase MOUSE_ENTERED:\n+\t  r = \"MOUSE_ENTERED\";\n+\tbreak;\n+\tcase MOUSE_EXITED:\n+\t  r = \"MOUSE_EXITED\";\n+\tbreak;\n+\tcase MOUSE_MOVED:\n+\t  r = \"MOUSE_MOVED\";\n+\tbreak;\n+\tcase MOUSE_PRESSED:\n+\t  r = \"MOUSE_PRESSED\";\n+\tbreak;\n+\tcase MOUSE_RELEASED:\n+\t  r = \"MOUSE_RELEASED\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\n+      }\n+    r += \",(\" + x + \",\" + y + \"),modifiers=\" + modifiers + \",clickCount=\" +\n+         clickCount;\n+    return r;\n   }\n \n   public void translatePoint (int x, int y)"}, {"sha": "21c42e49a7c4f761b17eddc88772c263ab17f16c", "filename": "libjava/java/awt/event/PaintEvent.java", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FPaintEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FPaintEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FPaintEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -36,8 +36,22 @@ public Rectangle getUpdateRect ()\n \n   public String paramString ()\n   {\n-    return (\"PaintEvent[\" + updateRect\n-\t    + \";\" + super.paramString () + \"]\");\n+    String r;\n+    switch (id)\n+      {\n+        case UPDATE:\n+\t  r = \"UPDATE\";\n+\tbreak;\n+\tcase PAINT:\n+\t  r = \"PAINT\";\n+\tbreak;\n+\tdefault:\n+\t  r = \"unknown id\";\n+\tbreak;\t\n+      }\n+    \n+    r += \",updateRect=\" + updateRect;\n+    return r;\n   }\n \n   public void setUpdateRect (Rectangle updateRect)"}, {"sha": "85c5d85a4eb24fc4baa52af438b7d9512c9c5dc2", "filename": "libjava/java/awt/event/TextEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FTextEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FTextEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FTextEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -24,6 +24,6 @@ public TextEvent (Object source, int id)\n \n   public String paramString ()\n   {\n-    return super.paramString ();\n+    return \"TEXT_VALUE_CHANGED\";\n   }\n }"}, {"sha": "675adecb340688ab6e1a0f59748045466f53aacd", "filename": "libjava/java/awt/event/WindowEvent.java", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -35,6 +35,31 @@ public Window getWindow ()\n \n   public String paramString ()\n   {\n-    return super.paramString ();\n+    String r;\n+    switch (id)\n+      {\n+        case WINDOW_ACTIVATED:\n+\t  r = \"WINDOW_ACTIVATED\";\n+\tbreak;\n+\tcase WINDOW_CLOSED:\n+\t  r = \"WINDOW_CLOSED\";\n+\tbreak;\n+\tcase WINDOW_CLOSING:\n+\t  r = \"WINDOW_CLOSING\";\n+\tbreak;\n+\tcase WINDOW_DEACTIVATED:\n+\t  r = \"WINDOW_DEACTIVATED\";\n+\tbreak;\n+\tcase WINDOW_DEICONIFIED:\n+\t  r = \"WINDOW_DEICONIFIED\";\n+\tbreak;\n+\tcase WINDOW_ICONIFIED:\n+\t  r = \"WINDOW_ICONIFIED\";\n+\tbreak;\n+\tcase WINDOW_OPENED:\n+\t  r = \"WINDOW_OPENED\";\n+\tbreak;\n+      }\n+    return r;\n   }\n }"}, {"sha": "d4d8034bd132c58c1d6a1cd03c82039127bdd1f5", "filename": "libjava/java/awt/peer/ButtonPeer.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface ButtonPeer extends ComponentPeer\n+{\n+  void setLabel(String label);\n+}\n+"}, {"sha": "67c405504bb1ebe707e8c8d88d77f12e20451630", "filename": "libjava/java/awt/peer/CanvasPeer.java", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface CanvasPeer extends ComponentPeer\n+{\n+}"}, {"sha": "42c6c8f31cdd8abe1d181ba39e22e537759591cc", "filename": "libjava/java/awt/peer/CheckboxMenuItemPeer.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface CheckboxMenuItemPeer extends MenuItemPeer\n+{\n+  void setState(boolean state);\n+}\n+"}, {"sha": "b27b2cf1fc669430edacf2b6a31b5055abe7164f", "filename": "libjava/java/awt/peer/CheckboxPeer.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface CheckboxPeer extends ComponentPeer\n+{\n+  void setCheckboxGroup(java.awt.CheckboxGroup group);\n+  void setLabel(String label);\n+  void setState(boolean state);\n+}"}, {"sha": "f1006151245aaf8bcef280dbda4367ac083d80bb", "filename": "libjava/java/awt/peer/ChoicePeer.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface ChoicePeer extends ComponentPeer\n+{\n+  void add(String item, int index);\n+  void addItem(String item, int index);\n+  void remove(int index);\n+  void select(int index);\n+}\n+"}, {"sha": "883d2b398b6b494a2ca27e012ad3dea56c8f00c8", "filename": "libjava/java/awt/peer/ComponentPeer.java", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,23 +1,48 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt.peer;\n-import java.awt.*;\n \n-/* A very incomplete placeholder. */\n+import java.awt.*;\n+import java.awt.image.*;\n \n public interface ComponentPeer\n {\n-  public abstract Toolkit getToolkit ();\n-\n-  public Dimension getMinimumSize ();\n-\n-  public Dimension getPreferredSize ();\n-\n-  public void setBounds (int x, int y, int w, int h);\n+  int checkImage(Image img, int width, int height, ImageObserver o);\n+  Image createImage(ImageProducer prod);\n+  Image createImage(int width, int height);\n+  void disable();\n+  void dispose();\n+  void enable();\n+  ColorModel getColorModel();\n+  FontMetrics getFontMetrics(Font f);\n+  Graphics getGraphics();\n+  Point getLocationOnScreen();\n+  Dimension getMinimumSize();\n+  Dimension getPreferredSize();\n+  Toolkit getToolkit();\n+  void handleEvent(AWTEvent e);\n+  void hide();\n+  boolean isFocusTraversable();\n+  Dimension minimumSize();\n+  Dimension preferredSize();\n+  void paint(Graphics graphics);\n+  boolean prepareImage(Image img, int width, int height, ImageObserver o);\n+  void print(Graphics graphics);\n+  void repaint(long tm, int x, int y, int width, int height);\n+  void requestFocus();\n+  void reshape(int x, int y, int width, int height);\n+  void setBackground(Color color);\n+  void setBounds(int x, int y, int width, int height);\n+  void setCursor(Cursor cursor);\n+  void setEnabled(boolean enabled);\n+  void setFont(Font font);\n+  void setForeground(Color color);\n+  void setVisible(boolean visible);\n+  void show();\n }"}, {"sha": "8f1235cb6db01e5c6931a2d599c11974ed6dd21c", "filename": "libjava/java/awt/peer/ContainerPeer.java", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,15 +1,19 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt.peer;\n \n-/* A very incomplete placeholder. */\n+import java.awt.Insets;\n \n public interface ContainerPeer extends ComponentPeer\n {\n+  Insets insets();\n+  Insets getInsets();\n+  void beginValidate();\n+  void endValidate();\n }"}, {"sha": "009410f0e6a574580926cc7474f0d848c0992995", "filename": "libjava/java/awt/peer/DialogPeer.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface DialogPeer extends WindowPeer\n+{\n+  void setResizable(boolean resizeable);\n+  void setTitle(String title);\n+}"}, {"sha": "c378f1059f3e3c970c73e82afa2bb7f7112588fd", "filename": "libjava/java/awt/peer/FileDialogPeer.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.io.FilenameFilter;\n+\n+public interface FileDialogPeer extends DialogPeer\n+{\n+  void setDirectory(String dir);\n+  void setFile(String file);\n+  void setFilenameFilter(FilenameFilter filter);\n+}"}, {"sha": "2a65a38f5744f35bb73934601a2a40e149bdb8a0", "filename": "libjava/java/awt/peer/FontPeer.java", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface FontPeer\n+{\n+}"}, {"sha": "c47b0f5e7c43d7cb18c7b54530ac7e0a2255dedf", "filename": "libjava/java/awt/peer/FramePeer.java", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,16 +1,20 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt.peer;\n \n-/* A very incomplete placeholder. */\n+import java.awt.Image;\n+import java.awt.MenuBar;\n \n public interface FramePeer extends WindowPeer\n {\n+  void setIconImage(Image image);\n+  void setMenuBar(MenuBar mb);\n+  void setResizable(boolean resizable);\n   void setTitle(String title);\n }"}, {"sha": "4d32b7990900d55e944f7c7cd6846ac1a19becb2", "filename": "libjava/java/awt/peer/LabelPeer.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface LabelPeer extends ComponentPeer\n+{\n+  void setAlignment(int alignment);\n+  void setText(String text);\n+}"}, {"sha": "af3c1321eefcfbe382174a66a4576dc1fff532b9", "filename": "libjava/java/awt/peer/LightweightPeer.java", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface LightweightPeer extends ComponentPeer\n+{\n+}"}, {"sha": "a334e380506cdf52efa342e713e3160c4dc232ea", "filename": "libjava/java/awt/peer/ListPeer.java", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Dimension;\n+\n+public interface ListPeer extends ComponentPeer\n+{\n+  void add(String item, int index);\n+  void addItem(String item, int index);\n+  void clear();\n+  void delItems(int start_index, int end_index);\n+  void deselect(int index);\n+  int[] getSelectedIndexes();\n+  void makeVisible(int index);\n+  Dimension minimumSize(int size);\n+  Dimension preferredSize(int size);\n+  void removeAll();\n+  void select(int index);\n+  void setMultipleMode(boolean multipleMode);\n+  void setMultipleSelections(boolean multipleSelections);\n+}"}, {"sha": "e660ba26c5c7b19d6c473b0af539fd5978bcdb86", "filename": "libjava/java/awt/peer/MenuBarPeer.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Menu;\n+\n+public interface MenuBarPeer extends MenuComponentPeer\n+{\n+  void addHelpMenu(Menu menu);\n+  void addMenu(Menu menu);\n+  void delMenu(int index);\n+}"}, {"sha": "080f9ea771cc7b1c4aac9ceee34ef7fe0dbe55a8", "filename": "libjava/java/awt/peer/MenuComponentPeer.java", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,14 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface MenuComponentPeer\n+{\n+  void dispose();\n+}"}, {"sha": "555a38b25df7d88a97e2a04580a26248f8874657", "filename": "libjava/java/awt/peer/MenuItemPeer.java", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,17 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface MenuItemPeer extends MenuComponentPeer\n+{\n+  void disable();\n+  void enable();\n+  void setEnabled(boolean enabled);\n+  void setLabel(String text);\n+}"}, {"sha": "eca98dc4335a089948626c011fcf59d2e19070e9", "filename": "libjava/java/awt/peer/MenuPeer.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.MenuItem;\n+\n+public interface MenuPeer extends MenuItemPeer\n+{\n+  void addItem(MenuItem item);\n+  void addSeparator();\n+  void delItem(int index);\n+}"}, {"sha": "13b0e903c574b3e610d640f94f26a510ba24c8f0", "filename": "libjava/java/awt/peer/PanelPeer.java", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface PanelPeer extends ContainerPeer\n+{\n+}"}, {"sha": "e0b398077c1188069585bd17fcc21b8ad304b761", "filename": "libjava/java/awt/peer/PopupMenuPeer.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Event;\n+\n+public interface PopupMenuPeer extends MenuPeer\n+{\n+  void show(Event e);\n+}"}, {"sha": "fe300e423c8b04b9949d4e08cd184a42113b99f2", "filename": "libjava/java/awt/peer/ScrollPanePeer.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Adjustable;\n+\n+public interface ScrollPanePeer extends ContainerPeer\n+{\n+  void childResized(int width, int height);\n+  int getHScrollbarHeight();\n+  int getVScrollbarWidth();\n+  void setScrollPosition(int x, int y);\n+  void setUnitIncrement(Adjustable adj, int increment);\n+  void setValue(Adjustable adj, int value);\n+}"}, {"sha": "3981c22b09df5a8f5c6ca77f00aac9eb9f7233ab", "filename": "libjava/java/awt/peer/ScrollbarPeer.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface ScrollbarPeer extends ComponentPeer\n+{\n+  void setLineIncrement(int increment);\n+  void setPageIncrement(int increment);\n+  void setValues(int value, int visible, int minimum, int maximum);\n+}"}, {"sha": "ce5a294ab86a1739f6a7d091aa83c32fe5351a3a", "filename": "libjava/java/awt/peer/TextAreaPeer.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Dimension;\n+\n+public interface TextAreaPeer extends TextComponentPeer\n+{\n+  Dimension getMinimumSize(int rows, int columns);\n+  Dimension getPreferredSize(int rows, int columns);\n+  void insert(String text, int pos);\n+  void insertText(String text, int pos);\n+  Dimension minimumSize(int rows, int cols);\n+  Dimension preferredSize(int rows, int cols);\n+  void replaceRange(String text, int start, int end);\n+  void replaceText(String text, int start, int end);\n+}"}, {"sha": "ba4ce1d4df02172cd9424896a4df936cd7233f60", "filename": "libjava/java/awt/peer/TextComponentPeer.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+public interface TextComponentPeer extends ComponentPeer\n+{\n+  int getCaretPosition();\n+  int getSelectionEnd();\n+  int getSelectionStart();\n+  String getText();\n+  void select(int start, int end);\n+  void setCaretPosition(int pos);\n+  void setEditable(boolean editable);\n+  void setText(String text);\n+}"}, {"sha": "cf4d6754179d2b73140a4c42aa000ea46ccf47a8", "filename": "libjava/java/awt/peer/TextFieldPeer.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.peer;\n+\n+import java.awt.Dimension;\n+\n+public interface TextFieldPeer extends TextComponentPeer\n+{\n+  Dimension getMinimumSize(int columns);\n+  Dimension getPreferredSize(int columns);\n+  Dimension minimumSize(int columns);\n+  Dimension preferredSize(int columns);\n+  void setEchoChar(char echo);\n+  void setEchoCharacter(char echo);\n+}"}, {"sha": "d8058056973b14d147ff899374aac57d64e8325b", "filename": "libjava/java/awt/peer/WindowPeer.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -1,15 +1,15 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libjava.\n+   This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n package java.awt.peer;\n \n-/* A very incomplete placeholder. */\n-\n public interface WindowPeer extends ContainerPeer\n {\n+  void toBack();\n+  void toFront();\n }"}, {"sha": "b5edfbf20f9a276cfb5deaf7221a76a461e3d350", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a136d3ef16cf20fcd5314036508e31870b4849/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=c7a136d3ef16cf20fcd5314036508e31870b4849", "patch": "@@ -28,6 +28,12 @@\n   public ResourceBundle ()\n     {\n     }\n+    \n+  public Locale getLocale()\n+  {\n+    // FIXME: Stub added for this missing method because it is needed for AWT.\n+    return null;\n+  }\n \n   public final String getString (String key) throws MissingResourceException\n     {\n@@ -110,9 +116,14 @@ private static final ResourceBundle trySomeGetBundle (String bundleName,\n \n \t  // Look for a properties file.\n \t  {\n+\t    String prop_name = (bundleName.replace('.', '/') + \".properties\");\n+\t    System.out.println (\"trying '\" + prop_name + \"' for '\" + bundleName);\n+\t    InputStream i = ClassLoader.getSystemResourceAsStream (prop_name);\n+\t    /*\n \t    InputStream i = \n \t\tClassLoader.getSystemResourceAsStream (bundleName.replace ('.', '/') \n \t\t\t\t\t\t       + \".properties\");\n+\t    */\n \t    if (i != null)\n \t      {\n \t\ttry {"}]}