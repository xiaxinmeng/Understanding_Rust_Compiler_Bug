{"sha": "8476af981ecf1cebb425bc3d710fb5c75107d306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3NmFmOTgxZWNmMWNlYmI0MjViYzNkNzEwZmI1Yzc1MTA3ZDMwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-01T01:41:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-01T01:41:30Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Look through component-like references for setting MEM_NOTRAP_P.\n\n        * emit-rtl.c (set_mem_attributes_minus_bitpos): Look through\n        component-like references for setting MEM_NOTRAP_P.\n\n        * config/i386/i386.c (ix86_setup_incoming_varargs): Set MEM_NOTRAP_P.\n        * config/alpha/alpha.c (alpha_setup_incoming_varargs): Likewise.\n\nFrom-SVN: r103714", "tree": {"sha": "37656adfd60567afda3655c971808032e83fd90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37656adfd60567afda3655c971808032e83fd90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8476af981ecf1cebb425bc3d710fb5c75107d306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8476af981ecf1cebb425bc3d710fb5c75107d306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8476af981ecf1cebb425bc3d710fb5c75107d306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8476af981ecf1cebb425bc3d710fb5c75107d306/comments", "author": null, "committer": null, "parents": [{"sha": "04885a24b01c4c7e1ad522b0b1b9e74b6e28518a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04885a24b01c4c7e1ad522b0b1b9e74b6e28518a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04885a24b01c4c7e1ad522b0b1b9e74b6e28518a"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "7cdd2926f6ee4263d4115e75a011709eb4b95a28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8476af981ecf1cebb425bc3d710fb5c75107d306", "patch": "@@ -1,3 +1,11 @@\n+2005-08-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Look through\n+\tcomponent-like references for setting MEM_NOTRAP_P.\n+\n+\t* config/i386/i386.c (ix86_setup_incoming_varargs): Set MEM_NOTRAP_P.\n+\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Likewise.\n+\n 2005-08-31  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (expand_expr_real_1) <VIEW_CONVERT_EXPR>: Force subregs"}, {"sha": "808116a158d03ee54c8a957cb9e469b517d8b0b2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8476af981ecf1cebb425bc3d710fb5c75107d306", "patch": "@@ -6090,6 +6090,7 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n \t  tmp = gen_rtx_MEM (BLKmode,\n \t\t\t     plus_constant (virtual_incoming_args_rtx,\n \t\t\t\t\t    (cum + 6) * UNITS_PER_WORD));\n+\t  MEM_NOTRAP_P (tmp) = 1;\n \t  set_mem_alias_set (tmp, set);\n \t  move_block_from_reg (16 + cum, tmp, count);\n \t}\n@@ -6099,6 +6100,7 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n \t  tmp = gen_rtx_MEM (BLKmode,\n \t\t\t     plus_constant (virtual_incoming_args_rtx,\n \t\t\t\t\t    cum * UNITS_PER_WORD));\n+\t  MEM_NOTRAP_P (tmp) = 1;\n \t  set_mem_alias_set (tmp, set);\n \t  move_block_from_reg (16 + cum + TARGET_FPREGS*32, tmp, count);\n \t}"}, {"sha": "5f12d1a5f7e0e9e7a0ce7b3c39276d2b40176cb4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8476af981ecf1cebb425bc3d710fb5c75107d306", "patch": "@@ -3682,6 +3682,7 @@ ix86_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     {\n       mem = gen_rtx_MEM (Pmode,\n \t\t\t plus_constant (save_area, i * UNITS_PER_WORD));\n+      MEM_NOTRAP_P (mem) = 1;\n       set_mem_alias_set (mem, set);\n       emit_move_insn (mem, gen_rtx_REG (Pmode,\n \t\t\t\t\tx86_64_int_parameter_registers[i]));\n@@ -3724,6 +3725,7 @@ ix86_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t      plus_constant (save_area,\n \t\t\t\t\t     8 * REGPARM_MAX + 127)));\n       mem = gen_rtx_MEM (BLKmode, plus_constant (tmp_reg, -127));\n+      MEM_NOTRAP_P (mem) = 1;\n       set_mem_alias_set (mem, set);\n       set_mem_align (mem, BITS_PER_WORD);\n "}, {"sha": "d9e253e3ce2eccbca8d5dc16e605d93697743fcf", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8476af981ecf1cebb425bc3d710fb5c75107d306/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8476af981ecf1cebb425bc3d710fb5c75107d306", "patch": "@@ -1469,7 +1469,6 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n   MEM_VOLATILE_P (ref) |= TYPE_VOLATILE (type);\n   MEM_IN_STRUCT_P (ref) = AGGREGATE_TYPE_P (type);\n   MEM_POINTER (ref) = POINTER_TYPE_P (type);\n-  MEM_NOTRAP_P (ref) = TREE_THIS_NOTRAP (t);\n \n   /* If we are making an object of this type, or if this is a DECL, we know\n      that it is a scalar if the type is not an aggregate.  */\n@@ -1500,16 +1499,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n      the expression.  */\n   if (! TYPE_P (t))\n     {\n-      tree base = get_base_address (t);\n-      if (base && DECL_P (base)\n-\t  && TREE_READONLY (base)\n-\t  && (TREE_STATIC (base) || DECL_EXTERNAL (base)))\n-\t{\n-\t  tree base_type = TREE_TYPE (base);\n-\t  gcc_assert (!(base_type && TYPE_NEEDS_CONSTRUCTING (base_type))\n-\t\t      || DECL_ARTIFICIAL (base));\n-\t  MEM_READONLY_P (ref) = 1;\n-\t}\n+      tree base;\n \n       if (TREE_THIS_VOLATILE (t))\n \tMEM_VOLATILE_P (ref) = 1;\n@@ -1522,6 +1512,36 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);\n \n+      /* We may look through structure-like accesses for the purposes of\n+\t examining TREE_THIS_NOTRAP, but not array-like accesses.  */\n+      base = t;\n+      while (TREE_CODE (base) == COMPONENT_REF\n+\t     || TREE_CODE (base) == REALPART_EXPR\n+\t     || TREE_CODE (base) == IMAGPART_EXPR\n+\t     || TREE_CODE (base) == BIT_FIELD_REF)\n+\tbase = TREE_OPERAND (base, 0);\n+\n+      if (DECL_P (base))\n+\t{\n+\t  if (CODE_CONTAINS_STRUCT (TREE_CODE (base), TS_DECL_WITH_VIS))\n+\t    MEM_NOTRAP_P (ref) = !DECL_WEAK (base);\n+\t  else\n+\t    MEM_NOTRAP_P (ref) = 1;\n+\t}\n+      else\n+\tMEM_NOTRAP_P (ref) = TREE_THIS_NOTRAP (base);\n+\n+      base = get_base_address (base);\n+      if (base && DECL_P (base)\n+\t  && TREE_READONLY (base)\n+\t  && (TREE_STATIC (base) || DECL_EXTERNAL (base)))\n+\t{\n+\t  tree base_type = TREE_TYPE (base);\n+\t  gcc_assert (!(base_type && TYPE_NEEDS_CONSTRUCTING (base_type))\n+\t\t      || DECL_ARTIFICIAL (base));\n+\t  MEM_READONLY_P (ref) = 1;\n+\t}\n+\n       /* If this expression uses it's parent's alias set, mark it such\n \t that we won't change it.  */\n       if (component_uses_parent_alias_set (t))"}]}