{"sha": "d33fb1e6debbc2ae26e323685fd9ce321ba65418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzZmIxZTZkZWJiYzJhZTI2ZTMyMzY4NWZkOWNlMzIxYmE2NTQxOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2008-05-27T12:36:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-27T12:36:23Z"}, "message": "sem_ch3.adb (Build_Incomplete_Type_Declaration): In the case of an untagged private type with a tagged full type...\n\n2008-05-27  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch3.adb (Build_Incomplete_Type_Declaration): In the case of an\n\tuntagged private type with a tagged full type, where the full type has\n\ta self reference, create the corresponding class-wide type early, in\n\tcase the self reference is \"access T'Class\".\n\nFrom-SVN: r136025", "tree": {"sha": "8104c2a196c4475cd68d877387cf3f4fc233987f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8104c2a196c4475cd68d877387cf3f4fc233987f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33fb1e6debbc2ae26e323685fd9ce321ba65418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33fb1e6debbc2ae26e323685fd9ce321ba65418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33fb1e6debbc2ae26e323685fd9ce321ba65418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33fb1e6debbc2ae26e323685fd9ce321ba65418/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "592b9a75fcfc1c857eb7f085bd9eec541262ed68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592b9a75fcfc1c857eb7f085bd9eec541262ed68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592b9a75fcfc1c857eb7f085bd9eec541262ed68"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "4f618213fcd16dd5c5aecfc919e5976d04aa714d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33fb1e6debbc2ae26e323685fd9ce321ba65418/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33fb1e6debbc2ae26e323685fd9ce321ba65418/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d33fb1e6debbc2ae26e323685fd9ce321ba65418", "patch": "@@ -16619,7 +16619,8 @@ package body Sem_Ch3 is\n       --  view of the type.\n \n       function Designates_T (Subt : Node_Id) return Boolean;\n-      --  Check whether a node designates the enclosing record type\n+      --  Check whether a node designates the enclosing record type, or 'Class\n+      --  of that type\n \n       function Mentions_T (Acc_Def : Node_Id) return Boolean;\n       --  Check whether an access definition includes a reference to\n@@ -16637,13 +16638,25 @@ package body Sem_Ch3 is\n          Inc_T : Entity_Id;\n          H     : Entity_Id;\n \n+         --  Is_Tagged indicates whether the type is tagged. It is tagged if\n+         --  it's \"is new ... with record\" or else \"is tagged record ...\".\n+\n+         Is_Tagged : constant Boolean :=\n+             (Nkind (Type_Definition (Typ_Decl)) = N_Derived_Type_Definition\n+                 and then\n+                   Present\n+                     (Record_Extension_Part (Type_Definition (Typ_Decl))))\n+           or else\n+             (Nkind (Type_Definition (Typ_Decl)) = N_Record_Definition\n+                 and then Tagged_Present (Type_Definition (Typ_Decl)));\n+\n       begin\n          --  If there is a previous partial view, no need to create a new one\n          --  If the partial view, given by Prev, is incomplete,  If Prev is\n          --  a private declaration, full declaration is flagged accordingly.\n \n          if Prev /= Typ then\n-            if Tagged_Present (Type_Definition (Typ_Decl)) then\n+            if Is_Tagged then\n                Make_Class_Wide_Type (Prev);\n                Set_Class_Wide_Type (Typ, Class_Wide_Type (Prev));\n                Set_Etype (Class_Wide_Type (Typ), Typ);\n@@ -16652,6 +16665,15 @@ package body Sem_Ch3 is\n             return;\n \n          elsif Has_Private_Declaration (Typ) then\n+\n+            --  If we refer to T'Class inside T, and T is the completion of a\n+            --  private type, then we need to make sure the class-wide type\n+            --  exists.\n+\n+            if Is_Tagged then\n+               Make_Class_Wide_Type (Typ);\n+            end if;\n+\n             return;\n \n          --  If there was a previous anonymous access type, the incomplete\n@@ -16693,14 +16715,9 @@ package body Sem_Ch3 is\n             Analyze (Decl);\n             Set_Full_View (Inc_T, Typ);\n \n-            if (Nkind (Type_Definition (Typ_Decl)) = N_Derived_Type_Definition\n-                 and then\n-                   Present\n-                     (Record_Extension_Part (Type_Definition (Typ_Decl))))\n-              or else Tagged_Present (Type_Definition (Typ_Decl))\n-            then\n+            if Is_Tagged then\n                --  Create a common class-wide type for both views, and set\n-               --  the etype of the class-wide type to the full view.\n+               --  the Etype of the class-wide type to the full view.\n \n                Make_Class_Wide_Type (Inc_T);\n                Set_Class_Wide_Type (Typ, Class_Wide_Type (Inc_T));"}]}