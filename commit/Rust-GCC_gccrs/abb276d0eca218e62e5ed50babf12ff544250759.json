{"sha": "abb276d0eca218e62e5ed50babf12ff544250759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiMjc2ZDBlY2EyMThlNjJlNWVkNTBiYWJmMTJmZjU0NDI1MDc1OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-10T05:22:22Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-10T05:22:22Z"}, "message": "This patch fixes PR96312. Cures a used uninitialized warning.\n\n2020-08-10  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/96312\n\t* trans-expr.c (fcncall_realloc_result): Only compare shapes if\n\tlhs was allocated..\n\ngcc/testsuite/\n\tPR fortran/96312\n\t* gfortran.dg/pr96312.f90: New test.", "tree": {"sha": "af0a598439e7af193f0b3af7cf7e8bdb4766e8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af0a598439e7af193f0b3af7cf7e8bdb4766e8a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abb276d0eca218e62e5ed50babf12ff544250759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb276d0eca218e62e5ed50babf12ff544250759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb276d0eca218e62e5ed50babf12ff544250759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb276d0eca218e62e5ed50babf12ff544250759/comments", "author": null, "committer": null, "parents": [{"sha": "359815ad136ee6ad142fb54470ce79609e43ff5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359815ad136ee6ad142fb54470ce79609e43ff5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359815ad136ee6ad142fb54470ce79609e43ff5d"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "36ff9b5cbc64d5157179488763525c7da2e6debe", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb276d0eca218e62e5ed50babf12ff544250759/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb276d0eca218e62e5ed50babf12ff544250759/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=abb276d0eca218e62e5ed50babf12ff544250759", "patch": "@@ -9936,6 +9936,8 @@ fcncall_realloc_result (gfc_se *se, int rank)\n   tree tmp;\n   tree offset;\n   tree zero_cond;\n+  tree not_same_shape;\n+  stmtblock_t shape_block;\n   int n;\n \n   /* Use the allocation done by the library.  Substitute the lhs\n@@ -9965,7 +9967,11 @@ fcncall_realloc_result (gfc_se *se, int rank)\n   tmp = gfc_conv_descriptor_data_get (res_desc);\n   gfc_conv_descriptor_data_set (&se->post, desc, tmp);\n \n-  /* Check that the shapes are the same between lhs and expression.  */\n+  /* Check that the shapes are the same between lhs and expression.\n+     The evaluation of the shape is done in 'shape_block' to avoid\n+     unitialized warnings from the lhs bounds. */\n+  not_same_shape = boolean_false_node;\n+  gfc_start_block (&shape_block);\n   for (n = 0 ; n < rank; n++)\n     {\n       tree tmp1;\n@@ -9982,15 +9988,24 @@ fcncall_realloc_result (gfc_se *se, int rank)\n       tmp = fold_build2_loc (input_location, NE_EXPR,\n \t\t\t     logical_type_node, tmp,\n \t\t\t     gfc_index_zero_node);\n-      tmp = gfc_evaluate_now (tmp, &se->post);\n-      zero_cond = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n-\t\t\t\t   logical_type_node, tmp,\n-\t\t\t\t   zero_cond);\n+      tmp = gfc_evaluate_now (tmp, &shape_block);\n+      if (n == 0)\n+\tnot_same_shape = tmp;\n+      else\n+\tnot_same_shape = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n+\t\t\t\t\t  logical_type_node, tmp,\n+\t\t\t\t\t  not_same_shape);\n     }\n \n   /* 'zero_cond' being true is equal to lhs not being allocated or the\n      shapes being different.  */\n-  zero_cond = gfc_evaluate_now (zero_cond, &se->post);\n+  tmp = fold_build2_loc (input_location, TRUTH_OR_EXPR, logical_type_node,\n+\t\t\t zero_cond, not_same_shape);\n+  gfc_add_modify (&shape_block, zero_cond, tmp);\n+  tmp = gfc_finish_block (&shape_block);\n+  tmp = build3_v (COND_EXPR, zero_cond,\n+\t\t  build_empty_stmt (input_location), tmp);\n+  gfc_add_expr_to_block (&se->post, tmp);\n \n   /* Now reset the bounds returned from the function call to bounds based\n      on the lhs lbounds, except where the lhs is not allocated or the shapes"}, {"sha": "d6d8e79119fc54ed0efbfcafde72c964c489c0e1", "filename": "gcc/testsuite/gfortran.dg/pr96312.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb276d0eca218e62e5ed50babf12ff544250759/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96312.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb276d0eca218e62e5ed50babf12ff544250759/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96312.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96312.f90?ref=abb276d0eca218e62e5ed50babf12ff544250759", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! { dg-options \"-O1 -Wall\" }\n+!\n+! PR fortran/96312. The line with the call to 'matmul' gave the warning\n+! \u2018tmp.dim[0].lbound\u2019 is used uninitialized in this function\n+!\n+! Contributed by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!\n+module moda\n+contains\n+   PURE SUBROUTINE funca(arr, sz)\n+      REAL, ALLOCATABLE, DIMENSION(:, :), INTENT(OUT) :: arr\n+      integer, intent(in) :: sz\n+      allocate(arr(sz, sz))\n+      arr(:, :) = 0.\n+   END SUBROUTINE\n+end module\n+\n+module modc\n+    use moda, only: funca\n+contains\n+   PURE SUBROUTINE funcb(oarr)\n+      REAL, DIMENSION(:), INTENT(OUT)    :: oarr\n+      REAL, ALLOCATABLE, DIMENSION(:, :) :: arr\n+      real, allocatable, dimension(:) :: tmp\n+      CALL funca(arr, ubound(oarr, 1))\n+      tmp = matmul(transpose(arr),oarr)\n+      oarr = tmp*1.\n+   END SUBROUTINE funcb\n+end module"}]}