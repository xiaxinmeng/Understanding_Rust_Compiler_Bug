{"sha": "76f5f4414f0565e5753802a7dee10b88eef9d08c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmNWY0NDE0ZjA1NjVlNTc1MzgwMmE3ZGVlMTBiODhlZWY5ZDA4Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-14T10:43:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-14T10:43:30Z"}, "message": "hashtable (hashtable::m_erase): Rename to erase_node.\n\n2005-10-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/hashtable (hashtable::m_erase): Rename to erase_node.\n\t(hashtable::erase(iterator), erase(const_iterator)): Adjust.\n\nFrom-SVN: r105401", "tree": {"sha": "031057077c5637a156bf6765bc067d615925071e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031057077c5637a156bf6765bc067d615925071e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f5f4414f0565e5753802a7dee10b88eef9d08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f5f4414f0565e5753802a7dee10b88eef9d08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f5f4414f0565e5753802a7dee10b88eef9d08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f5f4414f0565e5753802a7dee10b88eef9d08c/comments", "author": null, "committer": null, "parents": [{"sha": "a93770efeb027ef5c21c5d4f60dae01fc820c4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93770efeb027ef5c21c5d4f60dae01fc820c4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93770efeb027ef5c21c5d4f60dae01fc820c4f0"}], "stats": {"total": 81, "additions": 44, "deletions": 37}, "files": [{"sha": "257e72898401a2d9ecd86e1b13b219cbab245391", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f5f4414f0565e5753802a7dee10b88eef9d08c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f5f4414f0565e5753802a7dee10b88eef9d08c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=76f5f4414f0565e5753802a7dee10b88eef9d08c", "patch": "@@ -1,3 +1,8 @@\n+2005-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/hashtable (hashtable::m_erase): Rename to erase_node.\n+\t(hashtable::erase(iterator), erase(const_iterator)): Adjust.\n+\n 2005-10-13  Richard Earnshaw  <richard.earnsahw@arm.com>\n \n \tPR libstdc++/23926"}, {"sha": "0add0e3a96639c8e15f2cf448e091ade6d1fc651", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f5f4414f0565e5753802a7dee10b88eef9d08c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f5f4414f0565e5753802a7dee10b88eef9d08c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=76f5f4414f0565e5753802a7dee10b88eef9d08c", "patch": "@@ -329,7 +329,8 @@ namespace Internal\n       { \n \thashtable_iterator tmp(*this);\n \tthis->incr();\n-\treturn tmp; }\n+\treturn tmp;\n+      }\n     };\n \n   template<typename Value, bool constant_iterators, bool cache>\n@@ -374,7 +375,8 @@ namespace Internal\n       { \n \thashtable_const_iterator tmp(*this);\n \tthis->incr();\n-\treturn tmp; }\n+\treturn tmp;\n+      }\n     };\n } // namespace Internal\n \n@@ -1169,6 +1171,9 @@ namespace tr1\n       iterator\n       insert(const value_type&, std::tr1::false_type);\n \n+      void\n+      erase_node(node*, node**);\n+\n     public:\t\t\t\t// Insert and erase\n       Insert_Return_Type\n       insert(const value_type& v) \n@@ -1191,25 +1196,21 @@ namespace tr1\n \n       iterator\n       erase(iterator);\n-  \n+\n       const_iterator\n       erase(const_iterator);\n- \n+\n       size_type\n       erase(const key_type&);\n \n       iterator\n       erase(iterator, iterator);\n-\t\n+\n       const_iterator\n       erase(const_iterator, const_iterator);\n \n       void\n       clear();\n-      \n-    private:\n-      // For erase(iterator) and erase(const_iterator).\n-      void m_erase(node*, node**);\n \n     public:\n       // Set number of buckets to be apropriate for container of n element.\n@@ -1673,6 +1674,33 @@ namespace tr1\n       return iterator(new_node, m_buckets + n);\n     }\n \n+  // For erase(iterator) and erase(const_iterator).\n+  template<typename K, typename V, \n+\t   typename A, typename Ex, typename Eq,\n+\t   typename H1, typename H2, typename H, typename RP,\n+\t   bool c, bool ci, bool u>\n+    void\n+    hashtable<K, V, A, Ex, Eq, H1, H2, H, RP, c, ci, u>::\n+    erase_node(node* p, node** b)\n+    {\n+      node* cur = *b;\n+      if (cur == p)\n+\t*b = cur->m_next;\n+      else\n+\t{\n+\t  node* next = cur->m_next;\n+\t  while (next != p)\n+\t    {\n+\t      cur = next;\n+\t      next = cur->m_next;\n+\t    }\n+\t  cur->m_next = next->m_next;\n+\t}\n+\n+      m_deallocate_node (p);\n+      --m_element_count;\n+    }\n+\n   template<typename K, typename V, \n \t   typename A, typename Ex, typename Eq,\n \t   typename H1, typename H2, typename H, typename RP,\n@@ -1702,7 +1730,7 @@ namespace tr1\n     {\n       iterator result = i;\n       ++result;\n-      m_erase(i.m_cur_node, i.m_cur_bucket);\n+      erase_node(i.m_cur_node, i.m_cur_bucket);\n       return result;\n     }\n   \n@@ -1716,7 +1744,7 @@ namespace tr1\n     {\n       const_iterator result = i;\n       ++result;\n-      m_erase(i.m_cur_node, i.m_cur_bucket);\n+      erase_node(i.m_cur_node, i.m_cur_bucket);\n       return result;\n     }\n \n@@ -1825,32 +1853,6 @@ namespace tr1\n \t  __throw_exception_again;\n \t}\n     }\n-\n-  template<typename K, typename V, \n-\t   typename A, typename Ex, typename Eq,\n-\t   typename H1, typename H2, typename H, typename RP,\n-\t   bool c, bool ci, bool u>\n-    void\n-    hashtable<K, V, A, Ex, Eq, H1, H2, H, RP, c, ci, u>::\n-    m_erase(node* p, node** b)\n-    {\n-      node* cur = *b;\n-      if (cur == p)\n-\t*b = cur->m_next;\n-      else\n-\t{\n-\t  node* next = cur->m_next;\n-\t  while (next != p)\n-\t    {\n-\t      cur = next;\n-\t      next = cur->m_next;\n-\t    }\n-\t  cur->m_next = next->m_next;\n-\t}\n-\n-      m_deallocate_node (p);\n-      --m_element_count;\n-    }\n }\n }\t\t\t\t// Namespace std::tr1\n "}]}