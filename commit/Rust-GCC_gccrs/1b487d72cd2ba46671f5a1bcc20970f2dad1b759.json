{"sha": "1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "node_id": "C_kwDOANBUbNoAKDFiNDg3ZDcyY2QyYmE0NjY3MWY1YTFiY2MyMDk3MGYyZGFkMWI3NTk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-10T16:07:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-10T16:07:28Z"}, "message": "Remove tree addressable flags from back-end local and fnparm decl creation", "tree": {"sha": "a1c1a61fd3031416ca3bc600212cd13e51f727b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c1a61fd3031416ca3bc600212cd13e51f727b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49dd22fc233f3b7b7dcca4bd1ba2e7ea6dea71c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49dd22fc233f3b7b7dcca4bd1ba2e7ea6dea71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49dd22fc233f3b7b7dcca4bd1ba2e7ea6dea71c"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "4ca26ecf80ecfb4f87a303520623c7e37e7dcc1c", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "patch": "@@ -43,19 +43,18 @@ class CompileFnParam : public HIRCompileBase\n     if (!pattern.is_mut ())\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n-    bool address_taken = false;\n-    compiled_param = ctx->get_backend ()->parameter_variable (\n-      fndecl, pattern.get_identifier (), decl_type, address_taken, locus);\n+    compiled_param\n+      = ctx->get_backend ()->parameter_variable (fndecl,\n+\t\t\t\t\t\t pattern.get_identifier (),\n+\t\t\t\t\t\t decl_type, locus);\n   }\n \n   void visit (HIR::WildcardPattern &pattern) override\n   {\n     decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n-    bool address_taken = false;\n     compiled_param\n-      = ctx->get_backend ()->parameter_variable (fndecl, \"_\", decl_type,\n-\t\t\t\t\t\t address_taken, locus);\n+      = ctx->get_backend ()->parameter_variable (fndecl, \"_\", decl_type, locus);\n   }\n \n private:\n@@ -82,9 +81,8 @@ class CompileSelfParam : public HIRCompileBase\n     if (is_immutable)\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n-    bool address_taken = false;\n     return ctx->get_backend ()->parameter_variable (fndecl, \"self\", decl_type,\n-\t\t\t\t\t\t    address_taken, locus);\n+\t\t\t\t\t\t    locus);\n   }\n };\n "}, {"sha": "7bc37eb3ad616b4c9e646d1eb04d12b15323c96c", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "patch": "@@ -55,26 +55,19 @@ class CompileVarDecl : public HIRCompileBase\n     if (!pattern.is_mut ())\n       translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n-    // this gets updated when the compilation _actually_ wants to take an\n-    // address\n-    bool address_taken = false;\n     compiled_variable\n       = ctx->get_backend ()->local_variable (fndecl, pattern.get_identifier (),\n \t\t\t\t\t     translated_type, NULL /*decl_var*/,\n-\t\t\t\t\t     address_taken, locus);\n+\t\t\t\t\t     locus);\n   }\n \n   void visit (HIR::WildcardPattern &pattern) override\n   {\n     translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n-    // this gets updated when the compilation _actually_ wants to take an\n-    // address\n-    bool address_taken = false;\n     compiled_variable\n       = ctx->get_backend ()->local_variable (fndecl, \"_\", translated_type,\n-\t\t\t\t\t     NULL /*decl_var*/, address_taken,\n-\t\t\t\t\t     locus);\n+\t\t\t\t\t     NULL /*decl_var*/, locus);\n   }\n \n private:"}, {"sha": "f7a1ac60471e71b18d705de4cb27643a4788cfda", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "patch": "@@ -458,15 +458,14 @@ class Backend\n   // the frontend will call init_statement to set the initial value.\n   virtual Bvariable *local_variable (tree function, const std::string &name,\n \t\t\t\t     tree type, Bvariable *decl_var,\n-\t\t\t\t     bool is_address_taken, Location location)\n+\t\t\t\t     Location location)\n     = 0;\n \n   // Create a function parameter.  This is an incoming parameter, not\n   // a result parameter (result parameters are treated as local\n   // variables).  The arguments are as for local_variable.\n   virtual Bvariable *parameter_variable (tree function, const std::string &name,\n-\t\t\t\t\t tree type, bool is_address_taken,\n-\t\t\t\t\t Location location)\n+\t\t\t\t\t tree type, Location location)\n     = 0;\n \n   // Create a static chain parameter.  This is the closure parameter."}, {"sha": "86a4106162c6b64edae3f453c83f8716ef19b134", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b487d72cd2ba46671f5a1bcc20970f2dad1b759/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=1b487d72cd2ba46671f5a1bcc20970f2dad1b759", "patch": "@@ -310,11 +310,10 @@ class Gcc_backend : public Backend\n \n   void global_variable_set_init (Bvariable *, tree);\n \n-  Bvariable *local_variable (tree, const std::string &, tree, Bvariable *, bool,\n+  Bvariable *local_variable (tree, const std::string &, tree, Bvariable *,\n \t\t\t     Location);\n \n-  Bvariable *parameter_variable (tree, const std::string &, tree, bool,\n-\t\t\t\t Location);\n+  Bvariable *parameter_variable (tree, const std::string &, tree, Location);\n \n   Bvariable *static_chain_variable (tree, const std::string &, tree, Location);\n \n@@ -2464,16 +2463,15 @@ Gcc_backend::global_variable_set_init (Bvariable *var, tree expr_tree)\n Bvariable *\n Gcc_backend::local_variable (tree function, const std::string &name,\n \t\t\t     tree type_tree, Bvariable *decl_var,\n-\t\t\t     bool is_address_taken, Location location)\n+\t\t\t     Location location)\n {\n   if (type_tree == error_mark_node)\n     return this->error_variable ();\n   tree decl = build_decl (location.gcc_location (), VAR_DECL,\n \t\t\t  get_identifier_from_string (name), type_tree);\n   DECL_CONTEXT (decl) = function;\n   TREE_USED (decl) = 1;\n-  if (is_address_taken)\n-    TREE_ADDRESSABLE (decl) = 1;\n+\n   if (decl_var != NULL)\n     {\n       DECL_HAS_VALUE_EXPR_P (decl) = 1;\n@@ -2487,8 +2485,7 @@ Gcc_backend::local_variable (tree function, const std::string &name,\n \n Bvariable *\n Gcc_backend::parameter_variable (tree function, const std::string &name,\n-\t\t\t\t tree type_tree, bool is_address_taken,\n-\t\t\t\t Location location)\n+\t\t\t\t tree type_tree, Location location)\n {\n   if (type_tree == error_mark_node)\n     return this->error_variable ();\n@@ -2497,8 +2494,6 @@ Gcc_backend::parameter_variable (tree function, const std::string &name,\n   DECL_CONTEXT (decl) = function;\n   DECL_ARG_TYPE (decl) = type_tree;\n   TREE_USED (decl) = 1;\n-  if (is_address_taken)\n-    TREE_ADDRESSABLE (decl) = 1;\n   rust_preserve_from_gc (decl);\n   return new Bvariable (decl);\n }"}]}