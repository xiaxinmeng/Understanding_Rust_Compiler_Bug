{"sha": "a6d31e8499c5bb691feef26f3a5e6562129eec42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkMzFlODQ5OWM1YmI2OTFmZWVmMjZmM2E1ZTY1NjIxMjllZWM0Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-07T13:41:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-07T13:41:20Z"}, "message": "class.c (layout_class_type): Restructure overlong-bitfield tpe search.\n\n\t* class.c (layout_class_type): Restructure overlong-bitfield tpe\n\tsearch.\n\nFrom-SVN: r248971", "tree": {"sha": "bf5e6dfe8190f774703697026d6f9fcac7768161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5e6dfe8190f774703697026d6f9fcac7768161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6d31e8499c5bb691feef26f3a5e6562129eec42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d31e8499c5bb691feef26f3a5e6562129eec42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d31e8499c5bb691feef26f3a5e6562129eec42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d31e8499c5bb691feef26f3a5e6562129eec42/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f8d29a497f8d0f97ace6a4459dd069564dc128b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8d29a497f8d0f97ace6a4459dd069564dc128b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8d29a497f8d0f97ace6a4459dd069564dc128b"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "8f377406baa7ea0e3ec7b51de1a1e95853f4664b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d31e8499c5bb691feef26f3a5e6562129eec42/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d31e8499c5bb691feef26f3a5e6562129eec42/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6d31e8499c5bb691feef26f3a5e6562129eec42", "patch": "@@ -1,3 +1,8 @@\n+2017-06-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (layout_class_type): Restructure overlong-bitfield tpe\n+\tsearch.\n+\n 2017-06-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/80990"}, {"sha": "227466ec913b34f206e79cf3ebebd452d92b28aa", "filename": "gcc/cp/class.c", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d31e8499c5bb691feef26f3a5e6562129eec42/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d31e8499c5bb691feef26f3a5e6562129eec42/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a6d31e8499c5bb691feef26f3a5e6562129eec42", "patch": "@@ -6426,41 +6426,39 @@ layout_class_type (tree t, tree *virtuals_p)\n       if (DECL_C_BIT_FIELD (field)\n \t  && tree_int_cst_lt (TYPE_SIZE (type), DECL_SIZE (field)))\n \t{\n-\t  unsigned int itk;\n-\t  tree integer_type;\n \t  bool was_unnamed_p = false;\n \t  /* We must allocate the bits as if suitably aligned for the\n-\t     longest integer type that fits in this many bits.  type\n-\t     of the field.  Then, we are supposed to use the left over\n-\t     bits as additional padding.  */\n-\t  for (itk = itk_char; itk != itk_none; ++itk)\n-\t    if (integer_types[itk] != NULL_TREE\n-\t\t&& (tree_int_cst_lt (size_int (MAX_FIXED_MODE_SIZE),\n-\t\t\t\t     TYPE_SIZE (integer_types[itk]))\n-\t\t    || tree_int_cst_lt (DECL_SIZE (field),\n-\t\t\t\t\tTYPE_SIZE (integer_types[itk]))))\n-\t      break;\n-\n-\t  /* ITK now indicates a type that is too large for the\n-\t     field.  We have to back up by one to find the largest\n-\t     type that fits.  */\n-\t  do\n-\t  {\n-            --itk;\n-\t    integer_type = integer_types[itk];\n-\t  } while (itk > 0 && integer_type == NULL_TREE);\n+\t     longest integer type that fits in this many bits.  Then,\n+\t     we are supposed to use the left over bits as additional\n+\t     padding.  */\n+\n+\t  /* Do not pick a type bigger than MAX_FIXED_MODE_SIZE.  */\n+\t  tree limit = size_int (MAX_FIXED_MODE_SIZE);\n+\t  if (tree_int_cst_lt (DECL_SIZE (field), limit))\n+\t    limit = DECL_SIZE (field);\n+\n+\t  tree integer_type = integer_types[itk_char];\n+\t  for (unsigned itk = itk_char; itk != itk_none; itk++)\n+\t    if (tree next = integer_types[itk])\n+\t      {\n+\t\tif (tree_int_cst_lt (limit, TYPE_SIZE (next)))\n+\t\t  /* Too big, so our current guess is what we want.  */\n+\t\t  break;\n+\t\t/* Not bigger than limit, ok  */\n+\t\tinteger_type = next;\n+\t      }\n \n \t  /* Figure out how much additional padding is required.  */\n-\t  if (tree_int_cst_lt (TYPE_SIZE (integer_type), DECL_SIZE (field)))\n-\t    {\n-\t      if (TREE_CODE (t) == UNION_TYPE)\n-\t\t/* In a union, the padding field must have the full width\n-\t\t   of the bit-field; all fields start at offset zero.  */\n-\t\tpadding = DECL_SIZE (field);\n-\t      else\n-\t\tpadding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n-\t\t\t\t      TYPE_SIZE (integer_type));\n-\t    }\n+\t  if (TREE_CODE (t) == UNION_TYPE)\n+\t    /* In a union, the padding field must have the full width\n+\t       of the bit-field; all fields start at offset zero.  */\n+\t    padding = DECL_SIZE (field);\n+\t  else\n+\t    padding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n+\t\t\t\t  TYPE_SIZE (integer_type));\n+\n+ \t  if (integer_zerop (padding))\n+\t    padding = NULL_TREE;\n \n \t  /* An unnamed bitfield does not normally affect the\n \t     alignment of the containing class on a target where"}]}