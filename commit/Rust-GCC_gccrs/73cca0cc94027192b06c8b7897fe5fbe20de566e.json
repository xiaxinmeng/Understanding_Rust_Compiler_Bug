{"sha": "73cca0cc94027192b06c8b7897fe5fbe20de566e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjY2EwY2M5NDAyNzE5MmIwNmM4Yjc4OTdmZTVmYmUyMGRlNTY2ZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-01-30T17:20:39Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-01-30T17:20:39Z"}, "message": "re PR rtl-optimization/56144 (ICE in get_reload_reg, at lra-constraints.c:421)\n\n2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/56144\n\t* lra-constraints.c (get_reload_reg): Don't reuse reload pseudo\n\tfor values with side effects.\n\n2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/56144\n\t* gcc.dg/pr56144.c: New.\n\nFrom-SVN: r195582", "tree": {"sha": "e8f9d6d245207058ab1c9ff579bc2e00dd067178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f9d6d245207058ab1c9ff579bc2e00dd067178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73cca0cc94027192b06c8b7897fe5fbe20de566e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cca0cc94027192b06c8b7897fe5fbe20de566e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cca0cc94027192b06c8b7897fe5fbe20de566e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cca0cc94027192b06c8b7897fe5fbe20de566e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "162b4e41267d991038ff159a28a78388608a99ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162b4e41267d991038ff159a28a78388608a99ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162b4e41267d991038ff159a28a78388608a99ff"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "0eb5f7c3e3b7725cb9cddd871a0cb2ef743565a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73cca0cc94027192b06c8b7897fe5fbe20de566e", "patch": "@@ -1,3 +1,9 @@\n+2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/56144\n+\t* lra-constraints.c (get_reload_reg): Don't reuse reload pseudo\n+\tfor values with side effects.\n+\n 2013-01-30  Richard Biener  <rguenther@suse.de>\n \n \t* sparseset.h (sparseset_bit_p): Use gcc_checking_assert."}, {"sha": "cc288540fc2d6095b28c5d229c01ec19757ab5cd", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=73cca0cc94027192b06c8b7897fe5fbe20de566e", "patch": "@@ -414,24 +414,26 @@ get_reload_reg (enum op_type type, enum machine_mode mode, rtx original,\n \t= lra_create_new_reg_with_unique_value (mode, original, rclass, title);\n       return true;\n     }\n-  for (i = 0; i < curr_insn_input_reloads_num; i++)\n-    if (rtx_equal_p (curr_insn_input_reloads[i].input, original)\n-\t&& in_class_p (curr_insn_input_reloads[i].reg, rclass, &new_class))\n-      {\n-\tlra_assert (! side_effects_p (original));\n-\t*result_reg = curr_insn_input_reloads[i].reg;\n-\tregno = REGNO (*result_reg);\n-\tif (lra_dump_file != NULL)\n-\t  {\n-\t    fprintf (lra_dump_file, \"\t Reuse r%d for reload \", regno);\n-\t    dump_value_slim (lra_dump_file, original, 1);\n-\t  }\n-\tif (new_class != lra_get_allocno_class (regno))\n-\t  change_class (regno, new_class, \", change\", false);\n-\tif (lra_dump_file != NULL)\n-\t  fprintf (lra_dump_file, \"\\n\");\n-\treturn false;\n-      }\n+  /* Prevent reuse value of expression with side effects,\n+     e.g. volatile memory.  */\n+  if (! side_effects_p (original))\n+    for (i = 0; i < curr_insn_input_reloads_num; i++)\n+      if (rtx_equal_p (curr_insn_input_reloads[i].input, original)\n+\t  && in_class_p (curr_insn_input_reloads[i].reg, rclass, &new_class))\n+\t{\n+\t  *result_reg = curr_insn_input_reloads[i].reg;\n+\t  regno = REGNO (*result_reg);\n+\t  if (lra_dump_file != NULL)\n+\t    {\n+\t      fprintf (lra_dump_file, \"\t Reuse r%d for reload \", regno);\n+\t      dump_value_slim (lra_dump_file, original, 1);\n+\t    }\n+\t  if (new_class != lra_get_allocno_class (regno))\n+\t    change_class (regno, new_class, \", change\", false);\n+\t  if (lra_dump_file != NULL)\n+\t    fprintf (lra_dump_file, \"\\n\");\n+\t  return false;\n+\t}\n   *result_reg = lra_create_new_reg (mode, original, rclass, title);\n   lra_assert (curr_insn_input_reloads_num < LRA_MAX_INSN_RELOADS);\n   curr_insn_input_reloads[curr_insn_input_reloads_num].input = original;"}, {"sha": "17c91ee86283c3b5c7b76594ba091df3feec9f1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73cca0cc94027192b06c8b7897fe5fbe20de566e", "patch": "@@ -1,10 +1,15 @@\n+2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/56144\n+\t* gcc.dg/pr56144.c: New.\n+\n 2013-01-30  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/cpp0x/constexpr-53094-2.C: Ignore non-standard ABI\n \tmessage.\n \t* g++.dg/cpp0x/constexpr-53094-3.C: Same.\n \t* g++.dg/cpp0x/constexpr-55573.C: Same\n-\t\n+\n 2013-01-30  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR tree-optimization/56064"}, {"sha": "4b98225900fede9a9ef009f70c6ea93ef0fca424", "filename": "gcc/testsuite/gcc.dg/pr56144.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cca0cc94027192b06c8b7897fe5fbe20de566e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56144.c?ref=73cca0cc94027192b06c8b7897fe5fbe20de566e", "patch": "@@ -0,0 +1,35 @@\n+/* PR rtl-optimization/56144 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int a;\n+union U0 { volatile unsigned f2, f4; };\n+volatile int b;\n+static union U0 c;\n+volatile unsigned d, f;\n+volatile int e, g, h, i, j, k, l, m, n, o, p;\n+int\n+main ()\n+{\n+  a = b;\n+  a += c.f2;\n+  a += c.f4;\n+  unsigned q = h;\n+  a += q;\n+  q = g;\n+  a += q;\n+  a += f;\n+  q = e;\n+  a += q;\n+  a += d;\n+  a += 2L;\n+  a += j;\n+  a += i;\n+  a += k;\n+  a += p;\n+  a += o;\n+  a += n;\n+  a += m;\n+  a += l;\n+  return 0;\n+}"}]}