{"sha": "6f5c15202db6f8e32c0b0005fb929b437841378b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1YzE1MjAyZGI2ZjhlMzJjMGIwMDA1ZmI5MjliNDM3ODQxMzc4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-07-27T07:15:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-07-27T07:15:45Z"}, "message": "df.h (df_mw_hardreg): Remove \"loc\" field.\n\ngcc/\n\t* df.h (df_mw_hardreg): Remove \"loc\" field.\n\t* df-scan.c (df_ref_record): Don't set it.  Remove redundant\n\tlocal variable.\n\t* df-problems.c (df_whole_mw_reg_unused_p): New function,\n\tsplit out from df_set_unused_notes_for_mw.  Return false for\n\tpartial references.  Assert that mw_reg is a REG when returning true.\n\t(df_set_unused_notes_for_mw): Use it.  Use mw_reg instead of *loc.\n\t(df_whole_mw_reg_dead_p): New function, split out from\n\tdf_set_dead_notes_for_mw.  Return false for partial references.\n\tAssert that mw_reg is a REG when returning true.\n\t(df_set_dead_notes_for_mw): Use it.  Use mw_reg instead of *loc.\n\tRemove redundant bitmap check.\n\nFrom-SVN: r126970", "tree": {"sha": "2124663a46dfbe425b1fd38aa2eb18a8e4d6fe02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2124663a46dfbe425b1fd38aa2eb18a8e4d6fe02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f5c15202db6f8e32c0b0005fb929b437841378b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5c15202db6f8e32c0b0005fb929b437841378b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5c15202db6f8e32c0b0005fb929b437841378b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5c15202db6f8e32c0b0005fb929b437841378b/comments", "author": null, "committer": null, "parents": [{"sha": "23815ffed019aa06977c195519f3b345b3380fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23815ffed019aa06977c195519f3b345b3380fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23815ffed019aa06977c195519f3b345b3380fe2"}], "stats": {"total": 109, "additions": 77, "deletions": 32}, "files": [{"sha": "4865f2be9331f8bdceb8440319b4bba3c01c45c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f5c15202db6f8e32c0b0005fb929b437841378b", "patch": "@@ -1,3 +1,18 @@\n+2007-07-27  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* df.h (df_mw_hardreg): Remove \"loc\" field.\n+\t* df-scan.c (df_ref_record): Don't set it.  Remove redundant\n+\tlocal variable.\n+\t* df-problems.c (df_whole_mw_reg_unused_p): New function,\n+\tsplit out from df_set_unused_notes_for_mw.  Return false for\n+\tpartial references.  Assert that mw_reg is a REG when returning true.\n+\t(df_set_unused_notes_for_mw): Use it.  Use mw_reg instead of *loc.\n+\t(df_whole_mw_reg_dead_p): New function, split out from\n+\tdf_set_dead_notes_for_mw.  Return false for partial references.\n+\tAssert that mw_reg is a REG when returning true.\n+\t(df_set_dead_notes_for_mw): Use it.  Use mw_reg instead of *loc.\n+\tRemove redundant bitmap check.\n+\n 2007-07-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/ia64/t-ia64 ($(T)crtbegin.o): Removed."}, {"sha": "b3ae9a1620fe01555fb445d9161b5573fd83329e", "filename": "gcc/df-problems.c", "status": "modified", "additions": 61, "deletions": 28, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=6f5c15202db6f8e32c0b0005fb929b437841378b", "patch": "@@ -3716,6 +3716,32 @@ df_set_note (enum reg_note note_type, rtx insn, rtx old, rtx reg)\n   return old;\n }\n \n+/* A subroutine of df_set_unused_notes_for_mw, with a selection of its\n+   arguments.  Return true if the register value described by MWS's\n+   mw_reg is known to be completely unused, and if mw_reg can therefore\n+   be used in a REG_UNUSED note.  */\n+\n+static bool\n+df_whole_mw_reg_unused_p (struct df_mw_hardreg *mws,\n+\t\t\t  bitmap live, bitmap artificial_uses)\n+{\n+  unsigned int r;\n+\n+  /* If MWS describes a partial reference, create REG_UNUSED notes for\n+     individual hard registers.  */\n+  if (mws->flags & DF_REF_PARTIAL)\n+    return false;\n+\n+  /* Likewise if some part of the register is used.  */\n+  for (r = mws->start_regno; r <= mws->end_regno; r++)\n+    if (bitmap_bit_p (live, r)\n+\t|| bitmap_bit_p (artificial_uses, r))\n+      return false;\n+\n+  gcc_assert (REG_P (mws->mw_reg));\n+  return true;\n+}\n+\n /* Set the REG_UNUSED notes for the multiword hardreg defs in INSN\n    based on the bits in LIVE.  Do not generate notes for registers in\n    artificial uses.  DO_NOT_GEN is updated so that REG_DEAD notes are\n@@ -3728,26 +3754,18 @@ df_set_unused_notes_for_mw (rtx insn, rtx old, struct df_mw_hardreg *mws,\n \t\t\t    bitmap live, bitmap do_not_gen, \n \t\t\t    bitmap artificial_uses)\n {\n-  bool all_dead = true;\n   unsigned int r;\n   \n #ifdef REG_DEAD_DEBUGGING\n   if (dump_file)\n     fprintf (dump_file, \"mw_set_unused looking at mws[%d..%d]\\n\", \n \t     mws->start_regno, mws->end_regno);\n #endif\n-  for (r=mws->start_regno; r <= mws->end_regno; r++)\n-    if ((bitmap_bit_p (live, r))\n-\t|| bitmap_bit_p (artificial_uses, r))\n-      {\n-\tall_dead = false;\n-\tbreak;\n-      }\n-  \n-  if (all_dead)\n+\n+  if (df_whole_mw_reg_unused_p (mws, live, artificial_uses))\n     {\n       unsigned int regno = mws->start_regno;\n-      old = df_set_note (REG_UNUSED, insn, old, *(mws->loc));\n+      old = df_set_note (REG_UNUSED, insn, old, mws->mw_reg);\n \n #ifdef REG_DEAD_DEBUGGING\n       df_print_note (\"adding 1: \", insn, REG_NOTES (insn));\n@@ -3772,6 +3790,34 @@ df_set_unused_notes_for_mw (rtx insn, rtx old, struct df_mw_hardreg *mws,\n }\n \n \n+/* A subroutine of df_set_dead_notes_for_mw, with a selection of its\n+   arguments.  Return true if the register value described by MWS's\n+   mw_reg is known to be completely dead, and if mw_reg can therefore\n+   be used in a REG_DEAD note.  */\n+\n+static bool\n+df_whole_mw_reg_dead_p (struct df_mw_hardreg *mws,\n+\t\t\tbitmap live, bitmap artificial_uses,\n+\t\t\tbitmap do_not_gen)\n+{\n+  unsigned int r;\n+\n+  /* If MWS describes a partial reference, create REG_DEAD notes for\n+     individual hard registers.  */\n+  if (mws->flags & DF_REF_PARTIAL)\n+    return false;\n+\n+  /* Likewise if some part of the register is not dead.  */\n+  for (r = mws->start_regno; r <= mws->end_regno; r++)\n+    if (bitmap_bit_p (live, r)\n+\t|| bitmap_bit_p (artificial_uses, r)\n+\t|| bitmap_bit_p (do_not_gen, r))\n+      return false;\n+\n+  gcc_assert (REG_P (mws->mw_reg));\n+  return true;\n+}\n+\n /* Set the REG_DEAD notes for the multiword hardreg use in INSN based\n    on the bits in LIVE.  DO_NOT_GEN is used to keep REG_DEAD notes\n    from being set if the instruction both reads and writes the\n@@ -3782,7 +3828,6 @@ df_set_dead_notes_for_mw (rtx insn, rtx old, struct df_mw_hardreg *mws,\n \t\t\t  bitmap live, bitmap do_not_gen,\n \t\t\t  bitmap artificial_uses)\n {\n-  bool all_dead = true;\n   unsigned int r;\n   \n #ifdef REG_DEAD_DEBUGGING\n@@ -3798,25 +3843,13 @@ df_set_dead_notes_for_mw (rtx insn, rtx old, struct df_mw_hardreg *mws,\n     }\n #endif\n \n-  for (r = mws->start_regno; r <= mws->end_regno; r++)\n-    if ((bitmap_bit_p (live, r))\n-\t|| bitmap_bit_p (artificial_uses, r)\n-\t|| bitmap_bit_p (do_not_gen, r))\n-      {\n-\tall_dead = false;\n-\tbreak;\n-      }\n-  \n-  if (all_dead)\n+  if (df_whole_mw_reg_dead_p (mws, live, artificial_uses, do_not_gen))\n     {\n-      if (!bitmap_bit_p (do_not_gen, mws->start_regno))\n-\t{\n-\t  /* Add a dead note for the entire multi word register.  */\n-\t  old = df_set_note (REG_DEAD, insn, old, *(mws->loc));\n+      /* Add a dead note for the entire multi word register.  */\n+      old = df_set_note (REG_DEAD, insn, old, mws->mw_reg);\n #ifdef REG_DEAD_DEBUGGING\n-\t  df_print_note (\"adding 1: \", insn, REG_NOTES (insn));\n+      df_print_note (\"adding 1: \", insn, REG_NOTES (insn));\n #endif\n-\t}\n     }\n   else\n     {"}, {"sha": "6e622f8460daeaad063560c54fcd13d2eea4e949", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=6f5c15202db6f8e32c0b0005fb929b437841378b", "patch": "@@ -2625,7 +2625,6 @@ df_ref_record (struct df_collection_rec *collection_rec,\n \t       enum df_ref_type ref_type, \n \t       enum df_ref_flags ref_flags) \n {\n-  rtx oldreg = reg;\n   unsigned int regno;\n \n   gcc_assert (REG_P (reg) || GET_CODE (reg) == SUBREG);\n@@ -2656,15 +2655,14 @@ df_ref_record (struct df_collection_rec *collection_rec,\n \t{\n \t  /* Sets to a subreg of a multiword register are partial. \n \t     Sets to a non-subreg of a multiword register are not.  */\n-\t  if (GET_CODE (oldreg) == SUBREG)\n+\t  if (GET_CODE (reg) == SUBREG)\n \t    ref_flags |= DF_REF_PARTIAL;\n \t  ref_flags |= DF_REF_MW_HARDREG;\n \n \t  hardreg = pool_alloc (problem_data->mw_reg_pool);\n \t  hardreg->type = ref_type;\n \t  hardreg->flags = ref_flags;\n \t  hardreg->mw_reg = reg;\n-\t  hardreg->loc = loc;\n \t  hardreg->start_regno = regno;\n \t  hardreg->end_regno = endregno - 1;\n \t  hardreg->mw_order = df->ref_order++;"}, {"sha": "77404317e58b4b616bfc4544eedd1bbe71672ff0", "filename": "gcc/df.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5c15202db6f8e32c0b0005fb929b437841378b/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=6f5c15202db6f8e32c0b0005fb929b437841378b", "patch": "@@ -311,7 +311,6 @@ struct dataflow\n struct df_mw_hardreg\n {\n   rtx mw_reg;                   /* The multiword hardreg.  */ \n-  rtx *loc;\t\t\t/* The location of the reg.  */\n   enum df_ref_type type;        /* Used to see if the ref is read or write.  */\n   enum df_ref_flags flags;\t/* Various flags.  */\n   unsigned int start_regno;     /* First word of the multi word subreg.  */"}]}