{"sha": "40f6e5912288256ee8ac41474f2dce7b6881c111", "node_id": "C_kwDOANBUbNoAKDQwZjZlNTkxMjI4ODI1NmVlOGFjNDE0NzRmMmRjZTdiNjg4MWMxMTE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-19T07:39:43Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-19T07:39:43Z"}, "message": "PR c/106264: Silence warnings from __builtin_modf et al.\n\nThis middle-end patch resolves PR c/106264 which is a spurious warning\nregression caused by the tree-level expansion of modf, frexp and remquo\nproducing \"expression has no-effect\" when the built-in function's result\nis ignored.  When these built-ins were first expanded at tree-level,\nfold_builtin_n would blindly set TREE_NO_WARNING for all built-ins. Now\nthat we're more discerning, we should precisely call suppress_warning\nselectively on those COMPOUND_EXPRs that need them.\n\n2022-07-19  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\tPR c/106264\n\t* builtins.cc (fold_builtin_frexp): Call suppress_warning on\n\tCOMPOUND_EXPR to silence spurious warning if result isn't used.\n\t(fold_builtin_modf): Likewise.\n\t(do_mpfr_remquo): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR c/106264\n\t* gcc.dg/pr106264.c: New test case.", "tree": {"sha": "2c726cfe0fe286f170b53b31fc5b6917f3d8882e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c726cfe0fe286f170b53b31fc5b6917f3d8882e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f6e5912288256ee8ac41474f2dce7b6881c111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f6e5912288256ee8ac41474f2dce7b6881c111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f6e5912288256ee8ac41474f2dce7b6881c111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f6e5912288256ee8ac41474f2dce7b6881c111/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2180cdd8a0e65c2790a7732c82de87f83478487b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2180cdd8a0e65c2790a7732c82de87f83478487b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2180cdd8a0e65c2790a7732c82de87f83478487b"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "91b9c9f0875a12fb0a94db9a47ce3b4a45db5f39", "filename": "gcc/builtins.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f6e5912288256ee8ac41474f2dce7b6881c111/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f6e5912288256ee8ac41474f2dce7b6881c111/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=40f6e5912288256ee8ac41474f2dce7b6881c111", "patch": "@@ -8625,7 +8625,7 @@ fold_builtin_frexp (location_t loc, tree arg0, tree arg1, tree rettype)\n   if (TYPE_MAIN_VARIANT (TREE_TYPE (arg1)) == integer_type_node)\n     {\n       const REAL_VALUE_TYPE *const value = TREE_REAL_CST_PTR (arg0);\n-      tree frac, exp;\n+      tree frac, exp, res;\n \n       switch (value->cl)\n       {\n@@ -8656,7 +8656,9 @@ fold_builtin_frexp (location_t loc, tree arg0, tree arg1, tree rettype)\n       /* Create the COMPOUND_EXPR (*arg1 = trunc, frac). */\n       arg1 = fold_build2_loc (loc, MODIFY_EXPR, rettype, arg1, exp);\n       TREE_SIDE_EFFECTS (arg1) = 1;\n-      return fold_build2_loc (loc, COMPOUND_EXPR, rettype, arg1, frac);\n+      res = fold_build2_loc (loc, COMPOUND_EXPR, rettype, arg1, frac);\n+      suppress_warning (res, OPT_Wunused_value);\n+      return res;\n     }\n \n   return NULL_TREE;\n@@ -8682,6 +8684,7 @@ fold_builtin_modf (location_t loc, tree arg0, tree arg1, tree rettype)\n     {\n       const REAL_VALUE_TYPE *const value = TREE_REAL_CST_PTR (arg0);\n       REAL_VALUE_TYPE trunc, frac;\n+      tree res;\n \n       switch (value->cl)\n       {\n@@ -8711,8 +8714,10 @@ fold_builtin_modf (location_t loc, tree arg0, tree arg1, tree rettype)\n       arg1 = fold_build2_loc (loc, MODIFY_EXPR, rettype, arg1,\n \t\t\t  build_real (rettype, trunc));\n       TREE_SIDE_EFFECTS (arg1) = 1;\n-      return fold_build2_loc (loc, COMPOUND_EXPR, rettype, arg1,\n-\t\t\t  build_real (rettype, frac));\n+      res = fold_build2_loc (loc, COMPOUND_EXPR, rettype, arg1,\n+\t\t\t     build_real (rettype, frac));\n+      suppress_warning (res, OPT_Wunused_value);\n+      return res;\n     }\n \n   return NULL_TREE;\n@@ -10673,8 +10678,10 @@ do_mpfr_remquo (tree arg0, tree arg1, tree arg_quo)\n \t\t\t\t\t\t  integer_quo));\n \t\t  TREE_SIDE_EFFECTS (result_quo) = 1;\n \t\t  /* Combine the quo assignment with the rem.  */\n-\t\t  result = non_lvalue (fold_build2 (COMPOUND_EXPR, type,\n-\t\t\t\t\t\t    result_quo, result_rem));\n+\t\t  result = fold_build2 (COMPOUND_EXPR, type,\n+\t\t\t\t\tresult_quo, result_rem);\n+\t\t  suppress_warning (result, OPT_Wunused_value);\n+\t\t  result = non_lvalue (result);\n \t\t}\n \t    }\n \t}"}, {"sha": "6b4af4940baf7b533c77e0d5c4c04eb72a5ef922", "filename": "gcc/testsuite/gcc.dg/pr106264.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f6e5912288256ee8ac41474f2dce7b6881c111/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f6e5912288256ee8ac41474f2dce7b6881c111/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106264.c?ref=40f6e5912288256ee8ac41474f2dce7b6881c111", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+double frexp (double, int*);\n+double modf (double, double*);\n+double remquo (double, double, int*);\n+\n+int f (void)\n+{\n+  int y;\n+  frexp (1.0, &y);\n+  return y;\n+}\n+\n+double g (void)\n+{\n+  double y;\n+  modf (1.0, &y);\n+  return y;\n+}\n+\n+int h (void)\n+{\n+  int y;\n+  remquo (1.0, 1.0, &y);\n+  return y;\n+}\n+"}]}