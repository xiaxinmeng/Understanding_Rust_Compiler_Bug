{"sha": "892d824b4518db351f549a1d0fe2e423b769be11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyZDgyNGI0NTE4ZGIzNTFmNTQ5YTFkMGZlMmU0MjNiNzY5YmUxMQ==", "commit": {"author": {"name": "Michael Zolotukhin", "email": "michael.v.zolotukhin@intel.com", "date": "2011-12-21T13:34:40Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2011-12-21T13:34:40Z"}, "message": "no-section-anchors-vect-31.c: Adjust array size and test diag-scans to fix fail on AVX.\n\ngcc/testsuite\n\n        * gcc.dg/vect/no-section-anchors-vect-31.c: Adjust array size and test\n        diag-scans to fix fail on AVX.\n        * gcc.dg/vect/no-section-anchors-vect-36.c: Ditto.\n        * gcc.dg/vect/no-section-anchors-vect-64.c: Ditto.\n        * gcc.dg/vect/no-section-anchors-vect-66.c: Ditto.\n        * gcc.dg/vect/no-section-anchors-vect-68.c: Ditto.\n        * gcc.dg/vect/no-section-anchors-vect-69.c: Ditto.\n        * gcc.dg/vect/no-vfa-vect-dv-2.c: Adjust dg-scans.\n        * gcc.dg/vect/pr45752.c: Ditto.\n        * gcc.dg/vect/slp-perm-4.c: Ditto.\n        * gcc.dg/vect/slp-perm-9.c: Ditto.\n        * gcc.dg/vect/vect-33.c: Ditto.\n        * gcc.dg/vect/vect-35.c: Ditto.\n        * gcc.dg/vect/vect-6-big-array.c: Ditto.\n        * gcc.dg/vect/vect-6.c: Ditto.\n        * gcc.dg/vect/vect-91.c: Ditto.\n        * gcc.dg/vect/vect-all-big-array.c: Ditto.\n        * gcc.dg/vect/vect-all.c: Ditto.\n        * gcc.dg/vect/vect-multitypes-1.c: Ditto.\n        * gcc.dg/vect/vect-outer-4c.c: Ditto.\n        * gcc.dg/vect/vect-outer-5.c: Ditto.\n        * gcc.dg/vect/vect-over-widen-1.c: Ditto.\n        * gcc.dg/vect/vect-over-widen-3.c: Ditto.\n        * gcc.dg/vect/vect-over-widen-4.c: Ditto.\n        * gcc.dg/vect/vect-peel-1.c: Ditto.\n        * gcc.dg/vect/vect-peel-2.c: Ditto.\n        * gcc.dg/vect/vect-peel-3.c: Ditto.\n        * gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n        * gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n        * gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n        * gcc.dg/vect/wrapv-vect-reduc-pattern-2c.c: Ditto.\n        * lib/target-supports.exp (check_avx_available): New function.\n        (check_effective_target_vect_sizes_32B_16B): Ditto.\n        (check_prefer_avx128): Ditto.\n        (check_effective_target_vect_aligned_arrays): Add handling of AVX.\n        (check_effective_target_vect_multiple_sizes): Ditto.\n\nFrom-SVN: r182583", "tree": {"sha": "b0370d3a46fe1ddc0412dae8fde6ced927c0d474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0370d3a46fe1ddc0412dae8fde6ced927c0d474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892d824b4518db351f549a1d0fe2e423b769be11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892d824b4518db351f549a1d0fe2e423b769be11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892d824b4518db351f549a1d0fe2e423b769be11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892d824b4518db351f549a1d0fe2e423b769be11/comments", "author": null, "committer": null, "parents": [{"sha": "5e12215f68701ac8c69515edec41d6b8369ea6c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e12215f68701ac8c69515edec41d6b8369ea6c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e12215f68701ac8c69515edec41d6b8369ea6c4"}], "stats": {"total": 186, "additions": 138, "deletions": 48}, "files": [{"sha": "922837197ea725468c60a11ccc80b283071c20b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -1,3 +1,42 @@\n+2011-12-21  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.dg/vect/no-section-anchors-vect-31.c: Adjust array size and test\n+\tdiag-scans to fix fail on AVX.\n+\t* gcc.dg/vect/no-section-anchors-vect-36.c: Ditto.\n+\t* gcc.dg/vect/no-section-anchors-vect-64.c: Ditto.\n+\t* gcc.dg/vect/no-section-anchors-vect-66.c: Ditto.\n+\t* gcc.dg/vect/no-section-anchors-vect-68.c: Ditto.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c: Ditto.\n+\t* gcc.dg/vect/no-vfa-vect-dv-2.c: Adjust dg-scans.\n+\t* gcc.dg/vect/pr45752.c: Ditto.\n+\t* gcc.dg/vect/slp-perm-4.c: Ditto.\n+\t* gcc.dg/vect/slp-perm-9.c: Ditto.\n+\t* gcc.dg/vect/vect-33.c: Ditto.\n+\t* gcc.dg/vect/vect-35.c: Ditto.\n+\t* gcc.dg/vect/vect-6-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-6.c: Ditto.\n+\t* gcc.dg/vect/vect-91.c: Ditto.\n+\t* gcc.dg/vect/vect-all-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-all.c: Ditto.\n+\t* gcc.dg/vect/vect-multitypes-1.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4c.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-5.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-1.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-3.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-4.c: Ditto.\n+\t* gcc.dg/vect/vect-peel-1.c: Ditto.\n+\t* gcc.dg/vect/vect-peel-2.c: Ditto.\n+\t* gcc.dg/vect/vect-peel-3.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n+\t* gcc.dg/vect/wrapv-vect-reduc-pattern-2c.c: Ditto.\n+\t* lib/target-supports.exp (check_avx_available): New function.\n+\t(check_effective_target_vect_sizes_32B_16B): Ditto.\n+\t(check_prefer_avx128): Ditto.\n+\t(check_effective_target_vect_aligned_arrays): Add handling of AVX.\n+\t(check_effective_target_vect_multiple_sizes): Ditto.\n+\n 2011-12-21  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \tPR target/50038"}, {"sha": "350c3f46bea09ad217c6c00a82452d75f0a4540f", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#define N 64\n \n struct t{\n   int k[N];"}, {"sha": "1384e8b7cc2bb69e8b67d57881ec3db26800c116", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 32\n  \n struct {\n   char ca[N];"}, {"sha": "ab2f576774abf4b89a5a2a464f3c2242f2929aa6", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -7,7 +7,7 @@\n \n int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n int ia[N][4][N+1];\n-int ic[N][N][3][N+1];\n+int ic[N][N][3][2*N+2];\n int id[N][N][N+4];\n \n __attribute__ ((noinline))"}, {"sha": "ffb455c05d55d2467fba5f90f9d263622c7b838c", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-66.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 32\n \n int ia[8][5][N+2];\n int ic[16][16][5][N+2];\n@@ -79,5 +79,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { {! vect_aligned_arrays} && {vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {vect_aligned_arrays} && {! vect_sizes_32B_16B} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4b613050a4c91d636a5487d352b51d3ac51e7982", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-68.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#define N 64\n \n struct s{\n   int m;\n@@ -88,5 +88,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 4 \"vect\" { target { {! vect_aligned_arrays} && {vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { {vect_aligned_arrays} && {! vect_sizes_32B_16B} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a18d7d6a9e865327bbfba9b1eee017ca0600477e", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 12\n+#define N 24\n \n struct s{\n   int m;\n@@ -114,7 +114,7 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail {! vector_alignment_reachable} } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { {! vector_alignment_reachable} || { ! vect_aligned_arrays} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2b4482a3c0b6deaf78e442c7e7a73c5d87514ebc", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-dv-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-dv-2.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -74,5 +74,6 @@ int main ()\n \n /* The initialization induction loop (with aligned access) is also vectorized.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 2 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 1 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b4b3c1b7ec6c00dff0baf39babf2a869730ae3df", "filename": "gcc/testsuite/gcc.dg/vect/pr45752.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -102,7 +102,7 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 2 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump \"permutation requires at least three vectors\" \"vect\" { target vect_perm } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "d0a069589ac247130ea72e057abcf131b8d989fa", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -81,7 +81,7 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump \"permutation requires at least three vectors\" \"vect\" { target vect_perm} } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "2f1cb357984ba82429055365009c5e56d163c2e3", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -52,8 +52,10 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { {! vect_perm } || {! vect_sizes_32B_16B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target { { vect_perm } && { vect_sizes_32B_16B } } } } } */\n /* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target vect_perm_short } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { {! vect_perm } || {! vect_sizes_32B_16B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { { vect_perm } && { vect_sizes_32B_16B } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "43daaa807049f417516139e43fa462c2e3820ab9", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -39,6 +39,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target vector_alignment_reachable } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */ \n+/* { dg-final { scan-tree-dump \"Alignment of access forced using peeling\" \"vect\" { target vector_alignment_reachable } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "63fc8c819dc91305a00c252b8d4cc6178a8b2f0d", "filename": "gcc/testsuite/gcc.dg/vect/vect-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -46,5 +46,5 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { xfail { ia64-*-* sparc*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"can't determine dependence between\" \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "11b7fe2a996d9811267725227caf99a72c4d0474", "filename": "gcc/testsuite/gcc.dg/vect/vect-6-big-array.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -75,5 +75,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "76117146b12171bc970309c7079e6edc4a219577", "filename": "gcc/testsuite/gcc.dg/vect/vect-6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -54,5 +54,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "019cf353f1703c0047d1fa68ec8c1aed5a23308f", "filename": "gcc/testsuite/gcc.dg/vect/vect-91.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -58,7 +58,8 @@ main3 ()\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { xfail vect_no_int_add } } } */\n-/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 3 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 2 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" {target { vector_alignment_reachable } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" {target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "16da0764eae3b2a7b42c72bc279dde945f4e3802", "filename": "gcc/testsuite/gcc.dg/vect/vect-all-big-array.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -249,6 +249,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 10 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6756283b7d929025207f6df98c1a1207ae067fad", "filename": "gcc/testsuite/gcc.dg/vect/vect-all.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -215,6 +215,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 10 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "782f7b03ea70bebe4e13f706381dca1cb26c46db", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -81,7 +81,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail {{ vect_no_align } || {! vect_aligned_arrays }}} } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail {{ vect_no_align } || {! vect_aligned_arrays }}} } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "6053b19e7a503ca78f4f75832939135f2e80a892", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -23,5 +23,5 @@ foo (){\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { target { vect_short_mult && { ! vect_no_align } } } } } */\n-/* { dg-final { scan-tree-dump-times \"zero step in outer loop.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"zero step in outer loop.\" \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2d37d6d148e2faa70f771e5e1250d5702dbac862", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -78,5 +78,5 @@ int main ()\n    is known.  */\n /* { dg-final { scan-tree-dump-times \"not vectorized: possible dependence between data-refs\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"zero step in outer loop.\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump \"zero step in outer loop.\" \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "47db4a160302ea4548d181d684455f2e30968a71", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -58,7 +58,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" { target {! vect_sizes_32B_16B} } } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 8 \"vect\" { target vect_sizes_32B_16B } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "c69465898fa1b29a32993b06e0e749b4fc5f28db", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -58,7 +58,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vect_recog_over_widening_pattern: detected\" \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "d3d4443081443e50780935316bb271bb2fccbf41", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -62,7 +62,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" { target {! vect_sizes_32B_16B } } } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 8 \"vect\" { target vect_sizes_32B_16B } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "b593411c7bc76c1037671f3c1e6d39b717d32434", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -48,6 +48,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ea270436e1a22b4472e8c620c3e8faddd657393f", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -49,6 +49,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "caf0a4dd59008117db01a592d36a3b11a5b7330c", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -48,6 +48,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { { vect_no_align } || {! vect_aligned_arrays } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || {! vect_aligned_arrays } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "553ab6fcdfd40cb4c71d92ab5d1057dbcbcea436", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -34,7 +34,7 @@ main (void)\n   return foo ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vect_recog_widen_sum_pattern: detected\" \"vect\"} } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_widen_sum_qi_to_si || vect_unpack } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { { ! vect_widen_sum_qi_to_si } && { ! vect_unpack } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2fc7f9a5914764634e770881b617446b115368c3", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -34,7 +34,7 @@ main (void)\n   return foo ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vect_recog_widen_sum_pattern: detected\" \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_hi } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6106ed8f53a181beb543e1a2f8e36b7cf12d0da8", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -34,7 +34,7 @@ main (void)\n   return foo ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vect_recog_widen_sum_pattern: detected\" \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_widen_sum_qi_to_si && vect_unpack } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { { ! vect_widen_sum_qi_to_si } && { ! vect_unpack } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7611c353c0acd0c91bccc62c6268c0c01779f9eb", "filename": "gcc/testsuite/gcc.dg/vect/wrapv-vect-reduc-pattern-2c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -35,7 +35,7 @@ main (void)\n   return foo ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vect_recog_widen_sum_pattern: detected\" \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_hi } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1a54043e760d97b91ac915f93c81445e86241780", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d824b4518db351f549a1d0fe2e423b769be11/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=892d824b4518db351f549a1d0fe2e423b769be11", "patch": "@@ -3207,9 +3207,14 @@ proc check_effective_target_vect_aligned_arrays { } {\n \tverbose \"check_effective_target_vect_aligned_arrays: using cached result\" 2\n     } else {\n \tset et_vect_aligned_arrays_saved 0\n-        if { (([istarget x86_64-*-*]\n-              || [istarget i?86-*-*]) && [is-effective-target lp64])\n-              || [istarget spu-*-*] } {\n+        if { ([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\t    if { ([is-effective-target lp64]\n+\t          && ( ![check_avx_available]\n+\t\t     || [check_prefer_avx128])) } {\n+\t         set et_vect_aligned_arrays_saved 1\n+\t    }\n+\t}\n+        if [istarget spu-*-*] {\n \t    set et_vect_aligned_arrays_saved 1\n \t}\n     }\n@@ -3507,13 +3512,14 @@ foreach N {2 3 4 8} {\n proc check_effective_target_vect_multiple_sizes { } {\n     global et_vect_multiple_sizes_saved\n \n-    if [info exists et_vect_multiple_sizes_saved] {\n-        verbose \"check_effective_target_vect_multiple_sizes: using cached result\" 2\n-    } else {\n-        set et_vect_multiple_sizes_saved 0\n-        if { ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n-           set et_vect_multiple_sizes_saved 1\n-        }\n+    set et_vect_multiple_sizes_saved 0\n+    if { ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n+       set et_vect_multiple_sizes_saved 1\n+    }\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+      if { ([check_avx_available] && ![check_prefer_avx128]) } {\n+\tset et_vect_multiple_sizes_saved 1\n+      }\n     }\n \n     verbose \"check_effective_target_vect_multiple_sizes: returning $et_vect_multiple_sizes_saved\" 2\n@@ -4125,6 +4131,39 @@ proc check_effective_target_automatic_stack_alignment  { } {\n     return 0;\n }\n \n+# Return true if we are compiling for AVX target.\n+\n+proc check_avx_available { } {\n+  if { [check_no_compiler_messages avx_available assembly {\n+    #ifndef __AVX__\n+    #error unsupported\n+    #endif\n+  } \"\"] } {\n+    return 1;\n+  }\n+  return 0;\n+}\n+\n+# Return true if 32- and 16-bytes vectors are available.\n+\n+proc check_effective_target_vect_sizes_32B_16B { } {\n+  return [check_avx_available];\n+}\n+\n+# Return true if 128-bits vectors are preferred even if 256-bits vectors\n+# are available.\n+\n+proc check_prefer_avx128 { } {\n+    if ![check_avx_available] {\n+      return 0;\n+    }\n+    return [check_no_messages_and_pattern avx_explicit \"xmm\" assembly {\n+      float a[1024],b[1024],c[1024];\n+      void foo (void) { int i; for (i = 0; i < 1024; i++) a[i]=b[i]+c[i];}\n+    } \"-O2 -ftree-vectorize\"]\n+}\n+\n+\n # Return 1 if avx instructions can be compiled.\n \n proc check_effective_target_avx { } {"}]}