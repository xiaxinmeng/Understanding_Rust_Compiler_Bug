{"sha": "d3b30e42b73d0a369046e53fcdbe69517c0195be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiMzBlNDJiNzNkMGEzNjkwNDZlNTNmY2RiZTY5NTE3YzAxOTViZQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2006-08-17T08:48:37Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-08-17T08:48:37Z"}, "message": "re PR rtl-optimization/28489 (ICE in move_insn, at haifa-sched.c:1968)\n\n2006-08-17  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tPR rtl-optimization/28489\n\t* sched-ebb.c (begin_schedule_ready): Create basic block\n\tat the right place.\n\t(advance_target_bb): Skip empty blocks.\n\t* haifa-sched.c (bb_note): Make global.\n\t* sched-int.h (bb_note): Add prototype.\n\n2006-08-17  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tPR rtl-optimization/28489\n\t* gcc.c-torture/compile/pr28489.c: New test.\n\nFrom-SVN: r116214", "tree": {"sha": "bad9e0947d0370b8e14e1ea87041d779fe235cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad9e0947d0370b8e14e1ea87041d779fe235cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b30e42b73d0a369046e53fcdbe69517c0195be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b30e42b73d0a369046e53fcdbe69517c0195be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b30e42b73d0a369046e53fcdbe69517c0195be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b30e42b73d0a369046e53fcdbe69517c0195be/comments", "author": null, "committer": null, "parents": [{"sha": "2052721560b2329471c637b4d20f8fef44363004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2052721560b2329471c637b4d20f8fef44363004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2052721560b2329471c637b4d20f8fef44363004"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "240bddba2fd254bc2ed191537be0595aede95806", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -1,3 +1,12 @@\n+2006-08-17  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR rtl-optimization/28489\n+\t* sched-ebb.c (begin_schedule_ready): Create basic block\n+\tat the right place.\n+\t(advance_target_bb): Skip empty blocks.\n+\t* haifa-sched.c (bb_note): Make global.\n+\t* sched-int.h (bb_note): Add prototype.\n+\n 2006-08-16  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR tree-optimization/27865"}, {"sha": "78adee5723ab97534cb970c0b91f52579bf692ed", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -593,7 +593,6 @@ static void free_glat (void);\n static void sched_remove_insn (rtx);\n static void clear_priorities (rtx);\n static void add_jump_dependencies (rtx, rtx);\n-static rtx bb_note (basic_block);\n static void calc_priorities (rtx);\n #ifdef ENABLE_CHECKING\n static int has_edge_p (VEC(edge,gc) *, int);\n@@ -4549,7 +4548,7 @@ add_jump_dependencies (rtx insn, rtx jump)\n }\n \n /* Return the NOTE_INSN_BASIC_BLOCK of BB.  */\n-static rtx\n+rtx\n bb_note (basic_block bb)\n {\n   rtx note;"}, {"sha": "b220348da7b5c31c647d74ef156f71001b1b1b81", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -166,7 +166,8 @@ begin_schedule_ready (rtx insn, rtx last)\n \t  gcc_assert (NOTE_INSN_BASIC_BLOCK_P (BB_END (bb)));\n \t}\n       else\n-\tbb = create_basic_block (insn, 0, last_bb);\n+\t/* Create an empty unreachable block after the INSN.  */\n+\tbb = create_basic_block (NEXT_INSN (insn), NULL_RTX, last_bb);\n       \n       /* split_edge () creates BB before E->DEST.  Keep in mind, that\n \t this operation extends scheduling region till the end of BB.\n@@ -728,10 +729,19 @@ advance_target_bb (basic_block bb, rtx insn)\n       else\n \treturn 0;\n     }\n-  else if (bb != last_bb)\n-    return bb->next_bb;\n   else\n-    gcc_unreachable ();\n+    /* Return next non empty block.  */\n+    {\n+      do\n+\t{\n+\t  gcc_assert (bb != last_bb);\n+\n+\t  bb = bb->next_bb;\n+\t}\n+      while (bb_note (bb) == BB_END (bb));\n+\n+      return bb;\n+    }\n }\n \n /* Fix internal data after interblock movement of jump instruction."}, {"sha": "3ce0379ce43f6f2eeacb767dad1e36f986cc5411", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -637,6 +637,7 @@ extern void * xrecalloc (void *, size_t, size_t, size_t);\n extern void unlink_bb_notes (basic_block, basic_block);\n extern void add_block (basic_block, basic_block);\n extern void attach_life_info (void);\n+extern rtx bb_note (basic_block);\n \n #ifdef ENABLE_CHECKING\n extern void check_reg_live (bool);"}, {"sha": "9f3eb37b034b27b40e815df9f1fa378d49864de7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -1,3 +1,8 @@\n+2006-08-17  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR rtl-optimization/28489\n+\t* gcc.c-torture/compile/pr28489.c: New test.\n+\n 2006-08-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28710"}, {"sha": "766880fef25bf3afbc6f7a617dc0dde69c92c982", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28489.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28489.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b30e42b73d0a369046e53fcdbe69517c0195be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28489.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28489.c?ref=d3b30e42b73d0a369046e53fcdbe69517c0195be", "patch": "@@ -0,0 +1,48 @@\n+typedef int c_int;\n+union c_insn\n+{\n+  void (*op) ();\n+  c_int *mem;\n+  c_int imm;\n+};\n+static union c_insn c_stack[((0x100 + 4) * 4)];\n+static struct c_ident *c_funcs;\n+static void (*c_op_bz) ();\n+static void c_direct (union c_insn *addr);\n+c_compile (int (*ext_getchar) (), void (*ext_rewind) (),\n+\t   struct c_ident *externs)\n+{\n+  c_direct (((void *) 0));\n+}\n+static void\n+c_direct (union c_insn *addr)\n+{\n+  union c_insn *pc = addr;\n+  union c_insn *sp = c_stack;\n+  c_int imm = 0;\n+  static void *ops[] = {\n+    &&op_index, &&op_assign, &&op_add_a, &&op_sub_a, &&op_mul_a, &&op_div_a,\n+      &&op_mod_a, &&op_or_a, &&op_xor_a, &&op_and_a, &&op_shl_a, &&op_shr_a,\n+  };\n+    {\n+      c_op_bz = &&op_bz;\n+    }\n+  goto *(pc++)->op;\n+op_bz:if (imm)\n+    {\n+    }\n+op_push_imm_imm:(sp - 2)->imm = imm;\n+  goto *(pc - 1)->op;\n+op_index:imm = *((sp - 3)->mem += imm);\n+op_assign:*(sp - 3)->mem = imm;\n+op_add_a:imm = *(sp - 3)->mem += imm;\n+op_sub_a:imm = *(sp - 3)->mem -= imm;\n+op_mul_a:imm = *(sp - 3)->mem *= imm;\n+op_div_a:imm = *(sp - 3)->mem /= imm;\n+op_mod_a:imm = *(sp - 3)->mem %= imm;\n+op_or_a:imm = *(sp - 3)->mem |= imm;\n+op_xor_a:imm = *(sp - 3)->mem ^= imm;\n+op_and_a:imm = *(sp - 3)->mem &= imm;\n+op_shl_a:imm = *(sp - 3)->mem <<= imm;\n+op_shr_a:imm = *(sp - 3)->mem >>= imm;\n+}"}]}