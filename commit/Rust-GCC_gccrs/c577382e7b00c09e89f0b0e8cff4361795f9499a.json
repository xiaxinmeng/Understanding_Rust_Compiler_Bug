{"sha": "c577382e7b00c09e89f0b0e8cff4361795f9499a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU3NzM4MmU3YjAwYzA5ZTg5ZjBiMGU4Y2ZmNDM2MTc5NWY5NDk5YQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2012-08-13T18:00:55Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2012-08-13T18:00:55Z"}, "message": "Implement support for expiring expected results in validate_failures.py.\n\nI noticed recently that while the validator was accepting the\n'expire=YYYYMMDD' attribute, it was not actually doing anything with\nit.\n\nThis patch fixes the oversight.\n\n2012-08-13  Diego Novillo  <dnovillo@google.com>\n\n\t* testsuite-management/validate_failures.py: Import datetime.\n\t(TestResult.ExpirationDate): New.\n\t(TestResult.HasExpired): New.\n\t(ParseSummary): Call it.  If it returns True, warn that the\n\texpected failure has expired and do not add it to the set of\n\texpected results.\n\t(GetResults): Clarify documentation.\n\nFrom-SVN: r190351", "tree": {"sha": "c5ecf16dc9bbfbcd6c56c37913b6446d7b75177d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ecf16dc9bbfbcd6c56c37913b6446d7b75177d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c577382e7b00c09e89f0b0e8cff4361795f9499a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c577382e7b00c09e89f0b0e8cff4361795f9499a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c577382e7b00c09e89f0b0e8cff4361795f9499a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c577382e7b00c09e89f0b0e8cff4361795f9499a/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "621bc04640ee2dd1894285c6a536c78c826d8d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621bc04640ee2dd1894285c6a536c78c826d8d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621bc04640ee2dd1894285c6a536c78c826d8d4e"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "1967939b5e3d5b2b2c85fcd83345b509acf2217a", "filename": "contrib/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c577382e7b00c09e89f0b0e8cff4361795f9499a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c577382e7b00c09e89f0b0e8cff4361795f9499a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=c577382e7b00c09e89f0b0e8cff4361795f9499a", "patch": "@@ -1,3 +1,13 @@\n+2012-08-13  Diego Novillo  <dnovillo@google.com>\n+\n+\t* testsuite-management/validate_failures.py: Import datetime.\n+\t(TestResult.ExpirationDate): New.\n+\t(TestResult.HasExpired): New.\n+\t(ParseSummary): Call it.  If it returns True, warn that the\n+\texpected failure has expired and do not add it to the set of\n+\texpected results.\n+\t(GetResults): Clarify documentation.\n+\n 2012-07-26   Diego Novillo  <dnovillo@google.com>\n \n \t* testsuite-management/validate_failures.py: Do not use"}, {"sha": "0ac9b15e5b671e412f679e2afe2b2aedad84e43a", "filename": "contrib/testsuite-management/validate_failures.py", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c577382e7b00c09e89f0b0e8cff4361795f9499a/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c577382e7b00c09e89f0b0e8cff4361795f9499a/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftestsuite-management%2Fvalidate_failures.py?ref=c577382e7b00c09e89f0b0e8cff4361795f9499a", "patch": "@@ -46,6 +46,7 @@\n    with exit code 0.  Otherwise, it exits with error code 1.\n \"\"\"\n \n+import datetime\n import optparse\n import os\n import re\n@@ -135,6 +136,26 @@ def __str__(self):\n       attrs = '%s | ' % self.attrs\n     return '%s%s: %s %s' % (attrs, self.state, self.name, self.description)\n \n+  def ExpirationDate(self):\n+    # Return a datetime.date object with the expiration date for this\n+    # test result expires.  Return None, if no expiration # has been set.\n+    if re.search(r'expire=', self.attrs):\n+      expiration = re.search(r'expire=(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)', self.attrs)\n+      if not expiration:\n+        Error('Invalid expire= format in \"%s\".  Must be of the form '\n+              '\"expire=YYYYMMDD\"' % self)\n+      return datetime.date(int(expiration.group(1)),\n+                           int(expiration.group(2)),\n+                           int(expiration.group(3)))\n+    return None\n+\n+  def HasExpired(self):\n+    # Return True if the expiration date of this result has passed.\n+    expiration_date = self.ExpirationDate()\n+    if expiration_date:\n+      now = datetime.date.today()\n+      return now > expiration_date\n+\n \n def GetMakefileValue(makefile_name, value_name):\n   if os.path.exists(makefile_name):\n@@ -178,7 +199,13 @@ def ParseSummary(sum_fname):\n   sum_file = open(sum_fname)\n   for line in sum_file:\n     if IsInterestingResult(line):\n-      result_set.add(TestResult(line))\n+      result = TestResult(line)\n+      if result.HasExpired():\n+        # Tests that had an expiration set are not added to the\n+        # set of expected results.\n+        print 'WARNING: Expected failure \"%s\" has expired.' % line.strip()\n+        continue\n+      result_set.add(result)\n   sum_file.close()\n   return result_set\n \n@@ -220,16 +247,20 @@ def GetResults(sum_files):\n \n def CompareResults(manifest, actual):\n   \"\"\"Compare sets of results and return two lists:\n-     - List of results present in MANIFEST but missing from ACTUAL.\n      - List of results present in ACTUAL but missing from MANIFEST.\n+     - List of results present in MANIFEST but missing from ACTUAL.\n   \"\"\"\n-  # Report all the actual results not present in the manifest.\n+  # Collect all the actual results not present in the manifest.\n+  # Results in this set will be reported as errors.\n   actual_vs_manifest = set()\n   for actual_result in actual:\n     if actual_result not in manifest:\n       actual_vs_manifest.add(actual_result)\n \n-  # Simlarly for all the tests in the manifest.\n+  # Collect all the tests in the manifest that were not found\n+  # in the actual results.\n+  # Results in this set will be reported as warnings (since\n+  # they are expected failures that are not failing anymore).\n   manifest_vs_actual = set()\n   for expected_result in manifest:\n     # Ignore tests marked flaky."}]}