{"sha": "dab67d2ca2788745393a57b54ed59afb7585602c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFiNjdkMmNhMjc4ODc0NTM5M2E1N2I1NGVkNTlhZmI3NTg1NjAyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-29T10:02:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-29T10:02:33Z"}, "message": "PR rtl-optimization/63340 (part 2)\n\ngcc/\n\tPR rtl-optimization/63340 (part 2)\n\t* rtl.h (invalid_mode_change_p): Delete.\n\t(valid_mode_changes_for_regno): New function.\n\t* reginfo.c (invalid_mode_change_p): Delete.\n\t(valid_mode_changes_for_regno): New function.\n\t* ira-costs.c (setup_regno_cost_classes_by_aclass): Restrict the\n\tclasses to registers that are allowed by valid_mode_changes_for_regno.\n\t(setup_regno_cost_classes_by_mode): Likewise.\n\t(print_allocno_costs): Remove invalid_mode_change_p test.\n\t(print_pseudo_costs, find_costs_and_classes): Likewise.\n\nFrom-SVN: r216829", "tree": {"sha": "e56aeffa0453f1dfb0cde608a966d63b61550910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56aeffa0453f1dfb0cde608a966d63b61550910"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dab67d2ca2788745393a57b54ed59afb7585602c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab67d2ca2788745393a57b54ed59afb7585602c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab67d2ca2788745393a57b54ed59afb7585602c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab67d2ca2788745393a57b54ed59afb7585602c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbfb154838d2f68df51060a686524cdfb3148764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbfb154838d2f68df51060a686524cdfb3148764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbfb154838d2f68df51060a686524cdfb3148764"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "c40577b29cee27ad0763e9eadefc656fd9881e27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dab67d2ca2788745393a57b54ed59afb7585602c", "patch": "@@ -1,3 +1,16 @@\n+2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/63340 (part 2)\n+\t* rtl.h (invalid_mode_change_p): Delete.\n+\t(valid_mode_changes_for_regno): New function.\n+\t* reginfo.c (invalid_mode_change_p): Delete.\n+\t(valid_mode_changes_for_regno): New function.\n+\t* ira-costs.c (setup_regno_cost_classes_by_aclass): Restrict the\n+\tclasses to registers that are allowed by valid_mode_changes_for_regno.\n+\t(setup_regno_cost_classes_by_mode): Likewise.\n+\t(print_allocno_costs): Remove invalid_mode_change_p test.\n+\t(print_pseudo_costs, find_costs_and_classes): Likewise.\n+\n 2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/63340 (part 1)"}, {"sha": "76de59af68bfb89d5ea23ff522116910e9d3ea9f", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=dab67d2ca2788745393a57b54ed59afb7585602c", "patch": "@@ -387,12 +387,18 @@ setup_regno_cost_classes_by_aclass (int regno, enum reg_class aclass)\n       classes_ptr = cost_classes_aclass_cache[aclass] = (cost_classes_t) *slot;\n     }\n   if (regno_reg_rtx[regno] != NULL_RTX)\n-    /* Restrict the classes to those that are valid for REGNO's mode\n-       (which might for example exclude singleton classes if the mode requires\n-       two registers).  */\n-    classes_ptr = restrict_cost_classes (classes_ptr,\n-\t\t\t\t\t PSEUDO_REGNO_MODE (regno),\n-\t\t\t\t\t reg_class_contents[ALL_REGS]);\n+    {\n+      /* Restrict the classes to those that are valid for REGNO's mode\n+\t (which might for example exclude singleton classes if the mode\n+\t requires two registers).  Also restrict the classes to those that\n+\t are valid for subregs of REGNO.  */\n+      const HARD_REG_SET *valid_regs = valid_mode_changes_for_regno (regno);\n+      if (!valid_regs)\n+\tvalid_regs = &reg_class_contents[ALL_REGS];\n+      classes_ptr = restrict_cost_classes (classes_ptr,\n+\t\t\t\t\t   PSEUDO_REGNO_MODE (regno),\n+\t\t\t\t\t   *valid_regs);\n+    }\n   regno_cost_classes[regno] = classes_ptr;\n }\n \n@@ -405,11 +411,17 @@ setup_regno_cost_classes_by_aclass (int regno, enum reg_class aclass)\n static void\n setup_regno_cost_classes_by_mode (int regno, enum machine_mode mode)\n {\n-  if (cost_classes_mode_cache[mode] == NULL)\n-    cost_classes_mode_cache[mode]\n-      = restrict_cost_classes (&all_cost_classes, mode,\n-\t\t\t       reg_class_contents[ALL_REGS]);\n-  regno_cost_classes[regno] = cost_classes_mode_cache[mode];\n+  if (const HARD_REG_SET *valid_regs = valid_mode_changes_for_regno (regno))\n+    regno_cost_classes[regno] = restrict_cost_classes (&all_cost_classes,\n+\t\t\t\t\t\t       mode, *valid_regs);\n+  else\n+    {\n+      if (cost_classes_mode_cache[mode] == NULL)\n+\tcost_classes_mode_cache[mode]\n+\t  = restrict_cost_classes (&all_cost_classes, mode,\n+\t\t\t\t   reg_class_contents[ALL_REGS]);\n+      regno_cost_classes[regno] = cost_classes_mode_cache[mode];\n+    }\n }\n \n /* Finalize info about the cost classes for each pseudo.  */\n@@ -1536,14 +1548,11 @@ print_allocno_costs (FILE *f)\n       for (k = 0; k < cost_classes_ptr->num; k++)\n \t{\n \t  rclass = cost_classes[k];\n-\t  if (! invalid_mode_change_p (regno, (enum reg_class) rclass))\n-\t    {\n-\t      fprintf (f, \" %s:%d\", reg_class_names[rclass],\n-\t\t       COSTS (costs, i)->cost[k]);\n-\t      if (flag_ira_region == IRA_REGION_ALL\n-\t\t  || flag_ira_region == IRA_REGION_MIXED)\n-\t\tfprintf (f, \",%d\", COSTS (total_allocno_costs, i)->cost[k]);\n-\t    }\n+\t  fprintf (f, \" %s:%d\", reg_class_names[rclass],\n+\t\t   COSTS (costs, i)->cost[k]);\n+\t  if (flag_ira_region == IRA_REGION_ALL\n+\t      || flag_ira_region == IRA_REGION_MIXED)\n+\t    fprintf (f, \",%d\", COSTS (total_allocno_costs, i)->cost[k]);\n \t}\n       fprintf (f, \" MEM:%i\", COSTS (costs, i)->mem_cost);\n       if (flag_ira_region == IRA_REGION_ALL\n@@ -1574,9 +1583,8 @@ print_pseudo_costs (FILE *f)\n       for (k = 0; k < cost_classes_ptr->num; k++)\n \t{\n \t  rclass = cost_classes[k];\n-\t  if (! invalid_mode_change_p (regno, (enum reg_class) rclass))\n-\t    fprintf (f, \" %s:%d\", reg_class_names[rclass],\n-\t\t     COSTS (costs, regno)->cost[k]);\n+\t  fprintf (f, \" %s:%d\", reg_class_names[rclass],\n+\t\t   COSTS (costs, regno)->cost[k]);\n \t}\n       fprintf (f, \" MEM:%i\\n\", COSTS (costs, regno)->mem_cost);\n     }\n@@ -1813,10 +1821,6 @@ find_costs_and_classes (FILE *dump_file)\n \t  for (k = 0; k < cost_classes_ptr->num; k++)\n \t    {\n \t      rclass = cost_classes[k];\n-\t      /* Ignore classes that are too small or invalid for this\n-\t\t operand.  */\n-\t      if (invalid_mode_change_p (i, (enum reg_class) rclass))\n-\t\tcontinue;\n \t      if (i_costs[k] < best_cost)\n \t\t{\n \t\t  best_cost = i_costs[k];\n@@ -1906,11 +1910,7 @@ find_costs_and_classes (FILE *dump_file)\n \t\t      rclass = cost_classes[k];\n \t\t      if (! ira_class_subset_p[rclass][aclass])\n \t\t\tcontinue;\n-\t\t      /* Ignore classes that are too small or invalid\n-\t\t\t for this operand.  */\n-\t\t      if (invalid_mode_change_p (i, (enum reg_class) rclass))\n-\t\t\t;\n-\t\t      else if (total_a_costs[k] < best_cost)\n+\t\t      if (total_a_costs[k] < best_cost)\n \t\t\t{\n \t\t\t  best_cost = total_a_costs[k];\n \t\t\t  allocno_cost = a_costs[k];"}, {"sha": "1c1839352cf142215bcbe2ccc6fee7efcfdf907d", "filename": "gcc/reginfo.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=dab67d2ca2788745393a57b54ed59afb7585602c", "patch": "@@ -1333,14 +1333,10 @@ init_subregs_of_mode (void)\n         find_subregs_of_mode (PATTERN (insn));\n }\n \n-/* Return 1 if REGNO has had an invalid mode change in CLASS from FROM\n-   mode.  */\n-bool\n-invalid_mode_change_p (unsigned int regno, enum reg_class rclass)\n+const HARD_REG_SET *\n+valid_mode_changes_for_regno (unsigned int regno)\n {\n-  return (valid_mode_changes[regno]\n-\t  && !hard_reg_set_intersect_p (reg_class_contents[rclass],\n-\t\t\t\t\t*valid_mode_changes[regno]));\n+  return valid_mode_changes[regno];\n }\n \n void"}, {"sha": "b3fe680bd90b184553bf026aa10d41279576d633", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab67d2ca2788745393a57b54ed59afb7585602c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=dab67d2ca2788745393a57b54ed59afb7585602c", "patch": "@@ -3468,7 +3468,9 @@ extern void init_reg_sets (void);\n extern void regclass (rtx, int);\n extern void reg_scan (rtx_insn *, unsigned int);\n extern void fix_register (const char *, int, int);\n-extern bool invalid_mode_change_p (unsigned int, enum reg_class);\n+#ifdef HARD_CONST\n+extern const HARD_REG_SET *valid_mode_changes_for_regno (unsigned int);\n+#endif\n \n /* In reload1.c */\n extern int function_invariant_p (const_rtx);"}]}