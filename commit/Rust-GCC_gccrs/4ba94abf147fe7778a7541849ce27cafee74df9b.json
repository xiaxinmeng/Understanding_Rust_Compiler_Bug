{"sha": "4ba94abf147fe7778a7541849ce27cafee74df9b", "node_id": "C_kwDOANBUbNoAKDRiYTk0YWJmMTQ3ZmU3Nzc4YTc1NDE4NDljZTI3Y2FmZWU3NGRmOWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-05T12:53:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-06T21:33:29Z"}, "message": "libstdc++: Add hint to compiler about vector invariants [PR106434]\n\nThe PR shows a bogus warning where jump threading generates code for the\nundefined case that the insertion point is a value-initialized iterator\nbut _M_finish and _M_end_of_storage are unequal (so at least one must be\nnon-null). Using __builtin_unreachable() removes the bogus warning. Also\nadd an assertion to diagnose undefined misuses of a null iterator here,\nso we don't just silently optimize that undefined code to something\nunsafe.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/106434\n\t* include/bits/vector.tcc (insert(const_iterator, const T&)):\n\tAdd assertion and optimization hint that the iterator for the\n\tinsertion point must be non-null.", "tree": {"sha": "74224142ac680223ae72453aee46f1aaede82f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74224142ac680223ae72453aee46f1aaede82f85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ba94abf147fe7778a7541849ce27cafee74df9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba94abf147fe7778a7541849ce27cafee74df9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba94abf147fe7778a7541849ce27cafee74df9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba94abf147fe7778a7541849ce27cafee74df9b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af177d7280668e5b21560165dc828754618e6621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af177d7280668e5b21560165dc828754618e6621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af177d7280668e5b21560165dc828754618e6621"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "8ae79ffc7af419dc9cc15773d9c54cda77a5e57b", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba94abf147fe7778a7541849ce27cafee74df9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba94abf147fe7778a7541849ce27cafee74df9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=4ba94abf147fe7778a7541849ce27cafee74df9b", "patch": "@@ -139,26 +139,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       const size_type __n = __position - begin();\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n-\tif (__position == end())\n-\t  {\n-\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n-\t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n-\t\t\t\t     __x);\n-\t    ++this->_M_impl._M_finish;\n-\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n-\t  }\n-\telse\n-\t  {\n+\t{\n+\t  __glibcxx_assert(__position != const_iterator());\n+\t  if (!(__position != const_iterator()))\n+\t    __builtin_unreachable(); // PR 106434\n+\n+\t  if (__position == end())\n+\t    {\n+\t      _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n+\t      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n+\t\t\t\t       __x);\n+\t      ++this->_M_impl._M_finish;\n+\t      _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n+\t    }\n+\t  else\n+\t    {\n #if __cplusplus >= 201103L\n-\t    const auto __pos = begin() + (__position - cbegin());\n-\t    // __x could be an existing element of this vector, so make a\n-\t    // copy of it before _M_insert_aux moves elements around.\n-\t    _Temporary_value __x_copy(this, __x);\n-\t    _M_insert_aux(__pos, std::move(__x_copy._M_val()));\n+\t      const auto __pos = begin() + (__position - cbegin());\n+\t      // __x could be an existing element of this vector, so make a\n+\t      // copy of it before _M_insert_aux moves elements around.\n+\t      _Temporary_value __x_copy(this, __x);\n+\t      _M_insert_aux(__pos, std::move(__x_copy._M_val()));\n #else\n-\t    _M_insert_aux(__position, __x);\n+\t      _M_insert_aux(__position, __x);\n #endif\n-\t  }\n+\t    }\n+\t}\n       else\n #if __cplusplus >= 201103L\n \t_M_realloc_insert(begin() + (__position - cbegin()), __x);"}]}