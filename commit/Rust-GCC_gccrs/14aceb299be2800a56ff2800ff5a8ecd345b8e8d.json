{"sha": "14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhY2ViMjk5YmUyODAwYTU2ZmYyODAwZmY1YThlY2QzNDViOGU4ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-20T03:43:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-20T03:43:31Z"}, "message": "(assign_parms): Properly set parm_reg_stack_loc for args that are a CONCAT.\n\nFrom-SVN: r5819", "tree": {"sha": "b1b0d0642812eb6afafb6ee784cf29c7d063e2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1b0d0642812eb6afafb6ee784cf29c7d063e2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14aceb299be2800a56ff2800ff5a8ecd345b8e8d/comments", "author": null, "committer": null, "parents": [{"sha": "4d65300e6b4b414751fa23ccc58cee2d6e39ae99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d65300e6b4b414751fa23ccc58cee2d6e39ae99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d65300e6b4b414751fa23ccc58cee2d6e39ae99"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "ed6ac0679b0424098e8c0f305ebd5d91c4162386", "filename": "gcc/function.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14aceb299be2800a56ff2800ff5a8ecd345b8e8d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14aceb299be2800a56ff2800ff5a8ecd345b8e8d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=14aceb299be2800a56ff2800ff5a8ecd345b8e8d", "patch": "@@ -3339,6 +3339,7 @@ assign_parms (fndecl, second_time)\n \t     may need to do it in a wider mode.  */\n \n \t  register rtx parmreg;\n+\t  int regno;\n \n \t  unsignedp = TREE_UNSIGNED (TREE_TYPE (parm));\n \t  if (TREE_CODE (TREE_TYPE (parm)) == INTEGER_TYPE\n@@ -3461,18 +3462,40 @@ assign_parms (fndecl, second_time)\n #endif /* FUNCTION_ARG_CALLEE_COPIES */\n \n \t  /* In any case, record the parm's desired stack location\n-\t     in case we later discover it must live in the stack.  */\n-\t  if (REGNO (parmreg) >= nparmregs)\n+\t     in case we later discover it must live in the stack. \n+\n+\t     If it is a COMPLEX value, store the stack location for both\n+\t     halves.  */\n+\n+\t  if (GET_CODE (parmreg) == CONCAT)\n+\t    regno = MAX (REGNO (XEXP (parmreg, 0)), REGNO (XEXP (parmreg, 1)));\n+\t  else\n+\t    regno = REGNO (parmreg);\n+\n+\t  if (regno >= nparmregs)\n \t    {\n \t      rtx *new;\n \t      int old_nparmregs = nparmregs;\n-\t      nparmregs = REGNO (parmreg) + 5;\n+\n+\t      nparmregs = regno + 5;\n \t      new = (rtx *) oballoc (nparmregs * sizeof (rtx));\n \t      bcopy (parm_reg_stack_loc, new, old_nparmregs * sizeof (rtx));\n-\t      bzero (new + old_nparmregs, (nparmregs - old_nparmregs) * sizeof (rtx));\n+\t      bzero (new + old_nparmregs,\n+\t\t     (nparmregs - old_nparmregs) * sizeof (rtx));\n \t      parm_reg_stack_loc = new;\n \t    }\n-\t  parm_reg_stack_loc[REGNO (parmreg)] = stack_parm;\n+\n+\t  if (GET_CODE (parmreg) == CONCAT)\n+\t    {\n+\t      enum machine_mode submode = GET_MODE (XEXP (parmreg, 0));\n+\n+\t      parm_reg_stack_loc[REGNO (gen_lowpart (submode, parmreg))]\n+\t        = gen_lowpart (submode, stack_parm);\n+\t      parm_reg_stack_loc[REGNO (gen_highpart (submode, parmreg))]\n+\t\t= gen_highpart (submode, stack_parm);\n+\t    }\n+\t  else\n+\t    parm_reg_stack_loc[REGNO (parmreg)] = stack_parm;\n \n \t  /* Mark the register as eliminable if we did no conversion\n \t     and it was copied from memory at a fixed offset,"}]}