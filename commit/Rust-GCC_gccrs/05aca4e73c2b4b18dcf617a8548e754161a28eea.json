{"sha": "05aca4e73c2b4b18dcf617a8548e754161a28eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhY2E0ZTczYzJiNGIxOGRjZjYxN2E4NTQ4ZTc1NDE2MWEyOGVlYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2016-03-23T18:36:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-23T18:36:25Z"}, "message": "re PR c++/69315 (ICE in finish_function with constexpr and templates)\n\n\tPR c++/69315\n\t* cp-tree.h (defer_mark_used_calls, deferred_mark_used_calls): Remove.\n\t* decl.c (defer_mark_used_calls, deferred_mark_used_calls): Remove.\n\t(finish_function): Don't set or test them.\n\t* decl2.c (mark_used): Don't handle defer_mark_used_calls.\n\n\t* g++.dg/cpp0x/constexpr-69315.C: New test.\n\t* g++.dg/cpp0x/variadic122.C: Change one dg-warning into dg-bogus.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r234436", "tree": {"sha": "a2894b2dc1f9c5f4fc514c27b4c809eec63d6e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2894b2dc1f9c5f4fc514c27b4c809eec63d6e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05aca4e73c2b4b18dcf617a8548e754161a28eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05aca4e73c2b4b18dcf617a8548e754161a28eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05aca4e73c2b4b18dcf617a8548e754161a28eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05aca4e73c2b4b18dcf617a8548e754161a28eea/comments", "author": null, "committer": null, "parents": [{"sha": "96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "499b4568f14bd2861f20ef201a2b937d849ae986", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -1,3 +1,13 @@\n+2016-03-23  Alexandre Oliva  <aoliva@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69315\n+\t* cp-tree.h (defer_mark_used_calls, deferred_mark_used_calls): Remove.\n+\t* decl.c (defer_mark_used_calls, deferred_mark_used_calls): Remove.\n+\t(finish_function): Don't set or test them.\n+\t* decl2.c (mark_used): Don't handle defer_mark_used_calls.\n+\n 2016-03-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70344"}, {"sha": "b7b770f920085faf8db8f6c481df52f9ac227c75", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -5846,8 +5846,6 @@ extern tree fndecl_declared_return_type\t\t(tree);\n extern bool undeduced_auto_decl\t\t\t(tree);\n extern void require_deduced_type\t\t(tree);\n \n-extern bool defer_mark_used_calls;\n-extern GTY(()) vec<tree, va_gc> *deferred_mark_used_calls;\n extern tree finish_case_label\t\t\t(location_t, tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree, tsubst_flags_t);\n "}, {"sha": "cd5db3f06dc306758bec05471abbe41f4c240c5f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -227,11 +227,6 @@ struct GTY((for_user)) named_label_entry {\n    function, two inside the body of a function in a local class, etc.)  */\n int function_depth;\n \n-/* To avoid unwanted recursion, finish_function defers all mark_used calls\n-   encountered during its execution until it finishes.  */\n-bool defer_mark_used_calls;\n-vec<tree, va_gc> *deferred_mark_used_calls;\n-\n /* States indicating how grokdeclarator() should handle declspecs marked\n    with __attribute__((deprecated)).  An object declared as\n    __attribute__((deprecated)) suppresses warnings of uses of other\n@@ -14594,9 +14589,6 @@ finish_function (int flags)\n   if (c_dialect_objc ())\n     objc_finish_function ();\n \n-  gcc_assert (!defer_mark_used_calls);\n-  defer_mark_used_calls = true;\n-\n   record_key_method_defined (fndecl);\n \n   fntype = TREE_TYPE (fndecl);\n@@ -14846,17 +14838,6 @@ finish_function (int flags)\n   /* Clean up.  */\n   current_function_decl = NULL_TREE;\n \n-  defer_mark_used_calls = false;\n-  if (deferred_mark_used_calls)\n-    {\n-      unsigned int i;\n-      tree decl;\n-\n-      FOR_EACH_VEC_SAFE_ELT (deferred_mark_used_calls, i, decl)\n-\tmark_used (decl);\n-      vec_free (deferred_mark_used_calls);\n-    }\n-\n   invoke_plugin_callbacks (PLUGIN_FINISH_PARSE_FUNCTION, fndecl);\n   return fndecl;\n }"}, {"sha": "b3cc99a7dc1a6cad31afc2ecffc021b3b64183f7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -5140,14 +5140,6 @@ mark_used (tree decl, tsubst_flags_t complain)\n   if (DECL_ODR_USED (decl))\n     return true;\n \n-  /* If within finish_function, defer the rest until that function\n-     finishes, otherwise it might recurse.  */\n-  if (defer_mark_used_calls)\n-    {\n-      vec_safe_push (deferred_mark_used_calls, decl);\n-      return true;\n-    }\n-\n   /* Normally, we can wait until instantiation-time to synthesize DECL.\n      However, if DECL is a static data member initialized with a constant\n      or a constexpr function, we need it right now because a reference to"}, {"sha": "4d620748c1b7685093cdba28e62d368d5d9f87db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -1,3 +1,11 @@\n+2016-03-23  Alexandre Oliva  <aoliva@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69315\n+\t* g++.dg/cpp0x/constexpr-69315.C: New test.\n+\t* g++.dg/cpp0x/variadic122.C: Change one dg-warning into dg-bogus.\n+\n 2016-03-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/69884"}, {"sha": "cf32938ecc06dece5749efaaca23e9a2ab527dd6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-69315.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-69315.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-69315.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-69315.C?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/69315\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+// Template instantiation and evaluation for folding within\n+// finish_function may call finish_function recursively.\n+// Make sure we don't reject or delay that sort of recursion.\n+\n+template <bool> struct Iter;\n+\n+struct Arg {\n+  Iter<true> begin();\n+  Iter<true> end();\n+};\n+\n+template <bool> struct Iter {\n+  int operator*();\n+  Iter operator++();\n+  template <bool C1, bool C2> friend constexpr bool operator==(Iter<C1>, Iter<C2>);\n+  template <bool C1, bool C2> friend constexpr bool operator!=(Iter<C1>, Iter<C2>);\n+};\n+\n+void func(Arg a) {\n+  for (auto ch : a) {\n+    a.begin() == a.end();\n+  }\n+}\n+\n+template <bool C1, bool C2> constexpr bool operator==(Iter<C1>, Iter<C2>) {\n+  return true;\n+}\n+\n+template <bool C1, bool C2> constexpr bool operator!=(Iter<C1> a, Iter<C2> b) {\n+  return a == b;\n+}"}, {"sha": "12dc9012c377f02ca1cdb78f7df8ed1c2a730b55", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic122.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic122.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05aca4e73c2b4b18dcf617a8548e754161a28eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic122.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic122.C?ref=05aca4e73c2b4b18dcf617a8548e754161a28eea", "patch": "@@ -9,7 +9,7 @@ template < class T > struct Container\n \n template < class T >\n T deref (T)\n-{}\t\t\t\t// { dg-warning \"no return\" }\n+{}\t\t\t\t// { dg-bogus \"no return\" }\n \n template < class T, class ... Args >\n auto deref (T u, int, Args ... args)->decltype (deref (u.f (), args ...))"}]}