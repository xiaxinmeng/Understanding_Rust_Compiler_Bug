{"sha": "a37103a431baef1976410132f5d07e647d11b332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3MTAzYTQzMWJhZWYxOTc2NDEwMTMyZjVkMDdlNjQ3ZDExYjMzMg==", "commit": {"author": {"name": "Eli Zaretskii", "email": "eliz@gnu.org", "date": "2005-05-15T16:36:40Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T16:36:40Z"}, "message": "fopen_unlocked.c: Enclose multi-word data types in @deftypefn in braces.\n\n2005-05-15  Eli Zaretskii  <eliz@gnu.org>\n\n\t* fopen_unlocked.c: Enclose multi-word data types in @deftypefn in\n\tbraces.\n\nFrom-SVN: r99729", "tree": {"sha": "ea3b84e02a70e8f6173ee0391c028f96908fd51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3b84e02a70e8f6173ee0391c028f96908fd51b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37103a431baef1976410132f5d07e647d11b332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37103a431baef1976410132f5d07e647d11b332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37103a431baef1976410132f5d07e647d11b332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37103a431baef1976410132f5d07e647d11b332/comments", "author": {"login": "Eli-Zaretskii", "id": 20908835, "node_id": "MDQ6VXNlcjIwOTA4ODM1", "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eli-Zaretskii", "html_url": "https://github.com/Eli-Zaretskii", "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers", "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}", "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions", "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs", "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos", "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}", "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b8366517d853544eacd5424ad1c18dae4fc2f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8366517d853544eacd5424ad1c18dae4fc2f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8366517d853544eacd5424ad1c18dae4fc2f6b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3c3cefed76b37f875f32cc52ad56b16e4cdcf5cb", "filename": "libiberty/fopen_unlocked.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37103a431baef1976410132f5d07e647d11b332/libiberty%2Ffopen_unlocked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37103a431baef1976410132f5d07e647d11b332/libiberty%2Ffopen_unlocked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffopen_unlocked.c?ref=a37103a431baef1976410132f5d07e647d11b332", "patch": "@@ -36,7 +36,7 @@ multi-threaded locking.  Otherwise do nothing.\n \n @end deftypefn\n \n-@deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -45,7 +45,7 @@ unchanged.\n \n @end deftypefn\n \n-@deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -54,7 +54,7 @@ unchanged.\n \n @end deftypefn\n \n-@deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid"}]}