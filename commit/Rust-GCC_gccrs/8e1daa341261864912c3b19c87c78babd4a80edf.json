{"sha": "8e1daa341261864912c3b19c87c78babd4a80edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxZGFhMzQxMjYxODY0OTEyYzNiMTljODdjNzhiYWJkNGE4MGVkZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-09-05T08:24:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-09-05T08:24:28Z"}, "message": "re PR c++/12037 (Spurious \"statement has no effect\" in templates)\n\ncp:\n\tPR c++/12037\n\t* cp-tree.h (COMPOUND_EXPR_OVERLOADED): New.\n\t(build_min_non_dep): Declare.\n\t* tree.c (build_min): Propagate TREE_SIDE_EFFECTS.\n\t(build_min_non_dep): New.\n\t* cvt.c (convert_to_void): Don't explicitly copy\n\tTREE_SIDE_EFFECTS, TREE_NO_UNUSED_WARNING.\n\t* call.c (build_new_method_call): Use build_min_non_dep.\n\t* decl2.c (grok_array_decl): Likewise.\n\t(build_offset_ref_call_from_tree): Likewise.\n\t* typeck.c (finish_class_member_access_expr,\n\tbuild_x_indirect_ref, build_x_binary_op, build_x_unary_op,\n\tbuild_x_conditional_expr, build_x_compound_expr): Likewise.\n\t(build_static_cast, build_reinterpret_cast,\n\tbuild_const_cast): Propagate TREE_SIDE_EFFECTS inside a template.\n\t* typeck2.c (build_x_arrow): Use build_min_non_dep.\n\t(build_functional_cast): Propagate TREE_SIDE_EFFECTS inside a\n\ttemplate.\n\t* rtti.c (build_dynamic_cast_1): Set DECL_IS_PURE.\n\t(build_dynamic_cast): Set TREE_SIDE_EFFECTS.\n\t* pt.c (build_non_dependent_expr): Check COMPOUND_EXPR_OVERLOADED.\ntestsuite:\n\tPR c++/12037\n\t* g++.dg/warn/noeffect4.C: New test.\n\nFrom-SVN: r71108", "tree": {"sha": "ed79054903625cbc8d96d97ada515039d44845bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed79054903625cbc8d96d97ada515039d44845bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e1daa341261864912c3b19c87c78babd4a80edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1daa341261864912c3b19c87c78babd4a80edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1daa341261864912c3b19c87c78babd4a80edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1daa341261864912c3b19c87c78babd4a80edf/comments", "author": null, "committer": null, "parents": [{"sha": "7976070c7125db206c88126464a99a18c3886e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7976070c7125db206c88126464a99a18c3886e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7976070c7125db206c88126464a99a18c3886e09"}], "stats": {"total": 260, "additions": 223, "deletions": 37}, "files": [{"sha": "6b7662f20fec6a33ca544919d3830c5603284aa8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -1,3 +1,27 @@\n+2003-09-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12037\n+\t* cp-tree.h (COMPOUND_EXPR_OVERLOADED): New.\n+\t(build_min_non_dep): Declare.\n+\t* tree.c (build_min): Propagate TREE_SIDE_EFFECTS.\n+\t(build_min_non_dep): New.\n+\t* cvt.c (convert_to_void): Don't explicitly copy\n+\tTREE_SIDE_EFFECTS, TREE_NO_UNUSED_WARNING.\n+\t* call.c (build_new_method_call): Use build_min_non_dep.\n+\t* decl2.c (grok_array_decl): Likewise.\n+\t(build_offset_ref_call_from_tree): Likewise.\n+\t* typeck.c (finish_class_member_access_expr,\n+\tbuild_x_indirect_ref, build_x_binary_op, build_x_unary_op,\n+\tbuild_x_conditional_expr, build_x_compound_expr): Likewise.\n+\t(build_static_cast, build_reinterpret_cast,\n+\tbuild_const_cast): Propagate TREE_SIDE_EFFECTS inside a template.\n+\t* typeck2.c (build_x_arrow): Use build_min_non_dep.\n+\t(build_functional_cast): Propagate TREE_SIDE_EFFECTS inside a\n+\ttemplate.\n+\t* rtti.c (build_dynamic_cast_1): Set DECL_IS_PURE.\n+\t(build_dynamic_cast): Set TREE_SIDE_EFFECTS.\n+\t* pt.c (build_non_dependent_expr): Check COMPOUND_EXPR_OVERLOADED.\n+\n 2003-09-04  Richard Henderson  <rth@redhat.com>\n \n \t* decl2.c (mark_member_pointers_and_eh_handlers): Update for"}, {"sha": "fee2357b07c53fb224dff3fd49162f0970bdd6db", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -5081,9 +5081,10 @@ build_new_method_call (tree instance, tree fns, tree args,\n  finish:;\n   \n   if (processing_template_decl && call != error_mark_node)\n-    return build_min (CALL_EXPR, TREE_TYPE (call),\n-\t\t      build_min_nt (COMPONENT_REF, orig_instance, orig_fns),\n-\t\t      orig_args);\n+    return build_min_non_dep\n+      (CALL_EXPR, call,\n+       build_min_nt (COMPONENT_REF, orig_instance, orig_fns),\n+       orig_args);\n   return call;\n }\n "}, {"sha": "8a2d51255023d8505a3836407496249e251875e7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -39,6 +39,7 @@ struct diagnostic_context;\n       IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n       NEW_EXPR_USE_GLOBAL (in NEW_EXPR).\n       DELETE_EXPR_USE_GLOBAL (in DELETE_EXPR).\n+      COMPOUND_EXPR_OVERLOADED (in COMPOUND_EXPR).\n       TREE_INDIRECT_USING (in NAMESPACE_DECL).\n       ICS_USER_FLAG (in _CONV)\n       CLEANUP_P (in TRY_BLOCK)\n@@ -2294,6 +2295,10 @@ struct lang_decl GTY(())\n #define DELETE_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define DELETE_EXPR_USE_VEC(NODE)\tTREE_LANG_FLAG_1 (NODE)\n \n+/* Indicates that this is a non-dependent COMPOUND_EXPR which will\n+   resolve to a function call.  */\n+#define COMPOUND_EXPR_OVERLOADED(NODE)\tTREE_LANG_FLAG_0 (NODE)\n+\n /* In a CALL_EXPR appearing in a template, true if Koenig lookup\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0(NODE)\n@@ -4166,9 +4171,9 @@ extern tree canonical_type_variant              (tree);\n extern tree copy_base_binfos\t\t\t(tree, tree, tree);\n extern int member_p\t\t\t\t(tree);\n extern cp_lvalue_kind real_lvalue_p             (tree);\n-extern tree build_min\t\t\t\t(enum tree_code, tree,\n-\t\t\t\t\t\t\t ...);\n+extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n+extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n extern tree build_cplus_new\t\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);"}, {"sha": "32d0d794cef80399a71ae45ce36ec24de259ad42", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -835,8 +835,6 @@ convert_to_void (tree expr, const char *implicit)\n \t  {\n \t    tree t = build (COMPOUND_EXPR, TREE_TYPE (new_op1),\n \t\t\t    TREE_OPERAND (expr, 0), new_op1);\n-\t    TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (expr);\n-\t    TREE_NO_UNUSED_WARNING (t) = TREE_NO_UNUSED_WARNING (expr);\n \t    expr = t;\n \t  }\n "}, {"sha": "dfbffa720a0a22d73626bd7ab3049788cd444896", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -463,8 +463,8 @@ grok_array_decl (tree array_expr, tree index_exp)\n       expr = build_array_ref (array_expr, index_exp);\n     }\n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min (ARRAY_REF, TREE_TYPE (expr), orig_array_expr, \n-\t\t      orig_index_exp);\n+    return build_min_non_dep (ARRAY_REF, expr,\n+\t\t\t      orig_array_expr, orig_index_exp);\n   return expr;\n }\n \n@@ -3029,7 +3029,7 @@ build_offset_ref_call_from_tree (tree fn, tree args)\n \n   expr = build_function_call (fn, args);\n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min (CALL_EXPR, TREE_TYPE (expr), orig_fn, orig_args);\n+    return build_min_non_dep (CALL_EXPR, expr, orig_fn, orig_args);\n   return expr;\n }\n "}, {"sha": "c163018d900af4b0b64517ea642d9ed5514b8682", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -11811,7 +11811,8 @@ build_non_dependent_expr (tree expr)\n \t\t  TREE_OPERAND (expr, 0),\n \t\t  build_non_dependent_expr (TREE_OPERAND (expr, 1)),\n \t\t  build_non_dependent_expr (TREE_OPERAND (expr, 2)));\n-  if (TREE_CODE (expr) == COMPOUND_EXPR)\n+  if (TREE_CODE (expr) == COMPOUND_EXPR\n+      && !COMPOUND_EXPR_OVERLOADED (expr))\n     return build (COMPOUND_EXPR,\n \t\t  TREE_TYPE (expr),\n \t\t  TREE_OPERAND (expr, 0),"}, {"sha": "32d318d6781f60987f57b626eb423c977b215a52", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -652,6 +652,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t\t   (NULL_TREE, ptrdiff_type_node, void_list_node))));\n \t      tmp = build_function_type (ptr_type_node, tmp);\n \t      dcast_fn = build_library_fn_ptr (name, tmp);\n+\t      DECL_IS_PURE (dcast_fn) = 1;\n               pop_nested_namespace (ns);\n               dynamic_cast_node = dcast_fn;\n \t    }\n@@ -686,7 +687,12 @@ build_dynamic_cast (tree type, tree expr)\n     return error_mark_node;\n   \n   if (processing_template_decl)\n-    return build_min (DYNAMIC_CAST_EXPR, type, expr);\n+    {\n+      expr = build_min (DYNAMIC_CAST_EXPR, type, expr);\n+      TREE_SIDE_EFFECTS (expr) = 1;\n+      \n+      return expr;\n+    }\n \n   return convert_from_reference (build_dynamic_cast_1 (type, expr));\n }"}, {"sha": "8310bf1bfb5ea5538d33b26bc6dcad0b2d4b9500", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -1265,11 +1265,8 @@ break_out_target_exprs (tree t)\n   return t;\n }\n \n-/* Obstack used for allocating nodes in template function and variable\n-   definitions.  */\n-\n-/* Similar to `build_nt', except that we set TREE_COMPLEXITY to be the\n-   current line number.  */\n+/* Similar to `build_nt', but for template definitions of dependent\n+   expressions  */\n \n tree\n build_min_nt (enum tree_code code, ...)\n@@ -1295,8 +1292,7 @@ build_min_nt (enum tree_code code, ...)\n   return t;\n }\n \n-/* Similar to `build', except we set TREE_COMPLEXITY to the current\n-   line-number.  */\n+/* Similar to `build', but for template definitions.  */\n \n tree\n build_min (enum tree_code code, tree tt, ...)\n@@ -1317,12 +1313,49 @@ build_min (enum tree_code code, tree tt, ...)\n     {\n       tree x = va_arg (p, tree);\n       TREE_OPERAND (t, i) = x;\n+      if (x && TREE_SIDE_EFFECTS (x))\n+\tTREE_SIDE_EFFECTS (t) = 1;\n     }\n \n   va_end (p);\n   return t;\n }\n \n+/* Similar to `build', but for template definitions of non-dependent\n+   expressions. NON_DEP is the non-dependent expression that has been\n+   built.  */\n+\n+tree\n+build_min_non_dep (enum tree_code code, tree non_dep, ...)\n+{\n+  register tree t;\n+  register int length;\n+  register int i;\n+  va_list p;\n+\n+  va_start (p, non_dep);\n+\n+  t = make_node (code);\n+  length = TREE_CODE_LENGTH (code);\n+  TREE_TYPE (t) = TREE_TYPE (non_dep);\n+  TREE_COMPLEXITY (t) = input_line;\n+  TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (non_dep);\n+\n+  for (i = 0; i < length; i++)\n+    {\n+      tree x = va_arg (p, tree);\n+      TREE_OPERAND (t, i) = x;\n+    }\n+\n+  if (code == COMPOUND_EXPR && TREE_CODE (non_dep) != COMPOUND_EXPR)\n+    /* This should not be considered a COMPOUND_EXPR, because it\n+       resolves to an overload. */\n+    COMPOUND_EXPR_OVERLOADED (t) = 1;\n+  \n+  va_end (p);\n+  return t;\n+}\n+\n /* Returns an INTEGER_CST (of type `int') corresponding to I.\n    Multiple calls with the same value of I may or may not yield the\n    same node; therefore, callers should never modify the node"}, {"sha": "da07fea0c5fe7992896effe8b7fc99c9580634b4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -1936,8 +1936,8 @@ finish_class_member_access_expr (tree object, tree name)\n   expr = build_class_member_access_expr (object, member, access_path,\n \t\t\t\t\t /*preserve_reference=*/false);\n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min (COMPONENT_REF, TREE_TYPE (expr), orig_object, \n-\t\t      orig_name);\n+    return build_min_non_dep (COMPONENT_REF, expr,\n+\t\t\t      orig_object, orig_name);\n   return expr;\n }\n \n@@ -1994,7 +1994,7 @@ build_x_indirect_ref (tree expr, const char *errorstring)\n     rval = build_indirect_ref (expr, errorstring);\n \n   if (processing_template_decl && rval != error_mark_node)\n-    return build_min (INDIRECT_REF, TREE_TYPE (rval), orig_expr);\n+    return build_min_non_dep (INDIRECT_REF, rval, orig_expr);\n   else\n     return rval;\n }\n@@ -2637,7 +2637,7 @@ build_x_binary_op (enum tree_code code, tree arg1, tree arg2)\n     expr = build_new_op (code, LOOKUP_NORMAL, arg1, arg2, NULL_TREE);\n \n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min (code, TREE_TYPE (expr), orig_arg1, orig_arg2);\n+    return build_min_non_dep (code, expr, orig_arg1, orig_arg2);\n   \n   return expr;\n }\n@@ -3537,7 +3537,8 @@ build_x_unary_op (enum tree_code code, tree xarg)\n     }\n \n   if (processing_template_decl && exp != error_mark_node)\n-    return build_min (code, TREE_TYPE (exp), orig_expr, NULL_TREE);\n+    return build_min_non_dep (code, exp, orig_expr,\n+\t\t\t      /*For {PRE,POST}{INC,DEC}REMENT_EXPR*/NULL_TREE);\n   return exp;\n }\n \n@@ -4277,8 +4278,8 @@ build_x_conditional_expr (tree ifexp, tree op1, tree op2)\n \n   expr = build_conditional_expr (ifexp, op1, op2);\n   if (processing_template_decl && expr != error_mark_node)\n-    return build_min (COND_EXPR, TREE_TYPE (expr), \n-\t\t      orig_ifexp, orig_op1, orig_op2);\n+    return build_min_non_dep (COND_EXPR, expr, \n+\t\t\t      orig_ifexp, orig_op1, orig_op2);\n   return expr;\n }\n \f\n@@ -4324,8 +4325,8 @@ build_x_compound_expr (tree op1, tree op2)\n     result = build_compound_expr (op1, op2);\n \n   if (processing_template_decl && result != error_mark_node)\n-    return build_min (COMPOUND_EXPR, TREE_TYPE (result), \n-\t\t      orig_op1, orig_op2);\n+    return build_min_non_dep (COMPOUND_EXPR, result, orig_op1, orig_op2);\n+  \n   return result;\n }\n \n@@ -4382,8 +4383,10 @@ build_static_cast (tree type, tree expr)\n \n   if (processing_template_decl)\n     {\n-      tree t = build_min (STATIC_CAST_EXPR, type, expr); \n-      return t;\n+      expr = build_min (STATIC_CAST_EXPR, type, expr);\n+      /* We don't know if it will or will not have side effects.  */\n+      TREE_SIDE_EFFECTS (expr) = 1;\n+      return expr;\n     }\n \n   /* build_c_cast puts on a NOP_EXPR to make the result not an lvalue.\n@@ -4473,9 +4476,10 @@ build_static_cast (tree type, tree expr)\n \t converted to an enumeration type.  */\n       || (INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n \t  && INTEGRAL_OR_ENUMERATION_TYPE_P (intype)))\n-      /* Really, build_c_cast should defer to this function rather\n-\t than the other way around.  */\n-      return build_c_cast (type, expr);\n+    /* Really, build_c_cast should defer to this function rather\n+       than the other way around.  */\n+    return build_c_cast (type, expr);\n+  \n   if (TYPE_PTR_P (type) && TYPE_PTR_P (intype)\n       && CLASS_TYPE_P (TREE_TYPE (type))\n       && CLASS_TYPE_P (TREE_TYPE (intype))\n@@ -4491,6 +4495,7 @@ build_static_cast (tree type, tree expr)\n \t\t\t  ba_check | ba_quiet, NULL);\n       return build_base_path (MINUS_EXPR, expr, base, /*nonnull=*/false);\n     }\n+  \n   if ((TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n       || (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype)))\n     {\n@@ -4567,6 +4572,11 @@ build_reinterpret_cast (tree type, tree expr)\n   if (processing_template_decl)\n     {\n       tree t = build_min (REINTERPRET_CAST_EXPR, type, expr);\n+      \n+      if (!TREE_SIDE_EFFECTS (t)\n+\t  && type_dependent_expression_p (expr))\n+\t/* There might turn out to be side effects inside expr.  */\n+\tTREE_SIDE_EFFECTS (t) = 1;\n       return t;\n     }\n \n@@ -4651,6 +4661,11 @@ build_const_cast (tree type, tree expr)\n   if (processing_template_decl)\n     {\n       tree t = build_min (CONST_CAST_EXPR, type, expr);\n+      \n+      if (!TREE_SIDE_EFFECTS (t)\n+\t  && type_dependent_expression_p (expr))\n+\t/* There might turn out to be side effects inside expr.  */\n+\tTREE_SIDE_EFFECTS (t) = 1;\n       return t;\n     }\n \n@@ -4720,6 +4735,8 @@ build_c_cast (tree type, tree expr)\n     {\n       tree t = build_min (CAST_EXPR, type,\n \t\t\t  tree_cons (NULL_TREE, value, NULL_TREE));\n+      /* We don't know if it will or will not have side effects. */\n+      TREE_SIDE_EFFECTS (t) = 1;\n       return t;\n     }\n "}, {"sha": "28d876d0433079efac6d41dbd1fc728637a686b2", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -1023,9 +1023,12 @@ build_x_arrow (tree expr)\n   if (TREE_CODE (TREE_TYPE (last_rval)) == POINTER_TYPE)\n     {\n       if (processing_template_decl)\n-\treturn build_min (ARROW_EXPR, \n-\t\t\t  TREE_TYPE (TREE_TYPE (last_rval)), \n-\t\t\t  orig_expr);\n+\t{\n+\t  expr = build_min_non_dep (ARROW_EXPR, last_rval, orig_expr);\n+\t  /* It will be dereferenced. */\n+\t  TREE_TYPE (expr) = TREE_TYPE (TREE_TYPE (last_rval));\n+\t  return expr;\n+\t}\n \n       return build_indirect_ref (last_rval, NULL);\n     }\n@@ -1120,7 +1123,12 @@ build_functional_cast (tree exp, tree parms)\n     type = exp;\n \n   if (processing_template_decl)\n-    return build_min (CAST_EXPR, type, parms);\n+    {\n+      tree t = build_min (CAST_EXPR, type, parms);\n+      /* We don't know if it will or will not have side effects.  */\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      return t;\n+    }\n \n   if (! IS_AGGR_TYPE (type))\n     {"}, {"sha": "693ae0caf6e8a85b885fe22e8fa6b024e9455f07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -1,3 +1,8 @@\n+2003-09-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12037\n+\t* g++.dg/warn/noeffect4.C: New test.\n+\n 2003-09-04  Matt Austern  <austern@apple.com>\n \n \t* g++.dg/ext/fnname1.C: New test. (__func__ for C++.)"}, {"sha": "a4c46dafbcc3e4644baf39ed5742d51a375277c0", "filename": "gcc/testsuite/g++.dg/warn/noeffect4.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1daa341261864912c3b19c87c78babd4a80edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C?ref=8e1daa341261864912c3b19c87c78babd4a80edf", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 2 Sep 2003 <nathan@codesourcery.com>\n+\n+// PR 12037.\n+\n+struct X\n+{\n+  int operator+(int);\n+  int operator-(int);\n+  int operator*(int);\n+  int operator/(int);\n+  int operator%(int);\n+  int operator>>(int);\n+  int operator<<(int);\n+  int operator&(int);\n+  int operator|(int);\n+  int operator^(int);\n+  int operator&&(int);\n+  int operator||(int);\n+  int operator==(int);\n+  int operator!=(int);\n+  int operator<(int);\n+  int operator<=(int);\n+  int operator>(int);\n+  int operator>=(int);\n+  int operator*();\n+  int operator!();\n+  int operator~();\n+  int operator++();\n+  int operator--();\n+  int operator++(int);\n+  int operator--(int);\n+  int operator()();\n+  int operator,(int);\n+  X *operator->();\n+  operator int () const;\n+  int m;\n+  virtual ~X ();\n+  X &Foo ();\n+};\n+struct Y : X \n+{\n+};\n+\n+template<int I> void Foo (X &x)\n+{\n+  x + I;\n+  x - I;\n+  x * I;\n+  x / I;\n+  x % I;\n+  x >> I;\n+  x << I;\n+  x & I;\n+  x | I;\n+  x && I;\n+  x || I;\n+  x == I;\n+  x != I;\n+  x < I;\n+  x <= I;\n+  x > I;\n+  x >= I;\n+  *x;\n+  !x;\n+  ~x;\n+  x++;\n+  x--;\n+  ++x;\n+  --x;\n+  x ();\n+  x, I;\n+  x->m;\n+  static_cast<int> (x);\n+  dynamic_cast<Y &> (x);\n+  reinterpret_cast<int> (x.Foo ());\n+  const_cast<X &> (x.Foo ());\n+  \n+  reinterpret_cast<int *> (&x);// { dg-warning \"no effect\" \"\" }\n+  const_cast<X &> (x);         // { dg-warning \"no effect\" \"\" }\n+  sizeof (x++);                // { dg-warning \"no effect\" \"\" }\n+  __alignof__ (x++);           // { dg-warning \"no effect\" \"\" }\n+}\n+  \n+"}]}