{"sha": "e98c3ee9712a360b4f470f930ac0c68863db1d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4YzNlZTk3MTJhMzYwYjRmNDcwZjkzMGFjMGM2ODg2M2RiMWQzZg==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2019-08-08T19:04:56Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-08-08T19:04:56Z"}, "message": "RISC-V: Fix C ABI for flattened struct with 0-length bitfield.\n\n\tgcc/\n\tPR target/91229\n\t* config/riscv/riscv.c (riscv_flatten_aggregate_field): New arg\n\tignore_zero_width_bit_field_p.  Skip zero size bitfields when true.\n\tPass into recursive call.\n\t(riscv_flatten_aggregate_argument): New arg.  Pass to\n\triscv_flatten_aggregate_field.\n\t(riscv_pass_aggregate_in_fpr_pair_p): New local warned.  Call\n\triscv_flatten_aggregate_argument twice, with false and true as last\n\targ.  Process result twice.  Compare results and warn if different.\n\t(riscv_pass_aggregate_in_fpr_and_gpr_p): Likewise.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/flattened-struct-abi-1.c: New test.\n\t* gcc.target/riscv/flattened-struct-abi-2.c: New test.\n\nFrom-SVN: r274215", "tree": {"sha": "074a5f773ee577199037d614dad492689e2bd083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074a5f773ee577199037d614dad492689e2bd083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98c3ee9712a360b4f470f930ac0c68863db1d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98c3ee9712a360b4f470f930ac0c68863db1d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98c3ee9712a360b4f470f930ac0c68863db1d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98c3ee9712a360b4f470f930ac0c68863db1d3f/comments", "author": null, "committer": null, "parents": [{"sha": "355229f22a06073a288f6da189ea2757c5e09e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355229f22a06073a288f6da189ea2757c5e09e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355229f22a06073a288f6da189ea2757c5e09e30"}], "stats": {"total": 129, "additions": 113, "deletions": 16}, "files": [{"sha": "9b939c1024a9e03505efb40d48e5dd1d0ead8abd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e98c3ee9712a360b4f470f930ac0c68863db1d3f", "patch": "@@ -1,3 +1,16 @@\n+2019-08-08  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR target/91229\n+\t* config/riscv/riscv.c (riscv_flatten_aggregate_field): New arg\n+\tignore_zero_width_bit_field_p.  Skip zero size bitfields when true.\n+\tPass into recursive call.\n+\t(riscv_flatten_aggregate_argument): New arg.  Pass to\n+\triscv_flatten_aggregate_field.\n+\t(riscv_pass_aggregate_in_fpr_pair_p): New local warned.  Call\n+\triscv_flatten_aggregate_argument twice, with false and true as last\n+\targ.  Process result twice.  Compare results and warn if different.\n+\t(riscv_pass_aggregate_in_fpr_and_gpr_p): Likewise.\n+\n 2019-08-08  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/91352"}, {"sha": "c12b26f0dc40d4fae7651f5907b5f83d586b4c33", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=e98c3ee9712a360b4f470f930ac0c68863db1d3f", "patch": "@@ -2383,7 +2383,8 @@ typedef struct {\n static int\n riscv_flatten_aggregate_field (const_tree type,\n \t\t\t       riscv_aggregate_field fields[2],\n-\t\t\t       int n, HOST_WIDE_INT offset)\n+\t\t\t       int n, HOST_WIDE_INT offset,\n+\t\t\t       bool ignore_zero_width_bit_field_p)\n {\n   switch (TREE_CODE (type))\n     {\n@@ -2400,8 +2401,21 @@ riscv_flatten_aggregate_field (const_tree type,\n \t    if (!TYPE_P (TREE_TYPE (f)))\n \t      return -1;\n \n-\t    HOST_WIDE_INT pos = offset + int_byte_position (f);\n-\t    n = riscv_flatten_aggregate_field (TREE_TYPE (f), fields, n, pos);\n+\t    /* The C++ front end strips zero-length bit-fields from structs.\n+\t       So we need to ignore them in the C front end to make C code\n+\t       compatible with C++ code.  */\n+\t    if (ignore_zero_width_bit_field_p\n+\t\t&& DECL_BIT_FIELD (f)\n+\t\t&& (DECL_SIZE (f) == NULL_TREE\n+\t\t    || integer_zerop (DECL_SIZE (f))))\n+\t      ;\n+\t    else\n+\t      {\n+\t\tHOST_WIDE_INT pos = offset + int_byte_position (f);\n+\t\tn = riscv_flatten_aggregate_field (TREE_TYPE (f),\n+\t\t\t\t\t\t   fields, n, pos,\n+\t\t\t\t\t\t   ignore_zero_width_bit_field_p);\n+\t      }\n \t    if (n < 0)\n \t      return -1;\n \t  }\n@@ -2414,7 +2428,8 @@ riscv_flatten_aggregate_field (const_tree type,\n \ttree index = TYPE_DOMAIN (type);\n \ttree elt_size = TYPE_SIZE_UNIT (TREE_TYPE (type));\n \tint n_subfields = riscv_flatten_aggregate_field (TREE_TYPE (type),\n-\t\t\t\t\t\t\t subfields, 0, offset);\n+\t\t\t\t\t\t\t subfields, 0, offset,\n+\t\t\t\t\t\t\t ignore_zero_width_bit_field_p);\n \n \t/* Can't handle incomplete types nor sizes that are not fixed.  */\n \tif (n_subfields <= 0\n@@ -2487,12 +2502,14 @@ riscv_flatten_aggregate_field (const_tree type,\n \n static int\n riscv_flatten_aggregate_argument (const_tree type,\n-\t\t\t\t  riscv_aggregate_field fields[2])\n+\t\t\t\t  riscv_aggregate_field fields[2],\n+\t\t\t\t  bool ignore_zero_width_bit_field_p)\n {\n   if (!type || TREE_CODE (type) != RECORD_TYPE)\n     return -1;\n \n-  return riscv_flatten_aggregate_field (type, fields, 0, 0);\n+  return riscv_flatten_aggregate_field (type, fields, 0, 0,\n+\t\t\t\t\tignore_zero_width_bit_field_p);\n }\n \n /* See whether TYPE is a record whose fields should be returned in one or\n@@ -2502,13 +2519,34 @@ static unsigned\n riscv_pass_aggregate_in_fpr_pair_p (const_tree type,\n \t\t\t\t    riscv_aggregate_field fields[2])\n {\n-  int n = riscv_flatten_aggregate_argument (type, fields);\n+  static int warned = 0;\n \n-  for (int i = 0; i < n; i++)\n+  /* This is the old ABI, which differs for C++ and C.  */\n+  int n_old = riscv_flatten_aggregate_argument (type, fields, false);\n+  for (int i = 0; i < n_old; i++)\n     if (!SCALAR_FLOAT_TYPE_P (fields[i].type))\n-      return 0;\n+      {\n+\tn_old = -1;\n+\tbreak;\n+      }\n+\n+  /* This is the new ABI, which is the same for C++ and C.  */\n+  int n_new = riscv_flatten_aggregate_argument (type, fields, true);\n+  for (int i = 0; i < n_new; i++)\n+    if (!SCALAR_FLOAT_TYPE_P (fields[i].type))\n+      {\n+\tn_new = -1;\n+\tbreak;\n+      }\n \n-  return n > 0 ? n : 0;\n+  if ((n_old != n_new) && (warned == 0))\n+    {\n+      warning (0, \"ABI for flattened struct with zero-length bit-fields \"\n+\t       \"changed in GCC 10\");\n+      warned = 1;\n+    }\n+\n+  return n_new > 0 ? n_new : 0;\n }\n \n /* See whether TYPE is a record whose fields should be returned in one or\n@@ -2519,16 +2557,38 @@ static bool\n riscv_pass_aggregate_in_fpr_and_gpr_p (const_tree type,\n \t\t\t\t       riscv_aggregate_field fields[2])\n {\n-  unsigned num_int = 0, num_float = 0;\n-  int n = riscv_flatten_aggregate_argument (type, fields);\n+  static int warned = 0;\n+\n+  /* This is the old ABI, which differs for C++ and C.  */\n+  unsigned num_int_old = 0, num_float_old = 0;\n+  int n_old = riscv_flatten_aggregate_argument (type, fields, false);\n+  for (int i = 0; i < n_old; i++)\n+    {\n+      num_float_old += SCALAR_FLOAT_TYPE_P (fields[i].type);\n+      num_int_old += INTEGRAL_TYPE_P (fields[i].type);\n+    }\n+\n+  /* This is the new ABI, which is the same for C++ and C.  */\n+  unsigned num_int_new = 0, num_float_new = 0;\n+  int n_new = riscv_flatten_aggregate_argument (type, fields, true);\n+  for (int i = 0; i < n_new; i++)\n+    {\n+      num_float_new += SCALAR_FLOAT_TYPE_P (fields[i].type);\n+      num_int_new += INTEGRAL_TYPE_P (fields[i].type);\n+    }\n \n-  for (int i = 0; i < n; i++)\n+  if (((num_int_old == 1 && num_float_old == 1\n+\t&& (num_int_old != num_int_new || num_float_old != num_float_new))\n+       || (num_int_new == 1 && num_float_new == 1\n+\t   && (num_int_old != num_int_new || num_float_old != num_float_new)))\n+      && (warned == 0))\n     {\n-      num_float += SCALAR_FLOAT_TYPE_P (fields[i].type);\n-      num_int += INTEGRAL_TYPE_P (fields[i].type);\n+      warning (0, \"ABI for flattened struct with zero-length bit-fields \"\n+\t       \"changed in GCC 10\");\n+      warned = 1;\n     }\n \n-  return num_int == 1 && num_float == 1;\n+  return num_int_new == 1 && num_float_new == 1;\n }\n \n /* Return the representation of an argument passed or returned in an FPR"}, {"sha": "94b8852d7a6962fdf07624d12ee903ee629db752", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e98c3ee9712a360b4f470f930ac0c68863db1d3f", "patch": "@@ -1,3 +1,9 @@\n+2019-08-08  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR target/91229\n+\t* gcc.target/riscv/flattened-struct-abi-1.c: New test.\n+\t* gcc.target/riscv/flattened-struct-abi-2.c: New test.\n+\n 2019-08-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79520"}, {"sha": "f6a3c51b3fb0b873bc2780e88015c92133f94cc6", "filename": "gcc/testsuite/gcc.target/riscv/flattened-struct-abi-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-1.c?ref=e98c3ee9712a360b4f470f930ac0c68863db1d3f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc -mabi=ilp32d\" } */\n+struct s1 { int : 0; float f; int i; int : 0; };\n+\n+void dummy(float, int);\n+\n+void f(struct s1 s) { /* { dg-warning \"flattened struct\" } */\n+  dummy(s.f + 1.0, s.i + 1);\n+}"}, {"sha": "760826a42f1ca081b77135f17f0fdafc200929c3", "filename": "gcc/testsuite/gcc.target/riscv/flattened-struct-abi-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98c3ee9712a360b4f470f930ac0c68863db1d3f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fflattened-struct-abi-2.c?ref=e98c3ee9712a360b4f470f930ac0c68863db1d3f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc -mabi=ilp32d\" } */\n+struct s1 { int : 0; float f; float g; int : 0; };\n+\n+void dummy(float, float);\n+\n+void f(struct s1 s) { /* { dg-warning \"flattened struct\" } */\n+  dummy(s.f + 1.0, s.g + 2.0);\n+}"}]}