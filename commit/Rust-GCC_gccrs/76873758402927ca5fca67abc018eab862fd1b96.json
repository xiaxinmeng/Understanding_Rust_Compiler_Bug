{"sha": "76873758402927ca5fca67abc018eab862fd1b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4NzM3NTg0MDI5MjdjYTVmY2E2N2FiYzAxOGVhYjg2MmZkMWI5Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-12T13:57:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-12T13:57:45Z"}, "message": "re PR middle-end/80163 (ICE on hopefully valid code)\n\n\tPR c/80163\n\t* expr.c <CASE_CONVERT>: For EXPAND_INITIALIZER determine SIGN_EXTEND\n\tvs. ZERO_EXTEND based on signedness of treeop0's type rather than\n\tsignedness of the result type.\n\n\t* gcc.dg/torture/pr80163.c: New test.\n\nFrom-SVN: r246876", "tree": {"sha": "3ee9c7544c16c0adf77cb08020ba136611a605cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee9c7544c16c0adf77cb08020ba136611a605cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76873758402927ca5fca67abc018eab862fd1b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76873758402927ca5fca67abc018eab862fd1b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76873758402927ca5fca67abc018eab862fd1b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76873758402927ca5fca67abc018eab862fd1b96/comments", "author": null, "committer": null, "parents": [{"sha": "940c9a7c2cf3bbbf43b0602c9283bf7579cf05ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940c9a7c2cf3bbbf43b0602c9283bf7579cf05ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940c9a7c2cf3bbbf43b0602c9283bf7579cf05ec"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "3a7675e10c2c836946518b99cdfc32e2602ae2dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76873758402927ca5fca67abc018eab862fd1b96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76873758402927ca5fca67abc018eab862fd1b96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76873758402927ca5fca67abc018eab862fd1b96", "patch": "@@ -1,5 +1,12 @@\n+2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/80163\n+\t* expr.c <CASE_CONVERT>: For EXPAND_INITIALIZER determine SIGN_EXTEND\n+\tvs. ZERO_EXTEND based on signedness of treeop0's type rather than\n+\tsignedness of the result type.\n+\n 2017-04-12  Richard Biener  <rguenther@suse.de>\n-\tJeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/80359\n \t* tree-ssa-dse.c (maybe_trim_partially_dead_store): Do not\n@@ -18,7 +25,7 @@\n \tfor quad_address_p for TImode, instead of just not indexed_address.\n \n 2017-04-12  Richard Biener  <rguenther@suse.de>\n-\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/79671\n \t* alias.c (component_uses_parent_alias_set_from): Handle"}, {"sha": "29ebad3a061f6545fbfa5dd404072a6a3bcae42b", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=76873758402927ca5fca67abc018eab862fd1b96", "patch": "@@ -8333,7 +8333,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t}\n \n       else if (modifier == EXPAND_INITIALIZER)\n-\top0 = gen_rtx_fmt_e (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);\n+\top0 = gen_rtx_fmt_e (TYPE_UNSIGNED (TREE_TYPE (treeop0))\n+\t\t\t     ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);\n \n       else if (target == 0)\n \top0 = convert_to_mode (mode, op0,"}, {"sha": "f43a4d968a0a842fa7d1079739d281e3d10afb7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76873758402927ca5fca67abc018eab862fd1b96", "patch": "@@ -1,11 +1,16 @@\n+2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/80163\n+\t* gcc.dg/torture/pr80163.c: New test.\n+\n 2017-04-12  Richard Biener  <rguenther@suse.de>\n-\tJeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/80359\n \t* gcc.dg/torture/pr80359.c: New testcase.\n \n 2017-04-12  Richard Biener  <rguenther@suse.de>\n-\tBernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/79671\n \t* g++.dg/torture/pr79671.C: New testcase."}, {"sha": "80cc68dd76de42a74cd3207d0bd375898adfb5fc", "filename": "gcc/testsuite/gcc.dg/torture/pr80163.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76873758402927ca5fca67abc018eab862fd1b96/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80163.c?ref=76873758402927ca5fca67abc018eab862fd1b96", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/80163 */\n+/* { dg-do compile { target int128 } } */\n+\n+volatile int v;\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  v++;\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) __int128_t *\n+foo (unsigned long **p)\n+{\n+a:\n+  bar ();\n+b:\n+  bar ();\n+  static __int128_t d = (unsigned long) &&a - (unsigned long) &&b;\n+  static unsigned long e = (unsigned long) &&a - (unsigned long) &&b;\n+  *p = &e;\n+  return &d;\n+}\n+\n+int\n+main ()\n+{\n+  __int128_t *p;\n+  unsigned long *q;\n+  p = foo (&q);\n+  if (*p != *q)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}