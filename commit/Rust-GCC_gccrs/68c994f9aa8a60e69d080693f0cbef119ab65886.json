{"sha": "68c994f9aa8a60e69d080693f0cbef119ab65886", "node_id": "C_kwDOANBUbNoAKDY4Yzk5NGY5YWE4YTYwZTY5ZDA4MDY5M2YwY2JlZjExOWFiNjU4ODY", "commit": {"author": {"name": "marxin", "email": "mliska@suse.cz", "date": "2022-07-25T09:03:23Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-28T10:37:03Z"}, "message": "jit,docs: replace c:type:`int_type` with :expr:`int_type`\n\nUse expression that work fine for basic type.\n\ngcc/jit/ChangeLog:\n\n\t* docs/cp/topics/expressions.rst: Use :expr: for basic types.\n\t* docs/topics/compilation.rst: Likewise.\n\t* docs/topics/expressions.rst: Likewise.\n\t* docs/topics/function-pointers.rst: Likewise.", "tree": {"sha": "bb76b61a657395a7435c95b73fa0f82ef5271867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb76b61a657395a7435c95b73fa0f82ef5271867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c994f9aa8a60e69d080693f0cbef119ab65886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c994f9aa8a60e69d080693f0cbef119ab65886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c994f9aa8a60e69d080693f0cbef119ab65886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c994f9aa8a60e69d080693f0cbef119ab65886/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1a4694e5a1a07a1545338c34b792d9274ecbd1"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "003dbce8991b4d7901355fb4159eb205b4ac5bbd", "filename": "gcc/jit/docs/cp/topics/expressions.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst?ref=68c994f9aa8a60e69d080693f0cbef119ab65886", "patch": "@@ -57,14 +57,14 @@ Simple expressions\n                                            int value) const\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`int` value.\n+   the given constant :expr:`int` value.\n \n .. function:: gccjit::rvalue \\\n               gccjit::context::new_rvalue (gccjit::type numeric_type, \\\n                                            long value) const\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`long` value.\n+   the given constant :expr:`long` value.\n \n .. function::  gccjit::rvalue \\\n                gccjit::context::zero (gccjit::type numeric_type) const\n@@ -91,7 +91,7 @@ Simple expressions\n                                             double value) const\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`double` value.\n+   the given constant :expr:`double` value.\n \n .. function:: gccjit::rvalue \\\n               gccjit::context::new_rvalue (gccjit::type pointer_type, \\"}, {"sha": "91b9c2533cfe758460a99dedd4631090e35ceb3c", "filename": "gcc/jit/docs/topics/compilation.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst?ref=68c994f9aa8a60e69d080693f0cbef119ab65886", "patch": "@@ -98,8 +98,8 @@ In-memory compilation\n    If the global is found, the result will need to be cast to a\n    pointer of the correct type before it can be called.\n \n-   This is a *pointer* to the global, so e.g. for an :c:type:`int` this is\n-   an :c:type:`int *`.\n+   This is a *pointer* to the global, so e.g. for an :expr:`int` this is\n+   an :expr:`int *`.\n \n    For example, given an ``int foo;`` created this way:\n "}, {"sha": "00e2ec8cfeb3cf2880b37a7a47e2e3e1fe33f9b3", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=68c994f9aa8a60e69d080693f0cbef119ab65886", "patch": "@@ -60,15 +60,15 @@ Simple expressions\n                                                    int value)\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`int` value.\n+   the given constant :expr:`int` value.\n \n .. function:: gcc_jit_rvalue *\\\n               gcc_jit_context_new_rvalue_from_long (gcc_jit_context *ctxt, \\\n                                                     gcc_jit_type *numeric_type, \\\n                                                     long value)\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`long` value.\n+   the given constant :expr:`long` value.\n \n .. function::  gcc_jit_rvalue *gcc_jit_context_zero (gcc_jit_context *ctxt, \\\n                                                      gcc_jit_type *numeric_type)\n@@ -96,7 +96,7 @@ Simple expressions\n                                                        double value)\n \n    Given a numeric type (integer or floating point), build an rvalue for\n-   the given constant :c:type:`double` value.\n+   the given constant :expr:`double` value.\n \n .. function:: gcc_jit_rvalue *\\\n               gcc_jit_context_new_rvalue_from_ptr (gcc_jit_context *ctxt, \\"}, {"sha": "dde49215853ced9e67c9b693fa397bbc9442d02b", "filename": "gcc/jit/docs/topics/function-pointers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c994f9aa8a60e69d080693f0cbef119ab65886/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst?ref=68c994f9aa8a60e69d080693f0cbef119ab65886", "patch": "@@ -48,7 +48,7 @@ to it in :c:type:`gcc_jit_rvalue` form using\n type obtained using :c:func:`gcc_jit_context_new_function_ptr_type`.\n \n Here's an example of creating a function pointer type corresponding to C's\n-:c:type:`void (*) (int, int, int)`:\n+:expr:`void (*) (int, int, int)`:\n \n .. code-block:: c\n "}]}