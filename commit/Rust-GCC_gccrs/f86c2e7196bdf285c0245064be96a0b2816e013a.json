{"sha": "f86c2e7196bdf285c0245064be96a0b2816e013a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg2YzJlNzE5NmJkZjI4NWMwMjQ1MDY0YmU5NmEwYjI4MTZlMDEzYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-31T10:55:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-31T10:55:27Z"}, "message": "vr-values.h (vr_values::swap_vr_value): New.\n\n2019-07-31  Richard Biener  <rguenther@suse.de>\n\n\t* vr-values.h (vr_values::swap_vr_value): New.\n\t(vr_values::free_value_range): likewise.\n\t* vr-values.c (vr_values::swap_vr_value): Implement.\n\t* gimple-ssa-evrp-analyze.h (evrp_range_analyzer::pop_value_range):\n\tDo not return a range or take a var.\n\t(evrp_range_analyzer::stack): Change back to recording a non-const\n\tvalue_range *.\n\t* gimple-ssa-evrp-analyze.c\n\t(evrp_range_analyzer::record_ranges_from_stmt): Free unused\n\tvalue-range.\n\t(evrp_range_analyzer::pop_to_marker): Adjust.\n\t(evrp_range_analyzer::push_value_range): Use new swap_vr_value.\n\t(evrp_range_analyzer::pop_value_range): Likewise.  Free the\n\tno longer needed value-range.\n\nFrom-SVN: r273930", "tree": {"sha": "5204ab9fd288bbc885bb9cf97b5d19de5a1051ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5204ab9fd288bbc885bb9cf97b5d19de5a1051ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f86c2e7196bdf285c0245064be96a0b2816e013a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86c2e7196bdf285c0245064be96a0b2816e013a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86c2e7196bdf285c0245064be96a0b2816e013a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86c2e7196bdf285c0245064be96a0b2816e013a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f39b06395e90d8c70548eedadc30e880f6426b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b06395e90d8c70548eedadc30e880f6426b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39b06395e90d8c70548eedadc30e880f6426b26"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "f5b0ab61a4acac60a3eb33cfe7b12f2b50b186fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f86c2e7196bdf285c0245064be96a0b2816e013a", "patch": "@@ -1,3 +1,20 @@\n+2019-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* vr-values.h (vr_values::swap_vr_value): New.\n+\t(vr_values::free_value_range): likewise.\n+\t* vr-values.c (vr_values::swap_vr_value): Implement.\n+\t* gimple-ssa-evrp-analyze.h (evrp_range_analyzer::pop_value_range):\n+\tDo not return a range or take a var.\n+\t(evrp_range_analyzer::stack): Change back to recording a non-const\n+\tvalue_range *.\n+\t* gimple-ssa-evrp-analyze.c\n+\t(evrp_range_analyzer::record_ranges_from_stmt): Free unused\n+\tvalue-range.\n+\t(evrp_range_analyzer::pop_to_marker): Adjust.\n+\t(evrp_range_analyzer::push_value_range): Use new swap_vr_value.\n+\t(evrp_range_analyzer::pop_value_range): Likewise.  Free the\n+\tno longer needed value-range.\n+\n 2019-07-31  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-dce.c (propagate_necessity): Delete operator can"}, {"sha": "1c4fc8d8682d1544675ff2ead9ce0e3edde9917b", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=f86c2e7196bdf285c0245064be96a0b2816e013a", "patch": "@@ -214,7 +214,10 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t\t\t\t    old_vr->max ());\n \t      tem.intersect (vrs[i].second);\n \t      if (tem.equal_p (*old_vr))\n-\t\tcontinue;\n+\t\t{\n+\t\t  vr_values->free_value_range (vrs[i].second);\n+\t\t  continue;\n+\t\t}\n \t      push_value_range (vrs[i].first, vrs[i].second);\n \t      if (is_fallthru\n \t\t  && m_update_global_ranges\n@@ -393,7 +396,7 @@ evrp_range_analyzer::pop_to_marker (void)\n {\n   gcc_checking_assert (!stack.is_empty ());\n   while (stack.last ().first != NULL_TREE)\n-    pop_value_range (stack.last ().first);\n+    pop_value_range ();\n   stack.pop ();\n }\n \n@@ -421,17 +424,18 @@ evrp_range_analyzer::push_value_range (tree var, value_range *vr)\n       dump_value_range (dump_file, vr);\n       fprintf (dump_file, \"\\n\");\n     }\n-  stack.safe_push (std::make_pair (var, get_value_range (var)));\n-  vr_values->set_vr_value (var, vr);\n+  value_range *old_vr = vr_values->swap_vr_value (var, vr);\n+  stack.safe_push (std::make_pair (var, old_vr));\n }\n \n-/* Pop the Value Range from the vrp_stack and update VAR with it.  */\n+/* Pop a Value Range from the vrp_stack.  */\n \n-const value_range *\n-evrp_range_analyzer::pop_value_range (tree var)\n+void\n+evrp_range_analyzer::pop_value_range ()\n {\n-  const value_range *vr = stack.last ().second;\n-  gcc_checking_assert (var == stack.last ().first);\n+  std::pair<tree, value_range *> e = stack.pop ();\n+  tree var = e.first;\n+  value_range *vr = e.second;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"popping range for \");\n@@ -440,9 +444,9 @@ evrp_range_analyzer::pop_value_range (tree var)\n       dump_value_range (dump_file, vr);\n       fprintf (dump_file, \"\\n\");\n     }\n-  /* We saved off a lattice entry, now give it back - it can now\n-     be modified again, thus the const casting.  */\n-  vr_values->set_vr_value (var, const_cast <value_range *> (vr));\n-  stack.pop ();\n-  return vr;\n+  /* We saved off a lattice entry, now give it back and release\n+     the one we popped.  */\n+  value_range *popped_vr = vr_values->swap_vr_value (var, vr);\n+  if (popped_vr)\n+    vr_values->free_value_range (popped_vr);\n }"}, {"sha": "a136cea4375b87193885a48bcf67be22cccce928", "filename": "gcc/gimple-ssa-evrp-analyze.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fgimple-ssa-evrp-analyze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fgimple-ssa-evrp-analyze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.h?ref=f86c2e7196bdf285c0245064be96a0b2816e013a", "patch": "@@ -62,14 +62,14 @@ class evrp_range_analyzer\n   DISABLE_COPY_AND_ASSIGN (evrp_range_analyzer);\n   class vr_values *vr_values;\n \n-  const value_range *pop_value_range (tree var);\n+  void pop_value_range ();\n   value_range *try_find_new_range (tree, tree op, tree_code code, tree limit);\n   void record_ranges_from_incoming_edge (basic_block);\n   void record_ranges_from_phis (basic_block);\n   void set_ssa_range_info (tree, value_range *);\n \n   /* STACK holds the old VR.  */\n-  auto_vec<std::pair <tree, const value_range*> > stack;\n+  auto_vec<std::pair <tree, value_range *> > stack;\n \n   /* True if we are updating global ranges, false otherwise.  */\n   bool m_update_global_ranges;"}, {"sha": "3acbdf62a561cbc173e77ecaa7a4db407ea7e874", "filename": "gcc/vr-values.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=f86c2e7196bdf285c0245064be96a0b2816e013a", "patch": "@@ -4315,6 +4315,8 @@ vr_values::simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n   return false;\n }\n \n+/* Set the lattice entry for VAR to VR.  */\n+\n void\n vr_values::set_vr_value (tree var, value_range *vr)\n {\n@@ -4323,3 +4325,13 @@ vr_values::set_vr_value (tree var, value_range *vr)\n   vr_value[SSA_NAME_VERSION (var)] = vr;\n }\n \n+/* Swap the lattice entry for VAR with VR and return the old entry.  */\n+\n+value_range *\n+vr_values::swap_vr_value (tree var, value_range *vr)\n+{\n+  if (SSA_NAME_VERSION (var) >= num_vr_values)\n+    return NULL;\n+  std::swap (vr_value[SSA_NAME_VERSION (var)], vr);\n+  return vr;\n+}"}, {"sha": "ec65de3dab73912119941a3a14fe8a8c23f0d3bb", "filename": "gcc/vr-values.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86c2e7196bdf285c0245064be96a0b2816e013a/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=f86c2e7196bdf285c0245064be96a0b2816e013a", "patch": "@@ -41,8 +41,9 @@ class vr_values\n   ~vr_values (void);\n \n   const value_range *get_value_range (const_tree);\n-\n   void set_vr_value (tree, value_range *);\n+  value_range *swap_vr_value (tree, value_range *);\n+\n   void set_def_to_varying (const_tree);\n   void set_defs_to_varying (gimple *);\n   bool update_value_range (const_tree, value_range *);\n@@ -68,6 +69,8 @@ class vr_values\n   /* Allocate a new value_range object.  */\n   value_range *allocate_value_range (void)\n     { return vrp_value_range_pool.allocate (); }\n+  void free_value_range (value_range *vr)\n+    { vrp_value_range_pool.remove (vr); }\n \n   /* */\n   void cleanup_edges_and_switches (void);"}]}