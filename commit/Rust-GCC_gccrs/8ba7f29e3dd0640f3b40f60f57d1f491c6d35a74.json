{"sha": "8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhN2YyOWUzZGQwNjQwZjNiNDBmNjBmNTdkMWY0OTFjNmQzNWE3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-26T14:01:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-26T14:01:55Z"}, "message": "Remove <chrono> dependency on _GLIBCXX_USE_C99_STDINT_TR1\n\nBy adding fallback definitions of std::intmax_t and std::uintmax_t it's\npossible to define <ratio> without _GLIBCXX_USE_C99_STDINT_TR1. This in\nturn allows most of <chrono> to be defined, which removes the dependency\non _GLIBCXX_USE_C99_STDINT_TR1 for all of the C++11 concurrency features.\n\nThe compiler defines __INTMAX_TYPE__ and __UINTMAX_TYPE__\nunconditionally so it should be safe to rely on them.\n\n\t* include/bits/atomic_futex.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(__atomic_futex_unsigned_base): Remove dependency on\n\t_GLIBCXX_USE_C99_STDINT_TR1 macro.\n\t* include/bits/unique_lock.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(unique_lock): Remove dependency on _GLIBCXX_USE_C99_STDINT_TR1.\n\t* include/c_global/cstdint [!_GLIBCXX_USE_C99_STDINT_TR1] (intmax_t)\n\t(uintmax_t): Define using predefined macros.\n\t* include/std/chrono [!_GLIBCXX_USE_C99_STDINT_TR1] (duration)\n\t(time_point, system_clock, high_resolution_clock, steady_clock): Remove\n\tdependency on _GLIBCXX_USE_C99_STDINT_TR1 macro.\n\t(nanoseconds, microseconds, milliseconds, seconds, minutes, hours):\n\t[!_GLIBCXX_USE_C99_STDINT_TR1]: Define using __INT64_TYPE__ or\n\tlong long when <stdint.h> is not usable.\n\t* include/std/condition_variable [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(condition_variable, condition_variable_any): Remove dependency on\n\t_GLIBCXX_USE_C99_STDINT_TR1.\n\t* include/std/future [!_GLIBCXX_USE_C99_STDINT_TR1] (future, promise)\n\t(packaged_task, async): Likewise.\n\t* include/std/mutex [!_GLIBCXX_USE_C99_STDINT_TR1] (recursive_mutex)\n\t(timed_mutex, recursive_timed_mutex, try_lock, lock, scoped_lock)\n\t(once_flag, call_once): Likewise.\n\t* include/std/ratio [!_GLIBCXX_USE_C99_STDINT_TR1] (ratio): Likewise.\n\t* include/std/shared_mutex [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(shared_mutex, shared_timed_mutex, shared_lock): Likewise.\n\t* include/std/thread [!_GLIBCXX_USE_C99_STDINT_TR1] (thread)\n\t(this_thread::get_id, this_thread::yield, this_thread::sleep_for)\n\t(this_thread::sleep_until): Likewise.\n\t* src/c++11/chrono.cc: Remove dependency on\n\t_GLIBCXX_USE_C99_STDINT_TR1 macro.\n\t* src/c++11/condition_variable.cc: Likewise.\n\t* src/c++11/futex.cc: Likewise.\n\t* src/c++11/future.cc: Likewise.\n\t* src/c++11/mutex.cc: Likewise.\n\t* src/c++11/thread.cc: Likewise.\n\t* testsuite/20_util/duration/literals/range_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n\nFrom-SVN: r263001", "tree": {"sha": "55e1acb98e009a524192df17448affcee3fff247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e1acb98e009a524192df17448affcee3fff247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864f020a10a8517a01abbcad71d22619477358f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864f020a10a8517a01abbcad71d22619477358f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864f020a10a8517a01abbcad71d22619477358f7"}], "stats": {"total": 161, "additions": 97, "deletions": 64}, "files": [{"sha": "a3665ee8b6a5d61f1aa0d29eaca3a74e0c5e58db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -1,3 +1,46 @@\n+2018-07-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_futex.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(__atomic_futex_unsigned_base): Remove dependency on\n+\t_GLIBCXX_USE_C99_STDINT_TR1 macro.\n+\t* include/bits/unique_lock.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(unique_lock): Remove dependency on _GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/c_global/cstdint [!_GLIBCXX_USE_C99_STDINT_TR1] (intmax_t)\n+\t(uintmax_t): Define using predefined macros.\n+\t* include/std/chrono [!_GLIBCXX_USE_C99_STDINT_TR1] (duration)\n+\t(time_point, system_clock, high_resolution_clock, steady_clock): Remove\n+\tdependency on _GLIBCXX_USE_C99_STDINT_TR1 macro.\n+\t(nanoseconds, microseconds, milliseconds, seconds, minutes, hours):\n+\t[!_GLIBCXX_USE_C99_STDINT_TR1]: Define using __INT64_TYPE__ or\n+\tlong long when <stdint.h> is not usable.\n+\t* include/std/condition_variable [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(condition_variable, condition_variable_any): Remove dependency on\n+\t_GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/std/future [!_GLIBCXX_USE_C99_STDINT_TR1] (future, promise)\n+\t(packaged_task, async): Likewise.\n+\t* include/std/mutex [!_GLIBCXX_USE_C99_STDINT_TR1] (recursive_mutex)\n+\t(timed_mutex, recursive_timed_mutex, try_lock, lock, scoped_lock)\n+\t(once_flag, call_once): Likewise.\n+\t* include/std/ratio [!_GLIBCXX_USE_C99_STDINT_TR1] (ratio): Likewise.\n+\t* include/std/shared_mutex [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(shared_mutex, shared_timed_mutex, shared_lock): Likewise.\n+\t* include/std/thread [!_GLIBCXX_USE_C99_STDINT_TR1] (thread)\n+\t(this_thread::get_id, this_thread::yield, this_thread::sleep_for)\n+\t(this_thread::sleep_until): Likewise.\n+\t* src/c++11/chrono.cc: Remove dependency on\n+\t_GLIBCXX_USE_C99_STDINT_TR1 macro.\n+\t* src/c++11/condition_variable.cc: Likewise.\n+\t* src/c++11/futex.cc: Likewise.\n+\t* src/c++11/future.cc: Likewise.\n+\t* src/c++11/mutex.cc: Likewise.\n+\t* src/c++11/thread.cc: Likewise.\n+\t* testsuite/20_util/duration/literals/range_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n+\n 2018-07-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libstdc++/77691"}, {"sha": "ecf5b02031afbe3f8735ebf9dfb321e99294cfe9", "filename": "libstdc++-v3/include/bits/atomic_futex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -48,7 +48,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n #if defined(_GLIBCXX_HAVE_LINUX_FUTEX) && ATOMIC_INT_LOCK_FREE > 1\n   struct __atomic_futex_unsigned_base\n   {\n@@ -282,7 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n #endif // _GLIBCXX_HAVE_LINUX_FUTEX && ATOMIC_INT_LOCK_FREE > 1\n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "59140dad13aeb9b4f111adb7023ede920e6d6937", "filename": "libstdc++-v3/include/bits/unique_lock.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -86,7 +86,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// XXX calling thread owns mutex\n       }\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n       template<typename _Clock, typename _Duration>\n \tunique_lock(mutex_type& __m,\n \t\t    const chrono::time_point<_Clock, _Duration>& __atime)\n@@ -100,7 +99,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_device(std::__addressof(__m)),\n \t  _M_owns(_M_device->try_lock_for(__rtime))\n \t{ }\n-#endif\n \n       ~unique_lock()\n       {\n@@ -159,7 +157,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n       template<typename _Clock, typename _Duration>\n \tbool\n \ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n@@ -189,7 +186,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return _M_owns;\n \t    }\n \t }\n-#endif\n \n       void\n       unlock()"}, {"sha": "556f42c5b7f6588ef7c510aef1a2d48a28e848a8", "filename": "libstdc++-v3/include/c_global/cstdint", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -41,10 +41,9 @@\n # include <stdint.h>\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-\n namespace std\n {\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   using ::int8_t;\n   using ::int16_t;\n   using ::int32_t;\n@@ -80,9 +79,12 @@ namespace std\n \n   using ::uintmax_t;\n   using ::uintptr_t;\n-} // namespace std\n-\n+#else // !_GLIBCXX_USE_C99_STDINT_TR1\n+  // Define the minimum needed for <ratio>, <chrono> etc.\n+  using intmax_t = __INTMAX_TYPE__;\n+  using uintmax_t = __UINTMAX_TYPE__;\n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n+} // namespace std\n \n #endif // C++11\n "}, {"sha": "da03fdccce44d6da493107340989c2c983bad412", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -41,8 +41,6 @@\n #include <ctime>\n #include <bits/parse_numbers.h> // for literals support.\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -593,23 +591,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+# define _GLIBCXX_CHRONO_INT64_T int64_t\n+#elif defined __INT64_TYPE__\n+# define _GLIBCXX_CHRONO_INT64_T __INT64_TYPE__\n+#else\n+    static_assert(std::numeric_limits<unsigned long long>::digits >= 64,\n+\t\"Representation type for nanoseconds must have at least 64 bits\");\n+# define _GLIBCXX_CHRONO_INT64_T long long\n+#endif\n+\n     /// nanoseconds\n-    typedef duration<int64_t, nano> \t    nanoseconds;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T, nano> \t    nanoseconds;\n \n     /// microseconds\n-    typedef duration<int64_t, micro> \t    microseconds;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T, micro> \t    microseconds;\n \n     /// milliseconds\n-    typedef duration<int64_t, milli> \t    milliseconds;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T, milli> \t    milliseconds;\n \n     /// seconds\n-    typedef duration<int64_t> \t\t    seconds;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T> \t\t    seconds;\n \n     /// minutes\n-    typedef duration<int64_t, ratio< 60>>   minutes;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T, ratio< 60>>   minutes;\n \n     /// hours\n-    typedef duration<int64_t, ratio<3600>>  hours;\n+    typedef duration<_GLIBCXX_CHRONO_INT64_T, ratio<3600>>  hours;\n+\n+#undef _GLIBCXX_CHRONO_INT64_T\n \n     /// time_point\n     template<typename _Clock, typename _Dur>\n@@ -980,8 +990,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif //_GLIBCXX_USE_C99_STDINT_TR1\n-\n #endif // C++11\n \n #endif //_GLIBCXX_CHRONO"}, {"sha": "3f690c81799f05e4ee0b9ea53373a814fd7a4216", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -45,7 +45,7 @@\n #include <bits/shared_ptr.h>\n #include <bits/cxxabi_forced.h>\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if defined(_GLIBCXX_HAS_GTHREADS)\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -319,8 +319,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n-\n+#endif // _GLIBCXX_HAS_GTHREADS\n #endif // C++11\n-\n #endif // _GLIBCXX_CONDITION_VARIABLE"}, {"sha": "843adbf52055299d86dec445f295449745aab594", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -192,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     future<__async_result_of<_Fn, _Args...>>\n     async(_Fn&& __fn, _Args&&... __args);\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if defined(_GLIBCXX_HAS_GTHREADS)\n \n   /// Base class and enclosing scope.\n   struct __future_base\n@@ -1745,7 +1745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #endif // _GLIBCXX_ASYNC_ABI_COMPAT\n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n   // @} group futures\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "477aa867f86f5bde3e39b9afebd978d8b85d5297", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -50,8 +50,6 @@\n # include <bits/std_function.h>\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -703,7 +701,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // @} group mutexes\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // _GLIBCXX_USE_C99_STDINT_TR1\n \n #endif // C++11\n "}, {"sha": "829a583ab2abf09d3cd08d173b52cc7a31f12da0", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -36,9 +36,7 @@\n #else\n \n #include <type_traits>\n-#include <cstdint>\n-\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+#include <cstdint>\t\t// intmax_t, uintmax_t\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -548,8 +546,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif //_GLIBCXX_USE_C99_STDINT_TR1\n-\n #endif // C++11\n \n #endif //_GLIBCXX_RATIO"}, {"sha": "dce97f48a3f706f53b8b61532c8d1c8f8a73109f", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -46,7 +46,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n #ifdef _GLIBCXX_HAS_GTHREADS\n \n #if __cplusplus >= 201703L\n@@ -676,8 +675,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(shared_lock<_Mutex>& __x, shared_lock<_Mutex>& __y) noexcept\n     { __x.swap(__y); }\n \n-#endif // _GLIBCXX_USE_C99_STDINT_TR1\n-\n   // @} group mutexes\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "407de1ba3337134b1d60377bc23b24651572810e", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -44,7 +44,7 @@\n #include <bits/invoke.h>\n #include <bits/gthr.h>\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if defined(_GLIBCXX_HAS_GTHREADS)\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -407,7 +407,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n #endif // C++11\n "}, {"sha": "199c748bcffaad32e9b4a5c27899dc414e1f808d", "filename": "libstdc++-v3/src/c++11/chrono.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -25,8 +25,6 @@\n #include <bits/c++config.h>\n #include <chrono>\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-\n // Conditional inclusion of sys/time.h for gettimeofday\n #if !defined(_GLIBCXX_USE_CLOCK_MONOTONIC) && \\\n     !defined(_GLIBCXX_USE_CLOCK_REALTIME) && \\\n@@ -101,5 +99,3 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-\n-#endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "c500c719571a1ed93225a176bda5c627bace463e", "filename": "libstdc++-v3/src/c++11/condition_variable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -25,7 +25,7 @@\n #include <condition_variable>\n #include <cstdlib>\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -155,4 +155,4 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS"}, {"sha": "278a5a80902223aed8a6985512c270c75d1170ae", "filename": "libstdc++-v3/src/c++11/futex.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <bits/atomic_futex.h>\n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n #if defined(_GLIBCXX_HAVE_LINUX_FUTEX) && ATOMIC_INT_LOCK_FREE > 1\n #include <chrono>\n #include <climits>\n@@ -95,5 +95,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-#endif\n-#endif\n+#endif // defined(_GLIBCXX_HAVE_LINUX_FUTEX) && ATOMIC_INT_LOCK_FREE > 1\n+#endif // _GLIBCXX_HAS_GTHREADS"}, {"sha": "01b614691aae100d4c9e88b61fba2cc151baa4dd", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const char*\n   future_error::what() const noexcept { return logic_error::what(); }\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n   __future_base::_Result_base::_Result_base() = default;\n \n   __future_base::_Result_base::~_Result_base() = default;\n@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_cb = &_Make_ready::_S_run;\n     __at_thread_exit(this);\n   }\n-#endif\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "2df8dc1874d8f7a4234e4650fc02ef0bf5a5eb55", "filename": "libstdc++-v3/src/c++11/mutex.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -24,7 +24,7 @@\n \n #include <mutex>\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n #ifndef _GLIBCXX_HAVE_TLS\n namespace\n {\n@@ -94,4 +94,4 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS"}, {"sha": "c62cb71bf990648debc3751ef6e2a548e1a4106a", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -29,7 +29,7 @@\n #include <cerrno>\n #include <cxxabi_forced.h>\n \n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifdef _GLIBCXX_HAS_GTHREADS\n \n #if defined(_GLIBCXX_USE_GET_NPROCS)\n # include <sys/sysinfo.h>\n@@ -218,4 +218,4 @@ namespace this_thread\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // _GLIBCXX_HAS_GTHREADS"}, {"sha": "f28f2f6a4e86a947c3cbb65254762b9d8f422165", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange_neg.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 898 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 908 }\n }\n // { dg-prune-output \"in constexpr expansion\" } // needed for -O0"}, {"sha": "37949434c3c5c37a0a0906ab2f2326fbf343648a", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -30,4 +30,4 @@ void test01()\n   test_type d; // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 318 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 316 }"}, {"sha": "ecd3c81530b0dff232d2889e3cd5c0b86bc76293", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 319 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 317 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "d2c16675096fea3e216cce64380c202bc75537ce", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -32,4 +32,4 @@ void test01()\n   test_type d;  // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 321 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 319 }"}, {"sha": "7e876e87985e4c828b64e04e666a17e5ed4e28fb", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -45,7 +45,7 @@ test04()\n   std::ratio<1,0> r1 __attribute__((unused)); // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 265 }\n-// { dg-error \"out of range\" \"\" { target *-*-* } 266 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 61 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 263 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 264 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 59 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "2bd9247b8aa6a86c8f6d746467d47b2bde45fd70", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc?ref=8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "patch": "@@ -41,10 +41,10 @@ test02()\n // { dg-error \"required from here\" \"\" { target *-*-* } 28 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 35 }\n // { dg-error \"expected initializer\" \"\" { target *-*-* } 37 }\n-// { dg-error \"overflow in addition\" \"\" { target *-*-* } 452 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 450 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 95 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 97 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 99 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 101 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 108 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 106 }\n // { dg-prune-output \"out of range\" }\n // { dg-prune-output \"not usable in a constant expression\" }"}]}