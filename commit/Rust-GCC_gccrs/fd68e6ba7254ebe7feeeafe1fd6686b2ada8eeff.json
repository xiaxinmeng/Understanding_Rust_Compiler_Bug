{"sha": "fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2OGU2YmE3MjU0ZWJlN2ZlZWVhZmUxZmQ2Njg2YjJhZGE4ZWVmZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T00:40:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T00:40:21Z"}, "message": "Condition in if statement is not optional.\n\nFrom-SVN: r171377", "tree": {"sha": "91ab079953ca16f0b2e9827450815c431130b628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ab079953ca16f0b2e9827450815c431130b628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/comments", "author": null, "committer": null, "parents": [{"sha": "5278672ca11d7be0cd93f224689f78687adb91ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5278672ca11d7be0cd93f224689f78687adb91ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5278672ca11d7be0cd93f224689f78687adb91ed"}], "stats": {"total": 197, "additions": 21, "deletions": 176}, "files": [{"sha": "e6588997f53e7de1f4893cb745aa5236bf8c51e4", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "patch": "@@ -3703,8 +3703,7 @@ Parse::return_stat()\n \t\t\t\t\t\t\t      location));\n }\n \n-// IfStat = \"if\" [ [ SimpleStat ] \";\" ] [ Condition ]\n-//             Block [ \"else\" Statement ] .\n+// IfStmt    = \"if\" [ SimpleStmt \";\" ] Expression Block [ \"else\" Statement ] .\n \n void\n Parse::if_stat()\n@@ -3728,8 +3727,7 @@ Parse::if_stat()\n     {\n       if (this->peek_token()->is_op(OPERATOR_SEMICOLON))\n \tthis->advance_token();\n-      if (!this->peek_token()->is_op(OPERATOR_LCURLY))\n-\tcond = this->expression(PRECEDENCE_NORMAL, false, false, NULL);\n+      cond = this->expression(PRECEDENCE_NORMAL, false, false, NULL);\n     }\n \n   this->gogo_->start_block(this->location());"}, {"sha": "0a6ef8cea95730edd73f5fe6df3ccccd4c8ea563", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "patch": "@@ -2956,12 +2956,8 @@ class If_statement : public Statement\n int\n If_statement::do_traverse(Traverse* traverse)\n {\n-  if (this->cond_ != NULL)\n-    {\n-      if (this->traverse_expression(traverse, &this->cond_) == TRAVERSE_EXIT)\n-\treturn TRAVERSE_EXIT;\n-    }\n-  if (this->then_block_->traverse(traverse) == TRAVERSE_EXIT)\n+  if (this->traverse_expression(traverse, &this->cond_) == TRAVERSE_EXIT\n+      || this->then_block_->traverse(traverse) == TRAVERSE_EXIT)\n     return TRAVERSE_EXIT;\n   if (this->else_block_ != NULL)\n     {\n@@ -2974,11 +2970,8 @@ If_statement::do_traverse(Traverse* traverse)\n void\n If_statement::do_determine_types()\n {\n-  if (this->cond_ != NULL)\n-    {\n-      Type_context context(Type::lookup_bool_type(), false);\n-      this->cond_->determine_type(&context);\n-    }\n+  Type_context context(Type::lookup_bool_type(), false);\n+  this->cond_->determine_type(&context);\n   this->then_block_->determine_types();\n   if (this->else_block_ != NULL)\n     this->else_block_->determine_types();\n@@ -2989,14 +2982,11 @@ If_statement::do_determine_types()\n void\n If_statement::do_check_types(Gogo*)\n {\n-  if (this->cond_ != NULL)\n-    {\n-      Type* type = this->cond_->type();\n-      if (type->is_error_type())\n-\tthis->set_is_error();\n-      else if (!type->is_boolean_type())\n-\tthis->report_error(_(\"expected boolean expression\"));\n-    }\n+  Type* type = this->cond_->type();\n+  if (type->is_error_type())\n+    this->set_is_error();\n+  else if (!type->is_boolean_type())\n+    this->report_error(_(\"expected boolean expression\"));\n }\n \n // Whether the overall statement may fall through.\n@@ -3014,12 +3004,9 @@ If_statement::do_may_fall_through() const\n tree\n If_statement::do_get_tree(Translate_context* context)\n {\n-  gcc_assert(this->cond_ == NULL\n-\t     || this->cond_->type()->is_boolean_type()\n+  gcc_assert(this->cond_->type()->is_boolean_type()\n \t     || this->cond_->type()->is_error_type());\n-  tree cond_tree = (this->cond_ == NULL\n-\t\t    ? boolean_true_node\n-\t\t    : this->cond_->get_tree(context));\n+  tree cond_tree = this->cond_->get_tree(context);\n   tree then_tree = this->then_block_->get_tree(context);\n   tree else_tree = (this->else_block_ == NULL\n \t\t    ? NULL_TREE"}, {"sha": "2df8791fffbdfe34b3709a1826d1870700950f38", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug001.go", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug001.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug001.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug001.go?ref=5278672ca11d7be0cd93f224689f78687adb91ed", "patch": "@@ -1,11 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func main() {\n-\tif {}  // compiles; should be an error (must be an expression)\n-}"}, {"sha": "298081663b49fedad6f753794f861c475a0cec7d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug140.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go?ref=fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "patch": "@@ -7,8 +7,8 @@\n package main\n \n func main() {\n-\tif {} else L1: ;\n-\tif {} else L2: main() ;\n+\tif true {} else L1: ;\n+\tif true {} else L2: main() ;\n }\n \n /*"}, {"sha": "966d3fcf31a8ccc5ec845044de2d23bc9e1a8329", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug219.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug219.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug219.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug219.go?ref=fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "patch": "@@ -12,27 +12,27 @@ func f(func()) int { return 0 }\n // bug219.go:16: syntax error near if\n func g1() {\n \tif x := f(func() {\n-\t\tif {}\n-\t}); {\n+\t\tif true {}\n+\t}); true {\n \t\t_ = x;\n \t}\n }\n \n // this works\n func g2() {\n \tif x := f(func() {\n-\t\t//if {}\n-\t}); {\n+\t\t//if true {}\n+\t}); true {\n \t\t_ = x;\n \t}\n }\n \n // this works\n func g3() {\n \tx := f(func() {\n-\t\tif {}\n+\t\tif true {}\n \t});\n-\tif {\n+\tif true {\n \t\t_ = x;\n \t}\n }"}, {"sha": "c1bb69d277f6594687a09016406239ef8a98543b", "filename": "gcc/testsuite/go.test/test/if.go", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif.go?ref=fd68e6ba7254ebe7feeeafe1fd6686b2ada8eeff", "patch": "@@ -44,18 +44,6 @@ func main() {\n \t}\n \tassertequal(count, 0, \"if false one\")\n \n-\tcount = 0\n-\tif {\n-\t\tcount = count + 1\n-\t}\n-\tassertequal(count, 1, \"if empty\")\n-\n-\tcount = 0\n-\tif one := 1; true {\n-\t\tcount = count + one\n-\t}\n-\tassertequal(count, 1, \"if empty one\")\n-\n \tcount = 0\n \tif i5 < i7 {\n \t\tcount = count + 1"}, {"sha": "061c36411ed2035a695df6012c5ba06fa09a5821", "filename": "gcc/testsuite/go.test/test/if1.go", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fif1.go?ref=5278672ca11d7be0cd93f224689f78687adb91ed", "patch": "@@ -1,20 +0,0 @@\n-// $G $F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"os\"\n-\n-func main() {\n-\tcount := 7\n-\tif one := 1; {\n-\t\tcount = count + one\n-\t}\n-\tif count != 8 {\n-\t\tprint(count, \" should be 8\\n\")\n-\t\tos.Exit(1)\n-\t}\n-}"}, {"sha": "b6fe4e4330bac9aaefb5da4399f9df95dbc9ec08", "filename": "gcc/testsuite/go.test/test/ken/robif.go", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frobif.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5278672ca11d7be0cd93f224689f78687adb91ed/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frobif.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frobif.go?ref=5278672ca11d7be0cd93f224689f78687adb91ed", "patch": "@@ -1,97 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func assertequal(is, shouldbe int, msg string) {\n-\tif is != shouldbe {\n-\t\tprint(\"assertion fail\" + msg + \"\\n\");\n-\t\tpanic(1);\n-\t}\n-}\n-\n-func main() {\n-\ti5 := 5;\n-\ti7 := 7;\n-\n-\tvar count int;\n-\n-\tcount = 0;\n-\tif true {\n-\t\tcount = count + 1;\n-\t}\n-\tassertequal(count, 1, \"if true\");\n-\n-\tcount = 0;\n-\tif false {\n-\t\tcount = count + 1;\n-\t}\n-\tassertequal(count, 0, \"if false\");\n-\n-\tcount = 0;\n-\tif one := 1; true {\n-\t\tcount = count + one;\n-\t}\n-\tassertequal(count, 1, \"if true one\");\n-\n-\tcount = 0;\n-\tif one := 1; false {\n-\t\t_ = one;\n-\t\tcount = count + 1;\n-\t}\n-\tassertequal(count, 0, \"if false one\");\n-\n-\tcount = 0;\n-\tif {\n-\t\tcount = count + 1;\n-\t}\n-\tassertequal(count, 1, \"if empty\");\n-\n-\tcount = 0;\n-\tif one := 1; {\n-\t\tcount = count + one;\n-\t}\n-\tassertequal(count, 1, \"if empty one\");\n-\n-\tcount = 0;\n-\tif i5 < i7 {\n-\t\tcount = count + 1;\n-\t}\n-\tassertequal(count, 1, \"if cond\");\n-\n-\tcount = 0;\n-\tif true {\n-\t\tcount = count + 1;\n-\t} else\n-\t\tcount = count - 1;\n-\tassertequal(count, 1, \"if else true\");\n-\n-\tcount = 0;\n-\tif false {\n-\t\tcount = count + 1;\n-\t} else\n-\t\tcount = count - 1;\n-\tassertequal(count, -1, \"if else false\");\n-\n-\tcount = 0;\n-\tif t:=1; false {\n-\t\tcount = count + 1;\n-\t\tt := 7;\n-\t\t_ = t;\n-\t} else\n-\t\tcount = count - t;\n-\tassertequal(count, -1, \"if else false var\");\n-\n-\tcount = 0;\n-\tt := 1;\n-\tif false {\n-\t\tcount = count + 1;\n-\t\tt := 7;\n-\t\t_ = t;\n-\t} else\n-\t\tcount = count - t;\n-\tassertequal(count, -1, \"if else false var outside\");\n-}"}]}