{"sha": "9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwOGM1MWRiMDM4OGI1YjdlZmIzYjczYTJiZjBiNTBjMDlkNDVhMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-04T17:01:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-04T17:01:34Z"}, "message": "tree-ssa-sccvn.c (vn_reference_op_compute_hash): Use iterative_hash_* as intended.\n\n2010-01-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Use\n\titerative_hash_* as intended.\n\t(vn_reference_compute_hash): Likewise.  Simplify hashing\n\tSSA names.\n\t(vn_reference_lookup_2): Likewise.\n\t(vn_nary_op_compute_hash): Likewise.\n\t(vn_phi_compute_hash): Likewise.\n\t(expressions_equal_p): Remove strange code.\n\t* tree-ssa-pre.c (pre_expr_eq): Use gcc_unreachable ().\n\t(pre_expr_hash): Likewise.  Simplify hashing SSA names.\n\t(bitmap_insert_into_set_1): Take value-id as parameter.\n\t(add_to_value): Pass it.\n\t(bitmap_insert_into_set): Likewise.\n\t(bitmap_value_insert_into_set): Likewise.  Remove redundant check.\n\nFrom-SVN: r155624", "tree": {"sha": "f9559063729ff62f2004695034039b21b0e2e36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9559063729ff62f2004695034039b21b0e2e36d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94b905273c5476f4e0f3a9de1a86d1c7ef47e7bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b905273c5476f4e0f3a9de1a86d1c7ef47e7bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b905273c5476f4e0f3a9de1a86d1c7ef47e7bd"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "8617693f9ef54f0a004124aa8dd4cd6f9291a182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "patch": "@@ -1,3 +1,20 @@\n+2010-01-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Use\n+\titerative_hash_* as intended.\n+\t(vn_reference_compute_hash): Likewise.  Simplify hashing\n+\tSSA names.\n+\t(vn_reference_lookup_2): Likewise.\n+\t(vn_nary_op_compute_hash): Likewise.\n+\t(vn_phi_compute_hash): Likewise.\n+\t(expressions_equal_p): Remove strange code.\n+\t* tree-ssa-pre.c (pre_expr_eq): Use gcc_unreachable ().\n+\t(pre_expr_hash): Likewise.  Simplify hashing SSA names.\n+\t(bitmap_insert_into_set_1): Take value-id as parameter.\n+\t(add_to_value): Pass it.\n+\t(bitmap_insert_into_set): Likewise.\n+\t(bitmap_value_insert_into_set): Likewise.  Remove redundant check.\n+\n 2010-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR driver/42442"}, {"sha": "3087fe38ae9eabd9d91c971d161a88a1707c9488", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "patch": "@@ -204,7 +204,7 @@ pre_expr_eq (const void *p1, const void *p2)\n       return vn_reference_eq (PRE_EXPR_REFERENCE (e1),\n \t\t\t      PRE_EXPR_REFERENCE (e2));\n     default:\n-      abort();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -217,13 +217,13 @@ pre_expr_hash (const void *p1)\n     case CONSTANT:\n       return vn_hash_constant_with_type (PRE_EXPR_CONSTANT (e));\n     case NAME:\n-      return iterative_hash_hashval_t (SSA_NAME_VERSION (PRE_EXPR_NAME (e)), 0);\n+      return SSA_NAME_VERSION (PRE_EXPR_NAME (e));\n     case NARY:\n       return PRE_EXPR_NARY (e)->hashcode;\n     case REFERENCE:\n       return PRE_EXPR_REFERENCE (e)->hashcode;\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -436,7 +436,8 @@ static void bitmap_value_replace_in_set (bitmap_set_t, pre_expr);\n static void bitmap_set_copy (bitmap_set_t, bitmap_set_t);\n static bool bitmap_set_contains_value (bitmap_set_t, unsigned int);\n static void bitmap_insert_into_set (bitmap_set_t, pre_expr);\n-static void bitmap_insert_into_set_1 (bitmap_set_t, pre_expr, bool);\n+static void bitmap_insert_into_set_1 (bitmap_set_t, pre_expr,\n+\t\t\t\t      unsigned int, bool);\n static bitmap_set_t bitmap_set_new (void);\n static tree create_expression_by_pieces (basic_block, pre_expr, gimple_seq *,\n \t\t\t\t\t gimple, tree);\n@@ -580,7 +581,7 @@ add_to_value (unsigned int v, pre_expr e)\n       VEC_replace (bitmap_set_t, value_expressions, v, set);\n     }\n \n-  bitmap_insert_into_set_1 (set, e, true);\n+  bitmap_insert_into_set_1 (set, e, v, true);\n }\n \n /* Create a new bitmap set and return it.  */\n@@ -638,9 +639,8 @@ bitmap_remove_from_set (bitmap_set_t set, pre_expr expr)\n \n static void\n bitmap_insert_into_set_1 (bitmap_set_t set, pre_expr expr,\n-\t\t\t  bool allow_constants)\n+\t\t\t  unsigned int val, bool allow_constants)\n {\n-  unsigned int val  = get_expr_value_id (expr);\n   if (allow_constants || !value_id_constant_p (val))\n     {\n       /* We specifically expect this and only this function to be able to\n@@ -655,7 +655,7 @@ bitmap_insert_into_set_1 (bitmap_set_t set, pre_expr expr,\n static void\n bitmap_insert_into_set (bitmap_set_t set, pre_expr expr)\n {\n-  bitmap_insert_into_set_1 (set, expr, false);\n+  bitmap_insert_into_set_1 (set, expr, get_expr_value_id (expr), false);\n }\n \n /* Copy a bitmapped set ORIG, into bitmapped set DEST.  */\n@@ -863,11 +863,8 @@ bitmap_value_insert_into_set (bitmap_set_t set, pre_expr expr)\n {\n   unsigned int val = get_expr_value_id (expr);\n \n-  if (value_id_constant_p (val))\n-    return;\n-\n   if (!bitmap_set_contains_value (set, val))\n-    bitmap_insert_into_set (set, expr);\n+    bitmap_insert_into_set_1 (set, expr, val, false);\n }\n \n /* Print out EXPR to outfile.  */"}, {"sha": "2994bffd76efe5652b7ea1fc679d88824053ad93", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9708c51db0388b5b7efb3b73a2bf0b50c09d45a1/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9708c51db0388b5b7efb3b73a2bf0b50c09d45a1", "patch": "@@ -401,15 +401,15 @@ vn_reference_op_eq (const void *p1, const void *p2)\n /* Compute the hash for a reference operand VRO1.  */\n \n static hashval_t\n-vn_reference_op_compute_hash (const vn_reference_op_t vro1)\n+vn_reference_op_compute_hash (const vn_reference_op_t vro1, hashval_t result)\n {\n-  hashval_t result = 0;\n+  result = iterative_hash_hashval_t (vro1->opcode, result);\n   if (vro1->op0)\n-    result += iterative_hash_expr (vro1->op0, vro1->opcode);\n+    result = iterative_hash_expr (vro1->op0, result);\n   if (vro1->op1)\n-    result += iterative_hash_expr (vro1->op1, vro1->opcode);\n+    result = iterative_hash_expr (vro1->op1, result);\n   if (vro1->op2)\n-    result += iterative_hash_expr (vro1->op2, vro1->opcode);\n+    result = iterative_hash_expr (vro1->op2, result);\n   return result;\n }\n \n@@ -427,13 +427,14 @@ vn_reference_hash (const void *p1)\n hashval_t\n vn_reference_compute_hash (const vn_reference_t vr1)\n {\n-  hashval_t result;\n+  hashval_t result = 0;\n   int i;\n   vn_reference_op_t vro;\n \n-  result = iterative_hash_expr (vr1->vuse, 0);\n   for (i = 0; VEC_iterate (vn_reference_op_s, vr1->operands, i, vro); i++)\n-    result += vn_reference_op_compute_hash (vro);\n+    result = vn_reference_op_compute_hash (vro, result);\n+  if (vr1->vuse)\n+    result += SSA_NAME_VERSION (vr1->vuse);\n \n   return result;\n }\n@@ -1000,9 +1001,11 @@ vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *vr_)\n     *last_vuse_ptr = vuse;\n \n   /* Fixup vuse and hash.  */\n-  vr->hashcode = vr->hashcode - iterative_hash_expr (vr->vuse, 0);\n+  if (vr->vuse)\n+    vr->hashcode = vr->hashcode - SSA_NAME_VERSION (vr->vuse);\n   vr->vuse = SSA_VAL (vuse);\n-  vr->hashcode = vr->hashcode + iterative_hash_expr (vr->vuse, 0);\n+  if (vr->vuse)\n+    vr->hashcode = vr->hashcode + SSA_NAME_VERSION (vr->vuse);\n \n   hash = vr->hashcode;\n   slot = htab_find_slot_with_hash (current_info->references, vr,\n@@ -1360,7 +1363,7 @@ vn_reference_insert_pieces (tree vuse, alias_set_type set, tree type,\n hashval_t\n vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n {\n-  hashval_t hash = 0;\n+  hashval_t hash;\n   unsigned i;\n \n   for (i = 0; i < vno1->length; ++i)\n@@ -1376,8 +1379,9 @@ vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n       vno1->op[1] = temp;\n     }\n \n+  hash = iterative_hash_hashval_t (vno1->opcode, 0);\n   for (i = 0; i < vno1->length; ++i)\n-    hash += iterative_hash_expr (vno1->op[i], vno1->opcode);\n+    hash = iterative_hash_expr (vno1->op[i], hash);\n \n   return hash;\n }\n@@ -1629,7 +1633,7 @@ vn_nary_op_insert_stmt (gimple stmt, tree result)\n static inline hashval_t\n vn_phi_compute_hash (vn_phi_t vp1)\n {\n-  hashval_t result = 0;\n+  hashval_t result;\n   int i;\n   tree phi1op;\n   tree type;\n@@ -1647,7 +1651,7 @@ vn_phi_compute_hash (vn_phi_t vp1)\n     {\n       if (phi1op == VN_TOP)\n \tcontinue;\n-      result += iterative_hash_expr (phi1op, result);\n+      result = iterative_hash_expr (phi1op, result);\n     }\n \n   return result;\n@@ -3310,23 +3314,6 @@ expressions_equal_p (tree e1, tree e2)\n   if (!e1 || !e2)\n     return false;\n \n-  /* Recurse on elements of lists.  */\n-  if (TREE_CODE (e1) == TREE_LIST && TREE_CODE (e2) == TREE_LIST)\n-    {\n-      tree lop1 = e1;\n-      tree lop2 = e2;\n-      for (lop1 = e1, lop2 = e2;\n-\t   lop1 || lop2;\n-\t   lop1 = TREE_CHAIN (lop1), lop2 = TREE_CHAIN (lop2))\n-\t{\n-\t  if (!lop1 || !lop2)\n-\t    return false;\n-\t  if (!expressions_equal_p (TREE_VALUE (lop1), TREE_VALUE (lop2)))\n-\t    return false;\n-\t}\n-      return true;\n-    }\n-\n   /* Now perform the actual comparison.  */\n   if (TREE_CODE (e1) == TREE_CODE (e2)\n       && operand_equal_p (e1, e2, OEP_PURE_SAME))"}]}