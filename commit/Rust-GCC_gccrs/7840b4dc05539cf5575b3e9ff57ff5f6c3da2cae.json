{"sha": "7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0MGI0ZGMwNTUzOWNmNTU3NWIzZTlmZjU3ZmY1ZjZjM2RhMmNhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-11T14:46:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-11T14:46:49Z"}, "message": "c-family: Fix ICE in get_atomic_generic_size [PR96545]\n\nAs the testcase shows, we would ICE if the type of the first argument of\nvarious atomic builtins was pointer to (non-void) incomplete type, we would\nassume that TYPE_SIZE_UNIT must be non-NULL.  This patch diagnoses it\ninstead.  And also changes the TREE_CODE != INTEGER_CST check to\n!tree_fits_uhwi_p, as we use tree_to_uhwi after this and at least in theory\nthe int could be too large and not fit.\n\n2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/96545\n\t* c-common.c (get_atomic_generic_size): Require that first argument's\n\ttype points to a complete type and use tree_fits_uhwi_p instead of\n\tjust INTEGER_CST TREE_CODE check for the TYPE_SIZE_UNIT.\n\n\t* c-c++-common/pr96545.c: New test.", "tree": {"sha": "a9139a627ff165f24adeb611b5ff969b2f36a575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9139a627ff165f24adeb611b5ff969b2f36a575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299c98578bda88c020a6d5b2c319c9e191a315d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299c98578bda88c020a6d5b2c319c9e191a315d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299c98578bda88c020a6d5b2c319c9e191a315d4"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "873bea9e2b2f17d8b39b56f6cbffaf1b7c883d77", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "patch": "@@ -7017,8 +7017,15 @@ get_atomic_generic_size (location_t loc, tree function,\n       return 0;\n     }\n \n+  if (!COMPLETE_TYPE_P (TREE_TYPE (type_0)))\n+    {\n+      error_at (loc, \"argument 1 of %qE must be a pointer to a complete type\",\n+\t\tfunction);\n+      return 0;\n+    }\n+\n   /* Types must be compile time constant sizes. */\n-  if (TREE_CODE ((TYPE_SIZE_UNIT (TREE_TYPE (type_0)))) != INTEGER_CST)\n+  if (!tree_fits_uhwi_p ((TYPE_SIZE_UNIT (TREE_TYPE (type_0)))))\n     {\n       error_at (loc, \n \t\t\"argument 1 of %qE must be a pointer to a constant size type\","}, {"sha": "bc6b0cf345ca265ee18e8a7d6adb3a5131d08ffd", "filename": "gcc/testsuite/c-c++-common/pr96545.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr96545.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr96545.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr96545.c?ref=7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/96545 */\n+/* { dg-do compile } */\n+\n+extern char x[], y[], z[];\n+struct S;\n+extern struct S s, t, u;\n+int v, w;\n+\n+void\n+foo (void)\n+{\n+  __atomic_exchange (&x, &y, &z, 0);\t/* { dg-error \"must be a pointer to a complete type\" } */\n+}\n+\n+void\n+bar (void)\n+{\n+  __atomic_exchange (&s, &t, &u, 0);\t/* { dg-error \"must be a pointer to a complete type\" } */\n+}\n+\n+void\n+baz (void)\n+{\n+  __atomic_exchange (&v, &t, &w, 0);\t/* { dg-error \"size mismatch in argument 2 of\" } */\n+}\n+\n+void\n+qux (void)\n+{\n+  __atomic_exchange (&v, &w, &t, 0);\t/* { dg-error \"size mismatch in argument 3 of\" } */\n+}"}]}