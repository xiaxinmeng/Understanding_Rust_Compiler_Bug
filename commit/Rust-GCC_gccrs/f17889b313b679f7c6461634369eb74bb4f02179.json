{"sha": "f17889b313b679f7c6461634369eb74bb4f02179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3ODg5YjMxM2I2NzlmN2M2NDYxNjM0MzY5ZWI3NGJiNGYwMjE3OQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-04-09T10:15:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T10:15:20Z"}, "message": "exp_util.adb (Silly_Boolean_Array_Xor_Test): Simplify existing code.\n\n2009-04-09  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Silly_Boolean_Array_Xor_Test): Simplify existing code.\n\n\t* atree.h: Add Elist26\n\n\t* gnat_ugn.texi: Complete documentation deprecating -gnatN for non-gcc\n\tbackends.\n\nFrom-SVN: r145818", "tree": {"sha": "246c07f323cb22bcd5cf53f9276522e9d6fb7ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/246c07f323cb22bcd5cf53f9276522e9d6fb7ebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17889b313b679f7c6461634369eb74bb4f02179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17889b313b679f7c6461634369eb74bb4f02179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17889b313b679f7c6461634369eb74bb4f02179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17889b313b679f7c6461634369eb74bb4f02179/comments", "author": null, "committer": null, "parents": [{"sha": "3070bab4c9421f35fd4149a238768befd2717ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3070bab4c9421f35fd4149a238768befd2717ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3070bab4c9421f35fd4149a238768befd2717ddb"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "fc35d44a53037b72cc7bb91f055774ff4ffbce55", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f17889b313b679f7c6461634369eb74bb4f02179", "patch": "@@ -1,3 +1,12 @@\n+2009-04-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb (Silly_Boolean_Array_Xor_Test): Simplify existing code.\n+\n+\t* atree.h: Add Elist26\n+\n+\t* gnat_ugn.texi: Complete documentation deprecating -gnatN for non-gcc\n+\tbackends.\n+\n 2009-04-09  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_disp.adb (Export_DT): Addition of a new argument (Index); used to"}, {"sha": "7ad985d139d3462fcdc071cf37a58aa3aff0b20a", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=f17889b313b679f7c6461634369eb74bb4f02179", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -473,6 +473,7 @@ extern Node_Id Current_Error_Node;\n #define Elist21(N)    Field21 (N)\n #define Elist23(N)    Field23 (N)\n #define Elist25(N)    Field25 (N)\n+#define Elist26(N)    Field26 (N)\n \n #define Name1(N)      Field1  (N)\n #define Name2(N)      Field2  (N)"}, {"sha": "b61801cbabaeffe4bd12f5f41eb817233f3cf90c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f17889b313b679f7c6461634369eb74bb4f02179", "patch": "@@ -5147,42 +5147,54 @@ package body Exp_Util is\n    --  This procedure implements an odd and silly test. We explicitly check\n    --  for the XOR case where the component type is True .. True, since this\n    --  will raise constraint error. A special check is required since CE\n-   --  will not be required otherwise (cf Expand_Packed_Not).\n+   --  will not be generated otherwise (cf Expand_Packed_Not).\n \n    --  No such check is required for AND and OR, since for both these cases\n    --  False op False = False, and True op True = True.\n \n    procedure Silly_Boolean_Array_Xor_Test (N : Node_Id; T : Entity_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n       CT  : constant Entity_Id  := Component_Type (T);\n-      BT  : constant Entity_Id  := Base_Type (CT);\n \n    begin\n+      --  The check we install is\n+\n+      --    constraint_error when\n+      --      Boolean (component_type'First)\n+      --        and then Boolean (component_type'Last)\n+      --        and then array_type'Length /= 0)\n+\n+      --  We need the last guard because we don't want to raise CE for empty\n+      --  arrays since no out of range values result (Empty arrays with a\n+      --  component type of True .. True -- very useful -- even the ACATS\n+      --  does not test that marginal case!).\n+\n       Insert_Action (N,\n         Make_Raise_Constraint_Error (Loc,\n           Condition =>\n-            Make_Op_And (Loc,\n+            Make_And_Then (Loc,\n               Left_Opnd =>\n-                Make_Op_Eq (Loc,\n+                Make_And_Then (Loc,\n                   Left_Opnd =>\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix         => New_Occurrence_Of (CT, Loc),\n-                      Attribute_Name => Name_First),\n+                    Convert_To (Standard_Boolean,\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Occurrence_Of (CT, Loc),\n+                        Attribute_Name => Name_First)),\n \n                   Right_Opnd =>\n-                    Convert_To (BT,\n-                      New_Occurrence_Of (Standard_True, Loc))),\n+                    Convert_To (Standard_Boolean,\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Occurrence_Of (CT, Loc),\n+                        Attribute_Name => Name_Last))),\n \n               Right_Opnd =>\n-                Make_Op_Eq (Loc,\n+                Make_Op_Ne (Loc,\n                   Left_Opnd =>\n                     Make_Attribute_Reference (Loc,\n-                      Prefix         => New_Occurrence_Of (CT, Loc),\n-                      Attribute_Name => Name_Last),\n+                      Prefix => New_Reference_To (T, Loc),\n+                      Attribute_Name => Name_Length),\n+                  Right_Opnd => Make_Integer_Literal (Loc, 0))),\n \n-                  Right_Opnd =>\n-                    Convert_To (BT,\n-                      New_Occurrence_Of (Standard_True, Loc)))),\n           Reason => CE_Range_Check_Failed));\n    end Silly_Boolean_Array_Xor_Test;\n "}, {"sha": "9b17e2c119acfaa2a63f2a85e4660714fa1117d9", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17889b313b679f7c6461634369eb74bb4f02179/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f17889b313b679f7c6461634369eb74bb4f02179", "patch": "@@ -2372,9 +2372,6 @@ The use of @option{-gnatN} activates  inlining optimization\n that is performed by the front end of the compiler. This inlining does\n not require that the code generation be optimized. Like @option{-gnatn},\n the use of this switch generates additional dependencies.\n-Note that\n-@option{-gnatN} automatically implies @option{-gnatn} so it is not necessary\n-to specify both options.\n \n When using a gcc-based back end (in practice this means using any version\n of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n@@ -4014,14 +4011,12 @@ Activate front end inlining for subprograms for which\n pragma @code{Inline} is specified. This inlining is performed\n by the front end and will be visible in the\n @option{-gnatG} output.\n-In some cases, this has proved more effective than the back end\n-inlining resulting from the use of\n-@option{-gnatn}.\n-Note that\n-@option{-gnatN} automatically implies\n-@option{-gnatn} so it is not necessary\n-to specify both options. There are a few cases that the back-end inlining\n-catches that cannot be dealt with in the front-end.\n+\n+When using a gcc-based back end (in practice this means using any version\n+of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+@option{-gnatN} is deprecated, and the use of @option{-gnatn} is preferred.\n+Historically front end inlining was more extensive than the gcc back end\n+inlining, but that is no longer the case.\n \n @item -gnato\n @cindex @option{-gnato} (@command{gcc})\n@@ -6716,12 +6711,14 @@ see @ref{Inlining of Subprograms}.\n \n @item -gnatN\n @cindex @option{-gnatN} (@command{gcc})\n-The front end inlining activated by this switch is generally more extensive,\n-and quite often more effective than the standard @option{-gnatn} inlining mode.\n-It will also generate additional dependencies.\n-Note that\n-@option{-gnatN} automatically implies @option{-gnatn} so it is not necessary\n-to specify both options.\n+This switch activates front-end inlining which also\n+generates additional dependencies.\n+\n+When using a gcc-based back end (in practice this means using any version\n+of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+@option{-gnatN} is deprecated, and the use of @option{-gnatn} is preferred.\n+Historically front end inlining was more extensive than the gcc back end\n+inlining, but that is no longer the case.\n @end table\n \n @node Auxiliary Output Control"}]}