{"sha": "a5648717a8826a1bb60afd31b56c48b60d3813d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2NDg3MTdhODgyNmExYmI2MGFmZDMxYjU2YzQ4YjYwZDM4MTNkNA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-12-11T21:15:48Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-12-11T21:15:48Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add support for early folding of splat_u{8,16,32}.\n\n[gcc]\n\n2017-12-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n\tearly folding of splat_u{8,16,32}.\n\n[testsuite]\n\n2017-12-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-splat-misc-invalid.c: New.\n\nFrom-SVN: r255549", "tree": {"sha": "135aa9cee1f0d9fe5d60f6246434b2ff0a81e3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135aa9cee1f0d9fe5d60f6246434b2ff0a81e3d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5648717a8826a1bb60afd31b56c48b60d3813d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5648717a8826a1bb60afd31b56c48b60d3813d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5648717a8826a1bb60afd31b56c48b60d3813d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5648717a8826a1bb60afd31b56c48b60d3813d4/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "243501b772ee3aaef5bdf31afe24af90fe43428b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243501b772ee3aaef5bdf31afe24af90fe43428b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243501b772ee3aaef5bdf31afe24af90fe43428b"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "b1a689feeffbc205ebfb1eee3ea155c655ecd21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5648717a8826a1bb60afd31b56c48b60d3813d4", "patch": "@@ -1,3 +1,8 @@\n+2017-12-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n+\tearly folding of splat_u{8,16,32}.\n+\n 2017-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/aarch64/aarch64.c (aarch64_print_operand): Don't start"}, {"sha": "9ed90bfda328d5285283cedb562cd1e06f61001f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a5648717a8826a1bb60afd31b56c48b60d3813d4", "patch": "@@ -16621,6 +16621,28 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       fold_compare_helper (gsi, LE_EXPR, stmt);\n       return true;\n \n+    /* flavors of vec_splat_[us]{8,16,32}.  */\n+    case ALTIVEC_BUILTIN_VSPLTISB:\n+    case ALTIVEC_BUILTIN_VSPLTISH:\n+    case ALTIVEC_BUILTIN_VSPLTISW:\n+      {\n+\t arg0 = gimple_call_arg (stmt, 0);\n+\t lhs = gimple_call_lhs (stmt);\n+\t /* Only fold the vec_splat_*() if arg0 is constant.  */\n+\t if (TREE_CODE (arg0) != INTEGER_CST)\n+\t   return false;\n+\t gimple_seq stmts = NULL;\n+\t location_t loc = gimple_location (stmt);\n+\t tree splat_value = gimple_convert (&stmts, loc,\n+\t\t\t\t\t    TREE_TYPE (TREE_TYPE (lhs)), arg0);\n+\t gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t tree splat_tree = build_vector_from_val (TREE_TYPE (lhs), splat_value);\n+\t g = gimple_build_assign (lhs, splat_tree);\n+\t gimple_set_location (g, gimple_location (stmt));\n+\t gsi_replace (gsi, g, true);\n+\t return true;\n+      }\n+\n     default:\n       if (TARGET_DEBUG_BUILTIN)\n \tfprintf (stderr, \"gimple builtin intrinsic not matched:%d %s %s\\n\","}, {"sha": "dced5e7b59cd34c8c7e21ec7ad9f2ef02478931c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5648717a8826a1bb60afd31b56c48b60d3813d4", "patch": "@@ -1,3 +1,7 @@\n+2017-12-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-splat-misc-invalid.c: New.\n+\n 2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83379"}, {"sha": "20f5b05561eab6f8c67c1678bd08237d07e646b8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-misc-invalid.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5648717a8826a1bb60afd31b56c48b60d3813d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c?ref=a5648717a8826a1bb60afd31b56c48b60d3813d4", "patch": "@@ -0,0 +1,33 @@\n+/* Verify that overloaded built-ins for vec_splat_s8 and vec_splat_s16\n+   generate errors as expected when we attempt to use invalid inputs.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+testss_1 (unsigned int ui)\n+{\n+  return vec_splat_s16 (ui);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector unsigned short\n+testss_2 (signed int si)\n+{\n+  return vec_splat_u16 (si);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector signed char\n+testsc_1 (unsigned int ui)\n+{\n+  return vec_splat_s8 (ui); /* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector unsigned char\n+testsc_2 (signed int si)\n+{\n+  return vec_splat_u8 (si);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+"}]}