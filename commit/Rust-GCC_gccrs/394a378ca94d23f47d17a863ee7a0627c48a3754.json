{"sha": "394a378ca94d23f47d17a863ee7a0627c48a3754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0YTM3OGNhOTRkMjNmNDdkMTdhODYzZWU3YTA2MjdjNDhhMzc1NA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-06-12T09:19:35Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-06-12T09:19:35Z"}, "message": "i386.c (ix86_compute_frame_layout): Disable red zone for w64 abi.\n\n2008-06-11  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* config/i386/i386.c (ix86_compute_frame_layout): Disable red zone for\n\tw64 abi.\n\t(ix86_expand_prologue): Likewise.\n\t(ix86_force_to_memory): Likewise.\n\t(ix86_free_from_memory): Likewise.\n\nFrom-SVN: r136693", "tree": {"sha": "e368696b56b9bd13bd1b13ecf15328baba24b569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e368696b56b9bd13bd1b13ecf15328baba24b569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394a378ca94d23f47d17a863ee7a0627c48a3754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394a378ca94d23f47d17a863ee7a0627c48a3754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394a378ca94d23f47d17a863ee7a0627c48a3754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394a378ca94d23f47d17a863ee7a0627c48a3754/comments", "author": null, "committer": null, "parents": [{"sha": "001c371924eda53a20082894f1d5c0414f8063f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001c371924eda53a20082894f1d5c0414f8063f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001c371924eda53a20082894f1d5c0414f8063f3"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "e1c11b1a15fffb180ff43633f29a3bb6ad886526", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394a378ca94d23f47d17a863ee7a0627c48a3754/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394a378ca94d23f47d17a863ee7a0627c48a3754/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=394a378ca94d23f47d17a863ee7a0627c48a3754", "patch": "@@ -1,3 +1,11 @@\n+2008-06-12  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386.c (ix86_compute_frame_layout): Disable red zone for\n+\tw64 abi.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_force_to_memory): Likewise.\n+\t(ix86_free_from_memory): Likewise.\n+\n 2008-06-11  Edmar Wienskoski  <edmar@freescale.com>\n \n \tPR target/36425"}, {"sha": "d7a07136791e3431a9c0f06810800de8dab2872f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394a378ca94d23f47d17a863ee7a0627c48a3754/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394a378ca94d23f47d17a863ee7a0627c48a3754/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=394a378ca94d23f47d17a863ee7a0627c48a3754", "patch": "@@ -6388,7 +6388,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n       || (TARGET_64BIT && frame->to_allocate >= (HOST_WIDE_INT) 0x80000000))\n     frame->save_regs_using_mov = false;\n \n-  if (TARGET_RED_ZONE && current_function_sp_is_unchanging\n+  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE && current_function_sp_is_unchanging\n       && current_function_is_leaf\n       && !ix86_current_function_calls_tls_descriptor)\n     {\n@@ -6631,7 +6631,7 @@ ix86_expand_prologue (void)\n      avoid doing this if I am going to have to probe the stack since\n      at least on x86_64 the stack probe can turn into a call that clobbers\n      a red zone location */\n-  if (TARGET_RED_ZONE && frame.save_regs_using_mov\n+  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE && frame.save_regs_using_mov\n       && (! TARGET_STACK_PROBE || allocate < CHECK_STACK_LIMIT))\n     ix86_emit_save_regs_using_mov (frame_pointer_needed ? hard_frame_pointer_rtx\n \t\t\t\t   : stack_pointer_rtx,\n@@ -6689,7 +6689,7 @@ ix86_expand_prologue (void)\n     }\n \n   if (frame.save_regs_using_mov\n-      && !(TARGET_RED_ZONE\n+      && !(!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE\n          && (! TARGET_STACK_PROBE || allocate < CHECK_STACK_LIMIT)))\n     {\n       if (!frame_pointer_needed || !frame.to_allocate)\n@@ -21943,15 +21943,15 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n   rtx result;\n \n   gcc_assert (reload_completed);\n-  if (TARGET_RED_ZONE)\n+  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE)\n     {\n       result = gen_rtx_MEM (mode,\n \t\t\t    gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t  GEN_INT (-RED_ZONE_SIZE)));\n       emit_move_insn (result, operand);\n     }\n-  else if (!TARGET_RED_ZONE && TARGET_64BIT)\n+  else if ((TARGET_64BIT_MS_ABI || !TARGET_RED_ZONE) && TARGET_64BIT)\n     {\n       switch (mode)\n \t{\n@@ -22018,7 +22018,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n void\n ix86_free_from_memory (enum machine_mode mode)\n {\n-  if (!TARGET_RED_ZONE)\n+  if (!TARGET_RED_ZONE || TARGET_64BIT_MS_ABI)\n     {\n       int size;\n "}]}