{"sha": "08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhYmJkZGFhYTdlNDFmMDU4NmM2NDFmODgzYjdjMmM4YmI3NDJlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-26T23:12:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-26T23:12:44Z"}, "message": "PR libstdc++/89477 constrain deduction guides for maps and sets\n\nThe Compare, Hash, and Pred template parameters should be constrained in\nthe C++17 deduction guides for associative and unordered containers.\n\nThe deduction guides for stack, queue and priority_queue are already\nconstrained, but this patch makes them use the _RequireNotAllocator\nhelper instead of reproducing the logic each time.\n\n\tPR libstdc++/89477\n\t* include/bits/alloc_traits.h (_RequireNotAllocator): New helper for\n\tcontainer deduction guides.\n\t* include/bits/hashtable.h (_RequireNotAllocatorOrIntegral): Likewise.\n\t* include/bits/stl_map.h (map): Use _RequireNotAllocator to constrain\n\tparameters in deduction guides.\n\t* include/bits/stl_multimap.h (multimap): Likewise.\n\t* include/bits/stl_multiset.h (multiset): Likewise.\n\t* include/bits/stl_queue.h (queue, priority_queue): Likewise.\n\t* include/bits/stl_set.h (set): Likewise.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n\tuse _RequireNotAllocator and _RequireNotAllocatorOrIntegral to\n\tconstrain parameters in deduction guides.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\t* testsuite/23_containers/map/cons/deduction.cc: Test additional\n\tdeduction cases.\n\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/cons/deduction.cc: Likewise.\n\nFrom-SVN: r269234", "tree": {"sha": "72465054c25ef809adeac6217526acd25aa229e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72465054c25ef809adeac6217526acd25aa229e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8735903781aabdb48683d24d783eba6c76fd8c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8735903781aabdb48683d24d783eba6c76fd8c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8735903781aabdb48683d24d783eba6c76fd8c99"}], "stats": {"total": 577, "additions": 512, "deletions": 65}, "files": [{"sha": "e2f44b3d20b50833242a067403ce0f48136c704b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -1,5 +1,32 @@\n 2019-02-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/89477\n+\t* include/bits/alloc_traits.h (_RequireNotAllocator): New helper for\n+\tcontainer deduction guides.\n+\t* include/bits/hashtable.h (_RequireNotAllocatorOrIntegral): Likewise.\n+\t* include/bits/stl_map.h (map): Use _RequireNotAllocator to constrain\n+\tparameters in deduction guides.\n+\t* include/bits/stl_multimap.h (multimap): Likewise.\n+\t* include/bits/stl_multiset.h (multiset): Likewise.\n+\t* include/bits/stl_queue.h (queue, priority_queue): Likewise.\n+\t* include/bits/stl_set.h (set): Likewise.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n+\tuse _RequireNotAllocator and _RequireNotAllocatorOrIntegral to\n+\tconstrain parameters in deduction guides.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* testsuite/23_containers/map/cons/deduction.cc: Test additional\n+\tdeduction cases.\n+\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/cons/deduction.cc: Likewise.\n+\n \tPR libstdc++/89416\n \t* include/bits/alloc_traits.h (__is_alloc_insertable_impl): Change\n \tto class template and partial specialization using void_t."}, {"sha": "cda768bf391b12c956582d40cd179978c564356d", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -634,6 +634,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using _RequireAllocator\n       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;\n \n+  template<typename _Alloc>\n+    using _RequireNotAllocator\n+      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++11"}, {"sha": "4737247994ac6f30209a4b72e4f15f9f8ec39bc0", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -2214,6 +2214,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename, typename, typename> class _Hash_merge_helper { };\n #endif // C++17\n \n+#if __cpp_deduction_guides >= 201606\n+  // Used to constrain deduction guides\n+  template<typename _Hash>\n+    using _RequireNotAllocatorOrIntegral\n+      = __enable_if_t<!__or_<is_integral<_Hash>, __is_allocator<_Hash>>::value>;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "322d0a8290af8204685f2fbd7ed69f27bed8dbc6", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -1411,6 +1411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     map(_InputIterator, _InputIterator,\n \t_Compare = _Compare(), _Allocator = _Allocator())\n@@ -1419,6 +1420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     map(initializer_list<pair<_Key, _Tp>>,\n \t_Compare = _Compare(), _Allocator = _Allocator())"}, {"sha": "4c4ccad3ac00e88ece7d72ba296e9f26b7919512", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -1075,6 +1075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     multimap(_InputIterator, _InputIterator,\n \t     _Compare = _Compare(), _Allocator = _Allocator())\n@@ -1083,6 +1084,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     multimap(initializer_list<pair<_Key, _Tp>>,\n \t     _Compare = _Compare(), _Allocator = _Allocator())"}, {"sha": "af733ea34dca0847a2f1b021b784ff766eb962c3", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -917,32 +917,34 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Allocator =\n \t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n-   multiset(_InputIterator, _InputIterator,\n-\t    _Compare = _Compare(), _Allocator = _Allocator())\n-   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n-\t       _Compare, _Allocator>;\n-\n- template<typename _Key,\n-\t  typename _Compare = less<_Key>,\n-\t  typename _Allocator = allocator<_Key>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(initializer_list<_Key>,\n-\t    _Compare = _Compare(), _Allocator = _Allocator())\n-   -> multiset<_Key, _Compare, _Allocator>;\n-\n- template<typename _InputIterator, typename _Allocator,\n-\t  typename = _RequireInputIter<_InputIterator>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(_InputIterator, _InputIterator, _Allocator)\n-   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n-\t       less<typename iterator_traits<_InputIterator>::value_type>,\n-\t       _Allocator>;\n-\n- template<typename _Key, typename _Allocator,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(initializer_list<_Key>, _Allocator)\n-   -> multiset<_Key, less<_Key>, _Allocator>;\n+    multiset(_InputIterator, _InputIterator,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t\t_Compare, _Allocator>;\n+\n+  template<typename _Key,\n+\t   typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<_Key>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(initializer_list<_Key>,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multiset<_Key, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(_InputIterator, _InputIterator, _Allocator)\n+    -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t        less<typename iterator_traits<_InputIterator>::value_type>,\n+\t        _Allocator>;\n+\n+  template<typename _Key, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(initializer_list<_Key>, _Allocator)\n+    -> multiset<_Key, less<_Key>, _Allocator>;\n \n #endif\n "}, {"sha": "f7b2d3ad235cf2d89bbb263853e74043ada6f865", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -312,12 +312,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_deduction_guides >= 201606\n   template<typename _Container,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+\t   typename = _RequireNotAllocator<_Container>>\n     queue(_Container) -> queue<typename _Container::value_type, _Container>;\n \n   template<typename _Container, typename _Allocator,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n-\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+\t   typename = _RequireNotAllocator<_Container>,\n+\t   typename = _RequireAllocator<_Allocator>>\n     queue(_Container, _Allocator)\n     -> queue<typename _Container::value_type, _Container>;\n #endif\n@@ -687,8 +687,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_deduction_guides >= 201606\n   template<typename _Compare, typename _Container,\n-\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireNotAllocator<_Container>>\n     priority_queue(_Compare, _Container)\n     -> priority_queue<typename _Container::value_type, _Container, _Compare>;\n \n@@ -697,16 +697,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Compare = less<_ValT>,\n \t   typename _Container = vector<_ValT>,\n \t   typename = _RequireInputIter<_InputIterator>,\n-\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireNotAllocator<_Container>>\n     priority_queue(_InputIterator, _InputIterator, _Compare = _Compare(),\n \t\t   _Container = _Container())\n     -> priority_queue<_ValT, _Container, _Compare>;\n \n   template<typename _Compare, typename _Container, typename _Allocator,\n-\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n-\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireNotAllocator<_Container>,\n+\t   typename = _RequireAllocator<_Allocator>>\n     priority_queue(_Compare, _Container, _Allocator)\n     -> priority_queue<typename _Container::value_type, _Container, _Compare>;\n #endif"}, {"sha": "3131a7974b0bcb55fb149c9044d9f81ff883be39", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -934,6 +934,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Allocator =\n \t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     set(_InputIterator, _InputIterator,\n \t_Compare = _Compare(), _Allocator = _Allocator())\n@@ -942,6 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Key, typename _Compare = less<_Key>,\n \t   typename _Allocator = allocator<_Key>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     set(initializer_list<_Key>,\n \t_Compare = _Compare(), _Allocator = _Allocator())"}, {"sha": "7b5f8ca482a9c3c1450fcda445b99434e0daf196", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -286,12 +286,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_deduction_guides >= 201606\n   template<typename _Container,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+\t   typename = _RequireNotAllocator<_Container>>\n     stack(_Container) -> stack<typename _Container::value_type, _Container>;\n \n   template<typename _Container, typename _Allocator,\n-\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n-\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+\t   typename = _RequireNotAllocator<_Container>,\n+\t   typename = _RequireAllocator<_Allocator>>\n     stack(_Container, _Allocator)\n     -> stack<typename _Container::value_type, _Container>;\n #endif"}, {"sha": "b8243a73445a7e5b5ebc1d14e18ffa9fec81ff9c", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -1145,6 +1145,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(_InputIterator, _InputIterator,\n \t\t  typename unordered_map<int, int>::size_type = {},\n@@ -1156,6 +1158,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n \t   typename _Pred = equal_to<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(initializer_list<pair<_Key, _Tp>>,\n \t\t  typename unordered_map<int, int>::size_type = {},\n@@ -1185,6 +1189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(_InputIterator, _InputIterator,\n \t\t  typename unordered_map<int, int>::size_type,\n@@ -1206,6 +1211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(initializer_list<pair<_Key, _Tp>>,\n \t\t  typename unordered_map<int, int>::size_type,\n@@ -1991,6 +1997,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(_InputIterator, _InputIterator,\n \t\t       unordered_multimap<int, int>::size_type = {},\n@@ -2003,6 +2011,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n \t   typename _Pred = equal_to<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n \t\t       unordered_multimap<int, int>::size_type = {},\n@@ -2031,6 +2041,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(_InputIterator, _InputIterator,\n \t\t       unordered_multimap<int, int>::size_type, _Hash,\n@@ -2052,6 +2063,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n \t\t       unordered_multimap<int, int>::size_type,"}, {"sha": "8ebcaf4026397f5f695feb97418baec1520b8094", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -820,12 +820,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator,\n \t   typename _Hash =\n-\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t     hash<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Pred =\n-\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t     equal_to<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Allocator =\n-\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(_InputIterator, _InputIterator,\n \t\t  unordered_set<int>::size_type = {},\n@@ -836,6 +838,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Hash = hash<_Tp>,\n \t   typename _Pred = equal_to<_Tp>,\n \t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(initializer_list<_Tp>,\n \t\t  unordered_set<int>::size_type = {},\n@@ -856,6 +860,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(_InputIterator, _InputIterator,\n \t\t  unordered_set<int>::size_type,\n@@ -873,6 +878,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n \n   template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(initializer_list<_Tp>,\n \t\t  unordered_set<int>::size_type, _Hash, _Allocator)\n@@ -1608,12 +1614,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator,\n \t   typename _Hash =\n-\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t     hash<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Pred =\n-\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t     equal_to<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Allocator =\n-\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(_InputIterator, _InputIterator,\n \t\t       unordered_multiset<int>::size_type = {},\n@@ -1625,6 +1633,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Hash = hash<_Tp>,\n \t   typename _Pred = equal_to<_Tp>,\n \t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(initializer_list<_Tp>,\n \t\t       unordered_multiset<int>::size_type = {},\n@@ -1646,6 +1656,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(_InputIterator, _InputIterator,\n \t\t       unordered_multiset<int>::size_type,\n@@ -1665,6 +1676,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n \n   template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(initializer_list<_Tp>,\n \t\t       unordered_multiset<int>::size_type, _Hash, _Allocator)"}, {"sha": "a42d8d6b8810bcf85549b138befe2834c7ef28ae", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/deduction.cc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -44,6 +44,23 @@ static_assert(std::is_same_v<\n \t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}}, {}}),\n \t      std::map<int, double>>);\n \n+/* This is not deducible, ambiguous candidates:\n+ * map(initializer_list<value_type>, const Compare&, const _Allocator& = {})\n+ * map(initializer_list<value_type>, const _Allocator&)\n+ * map(initializer_list<pair<Key, T>>, const _Allocator&) -> map\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{value_type{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t\t\tSimpleAllocator<value_type>{}}),\n+\t      std::map<int, double, std::less<int>,\n+\t\t       SimpleAllocator<value_type>>>);\n+*/\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t\t\tSimpleAllocator<value_type>{}}),\n+\t      std::map<int, double, std::less<int>,\n+\t\t       SimpleAllocator<value_type>>>);\n+\n static_assert(std::is_same_v<\n \t      decltype(std::map{{value_type{1, 2.0}, {2, 3.0}, {3, 4.0}},\n \t\t\t\t{}, SimpleAllocator<value_type>{}}),\n@@ -79,6 +96,17 @@ void f()\n \t\t\t\t  {})),\n \t\tstd::map<int, double>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::map<int, double, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::map{x.begin(), x.end(),\n \t\t\t\t  {},\n@@ -121,6 +149,17 @@ void g()\n \t\t\t\t  {})),\n \t\tstd::map<int, double>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::map<int, double, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::map{x.begin(), x.end(),\n \t\t\t\t  {},\n@@ -160,6 +199,17 @@ void h()\n \t\t\t\t  {})),\n \t\tstd::map<int, double>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::map<int, double, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::map{x.begin(), x.end(),\n \t\t\t\t  {},"}, {"sha": "6fe2704da179d5eea5f1db297ee06b46adac11c0", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/deduction.cc", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -3,8 +3,10 @@\n \n #include <set>\n #include <testsuite_allocator.h>\n+#include <testsuite_iterators.h>\n \n using __gnu_test::SimpleAllocator;\n+using value_type = std::multiset<int>::value_type;\n \n static_assert(std::is_same_v<\n \t      decltype(std::multiset{1, 2, 3}),\n@@ -15,20 +17,20 @@ static_assert(std::is_same_v<\n \t      std::multiset<int>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::multiset{{1, 2, 3},\n-\t\t    std::less<int>{}, {}}),\n+\t      decltype(std::multiset{{1, 2, 3}, std::less<int>{}, {}}),\n \t      std::multiset<int>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::multiset{{1, 2, 3},\n-\t\t    {}}),\n+\t      decltype(std::multiset{{1, 2, 3}, {}}),\n \t      std::multiset<int>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::multiset{{1, 2, 3},\n-\t\t    {}, SimpleAllocator<int>{}}),\n-\t      std::multiset<int, std::less<int>,\n-\t      SimpleAllocator<int>>>);\n+\t      decltype(std::multiset{{1, 2, 3}, SimpleAllocator<int>{}}),\n+\t      std::multiset<int, std::less<int>, SimpleAllocator<int>>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{{1, 2, 3}, {}, SimpleAllocator<int>{}}),\n+\t      std::multiset<int, std::less<int>, SimpleAllocator<int>>>);\n \n void f()\n {\n@@ -54,6 +56,16 @@ void f()\n \t\t\t\t  {})),\n \t\tstd::multiset<int>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t       std::allocator<int>{}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t       SimpleAllocator<int>{}}),\n+\t\tstd::multiset<int, std::less<int>, SimpleAllocator<int>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::multiset{x.begin(), x.end(),\n \t\t      {},\n@@ -66,3 +78,56 @@ void f()\n \t\t      SimpleAllocator<int>{}}),\n \t\tstd::multiset<int, std::less<int>, SimpleAllocator<int>>>);\n }\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+void g()\n+{\n+  value_type array[1];\n+  test_container<value_type, input_iterator_wrapper> x(array);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset(x.begin(), x.end())),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  std::less<int>{},\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  std::less<int>{}, {}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::multiset<int, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  {},\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t\t\t  {},\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::multiset<int, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+}"}, {"sha": "df89fa28dd008f0d1ad5d6f423ae7e492c2c6176", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/deduction.cc", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -3,8 +3,10 @@\n \n #include <set>\n #include <testsuite_allocator.h>\n+#include <testsuite_iterators.h>\n \n using __gnu_test::SimpleAllocator;\n+using value_type = std::set<int>::value_type;\n \n static_assert(std::is_same_v<\n \t      decltype(std::set{1, 2, 3}),\n@@ -24,6 +26,12 @@ static_assert(std::is_same_v<\n \t\t    {}}),\n \t      std::set<int>>);\n \n+static_assert(std::is_same_v<\n+\t      decltype(std::set{{1, 2, 3},\n+\t\t    SimpleAllocator<int>{}}),\n+\t      std::set<int, std::less<int>,\n+\t      SimpleAllocator<int>>>);\n+\n static_assert(std::is_same_v<\n \t      decltype(std::set{{1, 2, 3},\n \t\t    {}, SimpleAllocator<int>{}}),\n@@ -60,9 +68,67 @@ void f()\n \t\t      std::allocator<int>{}}),\n \t\tstd::set<int>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<int>{}}),\n+\t\tstd::set<int, std::less<int>, SimpleAllocator<int>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::set{x.begin(), x.end(),\n \t\t      {},\n \t\t      SimpleAllocator<int>{}}),\n \t\tstd::set<int, std::less<int>, SimpleAllocator<int>>>);\n }\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+void g()\n+{\n+  value_type array[1];\n+  test_container<value_type, input_iterator_wrapper> x(array);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set(x.begin(), x.end())),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  std::less<int>{},\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  std::less<int>{}, {}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::set<int, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  {},\n+\t\t\t\t  std::allocator<value_type>{}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t\t\t  {},\n+\t\t\t\t  SimpleAllocator<value_type>{}}),\n+\t\tstd::set<int, std::less<int>,\n+\t\t\t SimpleAllocator<value_type>>>);\n+}"}, {"sha": "979a56c9497663465bff16cddc7c497508e00eb6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/deduction.cc", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -16,6 +16,12 @@ static_assert(std::is_same_v<\n \t\t      {2, 3.0}, {3, 4.0}}}),\n \t      std::unordered_map<int, double>>);\n \n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{\n+\t\t{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t1}),\n+\t      std::unordered_map<int, double>>);\n+\n static_assert(std::is_same_v<\n \t      decltype(std::unordered_map{{std::pair{1, 2.0},\n \t\t      {2, 3.0}, {3, 4.0}},\n@@ -41,6 +47,7 @@ static_assert(std::is_same_v<\n void f()\n {\n   std::unordered_map<int, double> x;\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_map(x.begin(), x.end())),\n \t\tstd::unordered_map<int, double>>);\n@@ -58,9 +65,41 @@ void f()\n   \n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_map(x.begin(), x.end(),\n-\t\t\t\t  {})),\n+\t\t      {})),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(), 1}),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n \t\tstd::unordered_map<int, double>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_map{x.begin(), x.end(),\n \t\t      {}, {}, {},"}, {"sha": "72b2d07149aa077aeed43842d023b73d023a3cb2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/cons/deduction.cc", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -29,10 +29,25 @@ static_assert(std::is_same_v<\n \t      std::unordered_multimap<int, double>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::unordered_multimap{{std::pair{1, 2.0},\n-\t\t      {2, 3.0}, {3, 4.0}},\n-\t\t    {}, {}, {},\n-\t\t    SimpleAllocator<std::pair<const int, double>>{}}),\n+\t      decltype(std::unordered_multimap{\n+\t\t{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t1, std::hash<int>{}}),\n+\t      std::unordered_multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{\n+\t\t{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t1, std::hash<int>{},\n+\t\tSimpleAllocator<std::pair<const int, double>>{}}),\n+\t      std::unordered_multimap<int, double, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<std::pair<const int, double>>>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{\n+\t\t{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t{}, {}, {},\n+\t\tSimpleAllocator<std::pair<const int, double>>{}}),\n \t      std::unordered_multimap<int, double, std::hash<int>,\n \t      std::equal_to<int>,\n \t      SimpleAllocator<std::pair<const int, double>>>>);\n@@ -41,6 +56,7 @@ static_assert(std::is_same_v<\n void f()\n {\n   std::unordered_multimap<int, double> x;\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_multimap(x.begin(), x.end())),\n \t\tstd::unordered_multimap<int, double>>);\n@@ -61,6 +77,38 @@ void f()\n \t\t\t\t  {})),\n \t\tstd::unordered_multimap<int, double>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap(x.begin(), x.end(), 1)),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n \t\t      {}, {}, {},"}, {"sha": "fa895d7ff54900ea42baf0e791e66b7154a8c6f6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/cons/deduction.cc", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -11,19 +11,44 @@ static_assert(std::is_same_v<\n \t      std::unordered_multiset<int>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::unordered_multiset{1, 2, 3}),\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    0, std::hash<int>{}, {}}),\n \t      std::unordered_multiset<int>>);\n \n static_assert(std::is_same_v<\n \t      decltype(std::unordered_multiset{{1, 2, 3},\n-\t\t    0, std::hash<int>{}, {}}),\n+\t\t    {}}),\n \t      std::unordered_multiset<int>>);\n \n static_assert(std::is_same_v<\n \t      decltype(std::unordered_multiset{{1, 2, 3},\n-\t\t    {}}),\n+\t\t    1}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    1, std::allocator<int>{}}),\n \t      std::unordered_multiset<int>>);\n \n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    1, SimpleAllocator<int>{}}),\n+\t      std::unordered_multiset<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    1, std::hash<int>{}, std::allocator<int>{}}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    1, std::hash<int>{}, SimpleAllocator<int>{}}),\n+\t      std::unordered_multiset<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n static_assert(std::is_same_v<\n \t      decltype(std::unordered_multiset{{1, 2, 3},\n \t\t    {}, {}, {}, std::allocator<int>{}}),\n@@ -59,9 +84,41 @@ void f()\n \n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_multiset(x.begin(), x.end(),\n-\t\t\t\t  {})),\n+\t\t      {})),\n \t\tstd::unordered_multiset<int>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(), 1}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_multiset<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_multiset<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n \t\t      {}, {}, {},"}, {"sha": "61f21d2b1f42f0e17e78603afb8b1e4f3e3af99d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/deduction.cc", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08abbddaaa7e41f0586c641f883b7c2c8bb742e0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc?ref=08abbddaaa7e41f0586c641f883b7c2c8bb742e0", "patch": "@@ -11,19 +11,39 @@ static_assert(std::is_same_v<\n \t      std::unordered_set<int>>);\n \n static_assert(std::is_same_v<\n-\t      decltype(std::unordered_set{1, 2, 3}),\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    0, std::hash<int>{}, {}}),\n \t      std::unordered_set<int>>);\n \n static_assert(std::is_same_v<\n \t      decltype(std::unordered_set{{1, 2, 3},\n-\t\t    0, std::hash<int>{}, {}}),\n+\t\t    {}}),\n \t      std::unordered_set<int>>);\n \n static_assert(std::is_same_v<\n \t      decltype(std::unordered_set{{1, 2, 3},\n-\t\t    {}}),\n+\t\t    1, std::allocator<int>{}}),\n \t      std::unordered_set<int>>);\n \n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    1, SimpleAllocator<int>{}}),\n+\t      std::unordered_set<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    1, std::hash<int>{}, std::allocator<int>{}}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    1, std::hash<int>{}, SimpleAllocator<int>{}}),\n+\t      std::unordered_set<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n static_assert(std::is_same_v<\n \t      decltype(std::unordered_set{{1, 2, 3},\n \t\t    {}, {}, {}, std::allocator<int>{}}),\n@@ -59,9 +79,41 @@ void f()\n \n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_set(x.begin(), x.end(),\n-\t\t\t\t  {})),\n+\t\t      {})),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(), 1}),\n \t\tstd::unordered_set<int>>);\n \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      1,\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_set<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      1, std::hash<int>{},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_set<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+\n   static_assert(std::is_same_v<\n \t\tdecltype(std::unordered_set{x.begin(), x.end(),\n \t\t      {}, {}, {},"}]}