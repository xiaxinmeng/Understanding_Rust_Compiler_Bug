{"sha": "b81d4f1e3d6a519afa20d84304f12ee639fde944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxZDRmMWUzZDZhNTE5YWZhMjBkODQzMDRmMTJlZTYzOWZkZTk0NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-23T11:20:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-23T11:20:26Z"}, "message": "libstdc++: Adjust std::from_chars negative tests\n\nAlso test with an enumeration type. Move the dg-error directives outside\nthe #if block, because DejaGnu would process them whether or not wchar_t\nsupport is present.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/from_chars/1_c++20_neg.cc: Check enumeration\n\ttype.\n\t* testsuite/20_util/from_chars/1_neg.cc: Likewise. Move dg-error\n\tdirectives outside preprocessor condition.", "tree": {"sha": "0ecfcd7e0ec14dc1ba22da0c4e2d582b3be52f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ecfcd7e0ec14dc1ba22da0c4e2d582b3be52f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81d4f1e3d6a519afa20d84304f12ee639fde944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81d4f1e3d6a519afa20d84304f12ee639fde944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81d4f1e3d6a519afa20d84304f12ee639fde944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81d4f1e3d6a519afa20d84304f12ee639fde944/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc16503ca10bc0e934e0bace5777500e4dc757a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc16503ca10bc0e934e0bace5777500e4dc757a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc16503ca10bc0e934e0bace5777500e4dc757a"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "8454b304d1384349d547b3cef216151d118f8276", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1_c++20_neg.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d4f1e3d6a519afa20d84304f12ee639fde944/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d4f1e3d6a519afa20d84304f12ee639fde944/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc?ref=b81d4f1e3d6a519afa20d84304f12ee639fde944", "patch": "@@ -35,6 +35,9 @@ test01(const char* first, const char* last)\n   char32_t c32;\n   std::from_chars(first, last, c32); // { dg-error \"no matching\" }\n   std::from_chars(first, last, c32, 10); // { dg-error \"no matching\" }\n+  enum E { } e;\n+  std::from_chars(first, last, e); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, e, 10); // { dg-error \"no matching\" }\n }\n \n // { dg-prune-output \"enable_if\" }"}, {"sha": "12b5e597b9f5861514e5920091256da53d87072c", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1_neg.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d4f1e3d6a519afa20d84304f12ee639fde944/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d4f1e3d6a519afa20d84304f12ee639fde944/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc?ref=b81d4f1e3d6a519afa20d84304f12ee639fde944", "patch": "@@ -25,16 +25,22 @@ test01(const char* first, const char* last)\n {\n #if _GLIBCXX_USE_WCHAR_T\n   wchar_t wc;\n+#else\n+  enum W { } wc;\n+#endif\n   std::from_chars(first, last, wc); // { dg-error \"no matching\" }\n   std::from_chars(first, last, wc, 10); // { dg-error \"no matching\" }\n-#endif\n \n   char16_t c16;\n   std::from_chars(first, last, c16); // { dg-error \"no matching\" }\n   std::from_chars(first, last, c16, 10); // { dg-error \"no matching\" }\n   char32_t c32;\n   std::from_chars(first, last, c32); // { dg-error \"no matching\" }\n   std::from_chars(first, last, c32, 10); // { dg-error \"no matching\" }\n+\n+  enum E { } e;\n+  std::from_chars(first, last, e); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, e, 10); // { dg-error \"no matching\" }\n }\n \n // { dg-prune-output \"enable_if\" }"}]}