{"sha": "4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3MWUxZWQxNzI4ZGEyMmQ0OGNmYWQxY2IyNWEwYTM3ZjY1ZDFiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:18:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:18:28Z"}, "message": "poly_int: expand_ifn_atomic_compare_exchange_into_call\n\nThis patch makes the mode size assumptions in\nexpand_ifn_atomic_compare_exchange_into_call a bit more\nexplicit, so that a later patch can add a to_constant () call.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* builtins.c (expand_ifn_atomic_compare_exchange_into_call): Assert\n\tthat the mode size is in the set {1, 2, 4, 8, 16}.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256157", "tree": {"sha": "fdd36d4cde99c5a28092606dfa451299faed8c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd36d4cde99c5a28092606dfa451299faed8c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc/comments", "author": null, "committer": null, "parents": [{"sha": "0f5d092808f4385d7618ba8463ad0d8843cc243c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5d092808f4385d7618ba8463ad0d8843cc243c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f5d092808f4385d7618ba8463ad0d8843cc243c"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "2eea29ba5e0a349f7e665b52a6d64e0022afbd23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "patch": "@@ -1,3 +1,10 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* builtins.c (expand_ifn_atomic_compare_exchange_into_call): Assert\n+\tthat the mode size is in the set {1, 2, 4, 8, 16}.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c5d8435f2513b7894408c055ecb84692ff2a5329", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871e1ed1728da22d48cfad1cb25a0a37f65d1bc/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4871e1ed1728da22d48cfad1cb25a0a37f65d1bc", "patch": "@@ -5990,9 +5990,12 @@ expand_ifn_atomic_compare_exchange_into_call (gcall *call, machine_mode mode)\n   /* Skip the boolean weak parameter.  */\n   for (z = 4; z < 6; z++)\n     vec->quick_push (gimple_call_arg (call, z));\n+  /* At present we only have BUILT_IN_ATOMIC_COMPARE_EXCHANGE_{1,2,4,8,16}.  */\n+  unsigned int bytes_log2 = exact_log2 (GET_MODE_SIZE (mode));\n+  gcc_assert (bytes_log2 < 5);\n   built_in_function fncode\n     = (built_in_function) ((int) BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1\n-\t\t\t   + exact_log2 (GET_MODE_SIZE (mode)));\n+\t\t\t   + bytes_log2);\n   tree fndecl = builtin_decl_explicit (fncode);\n   tree fn = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fndecl)),\n \t\t    fndecl);"}]}