{"sha": "c2e42aabfc8f32c9d6ba599b249757460202ea65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlNDJhYWJmYzhmMzJjOWQ2YmE1OTliMjQ5NzU3NDYwMjAyZWE2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-01-02T01:56:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-01-02T01:56:55Z"}, "message": "c-common.c (c_common_nodes_and_builtins): Set prototype parameters for __builtin_fputs, __builtin_fputc and __builtin_fwrite.\n\n\t* c-common.c (c_common_nodes_and_builtins): Set prototype\n\tparameters for __builtin_fputs, __builtin_fputc and\n\t__builtin_fwrite.  Don't declare plain fputc as a builtin.\n\ntestsuite:\n\t* gcc.c-torture/execute/stdio-opt-1.c: Also test\n\t__builtin_fputc and __builtin_fwrite.\n\nFrom-SVN: r38605", "tree": {"sha": "a2b01e32710f5e888eccd6c022f598ae595eabca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b01e32710f5e888eccd6c022f598ae595eabca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e42aabfc8f32c9d6ba599b249757460202ea65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e42aabfc8f32c9d6ba599b249757460202ea65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e42aabfc8f32c9d6ba599b249757460202ea65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e42aabfc8f32c9d6ba599b249757460202ea65/comments", "author": null, "committer": null, "parents": [{"sha": "e56b459443c4a8d7f46f33fae6b686d0ed645f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56b459443c4a8d7f46f33fae6b686d0ed645f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e56b459443c4a8d7f46f33fae6b686d0ed645f2d"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "5fa3e72da3696ba14767c7ccdf7208903369de1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2e42aabfc8f32c9d6ba599b249757460202ea65", "patch": "@@ -1,3 +1,9 @@\n+2001-01-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Set prototype\n+\tparameters for __builtin_fputs, __builtin_fputc and\n+\t__builtin_fwrite.  Don't declare plain fputc as a builtin.\n+\n 2001-01-01  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n         * loop.c (add_label_notes): Increment the label usage count when"}, {"sha": "f341547906770b2aea59f834417947bd5594f065", "filename": "gcc/c-common.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c2e42aabfc8f32c9d6ba599b249757460202ea65", "patch": "@@ -5099,10 +5099,11 @@ c_common_nodes_and_builtins ()\n   tree temp;\n   tree memcpy_ftype, memset_ftype, strlen_ftype;\n   tree bzero_ftype, bcmp_ftype, puts_ftype, printf_ftype;\n+  tree fputs_ftype, fputc_ftype, fwrite_ftype;\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree cstring_endlink, sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n-  tree void_ftype_any, void_ftype_int, int_ftype_any, sizet_ftype_any;\n+  tree void_ftype_any, void_ftype_int, int_ftype_any;\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float, ldouble_ftype_ldouble;\n   tree int_ftype_cptr_cptr_sizet, sizet_ftype_cstring_cstring;\n@@ -5170,7 +5171,6 @@ c_common_nodes_and_builtins ()\n   /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n   ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n \n-  sizet_ftype_any = build_function_type (sizetype, NULL_TREE);\n   int_ftype_any = build_function_type (integer_type_node, NULL_TREE);\n   void_ftype_any = build_function_type (void_type_node, NULL_TREE);\n   void_ftype = build_function_type (void_type_node, endlink);\n@@ -5325,6 +5325,30 @@ c_common_nodes_and_builtins ()\n \t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n \t\t\t\t      NULL_TREE));\n \n+  /* These stdio prototypes are declared using void* in place of\n+     FILE*.  They are only used for __builtin_ style calls, regular\n+     style builtin prototypes omit the arguments and merge those\n+     provided by stdio.h.  */\n+  /* Prototype for fwrite.  */\n+  fwrite_ftype\n+    = build_function_type (c_size_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, c_size_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, c_size_type_node,\n+\t\t\t\t\t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)))));\n+\n+  /* Prototype for fputc.  */\n+  fputc_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node, endlink)));\n+\n+  /* Prototype for fputs.  */\n+  fputs_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node, endlink)));\n+\n   builtin_function (\"__builtin_constant_p\", default_function_type,\n \t\t    BUILT_IN_CONSTANT_P, BUILT_IN_NORMAL, NULL_PTR);\n \n@@ -5571,21 +5595,19 @@ c_common_nodes_and_builtins ()\n   builtin_function_2 (\"__builtin_printf\", \"printf\",\n \t\t      printf_ftype, printf_ftype,\n \t\t      BUILT_IN_PRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n-  /* We declare these without argument so that the initial declaration\n-     for these identifiers is a builtin.  That allows us to redeclare\n-     them later with argument without worrying about the explicit\n-     declarations in stdio.h being taken as the initial declaration.\n-     Also, save the _DECL for these so we can use them later.  */\n   built_in_decls[BUILT_IN_FWRITE] =\n-    builtin_function (\"__builtin_fwrite\", sizet_ftype_any,\n+    builtin_function (\"__builtin_fwrite\", fwrite_ftype,\n \t\t      BUILT_IN_FWRITE, BUILT_IN_NORMAL, \"fwrite\");\n   built_in_decls[BUILT_IN_FPUTC] =\n-    builtin_function_2 (\"__builtin_fputc\", \"fputc\",\n-\t\t\tint_ftype_any, int_ftype_any,\n-\t\t\tBUILT_IN_FPUTC, BUILT_IN_NORMAL, 1, 0, 0);\n+    builtin_function (\"__builtin_fputc\", fputc_ftype,\n+\t\t      BUILT_IN_FPUTC, BUILT_IN_NORMAL, \"fputc\");\n+  /* Declare the __builtin_ style with arguments and the regular style\n+     without them.  We rely on stdio.h to supply the arguments for the\n+     regular style declaration since we had to use void* instead of\n+     FILE* in the __builtin_ prototype supplied here.  */\n   built_in_decls[BUILT_IN_FPUTS] =\n     builtin_function_2 (\"__builtin_fputs\", \"fputs\",\n-\t\t\tint_ftype_any, int_ftype_any,\n+\t\t\tfputs_ftype, int_ftype_any,\n \t\t\tBUILT_IN_FPUTS, BUILT_IN_NORMAL, 1, 0, 0);\n \n   /* Declare these functions non-returning"}, {"sha": "a93223cc4e83473e07d9dcb625511c0f940a5ba6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2e42aabfc8f32c9d6ba599b249757460202ea65", "patch": "@@ -1,3 +1,8 @@\n+2001-01-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/stdio-opt-1.c: Also test\n+\t__builtin_fputc and __builtin_fwrite.\n+\n 2000-12-30  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* gcc.c-torture/execute/20001009-2.c (foo): Test only works for"}, {"sha": "78c2cc89a37c0865d55efd053a536369178ce910", "filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e42aabfc8f32c9d6ba599b249757460202ea65/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c?ref=c2e42aabfc8f32c9d6ba599b249757460202ea65", "patch": "@@ -46,6 +46,10 @@ int main()\n      to ensure that it works and that the prototype is correct.  */\n   s_ptr = s_array;\n   __builtin_fputs (\"\", *s_ptr);\n+  /* These builtin stubs are called by __builtin_fputs, ensure their\n+     prototypes are set correctly too.  */\n+  __builtin_fputc ('\\n', *s_ptr);\n+  __builtin_fwrite (\"hello\\n\", 1, 6, *s_ptr);\n \n   return 0;\n }"}]}