{"sha": "2749e4ab8fb74e43fc84724ef259589d75c121ff", "node_id": "C_kwDOANBUbNoAKDI3NDllNGFiOGZiNzRlNDNmYzg0NzI0ZWYyNTk1ODlkNzVjMTIxZmY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-12-29T07:10:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-11T08:53:17Z"}, "message": "[Ada] Set_Is_Known_Valid only if Safe_To_Capture_Value\n\nLibrary-level variables with initializers could have Is_Known_Valid\nset when analyzing their definition, and the flag would only be\ncleared when analyzing a statement that assigned to them. Procedures\nand functions analyzed before the flag got cleared could skip validity\nchecking for the corresponding variable. This patch fixes this\nproblem: we no longer set Is_Known_Valid when analyzing initializers\nof library-level variables,and use the same Safe_To_Capture_Value\npredicate that prevents assignments from recording known-valid states.\n\nThis causes any variable with an initialization value, that would have\nhad its initializer value used as its known constant value if the use\nis analyzed before any assignment to the variable, to no longer be\nregarded as holding a constant value. Some might turn out to have a\nconstant value, after all, but we don't know that yet: we can only\ntell after analyzing every subprogram that could possibly assign to\nit. At the points where Safe_To_Capture_Value calls are introduced,\nNever_Set_In_Source does not yet hold its final value.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Guard\n\tSet_Is_Known_Valid with Safe_To_Capture_Value.", "tree": {"sha": "4ba6aabb4b5fb97fa6f67a0891d1c2be817e5b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba6aabb4b5fb97fa6f67a0891d1c2be817e5b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2749e4ab8fb74e43fc84724ef259589d75c121ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2749e4ab8fb74e43fc84724ef259589d75c121ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2749e4ab8fb74e43fc84724ef259589d75c121ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2749e4ab8fb74e43fc84724ef259589d75c121ff/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "c5ed4689ffc34581238576b9c2c1646b5e59f35a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2749e4ab8fb74e43fc84724ef259589d75c121ff/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2749e4ab8fb74e43fc84724ef259589d75c121ff/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2749e4ab8fb74e43fc84724ef259589d75c121ff", "patch": "@@ -7534,6 +7534,7 @@ package body Exp_Ch3 is\n             elsif Comes_From_Source (N)\n               and then Is_Discrete_Type (Typ)\n               and then Expr_Known_Valid (Expr)\n+              and then Safe_To_Capture_Value (N, Def_Id)\n             then\n                Set_Is_Known_Valid (Def_Id);\n \n@@ -7564,7 +7565,9 @@ package body Exp_Ch3 is\n               and then not Is_Generic_Type (Etype (Def_Id))\n             then\n                Ensure_Valid (Expr);\n-               Set_Is_Known_Valid (Def_Id);\n+               if Safe_To_Capture_Value (N, Def_Id) then\n+                  Set_Is_Known_Valid (Def_Id);\n+               end if;\n             end if;\n          end if;\n "}]}