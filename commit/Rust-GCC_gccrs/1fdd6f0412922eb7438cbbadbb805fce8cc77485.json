{"sha": "1fdd6f0412922eb7438cbbadbb805fce8cc77485", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkZDZmMDQxMjkyMmViNzQzOGNiYmFkYmI4MDVmY2U4Y2M3NzQ4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-12T07:49:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-12T07:49:51Z"}, "message": "tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_ORDER.\n\n\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_ORDER.\n\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add\n\torder clause entries.\n\t(walk_tree_1): Handle OMP_CLAUSE_ORDER.\n\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses):\n\tLikewise.\n\t* omp-low.c (scan_sharing_clauses): Likewise.\n\t* tree-nested.c (convert_nonlocal_omp_clauses,\n\tconvert_local_omp_clauses): Likewise.\nc-family/\n\t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_ORDER.\n\t* c-omp.c (c_omp_split_clauses): Handle splitting of OMP_CLAUSE_ORDER.\nc/\n\t* c-parser.c (c_parser_omp_clause_name): Handle order clause.\n\t(c_parser_omp_clause_order): New function.\n\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ORDER.\n\t(OMP_SIMD_CLAUSE_MASK, OMP_FOR_CLAUSE_MASK): Add\n\tPRAGMA_OMP_CLAUSE_ORDER.\n\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_ORDER.\ncp/\n\t* parser.c (cp_parser_omp_clause_name): Handle order clause.\n\t(cp_parser_omp_clause_order): New function.\n\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ORDER.\n\t(OMP_SIMD_CLAUSE_MASK, OMP_FOR_CLAUSE_MASK): Add\n\tPRAGMA_OMP_CLAUSE_ORDER.\n\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_ORDER.\n\t* pt.c (tsubst_omp_clauses): Likewise.\ntestsuite/\n\t* c-c++-common/gomp/order-1.c: New test.\n\t* c-c++-common/gomp/order-2.c: New test.\n\nFrom-SVN: r273431", "tree": {"sha": "f268df4071188f1117530ba47efd9179378fd239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f268df4071188f1117530ba47efd9179378fd239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fdd6f0412922eb7438cbbadbb805fce8cc77485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdd6f0412922eb7438cbbadbb805fce8cc77485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fdd6f0412922eb7438cbbadbb805fce8cc77485", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdd6f0412922eb7438cbbadbb805fce8cc77485/comments", "author": null, "committer": null, "parents": [{"sha": "3362737705972ba59976909b9dbff31615a1021a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3362737705972ba59976909b9dbff31615a1021a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3362737705972ba59976909b9dbff31615a1021a"}], "stats": {"total": 349, "additions": 342, "deletions": 7}, "files": [{"sha": "34fb0da484617bad143bd7e8bc54c5e866c5a281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1,3 +1,16 @@\n+2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_ORDER.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add\n+\torder clause entries.\n+\t(walk_tree_1): Handle OMP_CLAUSE_ORDER.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses):\n+\tLikewise.\n+\t* omp-low.c (scan_sharing_clauses): Likewise.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Likewise.\n+\n 2019-07-12  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* gcc/cfgrtl.c (print_rtl_with_bb): Emit a hint if the"}, {"sha": "b84e1f5b9a0da69b7efeb165b675f1708a557000", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1,7 +1,12 @@\n+2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_ORDER.\n+\t* c-omp.c (c_omp_split_clauses): Handle splitting of OMP_CLAUSE_ORDER.\n+\n 2019-07-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/61339\n-\t* c-opts.c (handle_deferred_opts): : Change class-key of PODs to struct\n+\t* c-opts.c (handle_deferred_opts): Change class-key of PODs to struct\n \tand others to class.\n \t* c-pretty-print.h: Same.\n "}, {"sha": "fc08e939651c0d766f50cc9fd0eb7e542b1dc2dc", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1632,6 +1632,24 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t    }\n \t  s = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t  break;\n+\t/* order clauses are allowed on for and simd.  */\n+\tcase OMP_CLAUSE_ORDER:\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)) != 0)\n+\t    {\n+\t      if (code == OMP_SIMD)\n+\t\t{\n+\t\t  c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\t\t\tOMP_CLAUSE_ORDER);\n+\t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_FOR];\n+\t\t  cclauses[C_OMP_CLAUSE_SPLIT_FOR] = c;\n+\t\t  s = C_OMP_CLAUSE_SPLIT_SIMD;\n+\t\t}\n+\t      else\n+\t\ts = C_OMP_CLAUSE_SPLIT_FOR;\n+\t    }\n+\t  else\n+\t    s = C_OMP_CLAUSE_SPLIT_SIMD;\n+\t  break;\n \t/* Reduction is allowed on simd, for, parallel, sections, taskloop\n \t   and teams.  Duplicate it on all of them, but omit on for or\n \t   sections if parallel is present (unless inscan, in that case"}, {"sha": "4239adafce260134d225e9031e5017c21dba7d97", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -114,6 +114,7 @@ enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_NUM_TASKS,\n   PRAGMA_OMP_CLAUSE_NUM_TEAMS,\n   PRAGMA_OMP_CLAUSE_NUM_THREADS,\n+  PRAGMA_OMP_CLAUSE_ORDER,\n   PRAGMA_OMP_CLAUSE_ORDERED,\n   PRAGMA_OMP_CLAUSE_PARALLEL,\n   PRAGMA_OMP_CLAUSE_PRIORITY,"}, {"sha": "c58680c135b541c35ae39299b98c233fe004b117", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1,3 +1,12 @@\n+2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Handle order clause.\n+\t(c_parser_omp_clause_order): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ORDER.\n+\t(OMP_SIMD_CLAUSE_MASK, OMP_FOR_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_ORDER.\n+\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_ORDER.\n+\n 2019-07-10  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_postfix_expression): Support"}, {"sha": "1f83c247160a94d1dc41c67119cce0bc8ecbed37", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -11789,6 +11789,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \tcase 'o':\n \t  if (!strcmp (\"ordered\", p))\n \t    result = PRAGMA_OMP_CLAUSE_ORDERED;\n+\t  else if (!strcmp (\"order\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_ORDER;\n \t  break;\n \tcase 'p':\n \t  if (!strcmp (\"parallel\", p))\n@@ -13467,6 +13469,44 @@ c_parser_oacc_clause_wait (c_parser *parser, tree list)\n   return list;\n }\n \n+\n+/* OpenMP 5.0:\n+   order ( concurrent ) */\n+\n+static tree\n+c_parser_omp_clause_order (c_parser *parser, tree list)\n+{\n+  location_t loc = c_parser_peek_token (parser)->location;\n+  tree c;\n+  const char *p;\n+\n+  matching_parens parens;\n+  if (!parens.require_open (parser))\n+    return list;\n+  if (!c_parser_next_token_is (parser, CPP_NAME))\n+    {\n+      c_parser_error (parser, \"expected %<concurrent%>\");\n+      goto out_err;\n+    }\n+  p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n+  if (strcmp (p, \"concurrent\") != 0)\n+    {\n+      c_parser_error (parser, \"expected %<concurrent%>\");\n+      goto out_err;\n+    }\n+  c_parser_consume_token (parser);\n+  parens.skip_until_found_close (parser);\n+  /* check_no_duplicate_clause (list, OMP_CLAUSE_ORDER, \"order\"); */\n+  c = build_omp_clause (loc, OMP_CLAUSE_ORDER);\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+\n+ out_err:\n+  parens.skip_until_found_close (parser);\n+  return list;\n+}\n+\n+\n /* OpenMP 2.5:\n    ordered\n \n@@ -15092,6 +15132,10 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_num_threads (parser, clauses);\n \t  c_name = \"num_threads\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_ORDER:\n+\t  clauses = c_parser_omp_clause_order (parser, clauses);\n+\t  c_name = \"order\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_ORDERED:\n \t  clauses = c_parser_omp_clause_ordered (parser, clauses);\n \t  c_name = \"ordered\";\n@@ -17221,7 +17265,8 @@ omp_split_clauses (location_t loc, enum tree_code code,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_COLLAPSE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IF)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NONTEMPORAL))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NONTEMPORAL)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDER))\n \n static tree\n c_parser_omp_simd (location_t loc, c_parser *parser,\n@@ -17277,7 +17322,8 @@ c_parser_omp_simd (location_t loc, c_parser *parser,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDERED)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_COLLAPSE)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDER))\n \n static tree\n c_parser_omp_for (location_t loc, c_parser *parser,"}, {"sha": "e4ce03d9ff5fddce5d90af499c86224e618a69b5", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -13667,6 +13667,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   tree last_iterators = NULL_TREE;\n   bool last_iterators_remove = false;\n   tree *nogroup_seen = NULL;\n+  tree *order_clause = NULL;\n   /* 1 if normal/task reduction has been seen, -1 if inscan reduction\n      has been seen, -2 if mixed inscan/normal reduction diagnosed.  */\n   int reduction_seen = 0;\n@@ -14631,6 +14632,25 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n \n+\tcase OMP_CLAUSE_ORDER:\n+\t  if (ordered_clause)\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%<order%> clause must not be used together \"\n+\t\t\t\"with %<ordered%>\");\n+\t      remove = true;\n+\t      break;\n+\t    }\n+\t  else if (order_clause)\n+\t    {\n+\t      /* Silently remove duplicates.  */\n+\t      remove = true;\n+\t      break;\n+\t    }\n+\t  order_clause = pc;\n+\t  pc = &OMP_CLAUSE_CHAIN (c);\n+\t  continue;\n+\n \tcase OMP_CLAUSE_IF:\n \tcase OMP_CLAUSE_NUM_THREADS:\n \tcase OMP_CLAUSE_NUM_TEAMS:\n@@ -14683,6 +14703,14 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \n \tcase OMP_CLAUSE_ORDERED:\n \t  ordered_clause = c;\n+\t  if (order_clause)\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (*order_clause),\n+\t\t\t\"%<order%> clause must not be used together \"\n+\t\t\t\"with %<ordered%>\");\n+\t      *order_clause = OMP_CLAUSE_CHAIN (*order_clause);\n+\t      order_clause = NULL;\n+\t    }\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n "}, {"sha": "a18959d6388c6e6fd1f89663635003a2800b2111", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1,3 +1,13 @@\n+2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Handle order clause.\n+\t(cp_parser_omp_clause_order): New function.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ORDER.\n+\t(OMP_SIMD_CLAUSE_MASK, OMP_FOR_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_ORDER.\n+\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_ORDER.\n+\t* pt.c (tsubst_omp_clauses): Likewise.\n+\n 2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (get_type_quals,"}, {"sha": "c46740a2d104c7184233e6dd69460daad8c6845f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -32528,6 +32528,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \tcase 'o':\n \t  if (!strcmp (\"ordered\", p))\n \t    result = PRAGMA_OMP_CLAUSE_ORDERED;\n+\t  else if (!strcmp (\"order\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_ORDER;\n \t  break;\n \tcase 'p':\n \t  if (!strcmp (\"parallel\", p))\n@@ -33919,6 +33921,50 @@ cp_parser_omp_clause_defaultmap (cp_parser *parser, tree list,\n   return list;\n }\n \n+/* OpenMP 5.0:\n+   order ( concurrent ) */\n+\n+static tree\n+cp_parser_omp_clause_order (cp_parser *parser, tree list, location_t location)\n+{\n+  tree c, id;\n+  const char *p;\n+\n+  matching_parens parens;\n+  if (!parens.require_open (parser))\n+    return list;\n+\n+  if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+    {\n+      cp_parser_error (parser, \"expected %<concurrent%>\");\n+      goto out_err;\n+    }\n+  else\n+    {\n+      id = cp_lexer_peek_token (parser->lexer)->u.value;\n+      p = IDENTIFIER_POINTER (id);\n+    }\n+  if (strcmp (p, \"concurrent\") != 0)\n+    {\n+      cp_parser_error (parser, \"expected %<concurrent%>\");\n+      goto out_err;\n+    }\n+  cp_lexer_consume_token (parser->lexer);\n+  if (!parens.require_close (parser))\n+    goto out_err;\n+\n+  /* check_no_duplicate_clause (list, OMP_CLAUSE_ORDER, \"order\", location); */\n+  c = build_omp_clause (location, OMP_CLAUSE_ORDER);\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+\n+ out_err:\n+  cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n+\t\t\t\t\t /*or_comma=*/false,\n+\t\t\t\t\t /*consume_paren=*/true);\n+  return list;\n+}\n+\n /* OpenMP 2.5:\n    ordered\n \n@@ -35510,7 +35556,8 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  c_name = \"mergeable\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_NOWAIT:\n-\t  clauses = cp_parser_omp_clause_nowait (parser, clauses, token->location);\n+\t  clauses = cp_parser_omp_clause_nowait (parser, clauses,\n+\t\t\t\t\t\t token->location);\n \t  c_name = \"nowait\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_NUM_TASKS:\n@@ -35523,6 +35570,11 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\t      token->location);\n \t  c_name = \"num_threads\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_ORDER:\n+\t  clauses = cp_parser_omp_clause_order (parser, clauses,\n+\t\t\t\t\t\ttoken->location);\n+\t  c_name = \"order\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_ORDERED:\n \t  clauses = cp_parser_omp_clause_ordered (parser, clauses,\n \t\t\t\t\t\t  token->location);\n@@ -37560,7 +37612,8 @@ cp_omp_split_clauses (location_t loc, enum tree_code code,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_COLLAPSE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IF)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NONTEMPORAL))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NONTEMPORAL)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDER))\n \n static tree\n cp_parser_omp_simd (cp_parser *parser, cp_token *pragma_tok,\n@@ -37620,7 +37673,8 @@ cp_parser_omp_simd (cp_parser *parser, cp_token *pragma_tok,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDERED)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_COLLAPSE))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_COLLAPSE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ORDER))\n \n static tree\n cp_parser_omp_for (cp_parser *parser, cp_token *pragma_tok,"}, {"sha": "e23c0aaf325a53cb98c1b7b64bc7faec04e4da60", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -16422,6 +16422,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:"}, {"sha": "1a217051263c3a15b3ce8b97d9213c24fbd87745", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -6127,6 +6127,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bool branch_seen = false;\n   bool copyprivate_seen = false;\n   bool ordered_seen = false;\n+  bool order_seen = false;\n   bool schedule_seen = false;\n   bool oacc_async = false;\n   tree last_iterators = NULL_TREE;\n@@ -7600,6 +7601,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  ordered_seen = true;\n \t  break;\n \n+\tcase OMP_CLAUSE_ORDER:\n+\t  if (order_seen)\n+\t    remove = true;\n+\t  else\n+\t    order_seen = true;\n+\t  break;\n+\n \tcase OMP_CLAUSE_INBRANCH:\n \tcase OMP_CLAUSE_NOTINBRANCH:\n \t  if (branch_seen)\n@@ -7775,6 +7783,17 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t      \"%<reduction%> clause\", \"ordered\");\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n+\tcase OMP_CLAUSE_ORDER:\n+\t  if (ordered_seen)\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%<order%> clause must not be used together \"\n+\t\t\t\"with %<ordered%>\");\n+\t      *pc = OMP_CLAUSE_CHAIN (c);\n+\t      continue;\n+\t    }\n+\t  pc = &OMP_CLAUSE_CHAIN (c);\n+\t  continue;\n \tcase OMP_CLAUSE_NOWAIT:\n \t  if (copyprivate_seen)\n \t    {"}, {"sha": "ca7ad33f867d5ae81de8449e9809c1fc4154c48d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -9263,6 +9263,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_NOGROUP:\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n \t  break;\n@@ -10223,6 +10224,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_HINT:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_ASYNC:"}, {"sha": "052ffc9c3b9e2770955a008a6b1c971d17496443", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1402,6 +1402,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_NOGROUP:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_ASYNC:\n \tcase OMP_CLAUSE_WAIT:\n \tcase OMP_CLAUSE_GANG:\n@@ -1595,6 +1596,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_NOGROUP:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_NONTEMPORAL:\n \tcase OMP_CLAUSE_ASYNC:"}, {"sha": "ed3165ee4a5382786a64daf9b86c09a542e6b763", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1,3 +1,8 @@\n+2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/order-1.c: New test.\n+\t* c-c++-common/gomp/order-2.c: New test.\n+\n 2019-07-11  Sunil K Pandey  <sunil.k.pandey@intel.com>\n \n \tPR target/90980"}, {"sha": "da4b73d50869da89c3dc3630160c60c8aa76fb13", "filename": "gcc/testsuite/c-c++-common/gomp/order-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-1.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -0,0 +1,53 @@\n+void\n+f1 (int *a)\n+{\n+  int i;\n+  #pragma omp for order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp simd order ( concurrent )\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp for simd order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+}\n+\n+void\n+f2 (int *a)\n+{\n+  int i;\n+  #pragma omp parallel for order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp parallel for simd order (concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp teams distribute parallel for order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp teams distribute parallel for simd order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp teams\n+  {\n+    #pragma omp distribute parallel for order(concurrent)\n+    for (i = 0; i < 128; i++)\n+      a[i]++;\n+    #pragma omp distribute parallel for simd order(concurrent)\n+    for (i = 0; i < 128; i++)\n+      a[i]++;\n+  }\n+  #pragma omp taskloop simd order (concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+}\n+\n+void\n+f3 (int *a)\n+{\n+  int i;\n+  #pragma omp for order(concurrent) order(concurrent) order(concurrent)\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+}"}, {"sha": "1a9adb09dcb0f71258dcb5fff48531249b178ae5", "filename": "gcc/testsuite/c-c++-common/gomp/order-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Forder-2.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -0,0 +1,57 @@\n+void\n+f1 (int *a)\n+{\n+  int i;\n+  #pragma omp for order\t\t\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp for simd order :\t\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp simd order ( foobar )\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp for simd order( concurrent\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp for simd order( concurrent : foo )/* { dg-error \"expected\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+}\n+\n+void\n+f2 (int *a)\n+{\n+  int i;\n+  #pragma omp teams\n+  #pragma omp distribute order(concurrent)\t/* { dg-error \"'order' is not valid for '#pragma omp distribute'\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp taskloop order (concurrent)\t/* { dg-error \"'order' is not valid for '#pragma omp taskloop'\" } */\n+  for (i = 0; i < 128; i++)\n+    a[i]++;\n+  #pragma omp for order(concurrent) ordered\t/* { dg-error \"'order' clause must not be used together with 'ordered'\" } */\n+  for (i = 0; i < 128; i++)\n+    {\n+      #pragma omp ordered\n+      a[i]++;\n+    }\n+  #pragma omp for ordered order(concurrent)\t/* { dg-error \"'order' clause must not be used together with 'ordered'\" } */\n+  for (i = 0; i < 128; i++)\n+    {\n+      #pragma omp ordered\n+      a[i]++;\n+    }\n+  #pragma omp for ordered (1) order(concurrent)\t/* { dg-error \"'order' clause must not be used together with 'ordered'\" } */\n+  for (i = 0; i < 128; i++)\n+    {\n+      #pragma omp ordered depend (sink: i - 1)\n+      #pragma omp ordered depend (source)\n+    }\n+  #pragma omp for order(concurrent)ordered (1)\t/* { dg-error \"'order' clause must not be used together with 'ordered'\" } */\n+  for (i = 0; i < 128; i++)\n+    {\n+      #pragma omp ordered depend (sink: i - 1)\n+      #pragma omp ordered depend (source)\n+    }\n+}"}, {"sha": "8ac07e83b120a9e8d612312950e9b5b0af7e44cb", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -448,6 +448,9 @@ enum omp_clause_code {\n   /* OpenMP clause: defaultmap (tofrom: scalar).  */\n   OMP_CLAUSE_DEFAULTMAP,\n \n+  /* OpenMP clause: order (concurrent).  */\n+  OMP_CLAUSE_ORDER,\n+\n   /* Internally used only clause, holding SIMD uid.  */\n   OMP_CLAUSE__SIMDUID_,\n "}, {"sha": "1527456e0c572f59733205e97dcc325ba8d2a253", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1343,6 +1343,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_AUTO:\n@@ -2073,6 +2074,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_AUTO:"}, {"sha": "a75f97aa72190a07fdca33688af4483c8b815c1c", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -1040,6 +1040,10 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n       pp_right_paren (pp);\n       break;\n \n+    case OMP_CLAUSE_ORDER:\n+      pp_string (pp, \"order(concurrent)\");\n+      break;\n+\n     case OMP_CLAUSE__SIMDUID_:\n       pp_string (pp, \"_simduid_(\");\n       dump_generic_node (pp, OMP_CLAUSE__SIMDUID__DECL (clause),"}, {"sha": "751370b903c95cbe3ad4631da5989f51d3e52849", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdd6f0412922eb7438cbbadbb805fce8cc77485/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1fdd6f0412922eb7438cbbadbb805fce8cc77485", "patch": "@@ -342,7 +342,8 @@ unsigned const char omp_clause_num_ops[] =\n   0, /* OMP_CLAUSE_THREADS  */\n   0, /* OMP_CLAUSE_SIMD  */\n   1, /* OMP_CLAUSE_HINT  */\n-  0, /* OMP_CLAUSE_DEFALTMAP  */\n+  0, /* OMP_CLAUSE_DEFAULTMAP  */\n+  0, /* OMP_CLAUSE_ORDER  */\n   1, /* OMP_CLAUSE__SIMDUID_  */\n   0, /* OMP_CLAUSE__SIMT_  */\n   0, /* OMP_CLAUSE_INDEPENDENT  */\n@@ -424,6 +425,7 @@ const char * const omp_clause_code_name[] =\n   \"simd\",\n   \"hint\",\n   \"defaultmap\",\n+  \"order\",\n   \"_simduid_\",\n   \"_simt_\",\n   \"independent\",\n@@ -12340,6 +12342,7 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_TILE:"}]}