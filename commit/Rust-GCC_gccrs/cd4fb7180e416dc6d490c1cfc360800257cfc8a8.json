{"sha": "cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0ZmI3MTgwZTQxNmRjNmQ0OTBjMWNmYzM2MDgwMDI1N2NmYzhhOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-14T12:16:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-06T07:51:23Z"}, "message": "[Ada] Implement tiered support for floating-point exponentiation\n\ngcc/ada/\n\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-exponr, s-exnflt\n\tand s-exnlfl.\n\t* exp_ch4.adb (Expand_N_Op_Expon): Use RE_Exn_Float for Short_Float.\n\t* rtsfind.ads (RTU_Id): Add System_Exn_Flt and System_Exn_LFlt.\n\t(RE_Id): Adjust entries for RE_Exn_Float and RE_Exn_Long_Float.\n\t(RE_Unit_Table): Likewise.\n\t* libgnat/s-exnflt.ads: New file.\n\t* libgnat/s-exnlfl.ads: Likewise.\n\t* libgnat/s-exnllf.ads: Change to mere instantiation.\n\t* libgnat/s-exnllf.adb: Move implementation to...\n\t* libgnat/s-exponr.ads: New generic unit.\n\t* libgnat/s-exponr.adb: ...here and also make it generic.\n\t(Expon): Do the computation in double precision internally.", "tree": {"sha": "56695dde2490f9a76384a7878c86493305e7a02e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56695dde2490f9a76384a7878c86493305e7a02e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed6d583e391b1921506a2c8f50bdcd6d887aa04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed6d583e391b1921506a2c8f50bdcd6d887aa04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed6d583e391b1921506a2c8f50bdcd6d887aa04"}], "stats": {"total": 440, "additions": 267, "deletions": 173}, "files": [{"sha": "7f075c7f9865c64852809e7b1252cefd72444aca", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -583,13 +583,16 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-exctab$(objext) \\\n   s-exctra$(objext) \\\n   s-exnint$(objext) \\\n+  s-exnflt$(objext) \\\n+  s-exnlfl$(objext) \\\n   s-exnllf$(objext) \\\n   s-exnlli$(objext) \\\n   s-expint$(objext) \\\n   s-explli$(objext) \\\n   s-expllu$(objext) \\\n   s-expmod$(objext) \\\n   s-exponn$(objext) \\\n+  s-exponr$(objext) \\\n   s-expont$(objext) \\\n   s-exponu$(objext) \\\n   s-expuns$(objext) \\"}, {"sha": "c88f7911cf8182b8c9c1d7074a3d9de084cf7901", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -9081,15 +9081,12 @@ package body Exp_Ch4 is\n       --  overflow), and if there is an infinity generated and a range check\n       --  is required, the check will fail anyway.\n \n-      --  Historical note: we used to convert everything to Long_Long_Float\n-      --  and call a single common routine, but this had the undesirable effect\n-      --  of giving different results for small static exponent values and the\n-      --  same dynamic values.\n-\n       else\n          pragma Assert (Is_Floating_Point_Type (Rtyp));\n \n-         if Rtyp = Standard_Float then\n+         --  Short_Float and Float are the same type for GNAT\n+\n+         if Rtyp = Standard_Short_Float or else Rtyp = Standard_Float then\n             Etyp := Standard_Float;\n             Rent := RE_Exn_Float;\n "}, {"sha": "13079fc8cc600057c27170f85335dc802d87db3f", "filename": "gcc/ada/libgnat/s-exnflt.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exnflt.ads?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ F L T                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2021, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Float exponentiation (checks off)\n+\n+with System.Exponr;\n+\n+package System.Exn_Flt is\n+\n+   function Exn_Float is new Exponr (Float);\n+   pragma Pure_Function (Exn_Float);\n+\n+end System.Exn_Flt;"}, {"sha": "58d4a4c31dfa8a925bf168ebb0cb98de43e82c9c", "filename": "gcc/ada/libgnat/s-exnlfl.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnlfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnlfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exnlfl.ads?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . E X N _ L F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2021, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Float exponentiation (checks off)\n+\n+with System.Exponr;\n+\n+package System.Exn_LFlt is\n+\n+   function Exn_Long_Float is new Exponr (Long_Float);\n+   pragma Pure_Function (Exn_Long_Float);\n+\n+end System.Exn_LFlt;"}, {"sha": "2186c6d58b0f8960f9470dd5d4318ecc5a5f86e7", "filename": "gcc/ada/libgnat/s-exnllf.adb", "status": "modified", "additions": 4, "deletions": 150, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnllf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnllf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exnllf.adb?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -29,154 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note: the reason for treating exponents in the range 0 .. 4 specially is\n---  to ensure identical results to the static inline expansion in the case of\n---  a compile time known exponent in this range. The use of Float'Machine and\n---  Long_Float'Machine is to avoid unwanted extra precision in the results.\n+--  This package does not require a body, since it is an instantiation. We\n+--  provide a dummy file containing a No_Body pragma so that previous versions\n+--  of the body (which did exist) will not interfere.\n \n---  Note that for a negative exponent in Left ** Right, we compute the result\n---  as:\n-\n---     1.0 / (Left ** (-Right))\n-\n---  Note that the case of Left being zero is not special, it will simply result\n---  in a division by zero at the end, yielding a correctly signed infinity, or\n---  possibly generating an overflow.\n-\n---  Note on overflow: This coding assumes that the target generates infinities\n---  with standard IEEE semantics. If this is not the case, then the code\n---  for negative exponent may raise Constraint_Error. This follows the\n---  implementation permission given in RM 4.5.6(12).\n-\n-package body System.Exn_LLF is\n-\n-   subtype Negative is Integer range Integer'First .. -1;\n-\n-   function Exp\n-     (Left  : Long_Long_Float;\n-      Right : Natural) return Long_Long_Float;\n-   --  Common routine used if Right is greater or equal to 5\n-\n-   ---------------\n-   -- Exn_Float --\n-   ---------------\n-\n-   function Exn_Float\n-     (Left  : Float;\n-      Right : Integer) return Float\n-   is\n-      Temp : Float;\n-   begin\n-      case Right is\n-         when 0 =>\n-            return 1.0;\n-         when 1 =>\n-            return Left;\n-         when 2 =>\n-            return Float'Machine (Left * Left);\n-         when 3 =>\n-            return Float'Machine (Left * Left * Left);\n-         when 4 =>\n-            Temp := Float'Machine (Left * Left);\n-            return Float'Machine (Temp * Temp);\n-         when Negative =>\n-            return Float'Machine (1.0 / Exn_Float (Left, -Right));\n-         when others =>\n-            return\n-              Float'Machine\n-                (Float (Exp (Long_Long_Float (Left), Right)));\n-      end case;\n-   end Exn_Float;\n-\n-   --------------------\n-   -- Exn_Long_Float --\n-   --------------------\n-\n-   function Exn_Long_Float\n-     (Left  : Long_Float;\n-      Right : Integer) return Long_Float\n-   is\n-      Temp : Long_Float;\n-   begin\n-      case Right is\n-         when 0 =>\n-            return 1.0;\n-         when 1 =>\n-            return Left;\n-         when 2 =>\n-            return Long_Float'Machine (Left * Left);\n-         when 3 =>\n-            return Long_Float'Machine (Left * Left * Left);\n-         when 4 =>\n-            Temp := Long_Float'Machine (Left * Left);\n-            return Long_Float'Machine (Temp * Temp);\n-         when Negative =>\n-            return Long_Float'Machine (1.0 / Exn_Long_Float (Left, -Right));\n-         when others =>\n-            return\n-              Long_Float'Machine\n-                (Long_Float (Exp (Long_Long_Float (Left), Right)));\n-      end case;\n-   end Exn_Long_Float;\n-\n-   -------------------------\n-   -- Exn_Long_Long_Float --\n-   -------------------------\n-\n-   function Exn_Long_Long_Float\n-     (Left  : Long_Long_Float;\n-      Right : Integer) return Long_Long_Float\n-   is\n-      Temp : Long_Long_Float;\n-   begin\n-      case Right is\n-         when 0 =>\n-            return 1.0;\n-         when 1 =>\n-            return Left;\n-         when 2 =>\n-            return Left * Left;\n-         when 3 =>\n-            return Left * Left * Left;\n-         when 4 =>\n-            Temp := Left * Left;\n-            return Temp * Temp;\n-         when Negative =>\n-            return 1.0 / Exn_Long_Long_Float (Left, -Right);\n-         when others =>\n-            return Exp (Left, Right);\n-      end case;\n-   end Exn_Long_Long_Float;\n-\n-   ---------\n-   -- Exp --\n-   ---------\n-\n-   function Exp\n-     (Left  : Long_Long_Float;\n-      Right : Natural) return Long_Long_Float\n-   is\n-      Result : Long_Long_Float := 1.0;\n-      Factor : Long_Long_Float := Left;\n-      Exp    : Natural := Right;\n-\n-   begin\n-      --  We use the standard logarithmic approach, Exp gets shifted right\n-      --  testing successive low order bits and Factor is the value of the\n-      --  base raised to the next power of 2. If the low order bit or Exp is\n-      --  set, multiply the result by this factor.\n-\n-      loop\n-         if Exp rem 2 /= 0 then\n-            Result := Result * Factor;\n-         end if;\n-\n-         Exp := Exp / 2;\n-         exit when Exp = 0;\n-         Factor := Factor * Factor;\n-      end loop;\n-\n-      return Result;\n-   end Exp;\n-\n-end System.Exn_LLF;\n+pragma No_Body;"}, {"sha": "2b02a65f21c9e3dceef0134968757b8dd1c93955", "filename": "gcc/ada/libgnat/s-exnllf.ads", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exnllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exnllf.ads?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -29,21 +29,13 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  [Long_[Long_]]Float exponentiation (checks off)\n+--  Long_Long_Float exponentiation (checks off)\n \n-package System.Exn_LLF is\n-   pragma Pure;\n-\n-   function Exn_Float\n-     (Left  : Float;\n-      Right : Integer) return Float;\n+with System.Exponr;\n \n-   function Exn_Long_Float\n-     (Left  : Long_Float;\n-      Right : Integer) return Long_Float;\n+package System.Exn_LLF is\n \n-   function Exn_Long_Long_Float\n-     (Left  : Long_Long_Float;\n-      Right : Integer) return Long_Long_Float;\n+   function Exn_Long_Long_Float is new Exponr (Long_Long_Float);\n+   pragma Pure_Function (Exn_Long_Long_Float);\n \n end System.Exn_LLF;"}, {"sha": "ece53b51a39a224ecbdf10078184745b23a0d456", "filename": "gcc/ada/libgnat/s-exponr.adb", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exponr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exponr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponr.adb?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -0,0 +1,122 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                        S Y S T E M . E X P O N R                         --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2021, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Note that the reason for treating exponents in the range 0 .. 4 specially\n+--  is to ensure identical results with the static expansion in the case of a\n+--  compile-time known exponent in this range; similarly, the use 'Machine is\n+--  to avoid unwanted extra precision in the results.\n+\n+--  For a negative exponent, we compute the result as per RM 4.5.6(11/3):\n+\n+--     Left ** Right = 1.0 / (Left ** (-Right))\n+\n+--  Note that the case of Left being zero is not special, it will simply result\n+--  in a division by zero at the end, yielding a correctly signed infinity, or\n+--  possibly raising an overflow exception.\n+\n+--  Note on overflow: this coding assumes that the target generates infinities\n+--  with standard IEEE semantics. If this is not the case, then the code for\n+--  negative exponents may raise Constraint_Error, which is in keeping with the\n+--  implementation permission given in RM 4.5.6(12).\n+\n+with System.Double_Real;\n+\n+function System.Exponr (Left : Num; Right : Integer) return Num is\n+\n+   package Double_Real is new System.Double_Real (Num);\n+   use type Double_Real.Double_T;\n+\n+   subtype Double_T is Double_Real.Double_T;\n+   --  The double floating-point type\n+\n+   subtype Negative is Integer range Integer'First .. -1;\n+   --  The range of negative exponents\n+\n+   function Expon (Left : Num; Right : Natural) return Num;\n+   --  Routine used if Right is greater than 4\n+\n+   -----------\n+   -- Expon --\n+   -----------\n+\n+   function Expon (Left : Num; Right : Natural) return Num is\n+      Result : Double_T := Double_Real.To_Double (1.0);\n+      Factor : Double_T := Double_Real.To_Double (Left);\n+      Exp    : Natural  := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2. If the low order bit or Exp\n+      --  is set, multiply the result by this factor.\n+\n+      loop\n+         if Exp rem 2 /= 0 then\n+            Result := Result * Factor;\n+            exit when Exp = 1;\n+         end if;\n+\n+         Exp := Exp / 2;\n+         Factor := Double_Real.Sqr (Factor);\n+      end loop;\n+\n+      return Double_Real.To_Single (Result);\n+   end Expon;\n+\n+begin\n+   case Right is\n+      when 0 =>\n+         return 1.0;\n+\n+      when 1 =>\n+         return Left;\n+\n+      when 2 =>\n+         return Num'Machine (Left * Left);\n+\n+      when 3 =>\n+         return Num'Machine (Left * Left * Left);\n+\n+      when 4 =>\n+         declare\n+            Sqr : constant Num := Num'Machine (Left * Left);\n+\n+         begin\n+            return Num'Machine (Sqr * Sqr);\n+         end;\n+\n+      when Negative =>\n+         return Num'Machine (1.0 / Exponr (Left, -Right));\n+\n+      when others =>\n+         return Num'Machine (Expon (Left, Right));\n+   end case;\n+end System.Exponr;"}, {"sha": "e5bdec797416332c34c4b0199223229d6db89a67", "filename": "gcc/ada/libgnat/s-exponr.ads", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exponr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Flibgnat%2Fs-exponr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponr.ads?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -0,0 +1,38 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                        S Y S T E M . E X P O N R                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2021, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Real exponentiation (checks off)\n+\n+generic\n+\n+   type Num is digits <>;\n+\n+function System.Exponr (Left : Num; Right : Integer) return Num;"}, {"sha": "39e4fb289531624eca47b60e4792f45e783e0335", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4fb7180e416dc6d490c1cfc360800257cfc8a8/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=cd4fb7180e416dc6d490c1cfc360800257cfc8a8", "patch": "@@ -228,6 +228,8 @@ package Rtsfind is\n       System_Exception_Table,\n       System_Exceptions_Debug,\n       System_Exn_Int,\n+      System_Exn_Flt,\n+      System_Exn_LFlt,\n       System_Exn_LLF,\n       System_Exn_LLI,\n       System_Exn_LLLI,\n@@ -906,8 +908,10 @@ package Rtsfind is\n \n      RE_Exn_Integer,                     -- System.Exn_Int\n \n-     RE_Exn_Float,                       -- System.Exn_LLF\n-     RE_Exn_Long_Float,                  -- System.Exn_LLF\n+     RE_Exn_Float,                       -- System.Exn_Flt\n+\n+     RE_Exn_Long_Float,                  -- System.Exn_LFlt\n+\n      RE_Exn_Long_Long_Float,             -- System.Exn_LLF\n \n      RE_Exn_Long_Long_Integer,           -- System.Exn_LLI\n@@ -2592,8 +2596,10 @@ package Rtsfind is\n \n      RE_Exn_Integer                      => System_Exn_Int,\n \n-     RE_Exn_Float                        => System_Exn_LLF,\n-     RE_Exn_Long_Float                   => System_Exn_LLF,\n+     RE_Exn_Float                        => System_Exn_Flt,\n+\n+     RE_Exn_Long_Float                   => System_Exn_LFlt,\n+\n      RE_Exn_Long_Long_Float              => System_Exn_LLF,\n \n      RE_Exn_Long_Long_Integer            => System_Exn_LLI,"}]}