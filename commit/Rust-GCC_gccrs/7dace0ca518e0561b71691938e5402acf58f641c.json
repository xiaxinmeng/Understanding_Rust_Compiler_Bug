{"sha": "7dace0ca518e0561b71691938e5402acf58f641c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhY2UwY2E1MThlMDU2MWI3MTY5MTkzOGU1NDAyYWNmNThmNjQxYw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-06-15T03:53:52Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-06-15T03:53:52Z"}, "message": "java-interp.h (_Jv_LocalVarTableEntry): Add union for bytecode_pc and direct-threaded pc.\n\n        * include/java-interp.h (_Jv_LocalVarTableEntry): Add union\n        for bytecode_pc and direct-threaded pc.\n        Add field descriptions inline.\n        * defineclass.cc (read_one_code_attribute): Change from\n        bytecode_start_pc to bytecode_pc.\n        Remove unused variable \"len\".\n        * interpret.cc (compile): Remap the variable table, too.\n        (get_local_var_table) [DIRECT_THREADED]: Use insn_index on the\n        start location to map from pc_t to code index.\n\nFrom-SVN: r125734", "tree": {"sha": "16c0ed1aafda743e1a3cf2417a076930ebfb39d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16c0ed1aafda743e1a3cf2417a076930ebfb39d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dace0ca518e0561b71691938e5402acf58f641c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dace0ca518e0561b71691938e5402acf58f641c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dace0ca518e0561b71691938e5402acf58f641c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dace0ca518e0561b71691938e5402acf58f641c/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e89993b3f2085c19cda293fc0476ba2c7da3107d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89993b3f2085c19cda293fc0476ba2c7da3107d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89993b3f2085c19cda293fc0476ba2c7da3107d"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "2be24b96b8ad6de67e4bfffd8de36c78b908fd98", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7dace0ca518e0561b71691938e5402acf58f641c", "patch": "@@ -1,3 +1,15 @@\n+2007-06-14  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-interp.h (_Jv_LocalVarTableEntry): Add union\n+\tfor bytecode_pc and direct-threaded pc.\n+\tAdd field descriptions inline.\n+\t* defineclass.cc (read_one_code_attribute): Change from\n+\tbytecode_start_pc to bytecode_pc.\n+\tRemove unused variable \"len\".\n+\t* interpret.cc (compile): Remap the variable table, too.\n+\t(get_local_var_table) [DIRECT_THREADED]: Use insn_index on the\n+\tstart location to map from pc_t to code index.\n+\n 2007-06-09  Keith Seitz  <keiths@redhat.com>\n \n \t* testsuite/libjava.jvmti/dummyagent.c (Agent_OnLoad):"}, {"sha": "2024fb6440dd8ba88fd1b2b6eeaff2d0e85d6749", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=7dace0ca518e0561b71691938e5402acf58f641c", "patch": "@@ -1009,11 +1009,10 @@ void _Jv_ClassReader::read_one_code_attribute (int method_index)\n                                \n       for (int i = 0; i < table_len; i++)\n         {\n-          table[i].bytecode_start_pc = read2u ();\n+          table[i].bytecode_pc = read2u ();\n           table[i].length = read2u ();\n-          int len;\n-          len = pool_Utf8_to_char_arr (read2u (), &table[i].name);\n-          len = pool_Utf8_to_char_arr (read2u (), &table[i].descriptor);\n+          pool_Utf8_to_char_arr (read2u (), &table[i].name);\n+          pool_Utf8_to_char_arr (read2u (), &table[i].descriptor);\n           table[i].slot = read2u ();\n           \n           if (table[i].slot > method->max_locals || table[i].slot < 0)"}, {"sha": "f0b77f97b35f02de279a8713c4c9561f8b76adee", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=7dace0ca518e0561b71691938e5402acf58f641c", "patch": "@@ -138,17 +138,27 @@ struct  _Jv_LineTableEntry\n };\n \n // This structure holds local variable information.\n-// The pc value is the first pc where the variable must have a value and it\n-// must continue to have a value until (start_pc + length).\n-// The name is the variable name, and the descriptor contains type information.\n-// The slot is the index in the local variable array of this method, long and\n-// double occupy slot and slot+1.\n+// Like _Jv_LineTableEntry above, it is remapped when the method is\n+// compiled for direct threading.\n struct _Jv_LocalVarTableEntry\n {\n-  int bytecode_start_pc;\n+  // First PC value at which variable is live\n+  union\n+  {\n+    pc_t pc;\n+    int bytecode_pc;\n+  };\n+\n+  // length of visibility of variable\n   int length;\n+\n+  // variable name\n   char *name;\n+\n+  // type description\n   char *descriptor;\n+\n+  // stack slot number (long and double occupy slot and slot + 1)\n   int slot;\n };\n "}, {"sha": "01a9c383fcd35b6be4d7130852ae77a33386a71e", "filename": "libjava/interpret.cc", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dace0ca518e0561b71691938e5402acf58f641c/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=7dace0ca518e0561b71691938e5402acf58f641c", "patch": "@@ -947,6 +947,25 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n \n   prepared = insns;\n \n+  // Now remap the variable table for this method.\n+  for (int i = 0; i < local_var_table_len; ++i)\n+    {\n+      int start_byte = local_var_table[i].bytecode_pc;\n+      if (start_byte < 0 || start_byte >= code_length)\n+\tstart_byte = 0;\n+      jlocation start =  pc_mapping[start_byte];\n+\n+      int end_byte = start_byte + local_var_table[i].length;\n+      if (end_byte < 0)\n+\tend_byte = 0;\n+      jlocation end = ((end_byte >= code_length)\n+\t\t       ? number_insn_slots\n+\t\t       : pc_mapping[end_byte]);\n+\n+      local_var_table[i].pc = &insns[start];\n+      local_var_table[i].length = end - start + 1;\n+    }\n+  \n   if (breakpoint_insn == NULL)\n     {\n       bp_insn_slot.insn = const_cast<void *> (insn_targets[op_breakpoint]);\n@@ -1526,12 +1545,15 @@ _Jv_InterpMethod::get_local_var_table (char **name, char **sig,\n       *sig = local_var_table[table_slot].descriptor;\n       *generic_sig = local_var_table[table_slot].descriptor;\n \n-      *startloc = static_cast<jlong> \n-                    (local_var_table[table_slot].bytecode_start_pc);\n+#ifdef DIRECT_THREADED\n+      *startloc = insn_index (local_var_table[table_slot].pc);\n+#else\n+      *startloc = static_cast<jlong> (local_var_table[table_slot].bytecode_pc);\n+#endif\n       *length = static_cast<jint> (local_var_table[table_slot].length);\n       *slot = static_cast<jint> (local_var_table[table_slot].slot);\n     }\n-  return local_var_table_len - table_slot -1;\n+  return local_var_table_len - table_slot - 1;\n }\n \n pc_t"}]}