{"sha": "5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0OWYxNmI4MDkwZmFhZjUzNDY5YzUxYmRhZGI4Y2E1YzBlMTE1ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-04-26T23:58:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-04-26T23:58:04Z"}, "message": "re PR c/20740 (cc1 segfaults)\n\n\tPR c/20740\n\t* c-format.c (init_dynamic_asm_fprintf_info): Give errors, not\n\tassertion failures, if __gcc_host_wide_int__ is not properly\n\tdefined.\n\t(init_dynamic_diag_info): Give errors, not assertion failures, if\n\tlocation_t, tree or __gcc_host_wide_int__ are not properly\n\tdefined.\n\ntestsuite:\n\t* gcc.dg/format/asm_fprintf-2.c, gcc.dg/format/asm_fprintf-3.c,\n\tgcc.dg/format/asm_fprintf-4.c, gcc.dg/format/asm_fprintf-5.c,\n\tgcc.dg/format/gcc_diag-2.c, gcc.dg/format/gcc_diag-3.c,\n\tgcc.dg/format/gcc_diag-4.c, gcc.dg/format/gcc_diag-5.c,\n\tgcc.dg/format/gcc_diag-6.c, gcc.dg/format/gcc_diag-7.c ,\n\tgcc.dg/format/gcc_diag-8.c, gcc.dg/format/gcc_diag-9.c: New tests.\n\nFrom-SVN: r98800", "tree": {"sha": "b6cc6b305db8b4514a4e4e05aef654458f32633d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6cc6b305db8b4514a4e4e05aef654458f32633d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b0ec99aaca0c0a3e90593ff166eb474947241c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0ec99aaca0c0a3e90593ff166eb474947241c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0ec99aaca0c0a3e90593ff166eb474947241c0"}], "stats": {"total": 216, "additions": 211, "deletions": 5}, "files": [{"sha": "89af6e5f12382599f9947a5b9e11438580907429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -1,3 +1,13 @@\n+2005-04-27  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/20740\n+\t* c-format.c (init_dynamic_asm_fprintf_info): Give errors, not\n+\tassertion failures, if __gcc_host_wide_int__ is not properly\n+\tdefined.\n+\t(init_dynamic_diag_info): Give errors, not assertion failures, if\n+\tlocation_t, tree or __gcc_host_wide_int__ are not properly\n+\tdefined.\n+\n 2005-04-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-loop-ivopts.c (ivopts_data, decl_rtl_to_reset,"}, {"sha": "dd570ab23dc178929aa1525075b09a759471beaf", "filename": "gcc/c-format.c", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -2284,9 +2284,25 @@ init_dynamic_asm_fprintf_info (void)\n \t HOST_WIDE_INT __gcc_host_wide_int__;\" in one's source code\n \t prior to using that modifier.  */\n       hwi = maybe_get_identifier (\"__gcc_host_wide_int__\");\n+      if (!hwi)\n+\t{\n+\t  error (\"%<__gcc_host_wide_int__%> is not defined as a type\");\n+\t  return;\n+\t}\n+      hwi = identifier_global_value (hwi);\n+      if (!hwi || TREE_CODE (hwi) != TYPE_DECL)\n+\t{\n+\t  error (\"%<__gcc_host_wide_int__%> is not defined as a type\");\n+\t  return;\n+\t}\n+      hwi = DECL_ORIGINAL_TYPE (hwi);\n       gcc_assert (hwi);\n-      hwi = DECL_ORIGINAL_TYPE (identifier_global_value (hwi));\n-      gcc_assert (hwi);\n+      if (hwi != long_integer_type_node && hwi != long_long_integer_type_node)\n+\t{\n+\t  error (\"%<__gcc_host_wide_int__%> is not defined as %<long%>\"\n+\t\t \" or %<long long%>\");\n+\t  return;\n+\t}\n \n       /* Create a new (writable) copy of asm_fprintf_length_specs.  */\n       new_asm_fprintf_length_specs = (format_length_info *)\n@@ -2330,19 +2346,70 @@ init_dynamic_diag_info (void)\n \t However we don't force a hard ICE because we may see only one\n \t or the other type.  */\n       if ((loc = maybe_get_identifier (\"location_t\")))\n-\tloc = TREE_TYPE (identifier_global_value (loc));\n+\t{\n+\t  loc = identifier_global_value (loc);\n+\t  if (loc)\n+\t    {\n+\t      if (TREE_CODE (loc) != TYPE_DECL)\n+\t\t{\n+\t\t  error (\"%<location_t%> is not defined as a type\");\n+\t\t  loc = 0;\n+\t\t}\n+\t      else\n+\t\tloc = TREE_TYPE (loc);\n+\t    }\n+\t}\n \n       /* We need to grab the underlying 'union tree_node' so peek into\n \t an extra type level.  */\n       if ((t = maybe_get_identifier (\"tree\")))\n-\tt = TREE_TYPE (TREE_TYPE (identifier_global_value (t)));\n+\t{\n+\t  t = identifier_global_value (t);\n+\t  if (t)\n+\t    {\n+\t      if (TREE_CODE (t) != TYPE_DECL)\n+\t\t{\n+\t\t  error (\"%<tree%> is not defined as a type\");\n+\t\t  t = 0;\n+\t\t}\n+\t      else if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n+\t\t{\n+\t\t  error (\"%<tree%> is not defined as a pointer type\");\n+\t\t  t = 0;\n+\t\t}\n+\t      else\n+\t\tt = TREE_TYPE (TREE_TYPE (t));\n+\t    }\n+\t}\n     \n       /* Find the underlying type for HOST_WIDE_INT.  For the %w\n \t length modifier to work, one must have issued: \"typedef\n \t HOST_WIDE_INT __gcc_host_wide_int__;\" in one's source code\n \t prior to using that modifier.  */\n       if ((hwi = maybe_get_identifier (\"__gcc_host_wide_int__\")))\n-\thwi = DECL_ORIGINAL_TYPE (identifier_global_value (hwi));\n+\t{\n+\t  hwi = identifier_global_value (hwi);\n+\t  if (hwi)\n+\t    {\n+\t      if (TREE_CODE (hwi) != TYPE_DECL)\n+\t\t{\n+\t\t  error (\"%<__gcc_host_wide_int__%> is not defined as a type\");\n+\t\t  hwi = 0;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  hwi = DECL_ORIGINAL_TYPE (hwi);\n+\t\t  gcc_assert (hwi);\n+\t\t  if (hwi != long_integer_type_node\n+\t\t      && hwi != long_long_integer_type_node)\n+\t\t    {\n+\t\t      error (\"%<__gcc_host_wide_int__%> is not defined\"\n+\t\t\t     \" as %<long%> or %<long long%>\");\n+\t\t      hwi = 0;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n       \n       /* Assign the new data for use.  */\n "}, {"sha": "0f6ab3d57ceb1b9b3c40df4d0c9dd2c39b0fc4d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -1,3 +1,13 @@\n+2005-04-27  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/20740\n+\t* gcc.dg/format/asm_fprintf-2.c, gcc.dg/format/asm_fprintf-3.c,\n+\tgcc.dg/format/asm_fprintf-4.c, gcc.dg/format/asm_fprintf-5.c,\n+\tgcc.dg/format/gcc_diag-2.c, gcc.dg/format/gcc_diag-3.c,\n+\tgcc.dg/format/gcc_diag-4.c, gcc.dg/format/gcc_diag-5.c,\n+\tgcc.dg/format/gcc_diag-6.c, gcc.dg/format/gcc_diag-7.c ,\n+\tgcc.dg/format/gcc_diag-8.c, gcc.dg/format/gcc_diag-9.c: New tests.\n+\n 2005-04-26  Jeff Law  <law@redhat.com>\n \n \t* gcc.gc/tree-ssa/ssa-dce-1.c: New test."}, {"sha": "847eeee282f5c9c0b12c91368d176dc95c4193ca", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,9 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", not used at all, asm_fprintf format.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "f5fd5c022fc33cb26434a63e8d399523c15a1641", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", not defined, asm_fprintf format.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void foo (int __gcc_host_wide_int__);\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "9de05134af3da9b4beb9bb8dcef3c42e0de12e73", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", not a type, asm_fprintf.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int __gcc_host_wide_int__;\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "14ffb60d32e73d96c616018afc1127914aebe19a", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", bad type, asm_fprintf format.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+typedef int __gcc_host_wide_int__;\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */"}, {"sha": "60c6835da9e5f9a5ebf6aee2ddd0184e71954e27", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-2.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test \"tree\", not\n+   defined.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void foo (int tree);\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2)));"}, {"sha": "1a7848ed9f25028654f0b83e703dfeb11f8287e6", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test \"tree\", not\n+   a type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int tree;\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'tree' is not defined as a type\" } */"}, {"sha": "20661c41f71af7e12ef255faa247aded94107417", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test \"tree\", not\n+   a pointer type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+typedef int tree;\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'tree' is not defined as a pointer type\" } */"}, {"sha": "f8f12d68cdd03c874d0b477deacbad6592e79c09", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-5.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"location_t\", not defined.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void foo (int location_t);\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2)));"}, {"sha": "fdb493d4973c3864e0b79035135d783dcd6433ff", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"location_t\", not a type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int location_t;\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'location_t' is not defined as a type\" } */"}, {"sha": "fccf5d240412240c562d3ad809eebd6f54a64dc2", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-7.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", not defined.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void foo (int __gcc_host_wide_int__);\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2)));"}, {"sha": "835ec3f98d34df1cec6c279433c6f52e314469ad", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", not a type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int __gcc_host_wide_int__;\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "6481c26caf777eb6b75ad01e27865cde9c45f363", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e49f16b8090faaf53469c51bdadb8ca5c0e115e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c?ref=5e49f16b8090faaf53469c51bdadb8ca5c0e115e", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE handling internal formats: bug 20740.  The code did\n+   not check that, if the required typedef names had been used as\n+   identifiers, they were defined to suitable types.  Test\n+   \"__gcc_host_wide_int__\", bad type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+typedef int __gcc_host_wide_int__;\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */"}]}