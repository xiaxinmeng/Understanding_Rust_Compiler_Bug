{"sha": "6f7b8b706765f7277f9f99e947eeb114eb203b50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3YjhiNzA2NzY1ZjcyNzdmOWY5OWU5NDdlZWIxMTRlYjIwM2I1MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2009-07-31T21:56:28Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-07-31T21:56:28Z"}, "message": "re PR tree-optimization/40914 (ipa_analyze_call_uses fails to handle ptrmemfunc_vbit_in_delta)\n\n\tPR tree-optimization/40914\n\t* ipa-prop.c (ipa_get_ptr_load_param): New argument use_delta,\n\tif set, then check the delta field of the PMF record.\n\t(ipa_get_stmt_member_ptr_load_param): Propagate new param use_delta.\n\t(ipa_analyze_call_uses): Handle machines where the vbit for a PMF\n\tcall is stored in the delta.\n\nFrom-SVN: r150319", "tree": {"sha": "68f566bfb773dc970b4f8ea9e3051157d5ecacbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f566bfb773dc970b4f8ea9e3051157d5ecacbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7b8b706765f7277f9f99e947eeb114eb203b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7b8b706765f7277f9f99e947eeb114eb203b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7b8b706765f7277f9f99e947eeb114eb203b50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7b8b706765f7277f9f99e947eeb114eb203b50/comments", "author": null, "committer": null, "parents": [{"sha": "1732047792af977668ac7c1d93571b489e767c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1732047792af977668ac7c1d93571b489e767c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1732047792af977668ac7c1d93571b489e767c60"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "411ccdd5bdac05105cf2f02f3eccc17718acb693", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7b8b706765f7277f9f99e947eeb114eb203b50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7b8b706765f7277f9f99e947eeb114eb203b50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f7b8b706765f7277f9f99e947eeb114eb203b50", "patch": "@@ -1,3 +1,12 @@\n+2009-07-31  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR tree-optimization/40914\n+\t* ipa-prop.c (ipa_get_ptr_load_param): New argument use_delta,\n+\tif set, then check the delta field of the PMF record.\n+\t(ipa_get_stmt_member_ptr_load_param): Propagate new param use_delta.\n+\t(ipa_analyze_call_uses): Handle machines where the vbit for a PMF\n+\tcall is stored in the delta.\n+\n 2009-07-31  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.md (*clear_upper32_dext): New pattern."}, {"sha": "8308aa36f8f1dc1c23869352c6cdcbe7b05aa820", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7b8b706765f7277f9f99e947eeb114eb203b50/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7b8b706765f7277f9f99e947eeb114eb203b50/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=6f7b8b706765f7277f9f99e947eeb114eb203b50", "patch": "@@ -585,25 +585,28 @@ ipa_compute_jump_functions (struct cgraph_edge *cs)\n   compute_cst_member_ptr_arguments (arguments->jump_functions, call);\n }\n \n-/* If RHS looks like a rhs of a statement loading pfn from a member pointer\n-   formal parameter, return the parameter, otherwise return NULL.  */\n+/* If RHS looks like a rhs of a statement loading pfn from a member\n+   pointer formal parameter, return the parameter, otherwise return\n+   NULL.  If USE_DELTA, then we look for a use of the delta field\n+   rather than the pfn.  */\n \n static tree\n-ipa_get_member_ptr_load_param (tree rhs)\n+ipa_get_member_ptr_load_param (tree rhs, bool use_delta)\n {\n   tree rec, fld;\n   tree ptr_field;\n+  tree delta_field;\n \n   if (TREE_CODE (rhs) != COMPONENT_REF)\n     return NULL_TREE;\n \n   rec = TREE_OPERAND (rhs, 0);\n   if (TREE_CODE (rec) != PARM_DECL\n-      || !type_like_member_ptr_p (TREE_TYPE (rec), &ptr_field, NULL))\n+      || !type_like_member_ptr_p (TREE_TYPE (rec), &ptr_field, &delta_field))\n     return NULL_TREE;\n \n   fld = TREE_OPERAND (rhs, 1);\n-  if (fld == ptr_field)\n+  if (use_delta ? (fld == delta_field) : (fld == ptr_field))\n     return rec;\n   else\n     return NULL_TREE;\n@@ -613,15 +616,15 @@ ipa_get_member_ptr_load_param (tree rhs)\n    parameter, this function returns that parameter.  */\n \n static tree\n-ipa_get_stmt_member_ptr_load_param (gimple stmt)\n+ipa_get_stmt_member_ptr_load_param (gimple stmt, bool use_delta)\n {\n   tree rhs;\n \n   if (!gimple_assign_single_p (stmt))\n     return NULL_TREE;\n \n   rhs = gimple_assign_rhs1 (stmt);\n-  return ipa_get_member_ptr_load_param (rhs);\n+  return ipa_get_member_ptr_load_param (rhs, use_delta);\n }\n \n /* Returns true iff T is an SSA_NAME defined by a statement.  */\n@@ -756,15 +759,15 @@ ipa_analyze_call_uses (struct ipa_node_params *info, gimple call)\n   d1 = SSA_NAME_DEF_STMT (n1);\n   d2 = SSA_NAME_DEF_STMT (n2);\n \n-  if ((rec = ipa_get_stmt_member_ptr_load_param (d1)))\n+  if ((rec = ipa_get_stmt_member_ptr_load_param (d1, false)))\n     {\n-      if (ipa_get_stmt_member_ptr_load_param (d2))\n+      if (ipa_get_stmt_member_ptr_load_param (d2, false))\n \treturn;\n \n       bb = gimple_bb (d1);\n       virt_bb = gimple_bb (d2);\n     }\n-  else if ((rec = ipa_get_stmt_member_ptr_load_param (d2)))\n+  else if ((rec = ipa_get_stmt_member_ptr_load_param (d2, false)))\n     {\n       bb = gimple_bb (d2);\n       virt_bb = gimple_bb (d1);\n@@ -817,7 +820,10 @@ ipa_analyze_call_uses (struct ipa_node_params *info, gimple call)\n       def = SSA_NAME_DEF_STMT (cond);\n     }\n \n-  rec2 = ipa_get_stmt_member_ptr_load_param (def);\n+  rec2 = ipa_get_stmt_member_ptr_load_param (def,\n+\t\t\t\t\t     (TARGET_PTRMEMFUNC_VBIT_LOCATION\n+\t\t\t\t\t      == ptrmemfunc_vbit_in_delta));\n+\n   if (rec != rec2)\n     return;\n "}]}