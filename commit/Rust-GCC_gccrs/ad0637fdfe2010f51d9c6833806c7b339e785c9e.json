{"sha": "ad0637fdfe2010f51d9c6833806c7b339e785c9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwNjM3ZmRmZTIwMTBmNTFkOWM2ODMzODA2YzdiMzM5ZTc4NWM5ZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-07-12T22:57:32Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-07-12T22:57:32Z"}, "message": "re PR testsuite/25241 ([C++] DejaGNU does not distinguish between errors and warnings)\n\n2007-07-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\t    Janis Johnson  <janis187@us.ibm.com>\n\n\tPR testsuite/25241\ngcc/testsuite/\n\t* gcc.test-framework/dg-error-exp-F.c: New test.\n\t* gcc.test-framework/dg-warning-exp-F.c: New test.\n\t* lib/gcc.exp: Enable warning and error prefixes.\n\t* lib/gcc-dg.exp (dg-warning): Wrap original dg-warning.\n\t(dg-error): Wrap original dg-error.\n\t* gcc.target/powerpc/altivec-types-1.c: Remove explicit error/warning\n\tmarkers from dg-error/dg-warning directives.\n\t* gcc.dg/20040322-1.c: Likewise.\n\t* gcc.dg/Wchar-subscripts-1.c: Likewise.\n\t* gcc.dg/Wdeclaration-after-statement-1.c: Likewise.\n\t* gcc.dg/Wdeclaration-after-statement-2.c: Likewise.\n\t* gcc.dg/Werror-1.c: Likewise.\n\t* gcc.dg/Werror-10.c: Likewise.\n\t* gcc.dg/Werror-11.c: Likewise.\n\t* gcc.dg/Werror-2.c: Likewise.\n\t* gcc.dg/Werror-3.c: Likewise.\n\t* gcc.dg/Werror-4.c: Likewise.\n\t* gcc.dg/Werror-5.c: Likewise.\n\t* gcc.dg/Werror-6.c: Likewise.\n\t* gcc.dg/Werror-7.c: Likewise.\n\t* gcc.dg/Werror-8.c: Likewise.\n\t* gcc.dg/Werror-9.c: Likewise.\n\t* gcc.dg/Werror-implicit-function-declaration.c: Likewise.\n\t* gcc.dg/Wimplicit-function-declaration-c89-pedantic.c: Likewise.\n\t* gcc.dg/Wimplicit-function-declaration-c89.c: Likewise.\n\t* gcc.dg/Wimplicit-function-declaration-c99-pedantic.c: Likewise.\n\t* gcc.dg/Wimplicit-function-declaration-c99.c: Likewise.\n\t* gcc.dg/Wint-to-pointer-cast-1.c: Likewise.\n\t* gcc.dg/Wint-to-pointer-cast-2.c: Likewise.\n\t* gcc.dg/Wint-to-pointer-cast-3.c: Likewise.\n\t* gcc.dg/Wnested-externs-1.c: Likewise.\n\t* gcc.dg/Wpointer-to-int-cast-1.c: Likewise.\n\t* gcc.dg/Wpointer-to-int-cast-2.c: Likewise.\n\t* gcc.dg/Wpointer-to-int-cast-3.c: Likewise.\n\t* gcc.dg/Wshadow-3.c: Likewise.\n\t* gcc.dg/Wtraditional-conversion-2.c: Likewise.\n\t* gcc.dg/Wwrite-strings-1.c: Likewise.\n\t* gcc.dg/anon-struct-5.c: Likewise.\n\t* gcc.dg/anon-struct-6.c: Likewise.\n\t* gcc.dg/anon-struct-7.c: Likewise.\n\t* gcc.dg/anon-struct-8.c: Likewise.\n\t* gcc.dg/array-8.c: Likewise.\n\t* gcc.dg/array-quals-2.c: Likewise.\n\t* gcc.dg/asm-qual-1.c: Likewise.\n\t* gcc.dg/asm-wide-1.c: Likewise.\n\t* gcc.dg/assign-warn-1.c: Likewise.\n\t* gcc.dg/assign-warn-2.c: Likewise.\n\t* gcc.dg/bitfld-10.c: Likewise.\n\t* gcc.dg/bitfld-11.c: Likewise.\n\t* gcc.dg/bitfld-12.c: Likewise.\n\t* gcc.dg/bitfld-13.c: Likewise.\n\t* gcc.dg/bitfld-14.c: Likewise.\n\t* gcc.dg/builtin-choose-expr-2.c: Likewise.\n\t* gcc.dg/builtins-30.c: Likewise.\n\t* gcc.dg/c90-const-expr-5.c: Likewise.\n\t* gcc.dg/c90-typespec-1.c: Likewise.\n\t* gcc.dg/c99-const-expr-5.c: Likewise.\n\t* gcc.dg/c99-flex-array-5.c: Likewise.\n\t* gcc.dg/c99-fordecl-3.c: Likewise.\n\t* gcc.dg/c99-tag-3.c: Likewise.\n\t* gcc.dg/c99-typespec-1.c: Likewise.\n\t* gcc.dg/c99-vla-jump-1.c: Likewise.\n\t* gcc.dg/c99-vla-jump-2.c: Likewise.\n\t* gcc.dg/c99-vla-jump-3.c: Likewise.\n\t* gcc.dg/c99-vla-jump-4.c: Likewise.\n\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n\t* gcc.dg/cast-1.c: Likewise.\n\t* gcc.dg/cast-2.c: Likewise.\n\t* gcc.dg/cast-3.c: Likewise.\n\t* gcc.dg/cast-4.c: Likewise.\n\t* gcc.dg/cast-pretty-print-1.c: Likewise.\n\t* gcc.dg/comp-goto-2.c: Likewise.\n\t* gcc.dg/comp-goto-3.c: Likewise.\n\t* gcc.dg/cpp/error-1.c: Likewise.\n\t* gcc.dg/cpp/if-paren.c: Likewise.\n\t* gcc.dg/decl-7.c: Likewise.\n\t* gcc.dg/decl-8.c: Likewise.\n\t* gcc.dg/decl-nospec-1.c: Likewise.\n\t* gcc.dg/decl-nospec-2.c: Likewise.\n\t* gcc.dg/decl-nospec-3.c: Likewise.\n\t* gcc.dg/declspec-10.c: Likewise.\n\t* gcc.dg/declspec-11.c: Likewise.\n\t* gcc.dg/declspec-12.c: Likewise.\n\t* gcc.dg/declspec-13.c: Likewise.\n\t* gcc.dg/declspec-14.c: Likewise.\n\t* gcc.dg/declspec-15.c: Likewise.\n\t* gcc.dg/declspec-16.c: Likewise.\n\t* gcc.dg/declspec-17.c: Likewise.\n\t* gcc.dg/declspec-4.c: Likewise.\n\t* gcc.dg/declspec-5.c: Likewise.\n\t* gcc.dg/declspec-6.c: Likewise.\n\t* gcc.dg/declspec-7.c: Likewise.\n\t* gcc.dg/declspec-8.c: Likewise.\n\t* gcc.dg/declspec-9.c: Likewise.\n\t* gcc.dg/dfp/Wtraditional-conversion-2.c: Likewise.\n\t* gcc.dg/dfp/constants-c99.c: Likewise.\n\t* gcc.dg/dfp/keywords-c89.c: Likewise.\n\t* gcc.dg/dfp/keywords-c99.c: Likewise.\n\t* gcc.dg/dfp/keywords-reserved.c: Likewise.\n\t* gcc.dg/dfp/typespec.c: Likewise.\n\t* gcc.dg/dremf-type-compat-2.c: Likewise.\n\t* gcc.dg/dremf-type-compat-3.c: Likewise.\n\t* gcc.dg/dremf-type-compat-4.c: Likewise.\n\t* gcc.dg/empty-source-2.c: Likewise.\n\t* gcc.dg/empty-source-3.c: Likewise.\n\t* gcc.dg/enum3.c: Likewise.\n\t* gcc.dg/extra-semi-2.c: Likewise.\n\t* gcc.dg/extra-semi-3.c: Likewise.\n\t* gcc.dg/float-range-1.c: Likewise.\n\t* gcc.dg/float-range-2.c: Likewise.\n\t* gcc.dg/float-range-3.c: Likewise.\n\t* gcc.dg/float-range-5.c: Likewise.\n\t* gcc.dg/format/asm_fprintf-2.c: Likewise.\n\t* gcc.dg/format/asm_fprintf-3.c: Likewise.\n\t* gcc.dg/format/asm_fprintf-4.c: Likewise.\n\t* gcc.dg/format/asm_fprintf-5.c: Likewise.\n\t* gcc.dg/format/cast-1.c: Likewise.\n\t* gcc.dg/format/gcc_diag-3.c: Likewise.\n\t* gcc.dg/format/gcc_diag-4.c: Likewise.\n\t* gcc.dg/format/gcc_diag-6.c: Likewise.\n\t* gcc.dg/format/gcc_diag-8.c: Likewise.\n\t* gcc.dg/format/gcc_diag-9.c: Likewise.\n\t* gcc.dg/format/nul-2.c: Likewise.\n\t* gcc.dg/format/opt-1.c: Likewise.\n\t* gcc.dg/format/opt-2.c: Likewise.\n\t* gcc.dg/format/opt-3.c: Likewise.\n\t* gcc.dg/format/opt-4.c: Likewise.\n\t* gcc.dg/format/opt-5.c: Likewise.\n\t* gcc.dg/format/opt-6.c: Likewise.\n\t* gcc.dg/framework-2.c: Likewise.\n\t* gcc.dg/func-args-1.c: Likewise.\n\t* gcc.dg/func-outside-1.c: Likewise.\n\t* gcc.dg/func-outside-2.c: Likewise.\n\t* gcc.dg/gnu-cond-expr-2.c: Likewise.\n\t* gcc.dg/gnu-cond-expr-3.c: Likewise.\n\t* gcc.dg/if-empty-1.c: Likewise.\n\t* gcc.dg/init-bad-1.c: Likewise.\n\t* gcc.dg/init-bad-2.c: Likewise.\n\t* gcc.dg/init-bad-3.c: Likewise.\n\t* gcc.dg/init-desig-obs-2.c: Likewise.\n\t* gcc.dg/init-desig-obs-3.c: Likewise.\n\t* gcc.dg/init-empty-2.c: Likewise.\n\t* gcc.dg/init-empty-3.c: Likewise.\n\t* gcc.dg/inline-11.c: Likewise.\n\t* gcc.dg/inline-12.c: Likewise.\n\t* gcc.dg/inline-8.c: Likewise.\n\t* gcc.dg/inline-9.c: Likewise.\n\t* gcc.dg/inline3.c: Likewise.\n\t* gcc.dg/label-decl-1.c: Likewise.\n\t* gcc.dg/label-decl-2.c: Likewise.\n\t* gcc.dg/label-decl-3.c: Likewise.\n\t* gcc.dg/label-decl-4.c: Likewise.\n\t* gcc.dg/long-long-typespec-1.c: Likewise.\n\t* gcc.dg/lvalue-2.c: Likewise.\n\t* gcc.dg/lvalue-3.c: Likewise.\n\t* gcc.dg/nested-func-3.c: Likewise.\n\t* gcc.dg/nested-redef-1.c: Likewise.\n\t* gcc.dg/noreturn-4.c: Likewise.\n\t* gcc.dg/old-style-prom-2.c: Likewise.\n\t* gcc.dg/old-style-prom-3.c: Likewise.\n\t* gcc.dg/old-style-then-proto-1.c: Likewise.\n\t* gcc.dg/overflow-warn-1.c: Likewise.\n\t* gcc.dg/overflow-warn-2.c: Likewise.\n\t* gcc.dg/overflow-warn-3.c: Likewise.\n\t* gcc.dg/overflow-warn-4.c: Likewise.\n\t* gcc.dg/overflow-warn-6.c: Likewise.\n\t* gcc.dg/parm-forwdecl-2.c: Likewise.\n\t* gcc.dg/parm-forwdecl-3.c: Likewise.\n\t* gcc.dg/parm-impl-decl-1.c: Likewise.\n\t* gcc.dg/parm-impl-decl-2.c: Likewise.\n\t* gcc.dg/parm-incomplete-1.c: Likewise.\n\t* gcc.dg/parm-mismatch-1.c: Likewise.\n\t* gcc.dg/pointer-arith-1.c: Likewise.\n\t* gcc.dg/pointer-arith-2.c: Likewise.\n\t* gcc.dg/pointer-arith-3.c: Likewise.\n\t* gcc.dg/pointer-arith-4.c: Likewise.\n\t* gcc.dg/pointer-arith-6.c: Likewise.\n\t* gcc.dg/pointer-arith-7.c: Likewise.\n\t* gcc.dg/pointer-arith-8.c: Likewise.\n\t* gcc.dg/pr13804-1.c: Likewise.\n\t* gcc.dg/pr15698-1.c: Likewise.\n\t* gcc.dg/pr15698-2.c: Likewise.\n\t* gcc.dg/pr15698-3.c: Likewise.\n\t* gcc.dg/pr15698-4.c: Likewise.\n\t* gcc.dg/pr15698-5.c: Likewise.\n\t* gcc.dg/pr15698-6.c: Likewise.\n\t* gcc.dg/pr15698-7.c: Likewise.\n\t* gcc.dg/pr15698-8.c: Likewise.\n\t* gcc.dg/pr17188-1.c: Likewise.\n\t* gcc.dg/pr17301-1.c: Likewise.\n\t* gcc.dg/pr17301-2.c: Likewise.\n\t* gcc.dg/pr17730-1.c: Likewise.\n\t* gcc.dg/pr20368-1.c: Likewise.\n\t* gcc.dg/pr20368-2.c: Likewise.\n\t* gcc.dg/pr20368-3.c: Likewise.\n\t* gcc.dg/pr22308-1.c: Likewise.\n\t* gcc.dg/qual-component-1.c: Likewise.\n\t* gcc.dg/redecl-1.c: Likewise.\n\t* gcc.dg/redecl-11.c: Likewise.\n\t* gcc.dg/redecl-12.c: Likewise.\n\t* gcc.dg/redecl-13.c: Likewise.\n\t* gcc.dg/redecl-14.c: Likewise.\n\t* gcc.dg/redecl-15.c: Likewise.\n\t* gcc.dg/register-var-1.c: Likewise.\n\t* gcc.dg/register-var-2.c: Likewise.\n\t* gcc.dg/stmt-expr-2.c: Likewise.\n\t* gcc.dg/stmt-expr-3.c: Likewise.\n\t* gcc.dg/stmt-expr-label-1.c: Likewise.\n\t* gcc.dg/stmt-expr-label-2.c: Likewise.\n\t* gcc.dg/stmt-expr-label-3.c: Likewise.\n\t* gcc.dg/struct-empty-2.c: Likewise.\n\t* gcc.dg/struct-empty-3.c: Likewise.\n\t* gcc.dg/struct-parse-1.c: Likewise.\n\t* gcc.dg/struct-semi-1.c: Likewise.\n\t* gcc.dg/struct-semi-2.c: Likewise.\n\t* gcc.dg/struct-semi-3.c: Likewise.\n\t* gcc.dg/switch-5.c: Likewise.\n\t* gcc.dg/switch-6.c: Likewise.\n\t* gcc.dg/switch-7.c: Likewise.\n\t* gcc.dg/tls/diag-5.c: Likewise.\n\t* gcc.dg/transparent-union-1.c: Likewise.\n\t* gcc.dg/transparent-union-3.c: Likewise.\n\t* gcc.dg/typespec-1.c: Likewise.\n\t* gcc.dg/vla-init-2.c: Likewise.\n\t* gcc.dg/vla-init-3.c: Likewise.\n\t* gcc.dg/vla-init-4.c: Likewise.\n\t* gcc.dg/vla-init-5.c: Likewise.\n\t* gcc.dg/void-cast-2.c: Likewise.\n\t* gcc.dg/wvla-3.c: Likewise.\n\t* gcc.dg/wvla-7.c: Likewise.\n\t* gcc.target/i386/991209-1.c: Likewise.\n\t* gcc.target/ia64/fpreg-1.c: Likewise.\n\t* gcc.target/m68k/interrupt_thread-2.c: Likewise.\n\t* gcc.target/m68k/interrupt_thread-3.c: Likewise.\n\nFrom-SVN: r126606", "tree": {"sha": "adbdad544c1d1d5834c63b039f90c27a333ee1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adbdad544c1d1d5834c63b039f90c27a333ee1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0637fdfe2010f51d9c6833806c7b339e785c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0637fdfe2010f51d9c6833806c7b339e785c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0637fdfe2010f51d9c6833806c7b339e785c9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0637fdfe2010f51d9c6833806c7b339e785c9e/comments", "author": null, "committer": null, "parents": [{"sha": "f8faa85e29fc2c8f4e3941134ff03704334e427d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8faa85e29fc2c8f4e3941134ff03704334e427d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8faa85e29fc2c8f4e3941134ff03704334e427d"}], "stats": {"total": 11545, "additions": 5918, "deletions": 5627}, "files": [{"sha": "a6e15963d1b9edfe95db2be0ea1150d66c951218", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 240, "deletions": 1, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -1,7 +1,246 @@\n+2007-07-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\t    Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/25241\n+\t* gcc.test-framework/dg-error-exp-F.c: New test.\n+\t* gcc.test-framework/dg-warning-exp-F.c: New test.\n+\t* lib/gcc.exp: Enable warning and error prefixes.\n+\t* lib/gcc-dg.exp (dg-warning): Wrap original dg-warning.\n+\t(dg-error): Wrap original dg-error.\n+\t* gcc.target/powerpc/altivec-types-1.c: Remove explicit error/warning\n+\tmarkers from dg-error/dg-warning directives.\n+\t* gcc.dg/20040322-1.c: Likewise.\n+\t* gcc.dg/Wchar-subscripts-1.c: Likewise.\n+\t* gcc.dg/Wdeclaration-after-statement-1.c: Likewise.\n+\t* gcc.dg/Wdeclaration-after-statement-2.c: Likewise.\n+\t* gcc.dg/Werror-1.c: Likewise.\n+\t* gcc.dg/Werror-10.c: Likewise.\n+\t* gcc.dg/Werror-11.c: Likewise.\n+\t* gcc.dg/Werror-2.c: Likewise.\n+\t* gcc.dg/Werror-3.c: Likewise.\n+\t* gcc.dg/Werror-4.c: Likewise.\n+\t* gcc.dg/Werror-5.c: Likewise.\n+\t* gcc.dg/Werror-6.c: Likewise.\n+\t* gcc.dg/Werror-7.c: Likewise.\n+\t* gcc.dg/Werror-8.c: Likewise.\n+\t* gcc.dg/Werror-9.c: Likewise.\n+\t* gcc.dg/Werror-implicit-function-declaration.c: Likewise.\n+\t* gcc.dg/Wimplicit-function-declaration-c89-pedantic.c: Likewise.\n+\t* gcc.dg/Wimplicit-function-declaration-c89.c: Likewise.\n+\t* gcc.dg/Wimplicit-function-declaration-c99-pedantic.c: Likewise.\n+\t* gcc.dg/Wimplicit-function-declaration-c99.c: Likewise.\n+\t* gcc.dg/Wint-to-pointer-cast-1.c: Likewise.\n+\t* gcc.dg/Wint-to-pointer-cast-2.c: Likewise.\n+\t* gcc.dg/Wint-to-pointer-cast-3.c: Likewise.\n+\t* gcc.dg/Wnested-externs-1.c: Likewise.\n+\t* gcc.dg/Wpointer-to-int-cast-1.c: Likewise.\n+\t* gcc.dg/Wpointer-to-int-cast-2.c: Likewise.\n+\t* gcc.dg/Wpointer-to-int-cast-3.c: Likewise.\n+\t* gcc.dg/Wshadow-3.c: Likewise.\n+\t* gcc.dg/Wtraditional-conversion-2.c: Likewise.\n+\t* gcc.dg/Wwrite-strings-1.c: Likewise.\n+\t* gcc.dg/anon-struct-5.c: Likewise.\n+\t* gcc.dg/anon-struct-6.c: Likewise.\n+\t* gcc.dg/anon-struct-7.c: Likewise.\n+\t* gcc.dg/anon-struct-8.c: Likewise.\n+\t* gcc.dg/array-8.c: Likewise.\n+\t* gcc.dg/array-quals-2.c: Likewise.\n+\t* gcc.dg/asm-qual-1.c: Likewise.\n+\t* gcc.dg/asm-wide-1.c: Likewise.\n+\t* gcc.dg/assign-warn-1.c: Likewise.\n+\t* gcc.dg/assign-warn-2.c: Likewise.\n+\t* gcc.dg/bitfld-10.c: Likewise.\n+\t* gcc.dg/bitfld-11.c: Likewise.\n+\t* gcc.dg/bitfld-12.c: Likewise.\n+\t* gcc.dg/bitfld-13.c: Likewise.\n+\t* gcc.dg/bitfld-14.c: Likewise.\n+\t* gcc.dg/builtin-choose-expr-2.c: Likewise.\n+\t* gcc.dg/builtins-30.c: Likewise.\n+\t* gcc.dg/c90-const-expr-5.c: Likewise.\n+\t* gcc.dg/c90-typespec-1.c: Likewise.\n+\t* gcc.dg/c99-const-expr-5.c: Likewise.\n+\t* gcc.dg/c99-flex-array-5.c: Likewise.\n+\t* gcc.dg/c99-fordecl-3.c: Likewise.\n+\t* gcc.dg/c99-tag-3.c: Likewise.\n+\t* gcc.dg/c99-typespec-1.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-1.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-2.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-3.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-4.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n+\t* gcc.dg/cast-1.c: Likewise.\n+\t* gcc.dg/cast-2.c: Likewise.\n+\t* gcc.dg/cast-3.c: Likewise.\n+\t* gcc.dg/cast-4.c: Likewise.\n+\t* gcc.dg/cast-pretty-print-1.c: Likewise.\n+\t* gcc.dg/comp-goto-2.c: Likewise.\n+\t* gcc.dg/comp-goto-3.c: Likewise.\n+\t* gcc.dg/cpp/error-1.c: Likewise.\n+\t* gcc.dg/cpp/if-paren.c: Likewise.\n+\t* gcc.dg/decl-7.c: Likewise.\n+\t* gcc.dg/decl-8.c: Likewise.\n+\t* gcc.dg/decl-nospec-1.c: Likewise.\n+\t* gcc.dg/decl-nospec-2.c: Likewise.\n+\t* gcc.dg/decl-nospec-3.c: Likewise.\n+\t* gcc.dg/declspec-10.c: Likewise.\n+\t* gcc.dg/declspec-11.c: Likewise.\n+\t* gcc.dg/declspec-12.c: Likewise.\n+\t* gcc.dg/declspec-13.c: Likewise.\n+\t* gcc.dg/declspec-14.c: Likewise.\n+\t* gcc.dg/declspec-15.c: Likewise.\n+\t* gcc.dg/declspec-16.c: Likewise.\n+\t* gcc.dg/declspec-17.c: Likewise.\n+\t* gcc.dg/declspec-4.c: Likewise.\n+\t* gcc.dg/declspec-5.c: Likewise.\n+\t* gcc.dg/declspec-6.c: Likewise.\n+\t* gcc.dg/declspec-7.c: Likewise.\n+\t* gcc.dg/declspec-8.c: Likewise.\n+\t* gcc.dg/declspec-9.c: Likewise.\n+\t* gcc.dg/dfp/Wtraditional-conversion-2.c: Likewise.\n+\t* gcc.dg/dfp/constants-c99.c: Likewise.\n+\t* gcc.dg/dfp/keywords-c89.c: Likewise.\n+\t* gcc.dg/dfp/keywords-c99.c: Likewise.\n+\t* gcc.dg/dfp/keywords-reserved.c: Likewise.\n+\t* gcc.dg/dfp/typespec.c: Likewise.\n+\t* gcc.dg/dremf-type-compat-2.c: Likewise.\n+\t* gcc.dg/dremf-type-compat-3.c: Likewise.\n+\t* gcc.dg/dremf-type-compat-4.c: Likewise.\n+\t* gcc.dg/empty-source-2.c: Likewise.\n+\t* gcc.dg/empty-source-3.c: Likewise.\n+\t* gcc.dg/enum3.c: Likewise.\n+\t* gcc.dg/extra-semi-2.c: Likewise.\n+\t* gcc.dg/extra-semi-3.c: Likewise.\n+\t* gcc.dg/float-range-1.c: Likewise.\n+\t* gcc.dg/float-range-2.c: Likewise.\n+\t* gcc.dg/float-range-3.c: Likewise.\n+\t* gcc.dg/float-range-5.c: Likewise.\n+\t* gcc.dg/format/asm_fprintf-2.c: Likewise.\n+\t* gcc.dg/format/asm_fprintf-3.c: Likewise.\n+\t* gcc.dg/format/asm_fprintf-4.c: Likewise.\n+\t* gcc.dg/format/asm_fprintf-5.c: Likewise.\n+\t* gcc.dg/format/cast-1.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-3.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-4.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-6.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-8.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-9.c: Likewise.\n+\t* gcc.dg/format/nul-2.c: Likewise.\n+\t* gcc.dg/format/opt-1.c: Likewise.\n+\t* gcc.dg/format/opt-2.c: Likewise.\n+\t* gcc.dg/format/opt-3.c: Likewise.\n+\t* gcc.dg/format/opt-4.c: Likewise.\n+\t* gcc.dg/format/opt-5.c: Likewise.\n+\t* gcc.dg/format/opt-6.c: Likewise.\n+\t* gcc.dg/framework-2.c: Likewise.\n+\t* gcc.dg/func-args-1.c: Likewise.\n+\t* gcc.dg/func-outside-1.c: Likewise.\n+\t* gcc.dg/func-outside-2.c: Likewise.\n+\t* gcc.dg/gnu-cond-expr-2.c: Likewise.\n+\t* gcc.dg/gnu-cond-expr-3.c: Likewise.\n+\t* gcc.dg/if-empty-1.c: Likewise.\n+\t* gcc.dg/init-bad-1.c: Likewise.\n+\t* gcc.dg/init-bad-2.c: Likewise.\n+\t* gcc.dg/init-bad-3.c: Likewise.\n+\t* gcc.dg/init-desig-obs-2.c: Likewise.\n+\t* gcc.dg/init-desig-obs-3.c: Likewise.\n+\t* gcc.dg/init-empty-2.c: Likewise.\n+\t* gcc.dg/init-empty-3.c: Likewise.\n+\t* gcc.dg/inline-11.c: Likewise.\n+\t* gcc.dg/inline-12.c: Likewise.\n+\t* gcc.dg/inline-8.c: Likewise.\n+\t* gcc.dg/inline-9.c: Likewise.\n+\t* gcc.dg/inline3.c: Likewise.\n+\t* gcc.dg/label-decl-1.c: Likewise.\n+\t* gcc.dg/label-decl-2.c: Likewise.\n+\t* gcc.dg/label-decl-3.c: Likewise.\n+\t* gcc.dg/label-decl-4.c: Likewise.\n+\t* gcc.dg/long-long-typespec-1.c: Likewise.\n+\t* gcc.dg/lvalue-2.c: Likewise.\n+\t* gcc.dg/lvalue-3.c: Likewise.\n+\t* gcc.dg/nested-func-3.c: Likewise.\n+\t* gcc.dg/nested-redef-1.c: Likewise.\n+\t* gcc.dg/noreturn-4.c: Likewise.\n+\t* gcc.dg/old-style-prom-2.c: Likewise.\n+\t* gcc.dg/old-style-prom-3.c: Likewise.\n+\t* gcc.dg/old-style-then-proto-1.c: Likewise.\n+\t* gcc.dg/overflow-warn-1.c: Likewise.\n+\t* gcc.dg/overflow-warn-2.c: Likewise.\n+\t* gcc.dg/overflow-warn-3.c: Likewise.\n+\t* gcc.dg/overflow-warn-4.c: Likewise.\n+\t* gcc.dg/overflow-warn-6.c: Likewise.\n+\t* gcc.dg/parm-forwdecl-2.c: Likewise.\n+\t* gcc.dg/parm-forwdecl-3.c: Likewise.\n+\t* gcc.dg/parm-impl-decl-1.c: Likewise.\n+\t* gcc.dg/parm-impl-decl-2.c: Likewise.\n+\t* gcc.dg/parm-incomplete-1.c: Likewise.\n+\t* gcc.dg/parm-mismatch-1.c: Likewise.\n+\t* gcc.dg/pointer-arith-1.c: Likewise.\n+\t* gcc.dg/pointer-arith-2.c: Likewise.\n+\t* gcc.dg/pointer-arith-3.c: Likewise.\n+\t* gcc.dg/pointer-arith-4.c: Likewise.\n+\t* gcc.dg/pointer-arith-6.c: Likewise.\n+\t* gcc.dg/pointer-arith-7.c: Likewise.\n+\t* gcc.dg/pointer-arith-8.c: Likewise.\n+\t* gcc.dg/pr13804-1.c: Likewise.\n+\t* gcc.dg/pr15698-1.c: Likewise.\n+\t* gcc.dg/pr15698-2.c: Likewise.\n+\t* gcc.dg/pr15698-3.c: Likewise.\n+\t* gcc.dg/pr15698-4.c: Likewise.\n+\t* gcc.dg/pr15698-5.c: Likewise.\n+\t* gcc.dg/pr15698-6.c: Likewise.\n+\t* gcc.dg/pr15698-7.c: Likewise.\n+\t* gcc.dg/pr15698-8.c: Likewise.\n+\t* gcc.dg/pr17188-1.c: Likewise.\n+\t* gcc.dg/pr17301-1.c: Likewise.\n+\t* gcc.dg/pr17301-2.c: Likewise.\n+\t* gcc.dg/pr17730-1.c: Likewise.\n+\t* gcc.dg/pr20368-1.c: Likewise.\n+\t* gcc.dg/pr20368-2.c: Likewise.\n+\t* gcc.dg/pr20368-3.c: Likewise.\n+\t* gcc.dg/pr22308-1.c: Likewise.\n+\t* gcc.dg/qual-component-1.c: Likewise.\n+\t* gcc.dg/redecl-1.c: Likewise.\n+\t* gcc.dg/redecl-11.c: Likewise.\n+\t* gcc.dg/redecl-12.c: Likewise.\n+\t* gcc.dg/redecl-13.c: Likewise.\n+\t* gcc.dg/redecl-14.c: Likewise.\n+\t* gcc.dg/redecl-15.c: Likewise.\n+\t* gcc.dg/register-var-1.c: Likewise.\n+\t* gcc.dg/register-var-2.c: Likewise.\n+\t* gcc.dg/stmt-expr-2.c: Likewise.\n+\t* gcc.dg/stmt-expr-3.c: Likewise.\n+\t* gcc.dg/stmt-expr-label-1.c: Likewise.\n+\t* gcc.dg/stmt-expr-label-2.c: Likewise.\n+\t* gcc.dg/stmt-expr-label-3.c: Likewise.\n+\t* gcc.dg/struct-empty-2.c: Likewise.\n+\t* gcc.dg/struct-empty-3.c: Likewise.\n+\t* gcc.dg/struct-parse-1.c: Likewise.\n+\t* gcc.dg/struct-semi-1.c: Likewise.\n+\t* gcc.dg/struct-semi-2.c: Likewise.\n+\t* gcc.dg/struct-semi-3.c: Likewise.\n+\t* gcc.dg/switch-5.c: Likewise.\n+\t* gcc.dg/switch-6.c: Likewise.\n+\t* gcc.dg/switch-7.c: Likewise.\n+\t* gcc.dg/tls/diag-5.c: Likewise.\n+\t* gcc.dg/transparent-union-1.c: Likewise.\n+\t* gcc.dg/transparent-union-3.c: Likewise.\n+\t* gcc.dg/typespec-1.c: Likewise.\n+\t* gcc.dg/vla-init-2.c: Likewise.\n+\t* gcc.dg/vla-init-3.c: Likewise.\n+\t* gcc.dg/vla-init-4.c: Likewise.\n+\t* gcc.dg/vla-init-5.c: Likewise.\n+\t* gcc.dg/void-cast-2.c: Likewise.\n+\t* gcc.dg/wvla-3.c: Likewise.\n+\t* gcc.dg/wvla-7.c: Likewise.\n+\t* gcc.target/i386/991209-1.c: Likewise.\n+\t* gcc.target/ia64/fpreg-1.c: Likewise.\n+\t* gcc.target/m68k/interrupt_thread-2.c: Likewise.\n+\t* gcc.target/m68k/interrupt_thread-3.c: Likewise.\n+\t\n 2007-07-12 \ufffdDaniel Franke \ufffd<franke.daniel@gmail.com>\n \n \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdPR fortran/31639\n-\ufffd \ufffd \ufffd \ufffd * gfortran.dg/func_decl_4.f90: New test.\n+\ufffd \ufffd \ufffd \ufffd\t* gfortran.dg/func_decl_4.f90: New test.\n \n 2007-07-12  Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "139511262e5e33fb04b7446da876e88dbdc9c9ea", "filename": "gcc/testsuite/gcc.dg/20040322-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2F20040322-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2F20040322-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040322-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -1,4 +1,4 @@\n /* PR c/14069 */\n /* { dg-do compile } */\n-struct S { int a; char b[]; char *c; }; /* { dg-error \"error\" \"flexible array member not\" } */\n-struct S s = { .b = \"foo\", .c = .b }; /* { dg-error \"error\" \"parse error before\" } */\n+struct S { int a; char b[]; char *c; }; /* { dg-error \"\" \"flexible array member not\" } */\n+struct S s = { .b = \"foo\", .c = .b }; /* { dg-error \"\" \"parse error before\" } */"}, {"sha": "3f5adeb31d175116d5884acd4fce2f56265b09ac", "filename": "gcc/testsuite/gcc.dg/Wchar-subscripts-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -20,8 +20,8 @@ f (void)\n   p[uc];\n   sc[p];\n   uc[p];\n-  a[c]; /* { dg-warning \"warning: array subscript has type 'char'\" } */\n-  p[c]; /* { dg-warning \"warning: array subscript has type 'char'\" } */\n+  a[c]; /* { dg-warning \"array subscript has type 'char'\" } */\n+  p[c]; /* { dg-warning \"array subscript has type 'char'\" } */\n   /* -Wchar-subscripts does not warn if the char is not syntactically\n       the subscript.  */\n   c[a];"}, {"sha": "64a173a9c4a7f70c7912d54bd179e27c3501daa7", "filename": "gcc/testsuite/gcc.dg/Wdeclaration-after-statement-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,10 +16,10 @@ main (void)\n   i++;\n   if (i != 1)\n     abort ();\n-  int j = i;\t\t\t\t/* { dg-warning \"warning\" \"declaration after statement\" } */\n+  int j = i;\t\t\t\t/* { dg-warning \"\" \"declaration after statement\" } */\n   if (j != 1)\n     abort ();\n-  struct foo { int i0; } k = { 4 };\t/* { dg-warning \"warning\" \"declaration after statement\" } */\n+  struct foo { int i0; } k = { 4 };\t/* { dg-warning \"\" \"declaration after statement\" } */\n   if (k.i0 != 4)\n     abort ();\n   exit (0);"}, {"sha": "ac89bbc2685d3821fb99f54e23f28c708fab0cfe", "filename": "gcc/testsuite/gcc.dg/Wdeclaration-after-statement-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,10 +16,10 @@ main (void)\n   i++;\n   if (i != 1)\n     abort ();\n-  int j = i;\t\t\t\t/* { dg-warning \"warning\" \"declaration-after-statement\" } */\n+  int j = i;\t\t\t\t/* { dg-warning \"\" \"declaration-after-statement\" } */\n   if (j != 1)\n     abort ();\n-  struct foo { int i0; } k = { 4 };\t/* { dg-warning \"warning\" \"declaration-after-statement\" } */\n+  struct foo { int i0; } k = { 4 };\t/* { dg-warning \"\" \"declaration-after-statement\" } */\n   if (k.i0 != 4)\n     abort ();\n   exit (0);"}, {"sha": "815a561f2e81f4fbc3165ea03a02110daee6c02e", "filename": "gcc/testsuite/gcc.dg/Werror-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,13 +9,13 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "dced20cf02c14e5d6385def934e230f0f349695a", "filename": "gcc/testsuite/gcc.dg/Werror-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,13 +6,13 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "3fb892ee6f2b0b1c493c5338409438141e791472", "filename": "gcc/testsuite/gcc.dg/Werror-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,13 +6,13 @@\n \n #pragma GCC diagnostic warning \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-warning \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "65f285edd0106892f0a6e830217f162f8dd53b36", "filename": "gcc/testsuite/gcc.dg/Werror-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,7 +4,7 @@\n /* This one is the baseline.  Make sure with no option we get no\n    warnings.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n "}, {"sha": "97874075db229d8751a51ac810a819329a1ba1fd", "filename": "gcc/testsuite/gcc.dg/Werror-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,13 +3,13 @@\n \n /* Make sure the command line option enables the warning.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-warning \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "272f123c6b4c4e9d6467ac67bdb1a0f104c19f72", "filename": "gcc/testsuite/gcc.dg/Werror-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,13 +5,13 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "c03fc3b51097e4b6d875d1a8c118b08659c1507a", "filename": "gcc/testsuite/gcc.dg/Werror-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,13 +4,13 @@\n \n /* Make sure -Werror turns warnings in to errors.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "2c37717168f7bc3110eeca9d96c82077d20eee3c", "filename": "gcc/testsuite/gcc.dg/Werror-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,13 +3,13 @@\n \n /* Make sure -Werror-foo emits an error and not a warning */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "bafb5c92476a53673750df112f9527626540e5c2", "filename": "gcc/testsuite/gcc.dg/Werror-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,13 +4,13 @@\n \n /* Make sure -Wno-error= overrides -Werror.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-warning \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "23079ce9de99804eebb1e86dc7d1b25d19a5f798", "filename": "gcc/testsuite/gcc.dg/Werror-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,13 +5,13 @@\n \n #pragma GCC diagnostic warning \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-warning \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "87051146a5b48fa0e1e582976b3936a547496dd8", "filename": "gcc/testsuite/gcc.dg/Werror-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,13 +5,13 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "05b8c02968aa4d66d6c4f9faa4b4d0fac714de4d", "filename": "gcc/testsuite/gcc.dg/Werror-implicit-function-declaration.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n \n void f(void) \n { \n-  puts(\"Hello\"); /* { dg-error \"error: implicit declaration of function\" } */\n+  puts(\"Hello\"); /* { dg-error \"implicit declaration of function\" } */\n }"}, {"sha": "5491aea793bf3d6f1f71ff7d79840dca6b61e9c6", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c89-pedantic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n \n void f(void) \n { \n-  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+  puts(\"Hello\"); /* { dg-warning \"implicit declaration of function\" } */\n }"}, {"sha": "441899edb3dc553dbe3b990be95447db55837af2", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c89.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n \n void f(void) \n { \n-  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+  puts(\"Hello\"); /* { dg-warning \"implicit declaration of function\" } */\n }"}, {"sha": "05cca9a2b8d2b1d4c75ff50c26060f0841f217a3", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c99-pedantic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n \n void f(void) \n { \n-  puts(\"Hello\"); /* { dg-error \"error: implicit declaration of function\" } */\n+  puts(\"Hello\"); /* { dg-error \"implicit declaration of function\" } */\n }"}, {"sha": "254f7e70e657bdff76c8417756424827d3e1d43f", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c99.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n \n void f(void) \n { \n-  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+  puts(\"Hello\"); /* { dg-warning \"implicit declaration of function\" } */\n }"}, {"sha": "a7687a60758fb1e1afc16a24046522590ec986ac", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ char c;\n void *\n f (void)\n {\n-  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  return (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n }"}, {"sha": "5546abb8186085129f9068eeca98b4351f46d323", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ char c;\n void *\n f (void)\n {\n-  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  return (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n }"}, {"sha": "f4309a90723a638c8d272a720c3d1a8a7a507d96", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,5 +16,5 @@ void *p;\n char\n g (void)\n {\n-  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  return (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "5c4b5ddd8e238234b7755ec54099a29dfed9509d", "filename": "gcc/testsuite/gcc.dg/Wnested-externs-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,11 +12,11 @@ static void f1(void);\n void\n g(void)\n {\n-  extern int a; /* { dg-warning \"warning: nested extern declaration of 'a'\" } */\n-  extern int b; /* { dg-warning \"warning: nested extern declaration of 'b'\" } */\n-  extern int c; /* { dg-warning \"warning: nested extern declaration of 'c'\" } */\n-  extern int d; /* { dg-warning \"warning: nested extern declaration of 'd'\" } */\n-  extern void f0(void); /* { dg-warning \"warning: nested extern declaration of 'f0'\" } */\n-  extern void f1(void); /* { dg-warning \"warning: nested extern declaration of 'f1'\" } */\n-  extern void f2(void); /* { dg-warning \"warning: nested extern declaration of 'f2'\" } */\n+  extern int a; /* { dg-warning \"nested extern declaration of 'a'\" } */\n+  extern int b; /* { dg-warning \"nested extern declaration of 'b'\" } */\n+  extern int c; /* { dg-warning \"nested extern declaration of 'c'\" } */\n+  extern int d; /* { dg-warning \"nested extern declaration of 'd'\" } */\n+  extern void f0(void); /* { dg-warning \"nested extern declaration of 'f0'\" } */\n+  extern void f1(void); /* { dg-warning \"nested extern declaration of 'f1'\" } */\n+  extern void f2(void); /* { dg-warning \"nested extern declaration of 'f2'\" } */\n }"}, {"sha": "ff011c75d4af4e9fc5c5d13f63df432edae0cb86", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ void *p;\n char\n f (void)\n {\n-  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  return (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "9ece965d605863a84ba1f27d01938572b6083d60", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ void *p;\n char\n f (void)\n {\n-  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  return (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "c82ca5cf5fbc8efb26fec79200c2f68999ef7bac", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -17,5 +17,5 @@ char c;\n void *\n g (void)\n {\n-  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  return (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n }"}, {"sha": "a7f06a26f96639891fd2aab070009078672075ca", "filename": "gcc/testsuite/gcc.dg/Wshadow-3.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,15 +7,15 @@\n \n int v; /* { dg-warning \"shadowed declaration\" } */\n int f1(int v);\n-int f2(int v, int x[v]); /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n-int f3(int v, int y[sizeof(v)]); /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n-int f4(int v) { return 0; } /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n-int f5(int v, int x[v]) { return 0; } /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n+int f2(int v, int x[v]); /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n+int f3(int v, int y[sizeof(v)]); /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n+int f4(int v) { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n+int f5(int v, int x[v]) { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n int f6(int x) { return 0; }\n-int f7(v) int v; { return 0; } /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n-int f8(v, w) int v; int w[v]; { return 0; } /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n+int f7(v) int v; { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n+int f8(v, w) int v; int w[v]; { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n int f9(x) int x; { return 0; }\n-int f10(v) { return 0; } /* { dg-warning \"warning: declaration of 'v' shadows a global declaration\" } */\n+int f10(v) { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n int f11(int a, int b(int a));\n-int f12(int a, int b(int a, int x[a])); /* { dg-warning \"warning: declaration of 'a' shadows a parameter\" } */\n+int f12(int a, int b(int a, int x[a])); /* { dg-warning \"declaration of 'a' shadows a parameter\" } */\n /* { dg-warning \"shadowed declaration\" \"outer parm\" { target *-*-* } 20 } */"}, {"sha": "b3c7e3c6c8518a499747e9e2e9fb61b1e724a824", "filename": "gcc/testsuite/gcc.dg/Wtraditional-conversion-2.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -39,26 +39,26 @@ _Complex float cf;\n void\n g (void)\n {\n-  fsi(f); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n-  x.fsi(f); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n-  fsi(cf); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than complex due to prototype\" } */\n-  x.fsi(cf); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than complex due to prototype\" } */\n-  fcf(f); /* { dg-warning \"warning: passing argument 1 of 'fcf' as complex rather than floating due to prototype\" } */\n-  x.fcf(f); /* { dg-warning \"warning: passing argument 1 of 'x.fcf' as complex rather than floating due to prototype\" } */\n-  fcf(si); /* { dg-warning \"warning: passing argument 1 of 'fcf' as complex rather than integer due to prototype\" } */\n-  x.fcf(si); /* { dg-warning \"warning: passing argument 1 of 'x.fcf' as complex rather than integer due to prototype\" } */\n-  ff(sc); /* { dg-warning \"warning: passing argument 1 of 'ff' as floating rather than integer due to prototype\" } */\n-  x.ff(sc); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as floating rather than integer due to prototype\" } */\n-  ff(cf); /* { dg-warning \"warning: passing argument 1 of 'ff' as floating rather than complex due to prototype\" } */\n-  x.ff(cf); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as floating rather than complex due to prototype\" } */\n-  ff(1.0); /* { dg-warning \"warning: passing argument 1 of 'ff' as 'float' rather than 'double' due to prototype\" } */\n-  x.ff(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as 'float' rather than 'double' due to prototype\" } */\n-  fsll(sc); /* { dg-warning \"warning: passing argument 1 of 'fsll' with different width due to prototype\" } */\n-  x.fsll(sc); /* { dg-warning \"warning: passing argument 1 of 'x.fsll' with different width due to prototype\" } */\n-  fsc(sll); /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" } */\n-  x.fsc(sll); /* { dg-warning \"warning: passing argument 1 of 'x.fsc' with different width due to prototype\" } */\n-  fsi(ui); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n-  x.fsi(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as signed due to prototype\" } */\n-  full(sll); /* { dg-warning \"warning: passing argument 1 of 'full' as unsigned due to prototype\" } */\n-  x.full(sll); /* { dg-warning \"warning: passing argument 1 of 'x.full' as unsigned due to prototype\" } */\n+  fsi(f); /* { dg-warning \"passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(f); /* { dg-warning \"passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(cf); /* { dg-warning \"passing argument 1 of 'fsi' as integer rather than complex due to prototype\" } */\n+  x.fsi(cf); /* { dg-warning \"passing argument 1 of 'x.fsi' as integer rather than complex due to prototype\" } */\n+  fcf(f); /* { dg-warning \"passing argument 1 of 'fcf' as complex rather than floating due to prototype\" } */\n+  x.fcf(f); /* { dg-warning \"passing argument 1 of 'x.fcf' as complex rather than floating due to prototype\" } */\n+  fcf(si); /* { dg-warning \"passing argument 1 of 'fcf' as complex rather than integer due to prototype\" } */\n+  x.fcf(si); /* { dg-warning \"passing argument 1 of 'x.fcf' as complex rather than integer due to prototype\" } */\n+  ff(sc); /* { dg-warning \"passing argument 1 of 'ff' as floating rather than integer due to prototype\" } */\n+  x.ff(sc); /* { dg-warning \"passing argument 1 of 'x.ff' as floating rather than integer due to prototype\" } */\n+  ff(cf); /* { dg-warning \"passing argument 1 of 'ff' as floating rather than complex due to prototype\" } */\n+  x.ff(cf); /* { dg-warning \"passing argument 1 of 'x.ff' as floating rather than complex due to prototype\" } */\n+  ff(1.0); /* { dg-warning \"passing argument 1 of 'ff' as 'float' rather than 'double' due to prototype\" } */\n+  x.ff(1.0); /* { dg-warning \"passing argument 1 of 'x.ff' as 'float' rather than 'double' due to prototype\" } */\n+  fsll(sc); /* { dg-warning \"passing argument 1 of 'fsll' with different width due to prototype\" } */\n+  x.fsll(sc); /* { dg-warning \"passing argument 1 of 'x.fsll' with different width due to prototype\" } */\n+  fsc(sll); /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" } */\n+  x.fsc(sll); /* { dg-warning \"passing argument 1 of 'x.fsc' with different width due to prototype\" } */\n+  fsi(ui); /* { dg-warning \"passing argument 1 of 'fsi' as signed due to prototype\" } */\n+  x.fsi(ui); /* { dg-warning \"passing argument 1 of 'x.fsi' as signed due to prototype\" } */\n+  full(sll); /* { dg-warning \"passing argument 1 of 'full' as unsigned due to prototype\" } */\n+  x.full(sll); /* { dg-warning \"passing argument 1 of 'x.full' as unsigned due to prototype\" } */\n }"}, {"sha": "03bb4094104fd799523ef2c1dfc06f673fd9df77", "filename": "gcc/testsuite/gcc.dg/Wwrite-strings-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWwrite-strings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2FWwrite-strings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWwrite-strings-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wwrite-strings\" } */\n typedef char T[1];\n-T *p = &\"\"; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+T *p = &\"\"; /* { dg-warning \"initialization from incompatible pointer type\" } */"}, {"sha": "af1690ed3ca74ca7be6f930ee35966eee9e6082b", "filename": "gcc/testsuite/gcc.dg/anon-struct-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,5 +3,5 @@\n /* { dg-options \"-std=c99 -pedantic-errors\" } */\n \n struct Foo { int; }; /* { dg-bogus \"unnamed\" } */\n-/* { dg-error \"error: declaration does not declare anything\" \"int;\" { target *-*-* } 5 } */\n-/* { dg-error \"error: struct has no members\" \"no members\" { target *-*-* } 5 } */\n+/* { dg-error \"declaration does not declare anything\" \"int;\" { target *-*-* } 5 } */\n+/* { dg-error \"struct has no members\" \"no members\" { target *-*-* } 5 } */"}, {"sha": "8ce14f48474a2bc84fea8516a5c781c582df923e", "filename": "gcc/testsuite/gcc.dg/anon-struct-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ struct s {\n   int a;\n   const;\n };\n-/* { dg-warning \"warning: useless type qualifier in empty declaration\" \"empty\" { target *-*-* } 9 } */\n-/* { dg-warning \"warning: empty declaration\" \"empty 2\" { target *-*-* } 9 } */\n+/* { dg-warning \"useless type qualifier in empty declaration\" \"empty\" { target *-*-* } 9 } */\n+/* { dg-warning \"empty declaration\" \"empty 2\" { target *-*-* } 9 } */"}, {"sha": "0f05583c180b093a4994e34b7917d3588f4c4cef", "filename": "gcc/testsuite/gcc.dg/anon-struct-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,5 +6,5 @@\n \n struct s {\n   int a;\n-  const; /* { dg-warning \"warning: ISO C forbids member declarations with no members\" } */\n+  const; /* { dg-warning \"ISO C forbids member declarations with no members\" } */\n };"}, {"sha": "66db0834ef2b60ee501fb9beb26de4f58a853506", "filename": "gcc/testsuite/gcc.dg/anon-struct-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,5 +6,5 @@\n \n struct s {\n   int a;\n-  const; /* { dg-error \"error: ISO C forbids member declarations with no members\" } */\n+  const; /* { dg-error \"ISO C forbids member declarations with no members\" } */\n };"}, {"sha": "f50fe6db06ed6898e25e4a408b71a1e44ec3d17e", "filename": "gcc/testsuite/gcc.dg/array-8.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -35,15 +35,15 @@ g (void)\n   f().c[0];\n   0[f().c];\n   /* Various invalid cases.  */\n-  c[c]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n-  p[1.0]; /* { dg-error \"error: array subscript is not an integer\" } */\n-  1.0[a]; /* { dg-error \"error: array subscript is not an integer\" } */\n-  fp[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  0[fp]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  pv[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  0[pv]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  sip[0]; /* { dg-error \"error: invalid use of undefined type 'struct si'\" } */\n-  /* { dg-error \"error: dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } 45 } */\n-  0[sip]; /* { dg-error \"error: invalid use of undefined type 'struct si'\" } */\n-  /* { dg-error \"error: dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } 47 } */\n+  c[c]; /* { dg-error \"subscripted value is neither array nor pointer\" } */\n+  p[1.0]; /* { dg-error \"array subscript is not an integer\" } */\n+  1.0[a]; /* { dg-error \"array subscript is not an integer\" } */\n+  fp[0]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  0[fp]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  pv[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  0[pv]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  sip[0]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n+  /* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } 45 } */\n+  0[sip]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n+  /* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } 47 } */\n }"}, {"sha": "2f1304e2a649d6467b6e8165e407dd48dd7d84da", "filename": "gcc/testsuite/gcc.dg/array-quals-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,5 +10,5 @@ typedef volatile char U[1];\n T *p;\n T2 *p2;\n U *q;\n-void *f(void) { return 1 ? p : q; } /* { dg-warning \"warning: pointer type mismatch in conditional expression\" } */\n+void *f(void) { return 1 ? p : q; } /* { dg-warning \"pointer type mismatch in conditional expression\" } */\n T *g(void) { return 1 ? p : p2; }"}, {"sha": "5ec9a29a9108386334e5e6dc6c78f2e74a8d1222", "filename": "gcc/testsuite/gcc.dg/asm-qual-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,6 +7,6 @@ void\n f (void)\n {\n   asm volatile (\"\");\n-  asm const (\"\"); /* { dg-warning \"warning: const qualifier ignored on asm\" } */\n-  asm restrict (\"\"); /* { dg-warning \"warning: restrict qualifier ignored on asm\" } */\n+  asm const (\"\"); /* { dg-warning \"const qualifier ignored on asm\" } */\n+  asm restrict (\"\"); /* { dg-warning \"restrict qualifier ignored on asm\" } */\n }"}, {"sha": "5cc6b0784bbf3e230bcdd9c2679d3b3d875faca3", "filename": "gcc/testsuite/gcc.dg/asm-wide-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,27 +3,27 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int foo asm (L\"bar\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+int foo asm (L\"bar\"); /* { dg-error \"wide string literal in 'asm'\" } */\n \n-asm (L\"foo\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+asm (L\"foo\"); /* { dg-error \"wide string literal in 'asm'\" } */\n \n void\n f (void)\n {\n   int x = 1;\n-  asm (L\"foo\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (L\"foo\"); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" :\n-       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"=g\" (x)); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" : [x]\n-       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"=g\" (x)); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" : [x] \"=g\" (x),\n-       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"=g\" (x)); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" : :\n-       L\"g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"g\" (x)); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" : : :\n-       L\"memory\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"memory\"); /* { dg-error \"wide string literal in 'asm'\" } */\n   asm (\"foo\" : : : \"memory\",\n-       L\"memory\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+       L\"memory\"); /* { dg-error \"wide string literal in 'asm'\" } */\n }\n \n /* Extra errors from the substitution of \"\" for wide strings: */"}, {"sha": "1587c20d7b4e115faf708203a73d7bda390eb0f3", "filename": "gcc/testsuite/gcc.dg/assign-warn-1.c", "status": "modified", "additions": 92, "deletions": 92, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,112 +12,112 @@\n typedef void (*fp)(void);\n typedef void (*nrfp)(void) __attribute__((noreturn));\n \n-TESTARG(fqa, nrfp, fp); /* { dg-warning \"warning: passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n-TESTARP(fqb, nrfp, fp); /* { dg-warning \"warning: passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n-TESTASS(fqc, nrfp, fp); /* { dg-warning \"warning: assignment makes qualified function pointer from unqualified\" } */\n-TESTINI(fqd, nrfp, fp); /* { dg-warning \"warning: initialization makes qualified function pointer from unqualified\" } */\n-TESTRET(fqe, nrfp, fp); /* { dg-warning \"warning: return makes qualified function pointer from unqualified\" } */\n+TESTARG(fqa, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n+TESTARP(fqb, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n+TESTASS(fqc, nrfp, fp); /* { dg-warning \"assignment makes qualified function pointer from unqualified\" } */\n+TESTINI(fqd, nrfp, fp); /* { dg-warning \"initialization makes qualified function pointer from unqualified\" } */\n+TESTRET(fqe, nrfp, fp); /* { dg-warning \"return makes qualified function pointer from unqualified\" } */\n \n TESTARG(ofqa, fp, nrfp);\n TESTARP(ofqb, fp, nrfp);\n TESTASS(ofqc, fp, nrfp);\n TESTINI(ofqd, fp, nrfp);\n TESTRET(ofqe, fp, nrfp);\n \n-TESTARG(qa, char *, const char *); /* { dg-warning \"warning: passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n-TESTARP(qb, char *, const char *); /* { dg-warning \"warning: passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n-TESTASS(qc, char *, const char *); /* { dg-warning \"warning: assignment discards qualifiers from pointer target type\" } */\n-TESTINI(qd, char *, const char *); /* { dg-warning \"warning: initialization discards qualifiers from pointer target type\" } */\n-TESTRET(qe, char *, const char *); /* { dg-warning \"warning: return discards qualifiers from pointer target type\" } */\n+TESTARG(qa, char *, const char *); /* { dg-warning \"passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n+TESTARP(qb, char *, const char *); /* { dg-warning \"passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n+TESTASS(qc, char *, const char *); /* { dg-warning \"assignment discards qualifiers from pointer target type\" } */\n+TESTINI(qd, char *, const char *); /* { dg-warning \"initialization discards qualifiers from pointer target type\" } */\n+TESTRET(qe, char *, const char *); /* { dg-warning \"return discards qualifiers from pointer target type\" } */\n \n TESTARG(oqa, const char *, char *);\n TESTARP(oqb, const char *, char *);\n TESTASS(oqc, const char *, char *);\n TESTINI(oqd, const char *, char *);\n TESTRET(oqe, const char *, char *);\n \n-TESTARG(fda, fp, void *); /* { dg-warning \"warning: ISO C forbids passing argument 1 of 'fdaF' between function pointer and 'void \\\\*'\" } */\n-TESTARP(fdb, fp, void *); /* { dg-warning \"warning: ISO C forbids passing argument 1 of 'fdbFp.x' between function pointer and 'void \\\\*'\" } */\n-TESTASS(fdc, fp, void *); /* { dg-warning \"warning: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n-TESTINI(fdd, fp, void *); /* { dg-warning \"warning: ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n-TESTRET(fde, fp, void *); /* { dg-warning \"warning: ISO C forbids return between function pointer and 'void \\\\*'\" } */\n-\n-TESTARG(dfa, void *, fp); /* { dg-warning \"warning: ISO C forbids passing argument 1 of 'dfaF' between function pointer and 'void \\\\*'\" } */\n-TESTARP(dfb, void *, fp); /* { dg-warning \"warning: ISO C forbids passing argument 1 of 'dfbFp.x' between function pointer and 'void \\\\*'\" } */\n-TESTASS(dfc, void *, fp); /* { dg-warning \"warning: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n-TESTINI(dfd, void *, fp); /* { dg-warning \"warning: ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n-TESTRET(dfe, void *, fp); /* { dg-warning \"warning: ISO C forbids return between function pointer and 'void \\\\*'\" } */\n-\n-TESTARG(sua, int *, unsigned int *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n-TESTARP(sub, int *, unsigned int *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n-TESTASS(suc, int *, unsigned int *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(sud, int *, unsigned int *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(sue, int *, unsigned int *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(usa, unsigned int *, int *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n-TESTARP(usb, unsigned int *, int *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n-TESTASS(usc, unsigned int *, int *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(usd, unsigned int *, int *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(use, unsigned int *, int *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(cua, char *, unsigned char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n-TESTARP(cub, char *, unsigned char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n-TESTASS(cuc, char *, unsigned char *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(cud, char *, unsigned char *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(cue, char *, unsigned char *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(uca, unsigned char *, char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n-TESTARP(ucb, unsigned char *, char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n-TESTASS(ucc, unsigned char *, char *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(ucd, unsigned char *, char *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(uce, unsigned char *, char *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(csa, char *, signed char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n-TESTARP(csb, char *, signed char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n-TESTASS(csc, char *, signed char *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(csd, char *, signed char *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(cse, char *, signed char *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(sca, signed char *, char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n-TESTARP(scb, signed char *, char *); /* { dg-warning \"warning: pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n-TESTASS(scc, signed char *, char *); /* { dg-warning \"warning: pointer targets in assignment differ in signedness\" } */\n-TESTINI(scd, signed char *, char *); /* { dg-warning \"warning: pointer targets in initialization differ in signedness\" } */\n-TESTRET(sce, signed char *, char *); /* { dg-warning \"warning: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(cia, char *, int *); /* { dg-warning \"warning: passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n-TESTARP(cib, char *, int *); /* { dg-warning \"warning: passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n-TESTASS(cic, char *, int *); /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n-TESTINI(cid, char *, int *); /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n-TESTRET(cie, char *, int *); /* { dg-warning \"warning: return from incompatible pointer type\" } */\n-\n-TESTARG(ica, int *, char *); /* { dg-warning \"warning: passing argument 1 of 'icaF' from incompatible pointer type\" } */\n-TESTARP(icb, int *, char *); /* { dg-warning \"warning: passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n-TESTASS(icc, int *, char *); /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n-TESTINI(icd, int *, char *); /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n-TESTRET(ice, int *, char *); /* { dg-warning \"warning: return from incompatible pointer type\" } */\n-\n-TESTARG(ciia, char *, int); /* { dg-warning \"warning: passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n-TESTARP(ciib, char *, int); /* { dg-warning \"warning: passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n-TESTASS(ciic, char *, int); /* { dg-warning \"warning: assignment makes pointer from integer without a cast\" } */\n-TESTINI(ciid, char *, int); /* { dg-warning \"warning: initialization makes pointer from integer without a cast\" } */\n-TESTRET(ciie, char *, int); /* { dg-warning \"warning: return makes pointer from integer without a cast\" } */\n-\n-TESTARG(iica, int, char *); /* { dg-warning \"warning: passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n-TESTARP(iicb, int, char *); /* { dg-warning \"warning: passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n-TESTASS(iicc, int, char *); /* { dg-warning \"warning: assignment makes integer from pointer without a cast\" } */\n-TESTINI(iicd, int, char *); /* { dg-warning \"warning: initialization makes integer from pointer without a cast\" } */\n-TESTRET(iice, int, char *); /* { dg-warning \"warning: return makes integer from pointer without a cast\" } */\n+TESTARG(fda, fp, void *); /* { dg-warning \"ISO C forbids passing argument 1 of 'fdaF' between function pointer and 'void \\\\*'\" } */\n+TESTARP(fdb, fp, void *); /* { dg-warning \"ISO C forbids passing argument 1 of 'fdbFp.x' between function pointer and 'void \\\\*'\" } */\n+TESTASS(fdc, fp, void *); /* { dg-warning \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+TESTINI(fdd, fp, void *); /* { dg-warning \"ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n+TESTRET(fde, fp, void *); /* { dg-warning \"ISO C forbids return between function pointer and 'void \\\\*'\" } */\n+\n+TESTARG(dfa, void *, fp); /* { dg-warning \"ISO C forbids passing argument 1 of 'dfaF' between function pointer and 'void \\\\*'\" } */\n+TESTARP(dfb, void *, fp); /* { dg-warning \"ISO C forbids passing argument 1 of 'dfbFp.x' between function pointer and 'void \\\\*'\" } */\n+TESTASS(dfc, void *, fp); /* { dg-warning \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+TESTINI(dfd, void *, fp); /* { dg-warning \"ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n+TESTRET(dfe, void *, fp); /* { dg-warning \"ISO C forbids return between function pointer and 'void \\\\*'\" } */\n+\n+TESTARG(sua, int *, unsigned int *); /* { dg-warning \"pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n+TESTARP(sub, int *, unsigned int *); /* { dg-warning \"pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n+TESTASS(suc, int *, unsigned int *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(sud, int *, unsigned int *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(sue, int *, unsigned int *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(usa, unsigned int *, int *); /* { dg-warning \"pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n+TESTARP(usb, unsigned int *, int *); /* { dg-warning \"pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n+TESTASS(usc, unsigned int *, int *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(usd, unsigned int *, int *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(use, unsigned int *, int *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(cua, char *, unsigned char *); /* { dg-warning \"pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n+TESTARP(cub, char *, unsigned char *); /* { dg-warning \"pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n+TESTASS(cuc, char *, unsigned char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(cud, char *, unsigned char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(cue, char *, unsigned char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(uca, unsigned char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n+TESTARP(ucb, unsigned char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n+TESTASS(ucc, unsigned char *, char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(ucd, unsigned char *, char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(uce, unsigned char *, char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(csa, char *, signed char *); /* { dg-warning \"pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n+TESTARP(csb, char *, signed char *); /* { dg-warning \"pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n+TESTASS(csc, char *, signed char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(csd, char *, signed char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(cse, char *, signed char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(sca, signed char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n+TESTARP(scb, signed char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n+TESTASS(scc, signed char *, char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(scd, signed char *, char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(sce, signed char *, char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(cia, char *, int *); /* { dg-warning \"passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n+TESTARP(cib, char *, int *); /* { dg-warning \"passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n+TESTASS(cic, char *, int *); /* { dg-warning \"assignment from incompatible pointer type\" } */\n+TESTINI(cid, char *, int *); /* { dg-warning \"initialization from incompatible pointer type\" } */\n+TESTRET(cie, char *, int *); /* { dg-warning \"return from incompatible pointer type\" } */\n+\n+TESTARG(ica, int *, char *); /* { dg-warning \"passing argument 1 of 'icaF' from incompatible pointer type\" } */\n+TESTARP(icb, int *, char *); /* { dg-warning \"passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n+TESTASS(icc, int *, char *); /* { dg-warning \"assignment from incompatible pointer type\" } */\n+TESTINI(icd, int *, char *); /* { dg-warning \"initialization from incompatible pointer type\" } */\n+TESTRET(ice, int *, char *); /* { dg-warning \"return from incompatible pointer type\" } */\n+\n+TESTARG(ciia, char *, int); /* { dg-warning \"passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n+TESTARP(ciib, char *, int); /* { dg-warning \"passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n+TESTASS(ciic, char *, int); /* { dg-warning \"assignment makes pointer from integer without a cast\" } */\n+TESTINI(ciid, char *, int); /* { dg-warning \"initialization makes pointer from integer without a cast\" } */\n+TESTRET(ciie, char *, int); /* { dg-warning \"return makes pointer from integer without a cast\" } */\n+\n+TESTARG(iica, int, char *); /* { dg-warning \"passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n+TESTARP(iicb, int, char *); /* { dg-warning \"passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n+TESTASS(iicc, int, char *); /* { dg-warning \"assignment makes integer from pointer without a cast\" } */\n+TESTINI(iicd, int, char *); /* { dg-warning \"initialization makes integer from pointer without a cast\" } */\n+TESTRET(iice, int, char *); /* { dg-warning \"return makes integer from pointer without a cast\" } */\n \n struct s { int a; };\n \n-TESTARG(stria, struct s, int); /* { dg-error \"error: incompatible type for argument 1 of 'striaF'\" } */\n-TESTARP(strib, struct s, int); /* { dg-error \"error: incompatible type for argument 1 of 'stribFp.x'\" } */\n-TESTASS(stric, struct s, int); /* { dg-error \"error: incompatible types in assignment\" } */\n-TESTINI(strid, struct s, int); /* { dg-error \"error: invalid initializer\" } */\n-TESTRET(strie, struct s, int); /* { dg-error \"error: incompatible types in return\" } */\n-\n-TESTARG(istra, int, struct s); /* { dg-error \"error: incompatible type for argument 1 of 'istraF'\" } */\n-TESTARP(istrb, int, struct s); /* { dg-error \"error: incompatible type for argument 1 of 'istrbFp.x'\" } */\n-TESTASS(istrc, int, struct s); /* { dg-error \"error: incompatible types in assignment\" } */\n-TESTINI(istrd, int, struct s); /* { dg-error \"error: incompatible types in initialization\" } */\n-TESTRET(istre, int, struct s); /* { dg-error \"error: incompatible types in return\" } */\n+TESTARG(stria, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'striaF'\" } */\n+TESTARP(strib, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'stribFp.x'\" } */\n+TESTASS(stric, struct s, int); /* { dg-error \"incompatible types in assignment\" } */\n+TESTINI(strid, struct s, int); /* { dg-error \"invalid initializer\" } */\n+TESTRET(strie, struct s, int); /* { dg-error \"incompatible types in return\" } */\n+\n+TESTARG(istra, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istraF'\" } */\n+TESTARP(istrb, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istrbFp.x'\" } */\n+TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types in assignment\" } */\n+TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types in initialization\" } */\n+TESTRET(istre, int, struct s); /* { dg-error \"incompatible types in return\" } */"}, {"sha": "0ef6ebe33b351fdf8fb8cb3efc446ae714fddaca", "filename": "gcc/testsuite/gcc.dg/assign-warn-2.c", "status": "modified", "additions": 92, "deletions": 92, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -13,112 +13,112 @@\n typedef void (*fp)(void);\n typedef void (*nrfp)(void) __attribute__((noreturn));\n \n-TESTARG(fqa, nrfp, fp); /* { dg-error \"error: passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n-TESTARP(fqb, nrfp, fp); /* { dg-error \"error: passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n-TESTASS(fqc, nrfp, fp); /* { dg-error \"error: assignment makes qualified function pointer from unqualified\" } */\n-TESTINI(fqd, nrfp, fp); /* { dg-error \"error: initialization makes qualified function pointer from unqualified\" } */\n-TESTRET(fqe, nrfp, fp); /* { dg-error \"error: return makes qualified function pointer from unqualified\" } */\n+TESTARG(fqa, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n+TESTARP(fqb, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n+TESTASS(fqc, nrfp, fp); /* { dg-error \"assignment makes qualified function pointer from unqualified\" } */\n+TESTINI(fqd, nrfp, fp); /* { dg-error \"initialization makes qualified function pointer from unqualified\" } */\n+TESTRET(fqe, nrfp, fp); /* { dg-error \"return makes qualified function pointer from unqualified\" } */\n \n TESTARG(ofqa, fp, nrfp);\n TESTARP(ofqb, fp, nrfp);\n TESTASS(ofqc, fp, nrfp);\n TESTINI(ofqd, fp, nrfp);\n TESTRET(ofqe, fp, nrfp);\n \n-TESTARG(qa, char *, const char *); /* { dg-error \"error: passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n-TESTARP(qb, char *, const char *); /* { dg-error \"error: passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n-TESTASS(qc, char *, const char *); /* { dg-error \"error: assignment discards qualifiers from pointer target type\" } */\n-TESTINI(qd, char *, const char *); /* { dg-error \"error: initialization discards qualifiers from pointer target type\" } */\n-TESTRET(qe, char *, const char *); /* { dg-error \"error: return discards qualifiers from pointer target type\" } */\n+TESTARG(qa, char *, const char *); /* { dg-error \"passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n+TESTARP(qb, char *, const char *); /* { dg-error \"passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n+TESTASS(qc, char *, const char *); /* { dg-error \"assignment discards qualifiers from pointer target type\" } */\n+TESTINI(qd, char *, const char *); /* { dg-error \"initialization discards qualifiers from pointer target type\" } */\n+TESTRET(qe, char *, const char *); /* { dg-error \"return discards qualifiers from pointer target type\" } */\n \n TESTARG(oqa, const char *, char *);\n TESTARP(oqb, const char *, char *);\n TESTASS(oqc, const char *, char *);\n TESTINI(oqd, const char *, char *);\n TESTRET(oqe, const char *, char *);\n \n-TESTARG(fda, fp, void *); /* { dg-error \"error: ISO C forbids passing argument 1 of 'fdaF' between function pointer and 'void \\\\*'\" } */\n-TESTARP(fdb, fp, void *); /* { dg-error \"error: ISO C forbids passing argument 1 of 'fdbFp.x' between function pointer and 'void \\\\*'\" } */\n-TESTASS(fdc, fp, void *); /* { dg-error \"error: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n-TESTINI(fdd, fp, void *); /* { dg-error \"error: ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n-TESTRET(fde, fp, void *); /* { dg-error \"error: ISO C forbids return between function pointer and 'void \\\\*'\" } */\n-\n-TESTARG(dfa, void *, fp); /* { dg-error \"error: ISO C forbids passing argument 1 of 'dfaF' between function pointer and 'void \\\\*'\" } */\n-TESTARP(dfb, void *, fp); /* { dg-error \"error: ISO C forbids passing argument 1 of 'dfbFp.x' between function pointer and 'void \\\\*'\" } */\n-TESTASS(dfc, void *, fp); /* { dg-error \"error: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n-TESTINI(dfd, void *, fp); /* { dg-error \"error: ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n-TESTRET(dfe, void *, fp); /* { dg-error \"error: ISO C forbids return between function pointer and 'void \\\\*'\" } */\n-\n-TESTARG(sua, int *, unsigned int *); /* { dg-error \"error: pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n-TESTARP(sub, int *, unsigned int *); /* { dg-error \"error: pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n-TESTASS(suc, int *, unsigned int *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(sud, int *, unsigned int *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(sue, int *, unsigned int *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(usa, unsigned int *, int *); /* { dg-error \"error: pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n-TESTARP(usb, unsigned int *, int *); /* { dg-error \"error: pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n-TESTASS(usc, unsigned int *, int *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(usd, unsigned int *, int *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(use, unsigned int *, int *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(cua, char *, unsigned char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n-TESTARP(cub, char *, unsigned char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n-TESTASS(cuc, char *, unsigned char *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(cud, char *, unsigned char *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(cue, char *, unsigned char *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(uca, unsigned char *, char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n-TESTARP(ucb, unsigned char *, char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n-TESTASS(ucc, unsigned char *, char *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(ucd, unsigned char *, char *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(uce, unsigned char *, char *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(csa, char *, signed char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n-TESTARP(csb, char *, signed char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n-TESTASS(csc, char *, signed char *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(csd, char *, signed char *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(cse, char *, signed char *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(sca, signed char *, char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n-TESTARP(scb, signed char *, char *); /* { dg-error \"error: pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n-TESTASS(scc, signed char *, char *); /* { dg-error \"error: pointer targets in assignment differ in signedness\" } */\n-TESTINI(scd, signed char *, char *); /* { dg-error \"error: pointer targets in initialization differ in signedness\" } */\n-TESTRET(sce, signed char *, char *); /* { dg-error \"error: pointer targets in return differ in signedness\" } */\n-\n-TESTARG(cia, char *, int *); /* { dg-error \"error: passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n-TESTARP(cib, char *, int *); /* { dg-error \"error: passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n-TESTASS(cic, char *, int *); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n-TESTINI(cid, char *, int *); /* { dg-error \"error: initialization from incompatible pointer type\" } */\n-TESTRET(cie, char *, int *); /* { dg-error \"error: return from incompatible pointer type\" } */\n-\n-TESTARG(ica, int *, char *); /* { dg-error \"error: passing argument 1 of 'icaF' from incompatible pointer type\" } */\n-TESTARP(icb, int *, char *); /* { dg-error \"error: passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n-TESTASS(icc, int *, char *); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n-TESTINI(icd, int *, char *); /* { dg-error \"error: initialization from incompatible pointer type\" } */\n-TESTRET(ice, int *, char *); /* { dg-error \"error: return from incompatible pointer type\" } */\n-\n-TESTARG(ciia, char *, int); /* { dg-error \"error: passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n-TESTARP(ciib, char *, int); /* { dg-error \"error: passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n-TESTASS(ciic, char *, int); /* { dg-error \"error: assignment makes pointer from integer without a cast\" } */\n-TESTINI(ciid, char *, int); /* { dg-error \"error: initialization makes pointer from integer without a cast\" } */\n-TESTRET(ciie, char *, int); /* { dg-error \"error: return makes pointer from integer without a cast\" } */\n-\n-TESTARG(iica, int, char *); /* { dg-error \"error: passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n-TESTARP(iicb, int, char *); /* { dg-error \"error: passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n-TESTASS(iicc, int, char *); /* { dg-error \"error: assignment makes integer from pointer without a cast\" } */\n-TESTINI(iicd, int, char *); /* { dg-error \"error: initialization makes integer from pointer without a cast\" } */\n-TESTRET(iice, int, char *); /* { dg-error \"error: return makes integer from pointer without a cast\" } */\n+TESTARG(fda, fp, void *); /* { dg-error \"ISO C forbids passing argument 1 of 'fdaF' between function pointer and 'void \\\\*'\" } */\n+TESTARP(fdb, fp, void *); /* { dg-error \"ISO C forbids passing argument 1 of 'fdbFp.x' between function pointer and 'void \\\\*'\" } */\n+TESTASS(fdc, fp, void *); /* { dg-error \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+TESTINI(fdd, fp, void *); /* { dg-error \"ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n+TESTRET(fde, fp, void *); /* { dg-error \"ISO C forbids return between function pointer and 'void \\\\*'\" } */\n+\n+TESTARG(dfa, void *, fp); /* { dg-error \"ISO C forbids passing argument 1 of 'dfaF' between function pointer and 'void \\\\*'\" } */\n+TESTARP(dfb, void *, fp); /* { dg-error \"ISO C forbids passing argument 1 of 'dfbFp.x' between function pointer and 'void \\\\*'\" } */\n+TESTASS(dfc, void *, fp); /* { dg-error \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+TESTINI(dfd, void *, fp); /* { dg-error \"ISO C forbids initialization between function pointer and 'void \\\\*'\" } */\n+TESTRET(dfe, void *, fp); /* { dg-error \"ISO C forbids return between function pointer and 'void \\\\*'\" } */\n+\n+TESTARG(sua, int *, unsigned int *); /* { dg-error \"pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n+TESTARP(sub, int *, unsigned int *); /* { dg-error \"pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n+TESTASS(suc, int *, unsigned int *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(sud, int *, unsigned int *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(sue, int *, unsigned int *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(usa, unsigned int *, int *); /* { dg-error \"pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n+TESTARP(usb, unsigned int *, int *); /* { dg-error \"pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n+TESTASS(usc, unsigned int *, int *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(usd, unsigned int *, int *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(use, unsigned int *, int *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(cua, char *, unsigned char *); /* { dg-error \"pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n+TESTARP(cub, char *, unsigned char *); /* { dg-error \"pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n+TESTASS(cuc, char *, unsigned char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(cud, char *, unsigned char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(cue, char *, unsigned char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(uca, unsigned char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n+TESTARP(ucb, unsigned char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n+TESTASS(ucc, unsigned char *, char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(ucd, unsigned char *, char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(uce, unsigned char *, char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(csa, char *, signed char *); /* { dg-error \"pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n+TESTARP(csb, char *, signed char *); /* { dg-error \"pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n+TESTASS(csc, char *, signed char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(csd, char *, signed char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(cse, char *, signed char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(sca, signed char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n+TESTARP(scb, signed char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n+TESTASS(scc, signed char *, char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n+TESTINI(scd, signed char *, char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n+TESTRET(sce, signed char *, char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+\n+TESTARG(cia, char *, int *); /* { dg-error \"passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n+TESTARP(cib, char *, int *); /* { dg-error \"passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n+TESTASS(cic, char *, int *); /* { dg-error \"assignment from incompatible pointer type\" } */\n+TESTINI(cid, char *, int *); /* { dg-error \"initialization from incompatible pointer type\" } */\n+TESTRET(cie, char *, int *); /* { dg-error \"return from incompatible pointer type\" } */\n+\n+TESTARG(ica, int *, char *); /* { dg-error \"passing argument 1 of 'icaF' from incompatible pointer type\" } */\n+TESTARP(icb, int *, char *); /* { dg-error \"passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n+TESTASS(icc, int *, char *); /* { dg-error \"assignment from incompatible pointer type\" } */\n+TESTINI(icd, int *, char *); /* { dg-error \"initialization from incompatible pointer type\" } */\n+TESTRET(ice, int *, char *); /* { dg-error \"return from incompatible pointer type\" } */\n+\n+TESTARG(ciia, char *, int); /* { dg-error \"passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n+TESTARP(ciib, char *, int); /* { dg-error \"passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n+TESTASS(ciic, char *, int); /* { dg-error \"assignment makes pointer from integer without a cast\" } */\n+TESTINI(ciid, char *, int); /* { dg-error \"initialization makes pointer from integer without a cast\" } */\n+TESTRET(ciie, char *, int); /* { dg-error \"return makes pointer from integer without a cast\" } */\n+\n+TESTARG(iica, int, char *); /* { dg-error \"passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n+TESTARP(iicb, int, char *); /* { dg-error \"passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n+TESTASS(iicc, int, char *); /* { dg-error \"assignment makes integer from pointer without a cast\" } */\n+TESTINI(iicd, int, char *); /* { dg-error \"initialization makes integer from pointer without a cast\" } */\n+TESTRET(iice, int, char *); /* { dg-error \"return makes integer from pointer without a cast\" } */\n \n struct s { int a; };\n \n-TESTARG(stria, struct s, int); /* { dg-error \"error: incompatible type for argument 1 of 'striaF'\" } */\n-TESTARP(strib, struct s, int); /* { dg-error \"error: incompatible type for argument 1 of 'stribFp.x'\" } */\n-TESTASS(stric, struct s, int); /* { dg-error \"error: incompatible types in assignment\" } */\n-TESTINI(strid, struct s, int); /* { dg-error \"error: invalid initializer\" } */\n-TESTRET(strie, struct s, int); /* { dg-error \"error: incompatible types in return\" } */\n-\n-TESTARG(istra, int, struct s); /* { dg-error \"error: incompatible type for argument 1 of 'istraF'\" } */\n-TESTARP(istrb, int, struct s); /* { dg-error \"error: incompatible type for argument 1 of 'istrbFp.x'\" } */\n-TESTASS(istrc, int, struct s); /* { dg-error \"error: incompatible types in assignment\" } */\n-TESTINI(istrd, int, struct s); /* { dg-error \"error: incompatible types in initialization\" } */\n-TESTRET(istre, int, struct s); /* { dg-error \"error: incompatible types in return\" } */\n+TESTARG(stria, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'striaF'\" } */\n+TESTARP(strib, struct s, int); /* { dg-error \"incompatible type for argument 1 of 'stribFp.x'\" } */\n+TESTASS(stric, struct s, int); /* { dg-error \"incompatible types in assignment\" } */\n+TESTINI(strid, struct s, int); /* { dg-error \"invalid initializer\" } */\n+TESTRET(strie, struct s, int); /* { dg-error \"incompatible types in return\" } */\n+\n+TESTARG(istra, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istraF'\" } */\n+TESTARP(istrb, int, struct s); /* { dg-error \"incompatible type for argument 1 of 'istrbFp.x'\" } */\n+TESTASS(istrc, int, struct s); /* { dg-error \"incompatible types in assignment\" } */\n+TESTINI(istrd, int, struct s); /* { dg-error \"incompatible types in initialization\" } */\n+TESTRET(istre, int, struct s); /* { dg-error \"incompatible types in return\" } */"}, {"sha": "ce722314919d32aa06db3b706bc0c0343da751e0", "filename": "gcc/testsuite/gcc.dg/bitfld-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-10.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n \n struct { int a : 1; } x;\n \n-int r = sizeof (x.a); /* { dg-error \"error: 'sizeof' applied to a bit-field\" } */\n+int r = sizeof (x.a); /* { dg-error \"'sizeof' applied to a bit-field\" } */"}, {"sha": "c7fe6a510aa2b21b2a565566689e6e656929e730", "filename": "gcc/testsuite/gcc.dg/bitfld-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-11.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n \n struct { int a : 1; } x;\n \n-int r = __alignof (x.a); /* { dg-error \"error: '__alignof' applied to a bit-field\" } */\n+int r = __alignof (x.a); /* { dg-error \"'__alignof' applied to a bit-field\" } */"}, {"sha": "1270d9b340f3896a1e9d172be54c383c3bb6c754", "filename": "gcc/testsuite/gcc.dg/bitfld-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-12.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,6 +7,6 @@\n \n struct s { int a : 1; } x, *y;\n \n-int a = offsetof (struct s, a); /* { dg-error \"error: attempt to take address of bit-field structure member 'a'\" } */\n-void *b = &x.a; /* { dg-error \"error: cannot take address of bit-field 'a'\" } */\n-void *c = &y->a; /* { dg-error \"error: cannot take address of bit-field 'a'\" } */\n+int a = offsetof (struct s, a); /* { dg-error \"attempt to take address of bit-field structure member 'a'\" } */\n+void *b = &x.a; /* { dg-error \"cannot take address of bit-field 'a'\" } */\n+void *c = &y->a; /* { dg-error \"cannot take address of bit-field 'a'\" } */"}, {"sha": "fcb381c86b6b601897db9f06c6e733676a122ff0", "filename": "gcc/testsuite/gcc.dg/bitfld-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-13.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,9 +6,9 @@ int\n main(void)\n {\n   struct X {\n-    int s[20] : 1; /* { dg-error \"error: bit-field 's' has invalid type\" } */\n-    int *p : 2; /* { dg-error \"error: bit-field 'p' has invalid type\" } */\n-    int (*f)(float) : 3; /* { dg-error \"error: bit-field 'f' has invalid type\" } */\n+    int s[20] : 1; /* { dg-error \"bit-field 's' has invalid type\" } */\n+    int *p : 2; /* { dg-error \"bit-field 'p' has invalid type\" } */\n+    int (*f)(float) : 3; /* { dg-error \"bit-field 'f' has invalid type\" } */\n   } x;\n   return 0;\n }"}, {"sha": "de1971cd20997322b4ada02260ccab73a797813a", "filename": "gcc/testsuite/gcc.dg/bitfld-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-14.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,7 +5,7 @@\n \n enum e { E, F };\n struct s {\n-  int a : (void *)4; /* { dg-error \"error: bit-field 'a' width not an integer constant\" } */\n+  int a : (void *)4; /* { dg-error \"bit-field 'a' width not an integer constant\" } */\n   int b : (enum e)F;\n   int c : (_Bool)1;\n };"}, {"sha": "d986b405ff03f7ab63c62dad67cc5cf16b9d5277", "filename": "gcc/testsuite/gcc.dg/builtin-choose-expr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,5 +8,5 @@ int a, b, c, d;\n void\n f (void)\n {\n-  a = __builtin_choose_expr (b, c, d); /* { dg-error \"error: first argument to '__builtin_choose_expr' not a constant\" } */\n+  a = __builtin_choose_expr (b, c, d); /* { dg-error \"first argument to '__builtin_choose_expr' not a constant\" } */\n }"}, {"sha": "f4e9859f98b48f3d9725f49bf920697781cc871f", "filename": "gcc/testsuite/gcc.dg/builtins-30.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,22 +8,22 @@ extern double strtod (const char *, char **);\n    specifying too few arguments... */\n double cos ()\n {  /* { dg-warning \"shadows a built-in\" } */\n-  /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" \"built-in\" { target *-*-* } 10 } */\n+  /* { dg-warning \"number of arguments doesn't match built-in prototype\" \"built-in\" { target *-*-* } 10 } */\n   return strtod (\"nan\", 0);\n }\n \n /* the right number, but the wrong type, arguments... */\n double sin (foo)\n      int foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n-{  /* { dg-warning \"warning: argument 'foo' doesn't match built-in prototype\" } */\n+{  /* { dg-warning \"argument 'foo' doesn't match built-in prototype\" } */\n   return strtod (\"nan\", 0);\n }\n \n /* or too many arguments.  */\n long double cosl (foo, bar)\n      const char *foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n      int bar UNUSED;\n-{  /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" } */\n-  /* { dg-warning \"warning: argument 'foo' doesn't match built-in prototype\" \"foo\" { target *-*-* } 26 } */\n+{  /* { dg-warning \"number of arguments doesn't match built-in prototype\" } */\n+  /* { dg-warning \"argument 'foo' doesn't match built-in prototype\" \"foo\" { target *-*-* } 26 } */\n   return strtod (\"nan\", 0);\n }"}, {"sha": "ca7250854412b0016f330a0828d04818b47f40f4", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,14 +15,14 @@ f (void)\n {\n   /* (V *)0 is a null pointer constant, so the assignment should be\n      diagnosed.  */\n-  q = (j ? p : (V *)0); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n-  q = (j ? p : (void *)0); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n+  q = (j ? p : (V *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n+  q = (j ? p : (void *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n   /* And this conversion should be valid.  */\n   (void (*)(void))(V *)0;\n   (void (*)(void))(void *)0;\n   /* Pointers to qualified void are not valid null pointer\n      constants.  */\n-  fp = (const void *)0; /* { dg-error \"error: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+  fp = (const void *)0; /* { dg-error \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n   fp = (void *)0;\n   fp = (V *)0;\n   fp = 0;\n@@ -32,8 +32,8 @@ f (void)\n   (void *)0 == fp;\n   fp == (V *)0;\n   (V *)0 == fp;\n-  fp == (V *)1; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  (V *)1 == fp; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  fp == (const void *)0; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  (const void *)0 == fp; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  fp == (V *)1; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  (V *)1 == fp; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  fp == (const void *)0; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  (const void *)0 == fp; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n }"}, {"sha": "e32111b632a4e7c329596d193ca0eb15df496944", "filename": "gcc/testsuite/gcc.dg/c90-typespec-1.c", "status": "modified", "additions": 458, "deletions": 458, "changes": 916, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-typespec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-typespec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-typespec-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,507 +16,507 @@ double *x7;\n signed *x8;\n unsigned *x9;\n type *x10;\n-void void *x11; /* { dg-error \"error\" \"void void\" } */\n-void char *x12; /* { dg-error \"error\" \"void char\" } */\n-void short *x13; /* { dg-error \"error\" \"void short\" } */\n-void int *x14; /* { dg-error \"error\" \"void int\" } */\n-void long *x15; /* { dg-error \"error\" \"void long\" } */\n-void float *x16; /* { dg-error \"error\" \"void float\" } */\n-void double *x17; /* { dg-error \"error\" \"void double\" } */\n-void signed *x18; /* { dg-error \"error\" \"void signed\" } */\n-void unsigned *x19; /* { dg-error \"error\" \"void unsigned\" } */\n-char void *x20; /* { dg-error \"error\" \"char void\" } */\n-char char *x21; /* { dg-error \"error\" \"char char\" } */\n-char short *x22; /* { dg-error \"error\" \"char short\" } */\n-char int *x23; /* { dg-error \"error\" \"char int\" } */\n-char long *x24; /* { dg-error \"error\" \"char long\" } */\n-char float *x25; /* { dg-error \"error\" \"char float\" } */\n-char double *x26; /* { dg-error \"error\" \"char double\" } */\n+void void *x11; /* { dg-error \"\" \"void void\" } */\n+void char *x12; /* { dg-error \"\" \"void char\" } */\n+void short *x13; /* { dg-error \"\" \"void short\" } */\n+void int *x14; /* { dg-error \"\" \"void int\" } */\n+void long *x15; /* { dg-error \"\" \"void long\" } */\n+void float *x16; /* { dg-error \"\" \"void float\" } */\n+void double *x17; /* { dg-error \"\" \"void double\" } */\n+void signed *x18; /* { dg-error \"\" \"void signed\" } */\n+void unsigned *x19; /* { dg-error \"\" \"void unsigned\" } */\n+char void *x20; /* { dg-error \"\" \"char void\" } */\n+char char *x21; /* { dg-error \"\" \"char char\" } */\n+char short *x22; /* { dg-error \"\" \"char short\" } */\n+char int *x23; /* { dg-error \"\" \"char int\" } */\n+char long *x24; /* { dg-error \"\" \"char long\" } */\n+char float *x25; /* { dg-error \"\" \"char float\" } */\n+char double *x26; /* { dg-error \"\" \"char double\" } */\n char signed *x27;\n char unsigned *x28;\n-short void *x29; /* { dg-error \"error\" \"short void\" } */\n-short char *x30; /* { dg-error \"error\" \"short char\" } */\n-short short *x31; /* { dg-error \"error\" \"short short\" } */\n+short void *x29; /* { dg-error \"\" \"short void\" } */\n+short char *x30; /* { dg-error \"\" \"short char\" } */\n+short short *x31; /* { dg-error \"\" \"short short\" } */\n short int *x32;\n-short long *x33; /* { dg-error \"error\" \"short long\" } */\n-short float *x34; /* { dg-error \"error\" \"short float\" } */\n-short double *x35; /* { dg-error \"error\" \"short double\" } */\n+short long *x33; /* { dg-error \"\" \"short long\" } */\n+short float *x34; /* { dg-error \"\" \"short float\" } */\n+short double *x35; /* { dg-error \"\" \"short double\" } */\n short signed *x36;\n short unsigned *x37;\n-int void *x38; /* { dg-error \"error\" \"int void\" } */\n-int char *x39; /* { dg-error \"error\" \"int char\" } */\n+int void *x38; /* { dg-error \"\" \"int void\" } */\n+int char *x39; /* { dg-error \"\" \"int char\" } */\n int short *x40;\n-int int *x41; /* { dg-error \"error\" \"int int\" } */\n+int int *x41; /* { dg-error \"\" \"int int\" } */\n int long *x42;\n-int float *x43; /* { dg-error \"error\" \"int float\" } */\n-int double *x44; /* { dg-error \"error\" \"int double\" } */\n+int float *x43; /* { dg-error \"\" \"int float\" } */\n+int double *x44; /* { dg-error \"\" \"int double\" } */\n int signed *x45;\n int unsigned *x46;\n-long void *x47; /* { dg-error \"error\" \"long void\" } */\n-long char *x48; /* { dg-error \"error\" \"long char\" } */\n-long short *x49; /* { dg-error \"error\" \"long short\" } */\n+long void *x47; /* { dg-error \"\" \"long void\" } */\n+long char *x48; /* { dg-error \"\" \"long char\" } */\n+long short *x49; /* { dg-error \"\" \"long short\" } */\n long int *x50;\n-long long *x51; /* { dg-error \"error\" \"long long\" } */\n-long float *x52; /* { dg-error \"error\" \"long float\" } */\n+long long *x51; /* { dg-error \"\" \"long long\" } */\n+long float *x52; /* { dg-error \"\" \"long float\" } */\n long double *x53;\n long signed *x54;\n long unsigned *x55;\n-float void *x56; /* { dg-error \"error\" \"float void\" } */\n-float char *x57; /* { dg-error \"error\" \"float char\" } */\n-float short *x58; /* { dg-error \"error\" \"float short\" } */\n-float int *x59; /* { dg-error \"error\" \"float int\" } */\n-float long *x60; /* { dg-error \"error\" \"float long\" } */\n-float float *x61; /* { dg-error \"error\" \"float float\" } */\n-float double *x62; /* { dg-error \"error\" \"float double\" } */\n-float signed *x63; /* { dg-error \"error\" \"float signed\" } */\n-float unsigned *x64; /* { dg-error \"error\" \"float unsigned\" } */\n-double void *x65; /* { dg-error \"error\" \"double void\" } */\n-double char *x66; /* { dg-error \"error\" \"double char\" } */\n-double short *x67; /* { dg-error \"error\" \"double short\" } */\n-double int *x68; /* { dg-error \"error\" \"double int\" } */\n+float void *x56; /* { dg-error \"\" \"float void\" } */\n+float char *x57; /* { dg-error \"\" \"float char\" } */\n+float short *x58; /* { dg-error \"\" \"float short\" } */\n+float int *x59; /* { dg-error \"\" \"float int\" } */\n+float long *x60; /* { dg-error \"\" \"float long\" } */\n+float float *x61; /* { dg-error \"\" \"float float\" } */\n+float double *x62; /* { dg-error \"\" \"float double\" } */\n+float signed *x63; /* { dg-error \"\" \"float signed\" } */\n+float unsigned *x64; /* { dg-error \"\" \"float unsigned\" } */\n+double void *x65; /* { dg-error \"\" \"double void\" } */\n+double char *x66; /* { dg-error \"\" \"double char\" } */\n+double short *x67; /* { dg-error \"\" \"double short\" } */\n+double int *x68; /* { dg-error \"\" \"double int\" } */\n double long *x69;\n-double float *x70; /* { dg-error \"error\" \"double float\" } */\n-double double *x71; /* { dg-error \"error\" \"double double\" } */\n-double signed *x72; /* { dg-error \"error\" \"double signed\" } */\n-double unsigned *x73; /* { dg-error \"error\" \"double unsigned\" } */\n-signed void *x74; /* { dg-error \"error\" \"signed void\" } */\n+double float *x70; /* { dg-error \"\" \"double float\" } */\n+double double *x71; /* { dg-error \"\" \"double double\" } */\n+double signed *x72; /* { dg-error \"\" \"double signed\" } */\n+double unsigned *x73; /* { dg-error \"\" \"double unsigned\" } */\n+signed void *x74; /* { dg-error \"\" \"signed void\" } */\n signed char *x75;\n signed short *x76;\n signed int *x77;\n signed long *x78;\n-signed float *x79; /* { dg-error \"error\" \"signed float\" } */\n-signed double *x80; /* { dg-error \"error\" \"signed double\" } */\n-signed signed *x81; /* { dg-error \"error\" \"signed signed\" } */\n-signed unsigned *x82; /* { dg-error \"error\" \"signed unsigned\" } */\n-unsigned void *x83; /* { dg-error \"error\" \"unsigned void\" } */\n+signed float *x79; /* { dg-error \"\" \"signed float\" } */\n+signed double *x80; /* { dg-error \"\" \"signed double\" } */\n+signed signed *x81; /* { dg-error \"\" \"signed signed\" } */\n+signed unsigned *x82; /* { dg-error \"\" \"signed unsigned\" } */\n+unsigned void *x83; /* { dg-error \"\" \"unsigned void\" } */\n unsigned char *x84;\n unsigned short *x85;\n unsigned int *x86;\n unsigned long *x87;\n-unsigned float *x88; /* { dg-error \"error\" \"unsigned float\" } */\n-unsigned double *x89; /* { dg-error \"error\" \"unsigned double\" } */\n-unsigned signed *x90; /* { dg-error \"error\" \"unsigned signed\" } */\n-unsigned unsigned *x91; /* { dg-error \"error\" \"unsigned unsigned\" } */\n-type void *x92; /* { dg-error \"error\" \"type void\" } */\n-type char *x93; /* { dg-error \"error\" \"type char\" } */\n-type short *x94; /* { dg-error \"error\" \"type short\" } */\n-type int *x95; /* { dg-error \"error\" \"type int\" } */\n-type long *x96; /* { dg-error \"error\" \"type long\" } */\n-type float *x97; /* { dg-error \"error\" \"type float\" } */\n-type double *x98; /* { dg-error \"error\" \"type double\" } */\n-type signed *x99; /* { dg-error \"error\" \"type signed\" } */\n-type unsigned *x100; /* { dg-error \"error\" \"type unsigned\" } */\n-char signed void *x101; /* { dg-error \"error\" \"char signed void\" } */\n-char signed char *x102; /* { dg-error \"error\" \"char signed char\" } */\n-char signed short *x103; /* { dg-error \"error\" \"char signed short\" } */\n-char signed int *x104; /* { dg-error \"error\" \"char signed int\" } */\n-char signed long *x105; /* { dg-error \"error\" \"char signed long\" } */\n-char signed float *x106; /* { dg-error \"error\" \"char signed float\" } */\n-char signed double *x107; /* { dg-error \"error\" \"char signed double\" } */\n-char signed signed *x108; /* { dg-error \"error\" \"char signed signed\" } */\n-char signed unsigned *x109; /* { dg-error \"error\" \"char signed unsigned\" } */\n-char unsigned void *x110; /* { dg-error \"error\" \"char unsigned void\" } */\n-char unsigned char *x111; /* { dg-error \"error\" \"char unsigned char\" } */\n-char unsigned short *x112; /* { dg-error \"error\" \"char unsigned short\" } */\n-char unsigned int *x113; /* { dg-error \"error\" \"char unsigned int\" } */\n-char unsigned long *x114; /* { dg-error \"error\" \"char unsigned long\" } */\n-char unsigned float *x115; /* { dg-error \"error\" \"char unsigned float\" } */\n-char unsigned double *x116; /* { dg-error \"error\" \"char unsigned double\" } */\n-char unsigned signed *x117; /* { dg-error \"error\" \"char unsigned signed\" } */\n-char unsigned unsigned *x118; /* { dg-error \"error\" \"char unsigned unsigned\" } */\n-short int void *x119; /* { dg-error \"error\" \"short int void\" } */\n-short int char *x120; /* { dg-error \"error\" \"short int char\" } */\n-short int short *x121; /* { dg-error \"error\" \"short int short\" } */\n-short int int *x122; /* { dg-error \"error\" \"short int int\" } */\n-short int long *x123; /* { dg-error \"error\" \"short int long\" } */\n-short int float *x124; /* { dg-error \"error\" \"short int float\" } */\n-short int double *x125; /* { dg-error \"error\" \"short int double\" } */\n+unsigned float *x88; /* { dg-error \"\" \"unsigned float\" } */\n+unsigned double *x89; /* { dg-error \"\" \"unsigned double\" } */\n+unsigned signed *x90; /* { dg-error \"\" \"unsigned signed\" } */\n+unsigned unsigned *x91; /* { dg-error \"\" \"unsigned unsigned\" } */\n+type void *x92; /* { dg-error \"\" \"type void\" } */\n+type char *x93; /* { dg-error \"\" \"type char\" } */\n+type short *x94; /* { dg-error \"\" \"type short\" } */\n+type int *x95; /* { dg-error \"\" \"type int\" } */\n+type long *x96; /* { dg-error \"\" \"type long\" } */\n+type float *x97; /* { dg-error \"\" \"type float\" } */\n+type double *x98; /* { dg-error \"\" \"type double\" } */\n+type signed *x99; /* { dg-error \"\" \"type signed\" } */\n+type unsigned *x100; /* { dg-error \"\" \"type unsigned\" } */\n+char signed void *x101; /* { dg-error \"\" \"char signed void\" } */\n+char signed char *x102; /* { dg-error \"\" \"char signed char\" } */\n+char signed short *x103; /* { dg-error \"\" \"char signed short\" } */\n+char signed int *x104; /* { dg-error \"\" \"char signed int\" } */\n+char signed long *x105; /* { dg-error \"\" \"char signed long\" } */\n+char signed float *x106; /* { dg-error \"\" \"char signed float\" } */\n+char signed double *x107; /* { dg-error \"\" \"char signed double\" } */\n+char signed signed *x108; /* { dg-error \"\" \"char signed signed\" } */\n+char signed unsigned *x109; /* { dg-error \"\" \"char signed unsigned\" } */\n+char unsigned void *x110; /* { dg-error \"\" \"char unsigned void\" } */\n+char unsigned char *x111; /* { dg-error \"\" \"char unsigned char\" } */\n+char unsigned short *x112; /* { dg-error \"\" \"char unsigned short\" } */\n+char unsigned int *x113; /* { dg-error \"\" \"char unsigned int\" } */\n+char unsigned long *x114; /* { dg-error \"\" \"char unsigned long\" } */\n+char unsigned float *x115; /* { dg-error \"\" \"char unsigned float\" } */\n+char unsigned double *x116; /* { dg-error \"\" \"char unsigned double\" } */\n+char unsigned signed *x117; /* { dg-error \"\" \"char unsigned signed\" } */\n+char unsigned unsigned *x118; /* { dg-error \"\" \"char unsigned unsigned\" } */\n+short int void *x119; /* { dg-error \"\" \"short int void\" } */\n+short int char *x120; /* { dg-error \"\" \"short int char\" } */\n+short int short *x121; /* { dg-error \"\" \"short int short\" } */\n+short int int *x122; /* { dg-error \"\" \"short int int\" } */\n+short int long *x123; /* { dg-error \"\" \"short int long\" } */\n+short int float *x124; /* { dg-error \"\" \"short int float\" } */\n+short int double *x125; /* { dg-error \"\" \"short int double\" } */\n short int signed *x126;\n short int unsigned *x127;\n-short signed void *x128; /* { dg-error \"error\" \"short signed void\" } */\n-short signed char *x129; /* { dg-error \"error\" \"short signed char\" } */\n-short signed short *x130; /* { dg-error \"error\" \"short signed short\" } */\n+short signed void *x128; /* { dg-error \"\" \"short signed void\" } */\n+short signed char *x129; /* { dg-error \"\" \"short signed char\" } */\n+short signed short *x130; /* { dg-error \"\" \"short signed short\" } */\n short signed int *x131;\n-short signed long *x132; /* { dg-error \"error\" \"short signed long\" } */\n-short signed float *x133; /* { dg-error \"error\" \"short signed float\" } */\n-short signed double *x134; /* { dg-error \"error\" \"short signed double\" } */\n-short signed signed *x135; /* { dg-error \"error\" \"short signed signed\" } */\n-short signed unsigned *x136; /* { dg-error \"error\" \"short signed unsigned\" } */\n-short unsigned void *x137; /* { dg-error \"error\" \"short unsigned void\" } */\n-short unsigned char *x138; /* { dg-error \"error\" \"short unsigned char\" } */\n-short unsigned short *x139; /* { dg-error \"error\" \"short unsigned short\" } */\n+short signed long *x132; /* { dg-error \"\" \"short signed long\" } */\n+short signed float *x133; /* { dg-error \"\" \"short signed float\" } */\n+short signed double *x134; /* { dg-error \"\" \"short signed double\" } */\n+short signed signed *x135; /* { dg-error \"\" \"short signed signed\" } */\n+short signed unsigned *x136; /* { dg-error \"\" \"short signed unsigned\" } */\n+short unsigned void *x137; /* { dg-error \"\" \"short unsigned void\" } */\n+short unsigned char *x138; /* { dg-error \"\" \"short unsigned char\" } */\n+short unsigned short *x139; /* { dg-error \"\" \"short unsigned short\" } */\n short unsigned int *x140;\n-short unsigned long *x141; /* { dg-error \"error\" \"short unsigned long\" } */\n-short unsigned float *x142; /* { dg-error \"error\" \"short unsigned float\" } */\n-short unsigned double *x143; /* { dg-error \"error\" \"short unsigned double\" } */\n-short unsigned signed *x144; /* { dg-error \"error\" \"short unsigned signed\" } */\n-short unsigned unsigned *x145; /* { dg-error \"error\" \"short unsigned unsigned\" } */\n-int short void *x146; /* { dg-error \"error\" \"int short void\" } */\n-int short char *x147; /* { dg-error \"error\" \"int short char\" } */\n-int short short *x148; /* { dg-error \"error\" \"int short short\" } */\n-int short int *x149; /* { dg-error \"error\" \"int short int\" } */\n-int short long *x150; /* { dg-error \"error\" \"int short long\" } */\n-int short float *x151; /* { dg-error \"error\" \"int short float\" } */\n-int short double *x152; /* { dg-error \"error\" \"int short double\" } */\n+short unsigned long *x141; /* { dg-error \"\" \"short unsigned long\" } */\n+short unsigned float *x142; /* { dg-error \"\" \"short unsigned float\" } */\n+short unsigned double *x143; /* { dg-error \"\" \"short unsigned double\" } */\n+short unsigned signed *x144; /* { dg-error \"\" \"short unsigned signed\" } */\n+short unsigned unsigned *x145; /* { dg-error \"\" \"short unsigned unsigned\" } */\n+int short void *x146; /* { dg-error \"\" \"int short void\" } */\n+int short char *x147; /* { dg-error \"\" \"int short char\" } */\n+int short short *x148; /* { dg-error \"\" \"int short short\" } */\n+int short int *x149; /* { dg-error \"\" \"int short int\" } */\n+int short long *x150; /* { dg-error \"\" \"int short long\" } */\n+int short float *x151; /* { dg-error \"\" \"int short float\" } */\n+int short double *x152; /* { dg-error \"\" \"int short double\" } */\n int short signed *x153;\n int short unsigned *x154;\n-int long void *x155; /* { dg-error \"error\" \"int long void\" } */\n-int long char *x156; /* { dg-error \"error\" \"int long char\" } */\n-int long short *x157; /* { dg-error \"error\" \"int long short\" } */\n-int long int *x158; /* { dg-error \"error\" \"int long int\" } */\n-int long long *x159; /* { dg-error \"error\" \"int long long\" } */\n-int long float *x160; /* { dg-error \"error\" \"int long float\" } */\n-int long double *x161; /* { dg-error \"error\" \"int long double\" } */\n+int long void *x155; /* { dg-error \"\" \"int long void\" } */\n+int long char *x156; /* { dg-error \"\" \"int long char\" } */\n+int long short *x157; /* { dg-error \"\" \"int long short\" } */\n+int long int *x158; /* { dg-error \"\" \"int long int\" } */\n+int long long *x159; /* { dg-error \"\" \"int long long\" } */\n+int long float *x160; /* { dg-error \"\" \"int long float\" } */\n+int long double *x161; /* { dg-error \"\" \"int long double\" } */\n int long signed *x162;\n int long unsigned *x163;\n-int signed void *x164; /* { dg-error \"error\" \"int signed void\" } */\n-int signed char *x165; /* { dg-error \"error\" \"int signed char\" } */\n+int signed void *x164; /* { dg-error \"\" \"int signed void\" } */\n+int signed char *x165; /* { dg-error \"\" \"int signed char\" } */\n int signed short *x166;\n-int signed int *x167; /* { dg-error \"error\" \"int signed int\" } */\n+int signed int *x167; /* { dg-error \"\" \"int signed int\" } */\n int signed long *x168;\n-int signed float *x169; /* { dg-error \"error\" \"int signed float\" } */\n-int signed double *x170; /* { dg-error \"error\" \"int signed double\" } */\n-int signed signed *x171; /* { dg-error \"error\" \"int signed signed\" } */\n-int signed unsigned *x172; /* { dg-error \"error\" \"int signed unsigned\" } */\n-int unsigned void *x173; /* { dg-error \"error\" \"int unsigned void\" } */\n-int unsigned char *x174; /* { dg-error \"error\" \"int unsigned char\" } */\n+int signed float *x169; /* { dg-error \"\" \"int signed float\" } */\n+int signed double *x170; /* { dg-error \"\" \"int signed double\" } */\n+int signed signed *x171; /* { dg-error \"\" \"int signed signed\" } */\n+int signed unsigned *x172; /* { dg-error \"\" \"int signed unsigned\" } */\n+int unsigned void *x173; /* { dg-error \"\" \"int unsigned void\" } */\n+int unsigned char *x174; /* { dg-error \"\" \"int unsigned char\" } */\n int unsigned short *x175;\n-int unsigned int *x176; /* { dg-error \"error\" \"int unsigned int\" } */\n+int unsigned int *x176; /* { dg-error \"\" \"int unsigned int\" } */\n int unsigned long *x177;\n-int unsigned float *x178; /* { dg-error \"error\" \"int unsigned float\" } */\n-int unsigned double *x179; /* { dg-error \"error\" \"int unsigned double\" } */\n-int unsigned signed *x180; /* { dg-error \"error\" \"int unsigned signed\" } */\n-int unsigned unsigned *x181; /* { dg-error \"error\" \"int unsigned unsigned\" } */\n-long int void *x182; /* { dg-error \"error\" \"long int void\" } */\n-long int char *x183; /* { dg-error \"error\" \"long int char\" } */\n-long int short *x184; /* { dg-error \"error\" \"long int short\" } */\n-long int int *x185; /* { dg-error \"error\" \"long int int\" } */\n-long int long *x186; /* { dg-error \"error\" \"long int long\" } */\n-long int float *x187; /* { dg-error \"error\" \"long int float\" } */\n-long int double *x188; /* { dg-error \"error\" \"long int double\" } */\n+int unsigned float *x178; /* { dg-error \"\" \"int unsigned float\" } */\n+int unsigned double *x179; /* { dg-error \"\" \"int unsigned double\" } */\n+int unsigned signed *x180; /* { dg-error \"\" \"int unsigned signed\" } */\n+int unsigned unsigned *x181; /* { dg-error \"\" \"int unsigned unsigned\" } */\n+long int void *x182; /* { dg-error \"\" \"long int void\" } */\n+long int char *x183; /* { dg-error \"\" \"long int char\" } */\n+long int short *x184; /* { dg-error \"\" \"long int short\" } */\n+long int int *x185; /* { dg-error \"\" \"long int int\" } */\n+long int long *x186; /* { dg-error \"\" \"long int long\" } */\n+long int float *x187; /* { dg-error \"\" \"long int float\" } */\n+long int double *x188; /* { dg-error \"\" \"long int double\" } */\n long int signed *x189;\n long int unsigned *x190;\n-long double void *x191; /* { dg-error \"error\" \"long double void\" } */\n-long double char *x192; /* { dg-error \"error\" \"long double char\" } */\n-long double short *x193; /* { dg-error \"error\" \"long double short\" } */\n-long double int *x194; /* { dg-error \"error\" \"long double int\" } */\n-long double long *x195; /* { dg-error \"error\" \"long double long\" } */\n-long double float *x196; /* { dg-error \"error\" \"long double float\" } */\n-long double double *x197; /* { dg-error \"error\" \"long double double\" } */\n-long double signed *x198; /* { dg-error \"error\" \"long double signed\" } */\n-long double unsigned *x199; /* { dg-error \"error\" \"long double unsigned\" } */\n-long signed void *x200; /* { dg-error \"error\" \"long signed void\" } */\n-long signed char *x201; /* { dg-error \"error\" \"long signed char\" } */\n-long signed short *x202; /* { dg-error \"error\" \"long signed short\" } */\n+long double void *x191; /* { dg-error \"\" \"long double void\" } */\n+long double char *x192; /* { dg-error \"\" \"long double char\" } */\n+long double short *x193; /* { dg-error \"\" \"long double short\" } */\n+long double int *x194; /* { dg-error \"\" \"long double int\" } */\n+long double long *x195; /* { dg-error \"\" \"long double long\" } */\n+long double float *x196; /* { dg-error \"\" \"long double float\" } */\n+long double double *x197; /* { dg-error \"\" \"long double double\" } */\n+long double signed *x198; /* { dg-error \"\" \"long double signed\" } */\n+long double unsigned *x199; /* { dg-error \"\" \"long double unsigned\" } */\n+long signed void *x200; /* { dg-error \"\" \"long signed void\" } */\n+long signed char *x201; /* { dg-error \"\" \"long signed char\" } */\n+long signed short *x202; /* { dg-error \"\" \"long signed short\" } */\n long signed int *x203;\n-long signed long *x204; /* { dg-error \"error\" \"long signed long\" } */\n-long signed float *x205; /* { dg-error \"error\" \"long signed float\" } */\n-long signed double *x206; /* { dg-error \"error\" \"long signed double\" } */\n-long signed signed *x207; /* { dg-error \"error\" \"long signed signed\" } */\n-long signed unsigned *x208; /* { dg-error \"error\" \"long signed unsigned\" } */\n-long unsigned void *x209; /* { dg-error \"error\" \"long unsigned void\" } */\n-long unsigned char *x210; /* { dg-error \"error\" \"long unsigned char\" } */\n-long unsigned short *x211; /* { dg-error \"error\" \"long unsigned short\" } */\n+long signed long *x204; /* { dg-error \"\" \"long signed long\" } */\n+long signed float *x205; /* { dg-error \"\" \"long signed float\" } */\n+long signed double *x206; /* { dg-error \"\" \"long signed double\" } */\n+long signed signed *x207; /* { dg-error \"\" \"long signed signed\" } */\n+long signed unsigned *x208; /* { dg-error \"\" \"long signed unsigned\" } */\n+long unsigned void *x209; /* { dg-error \"\" \"long unsigned void\" } */\n+long unsigned char *x210; /* { dg-error \"\" \"long unsigned char\" } */\n+long unsigned short *x211; /* { dg-error \"\" \"long unsigned short\" } */\n long unsigned int *x212;\n-long unsigned long *x213; /* { dg-error \"error\" \"long unsigned long\" } */\n-long unsigned float *x214; /* { dg-error \"error\" \"long unsigned float\" } */\n-long unsigned double *x215; /* { dg-error \"error\" \"long unsigned double\" } */\n-long unsigned signed *x216; /* { dg-error \"error\" \"long unsigned signed\" } */\n-long unsigned unsigned *x217; /* { dg-error \"error\" \"long unsigned unsigned\" } */\n-double long void *x218; /* { dg-error \"error\" \"double long void\" } */\n-double long char *x219; /* { dg-error \"error\" \"double long char\" } */\n-double long short *x220; /* { dg-error \"error\" \"double long short\" } */\n-double long int *x221; /* { dg-error \"error\" \"double long int\" } */\n-double long long *x222; /* { dg-error \"error\" \"double long long\" } */\n-double long float *x223; /* { dg-error \"error\" \"double long float\" } */\n-double long double *x224; /* { dg-error \"error\" \"double long double\" } */\n-double long signed *x225; /* { dg-error \"error\" \"double long signed\" } */\n-double long unsigned *x226; /* { dg-error \"error\" \"double long unsigned\" } */\n-signed char void *x227; /* { dg-error \"error\" \"signed char void\" } */\n-signed char char *x228; /* { dg-error \"error\" \"signed char char\" } */\n-signed char short *x229; /* { dg-error \"error\" \"signed char short\" } */\n-signed char int *x230; /* { dg-error \"error\" \"signed char int\" } */\n-signed char long *x231; /* { dg-error \"error\" \"signed char long\" } */\n-signed char float *x232; /* { dg-error \"error\" \"signed char float\" } */\n-signed char double *x233; /* { dg-error \"error\" \"signed char double\" } */\n-signed char signed *x234; /* { dg-error \"error\" \"signed char signed\" } */\n-signed char unsigned *x235; /* { dg-error \"error\" \"signed char unsigned\" } */\n-signed short void *x236; /* { dg-error \"error\" \"signed short void\" } */\n-signed short char *x237; /* { dg-error \"error\" \"signed short char\" } */\n-signed short short *x238; /* { dg-error \"error\" \"signed short short\" } */\n+long unsigned long *x213; /* { dg-error \"\" \"long unsigned long\" } */\n+long unsigned float *x214; /* { dg-error \"\" \"long unsigned float\" } */\n+long unsigned double *x215; /* { dg-error \"\" \"long unsigned double\" } */\n+long unsigned signed *x216; /* { dg-error \"\" \"long unsigned signed\" } */\n+long unsigned unsigned *x217; /* { dg-error \"\" \"long unsigned unsigned\" } */\n+double long void *x218; /* { dg-error \"\" \"double long void\" } */\n+double long char *x219; /* { dg-error \"\" \"double long char\" } */\n+double long short *x220; /* { dg-error \"\" \"double long short\" } */\n+double long int *x221; /* { dg-error \"\" \"double long int\" } */\n+double long long *x222; /* { dg-error \"\" \"double long long\" } */\n+double long float *x223; /* { dg-error \"\" \"double long float\" } */\n+double long double *x224; /* { dg-error \"\" \"double long double\" } */\n+double long signed *x225; /* { dg-error \"\" \"double long signed\" } */\n+double long unsigned *x226; /* { dg-error \"\" \"double long unsigned\" } */\n+signed char void *x227; /* { dg-error \"\" \"signed char void\" } */\n+signed char char *x228; /* { dg-error \"\" \"signed char char\" } */\n+signed char short *x229; /* { dg-error \"\" \"signed char short\" } */\n+signed char int *x230; /* { dg-error \"\" \"signed char int\" } */\n+signed char long *x231; /* { dg-error \"\" \"signed char long\" } */\n+signed char float *x232; /* { dg-error \"\" \"signed char float\" } */\n+signed char double *x233; /* { dg-error \"\" \"signed char double\" } */\n+signed char signed *x234; /* { dg-error \"\" \"signed char signed\" } */\n+signed char unsigned *x235; /* { dg-error \"\" \"signed char unsigned\" } */\n+signed short void *x236; /* { dg-error \"\" \"signed short void\" } */\n+signed short char *x237; /* { dg-error \"\" \"signed short char\" } */\n+signed short short *x238; /* { dg-error \"\" \"signed short short\" } */\n signed short int *x239;\n-signed short long *x240; /* { dg-error \"error\" \"signed short long\" } */\n-signed short float *x241; /* { dg-error \"error\" \"signed short float\" } */\n-signed short double *x242; /* { dg-error \"error\" \"signed short double\" } */\n-signed short signed *x243; /* { dg-error \"error\" \"signed short signed\" } */\n-signed short unsigned *x244; /* { dg-error \"error\" \"signed short unsigned\" } */\n-signed int void *x245; /* { dg-error \"error\" \"signed int void\" } */\n-signed int char *x246; /* { dg-error \"error\" \"signed int char\" } */\n+signed short long *x240; /* { dg-error \"\" \"signed short long\" } */\n+signed short float *x241; /* { dg-error \"\" \"signed short float\" } */\n+signed short double *x242; /* { dg-error \"\" \"signed short double\" } */\n+signed short signed *x243; /* { dg-error \"\" \"signed short signed\" } */\n+signed short unsigned *x244; /* { dg-error \"\" \"signed short unsigned\" } */\n+signed int void *x245; /* { dg-error \"\" \"signed int void\" } */\n+signed int char *x246; /* { dg-error \"\" \"signed int char\" } */\n signed int short *x247;\n-signed int int *x248; /* { dg-error \"error\" \"signed int int\" } */\n+signed int int *x248; /* { dg-error \"\" \"signed int int\" } */\n signed int long *x249;\n-signed int float *x250; /* { dg-error \"error\" \"signed int float\" } */\n-signed int double *x251; /* { dg-error \"error\" \"signed int double\" } */\n-signed int signed *x252; /* { dg-error \"error\" \"signed int signed\" } */\n-signed int unsigned *x253; /* { dg-error \"error\" \"signed int unsigned\" } */\n-signed long void *x254; /* { dg-error \"error\" \"signed long void\" } */\n-signed long char *x255; /* { dg-error \"error\" \"signed long char\" } */\n-signed long short *x256; /* { dg-error \"error\" \"signed long short\" } */\n+signed int float *x250; /* { dg-error \"\" \"signed int float\" } */\n+signed int double *x251; /* { dg-error \"\" \"signed int double\" } */\n+signed int signed *x252; /* { dg-error \"\" \"signed int signed\" } */\n+signed int unsigned *x253; /* { dg-error \"\" \"signed int unsigned\" } */\n+signed long void *x254; /* { dg-error \"\" \"signed long void\" } */\n+signed long char *x255; /* { dg-error \"\" \"signed long char\" } */\n+signed long short *x256; /* { dg-error \"\" \"signed long short\" } */\n signed long int *x257;\n-signed long long *x258; /* { dg-error \"error\" \"signed long long\" } */\n-signed long float *x259; /* { dg-error \"error\" \"signed long float\" } */\n-signed long double *x260; /* { dg-error \"error\" \"signed long double\" } */\n-signed long signed *x261; /* { dg-error \"error\" \"signed long signed\" } */\n-signed long unsigned *x262; /* { dg-error \"error\" \"signed long unsigned\" } */\n-unsigned char void *x263; /* { dg-error \"error\" \"unsigned char void\" } */\n-unsigned char char *x264; /* { dg-error \"error\" \"unsigned char char\" } */\n-unsigned char short *x265; /* { dg-error \"error\" \"unsigned char short\" } */\n-unsigned char int *x266; /* { dg-error \"error\" \"unsigned char int\" } */\n-unsigned char long *x267; /* { dg-error \"error\" \"unsigned char long\" } */\n-unsigned char float *x268; /* { dg-error \"error\" \"unsigned char float\" } */\n-unsigned char double *x269; /* { dg-error \"error\" \"unsigned char double\" } */\n-unsigned char signed *x270; /* { dg-error \"error\" \"unsigned char signed\" } */\n-unsigned char unsigned *x271; /* { dg-error \"error\" \"unsigned char unsigned\" } */\n-unsigned short void *x272; /* { dg-error \"error\" \"unsigned short void\" } */\n-unsigned short char *x273; /* { dg-error \"error\" \"unsigned short char\" } */\n-unsigned short short *x274; /* { dg-error \"error\" \"unsigned short short\" } */\n+signed long long *x258; /* { dg-error \"\" \"signed long long\" } */\n+signed long float *x259; /* { dg-error \"\" \"signed long float\" } */\n+signed long double *x260; /* { dg-error \"\" \"signed long double\" } */\n+signed long signed *x261; /* { dg-error \"\" \"signed long signed\" } */\n+signed long unsigned *x262; /* { dg-error \"\" \"signed long unsigned\" } */\n+unsigned char void *x263; /* { dg-error \"\" \"unsigned char void\" } */\n+unsigned char char *x264; /* { dg-error \"\" \"unsigned char char\" } */\n+unsigned char short *x265; /* { dg-error \"\" \"unsigned char short\" } */\n+unsigned char int *x266; /* { dg-error \"\" \"unsigned char int\" } */\n+unsigned char long *x267; /* { dg-error \"\" \"unsigned char long\" } */\n+unsigned char float *x268; /* { dg-error \"\" \"unsigned char float\" } */\n+unsigned char double *x269; /* { dg-error \"\" \"unsigned char double\" } */\n+unsigned char signed *x270; /* { dg-error \"\" \"unsigned char signed\" } */\n+unsigned char unsigned *x271; /* { dg-error \"\" \"unsigned char unsigned\" } */\n+unsigned short void *x272; /* { dg-error \"\" \"unsigned short void\" } */\n+unsigned short char *x273; /* { dg-error \"\" \"unsigned short char\" } */\n+unsigned short short *x274; /* { dg-error \"\" \"unsigned short short\" } */\n unsigned short int *x275;\n-unsigned short long *x276; /* { dg-error \"error\" \"unsigned short long\" } */\n-unsigned short float *x277; /* { dg-error \"error\" \"unsigned short float\" } */\n-unsigned short double *x278; /* { dg-error \"error\" \"unsigned short double\" } */\n-unsigned short signed *x279; /* { dg-error \"error\" \"unsigned short signed\" } */\n-unsigned short unsigned *x280; /* { dg-error \"error\" \"unsigned short unsigned\" } */\n-unsigned int void *x281; /* { dg-error \"error\" \"unsigned int void\" } */\n-unsigned int char *x282; /* { dg-error \"error\" \"unsigned int char\" } */\n+unsigned short long *x276; /* { dg-error \"\" \"unsigned short long\" } */\n+unsigned short float *x277; /* { dg-error \"\" \"unsigned short float\" } */\n+unsigned short double *x278; /* { dg-error \"\" \"unsigned short double\" } */\n+unsigned short signed *x279; /* { dg-error \"\" \"unsigned short signed\" } */\n+unsigned short unsigned *x280; /* { dg-error \"\" \"unsigned short unsigned\" } */\n+unsigned int void *x281; /* { dg-error \"\" \"unsigned int void\" } */\n+unsigned int char *x282; /* { dg-error \"\" \"unsigned int char\" } */\n unsigned int short *x283;\n-unsigned int int *x284; /* { dg-error \"error\" \"unsigned int int\" } */\n+unsigned int int *x284; /* { dg-error \"\" \"unsigned int int\" } */\n unsigned int long *x285;\n-unsigned int float *x286; /* { dg-error \"error\" \"unsigned int float\" } */\n-unsigned int double *x287; /* { dg-error \"error\" \"unsigned int double\" } */\n-unsigned int signed *x288; /* { dg-error \"error\" \"unsigned int signed\" } */\n-unsigned int unsigned *x289; /* { dg-error \"error\" \"unsigned int unsigned\" } */\n-unsigned long void *x290; /* { dg-error \"error\" \"unsigned long void\" } */\n-unsigned long char *x291; /* { dg-error \"error\" \"unsigned long char\" } */\n-unsigned long short *x292; /* { dg-error \"error\" \"unsigned long short\" } */\n+unsigned int float *x286; /* { dg-error \"\" \"unsigned int float\" } */\n+unsigned int double *x287; /* { dg-error \"\" \"unsigned int double\" } */\n+unsigned int signed *x288; /* { dg-error \"\" \"unsigned int signed\" } */\n+unsigned int unsigned *x289; /* { dg-error \"\" \"unsigned int unsigned\" } */\n+unsigned long void *x290; /* { dg-error \"\" \"unsigned long void\" } */\n+unsigned long char *x291; /* { dg-error \"\" \"unsigned long char\" } */\n+unsigned long short *x292; /* { dg-error \"\" \"unsigned long short\" } */\n unsigned long int *x293;\n-unsigned long long *x294; /* { dg-error \"error\" \"unsigned long long\" } */\n-unsigned long float *x295; /* { dg-error \"error\" \"unsigned long float\" } */\n-unsigned long double *x296; /* { dg-error \"error\" \"unsigned long double\" } */\n-unsigned long signed *x297; /* { dg-error \"error\" \"unsigned long signed\" } */\n-unsigned long unsigned *x298; /* { dg-error \"error\" \"unsigned long unsigned\" } */\n-short int signed void *x299; /* { dg-error \"error\" \"short int signed void\" } */\n-short int signed char *x300; /* { dg-error \"error\" \"short int signed char\" } */\n-short int signed short *x301; /* { dg-error \"error\" \"short int signed short\" } */\n-short int signed int *x302; /* { dg-error \"error\" \"short int signed int\" } */\n-short int signed long *x303; /* { dg-error \"error\" \"short int signed long\" } */\n-short int signed float *x304; /* { dg-error \"error\" \"short int signed float\" } */\n-short int signed double *x305; /* { dg-error \"error\" \"short int signed double\" } */\n-short int signed signed *x306; /* { dg-error \"error\" \"short int signed signed\" } */\n-short int signed unsigned *x307; /* { dg-error \"error\" \"short int signed unsigned\" } */\n-short int unsigned void *x308; /* { dg-error \"error\" \"short int unsigned void\" } */\n-short int unsigned char *x309; /* { dg-error \"error\" \"short int unsigned char\" } */\n-short int unsigned short *x310; /* { dg-error \"error\" \"short int unsigned short\" } */\n-short int unsigned int *x311; /* { dg-error \"error\" \"short int unsigned int\" } */\n-short int unsigned long *x312; /* { dg-error \"error\" \"short int unsigned long\" } */\n-short int unsigned float *x313; /* { dg-error \"error\" \"short int unsigned float\" } */\n-short int unsigned double *x314; /* { dg-error \"error\" \"short int unsigned double\" } */\n-short int unsigned signed *x315; /* { dg-error \"error\" \"short int unsigned signed\" } */\n-short int unsigned unsigned *x316; /* { dg-error \"error\" \"short int unsigned unsigned\" } */\n-short signed int void *x317; /* { dg-error \"error\" \"short signed int void\" } */\n-short signed int char *x318; /* { dg-error \"error\" \"short signed int char\" } */\n-short signed int short *x319; /* { dg-error \"error\" \"short signed int short\" } */\n-short signed int int *x320; /* { dg-error \"error\" \"short signed int int\" } */\n-short signed int long *x321; /* { dg-error \"error\" \"short signed int long\" } */\n-short signed int float *x322; /* { dg-error \"error\" \"short signed int float\" } */\n-short signed int double *x323; /* { dg-error \"error\" \"short signed int double\" } */\n-short signed int signed *x324; /* { dg-error \"error\" \"short signed int signed\" } */\n-short signed int unsigned *x325; /* { dg-error \"error\" \"short signed int unsigned\" } */\n-short unsigned int void *x326; /* { dg-error \"error\" \"short unsigned int void\" } */\n-short unsigned int char *x327; /* { dg-error \"error\" \"short unsigned int char\" } */\n-short unsigned int short *x328; /* { dg-error \"error\" \"short unsigned int short\" } */\n-short unsigned int int *x329; /* { dg-error \"error\" \"short unsigned int int\" } */\n-short unsigned int long *x330; /* { dg-error \"error\" \"short unsigned int long\" } */\n-short unsigned int float *x331; /* { dg-error \"error\" \"short unsigned int float\" } */\n-short unsigned int double *x332; /* { dg-error \"error\" \"short unsigned int double\" } */\n-short unsigned int signed *x333; /* { dg-error \"error\" \"short unsigned int signed\" } */\n-short unsigned int unsigned *x334; /* { dg-error \"error\" \"short unsigned int unsigned\" } */\n-int short signed void *x335; /* { dg-error \"error\" \"int short signed void\" } */\n-int short signed char *x336; /* { dg-error \"error\" \"int short signed char\" } */\n-int short signed short *x337; /* { dg-error \"error\" \"int short signed short\" } */\n-int short signed int *x338; /* { dg-error \"error\" \"int short signed int\" } */\n-int short signed long *x339; /* { dg-error \"error\" \"int short signed long\" } */\n-int short signed float *x340; /* { dg-error \"error\" \"int short signed float\" } */\n-int short signed double *x341; /* { dg-error \"error\" \"int short signed double\" } */\n-int short signed signed *x342; /* { dg-error \"error\" \"int short signed signed\" } */\n-int short signed unsigned *x343; /* { dg-error \"error\" \"int short signed unsigned\" } */\n-int short unsigned void *x344; /* { dg-error \"error\" \"int short unsigned void\" } */\n-int short unsigned char *x345; /* { dg-error \"error\" \"int short unsigned char\" } */\n-int short unsigned short *x346; /* { dg-error \"error\" \"int short unsigned short\" } */\n-int short unsigned int *x347; /* { dg-error \"error\" \"int short unsigned int\" } */\n-int short unsigned long *x348; /* { dg-error \"error\" \"int short unsigned long\" } */\n-int short unsigned float *x349; /* { dg-error \"error\" \"int short unsigned float\" } */\n-int short unsigned double *x350; /* { dg-error \"error\" \"int short unsigned double\" } */\n-int short unsigned signed *x351; /* { dg-error \"error\" \"int short unsigned signed\" } */\n-int short unsigned unsigned *x352; /* { dg-error \"error\" \"int short unsigned unsigned\" } */\n-int long signed void *x353; /* { dg-error \"error\" \"int long signed void\" } */\n-int long signed char *x354; /* { dg-error \"error\" \"int long signed char\" } */\n-int long signed short *x355; /* { dg-error \"error\" \"int long signed short\" } */\n-int long signed int *x356; /* { dg-error \"error\" \"int long signed int\" } */\n-int long signed long *x357; /* { dg-error \"error\" \"int long signed long\" } */\n-int long signed float *x358; /* { dg-error \"error\" \"int long signed float\" } */\n-int long signed double *x359; /* { dg-error \"error\" \"int long signed double\" } */\n-int long signed signed *x360; /* { dg-error \"error\" \"int long signed signed\" } */\n-int long signed unsigned *x361; /* { dg-error \"error\" \"int long signed unsigned\" } */\n-int long unsigned void *x362; /* { dg-error \"error\" \"int long unsigned void\" } */\n-int long unsigned char *x363; /* { dg-error \"error\" \"int long unsigned char\" } */\n-int long unsigned short *x364; /* { dg-error \"error\" \"int long unsigned short\" } */\n-int long unsigned int *x365; /* { dg-error \"error\" \"int long unsigned int\" } */\n-int long unsigned long *x366; /* { dg-error \"error\" \"int long unsigned long\" } */\n-int long unsigned float *x367; /* { dg-error \"error\" \"int long unsigned float\" } */\n-int long unsigned double *x368; /* { dg-error \"error\" \"int long unsigned double\" } */\n-int long unsigned signed *x369; /* { dg-error \"error\" \"int long unsigned signed\" } */\n-int long unsigned unsigned *x370; /* { dg-error \"error\" \"int long unsigned unsigned\" } */\n-int signed short void *x371; /* { dg-error \"error\" \"int signed short void\" } */\n-int signed short char *x372; /* { dg-error \"error\" \"int signed short char\" } */\n-int signed short short *x373; /* { dg-error \"error\" \"int signed short short\" } */\n-int signed short int *x374; /* { dg-error \"error\" \"int signed short int\" } */\n-int signed short long *x375; /* { dg-error \"error\" \"int signed short long\" } */\n-int signed short float *x376; /* { dg-error \"error\" \"int signed short float\" } */\n-int signed short double *x377; /* { dg-error \"error\" \"int signed short double\" } */\n-int signed short signed *x378; /* { dg-error \"error\" \"int signed short signed\" } */\n-int signed short unsigned *x379; /* { dg-error \"error\" \"int signed short unsigned\" } */\n-int signed long void *x380; /* { dg-error \"error\" \"int signed long void\" } */\n-int signed long char *x381; /* { dg-error \"error\" \"int signed long char\" } */\n-int signed long short *x382; /* { dg-error \"error\" \"int signed long short\" } */\n-int signed long int *x383; /* { dg-error \"error\" \"int signed long int\" } */\n-int signed long long *x384; /* { dg-error \"error\" \"int signed long long\" } */\n-int signed long float *x385; /* { dg-error \"error\" \"int signed long float\" } */\n-int signed long double *x386; /* { dg-error \"error\" \"int signed long double\" } */\n-int signed long signed *x387; /* { dg-error \"error\" \"int signed long signed\" } */\n-int signed long unsigned *x388; /* { dg-error \"error\" \"int signed long unsigned\" } */\n-int unsigned short void *x389; /* { dg-error \"error\" \"int unsigned short void\" } */\n-int unsigned short char *x390; /* { dg-error \"error\" \"int unsigned short char\" } */\n-int unsigned short short *x391; /* { dg-error \"error\" \"int unsigned short short\" } */\n-int unsigned short int *x392; /* { dg-error \"error\" \"int unsigned short int\" } */\n-int unsigned short long *x393; /* { dg-error \"error\" \"int unsigned short long\" } */\n-int unsigned short float *x394; /* { dg-error \"error\" \"int unsigned short float\" } */\n-int unsigned short double *x395; /* { dg-error \"error\" \"int unsigned short double\" } */\n-int unsigned short signed *x396; /* { dg-error \"error\" \"int unsigned short signed\" } */\n-int unsigned short unsigned *x397; /* { dg-error \"error\" \"int unsigned short unsigned\" } */\n-int unsigned long void *x398; /* { dg-error \"error\" \"int unsigned long void\" } */\n-int unsigned long char *x399; /* { dg-error \"error\" \"int unsigned long char\" } */\n-int unsigned long short *x400; /* { dg-error \"error\" \"int unsigned long short\" } */\n-int unsigned long int *x401; /* { dg-error \"error\" \"int unsigned long int\" } */\n-int unsigned long long *x402; /* { dg-error \"error\" \"int unsigned long long\" } */\n-int unsigned long float *x403; /* { dg-error \"error\" \"int unsigned long float\" } */\n-int unsigned long double *x404; /* { dg-error \"error\" \"int unsigned long double\" } */\n-int unsigned long signed *x405; /* { dg-error \"error\" \"int unsigned long signed\" } */\n-int unsigned long unsigned *x406; /* { dg-error \"error\" \"int unsigned long unsigned\" } */\n-long int signed void *x407; /* { dg-error \"error\" \"long int signed void\" } */\n-long int signed char *x408; /* { dg-error \"error\" \"long int signed char\" } */\n-long int signed short *x409; /* { dg-error \"error\" \"long int signed short\" } */\n-long int signed int *x410; /* { dg-error \"error\" \"long int signed int\" } */\n-long int signed long *x411; /* { dg-error \"error\" \"long int signed long\" } */\n-long int signed float *x412; /* { dg-error \"error\" \"long int signed float\" } */\n-long int signed double *x413; /* { dg-error \"error\" \"long int signed double\" } */\n-long int signed signed *x414; /* { dg-error \"error\" \"long int signed signed\" } */\n-long int signed unsigned *x415; /* { dg-error \"error\" \"long int signed unsigned\" } */\n-long int unsigned void *x416; /* { dg-error \"error\" \"long int unsigned void\" } */\n-long int unsigned char *x417; /* { dg-error \"error\" \"long int unsigned char\" } */\n-long int unsigned short *x418; /* { dg-error \"error\" \"long int unsigned short\" } */\n-long int unsigned int *x419; /* { dg-error \"error\" \"long int unsigned int\" } */\n-long int unsigned long *x420; /* { dg-error \"error\" \"long int unsigned long\" } */\n-long int unsigned float *x421; /* { dg-error \"error\" \"long int unsigned float\" } */\n-long int unsigned double *x422; /* { dg-error \"error\" \"long int unsigned double\" } */\n-long int unsigned signed *x423; /* { dg-error \"error\" \"long int unsigned signed\" } */\n-long int unsigned unsigned *x424; /* { dg-error \"error\" \"long int unsigned unsigned\" } */\n-long signed int void *x425; /* { dg-error \"error\" \"long signed int void\" } */\n-long signed int char *x426; /* { dg-error \"error\" \"long signed int char\" } */\n-long signed int short *x427; /* { dg-error \"error\" \"long signed int short\" } */\n-long signed int int *x428; /* { dg-error \"error\" \"long signed int int\" } */\n-long signed int long *x429; /* { dg-error \"error\" \"long signed int long\" } */\n-long signed int float *x430; /* { dg-error \"error\" \"long signed int float\" } */\n-long signed int double *x431; /* { dg-error \"error\" \"long signed int double\" } */\n-long signed int signed *x432; /* { dg-error \"error\" \"long signed int signed\" } */\n-long signed int unsigned *x433; /* { dg-error \"error\" \"long signed int unsigned\" } */\n-long unsigned int void *x434; /* { dg-error \"error\" \"long unsigned int void\" } */\n-long unsigned int char *x435; /* { dg-error \"error\" \"long unsigned int char\" } */\n-long unsigned int short *x436; /* { dg-error \"error\" \"long unsigned int short\" } */\n-long unsigned int int *x437; /* { dg-error \"error\" \"long unsigned int int\" } */\n-long unsigned int long *x438; /* { dg-error \"error\" \"long unsigned int long\" } */\n-long unsigned int float *x439; /* { dg-error \"error\" \"long unsigned int float\" } */\n-long unsigned int double *x440; /* { dg-error \"error\" \"long unsigned int double\" } */\n-long unsigned int signed *x441; /* { dg-error \"error\" \"long unsigned int signed\" } */\n-long unsigned int unsigned *x442; /* { dg-error \"error\" \"long unsigned int unsigned\" } */\n-signed short int void *x443; /* { dg-error \"error\" \"signed short int void\" } */\n-signed short int char *x444; /* { dg-error \"error\" \"signed short int char\" } */\n-signed short int short *x445; /* { dg-error \"error\" \"signed short int short\" } */\n-signed short int int *x446; /* { dg-error \"error\" \"signed short int int\" } */\n-signed short int long *x447; /* { dg-error \"error\" \"signed short int long\" } */\n-signed short int float *x448; /* { dg-error \"error\" \"signed short int float\" } */\n-signed short int double *x449; /* { dg-error \"error\" \"signed short int double\" } */\n-signed short int signed *x450; /* { dg-error \"error\" \"signed short int signed\" } */\n-signed short int unsigned *x451; /* { dg-error \"error\" \"signed short int unsigned\" } */\n-signed int short void *x452; /* { dg-error \"error\" \"signed int short void\" } */\n-signed int short char *x453; /* { dg-error \"error\" \"signed int short char\" } */\n-signed int short short *x454; /* { dg-error \"error\" \"signed int short short\" } */\n-signed int short int *x455; /* { dg-error \"error\" \"signed int short int\" } */\n-signed int short long *x456; /* { dg-error \"error\" \"signed int short long\" } */\n-signed int short float *x457; /* { dg-error \"error\" \"signed int short float\" } */\n-signed int short double *x458; /* { dg-error \"error\" \"signed int short double\" } */\n-signed int short signed *x459; /* { dg-error \"error\" \"signed int short signed\" } */\n-signed int short unsigned *x460; /* { dg-error \"error\" \"signed int short unsigned\" } */\n-signed int long void *x461; /* { dg-error \"error\" \"signed int long void\" } */\n-signed int long char *x462; /* { dg-error \"error\" \"signed int long char\" } */\n-signed int long short *x463; /* { dg-error \"error\" \"signed int long short\" } */\n-signed int long int *x464; /* { dg-error \"error\" \"signed int long int\" } */\n-signed int long long *x465; /* { dg-error \"error\" \"signed int long long\" } */\n-signed int long float *x466; /* { dg-error \"error\" \"signed int long float\" } */\n-signed int long double *x467; /* { dg-error \"error\" \"signed int long double\" } */\n-signed int long signed *x468; /* { dg-error \"error\" \"signed int long signed\" } */\n-signed int long unsigned *x469; /* { dg-error \"error\" \"signed int long unsigned\" } */\n-signed long int void *x470; /* { dg-error \"error\" \"signed long int void\" } */\n-signed long int char *x471; /* { dg-error \"error\" \"signed long int char\" } */\n-signed long int short *x472; /* { dg-error \"error\" \"signed long int short\" } */\n-signed long int int *x473; /* { dg-error \"error\" \"signed long int int\" } */\n-signed long int long *x474; /* { dg-error \"error\" \"signed long int long\" } */\n-signed long int float *x475; /* { dg-error \"error\" \"signed long int float\" } */\n-signed long int double *x476; /* { dg-error \"error\" \"signed long int double\" } */\n-signed long int signed *x477; /* { dg-error \"error\" \"signed long int signed\" } */\n-signed long int unsigned *x478; /* { dg-error \"error\" \"signed long int unsigned\" } */\n-unsigned short int void *x479; /* { dg-error \"error\" \"unsigned short int void\" } */\n-unsigned short int char *x480; /* { dg-error \"error\" \"unsigned short int char\" } */\n-unsigned short int short *x481; /* { dg-error \"error\" \"unsigned short int short\" } */\n-unsigned short int int *x482; /* { dg-error \"error\" \"unsigned short int int\" } */\n-unsigned short int long *x483; /* { dg-error \"error\" \"unsigned short int long\" } */\n-unsigned short int float *x484; /* { dg-error \"error\" \"unsigned short int float\" } */\n-unsigned short int double *x485; /* { dg-error \"error\" \"unsigned short int double\" } */\n-unsigned short int signed *x486; /* { dg-error \"error\" \"unsigned short int signed\" } */\n-unsigned short int unsigned *x487; /* { dg-error \"error\" \"unsigned short int unsigned\" } */\n-unsigned int short void *x488; /* { dg-error \"error\" \"unsigned int short void\" } */\n-unsigned int short char *x489; /* { dg-error \"error\" \"unsigned int short char\" } */\n-unsigned int short short *x490; /* { dg-error \"error\" \"unsigned int short short\" } */\n-unsigned int short int *x491; /* { dg-error \"error\" \"unsigned int short int\" } */\n-unsigned int short long *x492; /* { dg-error \"error\" \"unsigned int short long\" } */\n-unsigned int short float *x493; /* { dg-error \"error\" \"unsigned int short float\" } */\n-unsigned int short double *x494; /* { dg-error \"error\" \"unsigned int short double\" } */\n-unsigned int short signed *x495; /* { dg-error \"error\" \"unsigned int short signed\" } */\n-unsigned int short unsigned *x496; /* { dg-error \"error\" \"unsigned int short unsigned\" } */\n-unsigned int long void *x497; /* { dg-error \"error\" \"unsigned int long void\" } */\n-unsigned int long char *x498; /* { dg-error \"error\" \"unsigned int long char\" } */\n-unsigned int long short *x499; /* { dg-error \"error\" \"unsigned int long short\" } */\n-unsigned int long int *x500; /* { dg-error \"error\" \"unsigned int long int\" } */\n-unsigned int long long *x501; /* { dg-error \"error\" \"unsigned int long long\" } */\n-unsigned int long float *x502; /* { dg-error \"error\" \"unsigned int long float\" } */\n-unsigned int long double *x503; /* { dg-error \"error\" \"unsigned int long double\" } */\n-unsigned int long signed *x504; /* { dg-error \"error\" \"unsigned int long signed\" } */\n-unsigned int long unsigned *x505; /* { dg-error \"error\" \"unsigned int long unsigned\" } */\n-unsigned long int void *x506; /* { dg-error \"error\" \"unsigned long int void\" } */\n-unsigned long int char *x507; /* { dg-error \"error\" \"unsigned long int char\" } */\n-unsigned long int short *x508; /* { dg-error \"error\" \"unsigned long int short\" } */\n-unsigned long int int *x509; /* { dg-error \"error\" \"unsigned long int int\" } */\n-unsigned long int long *x510; /* { dg-error \"error\" \"unsigned long int long\" } */\n-unsigned long int float *x511; /* { dg-error \"error\" \"unsigned long int float\" } */\n-unsigned long int double *x512; /* { dg-error \"error\" \"unsigned long int double\" } */\n-unsigned long int signed *x513; /* { dg-error \"error\" \"unsigned long int signed\" } */\n-unsigned long int unsigned *x514; /* { dg-error \"error\" \"unsigned long int unsigned\" } */\n+unsigned long long *x294; /* { dg-error \"\" \"unsigned long long\" } */\n+unsigned long float *x295; /* { dg-error \"\" \"unsigned long float\" } */\n+unsigned long double *x296; /* { dg-error \"\" \"unsigned long double\" } */\n+unsigned long signed *x297; /* { dg-error \"\" \"unsigned long signed\" } */\n+unsigned long unsigned *x298; /* { dg-error \"\" \"unsigned long unsigned\" } */\n+short int signed void *x299; /* { dg-error \"\" \"short int signed void\" } */\n+short int signed char *x300; /* { dg-error \"\" \"short int signed char\" } */\n+short int signed short *x301; /* { dg-error \"\" \"short int signed short\" } */\n+short int signed int *x302; /* { dg-error \"\" \"short int signed int\" } */\n+short int signed long *x303; /* { dg-error \"\" \"short int signed long\" } */\n+short int signed float *x304; /* { dg-error \"\" \"short int signed float\" } */\n+short int signed double *x305; /* { dg-error \"\" \"short int signed double\" } */\n+short int signed signed *x306; /* { dg-error \"\" \"short int signed signed\" } */\n+short int signed unsigned *x307; /* { dg-error \"\" \"short int signed unsigned\" } */\n+short int unsigned void *x308; /* { dg-error \"\" \"short int unsigned void\" } */\n+short int unsigned char *x309; /* { dg-error \"\" \"short int unsigned char\" } */\n+short int unsigned short *x310; /* { dg-error \"\" \"short int unsigned short\" } */\n+short int unsigned int *x311; /* { dg-error \"\" \"short int unsigned int\" } */\n+short int unsigned long *x312; /* { dg-error \"\" \"short int unsigned long\" } */\n+short int unsigned float *x313; /* { dg-error \"\" \"short int unsigned float\" } */\n+short int unsigned double *x314; /* { dg-error \"\" \"short int unsigned double\" } */\n+short int unsigned signed *x315; /* { dg-error \"\" \"short int unsigned signed\" } */\n+short int unsigned unsigned *x316; /* { dg-error \"\" \"short int unsigned unsigned\" } */\n+short signed int void *x317; /* { dg-error \"\" \"short signed int void\" } */\n+short signed int char *x318; /* { dg-error \"\" \"short signed int char\" } */\n+short signed int short *x319; /* { dg-error \"\" \"short signed int short\" } */\n+short signed int int *x320; /* { dg-error \"\" \"short signed int int\" } */\n+short signed int long *x321; /* { dg-error \"\" \"short signed int long\" } */\n+short signed int float *x322; /* { dg-error \"\" \"short signed int float\" } */\n+short signed int double *x323; /* { dg-error \"\" \"short signed int double\" } */\n+short signed int signed *x324; /* { dg-error \"\" \"short signed int signed\" } */\n+short signed int unsigned *x325; /* { dg-error \"\" \"short signed int unsigned\" } */\n+short unsigned int void *x326; /* { dg-error \"\" \"short unsigned int void\" } */\n+short unsigned int char *x327; /* { dg-error \"\" \"short unsigned int char\" } */\n+short unsigned int short *x328; /* { dg-error \"\" \"short unsigned int short\" } */\n+short unsigned int int *x329; /* { dg-error \"\" \"short unsigned int int\" } */\n+short unsigned int long *x330; /* { dg-error \"\" \"short unsigned int long\" } */\n+short unsigned int float *x331; /* { dg-error \"\" \"short unsigned int float\" } */\n+short unsigned int double *x332; /* { dg-error \"\" \"short unsigned int double\" } */\n+short unsigned int signed *x333; /* { dg-error \"\" \"short unsigned int signed\" } */\n+short unsigned int unsigned *x334; /* { dg-error \"\" \"short unsigned int unsigned\" } */\n+int short signed void *x335; /* { dg-error \"\" \"int short signed void\" } */\n+int short signed char *x336; /* { dg-error \"\" \"int short signed char\" } */\n+int short signed short *x337; /* { dg-error \"\" \"int short signed short\" } */\n+int short signed int *x338; /* { dg-error \"\" \"int short signed int\" } */\n+int short signed long *x339; /* { dg-error \"\" \"int short signed long\" } */\n+int short signed float *x340; /* { dg-error \"\" \"int short signed float\" } */\n+int short signed double *x341; /* { dg-error \"\" \"int short signed double\" } */\n+int short signed signed *x342; /* { dg-error \"\" \"int short signed signed\" } */\n+int short signed unsigned *x343; /* { dg-error \"\" \"int short signed unsigned\" } */\n+int short unsigned void *x344; /* { dg-error \"\" \"int short unsigned void\" } */\n+int short unsigned char *x345; /* { dg-error \"\" \"int short unsigned char\" } */\n+int short unsigned short *x346; /* { dg-error \"\" \"int short unsigned short\" } */\n+int short unsigned int *x347; /* { dg-error \"\" \"int short unsigned int\" } */\n+int short unsigned long *x348; /* { dg-error \"\" \"int short unsigned long\" } */\n+int short unsigned float *x349; /* { dg-error \"\" \"int short unsigned float\" } */\n+int short unsigned double *x350; /* { dg-error \"\" \"int short unsigned double\" } */\n+int short unsigned signed *x351; /* { dg-error \"\" \"int short unsigned signed\" } */\n+int short unsigned unsigned *x352; /* { dg-error \"\" \"int short unsigned unsigned\" } */\n+int long signed void *x353; /* { dg-error \"\" \"int long signed void\" } */\n+int long signed char *x354; /* { dg-error \"\" \"int long signed char\" } */\n+int long signed short *x355; /* { dg-error \"\" \"int long signed short\" } */\n+int long signed int *x356; /* { dg-error \"\" \"int long signed int\" } */\n+int long signed long *x357; /* { dg-error \"\" \"int long signed long\" } */\n+int long signed float *x358; /* { dg-error \"\" \"int long signed float\" } */\n+int long signed double *x359; /* { dg-error \"\" \"int long signed double\" } */\n+int long signed signed *x360; /* { dg-error \"\" \"int long signed signed\" } */\n+int long signed unsigned *x361; /* { dg-error \"\" \"int long signed unsigned\" } */\n+int long unsigned void *x362; /* { dg-error \"\" \"int long unsigned void\" } */\n+int long unsigned char *x363; /* { dg-error \"\" \"int long unsigned char\" } */\n+int long unsigned short *x364; /* { dg-error \"\" \"int long unsigned short\" } */\n+int long unsigned int *x365; /* { dg-error \"\" \"int long unsigned int\" } */\n+int long unsigned long *x366; /* { dg-error \"\" \"int long unsigned long\" } */\n+int long unsigned float *x367; /* { dg-error \"\" \"int long unsigned float\" } */\n+int long unsigned double *x368; /* { dg-error \"\" \"int long unsigned double\" } */\n+int long unsigned signed *x369; /* { dg-error \"\" \"int long unsigned signed\" } */\n+int long unsigned unsigned *x370; /* { dg-error \"\" \"int long unsigned unsigned\" } */\n+int signed short void *x371; /* { dg-error \"\" \"int signed short void\" } */\n+int signed short char *x372; /* { dg-error \"\" \"int signed short char\" } */\n+int signed short short *x373; /* { dg-error \"\" \"int signed short short\" } */\n+int signed short int *x374; /* { dg-error \"\" \"int signed short int\" } */\n+int signed short long *x375; /* { dg-error \"\" \"int signed short long\" } */\n+int signed short float *x376; /* { dg-error \"\" \"int signed short float\" } */\n+int signed short double *x377; /* { dg-error \"\" \"int signed short double\" } */\n+int signed short signed *x378; /* { dg-error \"\" \"int signed short signed\" } */\n+int signed short unsigned *x379; /* { dg-error \"\" \"int signed short unsigned\" } */\n+int signed long void *x380; /* { dg-error \"\" \"int signed long void\" } */\n+int signed long char *x381; /* { dg-error \"\" \"int signed long char\" } */\n+int signed long short *x382; /* { dg-error \"\" \"int signed long short\" } */\n+int signed long int *x383; /* { dg-error \"\" \"int signed long int\" } */\n+int signed long long *x384; /* { dg-error \"\" \"int signed long long\" } */\n+int signed long float *x385; /* { dg-error \"\" \"int signed long float\" } */\n+int signed long double *x386; /* { dg-error \"\" \"int signed long double\" } */\n+int signed long signed *x387; /* { dg-error \"\" \"int signed long signed\" } */\n+int signed long unsigned *x388; /* { dg-error \"\" \"int signed long unsigned\" } */\n+int unsigned short void *x389; /* { dg-error \"\" \"int unsigned short void\" } */\n+int unsigned short char *x390; /* { dg-error \"\" \"int unsigned short char\" } */\n+int unsigned short short *x391; /* { dg-error \"\" \"int unsigned short short\" } */\n+int unsigned short int *x392; /* { dg-error \"\" \"int unsigned short int\" } */\n+int unsigned short long *x393; /* { dg-error \"\" \"int unsigned short long\" } */\n+int unsigned short float *x394; /* { dg-error \"\" \"int unsigned short float\" } */\n+int unsigned short double *x395; /* { dg-error \"\" \"int unsigned short double\" } */\n+int unsigned short signed *x396; /* { dg-error \"\" \"int unsigned short signed\" } */\n+int unsigned short unsigned *x397; /* { dg-error \"\" \"int unsigned short unsigned\" } */\n+int unsigned long void *x398; /* { dg-error \"\" \"int unsigned long void\" } */\n+int unsigned long char *x399; /* { dg-error \"\" \"int unsigned long char\" } */\n+int unsigned long short *x400; /* { dg-error \"\" \"int unsigned long short\" } */\n+int unsigned long int *x401; /* { dg-error \"\" \"int unsigned long int\" } */\n+int unsigned long long *x402; /* { dg-error \"\" \"int unsigned long long\" } */\n+int unsigned long float *x403; /* { dg-error \"\" \"int unsigned long float\" } */\n+int unsigned long double *x404; /* { dg-error \"\" \"int unsigned long double\" } */\n+int unsigned long signed *x405; /* { dg-error \"\" \"int unsigned long signed\" } */\n+int unsigned long unsigned *x406; /* { dg-error \"\" \"int unsigned long unsigned\" } */\n+long int signed void *x407; /* { dg-error \"\" \"long int signed void\" } */\n+long int signed char *x408; /* { dg-error \"\" \"long int signed char\" } */\n+long int signed short *x409; /* { dg-error \"\" \"long int signed short\" } */\n+long int signed int *x410; /* { dg-error \"\" \"long int signed int\" } */\n+long int signed long *x411; /* { dg-error \"\" \"long int signed long\" } */\n+long int signed float *x412; /* { dg-error \"\" \"long int signed float\" } */\n+long int signed double *x413; /* { dg-error \"\" \"long int signed double\" } */\n+long int signed signed *x414; /* { dg-error \"\" \"long int signed signed\" } */\n+long int signed unsigned *x415; /* { dg-error \"\" \"long int signed unsigned\" } */\n+long int unsigned void *x416; /* { dg-error \"\" \"long int unsigned void\" } */\n+long int unsigned char *x417; /* { dg-error \"\" \"long int unsigned char\" } */\n+long int unsigned short *x418; /* { dg-error \"\" \"long int unsigned short\" } */\n+long int unsigned int *x419; /* { dg-error \"\" \"long int unsigned int\" } */\n+long int unsigned long *x420; /* { dg-error \"\" \"long int unsigned long\" } */\n+long int unsigned float *x421; /* { dg-error \"\" \"long int unsigned float\" } */\n+long int unsigned double *x422; /* { dg-error \"\" \"long int unsigned double\" } */\n+long int unsigned signed *x423; /* { dg-error \"\" \"long int unsigned signed\" } */\n+long int unsigned unsigned *x424; /* { dg-error \"\" \"long int unsigned unsigned\" } */\n+long signed int void *x425; /* { dg-error \"\" \"long signed int void\" } */\n+long signed int char *x426; /* { dg-error \"\" \"long signed int char\" } */\n+long signed int short *x427; /* { dg-error \"\" \"long signed int short\" } */\n+long signed int int *x428; /* { dg-error \"\" \"long signed int int\" } */\n+long signed int long *x429; /* { dg-error \"\" \"long signed int long\" } */\n+long signed int float *x430; /* { dg-error \"\" \"long signed int float\" } */\n+long signed int double *x431; /* { dg-error \"\" \"long signed int double\" } */\n+long signed int signed *x432; /* { dg-error \"\" \"long signed int signed\" } */\n+long signed int unsigned *x433; /* { dg-error \"\" \"long signed int unsigned\" } */\n+long unsigned int void *x434; /* { dg-error \"\" \"long unsigned int void\" } */\n+long unsigned int char *x435; /* { dg-error \"\" \"long unsigned int char\" } */\n+long unsigned int short *x436; /* { dg-error \"\" \"long unsigned int short\" } */\n+long unsigned int int *x437; /* { dg-error \"\" \"long unsigned int int\" } */\n+long unsigned int long *x438; /* { dg-error \"\" \"long unsigned int long\" } */\n+long unsigned int float *x439; /* { dg-error \"\" \"long unsigned int float\" } */\n+long unsigned int double *x440; /* { dg-error \"\" \"long unsigned int double\" } */\n+long unsigned int signed *x441; /* { dg-error \"\" \"long unsigned int signed\" } */\n+long unsigned int unsigned *x442; /* { dg-error \"\" \"long unsigned int unsigned\" } */\n+signed short int void *x443; /* { dg-error \"\" \"signed short int void\" } */\n+signed short int char *x444; /* { dg-error \"\" \"signed short int char\" } */\n+signed short int short *x445; /* { dg-error \"\" \"signed short int short\" } */\n+signed short int int *x446; /* { dg-error \"\" \"signed short int int\" } */\n+signed short int long *x447; /* { dg-error \"\" \"signed short int long\" } */\n+signed short int float *x448; /* { dg-error \"\" \"signed short int float\" } */\n+signed short int double *x449; /* { dg-error \"\" \"signed short int double\" } */\n+signed short int signed *x450; /* { dg-error \"\" \"signed short int signed\" } */\n+signed short int unsigned *x451; /* { dg-error \"\" \"signed short int unsigned\" } */\n+signed int short void *x452; /* { dg-error \"\" \"signed int short void\" } */\n+signed int short char *x453; /* { dg-error \"\" \"signed int short char\" } */\n+signed int short short *x454; /* { dg-error \"\" \"signed int short short\" } */\n+signed int short int *x455; /* { dg-error \"\" \"signed int short int\" } */\n+signed int short long *x456; /* { dg-error \"\" \"signed int short long\" } */\n+signed int short float *x457; /* { dg-error \"\" \"signed int short float\" } */\n+signed int short double *x458; /* { dg-error \"\" \"signed int short double\" } */\n+signed int short signed *x459; /* { dg-error \"\" \"signed int short signed\" } */\n+signed int short unsigned *x460; /* { dg-error \"\" \"signed int short unsigned\" } */\n+signed int long void *x461; /* { dg-error \"\" \"signed int long void\" } */\n+signed int long char *x462; /* { dg-error \"\" \"signed int long char\" } */\n+signed int long short *x463; /* { dg-error \"\" \"signed int long short\" } */\n+signed int long int *x464; /* { dg-error \"\" \"signed int long int\" } */\n+signed int long long *x465; /* { dg-error \"\" \"signed int long long\" } */\n+signed int long float *x466; /* { dg-error \"\" \"signed int long float\" } */\n+signed int long double *x467; /* { dg-error \"\" \"signed int long double\" } */\n+signed int long signed *x468; /* { dg-error \"\" \"signed int long signed\" } */\n+signed int long unsigned *x469; /* { dg-error \"\" \"signed int long unsigned\" } */\n+signed long int void *x470; /* { dg-error \"\" \"signed long int void\" } */\n+signed long int char *x471; /* { dg-error \"\" \"signed long int char\" } */\n+signed long int short *x472; /* { dg-error \"\" \"signed long int short\" } */\n+signed long int int *x473; /* { dg-error \"\" \"signed long int int\" } */\n+signed long int long *x474; /* { dg-error \"\" \"signed long int long\" } */\n+signed long int float *x475; /* { dg-error \"\" \"signed long int float\" } */\n+signed long int double *x476; /* { dg-error \"\" \"signed long int double\" } */\n+signed long int signed *x477; /* { dg-error \"\" \"signed long int signed\" } */\n+signed long int unsigned *x478; /* { dg-error \"\" \"signed long int unsigned\" } */\n+unsigned short int void *x479; /* { dg-error \"\" \"unsigned short int void\" } */\n+unsigned short int char *x480; /* { dg-error \"\" \"unsigned short int char\" } */\n+unsigned short int short *x481; /* { dg-error \"\" \"unsigned short int short\" } */\n+unsigned short int int *x482; /* { dg-error \"\" \"unsigned short int int\" } */\n+unsigned short int long *x483; /* { dg-error \"\" \"unsigned short int long\" } */\n+unsigned short int float *x484; /* { dg-error \"\" \"unsigned short int float\" } */\n+unsigned short int double *x485; /* { dg-error \"\" \"unsigned short int double\" } */\n+unsigned short int signed *x486; /* { dg-error \"\" \"unsigned short int signed\" } */\n+unsigned short int unsigned *x487; /* { dg-error \"\" \"unsigned short int unsigned\" } */\n+unsigned int short void *x488; /* { dg-error \"\" \"unsigned int short void\" } */\n+unsigned int short char *x489; /* { dg-error \"\" \"unsigned int short char\" } */\n+unsigned int short short *x490; /* { dg-error \"\" \"unsigned int short short\" } */\n+unsigned int short int *x491; /* { dg-error \"\" \"unsigned int short int\" } */\n+unsigned int short long *x492; /* { dg-error \"\" \"unsigned int short long\" } */\n+unsigned int short float *x493; /* { dg-error \"\" \"unsigned int short float\" } */\n+unsigned int short double *x494; /* { dg-error \"\" \"unsigned int short double\" } */\n+unsigned int short signed *x495; /* { dg-error \"\" \"unsigned int short signed\" } */\n+unsigned int short unsigned *x496; /* { dg-error \"\" \"unsigned int short unsigned\" } */\n+unsigned int long void *x497; /* { dg-error \"\" \"unsigned int long void\" } */\n+unsigned int long char *x498; /* { dg-error \"\" \"unsigned int long char\" } */\n+unsigned int long short *x499; /* { dg-error \"\" \"unsigned int long short\" } */\n+unsigned int long int *x500; /* { dg-error \"\" \"unsigned int long int\" } */\n+unsigned int long long *x501; /* { dg-error \"\" \"unsigned int long long\" } */\n+unsigned int long float *x502; /* { dg-error \"\" \"unsigned int long float\" } */\n+unsigned int long double *x503; /* { dg-error \"\" \"unsigned int long double\" } */\n+unsigned int long signed *x504; /* { dg-error \"\" \"unsigned int long signed\" } */\n+unsigned int long unsigned *x505; /* { dg-error \"\" \"unsigned int long unsigned\" } */\n+unsigned long int void *x506; /* { dg-error \"\" \"unsigned long int void\" } */\n+unsigned long int char *x507; /* { dg-error \"\" \"unsigned long int char\" } */\n+unsigned long int short *x508; /* { dg-error \"\" \"unsigned long int short\" } */\n+unsigned long int int *x509; /* { dg-error \"\" \"unsigned long int int\" } */\n+unsigned long int long *x510; /* { dg-error \"\" \"unsigned long int long\" } */\n+unsigned long int float *x511; /* { dg-error \"\" \"unsigned long int float\" } */\n+unsigned long int double *x512; /* { dg-error \"\" \"unsigned long int double\" } */\n+unsigned long int signed *x513; /* { dg-error \"\" \"unsigned long int signed\" } */\n+unsigned long int unsigned *x514; /* { dg-error \"\" \"unsigned long int unsigned\" } */"}, {"sha": "3bfa7f6fe279126f5738535b85b47c4d05acd8ad", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,14 +15,14 @@ f (void)\n {\n   /* (V *)0 is a null pointer constant, so the assignment should be\n      diagnosed.  */\n-  q = (j ? p : (V *)0); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n-  q = (j ? p : (void *)0); /* { dg-error \"error: assignment from incompatible pointer type\" } */\n+  q = (j ? p : (V *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n+  q = (j ? p : (void *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n   /* And this conversion should be valid.  */\n   (void (*)(void))(V *)0;\n   (void (*)(void))(void *)0;\n   /* Pointers to qualified void are not valid null pointer\n      constants.  */\n-  fp = (const void *)0; /* { dg-error \"error: ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n+  fp = (const void *)0; /* { dg-error \"ISO C forbids assignment between function pointer and 'void \\\\*'\" } */\n   fp = (void *)0;\n   fp = (V *)0;\n   fp = 0;\n@@ -32,8 +32,8 @@ f (void)\n   (void *)0 == fp;\n   fp == (V *)0;\n   (V *)0 == fp;\n-  fp == (V *)1; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  (V *)1 == fp; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  fp == (const void *)0; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n-  (const void *)0 == fp; /* { dg-error \"error: ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  fp == (V *)1; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  (V *)1 == fp; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  fp == (const void *)0; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n+  (const void *)0 == fp; /* { dg-error \"ISO C forbids comparison of 'void \\\\*' with function pointer\" } */\n }"}, {"sha": "385b0cb959e4267c66fcac1ec0aff99ae12a6ceb", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n \n-union u { int a; char b[]; }; /* { dg-error \"error: flexible array member in union\" } */\n+union u { int a; char b[]; }; /* { dg-error \"flexible array member in union\" } */"}, {"sha": "ff814ad57324734952ad378694dc5b808944d102", "filename": "gcc/testsuite/gcc.dg/c99-fordecl-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,8 +8,8 @@\n void\n foo (void)\n {\n-  for (struct s { int p; } *p = 0; ;) /* { dg-error \"error: 'struct s' declared in 'for' loop initial declaration\" } */\n+  for (struct s { int p; } *p = 0; ;) /* { dg-error \"'struct s' declared in 'for' loop initial declaration\" } */\n     ;\n-  for (union u { int p; } *p = 0; ;) /* { dg-error \"error: 'union u' declared in 'for' loop initial declaration\" } */\n+  for (union u { int p; } *p = 0; ;) /* { dg-error \"'union u' declared in 'for' loop initial declaration\" } */\n     ;\n }"}, {"sha": "7406e7d64c7c4fe26238939ffffcdc2eba2873f7", "filename": "gcc/testsuite/gcc.dg/c99-tag-3.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -13,10 +13,10 @@ void f (void) { struct s0; }\n \n /* A declaration with a qualifier or storage class specifier declares\n    the tag if no other declaration of it is visible.  */\n-const union u0; /* { dg-warning \"warning: useless type qualifier in empty declaration\" } */\n+const union u0; /* { dg-warning \"useless type qualifier in empty declaration\" } */\n union u0 { long b; };\n \n-extern struct s1; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+extern struct s1; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n \n /* But if a declaration of the tag is visible, whether at the same\n    scope or an outer scope, the declaration specifies the same type as\n@@ -25,13 +25,13 @@ extern struct s1; /* { dg-warning \"warning: useless storage class specifier in e\n    the members of an enumeration, it is a constraint violation.  */\n \n struct s2 { char x; };\n-const struct s2; /* { dg-error \"error: empty declaration with type qualifier does not redeclare tag\" } */\n+const struct s2; /* { dg-error \"empty declaration with type qualifier does not redeclare tag\" } */\n \n union u1;\n-extern union u1; /* { dg-error \"error: empty declaration with storage class specifier does not redeclare tag\" } */\n+extern union u1; /* { dg-error \"empty declaration with storage class specifier does not redeclare tag\" } */\n \n union u2 { long b; };\n-void g(void) { const union u2; } /* { dg-error \"error: empty declaration with type qualifier does not redeclare tag\" } */\n+void g(void) { const union u2; } /* { dg-error \"empty declaration with type qualifier does not redeclare tag\" } */\n \n /* And it does not redeclare the tag either if the outer tag is the\n    wrong kind of tag.  This also yields an error for the reference to\n@@ -40,20 +40,20 @@ void g(void) { const union u2; } /* { dg-error \"error: empty declaration with ty\n \n union u3 { float v; };\n void h(void) { const struct u3; } /* { dg-error \"'u3' defined as wrong kind of tag\" } */\n-/* { dg-error \"error: empty declaration with type qualifier does not redeclare tag\" \"wrong tag empty\" { target *-*-* } 42 } */\n+/* { dg-error \"empty declaration with type qualifier does not redeclare tag\" \"wrong tag empty\" { target *-*-* } 42 } */\n \n /* However, such useless specifiers are OK if the contents of the tag\n    are being defined, or shadowed in an inner scope with the contents\n    included in the shadowing.  */\n \n struct s3;\n-const struct s3 { int a; }; /* { dg-warning \"warning: useless type qualifier in empty declaration\" } */\n+const struct s3 { int a; }; /* { dg-warning \"useless type qualifier in empty declaration\" } */\n \n union u4;\n-extern union u4 { int z; }; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+extern union u4 { int z; }; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n \n enum e0 { E0 };\n-void i(void) { const enum e0 { E1 }; } /* { dg-warning \"warning: useless type qualifier in empty declaration\" } */\n+void i(void) { const enum e0 { E1 }; } /* { dg-warning \"useless type qualifier in empty declaration\" } */\n \n union u5 { int p; };\n-void j(void) { extern struct u5 { int q; }; } /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+void j(void) { extern struct u5 { int q; }; } /* { dg-warning \"useless storage class specifier in empty declaration\" } */"}, {"sha": "a72335e4be45f808c62b3e4b93dff99eee30e093", "filename": "gcc/testsuite/gcc.dg/c99-typespec-1.c", "status": "modified", "additions": 1055, "deletions": 1055, "changes": 2110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-typespec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-typespec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-typespec-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "4e984d2b81b1943471953b988a719e13e13a6086", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-1.c", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "27cecaa604f40fadf0de1e2692270ca2003c31d8", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-2.c", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "0aff362d61f2d3a091996223cf936113db091f1c", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-3.c", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "e77a14209aff2e409790294817c31541890fec27", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-4.c", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "ca3f85f593153b77ef81549e3cab4f5436a88aa7", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,8 +16,8 @@ f (int a, int b)\n {\n   switch (a) {\n     int v[b];\n-  case 2: /* { dg-error \"error: case label in scope of identifier with variably modified type not containing enclosing switch statement\" } */\n-  default: /* { dg-error \"error: 'default' label in scope of identifier with variably modified type not containing enclosing switch statement\" } */\n+  case 2: /* { dg-error \"case label in scope of identifier with variably modified type not containing enclosing switch statement\" } */\n+  default: /* { dg-error \"'default' label in scope of identifier with variably modified type not containing enclosing switch statement\" } */\n   switch (a)\n     {\n     case 4:"}, {"sha": "7b12ad9f561bb9e9e65183023861316f1b7b1bef", "filename": "gcc/testsuite/gcc.dg/cast-1.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,27 +15,27 @@ float fv;\n void\n f (void)\n {\n-  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n-  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n+  (int []) p; /* { dg-error \"cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"cast specifies function type\" } */\n   (struct s) sv;\n   (union u) uv;\n-  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n+  (struct s) i; /* { dg-error \"conversion to non-scalar type requested\" } */\n   (union u) i;\n-  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n-  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n-  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"used union type value where scalar is required\" } */\n   (void) sv;\n   (const void) uv;\n-  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n   (void *) (char) 1;\n-  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n-  (char) (void *) 1; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n+  (char) (void *) 1; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "f7f58f8a41cd619b5619370cfa523284ca96011a", "filename": "gcc/testsuite/gcc.dg/cast-2.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,27 +15,27 @@ float fv;\n void\n f (void)\n {\n-  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n-  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n-  (struct s) sv; /* { dg-warning \"warning: ISO C forbids casting nonscalar to the same type\" } */\n-  (union u) uv; /* { dg-warning \"warning: ISO C forbids casting nonscalar to the same type\" } */\n-  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n-  (union u) i; /* { dg-warning \"warning: ISO C forbids casts to union type\" } */\n-  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n-  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n-  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (int []) p; /* { dg-error \"cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"cast specifies function type\" } */\n+  (struct s) sv; /* { dg-warning \"ISO C forbids casting nonscalar to the same type\" } */\n+  (union u) uv; /* { dg-warning \"ISO C forbids casting nonscalar to the same type\" } */\n+  (struct s) i; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (union u) i; /* { dg-warning \"ISO C forbids casts to union type\" } */\n+  (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"used union type value where scalar is required\" } */\n   (void) sv;\n   (const void) uv;\n-  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n   (void *) (char) 1;\n-  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n-  (char) (void *) 1; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n+  (char) (void *) 1; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "40d3c88c68097a179ec2ba059c61d51b22d0dd83", "filename": "gcc/testsuite/gcc.dg/cast-3.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,27 +15,27 @@ float fv;\n void\n f (void)\n {\n-  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n-  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n-  (struct s) sv; /* { dg-error \"error: ISO C forbids casting nonscalar to the same type\" } */\n-  (union u) uv; /* { dg-error \"error: ISO C forbids casting nonscalar to the same type\" } */\n-  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n-  (union u) i; /* { dg-error \"error: ISO C forbids casts to union type\" } */\n-  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n-  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n-  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n-  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n-  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n-  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (int []) p; /* { dg-error \"cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"cast specifies function type\" } */\n+  (struct s) sv; /* { dg-error \"ISO C forbids casting nonscalar to the same type\" } */\n+  (union u) uv; /* { dg-error \"ISO C forbids casting nonscalar to the same type\" } */\n+  (struct s) i; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (union u) i; /* { dg-error \"ISO C forbids casts to union type\" } */\n+  (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"used union type value where scalar is required\" } */\n   (void) sv;\n   (const void) uv;\n-  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n   (void *) (char) 1;\n-  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n-  (char) (void *) 1; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) p; /* { dg-warning \"cast from pointer to integer of different size\" } */\n+  (char) (void *) 1; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "ebc84c11ce1c9b4f7a3b042ae88e0927ae4c4fad", "filename": "gcc/testsuite/gcc.dg/cast-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,5 +9,5 @@ char c;\n void\n f (void)\n {\n-  c = (char)&i; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  c = (char)&i; /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "b9da56674dd4861e09e698fd2ca97060d61eb1bc", "filename": "gcc/testsuite/gcc.dg/cast-pretty-print-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,6 +7,6 @@ int i;\n void\n f (void)\n {\n-  ((unsigned int)i)(); /* { dg-error \"error: called object '\\\\(unsigned int\\\\)i' is not a function\" } */\n-  ((char)i)(); /* { dg-error \"error: called object '\\\\(char\\\\)i' is not a function\" } */\n+  ((unsigned int)i)(); /* { dg-error \"called object '\\\\(unsigned int\\\\)i' is not a function\" } */\n+  ((char)i)(); /* { dg-error \"called object '\\\\(char\\\\)i' is not a function\" } */\n }"}, {"sha": "85b0049fd46c2f437df6d303106e2a0487c2ea7c", "filename": "gcc/testsuite/gcc.dg/comp-goto-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,7 +7,7 @@\n void\n f (void)\n {\n-  void *p = &&a; /* { dg-warning \"warning: taking the address of a label is non-standard\" } */\n-  goto *p; /* { dg-warning \"warning: ISO C forbids 'goto \\\\*expr;'\" } */\n+  void *p = &&a; /* { dg-warning \"taking the address of a label is non-standard\" } */\n+  goto *p; /* { dg-warning \"ISO C forbids 'goto \\\\*expr;'\" } */\n  a: ;\n }"}, {"sha": "5a3b4d2cad4f1e66fa96a9adb9583c024366a645", "filename": "gcc/testsuite/gcc.dg/comp-goto-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,7 +7,7 @@\n void\n f (void)\n {\n-  void *p = &&a; /* { dg-error \"error: taking the address of a label is non-standard\" } */\n-  goto *p; /* { dg-error \"error: ISO C forbids 'goto \\\\*expr;'\" } */\n+  void *p = &&a; /* { dg-error \"taking the address of a label is non-standard\" } */\n+  goto *p; /* { dg-error \"ISO C forbids 'goto \\\\*expr;'\" } */\n  a: ;\n }"}, {"sha": "1bc6a3f6ef4019ce574a435ad612f3c3a0ee406d", "filename": "gcc/testsuite/gcc.dg/cpp/error-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ferror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ferror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ferror-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -2,4 +2,4 @@\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do preprocess } */\n \n-/* { dg-error \"error: unterminated comment\" }\n+/* { dg-error \"unterminated comment\" }"}, {"sha": "407a302b20ed4e5eb1f2edd3ea7c7065502079e0", "filename": "gcc/testsuite/gcc.dg/cpp/if-paren.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-paren.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-paren.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-paren.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -15,17 +15,17 @@\n #endif\n \n #if (1) == 1\n-#error\t\t/* { dg-error \"error\" \"simple parens no. 1\" } */\n+#error\t\t/* { dg-error \"\" \"simple parens no. 1\" } */\n #endif\n \n #if (2)\n-#error\t\t/* { dg-error \"error\" \"simple parens no. 2\" } */\n+#error\t\t/* { dg-error \"\" \"simple parens no. 2\" } */\n #endif\n \n #if 3 == (3)\n-#error\t\t/* { dg-error \"error\" \"simple parens no. 3\" } */\n+#error\t\t/* { dg-error \"\" \"simple parens no. 3\" } */\n #endif\n \n #if (((-1) + 8)) == ((+2) * ((3)) - -1)\n-#error\t\t/* { dg-error \"error\" \"nested parentheses\" } */\n+#error\t\t/* { dg-error \"\" \"nested parentheses\" } */\n #endif"}, {"sha": "14b67baef8b24517262f1a9a758906b4fb615e67", "filename": "gcc/testsuite/gcc.dg/decl-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int a[]; /* { dg-warning \"warning: array 'a' assumed to have one element\" } */\n+int a[]; /* { dg-warning \"array 'a' assumed to have one element\" } */"}, {"sha": "ba757197f5340fbb6bf3b2e42e47e5adc87bf5c1", "filename": "gcc/testsuite/gcc.dg/decl-8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,8 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-typedef int I; /* { dg-error \"error: previous declaration of 'I' was here\" } */\n-typedef int I; /* { dg-error \"error: redefinition of typedef 'I'\" } */\n+typedef int I; /* { dg-error \"previous declaration of 'I' was here\" } */\n+typedef int I; /* { dg-error \"redefinition of typedef 'I'\" } */\n \n-typedef int I1; /* { dg-error \"error: previous declaration of 'I1' was here\" } */\n-typedef long I1; /* { dg-error \"error: conflicting types for 'I1'\" } */\n+typedef int I1; /* { dg-error \"previous declaration of 'I1' was here\" } */\n+typedef long I1; /* { dg-error \"conflicting types for 'I1'\" } */"}, {"sha": "5767c3b0849cdcad598654775638ffeb248e30d1", "filename": "gcc/testsuite/gcc.dg/decl-nospec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-foo(); /* { dg-warning \"warning: data definition has no type or storage class\" } */\n+foo(); /* { dg-warning \"data definition has no type or storage class\" } */"}, {"sha": "ab628949b96744a6b1511914baf128b02e419339", "filename": "gcc/testsuite/gcc.dg/decl-nospec-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-foo(); /* { dg-warning \"warning: data definition has no type or storage class\" } */\n+foo(); /* { dg-warning \"data definition has no type or storage class\" } */"}, {"sha": "8fb03ea4cc3fec0da25551d2d97e8c421a43466e", "filename": "gcc/testsuite/gcc.dg/decl-nospec-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-nospec-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-foo(); /* { dg-error \"error: data definition has no type or storage class\" } */\n+foo(); /* { dg-error \"data definition has no type or storage class\" } */"}, {"sha": "d29fb7ab45ad590b5c4946c94d6e4806ed1c8b7c", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,41 +5,41 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-auto void f0 (void) {} /* { dg-warning \"warning: function definition declared 'auto'\" } */\n-register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n-typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+auto void f0 (void) {} /* { dg-warning \"function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n \n-auto int x; /* { dg-error \"error: file-scope declaration of 'x' specifies 'auto'\" } */\n-register int y; /* { dg-warning \"warning: file-scope declaration of 'y' specifies 'register'\" } */\n+auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n+register int y; /* { dg-warning \"file-scope declaration of 'y' specifies 'register'\" } */\n \n-void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function 'x' declared 'extern'\" } */\n-/* { dg-warning \"warning: ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n+void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n+/* { dg-warning \"ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n \n void\n g (void)\n {\n-  void a; /* { dg-error \"error: variable or field 'a' declared void\" } */\n-  const void b; /* { dg-error \"error: variable or field 'b' declared void\" } */\n-  static void c; /* { dg-error \"error: variable or field 'c' declared void\" } */\n+  void a; /* { dg-error \"variable or field 'a' declared void\" } */\n+  const void b; /* { dg-error \"variable or field 'b' declared void\" } */\n+  static void c; /* { dg-error \"variable or field 'c' declared void\" } */\n }\n \n void p;\n const void p1;\n extern void q;\n extern const void q1;\n-static void r; /* { dg-error \"error: variable or field 'r' declared void\" } */\n-static const void r1; /* { dg-error \"error: variable or field 'r1' declared void\" } */\n+static void r; /* { dg-error \"variable or field 'r' declared void\" } */\n+static const void r1; /* { dg-error \"variable or field 'r1' declared void\" } */\n \n-register void f8 (void); /* { dg-error \"error: invalid storage class for function 'f8'\" } */\n-/* { dg-warning \"warning: file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n+register void f8 (void); /* { dg-error \"invalid storage class for function 'f8'\" } */\n+/* { dg-warning \"file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n \n-void i (void) { auto void y (void) {} } /* { dg-warning \"warning: ISO C forbids nested functions\" } */\n-/* { dg-warning \"warning: function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n+void i (void) { auto void y (void) {} } /* { dg-warning \"ISO C forbids nested functions\" } */\n+/* { dg-warning \"function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n \n-inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function 'main'\" } */\n+inline int main (void) { return 0; } /* { dg-warning \"cannot inline function 'main'\" } */"}, {"sha": "4204b6f2188f54a6e4482106f97822281477a3a8", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,41 +5,41 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-auto void f0 (void) {} /* { dg-error \"error: function definition declared 'auto'\" } */\n-register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n-typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+auto void f0 (void) {} /* { dg-error \"function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n \n-auto int x; /* { dg-error \"error: file-scope declaration of 'x' specifies 'auto'\" } */\n-register int y; /* { dg-error \"error: file-scope declaration of 'y' specifies 'register'\" } */\n+auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n+register int y; /* { dg-error \"file-scope declaration of 'y' specifies 'register'\" } */\n \n-void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function 'x' declared 'extern'\" } */\n-/* { dg-error \"error: ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n+void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n+/* { dg-error \"ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n \n void\n g (void)\n {\n-  void a; /* { dg-error \"error: variable or field 'a' declared void\" } */\n-  const void b; /* { dg-error \"error: variable or field 'b' declared void\" } */\n-  static void c; /* { dg-error \"error: variable or field 'c' declared void\" } */\n+  void a; /* { dg-error \"variable or field 'a' declared void\" } */\n+  const void b; /* { dg-error \"variable or field 'b' declared void\" } */\n+  static void c; /* { dg-error \"variable or field 'c' declared void\" } */\n }\n \n void p;\n const void p1;\n extern void q;\n extern const void q1;\n-static void r; /* { dg-error \"error: variable or field 'r' declared void\" } */\n-static const void r1; /* { dg-error \"error: variable or field 'r1' declared void\" } */\n+static void r; /* { dg-error \"variable or field 'r' declared void\" } */\n+static const void r1; /* { dg-error \"variable or field 'r1' declared void\" } */\n \n-register void f8 (void); /* { dg-error \"error: invalid storage class for function 'f8'\" } */\n-/* { dg-error \"error: file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n+register void f8 (void); /* { dg-error \"invalid storage class for function 'f8'\" } */\n+/* { dg-error \"file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n \n-void i (void) { auto void y (void) {} } /* { dg-error \"error: ISO C forbids nested functions\" } */\n-/* { dg-error \"error: function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n+void i (void) { auto void y (void) {} } /* { dg-error \"ISO C forbids nested functions\" } */\n+/* { dg-error \"function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n \n-inline int main (void) { return 0; } /* { dg-error \"error: cannot inline function 'main'\" } */\n+inline int main (void) { return 0; } /* { dg-error \"cannot inline function 'main'\" } */"}, {"sha": "66c153740b8f179ab50de0c741cc1327c0f37e7b", "filename": "gcc/testsuite/gcc.dg/declspec-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-const struct foo; /* { dg-warning \"warning: useless type qualifier in empty declaration\" } */\n+const struct foo; /* { dg-warning \"useless type qualifier in empty declaration\" } */"}, {"sha": "a325c0d883196b7c49cfc80972b879e7ffef9877", "filename": "gcc/testsuite/gcc.dg/declspec-13.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,27 +6,27 @@\n \n /* typeof should act much like typedef, so the following are\n    invalid.  */\n-typeof(double) long x0; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-typeof(double) _Complex x1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+typeof(double) long x0; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+typeof(double) _Complex x1; /* { dg-error \"two or more data types in declaration specifiers\" } */\n \n /* The following is erroneous, and used to get a bogus message about\n    complex integer types.  */\n typedef double D;\n-D _Complex x2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n+D _Complex x2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n \n /* The following empty declarations should have problems in their type\n    specifiers diagnosed, not just the general problem that they are\n    empty declarations.  */\n-long short; /* { dg-error \"error: both 'long' and 'short' in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 20 } */\n-_Complex double; /* { dg-warning \"warning: ISO C90 does not support complex types\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 22 } */\n-_Complex; /* { dg-warning \"warning: ISO C90 does not support complex types\" } */\n-/* { dg-warning \"warning: ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 24 } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 24 } */\n-_Complex int; /* { dg-warning \"warning: ISO C90 does not support complex types\" } */\n-/* { dg-warning \"warning: ISO C does not support complex integer types\" \"ISO C\" { target *-*-* } 27 } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 27 } */\n+long short; /* { dg-error \"both 'long' and 'short' in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 20 } */\n+_Complex double; /* { dg-warning \"ISO C90 does not support complex types\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 22 } */\n+_Complex; /* { dg-warning \"ISO C90 does not support complex types\" } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 24 } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 24 } */\n+_Complex int; /* { dg-warning \"ISO C90 does not support complex types\" } */\n+/* { dg-warning \"ISO C does not support complex integer types\" \"ISO C\" { target *-*-* } 27 } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 27 } */\n \n /* Specific messages for each invalid combination.  (That some message\n    is given when appropriate for a larger collection of combinations\n@@ -55,32 +55,32 @@ _Bool unsigned x22; /* { dg-error \"both 'unsigned' and '_Bool' in declaration sp\n float unsigned x23; /* { dg-error \"both 'unsigned' and 'float' in declaration specifiers\" } */\n double unsigned x24; /* { dg-error \"both 'unsigned' and 'double' in declaration specifiers\" } */\n void _Complex x25; /* { dg-error \"both 'complex' and 'void' in declaration specifiers\" } */\n-/* { dg-warning \"warning: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 57 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 57 } */\n _Bool _Complex x26; /* { dg-error \"both 'complex' and '_Bool' in declaration specifiers\" } */\n-/* { dg-warning \"warning: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 59 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 59 } */\n \n long void x27; /* { dg-error \"both 'long' and 'void' in declaration specifiers\" } */\n short void x28; /* { dg-error \"both 'short' and 'void' in declaration specifiers\" } */\n signed void x29; /* { dg-error \"both 'signed' and 'void' in declaration specifiers\" } */\n unsigned void x30; /* { dg-error \"both 'unsigned' and 'void' in declaration specifiers\" } */\n _Complex void x31; /* { dg-error \"both 'complex' and 'void' in declaration specifiers\" } */\n-/* { dg-warning \"warning: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 66 } */\n-/* { dg-warning \"warning: ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 66 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 66 } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 66 } */\n long _Bool x32; /* { dg-error \"both 'long' and '_Bool' in declaration specifiers\" } */\n short _Bool x33; /* { dg-error \"both 'short' and '_Bool' in declaration specifiers\" } */\n signed _Bool x34; /* { dg-error \"both 'signed' and '_Bool' in declaration specifiers\" } */\n unsigned _Bool x35; /* { dg-error \"both 'unsigned' and '_Bool' in declaration specifiers\" } */\n _Complex _Bool x36; /* { dg-error \"both 'complex' and '_Bool' in declaration specifiers\" } */\n-/* { dg-warning \"warning: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 73 } */\n-/* { dg-warning \"warning: ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 73 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 73 } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 73 } */\n long char x37; /* { dg-error \"both 'long' and 'char' in declaration specifiers\" } */\n short char x38; /* { dg-error \"both 'short' and 'char' in declaration specifiers\" } */\n long float x39; /* { dg-error \"both 'long' and 'float' in declaration specifiers\" } */\n short float x40; /* { dg-error \"both 'short' and 'float' in declaration specifiers\" } */\n signed float x41; /* { dg-error \"both 'signed' and 'float' in declaration specifiers\" } */\n unsigned float x42; /* { dg-error \"both 'unsigned' and 'float' in declaration specifiers\" } */\n long long double x43; /* { dg-error \"both 'long long' and 'double' in declaration specifiers\" } */\n-/* { dg-warning \"warning: ISO C90 does not support 'long long'\" \"C90\" { target *-*-* } 82 } */\n+/* { dg-warning \"ISO C90 does not support 'long long'\" \"C90\" { target *-*-* } 82 } */\n short double x44; /* { dg-error \"both 'short' and 'double' in declaration specifiers\" } */\n signed double x45; /* { dg-error \"both 'signed' and 'double' in declaration specifiers\" } */\n unsigned double x46; /* { dg-error \"both 'unsigned' and 'double' in declaration specifiers\" } */"}, {"sha": "d8ec78c9cebc368f5af576693d17eecbf801d308", "filename": "gcc/testsuite/gcc.dg/declspec-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-14.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,8 +4,8 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-typeof(struct foo); /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+typeof(struct foo); /* { dg-warning \"useless type name in empty declaration\" } */\n \n struct bar { int a; } x;\n \n-typeof(x); /* { dg-warning \"warning: useless type name in empty declaration\" } */\n+typeof(x); /* { dg-warning \"useless type name in empty declaration\" } */"}, {"sha": "dc3da61c26060188007a40c94644d6e86690565f", "filename": "gcc/testsuite/gcc.dg/declspec-15.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-15.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,7 +6,7 @@\n \n void\n f (a, b)\n-     int; /* { dg-warning \"warning: empty declaration\" } */\n-     register; /* { dg-warning \"warning: empty declaration\" } */\n+     int; /* { dg-warning \"empty declaration\" } */\n+     register; /* { dg-warning \"empty declaration\" } */\n {\n }"}, {"sha": "598623930a2faf7dae624cb7dcb66eb1eca8babc", "filename": "gcc/testsuite/gcc.dg/declspec-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-16.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,7 +6,7 @@\n \n void\n f (a, b)\n-     int; /* { dg-warning \"warning: empty declaration\" } */\n-     register; /* { dg-warning \"warning: empty declaration\" } */\n+     int; /* { dg-warning \"empty declaration\" } */\n+     register; /* { dg-warning \"empty declaration\" } */\n {\n }"}, {"sha": "d27faa1b31bcea7ac313c887bddf99fcaa2bb10a", "filename": "gcc/testsuite/gcc.dg/declspec-17.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-17.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,7 +6,7 @@\n \n void\n f (a, b)\n-     int; /* { dg-error \"error: empty declaration\" } */\n-     register; /* { dg-error \"error: empty declaration\" } */\n+     int; /* { dg-error \"empty declaration\" } */\n+     register; /* { dg-error \"empty declaration\" } */\n {\n }"}, {"sha": "eb692ca2b8c571d80c86a6b0fbfad262cd1426f6", "filename": "gcc/testsuite/gcc.dg/declspec-4.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -17,27 +17,27 @@ enum { E0 };\n enum e1 { E1 };\n \n /* Not declaring anything (pedwarns).  */\n-struct { int a; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n-int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-long; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n-/* { dg-warning \"warning: empty declaration\" \"static const\" { target *-*-* } 24 } */\n-union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+struct { int a; }; /* { dg-warning \"unnamed struct/union that defines no instances\" } */\n+int; /* { dg-warning \"useless type name in empty declaration\" } */\n+long; /* { dg-warning \"useless type name in empty declaration\" } */\n+T; /* { dg-warning \"useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n+/* { dg-warning \"empty declaration\" \"static const\" { target *-*-* } 24 } */\n+union { long b; }; /* { dg-warning \"unnamed struct/union that defines no instances\" } */\n \n /* Multiple type names (errors).  */\n-struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n-double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n-T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n-long union u2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n-struct s3 short; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-union u3 signed; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-unsigned struct s4; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n-_Complex enum { E3 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */\n+struct s1 int; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n+double enum { E2 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n+T struct s2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n+long union u2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n+struct s3 short; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+union u3 signed; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+unsigned struct s4; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n+_Complex enum { E3 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */"}, {"sha": "e44412e01c1e0cfcb778daa17371afc80d7a1131", "filename": "gcc/testsuite/gcc.dg/declspec-5.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,34 +12,34 @@ typedef int T;\n \n struct s0;\n union u0;\n-enum e0; /* { dg-warning \"warning: ISO C forbids forward references\" } */\n+enum e0; /* { dg-warning \"ISO C forbids forward references\" } */\n enum { E0 };\n enum e1 { E1 };\n \n /* Not declaring anything (pedwarns).  */\n-struct { int a; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n-int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-long; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n-/* { dg-warning \"warning: empty declaration\" \"static const\" { target *-*-* } 24 } */\n-union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n+struct { int a; }; /* { dg-warning \"unnamed struct/union that defines no instances\" } */\n+int; /* { dg-warning \"useless type name in empty declaration\" } */\n+long; /* { dg-warning \"useless type name in empty declaration\" } */\n+T; /* { dg-warning \"useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n+/* { dg-warning \"empty declaration\" \"static const\" { target *-*-* } 24 } */\n+union { long b; }; /* { dg-warning \"unnamed struct/union that defines no instances\" } */\n \n /* Multiple type names (errors).  */\n-struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n-double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n-T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n-long union u2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n-struct s3 short; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-union u3 signed; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-unsigned struct s4; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n-_Complex enum { E3 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */\n-/* { dg-warning \"warning: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 42 } */\n-/* { dg-warning \"warning: ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 42 } */\n+struct s1 int; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n+double enum { E2 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n+T struct s2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n+long union u2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n+struct s3 short; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+union u3 signed; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+unsigned struct s4; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n+_Complex enum { E3 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-warning \"useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 42 } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 42 } */"}, {"sha": "a20aa94cc8026b03d840ea0fc3e1466492ffc6b3", "filename": "gcc/testsuite/gcc.dg/declspec-6.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,34 +12,34 @@ typedef int T;\n \n struct s0;\n union u0;\n-enum e0; /* { dg-error \"error: ISO C forbids forward references\" } */\n+enum e0; /* { dg-error \"ISO C forbids forward references\" } */\n enum { E0 };\n enum e1 { E1 };\n \n /* Not declaring anything (pedwarns).  */\n-struct { int a; }; /* { dg-error \"error: unnamed struct/union that defines no instances\" } */\n-int; /* { dg-error \"error: useless type name in empty declaration\" } */\n-long; /* { dg-error \"error: useless type name in empty declaration\" } */\n-T; /* { dg-error \"error: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n-/* { dg-error \"error: empty declaration\" \"static const\" { target *-*-* } 24 } */\n-union { long b; }; /* { dg-error \"error: unnamed struct/union that defines no instances\" } */\n+struct { int a; }; /* { dg-error \"unnamed struct/union that defines no instances\" } */\n+int; /* { dg-error \"useless type name in empty declaration\" } */\n+long; /* { dg-error \"useless type name in empty declaration\" } */\n+T; /* { dg-error \"useless type name in empty declaration\" } */\n+static const; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n+/* { dg-error \"empty declaration\" \"static const\" { target *-*-* } 24 } */\n+union { long b; }; /* { dg-error \"unnamed struct/union that defines no instances\" } */\n \n /* Multiple type names (errors).  */\n-struct s1 int; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-char union u1; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n-double enum { E2 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n-T struct s2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n-long union u2; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n-struct s3 short; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-union u3 signed; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-unsigned struct s4; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n-_Complex enum { E3 }; /* { dg-error \"error: two or more data types in declaration specifiers\" } */\n-/* { dg-error \"error: useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */\n-/* { dg-error \"error: ISO C90 does not support complex types\" \"C90\" { target *-*-* } 42 } */\n-/* { dg-error \"error: ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 42 } */\n+struct s1 int; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+char union u1; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"char union\" { target *-*-* } 30 } */\n+double enum { E2 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"double enum\" { target *-*-* } 32 } */\n+T struct s2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"T struct\" { target *-*-* } 34 } */\n+long union u2; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"empty\" { target *-*-* } 36 } */\n+struct s3 short; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+union u3 signed; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+unsigned struct s4; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"empty\" { target *-*-* } 40 } */\n+_Complex enum { E3 }; /* { dg-error \"two or more data types in declaration specifiers\" } */\n+/* { dg-error \"useless type name in empty declaration\" \"empty\" { target *-*-* } 42 } */\n+/* { dg-error \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 42 } */\n+/* { dg-error \"ISO C does not support plain 'complex' meaning 'double complex'\" \"ISO C\" { target *-*-* } 42 } */"}, {"sha": "370172468a87767d8f8f8f9cee6bef3b98beeef4", "filename": "gcc/testsuite/gcc.dg/declspec-7.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -11,29 +11,29 @@\n inline inline void f0 (void),\n   f1 (void);\n \n-static static int a, /* { dg-error \"error: duplicate 'static'\" } */\n+static static int a, /* { dg-error \"duplicate 'static'\" } */\n   b;\n \n-extern extern int c, /* { dg-error \"error: duplicate 'extern'\" } */\n+extern extern int c, /* { dg-error \"duplicate 'extern'\" } */\n   d;\n \n-typedef typedef int e, /* { dg-error \"error: duplicate 'typedef'\" } */\n+typedef typedef int e, /* { dg-error \"duplicate 'typedef'\" } */\n   f;\n \n void\n h (void)\n {\n-  auto auto int p, /* { dg-error \"error: duplicate 'auto'\" } */\n+  auto auto int p, /* { dg-error \"duplicate 'auto'\" } */\n     q;\n \n-  register register int r, /* { dg-error \"error: duplicate 'register'\" } */\n+  register register int r, /* { dg-error \"duplicate 'register'\" } */\n     s;\n }\n \n /* Multiple specifiers.  */\n \n-static extern int x, /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n+static extern int x, /* { dg-error \"multiple storage classes in declaration specifiers\" } */\n   y;\n \n-extern typedef long z, /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n+extern typedef long z, /* { dg-error \"multiple storage classes in declaration specifiers\" } */\n   w;"}, {"sha": "e1061e85b913849148b93f9dd1b4f5208659098c", "filename": "gcc/testsuite/gcc.dg/declspec-8.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,21 +12,21 @@\n    \"register\" and \"auto\" must not be used at file scope (C90 6.7, C99\n    6.9#2).  */\n \n-static static struct s; /* { dg-error \"error: duplicate 'static'\" } */\n-/* { dg-warning \"warning: useless storage class specifier in empty declaration\" \"static static\" { target *-*-* } 15 } */\n+static static struct s; /* { dg-error \"duplicate 'static'\" } */\n+/* { dg-warning \"useless storage class specifier in empty declaration\" \"static static\" { target *-*-* } 15 } */\n \n-static extern struct t; /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n-/* { dg-warning \"warning: useless storage class specifier in empty declaration\" \"static extern\" { target *-*-* } 18 } */\n+static extern struct t; /* { dg-error \"multiple storage classes in declaration specifiers\" } */\n+/* { dg-warning \"useless storage class specifier in empty declaration\" \"static extern\" { target *-*-* } 18 } */\n \n-inline union u; /* { dg-error \"error: 'inline' in empty declaration\" } */\n+inline union u; /* { dg-error \"'inline' in empty declaration\" } */\n \n-auto struct v; /* { dg-error \"error: 'auto' in file-scope empty declaration\" } */\n+auto struct v; /* { dg-error \"'auto' in file-scope empty declaration\" } */\n \n-register struct w; /* { dg-error \"error: 'register' in file-scope empty declaration\" } */\n+register struct w; /* { dg-error \"'register' in file-scope empty declaration\" } */\n \n void\n f (void)\n {\n-  auto union p; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n-  register struct q; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+  auto union p; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n+  register struct q; /* { dg-warning \"useless storage class specifier in empty declaration\" } */\n }"}, {"sha": "670fe25cbc1209d94206564784b10259661d33e8", "filename": "gcc/testsuite/gcc.dg/declspec-9.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,38 +6,38 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-auto void f0 (void) {} /* { dg-warning \"warning: function definition declared 'auto'\" } */\n-register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n-typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+auto void f0 (void) {} /* { dg-warning \"function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n \n-auto int x; /* { dg-error \"error: file-scope declaration of 'x' specifies 'auto'\" } */\n+auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n register int y;\n \n-void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function 'x' declared 'extern'\" } */\n+void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n \n void\n g (void)\n {\n-  void a; /* { dg-error \"error: variable or field 'a' declared void\" } */\n-  const void b; /* { dg-error \"error: variable or field 'b' declared void\" } */\n-  static void c; /* { dg-error \"error: variable or field 'c' declared void\" } */\n+  void a; /* { dg-error \"variable or field 'a' declared void\" } */\n+  const void b; /* { dg-error \"variable or field 'b' declared void\" } */\n+  static void c; /* { dg-error \"variable or field 'c' declared void\" } */\n }\n \n void p;\n const void p1;\n extern void q;\n extern const void q1;\n-static void r; /* { dg-error \"error: variable or field 'r' declared void\" } */\n-static const void r1; /* { dg-error \"error: variable or field 'r1' declared void\" } */\n+static void r; /* { dg-error \"variable or field 'r' declared void\" } */\n+static const void r1; /* { dg-error \"variable or field 'r1' declared void\" } */\n \n-register void f8 (void); /* { dg-error \"error: invalid storage class for function 'f8'\" } */\n+register void f8 (void); /* { dg-error \"invalid storage class for function 'f8'\" } */\n \n void i (void) { auto void y (void) {} }\n \n-inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function 'main'\" } */\n+inline int main (void) { return 0; } /* { dg-warning \"cannot inline function 'main'\" } */"}, {"sha": "7e0d3ad994c5a7621c46a554f768e76362ff5bb7", "filename": "gcc/testsuite/gcc.dg/dfp/Wtraditional-conversion-2.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -25,22 +25,22 @@ _Decimal128 d128;\n void\n g (void)\n {\n-  fsi(d32); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n-  x.fsi(d32); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n-  fsi(d64); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n-  x.fsi(d64); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n-  fsi(d128); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n-  x.fsi(d128); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n-  fd32(si); /* { dg-warning \"warning: passing argument 1 of 'fd32' as floating rather than integer due to prototype\" } */\n-  x.fd32(si); /* { dg-warning \"warning: passing argument 1 of 'x.fd32' as floating rather than integer due to prototype\" } */  \n-  fd64(ui); /* { dg-warning \"warning: passing argument 1 of 'fd64' as floating rather than integer due to prototype\" } */\n-  x.fd64(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fd64' as floating rather than integer due to prototype\" } */\n-  fd128(si); /* { dg-warning \"warning: passing argument 1 of 'fd128' as floating rather than integer due to prototype\" } */\n-  x.fd128(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fd128' as floating rather than integer due to prototype\" } */  \n-  fd32(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n-  x.fd32(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n-  fd64(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n-  x.fd64(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n-  fd128(1.0); /* { dg-warning \"warning: passing argument 1 of 'fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n-  x.fd128(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n+  fsi(d32); /* { dg-warning \"passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d32); /* { dg-warning \"passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(d64); /* { dg-warning \"passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d64); /* { dg-warning \"passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(d128); /* { dg-warning \"passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(d128); /* { dg-warning \"passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fd32(si); /* { dg-warning \"passing argument 1 of 'fd32' as floating rather than integer due to prototype\" } */\n+  x.fd32(si); /* { dg-warning \"passing argument 1 of 'x.fd32' as floating rather than integer due to prototype\" } */  \n+  fd64(ui); /* { dg-warning \"passing argument 1 of 'fd64' as floating rather than integer due to prototype\" } */\n+  x.fd64(ui); /* { dg-warning \"passing argument 1 of 'x.fd64' as floating rather than integer due to prototype\" } */\n+  fd128(si); /* { dg-warning \"passing argument 1 of 'fd128' as floating rather than integer due to prototype\" } */\n+  x.fd128(ui); /* { dg-warning \"passing argument 1 of 'x.fd128' as floating rather than integer due to prototype\" } */  \n+  fd32(1.0); /* { dg-warning \"passing argument 1 of 'fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n+  x.fd32(1.0); /* { dg-warning \"passing argument 1 of 'x.fd32' as '_Decimal32' rather than 'double' due to prototype\" } */\n+  fd64(1.0); /* { dg-warning \"passing argument 1 of 'fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n+  x.fd64(1.0); /* { dg-warning \"passing argument 1 of 'x.fd64' as '_Decimal64' rather than 'double' due to prototype\" } */\n+  fd128(1.0); /* { dg-warning \"passing argument 1 of 'fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n+  x.fd128(1.0); /* { dg-warning \"passing argument 1 of 'x.fd128' as '_Decimal128' rather than 'double' due to prototype\" } */\n }"}, {"sha": "8dcfc7b2420af715d924912e3a01e18e87756665", "filename": "gcc/testsuite/gcc.dg/dfp/constants-c99.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-c99.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,9 +4,9 @@\n /* N1150 6: Constants.\n    C99 6.4.4.2: Floating constants.  */\n \n-_Decimal32 a = 1.1df;\t\t\t/* { dg-error \"error\" } */\n-_Decimal32 b = -.003DF;\t\t\t/* { dg-error \"error\" } */\n-_Decimal64 c = 11e-1dl;\t\t\t/* { dg-error \"error\" } */\n-_Decimal64 d = -.3DL;\t\t\t/* { dg-error \"error\" } */\n-_Decimal128 e = 000.3e0dl;\t\t/* { dg-error \"error\" } */\n-_Decimal128 f = 3000300030003e0DL;\t/* { dg-error \"error\" } */\n+_Decimal32 a = 1.1df;\t\t\t/* { dg-error \"\" } */\n+_Decimal32 b = -.003DF;\t\t\t/* { dg-error \"\" } */\n+_Decimal64 c = 11e-1dl;\t\t\t/* { dg-error \"\" } */\n+_Decimal64 d = -.3DL;\t\t\t/* { dg-error \"\" } */\n+_Decimal128 e = 000.3e0dl;\t\t/* { dg-error \"\" } */\n+_Decimal128 f = 3000300030003e0DL;\t/* { dg-error \"\" } */"}, {"sha": "8c96d60c7dd2fd325b972f8117f357b557b79835", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-c89.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c89.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,6 +3,6 @@\n \n /* Decimal float keywords are not recognized in C89 mode.  */\n \n-_Decimal32 x;\t\t/* { dg-error \"error\" } */\n-_Decimal64 y;\t\t/* { dg-error \"error\" } */\n-_Decimal128 z;\t\t/* { dg-error \"error\" } */\n+_Decimal32 x;\t\t/* { dg-error \"\" } */\n+_Decimal64 y;\t\t/* { dg-error \"\" } */\n+_Decimal128 z;\t\t/* { dg-error \"\" } */"}, {"sha": "8a62fb93e82e7a3de67c6725a24455a89688aee9", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-c99.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-c99.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,6 +3,6 @@\n \n /* Decimal float keywords are not recognized in C99 mode.  */\n \n-_Decimal32 x;\t\t/* { dg-error \"error\" } */\n-_Decimal64 y;\t\t/* { dg-error \"error\" } */\n-_Decimal128 z;\t\t/* { dg-error \"error\" } */\n+_Decimal32 x;\t\t/* { dg-error \"\" } */\n+_Decimal64 y;\t\t/* { dg-error \"\" } */\n+_Decimal128 z;\t\t/* { dg-error \"\" } */"}, {"sha": "4a042adf4c26261932e1a7c34b215fcf4ebba527", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-reserved.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,13 +5,13 @@\n    C99 6.4.1(2): Keywords.\n    Decimal float keywords cannot be used in other contexts.  */\n \n-int _Decimal32 (void)\t\t/* { dg-error \"error\" } */\n+int _Decimal32 (void)\t\t/* { dg-error \"\" } */\n {\n   return 0;\n }\n \n int foo (int i)\n {\n-  int _Decimal64 = i * 2;\t/* { dg-error \"error\" } */\n-  return _Decimal64;\t\t/* { dg-error \"error\" } */\n+  int _Decimal64 = i * 2;\t/* { dg-error \"\" } */\n+  return _Decimal64;\t\t/* { dg-error \"\" } */\n }"}, {"sha": "c7fc343ec4393ef29c00d9da1ca28fefad94e749", "filename": "gcc/testsuite/gcc.dg/dfp/typespec.c", "status": "modified", "additions": 294, "deletions": 294, "changes": 588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,300 +4,300 @@\n /* { dg-options \"-std=gnu99\" } */\n \n typedef char type;\n-void _Decimal32 *x0;  /* { dg-error \"error\" \"void _Decimal32\" } */\n-void _Decimal64 *x1;  /* { dg-error \"error\" \"void _Decimal64\" } */\n-void _Decimal128 *x2; /* { dg-error \"error\" \"void _Decimal128\" } */\n-char _Decimal32 *x3;  /* { dg-error \"error\" \"char _Decimal32\" } */\n-char _Decimal64 *x4;  /* { dg-error \"error\" \"char _Decimal64\" } */\n-char _Decimal128 *x5;  /* { dg-error \"error\" \"char _Decimal128\" } */\n-short _Decimal32 *x6; /* { dg-error \"error\" \"short _Decimal32\" } */\n-short _Decimal64 *x7; /* { dg-error \"error\" \"short _Decimal64\" } */\n-short _Decimal128 *x8; /* { dg-error \"error\" \"short _Decimal128\" } */\n-int _Decimal32 *x9;   /* { dg-error \"error\" \"int _Decimal32\" } */\n-int _Decimal64 *x10;  /* { dg-error \"error\" \"int _Decimal64\" } */\n-int _Decimal128 *x11; /* { dg-error \"error\" \"int _Decimal128\" } */\n-long _Decimal32 *x12;   /* { dg-error \"error\" \"long _Decimal32\" } */\n-long _Decimal64 *x13;  /* { dg-error \"error\" \"long _Decimal64\" } */\n-long _Decimal128 *x14; /* { dg-error \"error\" \"long _Decimal128\" } */\n-float _Decimal32 *x15;   /* { dg-error \"error\" \"float _Decimal32\" } */\n-float _Decimal64 *x16;  /* { dg-error \"error\" \"float _Decimal64\" } */\n-float _Decimal128 *x17; /* { dg-error \"error\" \"float _Decimal128\" } */\n-double _Decimal32 *x18;   /* { dg-error \"error\" \"double _Decimal32\" } */\n-double _Decimal64 *x19;  /* { dg-error \"error\" \"double _Decimal64\" } */\n-double _Decimal128 *x20; /* { dg-error \"error\" \"double _Decimal128\" } */\n-signed _Decimal32 *x21;   /* { dg-error \"error\" \"signed _Decimal32\" } */\n-signed _Decimal64 *x22;  /* { dg-error \"error\" \"signed _Decimal64\" } */\n-signed _Decimal128 *x23; /* { dg-error \"error\" \"signed _Decimal128\" } */\n-_Bool _Decimal32 *x24;   /* { dg-error \"error\" \"_Bool _Decimal32\" } */\n-_Bool _Decimal64 *x25;  /* { dg-error \"error\" \"_Bool _Decimal64\" } */\n-_Bool _Decimal128 *x26; /* { dg-error \"error\" \"_Bool _Decimal128\" } */\n-int _Decimal32 *x27;   /* { dg-error \"error\" \"int _Decimal32\" } */\n-int _Decimal64 *x28;  /* { dg-error \"error\" \"int _Decimal64\" } */\n-int _Decimal128 *x29; /* { dg-error \"error\" \"int _Decimal128\" } */\n-type _Decimal32 *x30;   /* { dg-error \"error\" \"type _Decimal32\" } */\n-type _Decimal64 *x31;  /* { dg-error \"error\" \"type _Decimal64\" } */\n-type _Decimal128 *x32; /* { dg-error \"error\" \"type _Decimal128\" } */\n-char signed _Decimal32 *x33;  /* { dg-error \"error\" \"char signed _Decimal32\" } */\n-char signed _Decimal64 *x34;  /* { dg-error \"error\" \"char signed _Decimal64\" } */\n-char signed _Decimal128 *x35; /* { dg-error \"error\" \"char signed _Decimal128\" } */\n-char unsigned _Decimal32 *x36; /* { dg-error \"error\" \"char unsigned _Decimal32\" } */\n-char unsigned _Decimal64 *x37; /* { dg-error \"error\" \"char unsigned _Decimal64\" } */\n-char unsigned _Decimal128 *x38; /* { dg-error \"error\" \"char unsigned _Decimal128\" } */\n-short _Decimal32 *x39;  /* { dg-error \"error\" \"short _Decimal32\" } */\n-short _Decimal64 *x40;  /* { dg-error \"error\" \"short _Decimal64\" } */\n-short _Decimal128 *x41; /* { dg-error \"error\" \"short _Decimal128\" } */\n-short signed _Decimal32 *x42;  /* { dg-error \"error\" \"short signed _Decimal32\" } */\n-short signed _Decimal64 *x43;  /* { dg-error \"error\" \"short signed _Decimal64\" } */\n-short signed _Decimal128 *x44; /* { dg-error \"error\" \"short signed _Decimal128\" } */\n-short unsigned _Decimal32 *x45;  /* { dg-error \"error\" \"short unsigned _Decimal32\" } */\n-short unsigned _Decimal64 *x46;  /* { dg-error \"error\" \"short unsigned _Decimal64\" } */\n-short unsigned _Decimal128 *x47; /* { dg-error \"error\" \"short unsigned _Decimal128\" } */\n-_Decimal32 short*x48;  /* { dg-error \"error\" \"_Decimal32 short\" } */\n-_Decimal64 short*x49;  /* { dg-error \"error\" \"_Decimal64 short\" } */\n-_Decimal128 short*x50; /* { dg-error \"error\" \"_Decimal128 short\" } */\n-_Decimal32 short signed*x51;  /* { dg-error \"error\" \"_Decimal32 short signed\" } */\n-_Decimal64 short signed*x52;  /* { dg-error \"error\" \"_Decimal64 short signed\" } */\n-_Decimal128 short signed*x53; /* { dg-error \"error\" \"_Decimal128 short signed\" } */\n-_Decimal32 short unsigned*x54;  /* { dg-error \"error\" \"_Decimal32 short unsigned\" } */\n-_Decimal64 short unsigned*x55;  /* { dg-error \"error\" \"_Decimal64 short unsigned\" } */\n-_Decimal128 short unsigned*x56; /* { dg-error \"error\" \"_Decimal128 short unsigned\" } */\n-_Decimal32 long*x57;  /* { dg-error \"error\" \"_Decimal32 long\" } */\n-_Decimal64 long*x58;  /* { dg-error \"error\" \"_Decimal64 long\" } */\n-_Decimal128 long*x59; /* { dg-error \"error\" \"_Decimal128 long\" } */\n-_Decimal32 long signed*x60;  /* { dg-error \"error\" \"_Decimal32 long signed\" } */\n-_Decimal64 long signed*x61;  /* { dg-error \"error\" \"_Decimal64 long signed\" } */\n-_Decimal128 long signed*x62; /* { dg-error \"error\" \"_Decimal128 long signed\" } */\n-_Decimal32 long unsigned*x63;  /* { dg-error \"error\" \"_Decimal32 long unsigned\" } */\n-_Decimal64 long unsigned*x64;  /* { dg-error \"error\" \"_Decimal64 long unsigned\" } */\n-_Decimal128 long unsigned*x65; /* { dg-error \"error\" \"_Decimal128 long unsigned\" } */\n-_Decimal32 signed long*x66;  /* { dg-error \"error\" \"_Decimal32 signed long\" } */\n-_Decimal64 signed long*x67;  /* { dg-error \"error\" \"_Decimal64 signed long\" } */\n-_Decimal128 signed long*x68; /* { dg-error \"error\" \"_Decimal128 signed long\" } */\n-_Decimal32 signed short*x69;  /* { dg-error \"error\" \"_Decimal32 signed short\" } */\n-_Decimal64 signed short*x70;  /* { dg-error \"error\" \"_Decimal64 signed short\" } */\n-_Decimal128 signed short*x71; /* { dg-error \"error\" \"_Decimal128 signed short\" } */\n-int signed _Decimal32 *x72;  /* { dg-error \"error\" \"int signed _Decimal32\" } */\n-int signed _Decimal64 *x73;  /* { dg-error \"error\" \"int signed _Decimal64\" } */\n-int signed _Decimal128 *x74;  /* { dg-error \"error\" \"int signed _Decimal128\" } */\n-int unsigned _Decimal32 *x75;  /* { dg-error \"error\" \"int unsigned _Decimal32\" } */\n-int unsigned _Decimal64 *x76;  /* { dg-error \"error\" \"int unsigned _Decimal64\" } */\n-int unsigned _Decimal128 *x77; /* { dg-error \"error\" \"int unsigned _Decimal128\" } */\n-long int _Decimal32 *x78;  /* { dg-error \"error\" \"long int _Decimal32\" } */\n-long int _Decimal64 *x79;  /* { dg-error \"error\" \"long int _Decimal64\" } */\n-long int _Decimal128 *x80; /* { dg-error \"error\" \"long int _Decimal128\" } */\n-long long _Decimal32 *x81;  /* { dg-error \"error\" \"long long _Decimal32\" } */\n-long long _Decimal64 *x82;  /* { dg-error \"error\" \"long long _Decimal64\" } */\n-long long _Decimal128 *x83; /* { dg-error \"error\" \"long long _Decimal128\" } */\n-long double _Decimal32 *x84;  /* { dg-error \"error\" \"long double _Decimal32\" } */\n-long double _Decimal64 *x85;  /* { dg-error \"error\" \"long double _Decimal64\" } */\n-long double _Decimal128 *x86; /* { dg-error \"error\" \"long double _Decimal128\" } */\n-long signed _Decimal32 *x87;  /* { dg-error \"error\" \"long signed _Decimal32\" } */\n-long signed _Decimal64 *x88;  /* { dg-error \"error\" \"long signed _Decimal64\" } */\n-long signed _Decimal128 *x89; /* { dg-error \"error\" \"long signed _Decimal128\" } */\n-long unsigned _Decimal32 *x90;  /* { dg-error \"error\" \"long unsigned _Decimal32\" } */\n-long unsigned _Decimal64 *x91;  /* { dg-error \"error\" \"long unsigned _Decimal64\" } */\n-long unsigned _Decimal128 *x92; /* { dg-error \"error\" \"long unsigned _Decimal128\" } */\n-double long _Decimal32 *x93;  /* { dg-error \"error\" \"double long _Decimal32\" } */\n-double long _Decimal64 *x94;  /* { dg-error \"error\" \"double long _Decimal64\" } */\n-double long _Decimal128 *x95; /* { dg-error \"error\" \"double long _Decimal128\" } */\n-signed char _Decimal32 *x96;   /* { dg-error \"error\" \"signed char _Decimal32\" } */\n-signed char _Decimal64 *x97;  /* { dg-error \"error\" \"signed char _Decimal64\" } */\n-signed char _Decimal128 *x98; /* { dg-error \"error\" \"signed char _Decimal128\" } */\n-signed short _Decimal32 *x99;   /* { dg-error \"error\" \"signed short _Decimal32\" } */\n-signed short _Decimal64 *x100;  /* { dg-error \"error\" \"signed short _Decimal64\" } */\n-signed short _Decimal128 *x101; /* { dg-error \"error\" \"signed short _Decimal128\" } */\n-signed int _Decimal32 *x102;  /* { dg-error \"error\" \"signed int _Decimal32\" } */\n-signed int _Decimal64 *x103;  /* { dg-error \"error\" \"signed int _Decimal64\" } */\n-signed int _Decimal128 *x104; /* { dg-error \"error\" \"signed int _Decimal128\" } */\n-signed long _Decimal32 *105x; /* { dg-error \"error\" \"signed long _Decimal32\" } */\n-signed long _Decimal64 *x107; /* { dg-error \"error\" \"signed long _Decimal64\" } \\*/\n-signed long _Decimal128 *x107; /* { dg-error \"error\" \"signed long _Decimal128\" } \\*/\n-unsigned char _Decimal32 *x108; /* { dg-error \"error\" \"unsigned char _Decimal32\" } */\n-unsigned char _Decimal64 *x109; /* { dg-error \"error\" \"unsigned char _Decimal64\" } */\n-unsigned char _Decimal128 *x110; /* { dg-error \"error\" \"unsigned char _Decimal128\" } */\n-unsigned short _Decimal32 *x111; /* { dg-error \"error\" \"unsigned short _Decimal32\" } */\n-unsigned short _Decimal64 *x112; /* { dg-error \"error\" \"unsigned short _Decimal64\" } */\n-unsigned short _Decimal128 *x113; /* { dg-error \"error\" \"unsigned short _Decimal128\" } */\n-unsigned int _Decimal32 *x114; /* { dg-error \"error\" \"unsigned int _Decimal32\" } */\n-unsigned int _Decimal64 *x115; /* { dg-error \"error\" \"unsigned int _Decimal64\" } */\n-unsigned int _Decimal128 *x116; /* { dg-error \"error\" \"unsigned int _Decimal128\" } */\n-unsigned long _Decimal32 *x117; /* { dg-error \"error\" \"unsigned long _Decimal32\" } */\n-unsigned long _Decimal64 *x118; /* { dg-error \"error\" \"unsigned long _Decimal64\" } */\n-unsigned long _Decimal128 *x119; /* { dg-error \"error\" \"unsigned long _Decimal128\" } */\n-short int signed _Decimal32 *x120; /* { dg-error \"error\" \"short int signed _Decimal32\" } */\n-short int signed _Decimal64 *x121; /* { dg-error \"error\" \"short int signed _Decimal64\" } */\n-short int signed _Decimal128 *x122; /* { dg-error \"error\" \"short int signed _Decimal128\" } */\n-short int unsigned _Decimal32 *x123; /* { dg-error \"error\" \"short int unsigned _Decimal32\" } */\n-short int unsigned _Decimal64 *x124; /* { dg-error \"error\" \"short int unsigned _Decimal64\" } */\n-short int unsigned _Decimal128 *x125; /* { dg-error \"error\" \"short int unsigned _Decimal128\" } */\n-short signed int _Decimal32 *x126; /* { dg-error \"error\" \"short signed int _Decimal32\" } */\n-short signed int _Decimal64 *x127; /* { dg-error \"error\" \"short signed int _Decimal64\" } */\n-short signed int _Decimal128 *x128; /* { dg-error \"error\" \"short signed int _Decimal128\" } */\n-short unsigned int _Decimal32 *x129; /* { dg-error \"error\" \"short unsigned int _Decimal32\" } */\n-short unsigned int _Decimal64 *x130; /* { dg-error \"error\" \"short unsigned int _Decimal64\" } */\n-short unsigned int _Decimal128 *x131; /* { dg-error \"error\" \"short unsigned int _Decimal128\" } */\n-int short signed _Decimal32 *x132; /* { dg-error \"error\" \"int short signed _Decimal32\" } */\n-int short signed _Decimal64 *x133; /* { dg-error \"error\" \"int short signed _Decimal64\" } */\n-int short signed _Decimal128 *x134; /* { dg-error \"error\" \"int short signed _Decimal128\" } */\n-int short unsigned _Decimal32 *x135; /* { dg-error \"error\" \"int short unsigned _Decimal32\" } */\n-int short unsigned _Decimal64 *x136; /* { dg-error \"error\" \"int short unsigned _Decimal64\" } */\n-int short unsigned _Decimal128 *x137; /* { dg-error \"error\" \"int short unsigned _Decimal128\" } */\n-int long long _Decimal32 *x138; /* { dg-error \"error\" \"int long long _Decimal32\" } */\n-int long long _Decimal64 *x139; /* { dg-error \"error\" \"int long long _Decimal64\" } */\n-int long long _Decimal128 *x140; /* { dg-error \"error\" \"int long long _Decimal128\" } */\n-int long signed _Decimal32 *x141; /* { dg-error \"error\" \"int long signed _Decimal32\" } */\n-int long signed _Decimal64 *x142; /* { dg-error \"error\" \"int long signed _Decimal64\" } */\n-int long signed _Decimal128 *x143; /* { dg-error \"error\" \"int long signed _Decimal128\" } */\n-int long unsigned _Decimal32 *x144; /* { dg-error \"error\" \"int long unsigned _Decimal32\" } */\n-int long unsigned _Decimal64 *x145; /* { dg-error \"error\" \"int long unsigned _Decimal64\" } */\n-int long unsigned _Decimal128 *x146; /* { dg-error \"error\" \"int long unsigned _Decimal128\" } */\n-int signed short _Decimal32 *x147; /* { dg-error \"error\" \"int signed short _Decimal32\" } */\n-int signed short _Decimal64 *x148; /* { dg-error \"error\" \"int signed short _Decimal64\" } */\n-int signed short _Decimal128 *x149; /* { dg-error \"error\" \"int signed short _Decimal128\" } */\n-int signed long _Decimal32 *x150; /* { dg-error \"error\" \"int signed long _Decimal32\" } */\n-int signed long _Decimal64 *x151; /* { dg-error \"error\" \"int signed long _Decimal64\" } */\n-int signed long _Decimal128 *x152; /* { dg-error \"error\" \"int signed long _Decimal128\" } */\n-int unsigned short _Decimal32 *x153; /* { dg-error \"error\" \"int unsigned short _Decimal32\" } */\n-int unsigned short _Decimal64 *x154; /* { dg-error \"error\" \"int unsigned short _Decimal64\" } */\n-int unsigned short _Decimal128 *x155; /* { dg-error \"error\" \"int unsigned short _Decimal128\" } */\n-int unsigned long _Decimal32 *x156; /* { dg-error \"error\" \"int unsigned long _Decimal32\" } */\n-int unsigned long _Decimal64 *x157; /* { dg-error \"error\" \"int unsigned long _Decimal64\" } */\n-int unsigned long _Decimal128 *x158; /* { dg-error \"error\" \"int unsigned long _Decimal128\" } */\n-long int long _Decimal32 *x159; /* { dg-error \"error\" \"long int long _Decimal32\" } */\n-long int long _Decimal64 *x160; /* { dg-error \"error\" \"long int long _Decimal64\" } */\n-long int long _Decimal128 *x161; /* { dg-error \"error\" \"long int long _Decimal128\" } */\n-long int signed _Decimal32 *x162; /* { dg-error \"error\" \"long int signed _Decimal32\" } */\n-long int signed _Decimal64 *x163; /* { dg-error \"error\" \"long int signed _Decimal64\" } */\n-long int signed _Decimal128 *x164; /* { dg-error \"error\" \"long int signed _Decimal128\" } */\n-long int unsigned _Decimal32 *x165; /* { dg-error \"error\" \"long int unsigned _Decimal32\" } */\n-long int unsigned _Decimal64 *x166; /* { dg-error \"error\" \"long int unsigned _Decimal64\" } */\n-long int unsigned _Decimal128 *x167; /* { dg-error \"error\" \"long int unsigned _Decimal128\" } */\n-long long int _Decimal32 *x168; /* { dg-error \"error\" \"long long int _Decimal32\" } */\n-long long int _Decimal64 *x169; /* { dg-error \"error\" \"long long int _Decimal64\" } */\n-long long int _Decimal128 *x170; /* { dg-error \"error\" \"long long int _Decimal128\" } */\n-long long signed _Decimal32 *x171; /* { dg-error \"error\" \"long long signed _Decimal32\" } */\n-long long signed _Decimal64 *x172; /* { dg-error \"error\" \"long long signed _Decimal64\" } */\n-long long signed _Decimal128 *x172; /* { dg-error \"error\" \"long long signed _Decimal128\" } */\n-long long unsigned _Decimal32 *x175; /* { dg-error \"error\" \"long long unsigned _Decimal32\" } */\n-long long unsigned _Decimal64 *x176; /* { dg-error \"error\" \"long long unsigned _Decimal64\" } */\n-long long unsigned _Decimal128 *x177; /* { dg-error \"error\" \"long long unsigned _Decimal128\" } */\n-long signed int _Decimal32 *x178; /* { dg-error \"error\" \"long signed int _Decimal32\" } */\n-long signed int _Decimal64 *x179; /* { dg-error \"error\" \"long signed int _Decimal64\" } */\n-long signed int _Decimal128 *x180; /* { dg-error \"error\" \"long signed int _Decimal128\" } */\n-long unsigned int _Decimal32 *x181; /* { dg-error \"error\" \"long unsigned int _Decimal32\" } */\n-long unsigned int _Decimal64 *x182; /* { dg-error \"error\" \"long unsigned int _Decimal64\" } */\n-long unsigned int _Decimal128 *x183; /* { dg-error \"error\" \"long unsigned int _Decimal128\" } */\n-long unsigned long _Decimal32 *x184; /* { dg-error \"error\" \"long unsigned long _Decimal32\" } */\n-long unsigned long _Decimal64 *x185; /* { dg-error \"error\" \"long unsigned long _Decimal64\" } */\n-long unsigned long _Decimal128 *x186; /* { dg-error \"error\" \"long unsigned long _Decimal128\" } */\n-signed short int _Decimal32 *x187; /* { dg-error \"error\" \"signed short int _Decimal32\" } */\n-signed short int _Decimal64 *x188; /* { dg-error \"error\" \"signed short int _Decimal64\" } */\n-signed short int _Decimal128 *x189; /* { dg-error \"error\" \"signed short int _Decimal128\" } */\n-signed int short _Decimal32 *x190; /* { dg-error \"error\" \"signed int short _Decimal32\" } */\n-signed int short _Decimal64 *x191; /* { dg-error \"error\" \"signed int short _Decimal64\" } */\n-signed int short _Decimal128 *x191; /* { dg-error \"error\" \"signed int short _Decimal128\" } */\n-signed int long _Decimal32 *x192; /* { dg-error \"error\" \"signed int long _Decimal32\" } */\n-signed int long _Decimal64 *x193; /* { dg-error \"error\" \"signed int long _Decimal64\" } */\n-signed int long _Decimal128 *x194; /* { dg-error \"error\" \"signed int long _Decimal128\" } */\n-signed long int _Decimal32 *x195; /* { dg-error \"error\" \"signed long int _Decimal32\" } */\n-signed long int _Decimal64 *x196; /* { dg-error \"error\" \"signed long int _Decimal64\" } */\n-signed long int _Decimal128 *x197; /* { dg-error \"error\" \"signed long int _Decimal128\" } */\n-signed long long _Decimal32 *x198; /* { dg-error \"error\" \"signed long long _Decimal32\" } */\n-signed long long _Decimal64 *x199; /* { dg-error \"error\" \"signed long long _Decimal64\" } */\n-signed long long _Decimal128 *x200; /* { dg-error \"error\" \"signed long long _Decimal128\" } */\n-unsigned short int _Decimal32 *x201; /* { dg-error \"error\" \"unsigned short int _Decimal32\" } */\n-unsigned short int _Decimal64 *x202; /* { dg-error \"error\" \"unsigned short int _Decimal64\" } */\n-unsigned short int _Decimal128 *x203; /* { dg-error \"error\" \"unsigned short int _Decimal128\" } */\n-unsigned int short _Decimal32 *x204; /* { dg-error \"error\" \"unsigned int short _Decimal32\" } */\n-unsigned int short _Decimal64 *x205; /* { dg-error \"error\" \"unsigned int short _Decimal64\" } */\n-unsigned int short _Decimal128 *x206; /* { dg-error \"error\" \"unsigned int short _Decimal128\" } */\n-unsigned int long _Decimal32 *x207; /* { dg-error \"error\" \"unsigned int long _Decimal32\" } */\n-unsigned int long _Decimal64 *x208; /* { dg-error \"error\" \"unsigned int long _Decimal64\" } */\n-unsigned int long _Decimal128 *x209; /* { dg-error \"error\" \"unsigned int long _Decimal128\" } */\n-unsigned long int _Decimal32 *x210; /* { dg-error \"error\" \"unsigned long int _Decimal32\" } */\n-unsigned long int _Decimal64 *x211; /* { dg-error \"error\" \"unsigned long int _Decimal64\" } */\n-unsigned long int _Decimal128 *x212; /* { dg-error \"error\" \"unsigned long int _Decimal128\" } */\n-unsigned long long _Decimal32 *x213; /* { dg-error \"error\" \"unsigned long long _Decimal32\" } */\n-unsigned long long _Decimal64 *x214; /* { dg-error \"error\" \"unsigned long long _Decimal64\" } */\n-unsigned long long _Decimal128 *x215; /* { dg-error \"error\" \"unsigned long long _Decimal128\" } */\n-int long long signed _Decimal32 *x216; /* { dg-error \"error\" \"int long long signed _Decimal32\" } */\n-int long long signed _Decimal64 *x217; /* { dg-error \"error\" \"int long long signed _Decimal64\" } */\n-int long long signed _Decimal128 *x218; /* { dg-error \"error\" \"int long long signed _Decimal128\" } */\n-int long long unsigned _Decimal32 *x219; /* { dg-error \"error\" \"int long long unsigned _Decimal32\" } */\n-int long long unsigned _Decimal64 *x220; /* { dg-error \"error\" \"int long long unsigned _Decimal64\" } */\n-int long long unsigned _Decimal128 *x221; /* { dg-error \"error\" \"int long long unsigned _Decimal128\" } */\n-int long signed long _Decimal32 *x222; /* { dg-error \"error\" \"int long signed long _Decimal32\" } */\n-int long signed long _Decimal64 *x223; /* { dg-error \"error\" \"int long signed long _Decimal64\" } */\n-int long signed long _Decimal128 *x224; /* { dg-error \"error\" \"int long signed long _Decimal128\" } */\n-int long unsigned long _Decimal32 *x226; /* { dg-error \"error\" \"int long unsigned long _Decimal32\" } */\n-int long unsigned long _Decimal64 *x227; /* { dg-error \"error\" \"int long unsigned long _Decimal64\" } */\n-int long unsigned long _Decimal128 *x228; /* { dg-error \"error\" \"int long unsigned long _Decimal128\" } */\n-int signed long long _Decimal32 *x229; /* { dg-error \"error\" \"int signed long long _Decimal32\" } */\n-int signed long long _Decimal64 *x230; /* { dg-error \"error\" \"int signed long long _Decimal64\" } */\n-int signed long long _Decimal128 *x231; /* { dg-error \"error\" \"int signed long long _Decimal128\" } */\n-int unsigned long long _Decimal32 *x232; /* { dg-error \"error\" \"int unsigned long long _Decimal32\" } */\n-int unsigned long long _Decimal64 *x233; /* { dg-error \"error\" \"int unsigned long long _Decimal64\" } */\n-int unsigned long long _Decimal128 *x234; /* { dg-error \"error\" \"int unsigned long long _Decimal128\" } */\n-long int long signed _Decimal32 *x235; /* { dg-error \"error\" \"long int long signed _Decimal32\" } */\n-long int long signed _Decimal64 *x236; /* { dg-error \"error\" \"long int long signed _Decimal64\" } */\n-long int long signed _Decimal128 *x237; /* { dg-error \"error\" \"long int long signed _Decimal128\" } */\n-long int long unsigned _Decimal32 *x238; /* { dg-error \"error\" \"long int long unsigned _Decimal32\" } */\n-long int long unsigned _Decimal64 *x239; /* { dg-error \"error\" \"long int long unsigned _Decimal64\" } */\n-long int long unsigned _Decimal128 *x240; /* { dg-error \"error\" \"long int long unsigned _Decimal128\" } */\n-long int signed long _Decimal32 *x241; /* { dg-error \"error\" \"long int signed long _Decimal32\" } */\n-long int signed long _Decimal64 *x242; /* { dg-error \"error\" \"long int signed long _Decimal64\" } */\n-long int signed long _Decimal128 *x243; /* { dg-error \"error\" \"long int signed long _Decimal128\" } */\n-long int unsigned long _Decimal32 *x244; /* { dg-error \"error\" \"long int unsigned long _Decimal32\" } */\n-long int unsigned long _Decimal64 *x245; /* { dg-error \"error\" \"long int unsigned long _Decimal64\" } */\n-long int unsigned long _Decimal128 *x246; /* { dg-error \"error\" \"long int unsigned long _Decimal128\" } */\n-long long int signed _Decimal32 *x247; /* { dg-error \"error\" \"long long int signed _Decimal32\" } */\n-long long int signed _Decimal64 *x248; /* { dg-error \"error\" \"long long int signed _Decimal64\" } */\n-long long int signed _Decimal128 *x249; /* { dg-error \"error\" \"long long int signed _Decimal128\" } */\n-long long int unsigned _Decimal32 *x250; /* { dg-error \"error\" \"long long int unsigned _Decimal32\" } */\n-long long int unsigned _Decimal64 *x251; /* { dg-error \"error\" \"long long int unsigned _Decimal64\" } */\n-long long int unsigned _Decimal128 *x252; /* { dg-error \"error\" \"long long int unsigned _Decimal128\" } */\n-long long signed int _Decimal32 *x253; /* { dg-error \"error\" \"long long signed int _Decimal32\" } */\n-long long signed int _Decimal64 *x254; /* { dg-error \"error\" \"long long signed int _Decimal64\" } */\n-long long signed int _Decimal128 *x255; /* { dg-error \"error\" \"long long signed int _Decimal128\" } */\n-long long unsigned int _Decimal32 *x256; /* { dg-error \"error\" \"long long unsigned int _Decimal32\" } */\n-long long unsigned int _Decimal64 *x257; /* { dg-error \"error\" \"long long unsigned int _Decimal64\" } */\n-long long unsigned int _Decimal128 *x258; /* { dg-error \"error\" \"long long unsigned int _Decimal128\" } */\n-long signed int long _Decimal32 *x259; /* { dg-error \"error\" \"long signed int long _Decimal32\" } */\n-long signed int long _Decimal64 *x260; /* { dg-error \"error\" \"long signed int long _Decimal64\" } */\n-long signed int long _Decimal128 *x261; /* { dg-error \"error\" \"long signed int long _Decimal128\" } */\n-long signed long int _Decimal32 *x262; /* { dg-error \"error\" \"long signed long int _Decimal32\" } */\n-long signed long int _Decimal64 *x263; /* { dg-error \"error\" \"long signed long int _Decimal64\" } */\n-long signed long int _Decimal128 *x264; /* { dg-error \"error\" \"long signed long int _Decimal128\" } */\n-long unsigned int long _Decimal32 *x265; /* { dg-error \"error\" \"long unsigned int long _Decimal32\" } */\n-long unsigned int long _Decimal64 *x266; /* { dg-error \"error\" \"long unsigned int long _Decimal64\" } */\n-long unsigned int long _Decimal128 *x267; /* { dg-error \"error\" \"long unsigned int long _Decimal128\" } */\n-long unsigned long int _Decimal32 *x268; /* { dg-error \"error\" \"long unsigned long int _Decimal32\" } */\n-long unsigned long int _Decimal64 *x269; /* { dg-error \"error\" \"long unsigned long int _Decimal64\" } */\n-long unsigned long int _Decimal128 *x270; /* { dg-error \"error\" \"long unsigned long int _Decimal128\" } */\n-signed long long int _Decimal32 *x271; /* { dg-error \"error\" \"signed long long int _Decimal32\" } */\n-signed long long int _Decimal64 *x272; /* { dg-error \"error\" \"signed long long int _Decimal64\" } */\n-signed long long int _Decimal128 *x273; /* { dg-error \"error\" \"signed long long int _Decimal128\" } */\n-unsigned int long long _Decimal32 *x274; /* { dg-error \"error\" \"unsigned int long long _Decimal32\" } */\n-unsigned int long long _Decimal64 *x275; /* { dg-error \"error\" \"unsigned int long long _Decimal64\" } */\n-unsigned int long long _Decimal128 *x276; /* { dg-error \"error\" \"unsigned int long long _Decimal128\" } */\n-unsigned long int long _Decimal32 *x277; /* { dg-error \"error\" \"unsigned long int long _Decimal32\" } */\n-unsigned long int long _Decimal64 *x278; /* { dg-error \"error\" \"unsigned long int long _Decimal64\" } */\n-unsigned long int long _Decimal128 *x279; /* { dg-error \"error\" \"unsigned long int long _Decimal128\" } */\n-unsigned long long int _Decimal32 *x280; /* { dg-error \"error\" \"unsigned long long int _Decimal32\" } */\n-unsigned long long int _Decimal64 *x281; /* { dg-error \"error\" \"unsigned long long int _Decimal64\" } */\n-unsigned long long int _Decimal128 *x282; /* { dg-error \"error\" \"unsigned long long int _Decimal128\" } */\n+void _Decimal32 *x0;  /* { dg-error \"\" \"void _Decimal32\" } */\n+void _Decimal64 *x1;  /* { dg-error \"\" \"void _Decimal64\" } */\n+void _Decimal128 *x2; /* { dg-error \"\" \"void _Decimal128\" } */\n+char _Decimal32 *x3;  /* { dg-error \"\" \"char _Decimal32\" } */\n+char _Decimal64 *x4;  /* { dg-error \"\" \"char _Decimal64\" } */\n+char _Decimal128 *x5;  /* { dg-error \"\" \"char _Decimal128\" } */\n+short _Decimal32 *x6; /* { dg-error \"\" \"short _Decimal32\" } */\n+short _Decimal64 *x7; /* { dg-error \"\" \"short _Decimal64\" } */\n+short _Decimal128 *x8; /* { dg-error \"\" \"short _Decimal128\" } */\n+int _Decimal32 *x9;   /* { dg-error \"\" \"int _Decimal32\" } */\n+int _Decimal64 *x10;  /* { dg-error \"\" \"int _Decimal64\" } */\n+int _Decimal128 *x11; /* { dg-error \"\" \"int _Decimal128\" } */\n+long _Decimal32 *x12;   /* { dg-error \"\" \"long _Decimal32\" } */\n+long _Decimal64 *x13;  /* { dg-error \"\" \"long _Decimal64\" } */\n+long _Decimal128 *x14; /* { dg-error \"\" \"long _Decimal128\" } */\n+float _Decimal32 *x15;   /* { dg-error \"\" \"float _Decimal32\" } */\n+float _Decimal64 *x16;  /* { dg-error \"\" \"float _Decimal64\" } */\n+float _Decimal128 *x17; /* { dg-error \"\" \"float _Decimal128\" } */\n+double _Decimal32 *x18;   /* { dg-error \"\" \"double _Decimal32\" } */\n+double _Decimal64 *x19;  /* { dg-error \"\" \"double _Decimal64\" } */\n+double _Decimal128 *x20; /* { dg-error \"\" \"double _Decimal128\" } */\n+signed _Decimal32 *x21;   /* { dg-error \"\" \"signed _Decimal32\" } */\n+signed _Decimal64 *x22;  /* { dg-error \"\" \"signed _Decimal64\" } */\n+signed _Decimal128 *x23; /* { dg-error \"\" \"signed _Decimal128\" } */\n+_Bool _Decimal32 *x24;   /* { dg-error \"\" \"_Bool _Decimal32\" } */\n+_Bool _Decimal64 *x25;  /* { dg-error \"\" \"_Bool _Decimal64\" } */\n+_Bool _Decimal128 *x26; /* { dg-error \"\" \"_Bool _Decimal128\" } */\n+int _Decimal32 *x27;   /* { dg-error \"\" \"int _Decimal32\" } */\n+int _Decimal64 *x28;  /* { dg-error \"\" \"int _Decimal64\" } */\n+int _Decimal128 *x29; /* { dg-error \"\" \"int _Decimal128\" } */\n+type _Decimal32 *x30;   /* { dg-error \"\" \"type _Decimal32\" } */\n+type _Decimal64 *x31;  /* { dg-error \"\" \"type _Decimal64\" } */\n+type _Decimal128 *x32; /* { dg-error \"\" \"type _Decimal128\" } */\n+char signed _Decimal32 *x33;  /* { dg-error \"\" \"char signed _Decimal32\" } */\n+char signed _Decimal64 *x34;  /* { dg-error \"\" \"char signed _Decimal64\" } */\n+char signed _Decimal128 *x35; /* { dg-error \"\" \"char signed _Decimal128\" } */\n+char unsigned _Decimal32 *x36; /* { dg-error \"\" \"char unsigned _Decimal32\" } */\n+char unsigned _Decimal64 *x37; /* { dg-error \"\" \"char unsigned _Decimal64\" } */\n+char unsigned _Decimal128 *x38; /* { dg-error \"\" \"char unsigned _Decimal128\" } */\n+short _Decimal32 *x39;  /* { dg-error \"\" \"short _Decimal32\" } */\n+short _Decimal64 *x40;  /* { dg-error \"\" \"short _Decimal64\" } */\n+short _Decimal128 *x41; /* { dg-error \"\" \"short _Decimal128\" } */\n+short signed _Decimal32 *x42;  /* { dg-error \"\" \"short signed _Decimal32\" } */\n+short signed _Decimal64 *x43;  /* { dg-error \"\" \"short signed _Decimal64\" } */\n+short signed _Decimal128 *x44; /* { dg-error \"\" \"short signed _Decimal128\" } */\n+short unsigned _Decimal32 *x45;  /* { dg-error \"\" \"short unsigned _Decimal32\" } */\n+short unsigned _Decimal64 *x46;  /* { dg-error \"\" \"short unsigned _Decimal64\" } */\n+short unsigned _Decimal128 *x47; /* { dg-error \"\" \"short unsigned _Decimal128\" } */\n+_Decimal32 short*x48;  /* { dg-error \"\" \"_Decimal32 short\" } */\n+_Decimal64 short*x49;  /* { dg-error \"\" \"_Decimal64 short\" } */\n+_Decimal128 short*x50; /* { dg-error \"\" \"_Decimal128 short\" } */\n+_Decimal32 short signed*x51;  /* { dg-error \"\" \"_Decimal32 short signed\" } */\n+_Decimal64 short signed*x52;  /* { dg-error \"\" \"_Decimal64 short signed\" } */\n+_Decimal128 short signed*x53; /* { dg-error \"\" \"_Decimal128 short signed\" } */\n+_Decimal32 short unsigned*x54;  /* { dg-error \"\" \"_Decimal32 short unsigned\" } */\n+_Decimal64 short unsigned*x55;  /* { dg-error \"\" \"_Decimal64 short unsigned\" } */\n+_Decimal128 short unsigned*x56; /* { dg-error \"\" \"_Decimal128 short unsigned\" } */\n+_Decimal32 long*x57;  /* { dg-error \"\" \"_Decimal32 long\" } */\n+_Decimal64 long*x58;  /* { dg-error \"\" \"_Decimal64 long\" } */\n+_Decimal128 long*x59; /* { dg-error \"\" \"_Decimal128 long\" } */\n+_Decimal32 long signed*x60;  /* { dg-error \"\" \"_Decimal32 long signed\" } */\n+_Decimal64 long signed*x61;  /* { dg-error \"\" \"_Decimal64 long signed\" } */\n+_Decimal128 long signed*x62; /* { dg-error \"\" \"_Decimal128 long signed\" } */\n+_Decimal32 long unsigned*x63;  /* { dg-error \"\" \"_Decimal32 long unsigned\" } */\n+_Decimal64 long unsigned*x64;  /* { dg-error \"\" \"_Decimal64 long unsigned\" } */\n+_Decimal128 long unsigned*x65; /* { dg-error \"\" \"_Decimal128 long unsigned\" } */\n+_Decimal32 signed long*x66;  /* { dg-error \"\" \"_Decimal32 signed long\" } */\n+_Decimal64 signed long*x67;  /* { dg-error \"\" \"_Decimal64 signed long\" } */\n+_Decimal128 signed long*x68; /* { dg-error \"\" \"_Decimal128 signed long\" } */\n+_Decimal32 signed short*x69;  /* { dg-error \"\" \"_Decimal32 signed short\" } */\n+_Decimal64 signed short*x70;  /* { dg-error \"\" \"_Decimal64 signed short\" } */\n+_Decimal128 signed short*x71; /* { dg-error \"\" \"_Decimal128 signed short\" } */\n+int signed _Decimal32 *x72;  /* { dg-error \"\" \"int signed _Decimal32\" } */\n+int signed _Decimal64 *x73;  /* { dg-error \"\" \"int signed _Decimal64\" } */\n+int signed _Decimal128 *x74;  /* { dg-error \"\" \"int signed _Decimal128\" } */\n+int unsigned _Decimal32 *x75;  /* { dg-error \"\" \"int unsigned _Decimal32\" } */\n+int unsigned _Decimal64 *x76;  /* { dg-error \"\" \"int unsigned _Decimal64\" } */\n+int unsigned _Decimal128 *x77; /* { dg-error \"\" \"int unsigned _Decimal128\" } */\n+long int _Decimal32 *x78;  /* { dg-error \"\" \"long int _Decimal32\" } */\n+long int _Decimal64 *x79;  /* { dg-error \"\" \"long int _Decimal64\" } */\n+long int _Decimal128 *x80; /* { dg-error \"\" \"long int _Decimal128\" } */\n+long long _Decimal32 *x81;  /* { dg-error \"\" \"long long _Decimal32\" } */\n+long long _Decimal64 *x82;  /* { dg-error \"\" \"long long _Decimal64\" } */\n+long long _Decimal128 *x83; /* { dg-error \"\" \"long long _Decimal128\" } */\n+long double _Decimal32 *x84;  /* { dg-error \"\" \"long double _Decimal32\" } */\n+long double _Decimal64 *x85;  /* { dg-error \"\" \"long double _Decimal64\" } */\n+long double _Decimal128 *x86; /* { dg-error \"\" \"long double _Decimal128\" } */\n+long signed _Decimal32 *x87;  /* { dg-error \"\" \"long signed _Decimal32\" } */\n+long signed _Decimal64 *x88;  /* { dg-error \"\" \"long signed _Decimal64\" } */\n+long signed _Decimal128 *x89; /* { dg-error \"\" \"long signed _Decimal128\" } */\n+long unsigned _Decimal32 *x90;  /* { dg-error \"\" \"long unsigned _Decimal32\" } */\n+long unsigned _Decimal64 *x91;  /* { dg-error \"\" \"long unsigned _Decimal64\" } */\n+long unsigned _Decimal128 *x92; /* { dg-error \"\" \"long unsigned _Decimal128\" } */\n+double long _Decimal32 *x93;  /* { dg-error \"\" \"double long _Decimal32\" } */\n+double long _Decimal64 *x94;  /* { dg-error \"\" \"double long _Decimal64\" } */\n+double long _Decimal128 *x95; /* { dg-error \"\" \"double long _Decimal128\" } */\n+signed char _Decimal32 *x96;   /* { dg-error \"\" \"signed char _Decimal32\" } */\n+signed char _Decimal64 *x97;  /* { dg-error \"\" \"signed char _Decimal64\" } */\n+signed char _Decimal128 *x98; /* { dg-error \"\" \"signed char _Decimal128\" } */\n+signed short _Decimal32 *x99;   /* { dg-error \"\" \"signed short _Decimal32\" } */\n+signed short _Decimal64 *x100;  /* { dg-error \"\" \"signed short _Decimal64\" } */\n+signed short _Decimal128 *x101; /* { dg-error \"\" \"signed short _Decimal128\" } */\n+signed int _Decimal32 *x102;  /* { dg-error \"\" \"signed int _Decimal32\" } */\n+signed int _Decimal64 *x103;  /* { dg-error \"\" \"signed int _Decimal64\" } */\n+signed int _Decimal128 *x104; /* { dg-error \"\" \"signed int _Decimal128\" } */\n+signed long _Decimal32 *105x; /* { dg-error \"\" \"signed long _Decimal32\" } */\n+signed long _Decimal64 *x107; /* { dg-error \"\" \"signed long _Decimal64\" } \\*/\n+signed long _Decimal128 *x107; /* { dg-error \"\" \"signed long _Decimal128\" } \\*/\n+unsigned char _Decimal32 *x108; /* { dg-error \"\" \"unsigned char _Decimal32\" } */\n+unsigned char _Decimal64 *x109; /* { dg-error \"\" \"unsigned char _Decimal64\" } */\n+unsigned char _Decimal128 *x110; /* { dg-error \"\" \"unsigned char _Decimal128\" } */\n+unsigned short _Decimal32 *x111; /* { dg-error \"\" \"unsigned short _Decimal32\" } */\n+unsigned short _Decimal64 *x112; /* { dg-error \"\" \"unsigned short _Decimal64\" } */\n+unsigned short _Decimal128 *x113; /* { dg-error \"\" \"unsigned short _Decimal128\" } */\n+unsigned int _Decimal32 *x114; /* { dg-error \"\" \"unsigned int _Decimal32\" } */\n+unsigned int _Decimal64 *x115; /* { dg-error \"\" \"unsigned int _Decimal64\" } */\n+unsigned int _Decimal128 *x116; /* { dg-error \"\" \"unsigned int _Decimal128\" } */\n+unsigned long _Decimal32 *x117; /* { dg-error \"\" \"unsigned long _Decimal32\" } */\n+unsigned long _Decimal64 *x118; /* { dg-error \"\" \"unsigned long _Decimal64\" } */\n+unsigned long _Decimal128 *x119; /* { dg-error \"\" \"unsigned long _Decimal128\" } */\n+short int signed _Decimal32 *x120; /* { dg-error \"\" \"short int signed _Decimal32\" } */\n+short int signed _Decimal64 *x121; /* { dg-error \"\" \"short int signed _Decimal64\" } */\n+short int signed _Decimal128 *x122; /* { dg-error \"\" \"short int signed _Decimal128\" } */\n+short int unsigned _Decimal32 *x123; /* { dg-error \"\" \"short int unsigned _Decimal32\" } */\n+short int unsigned _Decimal64 *x124; /* { dg-error \"\" \"short int unsigned _Decimal64\" } */\n+short int unsigned _Decimal128 *x125; /* { dg-error \"\" \"short int unsigned _Decimal128\" } */\n+short signed int _Decimal32 *x126; /* { dg-error \"\" \"short signed int _Decimal32\" } */\n+short signed int _Decimal64 *x127; /* { dg-error \"\" \"short signed int _Decimal64\" } */\n+short signed int _Decimal128 *x128; /* { dg-error \"\" \"short signed int _Decimal128\" } */\n+short unsigned int _Decimal32 *x129; /* { dg-error \"\" \"short unsigned int _Decimal32\" } */\n+short unsigned int _Decimal64 *x130; /* { dg-error \"\" \"short unsigned int _Decimal64\" } */\n+short unsigned int _Decimal128 *x131; /* { dg-error \"\" \"short unsigned int _Decimal128\" } */\n+int short signed _Decimal32 *x132; /* { dg-error \"\" \"int short signed _Decimal32\" } */\n+int short signed _Decimal64 *x133; /* { dg-error \"\" \"int short signed _Decimal64\" } */\n+int short signed _Decimal128 *x134; /* { dg-error \"\" \"int short signed _Decimal128\" } */\n+int short unsigned _Decimal32 *x135; /* { dg-error \"\" \"int short unsigned _Decimal32\" } */\n+int short unsigned _Decimal64 *x136; /* { dg-error \"\" \"int short unsigned _Decimal64\" } */\n+int short unsigned _Decimal128 *x137; /* { dg-error \"\" \"int short unsigned _Decimal128\" } */\n+int long long _Decimal32 *x138; /* { dg-error \"\" \"int long long _Decimal32\" } */\n+int long long _Decimal64 *x139; /* { dg-error \"\" \"int long long _Decimal64\" } */\n+int long long _Decimal128 *x140; /* { dg-error \"\" \"int long long _Decimal128\" } */\n+int long signed _Decimal32 *x141; /* { dg-error \"\" \"int long signed _Decimal32\" } */\n+int long signed _Decimal64 *x142; /* { dg-error \"\" \"int long signed _Decimal64\" } */\n+int long signed _Decimal128 *x143; /* { dg-error \"\" \"int long signed _Decimal128\" } */\n+int long unsigned _Decimal32 *x144; /* { dg-error \"\" \"int long unsigned _Decimal32\" } */\n+int long unsigned _Decimal64 *x145; /* { dg-error \"\" \"int long unsigned _Decimal64\" } */\n+int long unsigned _Decimal128 *x146; /* { dg-error \"\" \"int long unsigned _Decimal128\" } */\n+int signed short _Decimal32 *x147; /* { dg-error \"\" \"int signed short _Decimal32\" } */\n+int signed short _Decimal64 *x148; /* { dg-error \"\" \"int signed short _Decimal64\" } */\n+int signed short _Decimal128 *x149; /* { dg-error \"\" \"int signed short _Decimal128\" } */\n+int signed long _Decimal32 *x150; /* { dg-error \"\" \"int signed long _Decimal32\" } */\n+int signed long _Decimal64 *x151; /* { dg-error \"\" \"int signed long _Decimal64\" } */\n+int signed long _Decimal128 *x152; /* { dg-error \"\" \"int signed long _Decimal128\" } */\n+int unsigned short _Decimal32 *x153; /* { dg-error \"\" \"int unsigned short _Decimal32\" } */\n+int unsigned short _Decimal64 *x154; /* { dg-error \"\" \"int unsigned short _Decimal64\" } */\n+int unsigned short _Decimal128 *x155; /* { dg-error \"\" \"int unsigned short _Decimal128\" } */\n+int unsigned long _Decimal32 *x156; /* { dg-error \"\" \"int unsigned long _Decimal32\" } */\n+int unsigned long _Decimal64 *x157; /* { dg-error \"\" \"int unsigned long _Decimal64\" } */\n+int unsigned long _Decimal128 *x158; /* { dg-error \"\" \"int unsigned long _Decimal128\" } */\n+long int long _Decimal32 *x159; /* { dg-error \"\" \"long int long _Decimal32\" } */\n+long int long _Decimal64 *x160; /* { dg-error \"\" \"long int long _Decimal64\" } */\n+long int long _Decimal128 *x161; /* { dg-error \"\" \"long int long _Decimal128\" } */\n+long int signed _Decimal32 *x162; /* { dg-error \"\" \"long int signed _Decimal32\" } */\n+long int signed _Decimal64 *x163; /* { dg-error \"\" \"long int signed _Decimal64\" } */\n+long int signed _Decimal128 *x164; /* { dg-error \"\" \"long int signed _Decimal128\" } */\n+long int unsigned _Decimal32 *x165; /* { dg-error \"\" \"long int unsigned _Decimal32\" } */\n+long int unsigned _Decimal64 *x166; /* { dg-error \"\" \"long int unsigned _Decimal64\" } */\n+long int unsigned _Decimal128 *x167; /* { dg-error \"\" \"long int unsigned _Decimal128\" } */\n+long long int _Decimal32 *x168; /* { dg-error \"\" \"long long int _Decimal32\" } */\n+long long int _Decimal64 *x169; /* { dg-error \"\" \"long long int _Decimal64\" } */\n+long long int _Decimal128 *x170; /* { dg-error \"\" \"long long int _Decimal128\" } */\n+long long signed _Decimal32 *x171; /* { dg-error \"\" \"long long signed _Decimal32\" } */\n+long long signed _Decimal64 *x172; /* { dg-error \"\" \"long long signed _Decimal64\" } */\n+long long signed _Decimal128 *x172; /* { dg-error \"\" \"long long signed _Decimal128\" } */\n+long long unsigned _Decimal32 *x175; /* { dg-error \"\" \"long long unsigned _Decimal32\" } */\n+long long unsigned _Decimal64 *x176; /* { dg-error \"\" \"long long unsigned _Decimal64\" } */\n+long long unsigned _Decimal128 *x177; /* { dg-error \"\" \"long long unsigned _Decimal128\" } */\n+long signed int _Decimal32 *x178; /* { dg-error \"\" \"long signed int _Decimal32\" } */\n+long signed int _Decimal64 *x179; /* { dg-error \"\" \"long signed int _Decimal64\" } */\n+long signed int _Decimal128 *x180; /* { dg-error \"\" \"long signed int _Decimal128\" } */\n+long unsigned int _Decimal32 *x181; /* { dg-error \"\" \"long unsigned int _Decimal32\" } */\n+long unsigned int _Decimal64 *x182; /* { dg-error \"\" \"long unsigned int _Decimal64\" } */\n+long unsigned int _Decimal128 *x183; /* { dg-error \"\" \"long unsigned int _Decimal128\" } */\n+long unsigned long _Decimal32 *x184; /* { dg-error \"\" \"long unsigned long _Decimal32\" } */\n+long unsigned long _Decimal64 *x185; /* { dg-error \"\" \"long unsigned long _Decimal64\" } */\n+long unsigned long _Decimal128 *x186; /* { dg-error \"\" \"long unsigned long _Decimal128\" } */\n+signed short int _Decimal32 *x187; /* { dg-error \"\" \"signed short int _Decimal32\" } */\n+signed short int _Decimal64 *x188; /* { dg-error \"\" \"signed short int _Decimal64\" } */\n+signed short int _Decimal128 *x189; /* { dg-error \"\" \"signed short int _Decimal128\" } */\n+signed int short _Decimal32 *x190; /* { dg-error \"\" \"signed int short _Decimal32\" } */\n+signed int short _Decimal64 *x191; /* { dg-error \"\" \"signed int short _Decimal64\" } */\n+signed int short _Decimal128 *x191; /* { dg-error \"\" \"signed int short _Decimal128\" } */\n+signed int long _Decimal32 *x192; /* { dg-error \"\" \"signed int long _Decimal32\" } */\n+signed int long _Decimal64 *x193; /* { dg-error \"\" \"signed int long _Decimal64\" } */\n+signed int long _Decimal128 *x194; /* { dg-error \"\" \"signed int long _Decimal128\" } */\n+signed long int _Decimal32 *x195; /* { dg-error \"\" \"signed long int _Decimal32\" } */\n+signed long int _Decimal64 *x196; /* { dg-error \"\" \"signed long int _Decimal64\" } */\n+signed long int _Decimal128 *x197; /* { dg-error \"\" \"signed long int _Decimal128\" } */\n+signed long long _Decimal32 *x198; /* { dg-error \"\" \"signed long long _Decimal32\" } */\n+signed long long _Decimal64 *x199; /* { dg-error \"\" \"signed long long _Decimal64\" } */\n+signed long long _Decimal128 *x200; /* { dg-error \"\" \"signed long long _Decimal128\" } */\n+unsigned short int _Decimal32 *x201; /* { dg-error \"\" \"unsigned short int _Decimal32\" } */\n+unsigned short int _Decimal64 *x202; /* { dg-error \"\" \"unsigned short int _Decimal64\" } */\n+unsigned short int _Decimal128 *x203; /* { dg-error \"\" \"unsigned short int _Decimal128\" } */\n+unsigned int short _Decimal32 *x204; /* { dg-error \"\" \"unsigned int short _Decimal32\" } */\n+unsigned int short _Decimal64 *x205; /* { dg-error \"\" \"unsigned int short _Decimal64\" } */\n+unsigned int short _Decimal128 *x206; /* { dg-error \"\" \"unsigned int short _Decimal128\" } */\n+unsigned int long _Decimal32 *x207; /* { dg-error \"\" \"unsigned int long _Decimal32\" } */\n+unsigned int long _Decimal64 *x208; /* { dg-error \"\" \"unsigned int long _Decimal64\" } */\n+unsigned int long _Decimal128 *x209; /* { dg-error \"\" \"unsigned int long _Decimal128\" } */\n+unsigned long int _Decimal32 *x210; /* { dg-error \"\" \"unsigned long int _Decimal32\" } */\n+unsigned long int _Decimal64 *x211; /* { dg-error \"\" \"unsigned long int _Decimal64\" } */\n+unsigned long int _Decimal128 *x212; /* { dg-error \"\" \"unsigned long int _Decimal128\" } */\n+unsigned long long _Decimal32 *x213; /* { dg-error \"\" \"unsigned long long _Decimal32\" } */\n+unsigned long long _Decimal64 *x214; /* { dg-error \"\" \"unsigned long long _Decimal64\" } */\n+unsigned long long _Decimal128 *x215; /* { dg-error \"\" \"unsigned long long _Decimal128\" } */\n+int long long signed _Decimal32 *x216; /* { dg-error \"\" \"int long long signed _Decimal32\" } */\n+int long long signed _Decimal64 *x217; /* { dg-error \"\" \"int long long signed _Decimal64\" } */\n+int long long signed _Decimal128 *x218; /* { dg-error \"\" \"int long long signed _Decimal128\" } */\n+int long long unsigned _Decimal32 *x219; /* { dg-error \"\" \"int long long unsigned _Decimal32\" } */\n+int long long unsigned _Decimal64 *x220; /* { dg-error \"\" \"int long long unsigned _Decimal64\" } */\n+int long long unsigned _Decimal128 *x221; /* { dg-error \"\" \"int long long unsigned _Decimal128\" } */\n+int long signed long _Decimal32 *x222; /* { dg-error \"\" \"int long signed long _Decimal32\" } */\n+int long signed long _Decimal64 *x223; /* { dg-error \"\" \"int long signed long _Decimal64\" } */\n+int long signed long _Decimal128 *x224; /* { dg-error \"\" \"int long signed long _Decimal128\" } */\n+int long unsigned long _Decimal32 *x226; /* { dg-error \"\" \"int long unsigned long _Decimal32\" } */\n+int long unsigned long _Decimal64 *x227; /* { dg-error \"\" \"int long unsigned long _Decimal64\" } */\n+int long unsigned long _Decimal128 *x228; /* { dg-error \"\" \"int long unsigned long _Decimal128\" } */\n+int signed long long _Decimal32 *x229; /* { dg-error \"\" \"int signed long long _Decimal32\" } */\n+int signed long long _Decimal64 *x230; /* { dg-error \"\" \"int signed long long _Decimal64\" } */\n+int signed long long _Decimal128 *x231; /* { dg-error \"\" \"int signed long long _Decimal128\" } */\n+int unsigned long long _Decimal32 *x232; /* { dg-error \"\" \"int unsigned long long _Decimal32\" } */\n+int unsigned long long _Decimal64 *x233; /* { dg-error \"\" \"int unsigned long long _Decimal64\" } */\n+int unsigned long long _Decimal128 *x234; /* { dg-error \"\" \"int unsigned long long _Decimal128\" } */\n+long int long signed _Decimal32 *x235; /* { dg-error \"\" \"long int long signed _Decimal32\" } */\n+long int long signed _Decimal64 *x236; /* { dg-error \"\" \"long int long signed _Decimal64\" } */\n+long int long signed _Decimal128 *x237; /* { dg-error \"\" \"long int long signed _Decimal128\" } */\n+long int long unsigned _Decimal32 *x238; /* { dg-error \"\" \"long int long unsigned _Decimal32\" } */\n+long int long unsigned _Decimal64 *x239; /* { dg-error \"\" \"long int long unsigned _Decimal64\" } */\n+long int long unsigned _Decimal128 *x240; /* { dg-error \"\" \"long int long unsigned _Decimal128\" } */\n+long int signed long _Decimal32 *x241; /* { dg-error \"\" \"long int signed long _Decimal32\" } */\n+long int signed long _Decimal64 *x242; /* { dg-error \"\" \"long int signed long _Decimal64\" } */\n+long int signed long _Decimal128 *x243; /* { dg-error \"\" \"long int signed long _Decimal128\" } */\n+long int unsigned long _Decimal32 *x244; /* { dg-error \"\" \"long int unsigned long _Decimal32\" } */\n+long int unsigned long _Decimal64 *x245; /* { dg-error \"\" \"long int unsigned long _Decimal64\" } */\n+long int unsigned long _Decimal128 *x246; /* { dg-error \"\" \"long int unsigned long _Decimal128\" } */\n+long long int signed _Decimal32 *x247; /* { dg-error \"\" \"long long int signed _Decimal32\" } */\n+long long int signed _Decimal64 *x248; /* { dg-error \"\" \"long long int signed _Decimal64\" } */\n+long long int signed _Decimal128 *x249; /* { dg-error \"\" \"long long int signed _Decimal128\" } */\n+long long int unsigned _Decimal32 *x250; /* { dg-error \"\" \"long long int unsigned _Decimal32\" } */\n+long long int unsigned _Decimal64 *x251; /* { dg-error \"\" \"long long int unsigned _Decimal64\" } */\n+long long int unsigned _Decimal128 *x252; /* { dg-error \"\" \"long long int unsigned _Decimal128\" } */\n+long long signed int _Decimal32 *x253; /* { dg-error \"\" \"long long signed int _Decimal32\" } */\n+long long signed int _Decimal64 *x254; /* { dg-error \"\" \"long long signed int _Decimal64\" } */\n+long long signed int _Decimal128 *x255; /* { dg-error \"\" \"long long signed int _Decimal128\" } */\n+long long unsigned int _Decimal32 *x256; /* { dg-error \"\" \"long long unsigned int _Decimal32\" } */\n+long long unsigned int _Decimal64 *x257; /* { dg-error \"\" \"long long unsigned int _Decimal64\" } */\n+long long unsigned int _Decimal128 *x258; /* { dg-error \"\" \"long long unsigned int _Decimal128\" } */\n+long signed int long _Decimal32 *x259; /* { dg-error \"\" \"long signed int long _Decimal32\" } */\n+long signed int long _Decimal64 *x260; /* { dg-error \"\" \"long signed int long _Decimal64\" } */\n+long signed int long _Decimal128 *x261; /* { dg-error \"\" \"long signed int long _Decimal128\" } */\n+long signed long int _Decimal32 *x262; /* { dg-error \"\" \"long signed long int _Decimal32\" } */\n+long signed long int _Decimal64 *x263; /* { dg-error \"\" \"long signed long int _Decimal64\" } */\n+long signed long int _Decimal128 *x264; /* { dg-error \"\" \"long signed long int _Decimal128\" } */\n+long unsigned int long _Decimal32 *x265; /* { dg-error \"\" \"long unsigned int long _Decimal32\" } */\n+long unsigned int long _Decimal64 *x266; /* { dg-error \"\" \"long unsigned int long _Decimal64\" } */\n+long unsigned int long _Decimal128 *x267; /* { dg-error \"\" \"long unsigned int long _Decimal128\" } */\n+long unsigned long int _Decimal32 *x268; /* { dg-error \"\" \"long unsigned long int _Decimal32\" } */\n+long unsigned long int _Decimal64 *x269; /* { dg-error \"\" \"long unsigned long int _Decimal64\" } */\n+long unsigned long int _Decimal128 *x270; /* { dg-error \"\" \"long unsigned long int _Decimal128\" } */\n+signed long long int _Decimal32 *x271; /* { dg-error \"\" \"signed long long int _Decimal32\" } */\n+signed long long int _Decimal64 *x272; /* { dg-error \"\" \"signed long long int _Decimal64\" } */\n+signed long long int _Decimal128 *x273; /* { dg-error \"\" \"signed long long int _Decimal128\" } */\n+unsigned int long long _Decimal32 *x274; /* { dg-error \"\" \"unsigned int long long _Decimal32\" } */\n+unsigned int long long _Decimal64 *x275; /* { dg-error \"\" \"unsigned int long long _Decimal64\" } */\n+unsigned int long long _Decimal128 *x276; /* { dg-error \"\" \"unsigned int long long _Decimal128\" } */\n+unsigned long int long _Decimal32 *x277; /* { dg-error \"\" \"unsigned long int long _Decimal32\" } */\n+unsigned long int long _Decimal64 *x278; /* { dg-error \"\" \"unsigned long int long _Decimal64\" } */\n+unsigned long int long _Decimal128 *x279; /* { dg-error \"\" \"unsigned long int long _Decimal128\" } */\n+unsigned long long int _Decimal32 *x280; /* { dg-error \"\" \"unsigned long long int _Decimal32\" } */\n+unsigned long long int _Decimal64 *x281; /* { dg-error \"\" \"unsigned long long int _Decimal64\" } */\n+unsigned long long int _Decimal128 *x282; /* { dg-error \"\" \"unsigned long long int _Decimal128\" } */\n \n-_Complex _Decimal32 *x283; /* { dg-error \"error\" \"_Complex _Decimal32\" } */\n-_Complex _Decimal64 *x284; /* { dg-error \"error\" \"_Complex _Decimal64\" } */\n-_Complex _Decimal128 *x285; /* { dg-error \"error\" \"_Complex _Decimal128\" } */\n+_Complex _Decimal32 *x283; /* { dg-error \"\" \"_Complex _Decimal32\" } */\n+_Complex _Decimal64 *x284; /* { dg-error \"\" \"_Complex _Decimal64\" } */\n+_Complex _Decimal128 *x285; /* { dg-error \"\" \"_Complex _Decimal128\" } */\n \n-_Decimal32 _Complex *x286; /* { dg-error \"error\" \"_Decimal32 _Complex\" } */\n-_Decimal64 _Complex *x287; /* { dg-error \"error\" \"_Decimal64 _Complex\" } */\n-_Decimal128 _Complex *x288; /* { dg-error \"error\" \"_Decimal128 _Complex\" } */\n+_Decimal32 _Complex *x286; /* { dg-error \"\" \"_Decimal32 _Complex\" } */\n+_Decimal64 _Complex *x287; /* { dg-error \"\" \"_Decimal64 _Complex\" } */\n+_Decimal128 _Complex *x288; /* { dg-error \"\" \"_Decimal128 _Complex\" } */\n \n-unsigned _Decimal32 *x289; /* { dg-error \"error\" \"unsigned _Decimal32\" } */\n-unsigned _Decimal64 *x290; /* { dg-error \"error\" \"unsigned _Decimal64\" } */\n-unsigned _Decimal128 *x291; /* { dg-error \"error\" \"unsigned _Decimal128\" } */\n-signed _Decimal32 *x292; /* { dg-error \"error\" \"signed _Decimal32\" } */\n-signed _Decimal64 *x293; /* { dg-error \"error\" \"signed _Decimal64\" } */\n-signed _Decimal128 *x294; /* { dg-error \"error\" \"signed _Decimal128\" } */\n+unsigned _Decimal32 *x289; /* { dg-error \"\" \"unsigned _Decimal32\" } */\n+unsigned _Decimal64 *x290; /* { dg-error \"\" \"unsigned _Decimal64\" } */\n+unsigned _Decimal128 *x291; /* { dg-error \"\" \"unsigned _Decimal128\" } */\n+signed _Decimal32 *x292; /* { dg-error \"\" \"signed _Decimal32\" } */\n+signed _Decimal64 *x293; /* { dg-error \"\" \"signed _Decimal64\" } */\n+signed _Decimal128 *x294; /* { dg-error \"\" \"signed _Decimal128\" } */"}, {"sha": "61f0ba84fe335ee30e25a82ebd907f791fd5e918", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,12 +7,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-float dremf (float, float); /* { dg-warning \"warning: prototype declaration\" } */\n+float dremf (float, float); /* { dg-warning \"prototype declaration\" } */\n \n float\n dremf (x, y)\n      float x;\n      float y;\n-{ /* { dg-warning \"warning: promoted argument '.' doesn't match prototype\" } */\n+{ /* { dg-warning \"promoted argument '.' doesn't match prototype\" } */\n   return x + y;\n }"}, {"sha": "437e26f65ba3b153e19300eff6500922ed12c3ee", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,12 +7,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-float dremf (float, float); /* { dg-error \"error: prototype declaration\" } */\n+float dremf (float, float); /* { dg-error \"prototype declaration\" } */\n \n float\n dremf (x, y)\n      float x;\n      float y;\n-{ /* { dg-error \"error: promoted argument '.' doesn't match prototype\" } */\n+{ /* { dg-error \"promoted argument '.' doesn't match prototype\" } */\n   return x + y;\n }"}, {"sha": "f815994539c57e08abc05ae385a98cbfd9ebb221", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,7 +7,7 @@\n \n float\n dremf(x, y)\n-     float x, y; /* { dg-warning \"warning: conflicting types for built-in function 'dremf'\" } */\n+     float x, y; /* { dg-warning \"conflicting types for built-in function 'dremf'\" } */\n {\n   return x + y;\n }"}, {"sha": "8fbe0d99f601e7564acf01b350d5cda47a8e1ace", "filename": "gcc/testsuite/gcc.dg/empty-source-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-/* { dg-warning \"warning: ISO C forbids an empty source file\" \"empty\" { target *-*-* } 1 } */\n+/* { dg-warning \"ISO C forbids an empty source file\" \"empty\" { target *-*-* } 1 } */"}, {"sha": "a107a1cdf816edf3751dbe50031b8e900a9d5925", "filename": "gcc/testsuite/gcc.dg/empty-source-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-/* { dg-error \"error: ISO C forbids an empty source file\" \"empty\" { target *-*-* } 1 } */\n+/* { dg-error \"ISO C forbids an empty source file\" \"empty\" { target *-*-* } 1 } */"}, {"sha": "eebd6ca64c1d54765e5280162ef889a1e0c8ba62", "filename": "gcc/testsuite/gcc.dg/enum3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fenum3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fenum3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,7 +5,7 @@\n \n enum e { E, F };\n enum e2 {\n-  E1 = (void *)4, /* { dg-error \"error: enumerator value for 'E1' is not an integer constant\" } */\n+  E1 = (void *)4, /* { dg-error \"enumerator value for 'E1' is not an integer constant\" } */\n   E2 = (enum e)F,\n   E3 = (_Bool)1\n };"}, {"sha": "2964ed557e88e0519eaf95b423cbf6d29e4c41a5", "filename": "gcc/testsuite/gcc.dg/extra-semi-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-; /* { dg-warning \"warning: ISO C does not allow extra ';' outside of a function\" } */\n+; /* { dg-warning \"ISO C does not allow extra ';' outside of a function\" } */"}, {"sha": "53a420a5e0ceb26fbc97071ead2fc97b624aadfb", "filename": "gcc/testsuite/gcc.dg/extra-semi-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fextra-semi-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-; /* { dg-error \"error: ISO C does not allow extra ';' outside of a function\" } */\n+; /* { dg-error \"ISO C does not allow extra ';' outside of a function\" } */"}, {"sha": "bf050487a2f4b622df5a66349ad39a4ad52977d1", "filename": "gcc/testsuite/gcc.dg/float-range-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,7 +8,7 @@\n void\n f (void)\n {\n-  float a = 1e+100000000f; /* { dg-warning \"warning: floating constant exceeds range of 'float'\" \"\" } */\n-  double b = 1e+100000000; /* { dg-warning \"warning: floating constant exceeds range of 'double'\" } */\n-  long double c = 1e+100000000l; /* { dg-warning \"warning: floating constant exceeds range of 'long double'\" } */\n+  float a = 1e+100000000f; /* { dg-warning \"floating constant exceeds range of 'float'\" \"\" } */\n+  double b = 1e+100000000; /* { dg-warning \"floating constant exceeds range of 'double'\" } */\n+  long double c = 1e+100000000l; /* { dg-warning \"floating constant exceeds range of 'long double'\" } */\n }"}, {"sha": "d6c0b8a4000757135ab1af095837e5ee653be0d7", "filename": "gcc/testsuite/gcc.dg/float-range-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,7 +8,7 @@\n void\n f (void)\n {\n-  float a = __builtin_inff (); /* { dg-error \"error: target format does not support infinity\" } */\n-  double b = __builtin_inf (); /* { dg-error \"error: target format does not support infinity\" } */\n-  long double c = __builtin_infl (); /* { dg-error \"error: target format does not support infinity\" } */\n+  float a = __builtin_inff (); /* { dg-error \"target format does not support infinity\" } */\n+  double b = __builtin_inf (); /* { dg-error \"target format does not support infinity\" } */\n+  long double c = __builtin_infl (); /* { dg-error \"target format does not support infinity\" } */\n }"}, {"sha": "6a224e16de915de220ca4650a5624935f82bddde", "filename": "gcc/testsuite/gcc.dg/float-range-3.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,32 +5,32 @@\n \n void overflow(void)\n {\n-  float f1 = 3.5E+38f;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n-  float f2 = -3.5E+38f; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f1 = 3.5E+38f;  /* { dg-warning \"floating constant exceeds range\" } */\n+  float f2 = -3.5E+38f; /* { dg-warning \"floating constant exceeds range\" } */\n   float f3 = FP_INFINITE;\n   float f4 = -FP_INFINITE;\n \n-  double d1 = 1.9E+308;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n-  double d2 = -1.9E+308; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d1 = 1.9E+308;  /* { dg-warning \"floating constant exceeds range\" } */\n+  double d2 = -1.9E+308; /* { dg-warning \"floating constant exceeds range\" } */\n   double d3 = FP_INFINITE;\n   double d4 = -FP_INFINITE;\n }\n \n void underflow(void)\n {\n-  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f1 = 3.3E-46f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f2 = -3.3E-46f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f1 = 3.3E-46f;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f2 = -3.3E-46f; /* { dg-warning \"floating constant truncated to zero\" } */\n   float f3 = 0;\n   float f4 = -0;\n   float f5 = 0.0;\n   float f6 = -0.0;\n \n-  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d1 = 1.4E-325;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d2 = -1.4E-325; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d1 = 1.4E-325;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d2 = -1.4E-325; /* { dg-warning \"floating constant truncated to zero\" } */\n   double d3 = 0;\n   double d4 = -0;\n   double d5 = 0.0;"}, {"sha": "c3a2a9ee271cd0e4044ab0a4381361fa1442921c", "filename": "gcc/testsuite/gcc.dg/float-range-5.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,32 +6,32 @@\n \n void overflow(void)\n {\n-  float f1 = 3.5E+38f;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n-  float f2 = -3.5E+38f; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f1 = 3.5E+38f;  /* { dg-warning \"floating constant exceeds range\" } */\n+  float f2 = -3.5E+38f; /* { dg-warning \"floating constant exceeds range\" } */\n   float f3 = FP_INFINITE;\n   float f4 = -FP_INFINITE;\n \n-  double d1 = 1.9E+308;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n-  double d2 = -1.9E+308; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d1 = 1.9E+308;  /* { dg-warning \"floating constant exceeds range\" } */\n+  double d2 = -1.9E+308; /* { dg-warning \"floating constant exceeds range\" } */\n   double d3 = FP_INFINITE;\n   double d4 = -FP_INFINITE;\n }\n \n void underflow(void)\n {\n-  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f1 = 3.3E-46f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  float f2 = -3.3E-46f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f1 = 3.3E-46f;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  float f2 = -3.3E-46f; /* { dg-warning \"floating constant truncated to zero\" } */\n   float f3 = 0;\n   float f4 = -0;\n   float f5 = 0.0;\n   float f6 = -0.0;\n \n-  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d1 = 1.4E-325;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n-  double d2 = -1.4E-325; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d1 = 1.4E-325;  /* { dg-warning \"floating constant truncated to zero\" } */\n+  double d2 = -1.4E-325; /* { dg-warning \"floating constant truncated to zero\" } */\n   double d3 = 0;\n   double d4 = -0;\n   double d5 = 0.0;"}, {"sha": "0cdd5abc7b2560d8e338eb3daa945e9df6ade85a", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,4 +6,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat\" } */\n \n-void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "c4cd392971aae5be4b63df41f4bdcf99b3553278", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n void foo (int __gcc_host_wide_int__);\n-void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "111d1f27594a6784d8f1ba14c5d03d8a63f77fff", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n int __gcc_host_wide_int__;\n-void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "bb0e41c6db55adafc9be145f491a496cf21530b2", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n typedef int __gcc_host_wide_int__;\n-void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */"}, {"sha": "03e624a5cca0120a26a538acf66053c4a6229828", "filename": "gcc/testsuite/gcc.dg/format/cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,5 +12,5 @@ f (int x)\n {\n   printf(\"%s\", x); /* { dg-warning \"format\" } */\n   printf((char *)(size_t)\"%s\", x); /* { dg-warning \"format\" } */\n-  printf((char *)(char)\"%s\", x); /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  printf((char *)(char)\"%s\", x); /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "8d2ac61a93723b3d961a5fde90a19e35a29023ca", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n int tree;\n-void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'tree' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"'tree' is not defined as a type\" } */"}, {"sha": "9b2396219cf2cb0863a4d65ee24facfe92109b45", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n typedef int tree;\n-void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'tree' is not defined as a pointer type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"'tree' is not defined as a pointer type\" } */"}, {"sha": "3f704e6f93b092ea40139dd5773c72c26460aeeb", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n int location_t;\n-void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: 'location_t' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"'location_t' is not defined as a type\" } */"}, {"sha": "6715ee33e7900982dc3a5caca3ebc5a883108c9a", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n int __gcc_host_wide_int__;\n-void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as a type\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as a type\" } */"}, {"sha": "8daeb58a7b729c5854aeb8bcb5667d9429ce955a", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-9.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,4 +7,4 @@\n /* { dg-options \"-Wformat\" } */\n \n typedef int __gcc_host_wide_int__;\n-void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"error: '__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */\n+void bar (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))); /* { dg-error \"'__gcc_host_wide_int__' is not defined as 'long' or 'long long'\" } */"}, {"sha": "4c91596584cff138f1275d55ba924d7208234a17", "filename": "gcc/testsuite/gcc.dg/format/nul-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnul-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat\" } */\n \n-/* { dg-warning \"warning: embedded .* in format\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"embedded .* in format\" \"ignored\" { target *-*-* } 0 } */\n \n #include \"format.h\"\n "}, {"sha": "f8f3704480b0e2ddd48342441677f812691ba44c", "filename": "gcc/testsuite/gcc.dg/format/opt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-extra-args\" } */\n \n-/* { dg-warning \"warning: -Wformat-extra-args ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-extra-args ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "1ec9f014180ddc9b86086535d5ed899863afdcba", "filename": "gcc/testsuite/gcc.dg/format/opt-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-nonliteral\" } */\n \n-/* { dg-warning \"warning: -Wformat-nonliteral ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-nonliteral ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "03f55e4367f3f3fe0346bc29f59d96f9e6897deb", "filename": "gcc/testsuite/gcc.dg/format/opt-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-security\" } */\n \n-/* { dg-warning \"warning: -Wformat-security ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-security ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "f02b6c094fa910fda0b71789ac1ce3af31bd8082", "filename": "gcc/testsuite/gcc.dg/format/opt-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-y2k\" } */\n \n-/* { dg-warning \"warning: -Wformat-y2k ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-y2k ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "3315e33587d678bc170298cc584d92b567ed8460", "filename": "gcc/testsuite/gcc.dg/format/opt-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-zero-length\" } */\n \n-/* { dg-warning \"warning: -Wformat-zero-length ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-zero-length ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "29dedfae5782690f96a112f5e4b8f732945cf9b4", "filename": "gcc/testsuite/gcc.dg/format/opt-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-contains-nul\" } */\n \n-/* { dg-warning \"warning: -Wformat-contains-nul ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"-Wformat-contains-nul ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "7e71b51b687f04c31c7f14a12d757bceb2bd07b6", "filename": "gcc/testsuite/gcc.dg/framework-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fframework-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fframework-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fframework-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-options \"-F$srcdir/gcc.dg\" } */\n \n-#include <Foundation/Foundation.h> /* { dg-error \"error: Foundation/Foundation.h: No such file\" } */\n+#include <Foundation/Foundation.h> /* { dg-error \"Foundation/Foundation.h: No such file\" } */"}, {"sha": "2f9d8b80b42edfa942c8df374a8e9603d23c2736", "filename": "gcc/testsuite/gcc.dg/func-args-1.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -22,30 +22,30 @@ g (int a)\n {\n   f0();\n   x.f0();\n-  f0(a); /* { dg-error \"error: too many arguments to function 'f0'\" } */\n-  x.f0(a); /* { dg-error \"error: too many arguments to function 'x.f0'\" } */\n-  f0(a, a); /* { dg-error \"error: too many arguments to function 'f0'\" } */\n-  x.f0(a, a); /* { dg-error \"error: too many arguments to function 'x.f0'\" } */\n-  f1(); /* { dg-error \"error: too few arguments to function 'f1'\" } */\n-  x.f1(); /* { dg-error \"error: too few arguments to function 'x.f1'\" } */\n+  f0(a); /* { dg-error \"too many arguments to function 'f0'\" } */\n+  x.f0(a); /* { dg-error \"too many arguments to function 'x.f0'\" } */\n+  f0(a, a); /* { dg-error \"too many arguments to function 'f0'\" } */\n+  x.f0(a, a); /* { dg-error \"too many arguments to function 'x.f0'\" } */\n+  f1(); /* { dg-error \"too few arguments to function 'f1'\" } */\n+  x.f1(); /* { dg-error \"too few arguments to function 'x.f1'\" } */\n   f1(a);\n   x.f1(a);\n-  f1(a, a); /* { dg-error \"error: too many arguments to function 'f1'\" } */\n-  x.f1(a, a); /* { dg-error \"error: too many arguments to function 'x.f1'\" } */\n-  f1v(); /* { dg-error \"error: too few arguments to function 'f1v'\" } */\n-  x.f1v(); /* { dg-error \"error: too few arguments to function 'x.f1v'\" } */\n+  f1(a, a); /* { dg-error \"too many arguments to function 'f1'\" } */\n+  x.f1(a, a); /* { dg-error \"too many arguments to function 'x.f1'\" } */\n+  f1v(); /* { dg-error \"too few arguments to function 'f1v'\" } */\n+  x.f1v(); /* { dg-error \"too few arguments to function 'x.f1v'\" } */\n   f1v(a);\n   x.f1v(a);\n   f1v(a, a);\n   x.f1v(a, a);\n-  f2(a); /* { dg-error \"error: too few arguments to function 'f2'\" } */\n-  x.f2(a); /* { dg-error \"error: too few arguments to function 'x.f2'\" } */\n+  f2(a); /* { dg-error \"too few arguments to function 'f2'\" } */\n+  x.f2(a); /* { dg-error \"too few arguments to function 'x.f2'\" } */\n   f2(a, a);\n   x.f2(a, a);\n-  f2(a, a, a); /* { dg-error \"error: too many arguments to function 'f2'\" } */\n-  x.f2(a, a, a); /* { dg-error \"error: too many arguments to function 'x.f2'\" } */\n-  f2v(a); /* { dg-error \"error: too few arguments to function 'f2v'\" } */\n-  x.f2v(a); /* { dg-error \"error: too few arguments to function 'x.f2v'\" } */\n+  f2(a, a, a); /* { dg-error \"too many arguments to function 'f2'\" } */\n+  x.f2(a, a, a); /* { dg-error \"too many arguments to function 'x.f2'\" } */\n+  f2v(a); /* { dg-error \"too few arguments to function 'f2v'\" } */\n+  x.f2v(a); /* { dg-error \"too few arguments to function 'x.f2v'\" } */\n   f2v(a, a);\n   x.f2v(a, a);\n   f2v(a, a, a);"}, {"sha": "e91dd666b0e390e35c05b6fb05b4409f3aa08262", "filename": "gcc/testsuite/gcc.dg/func-outside-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,6 +4,6 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-const char *a = __func__; /* { dg-warning \"warning: '__func__' is not defined outside of function scope\" \"undef\" } */\n+const char *a = __func__; /* { dg-warning \"'__func__' is not defined outside of function scope\" \"undef\" } */\n const char *b = __FUNCTION__;\n const char *c = __PRETTY_FUNCTION__;"}, {"sha": "be3b0999e787c18a09faa8ea515159c7b2789b4d", "filename": "gcc/testsuite/gcc.dg/func-outside-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,6 +4,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-const char *a = __func__; /* { dg-error \"error: '__func__' is not defined outside of function scope\" \"undef\" } */\n+const char *a = __func__; /* { dg-error \"'__func__' is not defined outside of function scope\" \"undef\" } */\n const char *b = __FUNCTION__;\n const char *c = __PRETTY_FUNCTION__;"}, {"sha": "2e561e4b1de8d46e17dfa4a25f05a23709d92217", "filename": "gcc/testsuite/gcc.dg/gnu-cond-expr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,5 +9,5 @@ int a, b, c;\n void\n f (void)\n {\n-  c = (++a ? : b); /* { dg-warning \"warning: ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n+  c = (++a ? : b); /* { dg-warning \"ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n }"}, {"sha": "90555ad63f5c2dbc1772fce3ace4045368af4d55", "filename": "gcc/testsuite/gcc.dg/gnu-cond-expr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,5 +9,5 @@ int a, b, c;\n void\n f (void)\n {\n-  c = (++a ? : b); /* { dg-error \"error: ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n+  c = (++a ? : b); /* { dg-error \"ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n }"}, {"sha": "b29a6cb92242fff3f92477615f80d20cb7ff7e4a", "filename": "gcc/testsuite/gcc.dg/if-empty-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,15 +7,15 @@ void\n f (int x)\n {\n   if (x)\n-    ; /* { dg-warning \"warning: suggest braces around empty body in an\" } */\n+    ; /* { dg-warning \"suggest braces around empty body in an\" } */\n   if (x)\n     ; /* By design we don't warn in this case.  */\n   else\n     (void)0;\n   if (x)\n     (void)0;\n   else\n-    ; /* { dg-warning \"warning: suggest braces around empty body in an\" } */\n+    ; /* { dg-warning \"suggest braces around empty body in an\" } */\n   if (x)\n     (void)0;\n   else"}, {"sha": "cc808b752a91940887f45057e9c27aeea8e1ac3a", "filename": "gcc/testsuite/gcc.dg/init-bad-1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,42 +4,42 @@\n /* { dg-options \"-std=gnu99\" } */\n \n void f(void);\n-void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+void g(void) = f; /* { dg-error \"function 'g' is initialized like a variable\" } */\n \n void h(a)\n-     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+     int a = 1; /* { dg-error \"parameter 'a' is initialized\" } */\n {\n-  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  struct s x = { 0 }; /* { dg-error \"variable 'x' has initializer but incomplete type\" } */\n   /* { dg-warning \"excess elements|near init\" \"excess\" { target *-*-* } 12 } */\n   /* { dg-error \"storage size\" \"size\" { target *-*-* } 12 } */\n }\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 21 } */\n \n-int i = { }; /* { dg-error \"error: empty scalar initializer\" } */\n+int i = { }; /* { dg-error \"empty scalar initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 24 } */\n \n int j = { 1 };\n \n-int k = { 1, 2 }; /* { dg-warning \"warning: excess elements in scalar initializer\" } */\n+int k = { 1, 2 }; /* { dg-warning \"excess elements in scalar initializer\" } */\n /* { dg-warning \"near init\" \"near\" { target *-*-* } 29 } */\n \n-int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */\n-int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 34 } */\n-int a3[1] = { [0 ... 1] = 0 }; /* { dg-error \"error: array index range in initializer exceeds array bounds\" } */\n+int a3[1] = { [0 ... 1] = 0 }; /* { dg-error \"array index range in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 36 } */\n-int a4[2] = { [1 ... 0] = 0 }; /* { dg-error \"error: empty index range in initializer\" } */\n+int a4[2] = { [1 ... 0] = 0 }; /* { dg-error \"empty index range in initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 38 } */\n-int a5[2] = { [0 ... 2] = 0 }; /* { dg-error \"error: array index range in initializer exceeds array bounds\" } */\n+int a5[2] = { [0 ... 2] = 0 }; /* { dg-error \"array index range in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 40 } */\n-int a6[2] = { [-1 ... 1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a6[2] = { [-1 ... 1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 42 } */\n-int a7[] = { [-1 ... 1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a7[] = { [-1 ... 1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 44 } */"}, {"sha": "1f0f78bc60b6a801815fbe88907cdd706d497349", "filename": "gcc/testsuite/gcc.dg/init-bad-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,29 +5,29 @@\n /* { dg-options \"-std=gnu99 -pedantic\" } */\n \n void f(void);\n-void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+void g(void) = f; /* { dg-error \"function 'g' is initialized like a variable\" } */\n \n void h(a)\n-     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+     int a = 1; /* { dg-error \"parameter 'a' is initialized\" } */\n {\n-  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  struct s x = { 0 }; /* { dg-error \"variable 'x' has initializer but incomplete type\" } */\n   /* { dg-warning \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n   /* { dg-error \"storage size\" \"size\" { target *-*-* } 13 } */\n }\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 22 } */\n \n int j = { 1 };\n \n-int k = { 1, 2 }; /* { dg-warning \"warning: excess elements in scalar initializer\" } */\n+int k = { 1, 2 }; /* { dg-warning \"excess elements in scalar initializer\" } */\n /* { dg-warning \"near init\" \"near\" { target *-*-* } 27 } */\n \n-int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 30 } */\n-int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */"}, {"sha": "109e65e3e4ba46714be739c607af42d924dab64c", "filename": "gcc/testsuite/gcc.dg/init-bad-3.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,29 +5,29 @@\n /* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n \n void f(void);\n-void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+void g(void) = f; /* { dg-error \"function 'g' is initialized like a variable\" } */\n \n void h(a)\n-     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+     int a = 1; /* { dg-error \"parameter 'a' is initialized\" } */\n {\n-  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  struct s x = { 0 }; /* { dg-error \"variable 'x' has initializer but incomplete type\" } */\n   /* { dg-error \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n   /* { dg-error \"storage size\" \"size\" { target *-*-* } 13 } */\n }\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-error \"error: initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-error \"error: initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-error \"initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-error \"initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 22 } */\n \n int j = { 1 };\n \n-int k = { 1, 2 }; /* { dg-error \"error: excess elements in scalar initializer\" } */\n+int k = { 1, 2 }; /* { dg-error \"excess elements in scalar initializer\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 27 } */\n \n-int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 30 } */\n-int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n /* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */"}, {"sha": "4fbd456431e0fade69a33dd726206a934a1f99d5", "filename": "gcc/testsuite/gcc.dg/init-desig-obs-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-std=gnu99 -pedantic\" } */\n struct s { int a; };\n struct s s0 = { .a = 1 };\n-struct s s1 = { a: 1 }; /* { dg-warning \"warning: obsolete use of designated initializer with ':'\" } */\n+struct s s1 = { a: 1 }; /* { dg-warning \"obsolete use of designated initializer with ':'\" } */\n \n int x0[] = { [0] = 1 };\n-int x1[] = { [0] 1 }; /* { dg-warning \"warning: obsolete use of designated initializer without '='\" } */\n+int x1[] = { [0] 1 }; /* { dg-warning \"obsolete use of designated initializer without '='\" } */"}, {"sha": "e3fca6cdd8f9d5919fcb90bd4d5c3610ac5aea22", "filename": "gcc/testsuite/gcc.dg/init-desig-obs-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-desig-obs-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n struct s { int a; };\n struct s s0 = { .a = 1 };\n-struct s s1 = { a: 1 }; /* { dg-error \"error: obsolete use of designated initializer with ':'\" } */\n+struct s s1 = { a: 1 }; /* { dg-error \"obsolete use of designated initializer with ':'\" } */\n \n int x0[] = { [0] = 1 };\n-int x1[] = { [0] 1 }; /* { dg-error \"error: obsolete use of designated initializer without '='\" } */\n+int x1[] = { [0] 1 }; /* { dg-error \"obsolete use of designated initializer without '='\" } */"}, {"sha": "597d72d374b664ade1533f89baf26863ab0f2e03", "filename": "gcc/testsuite/gcc.dg/init-empty-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,6 +4,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -pedantic\" } */\n \n-struct s { int a; } x = { }; /* { dg-warning \"warning: ISO C forbids empty initializer braces\" } */\n+struct s { int a; } x = { }; /* { dg-warning \"ISO C forbids empty initializer braces\" } */\n \n-struct s *p = &(struct s){ }; /* { dg-warning \"warning: ISO C forbids empty initializer braces\" } */\n+struct s *p = &(struct s){ }; /* { dg-warning \"ISO C forbids empty initializer braces\" } */"}, {"sha": "136931867c99a1b12dff543806abd88b4db30911", "filename": "gcc/testsuite/gcc.dg/init-empty-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-empty-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,6 +4,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n \n-struct s { int a; } x = { }; /* { dg-error \"error: ISO C forbids empty initializer braces\" } */\n+struct s { int a; } x = { }; /* { dg-error \"ISO C forbids empty initializer braces\" } */\n \n-struct s *p = &(struct s){ }; /* { dg-error \"error: ISO C forbids empty initializer braces\" } */\n+struct s *p = &(struct s){ }; /* { dg-error \"ISO C forbids empty initializer braces\" } */"}, {"sha": "dd07fdd11d55c1c8e7e6aa2034df17ff686a2f9b", "filename": "gcc/testsuite/gcc.dg/inline-11.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,9 +6,9 @@\n /* These should perhaps be hard errors, but are pedwarns at\n    present.  */\n \n-inline int a; /* { dg-warning \"warning: variable 'a' declared 'inline'\" } */\n-inline int (*b)(void); /* { dg-warning \"warning: variable 'b' declared 'inline'\" } */\n-typedef inline void c(void); /* { dg-warning \"warning: typedef 'c' declared 'inline'\" } */\n-typedef inline int d; /* { dg-warning \"warning: typedef 'd' declared 'inline'\" } */\n-void e(inline int f(void)); /* { dg-warning \"warning: parameter 'f' declared 'inline'\" } */\n-void g(inline int(void)); /* { dg-warning \"warning: parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */\n+inline int a; /* { dg-warning \"variable 'a' declared 'inline'\" } */\n+inline int (*b)(void); /* { dg-warning \"variable 'b' declared 'inline'\" } */\n+typedef inline void c(void); /* { dg-warning \"typedef 'c' declared 'inline'\" } */\n+typedef inline int d; /* { dg-warning \"typedef 'd' declared 'inline'\" } */\n+void e(inline int f(void)); /* { dg-warning \"parameter 'f' declared 'inline'\" } */\n+void g(inline int(void)); /* { dg-warning \"parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */"}, {"sha": "c2895176354195f0e8df1c241a54ed518753af07", "filename": "gcc/testsuite/gcc.dg/inline-12.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,9 +6,9 @@\n /* These should perhaps be hard errors, but are pedwarns at\n    present.  */\n \n-inline int a; /* { dg-error \"error: variable 'a' declared 'inline'\" } */\n-inline int (*b)(void); /* { dg-error \"error: variable 'b' declared 'inline'\" } */\n-typedef inline void c(void); /* { dg-error \"error: typedef 'c' declared 'inline'\" } */\n-typedef inline int d; /* { dg-error \"error: typedef 'd' declared 'inline'\" } */\n-void e(inline int f(void)); /* { dg-error \"error: parameter 'f' declared 'inline'\" } */\n-void g(inline int(void)); /* { dg-error \"error: parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */\n+inline int a; /* { dg-error \"variable 'a' declared 'inline'\" } */\n+inline int (*b)(void); /* { dg-error \"variable 'b' declared 'inline'\" } */\n+typedef inline void c(void); /* { dg-error \"typedef 'c' declared 'inline'\" } */\n+typedef inline int d; /* { dg-error \"typedef 'd' declared 'inline'\" } */\n+void e(inline int f(void)); /* { dg-error \"parameter 'f' declared 'inline'\" } */\n+void g(inline int(void)); /* { dg-error \"parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */"}, {"sha": "b4c0eb8401987efe8220d9a1f7fc28f10c748ab0", "filename": "gcc/testsuite/gcc.dg/inline-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -fhosted\" } */\n \n-inline int main (void); /* { dg-warning \"warning: cannot inline function 'main'\" } */\n+inline int main (void); /* { dg-warning \"cannot inline function 'main'\" } */"}, {"sha": "c8dda536014569d422302ffc73928b8886f892ea", "filename": "gcc/testsuite/gcc.dg/inline-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -fhosted -pedantic-errors\" } */\n \n-inline int main (void); /* { dg-error \"error: cannot inline function 'main'\" } */\n+inline int main (void); /* { dg-error \"cannot inline function 'main'\" } */"}, {"sha": "64f6d8bbee54d8d11ed3c45b5a2aa2d43ffc944a", "filename": "gcc/testsuite/gcc.dg/inline3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n    translation unit.  */\n extern inline int foo(void) { return 0; }\n inline int foo (void) { return 1; } /* { dg-error \"previous definition of\" } */\n-int foo (void) { return 2; } /* { dg-error \"error: redefinition of\" } */\n+int foo (void) { return 2; } /* { dg-error \"redefinition of\" } */"}, {"sha": "3b33888d890ed27e5c3de36f19cd0dcb3bd56b21", "filename": "gcc/testsuite/gcc.dg/label-decl-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,8 +10,8 @@ void\n f (void)\n {\n   __label__ a, b, c, d;\n-  __extension__ (void)&&d; /* { dg-error \"error: label 'd' used but not defined\" } */\n-  goto c; /* { dg-error \"error: label 'c' used but not defined\" } */\n+  __extension__ (void)&&d; /* { dg-error \"label 'd' used but not defined\" } */\n+  goto c; /* { dg-error \"label 'c' used but not defined\" } */\n  a: (void)0;\n  b: (void)0;\n }"}, {"sha": "fa351f67a132af9183057a0df934ff221a9381bf", "filename": "gcc/testsuite/gcc.dg/label-decl-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,9 +9,9 @@ void\n f (void)\n {\n   __label__ a, b, c, d;\n-  __extension__ (void)&&d; /* { dg-error \"error: label 'd' used but not defined\" } */\n-  /* { dg-warning \"warning: ISO C forbids label declarations\" \"label decls\" { target *-*-* } 12 } */\n-  goto c; /* { dg-error \"error: label 'c' used but not defined\" } */\n+  __extension__ (void)&&d; /* { dg-error \"label 'd' used but not defined\" } */\n+  /* { dg-warning \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } 12 } */\n+  goto c; /* { dg-error \"label 'c' used but not defined\" } */\n  a: (void)0;\n  b: (void)0;\n }"}, {"sha": "b980a2f753063b5347cb55e44ea90de2be116865", "filename": "gcc/testsuite/gcc.dg/label-decl-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,9 +10,9 @@ void\n f (void)\n {\n   __label__ a, b, c, d;\n-  __extension__ (void)&&d; /* { dg-error \"error: label 'd' used but not defined\" } */\n-  /* { dg-error \"error: ISO C forbids label declarations\" \"label decls\" { target *-*-* } 13 } */\n-  goto c; /* { dg-error \"error: label 'c' used but not defined\" } */\n+  __extension__ (void)&&d; /* { dg-error \"label 'd' used but not defined\" } */\n+  /* { dg-error \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } 13 } */\n+  goto c; /* { dg-error \"label 'c' used but not defined\" } */\n  a: (void)0;\n  b: (void)0;\n }"}, {"sha": "7b2a195c1b29133fbed721a51becafe3275ce007", "filename": "gcc/testsuite/gcc.dg/label-decl-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,9 +6,9 @@\n void\n f (void)\n {\n-  __label__ a, b, a; /* { dg-error \"error: duplicate label declaration 'a'\" } */\n-  /* { dg-error \"error: previous declaration of 'a' was here\" \"previous\" { target *-*-* } 9 } */\n-  __label__ c; /* { dg-error \"error: previous declaration of 'c' was here\" } */\n-  __label__ c; /* { dg-error \"error: duplicate label declaration 'c'\" } */\n+  __label__ a, b, a; /* { dg-error \"duplicate label declaration 'a'\" } */\n+  /* { dg-error \"previous declaration of 'a' was here\" \"previous\" { target *-*-* } 9 } */\n+  __label__ c; /* { dg-error \"previous declaration of 'c' was here\" } */\n+  __label__ c; /* { dg-error \"duplicate label declaration 'c'\" } */\n   return;\n }"}, {"sha": "2ef2416f2ec19069c577358bb47f7d9834ba696d", "filename": "gcc/testsuite/gcc.dg/long-long-typespec-1.c", "status": "modified", "additions": 730, "deletions": 730, "changes": 1460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-typespec-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "a6f88096226a2cb774059ebb6d52d1689b50c1a5", "filename": "gcc/testsuite/gcc.dg/lvalue-2.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,12 +9,12 @@ int a, b;\n void\n f0 (void)\n {\n-  (a+b) = 1; /* { dg-error \"error: lvalue required as left operand of assignment\" } */\n-  (a+b)++; /* { dg-error \"error: lvalue required as increment operand\" } */\n-  ++(a+b); /* { dg-error \"error: lvalue required as increment operand\" } */\n-  (a+b)--; /* { dg-error \"error: lvalue required as decrement operand\" } */\n-  --(a+b); /* { dg-error \"error: lvalue required as decrement operand\" } */\n-  &(a+b); /* { dg-error \"error: lvalue required as unary '&' operand\" } */\n+  (a+b) = 1; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (a+b)++; /* { dg-error \"lvalue required as increment operand\" } */\n+  ++(a+b); /* { dg-error \"lvalue required as increment operand\" } */\n+  (a+b)--; /* { dg-error \"lvalue required as decrement operand\" } */\n+  --(a+b); /* { dg-error \"lvalue required as decrement operand\" } */\n+  &(a+b); /* { dg-error \"lvalue required as unary '&' operand\" } */\n }\n \n const int c;\n@@ -25,24 +25,24 @@ const int *f;\n void\n f1 (void)\n {\n-  c = 1; /* { dg-error \"error: assignment of read-only variable 'c'\" } */\n-  d.x = 1; /* { dg-error \"error: assignment of read-only variable 'd'\" } */\n-  e.x = 1; /* { dg-error \"error: assignment of read-only member 'x'\" } */\n-  *f = 1; /* { dg-error \"error: assignment of read-only location\" } */\n-  c++; /* { dg-error \"error: increment of read-only variable 'c'\" } */\n-  d.x++; /* { dg-error \"error: increment of read-only variable 'd'\" } */\n-  e.x++; /* { dg-error \"error: increment of read-only member 'x'\" } */\n-  (*f)++; /* { dg-error \"error: increment of read-only location\" } */\n-  ++c; /* { dg-error \"error: increment of read-only variable 'c'\" } */\n-  ++d.x; /* { dg-error \"error: increment of read-only variable 'd'\" } */\n-  ++e.x; /* { dg-error \"error: increment of read-only member 'x'\" } */\n-  ++(*f); /* { dg-error \"error: increment of read-only location\" } */\n-  c--; /* { dg-error \"error: decrement of read-only variable 'c'\" } */\n-  d.x--; /* { dg-error \"error: decrement of read-only variable 'd'\" } */\n-  e.x--; /* { dg-error \"error: decrement of read-only member 'x'\" } */\n-  (*f)--; /* { dg-error \"error: decrement of read-only location\" } */\n-  --c; /* { dg-error \"error: decrement of read-only variable 'c'\" } */\n-  --d.x; /* { dg-error \"error: decrement of read-only variable 'd'\" } */\n-  --e.x; /* { dg-error \"error: decrement of read-only member 'x'\" } */\n-  --(*f); /* { dg-error \"error: decrement of read-only location\" } */\n+  c = 1; /* { dg-error \"assignment of read-only variable 'c'\" } */\n+  d.x = 1; /* { dg-error \"assignment of read-only variable 'd'\" } */\n+  e.x = 1; /* { dg-error \"assignment of read-only member 'x'\" } */\n+  *f = 1; /* { dg-error \"assignment of read-only location\" } */\n+  c++; /* { dg-error \"increment of read-only variable 'c'\" } */\n+  d.x++; /* { dg-error \"increment of read-only variable 'd'\" } */\n+  e.x++; /* { dg-error \"increment of read-only member 'x'\" } */\n+  (*f)++; /* { dg-error \"increment of read-only location\" } */\n+  ++c; /* { dg-error \"increment of read-only variable 'c'\" } */\n+  ++d.x; /* { dg-error \"increment of read-only variable 'd'\" } */\n+  ++e.x; /* { dg-error \"increment of read-only member 'x'\" } */\n+  ++(*f); /* { dg-error \"increment of read-only location\" } */\n+  c--; /* { dg-error \"decrement of read-only variable 'c'\" } */\n+  d.x--; /* { dg-error \"decrement of read-only variable 'd'\" } */\n+  e.x--; /* { dg-error \"decrement of read-only member 'x'\" } */\n+  (*f)--; /* { dg-error \"decrement of read-only location\" } */\n+  --c; /* { dg-error \"decrement of read-only variable 'c'\" } */\n+  --d.x; /* { dg-error \"decrement of read-only variable 'd'\" } */\n+  --e.x; /* { dg-error \"decrement of read-only member 'x'\" } */\n+  --(*f); /* { dg-error \"decrement of read-only location\" } */\n }"}, {"sha": "6a500d4d69fed4d2546cd45ac3466e58c07bb2d4", "filename": "gcc/testsuite/gcc.dg/lvalue-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,6 +9,6 @@ typeof (x.a) b;\n void\n f (void)\n {\n-  x.a = 1; /* { dg-error \"error: assignment of read-only member 'a'\" } */\n-  b = 1; /* { dg-error \"error: assignment of read-only variable 'b'\" } */\n+  x.a = 1; /* { dg-error \"assignment of read-only member 'a'\" } */\n+  b = 1; /* { dg-error \"assignment of read-only variable 'b'\" } */\n }"}, {"sha": "19e8a6155b90f1439d405695eab697727235dfb8", "filename": "gcc/testsuite/gcc.dg/nested-func-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,14 +7,14 @@\n void\n f (void)\n {\n-  auto int fn (int); /* { dg-error \"error: nested function 'fn' declared but never defined\" } */\n-  auto int fn2 (int); /* { dg-error \"error: nested function 'fn2' declared but never defined\" } */\n+  auto int fn (int); /* { dg-error \"nested function 'fn' declared but never defined\" } */\n+  auto int fn2 (int); /* { dg-error \"nested function 'fn2' declared but never defined\" } */\n   sizeof(fn(1));\n }\n \n void\n h (void)\n {\n-  auto int hn (int); /* { dg-error \"error: nested function 'hn' declared but never defined\" } */\n+  auto int hn (int); /* { dg-error \"nested function 'hn' declared but never defined\" } */\n   hn (1);\n }"}, {"sha": "acc961dac234a7e9e99322822afcf57a9aa12d79", "filename": "gcc/testsuite/gcc.dg/nested-redef-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,21 +4,21 @@\n /* { dg-options \"\" } */\n \n struct s0 {\n-  struct s0 { int a; } x; /* { dg-error \"error: nested redefinition of 'struct s0'\" } */\n+  struct s0 { int a; } x; /* { dg-error \"nested redefinition of 'struct s0'\" } */\n };\n \n struct s1 {\n-  const struct s1 { int b; } x; /* { dg-error \"error: nested redefinition of 'struct s1'\" } */\n+  const struct s1 { int b; } x; /* { dg-error \"nested redefinition of 'struct s1'\" } */\n };\n \n struct s2 {\n-  struct s2 { int c; } *x; /* { dg-error \"error: nested redefinition of 'struct s2'\" } */\n+  struct s2 { int c; } *x; /* { dg-error \"nested redefinition of 'struct s2'\" } */\n };\n \n struct s3 {\n   struct s4 {\n     struct s5 {\n-      struct s3 { int a; } **x; /* { dg-error \"error: nested redefinition of 'struct s3'\" } */\n+      struct s3 { int a; } **x; /* { dg-error \"nested redefinition of 'struct s3'\" } */\n     } y;\n   } z;\n };\n@@ -27,15 +27,15 @@ struct s6;\n struct s6 { struct s6 *p; };\n \n union u0 {\n-  union u0 { int c; } *x; /* { dg-error \"error: nested redefinition of 'union u0'\" } */\n+  union u0 { int c; } *x; /* { dg-error \"nested redefinition of 'union u0'\" } */\n };\n \n enum e0 {\n-  E0 = sizeof(enum e0 { E1 }) /* { dg-error \"error: nested redefinition of 'enum e0'\" } */\n+  E0 = sizeof(enum e0 { E1 }) /* { dg-error \"nested redefinition of 'enum e0'\" } */\n };\n \n enum e1 {\n-  E2 = sizeof(enum e2 { E2 }), /* { dg-error \"error: redeclaration of enumerator 'E2'\" } */\n+  E2 = sizeof(enum e2 { E2 }), /* { dg-error \"redeclaration of enumerator 'E2'\" } */\n   /* { dg-error \"previous definition\" \"previous E2\" { target *-*-* } 38 } */\n   E3\n };"}, {"sha": "5bc78abd4fb81c0537ef8c97ddddde2663596903", "filename": "gcc/testsuite/gcc.dg/noreturn-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,6 +5,6 @@ extern void exit (int) __attribute__ ((__noreturn__));\n \n int\n main (void)\n-{ /* { dg-warning \"warning: function might be possible candidate for attribute 'noreturn'\" \"warn for main\" } */\n+{ /* { dg-warning \"function might be possible candidate for attribute 'noreturn'\" \"warn for main\" } */\n   exit (0);\n }"}, {"sha": "0460facef616169cb73c6d14fe61cdffe49077fc", "filename": "gcc/testsuite/gcc.dg/old-style-prom-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,12 +3,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-float f (float, float); /* { dg-warning \"warning: prototype declaration\" } */\n+float f (float, float); /* { dg-warning \"prototype declaration\" } */\n \n float\n f (x, y)\n      float x;\n      float y;\n-{ /* { dg-warning \"warning: promoted argument '.' doesn't match prototype\" } */\n+{ /* { dg-warning \"promoted argument '.' doesn't match prototype\" } */\n   return x + y;\n }"}, {"sha": "931a4a7264b364e249c903d048ad3112e2f850c2", "filename": "gcc/testsuite/gcc.dg/old-style-prom-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,12 +3,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-float f (float, float); /* { dg-error \"error: prototype declaration\" } */\n+float f (float, float); /* { dg-error \"prototype declaration\" } */\n \n float\n f (x, y)\n      float x;\n      float y;\n-{ /* { dg-error \"error: promoted argument '.' doesn't match prototype\" } */\n+{ /* { dg-error \"promoted argument '.' doesn't match prototype\" } */\n   return x + y;\n }"}, {"sha": "4d9c215a5dc817edd21a6e4a182d752f4b013ff5", "filename": "gcc/testsuite/gcc.dg/old-style-then-proto-1.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,40 +5,40 @@\n /* { dg-options \"\" } */\n \n void f1() {}\n-void f1(void); /* { dg-warning \"warning: prototype for 'f1' follows non-prototype definition\" } */\n+void f1(void); /* { dg-warning \"prototype for 'f1' follows non-prototype definition\" } */\n \n-void f2() {} /* { dg-error \"error: previous definition of 'f2' was here\" } */\n-void f2(int); /* { dg-error \"error: prototype for 'f2' declares more arguments than previous old-style definition\" } */\n+void f2() {} /* { dg-error \"previous definition of 'f2' was here\" } */\n+void f2(int); /* { dg-error \"prototype for 'f2' declares more arguments than previous old-style definition\" } */\n \n-void f3(a) int a; {} /* { dg-error \"error: previous definition of 'f3' was here\" } */\n-void f3(void); /* { dg-error \"error: prototype for 'f3' declares fewer arguments than previous old-style definition\" } */\n+void f3(a) int a; {} /* { dg-error \"previous definition of 'f3' was here\" } */\n+void f3(void); /* { dg-error \"prototype for 'f3' declares fewer arguments than previous old-style definition\" } */\n \n void f4(a) int a; {}\n-void f4(int); /* { dg-warning \"warning: prototype for 'f4' follows non-prototype definition\" } */\n+void f4(int); /* { dg-warning \"prototype for 'f4' follows non-prototype definition\" } */\n \n-void f5(a) int a; {} /* { dg-error \"error: previous definition of 'f5' was here\" } */\n-void f5(int, int); /* { dg-error \"error: prototype for 'f5' declares more arguments than previous old-style definition\" } */\n+void f5(a) int a; {} /* { dg-error \"previous definition of 'f5' was here\" } */\n+void f5(int, int); /* { dg-error \"prototype for 'f5' declares more arguments than previous old-style definition\" } */\n \n-void f6(a) int a; {} /* { dg-error \"error: previous definition of 'f6' was here\" } */\n-void f6(int, ...); /* { dg-error \"error: conflicting types for 'f6'\" } */\n+void f6(a) int a; {} /* { dg-error \"previous definition of 'f6' was here\" } */\n+void f6(int, ...); /* { dg-error \"conflicting types for 'f6'\" } */\n \n-void f7(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f7' was here\" } */\n-void f7(int); /* { dg-error \"error: prototype for 'f7' declares fewer arguments than previous old-style definition\" } */\n+void f7(a, b) int a, b; {} /* { dg-error \"previous definition of 'f7' was here\" } */\n+void f7(int); /* { dg-error \"prototype for 'f7' declares fewer arguments than previous old-style definition\" } */\n \n-void f8(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f8' was here\" } */\n-void f8(int, ...); /* { dg-error \"error: conflicting types for 'f8'\" } */\n+void f8(a, b) int a, b; {} /* { dg-error \"previous definition of 'f8' was here\" } */\n+void f8(int, ...); /* { dg-error \"conflicting types for 'f8'\" } */\n \n void f9(a, b) int a, b; {}\n-void f9(int, int); /* { dg-warning \"warning: prototype for 'f9' follows non-prototype definition\" } */\n+void f9(int, int); /* { dg-warning \"prototype for 'f9' follows non-prototype definition\" } */\n \n-void f10(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f10' was here\" } */\n-void f10(int, long); /* { dg-error \"error: prototype for 'f10' declares argument 2 with incompatible type\" } */\n+void f10(a, b) int a, b; {} /* { dg-error \"previous definition of 'f10' was here\" } */\n+void f10(int, long); /* { dg-error \"prototype for 'f10' declares argument 2 with incompatible type\" } */\n \n-void f11(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f11' was here\" } */\n-void f11(long, int); /* { dg-error \"error: prototype for 'f11' declares argument 1 with incompatible type\" } */\n+void f11(a, b) int a, b; {} /* { dg-error \"previous definition of 'f11' was here\" } */\n+void f11(long, int); /* { dg-error \"prototype for 'f11' declares argument 1 with incompatible type\" } */\n \n void f12(a, b) const int a; volatile int b; {}\n-void f12(volatile int, const int); /* { dg-warning \"warning: prototype for 'f12' follows non-prototype definition\" } */\n+void f12(volatile int, const int); /* { dg-warning \"prototype for 'f12' follows non-prototype definition\" } */\n \n-void f13(a) const int a[2][2]; {} /* { dg-error \"error: previous definition of 'f13' was here\" } */\n-void f13(volatile int [2][2]); /* { dg-error \"error: prototype for 'f13' declares argument 1 with incompatible type\" } */\n+void f13(a) const int a[2][2]; {} /* { dg-error \"previous definition of 'f13' was here\" } */\n+void f13(volatile int [2][2]); /* { dg-error \"prototype for 'f13' declares argument 1 with incompatible type\" } */"}, {"sha": "9f763879f2dddb8a5aa5d9f00d2746e40af91b59", "filename": "gcc/testsuite/gcc.dg/overflow-warn-1.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,67 +12,67 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0,\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n /* But this expression does need to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 48 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 50 } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 48 } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 50 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -82,14 +82,14 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fsc (UCHAR_MAX);\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "7da84324ad9408c2ee771688da1dd399aa5f4b89", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,67 +12,67 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0,\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n /* But this expression does need to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 48 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 50 } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 48 } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 50 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -82,23 +82,23 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 84 } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 86 } */\n+  /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 84 } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 86 } */\n   fsc (UCHAR_MAX);\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 88 } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 90 } */\n+  /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 88 } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 90 } */\n   fuc (-1);\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 92 } */\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 94 } */\n+  /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 92 } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 94 } */\n   fuc (SCHAR_MIN);\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 96 } */\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 98 } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 100 } */\n+  /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 96 } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 98 } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 100 } */\n }\n \n void fui (unsigned int);\n@@ -113,20 +113,20 @@ h2i (int x)\n   /* For some reason, we only give certain warnings for implicit\n      conversions among values of the same precision with -Wtraditional-conversion,\n      while we don't give others at all.  */\n-  fsi ((unsigned)INT_MAX + 1); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n+  fsi ((unsigned)INT_MAX + 1); /* { dg-warning \"passing argument 1 of 'fsi' as signed due to prototype\" } */\n   si = (unsigned)INT_MAX + 1;\n   si = x ? (unsigned)INT_MAX + 1 : 1;\n-  fsi ((unsigned)INT_MAX + 2); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n+  fsi ((unsigned)INT_MAX + 2); /* { dg-warning \"passing argument 1 of 'fsi' as signed due to prototype\" } */\n   si = (unsigned)INT_MAX + 2;\n   si = x ? (unsigned)INT_MAX + 2 : 1;\n-  fsi (UINT_MAX); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n+  fsi (UINT_MAX); /* { dg-warning \"passing argument 1 of 'fsi' as signed due to prototype\" } */\n   si = UINT_MAX;\n   fui (-1);\n-  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 124 } */\n+  /* { dg-warning \"passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 124 } */\n   ui = -1;\n   ui = x ? -1 : 1U;\n   fui (INT_MIN);\n-  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 128 } */\n+  /* { dg-warning \"passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 128 } */\n   ui = INT_MIN;\n   ui = x ? INT_MIN : 1U;\n }"}, {"sha": "6b1dc053efddc297d256d92b8d109a89eccd3214", "filename": "gcc/testsuite/gcc.dg/overflow-warn-3.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,74 +12,74 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0,\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n }\n \n /* But this expression does need to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 47 } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 47 } */\n \n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 53 } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 53 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-/* { dg-warning \"warning: initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 56 } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 53 } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 53 } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 56 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n-      /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 67 } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n+      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 67 } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -88,15 +88,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "1e2518f9c73db8c791bdb0ceb50be27d98479905", "filename": "gcc/testsuite/gcc.dg/overflow-warn-4.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -12,74 +12,74 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0,\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n }\n \n /* But this expression does need to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 47 } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 47 } */\n \n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 53 } */\n-/* { dg-error \"error: initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 53 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-/* { dg-error \"error: initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 56 } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 53 } */\n+/* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 53 } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { xfail *-*-* } 56 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n-      /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 67 } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n+      /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 67 } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -88,15 +88,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "b3bc73610c4e84610d1a451de8e017002075384e", "filename": "gcc/testsuite/gcc.dg/overflow-warn-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,12 +7,12 @@\n int \n h1 (int x)\n {\n-  return x * (0 * (INT_MAX + 1)); /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return x * (0 * (INT_MAX + 1)); /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int \n h2 (int x)\n {\n-  return ((INT_MAX + 1) * 0) * x; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return ((INT_MAX + 1) * 0) * x; /* { dg-warning \"integer overflow in expression\" } */\n }\n "}, {"sha": "42db4b15726c9acfd2da6fc865beb7b293213367", "filename": "gcc/testsuite/gcc.dg/parm-forwdecl-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,5 +4,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-int f1(int a; int a); /* { dg-warning \"warning: ISO C forbids forward parameter declarations\" } */\n-int f2(int a; int a) { return 0; } /* { dg-warning \"warning: ISO C forbids forward parameter declarations\" } */\n+int f1(int a; int a); /* { dg-warning \"ISO C forbids forward parameter declarations\" } */\n+int f2(int a; int a) { return 0; } /* { dg-warning \"ISO C forbids forward parameter declarations\" } */"}, {"sha": "7937532fb3119348cd694b0b77993f22338fbd34", "filename": "gcc/testsuite/gcc.dg/parm-forwdecl-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-forwdecl-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,5 +4,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-int f1(int a; int a); /* { dg-error \"error: ISO C forbids forward parameter declarations\" } */\n-int f2(int a; int a) { return 0; } /* { dg-error \"error: ISO C forbids forward parameter declarations\" } */\n+int f1(int a; int a); /* { dg-error \"ISO C forbids forward parameter declarations\" } */\n+int f2(int a; int a) { return 0; } /* { dg-error \"ISO C forbids forward parameter declarations\" } */"}, {"sha": "467c19abdf72e8a529ce69da753fe52e92397b20", "filename": "gcc/testsuite/gcc.dg/parm-impl-decl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,7 +7,7 @@\n /* Implicit function declaration in attribute in definition (testcase\n    from bug).  */\n int\n-foo (int __attribute__ ((__mode__ (vector_size(8)))) i) /* { dg-warning \"warning: '__mode__' attribute ignored\" } */\n+foo (int __attribute__ ((__mode__ (vector_size(8)))) i) /* { dg-warning \"'__mode__' attribute ignored\" } */\n {\n   return (long long) i;\n }"}, {"sha": "22ea0c6e8afbd489b07d08514fea1054f39e9d76", "filename": "gcc/testsuite/gcc.dg/parm-impl-decl-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-impl-decl-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int k (int [sizeof &&z]); /* { dg-error \"error: label 'z' referenced outside of any function\" } */\n+int k (int [sizeof &&z]); /* { dg-error \"label 'z' referenced outside of any function\" } */"}, {"sha": "83dca8253fc0ba29d437c8ce2904b7cc1e36af3b", "filename": "gcc/testsuite/gcc.dg/parm-incomplete-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -16,13 +16,13 @@ struct t { void (*p)(struct s); };\n struct s { int b; };\n void h (struct s x) { }\n \n-void j(struct t2); /* { dg-warning \"warning: 'struct t2' declared inside parameter list\" } */\n+void j(struct t2); /* { dg-warning \"'struct t2' declared inside parameter list\" } */\n /* { dg-warning \"its scope is only\" \"explanation\" { target *-*-* } 19 } */\n \n union u;\n \n-void v(union u x) { } /* { dg-error \"error: parameter 1 \\\\('x'\\\\) has incomplete type\" } */\n+void v(union u x) { } /* { dg-error \"parameter 1 \\\\('x'\\\\) has incomplete type\" } */\n \n-void p(void x); /* { dg-warning \"warning: parameter 1 \\\\('x'\\\\) has void type\" } */\n+void p(void x); /* { dg-warning \"parameter 1 \\\\('x'\\\\) has void type\" } */\n \n-void q(const void x); /* { dg-warning \"warning: parameter 1 \\\\('x'\\\\) has void type\" } */\n+void q(const void x); /* { dg-warning \"parameter 1 \\\\('x'\\\\) has void type\" } */"}, {"sha": "ba8a538fb5149a85bb8d23492d4506488e8cc6a5", "filename": "gcc/testsuite/gcc.dg/parm-mismatch-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,15 +4,15 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void f0(); /* { dg-error \"error: previous declaration of 'f0' was here\" } */\n-void f0(int, ...); /* { dg-error \"error: conflicting types for 'f0'\" } */\n+void f0(); /* { dg-error \"previous declaration of 'f0' was here\" } */\n+void f0(int, ...); /* { dg-error \"conflicting types for 'f0'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 8 } */\n-void f1(int, ...); /* { dg-error \"error: previous declaration of 'f1' was here\" } */\n-void f1(); /* { dg-error \"error: conflicting types for 'f1'\" } */\n+void f1(int, ...); /* { dg-error \"previous declaration of 'f1' was here\" } */\n+void f1(); /* { dg-error \"conflicting types for 'f1'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 11 } */\n-void f2(); /* { dg-error \"error: previous declaration of 'f2' was here\" } */\n-void f2(char); /* { dg-error \"error: conflicting types for 'f2'\" } */\n+void f2(); /* { dg-error \"previous declaration of 'f2' was here\" } */\n+void f2(char); /* { dg-error \"conflicting types for 'f2'\" } */\n /* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 14 } */\n-void f3(char); /* { dg-error \"error: previous declaration of 'f3' was here\" } */\n-void f3(); /* { dg-error \"error: conflicting types for 'f3'\" } */\n+void f3(char); /* { dg-error \"previous declaration of 'f3' was here\" } */\n+void f3(); /* { dg-error \"conflicting types for 'f3'\" } */\n /* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 17 } */"}, {"sha": "8bf6e285d94db89c0a310c77ba569f7f3a9e5116", "filename": "gcc/testsuite/gcc.dg/pointer-arith-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -30,10 +30,10 @@ g (void)\n   f += 1;\n   f -= 0;\n   f -= 1;\n-  p[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  p[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  0[p]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  f[0]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"subscripted value is pointer to function\" } */\n   p - p;\n   f - f;\n }"}, {"sha": "cda287c28769cfd367fb1dd536950795045103a7", "filename": "gcc/testsuite/gcc.dg/pointer-arith-2.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,32 +10,32 @@ void (*f)(void);\n void\n g (void)\n {\n-  p + 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p + 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  0 + p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  1 + p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  f + 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f + 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  0 + f; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  1 + f; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f - 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f - 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f += 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f += 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f -= 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f -= 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  p[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n-  0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  p - p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in subtraction\" } */\n-  f - f; /* { dg-warning \"warning: pointer to a function used in subtraction\" } */\n+  p + 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p + 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  0 + p; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  1 + p; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  f + 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f + 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  0 + f; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  1 + f; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f - 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f - 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f += 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f += 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f -= 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f -= 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  p[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n+  0[p]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n+  f[0]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  p - p; /* { dg-warning \"pointer of type 'void \\\\*' used in subtraction\" } */\n+  f - f; /* { dg-warning \"pointer to a function used in subtraction\" } */\n }"}, {"sha": "bcfb2a4b524f35873f9e4602ba23ec005a859002", "filename": "gcc/testsuite/gcc.dg/pointer-arith-3.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,32 +10,32 @@ void (*f)(void);\n void\n g (void)\n {\n-  p + 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p + 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  0 + p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  1 + p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 0; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 1; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  f + 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f + 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  0 + f; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  1 + f; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f - 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f - 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f += 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f += 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f -= 0; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  f -= 1; /* { dg-warning \"warning: pointer to a function used in arithmetic\" } */\n-  p[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n-  0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  p - p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in subtraction\" } */\n-  f - f; /* { dg-warning \"warning: pointer to a function used in subtraction\" } */\n+  p + 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p + 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  0 + p; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  1 + p; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 0; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 1; /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  f + 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f + 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  0 + f; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  1 + f; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f - 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f - 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f += 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f += 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f -= 0; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  f -= 1; /* { dg-warning \"pointer to a function used in arithmetic\" } */\n+  p[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n+  0[p]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-warning \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n+  f[0]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  p - p; /* { dg-warning \"pointer of type 'void \\\\*' used in subtraction\" } */\n+  f - f; /* { dg-warning \"pointer to a function used in subtraction\" } */\n }"}, {"sha": "daa5e0f5b68e1717476c1434d3454b728ea84d61", "filename": "gcc/testsuite/gcc.dg/pointer-arith-4.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,32 +10,32 @@ void (*f)(void);\n void\n g (void)\n {\n-  p + 0; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p + 1; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  0 + p; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  1 + p; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 0; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p - 1; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 0; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p += 1; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 0; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  p -= 1; /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" } */\n-  f + 0; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f + 1; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  0 + f; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  1 + f; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f - 0; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f - 1; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f += 0; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f += 1; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f -= 0; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  f -= 1; /* { dg-error \"error: pointer to a function used in arithmetic\" } */\n-  p[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n-  0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n-  p - p; /* { dg-error \"error: pointer of type 'void \\\\*' used in subtraction\" } */\n-  f - f; /* { dg-error \"error: pointer to a function used in subtraction\" } */\n+  p + 0; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p + 1; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  0 + p; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  1 + p; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 0; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p - 1; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 0; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p += 1; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 0; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  p -= 1; /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" } */\n+  f + 0; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f + 1; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  0 + f; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  1 + f; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f - 0; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f - 1; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f += 0; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f += 1; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f -= 0; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  f -= 1; /* { dg-error \"pointer to a function used in arithmetic\" } */\n+  p[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n+  0[p]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+  /* { dg-error \"pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n+  f[0]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"subscripted value is pointer to function\" } */\n+  p - p; /* { dg-error \"pointer of type 'void \\\\*' used in subtraction\" } */\n+  f - f; /* { dg-error \"pointer to a function used in subtraction\" } */\n }"}, {"sha": "cf5f08b3e285864303fa412e424364f81b6c4fce", "filename": "gcc/testsuite/gcc.dg/pointer-arith-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,8 +10,8 @@ void f(void);\n void\n g (void)\n {\n-  sizeof (v); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (void); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (f); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n-  sizeof (void (void)); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (v); /* { dg-warning \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-warning \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-warning \"invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-warning \"invalid application of 'sizeof' to a function type\" } */\n }"}, {"sha": "a65e4286663cf675a44fb47dd687881f4b921005", "filename": "gcc/testsuite/gcc.dg/pointer-arith-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,8 +10,8 @@ void f(void);\n void\n g (void)\n {\n-  sizeof (v); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (void); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (f); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n-  sizeof (void (void)); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (v); /* { dg-warning \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-warning \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-warning \"invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-warning \"invalid application of 'sizeof' to a function type\" } */\n }"}, {"sha": "5426b79e2607d6cc6e366aa9e002909ae913d38b", "filename": "gcc/testsuite/gcc.dg/pointer-arith-8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,8 +10,8 @@ void f(void);\n void\n g (void)\n {\n-  sizeof (v); /* { dg-error \"error: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (void); /* { dg-error \"error: invalid application of 'sizeof' to a void type\" } */\n-  sizeof (f); /* { dg-error \"error: invalid application of 'sizeof' to a function type\" } */\n-  sizeof (void (void)); /* { dg-error \"error: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (v); /* { dg-error \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-error \"invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-error \"invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-error \"invalid application of 'sizeof' to a function type\" } */\n }"}, {"sha": "4363678289f0bc4e6e26847e7b23997b8e463ff0", "filename": "gcc/testsuite/gcc.dg/pr13804-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -19,10 +19,10 @@ union u0 *x5;\n void\n f (void)\n {\n-  x0.c; /* { dg-error \"error: 'struct s0' has no member named 'c'\" } */\n-  x1.c; /* { dg-error \"error: 'S0' has no member named 'c'\" } */\n-  x2.c; /* { dg-error \"error: 'union u0' has no member named 'c'\" } */\n-  x3.c; /* { dg-error \"error: 'U0' has no member named 'c'\" } */\n-  x4->c; /* { dg-error \"error: 'struct s0' has no member named 'c'\" } */\n-  x5->c; /* { dg-error \"error: 'union u0' has no member named 'c'\" } */\n+  x0.c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n+  x1.c; /* { dg-error \"'S0' has no member named 'c'\" } */\n+  x2.c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n+  x3.c; /* { dg-error \"'U0' has no member named 'c'\" } */\n+  x4->c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n+  x5->c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n }"}, {"sha": "6bb001aea7f64a99176bf9d98d57191bd7d47121", "filename": "gcc/testsuite/gcc.dg/pr15698-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -18,6 +18,6 @@ int foobar ()\n \n char *rindex(a, b)\n      register char *a, b;\n-{ /* { dg-warning \"warning: argument 'a' doesn't match built-in prototype\" } */\n+{ /* { dg-warning \"argument 'a' doesn't match built-in prototype\" } */\n   return 0;\n }"}, {"sha": "3ad60a9a95c056c0837309c80e593db85115a89f", "filename": "gcc/testsuite/gcc.dg/pr15698-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-void f() { void g(void); } /* { dg-error \"error: prototype declaration\" } */\n-void g(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */\n+void f() { void g(void); } /* { dg-error \"prototype declaration\" } */\n+void g(a) int a; {} /* { dg-error \"number of arguments doesn't match prototype\" } */"}, {"sha": "a7a35059cfdf0e5293e2ecf29be0d0f7964ab1bf", "filename": "gcc/testsuite/gcc.dg/pr15698-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,6 +6,6 @@\n /* { dg-options \"-std=gnu99\" } */\n \n void f();\n-void f(int); /* { dg-error \"error: prototype declaration\" } */\n+void f(int); /* { dg-error \"prototype declaration\" } */\n void f();\n-void f(a) long a; {} /* { dg-error \"error: argument 'a' doesn't match prototype\" } */\n+void f(a) long a; {} /* { dg-error \"argument 'a' doesn't match prototype\" } */"}, {"sha": "f86a35124d2d742c8fcbd52fda9fb9262331ef20", "filename": "gcc/testsuite/gcc.dg/pr15698-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-int isnan(void); /* { dg-error \"error: prototype declaration\" } */\n-int isnan(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */\n+int isnan(void); /* { dg-error \"prototype declaration\" } */\n+int isnan(a) int a; {} /* { dg-error \"number of arguments doesn't match prototype\" } */"}, {"sha": "288404b4b70b6b68fb298653ffcd9d62ee871e11", "filename": "gcc/testsuite/gcc.dg/pr15698-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,5 +6,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-void f(void) { int isnan(void); } /* { dg-error \"error: prototype declaration\" } */\n-int isnan(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */\n+void f(void) { int isnan(void); } /* { dg-error \"prototype declaration\" } */\n+int isnan(a) int a; {} /* { dg-error \"number of arguments doesn't match prototype\" } */"}, {"sha": "efbc2e42db90203aadfe0760932b6c5b4b9fb45d", "filename": "gcc/testsuite/gcc.dg/pr15698-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,4 +6,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-char *strchr(a) const char *a; { return 0; } /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" } */\n+char *strchr(a) const char *a; { return 0; } /* { dg-warning \"number of arguments doesn't match built-in prototype\" } */"}, {"sha": "2393eac61a1ce43d9050c22f9fab8bc93136a3d1", "filename": "gcc/testsuite/gcc.dg/pr15698-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,5 +6,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-char *strchr(const char *, int); /* { dg-error \"error: prototype declaration\" } */\n-char *strchr(a) const char *a; { return 0; } /* { dg-error \"error: number of arguments doesn't match prototype\" } */\n+char *strchr(const char *, int); /* { dg-error \"prototype declaration\" } */\n+char *strchr(a) const char *a; { return 0; } /* { dg-error \"number of arguments doesn't match prototype\" } */"}, {"sha": "ee0c3ae465566f946f43200396f1c74547c66c2d", "filename": "gcc/testsuite/gcc.dg/pr15698-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,5 +7,5 @@\n /* { dg-options \"-std=gnu99\" } */\n \n int f(int (*)[]);\n-int g() { int f(int (*)[2]); } /* { dg-error \"error: prototype declaration\" } */\n-int f(a) int (*a)[3]; { return 0; } /* { dg-error \"error: argument 'a' doesn't match prototype\" } */\n+int g() { int f(int (*)[2]); } /* { dg-error \"prototype declaration\" } */\n+int f(a) int (*a)[3]; { return 0; } /* { dg-error \"argument 'a' doesn't match prototype\" } */"}, {"sha": "2cad0120fa4c9c8eb46b1e9be3472510ed0dcd64", "filename": "gcc/testsuite/gcc.dg/pr17188-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17188-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17188-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17188-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,19 +7,19 @@\n \n struct s0 { };\n struct s0;\n-struct s0 { }; /* { dg-error \"error: redefinition of 'struct s0'\" } */\n+struct s0 { }; /* { dg-error \"redefinition of 'struct s0'\" } */\n \n struct s1 { };\n-struct s1 { }; /* { dg-error \"error: redefinition of 'struct s1'\" } */\n+struct s1 { }; /* { dg-error \"redefinition of 'struct s1'\" } */\n \n struct s2 { int a : 1; };\n-struct s2 { int a : 1; }; /* { dg-error \"error: redefinition of 'struct s2'\" } */\n+struct s2 { int a : 1; }; /* { dg-error \"redefinition of 'struct s2'\" } */\n \n struct s3 { };\n-struct s3 { int a : 1; }; /* { dg-error \"error: redefinition of 'struct s3'\" } */\n+struct s3 { int a : 1; }; /* { dg-error \"redefinition of 'struct s3'\" } */\n \n struct s4 { int a : 1; };\n-struct s4 { }; /* { dg-error \"error: redefinition of 'struct s4'\" } */\n+struct s4 { }; /* { dg-error \"redefinition of 'struct s4'\" } */\n \n struct s5 { int a : 1; };\n struct s5;"}, {"sha": "5fd22588cd50443964fa6cae00adf8c695144d5b", "filename": "gcc/testsuite/gcc.dg/pr17301-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,5 +7,5 @@ int\n write_format (char *format, ...)\n {\n   __builtin_va_list p;\n-  __builtin_stdarg_start (p); /* { dg-error \"error: too few arguments to function 'va_start'\" } */\n+  __builtin_stdarg_start (p); /* { dg-error \"too few arguments to function 'va_start'\" } */\n }"}, {"sha": "64b9c9883c29b4166df31e248a1c5997d23ba989", "filename": "gcc/testsuite/gcc.dg/pr17301-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17301-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n \n void foo (char *format, ...)\n {\n-  __builtin_stdarg_start (); /* { dg-error \"error: too few arguments to function '__builtin_stdarg_start'\" } */\n+  __builtin_stdarg_start (); /* { dg-error \"too few arguments to function '__builtin_stdarg_start'\" } */\n }"}, {"sha": "8f70ad8055cda02be669be2b4100d6dbead556b3", "filename": "gcc/testsuite/gcc.dg/pr17730-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17730-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17730-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17730-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -2,4 +2,4 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-char *p = &'C'; /* { dg-error \"error: lvalue required as unary '&' operand\" } */\n+char *p = &'C'; /* { dg-error \"lvalue required as unary '&' operand\" } */"}, {"sha": "ac76c16f78356dd26023b25dfc52bc7b31c2043b", "filename": "gcc/testsuite/gcc.dg/pr20368-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-prototypes\" } */\n \n-extern __typeof (f) g; /* { dg-error \"error: 'f' undeclared here \\\\(not in a function\\\\)\" } */\n+extern __typeof (f) g; /* { dg-error \"'f' undeclared here \\\\(not in a function\\\\)\" } */\n \n int\n f (x)\n-     float x; /* { dg-warning \"warning: function declaration isn't a prototype\" } */\n+     float x; /* { dg-warning \"function declaration isn't a prototype\" } */\n {\n }"}, {"sha": "ca4a3e05a29a0d3c3a4e19646cc060355e047701", "filename": "gcc/testsuite/gcc.dg/pr20368-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-prototypes\" } */\n \n-extern __typeof (f) g; /* { dg-error \"error: 'f' undeclared here \\\\(not in a function\\\\)\" } */\n+extern __typeof (f) g; /* { dg-error \"'f' undeclared here \\\\(not in a function\\\\)\" } */\n \n int\n f (x)\n-     float x; /* { dg-warning \"warning: no previous prototype for 'f'\" } */\n+     float x; /* { dg-warning \"no previous prototype for 'f'\" } */\n {\n }"}, {"sha": "9302077e89f853bd8c861416de46d246e2418afb", "filename": "gcc/testsuite/gcc.dg/pr20368-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-declarations\" } */\n \n-extern __typeof (f) g; /* { dg-error \"error: 'f' undeclared here \\\\(not in a function\\\\)\" } */\n+extern __typeof (f) g; /* { dg-error \"'f' undeclared here \\\\(not in a function\\\\)\" } */\n \n int\n f (x)\n-     float x; /* { dg-warning \"warning: no previous declaration for 'f'\" } */\n+     float x; /* { dg-warning \"no previous declaration for 'f'\" } */\n {\n }"}, {"sha": "2b3067577b225de4602d5e3f10620ed0bd09e955", "filename": "gcc/testsuite/gcc.dg/pr22308-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22308-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22308-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22308-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,5 +9,5 @@ struct foo { const int z; };\n void\n bar (void)\n {\n-  t = s; /* { dg-error \"error: assignment of read-only variable 't'\" } */\n+  t = s; /* { dg-error \"assignment of read-only variable 't'\" } */\n }"}, {"sha": "dbf61158f6d62d903be4a84af45285f2767dd669", "filename": "gcc/testsuite/gcc.dg/qual-component-1.c", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -42,64 +42,64 @@ f (void)\n   v1.c[0][0] = 0;\n   *v1.c[0] = 0;\n   **v1.c = 0;\n-  v1.d = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v1.e[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v1.e = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v1.f[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v1.f[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v1.f = 0; /* { dg-error \"error: assignment of read-only\" } */\n+  v1.d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v1.e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v1.e = 0; /* { dg-error \"assignment of read-only\" } */\n+  v1.f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v1.f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v1.f = 0; /* { dg-error \"assignment of read-only\" } */\n \n   v2->a = 0;\n   v2->b[0] = 0;\n   *v2->b = 0;\n   v2->c[0][0] = 0;\n   *v2->c[0] = 0;\n   **v2->c = 0;\n-  v2->d = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v2->e[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v2->e = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v2->f[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v2->f[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v2->f = 0; /* { dg-error \"error: assignment of read-only\" } */\n+  v2->d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v2->e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v2->e = 0; /* { dg-error \"assignment of read-only\" } */\n+  v2->f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v2->f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v2->f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v3->a = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v3->b[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v3->b = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v3->c[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v3->c[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v3->c = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v3->d = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v3->e[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v3->e = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v3->f[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v3->f[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v3->f = 0; /* { dg-error \"error: assignment of read-only\" } */\n+  v3->a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v3->b = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v3->c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v3->c = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v3->e = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v3->f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v3->f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v4.a = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v4.b[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v4.b = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v4.c[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v4.c[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v4.c = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v4.d = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v4.e[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v4.e = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v4.f[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v4.f[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v4.f = 0; /* { dg-error \"error: assignment of read-only\" } */\n+  v4.a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v4.b = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v4.c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v4.c = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v4.e = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v4.f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v4.f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v5.x.a = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v5.x.b[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v5.x.b = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v5.x.c[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v5.x.c[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v5.x.c = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v5.x.d = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v5.x.e[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v5.x.e = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  v5.x.f[0][0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  *v5.x.f[0] = 0; /* { dg-error \"error: assignment of read-only\" } */\n-  **v5.x.f = 0; /* { dg-error \"error: assignment of read-only\" } */\n+  v5.x.a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v5.x.b = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v5.x.c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v5.x.c = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v5.x.e = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  *v5.x.f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n+  **v5.x.f = 0; /* { dg-error \"assignment of read-only\" } */\n }\n \n void\n@@ -110,123 +110,123 @@ g (void)\n     int (*b)[1] = &v1.b;\n     int (*c)[2][3] = &v1.c;\n     int (*cc)[3] = v1.c;\n-    const int (*ff)[3] = v1.c; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    const int (*ff)[3] = v1.c; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     a = &v1.a;\n     b = &v1.b;\n     c = &v1.c;\n     cc = v1.c;\n-    ff = v1.c; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    ff = v1.c; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n   {\n     const int *d = &v1.d;\n     const int (*e)[1] = &v1.e;\n     const int (*f)[2][3] = &v1.f;\n     const int (*ff)[3] = v1.f;\n-    int (*cc)[3] = v1.f; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v1.f; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v1.d;\n     e = &v1.e;\n     f = &v1.f;\n     ff = v1.f;\n-    cc = v1.f; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v1.f; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n \n   {\n     int *a = &v2->a;\n     int (*b)[1] = &v2->b;\n     int (*c)[2][3] = &v2->c;\n     int (*cc)[3] = v2->c;\n-    const int (*ff)[3] = v2->c; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    const int (*ff)[3] = v2->c; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     a = &v2->a;\n     b = &v2->b;\n     c = &v2->c;\n     cc = v2->c;\n-    ff = v2->c; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    ff = v2->c; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n   {\n     const int *d = &v2->d;\n     const int (*e)[1] = &v2->e;\n     const int (*f)[2][3] = &v2->f;\n     const int (*ff)[3] = v2->f;\n-    int (*cc)[3] = v2->f; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v2->f; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v2->d;\n     e = &v2->e;\n     f = &v2->f;\n     ff = v2->f;\n-    cc = v2->f; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v2->f; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n \n   {\n     const int *d = &v3->a;\n     const int (*e)[1] = &v3->b;\n     const int (*f)[2][3] = &v3->c;\n     const int (*ff)[3] = v3->c;\n-    int (*cc)[3] = v3->c; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v3->c; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v3->a;\n     e = &v3->b;\n     f = &v3->c;\n     ff = v3->c;\n-    cc = v3->c; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v3->c; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n   {\n     const int *d = &v3->d;\n     const int (*e)[1] = &v3->e;\n     const int (*f)[2][3] = &v3->f;\n     const int (*ff)[3] = v3->f;\n-    int (*cc)[3] = v3->f; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v3->f; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v3->d;\n     e = &v3->e;\n     f = &v3->f;\n     ff = v3->f;\n-    cc = v3->f; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v3->f; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n \n   {\n     const int *d = &v4.a;\n     const int (*e)[1] = &v4.b;\n     const int (*f)[2][3] = &v4.c;\n     const int (*ff)[3] = v4.c;\n-    int (*cc)[3] = v4.c; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v4.c; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v4.a;\n     e = &v4.b;\n     f = &v4.c;\n     ff = v4.c;\n-    cc = v4.c; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v4.c; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n   {\n     const int *d = &v4.d;\n     const int (*e)[1] = &v4.e;\n     const int (*f)[2][3] = &v4.f;\n     const int (*ff)[3] = v4.f;\n-    int (*cc)[3] = v4.f; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v4.f; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v4.d;\n     e = &v4.e;\n     f = &v4.f;\n     ff = v4.f;\n-    cc = v4.f; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v4.f; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n \n   {\n     const int *d = &v5.x.a;\n     const int (*e)[1] = &v5.x.b;\n     const int (*f)[2][3] = &v5.x.c;\n     const int (*ff)[3] = v5.x.c;\n-    int (*cc)[3] = v5.x.c; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v5.x.c; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v5.x.a;\n     e = &v5.x.b;\n     f = &v5.x.c;\n     ff = v5.x.c;\n-    cc = v5.x.c; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v5.x.c; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n   {\n     const int *d = &v5.x.d;\n     const int (*e)[1] = &v5.x.e;\n     const int (*f)[2][3] = &v5.x.f;\n     const int (*ff)[3] = v5.x.f;\n-    int (*cc)[3] = v5.x.f; /* { dg-warning \"warning: initialization from incompatible pointer type\" } */\n+    int (*cc)[3] = v5.x.f; /* { dg-warning \"initialization from incompatible pointer type\" } */\n     d = &v5.x.d;\n     e = &v5.x.e;\n     f = &v5.x.f;\n     ff = v5.x.f;\n-    cc = v5.x.f; /* { dg-warning \"warning: assignment from incompatible pointer type\" } */\n+    cc = v5.x.f; /* { dg-warning \"assignment from incompatible pointer type\" } */\n   }\n }"}, {"sha": "cfabc8d25af05d2d95f134c954b3e910f019d78f", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -70,8 +70,8 @@ void prime5(void)\n \n void test5(void)\n {\n-  bar5(1);\t\t\t/* { dg-warning \"warning: implicit declaration of function\" } */\n-} /* { dg-error \"error: incompatible implicit declaration\" \"\" { target *-*-* } 73 } */\n+  bar5(1);\t\t\t/* { dg-warning \"implicit declaration of function\" } */\n+} /* { dg-error \"incompatible implicit declaration\" \"\" { target *-*-* } 73 } */\n \n /* Extern then static, both at file scope.  */\n "}, {"sha": "e4ce0b830ea1dce2fe2dcaa49e2ca617face34cd", "filename": "gcc/testsuite/gcc.dg/redecl-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n int f(int (*)[]);\n-void g() { int f(int (*)[2]); } /* { dg-error \"error: previous declaration of 'f' was here\" } */\n-int f(int (*)[3]); /* { dg-error \"error: conflicting types for 'f'\" } */\n+void g() { int f(int (*)[2]); } /* { dg-error \"previous declaration of 'f' was here\" } */\n+int f(int (*)[3]); /* { dg-error \"conflicting types for 'f'\" } */"}, {"sha": "58041ef8e355c3ad6ad70d94c1eef91efd626bf0", "filename": "gcc/testsuite/gcc.dg/redecl-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[]; extern int a[10]; } /* { dg-error \"error: previous declaration of 'a' was here\" } */\n-extern int a[5]; /* { dg-error \"error: conflicting types for 'a'\" } */\n+void f(void) { extern int a[]; extern int a[10]; } /* { dg-error \"previous declaration of 'a' was here\" } */\n+extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "84eeb4eaeb50cdd5f89a6be32dcc142eab7f43f0", "filename": "gcc/testsuite/gcc.dg/redecl-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[10]; } /* { dg-error \"error: previous declaration of 'a' was here\" } */\n-extern int a[5]; /* { dg-error \"error: conflicting types for 'a'\" } */\n+void f(void) { extern int a[10]; } /* { dg-error \"previous declaration of 'a' was here\" } */\n+extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "b27c02441d337240d50056d2f61962c11f128204", "filename": "gcc/testsuite/gcc.dg/redecl-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -18,5 +18,5 @@ f (void)\n   }\n   extern IAP a[];\n   extern IAP a[5];\n-  sizeof (*a[0]); /* { dg-error \"error: invalid application of 'sizeof' to incomplete type 'IA'\" } */\n+  sizeof (*a[0]); /* { dg-error \"invalid application of 'sizeof' to incomplete type 'IA'\" } */\n }"}, {"sha": "5ed0eac3fded846dfee67f6f73d378cc4a81a34a", "filename": "gcc/testsuite/gcc.dg/redecl-15.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,8 +7,8 @@\n void\n f (void)\n {\n-  g(); /* { dg-warning \"warning: previous implicit declaration of 'g' was here\" } */\n+  g(); /* { dg-warning \"previous implicit declaration of 'g' was here\" } */\n   {\n-    void g(); /* { dg-warning \"warning: conflicting types for 'g'\" } */\n+    void g(); /* { dg-warning \"conflicting types for 'g'\" } */\n   }\n }"}, {"sha": "e36f4997489bcdbdd794ee88e2d6591a02284c2f", "filename": "gcc/testsuite/gcc.dg/register-var-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,5 +10,5 @@ void g(int *);\n void f(void) \n { \n   register int x __asm (\"eax\");\n-  g(&x);\t/* { dg-error \"error: address of register variable\" } */\n+  g(&x);\t/* { dg-error \"address of register variable\" } */\n } "}, {"sha": "01816d5f4251e66c8a9ac32c2aca58946b83b44f", "filename": "gcc/testsuite/gcc.dg/register-var-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fregister-var-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -10,5 +10,5 @@ void g(int *);\n void f(void) \n { \n   register int x;\n-  g(&x);\t/* { dg-error \"error: address of register variable\" } */\n+  g(&x);\t/* { dg-error \"address of register variable\" } */\n } "}, {"sha": "524e8ac87df4ff9e55ffa4577cc595528496017b", "filename": "gcc/testsuite/gcc.dg/stmt-expr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,5 +7,5 @@\n int\n f (void)\n {\n-  return ({ 1; }); /* { dg-warning \"warning: ISO C forbids braced-groups within expressions\" } */\n+  return ({ 1; }); /* { dg-warning \"ISO C forbids braced-groups within expressions\" } */\n }"}, {"sha": "6ef7e069eea0dc6a1dc6dce645e1a35e1cc02d63", "filename": "gcc/testsuite/gcc.dg/stmt-expr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,5 +7,5 @@\n int\n f (void)\n {\n-  return ({ 1; }); /* { dg-error \"error: ISO C forbids braced-groups within expressions\" } */\n+  return ({ 1; }); /* { dg-error \"ISO C forbids braced-groups within expressions\" } */\n }"}, {"sha": "57ab34eaab2ae7fb0e159256aa9231556d4e720f", "filename": "gcc/testsuite/gcc.dg/stmt-expr-label-1.c", "status": "modified", "additions": 212, "deletions": 212, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "35b96e830e505d480a2d2e0109aa4760b50d7490", "filename": "gcc/testsuite/gcc.dg/stmt-expr-label-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -13,8 +13,8 @@ f (int a)\n     case 0:\n     case 1:\n       ({\n-      case 2: /* { dg-error \"error: case label in statement expression not containing enclosing switch statement\" } */\n-      default: /* { dg-error \"error: 'default' label in statement expression not containing enclosing switch statement\" } */\n+      case 2: /* { dg-error \"case label in statement expression not containing enclosing switch statement\" } */\n+      default: /* { dg-error \"'default' label in statement expression not containing enclosing switch statement\" } */\n \tswitch (a)\n \t  {\n \t  case 3:"}, {"sha": "7b1515f89ac9925e101e8261276f2855ba8da04b", "filename": "gcc/testsuite/gcc.dg/stmt-expr-label-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-label-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,4 +5,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n-void f(void) { 1 ? 1 : ({ a : 1; 1; }); goto a; } /* { dg-error \"error: jump into statement expression\" } */\n+void f(void) { 1 ? 1 : ({ a : 1; 1; }); goto a; } /* { dg-error \"jump into statement expression\" } */"}, {"sha": "1f06a1b1764377387ff19fbbf7ad408de4ffd9ec", "filename": "gcc/testsuite/gcc.dg/struct-empty-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-struct s0 {}; /* { dg-warning \"warning: struct has no members\" } */\n-union u0 {}; /* { dg-warning \"warning: union has no members\" } */\n-struct s1 { int : 1; }; /* { dg-warning \"warning: struct has no named members\" } */\n-union u1 { int : 1; }; /* { dg-warning \"warning: union has no named members\" } */\n+struct s0 {}; /* { dg-warning \"struct has no members\" } */\n+union u0 {}; /* { dg-warning \"union has no members\" } */\n+struct s1 { int : 1; }; /* { dg-warning \"struct has no named members\" } */\n+union u1 { int : 1; }; /* { dg-warning \"union has no named members\" } */"}, {"sha": "6e5baa9cff3b65efa0bb07852009a88c1035fa2f", "filename": "gcc/testsuite/gcc.dg/struct-empty-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-empty-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-struct s0 {}; /* { dg-error \"error: struct has no members\" } */\n-union u0 {}; /* { dg-error \"error: union has no members\" } */\n-struct s1 { int : 1; }; /* { dg-error \"error: struct has no named members\" } */\n-union u1 { int : 1; }; /* { dg-error \"error: union has no named members\" } */\n+struct s0 {}; /* { dg-error \"struct has no members\" } */\n+union u0 {}; /* { dg-error \"union has no members\" } */\n+struct s1 { int : 1; }; /* { dg-error \"struct has no named members\" } */\n+union u1 { int : 1; }; /* { dg-error \"union has no named members\" } */"}, {"sha": "9ceac8afadf059c5b7f2b8d212e122923e32c1d8", "filename": "gcc/testsuite/gcc.dg/struct-parse-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-parse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-parse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-parse-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,6 +6,6 @@\n /* Origin: Carlos O'Donell <carlos@codesourcery.com> */\n \n /* { dg-options \"-std=c99\" } */\n-struct s { int a; int b; struct t c; }; /* { dg-error \"error: field 'c' has incomplete type\" } */\n+struct s { int a; int b; struct t c; }; /* { dg-error \"field 'c' has incomplete type\" } */\n struct s d = { .b = 0 };\n "}, {"sha": "8ac90eaee757eebbf43aaac6d3f26b866fae3a23", "filename": "gcc/testsuite/gcc.dg/struct-semi-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -13,7 +13,7 @@ struct s1 {\n struct s2 {\n   ;\n   int c\n-}; /* { dg-warning \"warning: no semicolon at end of struct or union\" } */\n+}; /* { dg-warning \"no semicolon at end of struct or union\" } */\n struct s3 {\n   int d\n-}; /* { dg-warning \"warning: no semicolon at end of struct or union\" } */\n+}; /* { dg-warning \"no semicolon at end of struct or union\" } */"}, {"sha": "3708e534fb6b2d1bbb79bf5b31a3ce7ba565f75e", "filename": "gcc/testsuite/gcc.dg/struct-semi-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,17 +4,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-struct s0 { ; }; /* { dg-warning \"warning: extra semicolon in struct or union specified\" } */\n-/* { dg-warning \"warning: struct has no members\" \"empty\" { target *-*-* } 7 } */\n+struct s0 { ; }; /* { dg-warning \"extra semicolon in struct or union specified\" } */\n+/* { dg-warning \"struct has no members\" \"empty\" { target *-*-* } 7 } */\n struct s1 {\n   int a;\n-  ; /* { dg-warning \"warning: extra semicolon in struct or union specified\" } */\n+  ; /* { dg-warning \"extra semicolon in struct or union specified\" } */\n   int b;\n };\n struct s2 {\n-  ; /* { dg-warning \"warning: extra semicolon in struct or union specified\" } */\n+  ; /* { dg-warning \"extra semicolon in struct or union specified\" } */\n   int c\n-}; /* { dg-warning \"warning: no semicolon at end of struct or union\" } */\n+}; /* { dg-warning \"no semicolon at end of struct or union\" } */\n struct s3 {\n   int d\n-}; /* { dg-warning \"warning: no semicolon at end of struct or union\" } */\n+}; /* { dg-warning \"no semicolon at end of struct or union\" } */"}, {"sha": "da0f237a6946f6f2377755944a02d6124d680594", "filename": "gcc/testsuite/gcc.dg/struct-semi-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-semi-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,17 +4,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-struct s0 { ; }; /* { dg-error \"error: extra semicolon in struct or union specified\" } */\n-/* { dg-error \"error: struct has no members\" \"empty\" { target *-*-* } 7 } */\n+struct s0 { ; }; /* { dg-error \"extra semicolon in struct or union specified\" } */\n+/* { dg-error \"struct has no members\" \"empty\" { target *-*-* } 7 } */\n struct s1 {\n   int a;\n-  ; /* { dg-error \"error: extra semicolon in struct or union specified\" } */\n+  ; /* { dg-error \"extra semicolon in struct or union specified\" } */\n   int b;\n };\n struct s2 {\n-  ; /* { dg-error \"error: extra semicolon in struct or union specified\" } */\n+  ; /* { dg-error \"extra semicolon in struct or union specified\" } */\n   int c\n-}; /* { dg-error \"error: no semicolon at end of struct or union\" } */\n+}; /* { dg-error \"no semicolon at end of struct or union\" } */\n struct s3 {\n   int d\n-}; /* { dg-error \"error: no semicolon at end of struct or union\" } */\n+}; /* { dg-error \"no semicolon at end of struct or union\" } */"}, {"sha": "5a58490698817b7331b6c1c563baff8c811d8780", "filename": "gcc/testsuite/gcc.dg/switch-5.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -7,19 +7,19 @@\n void\n f (int a, double d, void *p)\n {\n-  switch (d) /* { dg-error \"error: switch quantity not an integer\" } */\n+  switch (d) /* { dg-error \"switch quantity not an integer\" } */\n     {\n     }\n-  switch (p) /* { dg-error \"error: switch quantity not an integer\" } */\n+  switch (p) /* { dg-error \"switch quantity not an integer\" } */\n     {\n     }\n   switch (a)\n     {\n-    case (void *)0: ; /* { dg-error \"error: pointers are not permitted as case values\" } */\n+    case (void *)0: ; /* { dg-error \"pointers are not permitted as case values\" } */\n     }\n   switch (a)\n     {\n-    case (double)0: ; /* { dg-error \"error: case label does not reduce to an integer constant\" } */\n+    case (double)0: ; /* { dg-error \"case label does not reduce to an integer constant\" } */\n     }\n   switch (a)\n     {\n@@ -31,45 +31,45 @@ f (int a, double d, void *p)\n     }\n   switch (a)\n     {\n-    case 0 ... -1: ; /* { dg-warning \"warning: empty range specified\" } */\n+    case 0 ... -1: ; /* { dg-warning \"empty range specified\" } */\n     }\n   switch (a)\n     {\n-    case 0 ... -2: ; /* { dg-warning \"warning: empty range specified\" } */\n+    case 0 ... -2: ; /* { dg-warning \"empty range specified\" } */\n     }\n   switch (a)\n     {\n     case 0:\n-    default: /* { dg-error \"error: this is the first default label\" } */\n+    default: /* { dg-error \"this is the first default label\" } */\n     case 1:\n-    default: ; /* { dg-error \"error: multiple default labels in one switch\" } */\n+    default: ; /* { dg-error \"multiple default labels in one switch\" } */\n     }\n   switch (a)\n     {\n-    case 0: /* { dg-error \"error: previously used here\" } */\n+    case 0: /* { dg-error \"previously used here\" } */\n     case 1:\n-    case 0: ; /* { dg-error \"error: duplicate case value\" } */\n+    case 0: ; /* { dg-error \"duplicate case value\" } */\n     }\n- case 1: ; /* { dg-error \"error: case label not within a switch statement\" } */\n- default: ; /* { dg-error \"error: 'default' label not within a switch statement\" } */\n-   break; /* { dg-error \"error: break statement not within loop or switch\" } */\n-   continue; /* { dg-error \"error: continue statement not within a loop\" } */\n+ case 1: ; /* { dg-error \"case label not within a switch statement\" } */\n+ default: ; /* { dg-error \"'default' label not within a switch statement\" } */\n+   break; /* { dg-error \"break statement not within loop or switch\" } */\n+   continue; /* { dg-error \"continue statement not within a loop\" } */\n    switch (a)\n      {\n-     case a: ; /* { dg-error \"error: case label does not reduce to an integer constant\" } */\n+     case a: ; /* { dg-error \"case label does not reduce to an integer constant\" } */\n      }\n    switch (a)\n      {\n-     case 0: /* { dg-error \"error: this is the first entry overlapping that value\" } */\n-     case -1 ... 1: /* { dg-error \"error: duplicate \\\\(or overlapping\\\\) case value\" } */\n-     case 2 ... 3: /* { dg-error \"error: previously used here\" } */\n-     case 2: /* { dg-error \"error: duplicate case value\" } */\n-     case 4 ... 7: /* { dg-error \"error: this is the first entry overlapping that value\" } */\n-     case 6 ... 9: ; /* { dg-error \"error: duplicate \\\\(or overlapping\\\\) case value\" } */\n+     case 0: /* { dg-error \"this is the first entry overlapping that value\" } */\n+     case -1 ... 1: /* { dg-error \"duplicate \\\\(or overlapping\\\\) case value\" } */\n+     case 2 ... 3: /* { dg-error \"previously used here\" } */\n+     case 2: /* { dg-error \"duplicate case value\" } */\n+     case 4 ... 7: /* { dg-error \"this is the first entry overlapping that value\" } */\n+     case 6 ... 9: ; /* { dg-error \"duplicate \\\\(or overlapping\\\\) case value\" } */\n      }\n    switch (a)\n      {\n      case 0:\n-       continue; /* { dg-error \"error: continue statement not within a loop\" } */\n+       continue; /* { dg-error \"continue statement not within a loop\" } */\n      }\n }"}, {"sha": "25d1d96b2687834b6a015c9476c5ff69b7355c9a", "filename": "gcc/testsuite/gcc.dg/switch-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-6.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,6 +9,6 @@ f (int a)\n {\n   switch (a)\n     {\n-    case 0 ... 0: ; /* { dg-warning \"warning: range expressions in switch statements are non-standard\" } */\n+    case 0 ... 0: ; /* { dg-warning \"range expressions in switch statements are non-standard\" } */\n     }\n }"}, {"sha": "29cb82569914884b5643955fc37491cab96f844d", "filename": "gcc/testsuite/gcc.dg/switch-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -9,6 +9,6 @@ f (int a)\n {\n   switch (a)\n     {\n-    case 0 ... 0: ; /* { dg-error \"error: range expressions in switch statements are non-standard\" } */\n+    case 0 ... 0: ; /* { dg-error \"range expressions in switch statements are non-standard\" } */\n     }\n }"}, {"sha": "d86046f500c2245503a53c6eae32c989056e561e", "filename": "gcc/testsuite/gcc.dg/tls/diag-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -1,3 +1,3 @@\n /* __thread specifiers on empty declarations.  */\n \n-__thread struct foo; /* { dg-warning \"warning: useless '__thread' in empty declaration\" } */\n+__thread struct foo; /* { dg-warning \"useless '__thread' in empty declaration\" } */"}, {"sha": "a43e07953d3e28b04cbdceafd96ba66612703e19", "filename": "gcc/testsuite/gcc.dg/transparent-union-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -52,25 +52,25 @@ int\n main (void)\n {\n   f0 (&i);\n-  f0 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f0' from incompatible pointer type\" } */\n+  f0 (&l);\t/* { dg-warning \"passing argument 1 of 'f0' from incompatible pointer type\" } */\n   f1 (&i);\n-  f1 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f1' from incompatible pointer type\" } */\n+  f1 (&l);\t/* { dg-warning \"passing argument 1 of 'f1' from incompatible pointer type\" } */\n   f2 (&i);\n-  f2 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f2' from incompatible pointer type\" } */\n+  f2 (&l);\t/* { dg-warning \"passing argument 1 of 'f2' from incompatible pointer type\" } */\n   f3 (&i);\n-  f3 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f3' from incompatible pointer type\" } */\n+  f3 (&l);\t/* { dg-warning \"passing argument 1 of 'f3' from incompatible pointer type\" } */\n   f4 (&i);\n-  f4 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f4' from incompatible pointer type\" } */\n+  f4 (&l);\t/* { dg-warning \"passing argument 1 of 'f4' from incompatible pointer type\" } */\n   f5 (&i);\n-  f5 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f5' from incompatible pointer type\" } */\n+  f5 (&l);\t/* { dg-warning \"passing argument 1 of 'f5' from incompatible pointer type\" } */\n   f6 (&i);\n-  f6 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f6' from incompatible pointer type\" } */\n+  f6 (&l);\t/* { dg-warning \"passing argument 1 of 'f6' from incompatible pointer type\" } */\n   f7 (&i);\n-  f7 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f7' from incompatible pointer type\" } */\n+  f7 (&l);\t/* { dg-warning \"passing argument 1 of 'f7' from incompatible pointer type\" } */\n   f8 (&i);\n-  f8 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f8' from incompatible pointer type\" } */\n+  f8 (&l);\t/* { dg-warning \"passing argument 1 of 'f8' from incompatible pointer type\" } */\n   f9 (&i);\n-  f9 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f9' from incompatible pointer type\" } */\n+  f9 (&l);\t/* { dg-warning \"passing argument 1 of 'f9' from incompatible pointer type\" } */\n   f10 (&i);\n   f10 (&l);\n   f11 (&i);"}, {"sha": "25d1869561bcfc1fa228b7bcf3917a386c5ffbbd", "filename": "gcc/testsuite/gcc.dg/transparent-union-3.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,17 +6,17 @@\n \n enum e { A };\n \n-union __attribute__((__transparent_union__)) ue1 { enum e; }; /* { dg-warning \"warning: declaration does not declare anything\" } */\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 9 } */\n-union ue2 { enum e; } __attribute__((__transparent_union__)); /* { dg-warning \"warning: declaration does not declare anything\" } */\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 11 } */\n+union __attribute__((__transparent_union__)) ue1 { enum e; }; /* { dg-warning \"declaration does not declare anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 9 } */\n+union ue2 { enum e; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 11 } */\n \n-union __attribute__((__transparent_union__)) ui1 { int; }; /* { dg-warning \"warning: declaration does not declare anything\" } */\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 14 } */\n-union ui2 { int; } __attribute__((__transparent_union__)); /* { dg-warning \"warning: declaration does not declare anything\" } */\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 16 } */\n+union __attribute__((__transparent_union__)) ui1 { int; }; /* { dg-warning \"declaration does not declare anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 14 } */\n+union ui2 { int; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 16 } */\n \n union __attribute__((__transparent_union__)) u1 { };\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 19 } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 19 } */\n union u2 { } __attribute__((__transparent_union__));\n-/* { dg-warning \"warning: union cannot be made transparent\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 21 } */"}, {"sha": "65736546bc9608d43e76fc01c244e2826c4e28a9", "filename": "gcc/testsuite/gcc.dg/typespec-1.c", "status": "modified", "additions": 830, "deletions": 830, "changes": 1660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftypespec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftypespec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypespec-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e"}, {"sha": "e13d97cd11d2cee791e72b05baced5ac10a0305b", "filename": "gcc/testsuite/gcc.dg/vla-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,5 +6,5 @@\n /* { dg-options \"\" } */\n \n const int i = 1;\n-void foo() { char a[][i] = {\"\"}; } /* { dg-error \"error: variable-sized object may not be initialized\" } */\n+void foo() { char a[][i] = {\"\"}; } /* { dg-error \"variable-sized object may not be initialized\" } */\n /* { dg-error \"array size missing in 'a'\" \"extra error\" { target *-*-* } 9 } */"}, {"sha": "710bcc0386d1507d0ba04def06c34f82726d3cfe", "filename": "gcc/testsuite/gcc.dg/vla-init-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -5,5 +5,5 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void foo(int i) { char a[][i] = {\"\"}; } /* { dg-error \"error: variable-sized object may not be initialized\" } */\n+void foo(int i) { char a[][i] = {\"\"}; } /* { dg-error \"variable-sized object may not be initialized\" } */\n /* { dg-error \"array size missing in 'a'\" \"extra error\" { target *-*-* } 8 } */"}, {"sha": "06351d04e0341fdb14904e0fe13e3003386259cc", "filename": "gcc/testsuite/gcc.dg/vla-init-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"\" } */\n \n const int i = 1;\n-void foo() { char *p = (char [i]){ \"\" }; } /* { dg-error \"error: compound literal has variable size\" } */\n+void foo() { char *p = (char [i]){ \"\" }; } /* { dg-error \"compound literal has variable size\" } */"}, {"sha": "aa9f4910ac9630a2cc238b59c33d6e4434c04a20", "filename": "gcc/testsuite/gcc.dg/vla-init-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"\" } */\n \n const int i = 1;\n-void foo() { void *p = (char [][i]){ \"\" }; } /* { dg-error \"error: compound literal has variable size\" } */\n+void foo() { void *p = (char [][i]){ \"\" }; } /* { dg-error \"compound literal has variable size\" } */"}, {"sha": "7accebfb755ac8f15d632ac71f50054fad73e35c", "filename": "gcc/testsuite/gcc.dg/void-cast-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvoid-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvoid-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvoid-cast-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,5 +4,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n int a, b, c, d;\n-int e(void) { return (char)a, b; } /* { dg-warning \"warning: left-hand operand of comma expression has no effect\" } */\n-int f(void) { return (a ? (void)b : (void)c), d; } /* { dg-warning \"warning: left-hand operand of comma expression has no effect\" } */\n+int e(void) { return (char)a, b; } /* { dg-warning \"left-hand operand of comma expression has no effect\" } */\n+int f(void) { return (a ? (void)b : (void)c), d; } /* { dg-warning \"left-hand operand of comma expression has no effect\" } */"}, {"sha": "45132fa6b1852517868d87e70a1b510a86e15265", "filename": "gcc/testsuite/gcc.dg/wvla-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-pedantic-errors -std=c89 -Wvla\" } */\n \n extern void \n-func (int i, int array[i]); /* { dg-error \"error: ISO C90 forbids variable.* array 'array'\" } */\n+func (int i, int array[i]); /* { dg-error \"ISO C90 forbids variable.* array 'array'\" } */"}, {"sha": "4c264f0d8a369046b90d12631d56f2af25aa86b5", "filename": "gcc/testsuite/gcc.dg/wvla-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-7.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-pedantic-errors -std=c89 -Wvla\" } */\n \n extern void \n-func (int i, int [i]); /* { dg-error \"error: ISO C90 forbids variable\" } */\n+func (int i, int [i]); /* { dg-error \"ISO C90 forbids variable\" } */"}, {"sha": "85e1d90d804aff7804cfbb50dc380a6895e492ed", "filename": "gcc/testsuite/gcc.target/i386/991209-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F991209-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F991209-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F991209-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -6,4 +6,4 @@ int foo ()\n   return 1;\n }\n \n-register char *stack_ptr __asm (\"%esp\"); /* { dg-warning \"warning: file-scope declaration of 'stack_ptr' specifies 'register'\" } */\n+register char *stack_ptr __asm (\"%esp\"); /* { dg-warning \"file-scope declaration of 'stack_ptr' specifies 'register'\" } */"}, {"sha": "8c9e21d7c7805e40326272705b982e3350a95c17", "filename": "gcc/testsuite/gcc.target/ia64/fpreg-1.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Ffpreg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Ffpreg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Ffpreg-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -8,7 +8,7 @@ double d;\n /* Default initialized __fpreg is OK.  */\n __fpreg fpreg, fpreg2;\n /* But explicitly zero-initialized is an invalid conversion.  */\n-__fpreg fi = 0; /* { dg-error \"error: invalid conversion to '__fpreg'\" } */\n+__fpreg fi = 0; /* { dg-error \"invalid conversion to '__fpreg'\" } */\n \n __fpreg f0 (__fpreg);\n int f1 (__float80);\n@@ -36,47 +36,47 @@ f (void)\n   d = sizeof (fpreg);\n   (void)(fpreg, fpreg);\n   /* Invalid operations.  */\n-  ++fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  --fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg++; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg--; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = -fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = ~fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = !fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = *fpreg; /* { dg-error \"error: invalid type argument\" } */\n-  if (fpreg) /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n+  ++fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  --fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg++; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg--; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = -fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = ~fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = !fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = *fpreg; /* { dg-error \"invalid type argument\" } */\n+  if (fpreg) /* { dg-error \"invalid operation on '__fpreg'\" } */\n     return;\n-  d = fpreg; /* { dg-error \"error: invalid conversion from '__fpreg'\" } */\n-  d = (double) fpreg; /* { dg-error \"error: invalid conversion from '__fpreg'\" } */\n-  fpreg = (__fpreg) d; /* { dg-error \"error: invalid conversion to '__fpreg'\" } */\n-  fpreg = fpreg * fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg / fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg % fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg + fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg - fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg << fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = fpreg >> fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg < fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg > fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg <= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg >= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg == fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg != fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg & fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg ^ fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg | fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg && fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = fpreg || fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  d = (fpreg ? 1 : 2); /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg = (d ? fpreg : d); /* { dg-error \"error: invalid conversion to '__fpreg'\" } */\n-  fpreg *= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg /= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg %= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg += fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg -= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg <<= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg >>= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg &= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg ^= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n-  fpreg |= fpreg; /* { dg-error \"error: invalid operation on '__fpreg'\" } */\n+  d = fpreg; /* { dg-error \"invalid conversion from '__fpreg'\" } */\n+  d = (double) fpreg; /* { dg-error \"invalid conversion from '__fpreg'\" } */\n+  fpreg = (__fpreg) d; /* { dg-error \"invalid conversion to '__fpreg'\" } */\n+  fpreg = fpreg * fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg / fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg % fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg + fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg - fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg << fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = fpreg >> fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg < fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg > fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg <= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg >= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg == fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg != fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg & fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg ^ fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg | fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg && fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = fpreg || fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  d = (fpreg ? 1 : 2); /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg = (d ? fpreg : d); /* { dg-error \"invalid conversion to '__fpreg'\" } */\n+  fpreg *= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg /= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg %= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg += fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg -= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg <<= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg >>= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg &= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg ^= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n+  fpreg |= fpreg; /* { dg-error \"invalid operation on '__fpreg'\" } */\n }"}, {"sha": "1518bece55ba1ded58df477886f5a5cd84bb5afa", "filename": "gcc/testsuite/gcc.target/m68k/interrupt_thread-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -14,10 +14,10 @@\n #define IH interrupt_handler\n #endif\n \n-extern void f1 (void) __attribute__((interrupt_handler, interrupt_handler)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+extern void f1 (void) __attribute__((interrupt_handler, interrupt_handler)); /* { dg-error \"multiple interrupt attributes not allowed\" } */\n \n-extern void f2 (void) __attribute__((interrupt_handler, IH)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+extern void f2 (void) __attribute__((interrupt_handler, IH)); /* { dg-error \"multiple interrupt attributes not allowed\" } */\n \n-extern void f3 (void) __attribute__((IH, interrupt_handler)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+extern void f3 (void) __attribute__((IH, interrupt_handler)); /* { dg-error \"multiple interrupt attributes not allowed\" } */\n \n-extern void f4 (void) __attribute__((IH, IH)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+extern void f4 (void) __attribute__((IH, IH)); /* { dg-error \"multiple interrupt attributes not allowed\" } */"}, {"sha": "be83edb5fafa84972e4f6f4edb937ffb01cf0d25", "filename": "gcc/testsuite/gcc.target/m68k/interrupt_thread-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -4,4 +4,4 @@\n /* Check that interrupt_thread is rejected on CPUs other than\n    fido.  */\n \n-extern void foo (void) __attribute__((interrupt_thread)); /* { dg-error \"error: interrupt_thread is available only on fido\" } */\n+extern void foo (void) __attribute__((interrupt_thread)); /* { dg-error \"interrupt_thread is available only on fido\" } */"}, {"sha": "56bf4b9a7ed290418a098af34ec86d0ab88d41cf", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-types-1.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -68,21 +68,21 @@ __vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" }\n /* These should be rejected because the component types are invalid.  We\n    don't care about the actual error messages here.  */\n \n-__vector __bool unsigned char vbuc;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed char vbsc;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned short vbuh;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed short vbsh;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned int vbui;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed int vbsi;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned vbuj;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed vbsj;\t\t/* { dg-error \"error\" \"\" } */\n-__vector signed float vsf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector unsigned float vuf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector short float vsf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector signed double vsd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector unsigned double vud;\t\t/* { dg-error \"error\" \"\" } */\n-__vector short double vsd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool float vbf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool double vbd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool short float blf;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool short double vlbd;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"\" \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"\" \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"\" \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"\" \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"\" \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"\" \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"\" \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"\" \"\" } */"}, {"sha": "f0d4900aa27c7589ab63b55f21e56662ec4f5b8d", "filename": "gcc/testsuite/gcc.test-framework/dg-error-exp-F.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-exp-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-exp-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-exp-F.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -0,0 +1,11 @@\n+/* Test the tester; previously part of gcc.misc-tests/dg-9.c.  */\n+/* { dg-prms-id 42 } */\n+/* { dg-options \"-Wall\" } */\n+\n+f ()\n+{\t/* { dg-error \"return type\" \"warning test\" } */\n+}\t/* { dg-error \"control reaches end\" \"warning test\" } */\n+\n+main (int argc, char *argv[])\n+{\t\t/* { dg-error \"return type\" \"warning test\" } */\n+}\t\t/* { dg-error \"control reaches end\" \"warning test\" } */"}, {"sha": "e83c0b27287c330c60b97a15f78d126ba07c508d", "filename": "gcc/testsuite/gcc.test-framework/dg-warning-exp-F.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-exp-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-exp-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-exp-F.c?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -0,0 +1,10 @@\n+/* Test the tester; previously part of gcc.misc-tests/dg-9.c.  */\n+/* { dg-prms-id 42 } */\n+/* { dg-options \"-Wall\" } */\n+\n+int main (int argc, char *argv[])\n+{\n+  +;  /* { dg-warning \"expected expression\" \"error test\" } */\n+  return 0;\n+}\n+"}, {"sha": "f7877c9fc29db188ac1b5042a69d122480ad5024", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -559,6 +559,32 @@ if { [info procs saved-dg-test] == [list] } {\n     }\n }\n \n+if { [info procs saved-dg-warning] == [list] \\\n+     && [info exists gcc_warning_prefix] } {\n+    rename dg-warning saved-dg-warning\n+\n+    proc dg-warning { args } {\n+\t# Make this variable available here and to the saved proc.\n+\tupvar dg-messages dg-messages\n+\tglobal gcc_warning_prefix\n+\n+ \tprocess-message saved-dg-warning \"$gcc_warning_prefix\" \"$args\"\n+    }\n+}\n+\n+if { [info procs saved-dg-error] == [list] \\\n+     && [info exists gcc_error_prefix] } {\n+    rename dg-error saved-dg-error\n+\n+    proc dg-error { args } {\n+\t# Make this variable available here and to the saved proc.\n+\tupvar dg-messages dg-messages\n+\tglobal gcc_error_prefix\n+\n+\tprocess-message saved-dg-error \"$gcc_error_prefix\" \"$args\"\n+    }\n+}\n+\n # Modify the regular expression saved by a DejaGnu message directive to\n # include a prefix and to force the expression to match a single line.\n # MSGPROC is the procedure to call.\n@@ -592,7 +618,7 @@ proc process-message { msgproc msgprefix dgargs } {\n \n proc dg-message { args } {\n     upvar dg-messages dg-messages\n-    process-message dg-warning \"\" $args\n+    process-message saved-dg-warning \"\" $args\n }\n \n set additional_prunes \"\""}, {"sha": "61d20063f99144e6f83bb5b23c50ffedf48be028", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0637fdfe2010f51d9c6833806c7b339e785c9e/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=ad0637fdfe2010f51d9c6833806c7b339e785c9e", "patch": "@@ -92,6 +92,8 @@ proc gcc_init { args } {\n     global gcc_initialized\n     global GCC_UNDER_TEST\n     global TOOL_EXECUTABLE\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n \n     if { $gcc_initialized == 1 } { return; }\n \n@@ -107,6 +109,9 @@ proc gcc_init { args } {\n \tset tmpdir /tmp\n     }\n \n+    set gcc_warning_prefix \"warning:\"\n+    set gcc_error_prefix \"error:\"\n+\n     gcc_maybe_build_wrapper \"${tmpdir}/gcc-testglue.o\"\n }\n "}]}