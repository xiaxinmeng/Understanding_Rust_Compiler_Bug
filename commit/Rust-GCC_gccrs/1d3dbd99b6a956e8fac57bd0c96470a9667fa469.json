{"sha": "1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzZGJkOTliNmE5NTZlOGZhYzU3YmQwYzk2NDcwYTk2NjdmYTQ2OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-03-07T07:41:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-03-07T07:41:39Z"}, "message": "hooks.c (hook_bool_mode_rtx_true): New function.\n\n\t* hooks.c (hook_bool_mode_rtx_true): New function.\n\t* hooks.h (hook_bool_mode_rtx_true): Declare.\n\t* toplev.c (compile_file): Call output_shared_constant_pool.\n\t* varasm.c (shared_constant_pool): New variable.\n\t(assemble_start_function, assemble_end_function): Remove arguments\n\tfrom call to output_constant_pool.\n\t(create_constant_pool): New function, split out from...\n\t(init_varasm_status): ...here.\n\t(force_const_mem): Choose between the shared and per-function constant\n\tpools.  Set current_function_uses_const_pool when reusing old entries\n\tas well as when creating new ones.\n\t(mark_constant): Ignore data argument.\n\t(mark_constants): Remove pool argument.\n\t(mark_constant_pool): Likewise.  Use current_function_uses_const_pool\n\tto decide whether the function uses a constant pool.\n\t(output_constant_pool_contents): New function, split out from...\n\t(output_constant_pool): ...here.\n\t(output_shared_constant_pool): New function.\n\t(init_varasm_once): Initialize shared_constant_pool.\n\t* output.h (output_constant_pool): Delete.\n\t(output_shared_constant_pool): Declare.\n\t* config/s390/s390-protos.h (s390_output_constant_pool): Delete.\n\t* config/i386/i386.c (TARGET_USE_BLOCKS_FOR_CONSTANT_P): Override.\n\nFrom-SVN: r111804", "tree": {"sha": "fcbd5a8dae55ab36f6d797f3280c575b6ee81f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcbd5a8dae55ab36f6d797f3280c575b6ee81f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/comments", "author": null, "committer": null, "parents": [{"sha": "06af4f5d2020268de5c996d8024901a738da0b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06af4f5d2020268de5c996d8024901a738da0b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06af4f5d2020268de5c996d8024901a738da0b56"}], "stats": {"total": 151, "additions": 112, "deletions": 39}, "files": [{"sha": "fcdd12b2d557eed832c4b6efb4e6f54c64470e88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -1,3 +1,29 @@\n+2006-03-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* hooks.c (hook_bool_mode_rtx_true): New function.\n+\t* hooks.h (hook_bool_mode_rtx_true): Declare.\n+\t* toplev.c (compile_file): Call output_shared_constant_pool.\n+\t* varasm.c (shared_constant_pool): New variable.\n+\t(assemble_start_function, assemble_end_function): Remove arguments\n+\tfrom call to output_constant_pool.\n+\t(create_constant_pool): New function, split out from...\n+\t(init_varasm_status): ...here.\n+\t(force_const_mem): Choose between the shared and per-function constant\n+\tpools.  Set current_function_uses_const_pool when reusing old entries\n+\tas well as when creating new ones.\n+\t(mark_constant): Ignore data argument.\n+\t(mark_constants): Remove pool argument.\n+\t(mark_constant_pool): Likewise.  Use current_function_uses_const_pool\n+\tto decide whether the function uses a constant pool.\n+\t(output_constant_pool_contents): New function, split out from...\n+\t(output_constant_pool): ...here.\n+\t(output_shared_constant_pool): New function.\n+\t(init_varasm_once): Initialize shared_constant_pool.\n+\t* output.h (output_constant_pool): Delete.\n+\t(output_shared_constant_pool): Declare.\n+\t* config/s390/s390-protos.h (s390_output_constant_pool): Delete.\n+\t* config/i386/i386.c (TARGET_USE_BLOCKS_FOR_CONSTANT_P): Override.\n+\n 2006-03-06  Nick Clifton  <nickc@redhat.com>\n \n \t* config/m32r/m32r.h (OPTIMIZATION_OPTIONS): Remove reference to"}, {"sha": "bf792a91403c9d26e581bfbd26948868c93b4a6c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -1261,6 +1261,8 @@ static section *x86_64_elf_select_section (tree decl, int reloc,\n #endif\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ix86_cannot_force_const_mem\n+#undef TARGET_USE_BLOCKS_FOR_CONSTANT_P\n+#define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_rtx_true\n \n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS ix86_delegitimize_address"}, {"sha": "460fac6d0863b77ffad94649a93eddf815178195", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -90,7 +90,6 @@ extern void s390_split_access_reg (rtx, rtx *, rtx *);\n extern bool s390_output_addr_const_extra (FILE*, rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n-extern void s390_output_constant_pool (rtx, rtx);\n extern void s390_output_pool_entry (rtx, enum machine_mode, unsigned int);\n extern void s390_trampoline_template (FILE *);\n extern void s390_initialize_trampoline (rtx, rtx, rtx);"}, {"sha": "18b17dc85f29a0265b7ecc0de55c54e1f563f237", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -77,6 +77,14 @@ hook_bool_mode_rtx_false (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+/* Generic hook that takes (enum machine_mode, rtx) and returns true.  */\n+bool\n+hook_bool_mode_rtx_true (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t rtx value ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n /* Generic hook that takes (FILE *, const char *) and does nothing.  */\n void\n hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUTE_UNUSED)"}, {"sha": "02664c12803da9d350c3441b45c686adee371040", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -29,6 +29,7 @@ extern bool hook_bool_void_true (void);\n extern bool hook_bool_bool_false (bool);\n extern bool hook_bool_mode_false (enum machine_mode);\n extern bool hook_bool_mode_rtx_false (enum machine_mode, rtx);\n+extern bool hook_bool_mode_rtx_true (enum machine_mode, rtx);\n extern bool hook_bool_tree_false (tree);\n extern bool hook_bool_tree_true (tree);\n extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,"}, {"sha": "69f8378a0bcd3d6e206b9467af4d063e6448680f", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -272,8 +272,7 @@ extern int get_pool_size (void);\n extern rtx peephole (rtx);\n #endif\n \n-/* Write all the constants in the constant pool.  */\n-extern void output_constant_pool (const char *, tree);\n+extern void output_shared_constant_pool (void);\n \n extern void output_object_blocks (void);\n "}, {"sha": "a9705a70b5bc386671926381f9c918e52592c9d5", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -1022,6 +1022,7 @@ compile_file (void)\n   if (flag_mudflap)\n     mudflap_finish_file ();\n \n+  output_shared_constant_pool ();\n   output_object_blocks ();\n \n   /* Write out any pending weak symbol declarations.  */"}, {"sha": "b01ad1dd06703301b601a5fa2fd095c1b06254cc", "filename": "gcc/varasm.c", "status": "modified", "additions": 73, "deletions": 36, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3dbd99b6a956e8fac57bd0c96470a9667fa469/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1d3dbd99b6a956e8fac57bd0c96470a9667fa469", "patch": "@@ -139,6 +139,7 @@ static void asm_output_aligned_bss (FILE *, tree, const char *,\n #endif\n #endif /* BSS_SECTION_ASM_OP */\n static void mark_weak (tree);\n+static void output_constant_pool (void);\n \f\n /* Well-known sections, each one associated with some sort of *_ASM_OP.  */\n section *text_section;\n@@ -196,6 +197,9 @@ static GTY((param_is (struct object_block))) htab_t object_block_htab;\n /* The next number to use for internal anchor labels.  */\n static GTY(()) int anchor_labelno;\n \n+/* A pool of constants that can be shared between functions.  */\n+static GTY(()) struct rtx_constant_pool *shared_constant_pool;\n+\n /* Helper routines for maintaining section_htab.  */\n \n static int\n@@ -1328,7 +1332,7 @@ assemble_start_function (tree decl, const char *fnname)\n   app_disable ();\n \n   if (CONSTANT_POOL_BEFORE_FUNCTION)\n-    output_constant_pool (fnname, decl);\n+    output_constant_pool ();\n \n   resolve_unique_section (decl, 0, flag_function_sections);\n \n@@ -1446,7 +1450,7 @@ assemble_end_function (tree decl, const char *fnname)\n #endif\n   if (! CONSTANT_POOL_BEFORE_FUNCTION)\n     {\n-      output_constant_pool (fnname, decl);\n+      output_constant_pool ();\n       switch_to_section (function_section (decl)); /* need to switch back */\n     }\n   /* Output labels for end of hot/cold text sections (to be used by\n@@ -3122,25 +3126,34 @@ const_rtx_hash (rtx x)\n }\n \n \f\n+/* Create and return a new rtx constant pool.  */\n+\n+static struct rtx_constant_pool *\n+create_constant_pool (void)\n+{\n+  struct rtx_constant_pool *pool;\n+\n+  pool = ggc_alloc (sizeof (struct rtx_constant_pool));\n+  pool->const_rtx_htab = htab_create_ggc (31, const_desc_rtx_hash,\n+\t\t\t\t\t  const_desc_rtx_eq, NULL);\n+  pool->first = NULL;\n+  pool->last = NULL;\n+  pool->offset = 0;\n+  return pool;\n+}\n+\n /* Initialize constant pool hashing for a new function.  */\n \n void\n init_varasm_status (struct function *f)\n {\n   struct varasm_status *p;\n-  struct rtx_constant_pool *pool;\n \n   p = ggc_alloc (sizeof (struct varasm_status));\n   f->varasm = p;\n \n-  pool = ggc_alloc (sizeof (struct rtx_constant_pool));\n-  p->pool = pool;\n+  p->pool = create_constant_pool ();\n   p->deferred_constants = 0;\n-\n-  pool->const_rtx_htab = htab_create_ggc (31, const_desc_rtx_hash,\n-\t\t\t\t\t  const_desc_rtx_eq, NULL);\n-  pool->first = pool->last = NULL;\n-  pool->offset = 0;\n }\n \f\n /* Given a MINUS expression, simplify it if both sides\n@@ -3160,7 +3173,7 @@ rtx\n force_const_mem (enum machine_mode mode, rtx x)\n {\n   struct constant_descriptor_rtx *desc, tmp;\n-  struct rtx_constant_pool *pool = cfun->varasm->pool;\n+  struct rtx_constant_pool *pool;\n   char label[256];\n   rtx def, symbol;\n   hashval_t hash;\n@@ -3171,6 +3184,14 @@ force_const_mem (enum machine_mode mode, rtx x)\n   if (targetm.cannot_force_const_mem (x))\n     return NULL_RTX;\n \n+  /* Record that this function has used a constant pool entry.  */\n+  current_function_uses_const_pool = 1;\n+\n+  /* Decide which pool to use.  */\n+  pool = (targetm.use_blocks_for_constant_p (mode, x)\n+\t  ? shared_constant_pool\n+\t  : cfun->varasm->pool);\n+\n   /* Lookup the value in the hashtable.  */\n   tmp.constant = x;\n   tmp.mode = mode;\n@@ -3233,7 +3254,6 @@ force_const_mem (enum machine_mode mode, rtx x)\n   SYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_LOCAL;\n   CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n   SET_SYMBOL_REF_CONSTANT (symbol, desc);\n-  current_function_uses_const_pool = 1;\n \n   /* Construct the MEM.  */\n   desc->mem = def = gen_const_mem (mode, symbol);\n@@ -3404,9 +3424,8 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n    be used with for_each_rtx to mark all SYMBOL_REFs in an rtx.  */\n \n static int\n-mark_constant (rtx *current_rtx, void *data)\n+mark_constant (rtx *current_rtx, void *data ATTRIBUTE_UNUSED)\n {\n-  struct rtx_constant_pool *pool = data;\n   rtx x = *current_rtx;\n \n   if (x == NULL_RTX || GET_CODE (x) != SYMBOL_REF)\n@@ -3418,7 +3437,7 @@ mark_constant (rtx *current_rtx, void *data)\n       if (desc->mark == 0)\n \t{\n \t  desc->mark = 1;\n-\t  for_each_rtx (&desc->constant, mark_constant, pool);\n+\t  for_each_rtx (&desc->constant, mark_constant, NULL);\n \t}\n     }\n   else if (TREE_CONSTANT_POOL_ADDRESS_P (x))\n@@ -3440,7 +3459,7 @@ mark_constant (rtx *current_rtx, void *data)\n    deferred strings that are used.  */\n \n static void\n-mark_constants (struct rtx_constant_pool *pool, rtx insn)\n+mark_constants (rtx insn)\n {\n   if (!INSN_P (insn))\n     return;\n@@ -3456,52 +3475,41 @@ mark_constants (struct rtx_constant_pool *pool, rtx insn)\n \t{\n \t  rtx subinsn = XVECEXP (seq, 0, i);\n \t  if (INSN_P (subinsn))\n-\t    for_each_rtx (&PATTERN (subinsn), mark_constant, pool);\n+\t    for_each_rtx (&PATTERN (subinsn), mark_constant, NULL);\n \t}\n     }\n   else\n-    for_each_rtx (&PATTERN (insn), mark_constant, pool);\n+    for_each_rtx (&PATTERN (insn), mark_constant, NULL);\n }\n \n /* Look through the instructions for this function, and mark all the\n    entries in POOL which are actually being used.  Emit deferred constants\n    which have indeed been used.  */\n \n static void\n-mark_constant_pool (struct rtx_constant_pool *pool)\n+mark_constant_pool (void)\n {\n   rtx insn, link;\n \n-  if (pool->first == 0 && n_deferred_constants == 0)\n+  if (!current_function_uses_const_pool && n_deferred_constants == 0)\n     return;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    mark_constants (pool, insn);\n+    mark_constants (insn);\n \n   for (link = current_function_epilogue_delay_list;\n        link;\n        link = XEXP (link, 1))\n-    mark_constants (pool, XEXP (link, 0));\n+    mark_constants (XEXP (link, 0));\n }\n \n-/* Write all the constants in the constant pool.  */\n+/* Write all the constants in POOL.  */\n \n-void\n-output_constant_pool (const char *fnname ATTRIBUTE_UNUSED,\n-\t\t      tree fndecl ATTRIBUTE_UNUSED)\n+static void\n+output_constant_pool_contents (struct rtx_constant_pool *pool)\n {\n-  struct rtx_constant_pool *pool = cfun->varasm->pool;\n   struct constant_descriptor_rtx *desc;\n \n-  /* It is possible for gcc to call force_const_mem and then to later\n-     discard the instructions which refer to the constant.  In such a\n-     case we do not need to output the constant.  */\n-  mark_constant_pool (pool);\n-\n-#ifdef ASM_OUTPUT_POOL_PROLOGUE\n-  ASM_OUTPUT_POOL_PROLOGUE (asm_out_file, fnname, fndecl, pool->offset);\n-#endif\n-\n   for (desc = pool->first; desc ; desc = desc->next)\n     if (desc->mark)\n       {\n@@ -3519,12 +3527,40 @@ output_constant_pool (const char *fnname ATTRIBUTE_UNUSED,\n \t    output_constant_pool_1 (desc, desc->align);\n \t  }\n       }\n+}\n+\n+/* Mark all constants that are used in the current function, then write\n+   out the function's private constant pool.  */\n+\n+static void\n+output_constant_pool (void)\n+{\n+  struct rtx_constant_pool *pool = cfun->varasm->pool;\n+\n+  /* It is possible for gcc to call force_const_mem and then to later\n+     discard the instructions which refer to the constant.  In such a\n+     case we do not need to output the constant.  */\n+  mark_constant_pool ();\n+\n+#ifdef ASM_OUTPUT_POOL_PROLOGUE\n+  ASM_OUTPUT_POOL_PROLOGUE (asm_out_file, fnname, fndecl, pool->offset);\n+#endif\n+\n+  output_constant_pool_contents (pool);\n \n #ifdef ASM_OUTPUT_POOL_EPILOGUE\n   ASM_OUTPUT_POOL_EPILOGUE (asm_out_file, fnname, fndecl, pool->offset);\n #endif\n }\n \f\n+/* Write the contents of the shared constant pool.  */\n+\n+void\n+output_shared_constant_pool (void)\n+{\n+  output_constant_pool_contents (shared_constant_pool);\n+}\n+\f\n /* Determine what kind of relocations EXP may need.  */\n \n int\n@@ -5064,6 +5100,7 @@ init_varasm_once (void)\n \t\t\t\t     const_desc_eq, NULL);\n \n   const_alias_set = new_alias_set ();\n+  shared_constant_pool = create_constant_pool ();\n \n #ifdef TEXT_SECTION_ASM_OP\n   text_section = get_unnamed_section (SECTION_CODE, output_section_asm_op,"}]}