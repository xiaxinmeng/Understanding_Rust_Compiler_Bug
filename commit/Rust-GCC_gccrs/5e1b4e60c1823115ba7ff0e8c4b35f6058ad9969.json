{"sha": "5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxYjRlNjBjMTgyMzExNWJhN2ZmMGU4YzRiMzVmNjA1OGFkOTk2OQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-03T17:27:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-08T14:45:46Z"}, "message": "c++: Fix missing SFINAE when binding a bit-field to a reference (PR 93729)\n\nWe are unconditionally emitting an error here, without first checking complain.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93729\n\t* call.c (convert_like_real): Check complain before emitting an error\n\tabout binding a bit-field to a reference.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93729\n\t* g++.dg/concepts/pr93729.C: New test.", "tree": {"sha": "6d2974b307e75eec1618d4b7fe454d0cf6399433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2974b307e75eec1618d4b7fe454d0cf6399433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/comments", "author": null, "committer": null, "parents": [{"sha": "ff0a62841e27b838f17a9d6253d131206072df6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0a62841e27b838f17a9d6253d131206072df6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0a62841e27b838f17a9d6253d131206072df6f"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "f32c27e8ee7d2efdd9e2358fe7ba04b93b9808be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "patch": "@@ -1,5 +1,9 @@\n 2020-03-08  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/93729\n+\t* call.c (convert_like_real): Check complain before emitting an error\n+\tabout binding a bit-field to a reference.\n+\n \t* cxx-pretty-print.c (cxx_pretty_printer::simple_type_specifier)\n \t[TYPENAME_TYPE]: Print the TYPENAME_TYPE_FULLNAME instead of the\n \tTYPE_NAME."}, {"sha": "c0340d96f3c817360b5c66182f355ce81405405f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "patch": "@@ -7730,15 +7730,18 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t      {\n \t\t/* If the reference is volatile or non-const, we\n \t\t   cannot create a temporary.  */\n-\t\tif (lvalue & clk_bitfield)\n-\t\t  error_at (loc, \"cannot bind bit-field %qE to %qT\",\n-\t\t\t    expr, ref_type);\n-\t\telse if (lvalue & clk_packed)\n-\t\t  error_at (loc, \"cannot bind packed field %qE to %qT\",\n-\t\t\t    expr, ref_type);\n-\t\telse\n-\t\t  error_at (loc, \"cannot bind rvalue %qE to %qT\",\n-\t\t\t    expr, ref_type);\n+\t\tif (complain & tf_error)\n+\t\t  {\n+\t\t    if (lvalue & clk_bitfield)\n+\t\t      error_at (loc, \"cannot bind bit-field %qE to %qT\",\n+\t\t\t\texpr, ref_type);\n+\t\t    else if (lvalue & clk_packed)\n+\t\t      error_at (loc, \"cannot bind packed field %qE to %qT\",\n+\t\t\t\texpr, ref_type);\n+\t\t    else\n+\t\t      error_at (loc, \"cannot bind rvalue %qE to %qT\",\n+\t\t\t\texpr, ref_type);\n+\t\t  }\n \t\treturn error_mark_node;\n \t      }\n \t    /* If the source is a packed field, and we must use a copy"}, {"sha": "a1a371b948f858f37668b81f7581ca48efc04e3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "patch": "@@ -1,5 +1,8 @@\n 2020-03-08  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/93729\n+\t* g++.dg/concepts/pr93729.C: New test.\n+\n \t* g++.dg/concepts/diagnostic4.C: New test.\n \n 2020-03-08  H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "7397edb311d95664c8aa990dd13073f310728d1c", "filename": "gcc/testsuite/g++.dg/concepts/pr93729.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93729.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93729.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr93729.C?ref=5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++2a } }\n+\n+// PR c++/93729\n+\n+struct B\n+{\n+  int a:4;\n+  int b:4;\n+};\n+\n+template<typename T>\n+concept c1\n+  = requires(T x, void(f)(int &)) { f(x.a); }; // { dg-bogus \"cannot bind\" }\n+\n+static_assert(!c1<B>);"}]}