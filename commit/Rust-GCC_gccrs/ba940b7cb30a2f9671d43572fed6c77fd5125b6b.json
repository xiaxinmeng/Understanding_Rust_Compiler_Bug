{"sha": "ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5NDBiN2NiMzBhMmY5NjcxZDQzNTcyZmVkNmM3N2ZkNTEyNWI2Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-25T11:22:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-25T11:22:03Z"}, "message": "stl_algobase.h (__lexicographical_compare<>::__lc): Move out of line.\n\n2007-11-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (__lexicographical_compare<>::__lc):\n\tMove out of line.\n\n\t* include/bits/stl_algobase.h (swap_ranges): Remove redundant\n\tsimulated concept checks.\n\nFrom-SVN: r130404", "tree": {"sha": "2be08bcb96a8f4a4072f9a65f8e9253eb78c2a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be08bcb96a8f4a4072f9a65f8e9253eb78c2a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba940b7cb30a2f9671d43572fed6c77fd5125b6b/comments", "author": null, "committer": null, "parents": [{"sha": "2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "91aba14ac37ef864ceff7f89c9217042ebf7bcb3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba940b7cb30a2f9671d43572fed6c77fd5125b6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba940b7cb30a2f9671d43572fed6c77fd5125b6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "patch": "@@ -1,3 +1,11 @@\n+2007-11-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (__lexicographical_compare<>::__lc):\n+\tMove out of line.\n+\n+\t* include/bits/stl_algobase.h (swap_ranges): Remove redundant\n+\tsimulated concept checks.\n+\n 2007-11-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/bitset (bitset<>::all): Add, per DR 693 [Ready]."}, {"sha": "52f2ca477700d5e668704122a19532e72894c7dd", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba940b7cb30a2f9671d43572fed6c77fd5125b6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba940b7cb30a2f9671d43572fed6c77fd5125b6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=ba940b7cb30a2f9671d43572fed6c77fd5125b6b", "patch": "@@ -166,12 +166,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ForwardIterator1>)\n       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n \t\t\t\t  _ForwardIterator2>)\n-      __glibcxx_function_requires(_ConvertibleConcept<\n-\t    typename iterator_traits<_ForwardIterator1>::value_type,\n-\t    typename iterator_traits<_ForwardIterator2>::value_type>)\n-      __glibcxx_function_requires(_ConvertibleConcept<\n-\t    typename iterator_traits<_ForwardIterator2>::value_type,\n-\t    typename iterator_traits<_ForwardIterator1>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n       for (; __first1 != __last1; ++__first1, ++__first2)\n@@ -819,27 +813,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct __lexicographical_compare\n     {\n       template<typename _II1, typename _II2>\n-        static bool\n-        __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-        {\n-\t  typedef typename iterator_traits<_II1>::iterator_category _Category1;\n-\t  typedef typename iterator_traits<_II2>::iterator_category _Category2;\n-\t  typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n-\n-\t  __last1 = __rai_type::__newlast1(__first1, __last1,\n-\t\t\t\t\t   __first2, __last2);\n-\t  for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n-\t       ++__first1, ++__first2)\n-\t    {\n-\t      if (*__first1 < *__first2)\n-\t\treturn true;\n-\t      if (*__first2 < *__first1)\n-\t\treturn false;\n-\t    }\n-\t  return __first1 == __last1 && __first2 != __last2;\n-\t}\n+        static bool __lc(_II1, _II1, _II2, _II2);\n     };\n \n+  template<bool _BoolType>\n+    template<typename _II1, typename _II2>\n+      bool\n+      __lexicographical_compare<_BoolType>::\n+      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n+      {\n+\ttypedef typename iterator_traits<_II1>::iterator_category _Category1;\n+\ttypedef typename iterator_traits<_II2>::iterator_category _Category2;\n+\ttypedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n+\t\n+\t__last1 = __rai_type::__newlast1(__first1, __last1,\n+\t\t\t\t\t __first2, __last2);\n+\tfor (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n+\t     ++__first1, ++__first2)\n+\t  {\n+\t    if (*__first1 < *__first2)\n+\t      return true;\n+\t    if (*__first2 < *__first1)\n+\t      return false;\n+\t  }\n+\treturn __first1 == __last1 && __first2 != __last2;\n+      }\n+\n   template<>\n     struct __lexicographical_compare<true>\n     {"}]}