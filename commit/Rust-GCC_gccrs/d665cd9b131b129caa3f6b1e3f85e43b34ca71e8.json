{"sha": "d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2NWNkOWIxMzFiMTI5Y2FhM2Y2YjFlM2Y4NWU0M2IzNGNhNzFlOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-12T13:50:51Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-12T13:50:51Z"}, "message": "[libbacktrace] Add allocfail.sh test-case\n\nAdd test-case that forces alloc.c functions to fail, and check whether fail\nhandling is robust.\n\nThis is the test-case for \"[libbacktrace] Fix segfault upon allocation\nfailure\".  Without that patch, this test-case fails like this:\n...\nallocfail.sh: line 71: 26041 Segmentation fault      (core dumped) \\\n  ./allocfail $i > /dev/null 2>&1\nUnallowed fail found: 13\nFAIL allocfail.sh (exit status: 1)\n...\n\nThis is a seperate patch because the test-case is nontrivial.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-12-12  Tom de Vries  <tdevries@suse.de>\n\n\t* Makefile.am (TESTS): Add allocfail.sh.\n\t(check_PROGRAMS): Add allocfail.\n\t* Makefile.in: Regenerate.\n\t* instrumented_alloc.c: New file.  Redefine malloc and realloc.\n\tInclude alloc.c.\n\t* allocfail.c: New file.\n\t* allocfail.sh: New file.\n\nFrom-SVN: r267054", "tree": {"sha": "81ecef53312f75f6b1a382a5e3da9ee70eca54af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ecef53312f75f6b1a382a5e3da9ee70eca54af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf4eca2e562d036f109f1782e95b233453b0d503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4eca2e562d036f109f1782e95b233453b0d503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4eca2e562d036f109f1782e95b233453b0d503"}], "stats": {"total": 466, "additions": 449, "deletions": 17}, "files": [{"sha": "f2a17df0ee7cb323137368ab42b89b7cf0712788", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -1,3 +1,13 @@\n+2018-12-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* Makefile.am (TESTS): Add allocfail.sh.\n+\t(check_PROGRAMS): Add allocfail.\n+\t* Makefile.in: Regenerate.\n+\t* instrumented_alloc.c: New file.  Redefine malloc and realloc.\n+\tInclude alloc.c.\n+\t* allocfail.c: New file.\n+\t* allocfail.sh: New file.\n+\n 2018-11-30  Tom de Vries  <tdevries@suse.de>\n \n \t* Makefile.am (check_PROGRAMS): Add test_elf, test_xcoff_32,"}, {"sha": "9d489f7b418dbf5a4bc97264c2011f2966497e24", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -145,6 +145,26 @@ unittest_alloc_LDADD = libbacktrace_alloc.la\n \n check_PROGRAMS += unittest_alloc\n \n+check_LTLIBRARIES += libbacktrace_instrumented_alloc.la\n+\n+libbacktrace_instrumented_alloc_la_SOURCES = $(libbacktrace_la_SOURCES)\n+libbacktrace_instrumented_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) \\\n+\tread.lo instrumented_alloc.lo\n+\n+libbacktrace_instrumented_alloc_la_DEPENDENCIES = \\\n+\t$(libbacktrace_instrumented_alloc_la_LIBADD)\n+\n+instrumented_alloc.lo: alloc.c\n+\n+allocfail_SOURCES = allocfail.c testlib.c\n+allocfail_LDADD = libbacktrace_instrumented_alloc.la\n+\n+check_PROGRAMS += allocfail\n+\n+allocfail.sh: allocfail\n+\n+TESTS += allocfail.sh\n+\n btest_SOURCES = btest.c testlib.c\n btest_CFLAGS = $(AM_CFLAGS) -g -O\n btest_LDADD = libbacktrace.la"}, {"sha": "7b18b9834e03507240c476e4d22c5fd787eea7c6", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -123,13 +123,14 @@ target_triplet = @target@\n check_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3)\n @NATIVE_TRUE@am__append_1 = test_elf test_xcoff_32 test_xcoff_64 \\\n @NATIVE_TRUE@\ttest_pecoff test_unknown unittest unittest_alloc \\\n-@NATIVE_TRUE@\tbtest btest_alloc stest stest_alloc ztest \\\n-@NATIVE_TRUE@\tztest_alloc edtest edtest_alloc\n-@HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_2 = -lz\n+@NATIVE_TRUE@\tallocfail btest btest_alloc stest stest_alloc \\\n+@NATIVE_TRUE@\tztest ztest_alloc edtest edtest_alloc\n+@NATIVE_TRUE@am__append_2 = allocfail.sh\n @HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_3 = -lz\n-@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_4 = ttest ttest_alloc\n-@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_5 = dtest\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__append_6 = ctestg ctesta \\\n+@HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_4 = -lz\n+@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_5 = ttest ttest_alloc\n+@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_6 = dtest\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__append_7 = ctestg ctesta \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg_alloc \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta_alloc\n subdir = .\n@@ -169,25 +170,35 @@ am__objects_1 = atomic.lo dwarf.lo fileline.lo posix.lo print.lo \\\n @NATIVE_TRUE@am_libbacktrace_alloc_la_OBJECTS = $(am__objects_1)\n libbacktrace_alloc_la_OBJECTS = $(am_libbacktrace_alloc_la_OBJECTS)\n @NATIVE_TRUE@am_libbacktrace_alloc_la_rpath =\n+@NATIVE_TRUE@am_libbacktrace_instrumented_alloc_la_OBJECTS =  \\\n+@NATIVE_TRUE@\t$(am__objects_1)\n+libbacktrace_instrumented_alloc_la_OBJECTS =  \\\n+\t$(am_libbacktrace_instrumented_alloc_la_OBJECTS)\n+@NATIVE_TRUE@am_libbacktrace_instrumented_alloc_la_rpath =\n @NATIVE_TRUE@am_libbacktrace_noformat_la_OBJECTS = $(am__objects_1)\n libbacktrace_noformat_la_OBJECTS =  \\\n \t$(am_libbacktrace_noformat_la_OBJECTS)\n @NATIVE_TRUE@am_libbacktrace_noformat_la_rpath =\n @NATIVE_TRUE@am__EXEEXT_1 = test_elf$(EXEEXT) test_xcoff_32$(EXEEXT) \\\n @NATIVE_TRUE@\ttest_xcoff_64$(EXEEXT) test_pecoff$(EXEEXT) \\\n @NATIVE_TRUE@\ttest_unknown$(EXEEXT) unittest$(EXEEXT) \\\n-@NATIVE_TRUE@\tunittest_alloc$(EXEEXT) btest$(EXEEXT) \\\n-@NATIVE_TRUE@\tbtest_alloc$(EXEEXT) stest$(EXEEXT) \\\n-@NATIVE_TRUE@\tstest_alloc$(EXEEXT) ztest$(EXEEXT) \\\n-@NATIVE_TRUE@\tztest_alloc$(EXEEXT) edtest$(EXEEXT) \\\n-@NATIVE_TRUE@\tedtest_alloc$(EXEEXT)\n+@NATIVE_TRUE@\tunittest_alloc$(EXEEXT) allocfail$(EXEEXT) \\\n+@NATIVE_TRUE@\tbtest$(EXEEXT) btest_alloc$(EXEEXT) \\\n+@NATIVE_TRUE@\tstest$(EXEEXT) stest_alloc$(EXEEXT) \\\n+@NATIVE_TRUE@\tztest$(EXEEXT) ztest_alloc$(EXEEXT) \\\n+@NATIVE_TRUE@\tedtest$(EXEEXT) edtest_alloc$(EXEEXT)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__EXEEXT_2 = ttest$(EXEEXT) \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest_alloc$(EXEEXT)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__EXEEXT_3 =  \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg$(EXEEXT) \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta$(EXEEXT) \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg_alloc$(EXEEXT) \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta_alloc$(EXEEXT)\n+@NATIVE_TRUE@am_allocfail_OBJECTS = allocfail.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+allocfail_OBJECTS = $(am_allocfail_OBJECTS)\n+@NATIVE_TRUE@allocfail_DEPENDENCIES =  \\\n+@NATIVE_TRUE@\tlibbacktrace_instrumented_alloc.la\n @NATIVE_TRUE@am_btest_OBJECTS = btest-btest.$(OBJEXT) \\\n @NATIVE_TRUE@\tbtest-testlib.$(OBJEXT)\n btest_OBJECTS = $(am_btest_OBJECTS)\n@@ -356,8 +367,9 @@ am__v_CCLD_0 = @echo \"  CCLD    \" $@;\n am__v_CCLD_1 = \n SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n \t$(libbacktrace_alloc_la_SOURCES) \\\n-\t$(libbacktrace_noformat_la_SOURCES) $(btest_SOURCES) \\\n-\t$(btest_alloc_SOURCES) $(ctesta_SOURCES) \\\n+\t$(libbacktrace_instrumented_alloc_la_SOURCES) \\\n+\t$(libbacktrace_noformat_la_SOURCES) $(allocfail_SOURCES) \\\n+\t$(btest_SOURCES) $(btest_alloc_SOURCES) $(ctesta_SOURCES) \\\n \t$(ctesta_alloc_SOURCES) $(ctestg_SOURCES) \\\n \t$(ctestg_alloc_SOURCES) $(edtest_SOURCES) \\\n \t$(edtest_alloc_SOURCES) $(stest_SOURCES) \\\n@@ -774,9 +786,10 @@ libbacktrace_la_LIBADD = \\\n \t$(ALLOC_FILE)\n \n libbacktrace_la_DEPENDENCIES = $(libbacktrace_la_LIBADD)\n-TESTS = $(check_PROGRAMS) $(am__append_5)\n+TESTS = $(check_PROGRAMS) $(am__append_2) $(am__append_6)\n @NATIVE_TRUE@check_LTLIBRARIES = libbacktrace_alloc.la \\\n-@NATIVE_TRUE@\tlibbacktrace_noformat.la\n+@NATIVE_TRUE@\tlibbacktrace_noformat.la \\\n+@NATIVE_TRUE@\tlibbacktrace_instrumented_alloc.la\n @NATIVE_TRUE@libbacktrace_alloc_la_SOURCES = $(libbacktrace_la_SOURCES)\n @NATIVE_TRUE@libbacktrace_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) read.lo alloc.lo\n @NATIVE_TRUE@libbacktrace_alloc_la_DEPENDENCIES = $(libbacktrace_alloc_la_LIBADD)\n@@ -797,6 +810,15 @@ TESTS = $(check_PROGRAMS) $(am__append_5)\n @NATIVE_TRUE@unittest_LDADD = libbacktrace.la\n @NATIVE_TRUE@unittest_alloc_SOURCES = $(unittest_SOURCES)\n @NATIVE_TRUE@unittest_alloc_LDADD = libbacktrace_alloc.la\n+@NATIVE_TRUE@libbacktrace_instrumented_alloc_la_SOURCES = $(libbacktrace_la_SOURCES)\n+@NATIVE_TRUE@libbacktrace_instrumented_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) \\\n+@NATIVE_TRUE@\tread.lo instrumented_alloc.lo\n+\n+@NATIVE_TRUE@libbacktrace_instrumented_alloc_la_DEPENDENCIES = \\\n+@NATIVE_TRUE@\t$(libbacktrace_instrumented_alloc_la_LIBADD)\n+\n+@NATIVE_TRUE@allocfail_SOURCES = allocfail.c testlib.c\n+@NATIVE_TRUE@allocfail_LDADD = libbacktrace_instrumented_alloc.la\n @NATIVE_TRUE@btest_SOURCES = btest.c testlib.c\n @NATIVE_TRUE@btest_CFLAGS = $(AM_CFLAGS) -g -O\n @NATIVE_TRUE@btest_LDADD = libbacktrace.la\n@@ -809,9 +831,9 @@ TESTS = $(check_PROGRAMS) $(am__append_5)\n @NATIVE_TRUE@stest_alloc_LDADD = libbacktrace_alloc.la\n @NATIVE_TRUE@ztest_SOURCES = ztest.c testlib.c\n @NATIVE_TRUE@ztest_CFLAGS = -DSRCDIR=\\\"$(srcdir)\\\"\n-@NATIVE_TRUE@ztest_LDADD = libbacktrace.la $(am__append_2) \\\n+@NATIVE_TRUE@ztest_LDADD = libbacktrace.la $(am__append_3) \\\n @NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n-@NATIVE_TRUE@ztest_alloc_LDADD = libbacktrace_alloc.la $(am__append_3) \\\n+@NATIVE_TRUE@ztest_alloc_LDADD = libbacktrace_alloc.la $(am__append_4) \\\n @NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n @NATIVE_TRUE@ztest_alloc_SOURCES = $(ztest_SOURCES)\n @NATIVE_TRUE@ztest_alloc_CFLAGS = $(ztest_CFLAGS)\n@@ -945,6 +967,9 @@ libbacktrace.la: $(libbacktrace_la_OBJECTS) $(libbacktrace_la_DEPENDENCIES) $(EX\n libbacktrace_alloc.la: $(libbacktrace_alloc_la_OBJECTS) $(libbacktrace_alloc_la_DEPENDENCIES) $(EXTRA_libbacktrace_alloc_la_DEPENDENCIES) \n \t$(AM_V_CCLD)$(LINK) $(am_libbacktrace_alloc_la_rpath) $(libbacktrace_alloc_la_OBJECTS) $(libbacktrace_alloc_la_LIBADD) $(LIBS)\n \n+libbacktrace_instrumented_alloc.la: $(libbacktrace_instrumented_alloc_la_OBJECTS) $(libbacktrace_instrumented_alloc_la_DEPENDENCIES) $(EXTRA_libbacktrace_instrumented_alloc_la_DEPENDENCIES) \n+\t$(AM_V_CCLD)$(LINK) $(am_libbacktrace_instrumented_alloc_la_rpath) $(libbacktrace_instrumented_alloc_la_OBJECTS) $(libbacktrace_instrumented_alloc_la_LIBADD) $(LIBS)\n+\n libbacktrace_noformat.la: $(libbacktrace_noformat_la_OBJECTS) $(libbacktrace_noformat_la_DEPENDENCIES) $(EXTRA_libbacktrace_noformat_la_DEPENDENCIES) \n \t$(AM_V_CCLD)$(LINK) $(am_libbacktrace_noformat_la_rpath) $(libbacktrace_noformat_la_OBJECTS) $(libbacktrace_noformat_la_LIBADD) $(LIBS)\n \n@@ -957,6 +982,10 @@ clean-checkPROGRAMS:\n \techo \" rm -f\" $$list; \\\n \trm -f $$list\n \n+allocfail$(EXEEXT): $(allocfail_OBJECTS) $(allocfail_DEPENDENCIES) $(EXTRA_allocfail_DEPENDENCIES) \n+\t@rm -f allocfail$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(allocfail_OBJECTS) $(allocfail_LDADD) $(LIBS)\n+\n btest$(EXEEXT): $(btest_OBJECTS) $(btest_DEPENDENCIES) $(EXTRA_btest_DEPENDENCIES) \n \t@rm -f btest$(EXEEXT)\n \t$(AM_V_CCLD)$(btest_LINK) $(btest_OBJECTS) $(btest_LDADD) $(LIBS)\n@@ -1434,6 +1463,13 @@ unittest_alloc.log: unittest_alloc$(EXEEXT)\n \t--log-file $$b.log --trs-file $$b.trs \\\n \t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n \t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+allocfail.log: allocfail$(EXEEXT)\n+\t@p='allocfail$(EXEEXT)'; \\\n+\tb='allocfail'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n btest.log: btest$(EXEEXT)\n \t@p='btest$(EXEEXT)'; \\\n \tb='btest'; \\\n@@ -1532,6 +1568,13 @@ ctesta_alloc.log: ctesta_alloc$(EXEEXT)\n \t--log-file $$b.log --trs-file $$b.trs \\\n \t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n \t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+allocfail.sh.log: allocfail.sh\n+\t@p='allocfail.sh'; \\\n+\tb='allocfail.sh'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n dtest.log: dtest\n \t@p='dtest'; \\\n \tb='dtest'; \\\n@@ -1695,6 +1738,10 @@ uninstall-am:\n @NATIVE_TRUE@\t\t$(srcdir)/xcoff.c \\\n @NATIVE_TRUE@\t\t> $@\n \n+@NATIVE_TRUE@instrumented_alloc.lo: alloc.c\n+\n+@NATIVE_TRUE@allocfail.sh: allocfail\n+\n @NATIVE_TRUE@edtest2_build.c: gen_edtest2_build; @true\n @NATIVE_TRUE@gen_edtest2_build: $(srcdir)/edtest2.c\n @NATIVE_TRUE@\tcat $(srcdir)/edtest2.c > tmp-edtest2_build.c"}, {"sha": "e9149ab977d2a6286119caccaf5c84faa18a91d1", "filename": "libbacktrace/allocfail.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Fallocfail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Fallocfail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fallocfail.c?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -0,0 +1,136 @@\n+/* allocfail.c -- Test for libbacktrace library\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include \"filenames.h\"\n+\n+#include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n+\n+#include \"testlib.h\"\n+\n+extern uint64_t get_nr_allocs (void);\n+extern void set_fail_at_alloc (uint64_t);\n+extern int at_fail_alloc_p (void);\n+\n+static int test1 (void) __attribute__ ((noinline, unused));\n+static int f2 (int) __attribute__ ((noinline));\n+static int f3 (int, int) __attribute__ ((noinline));\n+\n+static unsigned callback_errors = 0;\n+\n+static void\n+error_callback_full (void *vdata ATTRIBUTE_UNUSED,\n+\t\t     const char *msg ATTRIBUTE_UNUSED,\n+\t\t     int errnum ATTRIBUTE_UNUSED)\n+{\n+  if (at_fail_alloc_p ())\n+    {\n+      set_fail_at_alloc (0);\n+      return;\n+    }\n+\n+  callback_errors++;\n+}\n+\n+static int\n+callback_full (void *vdata ATTRIBUTE_UNUSED, uintptr_t pc ATTRIBUTE_UNUSED,\n+\t      const char *filename ATTRIBUTE_UNUSED,\n+\t      int lineno ATTRIBUTE_UNUSED,\n+\t      const char *function ATTRIBUTE_UNUSED)\n+{\n+\n+  return 0;\n+}\n+\n+static int\n+test1 (void)\n+{\n+  return f2 (__LINE__) + 1;\n+}\n+\n+static int\n+f2 (int f1line)\n+{\n+  return f3 (f1line, __LINE__) + 2;\n+}\n+\n+static int\n+f3 (int f1line ATTRIBUTE_UNUSED, int f2line ATTRIBUTE_UNUSED)\n+{\n+  int i;\n+\n+  i = backtrace_full (state, 0, callback_full, error_callback_full, NULL);\n+\n+  if (i != 0)\n+    {\n+      fprintf (stderr, \"test1: unexpected return value %d\\n\", i);\n+      ++failures;\n+    }\n+\n+  if (callback_errors)\n+      ++failures;\n+\n+  return failures;\n+}\n+\n+/* Run all the tests.  */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64_t fail_at = 0;\n+\n+  if (argc == 2)\n+    {\n+      fail_at = atoi (argv[1]);\n+      set_fail_at_alloc (fail_at);\n+    }\n+\n+  state = backtrace_create_state (argv[0], BACKTRACE_SUPPORTS_THREADS,\n+\t\t\t\t  error_callback_full, NULL);\n+  if (state == NULL)\n+    exit (failures ? EXIT_FAILURE : EXIT_SUCCESS);\n+\n+#if BACKTRACE_SUPPORTED\n+  test1 ();\n+#endif\n+\n+  if (argc == 1)\n+    fprintf (stderr, \"%lu\\n\", get_nr_allocs ());\n+\n+  exit (failures ? EXIT_FAILURE : EXIT_SUCCESS);\n+}"}, {"sha": "91bc7a3e73d5c2cd11d75c01b932f6553574c811", "filename": "libbacktrace/allocfail.sh", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Fallocfail.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Fallocfail.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fallocfail.sh?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -0,0 +1,105 @@\n+#!/bin/sh\n+\n+# allocfail.sh -- Test for libbacktrace library.\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+# Redistribution and use in source and binary forms, with or without\n+# modification, are permitted provided that the following conditions are\n+# met:\n+\n+#     (1) Redistributions of source code must retain the above copyright\n+#     notice, this list of conditions and the following disclaimer.\n+\n+#     (2) Redistributions in binary form must reproduce the above copyright\n+#     notice, this list of conditions and the following disclaimer in\n+#     the documentation and/or other materials provided with the\n+#     distribution.\n+\n+#     (3) The name of the author may not be used to\n+#     endorse or promote products derived from this software without\n+#     specific prior written permission.\n+\n+# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+# POSSIBILITY OF SUCH DAMAGE.\n+\n+set -e\n+set -o pipefail\n+\n+if [ ! -f ./allocfail ]; then\n+    # Hard failure.\n+    exit 99\n+fi\n+\n+allocs=$(./allocfail 2>&1)\n+if [ \"$allocs\" = \"\" ]; then\n+    # Hard failure.\n+    exit 99\n+fi\n+\n+# This generates the following output:\n+# ...\n+# $ allocfail.sh\n+# allocs: 80495\n+# Status changed to 0 at 1\n+# Status changed to 1 at 3\n+# Status changed to 0 at 11\n+# Status changed to 1 at 12\n+# Status changed to 0 at 845\n+# ...\n+#\n+# We have status 0 for an allocation failure at:\n+# - 1 because backtrace_create_state handles failure robustly\n+# - 2 because the fail switches backtrace_full to !can_alloc mode.\n+# - 11 because failure of elf_open_debugfile_by_buildid does not generate an\n+#   error callback beyond the one for the allocation failure itself.\n+\n+echo \"allocs: $allocs\"\n+\n+step=1\n+i=1\n+passes=0\n+prev_status=-1\n+while [ $i -le $allocs ]; do\n+    if ./allocfail $i >/dev/null 2>&1; status=$?; then\n+\ttrue\n+    fi\n+    if [ $status -gt 1 ]; then\n+\techo \"Unallowed fail found: $i\"\n+\t# Failure.\n+\texit 1\n+    fi\n+\n+    # The test-case would run too long if we would excercise all allocs.\n+    # So, run with step 1 initially, and increase the step once we have 10\n+    # subsequent passes, and drop back to step 1 once we encounter another\n+    # failure.  This takes ~2.6 seconds on an i7-6600U CPU @ 2.60GHz.\n+    if [ $status -eq 0 ]; then\n+\tpasses=$(($passes + 1))\n+\tif [ $passes -ge 10 ]; then\n+\t    step=$((step * 10))\n+\t    passes=0\n+\tfi\n+    elif [ $status -eq 1 ]; then\n+\tpasses=0\n+\tstep=1\n+    fi\n+\n+    if [ $status -ne $prev_status ]; then\n+\techo \"Status changed to $status at $i\"\n+    fi\n+    prev_status=$status\n+\n+    i=$(($i + $step))\n+done\n+\n+# Success.\n+exit 0"}, {"sha": "ba42ea65a045168a3dd0c0f8a593f1709b6c0a5b", "filename": "libbacktrace/instrumented_alloc.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Finstrumented_alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665cd9b131b129caa3f6b1e3f85e43b34ca71e8/libbacktrace%2Finstrumented_alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finstrumented_alloc.c?ref=d665cd9b131b129caa3f6b1e3f85e43b34ca71e8", "patch": "@@ -0,0 +1,114 @@\n+/* instrumented_alloc.c -- Memory allocation instrumented to fail when\n+   requested, for testing purposes.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+/* Include all the header files of alloc here, to make sure they're not\n+   processed when including alloc.c below, such that the redefinitions of malloc\n+   and realloc are only effective in alloc.c itself.  This does not work for\n+   config.h, because it's not wrapped in \"#ifndef CONFIG_H\\n#define CONFIG_H\"\n+   and \"#endif\" but that does not seem to be harmful.  */\n+\n+#include \"config.h\"\n+\n+#include <errno.h>\n+#include <stdlib.h>\n+#include <sys/types.h>\n+#include <inttypes.h>\n+\n+#include \"backtrace.h\"\n+#include \"internal.h\"\n+\n+extern void *instrumented_malloc (size_t size);\n+extern void *instrumented_realloc (void *ptr, size_t size);\n+\n+#define malloc instrumented_malloc\n+#define realloc instrumented_realloc\n+#include \"alloc.c\"\n+#undef malloc\n+#undef realloc\n+\n+static uint64_t nr_allocs = 0;\n+static uint64_t fail_at_alloc = 0;\n+\n+extern int at_fail_alloc_p (void);\n+extern uint64_t get_nr_allocs (void);\n+extern void set_fail_at_alloc (uint64_t);\n+\n+void *\n+instrumented_malloc (size_t size)\n+{\n+  void *res;\n+\n+  if (at_fail_alloc_p ())\n+    return NULL;\n+\n+  res = malloc (size);\n+  if (res != NULL)\n+    nr_allocs++;\n+\n+  return res;\n+}\n+\n+void *\n+instrumented_realloc (void *ptr, size_t size)\n+{\n+  void *res;\n+\n+  if (size != 0)\n+    {\n+      if (at_fail_alloc_p ())\n+\treturn NULL;\n+    }\n+\n+  res = realloc (ptr, size);\n+  if (res != NULL)\n+    nr_allocs++;\n+\n+  return res;\n+}\n+\n+int\n+at_fail_alloc_p (void)\n+{\n+  return fail_at_alloc == nr_allocs + 1;\n+}\n+\n+uint64_t\n+get_nr_allocs (void)\n+{\n+  return nr_allocs;\n+}\n+\n+void\n+set_fail_at_alloc (uint64_t nr)\n+{\n+  fail_at_alloc = nr;\n+}"}]}