{"sha": "3ceaf2f571c5b02610383abb80579861cff5d22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlYWYyZjU3MWM1YjAyNjEwMzgzYWJiODA1Nzk4NjFjZmY1ZDIyZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-21T13:19:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-21T13:19:18Z"}, "message": "re PR tree-optimization/49770 (wrong code with -fno-tree-forwprop)\n\n2011-07-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49770\n\t* tree-ssa-sccvn.c (valueize_refs_1): Return whether we\n\tvalueized any operand.  Renamed from ...\n\t(valueize_refs): ... this.  New wrapper around valueize_refs_1.\n\t(valueize_shared_reference_ops_from_ref): Return whether we\n\tvalueized any operand.\n\t(vn_reference_lookup): Only when we valueized any operand\n\tuse the valueized reference for alias analysis.  Do not preserve\n\tthe original reference tree in this case.\n\n\t* g++.dg/torture/pr49770.C: New testcase.\n\nFrom-SVN: r176567", "tree": {"sha": "521bd5035d3ea31fdd464007a7f1904d598fe907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/521bd5035d3ea31fdd464007a7f1904d598fe907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ceaf2f571c5b02610383abb80579861cff5d22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ceaf2f571c5b02610383abb80579861cff5d22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ceaf2f571c5b02610383abb80579861cff5d22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ceaf2f571c5b02610383abb80579861cff5d22e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a423549540656e001cd6d0f820ff60cdbe045f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a423549540656e001cd6d0f820ff60cdbe045f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a423549540656e001cd6d0f820ff60cdbe045f7d"}], "stats": {"total": 164, "additions": 150, "deletions": 14}, "files": [{"sha": "a6904e524ea771f3a56cdf2c1b159faea443adbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ceaf2f571c5b02610383abb80579861cff5d22e", "patch": "@@ -1,3 +1,15 @@\n+2011-07-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49770\n+\t* tree-ssa-sccvn.c (valueize_refs_1): Return whether we\n+\tvalueized any operand.  Renamed from ...\n+\t(valueize_refs): ... this.  New wrapper around valueize_refs_1.\n+\t(valueize_shared_reference_ops_from_ref): Return whether we\n+\tvalueized any operand.\n+\t(vn_reference_lookup): Only when we valueized any operand\n+\tuse the valueized reference for alias analysis.  Do not preserve\n+\tthe original reference tree in this case.\n+\n 2011-07-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_decompose_address): Reject all but"}, {"sha": "334730cc80abb8d2ec89a76166ce3005dbffe5d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ceaf2f571c5b02610383abb80579861cff5d22e", "patch": "@@ -1,3 +1,8 @@\n+2011-07-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49770\n+\t* g++.dg/torture/pr49770.C: New testcase.\n+\n 2011-07-21  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/tree-ssa/pr30978.c: adjusted."}, {"sha": "7eac9e0d9bbb11c81b8a8765dcbdf2d4a8644b24", "filename": "gcc/testsuite/g++.dg/torture/pr49770.C", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49770.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49770.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49770.C?ref=3ceaf2f571c5b02610383abb80579861cff5d22e", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c++0x -fno-tree-forwprop\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+template < typename > struct remove_reference;\n+template < typename _Tp > struct remove_reference <_Tp & >\n+{\n+  typedef _Tp type;\n+};\n+template < typename _Tp > typename remove_reference < _Tp >::type &&\n+move (_Tp && __t)\n+{\n+  return static_cast < typename remove_reference < _Tp >::type && >(__t);\n+}\n+\n+template < typename _Tp > void\n+stdswap (_Tp & __a, _Tp & __b)\n+{\n+  _Tp __tmp (__a);\n+  __a = (__b);\n+  __b = (__tmp);\n+}\n+\n+struct _Deque_iterator\n+{\n+  int *_M_cur;\n+  int *_M_first;\n+  int *_M_last;\n+  int **_M_node;\n+};\n+\n+static inline int operatorMIN (_Deque_iterator & __x, _Deque_iterator & __y)\n+{\n+  return sizeof (int) * (__x._M_node - __y._M_node - 1)\n+    + (__x._M_cur - __x._M_first) + (__y._M_last - __y._M_cur);\n+}\n+\n+struct deque\n+{\n+  deque & operator = (deque && __x)\n+  {\n+    stdswap (_M_finish, __x._M_finish);\n+    return *this;\n+  }\n+  size_t size ()\n+  {\n+    return operatorMIN (_M_finish, _M_start);\n+  }\n+\n+deque ():\n+  _M_map (), _M_map_size (), _M_start (), _M_finish ()\n+  {\n+    _M_start._M_last = _M_start._M_first + sizeof (int);\n+  }\n+\n+  int **_M_map;\n+  size_t _M_map_size;\n+  _Deque_iterator _M_start;\n+  _Deque_iterator _M_finish;\n+};\n+\n+struct queue\n+{\n+  deque c;\n+  size_t size ()\n+  {\n+    return c.size ();\n+  }\n+};\n+\n+void\n+test01 ()\n+{\n+  queue a, b;\n+  ++a.c._M_finish._M_cur;\n+  b = move (a);\n+  if (!b.size ())\n+    __builtin_abort ();\n+}\n+\n+main ()\n+{\n+  test01 ();\n+}\n+"}, {"sha": "5f72f041290179524c473088280623ed7585554c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceaf2f571c5b02610383abb80579861cff5d22e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3ceaf2f571c5b02610383abb80579861cff5d22e", "patch": "@@ -1146,29 +1146,51 @@ fully_constant_vn_reference_p (vn_reference_t ref)\n \n /* Transform any SSA_NAME's in a vector of vn_reference_op_s\n    structures into their value numbers.  This is done in-place, and\n-   the vector passed in is returned.  */\n+   the vector passed in is returned.  *VALUEIZED_ANYTHING will specify\n+   whether any operands were valueized.  */\n \n static VEC (vn_reference_op_s, heap) *\n-valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n+valueize_refs_1 (VEC (vn_reference_op_s, heap) *orig, bool *valueized_anything)\n {\n   vn_reference_op_t vro;\n   unsigned int i;\n \n+  *valueized_anything = false;\n+\n   FOR_EACH_VEC_ELT (vn_reference_op_s, orig, i, vro)\n     {\n       if (vro->opcode == SSA_NAME\n \t  || (vro->op0 && TREE_CODE (vro->op0) == SSA_NAME))\n \t{\n-\t  vro->op0 = SSA_VAL (vro->op0);\n+\t  tree tem = SSA_VAL (vro->op0);\n+\t  if (tem != vro->op0)\n+\t    {\n+\t      *valueized_anything = true;\n+\t      vro->op0 = tem;\n+\t    }\n \t  /* If it transforms from an SSA_NAME to a constant, update\n \t     the opcode.  */\n \t  if (TREE_CODE (vro->op0) != SSA_NAME && vro->opcode == SSA_NAME)\n \t    vro->opcode = TREE_CODE (vro->op0);\n \t}\n       if (vro->op1 && TREE_CODE (vro->op1) == SSA_NAME)\n-\tvro->op1 = SSA_VAL (vro->op1);\n+\t{\n+\t  tree tem = SSA_VAL (vro->op1);\n+\t  if (tem != vro->op1)\n+\t    {\n+\t      *valueized_anything = true;\n+\t      vro->op1 = tem;\n+\t    }\n+\t}\n       if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n-\tvro->op2 = SSA_VAL (vro->op2);\n+\t{\n+\t  tree tem = SSA_VAL (vro->op2);\n+\t  if (tem != vro->op2)\n+\t    {\n+\t      *valueized_anything = true;\n+\t      vro->op2 = tem;\n+\t    }\n+\t}\n       /* If it transforms from an SSA_NAME to an address, fold with\n \t a preceding indirect reference.  */\n       if (i > 0\n@@ -1203,20 +1225,29 @@ valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n   return orig;\n }\n \n+static VEC (vn_reference_op_s, heap) *\n+valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n+{\n+  bool tem;\n+  return valueize_refs_1 (orig, &tem);\n+}\n+\n static VEC(vn_reference_op_s, heap) *shared_lookup_references;\n \n /* Create a vector of vn_reference_op_s structures from REF, a\n    REFERENCE_CLASS_P tree.  The vector is shared among all callers of\n-   this function.  */\n+   this function.  *VALUEIZED_ANYTHING will specify whether any\n+   operands were valueized.  */\n \n static VEC(vn_reference_op_s, heap) *\n-valueize_shared_reference_ops_from_ref (tree ref)\n+valueize_shared_reference_ops_from_ref (tree ref, bool *valueized_anything)\n {\n   if (!ref)\n     return NULL;\n   VEC_truncate (vn_reference_op_s, shared_lookup_references, 0);\n   copy_reference_ops_from_ref (ref, &shared_lookup_references);\n-  shared_lookup_references = valueize_refs (shared_lookup_references);\n+  shared_lookup_references = valueize_refs_1 (shared_lookup_references,\n+\t\t\t\t\t      valueized_anything);\n   return shared_lookup_references;\n }\n \n@@ -1694,12 +1725,14 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n   VEC (vn_reference_op_s, heap) *operands;\n   struct vn_reference_s vr1;\n   tree cst;\n+  bool valuezied_anything;\n \n   if (vnresult)\n     *vnresult = NULL;\n \n   vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n-  vr1.operands = operands = valueize_shared_reference_ops_from_ref (op);\n+  vr1.operands = operands\n+    = valueize_shared_reference_ops_from_ref (op, &valuezied_anything);\n   vr1.type = TREE_TYPE (op);\n   vr1.set = get_alias_set (op);\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n@@ -1711,12 +1744,12 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n     {\n       vn_reference_t wvnresult;\n       ao_ref r;\n-      /* Make sure to use a valueized reference ...  */\n-      if (!ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type, vr1.operands))\n+      /* Make sure to use a valueized reference if we valueized anything.\n+         Otherwise preserve the full reference for advanced TBAA.  */\n+      if (!valuezied_anything\n+\t  || !ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type,\n+\t\t\t\t\t     vr1.operands))\n \tao_ref_init (&r, op);\n-      else\n-\t/* ... but also preserve a full reference tree for advanced TBAA.  */\n-\tr.ref = op;\n       vn_walk_kind = kind;\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,"}]}