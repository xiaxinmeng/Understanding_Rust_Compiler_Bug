{"sha": "b39265d4fe13e3e8ce5021642e5092e74effb643", "node_id": "C_kwDOANBUbNoAKGIzOTI2NWQ0ZmUxM2UzZThjZTUwMjE2NDJlNTA5MmU3NGVmZmI2NDM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-12T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-12T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "ced524776ff72d1620423d781a5ae4c71208f4ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced524776ff72d1620423d781a5ae4c71208f4ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b39265d4fe13e3e8ce5021642e5092e74effb643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39265d4fe13e3e8ce5021642e5092e74effb643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39265d4fe13e3e8ce5021642e5092e74effb643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39265d4fe13e3e8ce5021642e5092e74effb643/comments", "author": null, "committer": null, "parents": [{"sha": "4a407d358e2896a9ab42364c0b70dfb6f9761d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a407d358e2896a9ab42364c0b70dfb6f9761d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a407d358e2896a9ab42364c0b70dfb6f9761d61"}], "stats": {"total": 737, "additions": 736, "deletions": 1}, "files": [{"sha": "7356889757bc63634aaae911d0fd514990f37ce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 558, "deletions": 0, "changes": 558, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,561 @@\n+2021-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::path_range_query): New\n+\tctor without a ranger.\n+\t(path_range_query::~path_range_query): Free ranger if necessary.\n+\t(path_range_query::range_on_path_entry): Adjust m_ranger for pointer.\n+\t(path_range_query::ssa_range_in_phi): Same.\n+\t(path_range_query::compute_ranges_in_block): Same.\n+\t(path_range_query::compute_imports): Same.\n+\t(path_range_query::compute_ranges): Same.\n+\t(path_range_query::range_of_stmt): Same.\n+\t(path_range_query::compute_outgoing_relations): Same.\n+\t* gimple-range-path.h (class path_range_query): New ctor.\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Remove gimple_ranger\n+\tas path_range_query allocates one.\n+\t* tree-ssa-threadbackward.c (class back_threader): Remove m_ranger.\n+\t(back_threader::~back_threader): Same.\n+\n+2021-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader_profitability::profitable_path_p): Remove loop\n+\tcrossing restriction.\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (analyze_function): Do pure/const discovery, return\n+\ttrue on success.\n+\t(pass_modref::execute): If pure/const is discovered fixup cfg.\n+\t(ignore_edge): Do not ignore pure/const edges.\n+\t(modref_propagate_in_scc): Do pure/const discovery, return true if\n+\tcdtor was promoted pure/const.\n+\t(pass_ipa_modref::execute): If needed remove unreachable functions.\n+\t* ipa-pure-const.c (warn_function_noreturn): Fix whitespace.\n+\t(warn_function_cold): Likewise.\n+\t(skip_function_for_local_pure_const): Move earlier.\n+\t(ipa_make_function_const): Break out from ...\n+\t(ipa_make_function_pure): Break out from ...\n+\t(propagate_pure_const): ... here.\n+\t(pass_local_pure_const::execute): Use it.\n+\t* ipa-utils.h (ipa_make_function_const): Declare.\n+\t(ipa_make_function_pure): Declare.\n+\t* passes.def: Move early modref after pure-const.\n+\n+2021-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/103129\n+\t* diagnostic-show-locus.c (def_policy): Use def_tabstop.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_COMBINE): Delete.\n+\t(TYPES_COMBINEP): Delete.\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n+\tqualified builtins for vcombine_* intrinsics.\n+\t* config/aarch64/arm_neon.h (vcombine_s8): Remove unnecessary\n+\tcast.\n+\t(vcombine_s16): Likewise.\n+\t(vcombine_s32): Likewise.\n+\t(vcombine_f32): Likewise.\n+\t(vcombine_u8): Use type-qualified builtin and remove casts.\n+\t(vcombine_u16): Likewise.\n+\t(vcombine_u32): Likewise.\n+\t(vcombine_u64): Likewise.\n+\t(vcombine_p8): Likewise.\n+\t(vcombine_p16): Likewise.\n+\t(vcombine_p64): Likewise.\n+\t(vcombine_bf16): Remove unnecessary cast.\n+\t* config/aarch64/iterators.md (VD_I): New mode iterator.\n+\t(VDC_P): New mode iterator.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_LOAD1_U): Define.\n+\t(TYPES_LOAD1_P): Define.\n+\t(TYPES_STORE1_U): Define.\n+\t(TYPES_STORE1P): Rename to...\n+\t(TYPES_STORE1_P): This.\n+\t(get_mem_type_for_load_store): Add unsigned and poly types.\n+\t(aarch64_general_gimple_fold_builtin): Add unsigned and poly\n+\ttype-qualified builtin declarations.\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n+\tqualified builtins for LD1/ST1.\n+\t* config/aarch64/arm_neon.h (vld1_p8): Use type-qualified\n+\tbuiltin and remove cast.\n+\t(vld1_p16): Likewise.\n+\t(vld1_u8): Likewise.\n+\t(vld1_u16): Likewise.\n+\t(vld1_u32): Likewise.\n+\t(vld1q_p8): Likewise.\n+\t(vld1q_p16): Likewise.\n+\t(vld1q_p64): Likewise.\n+\t(vld1q_u8): Likewise.\n+\t(vld1q_u16): Likewise.\n+\t(vld1q_u32): Likewise.\n+\t(vld1q_u64): Likewise.\n+\t(vst1_p8): Likewise.\n+\t(vst1_p16): Likewise.\n+\t(vst1_u8): Likewise.\n+\t(vst1_u16): Likewise.\n+\t(vst1_u32): Likewise.\n+\t(vst1q_p8): Likewise.\n+\t(vst1q_p16): Likewise.\n+\t(vst1q_p64): Likewise.\n+\t(vst1q_u8): Likewise.\n+\t(vst1q_u16): Likewise.\n+\t(vst1q_u32): Likewise.\n+\t(vst1q_u64): Likewise.\n+\t* config/aarch64/iterators.md (VALLP_NO_DI): New iterator.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n+\tbuiltins for vector reduction.\n+\t* config/aarch64/arm_neon.h (vaddv_u8): Use type-qualified\n+\tbuiltin and remove casts.\n+\t(vaddv_u16): Likewise.\n+\t(vaddv_u32): Likewise.\n+\t(vaddvq_u8): Likewise.\n+\t(vaddvq_u16): Likewise.\n+\t(vaddvq_u32): Likewise.\n+\t(vaddvq_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def:\n+\t* config/aarch64/arm_neon.h (vpaddq_u8): Use type-qualified\n+\tbuiltin and remove casts.\n+\t(vpaddq_u16): Likewise.\n+\t(vpaddq_u32): Likewise.\n+\t(vpaddq_u64): Likewise.\n+\t(vpadd_u8): Likewise.\n+\t(vpadd_u16): Likewise.\n+\t(vpadd_u32): Likewise.\n+\t(vpaddd_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n+\tbuiltins for [r]subhn[2].\n+\t* config/aarch64/arm_neon.h (vsubhn_s16): Remove unnecessary\n+\tcast.\n+\t(vsubhn_s32): Likewise.\n+\t(vsubhn_s64): Likewise.\n+\t(vsubhn_u16): Use type-qualified builtin and remove casts.\n+\t(vsubhn_u32): Likewise.\n+\t(vsubhn_u64): Likewise.\n+\t(vrsubhn_s16): Remove unnecessary cast.\n+\t(vrsubhn_s32): Likewise.\n+\t(vrsubhn_s64): Likewise.\n+\t(vrsubhn_u16): Use type-qualified builtin and remove casts.\n+\t(vrsubhn_u32): Likewise.\n+\t(vrsubhn_u64): Likewise.\n+\t(vrsubhn_high_s16): Remove unnecessary cast.\n+\t(vrsubhn_high_s32): Likewise.\n+\t(vrsubhn_high_s64): Likewise.\n+\t(vrsubhn_high_u16): Use type-qualified builtin and remove\n+\tcasts.\n+\t(vrsubhn_high_u32): Likewise.\n+\t(vrsubhn_high_u64): Likewise.\n+\t(vsubhn_high_s16): Remove unnecessary cast.\n+\t(vsubhn_high_s32): Likewise.\n+\t(vsubhn_high_s64): Likewise.\n+\t(vsubhn_high_u16): Use type-qualified builtin and remove\n+\tcasts.\n+\t(vsubhn_high_u32): Likewise.\n+\t(vsubhn_high_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n+\tbuiltins for [r]addhn[2].\n+\t* config/aarch64/arm_neon.h (vaddhn_s16): Remove unnecessary\n+\tcast.\n+\t(vaddhn_s32): Likewise.\n+\t(vaddhn_s64): Likewise.\n+\t(vaddhn_u16): Use type-qualified builtin and remove casts.\n+\t(vaddhn_u32): Likewise.\n+\t(vaddhn_u64): Likewise.\n+\t(vraddhn_s16): Remove unnecessary cast.\n+\t(vraddhn_s32): Likewise.\n+\t(vraddhn_s64): Likewise.\n+\t(vraddhn_u16): Use type-qualified builtin and remove casts.\n+\t(vraddhn_u32): Likewise.\n+\t(vraddhn_u64): Likewise.\n+\t(vaddhn_high_s16): Remove unnecessary cast.\n+\t(vaddhn_high_s32): Likewise.\n+\t(vaddhn_high_s64): Likewise.\n+\t(vaddhn_high_u16): Use type-qualified builtin and remove\n+\tcasts.\n+\t(vaddhn_high_u32): Likewise.\n+\t(vaddhn_high_u64): Likewise.\n+\t(vraddhn_high_s16): Remove unnecessary cast.\n+\t(vraddhn_high_s32): Likewise.\n+\t(vraddhn_high_s64): Likewise.\n+\t(vraddhn_high_u16): Use type-qualified builtin and remove\n+\tcasts.\n+\t(vraddhn_high_u32): Likewise.\n+\t(vraddhn_high_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n+\tqualifiers in generator macros for uhsub builtins.\n+\t* config/aarch64/arm_neon.h (vhsub_s8): Remove unnecessary\n+\tcast.\n+\t(vhsub_s16): Likewise.\n+\t(vhsub_s32): Likewise.\n+\t(vhsub_u8): Use type-qualified builtin and remove casts.\n+\t(vhsub_u16): Likewise.\n+\t(vhsub_u32): Likewise.\n+\t(vhsubq_s8): Remove unnecessary cast.\n+\t(vhsubq_s16): Likewise.\n+\t(vhsubq_s32): Likewise.\n+\t(vhsubq_u8): Use type-qualified builtin and remove casts.\n+\t(vhsubq_u16): Likewise.\n+\t(vhsubq_u32): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n+\tqualifiers in generator macros for u[r]hadd builtins.\n+\t* config/aarch64/arm_neon.h (vhadd_s8): Remove unnecessary\n+\tcast.\n+\t(vhadd_s16): Likewise.\n+\t(vhadd_s32): Likewise.\n+\t(vhadd_u8): Use type-qualified builtin and remove casts.\n+\t(vhadd_u16): Likewise.\n+\t(vhadd_u32): Likewise.\n+\t(vhaddq_s8): Remove unnecessary cast.\n+\t(vhaddq_s16): Likewise.\n+\t(vhaddq_s32): Likewise.\n+\t(vhaddq_u8): Use type-qualified builtin and remove casts.\n+\t(vhaddq_u16): Likewise.\n+\t(vhaddq_u32): Likewise.\n+\t(vrhadd_s8): Remove unnecessary cast.\n+\t(vrhadd_s16): Likewise.\n+\t(vrhadd_s32): Likewise.\n+\t(vrhadd_u8): Use type-qualified builtin and remove casts.\n+\t(vrhadd_u16): Likewise.\n+\t(vrhadd_u32): Likewise.\n+\t(vrhaddq_s8): Remove unnecessary cast.\n+\t(vrhaddq_s16): Likewise.\n+\t(vrhaddq_s32): Likewise.\n+\t(vrhaddq_u8): Use type-wualified builtin and remove casts.\n+\t(vrhaddq_u16): Likewise.\n+\t(vrhaddq_u32): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n+\tqualifiers in generator macros for usub[lw][2] builtins.\n+\t* config/aarch64/arm_neon.h (vsubl_s8): Remove unnecessary\n+\tcast.\n+\t(vsubl_s16): Likewise.\n+\t(vsubl_s32): Likewise.\n+\t(vsubl_u8): Use type-qualified builtin and remove casts.\n+\t(vsubl_u16): Likewise.\n+\t(vsubl_u32): Likewise.\n+\t(vsubl_high_s8): Remove unnecessary cast.\n+\t(vsubl_high_s16): Likewise.\n+\t(vsubl_high_s32): Likewise.\n+\t(vsubl_high_u8): Use type-qualified builtin and remove casts.\n+\t(vsubl_high_u16): Likewise.\n+\t(vsubl_high_u32): Likewise.\n+\t(vsubw_s8): Remove unnecessary casts.\n+\t(vsubw_s16): Likewise.\n+\t(vsubw_s32): Likewise.\n+\t(vsubw_u8): Use type-qualified builtin and remove casts.\n+\t(vsubw_u16): Likewise.\n+\t(vsubw_u32): Likewise.\n+\t(vsubw_high_s8): Remove unnecessary cast.\n+\t(vsubw_high_s16): Likewise.\n+\t(vsubw_high_s32): Likewise.\n+\t(vsubw_high_u8): Use type-qualified builtin and remove casts.\n+\t(vsubw_high_u16): Likewise.\n+\t(vsubw_high_u32): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n+\tqualifiers in generator macros for uadd[lw][2] builtins.\n+\t* config/aarch64/arm_neon.h (vaddl_s8): Remove unnecessary\n+\tcast.\n+\t(vaddl_s16): Likewise.\n+\t(vaddl_s32): Likewise.\n+\t(vaddl_u8): Use type-qualified builtin and remove casts.\n+\t(vaddl_u16): Likewise.\n+\t(vaddl_u32): Likewise.\n+\t(vaddl_high_s8): Remove unnecessary cast.\n+\t(vaddl_high_s16): Likewise.\n+\t(vaddl_high_s32): Likewise.\n+\t(vaddl_high_u8): Use type-qualified builtin and remove casts.\n+\t(vaddl_high_u16): Likewise.\n+\t(vaddl_high_u32): Likewise.\n+\t(vaddw_s8): Remove unnecessary cast.\n+\t(vaddw_s16): Likewise.\n+\t(vaddw_s32): Likewise.\n+\t(vaddw_u8): Use type-qualified builtin and remove casts.\n+\t(vaddw_u16): Likewise.\n+\t(vaddw_u32): Likewise.\n+\t(vaddw_high_s8): Remove unnecessary cast.\n+\t(vaddw_high_s16): Likewise.\n+\t(vaddw_high_s32): Likewise.\n+\t(vaddw_high_u8): Use type-qualified builtin and remove casts.\n+\t(vaddw_high_u16): Likewise.\n+\t(vaddw_high_u32): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n+\tqualified builtins for [R]SHRN[2].\n+\t* config/aarch64/arm_neon.h (vshrn_n_u16): Use type-qualified\n+\tbuiltin and remove casts.\n+\t(vshrn_n_u32): Likewise.\n+\t(vshrn_n_u64): Likewise.\n+\t(vrshrn_high_n_u16): Likewise.\n+\t(vrshrn_high_n_u32): Likewise.\n+\t(vrshrn_high_n_u64): Likewise.\n+\t(vrshrn_n_u16): Likewise.\n+\t(vrshrn_n_u32): Likewise.\n+\t(vrshrn_n_u64): Likewise.\n+\t(vshrn_high_n_u16): Likewise.\n+\t(vshrn_high_n_u32): Likewise.\n+\t(vshrn_high_n_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n+\ttype-qualified builtins for XTN[2].\n+\t* config/aarch64/arm_neon.h (vmovn_high_u16): Use type-\n+\tqualified builtin and remove casts.\n+\t(vmovn_high_u32): Likewise.\n+\t(vmovn_high_u64): Likewise.\n+\t(vmovn_u16): Likewise.\n+\t(vmovn_u32): Likewise.\n+\t(vmovn_u64): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use poly type\n+\tqualifier in builtin generator macros.\n+\t* config/aarch64/arm_neon.h (vmul_p8): Use type-qualified\n+\tbuiltin and remove casts.\n+\t(vmulq_p8): Likewise.\n+\t(vmull_high_p8): Likewise.\n+\t(vmull_p8): Likewise.\n+\n+2021-11-11  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n+\tqualified builtin generators for unsigned MLA/MLS intrinsics.\n+\t* config/aarch64/arm_neon.h (vmla_n_u16): Use type-qualified\n+\tbuiltin.\n+\t(vmla_n_u32): Likewise.\n+\t(vmla_u8): Likewise.\n+\t(vmla_u16): Likewise.\n+\t(vmla_u32): Likewise.\n+\t(vmlaq_n_u16): Likewise.\n+\t(vmlaq_n_u32): Likewise.\n+\t(vmlaq_u8): Likewise.\n+\t(vmlaq_u16): Likewise.\n+\t(vmlaq_u32): Likewise.\n+\t(vmls_n_u16): Likewise.\n+\t(vmls_n_u32): Likewise.\n+\t(vmls_u8): Likewise.\n+\t(vmls_u16): Likewise.\n+\t(vmls_u32): Likewise.\n+\t(vmlsq_n_u16): Likewise.\n+\t(vmlsq_n_u32): Likewise.\n+\t(vmlsq_u8): Likewise.\n+\t(vmlsq_u16): Likewise.\n+\t(vmlsq_u32): Likewise.\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (modref_summary::useful_p): Check also for side-effects\n+\twith looping const/pure.\n+\t(modref_summary_lto::useful_p): Likewise.\n+\t(merge_call_side_effects): Merge side effects before early exit\n+\tfor pure/const.\n+\t(process_fnspec): Also handle pure functions.\n+\t(analyze_call): Do not early exit on looping pure const.\n+\t(propagate_unknown_call): Also handle nontrivial SCC as side-effect.\n+\t(modref_propagate_in_scc): Update.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103190\n+\t* tree-ssa-reassoc.c (insert_stmt_after): Only assert on asm goto.\n+\n+2021-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::add_copies_to_imports):\n+\tRename to...\n+\t(path_range_query::compute_imports): ...this.  Adapt it so it can\n+\tbe passed the imports bitmap instead of working on m_imports.\n+\t(path_range_query::compute_ranges): Call compute_imports in all\n+\tcases unless an imports bitmap is passed.\n+\t* gimple-range-path.h (path_range_query::compute_imports): New.\n+\t(path_range_query::add_copies_to_imports): Remove.\n+\t* tree-ssa-threadbackward.c (back_threader::resolve_def): Remove.\n+\t(back_threader::find_paths_to_names): Inline resolve_def.\n+\t(back_threader::find_paths): Call compute_imports.\n+\t(back_threader::resolve_phi): Adjust comment.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103188\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p):\n+\tRemove query parameter, split out check for size\n+\toptimization.\n+\t(ch_base::m_ranger, cb_base::m_query): Remove.\n+\t(ch_base::copy_headers): Split processing loop into\n+\tanalysis around which we allocate and use ranger and\n+\ttransform where we do not.\n+\t(pass_ch::execute): Do not allocate/free ranger here.\n+\t(pass_ch_vect::execute): Likewise.\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-pure-const.c (propagate_pure_const): Self recursion is\n+\ta side effects.\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (set_noreturn_flag_1): New function.\n+\t(cgraph_node::set_noreturn_flag): New member function\n+\t* cgraph.h (cgraph_node::set_noreturn_flags): Declare.\n+\t* ipa-pure-const.c (pass_local_pure_const::execute): Use it.\n+\n+2021-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ch.c (entry_loop_condition_is_static): Resolve\n+\tstatically to the edge remaining in the loop.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103181\n+\t* tree-eh.c (operation_could_trap_helper_p): Properly\n+\tcheck vector constants for a zero element for integer\n+\tdivision.  Separate floating point and integer division code.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101378\n+\t* dwarf2out.c (field_byte_offset): Do the PCC_BITFIELD_TYPE_MATTERS\n+\thandling only for DECL_BIT_FIELD_TYPE decls.\n+\n+2021-11-11  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/102376\n+\t* config/aarch64/aarch64.c (aarch64_process_target_attr): Check if\n+\ttoken is arch extension without leading '+' and emit appropriate\n+\tdiagnostic for the same.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_NUM_TEAMS_EXPR): Rename to ...\n+\t(OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR): ... this.\n+\t(OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR): Define.\n+\t* tree.c (omp_clause_num_ops): Increase num ops for\n+\tOMP_CLAUSE_NUM_TEAMS to 2.\n+\t* tree-pretty-print.c (dump_omp_clause): Print optional lower bound\n+\tfor OMP_CLAUSE_NUM_TEAMS.\n+\t* gimplify.c (gimplify_scan_omp_clauses): Gimplify\n+\tOMP_CLAUSE_NUM_TEAMS_LOWER_EXPR if non-NULL.\n+\t(optimize_target_teams): Use OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead\n+\tof OMP_CLAUSE_NUM_TEAMS_EXPR.  Handle OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n+\t* omp-low.c (lower_omp_teams): Use OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR\n+\tinstead of OMP_CLAUSE_NUM_TEAMS_EXPR.\n+\t* omp-expand.c (expand_teams_call, get_target_arguments): Likewise.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfganal.c (find_pdom): Remove.\n+\t(control_dependences::find_control_dependence): Remove\n+\tspecial-casing of entry block, call get_immediate_dominator\n+\tdirectly.\n+\t* gimple-predicate-analysis.cc (find_pdom): Remove.\n+\t(find_dom): Likewise.\n+\t(find_control_equiv_block): Call get_immediate_dominator\n+\tdirectly.\n+\t(compute_control_dep_chain): Likewise.\n+\t(predicate::init_from_phi_def): Likewise.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfganal.h (control_dependences::control_dependence_map):\n+\tEmbed bitmap_head.\n+\t(control_dependences::m_bitmaps): New.\n+\t* cfganal.c (control_dependences::set_control_dependence_map_bit):\n+\tAdjust.\n+\t(control_dependences::clear_control_dependence_bitmap):\n+\tLikewise.\n+\t(control_dependences::find_control_dependence): Do not\n+\tfind_edge for the abnormal edge test.\n+\t(control_dependences::control_dependences): Instead do not\n+\tadd abnormal edges to the edge list.  Adjust.\n+\t(control_dependences::~control_dependences): Likewise.\n+\t(control_dependences::get_edges_dependent_on): Likewise.\n+\t* function-tests.c: Include bitmap.h.\n+\n+2021-11-11  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* doc/invoke.texi: Change references to \"future cpu\" to \"power10\",\n+\t\"-mcpu=future\" to \"-mcpu=power10\".  Adjust words for float128.\n+\n+2021-11-11  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* config/i386/i386-options.c (m_CORE_AVX2): Remove Alderlake\n+\tfrom m_CORE_AVX2.\n+\t(processor_cost_table): Use alderlake_cost for Alderlake.\n+\t* config/i386/i386.c (ix86_sched_init_global): Handle Alderlake.\n+\t* config/i386/x86-tune-costs.h (struct processor_costs): Add alderlake\n+\tcost.\n+\t* config/i386/x86-tune-sched.c (ix86_issue_rate): Change Alderlake\n+\tissue rate to 4.\n+\t(ix86_adjust_cost): Handle Alderlake.\n+\t* config/i386/x86-tune.def (X86_TUNE_SCHEDULE): Enable for Alderlake.\n+\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Likewise.\n+\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Likewise.\n+\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Likewise.\n+\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n+\t(X86_TUNE_MEMORY_MISMATCH_STALL): Likewise.\n+\t(X86_TUNE_USE_LEAVE): Likewise.\n+\t(X86_TUNE_PUSH_MEMORY): Likewise.\n+\t(X86_TUNE_USE_INCDEC): Likewise.\n+\t(X86_TUNE_INTEGER_DFMODE_MOVES): Likewise.\n+\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Likewise.\n+\t(X86_TUNE_USE_SAHF): Likewise.\n+\t(X86_TUNE_USE_BT): Likewise.\n+\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Likewise.\n+\t(X86_TUNE_ONE_IF_CONV_INSN): Likewise.\n+\t(X86_TUNE_AVOID_MFENCE): Likewise.\n+\t(X86_TUNE_USE_SIMODE_FIOP): Likewise.\n+\t(X86_TUNE_EXT_80387_CONSTANTS): Likewise.\n+\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Likewise.\n+\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Likewise.\n+\t(X86_TUNE_SSE_TYPELESS_STORES): Likewise.\n+\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Likewise.\n+\t(X86_TUNE_AVOID_4BYTE_PREFIXES): Likewise.\n+\t(X86_TUNE_USE_GATHER): Disable for Alderlake.\n+\t(X86_TUNE_AVX256_MOVE_BY_PIECES): Likewise.\n+\t(X86_TUNE_AVX256_STORE_BY_PIECES): Likewise.\n+\n+2021-11-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103151\n+\t* config/i386/sse.md (V_128_256): Extend to V8HF/V16HF.\n+\t(avxsizesuffix): Ditto.\n+\n+2021-11-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_subset_list::to_string): Fix\n+\twrong marco checking.\n+\n 2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/102906"}, {"sha": "966610a0bddeb726b99e76587be8f3973e49578a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1 +1 @@\n-20211111\n+20211112"}, {"sha": "0a1bf12e6324b854b7c8865763d333fd237479ee", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,7 @@\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* supergraph.cc: Include bitmap.h.\n+\n 2021-11-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* program-state.cc (sm_state_map::dump): Use default_tree_printer"}, {"sha": "c2919470f653710a493a30202975554e3fc21442", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,16 @@\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_num_teams): Parse optional\n+\tlower-bound and store it into OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n+\tUse OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of\n+\tOMP_CLAUSE_NUM_TEAMS_EXPR.\n+\t(c_parser_omp_target): For OMP_CLAUSE_NUM_TEAMS evaluate before\n+\tcombined target teams even lower-bound expression.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c: Shuffle bitmap.h include.\n+\n 2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/103031"}, {"sha": "5d98e4062ba5489804b3564e62fcbeaeb1b62783", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,22 @@\n+2021-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* parser.c (cp_parser_template_argument_list): Use auto_vec\n+\tinstead of manual memory management.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_num_teams): Parse optional\n+\tlower-bound and store it into OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n+\tUse OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of\n+\tOMP_CLAUSE_NUM_TEAMS_EXPR.\n+\t(cp_parser_omp_target): For OMP_CLAUSE_NUM_TEAMS evaluate before\n+\tcombined target teams even lower-bound expression.\n+\t* semantics.c (finish_omp_clauses): Handle\n+\tOMP_CLAUSE_NUM_TEAMS_LOWER_EXPR of OMP_CLAUSE_NUM_TEAMS clause.\n+\t* pt.c (tsubst_omp_clauses): Likewise.\n+\t(tsubst_expr): For OMP_CLAUSE_NUM_TEAMS evaluate before\n+\tcombined target teams even lower-bound expression.\n+\n 2021-11-09  Marek Polacek  <polacek@redhat.com>\n \n \t* class.c (default_init_uninitialized_part): Use"}, {"sha": "09071cb8a93a0441ae294ce649b6e1c2533ff291", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,20 @@\n+2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (struct gfc_omp_clauses): Rename num_teams to\n+\tnum_teams_upper, add num_teams_upper.\n+\t* dump-parse-tree.c (show_omp_clauses): Update to handle\n+\tlower-bound num_teams clause.\n+\t* frontend-passes.c (gfc_code_walker): Likewise\n+\t* openmp.c (gfc_free_omp_clauses, gfc_match_omp_clauses,\n+\tresolve_omp_clauses): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses,\n+\tgfc_trans_omp_target): Likewise.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Use\n+\tOMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of OMP_CLAUSE_NUM_TEAMS_EXPR.\n+\n 2021-11-10  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103137"}, {"sha": "0911163582adb1f2c086c89ee8d0e9bd72c4000b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,70 @@\n+2021-11-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/test_mffsl.c: Require Power9.\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gfortran.dg/inline_matmul_17.f90: Fix template\n+\n+2021-11-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-c++-common/tm/inline-asm.c: Disable pure-const.\n+\t* g++.dg/ipa/modref-1.C: Update template.\n+\t* gcc.dg/tree-ssa/modref-11.c: Disable pure-const.\n+\t* gcc.dg/tree-ssa/modref-14.c: New test.\n+\t* gcc.dg/tree-ssa/modref-8.c: Do not optimize sibling calls.\n+\t* gfortran.dg/do_subscript_3.f90: Add -O0.\n+\n+2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/num-teams-1.f90: New file.\n+\t* gfortran.dg/gomp/num-teams-2.f90: New file.\n+\n+2021-11-11  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* g++.dg/warn/Wmismatched-new-delete-5.C: Add\n+\t-fdelete-null-pointer-checks.\n+\t* gcc.dg/attr-returns-nonnull.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-datasec-1.c: Add -G0 option for nios2.\n+\t* gcc.dg/ifcvt-4.c: Skip on nios2.\n+\t* gcc.dg/struct-by-value-1.c: Add -G0 option for nios2.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103188\n+\t* gcc.dg/torture/pr103188.c: New testcase.\n+\n+2021-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103181\n+\t* gcc.dg/torture/pr103181.c: New testcase.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101378\n+\t* g++.dg/debug/dwarf2/pr101378.C: New test.\n+\n+2021-11-11  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/102376\n+\t* gcc.target/aarch64/pr102376.c: New test.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/clauses-1.c (bar): Supply lower-bound expression\n+\tto half of the num_teams clauses.\n+\t* c-c++-common/gomp/num-teams-1.c: New test.\n+\t* c-c++-common/gomp/num-teams-2.c: New test.\n+\t* g++.dg/gomp/attrs-1.C (bar): Supply lower-bound expression\n+\tto half of the num_teams clauses.\n+\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n+\t* g++.dg/gomp/num-teams-1.C: New test.\n+\t* g++.dg/gomp/num-teams-2.C: New test.\n+\n+2021-11-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103151.c: New test.\n+\n 2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/tree-ssa/pr102906.c: New test."}, {"sha": "5d8556977deb76a33e71fa8f4962332873ec01a4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,10 @@\n+2021-11-11  Raphael Moreira Zinsly  <rzinsly@linux.ibm.com>\n+\n+\tPR libgcc/103044\n+\t* config/rs6000/linux-unwind.h (ppc_backchain_fallback): Check if it's\n+\tcalled with a null argument or at the end of the backtrace and return.\n+\t* unwind.inc (_Unwind_ForcedUnwind_Phase2): Treat _URC_NORMAL_STOP.\n+\n 2021-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/linux-unwind.h (ppc_back_fallback): Make it static,"}, {"sha": "26a8476961acb41dec2f427a45390fe97e061861", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,25 @@\n+2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/teams-1.f90: New test.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.h (struct gomp_thread): Add num_teams and team_num members.\n+\t* team.c (struct gomp_thread_start_data): Likewise.\n+\t(gomp_thread_start): Initialize thr->num_teams and thr->team_num.\n+\t(gomp_team_start): Initialize start_data->num_teams and\n+\tstart_data->team_num.  Update nthr->num_teams and nthr->team_num.\n+\t* teams.c (gomp_num_teams, gomp_team_num): Remove.\n+\t(GOMP_teams_reg): Set and restore thr->num_teams and thr->team_num\n+\tinstead of gomp_num_teams and gomp_team_num.\n+\t(omp_get_num_teams): Use thr->num_teams + 1 instead of gomp_num_teams.\n+\t(omp_get_team_num): Use thr->team_num instead of gomp_team_num.\n+\t* testsuite/libgomp.c/teams-4.c: New test.\n+\n+2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/teams-1.c: New test.\n+\n 2021-11-09  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* env.c (parse_gomp_openacc_dim): Restore parsing."}, {"sha": "e0f5f6230e243a453aaa26d536a8904332db4883", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39265d4fe13e3e8ce5021642e5092e74effb643/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39265d4fe13e3e8ce5021642e5092e74effb643/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b39265d4fe13e3e8ce5021642e5092e74effb643", "patch": "@@ -1,3 +1,31 @@\n+2021-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/debug/deque (deque::operator=(const deque&)): Remove\n+\tdefinition.\n+\t* include/debug/list (list::operator=(const list&)): Likewise.\n+\t* include/debug/map.h (map::operator=(const map&)): Likewise.\n+\t* include/debug/multimap.h (multimap::operator=(const multimap&)):\n+\tLikewise.\n+\t* include/debug/multiset.h (multiset::operator=(const multiset&)):\n+\tLikewise.\n+\t* include/debug/set.h (set::operator=(const set&)): Likewise.\n+\t* include/debug/string (basic_string::operator=(const basic_string&)):\n+\tLikewise.\n+\t* include/debug/vector (vector::operator=(const vector&)):\n+\tLikewise.\n+\t(_Safe_vector::operator=(const _Safe_vector&)): Define for\n+\tC++98 as well.\n+\n+2021-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (memory_resource::allocate):\n+\tImplicitly create objects in the returned storage.\n+\n+2021-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_bvector.h (vector<bool>::data()): Give\n+\tprotected access, and delete for C++11 and later.\n+\n 2021-11-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100117"}]}