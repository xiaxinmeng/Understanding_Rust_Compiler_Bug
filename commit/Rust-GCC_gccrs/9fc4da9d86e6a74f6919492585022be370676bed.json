{"sha": "9fc4da9d86e6a74f6919492585022be370676bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjNGRhOWQ4NmU2YTc0ZjY5MTk0OTI1ODUwMjJiZTM3MDY3NmJlZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-12-05T08:27:27Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-12-05T08:27:27Z"}, "message": "darwin.h, [...]: Fix comment typos.\n\n\t* config/i386/darwin.h, config/spu/spu.c, tree-ssa-live.c,\n\ttree-vect-generic.c, tree-vect-transform.c: Fix comment typos.\n\nFrom-SVN: r119533", "tree": {"sha": "e99d926aabc3d097b17af3ec037198ae6f5684b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e99d926aabc3d097b17af3ec037198ae6f5684b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc4da9d86e6a74f6919492585022be370676bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc4da9d86e6a74f6919492585022be370676bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc4da9d86e6a74f6919492585022be370676bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc4da9d86e6a74f6919492585022be370676bed/comments", "author": null, "committer": null, "parents": [{"sha": "20e9e7597fd6296a7cf0dee5950ad462fd90a424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e9e7597fd6296a7cf0dee5950ad462fd90a424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e9e7597fd6296a7cf0dee5950ad462fd90a424"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "35e5445cd9226f7abd5ae6ec962f58b4c7fe3c54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -1,3 +1,8 @@\n+2006-12-05  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/i386/darwin.h, config/spu/spu.c, tree-ssa-live.c,\n+\ttree-vect-generic.c, tree-vect-transform.c: Fix comment typos.\n+\n 2006-12-04  Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n \n \t* config/spu/spu-protos.c (spu_split_address): Add."}, {"sha": "eef9fe84d590cbd3b22f24657e43f095762bbf4b", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -188,7 +188,7 @@ extern void darwin_x86_file_end (void);\n   } while (0)\n \n /* Darwin on x86_64 uses dwarf-2 by default.  Pre-darwin9 32-bit\n-   compiles defaut to stabs+.  darwin9+ defaults to dwarf-2.  */\n+   compiles default to stabs+.  darwin9+ defaults to dwarf-2.  */\n #ifndef DARWIN_PREFER_DWARF\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE (TARGET_64BIT ? DWARF2_DEBUG : DBX_DEBUG)"}, {"sha": "07680b71ae67c09be7efd0272da19d6225226cf2", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -3707,7 +3707,7 @@ spu_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \n   /* Folding to a CONST_VECTOR will use extra space but there might\n      be only a small savings in cycles.  We'd like to use a CONST_VECTOR\n-     only if it allows us to fold away multiple insns.  Changin the cost\n+     only if it allows us to fold away multiple insns.  Changing the cost\n      of a CONST_VECTOR here (or in CONST_COSTS) doesn't help though\n      because this cost will only be compared against a single insn. \n      if (code == CONST_VECTOR)"}, {"sha": "f7665cde557f000281ed8f503bc616a47c272c0a", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -984,7 +984,7 @@ partition_pair_map_hash (const void *pair)\n }\n \n \n-/* Return TRUE if PAIR1 is equivilent to PAIR2.  */\n+/* Return TRUE if PAIR1 is equivalent to PAIR2.  */\n \n int \n partition_pair_map_eq (const void *pair1, const void *pair2)\n@@ -1112,7 +1112,7 @@ add_coalesce (coalesce_list_p cl, int p1, int p2,\n }\n \n \n-/* Comparison function to allow qsort to sort P1 and P2 in Ascendiong order.  */\n+/* Comparison function to allow qsort to sort P1 and P2 in Ascending order.  */\n \n static\n int compare_pairs (const void *p1, const void *p2)"}, {"sha": "840c4abd33c6ac5fb1ec55686424041051f5340c", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -411,7 +411,7 @@ expand_vector_operations_1 (block_stmt_iterator *bsi)\n   gcc_assert (code != CONVERT_EXPR);\n   op = optab_for_tree_code (code, type);\n \n-  /* For widening/narrowgin vector operations, the relevant type is of the \n+  /* For widening/narrowing vector operations, the relevant type is of the \n      arguments, not the widened result.  */\n   if (code == WIDEN_SUM_EXPR\n       || code == VEC_WIDEN_MULT_HI_EXPR"}, {"sha": "896e723d0589e42c6c588394bfa96f976bcefbe1", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc4da9d86e6a74f6919492585022be370676bed/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=9fc4da9d86e6a74f6919492585022be370676bed", "patch": "@@ -3852,7 +3852,7 @@ vect_transform_stmt (tree stmt, block_stmt_iterator *bsi, bool *strided_store)\n \t  {\n \t    /* In case of interleaving, the whole chain is vectorized when the\n \t       last store in the chain is reached. Store stmts before the last\n-\t       one are skipped, and there vec_stmt_info shoudn't be freed\n+\t       one are skipped, and there vec_stmt_info shouldn't be freed\n \t       meanwhile.  */\n \t    *strided_store = true;\n \t    if (STMT_VINFO_VEC_STMT (stmt_info))"}]}