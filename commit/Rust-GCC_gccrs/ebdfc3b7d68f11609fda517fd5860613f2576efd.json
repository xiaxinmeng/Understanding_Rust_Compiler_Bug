{"sha": "ebdfc3b7d68f11609fda517fd5860613f2576efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkZmMzYjdkNjhmMTE2MDlmZGE1MTdmZDU4NjA2MTNmMjU3NmVmZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-04-07T23:03:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-04-07T23:03:20Z"}, "message": "Fix comment.\n\nFrom-SVN: r33010", "tree": {"sha": "a15eb80dafbb9d8ec24f56bcc814d3861013982c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15eb80dafbb9d8ec24f56bcc814d3861013982c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebdfc3b7d68f11609fda517fd5860613f2576efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdfc3b7d68f11609fda517fd5860613f2576efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdfc3b7d68f11609fda517fd5860613f2576efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdfc3b7d68f11609fda517fd5860613f2576efd/comments", "author": null, "committer": null, "parents": [{"sha": "03492bae5961b6a1b04327364a491f2302ee9a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03492bae5961b6a1b04327364a491f2302ee9a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03492bae5961b6a1b04327364a491f2302ee9a46"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "acd1fdc29dc5bd4c00a3fbfc2e9a4b70d94cbdba", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdfc3b7d68f11609fda517fd5860613f2576efd/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdfc3b7d68f11609fda517fd5860613f2576efd/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ebdfc3b7d68f11609fda517fd5860613f2576efd", "patch": "@@ -599,10 +599,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n    in the wrong place.\n    If we wanted to implement this exactly, we'd need a STRUCT_VALUE of 0,\n    an extra field in CUMULATIVE_ARGS, initialize it in INIT_CUMULATIVE_ARGS,\n-   and hack FUNCTION_VALUE / FUNCTION_ARG_ADVANCE to look directly at\n-   DECL_RESULT of the current function in conjunction with CUM to determine\n-   if the argument in question it is a struct value pointer, and if it is,\n-   pass it in memory.  */\n+   and hack FUNCTION_ARG (actually PASS_IN_REG_P) / FUNCTION_ARG_ADVANCE\n+   to look directly at DECL_RESULT of the current function in conjunction\n+   with CUM to determine if the argument in question it is a struct value\n+   pointer, and if it is, pass it in memory.  */\n #define STRUCT_VALUE \\\n   (TARGET_HITACHI \\\n    ? gen_rtx_MEM (Pmode, arg_pointer_rtx) \\"}]}