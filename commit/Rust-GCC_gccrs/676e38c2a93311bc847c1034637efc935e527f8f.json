{"sha": "676e38c2a93311bc847c1034637efc935e527f8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2ZTM4YzJhOTMzMTFiYzg0N2MxMDM0NjM3ZWZjOTM1ZTUyN2Y4Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-10-01T11:36:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-10-01T11:36:47Z"}, "message": "Store float for pow result test\n\nOptimizing gcc.dg/torture/pr41094.c, the compiler computes the\nconstant value and short-circuits the whole thing.  At -O0, however,\non 32-bit x86, the call to pow() remains, and the program compares the\nreturned value in a stack register, with excess precision, with the\nexact return value expected from pow().  If libm's pow() returns a\nslightly off result, the compare fails.  If the value in the register\nis stored in a separate variable, so it gets rounded to double\nprecision, and then compared, the compare passes.\n\nIt's not clear that the test was meant to detect libm's reliance on\nrounding off the excess precision, but I guess it wasn't, so I propose\nthis slight change that enables it to pass regardless of the slight\ninaccuracy of the C library in use.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/torture/pr41094.c: Introduce intermediate variable.\n\nFrom-SVN: r276404", "tree": {"sha": "b71bee62329d42492f63b9ebfceb726d68dff4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b71bee62329d42492f63b9ebfceb726d68dff4dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676e38c2a93311bc847c1034637efc935e527f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e38c2a93311bc847c1034637efc935e527f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e38c2a93311bc847c1034637efc935e527f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e38c2a93311bc847c1034637efc935e527f8f/comments", "author": null, "committer": null, "parents": [{"sha": "31632e2c4327146ea8d21cff33adaa505b17d2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31632e2c4327146ea8d21cff33adaa505b17d2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31632e2c4327146ea8d21cff33adaa505b17d2bd"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "4f876e543eae7eb438bb126e5b228cf5284e6d7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e38c2a93311bc847c1034637efc935e527f8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e38c2a93311bc847c1034637efc935e527f8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=676e38c2a93311bc847c1034637efc935e527f8f", "patch": "@@ -1,5 +1,7 @@\n 2019-10-01  Alexandre Oliva <oliva@adacore.com>\n \n+\t* gcc.dg/torture/pr41094.c: Introduce intermediate variable.\n+\n \tPR debug/91507\n \t* gcc.dg/debug/dwarf2/array-0.c: New.\n \t* gcc.dg/debug/dwarf2/array-1.c: New."}, {"sha": "9219a1741a37f6ed0422388ceb73d6160563607f", "filename": "gcc/testsuite/gcc.dg/torture/pr41094.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e38c2a93311bc847c1034637efc935e527f8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr41094.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e38c2a93311bc847c1034637efc935e527f8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr41094.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr41094.c?ref=676e38c2a93311bc847c1034637efc935e527f8f", "patch": "@@ -13,7 +13,8 @@ double foo(void)\n \n int main()\n {\n-  if (foo() != 2.0)\n+  double r = foo ();\n+  if (r != 2.0)\n     abort ();\n   return 0;\n }"}]}