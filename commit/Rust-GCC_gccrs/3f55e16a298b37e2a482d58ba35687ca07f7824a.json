{"sha": "3f55e16a298b37e2a482d58ba35687ca07f7824a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1NWUxNmEyOThiMzdlMmE0ODJkNThiYTM1Njg3Y2EwN2Y3ODI0YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-13T03:21:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-13T03:21:18Z"}, "message": "call.c (maybe_print_user_conv_context): New.\n\n\t* call.c (maybe_print_user_conv_context): New.\n\t(convert_like_real): Use it.  Print call context for bad\n\tuser-defined conversion.\n\t(build_over_call): Print call context for bad 'this' conversion.\n\nFrom-SVN: r210350", "tree": {"sha": "102aa271ca8cf4ca179b73c122387fe10f0cf260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102aa271ca8cf4ca179b73c122387fe10f0cf260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f55e16a298b37e2a482d58ba35687ca07f7824a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f55e16a298b37e2a482d58ba35687ca07f7824a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f55e16a298b37e2a482d58ba35687ca07f7824a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f55e16a298b37e2a482d58ba35687ca07f7824a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eed64f277adb7e002c81b16b26d3ed0569a2acaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed64f277adb7e002c81b16b26d3ed0569a2acaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eed64f277adb7e002c81b16b26d3ed0569a2acaf"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "ca0752747d5044526007a06ee0676f193784a4a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f55e16a298b37e2a482d58ba35687ca07f7824a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f55e16a298b37e2a482d58ba35687ca07f7824a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f55e16a298b37e2a482d58ba35687ca07f7824a", "patch": "@@ -1,5 +1,10 @@\n 2014-05-12  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (maybe_print_user_conv_context): New.\n+\t(convert_like_real): Use it.  Print call context for bad\n+\tuser-defined conversion.\n+\t(build_over_call): Print call context for bad 'this' conversion.\n+\n \t* call.c (convert_like_real): Use inform for identifying the\n \tdeclaration point.\n "}, {"sha": "7b8bc09cb289cafeae3d83fe42e014a5f1f0b724", "filename": "gcc/cp/call.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f55e16a298b37e2a482d58ba35687ca07f7824a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f55e16a298b37e2a482d58ba35687ca07f7824a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3f55e16a298b37e2a482d58ba35687ca07f7824a", "patch": "@@ -5942,6 +5942,23 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n     }\n }\n \n+/* We gave a diagnostic during a conversion.  If this was in the second\n+   standard conversion sequence of a user-defined conversion sequence, say\n+   which user-defined conversion.  */\n+\n+static void\n+maybe_print_user_conv_context (conversion *convs)\n+{\n+  if (convs->user_conv_p)\n+    for (conversion *t = convs; t; t = next_conversion (t))\n+      if (t->kind == ck_user)\n+\t{\n+\t  print_z_candidate (0, \"  after user-defined conversion:\",\n+\t\t\t     t->cand);\n+\t  break;\n+\t}\n+}\n+\n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n    ARGNUM are used for diagnostics.  ARGNUM is zero based, -1\n    indicates the `this' argument of a method.  INNER is nonzero when\n@@ -6003,11 +6020,15 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t\t/*c_cast_p=*/false,\n \t\t\t\t\tcomplain);\n \t      if (convs->kind == ck_ref_bind)\n-\t\treturn convert_to_reference (totype, expr, CONV_IMPLICIT,\n+\t\texpr = convert_to_reference (totype, expr, CONV_IMPLICIT,\n \t\t\t\t\t     LOOKUP_NORMAL, NULL_TREE,\n \t\t\t\t\t     complain);\n \t      else\n-\t\treturn cp_convert (totype, expr, complain);\n+\t\texpr = cp_convert (totype, expr, complain);\n+\t      if (fn)\n+\t\tinform (DECL_SOURCE_LOCATION (fn),\n+\t\t\t\"  initializing argument %P of %qD\", argnum, fn);\n+\t      return expr;\n \t    }\n \t  else if (t->kind == ck_user || !t->bad_p)\n \t    {\n@@ -6030,7 +6051,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\tTREE_TYPE (expr), totype);\n       if (complained && fn)\n \tinform (DECL_SOURCE_LOCATION (fn),\n-\t\t\"initializing argument %P of %qD\", argnum, fn);\n+\t\t\"  initializing argument %P of %qD\", argnum, fn);\n \n       return cp_convert (totype, expr, complain);\n     }\n@@ -6135,7 +6156,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  build_user_type_conversion (totype, convs->u.expr, LOOKUP_NORMAL,\n \t\t\t\t      complain);\n \t  if (fn)\n-\t    inform (input_location, \"initializing argument %P of %q+D\",\n+\t    inform (input_location, \"  initializing argument %P of %q+D\",\n \t\t    argnum, fn);\n \t}\n       return error_mark_node;\n@@ -6255,9 +6276,14 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t/* Copy-list-initialization doesn't actually involve a copy.  */\n \treturn expr;\n       expr = build_temp (expr, totype, flags, &diag_kind, complain);\n-      if (diag_kind && fn && complain)\n-\tinform (DECL_SOURCE_LOCATION (fn),\n-\t\t\"  initializing argument %P of %qD\", argnum, fn);\n+      if (diag_kind && complain)\n+\t{\n+\t  maybe_print_user_conv_context (convs);\n+\t  if (fn)\n+\t    inform (DECL_SOURCE_LOCATION (fn),\n+\t\t    \"  initializing argument %P of %qD\", argnum, fn);\n+\t}\n+\n       return build_cplus_new (totype, expr, complain);\n \n     case ck_ref_bind:\n@@ -6272,9 +6298,10 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n \t    error_at (loc, \"cannot bind %qT lvalue to %qT\",\n \t\t      TREE_TYPE (expr), totype);\n+\t    maybe_print_user_conv_context (convs);\n \t    if (fn)\n \t      inform (input_location,\n-\t\t      \"initializing argument %P of %q+D\", argnum, fn);\n+\t\t      \"  initializing argument %P of %q+D\", argnum, fn);\n \t    return error_mark_node;\n \t  }\n \n@@ -6935,8 +6962,12 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (convs[i]->bad_p)\n \t{\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"passing %qT as %<this%> argument of %q#D discards qualifiers\",\n-\t\t       TREE_TYPE (argtype), fn);\n+\t    {\n+\t      if (permerror (input_location, \"passing %qT as %<this%> \"\n+\t\t\t     \"argument discards qualifiers\",\n+\t\t\t     TREE_TYPE (argtype)))\n+\t\tinform (DECL_SOURCE_LOCATION (fn), \"  in call to %qD\", fn);\n+\t    }\n \t  else\n \t    return error_mark_node;\n \t}"}]}