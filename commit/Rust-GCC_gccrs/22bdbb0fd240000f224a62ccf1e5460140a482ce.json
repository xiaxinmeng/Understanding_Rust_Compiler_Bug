{"sha": "22bdbb0fd240000f224a62ccf1e5460140a482ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiZGJiMGZkMjQwMDAwZjIyNGE2MmNjZjFlNTQ2MDE0MGE0ODJjZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-02-20T08:31:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-02-20T08:31:25Z"}, "message": "re PR fortran/42958 (Weird temporary array allocation)\n\n2010-02-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/42958\n        * libgfortran.h: Add GFC_RTCHECK_MEM.\n        * invoke.texi (-fcheck=): Document -fcheck=mem.\n        * tranc.c (gfc_call_malloc): Remove negative-size run-time error\n        and enable malloc-success check only with -fcheck=mem.\n        * option.c (gfc_handle_runtime_check_option): Add -fcheck=mem.\n\nFrom-SVN: r156923", "tree": {"sha": "394c4ce0617433ffcc3399c7facb3e046d446672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394c4ce0617433ffcc3399c7facb3e046d446672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22bdbb0fd240000f224a62ccf1e5460140a482ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22bdbb0fd240000f224a62ccf1e5460140a482ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22bdbb0fd240000f224a62ccf1e5460140a482ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22bdbb0fd240000f224a62ccf1e5460140a482ce/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f233f7ed7fe361eeab0fdc35ff821b87b8d10a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f233f7ed7fe361eeab0fdc35ff821b87b8d10a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f233f7ed7fe361eeab0fdc35ff821b87b8d10a59"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "8776bd54d2002b310f3244ba370259b2f09c9e2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=22bdbb0fd240000f224a62ccf1e5460140a482ce", "patch": "@@ -1,3 +1,12 @@\n+2010-02-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/42958\n+\t* libgfortran.h: Add GFC_RTCHECK_MEM.\n+\t* invoke.texi (-fcheck=): Document -fcheck=mem.\n+\t* tranc.c (gfc_call_malloc): Remove negative-size run-time error\n+\tand enable malloc-success check only with -fcheck=mem.\n+\t* option.c (gfc_handle_runtime_check_option): Add -fcheck=mem.\n+\n 2010-02-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43040"}, {"sha": "9fe75d17b8b716537de83c86e6006d245ffe5f0e", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=22bdbb0fd240000f224a62ccf1e5460140a482ce", "patch": "@@ -166,7 +166,7 @@ and warnings}.\n @gccoptlist{-fno-automatic  -ff2c  -fno-underscoring @gol\n -fwhole-file -fsecond-underscore @gol\n -fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n--fcheck=@var{<all|array-temps|bounds|do|pointer|recursion>}\n+-fcheck=@var{<all|array-temps|bounds|do|mem|pointer|recursion>}\n -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n@@ -1216,6 +1216,7 @@ by use of the @option{-ff2c} option.\n @cindex array, bounds checking\n @cindex bounds checking\n @cindex pointer checking\n+@cindex memory checking\n @cindex range checking\n @cindex subscript checking\n @cindex checking subscripts\n@@ -1254,6 +1255,11 @@ checking substring references.\n Enable generation of run-time checks for invalid modification of loop\n iteration variables.\n \n+@item @samp{mem}\n+Enable generation of run-time checks for memory allocation.\n+Note: This option does not affect explicit allocations using the\n+@code{ALLOCATE} statement, which will be always checked.\n+\n @item @samp{pointer}\n Enable generation of run-time checks for pointers and allocatables.\n "}, {"sha": "c39f54b19fc97f9fd6287da906b41cca5ba4077b", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=22bdbb0fd240000f224a62ccf1e5460140a482ce", "patch": "@@ -48,9 +48,10 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_RTCHECK_RECURSION   (1<<2)\n #define GFC_RTCHECK_DO          (1<<3)\n #define GFC_RTCHECK_POINTER     (1<<4)\n+#define GFC_RTCHECK_MEM         (1<<5)\n #define GFC_RTCHECK_ALL        (GFC_RTCHECK_BOUNDS | GFC_RTCHECK_ARRAY_TEMPS \\\n \t\t\t\t| GFC_RTCHECK_RECURSION | GFC_RTCHECK_DO \\\n-\t\t\t\t| GFC_RTCHECK_POINTER)\n+\t\t\t\t| GFC_RTCHECK_POINTER | GFC_RTCHECK_MEM)\n \n \n /* Possible values for the CONVERT I/O specifier.  */"}, {"sha": "a9ce56015ae15cde2c6b77fe6d88b68bc99ecddf", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=22bdbb0fd240000f224a62ccf1e5460140a482ce", "patch": "@@ -482,11 +482,12 @@ gfc_handle_runtime_check_option (const char *arg)\n {\n   int result, pos = 0, n;\n   static const char * const optname[] = { \"all\", \"bounds\", \"array-temps\",\n-\t\t\t\t\t  \"recursion\", \"do\", \"pointer\", NULL };\n+\t\t\t\t\t  \"recursion\", \"do\", \"pointer\",\n+\t\t\t\t\t  \"mem\", NULL };\n   static const int optmask[] = { GFC_RTCHECK_ALL, GFC_RTCHECK_BOUNDS,\n \t\t\t\t GFC_RTCHECK_ARRAY_TEMPS,\n \t\t\t\t GFC_RTCHECK_RECURSION, GFC_RTCHECK_DO,\n-\t\t\t\t GFC_RTCHECK_POINTER,\n+\t\t\t\t GFC_RTCHECK_POINTER, GFC_RTCHECK_MEM,\n \t\t\t\t 0 };\n  \n   while (*arg)"}, {"sha": "6958f0272b51c0794f2b1323e658bdd5129a7d16", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bdbb0fd240000f224a62ccf1e5460140a482ce/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=22bdbb0fd240000f224a62ccf1e5460140a482ce", "patch": "@@ -497,13 +497,12 @@ gfc_trans_runtime_check (bool error, bool once, tree cond, stmtblock_t * pblock,\n \n \n /* Call malloc to allocate size bytes of memory, with special conditions:\n-      + if size < 0, generate a runtime error,\n-      + if size == 0, return a malloced area of size 1,\n+      + if size <= 0, return a malloced area of size 1,\n       + if malloc returns NULL, issue a runtime error.  */\n tree\n gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n {\n-  tree tmp, msg, negative, malloc_result, null_result, res;\n+  tree tmp, msg, malloc_result, null_result, res;\n   stmtblock_t block2;\n \n   size = gfc_evaluate_now (size, block);\n@@ -514,18 +513,7 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n   /* Create a variable to hold the result.  */\n   res = gfc_create_var (prvoid_type_node, NULL);\n \n-  /* size < 0 ?  */\n-  negative = fold_build2 (LT_EXPR, boolean_type_node, size,\n-\t\t\t  build_int_cst (size_type_node, 0));\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n-      (\"Attempt to allocate a negative amount of memory.\"));\n-  tmp = fold_build3 (COND_EXPR, void_type_node, negative,\n-\t\t     build_call_expr_loc (input_location,\n-\t\t\t\t      gfor_fndecl_runtime_error, 1, msg),\n-\t\t     build_empty_stmt (input_location));\n-  gfc_add_expr_to_block (block, tmp);\n-\n-  /* Call malloc and check the result.  */\n+  /* Call malloc.  */\n   gfc_start_block (&block2);\n \n   size = fold_build2 (MAX_EXPR, size_type_node, size,\n@@ -535,15 +523,21 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n \t\t  fold_convert (prvoid_type_node,\n \t\t\t\tbuild_call_expr_loc (input_location,\n \t\t\t\t   built_in_decls[BUILT_IN_MALLOC], 1, size)));\n-  null_result = fold_build2 (EQ_EXPR, boolean_type_node, res,\n-\t\t\t     build_int_cst (pvoid_type_node, 0));\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n-      (\"Memory allocation failed\"));\n-  tmp = fold_build3 (COND_EXPR, void_type_node, null_result,\n-\t\t     build_call_expr_loc (input_location,\n-\t\t\t\t      gfor_fndecl_os_error, 1, msg),\n-\t\t     build_empty_stmt (input_location));\n-  gfc_add_expr_to_block (&block2, tmp);\n+\n+  /* Optionally check whether malloc was successful.  */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_MEM)\n+    {\n+      null_result = fold_build2 (EQ_EXPR, boolean_type_node, res,\n+\t\t\t\t build_int_cst (pvoid_type_node, 0));\n+      msg = gfc_build_addr_expr (pchar_type_node,\n+\t      gfc_build_localized_cstring_const (\"Memory allocation failed\"));\n+      tmp = fold_build3 (COND_EXPR, void_type_node, null_result,\n+\t      build_call_expr_loc (input_location,\n+\t\t\t\t   gfor_fndecl_os_error, 1, msg),\n+\t\t\t\t   build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&block2, tmp);\n+    }\n+\n   malloc_result = gfc_finish_block (&block2);\n \n   gfc_add_expr_to_block (block, malloc_result);\n@@ -553,6 +547,7 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n   return res;\n }\n \n+\n /* Allocate memory, using an optional status argument.\n  \n    This function follows the following pseudo-code:"}]}