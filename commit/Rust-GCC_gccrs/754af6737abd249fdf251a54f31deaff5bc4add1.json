{"sha": "754af6737abd249fdf251a54f31deaff5bc4add1", "node_id": "C_kwDOANBUbNoAKDc1NGFmNjczN2FiZDI0OWZkZjI1MWE1NGYzMWRlYWZmNWJjNGFkZDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-06T17:27:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-06T17:27:28Z"}, "message": "Merge #848\n\n848: Add missing bitwise lang items for operator overloading r=philberty a=philberty\n\nThis adds the missing bitwise lang items:\r\n\r\n- bitand: libcore/ops/bit.rs\r\n- bitor: libcore/ops/bit.rs\r\n- bitxor: libcore/ops/bit.rs\r\n- shl: libcore/ops/bit.rs\r\n- shr: libcore/ops/bit.rs\r\n- bitand_assign: libcore/ops/bit.rs\r\n- bitor_assign: libcore/ops/bit.rs\r\n- bitxor_assign: libcore/ops/bit.rs\r\n- shl_assign: libcore/ops/bit.rs\r\n- shr_assign: libcore/ops/bit.rs\r\n\r\nAddresses #742\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "57b94f4484000214840896d59d49e7d813278b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b94f4484000214840896d59d49e7d813278b99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754af6737abd249fdf251a54f31deaff5bc4add1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1yaACRBK7hj4Ov3rIwAAjHMIABx1G5WRzcpnsXfOWnwLVKyq\nIRNtq+AwhVIjXJ7UpUSKLjW/PDbTHpn2Gn2fgJwfqM3d1rX4Fz+zcDZ9k0VwHb/I\ntF7qB13dLagy1zoE/+4c+Ok/pP8drWZ0J/22lIr0IBRqBVk7IvkqmJ0HsCkeGpkk\nS3cPG/kuk8e3PkW7ivzBdC+BgZcO59mnJaihmD1k0lMSpHB9SNn5nWZW4tHP2RF8\n0PJzPMFUFrl43dSZV3dLlJ1VUknwicHAOZqguby8mPIRo7p+ACrQoggI7165Cfa/\nEh1GralRN1zVv6WFeF6qKDEoQTJ4Rbf8dpZJIK6VrwkNk0whZS5ThMtzaw/pALs=\n=N++D\n-----END PGP SIGNATURE-----\n", "payload": "tree 57b94f4484000214840896d59d49e7d813278b99\nparent 0b0deb4ee9d2a4775b76c49dd1708c952406745d\nparent 41cdd94998955b80d03d7f5dd9c5b51571ef8113\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641490048 +0000\ncommitter GitHub <noreply@github.com> 1641490048 +0000\n\nMerge #848\n\n848: Add missing bitwise lang items for operator overloading r=philberty a=philberty\n\nThis adds the missing bitwise lang items:\r\n\r\n- bitand: libcore/ops/bit.rs\r\n- bitor: libcore/ops/bit.rs\r\n- bitxor: libcore/ops/bit.rs\r\n- shl: libcore/ops/bit.rs\r\n- shr: libcore/ops/bit.rs\r\n- bitand_assign: libcore/ops/bit.rs\r\n- bitor_assign: libcore/ops/bit.rs\r\n- bitxor_assign: libcore/ops/bit.rs\r\n- shl_assign: libcore/ops/bit.rs\r\n- shr_assign: libcore/ops/bit.rs\r\n\r\nAddresses #742\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754af6737abd249fdf251a54f31deaff5bc4add1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754af6737abd249fdf251a54f31deaff5bc4add1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754af6737abd249fdf251a54f31deaff5bc4add1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0deb4ee9d2a4775b76c49dd1708c952406745d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0deb4ee9d2a4775b76c49dd1708c952406745d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0deb4ee9d2a4775b76c49dd1708c952406745d"}, {"sha": "41cdd94998955b80d03d7f5dd9c5b51571ef8113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41cdd94998955b80d03d7f5dd9c5b51571ef8113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41cdd94998955b80d03d7f5dd9c5b51571ef8113"}], "stats": {"total": 169, "additions": 159, "deletions": 10}, "files": [{"sha": "3ed3d4700116eeac7b76866a080d1bdf11d08978", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=754af6737abd249fdf251a54f31deaff5bc4add1", "patch": "@@ -41,6 +41,11 @@ class RustLangItem\n     MULTIPLY,\n     DIVIDE,\n     REMAINDER,\n+    BITAND,\n+    BITOR,\n+    BITXOR,\n+    SHL,\n+    SHR,\n \n     NEGATION,\n     NOT,\n@@ -50,6 +55,11 @@ class RustLangItem\n     MUL_ASSIGN,\n     DIV_ASSIGN,\n     REM_ASSIGN,\n+    BITAND_ASSIGN,\n+    BITOR_ASSIGN,\n+    BITXOR_ASSIGN,\n+    SHL_ASSIGN,\n+    SHR_ASSIGN,\n \n     DEREF,\n \n@@ -78,6 +88,26 @@ class RustLangItem\n       {\n \treturn ItemType::REMAINDER;\n       }\n+    else if (item.compare (\"bitand\") == 0)\n+      {\n+\treturn ItemType::BITAND;\n+      }\n+    else if (item.compare (\"bitor\") == 0)\n+      {\n+\treturn ItemType::BITOR;\n+      }\n+    else if (item.compare (\"bitxor\") == 0)\n+      {\n+\treturn ItemType::BITXOR;\n+      }\n+    else if (item.compare (\"shl\") == 0)\n+      {\n+\treturn ItemType::SHL;\n+      }\n+    else if (item.compare (\"shr\") == 0)\n+      {\n+\treturn ItemType::SHR;\n+      }\n     else if (item.compare (\"neg\") == 0)\n       {\n \treturn ItemType::NEGATION;\n@@ -106,6 +136,26 @@ class RustLangItem\n       {\n \treturn ItemType::REM_ASSIGN;\n       }\n+    else if (item.compare (\"bitand_assign\") == 0)\n+      {\n+\treturn ItemType::BITAND_ASSIGN;\n+      }\n+    else if (item.compare (\"bitor_assign\") == 0)\n+      {\n+\treturn ItemType::BITOR_ASSIGN;\n+      }\n+    else if (item.compare (\"bitxor_assign\") == 0)\n+      {\n+\treturn ItemType::BITXOR_ASSIGN;\n+      }\n+    else if (item.compare (\"shl_assign\") == 0)\n+      {\n+\treturn ItemType::SHL_ASSIGN;\n+      }\n+    else if (item.compare (\"shr_assign\") == 0)\n+      {\n+\treturn ItemType::SHR_ASSIGN;\n+      }\n     else if (item.compare (\"deref\") == 0)\n       {\n \treturn ItemType::DEREF;\n@@ -128,6 +178,16 @@ class RustLangItem\n \treturn \"div\";\n       case REMAINDER:\n \treturn \"rem\";\n+      case BITAND:\n+\treturn \"bitand\";\n+      case BITOR:\n+\treturn \"bitor\";\n+      case BITXOR:\n+\treturn \"bitxor\";\n+      case SHL:\n+\treturn \"shl\";\n+      case SHR:\n+\treturn \"shr\";\n       case NEGATION:\n \treturn \"neg\";\n       case NOT:\n@@ -142,11 +202,21 @@ class RustLangItem\n \treturn \"div_assign\";\n       case REM_ASSIGN:\n \treturn \"rem_assign\";\n+      case BITAND_ASSIGN:\n+\treturn \"bitand_assign\";\n+      case BITOR_ASSIGN:\n+\treturn \"bitor_assign\";\n+      case BITXOR_ASSIGN:\n+\treturn \"bitxor_assign\";\n+      case SHL_ASSIGN:\n+\treturn \"shl_assign\";\n+      case SHR_ASSIGN:\n+\treturn \"shr_assign\";\n       case DEREF:\n \treturn \"deref\";\n \n       case UNKNOWN:\n-\tbreak;\n+\treturn \"<UNKNOWN>\";\n       }\n     return \"<UNKNOWN>\";\n   }\n@@ -165,9 +235,16 @@ class RustLangItem\n \treturn ItemType::DIVIDE;\n       case ArithmeticOrLogicalOperator::MODULUS:\n \treturn ItemType::REMAINDER;\n-\n-      default:\n-\treturn ItemType::UNKNOWN;\n+      case ArithmeticOrLogicalOperator::BITWISE_AND:\n+\treturn ItemType::BITAND;\n+      case ArithmeticOrLogicalOperator::BITWISE_OR:\n+\treturn ItemType::BITOR;\n+      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+\treturn ItemType::BITXOR;\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+\treturn ItemType::SHL;\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+\treturn ItemType::SHR;\n       }\n     return ItemType::UNKNOWN;\n   }\n@@ -187,9 +264,16 @@ class RustLangItem\n \treturn ItemType::DIV_ASSIGN;\n       case ArithmeticOrLogicalOperator::MODULUS:\n \treturn ItemType::REM_ASSIGN;\n-\n-      default:\n-\treturn ItemType::UNKNOWN;\n+      case ArithmeticOrLogicalOperator::BITWISE_AND:\n+\treturn ItemType::BITAND_ASSIGN;\n+      case ArithmeticOrLogicalOperator::BITWISE_OR:\n+\treturn ItemType::BITOR_ASSIGN;\n+      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+\treturn ItemType::BITXOR_ASSIGN;\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+\treturn ItemType::SHL_ASSIGN;\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+\treturn ItemType::SHR_ASSIGN;\n       }\n     return ItemType::UNKNOWN;\n   }\n@@ -202,9 +286,6 @@ class RustLangItem\n \treturn ItemType::NEGATION;\n       case NegationOperator::NOT:\n \treturn ItemType::NOT;\n-\n-      default:\n-\treturn ItemType::UNKNOWN;\n       }\n     return ItemType::UNKNOWN;\n   }"}, {"sha": "1919941c48612b07534583d1de9daf488be6463f", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_11.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs?ref=754af6737abd249fdf251a54f31deaff5bc4add1", "patch": "@@ -0,0 +1,37 @@\n+// { dg-output \"1\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"bitand\"]\n+pub trait BitAnd<Rhs = Self> {\n+    type Output;\n+\n+    fn bitand(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+impl BitAnd for i32 {\n+    type Output = i32;\n+\n+    fn bitand(self, other: i32) -> i32 {\n+        let res = self & other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res);\n+        }\n+\n+        res\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = 1 & 1;\n+\n+    0\n+}"}, {"sha": "7433330fa313ae8c5b57fc8f8c620965d3bb9605", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_12.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754af6737abd249fdf251a54f31deaff5bc4add1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs?ref=754af6737abd249fdf251a54f31deaff5bc4add1", "patch": "@@ -0,0 +1,31 @@\n+// { dg-output \"1\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"bitand_assign\"]\n+pub trait BitAndAssign<Rhs = Self> {\n+    fn bitand_assign(&mut self, rhs: Rhs);\n+}\n+\n+impl BitAndAssign for i32 {\n+    fn bitand_assign(&mut self, other: i32) {\n+        *self &= other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, *self);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let mut a = 1;\n+    a &= 1;\n+\n+    0\n+}"}]}