{"sha": "2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0Y2MxOWJkNThiMzk1N2VkOGI5NWI0ZDY3YjEzNTIzM2MxNDdhMQ==", "commit": {"author": {"name": "Krystian Ku\u017aniarek", "email": "krystian.kuzniarek@gmail.com", "date": "2020-09-10T16:09:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-10T16:09:15Z"}, "message": "libstdc++: Add unused attributes to suppress warnings\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_base.h: Fix -Wunused-variable\n\twarnings.\n\t* include/ext/new_allocator.h: Fix -Wunused-parameter\n\twarnings.", "tree": {"sha": "d0b2824c374b09467299de305546e75a45117188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b2824c374b09467299de305546e75a45117188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4cc19bd58b3957ed8b95b4d67b135233c147a1/comments", "author": {"login": "kuzkry", "id": 18310463, "node_id": "MDQ6VXNlcjE4MzEwNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/18310463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuzkry", "html_url": "https://github.com/kuzkry", "followers_url": "https://api.github.com/users/kuzkry/followers", "following_url": "https://api.github.com/users/kuzkry/following{/other_user}", "gists_url": "https://api.github.com/users/kuzkry/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuzkry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuzkry/subscriptions", "organizations_url": "https://api.github.com/users/kuzkry/orgs", "repos_url": "https://api.github.com/users/kuzkry/repos", "events_url": "https://api.github.com/users/kuzkry/events{/privacy}", "received_events_url": "https://api.github.com/users/kuzkry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afea21f9612545282db95872021d7587c9d5b0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afea21f9612545282db95872021d7587c9d5b0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afea21f9612545282db95872021d7587c9d5b0d4"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "2cdd2bd6cae58857a4d2519480cd8c6ab4d98b03", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cc19bd58b3957ed8b95b4d67b135233c147a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cc19bd58b3957ed8b95b4d67b135233c147a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "patch": "@@ -231,7 +231,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_ALWAYS_INLINE void\n     clear(memory_order __m = memory_order_seq_cst) noexcept\n     {\n-      memory_order __b = __m & __memory_order_mask;\n+      memory_order __b __attribute__ ((__unused__))\n+\t= __m & __memory_order_mask;\n       __glibcxx_assert(__b != memory_order_consume);\n       __glibcxx_assert(__b != memory_order_acquire);\n       __glibcxx_assert(__b != memory_order_acq_rel);\n@@ -242,7 +243,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_ALWAYS_INLINE void\n     clear(memory_order __m = memory_order_seq_cst) volatile noexcept\n     {\n-      memory_order __b = __m & __memory_order_mask;\n+      memory_order __b __attribute__ ((__unused__))\n+\t= __m & __memory_order_mask;\n       __glibcxx_assert(__b != memory_order_consume);\n       __glibcxx_assert(__b != memory_order_acquire);\n       __glibcxx_assert(__b != memory_order_acq_rel);\n@@ -416,7 +418,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE void\n       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -428,7 +431,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       store(__int_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -439,7 +443,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __int_type\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -449,7 +454,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __int_type\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -475,8 +481,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_weak(__int_type& __i1, __int_type __i2,\n \t\t\t    memory_order __m1, memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -490,8 +498,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    memory_order __m1,\n \t\t\t    memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -520,8 +530,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(__int_type& __i1, __int_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -535,8 +547,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n@@ -736,7 +750,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       store(__pointer_type __p,\n \t    memory_order __m = memory_order_seq_cst) noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n@@ -749,7 +764,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       store(__pointer_type __p,\n \t    memory_order __m = memory_order_seq_cst) volatile noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -760,7 +776,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -770,7 +787,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       {\n-\tmemory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b __attribute__ ((__unused__))\n+\t  = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -797,8 +815,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -812,8 +832,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 = __m2 & __memory_order_mask;\n-\tmemory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 __attribute__ ((__unused__))\n+\t  = __m2 & __memory_order_mask;\n+\tmemory_order __b1 __attribute__ ((__unused__))\n+\t  = __m1 & __memory_order_mask;\n \n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);"}, {"sha": "2e21a98409f7ddd589d5ca137e1542677e2745e4", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cc19bd58b3957ed8b95b4d67b135233c147a1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cc19bd58b3957ed8b95b4d67b135233c147a1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=2b4cc19bd58b3957ed8b95b4d67b135233c147a1", "patch": "@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // __p is not permitted to be a null pointer.\n       void\n-      deallocate(_Tp* __p, size_type __t)\n+      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))\n       {\n #if __cpp_aligned_new\n \tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)"}]}