{"sha": "4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmM2U2NTA5MDY2ZTI4MzJmZGZlOTk4N2U3ZmQyZjg3MTlkYTkzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-04T23:23:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-04T23:23:17Z"}, "message": "Add allocator-extended copy/move ctors to COW string\n\nAdd these constructors from C++11 which were missing from the COW\nbasic_string. Additionally simplify the definitions of the\nbasic_string::reference and basic_string::const_reference types as\nrequired by C++11.\n\nThis allows filesystem::path::string<Allocator>() to be simplified, so\nthat the same code is used for both basic_string implementations.\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export allocator-extended\n\tcopy/move constructors for old std::basic_string.\n\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::reference, basic_string::const_reference): Define\n\tas plain references for C++11 and later.\n\t(basic_string::basic_string()): Put constructor body outside\n\tpreprocessor conditional groups.\n\t(basic_string::basic_string(basic_string&&)): Move _Alloc_hider\n\tinstead of copying it.\n\t(basic_string::basic_string(const basic_string&, const _Alloc&)):\n\tDefine.\n\t(basic_string::basic_string(basic_string&&, const _Alloc&)):\n\tDefine.\n\t* include/bits/fs_path.h [!_GLIBCXX_USE_CXX11_ABI]: Remove special\n\tcases for old basic_string.\n\t* testsuite/21_strings/basic_string/cons/char/8.cc: Test\n\tallocator-extended constructors unconditionally. Add extra members to\n\tallocator type when using old string ABI.\n\t* testsuite/21_strings/basic_string/allocator/71964.cc: Enable test\n\tfor old string ABI.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/8.cc: Likewise.\n\nFrom-SVN: r267584", "tree": {"sha": "54527e7c8dc67c9cd50c70d5984fd46cef111975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54527e7c8dc67c9cd50c70d5984fd46cef111975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "226365d6d20745c14e5e482770e8fff4ad441aad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -1,5 +1,27 @@\n 2019-01-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export allocator-extended\n+\tcopy/move constructors for old std::basic_string.\n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::reference, basic_string::const_reference): Define\n+\tas plain references for C++11 and later.\n+\t(basic_string::basic_string()): Put constructor body outside\n+\tpreprocessor conditional groups.\n+\t(basic_string::basic_string(basic_string&&)): Move _Alloc_hider\n+\tinstead of copying it.\n+\t(basic_string::basic_string(const basic_string&, const _Alloc&)):\n+\tDefine.\n+\t(basic_string::basic_string(basic_string&&, const _Alloc&)):\n+\tDefine.\n+\t* include/bits/fs_path.h [!_GLIBCXX_USE_CXX11_ABI]: Remove special\n+\tcases for old basic_string.\n+\t* testsuite/21_strings/basic_string/cons/char/8.cc: Test\n+\tallocator-extended constructors unconditionally. Add extra members to\n+\tallocator type when using old string ABI.\n+\t* testsuite/21_strings/basic_string/allocator/71964.cc: Enable test\n+\tfor old string ABI.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/8.cc: Likewise.\n+\n \t* testsuite/23_containers/list/61347.cc: Avoid spurious failure when\n \t-fno-inline added to test flags.\n "}, {"sha": "1d157288fcf1952650e25126987a1109f9f812ad", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -2072,6 +2072,11 @@ GLIBCXX_3.4.26 {\n     _ZNSt14collate_bynameI[cw]EC[12]ERKSs[jmy];\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE3getES3_S3_RSt8ios_baseRSt12_Ios_IostateP2tmcc;\n \n+    _ZNSsC[12]ERKSsRKSaIcE;\n+    _ZNSsC[12]EOSsRKSaIcE;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_RKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]EOS2_RKS1_;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "43460df5d1f64ce6d50f8c58d6c9e51946a3ba6d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -3145,8 +3145,13 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       typedef _Alloc\t\t\t\t\t    allocator_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n       typedef typename _CharT_alloc_type::difference_type   difference_type;\n+#if __cplusplus < 201103L\n       typedef typename _CharT_alloc_type::reference\t    reference;\n       typedef typename _CharT_alloc_type::const_reference   const_reference;\n+#else\n+      typedef value_type&\t\t\t\t    reference;\n+      typedef const value_type&\t\t\t\t    const_reference;\n+#endif\n       typedef typename _CharT_alloc_type::pointer\t    pointer;\n       typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;\n@@ -3526,10 +3531,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       basic_string()\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       _GLIBCXX_NOEXCEPT\n-      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n+      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())\n #else\n-      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }\n+      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())\n #endif\n+      { }\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n@@ -3610,7 +3616,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       noexcept // FIXME C++11: should always be noexcept.\n #endif\n-      : _M_dataplus(__str._M_dataplus)\n+      : _M_dataplus(std::move(__str._M_dataplus))\n       {\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t__str._M_data(_S_empty_rep()._M_refdata());\n@@ -3625,6 +3631,25 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());\n+\n+      basic_string(const basic_string& __str, const _Alloc& __a)\n+      : _M_dataplus(__str._M_rep()->_M_grab(__a, __str.get_allocator()), __a)\n+      { }\n+\n+      basic_string(basic_string&& __str, const _Alloc& __a)\n+      : _M_dataplus(__str._M_data(), __a)\n+      {\n+\tif (__a == __str.get_allocator())\n+\t  {\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n+\t    __str._M_data(_S_empty_rep()._M_refdata());\n+#else\n+\t    __str._M_data(_S_construct(size_type(), _CharT(), __a));\n+#endif\n+\t  }\n+\telse\n+\t  _M_dataplus._M_p = _S_construct(__str.begin(), __str.end(), __a);\n+      }\n #endif // C++11\n \n       /**"}, {"sha": "37dcfc167037b51753ba4a900c68246504a97f71", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -965,16 +965,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path::string(const _Allocator& __a) const\n     {\n       if constexpr (is_same_v<_CharT, value_type>)\n-\t{\n-#if _GLIBCXX_USE_CXX11_ABI\n-\t  return { _M_pathname, __a };\n-#else\n-\t  if constexpr (is_same_v<_Allocator, string_type::allocator_type>)\n-\t    return _M_pathname;\n-\t  else\n-\t    return { _M_pathname, string_type::size_type(0), __a };\n-#endif\n-\t}\n+\treturn { _M_pathname, __a };\n       else\n \treturn _S_str_convert<_CharT, _Traits>(_M_pathname, __a);\n     }"}, {"sha": "2bebb232d41b391c06a500b9ebd5737f387a0a84", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/71964.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -16,8 +16,6 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n-// COW strings don't support C++11 allocators:\n-// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n@@ -47,6 +45,17 @@ template<typename T>\n \n     bool moved_to;\n     bool moved_from;\n+\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+    // COW string doesn't use allocator_traits, requires C++03 allocator API.\n+    using pointer = T*;\n+    using const_pointer = const T*;\n+    using difference_type = int;\n+    template<typename U> struct rebind { using other = mv_allocator<U>; };\n+    void construct(pointer p, const T& val) { ::new(p) T(val); }\n+    void destroy(pointer p) { p->~T(); }\n+    size_type max_size() const { return std::allocator<T>().max_size(); }\n+#endif\n   };\n \n template<typename T, typename U>"}, {"sha": "d99fb732722bbf59834ee8ea2973a844b7d05a39", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/8.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -70,10 +70,8 @@ test01()\n   VERIFY( construct( lvalue.begin(), lvalue.end(), alloc ) == 6 );\n   VERIFY( construct( list{ 'l' , 'i' , 's', 't' } ) == 4 );\n   VERIFY( construct( list{ 'l', 'i', 's', 't' }, alloc ) == 4 );\n-#if _GLIBCXX_USE_CXX11_ABI\n   VERIFY( construct( lvalue, alloc ) == 6 );\n   VERIFY( construct( string{\"rvalue\"}, alloc ) == 6 );\n-#endif\n }\n \n int"}, {"sha": "8c330e38aea75ac69cdb0f448fee8d7906d9edc3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/8.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3e6509066e2832fdfe9987e7fd2f8719da93f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc?ref=4ff3e6509066e2832fdfe9987e7fd2f8719da93f", "patch": "@@ -70,10 +70,8 @@ test01()\n   VERIFY( construct( lvalue.begin(), lvalue.end(), alloc ) == 6 );\n   VERIFY( construct( list{ L'l' , L'i' , L's', L't' } ) == 4 );\n   VERIFY( construct( list{ L'l', L'i', L's', L't' }, alloc ) == 4 );\n-#if _GLIBCXX_USE_CXX11_ABI\n   VERIFY( construct( lvalue, alloc ) == 6 );\n   VERIFY( construct( string{L\"rvalue\"}, alloc ) == 6 );\n-#endif\n }\n \n int"}]}