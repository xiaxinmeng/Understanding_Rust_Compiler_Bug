{"sha": "d0e7833b94953ba6b4a915150666969ad9fc66af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlNzgzM2I5NDk1M2JhNmI0YTkxNTE1MDY2Njk2OWFkOWZjNjZhZg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-04-24T18:51:41Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-04-24T18:51:41Z"}, "message": "PR fortran/100154 - ICE in gfc_conv_procedure_call, at fortran/trans-expr.c:6131\n\nAdd appropriate static checks for the character and status arguments to\nthe GNU Fortran intrinsic extensions fget[c], fput[c].  Extend variable\ncheck to allow a function reference having a data pointer result.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100154\n\t* check.c (variable_check): Allow function reference having a data\n\tpointer result.\n\t(arg_strlen_is_zero): New function.\n\t(gfc_check_fgetputc_sub): Add static check of character and status\n\targuments.\n\t(gfc_check_fgetput_sub): Likewise.\n\t* intrinsic.c (add_subroutines): Fix argument name for the\n\tcharacter argument to intrinsic subroutines fget[c], fput[c].\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100154\n\t* gfortran.dg/pr100154.f90: New test.", "tree": {"sha": "1f8b3e8bce8cbe30efc499db4d766df4e36cc1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8b3e8bce8cbe30efc499db4d766df4e36cc1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e7833b94953ba6b4a915150666969ad9fc66af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e7833b94953ba6b4a915150666969ad9fc66af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e7833b94953ba6b4a915150666969ad9fc66af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e7833b94953ba6b4a915150666969ad9fc66af/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c4d970ea3a9fc330d6aa8fd83f9dae0b9afc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c4d970ea3a9fc330d6aa8fd83f9dae0b9afc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c4d970ea3a9fc330d6aa8fd83f9dae0b9afc64"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "27bf3a7eafefd4fd20399a7fb016a358416b6ca4", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=d0e7833b94953ba6b4a915150666969ad9fc66af", "patch": "@@ -1055,6 +1055,13 @@ variable_check (gfc_expr *e, int n, bool allow_proc)\n \t  return true;\n     }\n \n+  /* F2018:R902: function reference having a data pointer result.  */\n+  if (e->expr_type == EXPR_FUNCTION\n+      && e->symtree->n.sym->attr.flavor == FL_PROCEDURE\n+      && e->symtree->n.sym->attr.function\n+      && e->symtree->n.sym->attr.pointer)\n+    return true;\n+\n   gfc_error (\"%qs argument of %qs intrinsic at %L must be a variable\",\n \t     gfc_current_intrinsic_arg[n]->name, gfc_current_intrinsic, &e->where);\n \n@@ -5689,6 +5696,19 @@ gfc_check_spread (gfc_expr *source, gfc_expr *dim, gfc_expr *ncopies)\n /* Functions for checking FGETC, FPUTC, FGET and FPUT (subroutines and\n    functions).  */\n \n+bool\n+arg_strlen_is_zero (gfc_expr *c, int n)\n+{\n+  if (gfc_var_strlen (c) == 0)\n+    {\n+      gfc_error (\"%qs argument of %qs intrinsic at %L must have \"\n+\t\t \"length at least 1\", gfc_current_intrinsic_arg[n]->name,\n+\t\t gfc_current_intrinsic, &c->where);\n+      return true;\n+    }\n+  return false;\n+}\n+\n bool\n gfc_check_fgetputc_sub (gfc_expr *unit, gfc_expr *c, gfc_expr *status)\n {\n@@ -5702,13 +5722,19 @@ gfc_check_fgetputc_sub (gfc_expr *unit, gfc_expr *c, gfc_expr *status)\n     return false;\n   if (!kind_value_check (c, 1, gfc_default_character_kind))\n     return false;\n+  if (strcmp (gfc_current_intrinsic, \"fgetc\") == 0\n+      && !variable_check (c, 1, false))\n+    return false;\n+  if (arg_strlen_is_zero (c, 1))\n+    return false;\n \n   if (status == NULL)\n     return true;\n \n   if (!type_check (status, 2, BT_INTEGER)\n       || !kind_value_check (status, 2, gfc_default_integer_kind)\n-      || !scalar_check (status, 2))\n+      || !scalar_check (status, 2)\n+      || !variable_check (status, 2, false))\n     return false;\n \n   return true;\n@@ -5729,13 +5755,19 @@ gfc_check_fgetput_sub (gfc_expr *c, gfc_expr *status)\n     return false;\n   if (!kind_value_check (c, 0, gfc_default_character_kind))\n     return false;\n+  if (strcmp (gfc_current_intrinsic, \"fget\") == 0\n+      && !variable_check (c, 0, false))\n+    return false;\n+  if (arg_strlen_is_zero (c, 0))\n+    return false;\n \n   if (status == NULL)\n     return true;\n \n   if (!type_check (status, 1, BT_INTEGER)\n       || !kind_value_check (status, 1, gfc_default_integer_kind)\n-      || !scalar_check (status, 1))\n+      || !scalar_check (status, 1)\n+      || !variable_check (status, 1, false))\n     return false;\n \n   return true;"}, {"sha": "219f04f231709a910eb0a020ba29f2c42b685bda", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=d0e7833b94953ba6b4a915150666969ad9fc66af", "patch": "@@ -3460,7 +3460,7 @@ add_subroutines (void)\n   /* Argument names.  These are used as argument keywords and so need to\n      match the documentation.  Please keep this list in sorted order.  */\n   static const char\n-    *a = \"a\", *c = \"count\", *cm = \"count_max\", *com = \"command\",\n+    *a = \"a\", *c_ = \"c\", *c = \"count\", *cm = \"count_max\", *com = \"command\",\n     *cr = \"count_rate\", *dt = \"date\", *errmsg = \"errmsg\", *f = \"from\",\n     *fp = \"frompos\", *gt = \"get\", *h = \"harvest\", *han = \"handler\",\n     *length = \"length\", *ln = \"len\", *md = \"mode\", *msk = \"mask\",\n@@ -3840,12 +3840,12 @@ add_subroutines (void)\n   add_sym_3s (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n-\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      c_, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fget_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n+\t      c_, BT_CHARACTER, dc, REQUIRED, INTENT_OUT,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"flush\", GFC_ISYM_FLUSH, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n@@ -3855,12 +3855,12 @@ add_subroutines (void)\n   add_sym_3s (\"fputc\", GFC_ISYM_FPUTC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fputc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n-\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      c_, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"fput\", GFC_ISYM_FPUT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      c_, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"free\", GFC_ISYM_FREE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,"}, {"sha": "3a1489aaab8af7db5ac8c2582b994b251bb7d7ed", "filename": "gcc/testsuite/gfortran.dg/pr100154.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100154.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e7833b94953ba6b4a915150666969ad9fc66af/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100154.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100154.f90?ref=d0e7833b94953ba6b4a915150666969ad9fc66af", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-std=gnu\" }\n+! PR100154 - ICE in gfc_conv_procedure_call, at fortran/trans-expr.c:6131\n+\n+program p\n+  implicit none\n+  integer           :: n\n+  character, target :: c\n+  character(len=0)  :: c0\n+  character(len=:), allocatable :: cc\n+  n = fget(cc)\n+  n = fget('a')       ! { dg-error \"must be a variable\" }\n+  n = fget(c0)        ! { dg-error \"must have length at least 1\" }\n+  call fget('x')      ! { dg-error \"must be a variable\" }\n+  n = fgetc(5,'a')    ! { dg-error \"must be a variable\" }\n+  call fgetc(5,c0)    ! { dg-error \"must have length at least 1\" }\n+  call fgetc(5,c,1)   ! { dg-error \"must be a variable\" }\n+  call fputc(5,'x',1) ! { dg-error \"must be a variable\" }\n+  n = fget (ptr_returning_func())\n+  print *, c\n+contains\n+  function ptr_returning_func () result (res)\n+    character, pointer :: res\n+    res => c\n+  end\n+end"}]}