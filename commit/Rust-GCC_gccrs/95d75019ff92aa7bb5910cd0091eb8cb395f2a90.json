{"sha": "95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkNzUwMTlmZjkyYWE3YmI1OTEwY2QwMDkxZWI4Y2IzOTVmMmE5MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-03T16:47:52Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-03T16:47:52Z"}, "message": "print-tree.c (print_node, indent_to): Remove redundant prototypes.\n\n\t* print-tree.c (print_node, indent_to): Remove redundant prototypes.\n\n\t* profile.c (instrument_arcs, output_gcov_string,\n\ttablejump_entry_p): Add static prototypes.\n\t(output_gcov_string): Constify a char*.\n\n\t* regmove.c (replacement_quality, fixup_match_2): Add static\n\tprototypes.\n\n\t* resource.h (reg_dead_p): Add extern prototype.\n\n\t* rtl.c (trim_filename): Add static prototype.\n\n\t* scan-decls.c (skip_to_closing_brace): Likewise.\n\n\t* stmt.c (expand_decl_cleanup_no_eh): Hide definition.\n\t(expand_end_case): Initialize variable `range'.\n\t(emit_case_nodes): Remove unused prototype `rtx_fn'.\n\n\t* varasm.c (asm_emit_uninitialised): Add static prototype.\n\t(asm_emit_uninitialised, assemble_variable): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\nFrom-SVN: r29784", "tree": {"sha": "849386badcfcf13df29ffffb2bf195a15a495470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849386badcfcf13df29ffffb2bf195a15a495470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/comments", "author": null, "committer": null, "parents": [{"sha": "ca3075bd73284367f527e7c4e987d3c933638add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3075bd73284367f527e7c4e987d3c933638add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3075bd73284367f527e7c4e987d3c933638add"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "267ad932ccc486eaf503484f539fde12fe95be6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -1,3 +1,28 @@\n+Sun Oct  3 12:44:05 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* print-tree.c (print_node, indent_to): Remove redundant prototypes.\n+\n+\t* profile.c (instrument_arcs, output_gcov_string,\n+\ttablejump_entry_p): Add static prototypes.\n+\t(output_gcov_string): Constify a char*.\n+\t\n+\t* regmove.c (replacement_quality, fixup_match_2): Add static\n+\tprototypes.\n+\n+\t* resource.h (reg_dead_p): Add extern prototype.\n+\n+\t* rtl.c (trim_filename): Add static prototype.\n+\n+\t* scan-decls.c (skip_to_closing_brace): Likewise.\n+\n+\t* stmt.c (expand_decl_cleanup_no_eh): Hide definition.\n+\t(expand_end_case): Initialize variable `range'.\n+\t(emit_case_nodes): Remove unused prototype `rtx_fn'.\n+\n+\t* varasm.c (asm_emit_uninitialised): Add static prototype.\n+\t(asm_emit_uninitialised, assemble_variable): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\n Sun Oct  3 12:24:52 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cpplib.c (if_directive_nameo): Add static prototype."}, {"sha": "51e2ce967e1fb2115f694609bfbee97cbf9ec34e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -24,9 +24,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"ggc.h\"\n \n-void print_node ();\n-void indent_to ();\n-\n /* Define the hash table of nodes already seen.\n    Such nodes are not repeated; brief cross-references are used.  */\n "}, {"sha": "c45818b3c768e6c8d01caf0c8cb8d060dc28c164", "filename": "gcc/profile.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -157,6 +157,9 @@ static void expand_spanning_tree PROTO((int));\n static void fill_spanning_tree PROTO((int));\n static void init_arc_profiler PROTO((void));\n static void output_arc_profiler PROTO((int, rtx));\n+static void instrument_arcs PROTO((rtx, int, FILE *));\n+static void output_gcov_string PROTO((const char *, long));\n+static int tablejump_entry_p PROTO((rtx, rtx));\n \n #ifndef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE BITS_PER_WORD\n@@ -388,7 +391,7 @@ instrument_arcs (f, num_blocks, dump_file)\n \n static void\n output_gcov_string (string, delimiter)\n-     char *string;\n+     const char *string;\n      long delimiter;\n {\n   long temp;\n@@ -418,7 +421,7 @@ output_gcov_string (string, delimiter)\n /* Return TRUE if this insn must be a tablejump entry insn.  This works for\n    the MIPS port, but may give false negatives for some targets.  */\n \n-int\n+static int\n tablejump_entry_p (insn, label)\n      rtx insn, label;\n {"}, {"sha": "98061afa482720a29cafeb64b019ff47aa7740d2", "filename": "gcc/regmove.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -66,6 +66,8 @@ static int fixup_match_1 PROTO((rtx, rtx, rtx, rtx, rtx, int, int, int, FILE *))\n static int reg_is_remote_constant_p PROTO((rtx, rtx, rtx));\n static int stable_and_no_regs_but_for_p PROTO((rtx, rtx, rtx));\n static int regclass_compatible_p PROTO((int, int));\n+static int replacement_quality PROTO((rtx));\n+static int fixup_match_2 PROTO((rtx, rtx, rtx, rtx, FILE *));\n static int loop_depth;\n \n /* Return non-zero if registers with CLASS1 and CLASS2 can be merged without\n@@ -335,7 +337,7 @@ static int *regno_src_regno;\n    the choice.  The main objective is to avoid using a register that is\n    a candidate for tying to a hard register, since the output might in\n    turn be a candidate to be tied to a different hard register.  */\n-int\n+static int\n replacement_quality(reg)\n      rtx reg;\n {\n@@ -938,7 +940,7 @@ reg_is_remote_constant_p (reg, insn, first)\n /* cse disrupts preincrement / postdecrement squences when it finds a\n    hard register as ultimate source, like the frame pointer.  */\n \n-int\n+static int\n fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n      rtx insn, dst, src, offset;\n      FILE *regmove_dump_file;"}, {"sha": "a867baefce0153fd147cc828f200562536ea5a0b", "filename": "gcc/resource.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fresource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fresource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.h?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -44,3 +44,4 @@ extern void init_resource_info\t\tPROTO((rtx));\n extern void free_resource_info\t\tPROTO((void));\n extern rtx find_free_register\t\tPROTO((rtx, rtx, char *, int,\n \t\t\t\t\t       HARD_REG_SET *));\n+extern int reg_dead_p\t\t\tPROTO((rtx, rtx));"}, {"sha": "495512efceaeebebe81058baae2132acf442d3f5", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -261,6 +261,7 @@ const char * const reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"\n \n static void dump_and_abort\tPROTO((int, int, FILE *)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPROTO((char *, FILE *));\n+static const char *trim_filename PROTO((const char *));\n \f\n /* Allocate an rtx vector of N elements.\n    Store the length, and initialize all elements to zero.  */"}, {"sha": "3dafd342583f79c0ff2af6bf088f4d32a2fd98ca", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -22,6 +22,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"cpplib.h\"\n #include \"scan.h\"\n \n+static void skip_to_closing_brace PARAMS ((cpp_reader *));\n+\n int brace_nesting = 0;\n \n /* The first extern_C_braces_length elements of extern_C_braces"}, {"sha": "9d675021cbb0f2a0871bc6f0da99cd3d2edbb248", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -4052,6 +4052,7 @@ expand_decl_cleanup (decl, cleanup)\n /* Like expand_decl_cleanup, but suppress generating an exception handler\n    to perform the cleanup.  */\n \n+#if 0\n int\n expand_decl_cleanup_no_eh (decl, cleanup)\n      tree decl, cleanup;\n@@ -4065,6 +4066,7 @@ expand_decl_cleanup_no_eh (decl, cleanup)\n \n   return result;\n }\n+#endif\n \n /* Arrange for the top element of the dynamic cleanup chain to be\n    popped if we exit the current binding contour.  DECL is the\n@@ -5235,7 +5237,7 @@ void\n expand_end_case (orig_index)\n      tree orig_index;\n {\n-  tree minval = NULL_TREE, maxval = NULL_TREE, range, orig_minval;\n+  tree minval = NULL_TREE, maxval = NULL_TREE, range = NULL_TREE, orig_minval;\n   rtx default_label = 0;\n   register struct case_node *n;\n   unsigned int count;\n@@ -6065,7 +6067,6 @@ emit_case_nodes (index, node, default_label, index_type)\n {\n   /* If INDEX has an unsigned type, we must make unsigned branches.  */\n   int unsignedp = TREE_UNSIGNED (index_type);\n-  typedef rtx rtx_fn ();\n   enum machine_mode mode = GET_MODE (index);\n \n   /* See if our parents have already tested everything for us."}, {"sha": "9eb92bc3a0d16e9ce6f26ba793cf7695c043dd7d", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d75019ff92aa7bb5910cd0091eb8cb395f2a90/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=95d75019ff92aa7bb5910cd0091eb8cb395f2a90", "patch": "@@ -191,6 +191,7 @@ static void asm_output_aligned_bss\tPROTO((FILE *, tree, char *, int, int));\n static void mark_pool_constant          PROTO((struct pool_constant *));\n static void mark_pool_sym_hash_table\tPROTO((struct pool_sym **));\n static void mark_const_hash_entry\tPROTO((void *));\n+static void asm_emit_uninitialised\tPROTO((tree, char *, int, int));\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n@@ -1240,7 +1241,7 @@ asm_emit_uninitialised (decl, name, size, rounded)\n      tree decl;\n      char * name;\n      int size;\n-     int rounded;\n+     int rounded ATTRIBUTE_UNUSED;\n {\n   enum {\n     asm_dest_common,\n@@ -1317,7 +1318,7 @@ void\n assemble_variable (decl, top_level, at_end, dont_output_data)\n      tree decl;\n      int top_level ATTRIBUTE_UNUSED;\n-     int at_end;\n+     int at_end ATTRIBUTE_UNUSED;\n      int dont_output_data;\n {\n   register char *name;"}]}