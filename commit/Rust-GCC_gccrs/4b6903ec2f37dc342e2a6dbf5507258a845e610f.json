{"sha": "4b6903ec2f37dc342e2a6dbf5507258a845e610f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2OTAzZWMyZjM3ZGMzNDJlMmE2ZGJmNTUwNzI1OGE4NDVlNjEwZg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2005-05-15T12:44:42Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T12:44:42Z"}, "message": "normalize.c (almostone_r4, [...]): Fix parameter list.\n\n\t* runtime/normalize.c (almostone_r4, almostone_r8): Fix parameter\n\tlist.\n\n\t* intrinsics/random.c (KISS_DEFAULT_SEED): Remove extra semicolon.\n\n\t* io/transfer.c: Do not use empty initializers for global objects.\n\tAdd missing initializers.\n\n\t* io/lock.c: Do not use empty initializers for global objects.\n\n\t* io/close.c: Add missing initializers.\n\n\t* runtime/environ.c: Add missing initializers. Do not use empty\n\tinitializers for global object.\n\t(init_string): Mark argument as unused.\n\n\t* runtime/main.c (cleanup): Fix parameter list.\n\n\t* io/io.h: Fix parameter lists.\n\n\t* m4/transpose.m4, m4/matmul.m4: Fix pointer cast to avoid\n\twarning.\n\n\t* generated/transpose_c4.c, generated/transpose_c8.c,\n\tgenerated/transpose_i4.c, generated/transpose_i8.c,\n\tgenerated/matmul_c4.c, generated/matmul_c8.c,\n\tgenerated/matmul_i4.c, generated/matmul_i8.c,\n\tgenerated/matmul_r4.c, generated/matmul_r8.c: Regenerated.\n\n\t* io/write.c (nml_write_obj): Fix 64-bit problem.\n\n\t* io/list_read.c (nml_get_obj_data): Add missing braces around\n\tinitializer to avoid warnings.\n\n\t* intrinsics/etime.c (etime_sub): Remove unused variable.\n\nFrom-SVN: r99719", "tree": {"sha": "e3b173833fe5a555288b7444d9e410c39d71b283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b173833fe5a555288b7444d9e410c39d71b283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6903ec2f37dc342e2a6dbf5507258a845e610f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6903ec2f37dc342e2a6dbf5507258a845e610f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6903ec2f37dc342e2a6dbf5507258a845e610f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6903ec2f37dc342e2a6dbf5507258a845e610f/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "deeab82073c53d3999f99bcb70a278756a79880d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deeab82073c53d3999f99bcb70a278756a79880d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deeab82073c53d3999f99bcb70a278756a79880d"}], "stats": {"total": 201, "additions": 117, "deletions": 84}, "files": [{"sha": "ba91e8a70a4bc969137ad002f7d5dc81a021ca2c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,41 @@\n 2005-05-15  Andreas Jaeger  <aj@suse.de>\n \n+\t* runtime/normalize.c (almostone_r4, almostone_r8): Fix parameter\n+\tlist.\n+\n+\t* intrinsics/random.c (KISS_DEFAULT_SEED): Remove extra semicolon.\n+\n+\t* io/transfer.c: Do not use empty initializers for global objects.\n+\tAdd missing initializers.\n+\n+\t* io/lock.c: Do not use empty initializers for global objects.\n+\n+\t* io/close.c: Add missing initializers.\n+\n+\t* runtime/environ.c: Add missing initializers. Do not use empty\n+\tinitializers for global object.\n+\t(init_string): Mark argument as unused.\n+\n+\t* runtime/main.c (cleanup): Fix parameter list.\n+\n+\t* io/io.h: Fix parameter lists.\n+\n+\t* m4/transpose.m4, m4/matmul.m4: Fix pointer cast to avoid\n+\twarning.\n+\n+\t* generated/transpose_c4.c, generated/transpose_c8.c,\n+\tgenerated/transpose_i4.c, generated/transpose_i8.c,\n+\tgenerated/matmul_c4.c, generated/matmul_c8.c,\n+\tgenerated/matmul_i4.c, generated/matmul_i8.c,\n+\tgenerated/matmul_r4.c, generated/matmul_r8.c: Regenerated.\n+\n+\t* io/write.c (nml_write_obj): Fix 64-bit problem.\n+\n+\t* io/list_read.c (nml_get_obj_data): Add missing braces around\n+\tinitializer to avoid warnings.\n+\n+\t* intrinsics/etime.c (etime_sub): Remove unused variable.\n+\n \t* intrinsics/chdir.c, intrinsics/getlog.c, intrinsics/link.c,\n \tintrinsics/symlnk.c, intrinsics/perror.c: Include <string.h> for\n \tprototypes."}, {"sha": "40930a15bb2fb554c5fa948469d64f817927fb90", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_c4 (gfc_array_c4 * retarray, gfc_array_c4 * a, gfc_array_c4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_c4 (gfc_array_c4 * retarray, gfc_array_c4 * a, gfc_array_c4 * b)\n       GFC_COMPLEX_4 *abase_n;\n       GFC_COMPLEX_4 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_COMPLEX_4) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_COMPLEX_4) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "07b5e967dd524e6308bac7cb9b43c20a7e581302", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_c8 (gfc_array_c8 * retarray, gfc_array_c8 * a, gfc_array_c8 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_c8 (gfc_array_c8 * retarray, gfc_array_c8 * a, gfc_array_c8 * b)\n       GFC_COMPLEX_8 *abase_n;\n       GFC_COMPLEX_8 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_COMPLEX_8) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_COMPLEX_8) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "003163eb8e23af0e520b123ad562ee9dad18a836", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_i4 (gfc_array_i4 * retarray, gfc_array_i4 * a, gfc_array_i4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_i4 (gfc_array_i4 * retarray, gfc_array_i4 * a, gfc_array_i4 * b)\n       GFC_INTEGER_4 *abase_n;\n       GFC_INTEGER_4 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_INTEGER_4) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_INTEGER_4) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "f88363fb117f198b198222ea77316f9ac3ee495c", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_i8 (gfc_array_i8 * retarray, gfc_array_i8 * a, gfc_array_i8 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_i8 (gfc_array_i8 * retarray, gfc_array_i8 * a, gfc_array_i8 * b)\n       GFC_INTEGER_8 *abase_n;\n       GFC_INTEGER_8 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_INTEGER_8) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_INTEGER_8) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "f9b5cb41954ceb8db03cb1f3c0f33331bbf849d6", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -90,7 +90,7 @@ matmul_l4 (gfc_array_l4 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_LOGICAL_4) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_LOGICAL_4) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -99,14 +99,12 @@ matmul_l4 (gfc_array_l4 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n       abase = GFOR_POINTER_L8_TO_L4 (abase);\n-      astride <<= 1;\n     }\n   bbase = b->data;\n   if (GFC_DESCRIPTOR_SIZE (b) != 4)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n       bbase = GFOR_POINTER_L8_TO_L4 (bbase);\n-      bstride <<= 1;\n     }\n   dest = retarray->data;\n "}, {"sha": "0f04e76f8437f53f73e10b13ece87f508f5334f8", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -90,7 +90,7 @@ matmul_l8 (gfc_array_l8 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_LOGICAL_8) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_LOGICAL_8) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -99,14 +99,12 @@ matmul_l8 (gfc_array_l8 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n       abase = GFOR_POINTER_L8_TO_L4 (abase);\n-      astride <<= 1;\n     }\n   bbase = b->data;\n   if (GFC_DESCRIPTOR_SIZE (b) != 4)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n       bbase = GFOR_POINTER_L8_TO_L4 (bbase);\n-      bstride <<= 1;\n     }\n   dest = retarray->data;\n "}, {"sha": "7b84eb0d3f6abc70404f642c1d8c4e5d7e6f8e38", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_r4 (gfc_array_r4 * retarray, gfc_array_r4 * a, gfc_array_r4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_REAL_4) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_REAL_4) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_r4 (gfc_array_r4 * retarray, gfc_array_r4 * a, gfc_array_r4 * b)\n       GFC_REAL_4 *abase_n;\n       GFC_REAL_4 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_REAL_4) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_REAL_4) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "f2a574bc0bb2be0f1ac74448cae419c5abb00ae3", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -99,7 +99,7 @@ matmul_r8 (gfc_array_r8 * retarray, gfc_array_r8 * a, gfc_array_r8 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (GFC_REAL_8) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (GFC_REAL_8) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -178,7 +178,7 @@ matmul_r8 (gfc_array_r8 * retarray, gfc_array_r8 * a, gfc_array_r8 * b)\n       GFC_REAL_8 *abase_n;\n       GFC_REAL_8 bbase_yn;\n \n-      memset (dest, 0, (sizeof (GFC_REAL_8) * size0(retarray)));\n+      memset (dest, 0, (sizeof (GFC_REAL_8) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "76e6332730d5fdefe951d52a5c42bef7f6ebacc4", "filename": "libgfortran/generated/transpose_c4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -63,7 +63,7 @@ transpose_c4 (gfc_array_c4 * ret, gfc_array_c4 * source)\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 (ret));\n+      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) ret));\n       ret->base = 0;\n     }\n "}, {"sha": "6e45b7606404ed2e6ca5dd2ef45da2fe2a280675", "filename": "libgfortran/generated/transpose_c8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -63,7 +63,7 @@ transpose_c8 (gfc_array_c8 * ret, gfc_array_c8 * source)\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 (ret));\n+      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) ret));\n       ret->base = 0;\n     }\n "}, {"sha": "af5041e19b5d5000cc09fd1c13a6a9ddfbc5a8f5", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -63,7 +63,7 @@ transpose_i4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 (ret));\n+      ret->data = internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) ret));\n       ret->base = 0;\n     }\n "}, {"sha": "605ac7286f25031a06f106e49478e0f3e17e1eae", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -63,7 +63,7 @@ transpose_i8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 (ret));\n+      ret->data = internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) ret));\n       ret->base = 0;\n     }\n "}, {"sha": "105570087a30a928a6fe0ded75bdead446c5f019", "filename": "libgfortran/intrinsics/etime.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fintrinsics%2Fetime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fintrinsics%2Fetime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fetime.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the ETIME intrinsic.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -46,7 +46,6 @@ void\n etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result)\n {\n   GFC_REAL_4 tu, ts, tt, *tp;\n-  index_type dim;\n \n #if defined(HAVE_SYS_TIME_H) && defined(HAVE_SYS_RESOURCE_H)\n   struct rusage rt;"}, {"sha": "ed65c99d99406a07b0215a5a9a11e93696083113", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RANDOM intrinsics\n-   Copyright 2002, 2004 Free Software Foundation, Inc.\n+   Copyright 2002, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Lars Segerlund <seger@linuxmail.org>\n    and Steve Kargl.\n \n@@ -440,7 +440,7 @@ KISS algorithm.  */\n #define GFC_SR(k, n)\t((k)^((k)>>(n)))\n \n static const GFC_INTEGER_4 kiss_size = 4;\n-#define KISS_DEFAULT_SEED {123456789, 362436069, 521288629, 916191069};\n+#define KISS_DEFAULT_SEED {123456789, 362436069, 521288629, 916191069}\n static const GFC_UINTEGER_4 kiss_default_seed[4] = KISS_DEFAULT_SEED;\n static GFC_UINTEGER_4 kiss_seed[4] = KISS_DEFAULT_SEED;\n "}, {"sha": "ee4fb974e5ebe96f27e6a00143762cfafc938474", "filename": "libgfortran/io/close.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fclose.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002-2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -38,7 +38,7 @@ close_status;\n static st_option status_opt[] = {\n   {\"keep\", CLOSE_KEEP},\n   {\"delete\", CLOSE_DELETE},\n-  {NULL}\n+  {NULL, 0}\n };\n \n "}, {"sha": "d98f28ad7ccf114bca54d33d2aa64a83c384e104", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -597,13 +597,13 @@ internal_proto(list_formatted_read);\n extern void finish_list_read (void);\n internal_proto(finish_list_read);\n \n-extern void init_at_eol();\n+extern void init_at_eol (void);\n internal_proto(init_at_eol);\n \n-extern void namelist_read();\n+extern void namelist_read (void);\n internal_proto(namelist_read);\n \n-extern void namelist_write();\n+extern void namelist_write (void);\n internal_proto(namelist_write);\n \n /* write.c */"}, {"sha": "0e2cb41be799ecb0523bee8348a73430ae2afb44", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -2188,8 +2188,8 @@ nml_get_obj_data (void)\n \n   if (c == '(' && nl->type == GFC_DTYPE_CHARACTER)\n     {\n-      descriptor_dimension chd[1] = {1, clow, nl->string_length};\n-      nml_loop_spec ind[1] = {1, clow, nl->string_length, 1};\n+      descriptor_dimension chd[1] = { {1, clow, nl->string_length} };\n+      nml_loop_spec ind[1] = { {1, clow, nl->string_length, 1} };\n \n       if (nml_parse_qualifier (chd, ind, 1) == FAILURE)\n \t{"}, {"sha": "516d87053174d32f7fe914e73c5dba321cfd7fde", "filename": "libgfortran/io/lock.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flock.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -33,11 +33,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n #include \"io.h\"\n \n-st_parameter ioparm = { };\n+st_parameter ioparm;\n iexport_data(ioparm);\n \n-namelist_info *ionml = 0;\n-global_t g = { };\n+namelist_info *ionml;\n+global_t g;\n \n \n /* library_start()-- Called with a library call is entered.  */"}, {"sha": "1122a50b6d6bab8f827062f3645aa675772af05b", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -82,15 +82,15 @@ gfc_unit *current_unit = NULL;\n static int sf_seen_eor = 0;\n static int eor_condition = 0;\n \n-char scratch[SCRATCH_SIZE] = { };\n+char scratch[SCRATCH_SIZE];\n static char *line_buffer = NULL;\n \n static unit_advance advance_status;\n \n static st_option advance_opt[] = {\n   {\"yes\", ADVANCE_YES},\n   {\"no\", ADVANCE_NO},\n-  {NULL}\n+  {NULL, 0}\n };\n \n "}, {"sha": "553557d7b885b79a7e031fdbaeaa972eec1527d9", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1490,7 +1490,7 @@ nml_write_obj (namelist_info * obj, index_type offset,\n \t\t{\n \t\t  strcat (ext_name, dim_i ? \"\" : \"(\");\n \t\t  clen = strlen (ext_name);\n-\t\t  st_sprintf (ext_name + clen, \"%d\", obj->ls[dim_i].idx);\n+\t\t  st_sprintf (ext_name + clen, \"%ld\", (long) obj->ls[dim_i].idx);\n \t\t  strcat (ext_name, (dim_i == obj->var_rank - 1) ? \")\" : \",\");\n \t\t}\n "}, {"sha": "1d1ec6018a9e7e97bc2d0653d8c92b88c93c98b5", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -100,7 +100,7 @@ matmul_`'rtype_code (rtype * retarray, rtype * a, rtype * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (rtype_name) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -180,7 +180,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n       rtype_name *abase_n;\n       rtype_name bbase_yn;\n \n-      memset (dest, 0, (sizeof (rtype_name) * size0(retarray)));\n+      memset (dest, 0, (sizeof (rtype_name) * size0((array_t *) retarray)));\n \n       for (y = 0; y < ycount; y++)\n \t{"}, {"sha": "2ec1495a40a696b32b1679fd36355f9199cdec46", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -64,7 +64,7 @@ transpose_`'rtype_code (rtype * ret, rtype * source)\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (rtype_name) * size0 (ret));\n+      ret->data = internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) ret));\n       ret->base = 0;\n     }\n "}, {"sha": "4c2cd99ad158f544c94a67dd5226e35815998a19", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n  * but other variables are checked during execution of the user's\n  * program. */\n \n-options_t options = { };\n+options_t options;\n \n \n typedef struct variable\n@@ -326,7 +326,7 @@ show_sep (variable * v)\n \n \n static void\n-init_string (variable * v)\n+init_string (variable * v __attribute__ ((unused)))\n {\n }\n \n@@ -361,22 +361,22 @@ static choice rounding[] = {\n   {\"UP\", FP_ROUND_UP},\n   {\"DOWN\", FP_ROUND_DOWN},\n   {\"ZERO\", FP_ROUND_ZERO},\n-  {NULL}\n+  {NULL, 0}\n };\n \n static choice precision[] =\n {\n   { \"24\", 1},\n   { \"53\", 2},\n   { \"64\", 0},\n-  { NULL}\n+  { NULL, 0}\n };\n \n static choice signal_choices[] =\n {\n   { \"IGNORE\", 1},\n   { \"ABORT\", 0},\n-  { NULL}\n+  { NULL, 0}\n };\n \n \n@@ -463,98 +463,100 @@ show_signal (variable * v)\n static variable variable_table[] = {\n   {\"GFORTRAN_STDIN_UNIT\", 5, &options.stdin_unit, init_integer, show_integer,\n    \"Unit number that will be preconnected to standard input\\n\"\n-   \"(No preconnection if negative)\"},\n+   \"(No preconnection if negative)\", 0},\n \n   {\"GFORTRAN_STDOUT_UNIT\", 6, &options.stdout_unit, init_integer,\n    show_integer,\n    \"Unit number that will be preconnected to standard output\\n\"\n-   \"(No preconnection if negative)\"},\n+   \"(No preconnection if negative)\", 0},\n \n   {\"GFORTRAN_STDERR_UNIT\", 0, &options.stderr_unit, init_integer,\n    show_integer,\n    \"Unit number that will be preconnected to standard error\\n\"\n-   \"(No preconnection if negative)\"},\n+   \"(No preconnection if negative)\", 0},\n \n   {\"GFORTRAN_USE_STDERR\", 1, &options.use_stderr, init_boolean,\n    show_boolean,\n-   \"Sends library output to standard error instead of standard output.\"},\n+   \"Sends library output to standard error instead of standard output.\", 0},\n \n   {\"GFORTRAN_TMPDIR\", 0, NULL, init_string, show_string,\n    \"Directory for scratch files.  Overrides the TMP environment variable\\n\"\n-   \"If TMP is not set \" DEFAULT_TEMPDIR \" is used.\"},\n+   \"If TMP is not set \" DEFAULT_TEMPDIR \" is used.\", 0},\n \n   {\"GFORTRAN_UNBUFFERED_ALL\", 0, &options.all_unbuffered, init_boolean,\n    show_boolean,\n    \"If TRUE, all output is unbuffered.  This will slow down large writes \"\n-   \"but can be\\nuseful for forcing data to be displayed immediately.\"},\n+   \"but can be\\nuseful for forcing data to be displayed immediately.\", 0},\n \n   {\"GFORTRAN_SHOW_LOCUS\", 1, &options.locus, init_boolean, show_boolean,\n-   \"If TRUE, print filename and line number where runtime errors happen.\"},\n+   \"If TRUE, print filename and line number where runtime errors happen.\", 0},\n \n   {\"GFORTRAN_OPTIONAL_PLUS\", 0, &options.optional_plus, init_boolean, show_boolean,\n-   \"Print optional plus signs in numbers where permitted.  Default FALSE.\"},\n+   \"Print optional plus signs in numbers where permitted.  Default FALSE.\", 0},\n \n   {\"GFORTRAN_DEFAULT_RECL\", DEFAULT_RECL, &options.default_recl,\n    init_unsigned_integer, show_integer,\n    \"Default maximum record length for sequential files.  Most useful for\\n\"\n    \"adjusting line length of preconnected units.  Default \"\n-   stringize (DEFAULT_RECL)},\n+   stringize (DEFAULT_RECL), 0},\n \n   {\"GFORTRAN_LIST_SEPARATOR\", 0, NULL, init_sep, show_sep,\n    \"Separatator to use when writing list output.  May contain any number of \"\n-   \"spaces\\nand at most one comma.  Default is a single space.\"},\n+   \"spaces\\nand at most one comma.  Default is a single space.\", 0},\n \n   /* Memory related controls */\n \n   {\"GFORTRAN_MEM_INIT\", 0, NULL, init_mem, show_mem,\n    \"How to initialize allocated memory.  Default value is NONE for no \"\n    \"initialization\\n(faster), NAN for a Not-a-Number with the mantissa \"\n-   \"0x40f95 or a custom\\nhexadecimal value\"},\n+   \"0x40f95 or a custom\\nhexadecimal value\", 0},\n \n   {\"GFORTRAN_MEM_CHECK\", 0, &options.mem_check, init_boolean, show_boolean,\n-   \"Whether memory still allocated will be reported when the program ends.\"},\n+   \"Whether memory still allocated will be reported when the program ends.\",\n+   0},\n \n   /* Signal handling (Unix).  */\n \n   {\"GFORTRAN_SIGHUP\", 0, &options.sighup, init_signal, show_signal,\n-   \"Whether the program will IGNORE or ABORT on SIGHUP.\"},\n+   \"Whether the program will IGNORE or ABORT on SIGHUP.\", 0},\n \n   {\"GFORTRAN_SIGINT\", 0, &options.sigint, init_signal, show_signal,\n-   \"Whether the program will IGNORE or ABORT on SIGINT.\"},\n+   \"Whether the program will IGNORE or ABORT on SIGINT.\", 0},\n \n   /* Floating point control */\n \n   {\"GFORTRAN_FPU_ROUND\", 0, &options.fpu_round, init_round, show_round,\n-   \"Set floating point rounding.  Values are NEAREST, UP, DOWN, ZERO.\"},\n+   \"Set floating point rounding.  Values are NEAREST, UP, DOWN, ZERO.\", 0},\n \n   {\"GFORTRAN_FPU_PRECISION\", 0, &options.fpu_precision, init_precision,\n    show_precision,\n-   \"Precision of intermediate results.  Values are 24, 53 and 64.\"},\n+   \"Precision of intermediate results.  Values are 24, 53 and 64.\", 0},\n \n   {\"GFORTRAN_FPU_INVALID\", 1, &options.fpu_invalid, init_boolean,\n    show_boolean,\n-   \"Raise a floating point exception on invalid FP operation.\"},\n+   \"Raise a floating point exception on invalid FP operation.\", 0},\n \n   {\"GFORTRAN_FPU_DENORMAL\", 1, &options.fpu_denormal, init_boolean,\n    show_boolean,\n-   \"Raise a floating point exception when denormal numbers are encountered.\"},\n+   \"Raise a floating point exception when denormal numbers are encountered.\",\n+   0},\n \n   {\"GFORTRAN_FPU_ZERO\", 0, &options.fpu_zerodiv, init_boolean, show_boolean,\n-   \"Raise a floating point exception when dividing by zero.\"},\n+   \"Raise a floating point exception when dividing by zero.\", 0},\n \n   {\"GFORTRAN_FPU_OVERFLOW\", 0, &options.fpu_overflow, init_boolean,\n    show_boolean,\n-   \"Raise a floating point exception on overflow.\"},\n+   \"Raise a floating point exception on overflow.\", 0},\n \n   {\"GFORTRAN_FPU_UNDERFLOW\", 0, &options.fpu_underflow, init_boolean,\n    show_boolean,\n-   \"Raise a floating point exception on underflow.\"},\n+   \"Raise a floating point exception on underflow.\", 0},\n \n   {\"GFORTRAN_FPU_PRECISION\", 0, &options.fpu_precision_loss, init_boolean,\n    show_boolean,\n-   \"Raise a floating point exception on precision loss.\"},\n+   \"Raise a floating point exception on precision loss.\", 0},\n \n-  {NULL}\n+  {NULL, 0, NULL, NULL, NULL, NULL, 0}\n };\n \n "}, {"sha": "d2cedf7037105c5ecb1d2146a4fc18185ca126e8", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002-2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2002-2003, 2005 Free Software Foundation, Inc.\n    Contributed by Andy Vaught and Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -113,7 +113,7 @@ init (void)\n /* Cleanup the runtime library.  */\n \n static void __attribute__((destructor))\n-cleanup ()\n+cleanup (void)\n {\n   close_units ();\n }"}, {"sha": "350cd0c4b526314817424ce6fd2559f1ff782a71", "filename": "libgfortran/runtime/normalize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fnormalize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6903ec2f37dc342e2a6dbf5507258a845e610f/libgfortran%2Fruntime%2Fnormalize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fnormalize.c?ref=4b6903ec2f37dc342e2a6dbf5507258a845e610f", "patch": "@@ -1,5 +1,5 @@\n /* Nelper routines to convert from integer to real.\n-   Copyright 2004 Free Software Foundation, Inc.\n+   Copyright 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n /* Return the largest value less than one representable in a REAL*4.  */\n \n static inline GFC_REAL_4\n-almostone_r4 ()\n+almostone_r4 (void)\n {\n #ifdef HAVE_NEXTAFTERF\n   return nextafterf (1.0f, 0.0f);\n@@ -65,7 +65,7 @@ almostone_r4 ()\n /* Return the largest value less than one representable in a REAL*8.  */\n \n static inline GFC_REAL_8\n-almostone_r8 ()\n+almostone_r8 (void)\n {\n #ifdef HAVE_NEXTAFTER\n   return nextafter (1.0, 0.0);"}]}