{"sha": "f922d945244558904be6868dc036c31fd05750dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyMmQ5NDUyNDQ1NTg5MDRiZTY4NjhkYzAzNmMzMWZkMDU3NTBkZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-10-13T18:58:50Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-10-13T18:58:50Z"}, "message": "[Darwin, machopic 8/n] Back out part of PR71767 fix.\n\nWe applied a conservative, but fairly large, hammer to fix PR71767.\nHowever, ideally, we want minimise the number of symbols visible to\nld64 and to match the cases emitted by clang (since that's what ld64\nis expecting).  Now we've improved the handling of indirections, we\ncan make the indirection symbols local when they are in the regular\nnon-lazy symbol pointers section.  We will continue to make any\nindirections in the data section visible (since right now we have no\nway to track if a given symbol follows a weak global).\nThis change makes no difference to handling of labels for constants\n(to be revised in a future patch).\n\nThere's a mechanical change to a number of tests (allowing 'l' or 'L'\nas the indirection symbol prefix).\n\ngcc/ChangeLog:\n\n2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin.c (machopic_indirection_name): Rework the\n\tfunction to emit linker-visible symbols only for indirections\n\tin the data section.  Clean up the code and update comments.\n\ngcc/testsuite/ChangeLog:\n\n2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* gcc.target/i386/indirect-thunk-1.c: Allow 'l' or 'L' in\n\tindirection label prefix, for Darwin.\n\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n\t* gcc.target/i386/pr32219-2.c: Likewise.\n\t* gcc.target/i386/pr32219-3.c: Likewise.\n\t* gcc.target/i386/pr32219-4.c: Likewise.\n\t* gcc.target/i386/pr32219-7.c: Likewise.\n\t* gcc.target/i386/pr32219-8.c: Likewise.\n\t* gcc.target/i386/ret-thunk-14.c: Likewise.\n\t* gcc.target/i386/ret-thunk-15.c: Likewise.\n\t* gcc.target/i386/ret-thunk-9.c: Likewise.\n\nFrom-SVN: r276943", "tree": {"sha": "7383287eef15a75a68885e7e0ab27a4bc6cbd000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7383287eef15a75a68885e7e0ab27a4bc6cbd000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f922d945244558904be6868dc036c31fd05750dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f922d945244558904be6868dc036c31fd05750dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f922d945244558904be6868dc036c31fd05750dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f922d945244558904be6868dc036c31fd05750dd/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f192f7687d0cce6cf81e188745a48c71b4b019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f192f7687d0cce6cf81e188745a48c71b4b019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f192f7687d0cce6cf81e188745a48c71b4b019"}], "stats": {"total": 196, "additions": 105, "deletions": 91}, "files": [{"sha": "61c8a0f14826ce05b651afdfcc5e52c09c31708d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -1,3 +1,9 @@\n+2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (machopic_indirection_name): Rework the\n+\tfunction to emit linker-visible symbols only for indirections\n+\tin the data section.  Clean up the code and update comments.\n+\n 2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.c (machopic_indirect_data_reference): Remove"}, {"sha": "8635fc2b441caba4ffecc27c88915d0705d82b10", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 43, "deletions": 65, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -495,7 +495,7 @@ indirection_hasher::equal (machopic_indirection *s, const char *k)\n /* Return the name of the non-lazy pointer (if STUB_P is false) or\n    stub (if STUB_B is true) corresponding to the given name.\n \n-  If we have a situation like:\n+  PR71767 - If we have a situation like:\n \n global_weak_symbol:\n   ....\n@@ -504,80 +504,70 @@ indirection_hasher::equal (machopic_indirection *s, const char *k)\n \n   ld64 will be unable to split this into two atoms (because the \"L\" makes\n   the second symbol 'invisible').  This means that legitimate direct accesses\n-  to the second symbol will appear to be non-allowed direct accesses to an\n-  atom of type weak, global which are not allowed.\n+  to the second symbol will appear to be direct accesses to an atom of type\n+  weak, global which are not allowed.\n \n-  To avoid this, we make the indirections have a leading 'l' (lower-case L)\n-  which has a special meaning: linker can see this and use it to determine\n-  atoms, but it is not placed into the final symbol table.\n-\n-  The implementation here is somewhat heavy-handed in that it will also mark\n-  indirections to the __IMPORT,__pointers section the same way which is\n-  really unnecessary, since ld64 _can_ split those into atoms as they are\n-  fixed size.  FIXME: determine if this is a penalty worth extra code to\n-  fix.\n+  To avoid this, we make any data-section indirections have a leading 'l'\n+  (lower-case L) which has a special meaning: linker can see this and use\n+  it to determine  atoms, but it is not placed into the final symbol table.\n \n+  Symbols in the non-lazy symbol pointers section (or stubs) do not have this\n+  problem because ld64 already knows the size of each entry.\n */\n \n const char *\n machopic_indirection_name (rtx sym_ref, bool stub_p)\n {\n-  char *buffer;\n   const char *name = XSTR (sym_ref, 0);\n-  size_t namelen = strlen (name);\n-  machopic_indirection *p;\n-  bool needs_quotes;\n-  const char *suffix;\n-  char L_or_l = 'L';\n-  const char *prefix = user_label_prefix;\n-  const char *quote = \"\";\n-  tree id;\n-\n-  id = maybe_get_identifier (name);\n+  tree id = maybe_get_identifier (name);\n   if (id)\n     {\n       tree id_orig = id;\n \n       while (IDENTIFIER_TRANSPARENT_ALIAS (id))\n \tid = TREE_CHAIN (id);\n       if (id != id_orig)\n-\t{\n-\t  name = IDENTIFIER_POINTER (id);\n-\t  namelen = strlen (name);\n-\t}\n+\tname = IDENTIFIER_POINTER (id);\n     }\n \n+  const char *prefix = user_label_prefix;\n+  /* If we are emitting the label 'verbatim' then omit the U_L_P and count\n+     the name without the leading '*'.  */\n   if (name[0] == '*')\n     {\n       prefix = \"\";\n       ++name;\n-      --namelen;\n     }\n \n-  needs_quotes = name_needs_quotes (name);\n-  if (needs_quotes)\n-    {\n-      quote = \"\\\"\";\n-    }\n-\n-  if (stub_p)\n-    suffix = STUB_SUFFIX;\n-  else\n-    {\n-      suffix = NON_LAZY_POINTER_SUFFIX;\n-      /* Let the linker see this.  */\n-      L_or_l = 'l';\n-    }\n-\n-  buffer = XALLOCAVEC (char, 2  /* strlen (\"&L\") or (\"&l\") */\n-\t\t   + strlen (prefix)\n-\t\t   + namelen\n-\t\t   + strlen (suffix)\n-\t\t   + 2 * strlen (quote)\n-\t\t   + 1 /* '\\0' */);\n+  /* Here we are undoing a number of causes that placed some indirections\n+     (apparently erroneously) into the .data section.  Specifically, some\n+     symbols that are ABI mandated indirections and some hidden symbols\n+     were being placed there - which cause difficulties with later\n+     versions of ld64.  Iff (after these checks) some symbol still gets an\n+     indirection in the data section, we want to adjust the indirection\n+     name to be linker visible to deal with PR71767 (notes above).  */\n+  bool nlsp_in_data_section =\n+       ! MACHO_SYMBOL_MUST_INDIRECT_P (sym_ref)\n+    && ! MACHO_SYMBOL_HIDDEN_VIS_P (sym_ref)\n+    && (machopic_symbol_defined_p (sym_ref) || SYMBOL_REF_LOCAL_P (sym_ref))\n+    && ! indirect_data (sym_ref);\n+\n+  const char *suffix = stub_p ? STUB_SUFFIX : NON_LAZY_POINTER_SUFFIX;\n+  /* If the indirection is in the data section, let the linker see it.  */\n+  char L_or_l = (!stub_p && nlsp_in_data_section) ? 'l' : 'L';\n+  /* We have mangled symbols with spaces and punctuation which typically\n+     need surrounding in quotes for the assembler to consume them.  */\n+  const char *quote = name_needs_quotes (name) ? \"\\\"\" : \"\";\n+  char *buffer = XALLOCAVEC (char, 2  /* strlen (\"&L\") or (\"&l\") */\n+\t\t\t     + strlen (prefix)\n+\t\t\t     + strlen (name)\n+\t\t\t     + strlen (suffix)\n+\t\t\t     + 2 * strlen (quote)\n+\t\t\t     + 1 /* '\\0' */);\n \n   /* Construct the name of the non-lazy pointer or stub.  */\n-  sprintf (buffer, \"&%s%c%s%s%s%s\", quote, L_or_l, prefix, name, suffix, quote);\n+  sprintf (buffer, \"&%s%c%s%s%s%s\", quote, L_or_l, prefix, name,\n+\t   suffix, quote);\n \n   if (!machopic_indirections)\n     machopic_indirections = hash_table<indirection_hasher>::create_ggc (37);\n@@ -586,29 +576,17 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n     = machopic_indirections->find_slot_with_hash (buffer,\n \t\t\t\t\t\t  htab_hash_string (buffer),\n \t\t\t\t\t\t  INSERT);\n+  machopic_indirection *p;\n   if (*slot)\n-    {\n-      p = *slot;\n-    }\n+    p = *slot;\n   else\n     {\n       p = ggc_alloc<machopic_indirection> ();\n       p->symbol = sym_ref;\n       p->ptr_name = xstrdup (buffer);\n       p->stub_p = stub_p;\n       p->used = false;\n-      /* Here we are undoing a number of causes that placed some indirections\n-\t (apparently erroneously) into the .data section.  Specifically, some\n-\t symbols that are ABI mandated indirections and some hidden symbols\n-\t were being placed there - which cause difficulties with later\n-\t versions of ld64.\n-      */\n-      p->nlsp_in_data_section =\n-\t   ! MACHO_SYMBOL_MUST_INDIRECT_P (sym_ref)\n-\t&& ! MACHO_SYMBOL_HIDDEN_VIS_P (sym_ref)\n-\t&& (machopic_symbol_defined_p (sym_ref)\n-\t    || SYMBOL_REF_LOCAL_P (sym_ref))\n-\t&& ! indirect_data (sym_ref);\n+      p->nlsp_in_data_section = nlsp_in_data_section;\n       *slot = p;\n     }\n "}, {"sha": "c14075b80c3d43f6915f04c1de791fb52986c5e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -1,3 +1,33 @@\n+2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.target/i386/indirect-thunk-1.c: Allow 'l' or 'L' in\n+\tindirection label prefix, for Darwin.\n+\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n+\t* gcc.target/i386/pr32219-2.c: Likewise.\n+\t* gcc.target/i386/pr32219-3.c: Likewise.\n+\t* gcc.target/i386/pr32219-4.c: Likewise.\n+\t* gcc.target/i386/pr32219-7.c: Likewise.\n+\t* gcc.target/i386/pr32219-8.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-14.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-15.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-9.c: Likewise.\n+\n 2019-10-13  Damian Rouson  <damain@sourceryinstitue.org>\n \n \tPR fortran/91513"}, {"sha": "e2914a8333cc7cb52800c78f1001c57f346fe2a5", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "d2b7c74b1434fb966b1484a29fd7efd0955010c7", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "129fb2125f014a49c62003b964d1201789c737c1", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "01996fb029f87c4a8a4342cc2ba8fa06dedfa46d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "1493e18243bf4b103d3a2a059562ed845f3d5e4b", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -17,7 +17,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "3ddd4980b69162e962e351d1c889be1a8bf23235", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */"}, {"sha": "43d5f95b4fb4cfdb48c4c44ccae04f4f89d54966", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -17,7 +17,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times {jmp[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {call[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler {\\tpause} } } */"}, {"sha": "bf62636c63cc7849d6525063251992e4c4842928", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -16,7 +16,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times {jmp[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {call[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler {\\tpause} } } */"}, {"sha": "27ba82932e4e2978f39975fa404c4bf9d9ae9643", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -17,7 +17,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not {jmp[ \\t]*\\.?LIND} } } */"}, {"sha": "bdf15d36bac6abaa9a3cddc76b9aebaff7b88ebd", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -16,7 +16,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not {jmp[ \\t]*\\.?LIND} } } */"}, {"sha": "c30c331c23b18315187e890650584378df59d4d0", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not {jmp[ \\t]*\\.?LIND} } } */"}, {"sha": "7edd73130275efcf7ba3f74fb420aa547fa519ef", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not {jmp[ \\t]*\\.?LIND} } } */"}, {"sha": "8e391797c5e9059770c79d9742ff4cac94019d71", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not {jmp[ \\t]*\\.?LIND} } } */"}, {"sha": "6033d13e8a7fb3af34f6d65a6da2141a570681d7", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,6 +15,6 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "ef3577d29341130ea92681da0d6df7449160e6b6", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {\\tpause} } } */"}, {"sha": "f26a5fb901529317ad2b98456ea02a4cda468e77", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -14,7 +14,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler {jmp[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler {\\tpause} } } */"}, {"sha": "3b8a1eeaffb3867481f578ae9fc2c5cf84f9dd37", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times {jmp[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {call[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {\\tpause} 1 } } */"}, {"sha": "40d31803a2e78b577f5915e3ce403b0e51bd59f2", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -15,7 +15,7 @@ male_indirect_jump (long offset)\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*dispatch\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_dispatch} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_dispatch\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times {jmp[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {call[ \\t]*\\.?LIND} 2 } } */\n /* { dg-final { scan-assembler-times {\\tpause} 1 } } */"}, {"sha": "b6212f7dd4c93632f265fa4b881080df9734b3e1", "filename": "gcc/testsuite/gcc.target/i386/pr32219-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -20,5 +20,5 @@ foo ()\n /* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n \n /* Darwin m32 defaults to PIC but common symbols need to be indirected.  */\n-/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t][Ll]_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n "}, {"sha": "a1b0df28d0d886c07154fd3e46bfbe5a7e6668bf", "filename": "gcc/testsuite/gcc.target/i386/pr32219-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -24,4 +24,4 @@ foo ()\n \n /* For Darwin, we need PIC to allow PIE, but also we must indirect weak symbols so that\n    they can be indirected.  Again, dyld knows how to deal with this. */\n-/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t][Ll]_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "31d0710b7ed9b62b7703a59ca29b22ef6df18929", "filename": "gcc/testsuite/gcc.target/i386/pr32219-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -21,4 +21,4 @@ foo ()\n /* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n \n /* Darwin m32 equivalent (indirect and PIC).  */\n-/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t][Ll]_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "20fef8dd0638987856d546d9e720091dd27c577c", "filename": "gcc/testsuite/gcc.target/i386/pr32219-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -23,4 +23,4 @@ foo ()\n /* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n \n /* Darwin m32 equivalent (indirect and PIC).  */\n-/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t][Ll]_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "767928f049ec76326e85e3003f2cf9b3ca49d90a", "filename": "gcc/testsuite/gcc.target/i386/pr32219-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -21,4 +21,4 @@ foo ()\n /* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n \n /* Darwin m32 default to PIC but needs indirection for the weak symbol.  */\n-/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t][Ll]_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "881f541772c900abb65dff544512d948d1261d8f", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -19,6 +19,6 @@ foo (void)\n /* { dg-final { scan-assembler {call[ \\t]*\\.?LIND} } } */\n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*bar\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_bar} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" } } */"}, {"sha": "5687440bf31d19ae29e658b34f16fc708907d5b5", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -19,6 +19,6 @@ foo (void)\n /* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*bar\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_bar} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" } } */"}, {"sha": "3d4497000dcecc5edc66ebe829de8a51a16e8c04", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f922d945244558904be6868dc036c31fd05750dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c?ref=f922d945244558904be6868dc036c31fd05750dd", "patch": "@@ -17,7 +17,7 @@ foo (void)\n /* { dg-final { scan-assembler \"_?__x86_return_thunk:\" } } */\n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*bar\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler {movq[ \\t]*_bar} { target { lp64 && *-*-darwin* } } } } */\n-/* { dg-final { scan-assembler {movl[ \\t]*l_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]*[Ll]_bar\\$non_lazy_ptr-L[0-9]+\\$pb} { target { ia32 && *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times {\\tpause} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlfence} 2 } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__x86_indirect_thunk_(r|e)ax\" } } */"}]}