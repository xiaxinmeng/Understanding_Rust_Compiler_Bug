{"sha": "a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhN2QxMGVkNTNjMDdlMWNjZmE2NzE2YzViYmMxZGZkOGJjMDVmOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-05-07T12:44:50Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-05-07T12:44:50Z"}, "message": "gimple-ssa-strength-reduction.c (lazy_create_slsr_reg): Remove.\n\n2013-05-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gimple-ssa-strength-reduction.c (lazy_create_slsr_reg): Remove.\n\t(replace_mult_candidate): Remove unnecessary argument; remove\n\tunnecessary parameter from call to introduce_cast_before_cand.\n\t(replace_unconditional_candidate): Remove unnecessary parameter\n\tfrom call to replace_mult_candidate.\n\t(replace_conditional_candidate): Likewise.\n\t(insert_initializers): Use make_temp_ssa_name.\n\t(introduce_cast_before_cand): Remove unnecessary argument; use\n\tmake_temp_ssa_name.\n\t(replace_one_candidate): Remove unnecessary argument; remove\n\tunnecessary parameter from calls to introduce_cast_before_cand.\n\t(replace_profitable_candidates): Remove unnecessary parameters\n\tfrom calls to replace_one_candidate.\n\nFrom-SVN: r198679", "tree": {"sha": "2b906f5c5a796e165ae8fde78f76f5fb1e362f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b906f5c5a796e165ae8fde78f76f5fb1e362f68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "291058682249995a72221087db43fe83f005556b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291058682249995a72221087db43fe83f005556b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291058682249995a72221087db43fe83f005556b"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "c62833d0e2471f5b5161cc57815d786e93bbfdf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "patch": "@@ -1,3 +1,19 @@\n+2013-05-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (lazy_create_slsr_reg): Remove.\n+\t(replace_mult_candidate): Remove unnecessary argument; remove\n+\tunnecessary parameter from call to introduce_cast_before_cand.\n+\t(replace_unconditional_candidate): Remove unnecessary parameter\n+\tfrom call to replace_mult_candidate.\n+\t(replace_conditional_candidate): Likewise.\n+\t(insert_initializers): Use make_temp_ssa_name.\n+\t(introduce_cast_before_cand): Remove unnecessary argument; use\n+\tmake_temp_ssa_name.\n+\t(replace_one_candidate): Remove unnecessary argument; remove\n+\tunnecessary parameter from calls to introduce_cast_before_cand.\n+\t(replace_profitable_candidates): Remove unnecessary parameters\n+\tfrom calls to replace_one_candidate.\n+\n 2013-05-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (find_phi_def): Don't record a"}, {"sha": "dd8505788780d3d243584886a4ca48e216adce34", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "patch": "@@ -376,7 +376,7 @@ static bool address_arithmetic_p;\n \n /* Forward function declarations.  */\n static slsr_cand_t base_cand_from_table (tree);\n-static tree introduce_cast_before_cand (slsr_cand_t, tree, tree, tree*);\n+static tree introduce_cast_before_cand (slsr_cand_t, tree, tree);\n \f\n /* Produce a pointer to the IDX'th candidate in the candidate vector.  */\n \n@@ -1834,16 +1834,6 @@ cand_abs_increment (slsr_cand_t c)\n   return increment;\n }\n \n-/* If *VAR is NULL or is not of a compatible type with TYPE, create a\n-   new temporary reg of type TYPE and store it in *VAR.  */\n-\n-static inline void\n-lazy_create_slsr_reg (tree *var, tree type)\n-{\n-  if (!*var || !types_compatible_p (TREE_TYPE (*var), type))\n-    *var = create_tmp_reg (type, \"slsr\");\n-}\n-\n /* Return TRUE iff candidate C has already been replaced under\n    another interpretation.  */\n \n@@ -1857,8 +1847,7 @@ cand_already_replaced (slsr_cand_t c)\n    replace_conditional_candidate.  */\n \n static void\n-replace_mult_candidate (slsr_cand_t c, tree basis_name, double_int bump,\n-\t\t\ttree *var)\n+replace_mult_candidate (slsr_cand_t c, tree basis_name, double_int bump)\n {\n   tree target_type = TREE_TYPE (gimple_assign_lhs (c->cand_stmt));\n   enum tree_code cand_code = gimple_assign_rhs_code (c->cand_stmt);\n@@ -1885,8 +1874,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, double_int bump,\n       /* If the basis name and the candidate's LHS have incompatible\n \t types, introduce a cast.  */\n       if (!useless_type_conversion_p (target_type, TREE_TYPE (basis_name)))\n-\tbasis_name = introduce_cast_before_cand (c, target_type,\n-\t\t\t\t\t\t basis_name, var);\n+\tbasis_name = introduce_cast_before_cand (c, target_type, basis_name);\n       if (bump.is_negative ())\n \t{\n \t  code = MINUS_EXPR;\n@@ -1961,7 +1949,6 @@ replace_unconditional_candidate (slsr_cand_t c)\n {\n   slsr_cand_t basis;\n   double_int stride, bump;\n-  tree var = NULL;\n \n   if (cand_already_replaced (c))\n     return;\n@@ -1970,7 +1957,7 @@ replace_unconditional_candidate (slsr_cand_t c)\n   stride = tree_to_double_int (c->stride);\n   bump = cand_increment (c) * stride;\n \n-  replace_mult_candidate (c, gimple_assign_lhs (basis->cand_stmt), bump, &var);\n+  replace_mult_candidate (c, gimple_assign_lhs (basis->cand_stmt), bump);\n }\n \f\n /* Return the index in the increment vector of the given INCREMENT.  */\n@@ -2166,7 +2153,7 @@ create_phi_basis (slsr_cand_t c, gimple from_phi, tree basis_name,\n static void\n replace_conditional_candidate (slsr_cand_t c)\n {\n-  tree basis_name, name, var = NULL;\n+  tree basis_name, name;\n   slsr_cand_t basis;\n   location_t loc;\n   double_int stride, bump;\n@@ -2185,7 +2172,7 @@ replace_conditional_candidate (slsr_cand_t c)\n   stride = tree_to_double_int (c->stride);\n   bump = c->index * stride;\n \n-  replace_mult_candidate (c, name, bump, &var);\n+  replace_mult_candidate (c, name, bump);\n }\n \n /* Compute the expected costs of inserting basis adjustments for\n@@ -2941,7 +2928,6 @@ static void\n insert_initializers (slsr_cand_t c)\n {\n   unsigned i;\n-  tree new_var = NULL_TREE;\n \n   for (i = 0; i < incr_vec_len; i++)\n     {\n@@ -2979,8 +2965,7 @@ insert_initializers (slsr_cand_t c)\n \n       /* Create a new SSA name to hold the initializer's value.  */\n       stride_type = TREE_TYPE (c->stride);\n-      lazy_create_slsr_reg (&new_var, stride_type);\n-      new_name = make_ssa_name (new_var, NULL);\n+      new_name = make_temp_ssa_name (stride_type, NULL, \"slsr\");\n       incr_vec[i].initializer = new_name;\n \n       /* Create the initializer and insert it in the latest possible\n@@ -3078,15 +3063,13 @@ all_phi_incrs_profitable (slsr_cand_t c, gimple phi)\n    the new SSA name.  */\n \n static tree\n-introduce_cast_before_cand (slsr_cand_t c, tree to_type,\n-\t\t\t    tree from_expr, tree *new_var)\n+introduce_cast_before_cand (slsr_cand_t c, tree to_type, tree from_expr)\n {\n   tree cast_lhs;\n   gimple cast_stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \n-  lazy_create_slsr_reg (new_var, to_type);\n-  cast_lhs = make_ssa_name (*new_var, NULL);\n+  cast_lhs = make_temp_ssa_name (to_type, NULL, \"slsr\");\n   cast_stmt = gimple_build_assign_with_ops (NOP_EXPR, cast_lhs,\n \t\t\t\t\t    from_expr, NULL_TREE);\n   gimple_set_location (cast_stmt, gimple_location (c->cand_stmt));\n@@ -3140,8 +3123,7 @@ replace_rhs_if_not_dup (enum tree_code new_code, tree new_rhs1, tree new_rhs2,\n    is the rhs1 to use in creating the add/subtract.  */\n \n static void\n-replace_one_candidate (slsr_cand_t c, unsigned i, tree *new_var,\n-\t\t       tree basis_name)\n+replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n {\n   gimple stmt_to_print = NULL;\n   tree orig_rhs1, orig_rhs2;\n@@ -3177,8 +3159,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree *new_var,\n \trhs2 = incr_vec[i].initializer;\n       else\n \trhs2 = introduce_cast_before_cand (c, orig_type,\n-\t\t\t\t\t   incr_vec[i].initializer,\n-\t\t\t\t\t   new_var);\n+\t\t\t\t\t   incr_vec[i].initializer);\n \n       if (incr_vec[i].incr != cand_incr)\n \t{\n@@ -3204,7 +3185,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree *new_var,\n       if (types_compatible_p (orig_type, stride_type))\n \trhs2 = c->stride;\n       else\n-\trhs2 = introduce_cast_before_cand (c, orig_type, c->stride, new_var);\n+\trhs2 = introduce_cast_before_cand (c, orig_type, c->stride);\n       \n       stmt_to_print = replace_rhs_if_not_dup (repl_code, basis_name, rhs2,\n \t\t\t\t\t      orig_code, orig_rhs1, orig_rhs2,\n@@ -3220,7 +3201,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree *new_var,\n       if (types_compatible_p (orig_type, stride_type))\n \trhs2 = c->stride;\n       else\n-\trhs2 = introduce_cast_before_cand (c, orig_type, c->stride, new_var);\n+\trhs2 = introduce_cast_before_cand (c, orig_type, c->stride);\n       \n       if (orig_code != MINUS_EXPR\n \t  || !operand_equal_p (basis_name, orig_rhs1, 0)\n@@ -3286,7 +3267,6 @@ replace_profitable_candidates (slsr_cand_t c)\n   if (!cand_already_replaced (c))\n     {\n       double_int increment = cand_abs_increment (c);\n-      tree new_var = NULL;\n       enum tree_code orig_code = gimple_assign_rhs_code (c->cand_stmt);\n       unsigned i;\n \n@@ -3318,14 +3298,14 @@ replace_profitable_candidates (slsr_cand_t c)\n \n \t\t  /* Replace C with an add of the new basis phi and the\n \t\t     increment.  */\n-\t\t  replace_one_candidate (c, i, &new_var, name);\n+\t\t  replace_one_candidate (c, i, name);\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      slsr_cand_t basis = lookup_cand (c->basis);\n \t      tree basis_name = gimple_assign_lhs (basis->cand_stmt);\n-\t      replace_one_candidate (c, i, &new_var, basis_name);\n+\t      replace_one_candidate (c, i, basis_name);\n \t    }\n \t}\n     }"}]}