{"sha": "7798ae1a15055fe956978453ea62932d680ace72", "node_id": "C_kwDOANBUbNoAKDc3OThhZTFhMTUwNTVmZTk1Njk3ODQ1M2VhNjI5MzJkNjgwYWNlNzI", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-09T15:48:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-09T15:48:09Z"}, "message": "Merge IPA solution with local one in ipa-modref\n\ngcc/ChangeLog:\n\n\t* ipa-modref.c (analyze_parms): Add past_flags, past_retslot_flags\n\tand past_static_chain; merge past summary with current one.\n\t(analyze_function): Update.", "tree": {"sha": "8ec3a68e244a1f660315ea27ca71c36c6a93502a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec3a68e244a1f660315ea27ca71c36c6a93502a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7798ae1a15055fe956978453ea62932d680ace72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7798ae1a15055fe956978453ea62932d680ace72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7798ae1a15055fe956978453ea62932d680ace72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7798ae1a15055fe956978453ea62932d680ace72/comments", "author": null, "committer": null, "parents": [{"sha": "af33850a4d1116a1c2dc9132b5db6e9533aedf33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af33850a4d1116a1c2dc9132b5db6e9533aedf33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af33850a4d1116a1c2dc9132b5db6e9533aedf33"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "2f91b56374525ed18a819cd2e8ce19bd456dfdae", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7798ae1a15055fe956978453ea62932d680ace72/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7798ae1a15055fe956978453ea62932d680ace72/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=7798ae1a15055fe956978453ea62932d680ace72", "patch": "@@ -2318,11 +2318,18 @@ modref_eaf_analysis::record_escape_points (tree name, int parm_index, int flags)\n     }\n }\n \n-/* Determine EAF flags for function parameters.  */\n+/* Determine EAF flags for function parameters\n+   and fill in SUMMARY/SUMMARY_LTO.  If IPA is true work in IPA mode\n+   where we also collect scape points.\n+   PAST_FLAGS, PAST_RETSLOT_FLAGS, PAST_STATIC_CHAIN_FLAGS can be\n+   used to preserve flags from prevoius (IPA) run for cases where\n+   late optimizations changed code in a way we can no longer analyze\n+   it easily.  */\n \n static void\n analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n-\t       bool ipa)\n+\t       bool ipa, vec<eaf_flags_t> &past_flags,\n+\t       int past_retslot_flags, int past_static_chain_flags)\n {\n   unsigned int parm_index = 0;\n   unsigned int count = 0;\n@@ -2395,6 +2402,25 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n       flags = remove_useless_eaf_flags\n \t\t (flags, ecf_flags,\n \t\t  VOID_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl))));\n+      if (past_flags.length () > parm_index)\n+\t{\n+\t  int past = past_flags[parm_index];\n+\t  past = remove_useless_eaf_flags\n+\t\t     (past, ecf_flags,\n+\t\t      VOID_TYPE_P (TREE_TYPE\n+\t\t\t  (TREE_TYPE (current_function_decl))));\n+\t  if (dump_file && (flags | past) != flags && !(flags & EAF_UNUSED))\n+\t    {\n+\t      fprintf (dump_file,\n+\t\t       \"  Flags for param %i combined with IPA pass:\",\n+\t\t       (int)parm_index);\n+\t      dump_eaf_flags (dump_file, past, false);\n+\t      fprintf (dump_file, \" local \");\n+\t      dump_eaf_flags (dump_file, flags | past, true);\n+\t    }\n+\t  if (!(flags & EAF_UNUSED))\n+\t    flags |= past;\n+\t}\n \n       if (flags)\n \t{\n@@ -2416,8 +2442,23 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n   if (retslot)\n     {\n       int flags = eaf_analysis.get_ssa_name_flags (retslot);\n+      int past = past_retslot_flags;\n \n       flags = remove_useless_eaf_flags (flags, ecf_flags, false);\n+      past = remove_useless_eaf_flags\n+\t\t (past, ecf_flags,\n+\t\t  VOID_TYPE_P (TREE_TYPE\n+\t\t      (TREE_TYPE (current_function_decl))));\n+      if (dump_file && (flags | past) != flags && !(flags & EAF_UNUSED))\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"  Retslot flags combined with IPA pass:\");\n+\t  dump_eaf_flags (dump_file, past, false);\n+\t  fprintf (dump_file, \" local \");\n+\t  dump_eaf_flags (dump_file, flags, true);\n+\t}\n+      if (!(flags & EAF_UNUSED))\n+\tflags |= past;\n       if (flags)\n \t{\n \t  if (summary)\n@@ -2431,8 +2472,23 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n   if (static_chain)\n     {\n       int flags = eaf_analysis.get_ssa_name_flags (static_chain);\n+      int past = past_static_chain_flags;\n \n       flags = remove_useless_eaf_flags (flags, ecf_flags, false);\n+      past = remove_useless_eaf_flags\n+\t\t (past, ecf_flags,\n+\t\t  VOID_TYPE_P (TREE_TYPE\n+\t\t      (TREE_TYPE (current_function_decl))));\n+      if (dump_file && (flags | past) != flags && !(flags & EAF_UNUSED))\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"  Static chain flags combined with IPA pass:\");\n+\t  dump_eaf_flags (dump_file, past, false);\n+\t  fprintf (dump_file, \" local \");\n+\t  dump_eaf_flags (dump_file, flags, true);\n+\t}\n+      if (!(flags & EAF_UNUSED))\n+\tlags |= past;\n       if (flags)\n \t{\n \t  if (summary)\n@@ -2567,7 +2623,8 @@ analyze_function (function *f, bool ipa)\n       summary_lto->writes_errno = false;\n     }\n \n-  analyze_parms (summary, summary_lto, ipa);\n+  analyze_parms (summary, summary_lto, ipa,\n+\t\t past_flags, past_retslot_flags, past_static_chain_flags);\n \n   int ecf_flags = flags_from_decl_or_type (current_function_decl);\n   auto_vec <gimple *, 32> recursive_calls;\n@@ -2662,15 +2719,12 @@ analyze_function (function *f, bool ipa)\n \t\t VOID_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl))));\n \t      if (old_flags != new_flags)\n \t\t{\n-\t\t  if ((old_flags & ~new_flags) == 0)\n+\t\t  if ((old_flags & ~new_flags) == 0\n+\t\t      || (new_flags & EAF_UNUSED))\n \t\t    fprintf (dump_file, \"  Flags for param %i improved:\",\n \t\t\t     (int)i);\n-\t\t  else if ((new_flags & ~old_flags) == 0)\n-\t\t    fprintf (dump_file, \"  Flags for param %i worsened:\",\n-\t\t\t     (int)i);\n \t\t  else\n-\t\t    fprintf (dump_file, \"  Flags for param %i changed:\",\n-\t\t\t     (int)i);\n+\t\t    gcc_unreachable ();\n \t\t  dump_eaf_flags (dump_file, old_flags, false);\n \t\t  fprintf (dump_file, \" -> \");\n \t\t  dump_eaf_flags (dump_file, new_flags, true);\n@@ -2682,12 +2736,11 @@ analyze_function (function *f, bool ipa)\n \t\t VOID_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl))));\n \t  if (past_retslot_flags != summary->retslot_flags)\n \t    {\n-\t      if ((past_retslot_flags & ~summary->retslot_flags) == 0)\n+\t      if ((past_retslot_flags & ~summary->retslot_flags) == 0\n+\t\t  || (summary->retslot_flags & EAF_UNUSED))\n \t\tfprintf (dump_file, \"  Flags for retslot improved:\");\n-\t      else if ((summary->retslot_flags & ~past_retslot_flags) == 0)\n-\t\tfprintf (dump_file, \"  Flags for retslot worsened:\");\n \t      else\n-\t\tfprintf (dump_file, \"  Flags for retslot changed:\");\n+\t\tgcc_unreachable ();\n \t      dump_eaf_flags (dump_file, past_retslot_flags, false);\n \t      fprintf (dump_file, \" -> \");\n \t      dump_eaf_flags (dump_file, summary->retslot_flags, true);\n@@ -2698,13 +2751,11 @@ analyze_function (function *f, bool ipa)\n \t\t VOID_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl))));\n \t  if (past_static_chain_flags != summary->static_chain_flags)\n \t    {\n-\t      if ((past_static_chain_flags & ~summary->static_chain_flags) == 0)\n+\t      if ((past_static_chain_flags & ~summary->static_chain_flags) == 0\n+\t\t  || (summary->static_chain_flags & EAF_UNUSED))\n \t\tfprintf (dump_file, \"  Flags for static chain improved:\");\n-\t      else if ((summary->static_chain_flags\n-\t\t\t& ~past_static_chain_flags) == 0)\n-\t\tfprintf (dump_file, \"  Flags for static chain worsened:\");\n \t      else\n-\t\tfprintf (dump_file, \"  Flags for static chain changed:\");\n+\t\tgcc_unreachable ();\n \t      dump_eaf_flags (dump_file, past_static_chain_flags, false);\n \t      fprintf (dump_file, \" -> \");\n \t      dump_eaf_flags (dump_file, summary->static_chain_flags, true);"}]}