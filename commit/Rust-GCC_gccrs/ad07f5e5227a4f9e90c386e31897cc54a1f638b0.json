{"sha": "ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwN2Y1ZTUyMjdhNGY5ZTkwYzM4NmUzMTg5N2NjNTRhMWY2MzhiMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2003-11-24T18:42:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2003-11-24T18:42:39Z"}, "message": "cp-demangle.c (d_encoding): Add top_level parameter.\n\n\t* cp-demangle.c (d_encoding): Add top_level parameter.  Change all\n\tcallers.\n\t(print_usage): Display new -p option.\n\t(long_options): Add --no-params.\n\t(main): Accept and handle -p.\n\nFrom-SVN: r73884", "tree": {"sha": "255b5e7b2d2a4d3242d0430894c77aac9fc7ca58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255b5e7b2d2a4d3242d0430894c77aac9fc7ca58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad07f5e5227a4f9e90c386e31897cc54a1f638b0/comments", "author": null, "committer": null, "parents": [{"sha": "0980ad7906cb57353d8d792c82f71ed0c32336bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0980ad7906cb57353d8d792c82f71ed0c32336bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0980ad7906cb57353d8d792c82f71ed0c32336bc"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "1dbf7eda979ea4e280207b54a0f1d90f7a78873f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad07f5e5227a4f9e90c386e31897cc54a1f638b0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad07f5e5227a4f9e90c386e31897cc54a1f638b0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "patch": "@@ -1,3 +1,11 @@\n+2003-11-22  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* cp-demangle.c (d_encoding): Add top_level parameter.  Change all\n+\tcallers.\n+\t(print_usage): Display new -p option.\n+\t(long_options): Add --no-params.\n+\t(main): Accept and handle -p.\n+\n 2003-11-21  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* cp-demangle.c (has_return_type): Skip qualifiers when checking"}, {"sha": "add64a9e147fd75f35283246df5b6485b446be22", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad07f5e5227a4f9e90c386e31897cc54a1f638b0/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad07f5e5227a4f9e90c386e31897cc54a1f638b0/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=ad07f5e5227a4f9e90c386e31897cc54a1f638b0", "patch": "@@ -414,7 +414,7 @@ static struct d_comp *d_make_sub PARAMS ((struct d_info *, const char *));\n static struct d_comp *d_mangled_name PARAMS ((struct d_info *));\n static int has_return_type PARAMS ((struct d_comp *));\n static int is_ctor_dtor_or_conversion PARAMS ((struct d_comp *));\n-static struct d_comp *d_encoding PARAMS ((struct d_info *));\n+static struct d_comp *d_encoding PARAMS ((struct d_info *, int));\n static struct d_comp *d_name PARAMS ((struct d_info *));\n static struct d_comp *d_nested_name PARAMS ((struct d_info *));\n static struct d_comp *d_prefix PARAMS ((struct d_info *));\n@@ -884,7 +884,7 @@ d_mangled_name (di)\n     return NULL;\n   if (d_next_char (di) != 'Z')\n     return NULL;\n-  return d_encoding (di);\n+  return d_encoding (di, 1);\n }\n \n /* Return whether a function should have a return type.  The argument\n@@ -940,11 +940,17 @@ is_ctor_dtor_or_conversion (dc)\n \n /* <encoding> ::= <(function) name> <bare-function-type>\n               ::= <(data) name>\n-              ::= <special-name>  */\n+              ::= <special-name>\n+\n+   TOP_LEVEL is non-zero when called at the top level, in which case\n+   if DMGL_PARAMS is not set we do not demangle the function\n+   parameters.  We only set this at the top level, because otherwise\n+   we would not correctly demangle names in local scopes.  */\n \n static struct d_comp *\n-d_encoding (di)\n+d_encoding (di, top_level)\n      struct d_info *di;\n+     int top_level;\n {\n   char peek = d_peek_char (di);\n \n@@ -956,7 +962,9 @@ d_encoding (di)\n \n       dc = d_name (di);\n       peek = d_peek_char (di);\n-      if (peek == '\\0' || peek == 'E')\n+      if (peek == '\\0'\n+\t  || peek == 'E'\n+\t  || (top_level && (di->options & DMGL_PARAMS) == 0))\n \treturn dc;\n       return d_make_comp (di, D_COMP_TYPED_NAME, dc,\n \t\t\t  d_bare_function_type (di, has_return_type (dc)));\n@@ -1373,20 +1381,20 @@ d_special_name (di)\n \tcase 'h':\n \t  if (! d_call_offset (di, 'h'))\n \t    return NULL;\n-\t  return d_make_comp (di, D_COMP_THUNK, d_encoding (di), NULL);\n+\t  return d_make_comp (di, D_COMP_THUNK, d_encoding (di, 0), NULL);\n \n \tcase 'v':\n \t  if (! d_call_offset (di, 'v'))\n \t    return NULL;\n-\t  return d_make_comp (di, D_COMP_VIRTUAL_THUNK, d_encoding (di),\n+\t  return d_make_comp (di, D_COMP_VIRTUAL_THUNK, d_encoding (di, 0),\n \t\t\t      NULL);\n \n \tcase 'c':\n \t  if (! d_call_offset (di, '\\0'))\n \t    return NULL;\n \t  if (! d_call_offset (di, '\\0'))\n \t    return NULL;\n-\t  return d_make_comp (di, D_COMP_COVARIANT_THUNK, d_encoding (di),\n+\t  return d_make_comp (di, D_COMP_COVARIANT_THUNK, d_encoding (di, 0),\n \t\t\t      NULL);\n \n \tcase 'C':\n@@ -1626,7 +1634,6 @@ d_type (di)\n     case 'h': case 'i': case 'j':           case 'l': case 'm': case 'n':\n     case 'o':                               case 's': case 't':\n     case 'v': case 'w': case 'x': case 'y': case 'z':\n-      /* FIXME: The old demangler handles Java types here.  */\n       ret = d_make_builtin_type (di, &d_builtin_types[peek - 'a']);\n       can_subst = 0;\n       d_advance (di, 1);\n@@ -2188,7 +2195,7 @@ d_local_name (di)\n   if (d_next_char (di) != 'Z')\n     return NULL;\n \n-  function = d_encoding (di);\n+  function = d_encoding (di, 0);\n \n   if (d_next_char (di) != 'E')\n     return NULL;\n@@ -3673,6 +3680,7 @@ print_usage (fp, exit_value)\n   fprintf (fp, \"Usage: %s [options] [names ...]\\n\", program_name);\n   fprintf (fp, \"Options:\\n\");\n   fprintf (fp, \"  -h,--help       Display this message.\\n\");\n+  fprintf (fp, \"  -p,--no-params  Don't display function parameters\\n\");\n   fprintf (fp, \"  -v,--verbose    Produce verbose demanglings.\\n\");\n   fprintf (fp, \"If names are provided, they are demangled.  Otherwise filters standard input.\\n\");\n \n@@ -3682,9 +3690,10 @@ print_usage (fp, exit_value)\n /* Option specification for getopt_long.  */\n static const struct option long_options[] = \n {\n-  { \"help\",    no_argument, NULL, 'h' },\n-  { \"verbose\", no_argument, NULL, 'v' },\n-  { NULL,      no_argument, NULL, 0   },\n+  { \"help\",\t no_argument, NULL, 'h' },\n+  { \"no-params\", no_argument, NULL, 'p' },\n+  { \"verbose\",   no_argument, NULL, 'v' },\n+  { NULL,        no_argument, NULL, 0   },\n };\n \n /* Main entry for a demangling filter executable.  It will demangle\n@@ -3707,7 +3716,7 @@ main (argc, argv)\n   /* Parse options.  */\n   do \n     {\n-      opt_char = getopt_long (argc, argv, \"hv\", long_options, NULL);\n+      opt_char = getopt_long (argc, argv, \"hpv\", long_options, NULL);\n       switch (opt_char)\n \t{\n \tcase '?':  /* Unrecognized option.  */\n@@ -3718,6 +3727,10 @@ main (argc, argv)\n \t  print_usage (stdout, 0);\n \t  break;\n \n+\tcase 'p':\n+\t  options &= ~ DMGL_PARAMS;\n+\t  break;\n+\n \tcase 'v':\n \t  options |= DMGL_VERBOSE;\n \t  break;"}]}