{"sha": "4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3ZTg5ZThjOWFjZGJmZmE2NTQ2ZDVlNjA1NmM3YjgxMjM4Yzg4Zg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-09-27T12:50:27Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-09-27T12:50:27Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\ngcc/\n\tPR target/51244\n\t* config/sh/sh.c (sh_rtx_costs): Fix return value of SET of movt and\n\tmovrt patterns.  Match them before anything else in the SET case.\n\nFrom-SVN: r240533", "tree": {"sha": "677a59b464fc53f71c9ba5c6c32fafb3e71a5433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/677a59b464fc53f71c9ba5c6c32fafb3e71a5433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f/comments", "author": null, "committer": null, "parents": [{"sha": "f0d355dc5c46b1ae5b28fb8d05adec793c8c4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d355dc5c46b1ae5b28fb8d05adec793c8c4891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d355dc5c46b1ae5b28fb8d05adec793c8c4891"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "0255b93f26d3749d3600ce6b418589aed2e9cef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "patch": "@@ -1,3 +1,9 @@\n+2016-09-27  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.c (sh_rtx_costs): Fix return value of SET of movt and\n+\tmovrt patterns.  Match them before anything else in the SET case.\n+\n 2016-09-27  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/7970"}, {"sha": "e5b8088c3efcc94a53e910b8ffa3996a578db2cc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "patch": "@@ -3199,6 +3199,12 @@ sh_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n \t vector-move, so we have to provide the correct cost in the number\n \t of move insns to load/store the reg of the mode in question.  */\n     case SET:\n+      if (sh_movt_set_dest (x) != NULL || sh_movrt_set_dest (x) != NULL)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+\n       if (register_operand (SET_DEST (x), VOIDmode)\n \t    && (register_operand (SET_SRC (x), VOIDmode)\n \t\t|| satisfies_constraint_Z (SET_SRC (x))))\n@@ -3208,10 +3214,6 @@ sh_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n \t\t\t\t  / mov_insn_size (mode, TARGET_SH2A));\n \t  return true;\n         }\n-\n-      if (sh_movt_set_dest (x) != NULL || sh_movrt_set_dest (x) != NULL)\n-\treturn COSTS_N_INSNS (1);\n-\n       return false;\n \n     /* The cost of a mem access is mainly the cost of the address mode.  */"}]}