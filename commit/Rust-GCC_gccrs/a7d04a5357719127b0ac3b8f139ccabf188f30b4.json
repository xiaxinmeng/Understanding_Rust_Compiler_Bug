{"sha": "a7d04a5357719127b0ac3b8f139ccabf188f30b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkMDRhNTM1NzcxOTEyN2IwYWMzYjhmMTM5Y2NhYmYxODhmMzBiNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-04T21:02:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-04T21:02:42Z"}, "message": "tree-ssa-sccvn.c (get_or_alloc_constant_value_id): Allocate a new entry only if needed.\n\n2010-01-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (get_or_alloc_constant_value_id): Allocate\n\ta new entry only if needed.\n\t* tree-ssa-dom.c (lookup_avail_expr): Likewise.\n\t* tree-ssa-coalesce.c (find_coalesce_pair): Avoid one\n\thashtable lookup.\n\t* tree-ssa-pre.c (sorted_array_from_bitmap_set): Pre-allocate\n\tthe result array.\n\t(phi_translate): Handle CONSTANTs early.\n\nFrom-SVN: r155633", "tree": {"sha": "0d4b71e06f20c74e023eb6aacd7690d252cf6d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4b71e06f20c74e023eb6aacd7690d252cf6d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d04a5357719127b0ac3b8f139ccabf188f30b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d04a5357719127b0ac3b8f139ccabf188f30b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d04a5357719127b0ac3b8f139ccabf188f30b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d04a5357719127b0ac3b8f139ccabf188f30b4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6de356aa3f8fa23a08ca801aa63c5e9cce58a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6de356aa3f8fa23a08ca801aa63c5e9cce58a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6de356aa3f8fa23a08ca801aa63c5e9cce58a20"}], "stats": {"total": 104, "additions": 58, "deletions": 46}, "files": [{"sha": "370fb4582694b2f91357d7eb79e8830087ab25b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7d04a5357719127b0ac3b8f139ccabf188f30b4", "patch": "@@ -1,3 +1,14 @@\n+2010-01-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (get_or_alloc_constant_value_id): Allocate\n+\ta new entry only if needed.\n+\t* tree-ssa-dom.c (lookup_avail_expr): Likewise.\n+\t* tree-ssa-coalesce.c (find_coalesce_pair): Avoid one\n+\thashtable lookup.\n+\t* tree-ssa-pre.c (sorted_array_from_bitmap_set): Pre-allocate\n+\tthe result array.\n+\t(phi_translate): Handle CONSTANTs early.\n+\n 2010-01-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/42398"}, {"sha": "b96d0913f07581ed40bbf3d7056538bab8fd99b4", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=a7d04a5357719127b0ac3b8f139ccabf188f30b4", "patch": "@@ -256,7 +256,7 @@ delete_coalesce_list (coalesce_list_p cl)\n static coalesce_pair_p\n find_coalesce_pair (coalesce_list_p cl, int p1, int p2, bool create)\n {\n-  struct coalesce_pair p, *pair;\n+  struct coalesce_pair p;\n   void **slot;\n   unsigned int hash;\n \n@@ -272,22 +272,23 @@ find_coalesce_pair (coalesce_list_p cl, int p1, int p2, bool create)\n       p.second_element = p2;\n     }\n \n-\n   hash = coalesce_pair_map_hash (&p);\n-  pair = (struct coalesce_pair *) htab_find_with_hash (cl->list, &p, hash);\n+  slot = htab_find_slot_with_hash (cl->list, &p, hash,\n+\t\t\t\t   create ? INSERT : NO_INSERT);\n+  if (!slot)\n+    return NULL;\n \n-  if (create && !pair)\n+  if (!*slot)\n     {\n+      struct coalesce_pair * pair = XNEW (struct coalesce_pair);\n       gcc_assert (cl->sorted == NULL);\n-      pair = XNEW (struct coalesce_pair);\n       pair->first_element = p.first_element;\n       pair->second_element = p.second_element;\n       pair->cost = 0;\n-      slot = htab_find_slot_with_hash (cl->list, pair, hash, INSERT);\n-      *(struct coalesce_pair **)slot = pair;\n+      *slot = (void *)pair;\n     }\n \n-  return pair;\n+  return (struct coalesce_pair *) *slot;\n }\n \n static inline void"}, {"sha": "bbe453963b7cca9b74b9c9c841c3ae6758a043f9", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a7d04a5357719127b0ac3b8f139ccabf188f30b4", "patch": "@@ -2229,50 +2229,47 @@ lookup_avail_expr (gimple stmt, bool insert)\n   void **slot;\n   tree lhs;\n   tree temp;\n-  struct expr_hash_elt *element = XNEW (struct expr_hash_elt);\n+  struct expr_hash_elt element;\n \n   /* Get LHS of assignment or call, else NULL_TREE.  */\n   lhs = gimple_get_lhs (stmt);\n \n-  initialize_hash_element (stmt, lhs, element);\n+  initialize_hash_element (stmt, lhs, &element);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"LKUP \");\n-      print_expr_hash_elt (dump_file, element);\n+      print_expr_hash_elt (dump_file, &element);\n     }\n \n   /* Don't bother remembering constant assignments and copy operations.\n      Constants and copy operations are handled by the constant/copy propagator\n      in optimize_stmt.  */\n-  if (element->expr.kind == EXPR_SINGLE\n-      && (TREE_CODE (element->expr.ops.single.rhs) == SSA_NAME\n-          || is_gimple_min_invariant (element->expr.ops.single.rhs)))\n-    {\n-      free (element);\n-      return NULL_TREE;\n-    }\n+  if (element.expr.kind == EXPR_SINGLE\n+      && (TREE_CODE (element.expr.ops.single.rhs) == SSA_NAME\n+          || is_gimple_min_invariant (element.expr.ops.single.rhs)))\n+    return NULL_TREE;\n \n   /* Finally try to find the expression in the main expression hash table.  */\n-  slot = htab_find_slot_with_hash (avail_exprs, element, element->hash,\n+  slot = htab_find_slot_with_hash (avail_exprs, &element, element.hash,\n \t\t\t\t   (insert ? INSERT : NO_INSERT));\n   if (slot == NULL)\n-    {\n-      free (element);\n-      return NULL_TREE;\n-    }\n+    return NULL_TREE;\n \n   if (*slot == NULL)\n     {\n-      *slot = (void *) element;\n+      struct expr_hash_elt *element2 = XNEW (struct expr_hash_elt);\n+      *element2 = element;\n+      element2->stamp = element2;\n+      *slot = (void *) element2;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n         {\n           fprintf (dump_file, \"2>>> \");\n-          print_expr_hash_elt (dump_file, element);\n+          print_expr_hash_elt (dump_file, element2);\n         }\n \n-      VEC_safe_push (expr_hash_elt_t, heap, avail_exprs_stack, element);\n+      VEC_safe_push (expr_hash_elt_t, heap, avail_exprs_stack, element2);\n       return NULL_TREE;\n     }\n \n@@ -2289,8 +2286,6 @@ lookup_avail_expr (gimple stmt, bool insert)\n \tlhs = temp;\n     }\n \n-  free (element);\n-\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"FIND: \");"}, {"sha": "82964428fbbe914f77a2f4e61453f3d038f62429", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a7d04a5357719127b0ac3b8f139ccabf188f30b4", "patch": "@@ -684,7 +684,10 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n {\n   unsigned int i, j;\n   bitmap_iterator bi, bj;\n-  VEC(pre_expr, heap) *result = NULL;\n+  VEC(pre_expr, heap) *result;\n+\n+  /* Pre-allocate roughly enough space for the array.  */\n+  result = VEC_alloc (pre_expr, heap, bitmap_count_bits (set->values));\n \n   FOR_EACH_VALUE_ID_IN_SET (set, i, bi)\n     {\n@@ -1446,6 +1449,10 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n   if (!expr)\n     return NULL;\n \n+  /* Constants contain no values that need translation.  */\n+  if (expr->kind == CONSTANT)\n+    return expr;\n+\n   if (value_id_constant_p (get_expr_value_id (expr)))\n     return expr;\n \n@@ -1455,10 +1462,6 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \n   switch (expr->kind)\n     {\n-      /* Constants contain no values that need translation.  */\n-    case CONSTANT:\n-      return expr;\n-\n     case NARY:\n       {\n \tunsigned int i;"}, {"sha": "79ce3c20a25af10a62a585ac02e67d8070284a41", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d04a5357719127b0ac3b8f139ccabf188f30b4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a7d04a5357719127b0ac3b8f139ccabf188f30b4", "patch": "@@ -357,21 +357,23 @@ unsigned int\n get_or_alloc_constant_value_id (tree constant)\n {\n   void **slot;\n-  vn_constant_t vc = XNEW (struct vn_constant_s);\n+  struct vn_constant_s vc;\n+  vn_constant_t vcp;\n \n-  vc->hashcode = vn_hash_constant_with_type (constant);\n-  vc->constant = constant;\n-  slot = htab_find_slot_with_hash (constant_to_value_id, vc,\n-\t\t\t\t   vc->hashcode, INSERT);\n+  vc.hashcode = vn_hash_constant_with_type (constant);\n+  vc.constant = constant;\n+  slot = htab_find_slot_with_hash (constant_to_value_id, &vc,\n+\t\t\t\t   vc.hashcode, INSERT);\n   if (*slot)\n-    {\n-      free (vc);\n-      return ((vn_constant_t)*slot)->value_id;\n-    }\n-  vc->value_id = get_next_value_id ();\n-  *slot = vc;\n-  bitmap_set_bit (constant_value_ids, vc->value_id);\n-  return vc->value_id;\n+    return ((vn_constant_t)*slot)->value_id;\n+\n+  vcp = XNEW (struct vn_constant_s);\n+  vcp->hashcode = vc.hashcode;\n+  vcp->constant = constant;\n+  vcp->value_id = get_next_value_id ();\n+  *slot = (void *) vcp;\n+  bitmap_set_bit (constant_value_ids, vcp->value_id);\n+  return vcp->value_id;\n }\n \n /* Return true if V is a value id for a constant.  */"}]}