{"sha": "b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmMmEwMzI1ZGY5OGYxOGY3ZTNhZTllMGVjM2MxYTZiZjVlMzYyZA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-01T00:49:14Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-01T00:49:14Z"}, "message": "libstdc++-v3-dg.exp: Rename...\n\n2003-07-31  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/lib/libstdc++-v3-dg.exp:  Rename...\n\t* testsuite/lib/libstdc++-v3.exp:  ...to this.\n\t* testsuite/libstdc++-v3.dg/dg.exp:  No special case needed now.\n\nFrom-SVN: r70033", "tree": {"sha": "31388c366443281ab9d7ae1de3dc6aeed9fec401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31388c366443281ab9d7ae1de3dc6aeed9fec401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/comments", "author": null, "committer": null, "parents": [{"sha": "57ac311fb9523c663e8761fef60a90e9c47af0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ac311fb9523c663e8761fef60a90e9c47af0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ac311fb9523c663e8761fef60a90e9c47af0c8"}], "stats": {"total": 494, "additions": 245, "deletions": 249}, "files": [{"sha": "fd038fb810fbd33bad786b73558d44bdbef3471f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "patch": "@@ -1,3 +1,9 @@\n+2003-07-31  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/lib/libstdc++-v3-dg.exp:  Rename...\n+\t* testsuite/lib/libstdc++-v3.exp:  ...to this.\n+\t* testsuite/libstdc++-v3.dg/dg.exp:  No special case needed now.\n+\n 2003-07-31  Doug Gregor  <dgregor@apple.com>\n \n \tAdd user specialization tests."}, {"sha": "8c296d6ff5e0b36fad918f427ad0edaad1d2f3e2", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac311fb9523c663e8761fef60a90e9c47af0c8/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac311fb9523c663e8761fef60a90e9c47af0c8/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=57ac311fb9523c663e8761fef60a90e9c47af0c8", "patch": "@@ -1,240 +0,0 @@\n-# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n-\n-# Define libstdc++-v3 callbacks for dg.exp.\n-\n-load_lib dg.exp\n-load_lib libgloss.exp\n-load_lib prune.exp\n-\n-# Called once, by libstdc++-v3-init below.  \"Static\" to this file.\n-proc libstdc++-v3-copy-files {srcfiles dstdir} {\n-    foreach f $srcfiles {\n-\tif { [catch { set symlink [file readlink $f] } x] } then {\n-\t    file copy -force $f $dstdir\n-\t} else {\n-\t    if { [regexp \"^/\" \"$symlink\"] } then {\n-\t\tfile copy -force $symlink $dstdir\n-\t    } else {\n-\t\tset dirname [file dirname $f]\n-\t\tfile copy -force $dirname/$symlink $dstdir\n-\t    }\n-\t}\n-    }\n-}\n-\n-# Called once, from libstdc++-v3.dg/dg.exp.\n-proc libstdc++-v3-init { args } {\n-    global srcdir\n-    global outdir\n-    global blddir\n-    global cxx\n-    global includes\n-    global cxxflags\n-    global objdir\n-    global gluefile wrap_flags\n-    global ld_library_path\n-    global tool_root_dir\n-\n-    set blddir [lookfor_file [get_multilibs] libstdc++-v3]\n-\n-    # By default, we assume we want to run program images.\n-    global dg-do-what-default\n-    set dg-do-what-default run\n-\n-    # Copy any required data files.\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.tst\"] $outdir\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.txt\"] $outdir\n-\n-    # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n-    # locate libgcc.a so we don't need to account for different values of\n-    # SHLIB_EXT on different platforms\n-    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n-    if {$gccdir != \"\"} {\n-\tset gccdir [file dirname $gccdir]\n-    }\n-\n-    set ld_library_path \".\"\n-    append ld_library_path \":${gccdir}\"\n-    set compiler ${gccdir}/g++\n-    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-      foreach i \"[exec $compiler --print-multi-lib]\" {\n-\tset mldir \"\"\n-\tregexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n-\tset mldir [string trimright $mldir \"\\;@\"]\n-\tif { \"$mldir\" == \".\" } {\n-\t  continue\n-\t}\n-\tif { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] == 1 } {\n-\t  append ld_library_path \":${gccdir}/${mldir}\"\n-\t}\n-      }\n-    }\n-    append ld_library_path \":${blddir}/src/.libs\"\n-\n-    # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n-    # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n-    # (for the 64-bit ABI).  The right way to do this would be to modify\n-    # unix.exp -- but that's not an option since it's part of DejaGNU\n-    # proper, so we do it here.  We really only need to do \n-    # this on IRIX, but it shouldn't hurt to do it anywhere else.\n-    setenv  LD_LIBRARY_PATH     $ld_library_path\n-    setenv  SHLIB_PATH          $ld_library_path\n-    setenv  LD_LIBRARYN32_PATH  $ld_library_path\n-    setenv  LD_LIBRARY64_PATH   $ld_library_path\n-    setenv  LD_RUN_PATH         $ld_library_path\n-    verbose -log \"Set LD_*_PATHs to ${ld_library_path}\"\n-\n-    # Do a bunch of handstands and backflips for cross compiling and\n-    # finding simulators...\n-    if [is_remote host] {\n-        set header [remote_download host ${blddir}/testsuite/testsuite_hooks.h]\n-        if { $header == \"\" } {\n-            verbose -log \"Unable to download ${blddir}/testsuite/testsuite_hooks.h to host.\"\n-            return \"untested\"\n-        }\n-      set cxx [transform \"g++\"]\n-      set cxxflags \"-ggdb3 -D_GLIBCXX_ASSERT\"\n-      set includes \"-I./\"\n-    } else {\n-        # If we find a testsuite_flags file, we're testing in the build dir.\n-        set flags_file \"${blddir}/scripts/testsuite_flags\"\n-        if { [file exists $flags_file] } {\n-            set cxx [exec sh $flags_file --build-cxx]\n-            set cxxflags [exec sh $flags_file --cxxflags]\n-            set includes [exec sh $flags_file --build-includes]\n-        } else {\n-            set cxx [transform \"g++\"]\n-            set cxxflags \"-ggdb3 -D_GLIBCXX_ASSERT\"\n-            set includes \"-I${srcdir}\"\n-        }\n-    }\n-\n-    if { [target_info needs_status_wrapper]!=\"\"} {\n-      file delete ${objdir}/testglue.o;\n-      set gluefile ${objdir}/testglue.o;\n-      set result [build_wrapper $gluefile];\n-      if { $result != \"\" } {\n-          set gluefile [lindex $result 0];\n-          set wrap_flags [lindex $result 1];\n-      } else {\n-          unset gluefile\n-      }\n-    }\n-}\n-\n-# Callback from system dg-test.\n-proc libstdc++-v3-dg-test { prog do_what extra_tool_flags } {\n-    # Set up the compiler flags, based on what we're going to do.\n-\n-    switch $do_what {\n-\t\"preprocess\" {\n-\t    set compile_type \"preprocess\"\n-\t    set output_file \"[file rootname [file tail $prog]].i\"\n-\t}\n-\t\"compile\" {\n-\t    set compile_type \"assembly\"\n-\t    set output_file \"[file rootname [file tail $prog]].s\"\n-\t}\n-\t\"assemble\" {\n-\t    set compile_type \"object\"\n-\t    set output_file \"[file rootname [file tail $prog]].o\"\n-\t}\n-\t\"link\" {\n-\t    set compile_type \"executable\"\n-\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n-\t}\n-\t\"run\" {\n-\t    set compile_type \"executable\"\n-\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n-\t    # Should this be handled elsewhere?\n-\t    # YES.\n-\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n-\t    # This is the only place where we care if an executable was\n-\t    # created or not.  If it was, dg.exp will try to run it.\n-\t    remote_file build delete $output_file;\n-\t}\n-\tdefault {\n-\t    perror \"$do_what: not a valid dg-do keyword\"\n-\t    return \"\"\n-\t}\n-    }\n-    set options \"\"\n-    if { $extra_tool_flags != \"\" } {\n-\tlappend options \"additional_flags=$extra_tool_flags\"\n-    }\n-\n-    set comp_output [libstdc++-v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n-    set comp_output [ prune_g++_output $comp_output ];\n-\n-    return [list $comp_output $output_file]\n-}\n-\n-# Called from libstdc++-v3-dg-test above.  Calls back into system's\n-# target_compile to actually do the work.\n-proc libstdc++-v3_target_compile { source dest type options } {\n-    global gluefile \n-    global wrap_flags\n-    global cxx\n-    global cxxflags\n-    global includes\n-    global blddir\n-\n-    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-\tlappend options \"libs=${gluefile}\"\n-\tlappend options \"ldflags=${wrap_flags}\"\n-    }\n-\n-    set cxx_final $cxx\n-    set cxxlibglossflags  [libgloss_link_flags]\n-    set cxx_final [concat $cxx_final $cxxlibglossflags]\n-    set cxx_final [concat $cxx_final $cxxflags]\n-    set cxx_final [concat $cxx_final $includes]\n-\n-    lappend options \"compiler=$cxx_final\"\n-\n-    # Picks up the freshly-built testsuite library corresponding to the\n-    # multilib under test.\n-    lappend options \"ldflags=-L${blddir}/testsuite\"\n-    lappend options \"libs=-lv3test\"\n-\n-    return [target_compile $source $dest $type $options]\n-}\n-\n-\n-# Called once, from libstdc++-v3.dg/dg.exp.\n-proc v3-list-tests { filename } {\n-    global srcdir\n-    global outdir\n-    \n-    set tests_file \"${outdir}/${filename}\"\n-    set sfiles \"\"\n-\n-    # If there is a testsuite_file, use it. \n-    if { [file exists $tests_file] } {\n-\tset f [open $tests_file]\n-\twhile { ! [eof $f] } {\n-\t    set t [gets $f]\n-\t    if { [string length \"$t\"] != 0 } {\n-\t\tlappend sfiles  ${srcdir}/${t}\n-\t    }\n-\t} \n-\tclose $f\n-    } else {\n-\tverbose \"cannot open $tests_file\"\n-    }\n-    return $sfiles\n-}"}, {"sha": "8c296d6ff5e0b36fad918f427ad0edaad1d2f3e2", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3.exp", "status": "modified", "additions": 238, "deletions": 5, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3.exp?ref=b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "patch": "@@ -1,7 +1,240 @@\n+# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n-# This is the \"tool init file\" for libstdc++-v3.  There's nothing here.\n-# It's simply a placeholder for two reasons.  First, to show where we would\n-# put things, in case we ever want to take advantage of the tool init file.\n-# Second, to make dejagnu shut up about \"WARNING could not find tool init\n-# file,\" which is harmless but tends to scare/confuse people.\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n \n+# Define libstdc++-v3 callbacks for dg.exp.\n+\n+load_lib dg.exp\n+load_lib libgloss.exp\n+load_lib prune.exp\n+\n+# Called once, by libstdc++-v3-init below.  \"Static\" to this file.\n+proc libstdc++-v3-copy-files {srcfiles dstdir} {\n+    foreach f $srcfiles {\n+\tif { [catch { set symlink [file readlink $f] } x] } then {\n+\t    file copy -force $f $dstdir\n+\t} else {\n+\t    if { [regexp \"^/\" \"$symlink\"] } then {\n+\t\tfile copy -force $symlink $dstdir\n+\t    } else {\n+\t\tset dirname [file dirname $f]\n+\t\tfile copy -force $dirname/$symlink $dstdir\n+\t    }\n+\t}\n+    }\n+}\n+\n+# Called once, from libstdc++-v3.dg/dg.exp.\n+proc libstdc++-v3-init { args } {\n+    global srcdir\n+    global outdir\n+    global blddir\n+    global cxx\n+    global includes\n+    global cxxflags\n+    global objdir\n+    global gluefile wrap_flags\n+    global ld_library_path\n+    global tool_root_dir\n+\n+    set blddir [lookfor_file [get_multilibs] libstdc++-v3]\n+\n+    # By default, we assume we want to run program images.\n+    global dg-do-what-default\n+    set dg-do-what-default run\n+\n+    # Copy any required data files.\n+    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.tst\"] $outdir\n+    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.txt\"] $outdir\n+\n+    # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n+    # locate libgcc.a so we don't need to account for different values of\n+    # SHLIB_EXT on different platforms\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n+    if {$gccdir != \"\"} {\n+\tset gccdir [file dirname $gccdir]\n+    }\n+\n+    set ld_library_path \".\"\n+    append ld_library_path \":${gccdir}\"\n+    set compiler ${gccdir}/g++\n+    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+      foreach i \"[exec $compiler --print-multi-lib]\" {\n+\tset mldir \"\"\n+\tregexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+\tset mldir [string trimright $mldir \"\\;@\"]\n+\tif { \"$mldir\" == \".\" } {\n+\t  continue\n+\t}\n+\tif { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] == 1 } {\n+\t  append ld_library_path \":${gccdir}/${mldir}\"\n+\t}\n+      }\n+    }\n+    append ld_library_path \":${blddir}/src/.libs\"\n+\n+    # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n+    # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n+    # (for the 64-bit ABI).  The right way to do this would be to modify\n+    # unix.exp -- but that's not an option since it's part of DejaGNU\n+    # proper, so we do it here.  We really only need to do \n+    # this on IRIX, but it shouldn't hurt to do it anywhere else.\n+    setenv  LD_LIBRARY_PATH     $ld_library_path\n+    setenv  SHLIB_PATH          $ld_library_path\n+    setenv  LD_LIBRARYN32_PATH  $ld_library_path\n+    setenv  LD_LIBRARY64_PATH   $ld_library_path\n+    setenv  LD_RUN_PATH         $ld_library_path\n+    verbose -log \"Set LD_*_PATHs to ${ld_library_path}\"\n+\n+    # Do a bunch of handstands and backflips for cross compiling and\n+    # finding simulators...\n+    if [is_remote host] {\n+        set header [remote_download host ${blddir}/testsuite/testsuite_hooks.h]\n+        if { $header == \"\" } {\n+            verbose -log \"Unable to download ${blddir}/testsuite/testsuite_hooks.h to host.\"\n+            return \"untested\"\n+        }\n+      set cxx [transform \"g++\"]\n+      set cxxflags \"-ggdb3 -D_GLIBCXX_ASSERT\"\n+      set includes \"-I./\"\n+    } else {\n+        # If we find a testsuite_flags file, we're testing in the build dir.\n+        set flags_file \"${blddir}/scripts/testsuite_flags\"\n+        if { [file exists $flags_file] } {\n+            set cxx [exec sh $flags_file --build-cxx]\n+            set cxxflags [exec sh $flags_file --cxxflags]\n+            set includes [exec sh $flags_file --build-includes]\n+        } else {\n+            set cxx [transform \"g++\"]\n+            set cxxflags \"-ggdb3 -D_GLIBCXX_ASSERT\"\n+            set includes \"-I${srcdir}\"\n+        }\n+    }\n+\n+    if { [target_info needs_status_wrapper]!=\"\"} {\n+      file delete ${objdir}/testglue.o;\n+      set gluefile ${objdir}/testglue.o;\n+      set result [build_wrapper $gluefile];\n+      if { $result != \"\" } {\n+          set gluefile [lindex $result 0];\n+          set wrap_flags [lindex $result 1];\n+      } else {\n+          unset gluefile\n+      }\n+    }\n+}\n+\n+# Callback from system dg-test.\n+proc libstdc++-v3-dg-test { prog do_what extra_tool_flags } {\n+    # Set up the compiler flags, based on what we're going to do.\n+\n+    switch $do_what {\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    remote_file build delete $output_file;\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n+    }\n+    set options \"\"\n+    if { $extra_tool_flags != \"\" } {\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n+    }\n+\n+    set comp_output [libstdc++-v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+    set comp_output [ prune_g++_output $comp_output ];\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+# Called from libstdc++-v3-dg-test above.  Calls back into system's\n+# target_compile to actually do the work.\n+proc libstdc++-v3_target_compile { source dest type options } {\n+    global gluefile \n+    global wrap_flags\n+    global cxx\n+    global cxxflags\n+    global includes\n+    global blddir\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    set cxx_final $cxx\n+    set cxxlibglossflags  [libgloss_link_flags]\n+    set cxx_final [concat $cxx_final $cxxlibglossflags]\n+    set cxx_final [concat $cxx_final $cxxflags]\n+    set cxx_final [concat $cxx_final $includes]\n+\n+    lappend options \"compiler=$cxx_final\"\n+\n+    # Picks up the freshly-built testsuite library corresponding to the\n+    # multilib under test.\n+    lappend options \"ldflags=-L${blddir}/testsuite\"\n+    lappend options \"libs=-lv3test\"\n+\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+\n+# Called once, from libstdc++-v3.dg/dg.exp.\n+proc v3-list-tests { filename } {\n+    global srcdir\n+    global outdir\n+    \n+    set tests_file \"${outdir}/${filename}\"\n+    set sfiles \"\"\n+\n+    # If there is a testsuite_file, use it. \n+    if { [file exists $tests_file] } {\n+\tset f [open $tests_file]\n+\twhile { ! [eof $f] } {\n+\t    set t [gets $f]\n+\t    if { [string length \"$t\"] != 0 } {\n+\t\tlappend sfiles  ${srcdir}/${t}\n+\t    }\n+\t} \n+\tclose $f\n+    } else {\n+\tverbose \"cannot open $tests_file\"\n+    }\n+    return $sfiles\n+}"}, {"sha": "03b7f8b5e1aea52916d4515a94d979bdbfd0a362", "filename": "libstdc++-v3/testsuite/libstdc++-v3.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp?ref=b3f2a0325df98f18f7e3ae9e0ec3c1a6bf5e362d", "patch": "@@ -16,16 +16,13 @@\n \n # libstdc++-v3 testsuite that uses the 'dg.exp' driver.\n \n-# Load support procs.\n-load_lib libstdc++-v3-dg.exp\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n     set DEFAULT_CXXFLAGS \"-D_GLIBCXX_ASSERT\"\n }\n \n-# Initialize 'dg' last or dejagnu exits with an error...\n+# Initialization.\n dg-init\n libstdc++-v3-init\n "}]}