{"sha": "ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlOWY3ODUxZWRmMDRhYWQwNWI4ZDVjMzQ4OWQyMzJmZDk1NDdmNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-08-29T07:57:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-29T07:57:10Z"}, "message": "codecvt.html: Add more bits, format.\n\n\n2000-08-28  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* docs/22_locale/codecvt.html: Add more bits, format.\n\t* bits/codecvt.h: Add copy ctor, rename types.\n\t* testsuite/22_locale/codecvt_unicode_char.cc: Tweak.\n\n\t* libio/iofwide.c: Tweak.\n\nFrom-SVN: r36032", "tree": {"sha": "754f60285de659efaba94be9c7c4e8cb18673000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/754f60285de659efaba94be9c7c4e8cb18673000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/comments", "author": null, "committer": null, "parents": [{"sha": "484fde94394217be93a36c36bf815c4166e511c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484fde94394217be93a36c36bf815c4166e511c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484fde94394217be93a36c36bf815c4166e511c3"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "7fce4b7cfcef5dd63a07600d766164ba58bfcb89", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "patch": "@@ -1,7 +1,11 @@\n 2000-08-28  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* docs/22_locale/codecvt.html: Add more bits, format. \n-\n+\t* bits/codecvt.h: Add copy ctor, rename types.\n+\t* testsuite/22_locale/codecvt_unicode_char.cc: Tweak.\n+\t\n+\t* libio/iofwide.c: Tweak.\n+\t\n 2000-08-28  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/configopts.html:  Mention new options."}, {"sha": "27c87b7f270cb3ed350a607fe95233b8e4becb49", "filename": "libstdc++-v3/bits/codecvt.h", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h?ref=ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "patch": "@@ -45,7 +45,7 @@\n \n namespace std\n {\n-  // XXX __enc_traits may need to move up the locale header heirarchy,\n+  // XXX __enc_traits may need to move up the locale header hierarchy,\n   // depending on if ctype ends up using it.\n #ifdef _GLIBCPP_USE_WCHAR_T\n   // Extensions to use icov for dealing with character encodings,\n@@ -55,9 +55,10 @@ namespace std\n   class __enc_traits\n   {\n   public:\n-    // Types:\n-    typedef iconv_t\t__conv_type;\n-    typedef mbstate_t\t__state_type;\n+    // Types: \n+    // NB: A conversion descriptor subsumes and enhances the\n+    // functionality of a simple state type such as mbstate_t.\n+    typedef iconv_t\t__desc_type;\n     \n   protected:\n     // Data Members:\n@@ -69,9 +70,9 @@ namespace std\n     char  \t       \t__extc_enc[__max_size];\n \n     // Conversion descriptor between external encoding to internal encoding.\n-    __conv_type\t\t__in_desc;\n+    __desc_type\t\t__in_desc;\n     // Conversion descriptor between internal encoding to external encoding.\n-    __conv_type\t\t__out_desc;\n+    __desc_type\t\t__out_desc;\n \n   public:\n     __enc_traits() : __in_desc(0), __out_desc(0)\n@@ -89,8 +90,19 @@ namespace std\n     __enc_traits(const char* __int, const char* __ext)\n     : __in_desc(0), __out_desc(0)\n     {\n-      strcpy(__intc_enc, __int);\n-      strcpy(__extc_enc, __ext);\n+      strncpy(__intc_enc, __int, __max_size);\n+      strncpy(__extc_enc, __ext, __max_size);\n+    }\n+\n+    // 21.1.2 traits typedefs\n+    // p4\n+    // typedef STATE_T state_type\n+    // requires: state_type shall meet the requirements of\n+    // CopyConstructible types (20.1.3)\n+    __enc_traits(const __enc_traits& __obj)\n+    {\n+      strncpy(__intc_enc, __obj.__intc_enc, __max_size);\n+      strncpy(__extc_enc, __obj.__extc_enc, __max_size);\n     }\n \n     ~__enc_traits()\n@@ -118,11 +130,11 @@ namespace std\n \t     && __out_desc != iconv_t(-1) && __in_desc != iconv_t(-1);\n     }\n \n-    const __conv_type* \n+    const __desc_type* \n     _M_get_in_descriptor()\n     { return &__in_desc; }\n \n-    const __conv_type* \n+    const __desc_type* \n     _M_get_out_descriptor()\n     { return &__out_desc; }\n \n@@ -133,15 +145,6 @@ namespace std\n     const char* \n     _M_get_external_enc()\n     { return __extc_enc; }\n-\n-  protected:\n-    // 21.1.2 traits typedefs\n-    // p4\n-    // typedef STATE_T state_type\n-    // requires: state_type shall meet the requirements of\n-    // CopyConstructible types (20.1.3)\n-    // XXX because of this, these might actually need to be filled out.\n-    __enc_traits(const __enc_traits&);\n   };\n #endif //_GLIBCPP_USE_WCHAR_T\n \n@@ -295,7 +298,7 @@ namespace std\n       typedef _InternT \t\t\t\t\tintern_type;\n       typedef _ExternT \t\t\t\t\textern_type;\n       typedef __enc_traits \t\t\t\tstate_type;\n-      typedef __enc_traits::__conv_type \t\t__conv_type;\n+      typedef __enc_traits::__desc_type \t\t__desc_type;\n       typedef __enc_traits\t\t\t\t__enc_type;\n \n       // Data Members:\n@@ -360,8 +363,8 @@ namespace std\n       result __ret = error;\n       if (__state._M_good())\n \t{\n-\t  typedef state_type::__conv_type\t__conv_type;\n-\t  const __conv_type* __desc = __state._M_get_out_descriptor();\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_out_descriptor();\n \t  const size_t __fmultiple = sizeof(intern_type) / sizeof(char);\n \t  size_t __flen = __fmultiple * (__from_end - __from);\n \t  const size_t __tmultiple = sizeof(extern_type) / sizeof(char);\n@@ -403,8 +406,8 @@ namespace std\n       result __ret = error;\n       if (__state._M_good())\n \t{\n-\t  typedef state_type::__conv_type\t__conv_type;\n-\t  const __conv_type* __desc = __state._M_get_in_descriptor();\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n \t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);\n \t  size_t __tlen = __tmultiple * (__to_end - __to); \n \t  \n@@ -440,8 +443,8 @@ namespace std\n       result __ret = error;\n       if (__state._M_good())\n \t{\n-\t  typedef state_type::__conv_type\t__conv_type;\n-\t  const __conv_type* __desc = __state._M_get_in_descriptor();\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n \t  const size_t __fmultiple = sizeof(extern_type) / sizeof(char);\n \t  size_t __flen = __fmultiple * (__from_end - __from);\n \t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);"}, {"sha": "64bc7c97dac1f3481c6a98b48bbf84f027619cf3", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "patch": "@@ -155,6 +155,7 @@ _IO_fwide (fp, mode)\n \t   cares about systems which changing internal charsets they\n \t   should come up with a solution for the determination of the\n \t   currently used internal character set.  */\n+#if 0\n \tconst char *internal_ccs = _G_INTERNAL_CCS;\n \tconst char *external_ccs = nl_langinfo(CODESET);\n \n@@ -164,6 +165,7 @@ _IO_fwide (fp, mode)\n \tcc->__cd_in = iconv_open (internal_ccs, external_ccs);\n \tif (cc->__cd_in != (iconv_t) -1)\n \t  cc->__cd_out = iconv_open (external_ccs, internal_ccs);\n+#endif\n       }\n # else\n #  error \"somehow determine this from LC_CTYPE\""}, {"sha": "b29b16388d12ac114a0f0716b26cc81039fe9eaa", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_char.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe9f7851edf04aad05b8d5c3489d232fd9547f5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc?ref=ffe9f7851edf04aad05b8d5c3489d232fd9547f5", "patch": "@@ -120,7 +120,7 @@ void test01()\n   const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n \n   // in\n-  unicode_codecvt::state_type state01(\"UNICODE\", \"ISO_8859-1\");\n+  unicode_codecvt::state_type state01(\"UNICODE\", \"ISO-8859-15\");\n   initialize_state(state01);\n   result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n \t\t     i_arr, i_arr + size, ito_next);\n@@ -130,7 +130,7 @@ void test01()\n   VERIFY( ito_next == i_arr + size );\n \n   // out\n-  unicode_codecvt::state_type state02(\"UNICODE\", \"ISO_8859-1\");\n+  unicode_codecvt::state_type state02(\"UNICODE\", \"ISO-8859-15\");\n   initialize_state(state02);  \n   result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n \t\t       e_arr, e_arr + size, eto_next);\n@@ -141,7 +141,7 @@ void test01()\n \n   // unshift\n   ext_traits::copy(e_arr, e_lit, size);\n-  unicode_codecvt::state_type state03(\"UNICODE\", \"ISO_8859-1\");\n+  unicode_codecvt::state_type state03(\"UNICODE\", \"ISO-8859-15\");\n   initialize_state(state03);\n   result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n   VERIFY( r3 == codecvt_base::noconv );\n@@ -153,7 +153,7 @@ void test01()\n \n   VERIFY( !cvt.always_noconv() );\n \n-  unicode_codecvt::state_type state04(\"UNICODE\", \"ISO_8859-1\");\n+  unicode_codecvt::state_type state04(\"UNICODE\", \"ISO-8859-15\");\n   initialize_state(state04);\n   int j = cvt.length(state03, e_lit, e_lit + size, 5);\n   VERIFY( j == 5 );"}]}