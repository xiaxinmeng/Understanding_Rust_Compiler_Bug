{"sha": "4eadbe80060ab6c45193a1a57fac84b035e1c328", "node_id": "C_kwDOANBUbNoAKDRlYWRiZTgwMDYwYWI2YzQ1MTkzYTFhNTdmYWM4NGIwMzVlMWMzMjg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-09T15:05:08Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-09T17:21:08Z"}, "message": "Clear NAN when reading back a global range if necessary.\n\nWhen reading back from the global store, we must clear the NAN bit if\nnecessary.  The reason it's not happening is because the constructor\nsets a NAN by default (when HONOR_NANS).  We must be careful to clear\nthe NAN bit if the original range didn't have a NAN.\n\nI have commented the reason we use the constructor instead of filling\nout the fields by hand, because it wasn't clear at re-reading this\ncode.\n\n\tPR 107569/tree-optimization\n\ngcc/ChangeLog:\n\n\t* value-range-storage.cc (frange_storage_slot::get_frange): Clear\n\tNAN if appropriate.\n\t* value-range.cc (range_tests_floats): New test.", "tree": {"sha": "824657e1545bc358240dc4549c9303e110bb0655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824657e1545bc358240dc4549c9303e110bb0655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eadbe80060ab6c45193a1a57fac84b035e1c328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eadbe80060ab6c45193a1a57fac84b035e1c328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eadbe80060ab6c45193a1a57fac84b035e1c328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eadbe80060ab6c45193a1a57fac84b035e1c328/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb3f172d33e319a6c15c4285f820b9f152d990e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb3f172d33e319a6c15c4285f820b9f152d990e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb3f172d33e319a6c15c4285f820b9f152d990e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "b57701f0ea102bf1d9e4bb792681d0d176c9ec8b", "filename": "gcc/value-range-storage.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eadbe80060ab6c45193a1a57fac84b035e1c328/gcc%2Fvalue-range-storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eadbe80060ab6c45193a1a57fac84b035e1c328/gcc%2Fvalue-range-storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-storage.cc?ref=4eadbe80060ab6c45193a1a57fac84b035e1c328", "patch": "@@ -276,13 +276,20 @@ frange_storage_slot::get_frange (frange &r, tree type) const\n       return;\n     }\n \n-  // Use the constructor because it will canonicalize the range.\n+  // We use the constructor to create the new range instead of writing\n+  // out the bits into the frange directly, because the global range\n+  // being read may be being inlined into a function with different\n+  // restrictions as when it was originally written.  We want to make\n+  // sure the resulting range is canonicalized correctly for the new\n+  // consumer.\n   r = frange (type, m_min, m_max, m_kind);\n \n   // The constructor will set the NAN bits for HONOR_NANS, but we must\n   // make sure to set the NAN sign if known.\n   if (HONOR_NANS (type) && (m_pos_nan ^ m_neg_nan) == 1)\n     r.update_nan (m_neg_nan);\n+  else if (!m_pos_nan && !m_neg_nan)\n+    r.clear_nan ();\n }\n \n bool"}, {"sha": "852ac09f2c46323d7eae7a7b9ff4331747301594", "filename": "gcc/value-range.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eadbe80060ab6c45193a1a57fac84b035e1c328/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eadbe80060ab6c45193a1a57fac84b035e1c328/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=4eadbe80060ab6c45193a1a57fac84b035e1c328", "patch": "@@ -4051,6 +4051,15 @@ range_tests_floats ()\n       ASSERT_TRUE (real_isinf (&r0.lower_bound (), true));\n       ASSERT_TRUE (real_isinf (&r0.upper_bound (), true));\n     }\n+\n+  // Test that reading back a global range yields the same result as\n+  // what we wrote into it.\n+  tree ssa = make_temp_ssa_name (float_type_node, NULL, \"blah\");\n+  r0.set_varying (float_type_node);\n+  r0.clear_nan ();\n+  set_range_info (ssa, r0);\n+  get_global_range_query ()->range_of_expr (r1, ssa);\n+  ASSERT_EQ (r0, r1);\n }\n \n // Run floating range tests for various combinations of NAN and INF"}]}