{"sha": "29382d668f42f548224ad463e1561badbb20fb85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzODJkNjY4ZjQyZjU0ODIyNGFkNDYzZTE1NjFiYWRiYjIwZmI4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-05T10:42:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-05T10:42:19Z"}, "message": "pexecute.c: Updates from gcc.\n\n        * pexecute.c: Updates from gcc.  Copy in gcc has been removed.  This\n        is the canonical copy.  Define ISSPACE if !IN_GCC.\n        * alloca.c, vfprintf.c: Similarly.\n\nFrom-SVN: r22249", "tree": {"sha": "fd464352e92bad0008f2067204436f5b84db7b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd464352e92bad0008f2067204436f5b84db7b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29382d668f42f548224ad463e1561badbb20fb85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29382d668f42f548224ad463e1561badbb20fb85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29382d668f42f548224ad463e1561badbb20fb85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29382d668f42f548224ad463e1561badbb20fb85/comments", "author": null, "committer": null, "parents": [{"sha": "39802f419ab60409c9cd1f5e9fe21d36169e4c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39802f419ab60409c9cd1f5e9fe21d36169e4c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39802f419ab60409c9cd1f5e9fe21d36169e4c59"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "0f8a21511db8f5112a4042762f6f8f0c4d5e5658", "filename": "libiberty/alloca.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29382d668f42f548224ad463e1561badbb20fb85/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29382d668f42f548224ad463e1561badbb20fb85/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=29382d668f42f548224ad463e1561badbb20fb85", "patch": "@@ -22,10 +22,26 @@\n    your main control loop, etc. to force garbage collection.  */\n \n #ifdef HAVE_CONFIG_H\n-#include \"config.h\"\n+#include <config.h>\n #endif\n \n-/* If compiling with GCC, this file's not needed.  */\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef emacs\n+#include \"blockinput.h\"\n+#endif\n+\n+/* If compiling with GCC 2, this file's not needed.  Except of course if\n+   the C alloca is explicitly requested.  */\n+#if defined (USE_C_ALLOCA) || !defined (__GNUC__) || __GNUC__ < 2\n+\n+/* If someone has defined alloca as a macro,\n+   there must be some other way alloca is supposed to work.  */\n #ifndef alloca\n \n #ifdef emacs\n@@ -53,11 +69,9 @@ long i00afunc ();\n #endif\n \n #if __STDC__\n-#include <stddef.h>\n typedef void *pointer;\n #else\n typedef char *pointer;\n-typedef unsigned size_t;\n #endif\n \n #ifndef NULL\n@@ -76,8 +90,8 @@ typedef unsigned size_t;\n \n #ifndef emacs\n #define malloc xmalloc\n-extern pointer xmalloc ();\n #endif\n+extern pointer malloc ();\n \n /* Define STACK_DIRECTION if you know the direction of stack\n    growth for your system; otherwise it will be automatically\n@@ -156,7 +170,7 @@ static header *last_alloca_header = NULL;\t/* -> last alloca header.  */\n \n pointer\n alloca (size)\n-     size_t size;\n+     unsigned size;\n {\n   auto char probe;\t\t/* Probes stack depth: */\n   register char *depth = ADDRESS_FUNCTION (probe);\n@@ -167,11 +181,15 @@ alloca (size)\n #endif\n \n   /* Reclaim garbage, defined as all alloca'd storage that\n-     was allocated from deeper in the stack than currently. */\n+     was allocated from deeper in the stack than currently.  */\n \n   {\n     register header *hp;\t/* Traverses linked list.  */\n \n+#ifdef emacs\n+    BLOCK_INPUT;\n+#endif\n+\n     for (hp = last_alloca_header; hp != NULL;)\n       if ((STACK_DIR > 0 && hp->h.deep > depth)\n \t  || (STACK_DIR < 0 && hp->h.deep < depth))\n@@ -186,6 +204,10 @@ alloca (size)\n \tbreak;\t\t\t/* Rest are not deeper.  */\n \n     last_alloca_header = hp;\t/* -> last valid storage.  */\n+\n+#ifdef emacs\n+    UNBLOCK_INPUT;\n+#endif\n   }\n \n   if (size == 0)\n@@ -197,6 +219,9 @@ alloca (size)\n     register pointer new = malloc (sizeof (header) + size);\n     /* Address of header.  */\n \n+    if (new == 0)\n+      abort();\n+\n     ((header *) new)->h.next = last_alloca_header;\n     ((header *) new)->h.deep = depth;\n \n@@ -326,7 +351,7 @@ struct stk_trailer\n \n #ifdef CRAY2\n /* Determine a \"stack measure\" for an arbitrary ADDRESS.\n-   I doubt that \"lint\" will like this much. */\n+   I doubt that \"lint\" will like this much.  */\n \n static long\n i00afunc (long *address)\n@@ -477,3 +502,4 @@ i00afunc (long address)\n #endif /* CRAY */\n \n #endif /* no alloca */\n+#endif /* not GCC version 2 */"}, {"sha": "db7b2ff4c19e0f92e7548e11430ec79fbba6465f", "filename": "libiberty/vfprintf.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29382d668f42f548224ad463e1561badbb20fb85/libiberty%2Fvfprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29382d668f42f548224ad463e1561badbb20fb85/libiberty%2Fvfprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfprintf.c?ref=29382d668f42f548224ad463e1561badbb20fb85", "patch": "@@ -1,13 +1,21 @@\n-#include <stdio.h>\n+/* Provide a version vfprintf in terms of _doprnt.\n+   By Kaveh Ghazi  (ghazi@caip.rutgers.edu)  3/29/98\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+ */\n+\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n #include <varargs.h>\n-#include <ansidecl.h>\n+#endif\n+#include <stdio.h>\n #undef vfprintf\n \n int\n-vfprintf (file, format, ap)\n-     FILE *file;\n-     const char *format;\n-     va_list ap;\n+vfprintf (stream, format, ap)\n+  FILE * stream;\n+  const char * format;\n+  va_list ap;\n {\n-   return _doprnt (format, ap, file);\n+  return _doprnt (format, ap, stream);\n }"}]}