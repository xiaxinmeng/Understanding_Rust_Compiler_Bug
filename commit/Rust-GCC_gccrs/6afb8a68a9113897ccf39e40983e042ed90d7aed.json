{"sha": "6afb8a68a9113897ccf39e40983e042ed90d7aed", "node_id": "C_kwDOANBUbNoAKDZhZmI4YTY4YTkxMTM4OTdjY2YzOWU0MDk4M2UwNDJlZDkwZDdhZWQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-16T21:29:41Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-17T22:56:26Z"}, "message": "attribs: Fix wrong error with -Wno-attribute=A::b [PR103649]\n\nMy patch to implement -Wno-attribute=A::b caused a bogus error when\nparsing\n\n  [[foo::bar(1, 2)]];\n\nwhen -Wno-attributes=foo::bar was specified on the command line, because\nwhen we create a fake foo::bar attribute and insert it into our attribute\ntable, it is created with max_length == 0 which doesn't allow any args.\nThat is wrong -- we know nothing about the attribute, so we shouldn't\nrequire any specific number of arguments.  And since unknown attributes\ncan be rather complex (see for example omp::{directive,sequence}), we\nmust skip parsing their arguments.  To that end, I'm using max_length\nwith value -2.\n\nAlso let's not warn about things like\n\n  [[vendor::assume(true)]];\n\nbecause they may have some meaning (this is reminiscent of C++ Portable\nAssumptions).\n\n\tPR c/103649\n\ngcc/ChangeLog:\n\n\t* attribs.c (handle_ignored_attributes_option): Create the fake\n\tattribute with max_length == -2.\n\t(attribute_ignored_p): New overloads.\n\t* attribs.h (attribute_ignored_p): Declare them.\n\t* tree-core.h (struct attribute_spec): Document that max_length\n\tcan be -2.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (c_warn_unused_attributes): Don't warn for\n\tattribute_ignored_p.\n\t* c-parser.c (c_parser_std_attribute): Skip parsing of the attribute\n\targuments when the attribute is ignored.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_declaration): Don't warn for attribute_ignored_p.\n\t(cp_parser_std_attribute): Skip parsing of the attribute\n\targuments when the attribute is ignored.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wno-attributes-6.c: New test.", "tree": {"sha": "dd26347d03e98714dcb291f7a409dde9c04d02e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd26347d03e98714dcb291f7a409dde9c04d02e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6afb8a68a9113897ccf39e40983e042ed90d7aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afb8a68a9113897ccf39e40983e042ed90d7aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afb8a68a9113897ccf39e40983e042ed90d7aed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afb8a68a9113897ccf39e40983e042ed90d7aed/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ea158fa0d44d6d81f5e8a8d875c917bd086b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ea158fa0d44d6d81f5e8a8d875c917bd086b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ea158fa0d44d6d81f5e8a8d875c917bd086b99"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "9e7b7c1abd202864a9ad4d5c2cd7be7ec859316c", "filename": "gcc/attribs.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -304,7 +304,7 @@ handle_ignored_attributes_option (vec<char *> *v)\n \t We can't free it here, so squirrel away the pointers.  */\n       attribute_spec *table = new attribute_spec[2];\n       ignored_attributes_table.safe_push (table);\n-      table[0] = { attr, 0, 0, false, false, false, false, nullptr, nullptr };\n+      table[0] = { attr, 0, -2, false, false, false, false, nullptr, nullptr };\n       table[1] = { nullptr, 0, 0, false, false, false, false, nullptr,\n \t\t   nullptr };\n       register_scoped_attributes (table, IDENTIFIER_POINTER (vendor_id), !attr);\n@@ -569,6 +569,32 @@ attr_namespace_ignored_p (tree ns)\n   return r && r->ignored_p;\n }\n \n+/* Return true if the attribute ATTR should not be warned about.  */\n+\n+bool\n+attribute_ignored_p (tree attr)\n+{\n+  if (!cxx11_attribute_p (attr))\n+    return false;\n+  if (tree ns = get_attribute_namespace (attr))\n+    {\n+      if (attr_namespace_ignored_p (ns))\n+\treturn true;\n+      const attribute_spec *as = lookup_attribute_spec (TREE_PURPOSE (attr));\n+      if (as && as->max_length == -2)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Like above, but takes an attribute_spec AS, which must be nonnull.  */\n+\n+bool\n+attribute_ignored_p (const attribute_spec *const as)\n+{\n+  return as->max_length == -2;\n+}\n+\n /* Process the attributes listed in ATTRIBUTES and install them in *NODE,\n    which is either a DECL (including a TYPE_DECL) or a TYPE.  If a DECL,\n    it should be modified in place; if a TYPE, a copy should be created"}, {"sha": "4928b126f59c1073185f2fe35a06f17ee0c4d238", "filename": "gcc/attribs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -39,6 +39,8 @@ extern tree get_attribute_name (const_tree);\n extern tree get_attribute_namespace (const_tree);\n extern void apply_tm_attr (tree, tree);\n extern tree make_attribute (const char *, const char *, tree);\n+extern bool attribute_ignored_p (tree);\n+extern bool attribute_ignored_p (const attribute_spec *const);\n \n extern struct scoped_attributes* register_scoped_attributes (const struct attribute_spec *,\n \t\t\t\t\t\t\t     const char *,"}, {"sha": "516e3c26e217a7311a000b615a55a80453565cd1", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -4643,7 +4643,7 @@ c_warn_unused_attributes (tree attrs)\n \t constraint violation.  */\n       pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n \t       get_attribute_name (t));\n-    else\n+    else if (!attribute_ignored_p (t))\n       warning (OPT_Wattributes, \"%qE attribute ignored\",\n \t       get_attribute_name (t));\n }"}, {"sha": "b09ad307acdafa3e25b8112318788e91df7f966f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -4943,7 +4943,9 @@ c_parser_std_attribute (c_parser *parser, bool for_tm)\n \tparens.skip_until_found_close (parser);\n \treturn error_mark_node;\n       }\n-    if (as)\n+    /* If this is a fake attribute created to handle -Wno-attributes,\n+       we must skip parsing the arguments.  */\n+    if (as && !attribute_ignored_p (as))\n       {\n \tbool takes_identifier\n \t  = (ns != NULL_TREE"}, {"sha": "33fb40a5b59a3fb09f0c35ea6073658be31b3b81", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -14776,7 +14776,7 @@ cp_parser_declaration (cp_parser* parser, tree prefix_attrs)\n \t    }\n \t}\n \n-      if (std_attrs != NULL_TREE)\n+      if (std_attrs != NULL_TREE && !attribute_ignored_p (std_attrs))\n \twarning_at (make_location (attrs_loc, attrs_loc, parser->lexer),\n \t\t    OPT_Wattributes, \"attribute ignored\");\n       if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n@@ -28979,7 +28979,9 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n       /* A GNU attribute that takes an identifier in parameter.  */\n       attr_flag = id_attr;\n \n-    if (as == NULL)\n+    /* If this is a fake attribute created to handle -Wno-attributes,\n+       we must skip parsing the arguments.  */\n+    if (as == NULL || attribute_ignored_p (as))\n       {\n \tif ((flag_openmp || flag_openmp_simd) && attr_ns == omp_identifier)\n \t  {"}, {"sha": "ca3c7bebb99a97972786f8f4e5ab71c9ebd835d1", "filename": "gcc/testsuite/c-c++-common/Wno-attributes-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWno-attributes-6.c?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/103649 */\n+/* { dg-do compile { target { c || c++11 } } } */\n+/* { dg-additional-options \"-Wno-attributes=foo::bar\" } */\n+/* { dg-additional-options \"-Wno-attributes=baz::\" } */\n+/* { dg-additional-options \"-Wno-attributes=womp::womp\" } */\n+/* { dg-additional-options \"-Wno-attributes=qux::foo\" } */\n+/* { dg-additional-options \"-Wno-attributes=vendor::assume\" } */\n+\n+[[vendor::assume(1 + 1 == 2)]];\n+[[foo::bar(1, 2)]];\n+[[baz::bar(1, 2)]];\n+[[foo::bar(1, 2)]] void f1();\n+[[baz::bar(1, 2)]] void f2();\n+[[qux::foo({t})]] void f3(); \n+[[womp::womp (another::directive (threadprivate (t)))]] void f4();\n+[[womp::womp (another::directive (threadprivate (t)))]];"}, {"sha": "9b37a065d18979d7c64d84a7b60cd73c5c809ac4", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afb8a68a9113897ccf39e40983e042ed90d7aed/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=6afb8a68a9113897ccf39e40983e042ed90d7aed", "patch": "@@ -2077,7 +2077,9 @@ struct attribute_spec {\n   /* The minimum length of the list of arguments of the attribute.  */\n   int min_length;\n   /* The maximum length of the list of arguments of the attribute\n-     (-1 for no maximum).  */\n+     (-1 for no maximum).  It can also be -2 for fake attributes\n+     created for the sake of -Wno-attributes; in that case, we\n+     should skip the balanced token sequence when parsing the attribute.  */\n   int max_length;\n   /* Whether this attribute requires a DECL.  If it does, it will be passed\n      from types of DECLs, function return types and array element types to"}]}