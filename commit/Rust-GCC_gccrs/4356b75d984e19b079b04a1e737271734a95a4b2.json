{"sha": "4356b75d984e19b079b04a1e737271734a95a4b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1NmI3NWQ5ODRlMTliMDc5YjA0YTFlNzM3MjcxNzM0YTk1YTRiMg==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2011-10-28T21:38:56Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2011-10-28T21:38:56Z"}, "message": "rs6000.md (define_attr \"type\"): Add vecdouble.\n\n        * config/rs6000/rs6000.md (define_attr \"type\"): Add vecdouble.\n        * config/rs6000/vsx.md (VStype_simple, VStype_mul): Use\n        * vecdouble\n        type for V2DF.\n        (VStype_div): Use vector types for V2DF/V4SF.\n        (VStype_sqrt): Use *sqrt types.\n        (VS_spdp_type): Change type to vecdouble.\n        (*vsx_fmav2df4, *vsx_nfmsv2df4, vsx_xvcvdpsxws, vsx_xvcvdpuxws,\n        vsx_xvcvuxdsp, vsx_xvcvsxwdp, vsx_xvcvuxwdp, vsx_xvcvspsxds,\n        vsx_xvcvspuxds): Likewise.\n        (*vsx_fms<mode>4): Set type via <VStype_mul>.\n        (*vsx_eq_<mode>_p, *vsx_gt_<mode>_p, *vsx_ge_<mode>_p): Set type\nvia\n        <VStype_simple>.\n        * config/rs6000/power7.md (power7-vecstore): Correct VSU pipe.\n        (power7-fpcompare, power7-sdiv, power7-ddiv, power7-sqrt,\n        power7-dsqrt): Correct insn latency.\n        (power7-vecsimple): Add veccmp type and correct dispatch/VSU\nvalues.\n        (power7-veccmp): Delete.\n        (power7-vecfloat): Correct latency/dispatch/VSU values.\n        (define_bypass \"power7-vecfloat\"): Correct latency and types.\n        (power7-veccomplex, power7-vecperm): Correct dispatch/VSU\nvalues.\n        (power7-vecdouble, power7-vecfdiv, power7-vecdiv): New.\n\nFrom-SVN: r180632", "tree": {"sha": "38c9d79c570f9b80d0dc2d1a961e00f1c59aaafa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c9d79c570f9b80d0dc2d1a961e00f1c59aaafa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4356b75d984e19b079b04a1e737271734a95a4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4356b75d984e19b079b04a1e737271734a95a4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4356b75d984e19b079b04a1e737271734a95a4b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4356b75d984e19b079b04a1e737271734a95a4b2/comments", "author": null, "committer": null, "parents": [{"sha": "9be087f649a4c126d35c1f7b5d9c355d5cb7379f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be087f649a4c126d35c1f7b5d9c355d5cb7379f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be087f649a4c126d35c1f7b5d9c355d5cb7379f"}], "stats": {"total": 122, "additions": 80, "deletions": 42}, "files": [{"sha": "0d1f47de1916abf35e528b0c431eded4ae1c0fd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4356b75d984e19b079b04a1e737271734a95a4b2", "patch": "@@ -1,3 +1,27 @@\n+2011-10-28  Pat Haugen <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): Add vecdouble.\n+\t* config/rs6000/vsx.md (VStype_simple, VStype_mul): Use vecdouble\n+\ttype for V2DF.\n+\t(VStype_div): Use vector types for V2DF/V4SF.\n+\t(VStype_sqrt): Use *sqrt types.\n+\t(VS_spdp_type): Change type to vecdouble.\n+\t(*vsx_fmav2df4, *vsx_nfmsv2df4, vsx_xvcvdpsxws, vsx_xvcvdpuxws,\n+\tvsx_xvcvuxdsp, vsx_xvcvsxwdp, vsx_xvcvuxwdp, vsx_xvcvspsxds,\n+\tvsx_xvcvspuxds): Likewise.\n+\t(*vsx_fms<mode>4): Set type via <VStype_mul>.\n+\t(*vsx_eq_<mode>_p, *vsx_gt_<mode>_p, *vsx_ge_<mode>_p): Set type via\n+\t<VStype_simple>.\n+\t* config/rs6000/power7.md (power7-vecstore): Correct VSU pipe.\n+\t(power7-fpcompare, power7-sdiv, power7-ddiv, power7-sqrt,\n+\tpower7-dsqrt): Correct insn latency.\n+\t(power7-vecsimple): Add veccmp type and correct dispatch/VSU values.\n+\t(power7-veccmp): Delete.\n+\t(power7-vecfloat): Correct latency/dispatch/VSU values.\n+\t(define_bypass \"power7-vecfloat\"): Correct latency and types.\n+\t(power7-veccomplex, power7-vecperm): Correct dispatch/VSU values.\n+\t(power7-vecdouble, power7-vecfdiv, power7-vecdiv): New.\n+\n 2011-10-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (shift_insn): Rename code attribute from"}, {"sha": "9071bd5e8e0ee34539067b9edf68d50379ce3e61", "filename": "gcc/config/rs6000/power7.md", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower7.md?ref=4356b75d984e19b079b04a1e737271734a95a4b2", "patch": "@@ -139,7 +139,7 @@\n (define_insn_reservation \"power7-vecstore\" 6\n   (and (eq_attr \"type\" \"vecstore\")\n        (eq_attr \"cpu\" \"power7\"))\n-  \"DU_power7,LSU_power7+VSU_power7\")\n+  \"DU_power7,LSU_power7+vsu2_power7\")\n \n (define_insn_reservation \"power7-sync\" 11\n   (and (eq_attr \"type\" \"sync\")\n@@ -265,54 +265,69 @@\n \n (define_bypass 8 \"power7-fp\" \"power7-branch\")\n \n-(define_insn_reservation \"power7-fpcompare\" 4\n+(define_insn_reservation \"power7-fpcompare\" 8\n   (and (eq_attr \"type\" \"fpcompare\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n-(define_insn_reservation \"power7-sdiv\" 26\n+(define_insn_reservation \"power7-sdiv\" 27\n   (and (eq_attr \"type\" \"sdiv\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n-(define_insn_reservation \"power7-ddiv\" 32\n+(define_insn_reservation \"power7-ddiv\" 33\n   (and (eq_attr \"type\" \"ddiv\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n-(define_insn_reservation \"power7-sqrt\" 31\n+(define_insn_reservation \"power7-sqrt\" 32\n   (and (eq_attr \"type\" \"ssqrt\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n-(define_insn_reservation \"power7-dsqrt\" 43\n+(define_insn_reservation \"power7-dsqrt\" 44\n   (and (eq_attr \"type\" \"dsqrt\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n (define_insn_reservation \"power7-vecsimple\" 2\n-  (and (eq_attr \"type\" \"vecsimple\")\n-       (eq_attr \"cpu\" \"power7\"))\n-  \"du1_power7,VSU_power7\")\n-\n-(define_insn_reservation \"power7-veccmp\" 7\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n        (eq_attr \"cpu\" \"power7\"))\n-  \"du1_power7,VSU_power7\")\n+  \"DU_power7,vsu1_power7\")\n \n-(define_insn_reservation \"power7-vecfloat\" 7\n+(define_insn_reservation \"power7-vecfloat\" 6\n   (and (eq_attr \"type\" \"vecfloat\")\n        (eq_attr \"cpu\" \"power7\"))\n-  \"du1_power7,VSU_power7\")\n+  \"DU_power7,vsu1_power7\")\n \n-(define_bypass 6 \"power7-vecfloat\" \"power7-vecfloat\")\n+(define_bypass 7 \"power7-vecfloat\" \"power7-vecsimple,power7-veccomplex,\\\n+\t\t\t\t    power7-vecperm\")\n \n (define_insn_reservation \"power7-veccomplex\" 7\n   (and (eq_attr \"type\" \"veccomplex\")\n        (eq_attr \"cpu\" \"power7\"))\n-  \"du1_power7,VSU_power7\")\n+  \"DU_power7,vsu1_power7\")\n \n (define_insn_reservation \"power7-vecperm\" 3\n   (and (eq_attr \"type\" \"vecperm\")\n        (eq_attr \"cpu\" \"power7\"))\n-  \"du2_power7,VSU_power7\")\n+  \"DU_power7,vsu2_power7\")\n+\n+(define_insn_reservation \"power7-vecdouble\" 6\n+  (and (eq_attr \"type\" \"vecdouble\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_bypass 7 \"power7-vecdouble\" \"power7-vecsimple,power7-veccomplex,\\\n+\t\t\t\t    power7-vecperm\")\n+\n+(define_insn_reservation \"power7-vecfdiv\" 26\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-vecdiv\" 32\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+"}, {"sha": "7255329069ef18c213872b700ada74e3544ff94b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4356b75d984e19b079b04a1e737271734a95a4b2", "patch": "@@ -144,7 +144,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr,isel\"\n+(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,vecdouble,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr,isel\"\n   (const_string \"integer\"))\n \n ;; Define floating point instruction sub-types for use with Xfpu.md"}, {"sha": "fb8603423044e72ab4bd188be7a6618d4e7699c3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4356b75d984e19b079b04a1e737271734a95a4b2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=4356b75d984e19b079b04a1e737271734a95a4b2", "patch": "@@ -120,7 +120,7 @@\n \t\t\t (DF    \"s\")])\n \n ;; Appropriate type for add ops (and other simple FP ops)\n-(define_mode_attr VStype_simple\t[(V2DF \"vecfloat\")\n+(define_mode_attr VStype_simple\t[(V2DF \"vecdouble\")\n \t\t\t\t (V4SF \"vecfloat\")\n \t\t\t\t (DF   \"fp\")])\n \n@@ -129,18 +129,17 @@\n \t\t\t\t   (DF   \"fp_addsub_d\")])\n \n ;; Appropriate type for multiply ops\n-(define_mode_attr VStype_mul\t[(V2DF \"vecfloat\")\n+(define_mode_attr VStype_mul\t[(V2DF \"vecdouble\")\n \t\t\t\t (V4SF \"vecfloat\")\n \t\t\t\t (DF   \"dmul\")])\n \n (define_mode_attr VSfptype_mul\t[(V2DF \"fp_mul_d\")\n \t\t\t\t (V4SF \"fp_mul_s\")\n \t\t\t\t (DF   \"fp_mul_d\")])\n \n-;; Appropriate type for divide ops.  For now, just lump the vector divide with\n-;; the scalar divides\n-(define_mode_attr VStype_div\t[(V2DF \"ddiv\")\n-\t\t\t\t (V4SF \"sdiv\")\n+;; Appropriate type for divide ops.\n+(define_mode_attr VStype_div\t[(V2DF \"vecdiv\")\n+\t\t\t\t (V4SF \"vecfdiv\")\n \t\t\t\t (DF   \"ddiv\")])\n \n (define_mode_attr VSfptype_div\t[(V2DF \"fp_div_d\")\n@@ -150,8 +149,8 @@\n ;; Appropriate type for sqrt ops.  For now, just lump the vector sqrt with\n ;; the scalar sqrt\n (define_mode_attr VStype_sqrt\t[(V2DF \"dsqrt\")\n-\t\t\t\t (V4SF \"sdiv\")\n-\t\t\t\t (DF   \"ddiv\")])\n+\t\t\t\t (V4SF \"ssqrt\")\n+\t\t\t\t (DF   \"dsqrt\")])\n \n (define_mode_attr VSfptype_sqrt\t[(V2DF \"fp_sqrt_d\")\n \t\t\t\t (V4SF \"fp_sqrt_s\")\n@@ -171,8 +170,8 @@\n \t\t\t\t(V2DF\t\"xvcvdpsp\")])\n \n (define_mode_attr VS_spdp_type [(DF\t\"fp\")\n-\t\t\t\t(V4SF\t\"vecfloat\")\n-\t\t\t\t(V2DF\t\"vecfloat\")])\n+\t\t\t\t(V4SF\t\"vecdouble\")\n+\t\t\t\t(V2DF\t\"vecdouble\")])\n \n ;; Map the scalar mode for a vector type\n (define_mode_attr VS_scalar [(V2DF\t\"DF\")\n@@ -572,7 +571,7 @@\n    xvmaddmdp %x0,%x1,%x3\n    xvmaddadp %x0,%x1,%x2\n    xvmaddmdp %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"*vsx_fmsdf4\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n@@ -604,7 +603,7 @@\n    x<VSv>msubm<VSs> %x0,%x1,%x3\n    x<VSv>msuba<VSs> %x0,%x1,%x2\n    x<VSv>msubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfmadf4\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n@@ -688,7 +687,7 @@\n    xvnmsubmdp %x0,%x1,%x3\n    xvnmsubadp %x0,%x1,%x2\n    xvnmsubmdp %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n ;; Vector conditional expressions (no scalar version for these instructions)\n (define_insn \"vsx_eq<mode>\"\n@@ -741,7 +740,7 @@\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpeq<VSs>. %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_gt_<mode>_p\"\n   [(set (reg:CC 74)\n@@ -754,7 +753,7 @@\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpgt<VSs>. %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_ge_<mode>_p\"\n   [(set (reg:CC 74)\n@@ -767,7 +766,7 @@\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpge<VSs>. %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Vector select\n (define_insn \"*vsx_xxsel<mode>\"\n@@ -948,15 +947,15 @@\n \t\t     UNSPEC_VSX_CVDPSXWS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvdpsxws %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvdpuxws\"\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=v,?wa\")\n \t(unspec:V4SI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wd,wa\")]\n \t\t     UNSPEC_VSX_CVDPUXWS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvdpuxws %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvsxdsp\"\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wd,?wa\")\n@@ -972,7 +971,7 @@\n \t\t     UNSPEC_VSX_CVUXDSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvuxwdp %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n ;; Convert from 32-bit to 64-bit types\n (define_insn \"vsx_xvcvsxwdp\"\n@@ -981,31 +980,31 @@\n \t\t     UNSPEC_VSX_CVSXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvsxwdp %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvuxwdp\"\n   [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,?wa\")\n \t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_CVUXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvuxwdp %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvspsxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n \t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wd,wa\")]\n \t\t     UNSPEC_VSX_CVSPSXDS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvspsxds %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvspuxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n \t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wd,wa\")]\n \t\t     UNSPEC_VSX_CVSPUXDS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvspuxds %x0,%x1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecdouble\")])\n \n ;; Only optimize (float (fix x)) -> frz if we are in fast-math mode, since\n ;; since the xsrdpiz instruction does not truncate the value if the floating"}]}