{"sha": "669540aa7297bf95ccbf772890c14e726ab1f2ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5NTQwYWE3Mjk3YmY5NWNjYmY3NzI4OTBjMTRlNzI2YWIxZjJlYQ==", "commit": {"author": {"name": "Harsha Jagasia", "email": "harsha.jagasia@amd.com", "date": "2008-11-03T16:43:02Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2008-11-03T16:43:02Z"}, "message": "re PR tree-optimization/37684 ([graphite] basic block containing VDEF of a scalar does not dominate basic block containing VUSE of the same scalar)\n\n2008-11-03  Harsha Jagasia  <harsha.jagasia@amd.com>\n\n\tPR tree-optimization/37684\n\t* gcc.dg/graphite/pr37684.c: New.\n\t* graphite.c (exclude_component_ref): New.\n\t(is_simple_operand): Call exclude_component_ref.\n\nFrom-SVN: r141551", "tree": {"sha": "440c21c8ac130fa7e70f68cf8d3d71d50fd7e22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/440c21c8ac130fa7e70f68cf8d3d71d50fd7e22b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669540aa7297bf95ccbf772890c14e726ab1f2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669540aa7297bf95ccbf772890c14e726ab1f2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669540aa7297bf95ccbf772890c14e726ab1f2ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669540aa7297bf95ccbf772890c14e726ab1f2ea/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8aee8e6df674cf70cab38d2a7e182afabb0f2f"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "c3b744628b24009130c89bc088f8bd2e382a4960", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=669540aa7297bf95ccbf772890c14e726ab1f2ea", "patch": "@@ -1,3 +1,10 @@\n+2008-11-03  Harsha Jagasia  <harsha.jagasia@amd.com>\n+\n+\tPR tree-optimization/37684\n+\t* gcc.dg/graphite/pr37684.c: New.\n+\t* graphite.c (exclude_component_ref): New.\n+\t(is_simple_operand): Call exclude_component_ref.\n+\n 2008-11-03  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/36908"}, {"sha": "90d823012022f35f9d93d75ffb6a49892c6a3f6d", "filename": "gcc/graphite.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=669540aa7297bf95ccbf772890c14e726ab1f2ea", "patch": "@@ -864,6 +864,33 @@ loop_affine_expr (basic_block scop_entry, struct loop *loop, tree expr)\n \t  || evolution_function_is_affine_multivariate_p (scev, n));\n }\n \n+/* Return false if the tree_code of the operand OP or any of its operands\n+   is component_ref.  */\n+\n+static bool\n+exclude_component_ref (tree op) \n+{\n+  int i;\n+  int len;\n+\n+  if (op)\n+    {\n+      if (TREE_CODE (op) == COMPONENT_REF)\n+\treturn false;\n+      else\n+\t{\n+\t  len = TREE_OPERAND_LENGTH (op);\t  \n+\t  for (i = 0; i < len; ++i)\n+\t    {\n+\t      if (!exclude_component_ref (TREE_OPERAND (op, i)))\n+\t\treturn false;\n+\t    }\n+\t}\n+    }\n+\n+  return true;\n+}\n+\n /* Return true if the operand OP is simple.  */\n \n static bool\n@@ -879,7 +906,7 @@ is_simple_operand (loop_p loop, gimple stmt, tree op)\n \t  && !stmt_simple_memref_p (loop, stmt, op)))\n     return false;\n \n-  return true;\n+  return exclude_component_ref (op);\n }\n \n /* Return true only when STMT is simple enough for being handled by"}, {"sha": "35c32911c30b89e7105da69c34d89472e95401b9", "filename": "gcc/testsuite/gcc.dg/graphite/pr37684.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37684.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669540aa7297bf95ccbf772890c14e726ab1f2ea/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37684.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37684.c?ref=669540aa7297bf95ccbf772890c14e726ab1f2ea", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-options \"-O2 -floop-block -fdump-tree-graphite-all\" } */\n+\n+typedef struct _IO_FILE FILE;\n+struct _IO_marker {\n+};\n+enum __codecvt_result\n+{\n+  __codecvt_noconv\n+};\n+struct _IO_FILE {\n+};\n+extern struct _IO_FILE *stderr;\n+\n+typedef\n+   struct {\n+      unsigned int avail_in;\n+      unsigned int avail_out;\n+      void *state;\n+      void *(*bzalloc)(void *,int,int);\n+      void *opaque;\n+   }\n+   bz_stream;\n+extern int BZ2_bzCompressInit (\n+      bz_stream* strm,\n+      int blockSize100k,\n+      int verbosity,\n+      int workFactor\n+   );\n+typedef unsigned char Bool;\n+typedef int Int32;\n+typedef unsigned int UInt32;\n+\n+typedef\n+   struct {\n+      Int32 mode;\n+      Int32 state;\n+      UInt32* arr1;\n+      UInt32* arr2;\n+      UInt32* ftab;\n+      Int32 nblock;\n+      Int32 nblockMAX;\n+      Bool inUse[256];\n+      Int32 blockNo;\n+   }\n+   EState;\n+\n+void prepare_new_block ( EState* s )\n+{\n+   Int32 i;\n+   for (i = 0; i < 256; i++) s->inUse[i] = ((Bool)0);\n+   s->blockNo++;\n+}\n+\n+int BZ2_bzCompressInit\n+                    ( bz_stream* strm,\n+                     int blockSize100k,\n+                     int verbosity,\n+                     int workFactor )\n+{\n+   EState* s;\n+   s = (strm->bzalloc)(strm->opaque,(sizeof(EState)),1);\n+   if (s->arr1 == ((void *)0) || s->arr2 == ((void *)0) || s->ftab == ((void *)0)) {\n+   }\n+   prepare_new_block ( s );\n+}"}]}