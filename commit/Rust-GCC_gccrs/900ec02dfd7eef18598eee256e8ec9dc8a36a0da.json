{"sha": "900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwZWMwMmRmZDdlZWYxODU5OGVlZTI1NmU4ZWM5ZGM4YTM2YTBkYQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2007-01-12T09:32:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-12T09:32:59Z"}, "message": "200x-xx-xx Julian Brown <julian@codesourcery.com> Nathan Sidwell...\n\ngcc/\n200x-xx-xx  Julian Brown  <julian@codesourcery.com>\n\t    Nathan Sidwell  <nathan@codesourcery.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* config.gcc (m680[012]0-*-*, m68k*-*-*): Set m68k_cpu_ident to\n\tthe -mcpu= argument associated with the --with-cpu setting.\n\tDefine M68K_DEFAULT_TUNE to the default -mtune= option,\n\tif different from the one implied by the -mcpu setting.\n\tAccept --with-cpu=FOO if FOO is listed in m68k-devices.def,\n\tusing mcpu=FOO as the default CPU option.  Set target_cpu_default2.\n\t* doc/invoke.texi: Mention ColdFire in the introduction to the\n\tm68k options.  Document the new -march, -mcpu, -mtune, -mdiv,\n\t-mno-div and -mhard-float options.  Make -m68881 a synonym for\n\t-mhard-float.  Document the previously-undocumented -m5206e,\n\t-m528x, -m5307 and -m5407 options.  Tweak the existing option\n\tdocumentation for consistency.\n\t* doc/install.texi: Mention new --with-cpu arguments.\n\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS): Only use the\n\tdefault CPU if neither -mcpu nor -march are specified.\n\t(ASM_CPU_SPEC): Pass down -mcpu and -march options.\n\t(TARGET_CPU_CPP_BUILTINS): Set __mcfisa*__ macros from\n\tTARGET_ISA*.  Set the legacy __mcf*__ cpu macros in the same way,\n\tusing m68k_tune to decide between families that implement the\n\tsame ISA.  Use m68k_tune to set __mcfv4e__.\n\t(FL_BITFIELD, FL_68881, FL_COLDFIRE, FL_CF_HWDIV, FL_CF_MAC)\n\t(FL_CF_EMAC, FL_CF_EMAC_B, FL_CF_USP, FL_CF_FPU, FL_ISA_68000)\n\t(FL_ISA_68010, FL_ISA_68020, FL_ISA_68040, FL_ISA_A, FL_ISA_B)\n\t(FL_ISA_C, FL_ISA_MMU): New macros.\n\t(MASK_COLDFIRE): Delete.\n\t(TARGET_68010, TARGET_68020, TARGET_68040_ONLY, TARGET_COLDFIRE)\n\t(TARGET_ISAB): Redefine in terms of m68k_cpu_flags.\n\t(TARGET_68881, TARGET_COLDFIRE_FPU): Redefine in terms of m68k_fpu.\n\t(TARGET_HARD_FLOAT): Do not define here.\n\t(TARGET_ISAAPLUS, TARGET_ISAC): New macros.\n\t(TUNE_68000): New macro.\n\t(TUNE_68000_10): Redefine in terms of TUNE_68000 and TUNE_68010.\n\t(TUNE_68010, TUNE_68030, TUNE_68040, TUNE_68060, TUNE_CPU32)\n\t(TUNE_CFV2): Redefine in terms of m68k_tune.\n\t(uarch_type, target_device, fpu_type): New enums.\n\t(m68k_cpu, m68k_tune, m68k_fpu, m68k_cpu_flags): Declare.\n\t* config/m68k/m68k.c (TARGET_DEFAULT): Remove MASK_68881.\n\t(FL_FOR_isa_00, FL_FOR_isa_10, FL_FOR_isa_20, FL_FOR_isa_40)\n\t(FL_FOR_isa_cpu32, FL_FOR_isa_a, FL_FOR_isa_aplus, FL_FOR_isa_b)\n\t(FL_FOR_isa_c): New macros.\n\t(m68k_isa): New enum.\n\t(m68k_target_selection): New structure.\n\t(all_devices, all_isas, all_microarchs): New tables.\n\t(m68k_cpu_entry, m68k_arch_entry, m68k_tune_entry, m68k_cpu)\n\t(m68k_tune, m68k_fpu, m68k_cpu_flags): New variables.\n\t(MASK_ALL_CPU_BITS): Delete.\n\t(m68k_find_selection): New function.\n\t(m68k_handle_option): Handle -mcpu=, -march= and -mtune=.\n\tMap the legacy target options to a combination of the new ones.\n\t(override_options): Set m68k_cpu, m68k_tune, m68k_fpu and\n\tm68k_cpu_flags.  Handle M68K_DEFAULT_TUNE.  Use m68k_cpu_flags\n\tto derive default MASK_BITFIELD, MASK_CF_HWDIV and MASK_HARD_FLOAT\n\tsettings.\n\t* config/m68k/m68k.opt (m5200, m5206e, m528x, m5307, m5407, mcfv4e)\n\t(m68010, m68020, m68020-40, m68020-60, m68030, m68040): Remove Mask\n\tproperties.\n\t(m68881, msoft-float): Change mask from 68881 to HARD_FLOAT.\n\t(march=, mcpu=, mdiv, mhard-float, mtune=): New options.\n\t* config/m68k/m68k-devices.def: New file.\n\nCo-Authored-By: Nathan Sidwell <nathan@codesourcery.com>\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r120713", "tree": {"sha": "b8cd80824069857c9509b3135d20604f15830714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8cd80824069857c9509b3135d20604f15830714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c004537ffbedafce28ca062dbcb5951aaa7c289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c004537ffbedafce28ca062dbcb5951aaa7c289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c004537ffbedafce28ca062dbcb5951aaa7c289"}], "stats": {"total": 923, "additions": 777, "deletions": 146}, "files": [{"sha": "6f6508e4de215d6847fbb051028693912535b900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -1,3 +1,67 @@\n+2007-01-12  Julian Brown  <julian@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (m680[012]0-*-*, m68k*-*-*): Set m68k_cpu_ident to\n+\tthe -mcpu= argument associated with the --with-cpu setting.\n+\tDefine M68K_DEFAULT_TUNE to the default -mtune= option,\n+\tif different from the one implied by the -mcpu setting.\n+\tAccept --with-cpu=FOO if FOO is listed in m68k-devices.def,\n+\tusing mcpu=FOO as the default CPU option.  Set target_cpu_default2.\n+\t* doc/invoke.texi: Mention ColdFire in the introduction to the\n+\tm68k options.  Document the new -march, -mcpu, -mtune, -mdiv,\n+\t-mno-div and -mhard-float options.  Make -m68881 a synonym for\n+\t-mhard-float.  Document the previously-undocumented -m5206e,\n+\t-m528x, -m5307 and -m5407 options.  Tweak the existing option\n+\tdocumentation for consistency.\n+\t* doc/install.texi: Mention new --with-cpu arguments.\n+\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS): Only use the\n+\tdefault CPU if neither -mcpu nor -march are specified.\n+\t(ASM_CPU_SPEC): Pass down -mcpu and -march options.\n+\t(TARGET_CPU_CPP_BUILTINS): Set __mcfisa*__ macros from\n+\tTARGET_ISA*.  Set the legacy __mcf*__ cpu macros in the same way,\n+\tusing m68k_tune to decide between families that implement the\n+\tsame ISA.  Use m68k_tune to set __mcfv4e__.\n+\t(FL_BITFIELD, FL_68881, FL_COLDFIRE, FL_CF_HWDIV, FL_CF_MAC)\n+\t(FL_CF_EMAC, FL_CF_EMAC_B, FL_CF_USP, FL_CF_FPU, FL_ISA_68000)\n+\t(FL_ISA_68010, FL_ISA_68020, FL_ISA_68040, FL_ISA_A, FL_ISA_B)\n+\t(FL_ISA_C, FL_ISA_MMU): New macros.\n+\t(MASK_COLDFIRE): Delete.\n+\t(TARGET_68010, TARGET_68020, TARGET_68040_ONLY, TARGET_COLDFIRE)\n+\t(TARGET_ISAB): Redefine in terms of m68k_cpu_flags.\n+\t(TARGET_68881, TARGET_COLDFIRE_FPU): Redefine in terms of m68k_fpu.\n+\t(TARGET_HARD_FLOAT): Do not define here.\n+\t(TARGET_ISAAPLUS, TARGET_ISAC): New macros.\n+\t(TUNE_68000): New macro.\n+\t(TUNE_68000_10): Redefine in terms of TUNE_68000 and TUNE_68010.\n+\t(TUNE_68010, TUNE_68030, TUNE_68040, TUNE_68060, TUNE_CPU32)\n+\t(TUNE_CFV2): Redefine in terms of m68k_tune.\n+\t(uarch_type, target_device, fpu_type): New enums.\n+\t(m68k_cpu, m68k_tune, m68k_fpu, m68k_cpu_flags): Declare.\n+\t* config/m68k/m68k.c (TARGET_DEFAULT): Remove MASK_68881.\n+\t(FL_FOR_isa_00, FL_FOR_isa_10, FL_FOR_isa_20, FL_FOR_isa_40)\n+\t(FL_FOR_isa_cpu32, FL_FOR_isa_a, FL_FOR_isa_aplus, FL_FOR_isa_b)\n+\t(FL_FOR_isa_c): New macros.\n+\t(m68k_isa): New enum.\n+\t(m68k_target_selection): New structure.\n+\t(all_devices, all_isas, all_microarchs): New tables.\n+\t(m68k_cpu_entry, m68k_arch_entry, m68k_tune_entry, m68k_cpu)\n+\t(m68k_tune, m68k_fpu, m68k_cpu_flags): New variables.\n+\t(MASK_ALL_CPU_BITS): Delete.\n+\t(m68k_find_selection): New function.\n+\t(m68k_handle_option): Handle -mcpu=, -march= and -mtune=.\n+\tMap the legacy target options to a combination of the new ones.\n+\t(override_options): Set m68k_cpu, m68k_tune, m68k_fpu and\n+\tm68k_cpu_flags.  Handle M68K_DEFAULT_TUNE.  Use m68k_cpu_flags\n+\tto derive default MASK_BITFIELD, MASK_CF_HWDIV and MASK_HARD_FLOAT\n+\tsettings.\n+\t* config/m68k/m68k.opt (m5200, m5206e, m528x, m5307, m5407, mcfv4e)\n+\t(m68010, m68020, m68020-40, m68020-60, m68030, m68040): Remove Mask\n+\tproperties.\n+\t(m68881, msoft-float): Change mask from 68881 to HARD_FLOAT.\n+\t(march=, mcpu=, mdiv, mhard-float, mtune=): New options.\n+\t* config/m68k/m68k-devices.def: New file.\n+\n 2007-01-12  Richard Sandiford  <richard@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "5aa991c5a8898d83d3128280a38b5cde3021d953", "filename": "gcc/config.gcc", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -2784,13 +2784,28 @@ case \"${target}\" in\n \n \t\t# We always have a $with_cpu setting here.\n \t\tcase \"$with_cpu\" in\n-\t\t\"m68000\" | \"m68010\" | \"m68020\" | \"m68030\" | \"m68040\" | \"m68060\" | \"m68020-40\" | \"m68020-60\")\n-\t\t\t# OK\n+\t\t\"m68000\" | \"m68010\" | \"m68020\" | \"m68030\" | \"m68040\" | \"m68060\")\n+\t\t\tm68k_cpu_ident=$with_cpu\n+\t\t\t;;\n+\t\t\"m68020-40\")\n+\t\t\tm68k_cpu_ident=m68020\n+\t\t\ttm_defines=\"$tm_defines M68K_DEFAULT_TUNE=u68020_40\"\n+\t\t\t;;\n+\t\t\"m68020-60\")\n+\t\t\tm68k_cpu_ident=m68020\n+\t\t\ttm_defines=\"$tm_defines M68K_DEFAULT_TUNE=u68020_60\"\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu, known values:\"  1>&2\n-\t\t\techo \"m68000 m68010 m68020 m68030 m68040 m68060 m68020-40 m68020-60\" 1>&2\n-\t\t\texit 1\n+\t\t\t# We need the C identifier rather than the string.\n+\t\t\tm68k_cpu_ident=`awk -v arg=\"\\\"$with_cpu\\\"\" \\\n+\t\t\t   'BEGIN { FS=\"[ \\t]*[,()][ \\t]*\" }; \\\n+\t\t\t    $1 == \"M68K_DEVICE\" && $2 == arg { print $3 }' \\\n+\t\t\t\t ${srcdir}/config/m68k/m68k-devices.def`\n+\t\t\tif [ x\"$m68k_cpu_ident\" = x ] ; then\n+\t\t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\twith_cpu=\"mcpu=$with_cpu\"\n \t\t\t;;\n \t\tesac\n \t\t;;\n@@ -3049,6 +3064,10 @@ case ${target} in\n \t\tfi\n \t\t;;\n \n+\tm680[012]0-*-* | m68k*-*-*)\n+\t\ttarget_cpu_default2=$m68k_cpu_ident\n+\t\t;;\n+\n \tmips*-*-*)\n \t\tif test x$gnu_ld = xyes\n \t\tthen"}, {"sha": "f77930274c0aed85d7ec8689a048dad2468ce7ae", "filename": "gcc/config/m68k/m68k-devices.def", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -0,0 +1,144 @@\n+/* m68k device names -*- C -*-\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+   Written by CodeSourcery\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+/* This file lists each target device that we support.  It is used by\n+   both C code and build scripts.\n+\n+   Following Freescale's lead, we group devices into families that share\n+   the same core and extension units.  Devices in these families differ\n+   only in the set of peripherals they provide.  We pick one device to\n+   act as the representative of each family.\n+\n+   We further group device families into multilibs, again picking one\n+   family (and its representative device) to represent each multilib.\n+\n+   Devices are declared using the construct:\n+\n+      M68K_DEVICE (NAME, ENUM_VALUE, FAMILY, MULTILIB, MICROARCH, ISA, FLAGS)\n+\n+   where the arguments are as follows:\n+\n+      NAME\n+\tThe name of the device as a string.  This string acts as the\n+\tdevice's -mcpu argument and is guaranteed to be unique.\n+\n+      ENUM_VALUE\n+\tThe associated value in the target_device enumeration.\n+\tThis value is also guaranteed to be unique.\n+\n+      FAMILY\n+\tThe NAME field of the family's representative device.\n+\n+      MULTILIB\n+\tThe NAME field of the multilib's representative device.\n+\n+      MICROARCH\n+\tThe class of core used by devices in this family.  The field\n+\tis a uarch enumeration value without the leading \"u\".\n+\n+      ISA\n+\tThe ISA implemented by this family.  The field is\n+\tan m68k_isa enumeration value.\n+\n+      FLAGS\n+\tThe FL_* flags that apply to this family, excluding FL_FOR_isa_*.\n+\tSee m68k.h for the full list.\n+\n+   There is a bit of duplication between devices in the same family,\n+   but this approach makes scripting easier.  We keep each entry on\n+   a single line for the same reason.  */\n+\n+/* 680x0 series processors.  */\n+M68K_DEVICE (\"68000\", m68000,   \"68000\", \"68000\", 68000,    isa_00,    0)\n+M68K_DEVICE (\"68010\", m68010,   \"68010\", \"68000\", 68010,    isa_10,    0)\n+M68K_DEVICE (\"68020\", m68020,   \"68020\", \"68020\", 68020,    isa_20,    FL_MMU)\n+M68K_DEVICE (\"68030\", m68030,   \"68030\", \"68020\", 68030,    isa_20,    FL_MMU)\n+M68K_DEVICE (\"68040\", m68040,   \"68040\", \"68040\", 68040,    isa_40,    FL_MMU)\n+M68K_DEVICE (\"68060\", m68060,   \"68060\", \"68060\", 68060,    isa_40,    FL_MMU)\n+M68K_DEVICE (\"68302\", m68302,   \"68302\", \"68000\", 68000,    isa_00,    FL_MMU)\n+M68K_DEVICE (\"68332\", m68332,   \"68332\", \"cpu32\", cpu32,    isa_cpu32, FL_MMU)\n+M68K_DEVICE (\"cpu32\", cpu32,    \"cpu32\", \"cpu32\", cpu32,    isa_cpu32, FL_MMU)\n+\n+/* ColdFire CFV2 processors.  */\n+M68K_DEVICE (\"5202\",  mcf5202,  \"5206\",  \"5206\",  cfv2,     isa_a,     0)\n+M68K_DEVICE (\"5204\",  mcf5204,  \"5206\",  \"5206\",  cfv2,     isa_a,     0)\n+M68K_DEVICE (\"5206\",  mcf5206,  \"5206\",  \"5206\",  cfv2,     isa_a,     0)\n+M68K_DEVICE (\"5206e\", mcf5206e, \"5206e\", \"5206e\", cfv2,     isa_a,     FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5207\",  mcf5207,  \"5208\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5208\",  mcf5208,  \"5208\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5210a\", mcf5210a, \"5211a\", \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5211a\", mcf5211a, \"5211a\", \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5211\",  mcf5211,  \"5213\",  \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5212\",  mcf5212,  \"5213\",  \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5213\",  mcf5213,  \"5213\",  \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5214\",  mcf5214,  \"5216\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5216\",  mcf5216,  \"5216\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52230\", mcf52230, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52231\", mcf52231, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52232\", mcf52232, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52233\", mcf52233, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52234\", mcf52234, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"52235\", mcf52235, \"52235\", \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5224\",  mcf5224,  \"5225\",  \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5225\",  mcf5225,  \"5225\",  \"5213\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5232\",  mcf5232,  \"5235\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5233\",  mcf5233,  \"5235\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5234\",  mcf5234,  \"5235\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5235\",  mcf5235,  \"5235\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"523x\",  mcf523x,  \"5235\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5249\",  mcf5249,  \"5249\",  \"5249\",  cfv2,     isa_a,     FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5250\",  mcf5250,  \"5250\",  \"5249\",  cfv2,     isa_a,     FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5270\",  mcf5270,  \"5271\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5271\",  mcf5271,  \"5271\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV)\n+M68K_DEVICE (\"5272\",  mcf5272,  \"5272\",  \"5206e\", cfv2,     isa_a,     FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5274\",  mcf5274,  \"5275\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5275\",  mcf5275,  \"5275\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5280\",  mcf5280,  \"5282\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5281\",  mcf5281,  \"5282\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5282\",  mcf5282,  \"5282\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"528x\",  mcf528x,  \"5282\",  \"5208\",  cfv2,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+\n+/* CFV3 processors.  */\n+M68K_DEVICE (\"5307\",  mcf5307,  \"5307\",  \"5307\",  cfv3,     isa_a,     FL_CF_HWDIV | FL_CF_MAC)\n+M68K_DEVICE (\"5327\",  mcf5327,  \"5329\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5328\",  mcf5328,  \"5329\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5329\",  mcf5329,  \"5329\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"532x\",  mcf532x,  \"5329\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5372\",  mcf5372,  \"5373\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"5373\",  mcf5373,  \"5373\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+M68K_DEVICE (\"537x\",  mcf537x,  \"5373\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWDIV | FL_CF_EMAC)\n+\n+/* CFV4/CFV4e processors.  */\n+M68K_DEVICE (\"5407\",  mcf5407,  \"5407\",  \"5407\",  cfv4,     isa_b,     FL_CF_MAC)\n+M68K_DEVICE (\"5470\",  mcf5470,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5471\",  mcf5471,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5472\",  mcf5472,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5473\",  mcf5473,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5474\",  mcf5474,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5475\",  mcf5475,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"547x\",  mcf547x,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5480\",  mcf5480,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5481\",  mcf5481,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5482\",  mcf5482,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5483\",  mcf5483,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5484\",  mcf5484,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"5485\",  mcf5485,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n+M68K_DEVICE (\"548x\",  mcf548x,  \"5485\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)"}, {"sha": "74c439decfd0c2241f92869147956e86b3ec365b", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 237, "deletions": 56, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -176,7 +176,7 @@ int m68k_last_compare_had_fp_operands;\n #define TARGET_ASM_FILE_START_APP_OFF true\n \n #undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (MASK_STRICT_ALIGNMENT|MASK_68881)\n+#define TARGET_DEFAULT_TARGET_FLAGS MASK_STRICT_ALIGNMENT\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m68k_handle_option\n \n@@ -201,12 +201,152 @@ static const struct attribute_spec m68k_attribute_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* These bits are controlled by all CPU selection options.  Many options\n-   also control MASK_68881, but some (notably -m68020) leave it alone.  */\n+/* Base flags for 68k ISAs.  */\n+#define FL_FOR_isa_00    FL_ISA_68000\n+#define FL_FOR_isa_10    (FL_FOR_isa_00 | FL_ISA_68010)\n+/* FL_68881 controls the default setting of -m68881.  gcc has traditionally\n+   generated 68881 code for 68020 and 68030 targets unless explicitly told\n+   not to.  */\n+#define FL_FOR_isa_20    (FL_FOR_isa_10 | FL_ISA_68020 \\\n+\t\t\t  | FL_BITFIELD | FL_68881)\n+#define FL_FOR_isa_40    (FL_FOR_isa_20 | FL_ISA_68040)\n+#define FL_FOR_isa_cpu32 (FL_FOR_isa_10 | FL_ISA_68020)\n+\n+/* Base flags for ColdFire ISAs.  */\n+#define FL_FOR_isa_a     (FL_COLDFIRE | FL_ISA_A)\n+#define FL_FOR_isa_aplus (FL_FOR_isa_a | FL_ISA_APLUS | FL_CF_USP)\n+/* Note ISA_B doesn't necessarily include USP (user stack pointer) support.  */\n+#define FL_FOR_isa_b     (FL_FOR_isa_a | FL_ISA_B | FL_CF_HWDIV)\n+#define FL_FOR_isa_c     (FL_FOR_isa_b | FL_ISA_C | FL_CF_USP)\n+\n+enum m68k_isa\n+{\n+  /* Traditional 68000 instruction sets.  */\n+  isa_00,\n+  isa_10,\n+  isa_20,\n+  isa_40,\n+  isa_cpu32,\n+  /* ColdFire instruction set variants.  */\n+  isa_a,\n+  isa_aplus,\n+  isa_b,\n+  isa_c,\n+  isa_max\n+};\n+\n+/* Information about one of the -march, -mcpu or -mtune arguments.  */\n+struct m68k_target_selection\n+{\n+  /* The argument being described.  */\n+  const char *name;\n+\n+  /* For -mcpu, this is the device selected by the option.\n+     For -mtune and -march, it is a representative device\n+     for the microarchitecture or ISA respectively.  */\n+  enum target_device device;\n+\n+  /* The M68K_DEVICE fields associated with DEVICE.  See the comment\n+     in m68k-devices.def for details.  FAMILY is only valid for -mcpu.  */\n+  const char *family;\n+  enum uarch_type microarch;\n+  enum m68k_isa isa;\n+  unsigned long flags;\n+};\n+\n+/* A list of all devices in m68k-devices.def.  Used for -mcpu selection.  */\n+static const struct m68k_target_selection all_devices[] =\n+{\n+#define M68K_DEVICE(NAME,ENUM_VALUE,FAMILY,MULTILIB,MICROARCH,ISA,FLAGS) \\\n+  { NAME, ENUM_VALUE, FAMILY, u##MICROARCH, ISA, FLAGS | FL_FOR_##ISA },\n+#include \"m68k-devices.def\"\n+#undef M68K_DEVICE\n+  { NULL, unk_device, NULL, unk_arch, isa_max, 0 }\n+};\n+\n+/* A list of all ISAs, mapping each one to a representative device.\n+   Used for -march selection.  */\n+static const struct m68k_target_selection all_isas[] =\n+{\n+  { \"68000\",    m68000,     NULL,  u68000,   isa_00,    FL_FOR_isa_00 },\n+  { \"68010\",    m68010,     NULL,  u68010,   isa_10,    FL_FOR_isa_10 },\n+  { \"68020\",    m68020,     NULL,  u68020,   isa_20,    FL_FOR_isa_20 },\n+  { \"68030\",    m68030,     NULL,  u68030,   isa_20,    FL_FOR_isa_20 },\n+  { \"68040\",    m68040,     NULL,  u68040,   isa_40,    FL_FOR_isa_40 },\n+  { \"68060\",    m68060,     NULL,  u68060,   isa_40,    FL_FOR_isa_40 },\n+  { \"cpu32\",    cpu32,      NULL,  ucpu32,   isa_20,    FL_FOR_isa_cpu32 },\n+  { \"isaa\",     mcf5206e,   NULL,  ucfv2,    isa_a,     (FL_FOR_isa_a\n+\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n+  { \"isaaplus\", mcf5271,    NULL,  ucfv2,    isa_aplus, (FL_FOR_isa_aplus\n+\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n+  { \"isab\",     mcf5407,    NULL,  ucfv4,    isa_b,     FL_FOR_isa_b },\n+  { \"isac\",     unk_device, NULL,  ucfv4,    isa_c,     (FL_FOR_isa_c\n+\t\t\t\t\t\t\t | FL_CF_FPU\n+\t\t\t\t\t\t\t | FL_CF_EMAC) },\n+  { NULL,       unk_device, NULL,  unk_arch, isa_max,   0 }\n+};\n+\n+/* A list of all microarchitectures, mapping each one to a representative\n+   device.  Used for -mtune selection.  */\n+static const struct m68k_target_selection all_microarchs[] =\n+{\n+  { \"68000\",    m68000,     NULL,  u68000,    isa_00,  FL_FOR_isa_00 },\n+  { \"68010\",    m68010,     NULL,  u68010,    isa_10,  FL_FOR_isa_10 },\n+  { \"68020\",    m68020,     NULL,  u68020,    isa_20,  FL_FOR_isa_20 },\n+  { \"68020-40\", m68020,     NULL,  u68020_40, isa_20,  FL_FOR_isa_20 },\n+  { \"68020-60\", m68020,     NULL,  u68020_60, isa_20,  FL_FOR_isa_20 },\n+  { \"68030\",    m68030,     NULL,  u68030,    isa_20,  FL_FOR_isa_20 },\n+  { \"68040\",    m68040,     NULL,  u68040,    isa_40,  FL_FOR_isa_40 },\n+  { \"68060\",    m68060,     NULL,  u68060,    isa_40,  FL_FOR_isa_40 },\n+  { \"cpu32\",    cpu32,      NULL,  ucpu32,    isa_20,  FL_FOR_isa_cpu32 },\n+  { \"cfv2\",     mcf5206,    NULL,  ucfv2,     isa_a,   FL_FOR_isa_a },\n+  { \"cfv3\",     mcf5307,    NULL,  ucfv3,     isa_a,   (FL_FOR_isa_a\n+\t\t\t\t\t\t\t| FL_CF_HWDIV) },\n+  { \"cfv4\",     mcf5407,    NULL,  ucfv4,     isa_b,   FL_FOR_isa_b },\n+  { \"cfv4e\",    mcf547x,    NULL,  ucfv4e,    isa_b,   (FL_FOR_isa_b\n+\t\t\t\t\t\t\t| FL_CF_USP\n+\t\t\t\t\t\t\t| FL_CF_EMAC\n+\t\t\t\t\t\t\t| FL_CF_FPU) },\n+  { NULL,       unk_device, NULL,  unk_arch,  isa_max, 0 }\n+};\n+\f\n+/* The entries associated with the -mcpu, -march and -mtune settings,\n+   or null for options that have not been used.  */\n+const struct m68k_target_selection *m68k_cpu_entry;\n+const struct m68k_target_selection *m68k_arch_entry;\n+const struct m68k_target_selection *m68k_tune_entry;\n \n-#define MASK_ALL_CPU_BITS \\\n-  (MASK_COLDFIRE | MASK_CF_HWDIV | MASK_68060 | MASK_68040 \\\n-   | MASK_68040_ONLY | MASK_68030 | MASK_68020 | MASK_68010 | MASK_BITFIELD)\n+/* Which CPU we are generating code for.  */\n+enum target_device m68k_cpu;\n+\n+/* Which microarchitecture to tune for.  */\n+enum uarch_type m68k_tune;\n+\n+/* Which FPU to use.  */\n+enum fpu_type m68k_fpu;\n+\n+/* The set of FL_* flags that apply to the target processor.  */\n+unsigned int m68k_cpu_flags;\n+\f\n+/* See whether TABLE has an entry with name NAME.  Return true and\n+   store the entry in *ENTRY if so, otherwise return false and\n+   leave *ENTRY alone.  */\n+\n+static bool\n+m68k_find_selection (const struct m68k_target_selection **entry,\n+\t\t     const struct m68k_target_selection *table,\n+\t\t     const char *name)\n+{\n+  size_t i;\n+\n+  for (i = 0; table[i].name; i++)\n+    if (strcmp (table[i].name, name) == 0)\n+      {\n+\t*entry = table + i;\n+\treturn true;\n+      }\n+  return false;\n+}\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -215,90 +355,69 @@ m68k_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_march_:\n+      return m68k_find_selection (&m68k_arch_entry, all_isas, arg);\n+\n+    case OPT_mcpu_:\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, arg);\n+\n+    case OPT_mtune_:\n+      return m68k_find_selection (&m68k_tune_entry, all_microarchs, arg);\n+\n     case OPT_m5200:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_5200;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"5206\");\n \n     case OPT_m5206e:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_5200 | MASK_CF_HWDIV;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"5206e\");\n \n     case OPT_m528x:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_528x | MASK_CF_HWDIV;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"528x\");\n \n     case OPT_m5307:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_CFV3 | MASK_CF_HWDIV;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"5307\");\n \n     case OPT_m5407:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_CFV4 | MASK_CF_HWDIV;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"5407\");\n \n     case OPT_mcfv4e:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_CFV4 | MASK_CF_HWDIV | MASK_CFV4E;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"547x\");\n \n     case OPT_m68000:\n     case OPT_mc68000:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68000\");\n \n     case OPT_m68010:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_68010;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68010\");\n \n     case OPT_m68020:\n     case OPT_mc68020:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= MASK_68010 | MASK_68020 | MASK_BITFIELD;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\");\n \n     case OPT_m68020_40:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68010\n-\t\t       | MASK_68020 | MASK_68040);\n-      return true;\n+      return (m68k_find_selection (&m68k_tune_entry, all_microarchs,\n+\t\t\t\t   \"68020-40\")\n+\t      && m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\"));\n \n     case OPT_m68020_60:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68010\n-\t\t       | MASK_68020 | MASK_68040 | MASK_68060);\n-      return true;\n+      return (m68k_find_selection (&m68k_tune_entry, all_microarchs,\n+\t\t\t\t   \"68020-60\")\n+\t      && m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\"));\n \n     case OPT_m68030:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= MASK_68010 | MASK_68020 | MASK_68030 | MASK_BITFIELD;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68030\");\n \n     case OPT_m68040:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_68010 | MASK_68020 | MASK_68881 | MASK_BITFIELD\n-\t\t       | MASK_68040_ONLY | MASK_68040);\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68040\");\n \n     case OPT_m68060:\n-      target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_68010 | MASK_68020 | MASK_68881 | MASK_BITFIELD\n-\t\t       | MASK_68040_ONLY | MASK_68060);\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68060\");\n \n     case OPT_m68302:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68302\");\n \n     case OPT_m68332:\n     case OPT_mcpu32:\n-      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_68010 | MASK_68020;\n-      return true;\n+      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68332\");\n \n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n@@ -325,6 +444,68 @@ m68k_handle_option (size_t code, const char *arg, int value)\n void\n override_options (void)\n {\n+  const struct m68k_target_selection *entry;\n+  unsigned long target_mask;\n+\n+  /* User can choose:\n+\n+     -mcpu=\n+     -march=\n+     -mtune=\n+\n+     -march=ARCH should generate code that runs any processor\n+     implementing architecture ARCH.  -mcpu=CPU should override -march\n+     and should generate code that runs on processor CPU, making free\n+     use of any instructions that CPU understands.  -mtune=UARCH applies\n+     on top of -mcpu or -march and optimises the code for UARCH.  It does\n+     not change the target architecture.  */\n+  if (m68k_cpu_entry)\n+    {\n+      /* Complain if the -march setting is for a different microarchitecture,\n+\t or includes flags that the -mcpu setting doesn't.  */\n+      if (m68k_arch_entry\n+\t  && (m68k_arch_entry->microarch != m68k_cpu_entry->microarch\n+\t      || (m68k_arch_entry->flags & ~m68k_cpu_entry->flags) != 0))\n+\twarning (0, \"-mcpu=%s conflicts with -march=%s\",\n+\t\t m68k_cpu_entry->name, m68k_arch_entry->name);\n+\n+      entry = m68k_cpu_entry;\n+    }\n+  else\n+    entry = m68k_arch_entry;\n+\n+  if (!entry)\n+    entry = all_devices + TARGET_CPU_DEFAULT;\n+\n+  m68k_cpu_flags = entry->flags;\n+\n+  /* Use the architecture setting to derive default values for\n+     certain flags.  */\n+  target_mask = 0;\n+  if ((m68k_cpu_flags & FL_BITFIELD) != 0)\n+    target_mask |= MASK_BITFIELD;\n+  if ((m68k_cpu_flags & FL_CF_HWDIV) != 0)\n+    target_mask |= MASK_CF_HWDIV;\n+  if ((m68k_cpu_flags & (FL_68881 | FL_CF_FPU)) != 0)\n+    target_mask |= MASK_HARD_FLOAT;\n+  target_flags |= target_mask & ~target_flags_explicit;\n+\n+  /* Set the directly-usable versions of the -mcpu and -mtune settings.  */\n+  m68k_cpu = entry->device;\n+  if (m68k_tune_entry)\n+    m68k_tune = m68k_tune_entry->microarch;\n+#ifdef M68K_DEFAULT_TUNE\n+  else if (!m68k_cpu_entry && !m68k_arch_entry)\n+    m68k_tune = M68K_DEFAULT_TUNE;\n+#endif\n+  else\n+    m68k_tune = entry->microarch;\n+\n+  /* Set the type of FPU.  */\n+  m68k_fpu = (!TARGET_HARD_FLOAT ? FPUTYPE_NONE\n+\t      : (m68k_cpu_flags & FL_COLDFIRE) != 0 ? FPUTYPE_COLDFIRE\n+\t      : FPUTYPE_68881);\n+\n   /* Sanity check to ensure that msep-data and mid-sahred-library are not\n    * both specified together.  Doing so simply doesn't make sense.\n    */"}, {"sha": "7ef17bae6a961a7657cc58d1d77fa77ea66ee81e", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 126, "deletions": 41, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02110-1301, USA.  */\n   { \"cpu\",   \"%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:\\\n %{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:\\\n %{!m68332:%{!m5200:%{!m5206e:%{!m528x:%{!m5307:%{!m5407:%{!mcfv4e:\\\n--%(VALUE)}}}}}}}}}}}}}}}}}}}\" },\n+%{!mcpu=*:%{!march=*:-%(VALUE)}}}}}}}}}}}}}}}}}}}}}\" },\n \n /* Pass flags to gas indicating which type of processor we have.  This\n    can be simplified when we can rely on the assembler supporting .cpu\n@@ -48,6 +48,7 @@ Boston, MA 02110-1301, USA.  */\n %{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}\\\n %{m68040}%{m68020-40:-m68040}%{m68020-60:-m68040}\\\n %{m68060}%{mcpu32}%{m68332}%{m5200}%{m5206e}%{m528x}%{m5307}%{m5407}%{mcfv4e}\\\n+%{mcpu=*:-mcpu=%*}%{march=*:-march=%*}\\\n \"\n \n #define ASM_SPEC \"%(asm_cpu_spec)\"\n@@ -100,30 +101,50 @@ Boston, MA 02110-1301, USA.  */\n \t  builtin_define_std (\"mcpu32\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (TARGET_COLDFIRE)\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__mcoldfire__\");\t\t\t\t\\\n-      if (TARGET_5200)\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__mcf5200__\");\t\t\t\t\t\\\n-      if (TARGET_528x)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mcf528x__\");\t\t\t\t\\\n-\t  builtin_define (\"__mcf5200__\");\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      if (TARGET_CFV3)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mcf5300__\");\t\t\t\t\\\n-\t  builtin_define (\"__mcf5307__\");\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      if (TARGET_CFV4)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mcf5400__\");\t\t\t\t\\\n-\t  builtin_define (\"__mcf5407__\");\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      if (TARGET_CFV4E)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mcfv4e__\");\t\t\t\t\\\n+\t  builtin_define (\"__mcoldfire__\");\t\t\t\t\\\n+\t  if (TARGET_ISAC)\t\t\t\t\t\t\\\n+\t    builtin_define (\"__mcfisac__\");\t\t\t\t\\\n+\t  else if (TARGET_ISAB)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define (\"__mcfisab__\");\t\t\t\t\\\n+\t      /* ISA_B: Legacy 5407 defines.  */\t\t\t\\\n+\t      builtin_define (\"__mcf5400__\");\t\t\t\t\\\n+\t      builtin_define (\"__mcf5407__\");\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else if (TARGET_ISAAPLUS)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define (\"__mcfisaaplus__\");\t\t\t\\\n+\t      /* ISA_A+: legacy defines.  */\t\t\t\t\\\n+\t      builtin_define (\"__mcf528x__\");\t\t\t\t\\\n+\t      builtin_define (\"__mcf5200__\");\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else \t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define (\"__mcfisaa__\");\t\t\t\t\\\n+\t      /* ISA_A: legacy defines.  */\t\t\t\t\\\n+\t      switch (m68k_tune)\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\tcase ucfv2:\t\t\t\t\t\t\\\n+\t\t  builtin_define (\"__mcf5200__\");\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t\tcase ucfv3:\t\t\t\t\t\t\\\n+\t\t  builtin_define (\"__mcf5307__\");\t\t\t\\\n+\t\t  builtin_define (\"__mcf5300__\");\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t\tdefault:\t\t\t\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+    \t    }\t\t\t\t\t\t\t\t\\\n+\t  if (m68k_tune == ucfv4e)\t\t\t\t\t\\\n+\t    builtin_define (\"__mcfv4e__\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (TARGET_CF_HWDIV)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mcfhwdiv__\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       builtin_assert (\"cpu=m68k\");\t\t\t\t\t\\\n       builtin_assert (\"machine=m68k\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -139,30 +160,53 @@ Boston, MA 02110-1301, USA.  */\n /* Set the default.  */\n #define INT_OP_GROUP INT_OP_DOT_WORD\n \n-/* Compile for a CPU32.  A 68020 without bitfields is a good\n-   heuristic for a CPU32.  */\n-#define TUNE_CPU32\t(TARGET_68020 && !TARGET_BITFIELD)\n-\n-/* Is the target a ColdFire?  */\n-#define MASK_COLDFIRE \\\n-  (MASK_5200 | MASK_528x | MASK_CFV3 | MASK_CFV4 | MASK_CFV4E)\n-#define TARGET_COLDFIRE\t((target_flags & MASK_COLDFIRE) != 0)\n+/* Bit values used by m68k-devices.def to identify processor capabilities.  */\n+#define FL_BITFIELD  (1 << 0)    /* Support bitfield instructions.  */\n+#define FL_68881     (1 << 1)    /* (Default) support for 68881/2.  */\n+#define FL_COLDFIRE  (1 << 2)    /* ColdFire processor.  */\n+#define FL_CF_HWDIV  (1 << 3)    /* ColdFire hardware divide supported.  */\n+#define FL_CF_MAC    (1 << 4)    /* ColdFire MAC unit supported.  */\n+#define FL_CF_EMAC   (1 << 5)    /* ColdFire eMAC unit supported.  */\n+#define FL_CF_EMAC_B (1 << 6)    /* ColdFire eMAC-B unit supported.  */\n+#define FL_CF_USP    (1 << 7)    /* ColdFire User Stack Pointer supported.  */\n+#define FL_CF_FPU    (1 << 8)    /* ColdFire FPU supported.  */\n+#define FL_ISA_68000 (1 << 9)\n+#define FL_ISA_68010 (1 << 10)\n+#define FL_ISA_68020 (1 << 11)\n+#define FL_ISA_68040 (1 << 12)\n+#define FL_ISA_A     (1 << 13)\n+#define FL_ISA_APLUS (1 << 14)\n+#define FL_ISA_B     (1 << 15)\n+#define FL_ISA_C     (1 << 16)\n+#define FL_MMU \t     0   /* Used by multilib machinery.  */\n+\n+#define TARGET_68010\t\t((m68k_cpu_flags & FL_ISA_68010) != 0)\n+#define TARGET_68020\t\t((m68k_cpu_flags & FL_ISA_68020) != 0)\n+#define TARGET_68040_ONLY\t((m68k_cpu_flags & FL_ISA_68040) != 0)\n+#define TARGET_COLDFIRE\t\t((m68k_cpu_flags & FL_COLDFIRE) != 0)\n+#define TARGET_COLDFIRE_FPU\t(m68k_fpu == FPUTYPE_COLDFIRE)\n+#define TARGET_68881\t\t(m68k_fpu == FPUTYPE_68881)\n \n-#define TARGET_COLDFIRE_FPU\tTARGET_CFV4E\n-\n-#define TARGET_HARD_FLOAT\t(TARGET_68881 || TARGET_COLDFIRE_FPU)\n /* Size (in bytes) of FPU registers.  */\n #define TARGET_FP_REG_SIZE\t(TARGET_COLDFIRE ? 8 : 12)\n \n-#define TARGET_ISAB\t\tTARGET_CFV4\n-\n-#define TUNE_68000_10\t(!TARGET_68020 && !TARGET_COLDFIRE)\n-#define TUNE_68010\tTARGET_68010\n-#define TUNE_68030\tTARGET_68030\n-#define TUNE_68040\tTARGET_68040\n-#define TUNE_68060\tTARGET_68060\n+#define TARGET_ISAAPLUS\t\t((m68k_cpu_flags & FL_ISA_APLUS) != 0)\n+#define TARGET_ISAB\t\t((m68k_cpu_flags & FL_ISA_B) != 0)\n+#define TARGET_ISAC\t\t((m68k_cpu_flags & FL_ISA_C) != 0)\n+\n+#define TUNE_68000\t(m68k_tune == u68000)\n+#define TUNE_68010\t(m68k_tune == u68010)\n+#define TUNE_68000_10\t(TUNE_68000 || TUNE_68010)\n+#define TUNE_68030\t(m68k_tune == u68030 \\\n+\t\t\t || m68k_tune == u68020_40 \\\n+\t\t\t || m68k_tune == u68020_60)\n+#define TUNE_68040\t(m68k_tune == u68040 \\\n+\t\t\t || m68k_tune == u68020_40 \\\n+\t\t\t || m68k_tune == u68020_60)\n+#define TUNE_68060\t(m68k_tune == u68060 || m68k_tune == u68020_60)\n #define TUNE_68040_60\t(TUNE_68040 || TUNE_68060)\n-#define TUNE_CFV2\tTARGET_5200\n+#define TUNE_CPU32\t(m68k_tune == ucpu32)\n+#define TUNE_CFV2\t(m68k_tune == ucfv2)\n \n #define OVERRIDE_OPTIONS   override_options()\n \n@@ -1104,6 +1148,47 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n-/* Variables in m68k.c */\n+/* Values used in the MICROARCH argument to M68K_DEVICE.  */\n+enum uarch_type\n+{\n+  u68000,\n+  u68010,\n+  u68020,\n+  u68020_40,\n+  u68020_60,\n+  u68030,\n+  u68040,\n+  u68060,\n+  ucpu32,\n+  ucfv2,\n+  ucfv3,\n+  ucfv4,\n+  ucfv4e,\n+  ucfv5,\n+  unk_arch\n+};\n+\n+/* An enumeration of all supported target devices.  */\n+enum target_device\n+{\n+#define M68K_DEVICE(NAME,ENUM_VALUE,FAMILY,MULTILIB,MICROARCH,ISA,FLAGS) \\\n+  ENUM_VALUE,\n+#include \"m68k-devices.def\"\n+#undef M68K_DEVICE\n+  unk_device\n+};\n+\n+enum fpu_type\n+{\n+  FPUTYPE_NONE,\n+  FPUTYPE_68881,\n+  FPUTYPE_COLDFIRE\n+};\n+\n+/* Variables in m68k.c; see there for details.  */\n extern const char *m68k_library_id_string;\n extern int m68k_last_compare_had_fp_operands;\n+extern enum target_device m68k_cpu;\n+extern enum uarch_type m68k_tune;\n+extern enum fpu_type m68k_fpu;\n+extern unsigned int m68k_cpu_flags;"}, {"sha": "af7bd0f075e0463d6a643fab869d79117abe34b5", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -20,55 +20,55 @@\n ; 02110-1301, USA.\n \n m5200\n-Target RejectNegative Mask(5200)\n+Target RejectNegative\n Generate code for a 520X\n \n m5206e\n-Target RejectNegative Mask(CF_HWDIV)\n+Target RejectNegative\n Generate code for a 5206e\n \n m528x\n-Target RejectNegative Mask(528x)\n+Target RejectNegative\n Generate code for a 528x\n \n m5307\n-Target RejectNegative Mask(CFV3)\n+Target RejectNegative\n Generate code for a 5307\n \n m5407\n-Target RejectNegative Mask(CFV4)\n+Target RejectNegative\n Generate code for a 5407\n \n mcfv4e\n-Target RejectNegative Mask(CFV4E)\n+Target RejectNegative\n Generate code for a ColdFire v4e\n \n m68000\n Target RejectNegative\n Generate code for a 68000\n \n m68010\n-Target RejectNegative Mask(68010)\n+Target RejectNegative\n Generate code for a 68010\n \n m68020\n-Target RejectNegative Mask(68020)\n+Target RejectNegative\n Generate code for a 68020\n \n m68020-40\n-Target RejectNegative Mask(68040)\n+Target RejectNegative\n Generate code for a 68040, without any new instructions\n \n m68020-60\n-Target RejectNegative Mask(68060)\n+Target RejectNegative\n Generate code for a 68060, without any new instructions\n \n m68030\n-Target RejectNegative Mask(68030)\n+Target RejectNegative\n Generate code for a 68030\n \n m68040\n-Target RejectNegative Mask(68040_ONLY)\n+Target RejectNegative\n Generate code for a 68040\n \n m68060\n@@ -89,13 +89,17 @@ Target\n Generate code for a 68851\n \n m68881\n-Target RejectNegative Mask(68881)\n+Target RejectNegative Mask(HARD_FLOAT)\n Generate code that uses 68881 floating-point instructions\n \n malign-int\n Target Report Mask(ALIGN_INT)\n Align variables on a 32-bit boundary\n \n+march=\n+Target RejectNegative Joined\n+Specify the name of the target architecture\n+\n mbitfield\n Target Report RejectNegative Mask(BITFIELD)\n Use the bit-field instructions\n@@ -108,10 +112,22 @@ mc68020\n Target RejectNegative\n Generate code for a 68020\n \n+mcpu=\n+Target RejectNegative Joined\n+Specify the target CPU\n+\n mcpu32\n Target RejectNegative\n Generate code for a cpu32\n \n+mdiv\n+Target Report Mask(CF_HWDIV)\n+Use hardware division instructions on ColdFire\n+\n+mhard-float\n+Target RejectNegative Mask(HARD_FLOAT) MaskExists\n+Generate code which uses hardware floating point instructions\n+\n mid-shared-library\n Target Report Mask(ID_SHARED_LIBRARY)\n Enable ID based shared library\n@@ -149,9 +165,13 @@ Target Report RejectNegative Mask(SHORT)\n Consider type 'int' to be 16 bits wide\n \n msoft-float\n-Target RejectNegative InverseMask(68881)\n+Target RejectNegative InverseMask(HARD_FLOAT)\n Generate code with library calls for floating point\n \n mstrict-align\n Target Report Mask(STRICT_ALIGNMENT)\n Do not use unaligned memory references\n+\n+mtune=\n+Target RejectNegative Joined\n+Tune for the specified target CPU or architecture"}, {"sha": "c3dd6021b0780178f3a4df910875a37cc82b12a4", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -3391,9 +3391,9 @@ applications.  There are no standard Unix configurations.\n @end html\n @heading @anchor{m68k-*-*}m68k-*-*\n You can specify a default target using @option{--with-cpu=@var{target}}.\n-The recognized values for @var{target} are: @samp{m68000}, @samp{m68010},\n-@samp{m68020}, @samp{m68030}, @samp{m68040}, @samp{m68060}, @samp{m68020-40}\n-and @samp{m68020-60}.\n+This @var{target} can either be a @option{-mcpu} argument or one of the\n+following values: @samp{m68000}, @samp{m68010}, @samp{m68020}, @samp{m68030},\n+@samp{m68040}, @samp{m68060}, @samp{m68020-40} and @samp{m68020-60}.\n \n @heading @anchor{m68k-hp-hpux}m68k-hp-hpux\n HP 9000 series 300 or 400 running HP-UX@.  HP-UX version 8.0 has a bug in"}, {"sha": "145c3222a77c85ef302480d91543e6632c33efc0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 145, "deletions": 27, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900ec02dfd7eef18598eee256e8ec9dc8a36a0da/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=900ec02dfd7eef18598eee256e8ec9dc8a36a0da", "patch": "@@ -580,10 +580,12 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mcpu=@var{cpu} -msim -memregs=@var{number}}\n \n @emph{M680x0 Options}\n-@gccoptlist{-m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 @gol\n--m68060  -mcpu32  -m5200  -mcfv4e -m68881  -mbitfield  @gol\n--mc68000  -mc68020   @gol\n--mnobitfield  -mrtd  -mshort  -msoft-float  -mpcrel @gol\n+@gccoptlist{-march=@var{arch}  -mcpu=@var{cpu}  -mtune=@var{tune}\n+-m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 @gol\n+-m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407 @gol\n+-mcfv4e  -mbitfield  -mc68000  -mc68020 @gol\n+-mnobitfield  -mrtd  -mdiv  -mno-div  -mshort @gol\n+-mhard-float  -m68881  -msoft-float  -mpcrel @gol\n -malign-int  -mstrict-align  -msep-data  -mno-sep-data @gol\n -mshared-library-id=n  -mid-shared-library  -mno-id-shared-library}\n \n@@ -10266,18 +10268,88 @@ Indicates that there is no OS function for flushing the cache.\n @subsection M680x0 Options\n @cindex M680x0 options\n \n-These are the @samp{-m} options defined for the 68000 series.  The default\n-values for these options depends on which style of 68000 was selected when\n-the compiler was configured; the defaults for the most common choices are\n-given below.\n+These are the @samp{-m} options defined for M680x0 and ColdFire processors.\n+The default settings depend on which architecture was selected when\n+the compiler was configured; the defaults for the most common choices\n+are given below.\n \n @table @gcctabopt\n+@item -march=@var{arch}\n+@opindex march\n+Generate code for a specific M680x0 or ColdFire instruction set\n+architecture.  Permissible values of @var{arch} for M680x0\n+architectures are: @samp{68000}, @samp{68010}, @samp{68020},\n+@samp{68030}, @samp{68040}, @samp{68060} and @samp{cpu32}.  ColdFire\n+architectures are selected according to Freescale's ISA classification\n+and the permissible values are: @samp{isaa}, @samp{isaaplus},\n+@samp{isab} and @samp{isac}.\n+\n+gcc defines a macro @samp{__mcf@var{arch}__} whenever it is generating\n+code for a ColdFire target.  The @var{arch} in this macro is one of the\n+@option{-march} arguments given above.\n+\n+When used together, @option{-march} and @option{-mtune} select code\n+that runs on a family of similar processors but that is optimized\n+for a particular microarchitecture.\n+\n+@item -mcpu=@var{cpu}\n+@opindex mcpu\n+Generate code for a specific M680x0 or ColdFire processor.\n+The M680x0 @var{cpu}s are: @samp{68000}, @samp{68010}, @samp{68020},\n+@samp{68030}, @samp{68040}, @samp{68060}, @samp{68302}, @samp{68332}\n+and @samp{cpu32}.  The ColdFire @var{cpu}s are given by the table\n+below, which also classifies the CPUs into families:\n+\n+@multitable @columnfractions 0.20 0.80\n+@headitem Family @tab @samp{-mcpu} arguments\n+@item @samp{5206} @tab @samp{5202} @samp{5204} @samp{5206}\n+@item @samp{5206e} @tab @samp{5206e}\n+@item @samp{5208} @tab @samp{5207} @samp{5208}\n+@item @samp{5211a} @tab @samp{5210a} @samp{5211a}\n+@item @samp{5213} @tab @samp{5211} @samp{5212} @samp{5213}\n+@item @samp{5216} @tab @samp{5214} @samp{5216}\n+@item @samp{52235} @tab @samp{52230} @samp{52231} @samp{52232} @samp{52233} @samp{52234} @samp{52235}\n+@item @samp{5225} @tab @samp{5224} @samp{5225}\n+@item @samp{5235} @tab @samp{5232} @samp{5233} @samp{5234} @samp{5235} @samp{523x}\n+@item @samp{5249} @tab @samp{5249}\n+@item @samp{5250} @tab @samp{5250}\n+@item @samp{5271} @tab @samp{5270} @samp{5271}\n+@item @samp{5272} @tab @samp{5272}\n+@item @samp{5275} @tab @samp{5274} @samp{5275}\n+@item @samp{5282} @tab @samp{5280} @samp{5281} @samp{5282} @samp{528x}\n+@item @samp{5307} @tab @samp{5307}\n+@item @samp{5329} @tab @samp{5327} @samp{5328} @samp{5329} @samp{532x}\n+@item @samp{5373} @tab @samp{5372} @samp{5373} @samp{537x}\n+@item @samp{5407} @tab @samp{5407}\n+@item @samp{5475} @tab @samp{5470} @samp{5471} @samp{5472} @samp{5473} @samp{5474} @samp{5475} @samp{547x} @samp{5480} @samp{5481} @samp{5482} @samp{5483} @samp{5484} @samp{5485}\n+@end multitable\n+\n+@option{-mcpu=@var{cpu}} overrides @option{-march=@var{arch}} if\n+@var{arch} is compatible with @var{cpu}.  Other combinations of\n+@option{-mcpu} and @option{-march} are rejected.\n+\n+@item -mtune=@var{tune}\n+@opindex mtune\n+Tune the code for a particular microarchitecture, within the\n+constraints set by @option{-march} and @option{-mcpu}.\n+The M680x0 microarchitectures are: @samp{68000}, @samp{68010},\n+@samp{68020}, @samp{68030}, @samp{68040}, @samp{68060}\n+and @samp{cpu32}.  The ColdFire microarchitectures\n+are: @samp{cfv2}, @samp{cfv3}, @samp{cfv4} and @samp{cfv4e}.\n+\n+You can also use @option{-mtune=68020-40} for code that needs\n+to run relatively well on 68020, 68030 and 68040 targets.\n+@option{-mtune=68020-60} is similar but includes 68060 targets\n+as well.  These two options select the same tuning decisions as\n+@option{-m68020-40} and @option{-m68020-60} respectively.\n+\n @item -m68000\n @itemx -mc68000\n @opindex m68000\n @opindex mc68000\n Generate output for a 68000.  This is the default\n when the compiler is configured for 68000-based systems.\n+It is equivalent to @option{-march=68000}.\n \n Use this option for microcontrollers with a 68000 or EC000 core,\n including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.\n@@ -10286,29 +10358,27 @@ including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.\n @opindex m68010\n Generate output for a 68010.  This is the default\n when the compiler is configured for 68010-based systems.\n+It is equivalent to @option{-march=68010}.\n \n @item -m68020\n @itemx -mc68020\n @opindex m68020\n @opindex mc68020\n Generate output for a 68020.  This is the default\n when the compiler is configured for 68020-based systems.\n-\n-@item -m68881\n-@opindex m68881\n-Generate output containing 68881 instructions for floating point.\n-This is the default for most 68020 systems unless @option{--nfp} was\n-specified when the compiler was configured.\n+It is equivalent to @option{-march=68020}.\n \n @item -m68030\n @opindex m68030\n Generate output for a 68030.  This is the default when the compiler is\n-configured for 68030-based systems.\n+configured for 68030-based systems.  It is equivalent to\n+@option{-march=68030}.\n \n @item -m68040\n @opindex m68040\n Generate output for a 68040.  This is the default when the compiler is\n-configured for 68040-based systems.\n+configured for 68040-based systems.  It is equivalent to\n+@option{-march=68040}.\n \n This option inhibits the use of 68881/68882 instructions that have to be\n emulated by software on the 68040.  Use this option if your 68040 does not\n@@ -10317,7 +10387,8 @@ have code to emulate those instructions.\n @item -m68060\n @opindex m68060\n Generate output for a 68060.  This is the default when the compiler is\n-configured for 68060-based systems.\n+configured for 68060-based systems.  It is equivalent to\n+@option{-march=68060}.\n \n This option inhibits the use of 68020 and 68881/68882 instructions that\n have to be emulated by software on the 68060.  Use this option if your 68060\n@@ -10327,23 +10398,49 @@ does not have code to emulate those instructions.\n @opindex mcpu32\n Generate output for a CPU32.  This is the default\n when the compiler is configured for CPU32-based systems.\n+It is equivalent to @option{-march=cpu32}.\n \n Use this option for microcontrollers with a\n CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334,\n 68336, 68340, 68341, 68349 and 68360.\n \n @item -m5200\n @opindex m5200\n-Generate output for a 520X ``coldfire'' family cpu.  This is the default\n+Generate output for a 520X ColdFire CPU.  This is the default\n when the compiler is configured for 520X-based systems.\n+It is equivalent to @option{-mcpu=5206}, and is now deprecated\n+in favor of that option.\n \n Use this option for microcontroller with a 5200 core, including\n-the MCF5202, MCF5203, MCF5204 and MCF5202.\n+the MCF5202, MCF5203, MCF5204 and MCF5206.\n+\n+@item -m5206e\n+@opindex m5206e\n+Generate output for a 5206e ColdFire CPU.  The option is now\n+deprecated in favor of the equivalent @option{-mcpu=5206e}.\n+\n+@item -m528x\n+@opindex m528x\n+Generate output for a member of the ColdFire 528X family.\n+The option is now deprecated in favor of the equivalent\n+@option{-mcpu=528x}.\n+\n+@item -m5307\n+@opindex m5307\n+Generate output for a ColdFire 5307 CPU.  The option is now deprecated\n+in favor of the equivalent @option{-mcpu=5307}.\n+\n+@item -m5407\n+@opindex m5407\n+Generate output for a ColdFire 5407 CPU.  The option is now deprecated\n+in favor of the equivalent @option{-mcpu=5407}.\n \n @item -mcfv4e\n @opindex mcfv4e\n-Generate output for a ColdFire V4e family cpu (e.g.@: 547x/548x).\n+Generate output for a ColdFire V4e family CPU (e.g.@: 547x/548x).\n This includes use of hardware floating point instructions.\n+The option is equivalent to @option{-mcpu=547x}, and is now\n+deprecated in favor of that option.\n \n @item -m68020-40\n @opindex m68020-40\n@@ -10352,22 +10449,43 @@ This results in code which can run relatively efficiently on either a\n 68020/68881 or a 68030 or a 68040.  The generated code does use the\n 68881 instructions that are emulated on the 68040.\n \n+The option is equivalent to @option{-march=68020} @option{-mtune=68020-40}.\n+\n @item -m68020-60\n @opindex m68020-60\n Generate output for a 68060, without using any of the new instructions.\n This results in code which can run relatively efficiently on either a\n 68020/68881 or a 68030 or a 68040.  The generated code does use the\n 68881 instructions that are emulated on the 68060.\n \n+The option is equivalent to @option{-march=68020} @option{-mtune=68020-60}.\n+\n+@item -mhard-float\n+@itemx -m68881\n+@opindex mhard-float\n+@opindex m68881\n+Generate floating-point instructions.  This is the default for 68020\n+and above, and for ColdFire devices that have an FPU.\n+\n @item -msoft-float\n @opindex msoft-float\n-Generate output containing library calls for floating point.\n-@strong{Warning:} the requisite libraries are not available for all m68k\n-targets.  Normally the facilities of the machine's usual C compiler are\n-used, but this can't be done directly in cross-compilation.  You must\n-make your own arrangements to provide suitable library functions for\n-cross-compilation.  The embedded targets @samp{m68k-*-aout} and\n-@samp{m68k-*-coff} do provide software floating point support.\n+Do not generate floating-point instructions; use library calls instead.\n+This is the default for 68000, 68010, and 68832 targets.  It is also\n+the default for ColdFire devices that have no FPU.\n+\n+@item -mdiv\n+@itemx -mno-div\n+@opindex mdiv\n+@opindex mno-div\n+Generate (do not generate) ColdFire hardware divide and remainder\n+instructions.  If @option{-march} is used without @option{-mcpu},\n+the default is ``on'' for ColdFire architectures and ``off'' for M680x0\n+architectures.  Otherwise, the default is taken from the target CPU\n+(either the default CPU, or the one specified by @option{-mcpu}).  For\n+example, the default is ``off'' for @option{-mcpu=5206} and ``on'' for\n+@option{-mcpu=5206e}.\n+\n+gcc defines the macro @samp{__mcfhwdiv__} when this option is enabled.\n \n @item -mshort\n @opindex mshort"}]}