{"sha": "57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkNGY2NWM3MzllNTFhZjUzNTZlZjkwYWMxY2JmY2ZmMDJlZjRlMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-18T23:58:00Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-18T23:58:00Z"}, "message": "dwarf2out.c (loclabel_num): Move outside #ifdef DWARF2_DEBUGGING_INFO and mark with GTY(()).\n\n\t* dwarf2out.c (loclabel_num): Move outside #ifdef\n\tDWARF2_DEBUGGING_INFO and mark with GTY(()).\n\t* config/ia64/ia64.c (struct extern_func_list,extern_func_head):\n\tMark with GTY(()).\n\t(ia64_hpux_add_extern_decl): Save the decl, not the name string.\n\tAllocate memory with ggc_alloc.  No need to copy anything.\n\t(ia64_hpux_file_end): Update to match.\n\nFrom-SVN: r78061", "tree": {"sha": "d31e6ae0ba5cb4b28d273c7d6d909a7b886148fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d31e6ae0ba5cb4b28d273c7d6d909a7b886148fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/comments", "author": null, "committer": null, "parents": [{"sha": "3fec9fa9b726c0d6099688c6aa8d9e342565f5a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fec9fa9b726c0d6099688c6aa8d9e342565f5a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fec9fa9b726c0d6099688c6aa8d9e342565f5a2"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "a32d3f8aac3a92e40845a93ead22c2d579ded60d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "patch": "@@ -1,3 +1,13 @@\n+2004-02-18  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* dwarf2out.c (loclabel_num): Move outside #ifdef\n+\tDWARF2_DEBUGGING_INFO and mark with GTY(()).\n+\t* config/ia64/ia64.c (struct extern_func_list,extern_func_head):\n+\tMark with GTY(()).\n+\t(ia64_hpux_add_extern_decl): Save the decl, not the name string.\n+\tAllocate memory with ggc_alloc.  No need to copy anything.\n+\t(ia64_hpux_file_end): Update to match.\n+\n 2004-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (override_options): Don't imply 3DNow! for -m64\n@@ -225,7 +235,7 @@\n \n 2004-02-17  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* combine.c (simplify_if_then_else): Do not replace \n+\t* combine.c (simplify_if_then_else): Do not replace\n \t(if_then_else (ne reg 0) (0) (const_int)) by (reg) if the\n \tmodes differ.\n \n@@ -249,29 +259,29 @@\n \t* config/mips/t-irix-gld: ... this.\n \t* config.gcc (mips-sgi-irix6*): Reflect this\n \t(mips-sgi-irix5*): Use it with GNU ld.\n-\t\n+\n \t* config/mips/irix6-crti.asm, config/mips/irix6-crtn.asm: Renamed\n \tto ...\n \t* config/mips/irix-crti.asm, config/mips/irix-crtn.asm: ... this.\n \t* config/mips/t-irix-gld: Reflect this.\n \t* config/mips/iris6gld.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n-\t\n+\n \t* config/mips/iris5gld.h: New file.\n \t* config.gcc (mips-sgi-irix5*): Use it with GNU ld.\n \tOnly use collect2 without gas.\n-\t\n+\n \t* config/mips/iris6.h (IRIX6_STARTFILE_SPEC, IRIX6_ENDFILE_SPEC):\n \tRenamed to IRIX_STARTFILE_SPEC, IRIX_ENDFILE_SPEC.\n \t(STARTFILE_SPEC, ENDFILE_SPEC, SUBTARGET_EXTRA_SPECS): Reflect this.\n \t* config/mips/iris6gld.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n-\t\n+\n \t* config/mips/iris6.h (SUBTARGET_EXTRA_SPECS): Moved ...\n \t* config/mips/iris5.h: ... here.\n \n \t* config/mips/iris5.h (STARTFILE_SPEC, ENDFILE_SPEC): Renamed to\n-\tIRIX_STARTFILE_SPEC, IRIX_ENDFILE_SPEC. \n+\tIRIX_STARTFILE_SPEC, IRIX_ENDFILE_SPEC.\n \t(STARTFILE_SPEC, ENDFILE_SPEC): Define.\n-\t\n+\n \t* config/mips/iris5gas.h (STARTFILE_SPEC, ENDFILE_SPEC): Simplify\n \tusing irix_startfile_spec, irix_endfile_spec.\n \n@@ -306,7 +316,7 @@\n \tNew function.\n \t(ia64_output_mi_thunk): Use it.\n \t(ia64_struct_value_rtx): Likewise.\n-\t\n+\n 2004-02-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (h8300_emit_stack_adjustment):\n@@ -372,11 +382,11 @@\n \n 2004-02-16  Matthias Klose  <doko@debian.org>\n \n-        * config/t-slibgcc-elf-ver: Define SHLIB_NAME and SHLIB_SONAME\n-        in terms of SHLIB_SOVERSION.\n-        * config/m68k/t-slibgcc-elf-ver: New file.\n-        * config/pa/t-slibgcc-elf-ver: New file.\n-        * config.gcc (m68k-linux, parisc-linux): Use them when not \n+\t* config/t-slibgcc-elf-ver: Define SHLIB_NAME and SHLIB_SONAME\n+\tin terms of SHLIB_SOVERSION.\n+\t* config/m68k/t-slibgcc-elf-ver: New file.\n+\t* config/pa/t-slibgcc-elf-ver: New file.\n+\t* config.gcc (m68k-linux, parisc-linux): Use them when not\n \tsjlj exceptions are not configured.\n \n 2004-02-16  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "f7e5cc341c73df2e5f3ee67185b9d858bc5a520f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "patch": "@@ -257,7 +257,7 @@ static void ia64_rwreloc_select_rtx_section (enum machine_mode, rtx,\n static unsigned int ia64_rwreloc_section_type_flags (tree, const char *, int)\n      ATTRIBUTE_UNUSED;\n \n-static void ia64_hpux_add_extern_decl (const char *name)\n+static void ia64_hpux_add_extern_decl (tree decl)\n      ATTRIBUTE_UNUSED;\n static void ia64_hpux_file_end (void)\n      ATTRIBUTE_UNUSED;\n@@ -4627,7 +4627,7 @@ ia64_asm_output_external (FILE *file, tree decl, const char *name)\n     return;\n \n   if (TARGET_HPUX_LD)\n-    ia64_hpux_add_extern_decl (name);\n+    ia64_hpux_add_extern_decl (decl);\n   else\n     {\n       /* assemble_name will set TREE_SYMBOL_REFERENCED, so we must save and\n@@ -8653,20 +8653,20 @@ ia64_hpux_function_arg_padding (enum machine_mode mode, tree type)\n    We output the name if and only if TREE_SYMBOL_REFERENCED is set in\n    order to avoid putting out names that are never really used.  */\n \n-struct extern_func_list\n+struct extern_func_list GTY(())\n {\n-  struct extern_func_list *next; /* next external */\n-  char *name;                    /* name of the external */\n-} *extern_func_head = 0;\n+  struct extern_func_list *next;\n+  tree decl;\n+};\n+\n+static GTY(()) struct extern_func_list *extern_func_head;\n \n static void\n-ia64_hpux_add_extern_decl (const char *name)\n+ia64_hpux_add_extern_decl (tree decl)\n {\n-  struct extern_func_list *p;\n+  struct extern_func_list *p = ggc_alloc (sizeof (struct extern_func_list));\n \n-  p = (struct extern_func_list *) xmalloc (sizeof (struct extern_func_list));\n-  p->name = xmalloc (strlen (name) + 1);\n-  strcpy(p->name, name);\n+  p->decl = decl;\n   p->next = extern_func_head;\n   extern_func_head = p;\n }\n@@ -8676,29 +8676,29 @@ ia64_hpux_add_extern_decl (const char *name)\n static void\n ia64_hpux_file_end (void)\n {\n-  while (extern_func_head)\n+  struct extern_func_list *p;\n+\n+  for (p = extern_func_head; p; p = p->next)\n     {\n-      const char *real_name;\n-      tree decl;\n+      tree decl = p->decl;\n+      tree id = DECL_NAME (decl);\n \n-      real_name = (* targetm.strip_name_encoding) (extern_func_head->name);\n-      decl = maybe_get_identifier (real_name);\n+      if (!id)\n+\tabort ();\n \n-      if (!decl\n-\t  || (! TREE_ASM_WRITTEN (decl) && TREE_SYMBOL_REFERENCED (decl)))\n+      if (!TREE_ASM_WRITTEN (decl) && TREE_SYMBOL_REFERENCED (id))\n         {\n-\t  if (decl)\n-\t    TREE_ASM_WRITTEN (decl) = 1;\n-\t  (*targetm.asm_out.globalize_label) (asm_out_file,\n-\t\t\t\t\t      extern_func_head->name);\n+\t  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+\n+\t  TREE_ASM_WRITTEN (decl) = 1;\n+\t  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n \t  fputs (TYPE_ASM_OP, asm_out_file);\n-\t  assemble_name (asm_out_file, extern_func_head->name);\n-\t  putc (',', asm_out_file);\n-\t  fprintf (asm_out_file, TYPE_OPERAND_FMT, \"function\");\n-\t  putc ('\\n', asm_out_file);\n+\t  assemble_name (asm_out_file, name);\n+\t  fprintf (asm_out_file, \",\" TYPE_OPERAND_FMT \"\\n\", \"function\");\n         }\n-      extern_func_head = extern_func_head->next;\n     }\n+\n+  extern_func_head = 0;\n }\n \n /* Rename all the TFmode libfuncs using the HPUX conventions.  */"}, {"sha": "0bfe62c4efc5a3c49326ca52116b0740fb3a4757", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d4f65c739e51af5356ef90ac1cbfcff02ef4e1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=57d4f65c739e51af5356ef90ac1cbfcff02ef4e1", "patch": "@@ -3592,12 +3592,12 @@ static GTY(()) unsigned ranges_table_in_use;\n /* Whether we have location lists that need outputting */\n static GTY(()) unsigned have_location_lists;\n \n+/* Unique label counter.  */\n+static GTY(()) unsigned int loclabel_num;\n+\n #ifdef DWARF2_DEBUGGING_INFO\n /* Record whether the function being analyzed contains inlined functions.  */\n static int current_function_has_inlines;\n-\n-/* Unique label counter.  */\n-static unsigned int loclabel_num = 0;\n #endif\n #if 0 && defined (MIPS_DEBUGGING_INFO)\n static int comp_unit_has_inlines;"}]}