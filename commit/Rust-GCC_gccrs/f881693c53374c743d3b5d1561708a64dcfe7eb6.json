{"sha": "f881693c53374c743d3b5d1561708a64dcfe7eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4MTY5M2M1MzM3NGM3NDNkM2I1ZDE1NjE3MDhhNjRkY2ZlN2ViNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-07T08:11:06Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-07T08:11:06Z"}, "message": "[nvptx] Handle large vector reductions\n\nAdd support for vector reductions with openacc vector_length larger than\nwarp-size.\n\n2019-01-07  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx-protos.h (nvptx_output_red_partition): Declare.\n\t* config/nvptx/nvptx.c (vector_red_size, vector_red_align,\n\tvector_red_partition, vector_red_sym): New global variables.\n\t(nvptx_option_override): Initialize vector_red_sym.\n\t(nvptx_declare_function_name): Restore red_partition register.\n\t(nvptx_file_end): Emit code to declare the vector reduction variables.\n\t(nvptx_output_red_partition): New function.\n\t(nvptx_expand_shared_addr): Add vector argument. Use it to handle\n\tlarge vector reductions.\n\t(enum nvptx_builtins): Add NVPTX_BUILTIN_VECTOR_ADDR.\n\t(nvptx_init_builtins): Add VECTOR_ADDR.\n\t(nvptx_expand_builtin): Update call to nvptx_expand_shared_addr.\n\tHandle nvptx_expand_shared_addr.\n\t(nvptx_get_shared_red_addr): Add vector argument and handle large\n\tvectors.\n\t(nvptx_goacc_reduction_setup): Add offload_attrs argument and handle\n\tlarge vectors.\n\t(nvptx_goacc_reduction_init): Likewise.\n\t(nvptx_goacc_reduction_fini): Likewise.\n\t(nvptx_goacc_reduction_teardown): Likewise.\n\t(nvptx_goacc_reduction): Update calls to nvptx_goacc_reduction_{setup,\n\tinit,fini,teardown}.\n\t(nvptx_init_axis_predicate): Initialize vector_red_partition.\n\t(nvptx_set_current_function): Init vector_red_partition.\n\t* config/nvptx/nvptx.md (UNSPECV_RED_PART): New unspecv.\n\t(nvptx_red_partition): New insn.\n\t* config/nvptx/nvptx.h (struct machine_function): Add red_partition.\n\nFrom-SVN: r267631", "tree": {"sha": "8f4adae4b612be5843852e2f84f0267cd221baec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f4adae4b612be5843852e2f84f0267cd221baec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f881693c53374c743d3b5d1561708a64dcfe7eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f881693c53374c743d3b5d1561708a64dcfe7eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f881693c53374c743d3b5d1561708a64dcfe7eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f881693c53374c743d3b5d1561708a64dcfe7eb6/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d495b5ccd252fdb01c70a73f145a008555b5a253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d495b5ccd252fdb01c70a73f145a008555b5a253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d495b5ccd252fdb01c70a73f145a008555b5a253"}], "stats": {"total": 199, "additions": 170, "deletions": 29}, "files": [{"sha": "8fafc234bfedc5e5d21d34466990248040649136", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f881693c53374c743d3b5d1561708a64dcfe7eb6", "patch": "@@ -1,3 +1,33 @@\n+2019-01-07  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-protos.h (nvptx_output_red_partition): Declare.\n+\t* config/nvptx/nvptx.c (vector_red_size, vector_red_align,\n+\tvector_red_partition, vector_red_sym): New global variables.\n+\t(nvptx_option_override): Initialize vector_red_sym.\n+\t(nvptx_declare_function_name): Restore red_partition register.\n+\t(nvptx_file_end): Emit code to declare the vector reduction variables.\n+\t(nvptx_output_red_partition): New function.\n+\t(nvptx_expand_shared_addr): Add vector argument. Use it to handle\n+\tlarge vector reductions.\n+\t(enum nvptx_builtins): Add NVPTX_BUILTIN_VECTOR_ADDR.\n+\t(nvptx_init_builtins): Add VECTOR_ADDR.\n+\t(nvptx_expand_builtin): Update call to nvptx_expand_shared_addr.\n+\tHandle nvptx_expand_shared_addr.\n+\t(nvptx_get_shared_red_addr): Add vector argument and handle large\n+\tvectors.\n+\t(nvptx_goacc_reduction_setup): Add offload_attrs argument and handle\n+\tlarge vectors.\n+\t(nvptx_goacc_reduction_init): Likewise.\n+\t(nvptx_goacc_reduction_fini): Likewise.\n+\t(nvptx_goacc_reduction_teardown): Likewise.\n+\t(nvptx_goacc_reduction): Update calls to nvptx_goacc_reduction_{setup,\n+\tinit,fini,teardown}.\n+\t(nvptx_init_axis_predicate): Initialize vector_red_partition.\n+\t(nvptx_set_current_function): Init vector_red_partition.\n+\t* config/nvptx/nvptx.md (UNSPECV_RED_PART): New unspecv.\n+\t(nvptx_red_partition): New insn.\n+\t* config/nvptx/nvptx.h (struct machine_function): Add red_partition.\n+\n 2019-01-07  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/85381"}, {"sha": "be09a15e49c65a665ae5e6a43c357d1408f76757", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=f881693c53374c743d3b5d1561708a64dcfe7eb6", "patch": "@@ -56,5 +56,6 @@ extern const char *nvptx_output_return (void);\n extern const char *nvptx_output_set_softstack (unsigned);\n extern const char *nvptx_output_simt_enter (rtx, rtx, rtx);\n extern const char *nvptx_output_simt_exit (rtx);\n+extern const char *nvptx_output_red_partition (rtx, rtx);\n #endif\n #endif"}, {"sha": "5a4b38de5225b19b55a5a15a10158cbabe404c40", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 125, "deletions": 29, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=f881693c53374c743d3b5d1561708a64dcfe7eb6", "patch": "@@ -150,6 +150,14 @@ static unsigned worker_red_size;\n static unsigned worker_red_align;\n static GTY(()) rtx worker_red_sym;\n \n+/* Buffer needed for vector reductions, when vector_length >\n+   PTX_WARP_SIZE.  This has to be distinct from the worker broadcast\n+   array, as both may be live concurrently.  */\n+static unsigned vector_red_size;\n+static unsigned vector_red_align;\n+static unsigned vector_red_partition;\n+static GTY(()) rtx vector_red_sym;\n+\n /* Global lock variable, needed for 128bit worker & gang reductions.  */\n static GTY(()) tree global_lock_var;\n \n@@ -226,6 +234,11 @@ nvptx_option_override (void)\n   SET_SYMBOL_DATA_AREA (worker_red_sym, DATA_AREA_SHARED);\n   worker_red_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n \n+  vector_red_sym = gen_rtx_SYMBOL_REF (Pmode, \"__vector_red\");\n+  SET_SYMBOL_DATA_AREA (vector_red_sym, DATA_AREA_SHARED);\n+  vector_red_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n+  vector_red_partition = 0;\n+\n   diagnose_openacc_conflict (TARGET_GOMP, \"-mgomp\");\n   diagnose_openacc_conflict (TARGET_SOFT_STACK, \"-msoft-stack\");\n   diagnose_openacc_conflict (TARGET_UNIFORM_SIMT, \"-muniform-simt\");\n@@ -1104,8 +1117,25 @@ nvptx_init_axis_predicate (FILE *file, int regno, const char *name)\n {\n   fprintf (file, \"\\t{\\n\");\n   fprintf (file, \"\\t\\t.reg.u32\\t%%%s;\\n\", name);\n+  if (strcmp (name, \"x\") == 0 && cfun->machine->red_partition)\n+    {\n+      fprintf (file, \"\\t\\t.reg.u64\\t%%t_red;\\n\");\n+      fprintf (file, \"\\t\\t.reg.u64\\t%%y64;\\n\");\n+    }\n   fprintf (file, \"\\t\\tmov.u32\\t%%%s, %%tid.%s;\\n\", name, name);\n   fprintf (file, \"\\t\\tsetp.ne.u32\\t%%r%d, %%%s, 0;\\n\", regno, name);\n+  if (strcmp (name, \"x\") == 0 && cfun->machine->red_partition)\n+    {\n+      fprintf (file, \"\\t\\tcvt.u64.u32\\t%%y64, %%tid.y;\\n\");\n+      fprintf (file, \"\\t\\tcvta.shared.u64\\t%%t_red, __vector_red;\\n\");\n+      fprintf (file, \"\\t\\tmad.lo.u64\\t%%r%d, %%y64, %d, %%t_red; \"\n+\t       \"// vector reduction buffer\\n\",\n+\t       REGNO (cfun->machine->red_partition),\n+\t       vector_red_partition);\n+    }\n+  /* Verify vector_red_size.  */\n+  gcc_assert (vector_red_partition * nvptx_mach_max_workers ()\n+\t      <= vector_red_size);\n   fprintf (file, \"\\t}\\n\");\n }\n \n@@ -1342,6 +1372,13 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n \tfprintf (file, \"\\t.local.align 8 .b8 %%simtstack_ar[\"\n \t\tHOST_WIDE_INT_PRINT_DEC \"];\\n\", simtsz);\n     }\n+\n+  /* Restore the vector reduction partition register, if necessary.\n+     FIXME: Find out when and why this is necessary, and fix it.  */\n+  if (cfun->machine->red_partition)\n+    regno_reg_rtx[REGNO (cfun->machine->red_partition)]\n+      = cfun->machine->red_partition;\n+\n   /* Declare the pseudos we have as ptx registers.  */\n   int maxregs = max_reg_num ();\n   for (int i = LAST_VIRTUAL_REGISTER + 1; i < maxregs; i++)\n@@ -5188,6 +5225,10 @@ nvptx_file_end (void)\n     write_shared_buffer (asm_out_file, worker_red_sym,\n \t\t\t worker_red_align, worker_red_size);\n \n+  if (vector_red_size)\n+    write_shared_buffer (asm_out_file, vector_red_sym,\n+\t\t\t vector_red_align, vector_red_size);\n+\n   if (need_softstack_decl)\n     {\n       write_var_marker (asm_out_file, false, true, \"__nvptx_stacks\");\n@@ -5233,31 +5274,68 @@ nvptx_expand_shuffle (tree exp, rtx target, machine_mode mode, int ignore)\n   return target;\n }\n \n-/* Worker reduction address expander.  */\n+const char *\n+nvptx_output_red_partition (rtx dst, rtx offset)\n+{\n+  const char *zero_offset = \"\\t\\tmov.u64\\t%%r%d, %%r%d; // vred buffer\\n\";\n+  const char *with_offset = \"\\t\\tadd.u64\\t%%r%d, %%r%d, %d; // vred buffer\\n\";\n+\n+  if (offset == const0_rtx)\n+    fprintf (asm_out_file, zero_offset, REGNO (dst),\n+\t     REGNO (cfun->machine->red_partition));\n+  else\n+    fprintf (asm_out_file, with_offset, REGNO (dst),\n+\t     REGNO (cfun->machine->red_partition), UINTVAL (offset));\n+\n+  return \"\";\n+}\n+\n+/* Shared-memory reduction address expander.  */\n \n static rtx\n nvptx_expand_shared_addr (tree exp, rtx target,\n-\t\t\t  machine_mode ARG_UNUSED (mode), int ignore)\n+\t\t\t  machine_mode ARG_UNUSED (mode), int ignore,\n+\t\t\t  int vector)\n {\n   if (ignore)\n     return target;\n \n   unsigned align = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 2));\n-  worker_red_align = MAX (worker_red_align, align);\n-\n   unsigned offset = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 0));\n   unsigned size = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 1));\n-  worker_red_size = MAX (worker_red_size, size + offset);\n-\n   rtx addr = worker_red_sym;\n-  if (offset)\n+\n+  if (vector)\n     {\n-      addr = gen_rtx_PLUS (Pmode, addr, GEN_INT (offset));\n-      addr = gen_rtx_CONST (Pmode, addr);\n+      offload_attrs oa;\n+\n+      populate_offload_attrs (&oa);\n+\n+      unsigned int psize = ROUND_UP (size + offset, align);\n+      unsigned int pnum = nvptx_mach_max_workers ();\n+      vector_red_partition = MAX (vector_red_partition, psize);\n+      vector_red_size = MAX (vector_red_size, psize * pnum);\n+      vector_red_align = MAX (vector_red_align, align);\n+\n+      if (cfun->machine->red_partition == NULL)\n+\tcfun->machine->red_partition = gen_reg_rtx (Pmode);\n+\n+      addr = gen_reg_rtx (Pmode);\n+      emit_insn (gen_nvptx_red_partition (addr, GEN_INT (offset)));\n     }\n+  else\n+    {\n+      worker_red_align = MAX (worker_red_align, align);\n+      worker_red_size = MAX (worker_red_size, size + offset);\n \n-  emit_move_insn (target, addr);\n+      if (offset)\n+\t{\n+\t  addr = gen_rtx_PLUS (Pmode, addr, GEN_INT (offset));\n+\t  addr = gen_rtx_CONST (Pmode, addr);\n+\t}\n+   }\n \n+  emit_move_insn (target, addr);\n   return target;\n }\n \n@@ -5305,6 +5383,7 @@ enum nvptx_builtins\n   NVPTX_BUILTIN_SHUFFLE,\n   NVPTX_BUILTIN_SHUFFLELL,\n   NVPTX_BUILTIN_WORKER_ADDR,\n+  NVPTX_BUILTIN_VECTOR_ADDR,\n   NVPTX_BUILTIN_CMP_SWAP,\n   NVPTX_BUILTIN_CMP_SWAPLL,\n   NVPTX_BUILTIN_MAX\n@@ -5342,6 +5421,8 @@ nvptx_init_builtins (void)\n   DEF (SHUFFLELL, \"shufflell\", (LLUINT, LLUINT, UINT, UINT, NULL_TREE));\n   DEF (WORKER_ADDR, \"worker_addr\",\n        (PTRVOID, ST, UINT, UINT, NULL_TREE));\n+  DEF (VECTOR_ADDR, \"vector_addr\",\n+       (PTRVOID, ST, UINT, UINT, NULL_TREE));\n   DEF (CMP_SWAP, \"cmp_swap\", (UINT, PTRVOID, UINT, UINT, NULL_TREE));\n   DEF (CMP_SWAPLL, \"cmp_swapll\", (LLUINT, PTRVOID, LLUINT, LLUINT, NULL_TREE));\n \n@@ -5370,7 +5451,10 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n       return nvptx_expand_shuffle (exp, target, mode, ignore);\n \n     case NVPTX_BUILTIN_WORKER_ADDR:\n-      return nvptx_expand_shared_addr (exp, target, mode, ignore);\n+      return nvptx_expand_shared_addr (exp, target, mode, ignore, false);\n+\n+    case NVPTX_BUILTIN_VECTOR_ADDR:\n+      return nvptx_expand_shared_addr (exp, target, mode, ignore, true);\n \n     case NVPTX_BUILTIN_CMP_SWAP:\n     case NVPTX_BUILTIN_CMP_SWAPLL:\n@@ -5630,10 +5714,13 @@ nvptx_goacc_fork_join (gcall *call, const int dims[],\n    data at that location.  */\n \n static tree\n-nvptx_get_shared_red_addr (tree type, tree offset)\n+nvptx_get_shared_red_addr (tree type, tree offset, bool vector)\n {\n+  enum nvptx_builtins addr_dim = NVPTX_BUILTIN_WORKER_ADDR;\n+  if (vector)\n+    addr_dim = NVPTX_BUILTIN_VECTOR_ADDR;\n   machine_mode mode = TYPE_MODE (type);\n-  tree fndecl = nvptx_builtin_decl (NVPTX_BUILTIN_WORKER_ADDR, true);\n+  tree fndecl = nvptx_builtin_decl (addr_dim, true);\n   tree size = build_int_cst (unsigned_type_node, GET_MODE_SIZE (mode));\n   tree align = build_int_cst (unsigned_type_node,\n \t\t\t      GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT);\n@@ -5949,7 +6036,7 @@ nvptx_reduction_update (location_t loc, gimple_stmt_iterator *gsi,\n /* NVPTX implementation of GOACC_REDUCTION_SETUP.  */\n \n static void\n-nvptx_goacc_reduction_setup (gcall *call)\n+nvptx_goacc_reduction_setup (gcall *call, offload_attrs *oa)\n {\n   gimple_stmt_iterator gsi = gsi_for_stmt (call);\n   tree lhs = gimple_call_lhs (call);\n@@ -5968,11 +6055,13 @@ nvptx_goacc_reduction_setup (gcall *call)\n \tvar = build_simple_mem_ref (ref_to_res);\n     }\n   \n-  if (level == GOMP_DIM_WORKER)\n+  if (level == GOMP_DIM_WORKER\n+      || (level == GOMP_DIM_VECTOR && oa->vector_length > PTX_WARP_SIZE))\n     {\n       /* Store incoming value to worker reduction buffer.  */\n       tree offset = gimple_call_arg (call, 5);\n-      tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset);\n+      tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset,\n+\t\t\t\t\t     level == GOMP_DIM_VECTOR);\n       tree ptr = make_ssa_name (TREE_TYPE (call));\n \n       gimplify_assign (ptr, call, &seq);\n@@ -5991,7 +6080,7 @@ nvptx_goacc_reduction_setup (gcall *call)\n /* NVPTX implementation of GOACC_REDUCTION_INIT. */\n \n static void\n-nvptx_goacc_reduction_init (gcall *call)\n+nvptx_goacc_reduction_init (gcall *call, offload_attrs *oa)\n {\n   gimple_stmt_iterator gsi = gsi_for_stmt (call);\n   tree lhs = gimple_call_lhs (call);\n@@ -6005,7 +6094,7 @@ nvptx_goacc_reduction_init (gcall *call)\n   \n   push_gimplify_context (true);\n \n-  if (level == GOMP_DIM_VECTOR)\n+  if (level == GOMP_DIM_VECTOR && oa->vector_length == PTX_WARP_SIZE)\n     {\n       /* Initialize vector-non-zeroes to INIT_VAL (OP).  */\n       tree tid = make_ssa_name (integer_type_node);\n@@ -6075,7 +6164,7 @@ nvptx_goacc_reduction_init (gcall *call)\n /* NVPTX implementation of GOACC_REDUCTION_FINI.  */\n \n static void\n-nvptx_goacc_reduction_fini (gcall *call)\n+nvptx_goacc_reduction_fini (gcall *call, offload_attrs *oa)\n {\n   gimple_stmt_iterator gsi = gsi_for_stmt (call);\n   tree lhs = gimple_call_lhs (call);\n@@ -6089,7 +6178,7 @@ nvptx_goacc_reduction_fini (gcall *call)\n \n   push_gimplify_context (true);\n \n-  if (level == GOMP_DIM_VECTOR)\n+  if (level == GOMP_DIM_VECTOR && oa->vector_length == PTX_WARP_SIZE)\n     {\n       /* Emit binary shuffle tree.  TODO. Emit this as an actual loop,\n \t but that requires a method of emitting a unified jump at the\n@@ -6110,11 +6199,12 @@ nvptx_goacc_reduction_fini (gcall *call)\n     {\n       tree accum = NULL_TREE;\n \n-      if (level == GOMP_DIM_WORKER)\n+      if (level == GOMP_DIM_WORKER || level == GOMP_DIM_VECTOR)\n \t{\n \t  /* Get reduction buffer address.  */\n \t  tree offset = gimple_call_arg (call, 5);\n-\t  tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset);\n+\t  tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset,\n+\t\t\t\t\t\t level == GOMP_DIM_VECTOR);\n \t  tree ptr = make_ssa_name (TREE_TYPE (call));\n \n \t  gimplify_assign (ptr, call, &seq);\n@@ -6145,7 +6235,7 @@ nvptx_goacc_reduction_fini (gcall *call)\n /* NVPTX implementation of GOACC_REDUCTION_TEARDOWN.  */\n \n static void\n-nvptx_goacc_reduction_teardown (gcall *call)\n+nvptx_goacc_reduction_teardown (gcall *call, offload_attrs *oa)\n {\n   gimple_stmt_iterator gsi = gsi_for_stmt (call);\n   tree lhs = gimple_call_lhs (call);\n@@ -6154,11 +6244,13 @@ nvptx_goacc_reduction_teardown (gcall *call)\n   gimple_seq seq = NULL;\n   \n   push_gimplify_context (true);\n-  if (level == GOMP_DIM_WORKER)\n+  if (level == GOMP_DIM_WORKER\n+      || (level == GOMP_DIM_VECTOR && oa->vector_length > PTX_WARP_SIZE))\n     {\n       /* Read the worker reduction buffer.  */\n       tree offset = gimple_call_arg (call, 5);\n-      tree call = nvptx_get_shared_red_addr(TREE_TYPE (var), offset);\n+      tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset,\n+\t\t\t\t\t     level == GOMP_DIM_VECTOR);\n       tree ptr = make_ssa_name (TREE_TYPE (call));\n \n       gimplify_assign (ptr, call, &seq);\n@@ -6189,23 +6281,26 @@ static void\n nvptx_goacc_reduction (gcall *call)\n {\n   unsigned code = (unsigned)TREE_INT_CST_LOW (gimple_call_arg (call, 0));\n+  offload_attrs oa;\n+\n+  populate_offload_attrs (&oa);\n \n   switch (code)\n     {\n     case IFN_GOACC_REDUCTION_SETUP:\n-      nvptx_goacc_reduction_setup (call);\n+      nvptx_goacc_reduction_setup (call, &oa);\n       break;\n \n     case IFN_GOACC_REDUCTION_INIT:\n-      nvptx_goacc_reduction_init (call);\n+      nvptx_goacc_reduction_init (call, &oa);\n       break;\n \n     case IFN_GOACC_REDUCTION_FINI:\n-      nvptx_goacc_reduction_fini (call);\n+      nvptx_goacc_reduction_fini (call, &oa);\n       break;\n \n     case IFN_GOACC_REDUCTION_TEARDOWN:\n-      nvptx_goacc_reduction_teardown (call);\n+      nvptx_goacc_reduction_teardown (call, &oa);\n       break;\n \n     default:\n@@ -6290,6 +6385,7 @@ nvptx_set_current_function (tree fndecl)\n     return;\n \n   nvptx_previous_fndecl = fndecl;\n+  vector_red_partition = 0;\n   oacc_bcast_partition = 0;\n }\n "}, {"sha": "29e658248ab76e7c329ae801a24e32d7d24ae8b1", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=f881693c53374c743d3b5d1561708a64dcfe7eb6", "patch": "@@ -224,6 +224,8 @@ struct GTY(()) machine_function\n   rtx bcast_partition; /* Register containing the size of each\n \t\t\t  vector's partition of share-memory used to\n \t\t\t  broadcast state.  */\n+  rtx red_partition; /* Similar to bcast_partition, except for vector\n+\t\t\treductions.  */\n   rtx sync_bar; /* Synchronization barrier ID for vectors.  */\n   rtx unisimt_master; /* 'Master lane index' for -muniform-simt.  */\n   rtx unisimt_predicate; /* Predicate for -muniform-simt.  */"}, {"sha": "1a090a47a32d6716169ab1132090240ac9ebf506", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f881693c53374c743d3b5d1561708a64dcfe7eb6/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=f881693c53374c743d3b5d1561708a64dcfe7eb6", "patch": "@@ -68,6 +68,8 @@\n \n    UNSPECV_SIMT_ENTER\n    UNSPECV_SIMT_EXIT\n+\n+   UNSPECV_RED_PART\n ])\n \n (define_attr \"subregs_ok\" \"false,true\"\n@@ -1508,3 +1510,13 @@\n   \"\"\n   \"\\\\t.pragma \\\\\\\"nounroll\\\\\\\";\"\n   [(set_attr \"predicable\" \"false\")])\n+\n+(define_insn \"nvptx_red_partition\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=R\")\n+\t(unspec_volatile [(match_operand:DI 1 \"const_int_operand\")]\n+\t UNSPECV_RED_PART))]\n+  \"\"\n+  {\n+    return nvptx_output_red_partition (operands[0], operands[1]);\n+  }\n+  [(set_attr \"predicable\" \"false\")])"}]}