{"sha": "ae8e301e08b084da8e2142aa195135cae718cd70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4ZTMwMWUwOGIwODRkYThlMjE0MmFhMTk1MTM1Y2FlNzE4Y2Q3MA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-11T07:24:41Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-11T07:24:41Z"}, "message": "S/390: Define macros for rounding mode constants\n\nThis patch replaces a few magic numbers used for floating point\nrounding modes with macros.  This is mostly a NoOp change apart from:\n\nfixuns_truncdddi2, fixuns_trunctddi2, fixuns_trunc<mode>si2: Replace 5\nwith DFP_RND_TOWARD_0 (which is 9).\n\n5 as well as 9 represent round towards 0 with the difference that for\n5 the new DFP quantum exception is enabled as well.  This exception\nisn't IEEE754 and we do not have an interface to enable and test it\nanyway.  So we do not intend to enable it.  This so far should not\nhave any noticable effect since the quantum exception was not\nobservable through the Posix functions.\n\nSome pattern (\"fix_trunc<mode>di2\") is already using rounding mode 9\ncorrectly.\n\ngcc/ChangeLog:\n\n2016-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (BFP_RND_*, DFP_RND_*): Add new constant\n\tdefinitions for BFP and DFP rounding modes.\n\t(\"fixuns_truncdddi2\", \"fixuns_trunctddi2\")\n\t(\"fixuns_trunc<BFP:mode><GPR:mode>2\", \"fixuns_trunc<mode>si2\")\n\t(\"fix_trunc<DSF:mode><GPR:mode>2\", \"fix_trunc<mode>di2\")\n\t(\"fix_trunctf<mode>2\"): Use the new constants instead of magic\n\tnumbers.\n\nFrom-SVN: r234133", "tree": {"sha": "ff8ea622f6b57f8864a346ec9013099a62faf4f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff8ea622f6b57f8864a346ec9013099a62faf4f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8e301e08b084da8e2142aa195135cae718cd70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8e301e08b084da8e2142aa195135cae718cd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8e301e08b084da8e2142aa195135cae718cd70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8e301e08b084da8e2142aa195135cae718cd70/comments", "author": null, "committer": null, "parents": [{"sha": "dd95128ba97f4b43145d76d6624de52e2cbda074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd95128ba97f4b43145d76d6624de52e2cbda074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd95128ba97f4b43145d76d6624de52e2cbda074"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "0cfc1e2eadd5e274c505dcf2bf51ff0c4538c69a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8e301e08b084da8e2142aa195135cae718cd70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8e301e08b084da8e2142aa195135cae718cd70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae8e301e08b084da8e2142aa195135cae718cd70", "patch": "@@ -1,3 +1,13 @@\n+2016-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (BFP_RND_*, DFP_RND_*): Add new constant\n+\tdefinitions for BFP and DFP rounding modes.\n+\t(\"fixuns_truncdddi2\", \"fixuns_trunctddi2\")\n+\t(\"fixuns_trunc<BFP:mode><GPR:mode>2\", \"fixuns_trunc<mode>si2\")\n+\t(\"fix_trunc<DSF:mode><GPR:mode>2\", \"fix_trunc<mode>di2\")\n+\t(\"fix_trunctf<mode>2\"): Use the new constants instead of magic\n+\tnumbers.\n+\n 2016-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/constraints.md: Adjust comment."}, {"sha": "185a3f8511ba715ebe24aeeb5e3f408eff8a3fb7", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8e301e08b084da8e2142aa195135cae718cd70/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8e301e08b084da8e2142aa195135cae718cd70/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ae8e301e08b084da8e2142aa195135cae718cd70", "patch": "@@ -338,6 +338,39 @@\n    (VR31_REGNUM                 53)\n   ])\n \n+; Rounding modes for binary floating point numbers\n+(define_constants\n+  [(BFP_RND_CURRENT                 0)\n+   (BFP_RND_NEAREST_TIE_AWAY_FROM_0 1)\n+   (BFP_RND_PREP_FOR_SHORT_PREC     3)\n+   (BFP_RND_NEAREST_TIE_TO_EVEN     4)\n+   (BFP_RND_TOWARD_0                5)\n+   (BFP_RND_TOWARD_INF              6)\n+   (BFP_RND_TOWARD_MINF             7)])\n+\n+; Rounding modes for decimal floating point numbers\n+; 1-7 were introduced with the floating point extension facility\n+; available with z196\n+; With these rounding modes (1-7) a quantum exception might occur\n+; which is suppressed for the other modes.\n+(define_constants\n+  [(DFP_RND_CURRENT                          0)\n+   (DFP_RND_NEAREST_TIE_AWAY_FROM_0_QUANTEXC 1)\n+   (DFP_RND_CURRENT_QUANTEXC                 2)\n+   (DFP_RND_PREP_FOR_SHORT_PREC_QUANTEXC     3)\n+   (DFP_RND_NEAREST_TIE_TO_EVEN_QUANTEXC     4)\n+   (DFP_RND_TOWARD_0_QUANTEXC                5)\n+   (DFP_RND_TOWARD_INF_QUANTEXC              6)\n+   (DFP_RND_TOWARD_MINF_QUANTEXC             7)\n+   (DFP_RND_NEAREST_TIE_TO_EVEN              8)\n+   (DFP_RND_TOWARD_0                         9)\n+   (DFP_RND_TOWARD_INF                      10)\n+   (DFP_RND_TOWARD_MINF                     11)\n+   (DFP_RND_NEAREST_TIE_AWAY_FROM_0         12)\n+   (DFP_RND_NEAREST_TIE_TO_0                13)\n+   (DFP_RND_AWAY_FROM_0                     14)\n+   (DFP_RND_PREP_FOR_SHORT_PREC             15)])\n+\n ;;\n ;; PFPO GPR0 argument format\n ;;\n@@ -4482,7 +4515,7 @@\n   [(parallel\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t  (unsigned_fix:DI (match_operand:DD 1 \"register_operand\" \"\")))\n-     (unspec:DI [(const_int 5)] UNSPEC_ROUND)\n+     (unspec:DI [(const_int DFP_RND_TOWARD_0)] UNSPEC_ROUND)\n      (clobber (reg:CC CC_REGNUM))])]\n \n   \"TARGET_HARD_DFP\"\n@@ -4507,11 +4540,13 @@\n \t    LT, NULL_RTX, VOIDmode, 0, label1);\n       emit_insn (gen_subtd3 (temp, temp,\n \t    const_double_from_real_value (sub, TDmode)));\n-      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp,\n+\t\t\t\t\t GEN_INT (DFP_RND_TOWARD_MINF)));\n       emit_jump (label2);\n \n       emit_label (label1);\n-      emit_insn (gen_fix_truncdddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n+      emit_insn (gen_fix_truncdddi2_dfp (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (DFP_RND_TOWARD_0)));\n       emit_label (label2);\n       DONE;\n     }\n@@ -4521,7 +4556,7 @@\n   [(parallel\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t  (unsigned_fix:DI (match_operand:TD 1 \"register_operand\" \"\")))\n-     (unspec:DI [(const_int 5)] UNSPEC_ROUND)\n+     (unspec:DI [(const_int DFP_RND_TOWARD_0)] UNSPEC_ROUND)\n      (clobber (reg:CC CC_REGNUM))])]\n \n   \"TARGET_HARD_DFP\"\n@@ -4542,11 +4577,13 @@\n \t    LT, NULL_RTX, VOIDmode, 0, label1);\n       emit_insn (gen_subtd3 (temp, operands[1],\n \t    const_double_from_real_value (sub, TDmode)));\n-      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp,\n+\t\t\t\t\t GEN_INT (DFP_RND_TOWARD_MINF)));\n       emit_jump (label2);\n \n       emit_label (label1);\n-      emit_insn (gen_fix_trunctddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (DFP_RND_TOWARD_0)));\n       emit_label (label2);\n       DONE;\n     }\n@@ -4561,7 +4598,7 @@\n   [(parallel\n     [(set (match_operand:GPR 0 \"register_operand\" \"\")\n \t  (unsigned_fix:GPR (match_operand:BFP 1 \"register_operand\" \"\")))\n-     (unspec:GPR [(const_int 5)] UNSPEC_ROUND)\n+     (unspec:GPR [(const_int BFP_RND_TOWARD_0)] UNSPEC_ROUND)\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_HARD_FLOAT\"\n {\n@@ -4582,12 +4619,12 @@\n       emit_insn (gen_sub<BFP:mode>3 (temp, operands[1],\n \t    const_double_from_real_value (sub, <BFP:MODE>mode)));\n       emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0], temp,\n-\t    GEN_INT (7)));\n+\t    GEN_INT (BFP_RND_TOWARD_MINF)));\n       emit_jump (label2);\n \n       emit_label (label1);\n       emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0],\n-\t    operands[1], GEN_INT (5)));\n+\t    operands[1], GEN_INT (BFP_RND_TOWARD_0)));\n       emit_label (label2);\n       DONE;\n     }\n@@ -4598,7 +4635,7 @@\n   [(parallel\n     [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t  (unsigned_fix:SI (match_operand:DFP 1 \"register_operand\" \"\")))\n-     (unspec:SI [(const_int 5)] UNSPEC_ROUND)\n+     (unspec:SI [(const_int DFP_RND_TOWARD_0)] UNSPEC_ROUND)\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_Z196 && TARGET_HARD_DFP\"\n   \"\")\n@@ -4636,7 +4673,7 @@\n   \"TARGET_HARD_FLOAT\"\n {\n   emit_insn (gen_fix_trunc<DSF:mode><GPR:mode>2_bfp (operands[0], operands[1],\n-             GEN_INT (5)));\n+             GEN_INT (BFP_RND_TOWARD_0)));\n   DONE;\n })\n \n@@ -4682,7 +4719,7 @@\n {\n   operands[1] = force_reg (<MODE>mode, operands[1]);\n   emit_insn (gen_fix_trunc<mode>di2_dfp (operands[0], operands[1],\n-      GEN_INT (9)));\n+      GEN_INT (DFP_RND_TOWARD_0)));\n   DONE;\n })\n \n@@ -4705,7 +4742,7 @@\n (define_expand \"fix_trunctf<mode>2\"\n   [(parallel [(set (match_operand:GPR 0 \"register_operand\" \"\")\n \t\t   (fix:GPR (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (unspec:GPR [(const_int 5)] UNSPEC_ROUND)\n+\t      (unspec:GPR [(const_int BFP_RND_TOWARD_0)] UNSPEC_ROUND)\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_HARD_FLOAT\"\n   \"\")"}]}