{"sha": "e9681f5725f54a58098678cdea19d1e90d9a36e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2ODFmNTcyNWY1NGE1ODA5ODY3OGNkZWExOWQxZTkwZDlhMzZlMw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-07T00:05:53Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-17T08:43:26Z"}, "message": "auto_vec copy/move improvements\n\n- Unfortunately using_auto_storage () needs to handle m_vec being null.\n- Handle self move of an auto_vec to itself.\n- Make sure auto_vec defines the classes move constructor and assignment\n  operator, as well as ones taking vec<T>, so the compiler does not generate\nthem for us.  Per https://en.cppreference.com/w/cpp/language/move_constructor\nthe ones taking vec<T> do not count as the classes move constructor or\nassignment operator, but we want them as well to assign a plain vec to a\nauto_vec.\n- Explicitly delete auto_vec's copy constructor and assignment operator.  This\n  prevents unintentional expenssive coppies of the vector and makes it clear\nwhen coppies are needed that that is what is intended.  When it is necessary to\ncopy a vector copy () can be used.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>\n\ngcc/ChangeLog:\n\n\t* vec.h (vl_ptr>::using_auto_storage): Handle null m_vec.\n\t(auto_vec<T, 0>::auto_vec): Define move constructor, and delete copy\n\tconstructor.\n\t(auto_vec<T, 0>::operator=): Define move assignment and delete copy\n\tassignment.", "tree": {"sha": "c9a3dec470cdb273a2f7827df0c33050d36d8cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a3dec470cdb273a2f7827df0c33050d36d8cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9681f5725f54a58098678cdea19d1e90d9a36e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9681f5725f54a58098678cdea19d1e90d9a36e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9681f5725f54a58098678cdea19d1e90d9a36e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9681f5725f54a58098678cdea19d1e90d9a36e3/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f3ee13959f852de432fa7761a8e50ddee6d6e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3ee13959f852de432fa7761a8e50ddee6d6e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3ee13959f852de432fa7761a8e50ddee6d6e1b"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "30ef9a6947377ea5ca7dc78d48d09dc523fac06e", "filename": "gcc/vec.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9681f5725f54a58098678cdea19d1e90d9a36e3/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9681f5725f54a58098678cdea19d1e90d9a36e3/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=e9681f5725f54a58098678cdea19d1e90d9a36e3", "patch": "@@ -1570,14 +1570,43 @@ class auto_vec<T, 0> : public vec<T, va_heap>\n       this->m_vec = r.m_vec;\n       r.m_vec = NULL;\n     }\n+\n+  auto_vec (auto_vec<T> &&r)\n+    {\n+      gcc_assert (!r.using_auto_storage ());\n+      this->m_vec = r.m_vec;\n+      r.m_vec = NULL;\n+    }\n+\n   auto_vec& operator= (vec<T, va_heap>&& r)\n     {\n+\t    if (this == &r)\n+\t\t    return *this;\n+\n+      gcc_assert (!r.using_auto_storage ());\n+      this->release ();\n+      this->m_vec = r.m_vec;\n+      r.m_vec = NULL;\n+      return *this;\n+    }\n+\n+  auto_vec& operator= (auto_vec<T> &&r)\n+    {\n+\t    if (this == &r)\n+\t\t    return *this;\n+\n       gcc_assert (!r.using_auto_storage ());\n       this->release ();\n       this->m_vec = r.m_vec;\n       r.m_vec = NULL;\n       return *this;\n     }\n+\n+  // You probably don't want to copy a vector, so these are deleted to prevent\n+  // unintentional use.  If you really need a copy of the vectors contents you\n+  // can use copy ().\n+  auto_vec(const auto_vec &) = delete;\n+  auto_vec &operator= (const auto_vec &) = delete;\n };\n \n \n@@ -2147,7 +2176,7 @@ template<typename T>\n inline bool\n vec<T, va_heap, vl_ptr>::using_auto_storage () const\n {\n-  return m_vec->m_vecpfx.m_using_auto_storage;\n+  return m_vec ? m_vec->m_vecpfx.m_using_auto_storage : false;\n }\n \n /* Release VEC and call release of all element vectors.  */"}]}