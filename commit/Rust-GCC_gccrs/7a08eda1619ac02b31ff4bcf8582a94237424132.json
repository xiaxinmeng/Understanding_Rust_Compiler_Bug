{"sha": "7a08eda1619ac02b31ff4bcf8582a94237424132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwOGVkYTE2MTlhYzAyYjMxZmY0YmNmODU4MmE5NDIzNzQyNDEzMg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-30T21:56:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-30T21:56:11Z"}, "message": "gfortran.h (CLASS_DATA): New macro for accessing the $data component of a class container.\n\n2010-05-30  Janus Weil  <janus@gcc.gnu.org>\n\n\t* gcc/fortran/gfortran.h (CLASS_DATA): New macro for accessing the\n\t$data component of a class container.\n\t* gcc/fortran/decl.c (attr_decl1): Use macro CLASS_DATA.\n\t* gcc/fortran/expr.c (gfc_check_pointer_assign,gfc_check_assign_symbol,\n\tgfc_has_ultimate_allocatable,gfc_has_ultimate_pointer): Ditto.\n\t* gcc/fortran/interface.c (matching_typebound_op): Ditto.\n\t* gcc/fortran/match.c (gfc_match_allocate, gfc_match_deallocate): Ditto.\n\t* gcc/fortran/parse.c (parse_derived): Ditto.\n\t* gcc/fortran/primary.c (gfc_match_varspec, gfc_variable_attr,\n\tgfc_expr_attr): Ditto.\n\t* gcc/fortran/resolve.c (resolve_structure_cons, find_array_spec,\n\tresolve_deallocate_expr, resolve_allocate_expr, resolve_select_type,\n\tresolve_fl_var_and_proc, resolve_typebound_procedure,\n\tresolve_fl_derived): Ditto.\n\t* gcc/fortran/symbol.c (gfc_type_compatible): Restructured.\n\t* gcc/fortran/trans-array.c (structure_alloc_comps): Use macro\n\tCLASS_DATA.\n\t* gcc/fortran/trans-decl.c (gfc_get_symbol_decl,\n\tgfc_trans_deferred_vars): Ditto.\n\t* gcc/fortran/trans-stmt.c (gfc_trans_allocate): Ditto.\n\nFrom-SVN: r160060", "tree": {"sha": "bd664a3b4e0b3ba3499bd2892841cf41c6b4a076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd664a3b4e0b3ba3499bd2892841cf41c6b4a076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a08eda1619ac02b31ff4bcf8582a94237424132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08eda1619ac02b31ff4bcf8582a94237424132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a08eda1619ac02b31ff4bcf8582a94237424132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08eda1619ac02b31ff4bcf8582a94237424132/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66a3e33967b012b5ec524c0c57618fe7408ce440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a3e33967b012b5ec524c0c57618fe7408ce440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a3e33967b012b5ec524c0c57618fe7408ce440"}], "stats": {"total": 216, "additions": 103, "deletions": 113}, "files": [{"sha": "b156f77ac1e8c6de593a2e8946bea2de649f0434", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -1,3 +1,26 @@\n+2010-05-30  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gcc/fortran/gfortran.h (CLASS_DATA): New macro for accessing the\n+\t$data component of a class container.\n+\t* gcc/fortran/decl.c (attr_decl1): Use macro CLASS_DATA.\n+\t* gcc/fortran/expr.c (gfc_check_pointer_assign,gfc_check_assign_symbol,\n+\tgfc_has_ultimate_allocatable,gfc_has_ultimate_pointer): Ditto.\n+\t* gcc/fortran/interface.c (matching_typebound_op): Ditto.\n+\t* gcc/fortran/match.c (gfc_match_allocate, gfc_match_deallocate): Ditto.\n+\t* gcc/fortran/parse.c (parse_derived): Ditto.\n+\t* gcc/fortran/primary.c (gfc_match_varspec, gfc_variable_attr,\n+\tgfc_expr_attr): Ditto.\n+\t* gcc/fortran/resolve.c (resolve_structure_cons, find_array_spec,\n+\tresolve_deallocate_expr, resolve_allocate_expr, resolve_select_type,\n+\tresolve_fl_var_and_proc, resolve_typebound_procedure,\n+\tresolve_fl_derived): Ditto.\n+\t* gcc/fortran/symbol.c (gfc_type_compatible): Restructured.\n+\t* gcc/fortran/trans-array.c (structure_alloc_comps): Use macro\n+\tCLASS_DATA.\n+\t* gcc/fortran/trans-decl.c (gfc_get_symbol_decl,\n+\tgfc_trans_deferred_vars): Ditto.\n+\t* gcc/fortran/trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2010-05-28  Tobias Burnus  <burnus@net-b.de>\n \n \t* options.c (gfc_handle_option): Fix handling of -fno-whole-file."}, {"sha": "9786a860baec50749df94af9c2d9f8114b1a96e9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -5755,19 +5755,16 @@ attr_decl1 (void)\n   /* Update symbol table.  DIMENSION attribute is set in\n      gfc_set_array_spec().  For CLASS variables, this must be applied\n      to the first component, or '$data' field.  */\n-  if (sym->ts.type == BT_CLASS && sym->ts.u.derived)\n+  if (sym->ts.type == BT_CLASS)\n     {\n-      gfc_component *comp;\n-      comp = gfc_find_component (sym->ts.u.derived, \"$data\", true, true);\n-      if (comp == NULL || gfc_copy_attr (&comp->attr, &current_attr,\n-\t\t\t\t\t &var_locus) == FAILURE)\n+      if (gfc_copy_attr (&CLASS_DATA (sym)->attr, &current_attr,&var_locus)\n+\t  == FAILURE)\n \t{\n \t  m = MATCH_ERROR;\n \t  goto cleanup;\n \t}\n-      sym->attr.class_ok = (sym->attr.class_ok\n-\t\t\t      || current_attr.allocatable\n-\t\t\t      || current_attr.pointer);\n+      sym->attr.class_ok = (sym->attr.class_ok || current_attr.allocatable\n+\t\t\t    || current_attr.pointer);\n     }\n   else\n     {"}, {"sha": "b6452054b112e4ffcd153f5cf02fba5697af99aa", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -3306,8 +3306,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n     }\n \n   if (!pointer && !proc_pointer\n-\t&& !(lvalue->ts.type == BT_CLASS\n-\t\t&& lvalue->ts.u.derived->components->attr.pointer))\n+\t&& !(lvalue->ts.type == BT_CLASS && CLASS_DATA (lvalue)->attr.pointer))\n     {\n       gfc_error (\"Pointer assignment to non-POINTER at %L\", &lvalue->where);\n       return FAILURE;\n@@ -3544,8 +3543,7 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   lvalue.where = sym->declared_at;\n \n   if (sym->attr.pointer || sym->attr.proc_pointer\n-      || (sym->ts.type == BT_CLASS \n-\t  && sym->ts.u.derived->components->attr.pointer\n+      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.pointer\n \t  && rvalue->expr_type == EXPR_NULL))\n     r = gfc_check_pointer_assign (&lvalue, rvalue);\n   else\n@@ -4039,14 +4037,14 @@ gfc_has_ultimate_allocatable (gfc_expr *e)\n       last = ref;\n \n   if (last && last->u.c.component->ts.type == BT_CLASS)\n-    return last->u.c.component->ts.u.derived->components->attr.alloc_comp;\n+    return CLASS_DATA (last->u.c.component)->attr.alloc_comp;\n   else if (last && last->u.c.component->ts.type == BT_DERIVED)\n     return last->u.c.component->ts.u.derived->attr.alloc_comp;\n   else if (last)\n     return false;\n \n   if (e->ts.type == BT_CLASS)\n-    return e->ts.u.derived->components->attr.alloc_comp;\n+    return CLASS_DATA (e)->attr.alloc_comp;\n   else if (e->ts.type == BT_DERIVED)\n     return e->ts.u.derived->attr.alloc_comp;\n   else\n@@ -4069,14 +4067,14 @@ gfc_has_ultimate_pointer (gfc_expr *e)\n       last = ref;\n  \n   if (last && last->u.c.component->ts.type == BT_CLASS)\n-    return last->u.c.component->ts.u.derived->components->attr.pointer_comp;\n+    return CLASS_DATA (last->u.c.component)->attr.pointer_comp;\n   else if (last && last->u.c.component->ts.type == BT_DERIVED)\n     return last->u.c.component->ts.u.derived->attr.pointer_comp;\n   else if (last)\n     return false;\n \n   if (e->ts.type == BT_CLASS)\n-    return e->ts.u.derived->components->attr.pointer_comp;\n+    return CLASS_DATA (e)->attr.pointer_comp;\n   else if (e->ts.type == BT_DERIVED)\n     return e->ts.u.derived->attr.pointer_comp;\n   else"}, {"sha": "9762cddfaa888aa593b576bc2dc8e908c79cdfab", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -2789,4 +2789,6 @@ gfc_typebound_proc* gfc_find_typebound_intrinsic_op (gfc_symbol*, gfc_try*,\n \t\t\t\t\t\t     locus*);\n gfc_symtree* gfc_get_tbp_symtree (gfc_symtree**, const char*);\n \n+#define CLASS_DATA(sym) sym->ts.u.derived->components\n+\n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "99ade9d273d5f7075c4879437bcf1487ac0575f1", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -2734,7 +2734,7 @@ matching_typebound_op (gfc_expr** tb_base,\n \tgfc_try result;\n \n \tif (base->expr->ts.type == BT_CLASS)\n-\t  derived = base->expr->ts.u.derived->components->ts.u.derived;\n+\t  derived = CLASS_DATA (base->expr)->ts.u.derived;\n \telse\n \t  derived = base->expr->ts.u.derived;\n "}, {"sha": "7e13ba3b96abab1261089b4d826e4994bbade0dc", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -2785,8 +2785,8 @@ gfc_match_allocate (void)\n \t   && (tail->expr->ref->type == REF_COMPONENT\n \t\t|| tail->expr->ref->type == REF_ARRAY));\n       if (sym && sym->ts.type == BT_CLASS)\n-\tb2 = !(sym->ts.u.derived->components->attr.allocatable\n-\t       || sym->ts.u.derived->components->attr.pointer);\n+\tb2 = !(CLASS_DATA (sym)->attr.allocatable\n+\t       || CLASS_DATA (sym)->attr.pointer);\n       else\n \tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n \t\t      || sym->attr.proc_pointer);\n@@ -3047,8 +3047,8 @@ gfc_match_deallocate (void)\n \t   && (tail->expr->ref->type == REF_COMPONENT\n \t       || tail->expr->ref->type == REF_ARRAY));\n       if (sym && sym->ts.type == BT_CLASS)\n-\tb2 = !(sym->ts.u.derived->components->attr.allocatable\n-\t       || sym->ts.u.derived->components->attr.pointer);\n+\tb2 = !(CLASS_DATA (sym)->attr.allocatable\n+\t       || CLASS_DATA (sym)->attr.pointer);\n       else\n \tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n \t\t      || sym->attr.proc_pointer);"}, {"sha": "31ad7cf385ce7decc41fc32ec8965b98484913a4", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -2082,15 +2082,13 @@ parse_derived (void)\n     {\n       /* Look for allocatable components.  */\n       if (c->attr.allocatable\n-\t  || (c->ts.type == BT_CLASS\n-\t      && c->ts.u.derived->components->attr.allocatable)\n+\t  || (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n \t  || (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.alloc_comp))\n \tsym->attr.alloc_comp = 1;\n \n       /* Look for pointer components.  */\n       if (c->attr.pointer\n-\t  || (c->ts.type == BT_CLASS\n-\t      && c->ts.u.derived->components->attr.pointer)\n+\t  || (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.pointer)\n \t  || (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.pointer_comp))\n \tsym->attr.pointer_comp = 1;\n "}, {"sha": "68b6a437360cbea4a153063b9ff8f23cdb37e002", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -1754,8 +1754,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  && !gfc_is_proc_ptr_comp (primary, NULL)\n \t  && !(gfc_matching_procptr_assignment\n \t       && sym->attr.flavor == FL_PROCEDURE))\n-      || (sym->ts.type == BT_CLASS\n-\t  && sym->ts.u.derived->components->attr.dimension))\n+      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.dimension))\n     {\n       /* In EQUIVALENCE, we don't know yet whether we are seeing\n \t an array, character variable or array of character\n@@ -1890,16 +1889,15 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t    return m;\n \t}\n       else if (component->ts.type == BT_CLASS\n-\t       && component->ts.u.derived->components->as != NULL\n+\t       && CLASS_DATA (component)->as != NULL\n \t       && !component->attr.proc_pointer)\n \t{\n \t  tail = extend_ref (primary, tail);\n \t  tail->type = REF_ARRAY;\n \n-\t  m = gfc_match_array_ref (&tail->u.ar,\n-\t\t\t\t   component->ts.u.derived->components->as,\n+\t  m = gfc_match_array_ref (&tail->u.ar, CLASS_DATA (component)->as,\n \t\t\t\t   equiv_flag,\n-\t\t\t   component->ts.u.derived->components->as->corank);\n+\t\t\t\t   CLASS_DATA (component)->as->corank);\n \t  if (m != MATCH_YES)\n \t    return m;\n \t}\n@@ -2000,9 +1998,9 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \n   if (sym->ts.type == BT_CLASS)\n     {\n-      dimension = sym->ts.u.derived->components->attr.dimension;\n-      pointer = sym->ts.u.derived->components->attr.pointer;\n-      allocatable = sym->ts.u.derived->components->attr.allocatable;\n+      dimension = CLASS_DATA (sym)->attr.dimension;\n+      pointer = CLASS_DATA (sym)->attr.pointer;\n+      allocatable = CLASS_DATA (sym)->attr.allocatable;\n     }\n   else\n     {\n@@ -2061,8 +2059,8 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \n \tif (comp->ts.type == BT_CLASS)\n \t  {\n-\t    pointer = comp->ts.u.derived->components->attr.pointer;\n-\t    allocatable = comp->ts.u.derived->components->attr.allocatable;\n+\t    pointer = CLASS_DATA (comp)->attr.pointer;\n+\t    allocatable = CLASS_DATA (comp)->attr.allocatable;\n \t  }\n \telse\n \t  {\n@@ -2110,9 +2108,9 @@ gfc_expr_attr (gfc_expr *e)\n \t  attr = sym->attr;\n \t  if (sym->ts.type == BT_CLASS)\n \t    {\n-\t      attr.dimension = sym->ts.u.derived->components->attr.dimension;\n-\t      attr.pointer = sym->ts.u.derived->components->attr.pointer;\n-\t      attr.allocatable = sym->ts.u.derived->components->attr.allocatable;\n+\t      attr.dimension = CLASS_DATA (sym)->attr.dimension;\n+\t      attr.pointer = CLASS_DATA (sym)->attr.pointer;\n+\t      attr.allocatable = CLASS_DATA (sym)->attr.allocatable;\n \t    }\n \t}\n       else"}, {"sha": "48bb6187c1712cbc7324ff2400d663328c9cac42", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -905,8 +905,8 @@ resolve_structure_cons (gfc_expr *expr)\n \t  && !(comp->attr.pointer || comp->attr.allocatable\n \t       || comp->attr.proc_pointer\n \t       || (comp->ts.type == BT_CLASS\n-\t\t   && (comp->ts.u.derived->components->attr.pointer\n-\t\t       || comp->ts.u.derived->components->attr.allocatable))))\n+\t\t   && (CLASS_DATA (comp)->attr.pointer\n+\t\t       || CLASS_DATA (comp)->attr.allocatable))))\n \t{\n \t  t = FAILURE;\n \t  gfc_error (\"The NULL in the derived type constructor at %L is \"\n@@ -4131,7 +4131,7 @@ find_array_spec (gfc_expr *e)\n   gfc_ref *ref;\n \n   if (e->symtree->n.sym->ts.type == BT_CLASS)\n-    as = e->symtree->n.sym->ts.u.derived->components->as;\n+    as = CLASS_DATA (e->symtree->n.sym)->as;\n   else\n     as = e->symtree->n.sym->as;\n   derived = NULL;\n@@ -6004,8 +6004,8 @@ resolve_deallocate_expr (gfc_expr *e)\n \n   if (sym->ts.type == BT_CLASS)\n     {\n-      allocatable = sym->ts.u.derived->components->attr.allocatable;\n-      pointer = sym->ts.u.derived->components->attr.pointer;\n+      allocatable = CLASS_DATA (sym)->attr.allocatable;\n+      pointer = CLASS_DATA (sym)->attr.pointer;\n     }\n   else\n     {\n@@ -6028,8 +6028,8 @@ resolve_deallocate_expr (gfc_expr *e)\n \t  c = ref->u.c.component;\n \t  if (c->ts.type == BT_CLASS)\n \t    {\n-\t      allocatable = c->ts.u.derived->components->attr.allocatable;\n-\t      pointer = c->ts.u.derived->components->attr.pointer;\n+\t      allocatable = CLASS_DATA (c)->attr.allocatable;\n+\t      pointer = CLASS_DATA (c)->attr.pointer;\n \t    }\n \t  else\n \t    {\n@@ -6224,11 +6224,11 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n     {\n       if (sym->ts.type == BT_CLASS)\n \t{\n-\t  allocatable = sym->ts.u.derived->components->attr.allocatable;\n-\t  pointer = sym->ts.u.derived->components->attr.pointer;\n-\t  dimension = sym->ts.u.derived->components->attr.dimension;\n-\t  codimension = sym->ts.u.derived->components->attr.codimension;\n-\t  is_abstract = sym->ts.u.derived->components->attr.abstract;\n+\t  allocatable = CLASS_DATA (sym)->attr.allocatable;\n+\t  pointer = CLASS_DATA (sym)->attr.pointer;\n+\t  dimension = CLASS_DATA (sym)->attr.dimension;\n+\t  codimension = CLASS_DATA (sym)->attr.codimension;\n+\t  is_abstract = CLASS_DATA (sym)->attr.abstract;\n \t}\n       else\n \t{\n@@ -6262,11 +6262,11 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\tc = ref->u.c.component;\n \t\tif (c->ts.type == BT_CLASS)\n \t\t  {\n-\t\t    allocatable = c->ts.u.derived->components->attr.allocatable;\n-\t\t    pointer = c->ts.u.derived->components->attr.pointer;\n-\t\t    dimension = c->ts.u.derived->components->attr.dimension;\n-\t\t    codimension = c->ts.u.derived->components->attr.codimension;\n-\t\t    is_abstract = c->ts.u.derived->components->attr.abstract;\n+\t\t    allocatable = CLASS_DATA (c)->attr.allocatable;\n+\t\t    pointer = CLASS_DATA (c)->attr.pointer;\n+\t\t    dimension = CLASS_DATA (c)->attr.dimension;\n+\t\t    codimension = CLASS_DATA (c)->attr.codimension;\n+\t\t    is_abstract = CLASS_DATA (c)->attr.abstract;\n \t\t  }\n \t\telse\n \t\t  {\n@@ -6349,7 +6349,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t}\n       else if (e->ts.type == BT_CLASS\n \t       && ((code->ext.alloc.ts.type == BT_UNKNOWN\n-\t\t    && (init_e = gfc_default_initializer (&e->ts.u.derived->components->ts)))\n+\t\t    && (init_e = gfc_default_initializer (&CLASS_DATA (e)->ts)))\n \t\t   || (code->ext.alloc.ts.type == BT_DERIVED\n \t\t       && (init_e = gfc_default_initializer (&code->ext.alloc.ts)))))\n \t{\n@@ -7153,10 +7153,10 @@ resolve_select_type (gfc_code *code)\n     {\n       if (code->expr1->symtree->n.sym->attr.untyped)\n \tcode->expr1->symtree->n.sym->ts = code->expr2->ts;\n-      selector_type = code->expr2->ts.u.derived->components->ts.u.derived;\n+      selector_type = CLASS_DATA (code->expr2)->ts.u.derived;\n     }\n   else\n-    selector_type = code->expr1->ts.u.derived->components->ts.u.derived;\n+    selector_type = CLASS_DATA (code->expr1)->ts.u.derived;\n \n   /* Loop over TYPE IS / CLASS IS cases.  */\n   for (body = code->block; body; body = body->block)\n@@ -9185,11 +9185,11 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n   if (sym->ts.type == BT_CLASS && !(sym->result && sym->result != sym))\n     {\n       /* F03:C502.  */\n-      if (!gfc_type_is_extensible (sym->ts.u.derived->components->ts.u.derived))\n+      if (!gfc_type_is_extensible (CLASS_DATA (sym)->ts.u.derived))\n \t{\n \t  gfc_error (\"Type '%s' of CLASS variable '%s' at %L is not extensible\",\n-\t\t     sym->ts.u.derived->components->ts.u.derived->name,\n-\t\t     sym->name, &sym->declared_at);\n+\t\t     CLASS_DATA (sym)->ts.u.derived->name, sym->name,\n+\t\t     &sym->declared_at);\n \t  return FAILURE;\n \t}\n \n@@ -10424,7 +10424,7 @@ resolve_typebound_procedure (gfc_symtree* stree)\n \t  goto error;\n \t}\n \n-      if (me_arg->ts.u.derived->components->ts.u.derived\n+      if (CLASS_DATA (me_arg)->ts.u.derived\n \t  != resolve_bindings_derived)\n \t{\n \t  gfc_error (\"Argument '%s' of '%s' with PASS(%s) at %L must be of\"\n@@ -10434,20 +10434,19 @@ resolve_typebound_procedure (gfc_symtree* stree)\n \t}\n   \n       gcc_assert (me_arg->ts.type == BT_CLASS);\n-      if (me_arg->ts.u.derived->components->as\n-\t  && me_arg->ts.u.derived->components->as->rank > 0)\n+      if (CLASS_DATA (me_arg)->as && CLASS_DATA (me_arg)->as->rank > 0)\n \t{\n \t  gfc_error (\"Passed-object dummy argument of '%s' at %L must be\"\n \t\t     \" scalar\", proc->name, &where);\n \t  goto error;\n \t}\n-      if (me_arg->ts.u.derived->components->attr.allocatable)\n+      if (CLASS_DATA (me_arg)->attr.allocatable)\n \t{\n \t  gfc_error (\"Passed-object dummy argument of '%s' at %L must not\"\n \t\t     \" be ALLOCATABLE\", proc->name, &where);\n \t  goto error;\n \t}\n-      if (me_arg->ts.u.derived->components->attr.class_pointer)\n+      if (CLASS_DATA (me_arg)->attr.class_pointer)\n \t{\n \t  gfc_error (\"Passed-object dummy argument of '%s' at %L must not\"\n \t\t     \" be POINTER\", proc->name, &where);\n@@ -10633,14 +10632,11 @@ resolve_fl_derived (gfc_symbol *sym)\n   if (sym->attr.is_class && sym->ts.u.derived == NULL)\n     {\n       /* Fix up incomplete CLASS symbols.  */\n-      gfc_component *data;\n-      gfc_component *vptr;\n-      gfc_symbol *vtab;\n-      data = gfc_find_component (sym, \"$data\", true, true);\n-      vptr = gfc_find_component (sym, \"$vptr\", true, true);\n+      gfc_component *data = gfc_find_component (sym, \"$data\", true, true);\n+      gfc_component *vptr = gfc_find_component (sym, \"$vptr\", true, true);\n       if (vptr->ts.u.derived == NULL)\n \t{\n-\t  vtab = gfc_find_derived_vtab (data->ts.u.derived, false);\n+\t  gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived, false);\n \t  gcc_assert (vtab);\n \t  vptr->ts.u.derived = vtab->ts.u.derived;\n \t}\n@@ -10834,7 +10830,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  if ((me_arg->ts.type != BT_DERIVED && me_arg->ts.type != BT_CLASS)\n \t      || (me_arg->ts.type == BT_DERIVED && me_arg->ts.u.derived != sym)\n \t      || (me_arg->ts.type == BT_CLASS\n-\t\t  && me_arg->ts.u.derived->components->ts.u.derived != sym))\n+\t\t  && CLASS_DATA (me_arg)->ts.u.derived != sym))\n \t    {\n \t      gfc_error (\"Argument '%s' of '%s' with PASS(%s) at %L must be of\"\n \t\t\t \" the derived type '%s'\", me_arg->name, c->name,\n@@ -10947,9 +10943,9 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n-      if (c->ts.type == BT_CLASS && c->ts.u.derived->components->attr.pointer\n-\t  && c->ts.u.derived->components->ts.u.derived->components == NULL\n-\t  && !c->ts.u.derived->components->ts.u.derived->attr.zero_comp)\n+      if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.pointer\n+\t  && CLASS_DATA (c)->ts.u.derived->components == NULL\n+\t  && !CLASS_DATA (c)->ts.u.derived->attr.zero_comp)\n \t{\n \t  gfc_error (\"The pointer component '%s' of '%s' at %L is a type \"\n \t\t     \"that has not been declared\", c->name, sym->name,\n@@ -10959,8 +10955,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \n       /* C437.  */\n       if (c->ts.type == BT_CLASS\n-\t  && !(c->ts.u.derived->components->attr.pointer\n-\t       || c->ts.u.derived->components->attr.allocatable))\n+\t  && !(CLASS_DATA (c)->attr.pointer || CLASS_DATA (c)->attr.allocatable))\n \t{\n \t  gfc_error (\"Component '%s' with CLASS at %L must be allocatable \"\n \t\t     \"or pointer\", c->name, &c->loc);"}, {"sha": "b436de5e2af822c65fb865c737b24ef3a06e6ad2", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -4661,8 +4661,6 @@ gfc_type_is_extension_of (gfc_symbol *t1, gfc_symbol *t2)\n bool\n gfc_type_compatible (gfc_typespec *ts1, gfc_typespec *ts2)\n {\n-  gfc_component *cmp1, *cmp2;\n-\n   bool is_class1 = (ts1->type == BT_CLASS);\n   bool is_class2 = (ts2->type == BT_CLASS);\n   bool is_derived1 = (ts1->type == BT_DERIVED);\n@@ -4674,28 +4672,12 @@ gfc_type_compatible (gfc_typespec *ts1, gfc_typespec *ts2)\n   if (is_derived1 && is_derived2)\n     return gfc_compare_derived_types (ts1->u.derived, ts2->u.derived);\n \n-  cmp1 = cmp2 = NULL;\n-\n-  if (is_class1)\n-    {\n-      cmp1 = gfc_find_component (ts1->u.derived, \"$data\", true, false);\n-      if (cmp1 == NULL)\n-\treturn 0;\n-    }\n-\n-  if (is_class2)\n-    {\n-      cmp2 = gfc_find_component (ts2->u.derived, \"$data\", true, false);\n-      if (cmp2 == NULL)\n-\treturn 0;\n-    }\n-\n   if (is_class1 && is_derived2)\n-    return gfc_type_is_extension_of (cmp1->ts.u.derived, ts2->u.derived);\n-\n+    return gfc_type_is_extension_of (ts1->u.derived->components->ts.u.derived,\n+\t\t\t\t     ts2->u.derived);\n   else if (is_class1 && is_class2)\n-    return gfc_type_is_extension_of (cmp1->ts.u.derived, cmp2->ts.u.derived);\n-\n+    return gfc_type_is_extension_of (ts1->u.derived->components->ts.u.derived,\n+\t\t\t\t     ts2->u.derived->components->ts.u.derived);\n   else\n     return 0;\n }"}, {"sha": "7d7b3a36839390e5933c0f8f5ade98a6d6b13904", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -6079,14 +6079,13 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n-\t  else if (c->ts.type == BT_CLASS\n-\t\t   && c->ts.u.derived->components->attr.allocatable)\n+\t  else if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n \t    {\n \t      /* Allocatable scalar CLASS components.  */\n \t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n \t      \n \t      /* Add reference to '$data' component.  */\n-\t      tmp = c->ts.u.derived->components->backend_decl;\n+\t      tmp = CLASS_DATA (c)->backend_decl;\n \t      comp = fold_build3 (COMPONENT_REF, TREE_TYPE (tmp),\n \t\t\t\t  comp, tmp, NULL_TREE);\n \n@@ -6116,13 +6115,12 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n-\t  else if (c->ts.type == BT_CLASS\n-\t\t   && c->ts.u.derived->components->attr.allocatable)\n+\t  else if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n \t    {\n \t      /* Allocatable scalar CLASS components.  */\n \t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n \t      /* Add reference to '$data' component.  */\n-\t      tmp = c->ts.u.derived->components->backend_decl;\n+\t      tmp = CLASS_DATA (c)->backend_decl;\n \t      comp = fold_build3 (COMPONENT_REF, TREE_TYPE (tmp),\n \t\t\t\t  comp, tmp, NULL_TREE);\n \t      tmp = fold_build2 (MODIFY_EXPR, void_type_node, comp,"}, {"sha": "224474aeff211553993265bad0341e20e999d789", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -1074,8 +1074,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   /* Make sure that the vtab for the declared type is completed.  */\n   if (sym->ts.type == BT_CLASS)\n     {\n-      gfc_component *c = gfc_find_component (sym->ts.u.derived,\n-\t\t\t\t\t     \"$data\", true, true);\n+      gfc_component *c = CLASS_DATA (sym);\n       if (!c->ts.u.derived->backend_decl)\n \tgfc_find_derived_vtab (c->ts.u.derived, true);\n     }\n@@ -1221,8 +1220,8 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   /* Remember this variable for allocation/cleanup.  */\n   if (sym->attr.dimension || sym->attr.allocatable\n       || (sym->ts.type == BT_CLASS &&\n-\t  (sym->ts.u.derived->components->attr.dimension\n-\t   || sym->ts.u.derived->components->attr.allocatable))\n+\t  (CLASS_DATA (sym)->attr.dimension\n+\t   || CLASS_DATA (sym)->attr.allocatable))\n       || (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.alloc_comp)\n       /* This applies a derived type default initializer.  */\n       || (sym->ts.type == BT_DERIVED\n@@ -3272,7 +3271,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t}\n       else if (sym->attr.allocatable\n \t       || (sym->ts.type == BT_CLASS\n-\t\t   && sym->ts.u.derived->components->attr.allocatable))\n+\t\t   && CLASS_DATA (sym)->attr.allocatable))\n \t{\n \t  if (!sym->attr.save)\n \t    {"}, {"sha": "37b577f2cc4472c77dc955bc52437609c366cb3d", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08eda1619ac02b31ff4bcf8582a94237424132/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=7a08eda1619ac02b31ff4bcf8582a94237424132", "patch": "@@ -4285,7 +4285,7 @@ gfc_trans_allocate (gfc_code * code)\n \t      else if (code->ext.alloc.ts.type == BT_DERIVED)\n \t\tts = &code->ext.alloc.ts;\n \t      else if (expr->ts.type == BT_CLASS)\n-\t\tts = &expr->ts.u.derived->components->ts;\n+\t\tts = &CLASS_DATA (expr)->ts;\n \t      else\n \t\tts = &expr->ts;\n "}]}