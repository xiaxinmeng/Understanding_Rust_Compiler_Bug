{"sha": "e4685bc8caf5da2142eabeda9536567b1ea7bc12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2ODViYzhjYWY1ZGEyMTQyZWFiZWRhOTUzNjU2N2IxZWE3YmMxMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-09-04T21:11:23Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-09-04T21:11:23Z"}, "message": "Change the types of arguments and return values for several functions from rtx to rtx_insn *\n\ngcc/ChangeLog:\n\n2014-09-04  Trevor Saunders  <tsaunders@mozilla.com>\n\n\t* emit-rtl.c (get_first_nonnote_insn): Return rtx_insn * instead of\n\trtx.\n\t(get_last_nonnote_insn): Likewise.\n\t(next_nonnote_insn_bb): Take rtx_insn * instead of rtx.\n\t* resource.c (find_basic_block): Likewise.\n\t* rtl.h: Adjust.\n\t* rtlanal.c (keep_with_call_p): Take const rtx_insn * instead of\n\tconst_rtx.\n\nFrom-SVN: r214922", "tree": {"sha": "041af499cfb38c8d2e0f9c0e336413c18a5dd923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041af499cfb38c8d2e0f9c0e336413c18a5dd923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4685bc8caf5da2142eabeda9536567b1ea7bc12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4685bc8caf5da2142eabeda9536567b1ea7bc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4685bc8caf5da2142eabeda9536567b1ea7bc12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4685bc8caf5da2142eabeda9536567b1ea7bc12/comments", "author": null, "committer": null, "parents": [{"sha": "b28e4e44278bfe2872cc8ca9b4dc623c5df6523d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28e4e44278bfe2872cc8ca9b4dc623c5df6523d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b28e4e44278bfe2872cc8ca9b4dc623c5df6523d"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "62d056266f37e43590d77977da22d9e03cbc137a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4685bc8caf5da2142eabeda9536567b1ea7bc12", "patch": "@@ -1,3 +1,14 @@\n+2014-09-04  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* emit-rtl.c (get_first_nonnote_insn): Return rtx_insn * instead of\n+\trtx.\n+\t(get_last_nonnote_insn): Likewise.\n+\t(next_nonnote_insn_bb): Take rtx_insn * instead of rtx.\n+\t* resource.c (find_basic_block): Likewise.\n+\t* rtl.h: Adjust.\n+\t* rtlanal.c (keep_with_call_p): Take const rtx_insn * instead of\n+\tconst_rtx.\n+\n 2014-09-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* genattr.c (main): Within the prototype of insn_latency written"}, {"sha": "fdd2f94a0bb4048fa60e4a2a8b54ad50efcf5f8a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e4685bc8caf5da2142eabeda9536567b1ea7bc12", "patch": "@@ -3141,7 +3141,7 @@ get_last_insn_anywhere (void)\n /* Return the first nonnote insn emitted in current sequence or current\n    function.  This routine looks inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n get_first_nonnote_insn (void)\n {\n   rtx_insn *insn = get_insns ();\n@@ -3167,7 +3167,7 @@ get_first_nonnote_insn (void)\n /* Return the last nonnote insn emitted in current sequence or current\n    function.  This routine looks inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n get_last_nonnote_insn (void)\n {\n   rtx_insn *insn = get_last_insn ();\n@@ -3267,10 +3267,8 @@ next_nonnote_insn (rtx uncast_insn)\n    look inside SEQUENCEs.  */\n \n rtx_insn *\n-next_nonnote_insn_bb (rtx uncast_insn)\n+next_nonnote_insn_bb (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n-\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);"}, {"sha": "55288317fbc4cbc936c6809947e29de3e5ec00bc", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=e4685bc8caf5da2142eabeda9536567b1ea7bc12", "patch": "@@ -78,7 +78,7 @@ static HARD_REG_SET current_live_regs;\n static HARD_REG_SET pending_dead_regs;\n \f\n static void update_live_status (rtx, const_rtx, void *);\n-static int find_basic_block (rtx, int);\n+static int find_basic_block (rtx_insn *, int);\n static rtx_insn *next_insn_no_annul (rtx_insn *);\n static rtx_insn *find_dead_or_set_registers (rtx_insn *, struct resources*,\n \t\t\t\t\t     rtx *, int, struct resources,\n@@ -132,7 +132,7 @@ update_live_status (rtx dest, const_rtx x, void *data ATTRIBUTE_UNUSED)\n    correct.  */\n \n static int\n-find_basic_block (rtx insn, int search_limit)\n+find_basic_block (rtx_insn *insn, int search_limit)\n {\n   /* Scan backwards to the previous BARRIER.  Then see if we can find a\n      label that starts a basic block.  Return the basic block number.  */"}, {"sha": "70af1cfa90ffecee711e5e6ec24505fb98e827bb", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e4685bc8caf5da2142eabeda9536567b1ea7bc12", "patch": "@@ -2530,8 +2530,8 @@ extern rtx convert_memory_address_addr_space (enum machine_mode, rtx,\n \tconvert_memory_address_addr_space ((to_mode), (x), ADDR_SPACE_GENERIC)\n extern const char *get_insn_name (int);\n extern rtx_insn *get_last_insn_anywhere (void);\n-extern rtx get_first_nonnote_insn (void);\n-extern rtx get_last_nonnote_insn (void);\n+extern rtx_insn *get_first_nonnote_insn (void);\n+extern rtx_insn *get_last_nonnote_insn (void);\n extern void start_sequence (void);\n extern void push_to_sequence (rtx_insn *);\n extern void push_to_sequence2 (rtx_insn *, rtx_insn *);\n@@ -2625,7 +2625,7 @@ extern rtx_insn *next_insn (rtx_insn *);\n extern rtx_insn *prev_nonnote_insn (rtx);\n extern rtx_insn *prev_nonnote_insn_bb (rtx);\n extern rtx_insn *next_nonnote_insn (rtx);\n-extern rtx_insn *next_nonnote_insn_bb (rtx);\n+extern rtx_insn *next_nonnote_insn_bb (rtx_insn *);\n extern rtx_insn *prev_nondebug_insn (rtx);\n extern rtx_insn *next_nondebug_insn (rtx);\n extern rtx_insn *prev_nonnote_nondebug_insn (rtx);\n@@ -2830,7 +2830,7 @@ extern void remove_node_from_expr_list (const_rtx, rtx_expr_list **);\n extern void remove_node_from_insn_list (const rtx_insn *, rtx_insn_list **);\n extern int loc_mentioned_in_p (rtx *, const_rtx);\n extern rtx_insn *find_first_parameter_load (rtx_insn *, rtx_insn *);\n-extern bool keep_with_call_p (const_rtx);\n+extern bool keep_with_call_p (const rtx_insn *);\n extern bool label_is_jump_target_p (const_rtx, const rtx_insn *);\n extern int insn_rtx_cost (rtx, bool);\n "}, {"sha": "9b554e228fd1b4f8c9d72c745b3dafb8ae3f59a3", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4685bc8caf5da2142eabeda9536567b1ea7bc12/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e4685bc8caf5da2142eabeda9536567b1ea7bc12", "patch": "@@ -3800,7 +3800,7 @@ find_first_parameter_load (rtx_insn *call_insn, rtx_insn *boundary)\n    call instruction.  */\n \n bool\n-keep_with_call_p (const_rtx insn)\n+keep_with_call_p (const rtx_insn *insn)\n {\n   rtx set;\n \n@@ -3824,7 +3824,8 @@ keep_with_call_p (const_rtx insn)\n \t  /* This CONST_CAST is okay because next_nonnote_insn just\n \t     returns its argument and we assign it to a const_rtx\n \t     variable.  */\n-\t  const rtx_insn *i2 = next_nonnote_insn (CONST_CAST_RTX (insn));\n+\t  const rtx_insn *i2\n+\t    = next_nonnote_insn (const_cast<rtx_insn *> (insn));\n \t  if (i2 && keep_with_call_p (i2))\n \t    return true;\n \t}"}]}