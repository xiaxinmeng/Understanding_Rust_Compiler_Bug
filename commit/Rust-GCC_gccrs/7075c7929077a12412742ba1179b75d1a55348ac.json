{"sha": "7075c7929077a12412742ba1179b75d1a55348ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3NWM3OTI5MDc3YTEyNDEyNzQyYmExMTc5Yjc1ZDFhNTUzNDhhYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-03-20T11:39:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-03-20T11:39:39Z"}, "message": "sparc.c (sparc_do_work_around_errata): Implement work around for store forwarding issue in the FPU on the UT699.\n\n\t* config/sparc/sparc.c (sparc_do_work_around_errata): Implement work\n\taround for store forwarding issue in the FPU on the UT699.\n\t* config/sparc/sparc.md (in_branch_delay): Return false for single FP\n\tloads and operations if -mfix-ut699 is specified.\n\t(divtf3_hq): Tweak attribute.\n\t(sqrttf2_hq): Likewise.\n\nFrom-SVN: r208695", "tree": {"sha": "35b10b8b8c0e0de4cedb4ccb7847fe24d45b3e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b10b8b8c0e0de4cedb4ccb7847fe24d45b3e83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7075c7929077a12412742ba1179b75d1a55348ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7075c7929077a12412742ba1179b75d1a55348ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7075c7929077a12412742ba1179b75d1a55348ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7075c7929077a12412742ba1179b75d1a55348ac/comments", "author": null, "committer": null, "parents": [{"sha": "9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee5337dd54630e6f0b2d98dc104a8c05d24384d"}], "stats": {"total": 117, "additions": 115, "deletions": 2}, "files": [{"sha": "c35b8245c828fa0e48d169fb8ef65940b2bfa895", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7075c7929077a12412742ba1179b75d1a55348ac", "patch": "@@ -1,3 +1,12 @@\n+2014-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_do_work_around_errata): Implement work\n+\taround for store forwarding issue in the FPU on the UT699.\n+\t* config/sparc/sparc.md (in_branch_delay): Return false for single FP\n+\tloads and operations if -mfix-ut699 is specified.\n+\t(divtf3_hq): Tweak attribute.\n+\t(sqrttf2_hq): Likewise.\n+\n 2014-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* calls.c (store_one_arg): Remove incorrect const qualification on the"}, {"sha": "f52b9761a1aedc8f8b3bc6534c8e43cdf2c6a107", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7075c7929077a12412742ba1179b75d1a55348ac", "patch": "@@ -1012,6 +1012,106 @@ sparc_do_work_around_errata (void)\n \t    }\n \t}\n \n+      /* Look for a single-word load/operation into an FP register.  */\n+      else if (sparc_fix_ut699\n+\t       && NONJUMP_INSN_P (insn)\n+\t       && (set = single_set (insn)) != NULL_RTX\n+\t       && GET_MODE_SIZE (GET_MODE (SET_SRC (set))) == 4\n+\t       && REG_P (SET_DEST (set))\n+\t       && REGNO (SET_DEST (set)) > 31)\n+\t{\n+\t  /* Number of instructions in the problematic window.  */\n+\t  const int n_insns = 4;\n+\t  /* The problematic combination is with the sibling FP register.  */\n+\t  const unsigned int x = REGNO (SET_DEST (set));\n+\t  const unsigned int y = x ^ 1;\n+\t  rtx after;\n+\t  int i;\n+\n+\t  next = next_active_insn (insn);\n+\t  if (!next)\n+\t    break;\n+\t  /* If the insn is a branch, then it cannot be problematic.  */\n+\t  if (!NONJUMP_INSN_P (next) || GET_CODE (PATTERN (next)) == SEQUENCE)\n+\t    continue;\n+\n+\t  /* Look for a second load/operation into the sibling FP register.  */\n+\t  if (!((set = single_set (next)) != NULL_RTX\n+\t\t&& GET_MODE_SIZE (GET_MODE (SET_SRC (set))) == 4\n+\t\t&& REG_P (SET_DEST (set))\n+\t\t&& REGNO (SET_DEST (set)) == y))\n+\t    continue;\n+\n+\t  /* Look for a (possible) store from the FP register in the next N\n+\t     instructions, but bail out if it is again modified or if there\n+\t     is a store from the sibling FP register before this store.  */\n+\t  for (after = next, i = 0; i < n_insns; i++)\n+\t    {\n+\t      bool branch_p;\n+\n+\t      after = next_active_insn (after);\n+\t      if (!after)\n+\t\tbreak;\n+\n+\t      /* This is a branch with an empty delay slot.  */\n+\t      if (!NONJUMP_INSN_P (after))\n+\t\t{\n+\t\t  if (++i == n_insns)\n+\t\t    break;\n+\t\t  branch_p = true;\n+\t\t  after = NULL_RTX;\n+\t\t}\n+\t      /* This is a branch with a filled delay slot.  */\n+\t      else if (GET_CODE (PATTERN (after)) == SEQUENCE)\n+\t\t{\n+\t\t  if (++i == n_insns)\n+\t\t    break;\n+\t\t  branch_p = true;\n+\t\t  after = XVECEXP (PATTERN (after), 0, 1);\n+\t\t}\n+\t      /* This is a regular instruction.  */\n+\t      else\n+\t\tbranch_p = false;\n+\n+\t      if (after && (set = single_set (after)) != NULL_RTX)\n+\t\t{\n+\t\t  const rtx src = SET_SRC (set);\n+\t\t  const rtx dest = SET_DEST (set);\n+\t\t  const unsigned int size = GET_MODE_SIZE (GET_MODE (dest));\n+\n+\t\t  /* If the FP register is again modified before the store,\n+\t\t     then the store isn't affected.  */\n+\t\t  if (REG_P (dest)\n+\t\t      && (REGNO (dest) == x\n+\t\t\t  || (REGNO (dest) == y && size == 8)))\n+\t\t    break;\n+\n+\t\t  if (MEM_P (dest) && REG_P (src))\n+\t\t    {\n+\t\t      /* If there is a store from the sibling FP register\n+\t\t\t before the store, then the store is not affected.  */\n+\t\t      if (REGNO (src) == y || (REGNO (src) == x && size == 8))\n+\t\t\tbreak;\n+\n+\t\t      /* Otherwise, the store is affected.  */\n+\t\t      if (REGNO (src) == x && size == 4)\n+\t\t\t{\n+\t\t\t  insert_nop = true;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\n+\t      /* If we have a branch in the first M instructions, then we\n+\t\t cannot see the (M+2)th instruction so we play safe.  */\n+\t      if (branch_p && i <= (n_insns - 2))\n+\t\t{\n+\t\t  insert_nop = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+\n       else\n \tnext = NEXT_INSN (insn);\n "}, {"sha": "8b6c647fc00861a6f58a57bfc2adfb28e02e141b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7075c7929077a12412742ba1179b75d1a55348ac/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7075c7929077a12412742ba1179b75d1a55348ac", "patch": "@@ -462,6 +462,10 @@\n \t   (const_string \"false\")\n \t (and (eq_attr \"fix_ut699\" \"true\") (eq_attr \"type\" \"load,sload\"))\n \t   (const_string \"false\")\n+\t (and (eq_attr \"fix_ut699\" \"true\")\n+\t      (and (eq_attr \"type\" \"fpload,fp,fpmove,fpmul,fpdivs,fpsqrts\")\n+\t\t   (eq_attr \"fptype\" \"single\")))\n+\t   (const_string \"false\")\n \t (eq_attr \"length\" \"1\")\n \t   (const_string \"true\")\n \t] (const_string \"false\")))\n@@ -5513,7 +5517,7 @@\n \t\t(match_operand:TF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fdivq\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fpdivd\")])\n+  [(set_attr \"type\" \"fpdivs\")])\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n@@ -5744,7 +5748,7 @@\n \t(sqrt:TF (match_operand:TF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fsqrtq\\t%1, %0\"\n-  [(set_attr \"type\" \"fpsqrtd\")])\n+  [(set_attr \"type\" \"fpsqrts\")])\n \n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")"}]}