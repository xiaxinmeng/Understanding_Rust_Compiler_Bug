{"sha": "4409152a4acaec5b58a93996088d0df9aaa779b8", "node_id": "C_kwDOANBUbNoAKDQ0MDkxNTJhNGFjYWVjNWI1OGE5Mzk5NjA4OGQwZGY5YWFhNzc5Yjg", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-07T18:36:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-08T00:04:01Z"}, "message": "analyzer: implement __analyzer_dump_escaped\n\nPR analyzer/103546 seems to involve an issue in how the analyzer\ntracks which decls have escaped, so this patch adds a way to directly\ntest this from DejaGnu.\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc (cmp_decls): New.\n\t(cmp_decls_ptr_ptr): New.\n\t(region_model::impl_call_analyzer_dump_escaped): New.\n\t* region-model.cc (region_model::on_stmt_pre): Handle\n\t__analyzer_dump_escaped.\n\t* region-model.h (region_model::impl_call_analyzer_dump_escaped):\n\tNew decl.\n\t* store.h (binding_cluster::get_base_region): New accessor.\n\ngcc/ChangeLog:\n\t* doc/analyzer.texi\n\t(Special Functions for Debugging the Analyzer): Document\n\t__analyzer_dump_escaped.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_dump_escaped): New\n\tdecl.\n\t* gcc.dg/analyzer/escaping-1.c: New test.", "tree": {"sha": "53dd517ebdc4f47e9ef3dce3bfa1f55a30818042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53dd517ebdc4f47e9ef3dce3bfa1f55a30818042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4409152a4acaec5b58a93996088d0df9aaa779b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4409152a4acaec5b58a93996088d0df9aaa779b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4409152a4acaec5b58a93996088d0df9aaa779b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4409152a4acaec5b58a93996088d0df9aaa779b8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b7d28a5987e74232b7f054849f8bd8ccc7e7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b7d28a5987e74232b7f054849f8bd8ccc7e7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b7d28a5987e74232b7f054849f8bd8ccc7e7de"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "c20058ec778df86b554fa281e2666d7f4f0ab75e", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -264,6 +264,75 @@ region_model::impl_call_analyzer_dump_capacity (const gcall *call,\n   warning_at (call->location, 0, \"capacity: %qs\", desc.m_buffer);\n }\n \n+/* Compare D1 and D2 using their names, and then IDs to order them.  */\n+\n+static int\n+cmp_decls (tree d1, tree d2)\n+{\n+  gcc_assert (DECL_P (d1));\n+  gcc_assert (DECL_P (d2));\n+  if (DECL_NAME (d1) && DECL_NAME (d2))\n+    if (int cmp = strcmp (IDENTIFIER_POINTER (DECL_NAME (d1)),\n+\t\t\t  IDENTIFIER_POINTER (DECL_NAME (d2))))\n+      return cmp;\n+  return (int)DECL_UID (d1) - (int)DECL_UID (d2);\n+}\n+\n+/* Comparator for use by vec<tree>::qsort,\n+   using their names, and then IDs to order them.  */\n+\n+static int\n+cmp_decls_ptr_ptr (const void *p1, const void *p2)\n+{\n+  tree const *d1 = (tree const *)p1;\n+  tree const *d2 = (tree const *)p2;\n+\n+  return cmp_decls (*d1, *d2);\n+}\n+\n+/* Handle a call to \"__analyzer_dump_escaped\".\n+\n+   Emit a warning giving the number of decls that have escaped, followed\n+   by a comma-separated list of their names, in alphabetical order.\n+\n+   This is for use when debugging, and may be of use in DejaGnu tests.  */\n+\n+void\n+region_model::impl_call_analyzer_dump_escaped (const gcall *call)\n+{\n+  auto_vec<tree> escaped_decls;\n+  for (auto iter : m_store)\n+    {\n+      const binding_cluster *c = iter.second;\n+      if (!c->escaped_p ())\n+\tcontinue;\n+      if (tree decl = c->get_base_region ()->maybe_get_decl ())\n+\tescaped_decls.safe_push (decl);\n+    }\n+\n+  /* Sort them into deterministic order; alphabetical is\n+     probably most user-friendly.  */\n+  escaped_decls.qsort (cmp_decls_ptr_ptr);\n+\n+  pretty_printer pp;\n+  pp_format_decoder (&pp) = default_tree_printer;\n+  pp_show_color (&pp) = pp_show_color (global_dc->printer);\n+  bool first = true;\n+  for (auto iter : escaped_decls)\n+    {\n+      if (first)\n+\tfirst = false;\n+      else\n+\tpp_string (&pp, \", \");\n+      pp_printf (&pp, \"%qD\", iter);\n+    }\n+  /* Print the number to make it easier to write DejaGnu tests for\n+     the \"nothing has escaped\" case.  */\n+  warning_at (call->location, 0, \"escaped: %i: %s\",\n+\t      escaped_decls.length (),\n+\t      pp_formatted_text (&pp));\n+}\n+\n /* Handle a call to \"__analyzer_eval\" by evaluating the input\n    and dumping as a dummy warning, so that test cases can use\n    dg-warning to validate the result (and so unexpected warnings will"}, {"sha": "cb86d79c99dab3b500cb17c6e078fa0fbbadb0f6", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -999,6 +999,8 @@ region_model::on_stmt_pre (const gimple *stmt,\n \t  impl_call_analyzer_describe (call, ctxt);\n \telse if (is_special_named_call_p (call, \"__analyzer_dump_capacity\", 1))\n \t  impl_call_analyzer_dump_capacity (call, ctxt);\n+\telse if (is_special_named_call_p (call, \"__analyzer_dump_escaped\", 0))\n+\t  impl_call_analyzer_dump_escaped (call);\n \telse if (is_special_named_call_p (call, \"__analyzer_dump_path\", 0))\n \t  {\n \t    /* Handle the builtin \"__analyzer_dump_path\" by queuing a"}, {"sha": "669f1c748cec2befaa4e40bba8d9f06e0f6ff8d8", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -573,6 +573,7 @@ class region_model\n \t\t\t\t    region_model_context *ctxt);\n   void impl_call_analyzer_dump_capacity (const gcall *call,\n \t\t\t\t\t region_model_context *ctxt);\n+  void impl_call_analyzer_dump_escaped (const gcall *call);\n   void impl_call_analyzer_eval (const gcall *call,\n \t\t\t\tregion_model_context *ctxt);\n   void impl_call_builtin_expect (const call_details &cd);"}, {"sha": "f30b6bc8b2e77a71ada56dcee929409e531ff2aa", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -559,6 +559,8 @@ class binding_cluster\n \n   bool symbolic_p () const;\n \n+  const region *get_base_region () const { return m_base_region; }\n+\n   void dump_to_pp (pretty_printer *pp, bool simple, bool multiline) const;\n   void dump (bool simple) const;\n "}, {"sha": "06eb98fe4d3065aa07f4f596c70731b40b5e20b1", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -486,6 +486,14 @@ extern void __analyzer_dump_capacity (const void *ptr);\n will emit a warning describing the capacity of the base region of\n the region pointed to by the 1st argument.\n \n+@smallexample\n+extern void __analyzer_dump_escaped (void);\n+@end smallexample\n+\n+will emit a warning giving the number of decls that have escaped on this\n+analysis path, followed by a comma-separated list of their names,\n+in alphabetical order.\n+\n @smallexample\n __analyzer_dump_path ();\n @end smallexample"}, {"sha": "d05257949ff215197f323456b216aac1a1c191fd", "filename": "gcc/testsuite/gcc.dg/analyzer/analyzer-decls.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -18,6 +18,9 @@ extern void __analyzer_dump (void);\n /* Emit a warning describing the size of the base region of (*ptr).  */\n extern void __analyzer_dump_capacity (const void *ptr);\n \n+/* Dump information about what decls have escaped at this point on the path.  */\n+extern void __analyzer_dump_escaped (void);\n+\n /* Dump information after analysis on all of the exploded nodes at this\n    program point.\n "}, {"sha": "2dfd02b9ede5f6cb7385758dfa7465759caa6371", "filename": "gcc/testsuite/gcc.dg/analyzer/escaping-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fescaping-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409152a4acaec5b58a93996088d0df9aaa779b8/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fescaping-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fescaping-1.c?ref=4409152a4acaec5b58a93996088d0df9aaa779b8", "patch": "@@ -0,0 +1,27 @@\n+#include \"analyzer-decls.h\"\n+\n+#define NULL ((void *)0)\n+\n+extern void unknown_fn (void *);\n+\n+static int only_used_by_test_1;\n+\n+static void test_1 (void)\n+{\n+  int local_1, local_2;\n+  __analyzer_dump_escaped (); /* { dg-warning \"escaped: 0: \" } */\n+\n+  unknown_fn (NULL);\n+  __analyzer_dump_escaped (); /* { dg-warning \"escaped: 0: \" } */\n+\n+  unknown_fn (&local_1);\n+  __analyzer_dump_escaped (); /* { dg-warning \"escaped: 1: 'local_1'\" } */\n+\n+  /* Should be idempotent.  */\n+  unknown_fn (&local_1);\n+  __analyzer_dump_escaped (); /* { dg-warning \"escaped: 1: 'local_1'\" } */\n+\n+  /* Escape a static global.  */\n+  unknown_fn (&only_used_by_test_1);\n+  __analyzer_dump_escaped (); /* { dg-warning \"escaped: 2: 'local_1', 'only_used_by_test_1'\" } */\n+}"}]}