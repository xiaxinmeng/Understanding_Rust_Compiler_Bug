{"sha": "02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "node_id": "C_kwDOANBUbNoAKDAyZTJlMTVlYzRiNjEwYzBmNWM3M2UxZGI0MjRiMWJiYzY1ZGQzOWE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T17:00:00Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T17:00:00Z"}, "message": "UNSPEC_PALIGNR optimizations and clean-ups on x86.\n\nThis patch is a follow-up to Hongtao's fix for PR target/105854.  That\nfix is perfectly correct, but the thing that caught my eye was why is\nthe compiler generating a shift by zero at all.  Digging deeper it\nturns out that we can easily optimize __builtin_ia32_palignr for\nalignments of 0 and 64 respectively, which may be simplified to moves\nof the highpart and lowpart respectively.\n\nAfter adding optimizations to simplify the 64-bit DImode palignr, I\nstarted to add the corresponding optimizations for vpalignr (i.e.\n128-bit).  The first oddity is that sse.md uses TImode and a special\nSSESCALARMODE iterator, rather than V1TImode, and indeed the comment\nabove SSESCALARMODE hints that this should be \"dropped in favor of\nVIMAX_AVX2_AVX512BW\".  Hence this patch includes the migration of\n<ssse3_avx2>_palignr<mode> to use VIMAX_AVX2_AVX512BW, basically\nusing V1TImode instead of TImode for 128-bit palignr.\n\nThis patch has been tested on x86_64-pc-linux-gnu with make bootstrap\nand make -k check, both with and without --target_board=unix{-,32},\nwith no new failures.  Ok for mainline?\n\n2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-builtin.def (__builtin_ia32_palignr128): Change\n\tCODE_FOR_ssse3_palignrti to CODE_FOR_ssse3_palignrv1ti.\n\t* config/i386/i386-expand.cc (expand_vec_perm_palignr): Use V1TImode\n\tand gen_ssse3_palignv1ti instead of TImode.\n\t* config/i386/sse.md (SSESCALARMODE): Delete.\n\t(define_mode_attr ssse3_avx2): Handle V1TImode instead of TImode.\n\t(<ssse3_avx2>_palignr<mode>): Use VIMAX_AVX2_AVX512BW as a mode\n\titerator instead of SSESCALARMODE.\n\t(ssse3_palignrdi): Optimize cases where operands[3] is 0 or 64,\n\tusing a single move instruction (if required).\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/ssse3-palignr-2.c: New test case.", "tree": {"sha": "a620affe3d2046c556cba7272947f5b2c8b1cb7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a620affe3d2046c556cba7272947f5b2c8b1cb7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d458c53a6f37c8c49aa854d12e6867b4d914555f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d458c53a6f37c8c49aa854d12e6867b4d914555f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d458c53a6f37c8c49aa854d12e6867b4d914555f"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "fd160935e6701b9a5e8428faa3ed0fa943fde521", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "patch": "@@ -900,7 +900,7 @@ BDESC (OPTION_MASK_ISA_SSSE3, 0, CODE_FOR_ssse3_psignv4si3, \"__builtin_ia32_psig\n BDESC (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX, 0, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n \n /* SSSE3.  */\n-BDESC (OPTION_MASK_ISA_SSSE3, 0, CODE_FOR_ssse3_palignrti, \"__builtin_ia32_palignr128\", IX86_BUILTIN_PALIGNR128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_CONVERT)\n+BDESC (OPTION_MASK_ISA_SSSE3, 0, CODE_FOR_ssse3_palignrv1ti, \"__builtin_ia32_palignr128\", IX86_BUILTIN_PALIGNR128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_CONVERT)\n BDESC (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX, 0, CODE_FOR_ssse3_palignrdi, \"__builtin_ia32_palignr\", IX86_BUILTIN_PALIGNR, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_INT_CONVERT)\n \n /* SSE4.1 */"}, {"sha": "6a3fcde5738bc4ea04a0b064ee41296226ef5c42", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "patch": "@@ -19548,9 +19548,11 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool single_insn_only_p)\n   shift = GEN_INT (min * GET_MODE_UNIT_BITSIZE (d->vmode));\n   if (GET_MODE_SIZE (d->vmode) == 16)\n     {\n-      target = gen_reg_rtx (TImode);\n-      emit_insn (gen_ssse3_palignrti (target, gen_lowpart (TImode, dcopy.op1),\n-\t\t\t\t      gen_lowpart (TImode, dcopy.op0), shift));\n+      target = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_ssse3_palignrv1ti (target,\n+\t\t\t\t\tgen_lowpart (V1TImode, dcopy.op1),\n+\t\t\t\t\tgen_lowpart (V1TImode, dcopy.op0),\n+\t\t\t\t\tshift));\n     }\n   else\n     {"}, {"sha": "81d32a887855104e5df6922bfe8663660c79ebb8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "patch": "@@ -575,10 +575,6 @@\n (define_mode_iterator VIMAX_AVX2\n   [(V2TI \"TARGET_AVX2\") V1TI])\n \n-;; ??? This should probably be dropped in favor of VIMAX_AVX2_AVX512BW.\n-(define_mode_iterator SSESCALARMODE\n-  [(V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX2\") TI])\n-\n (define_mode_iterator VI12_AVX2\n   [(V32QI \"TARGET_AVX2\") V16QI\n    (V16HI \"TARGET_AVX2\") V8HI])\n@@ -712,7 +708,7 @@\n     (V4HI \"ssse3\") (V8HI \"ssse3\") (V16HI \"avx2\") (V32HI \"avx512bw\")\n     (V4SI \"ssse3\") (V8SI \"avx2\")\n     (V2DI \"ssse3\") (V4DI \"avx2\")\n-    (TI \"ssse3\") (V2TI \"avx2\") (V4TI \"avx512bw\")])\n+    (V1TI \"ssse3\") (V2TI \"avx2\") (V4TI \"avx512bw\")])\n \n (define_mode_attr sse4_1_avx2\n    [(V16QI \"sse4_1\") (V32QI \"avx2\") (V64QI \"avx512bw\")\n@@ -21108,10 +21104,10 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<ssse3_avx2>_palignr<mode>\"\n-  [(set (match_operand:SSESCALARMODE 0 \"register_operand\" \"=x,<v_Yw>\")\n-\t(unspec:SSESCALARMODE\n-\t  [(match_operand:SSESCALARMODE 1 \"register_operand\" \"0,<v_Yw>\")\n-\t   (match_operand:SSESCALARMODE 2 \"vector_operand\" \"xBm,<v_Yw>m\")\n+  [(set (match_operand:VIMAX_AVX2_AVX512BW 0 \"register_operand\" \"=x,<v_Yw>\")\n+\t(unspec:VIMAX_AVX2_AVX512BW\n+\t  [(match_operand:VIMAX_AVX2_AVX512BW 1 \"register_operand\" \"0,<v_Yw>\")\n+\t   (match_operand:VIMAX_AVX2_AVX512BW 2 \"vector_operand\" \"xBm,<v_Yw>m\")\n \t   (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n \t  UNSPEC_PALIGNR))]\n   \"TARGET_SSSE3\"\n@@ -21157,11 +21153,30 @@\n       gcc_unreachable ();\n     }\n }\n-  \"TARGET_SSSE3 && reload_completed\n-   && SSE_REGNO_P (REGNO (operands[0]))\"\n+  \"(TARGET_SSSE3 && reload_completed\n+    && SSE_REGNO_P (REGNO (operands[0])))\n+   || operands[3] == const0_rtx\n+   || INTVAL (operands[3]) == 64\"\n   [(set (match_dup 0)\n \t(lshiftrt:V1TI (match_dup 0) (match_dup 3)))]\n {\n+  if (operands[3] == const0_rtx)\n+    {\n+      if (!rtx_equal_p (operands[0], operands[2]))\n+\temit_move_insn (operands[0], operands[2]);\n+      else\n+\temit_note (NOTE_INSN_DELETED);\n+      DONE;\n+    }\n+  else if (INTVAL (operands[3]) == 64)\n+    {\n+      if (!rtx_equal_p (operands[0], operands[1]))\n+\temit_move_insn (operands[0], operands[1]);\n+      else\n+\temit_note (NOTE_INSN_DELETED);\n+      DONE;\n+    }\n+\n   /* Emulate MMX palignrdi with SSE psrldq.  */\n   rtx op0 = lowpart_subreg (V2DImode, operands[0],\n \t\t\t    GET_MODE (operands[0]));"}, {"sha": "791222ddd782af3452372477d443a2d863f86644", "filename": "gcc/testsuite/gcc.target/i386/ssse3-palignr-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-palignr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-palignr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-palignr-2.c?ref=02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mssse3\" } */\n+\n+typedef long long __attribute__ ((__vector_size__ (8))) T;\n+\n+T x;\n+T y;\n+T z;\n+\n+void foo()\n+{\n+  z = __builtin_ia32_palignr (x, y, 0);\n+}\n+\n+void bar()\n+{\n+  z = __builtin_ia32_palignr (x, y, 64);\n+}\n+/* { dg-final { scan-assembler-not \"punpcklqdq\" } } */\n+/* { dg-final { scan-assembler-not \"pshufd\" } } */\n+/* { dg-final { scan-assembler-not \"psrldq\" } } */"}]}