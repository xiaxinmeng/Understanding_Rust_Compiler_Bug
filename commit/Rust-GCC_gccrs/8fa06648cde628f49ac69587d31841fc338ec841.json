{"sha": "8fa06648cde628f49ac69587d31841fc338ec841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhMDY2NDhjZGU2MjhmNDlhYzY5NTg3ZDMxODQxZmMzMzhlYzg0MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-14T14:32:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-14T14:32:24Z"}, "message": "re PR tree-optimization/83326 (SPEC CPU2017 648.exchange2_s ~6% performance regression with r255267 (reproducer attached))\n\n2017-12-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83326\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Add\n\tmay_be_zero parameter and handle it by not marking the first\n\tpeeled copy as not exiting the loop.\n\t(try_peel_loop): Likewise.\n\t(canonicalize_loop_induction_variables): Use number_of_iterations_exit\n\tto handle the case of constant or zero iterations and perform\n\tloop header copying on-the-fly.\n\n\t* gcc.dg/tree-ssa/pr81388-2.c: Adjust.\n\nFrom-SVN: r255635", "tree": {"sha": "4ed9aa324a460c80fca144994aeda6284b57d5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed9aa324a460c80fca144994aeda6284b57d5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa06648cde628f49ac69587d31841fc338ec841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa06648cde628f49ac69587d31841fc338ec841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa06648cde628f49ac69587d31841fc338ec841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa06648cde628f49ac69587d31841fc338ec841/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f297ebafdcdf5d5a8c3ef74c9906de67998e5aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f297ebafdcdf5d5a8c3ef74c9906de67998e5aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f297ebafdcdf5d5a8c3ef74c9906de67998e5aa7"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "4f97ca254ac84135eb7ef7d3cb2c2d1c2a7e0d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fa06648cde628f49ac69587d31841fc338ec841", "patch": "@@ -1,3 +1,14 @@\n+2017-12-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83326\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Add\n+\tmay_be_zero parameter and handle it by not marking the first\n+\tpeeled copy as not exiting the loop.\n+\t(try_peel_loop): Likewise.\n+\t(canonicalize_loop_induction_variables): Use number_of_iterations_exit\n+\tto handle the case of constant or zero iterations and perform\n+\tloop header copying on-the-fly.\n+\n 2017-12-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83418"}, {"sha": "9bd5cbbe1bdbb1d8a2d2811944826a10a07e8160", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fa06648cde628f49ac69587d31841fc338ec841", "patch": "@@ -1,3 +1,8 @@\n+2017-12-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83326\n+\t* gcc.dg/tree-ssa/pr81388-2.c: Adjust.\n+\n 2017-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/alignment11.adb: New test."}, {"sha": "aa40588f35864f3e339f8737970162ad496bf91a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr81388-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81388-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81388-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81388-2.c?ref=8fa06648cde628f49ac69587d31841fc338ec841", "patch": "@@ -11,4 +11,4 @@ void foo(unsigned dst)\n   } while (dst < end);\n }\n \n-/* { dg-final { scan-tree-dump-times \" zero if \" 1 \"ivcanon\" } } */\n+/* { dg-final { scan-tree-dump \" zero if \" \"ivcanon\" } } */"}, {"sha": "ce5a833de4d6937d7e2295c07bc8b9412a76bcae", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa06648cde628f49ac69587d31841fc338ec841/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=8fa06648cde628f49ac69587d31841fc338ec841", "patch": "@@ -681,7 +681,7 @@ unloop_loops (bitmap loop_closed_ssa_invalidated,\n \n static bool\n try_unroll_loop_completely (struct loop *loop,\n-\t\t\t    edge exit, tree niter,\n+\t\t\t    edge exit, tree niter, bool may_be_zero,\n \t\t\t    enum unroll_level ul,\n \t\t\t    HOST_WIDE_INT maxiter,\n \t\t\t    location_t locus, bool allow_peel)\n@@ -893,6 +893,8 @@ try_unroll_loop_completely (struct loop *loop,\n \t  exit = NULL;\n \t  bitmap_clear (wont_exit);\n \t}\n+      if (may_be_zero)\n+\tbitmap_clear_bit (wont_exit, 1);\n \n       if (!gimple_duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t\t n_unroll, wont_exit,\n@@ -977,7 +979,7 @@ estimated_peeled_sequence_size (struct loop_size *size,\n \n static bool\n try_peel_loop (struct loop *loop,\n-\t       edge exit, tree niter,\n+\t       edge exit, tree niter, bool may_be_zero,\n \t       HOST_WIDE_INT maxiter)\n {\n   HOST_WIDE_INT npeel;\n@@ -1080,6 +1082,8 @@ try_peel_loop (struct loop *loop,\n       exit = NULL;\n       bitmap_clear (wont_exit);\n     }\n+  if (may_be_zero)\n+    bitmap_clear_bit (wont_exit, 1);\n   if (!gimple_duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t     npeel, wont_exit,\n \t\t\t\t\t     exit, &edges_to_remove,\n@@ -1152,13 +1156,35 @@ canonicalize_loop_induction_variables (struct loop *loop,\n   HOST_WIDE_INT maxiter;\n   bool modified = false;\n   location_t locus = UNKNOWN_LOCATION;\n+  struct tree_niter_desc niter_desc;\n+  bool may_be_zero = false;\n \n-  niter = number_of_latch_executions (loop);\n+  /* For unrolling allow conditional constant or zero iterations, thus\n+     perform loop-header copying on-the-fly.  */\n   exit = single_exit (loop);\n+  niter = chrec_dont_know;\n+  if (exit && number_of_iterations_exit (loop, exit, &niter_desc, false))\n+    {\n+      niter = niter_desc.niter;\n+      may_be_zero\n+\t= niter_desc.may_be_zero && !integer_zerop (niter_desc.may_be_zero);\n+    }\n   if (TREE_CODE (niter) == INTEGER_CST)\n     locus = gimple_location (last_stmt (exit->src));\n   else\n     {\n+      /* For non-constant niter fold may_be_zero into niter again.  */\n+      if (may_be_zero)\n+\t{\n+\t  if (COMPARISON_CLASS_P (niter_desc.may_be_zero))\n+\t    niter = fold_build3 (COND_EXPR, TREE_TYPE (niter),\n+\t\t\t\t niter_desc.may_be_zero,\n+\t\t\t\t build_int_cst (TREE_TYPE (niter), 0), niter);\n+\t  else\n+\t    niter = chrec_dont_know;\n+\t  may_be_zero = false;\n+\t}\n+\n       /* If the loop has more than one exit, try checking all of them\n \t for # of iterations determinable through scev.  */\n       if (!exit)\n@@ -1213,17 +1239,31 @@ canonicalize_loop_induction_variables (struct loop *loop,\n      populates the loop bounds.  */\n   modified |= remove_redundant_iv_tests (loop);\n \n-  if (try_unroll_loop_completely (loop, exit, niter, ul, maxiter, locus,\n-\t\t\t\t  allow_peel))\n+  if (try_unroll_loop_completely (loop, exit, niter, may_be_zero, ul,\n+\t\t\t\t  maxiter, locus, allow_peel))\n     return true;\n \n   if (create_iv\n       && niter && !chrec_contains_undetermined (niter)\n       && exit && just_once_each_iteration_p (loop, exit->src))\n-    create_canonical_iv (loop, exit, niter);\n+    {\n+      tree iv_niter = niter;\n+      if (may_be_zero)\n+\t{\n+\t  if (COMPARISON_CLASS_P (niter_desc.may_be_zero))\n+\t    iv_niter = fold_build3 (COND_EXPR, TREE_TYPE (iv_niter),\n+\t\t\t\t    niter_desc.may_be_zero,\n+\t\t\t\t    build_int_cst (TREE_TYPE (iv_niter), 0),\n+\t\t\t\t    iv_niter);\n+\t  else\n+\t    iv_niter = NULL_TREE;\n+\t}\n+      if (iv_niter)\n+\tcreate_canonical_iv (loop, exit, iv_niter);\n+    }\n \n   if (ul == UL_ALL)\n-    modified |= try_peel_loop (loop, exit, niter, maxiter);\n+    modified |= try_peel_loop (loop, exit, niter, may_be_zero, maxiter);\n \n   return modified;\n }"}]}