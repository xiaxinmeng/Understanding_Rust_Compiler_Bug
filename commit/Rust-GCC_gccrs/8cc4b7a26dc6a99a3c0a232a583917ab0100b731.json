{"sha": "8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjNGI3YTI2ZGM2YTk5YTNjMGEyMzJhNTgzOTE3YWIwMTAwYjczMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-12T12:05:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-12T12:05:18Z"}, "message": "Remove LIBGCC2_HAS_?F_MODE target macros.\n\nThis patch removes the LIBGCC2_HAS_{SF,DF,XF,TF}_MODE target macros,\nreplacing them by predefines with -fbuilding-libgcc, together with a\ntarget hook that can influence those predefines when needed.\n\nThe new default is that a floating-point mode is supported in libgcc\nif (a) it passes the scalar_mode_supported_p hook (otherwise it's not\nplausible for it to be supported in libgcc) and (b) it's one of those\nfour modes (since those are the modes for which libgcc hardcodes the\npossibility of support).  The target hook can override the default\nchoice (in either direction) for modes that pass\nscalar_mode_supported_p (although overriding in the direction of\nreturning true when the default would return false only makes sense if\nall relevant functions are specially defined in libgcc for that\nparticular target).\n\nThe previous default settings depended on various settings such as\nLIBGCC2_LONG_DOUBLE_TYPE_SIZE, as well as targets defining the above\ntarget macros if the default wasn't correct.\n\nThe default scalar_mode_supported_p only declares a floating-point\nmode to be supported if it matches one of float / double / long\ndouble.  This means that in most cases where a mode is only supported\nconditionally in libgcc (TFmode only supported if it's the mode of\nlong double, most commonly), the default gets things right.  Overrides\nwere needed in the following cases:\n\n* SFmode would always have been supported in libgcc (the condition was\n  BITS_PER_UNIT == 8, true for all current targets), but pdp11\n  defaults to 64-bit float, and in that case SFmode would fail\n  scalar_mode_supported_p.  I don't know if libgcc actually built for\n  pdp11 (and the port may well no longer be being used), but this\n  patch adds a scalar_mode_supported_p hook to it to ensure SFmode is\n  treated as supported.\n\n* Certain i386 and ia64 targets need the new hook to match the\n  existing cases for when XFmode or TFmode support is present in\n  libgcc.  For i386, the hook can always declare XFmode to be\n  supported - the cases where it's not are the cases where long double\n  is TFmode, in which case XFmode fails scalar_mode_supported_p[*] -\n  but TFmode support needs to be conditional.  (And of the targets not\n  defining LIBGCC2_HAS_TF_MODE before this patch, some defined\n  LONG_DOUBLE_TYPE_SIZE to 64, so ensuring LIBGCC2_HAS_TF_MODE would\n  always be false, while others did not define it, so allowing it to\n  be true in the -mlong-double-128 case.  This patch matches that\n  logic, although I suspect all the latter targets would have been\n  broken if you tried to enable -mlong-double-128 by default, for lack\n  of the soft-fp TFmode support in libgcc, which is separately\n  configured.)\n\n  [*] I don't know if it's deliberate not to support __float80 at all\n  with -mlong-double-128.\n\nIn order to implement the default version of the new hook,\ninsn-modes.h was made to contain macros such as HAVE_TFmode for each\nmachine mode, so the default hook can contain conditionals on whether\nXFmode and TFmode exist (to match the hardcoding of a list of modes in\nlibgcc).  This is also used in fortran/trans-types.c; previously it\nhad a conditional on defined(LIBGCC2_HAS_TF_MODE) (a bit dubious,\nsince it ignored the value of the macro), which is replaced by testing\ndefined(HAVE_TFmode), in conjunction with requiring\ntargetm.libgcc_floating_mode_supported_p.\n\n(Fortran is testing something stronger than that hook: not only is\nlibgcc support required, but also libm or equivalent.  Thus, it has a\ntest for ENABLE_LIBQUADMATH_SUPPORT in the case that the mode is\nTFmode and that's not the same as any of the three standard types.\nThe old and new tests are intended to accept exactly the same set of\nmodes for all targets.)\n\nApart from the four target macros eliminated by this patch, it gets us\ncloser to eliminating LIBGCC2_LONG_DOUBLE_TYPE_SIZE as well, though a\nfew more places using that macro need changing first.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu; also\nbuilt cc1 for crosses to ia64-elf and pdp11-none as a minimal test of\nchanges for those targets.\n\ngcc:\n\t* target.def (libgcc_floating_mode_supported_p): New hook.\n\t* targhooks.c (default_libgcc_floating_mode_supported_p): New\n\tfunction.\n\t* targhooks.h (default_libgcc_floating_mode_supported_p): Declare.\n\t* doc/tm.texi.in (LIBGCC2_HAS_DF_MODE, LIBGCC2_HAS_XF_MODE)\n\t(LIBGCC2_HAS_TF_MODE): Remove.\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): New @hook.\n\t* doc/tm.texi: Regenerate.\n\t* genmodes.c (emit_insn_modes_h): Define HAVE_%smode for each\n\tmachine mode.\n\t* system.h (LIBGCC2_HAS_SF_MODE, LIBGCC2_HAS_DF_MODE)\n\t(LIBGCC2_HAS_XF_MODE, LIBGCC2_HAS_TF_MODE): Poison.\n\t* config/i386/cygming.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/darwin.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/djgpp.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/dragonfly.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/freebsd.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/gnu-user-common.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/i386-interix.h (IX86_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/i386.c (ix86_libgcc_floating_mode_supported_p): New\n\tfunction.\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Define.\n\t* config/i386/i386elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/lynx.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/netbsd-elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/netbsd64.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/nto.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/openbsd.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/openbsdelf.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/rtemself.h (IX86_NO_LIBGCC_TFMODE): Define.\n\t* config/i386/sol2.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/i386/vx-common.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n\t* config/ia64/elf.h (IA64_NO_LIBGCC_TFMODE): Define.\n\t* config/ia64/freebsd.h (IA64_NO_LIBGCC_TFMODE): Define.\n\t* config/ia64/hpux.h (LIBGCC2_HAS_XF_MODE, LIBGCC2_HAS_TF_MODE):\n\tRemove.\n\t* config/ia64/ia64.c (TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P):\n\tNew macro.\n\t(ia64_libgcc_floating_mode_supported_p): New function.\n\t* config/ia64/linux.h (LIBGCC2_HAS_TF_MODE): Remove.\n\t* config/ia64/vms.h (IA64_NO_LIBGCC_XFMODE)\n\t(IA64_NO_LIBGCC_TFMODE): Define.\n\t* config/msp430/msp430.h (LIBGCC2_HAS_DF_MODE): Remove.\n\t* config/pdp11/pdp11.c (TARGET_SCALAR_MODE_SUPPORTED_P): New\n\tmacro.\n\t(pdp11_scalar_mode_supported_p): New function.\n\t* config/rl78/rl78.h (LIBGCC2_HAS_DF_MODE): Remove.\n\t* config/rx/rx.h (LIBGCC2_HAS_DF_MODE): Remove.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __LIBGCC_HAS_%s_MODE__\n\tmacros for floating-point modes.\n\ngcc/fortran:\n\t* trans-types.c (gfc_init_kinds): Check\n\ttargetm.libgcc_floating_mode_supported_p for floating-point\n\tmodes.  Check HAVE_TFmode instead of LIBGCC2_HAS_TF_MODE.\n\nlibgcc:\n\t* libgcc2.h (LIBGCC2_HAS_SF_MODE): Define using\n\t__LIBGCC_HAS_SF_MODE__.\n\t(LIBGCC2_HAS_DF_MODE): Define using __LIBGCC_HAS_DF_MODE__.\n\t(LIBGCC2_HAS_XF_MODE): Define using __LIBGCC_HAS_XF_MODE__.\n\t(LIBGCC2_HAS_TF_MODE): Define using __LIBGCC_HAS_TF_MODE__.\n\t* config/libbid/bid_gcc_intrinsics.h\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Do not define.\n\t(LIBGCC2_HAS_XF_MODE): Define using __LIBGCC_HAS_XF_MODE__.\n\t(LIBGCC2_HAS_TF_MODE): Define using __LIBGCC_HAS_TF_MODE__.\n\t* fixed-bit.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Do not define.\n\t(LIBGCC2_HAS_SF_MODE): Define using __LIBGCC_HAS_SF_MODE__.\n\t(LIBGCC2_HAS_DF_MODE): Define using __LIBGCC_HAS_DF_MODE__.\n\nFrom-SVN: r215215", "tree": {"sha": "92677961221518f05fe5f99181dfc56695366926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92677961221518f05fe5f99181dfc56695366926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2813904b118a4c7b914fd44ed9a189ee777c5165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2813904b118a4c7b914fd44ed9a189ee777c5165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2813904b118a4c7b914fd44ed9a189ee777c5165"}], "stats": {"total": 391, "additions": 279, "deletions": 112}, "files": [{"sha": "c0486724f02d6daadf8e2966bd586616e90484b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1,3 +1,53 @@\n+2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.def (libgcc_floating_mode_supported_p): New hook.\n+\t* targhooks.c (default_libgcc_floating_mode_supported_p): New\n+\tfunction.\n+\t* targhooks.h (default_libgcc_floating_mode_supported_p): Declare.\n+\t* doc/tm.texi.in (LIBGCC2_HAS_DF_MODE, LIBGCC2_HAS_XF_MODE)\n+\t(LIBGCC2_HAS_TF_MODE): Remove.\n+\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): New @hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* genmodes.c (emit_insn_modes_h): Define HAVE_%smode for each\n+\tmachine mode.\n+\t* system.h (LIBGCC2_HAS_SF_MODE, LIBGCC2_HAS_DF_MODE)\n+\t(LIBGCC2_HAS_XF_MODE, LIBGCC2_HAS_TF_MODE): Poison.\n+\t* config/i386/cygming.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/darwin.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/djgpp.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/dragonfly.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/freebsd.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/gnu-user-common.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/i386-interix.h (IX86_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/i386.c (ix86_libgcc_floating_mode_supported_p): New\n+\tfunction.\n+\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Define.\n+\t* config/i386/i386elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/lynx.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/netbsd-elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/netbsd64.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/nto.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/openbsd.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/openbsdelf.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/rtemself.h (IX86_NO_LIBGCC_TFMODE): Define.\n+\t* config/i386/sol2.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/i386/vx-common.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Define.\n+\t* config/ia64/elf.h (IA64_NO_LIBGCC_TFMODE): Define.\n+\t* config/ia64/freebsd.h (IA64_NO_LIBGCC_TFMODE): Define.\n+\t* config/ia64/hpux.h (LIBGCC2_HAS_XF_MODE, LIBGCC2_HAS_TF_MODE):\n+\tRemove.\n+\t* config/ia64/ia64.c (TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P):\n+\tNew macro.\n+\t(ia64_libgcc_floating_mode_supported_p): New function.\n+\t* config/ia64/linux.h (LIBGCC2_HAS_TF_MODE): Remove.\n+\t* config/ia64/vms.h (IA64_NO_LIBGCC_XFMODE)\n+\t(IA64_NO_LIBGCC_TFMODE): Define.\n+\t* config/msp430/msp430.h (LIBGCC2_HAS_DF_MODE): Remove.\n+\t* config/pdp11/pdp11.c (TARGET_SCALAR_MODE_SUPPORTED_P): New\n+\tmacro.\n+\t(pdp11_scalar_mode_supported_p): New function.\n+\t* config/rl78/rl78.h (LIBGCC2_HAS_DF_MODE): Remove.\n+\t* config/rx/rx.h (LIBGCC2_HAS_DF_MODE): Remove.\n 2014-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63237"}, {"sha": "4b8d1a5d2bb168eb64b51cc1a7535c5895252456", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1,3 +1,8 @@\n+2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __LIBGCC_HAS_%s_MODE__\n+\tmacros for floating-point modes.\n+\n 2014-09-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR target/58757"}, {"sha": "b4095a05f2d7b9adca076b09e250669501ec2638", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -949,6 +949,13 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  sprintf (macro_name, \"__LIBGCC_%s_MANT_DIG__\", name);\n \t  builtin_define_with_int_value (macro_name,\n \t\t\t\t\t REAL_MODE_FORMAT (mode)->p);\n+\t  if (!targetm.scalar_mode_supported_p (mode)\n+\t      || !targetm.libgcc_floating_mode_supported_p (mode))\n+\t    continue;\n+\t  macro_name = (char *) alloca (strlen (name)\n+\t\t\t\t\t+ sizeof (\"__LIBGCC_HAS__MODE__\"));\n+\t  sprintf (macro_name, \"__LIBGCC_HAS_%s_MODE__\", name);\n+\t  cpp_define (pfile, macro_name);\n \t}\n \n       /* For libgcc crtstuff.c and libgcc2.c.  */"}, {"sha": "a2c3773a966838447fbe850b9b914783c4685477", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -340,8 +340,6 @@ do {\t\t\t\t\t\t\\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n \n /* Output function declarations at the end of the file.  */"}, {"sha": "cafc98a9ad28d5d778183e15dd06642cf523621a", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -154,8 +154,6 @@ extern int darwin_emit_branch_islands;\n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n \n #undef TARGET_ASM_FILE_END"}, {"sha": "6f8cbd2363cd8cb25189fbd60eb24da31abae8fc", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -177,3 +177,5 @@ while (0)\n /* Support for C++ templates.  */\n #undef MAKE_DECL_ONE_ONLY\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "b46a13ecfa5487bbabc6746890c44a2750547f38", "filename": "gcc/config/i386/dragonfly.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -90,8 +90,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_96_ROUND_53_LONG_DOUBLE (!TARGET_64BIT)\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n \n /* Static stack checking is supported by means of probes.  */"}, {"sha": "b09bfd023fe3a91485d6a8d39ffa6ab68bcadb90", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -132,8 +132,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_96_ROUND_53_LONG_DOUBLE (!TARGET_64BIT)\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n \n /* Static stack checking is supported by means of probes.  */"}, {"sha": "5f1973567c3fcae6536eaca4cc2b7cea94d9afed", "filename": "gcc/config/i386/gnu-user-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -58,8 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n   GNU_USER_TARGET_ENDFILE_SPEC\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "49aef842f762f4462848a5c94b91b5f48ac2aaa9", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -143,6 +143,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n \n+#define IX86_NO_LIBGCC_TFMODE\n+\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n "}, {"sha": "30120a56b7428519a9c5f1170bffbb4a2b3f749d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -41218,6 +41218,31 @@ ix86_vector_mode_supported_p (enum machine_mode mode)\n   return false;\n }\n \n+/* Implement target hook libgcc_floating_mode_supported_p.  */\n+static bool\n+ix86_libgcc_floating_mode_supported_p (enum machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+    case SFmode:\n+    case DFmode:\n+    case XFmode:\n+      return true;\n+\n+    case TFmode:\n+#ifdef IX86_NO_LIBGCC_TFMODE\n+      return false;\n+#elif defined IX86_MAYBE_NO_LIBGCC_TFMODE\n+      return TARGET_LONG_DOUBLE_128;\n+#else\n+      return true;\n+#endif\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Target hook for c_mode_for_suffix.  */\n static enum machine_mode\n ix86_c_mode_for_suffix (char suffix)\n@@ -47283,6 +47308,10 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ix86_vector_mode_supported_p\n \n+#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P \\\n+  ix86_libgcc_floating_mode_supported_p\n+\n #undef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX ix86_c_mode_for_suffix\n "}, {"sha": "36a0390459f42bba21169c23a9a7cc45c00f80bf", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -101,3 +101,5 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "e7a593b717473dffcd6bb485f82986d8a1e7bf4a", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -85,3 +85,5 @@ along with GCC; see the file COPYING3.  If not see\n    TLS is detected by configure.  We undefine it here.  */\n \n #undef HAVE_AS_TLS\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "8f4cc703ad2334a9890355965548697c547d0f69", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -119,3 +119,5 @@ along with GCC; see the file COPYING3.  If not see\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n #define HAVE_ENABLE_EXECUTE_STACK\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "d748f7d33cfb262c446ffb526f79867eb0641134", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -67,3 +67,5 @@ along with GCC; see the file COPYING3.  If not see\n }\n \n #define HAVE_ENABLE_EXECUTE_STACK\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "d93d0866a245a6c463472366ea7dd1e9ea0065ac", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -103,3 +103,5 @@ crti.o%s \\\n #define TARGET_POSIX_IO\n \n #undef DBX_REGISTER_NUMBER\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "3ee47646c919b6ca13b048a5a09075e8374fc8b0", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -99,3 +99,5 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_QUAD\n \n #define TARGET_HAVE_NAMED_SECTIONS false\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "8e2eceab93353dfe4eee7074a33de4c31d23e63d", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -113,6 +113,4 @@ along with GCC; see the file COPYING3.  If not see\n #define HAVE_ENABLE_EXECUTE_STACK\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q"}, {"sha": "ce6d762948d7067206c23b4ffebe17c072626233", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -38,3 +38,5 @@ along with GCC; see the file COPYING3.  If not see\n #else\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n #endif\n+\n+#define IX86_NO_LIBGCC_TFMODE"}, {"sha": "be1e6fcff0de6a34cde38f404398448a70bc28d1", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -238,6 +238,4 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q"}, {"sha": "dd096f10fe09ac454dc04abc2a9c60b4c86574c8", "filename": "gcc/config/i386/vx-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fi386%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvx-common.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -31,3 +31,5 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+\n+#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "960737b0ed183143383ac443dbf353918f50b522", "filename": "gcc/config/ia64/elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Felf.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -65,4 +65,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t\t\t  %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\\\n \t\t\tcrti.o%s crtbegin.o%s\"\n \n+#define IA64_NO_LIBGCC_TFMODE\n+\n /* End of elf.h */"}, {"sha": "c58f341158628364dddf3df51da921b6c1e7dcb3", "filename": "gcc/config/ia64/freebsd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffreebsd.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -50,3 +50,5 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_ELF\t\t1\n \n #define JMP_BUF_SIZE  76\n+\n+#define IA64_NO_LIBGCC_TFMODE"}, {"sha": "fa9aca548994a52b0cb611ec86dfb6643fa400c0", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -189,14 +189,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n \n-/* Put all *xf routines in libgcc, regardless of long double size.  */\n-#undef LIBGCC2_HAS_XF_MODE\n-#define LIBGCC2_HAS_XF_MODE 1\n-\n-/* Put all *tf routines in libgcc, regardless of long double size.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n-\n /* HP-UX headers are C++-compatible.  */\n #define NO_IMPLICIT_EXTERN_C\n "}, {"sha": "9337be144134169571334b9aab0ec73a0482b363", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -319,6 +319,7 @@ static rtx ia64_struct_value_rtx (tree, int);\n static tree ia64_gimplify_va_arg (tree, tree, gimple_seq *, gimple_seq *);\n static bool ia64_scalar_mode_supported_p (enum machine_mode mode);\n static bool ia64_vector_mode_supported_p (enum machine_mode mode);\n+static bool ia64_libgcc_floating_mode_supported_p (enum machine_mode mode);\n static bool ia64_legitimate_constant_p (enum machine_mode, rtx);\n static bool ia64_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool ia64_cannot_force_const_mem (enum machine_mode, rtx);\n@@ -598,6 +599,10 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ia64_vector_mode_supported_p\n \n+#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P \\\n+  ia64_libgcc_floating_mode_supported_p\n+\n /* ia64 architecture manual 4.4.7: ... reads, writes, and flushes may occur\n    in an order different from the specified program order.  */\n #undef TARGET_RELAXED_ORDERING\n@@ -10939,6 +10944,36 @@ ia64_vector_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n+/* Implement TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P.  */\n+\n+static bool\n+ia64_libgcc_floating_mode_supported_p (enum machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+    case SFmode:\n+    case DFmode:\n+      return true;\n+\n+    case XFmode:\n+#ifdef IA64_NO_LIBGCC_XFMODE\n+      return false;\n+#else\n+      return true;\n+#endif\n+\n+    case TFmode:\n+#ifdef IA64_NO_LIBGCC_TFMODE\n+      return false;\n+#else\n+      return true;\n+#endif\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Implement the FUNCTION_PROFILER macro.  */\n \n void"}, {"sha": "bd1b582fa800b349693b144b133d26cb796baad2", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -77,8 +77,6 @@ do {\t\t\t\t\t\t\\\n #define LINK_EH_SPEC \"\"\n \n /* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n #undef LIBGCC2_TF_CEXT\n #define LIBGCC2_TF_CEXT q\n "}, {"sha": "a5db5df7b2328461e97e94436787f29f1ab5bd8f", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -154,3 +154,6 @@ STATIC func_ptr __CTOR_LIST__[1]                                             \\\n /* Default values for _CRTL_VER and _VMS_VER.  */\n #define VMS_DEFAULT_CRTL_VER 80300000\n #define VMS_DEFAULT_VMS_VER 80300000\n+\n+#define IA64_NO_LIBGCC_XFMODE\n+#define IA64_NO_LIBGCC_TFMODE"}, {"sha": "91fc91ce9a8ceafcd4ed7af90ac340d77ceb348d", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -112,7 +112,6 @@ extern bool msp430x;\n #define DOUBLE_TYPE_SIZE \t\t64\n #define LONG_DOUBLE_TYPE_SIZE\t\t64 /*DOUBLE_TYPE_SIZE*/\n \n-#define LIBGCC2_HAS_DF_MODE\t\t1\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n \n #define DEFAULT_SIGNED_CHAR\t\t0"}, {"sha": "821eed7fb6b26838227b8748c9b568d2fa123a87", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -157,6 +157,8 @@ static void pdp11_function_arg_advance (cumulative_args_t,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n static void pdp11_conditional_register_usage (void);\n static bool pdp11_legitimate_constant_p (enum machine_mode, rtx);\n+\n+static bool pdp11_scalar_mode_supported_p (enum machine_mode);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -223,6 +225,9 @@ static bool pdp11_legitimate_constant_p (enum machine_mode, rtx);\n \n #undef  TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P pdp11_legitimate_constant_p\n+\n+#undef  TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P pdp11_scalar_mode_supported_p\n \f\n /* A helper function to determine if REGNO should be saved in the\n    current function's stack frame.  */\n@@ -1901,4 +1906,15 @@ pdp11_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return GET_CODE (x) != CONST_DOUBLE || legitimate_const_double_p (x);\n }\n \n+/* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n+\n+static bool\n+pdp11_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  /* Support SFmode even with -mfloat64.  */\n+  if (mode == SFmode)\n+    return true;\n+  return default_scalar_mode_supported_p (mode);\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "947c4084661317d6f3ee34d77febcad400781fd1", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -98,7 +98,6 @@\n #define DOUBLE_TYPE_SIZE \t\t32 /*64*/\n #define LONG_DOUBLE_TYPE_SIZE\t\t64 /*DOUBLE_TYPE_SIZE*/\n \n-#define LIBGCC2_HAS_DF_MODE\t\t1\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n \n #define DEFAULT_SIGNED_CHAR\t\t0"}, {"sha": "2a008f7aa538c4b203af44696f76eec2c869b0de", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -131,10 +131,8 @@\n #define LONG_DOUBLE_TYPE_SIZE\t\tDOUBLE_TYPE_SIZE\n \n #ifdef __RX_32BIT_DOUBLES__\n-#define LIBGCC2_HAS_DF_MODE\t\t0\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   32\n #else\n-#define LIBGCC2_HAS_DF_MODE\t\t1\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n #endif\n "}, {"sha": "685c9b2126fb9f41cb71cc28d3704851f8d48b85", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1549,29 +1549,6 @@ if you want routines in @file{libgcc2.a} for a size other than\n default is @code{LONG_DOUBLE_TYPE_SIZE}.\n @end defmac\n \n-@defmac LIBGCC2_HAS_DF_MODE\n-Define this macro if neither @code{DOUBLE_TYPE_SIZE} nor\n-@code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is\n-@code{DFmode} but you want @code{DFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and either @code{DOUBLE_TYPE_SIZE}\n-or @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is 64 then the default is 1,\n-otherwise it is 0.\n-@end defmac\n-\n-@defmac LIBGCC2_HAS_XF_MODE\n-Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not\n-@code{XFmode} but you want @code{XFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n-is 80 then the default is 1, otherwise it is 0.\n-@end defmac\n-\n-@defmac LIBGCC2_HAS_TF_MODE\n-Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not\n-@code{TFmode} but you want @code{TFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n-is 128 then the default is 1, otherwise it is 0.\n-@end defmac\n-\n @defmac LIBGCC2_GNU_PREFIX\n This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n hook and should be defined if that hook is overriden to be true.  It\n@@ -4226,6 +4203,14 @@ If this hook allows @code{val} to have a scalar mode, then\n @code{int8x8x3_t}s in registers rather than forcing them onto the stack.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P (enum machine_mode @var{mode})\n+Define this to return nonzero if libgcc provides support for the \n+floating-point mode @var{mode}, which is known to pass \n+@code{TARGET_SCALAR_MODE_SUPPORTED_P}.  The default version of this \n+hook returns true for all of @code{SFmode}, @code{DFmode}, \n+@code{XFmode} and @code{TFmode}, if such modes exist.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P (enum machine_mode @var{mode})\n Define this to return nonzero for machine modes for which the port has\n small register classes.  If this target hook returns nonzero for a given"}, {"sha": "798c1aad5e2fca958ad1139e9576671bf9d199ff", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1391,29 +1391,6 @@ if you want routines in @file{libgcc2.a} for a size other than\n default is @code{LONG_DOUBLE_TYPE_SIZE}.\n @end defmac\n \n-@defmac LIBGCC2_HAS_DF_MODE\n-Define this macro if neither @code{DOUBLE_TYPE_SIZE} nor\n-@code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is\n-@code{DFmode} but you want @code{DFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and either @code{DOUBLE_TYPE_SIZE}\n-or @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is 64 then the default is 1,\n-otherwise it is 0.\n-@end defmac\n-\n-@defmac LIBGCC2_HAS_XF_MODE\n-Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not\n-@code{XFmode} but you want @code{XFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n-is 80 then the default is 1, otherwise it is 0.\n-@end defmac\n-\n-@defmac LIBGCC2_HAS_TF_MODE\n-Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not\n-@code{TFmode} but you want @code{TFmode} routines in @file{libgcc2.a}\n-anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n-is 128 then the default is 1, otherwise it is 0.\n-@end defmac\n-\n @defmac LIBGCC2_GNU_PREFIX\n This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n hook and should be defined if that hook is overriden to be true.  It\n@@ -3530,6 +3507,8 @@ stack.\n \n @hook TARGET_ARRAY_MODE_SUPPORTED_P\n \n+@hook TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+\n @hook TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P\n \n @hook TARGET_FLAGS_REGNUM"}, {"sha": "5488371c4c6be5ffdcc6607e7a4dd85ba3fe0849", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1,3 +1,9 @@\n+2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Check\n+\ttargetm.libgcc_floating_mode_supported_p for floating-point\n+\tmodes.  Check HAVE_TFmode instead of LIBGCC2_HAS_TF_MODE.\n+\n 2014-09-05  Joost VandeVondele  <vondele@gcc.gnu.org>\n \n \tPR fortran/62245"}, {"sha": "cf24895f1c98ce5f085fd0f177cc5f956e613f3c", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -31,8 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t   BOOL_TYPE_SIZE, BITS_PER_UNIT, POINTER_SIZE,\n \t\t\t   INT_TYPE_SIZE, CHAR_TYPE_SIZE, SHORT_TYPE_SIZE,\n \t\t\t   LONG_TYPE_SIZE, LONG_LONG_TYPE_SIZE,\n-\t\t\t   FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE,\n-\t\t\t   LONG_DOUBLE_TYPE_SIZE and LIBGCC2_HAS_TF_MODE.  */\n+\t\t\t   FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE and\n+\t\t\t   LONG_DOUBLE_TYPE_SIZE.  */\n #include \"tree.h\"\n #include \"stor-layout.h\"\n #include \"stringpool.h\"\n@@ -427,10 +427,13 @@ gfc_init_kinds (void)\n       /* Only let float, double, long double and __float128 go through.\n \t Runtime support for others is not provided, so they would be\n \t useless.  */\n+\tif (!targetm.libgcc_floating_mode_supported_p ((enum machine_mode)\n+\t\t\t\t\t\t       mode))\n+\t  continue;\n \tif (mode != TYPE_MODE (float_type_node)\n \t    && (mode != TYPE_MODE (double_type_node))\n \t    && (mode != TYPE_MODE (long_double_type_node))\n-#if defined(LIBGCC2_HAS_TF_MODE) && defined(ENABLE_LIBQUADMATH_SUPPORT)\n+#if defined(HAVE_TFmode) && defined(ENABLE_LIBQUADMATH_SUPPORT)\n \t    && (mode != TFmode)\n #endif\n \t   )"}, {"sha": "0215a1883c82f4702c9de19ecab27b92b86f0558", "filename": "gcc/genmodes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1029,6 +1029,7 @@ enum machine_mode\\n{\");\n \tint count_ = printf (\"  %smode,\", m->name);\n \tprintf (\"%*s/* %s:%d */\\n\", 27 - count_, \"\",\n \t\t trim_filename (m->file), m->line);\n+\tprintf (\"#define HAVE_%smode\\n\", m->name);\n       }\n \n   puts (\"  MAX_MACHINE_MODE,\\n\");"}, {"sha": "416837c8a6ffeaf41eea51d06fc51bf9008b22ed", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -846,7 +846,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCAN_DEBUG_WITHOUT_FP UNLIKELY_EXECUTED_TEXT_SECTION_NAME\t\\\n \tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P ALWAYS_STRIP_DOTDOT\t\\\n \tOUTPUT_ADDR_CONST_EXTRA SMALL_REGISTER_CLASSES ASM_OUTPUT_IDENT\t\\\n-\tASM_BYTE_OP MEMBER_TYPE_FORCES_BLK\n+\tASM_BYTE_OP MEMBER_TYPE_FORCES_BLK LIBGCC2_HAS_SF_MODE\t\t\\\n+\tLIBGCC2_HAS_DF_MODE LIBGCC2_HAS_XF_MODE LIBGCC2_HAS_TF_MODE\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "3944507b098b16550007b4de295d9f663f47a556", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -2985,6 +2985,16 @@ If this hook allows @code{val} to have a scalar mode, then\\n\\\n  bool, (enum machine_mode mode, unsigned HOST_WIDE_INT nelems),\n  hook_bool_mode_uhwi_false)\n \n+DEFHOOK\n+(libgcc_floating_mode_supported_p,\n+ \"Define this to return nonzero if libgcc provides support for the \\n\\\n+floating-point mode @var{mode}, which is known to pass \\n\\\n+@code{TARGET_SCALAR_MODE_SUPPORTED_P}.  The default version of this \\n\\\n+hook returns true for all of @code{SFmode}, @code{DFmode}, \\n\\\n+@code{XFmode} and @code{TFmode}, if such modes exist.\",\n+ bool, (enum machine_mode mode),\n+ default_libgcc_floating_mode_supported_p)\n+\n /* Compute cost of moving data from a register of class FROM to one of\n    TO, using MODE.  */\n DEFHOOK"}, {"sha": "9f15559f57ad7858a84e771b2db591fce484e361", "filename": "gcc/targhooks.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -424,6 +424,33 @@ default_scalar_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n+/* Return true if libgcc supports floating-point mode MODE (known to\n+   be supported as a scalar mode).  */\n+\n+bool\n+default_libgcc_floating_mode_supported_p (enum machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+#ifdef HAVE_SFmode\n+    case SFmode:\n+#endif\n+#ifdef HAVE_DFmode\n+    case DFmode:\n+#endif\n+#ifdef HAVE_XFmode\n+    case XFmode:\n+#endif\n+#ifdef HAVE_TFmode\n+    case TFmode:\n+#endif\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Make some target macros useable by target-independent code.  */\n bool\n targhook_words_big_endian (void)"}, {"sha": "581eac6d47f5ec3a83d88ae2ece2856c2d7b4660", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -67,6 +67,7 @@ extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n+extern bool default_libgcc_floating_mode_supported_p (enum machine_mode);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);\n extern bool default_float_exceptions_rounding_supported_p (void);"}, {"sha": "8814c8a49ab80544ba02ec6bb3f7dfa80ff0b405", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -1,3 +1,18 @@\n+2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libgcc2.h (LIBGCC2_HAS_SF_MODE): Define using\n+\t__LIBGCC_HAS_SF_MODE__.\n+\t(LIBGCC2_HAS_DF_MODE): Define using __LIBGCC_HAS_DF_MODE__.\n+\t(LIBGCC2_HAS_XF_MODE): Define using __LIBGCC_HAS_XF_MODE__.\n+\t(LIBGCC2_HAS_TF_MODE): Define using __LIBGCC_HAS_TF_MODE__.\n+\t* config/libbid/bid_gcc_intrinsics.h\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Do not define.\n+\t(LIBGCC2_HAS_XF_MODE): Define using __LIBGCC_HAS_XF_MODE__.\n+\t(LIBGCC2_HAS_TF_MODE): Define using __LIBGCC_HAS_TF_MODE__.\n+\t* fixed-bit.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Do not define.\n+\t(LIBGCC2_HAS_SF_MODE): Define using __LIBGCC_HAS_SF_MODE__.\n+\t(LIBGCC2_HAS_DF_MODE): Define using __LIBGCC_HAS_DF_MODE__.\n+\n 2014-09-11  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/63223"}, {"sha": "143292cd0ce6f4db51b45a96e8e5e12273781a5a", "filename": "libgcc/config/libbid/bid_gcc_intrinsics.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -31,18 +31,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tm.h\"\n #include \"libgcc_tm.h\"\n \n-#ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n-#endif\n-\n-#ifndef LIBGCC2_HAS_XF_MODE\n-#define LIBGCC2_HAS_XF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n+#ifdef __LIBGCC_HAS_XF_MODE__\n+#define LIBGCC2_HAS_XF_MODE 1\n+#else\n+#define LIBGCC2_HAS_XF_MODE 0\n #endif\n \n-#ifndef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+#ifdef __LIBGCC_HAS_TF_MODE__\n+#define LIBGCC2_HAS_TF_MODE 1\n+#else\n+#define LIBGCC2_HAS_TF_MODE 0\n #endif\n \n #ifndef BID_HAS_XF_MODE"}, {"sha": "f2053dd492ba3e880029c708c613c9a5449f3f6f", "filename": "libgcc/fixed-bit.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Ffixed-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Ffixed-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffixed-bit.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -45,19 +45,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    Ex: If we define FROM_QQ and TO_SI, the conversion from QQ to SI is\n    generated.  */\n \n-#ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n-#endif\n-\n-#ifndef LIBGCC2_HAS_SF_MODE\n-#define LIBGCC2_HAS_SF_MODE (BITS_PER_UNIT == 8)\n+#ifdef __LIBGCC_HAS_SF_MODE__\n+#define LIBGCC2_HAS_SF_MODE 1\n+#else\n+#define LIBGCC2_HAS_SF_MODE 0\n #endif\n \n-#ifndef LIBGCC2_HAS_DF_MODE\n-#define LIBGCC2_HAS_DF_MODE \\\n-  (BITS_PER_UNIT == 8 \\\n-   && (__SIZEOF_DOUBLE__ * __CHAR_BIT__ == 64 \\\n-       || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64))\n+#ifdef __LIBGCC_HAS_DF_MODE__\n+#define LIBGCC2_HAS_DF_MODE 1\n+#else\n+#define LIBGCC2_HAS_DF_MODE 0\n #endif\n \n typedef          int QItype     __attribute__ ((mode (QI)));"}, {"sha": "597b0ac1de7e73136bc0a857b220f44d388b57ee", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc4b7a26dc6a99a3c0a232a583917ab0100b731/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=8cc4b7a26dc6a99a3c0a232a583917ab0100b731", "patch": "@@ -38,25 +38,28 @@ extern void __eprintf (const char *, const char *, unsigned int, const char *)\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n #endif\n \n-#ifndef LIBGCC2_HAS_SF_MODE\n-#define LIBGCC2_HAS_SF_MODE (BITS_PER_UNIT == 8)\n+#ifdef __LIBGCC_HAS_SF_MODE__\n+#define LIBGCC2_HAS_SF_MODE 1\n+#else\n+#define LIBGCC2_HAS_SF_MODE 0\n #endif\n \n-#ifndef LIBGCC2_HAS_DF_MODE\n-#define LIBGCC2_HAS_DF_MODE \\\n-  (BITS_PER_UNIT == 8 \\\n-   && (__SIZEOF_DOUBLE__ * __CHAR_BIT__ == 64 \\\n-       || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64))\n+#ifdef __LIBGCC_HAS_DF_MODE__\n+#define LIBGCC2_HAS_DF_MODE 1\n+#else\n+#define LIBGCC2_HAS_DF_MODE 0\n #endif\n \n-#ifndef LIBGCC2_HAS_XF_MODE\n-#define LIBGCC2_HAS_XF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n+#ifdef __LIBGCC_HAS_XF_MODE__\n+#define LIBGCC2_HAS_XF_MODE 1\n+#else\n+#define LIBGCC2_HAS_XF_MODE 0\n #endif\n \n-#ifndef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+#ifdef __LIBGCC_HAS_TF_MODE__\n+#define LIBGCC2_HAS_TF_MODE 1\n+#else\n+#define LIBGCC2_HAS_TF_MODE 0\n #endif\n \n #ifndef __LIBGCC_SF_MANT_DIG__"}]}