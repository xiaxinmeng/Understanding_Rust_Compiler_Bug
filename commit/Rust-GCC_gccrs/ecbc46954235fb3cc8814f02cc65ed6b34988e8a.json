{"sha": "ecbc46954235fb3cc8814f02cc65ed6b34988e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiYzQ2OTU0MjM1ZmIzY2M4ODE0ZjAyY2M2NWVkNmIzNDk4OGU4YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-11T03:03:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-11T03:03:34Z"}, "message": "(save_386_machine_status): New functions.\n\n(restore_386_machine_status)\n(save_386_machine_status): New functions.\n(clear_386_stack_locals): Store those functions in\nsave_machine_status, restore_machine_status.\n(struct machine_function): New structure definition.\n\nFrom-SVN: r5723", "tree": {"sha": "84d0e53b332d12a2bc041c1f529af2f074a512d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84d0e53b332d12a2bc041c1f529af2f074a512d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecbc46954235fb3cc8814f02cc65ed6b34988e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbc46954235fb3cc8814f02cc65ed6b34988e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbc46954235fb3cc8814f02cc65ed6b34988e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbc46954235fb3cc8814f02cc65ed6b34988e8a/comments", "author": null, "committer": null, "parents": [{"sha": "d6e1b011e1d6d4fe2a87b516ee6695a97f17d80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e1b011e1d6d4fe2a87b516ee6695a97f17d80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e1b011e1d6d4fe2a87b516ee6695a97f17d80b"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "8ef428910d0fb6d8654ea77eb9e26001d5f6faae", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbc46954235fb3cc8814f02cc65ed6b34988e8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbc46954235fb3cc8814f02cc65ed6b34988e8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ecbc46954235fb3cc8814f02cc65ed6b34988e8a", "patch": "@@ -31,6 +31,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"insn-attr.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n+#include \"function.h\"\n \n #ifdef EXTRA_CONSTRAINT\n /* If EXTRA_CONSTRAINT is defined, then the 'S'\n@@ -2052,9 +2053,37 @@ output_fp_cc0_set (insn)\n \n static rtx i386_stack_locals[(int) MAX_MACHINE_MODE][MAX_386_STACK_LOCALS];\n \n+/* Define the structure for the machine field in struct function.  */\n+struct machine_function\n+{\n+  rtx i386_stack_locals[(int) MAX_MACHINE_MODE][MAX_386_STACK_LOCALS];\n+};\n+\n+/* Functions to save and restore i386_stack_locals.\n+   These will be called, via pointer variables,\n+   from push_function_context and pop_function_context.  */\n+\n+void\n+save_386_machine_status (p)\n+     struct function *p;\n+{\n+  p->machine = (struct machine_function *) xmalloc (sizeof i386_stack_locals);\n+  bcopy (i386_stack_locals, p->machine->i386_stack_locals,\n+\t sizeof i386_stack_locals);\n+}\n+\n+void\n+restore_386_machine_status (p)\n+     struct function *p;\n+{\n+  bcopy (p->machine->i386_stack_locals, i386_stack_locals,\n+\t sizeof i386_stack_locals);\n+  free (p->machine);\n+}\n+\n /* Clear stack slot assignments remembered from previous functions.\n    This is called from INIT_EXPANDERS once before RTL is emitted for each\n-   function. */\n+   function.  */\n \n void\n clear_386_stack_locals ()\n@@ -2066,6 +2095,10 @@ clear_386_stack_locals ()\n        mode = (enum machine_mode) ((int) mode + 1))\n     for (n = 0; n < MAX_386_STACK_LOCALS; n++)\n       i386_stack_locals[(int) mode][n] = NULL_RTX;\n+\n+  /* Arrange to save and restore i386_stack_locals around nested functions.  */\n+  save_machine_status = save_386_machine_status;\n+  restore_machine_status = restore_386_machine_status;\n }\n \n /* Return a MEM corresponding to a stack slot with mode MODE."}]}