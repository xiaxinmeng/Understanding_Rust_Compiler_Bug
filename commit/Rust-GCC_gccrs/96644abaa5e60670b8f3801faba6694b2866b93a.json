{"sha": "96644abaa5e60670b8f3801faba6694b2866b93a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2NDRhYmFhNWU2MDY3MGI4ZjM4MDFmYWJhNjY5NGIyODY2YjkzYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-13T20:09:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-13T20:09:10Z"}, "message": "re PR tree-optimization/29446 (VRP ICE in compare_names)\n\n2006-10-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/29446\n\t* tree-vrp.c (fix_equivalence_set): Remove.\n\t(extract_range_from_assert): Do not call fix_equivalence_set.\n\t(debug_value_range): Print a newline.\n\t(compare_name_with_value): For equivalence sets with\n\tinconsistent value ranges conservatively bail out.\n\t(compare_names): Likewise.\n\n\t* gcc.dg/torture/pr29446.c: New testcase.\n\nFrom-SVN: r117705", "tree": {"sha": "a9303b29ceddb34952d7b02a412ec28a7fc868d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9303b29ceddb34952d7b02a412ec28a7fc868d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96644abaa5e60670b8f3801faba6694b2866b93a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96644abaa5e60670b8f3801faba6694b2866b93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96644abaa5e60670b8f3801faba6694b2866b93a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96644abaa5e60670b8f3801faba6694b2866b93a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4010308ce53f36930935a230441630c8f5e79b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4010308ce53f36930935a230441630c8f5e79b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4010308ce53f36930935a230441630c8f5e79b86"}], "stats": {"total": 161, "additions": 70, "deletions": 91}, "files": [{"sha": "d242366e058128fb38ffb8421e2b1d400186ca8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96644abaa5e60670b8f3801faba6694b2866b93a", "patch": "@@ -1,3 +1,13 @@\n+2006-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/29446\n+\t* tree-vrp.c (fix_equivalence_set): Remove.\n+\t(extract_range_from_assert): Do not call fix_equivalence_set.\n+\t(debug_value_range): Print a newline.\n+\t(compare_name_with_value): For equivalence sets with\n+\tinconsistent value ranges conservatively bail out.\n+\t(compare_names): Likewise.\n+\n 2006-10-13  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/install.texi (*-ibm-aix*): Add comment about 32-bit GMP"}, {"sha": "5e90addb26bc5b7570f192ecc783c609e78f5e55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96644abaa5e60670b8f3801faba6694b2866b93a", "patch": "@@ -1,3 +1,8 @@\n+2006-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/29446\n+\t* gcc.dg/torture/pr29446.c: New testcase.\n+\n 2006-10-13  Bill Wendling  <wendling@apple.com>\n  \n \t* g++.old-deja/g++.brendan/scope5.C: Changed \"Class\" to \"Klasse\"."}, {"sha": "5571c71e82a96b5dcfa14fc2474100f715b6dc8f", "filename": "gcc/testsuite/gcc.dg/torture/pr29446.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr29446.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr29446.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr29446.c?ref=96644abaa5e60670b8f3801faba6694b2866b93a", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+\n+void f(_Bool D917, int j0, int ubound1, int ubound5)\n+{\n+  int i, j = j0;\n+  int (*abc)[3];\n+  i = 1;\n+  while (1)\n+    {\n+       if (j <= 3)\n+         while (1)\n+           {\n+              if (i != j)\n+                {\n+                  if (ubound1 <= 0)\n+                    return;\n+                  (*abc)[1] = 0;\n+                }\n+               else\n+                 {\n+                    if (j > ubound1)\n+                      return;\n+                    if (ubound5 <= 0)\n+                      return;\n+                  }\n+               j = j + 1;\n+               if (D917)\n+                 break;\n+           }\n+    i = i + 1;\n+  }\n+}"}, {"sha": "8e67e8a3d2b327f3ee0ba1ab25f946a61a040803", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 91, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96644abaa5e60670b8f3801faba6694b2866b93a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=96644abaa5e60670b8f3801faba6694b2866b93a", "patch": "@@ -724,86 +724,6 @@ ssa_name_nonzero_p (tree t)\n }\n \n \n-/* When extracting ranges from X_i = ASSERT_EXPR <Y_j, pred>, we will\n-   initially consider X_i and Y_j equivalent, so the equivalence set\n-   of Y_j is added to the equivalence set of X_i.  However, it is\n-   possible to have a chain of ASSERT_EXPRs whose predicates are\n-   actually incompatible.  This is usually the result of nesting of\n-   contradictory if-then-else statements.  For instance, in PR 24670:\n-\n-   \tcount_4 has range [-INF, 63]\n-\n-   \tif (count_4 != 0)\n-\t  {\n-\t    count_19 = ASSERT_EXPR <count_4, count_4 != 0>\n-\t    if (count_19 > 63)\n-\t      {\n-\t        count_18 = ASSERT_EXPR <count_19, count_19 > 63>\n-\t\tif (count_18 <= 63)\n-\t\t  ...\n-\t      }\n-\t  }\n-\n-   Notice that 'if (count_19 > 63)' is trivially false and will be\n-   folded out at the end.  However, during propagation, the flowgraph\n-   is not cleaned up and so, VRP will evaluate predicates more\n-   predicates than necessary, so it must support these\n-   inconsistencies.  The problem here is that because of the chaining\n-   of ASSERT_EXPRs, the equivalency set for count_18 includes count_4.\n-   Since count_4 has an incompatible range, we ICE when evaluating the\n-   ranges in the equivalency set.  So, we need to remove count_4 from\n-   it.  */\n-\n-static void\n-fix_equivalence_set (value_range_t *vr_p)\n-{\n-  bitmap_iterator bi;\n-  unsigned i;\n-  bitmap e = vr_p->equiv;\n-  bitmap to_remove;\n-\n-  /* Only detect inconsistencies on numeric ranges.  */\n-  if (vr_p->type == VR_VARYING\n-      || vr_p->type == VR_UNDEFINED\n-      || symbolic_range_p (vr_p))\n-    return;\n-\n-  to_remove = BITMAP_ALLOC (NULL);\n-  EXECUTE_IF_SET_IN_BITMAP (e, 0, i, bi)\n-    {\n-      value_range_t *equiv_vr = vr_value[i];\n-\n-      if (equiv_vr->type == VR_VARYING\n-\t  || equiv_vr->type == VR_UNDEFINED)\n-\tcontinue;\n-\n-      if (vr_p->type == VR_RANGE\n-\t  && equiv_vr->type == VR_RANGE)\n-\t{\n-\t  /* Two ranges have an empty intersection if their end points\n-\t     are outside of the other range.  */\n-\t  if (compare_values (equiv_vr->min, vr_p->max) == 1\n-\t      || compare_values (equiv_vr->max, vr_p->min) == -1)\n-\t    bitmap_set_bit (to_remove, i);\n-\t}\n-      else if ((equiv_vr->type == VR_RANGE && vr_p->type == VR_ANTI_RANGE)\n-\t       || (equiv_vr->type == VR_ANTI_RANGE && vr_p->type == VR_RANGE))\n-\t{\n-\t  /* A range and an anti-range have an empty intersection if\n-\t     their end points are the same.  FIXME,\n-\t     value_ranges_intersect_p should handle this\n-\t     automatically.  */\n-\t  if (compare_values (equiv_vr->min, vr_p->min) == 0\n-\t      && compare_values (equiv_vr->max, vr_p->max) == 0)\n-\t    bitmap_set_bit (to_remove, i);\n-\t}\n-    }\n-\n-  bitmap_and_compl_into (vr_p->equiv, to_remove);\n-  BITMAP_FREE (to_remove);\n-}\n-\n-\n /* Extract value range information from an ASSERT_EXPR EXPR and store\n    it in *VR_P.  */\n \n@@ -1056,7 +976,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n       || var_vr->type == VR_UNDEFINED\n       || symbolic_range_p (vr_p)\n       || symbolic_range_p (var_vr))\n-    goto done;\n+    return;\n \n   if (var_vr->type == VR_RANGE && vr_p->type == VR_RANGE)\n     {\n@@ -1191,11 +1111,6 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t    }\n \t}\n     }\n-\n-  /* Remove names from the equivalence set that have ranges\n-     incompatible with VR_P.  */\n-done:\n-  fix_equivalence_set (vr_p);\n }\n \n \n@@ -2438,6 +2353,7 @@ void\n debug_value_range (value_range_t *vr)\n {\n   dump_value_range (stderr, vr);\n+  fprintf (stderr, \"\\n\");\n }\n \n \n@@ -3555,8 +3471,16 @@ compare_name_with_value (enum tree_code comp, tree var, tree val)\n       t = compare_range_with_value (comp, &equiv_vr, val);\n       if (t)\n \t{\n-\t  /* All the ranges should compare the same against VAL.  */\n-\t  gcc_assert (retval == NULL || t == retval);\n+\t  /* If we get different answers from different members\n+\t     of the equivalence set this check must be in a dead\n+\t     code region.  Folding it to a trap representation\n+\t     would be correct here.  For now just return don't-know.  */\n+\t  if (retval != NULL\n+\t      && t != retval)\n+\t    {\n+\t      retval = NULL_TREE;\n+\t      break;\n+\t    }\n \t  retval = t;\n \t}\n     }\n@@ -3638,9 +3562,17 @@ compare_names (enum tree_code comp, tree n1, tree n2)\n \t  t = compare_ranges (comp, &vr1, &vr2);\n \t  if (t)\n \t    {\n-\t      /* All the ranges in the equivalent sets should compare\n-\t\t the same.  */\n-\t      gcc_assert (retval == NULL || t == retval);\n+\t      /* If we get different answers from different members\n+\t\t of the equivalence set this check must be in a dead\n+\t\t code region.  Folding it to a trap representation\n+\t\t would be correct here.  For now just return don't-know.  */\n+\t      if (retval != NULL\n+\t\t  && t != retval)\n+\t\t{\n+\t\t  bitmap_clear_bit (e1, SSA_NAME_VERSION (n1));\n+\t\t  bitmap_clear_bit (e2, SSA_NAME_VERSION (n2));\n+\t\t  return NULL_TREE;\n+\t\t}\n \t      retval = t;\n \t    }\n \t}"}]}