{"sha": "4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5YWFmNjM3OWRiMzZmNGFiOTA4NzVhOGFhZWY0ZTNjOTgyNjliNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-22T23:09:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-22T23:09:04Z"}, "message": "Audit for LANG independence.\n\n\n2002-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tAudit for LANG independence.\n\t* include/bits/localefwd.h: Tweaks.\n\t* include/bits/locale_facets.tcc (money_get::do_get(long double)):\n\tUse __convert_to_v.\n\t(time_get::do_get_year): Same.\n\t(__convert_from_v): Add.\n\t(num_put::_M_convert_float): Use.\n\t(num_put::_M_convert_int): Same.\n\t(money_put::do_put): Same.\n\n\t* src/locale-inst.cc: Add instantiations for __convert_from_v.\n\t* config/locale/time_members_gnu.cc: Cleanup setlocale usage.\n\t* config/locale/time_members_generic.cc:\n\t* config/locale/messages_members_gnu.cc: Same.\n\t* config/locale/messages_members_gnu.h: Same.\n\n\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test02): New.\n\t* testsuite/22_locale/codecvt_members_char_char.cc (test02): New.\n\t* testsuite/22_locale/collate_members_wchar_t.cc (test02): New.\n\t* testsuite/22_locale/collate_members_char.cc (test02): New.\n\t* testsuite/22_locale/ctype_members_wchar_t.cc (test03): New.\n\t* testsuite/22_locale/ctype_members_char.cc (test03): New.\n\t* testsuite/22_locale/messages_members_char.cc (test02): New.\n\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test02): New.\n\t* testsuite/22_locale/moneypunct_members_char.cc (test02): New.\n\t* testsuite/22_locale/money_get_members_wchar_t.cc (test04): New.\n\t* testsuite/22_locale/money_get_members_char.cc (test04): New.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc (test04): New.\n\t* testsuite/22_locale/money_put_members_char.cc (test04): New.\n\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test02): New.\n\t* testsuite/22_locale/numpunct_members_char.cc (test02): New.\n\t* testsuite/22_locale/time_put_members_wchar_t.cc (test03): New.\n\t* testsuite/22_locale/time_put_members_char.cc (test03): New.\n\t* testsuite/22_locale/time_get_members_wchar_t.cc (test07): New.\n\t* testsuite/22_locale/time_get_members_char.cc (test07): New.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc (test03): New.\n\t* testsuite/22_locale/num_get_members_char.cc (test03): New.\n\t* testsuite/22_locale/num_put_members_wchar_t.cc (test03): New.\n\t* testsuite/22_locale/num_put_members_char.cc (test03): New.\n\n\t* testsuite/22_locale/time_get_members_char.cc: Fixups for global\n\tlocale issues.\n\t* testsuite/22_locale/time_get_members_char.cc: Same.\n\n2002-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/5280\n\t* include/bits/localefwd.h: Tweak comments.\n\t* include/bits/locale_facets.h (__convert_to_v): Add.\n\t* include/bits/locale_facets.tcc (num_get::do_get(double)): Use it.\n\t(num_get::do_get(float)): Same.\n\t(num_get::do_get(long double)): Same.\n\t(num_get::do_get(bool)): Same.\n\t(num_get::do_get(long)): Same.\n\t(num_get::do_get(long long)): Same.\n\t(num_get::do_get(unsigned int)): Same.\n\t(num_get::do_get(unsigned short)): Same.\n\t(num_get::do_get(unsigned long)): Same.\n\t(num_get::do_get(unsigned long long)): Same.\n\t* config/locale/c_locale_gnu.cc (__convert_to_v): Specialize.\n\t* config/locale/c_locale_generic.cc: Same.\n\nFrom-SVN: r49108", "tree": {"sha": "8a88f2303e94580a91a48af4702d7419f4f44bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a88f2303e94580a91a48af4702d7419f4f44bd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/comments", "author": null, "committer": null, "parents": [{"sha": "98c3a44f25ca90b1a9f0d0f6c981077ef72ebf3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c3a44f25ca90b1a9f0d0f6c981077ef72ebf3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c3a44f25ca90b1a9f0d0f6c981077ef72ebf3e"}], "stats": {"total": 1142, "additions": 915, "deletions": 227}, "files": [{"sha": "d039be95c0842d8a15a27a8e9670163156c7427b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,3 +1,67 @@\n+2002-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tAudit for LANG independence.\n+\t* include/bits/localefwd.h: Tweaks.\n+\t* include/bits/locale_facets.tcc (money_get::do_get(long double)):\n+\tUse __convert_to_v.\n+\t(time_get::do_get_year): Same.\n+\t(__convert_from_v): Add.\n+\t(num_put::_M_convert_float): Use.\n+\t(num_put::_M_convert_int): Same.\n+\t(money_put::do_put): Same.\n+\t\n+\t* src/locale-inst.cc: Add instantiations for __convert_from_v.\n+\t* config/locale/time_members_gnu.cc: Cleanup setlocale usage.\n+\t* config/locale/time_members_generic.cc: \n+\t* config/locale/messages_members_gnu.cc: Same.\n+\t* config/locale/messages_members_gnu.h: Same.\n+\t\n+\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test02): New.\n+\t* testsuite/22_locale/codecvt_members_char_char.cc (test02): New.\n+\t* testsuite/22_locale/collate_members_wchar_t.cc (test02): New.\n+\t* testsuite/22_locale/collate_members_char.cc (test02): New.\n+\t* testsuite/22_locale/ctype_members_wchar_t.cc (test03): New.\n+\t* testsuite/22_locale/ctype_members_char.cc (test03): New.\n+\t* testsuite/22_locale/messages_members_char.cc (test02): New.\n+\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test02): New.\n+\t* testsuite/22_locale/moneypunct_members_char.cc (test02): New.\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc (test04): New.\n+\t* testsuite/22_locale/money_get_members_char.cc (test04): New.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc (test04): New.\n+\t* testsuite/22_locale/money_put_members_char.cc (test04): New.\n+\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test02): New.\n+\t* testsuite/22_locale/numpunct_members_char.cc (test02): New.\n+\t* testsuite/22_locale/time_put_members_wchar_t.cc (test03): New.\n+\t* testsuite/22_locale/time_put_members_char.cc (test03): New.\n+\t* testsuite/22_locale/time_get_members_wchar_t.cc (test07): New.\n+\t* testsuite/22_locale/time_get_members_char.cc (test07): New.\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc (test03): New.\n+\t* testsuite/22_locale/num_get_members_char.cc (test03): New.\n+\t* testsuite/22_locale/num_put_members_wchar_t.cc (test03): New.\n+\t* testsuite/22_locale/num_put_members_char.cc (test03): New.\n+\n+\t* testsuite/22_locale/time_get_members_char.cc: Fixups for global\n+\tlocale issues.\n+\t* testsuite/22_locale/time_get_members_char.cc: Same.\n+\t\n+2002-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/5280\n+\t* include/bits/localefwd.h: Tweak comments.\n+\t* include/bits/locale_facets.h (__convert_to_v): Add.\n+\t* include/bits/locale_facets.tcc (num_get::do_get(double)): Use it.\n+\t(num_get::do_get(float)): Same.\n+\t(num_get::do_get(long double)): Same.\n+\t(num_get::do_get(bool)): Same.\n+\t(num_get::do_get(long)): Same.\n+\t(num_get::do_get(long long)): Same.\n+\t(num_get::do_get(unsigned int)): Same.\n+\t(num_get::do_get(unsigned short)): Same.\n+\t(num_get::do_get(unsigned long)): Same.\n+\t(num_get::do_get(unsigned long long)): Same.\n+\t* config/locale/c_locale_gnu.cc (__convert_to_v): Specialize.\n+\t* config/locale/c_locale_generic.cc: Same.\n+\t\n 2002-01-22  Loren Rittle <ljrittle@acm.org>\n \n \t* include/Makefile.am (c_base_builddir): Remove redundant slash."}, {"sha": "7133cd33edb3ecf95966a46c35127f105fafeef3", "filename": "libstdc++-v3/config/locale/c_locale_generic.cc", "status": "modified", "additions": 144, "deletions": 1, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,149 @@\n \n namespace std \n {\n+  // Specializations for all types used in num_get.\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale&, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+      {\n+\tchar* __sanity;\n+\terrno = 0;\n+\tlong __l = strtol(__s, &__sanity, __base);\n+\tif (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t  __v = __l;\n+\telse\n+\t  __err |= ios_base::failbit;\n+      }\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, unsigned long& __v, \n+\t\t   ios_base::iostate& __err, const __c_locale&, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  unsigned long __ul = strtoul(__s, &__sanity, __base);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ul;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale&, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  long long __ll = strtoll(__s, &__sanity, __base);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ll;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, unsigned long long& __v, \n+\t\t   ios_base::iostate& __err, const __c_locale&, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{      \n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  unsigned long long __ull = strtoull(__s, &__sanity, __base);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ull;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}  \n+    }\n+#endif\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale&, int) \t      \n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  // Assumes __s formatted for \"C\" locale.\n+\t  const char* __old = setlocale(LC_ALL, \"C\");\n+\t  char* __sanity;\n+\t  errno = 0;\n+#ifdef _GLIBCPP_USE_C99\n+\t  float __f = strtof(__s, &__sanity);\n+#else\n+\t  float __f = static_cast<float>(strtod(__s, &__sanity));\n+#endif\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __f;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t  setlocale(LC_ALL, __old);\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale&, int) \n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  // Assumes __s formatted for \"C\" locale.\n+\t  const char* __old = setlocale(LC_ALL, \"C\");\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  double __d = strtod(__s, &__sanity);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __d;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t  setlocale(LC_ALL, __old);\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long double& __v, \n+\t\t   ios_base::iostate& __err, const __c_locale&, int) \n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  // Assumes __s formatted for \"C\" locale.\n+\t  const char* __old = setlocale(LC_ALL, \"C\");\n+#if defined(_GLIBCPP_USE_C99) && !defined(__hpux)\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  long double __ld = strtold(__s, &__sanity);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ld;\n+#else\n+\t  typedef typename char_traits<_CharT>::int_type int_type;\n+\t  long double __ld;\n+\t  int __p = sscanf(__s, \"%Lf\", &__ld);\n+\t  if (__p && static_cast<int_type>(__p) != char_traits<_CharT>::eof())\n+\t    __v = __ld;\n+#endif\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t  setlocale(LC_ALL, __old);\n+\t}\n+    }\n+\n   void\n   locale::facet::_S_create_c_locale(__c_locale& __cloc, const char*)\n   { __cloc = NULL; }"}, {"sha": "1129f872ca9f21cc9d23ba654341a1556c87d846", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,130 @@\n \n namespace std \n {\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+      {\n+\tchar* __sanity;\n+\terrno = 0;\n+\tlong __l = __strtol_l(__s, &__sanity, __base, __cloc);\n+\tif (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t  __v = __l;\n+\telse\n+\t  __err |= ios_base::failbit;\n+      }\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, unsigned long& __v, \n+\t\t   ios_base::iostate& __err, const __c_locale& __cloc, \n+\t\t   int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  unsigned long __ul = __strtoul_l(__s, &__sanity, __base, __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ul;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  long long __ll = __strtoll_l(__s, &__sanity, __base, __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ll;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, unsigned long long& __v, \n+\t\t   ios_base::iostate& __err, const __c_locale& __cloc, \n+\t\t   int __base)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{      \n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  unsigned long long __ull = __strtoull_l(__s, &__sanity, __base, \n+\t\t\t\t\t\t  __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ull;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}  \n+    }\n+#endif\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  float __f = __strtof_l(__s, &__sanity, __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __f;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  double __d = __strtod_l(__s, &__sanity, __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __d;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long double& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale& __cloc, int)\n+    {\n+      if (!(__err & ios_base::failbit))\n+\t{\n+\t  char* __sanity;\n+\t  errno = 0;\n+\t  long double __ld = __strtold_l(__s, &__sanity, __cloc);\n+          if (__sanity != __s && *__sanity == '\\0' && errno == 0)\n+\t    __v = __ld;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\t}\n+    }\n+\n   void\n   locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s)\n   {"}, {"sha": "bd2252d0537a8a30733e8b9e2837725f4b7a8ad6", "filename": "libstdc++-v3/config/locale/messages_members_gnu.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,8 +49,9 @@ namespace std\n       uselocale(__old);\n       return string(__msg);\n #else\n-      setlocale(LC_ALL, _M_name_messages);\n+      const char* __old = setlocale(LC_ALL, _M_name_messages);\n       const char* __msg = gettext(__dfault.c_str());\n+      setlocale(LC_ALL, __old);\n       return string(__msg);\n #endif\n     }"}, {"sha": "a83bafff5f1033be6a8072a057f17729f177dd54", "filename": "libstdc++-v3/config/locale/messages_members_gnu.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,8 +66,9 @@\n       uselocale(__old);\n       return _M_convert_from_char(__msg);\n #else\n-      setlocale(LC_ALL, _M_name_messages);\n+      const char* __old = setlocale(LC_ALL, _M_name_messages);\n       char* __msg = gettext(_M_convert_to_char(__dfault));\n+      setlocale(LC_ALL, __old);\n       return _M_convert_from_char(__msg);\n #endif\n     }"}, {"sha": "7a511e3a36a4737feb33eec6be343c689ac3750c", "filename": "libstdc++-v3/config/locale/numpunct_members_generic.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "de9e386fd46705aba117957a5652513c2400fef7", "filename": "libstdc++-v3/config/locale/numpunct_members_gnu.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "e546f30a0dbb1507379313069377be52dfb1f41a", "filename": "libstdc++-v3/config/locale/time_members_generic.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +44,9 @@ namespace std\n     _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n \t\t  const tm* __tm) const\n     {\n-      setlocale(LC_ALL, _M_name_timepunct);\n+      const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm);\n+      setlocale(LC_ALL, __old);\n     }\n \n   template<> \n@@ -117,8 +118,9 @@ namespace std\n     _M_put_helper(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n \t\t  const tm* __tm) const\n     {\n-      setlocale(LC_ALL, _M_name_timepunct);\n+      const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       wcsftime(__s, __maxlen, __format, __tm);\n+      setlocale(LC_ALL, __old);\n     }\n \n   template<> "}, {"sha": "f00ec4a89c814b4d11ed3362b8f5d722c8c25301", "filename": "libstdc++-v3/config/locale/time_members_gnu.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,8 +51,9 @@ namespace std\n       else\n \tstrftime(__s, __maxlen, __format, __tm);\n #else\n-      setlocale(LC_ALL, _M_name_timepunct);\n+      const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm);\n+      setlocale(LC_ALL, __old);\n #endif\n     }\n \n@@ -195,8 +196,9 @@ namespace std\n       else\n \twcsftime(__s, __maxlen, __format, __tm);\n #else\n-      setlocale(LC_ALL, _M_name_timepunct);\n+      const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       wcsftime(__s, __maxlen, __format, __tm);\n+      setlocale(LC_ALL, __old);\n #endif\n     }\n "}, {"sha": "98e1c073d57246c6df79aab12bb5800d06529c5d", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,15 +46,15 @@\n #ifdef _GLIBCPP_USE_WCHAR_T\n # include <cwctype>\t// For wctype_t\n #endif \n-#include <ios>\t// For ios_base\n+#include <ios>\t\t// For ios_base\n \n namespace std\n {\n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base.\n   #include <bits/ctype_base.h>\n \n-  // __ctype_abstract_base is the common base for ctype<_CharT>.  \n+  // Common base for ctype<_CharT>.  \n   template<typename _CharT>\n     class __ctype_abstract_base : public locale::facet, public ctype_base\n     {\n@@ -417,9 +418,9 @@ namespace std\n \n \n   // 22.2.2  The numeric category.\n-  class __num_base\n+  class __num_base \n   {\n-  public:\n+  protected:\n     // Used to establish gating factor for base 16 input.\n     static const double _S_scale_hex;\n     \n@@ -438,6 +439,7 @@ namespace std\n       _M_size = 21 + 1\n     };\n \n+    // num_put\n     // Construct and return valid scanf format for floating point types.\n     static bool\n     _S_format_float(const ios_base& __io, char* __fptr, char __mod, \n@@ -448,6 +450,7 @@ namespace std\n     _S_format_int(const ios_base& __io, char* __fptr, char __mod, char __modl);\n   };\n \n+\n   template<typename _CharT>\n     class numpunct : public locale::facet\n     {\n@@ -885,7 +888,7 @@ namespace std\n \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform_helper(wchar_t*, const wchar_t*, \n+    collate<wchar_t>::_M_transform_helper(wchar_t*, const wchar_t*,\n \t\t\t\t\t  size_t) const;\n #endif\n "}, {"sha": "64c92ec1ca1a16d2c51d3e41800fcaf1dfb77091", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 76, "deletions": 178, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,9 +40,9 @@\n #include <cctype>    // For isspace\n #include <limits>    // For numeric_limits\n #include <memory>    // For auto_ptr\n-#include <bits/streambuf_iterator.h>     // For streambuf_iterators\n-#include <typeinfo> \t\t// For bad_cast\n+#include <bits/streambuf_iterator.h>\n #include <vector>\t\n+#include <typeinfo>  // For bad_cast.\n \n namespace std\n {\n@@ -87,6 +88,7 @@ namespace std\n     }\n \n \n+  // Stage 1: Determine a conversion specifier.\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -97,7 +99,7 @@ namespace std\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n       const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n \n-      // Check first for sign.\n+      // First check for sign.\n       const char_type __plus = __ctype.widen('+');\n       const char_type __minus = __ctype.widen('-');\n       int __pos = 0;\n@@ -216,6 +218,7 @@ namespace std\n       return __beg;\n     }\n \n+  // Stage 1: Determine a conversion specifier.\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -227,7 +230,6 @@ namespace std\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n       const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n  \n-      // Stage 1: determine a conversion specifier.\n       // NB: Iff __basefield == 0, this can change based on contents.\n       ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n       if (__basefield == ios_base::oct)\n@@ -381,13 +383,12 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, bool& __v) const\n     {\n-      // Parse bool values as long\n+      // Parse bool values as unsigned long\n       if (!(__io.flags() & ios_base::boolalpha))\n         {\n           // NB: We can't just call do_get(long) here, as it might\n           // refer to a derived class.\n \n-          // Stage 1: extract and determine the conversion specifier.\n           // Assuming leading zeros eliminated, thus the size of 32 for\n           // integral types\n           char __xtrc[32];\n@@ -399,23 +400,19 @@ namespace std\n           __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t\t numeric_limits<bool>::digits10 + 1, __base);\n \n-          // Stage 2: convert and store results.\n-          char* __sanity;\n-          errno = 0;\n-          long __l = strtol(__xtrc, &__sanity, __base);\n-          if (!(__err & ios_base::failbit)\n-              && __l <= 1\n-              && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-            __v = __l;\n-          else\n+\t  unsigned long __ul; \n+\t  __convert_to_v(__xtrc, __ul, __err, _S_c_locale, __base);\n+\t  if (!(__err & ios_base::failbit) && __ul <= 1)\n+\t    __v = __ul;\n+\t  else \n             __err |= ios_base::failbit;\n         }\n \n       // Parse bool values as alphanumeric\n       else\n         {\n           locale __loc = __io.getloc();\n-\t  const numpunct<char_type>& __np = use_facet<numpunct<char_type> >(__loc); \n+\t  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc); \n           const char_type* __true = __np.truename().c_str();\n           const char_type* __false = __np.falsename().c_str();\n \n@@ -456,23 +453,13 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, long& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t     numeric_limits<long>::digits10 + 1, __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      long __l = strtol(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-        __v = __l;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc, __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -482,25 +469,19 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned short& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t     numeric_limits<unsigned short>::digits10 + 1,\n \t\t\t     __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      unsigned long __ul = strtoul(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0\n-          && __ul <= USHRT_MAX)\n-        __v = static_cast<unsigned short>(__ul);\n-      else\n-        __err |= ios_base::failbit;\n+      unsigned long __ul;\n+      __convert_to_v(__xtrc, __ul, __err, _S_c_locale, __base);\n+      if (!(__err & ios_base::failbit) && __ul <= USHRT_MAX)\n+\t__v = static_cast<unsigned short>(__ul);\n+      else \n+\t__err |= ios_base::failbit;\n       return __beg;\n     }\n \n@@ -510,25 +491,19 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned int& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t     numeric_limits<unsigned int>::digits10 + 1,\n \t\t\t     __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      unsigned long __ul = strtoul(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0\n-          && __ul <= UINT_MAX)\n-        __v = static_cast<unsigned int>(__ul);\n-      else\n-        __err |= ios_base::failbit;\n+      unsigned long __ul;\n+      __convert_to_v(__xtrc, __ul, __err, _S_c_locale, __base);\n+      if (!(__err & ios_base::failbit) && __ul <= UINT_MAX)\n+\t__v = static_cast<unsigned int>(__ul);\n+      else \n+\t__err |= ios_base::failbit;\n       return __beg;\n     }\n \n@@ -538,24 +513,14 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned long& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t     numeric_limits<unsigned long>::digits10 + 1,\n \t\t\t     __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      unsigned long __ul = strtoul(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-        __v = __ul;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc, __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -566,23 +531,13 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, long long& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n \t\t\t     numeric_limits<long long>::digits10 + 1, __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      long long __ll = strtoll(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-        __v = __ll;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc, __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -592,24 +547,14 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned long long& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc,\n \t\t\t     numeric_limits<unsigned long long>::digits10 + 1,\n \t\t\t     __base);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      unsigned long long __ull = strtoull(__xtrc, &__sanity, __base);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-        __v = __ull;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc, __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n #endif\n@@ -620,24 +565,10 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io, \n \t   ios_base::iostate& __err, float& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-#ifdef _GLIBCPP_USE_C99\n-      float __f = strtof(__xtrc.c_str(), &__sanity);\n-#else\n-      float __f = static_cast<float>(strtod(__xtrc.c_str(), &__sanity));\n-#endif\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc.c_str() && *__sanity == '\\0' && errno == 0)\n-        __v = __f;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -647,20 +578,10 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, double& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      double __d = strtod(__xtrc.c_str(), &__sanity);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc.c_str() && *__sanity == '\\0' && errno == 0)\n-        __v = __d;\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -670,42 +591,10 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, long double& __v) const\n     {\n-      // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-\n-#if defined(_GLIBCPP_USE_C99) && !defined(__hpux)\n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      long double __ld = strtold(__xtrc.c_str(), &__sanity);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc.c_str() && *__sanity == '\\0' && errno == 0)\n-        __v = __ld;\n-#else\n-      // Stage 2: determine a conversion specifier.\n-      ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n-      const char* __conv;\n-      if (__basefield == ios_base::oct)\n-        __conv = \"%Lo\";\n-      else if (__basefield == ios_base::hex)\n-        __conv = \"%LX\";\n-      else if (__basefield == 0)\n-        __conv = \"%Li\";\n-      else\n-        __conv = \"%Lf\";\n-\n-      // Stage 3: store results.\n-      typedef typename char_traits<_CharT>::int_type int_type;\n-      long double __ld;\n-      int __p = sscanf(__xtrc.c_str(), __conv, &__ld);\n-      if (!(__err & ios_base::failbit) && __p \n-\t  && static_cast<int_type>(__p) != char_traits<_CharT>::eof())\n-        __v = __ld;\n-#endif\n-      else\n-        __err |= ios_base::failbit;\n+      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -722,7 +611,6 @@ namespace std\n                              | ios_base::uppercase | ios_base::internal);\n       __io.flags(__fmt & __fmtmask | (ios_base::hex | ios_base::showbase));\n \n-      // Stage 1: extract and determine the conversion specifier.\n       // Assuming leading zeros eliminated, thus the size of 32 for\n       // integral types.\n       char __xtrc[32];\n@@ -731,18 +619,15 @@ namespace std\n \t\t\t     numeric_limits<unsigned long>::digits10 + 1,\n \t\t\t     __base);\n \n-      // Stage 2: convert and store results.\n-      char* __sanity;\n-      errno = 0;\n-      void* __vp = reinterpret_cast<void*>(strtoul(__xtrc, &__sanity, __base));\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __xtrc && *__sanity == '\\0' && errno == 0)\n-        __v = __vp;\n-      else\n-        __err |= ios_base::failbit;\n-\n       // Reset from hex formatted input\n       __io.flags(__fmt);\n+\n+      unsigned long __ul;\n+      __convert_to_v(__xtrc, __ul, __err, _S_c_locale, __base);\n+      if (!(__err & ios_base::failbit))\n+\t__v = reinterpret_cast<void*>(__ul);\n+      else \n+\t__err |= ios_base::failbit;\n       return __beg;\n     }\n \n@@ -787,9 +672,9 @@ namespace std\n \tint __len;\n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tif (_S_format_float(__io, __fbuf, __mod, __prec))\n-\t  __len = sprintf(__cs, __fbuf, __prec, __v);\n+\t  __len = __convert_from_v(__cs, __fbuf, __v, _S_c_locale, __prec);\n \telse\n-\t  __len = sprintf(__cs, __fbuf, __v);\n+\t  __len = __convert_from_v(__cs, __fbuf, __v, _S_c_locale);\n \treturn _M_widen_float(__s, __io, __fill, __cs, __len);\n       }\n \n@@ -807,7 +692,7 @@ namespace std\n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n \t_S_format_int(__io, __fbuf, __mod, __modl);\n-\tint __len = sprintf(__cs, __fbuf, __v);\n+\tint __len = __convert_from_v(__cs, __fbuf, __v, _S_c_locale);\n \treturn _M_widen_int(__s, __io, __fill, __cs, __len);\n       }\n \n@@ -1043,22 +928,7 @@ namespace std\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n       const _CharT* __wcs = __str.c_str();\n       __ctype.narrow(__wcs, __wcs + __str.size() + 1, char(), __cs);      \n-\n-#if defined(_GLIBCPP_USE_C99) && !defined(__hpux)\n-      char* __sanity;\n-      errno = 0;\n-      long double __ld = strtold(__cs, &__sanity);\n-      if (!(__err & ios_base::failbit)\n-          && __sanity != __cs && *__sanity == '\\0' && errno == 0)\n-        __units = __ld;\n-#else\n-      typedef typename char_traits<_CharT>::int_type int_type;\n-      long double __ld;\n-      int __p = sscanf(__cs, \"%Lf\", &__ld);\n-      if (!(__err & ios_base::failbit)\n-\t  && __p && static_cast<int_type>(__p) != char_traits<_CharT>::eof())\n-        __units = __ld;\n-#endif\n+      __convert_to_v(__cs, __units, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -1253,7 +1123,7 @@ namespace std\n       const int __n = numeric_limits<long double>::digits10;\n       char* __cs = static_cast<char*>(__builtin_alloca(sizeof(char) * __n));\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n-      int __len = sprintf(__cs, \"%.01Lf\", __units);\n+      int __len = __convert_from_v(__cs, \"%.01Lf\", __units, _S_c_locale);\n       __ctype.widen(__cs, __cs + __len, __ws);\n       string_type __digits(__ws);\n       return this->do_put(__s, __intl, __io, __fill, __digits); \n@@ -1867,9 +1737,13 @@ namespace std\n \t}\n       if (__i == 2 || __i == 4)\n \t{\n-\t  int __year = atoi(__digits.c_str());\n-\t  __year = __i == 2 ? __year : __year - 1900; \n-\t  __tm->tm_year = __year;\n+\t  long __l;\n+\t  __convert_to_v(__digits.c_str(), __l, __err, _S_c_locale);\n+\t  if (!(__err & ios_base::failbit) && __l <= INT_MAX)\n+\t    {\n+\t      __l = __i == 2 ? __l : __l - 1900; \n+\t      __tm->tm_year = static_cast<int>(__l);\n+\t    }\n \t}\n       else\n \t__err |= ios_base::failbit;\n@@ -2015,6 +1889,30 @@ namespace std\n       return static_cast<long>(__val);\n     }\n \n+  // Convert string to numeric value of type T and store results.  \n+  // NB: This is specialized for all required types, there is no\n+  // generic definition.\n+  template <typename _T>\n+    void\n+    __convert_to_v(const char* __in, _T& __out, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int __base = 10);\n+\n+  // Convert numeric value of type T to string and return length of string.\n+  template <typename _T>\n+    int\n+    __convert_from_v(char* __out, const char* __fmt, _T __v, \n+\t\t     const __c_locale&, int __prec = -1)\n+    {\n+      int __ret;\n+      const char* __old = setlocale(LC_ALL, \"C\");\n+      if (__prec >= 0)\n+\t__ret = sprintf(__out, __fmt, __prec, __v);\n+      else\n+\t__ret = sprintf(__out, __fmt, __v);\n+      setlocale(LC_ALL, __old);\n+      return __ret;\n+    }\n+\n   // Construct correctly padded string, as per 22.2.2.2.2\n   // Assumes \n   // __newlen > __oldlen"}, {"sha": "be7f7e65e26a77809aeebcd802990dfffe951969", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,9 +44,9 @@\n \n #include <bits/c++config.h>\n #include <bits/c++locale.h>     // Defines __c_locale, config-specific includes\n-#include <climits>\t// For CHAR_BIT\n-#include <cctype>\t// For isspace, etc.\n-#include <string> \t// For string\n+#include <climits>\t\t// For CHAR_BIT\n+#include <cctype>\t\t// For isspace, etc.\n+#include <string> \t\t// For string\n #include <bits/functexcept.h>\n \n namespace std\n@@ -295,7 +296,7 @@ namespace std\n   };\n \n \n-  // locale implementation object\n+  // Implementation object for locale \n   class locale::_Impl\n   {\n   public:\n@@ -390,11 +391,14 @@ namespace std\n     friend class locale::_Impl;\n     friend class __enc_traits;\n \n+  private:\n+    size_t _M_references;\n+\n   protected:\n     // Contains data from the underlying \"C\" library for default \"C\"\n-    // and \"POSIX\" locales.\n+    // or \"POSIX\" locale.\n     static __c_locale\t\t     _S_c_locale;\n-\n+    \n     explicit \n     facet(size_t __refs = 0) throw();\n \n@@ -411,18 +415,16 @@ namespace std\n     _S_destroy_c_locale(__c_locale& __cloc);\n \n   private:\n-    size_t _M_references;\n-\n     void \n     _M_add_reference() throw();\n \n     void \n     _M_remove_reference() throw();\n \n-    facet(const facet&);  // not defined\n+    facet(const facet&);  // Not defined.\n \n     void \n-    operator=(const facet&);  // not defined\n+    operator=(const facet&);  // Not defined.\n   };\n \n "}, {"sha": "ff0dfd533f21b9699d15da4e5fba46eece901b54", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -372,6 +372,32 @@ namespace std\n \t\t\t\t\t  streamsize, const bool);\n #endif // _GLIBCPP_USE_WCHAR_T\n \n+  template\n+    int\n+    __convert_from_v(char*, const char*, double, const __c_locale&, int);\n+\n+  template\n+    int\n+    __convert_from_v(char*, const char*, long double, const __c_locale&, int);\n+\n+  template\n+    int\n+    __convert_from_v(char*, const char*, long, const __c_locale&, int);\n+\n+  template\n+    int\n+    __convert_from_v(char*, const char*, unsigned long, \n+\t\t     const __c_locale&, int);\n+\n+  template\n+    int\n+    __convert_from_v(char*, const char*, long long, const __c_locale&, int);\n+\n+  template\n+    int\n+    __convert_from_v(char*, const char*, unsigned long long, \n+\t\t     const __c_locale&, int);\n+\n   template \n     locale::facet** \n     fill_n<locale::facet**, size_t, locale::facet*>"}, {"sha": "ae9301da074f4054927edbeb9fc3097256ac1fa6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,9 +79,25 @@ void test01()\n   delete [] c_arr;\n }\n \n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main ()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}, {"sha": "694be81612f11c305bcd4ce2f60ba527ac1460bc", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-18 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -110,13 +110,30 @@ void test01()\n   delete [] e_arr;\n   delete [] i_arr;\n }\n+\n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n \n int main ()\n {\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif \n \n   return 0;"}, {"sha": "d19948215b5027e99d90d32cfc84340551b7245d", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_char.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -129,10 +129,26 @@ void test01()\n   VERIFY(i1 == i2);\n }\n \n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }\n "}, {"sha": "d94dca4ea3d27a1ecd4831b951510e68e6e2ceea", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -128,12 +128,29 @@ void test01()\n   i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n   VERIFY(i1 == i2);\n }\n+\n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }"}, {"sha": "537f9ec81a9e44cb89a7036a97348f58930e5584", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -243,10 +243,27 @@ class comma_ctype: public std::ctype<char>\n   { classic_table(); }\n };\n \n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main() \n {\n   test01();\n   test02();\n-\n+  test03();\n   return 0;\n }"}, {"sha": "3ea8c7548d89064102abaa2bd7b026f302d0d30d", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-01 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -96,12 +96,29 @@ void test01()\n   assert(test);\n #endif\n }\n+\n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main() \n {\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test03();\n #endif \n \n   return 0;"}, {"sha": "485c488166d62a3ba4fa08c9e3323a0702333ab7", "filename": "libstdc++-v3/testsuite/22_locale/messages_members_char.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,12 +79,27 @@ void test01()\n   VERIFY ( s01 == \"please\" );\n   VERIFY ( s02 == \"thank you\" );\n   mssg_us.close(cat_us);\n+}\n \n- }\n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n \n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}, {"sha": "4288272df6a7aa6bc71034129aa01d919e65a149", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -289,10 +289,29 @@ void test03()\n   VERIFY( rem2 == \"Eleanor Roosevelt\" );\n }\n \n+// libstdc++/5280\n+void test04()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "5e25d86fbf03f80e48d51d30bcc4985f920c1118", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -290,6 +290,24 @@ void test03()\n   VERIFY( res2 == 1 );\n   VERIFY( rem2 == L\"Eleanor Roosevelt\" );\n }\n+\n+// libstdc++/5280\n+void test04()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n \n@@ -299,6 +317,7 @@ int main()\n   test01();\n   test02();\n   test03();\n+  test04();\n #endif\n   return 0;\n }"}, {"sha": "b0edd9ff20c5d1b378638b2506ad67b0aa325a17", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -283,10 +283,29 @@ void test03()\n   VERIFY( sanity2 == \"1943\" );\n }\n \n+// libstdc++/5280\n+void test04()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n   return 0;\n }"}, {"sha": "73890dd182c913c69e7f46fbddbdeb0efa82c694", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -282,6 +282,24 @@ void test03()\n   VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n   VERIFY( sanity2 == L\"1943\" );\n }\n+\n+// libstdc++/5280\n+void test04()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n@@ -290,6 +308,7 @@ int main()\n   test01();\n   test02();\n   test03();\n+  test04();\n #endif\n   return 0;\n }"}, {"sha": "6023c41d93d79d87c6af53280d5173706eeeebb8", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_char.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -105,9 +105,25 @@ void test01()\n   VERIFY(static_cast<part>(neg1.field[3]) != static_cast<part>(neg2.field[3]));\n }\n \n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}, {"sha": "61867b67b3fd5c427d9f491eae2d3507e7b3c147", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-09 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -105,12 +105,29 @@ void test01()\n   VERIFY(static_cast<part>(neg1.field[2]) != static_cast<part>(neg2.field[2]));\n   VERIFY(static_cast<part>(neg1.field[3]) != static_cast<part>(neg2.field[3]));\n }\n+\n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }"}, {"sha": "c3d8f7e61012dd2e31ae1abc40a7486ab870a60c", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -313,10 +313,28 @@ void test02()\n   VERIFY( rem5 == \" Durack\" );\n }\n \n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }\n "}, {"sha": "97c2b2290648853fc15dcb34425996c46abe4833", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -314,13 +314,31 @@ void test02()\n   VERIFY( b == true );\n   VERIFY( rem5 == L\" Durack\" );\n }\n+\n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+  test03();\n #endif\n   return 0;\n }"}, {"sha": "ebbb52da4a18f3708427467d10b01a01308ac5b8", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_char.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -291,9 +291,29 @@ void test02()\n   VERIFY( sanity5[1] == 'x' );\n }\n \n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }\n+\n+"}, {"sha": "5f263a5fa12daca19fa1ad6e80b4cbc022a5bab8", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_wchar_t.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -290,17 +290,36 @@ void test02()\n   VERIFY( sanity5.size() );\n   VERIFY( sanity5[1] == L'x' );\n }\n+\n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+  test03();\n #endif\n   return 0;\n }\n \n \n // Diana D. Brooks, former chief executive of Sotheby's\n // art-thief extraordinaire\n+"}, {"sha": "862817e482f1929f0ecad5cc8b041edbb84aff23", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_char.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -83,9 +83,25 @@ void test01()\n   // VERIFY( f2 != f3 );\n }\n \n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}, {"sha": "032bd397cccdf539b12946c8784dcdd6a1031d92", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-20 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -80,12 +80,29 @@ void test01()\n   VERIFY( dp2 != dp4 );\n   VERIFY( th2 != th4 );\n }\n+\n+// libstdc++/5280\n+void test02()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }"}, {"sha": "f711ab46676f33dc95707aa046dcc011d2a967de", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -193,6 +193,7 @@ void test02()\n   //             ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(\"Sunday\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -315,6 +316,7 @@ void test03()\n   //               ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(\"April\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -436,6 +438,7 @@ void test04()\n   // get_year(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(\"1971\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -527,6 +530,7 @@ void test05()\n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(\"04/04/71\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -672,6 +676,27 @@ void test06()\n   VERIFY( rem5 ==  \" Cindy Sherman\" );\n }\n \n+// libstdc++/5280\n+void test07()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      test04();\n+      test05();\n+      test06();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n@@ -681,5 +706,7 @@ int main()\n   test05();\n   \n   test06();\n+  \n+  test07();\n   return 0;\n }"}, {"sha": "40485a4ce3ce1fa7ac98c7e6b425aea3fbd30974", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -193,6 +193,7 @@ void test02()\n   //             ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(L\"Sunday\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -315,6 +316,7 @@ void test03()\n   //               ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(L\"April\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -436,6 +438,7 @@ void test04()\n   // get_year(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(L\"1971\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -527,6 +530,7 @@ void test05()\n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n \n   // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n   iss.str(L\"04/04/71\");\n   iterator_type is_it01(iss);\n   tm time01;\n@@ -671,6 +675,27 @@ void test06()\n   VERIFY( tm1.tm_year == time_sanity.tm_year );\n   VERIFY( rem5 ==  L\" Cindy Sherman\" );\n }\n+\n+// libstdc++/5280\n+void test07()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      test04();\n+      test05();\n+      test06();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n@@ -683,6 +708,8 @@ int main()\n   test05();\n \n   test06();\n+\n+  test07();\n #endif\n   return 0;\n }"}, {"sha": "6051633773b12b478518544a331e217a1f9b5ad6", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_char.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -231,9 +231,27 @@ void test02()\n   VERIFY( sanity2 == \"Tuesday\" );\n }\n \n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "863d47f9ace781a7efa25d5c738fbe83c2e1fb93", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_wchar_t.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9aaf6379db36f4ab90875a8aaef4e3c98269b7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc?ref=4b9aaf6379db36f4ab90875a8aaef4e3c98269b7", "patch": "@@ -232,13 +232,31 @@ void test02()\n   VERIFY( res == L\"Tuesdayxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" );\n   VERIFY( sanity2 == L\"Tuesday\" );\n }\n+\n+// libstdc++/5280\n+void test03()\n+{\n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      setenv(\"LANG\", oldLANG, 1);\n+    }\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+  test03();\n #endif\n   return 0;\n }"}]}