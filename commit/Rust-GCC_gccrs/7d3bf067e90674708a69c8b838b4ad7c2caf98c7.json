{"sha": "7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzYmYwNjdlOTA2NzQ3MDhhNjljOGI4MzhiNGFkN2MyY2FmOThjNw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-03-12T20:53:19Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-03-12T20:53:19Z"}, "message": "tree-cfg.c (make_goto_expr_edges): Don't use error_mark_node.\n\n\t* tree-cfg.c (make_goto_expr_edges): Don't use error_mark_node.\n\t* tree-ssa-dce.c (mark_stmt_necessary): Don't check for it.\n\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n\t(get_expr_operands): Likewise for ERROR_MARK.\n\nFrom-SVN: r96351", "tree": {"sha": "e415a5bfe6d95178765f883b85a58a47d393ec72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e415a5bfe6d95178765f883b85a58a47d393ec72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/comments", "author": null, "committer": null, "parents": [{"sha": "f39b4c073a4d6e7eef4e60c06b9e600977be4f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b4c073a4d6e7eef4e60c06b9e600977be4f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39b4c073a4d6e7eef4e60c06b9e600977be4f04"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f60d4156df8ab924b8bb666a3709ff2702a4215e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "patch": "@@ -1,3 +1,10 @@\n+2005-03-12  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree-cfg.c (make_goto_expr_edges): Don't use error_mark_node.\n+\t* tree-ssa-dce.c (mark_stmt_necessary): Don't check for it.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t(get_expr_operands): Likewise for ERROR_MARK.\n+\n 2005-03-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa.c (kill_redundant_phi_nodes): Remove local variable\n@@ -213,12 +220,12 @@\n \n 2005-03-11  James A. Morrison  <phython@gcc.gnu.org>\n \n-        PR tree-optimization/15784\n-        * fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n-        and -1 - A to ~A.\n+\tPR tree-optimization/15784\n+\t* fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n+\tand -1 - A to ~A.\n \n-        * stmt.c (expand_case): Don't change index_type.  Convert minval\n-        to the proper type.\n+\t* stmt.c (expand_case): Don't change index_type.  Convert minval\n+\tto the proper type.\n \n \tPR tree-optimization/20130\n \t* fold-const.c (fold): Fold x * -1 into -x."}, {"sha": "56b7bc2c95f6255d858cfc970ab874ec5b703aad", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "patch": "@@ -837,7 +837,7 @@ label_to_block (tree dest)\n static void\n make_goto_expr_edges (basic_block bb)\n {\n-  tree goto_t, dest;\n+  tree goto_t;\n   basic_block target_bb;\n   int for_call;\n   block_stmt_iterator last = bsi_last (bb);\n@@ -848,13 +848,10 @@ make_goto_expr_edges (basic_block bb)\n      CALL_EXPR or MODIFY_EXPR), then the edge is an abnormal edge resulting\n      from a nonlocal goto.  */\n   if (TREE_CODE (goto_t) != GOTO_EXPR)\n-    {\n-      dest = error_mark_node;\n-      for_call = 1;\n-    }\n+    for_call = 1;\n   else\n     {\n-      dest = GOTO_DESTINATION (goto_t);\n+      tree dest = GOTO_DESTINATION (goto_t);\n       for_call = 0;\n \n       /* A GOTO to a local label creates normal edges.  */"}, {"sha": "f8946bcbd92bb0833c7c6607156ea77467b80423", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "patch": "@@ -221,7 +221,6 @@ static inline void\n mark_stmt_necessary (tree stmt, bool add_to_worklist)\n {\n   gcc_assert (stmt);\n-  gcc_assert (stmt != error_mark_node);\n   gcc_assert (!DECL_P (stmt));\n \n   if (NECESSARY (stmt))"}, {"sha": "47b4f1b930fd0a72289c75971ed4db28467f413c", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d3bf067e90674708a69c8b838b4ad7c2caf98c7/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "patch": "@@ -998,10 +998,6 @@ get_stmt_operands (tree stmt)\n      _DECL.  This indicates a bug in the gimplifier.  */\n   gcc_assert (!SSA_VAR_P (stmt));\n \n-  /* Ignore error statements.  */\n-  if (TREE_CODE (stmt) == ERROR_MARK)\n-    return;\n-\n   ann = get_stmt_ann (stmt);\n \n   /* If the statement has not been modified, the operands are still valid.  */\n@@ -1037,7 +1033,7 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n   tree expr = *expr_p;\n   stmt_ann_t s_ann = stmt_ann (stmt);\n \n-  if (expr == NULL || expr == error_mark_node)\n+  if (expr == NULL)\n     return;\n \n   code = TREE_CODE (expr);"}]}