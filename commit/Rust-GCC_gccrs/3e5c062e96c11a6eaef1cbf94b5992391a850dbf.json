{"sha": "3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1YzA2MmU5NmMxMWE2ZWFlZjFjYmY5NGI1OTkyMzkxYTg1MGRiZg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-03-06T18:19:46Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-03-06T18:19:46Z"}, "message": "[AArch64] Fix lane specifier syntax\n\nThe syntax for lane specifiers uses a vector element rather than a vector:\n\nfmls    v0.2s, v1.2s, v1.s[1]  // rather than v1.2s[1]\n\nFix all the lane specifiers to use Vetype which uses the correct element type.\n\n    gcc/\n\t* aarch64/aarch64-simd.md (aarch64_mla_elt<mode>): Correct lane syntax.\n\t(aarch64_mla_elt_<vswap_width_name><mode>): Likewise.\n\t(aarch64_mls_elt<mode>): Likewise.\n\t(aarch64_mls_elt_<vswap_width_name><mode>): Likewise.\n\t(aarch64_fma4_elt<mode>): Likewise.\n\t(aarch64_fma4_elt_<vswap_width_name><mode>): Likewise.\n\t(aarch64_fma4_elt_to_64v2df): Likewise.\n\t(aarch64_fnma4_elt<mode>): Likewise.\n\t(aarch64_fnma4_elt_<vswap_width_name><mode>): Likewise.\n\t(aarch64_fnma4_elt_to_64v2df): Likewise.\n\n    testsuite/\n\t* gcc.target/aarch64/fmla_intrinsic_1.c: Check for correct lane syntax.\n\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/mla_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/mls_intrinsic_1.c: Likewise.", "tree": {"sha": "7c9ddb6920bd973b8893e4d8ee09c90032875f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c9ddb6920bd973b8893e4d8ee09c90032875f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/comments", "author": null, "committer": null, "parents": [{"sha": "4a5c938bbfd4586f16ff0dfde00970c2a1b0f636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5c938bbfd4586f16ff0dfde00970c2a1b0f636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5c938bbfd4586f16ff0dfde00970c2a1b0f636"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "1cb66942d408d5f8ff5a3c1d6f044384c8e11747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -1,3 +1,16 @@\n+2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* aarch64/aarch64-simd.md (aarch64_mla_elt<mode>): Correct lane syntax.\n+\t(aarch64_mla_elt_<vswap_width_name><mode>): Likewise.\n+\t(aarch64_mls_elt<mode>): Likewise.\n+\t(aarch64_mls_elt_<vswap_width_name><mode>): Likewise.\n+\t(aarch64_fma4_elt<mode>): Likewise.\n+\t(aarch64_fma4_elt_<vswap_width_name><mode>): Likewise.\n+\t(aarch64_fma4_elt_to_64v2df): Likewise.\n+\t(aarch64_fnma4_elt<mode>): Likewise.\n+\t(aarch64_fnma4_elt_<vswap_width_name><mode>): Likewise.\n+\t(aarch64_fnma4_elt_to_64v2df): Likewise.\n+\n 2020-03-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-sve2.md (@aarch64_sve_<sve_int_op><mode>:"}, {"sha": "e5cf4e4549c60004a4f929ca20870050e076efb4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -1350,7 +1350,7 @@\n  \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n-    return \"mla\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"mla\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n@@ -1368,7 +1368,7 @@\n  \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<VSWAP_WIDTH>mode, INTVAL (operands[2]));\n-    return \"mla\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"mla\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n@@ -1408,7 +1408,7 @@\n  \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n-    return \"mls\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"mls\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n@@ -1426,7 +1426,7 @@\n  \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<VSWAP_WIDTH>mode, INTVAL (operands[2]));\n-    return \"mls\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"mls\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n@@ -2003,7 +2003,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n-    return \"fmla\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"fmla\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n@@ -2020,7 +2020,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<VSWAP_WIDTH>mode, INTVAL (operands[2]));\n-    return \"fmla\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"fmla\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n@@ -2048,7 +2048,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (V2DFmode, INTVAL (operands[2]));\n-    return \"fmla\\\\t%0.2d, %3.2d, %1.2d[%2]\";\n+    return \"fmla\\\\t%0.2d, %3.2d, %1.d[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_d_scalar_q\")]\n )\n@@ -2077,7 +2077,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n-    return \"fmls\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"fmls\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n@@ -2095,7 +2095,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (<VSWAP_WIDTH>mode, INTVAL (operands[2]));\n-    return \"fmls\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vtype>[%2]\";\n+    return \"fmls\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n@@ -2125,7 +2125,7 @@\n   \"TARGET_SIMD\"\n   {\n     operands[2] = aarch64_endian_lane_rtx (V2DFmode, INTVAL (operands[2]));\n-    return \"fmls\\\\t%0.2d, %3.2d, %1.2d[%2]\";\n+    return \"fmls\\\\t%0.2d, %3.2d, %1.d[%2]\";\n   }\n   [(set_attr \"type\" \"neon_fp_mla_d_scalar_q\")]\n )"}, {"sha": "59c99885d54afe002c76c5dc268764af6254d6f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -1,3 +1,10 @@\n+2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/fmla_intrinsic_1.c: Check for correct lane syntax.\t\n+\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/mla_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/mls_intrinsic_1.c: Likewise.\n+\n 2020-03-06  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/tumaddsidi4.c: Step-up optimization level."}, {"sha": "59ad41ed0471b17418c395f31fbe666b60ec3623", "filename": "gcc/testsuite/gcc.target/aarch64/fmla_intrinsic_1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -98,18 +98,18 @@ main (int argc, char **argv)\n \n /* vfma_laneq_f32.\n    vfma_lane_f32.  */\n-/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n /* vfmaq_lane_f32.\n    vfmaq_laneq_f32.  */\n-/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n /* vfma_lane_f64.  */\n /* { dg-final { scan-assembler-times \"fmadd\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 1 } } */\n \n /* vfmaq_lane_f64.\n    vfma_laneq_f64.\n    vfmaq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2?d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n "}, {"sha": "2d5a3d305360a08a9663cfd497cb1a5374b4b327", "filename": "gcc/testsuite/gcc.target/aarch64/fmls_intrinsic_1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -99,18 +99,18 @@ main (int argc, char **argv)\n \n /* vfms_laneq_f32.\n    vfms_lane_f32.  */\n-/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n /* vfmsq_lane_f32.\n    vfmsq_laneq_f32.  */\n-/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n /* vfms_lane_f64.  */\n /* { dg-final { scan-assembler-times \"fmsub\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 1 } } */\n \n /* vfmsq_lane_f64.\n    vfms_laneq_f64.\n    vfmsq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2?d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n "}, {"sha": "46b3c78c131ea92eae208d399ef25c71cd8446f7", "filename": "gcc/testsuite/gcc.target/aarch64/mla_intrinsic_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -78,6 +78,6 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"mla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"mla\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mla\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n "}, {"sha": "e01a4f6d0e1e83cac042a2cad4f02664b87e8c05", "filename": "gcc/testsuite/gcc.target/aarch64/mls_intrinsic_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5c062e96c11a6eaef1cbf94b5992391a850dbf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c?ref=3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "patch": "@@ -83,6 +83,6 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"mls\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"mls\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mls\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mls\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\\\\\\[\\[0-9\\]+\\\\\\]\" 4 } } */\n "}]}