{"sha": "2c814af65ef9f146519cba657890a4fd93c5be38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4MTRhZjY1ZWY5ZjE0NjUxOWNiYTY1Nzg5MGE0ZmQ5M2M1YmUzOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-14T11:20:32Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-14T11:20:32Z"}, "message": "aarch64: Fix arm_sve_vector_bits on typedefs [PR95105]\n\nCompiling this testcase with -march=armv8.2-a+sve\n-msve-vector-bits=512:\n\n----------------------------------------------------------\ntypedef __SVFloat32_t foo;\ntypedef foo bar __attribute__((arm_sve_vector_bits(512)));\ntemplate<typename T> struct s { T x; };\nextern s<bar> a;\nbar &b = a.x;\n----------------------------------------------------------\n\ngave the bogus error:\n\n  cannot bind non-const lvalue reference of type \u2018bar&\u2019 to an rvalue\n  of type \u2018bar\u2019\n\nThe testcase works if the attribute is applied directly\nto __SVFloat32_t instead of via foo.\n\nThis shows a more general problem with the way that we were handling\nthe arm_sve_vector_bits attribute: we started by building a distinct\ncopy of the type to which the attribute was applied, instead of starting\nwith its main variant.  This new type then became its own main variant,\nmeaning that the relationship between types that have the attribute\ncould be different from the relationship between types that don't have\nthe attribute.\n\nThis patch instead copies the main variant of the original type and then\nreapplies all the differences.\n\n2020-05-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/95105\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(handle_arm_sve_vector_bits_attribute): Create a copy of the\n\toriginal type's TYPE_MAIN_VARIANT, then reapply all the differences\n\tbetween the original type and its main variant.\n\ngcc/testsuite/\n\tPR target/95105\n\t* gcc.target/aarch64/sve/acle/general/attributes_8.c: New test.\n\t* g++.target/aarch64/sve/acle/general-c++/attributes_1.C: Likewise.", "tree": {"sha": "310ef15bc44395d6c0d8b8e6bb473338ae6074b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/310ef15bc44395d6c0d8b8e6bb473338ae6074b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c814af65ef9f146519cba657890a4fd93c5be38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c814af65ef9f146519cba657890a4fd93c5be38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c814af65ef9f146519cba657890a4fd93c5be38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c814af65ef9f146519cba657890a4fd93c5be38/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1ccfd0cc2e1add15929c43e6c7472336d33e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1ccfd0cc2e1add15929c43e6c7472336d33e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1ccfd0cc2e1add15929c43e6c7472336d33e65"}], "stats": {"total": 272, "additions": 262, "deletions": 10}, "files": [{"sha": "125f7c7c389f8373d7e87a8b511a2049e14f970b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c814af65ef9f146519cba657890a4fd93c5be38", "patch": "@@ -1,3 +1,11 @@\n+2020-05-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/95105\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(handle_arm_sve_vector_bits_attribute): Create a copy of the\n+\toriginal type's TYPE_MAIN_VARIANT, then reapply all the differences\n+\tbetween the original type and its main variant.\n+\n 2020-05-14  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/95118"}, {"sha": "bdb04e8170d645bf2deac1e9268eb179ef58ad70", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=2c814af65ef9f146519cba657890a4fd93c5be38", "patch": "@@ -3676,24 +3676,39 @@ handle_arm_sve_vector_bits_attribute (tree *node, tree, tree args, int,\n      svbool_t and its fixed-length variants.  Using a type variant\n      avoids that but means that we treat some ambiguous combinations\n      as valid.  */\n+  tree new_type;\n+  tree base_type = TYPE_MAIN_VARIANT (type);\n   if (lang_GNU_C () && VECTOR_BOOLEAN_TYPE_P (type))\n-    type = build_variant_type_copy (type);\n+    new_type = build_variant_type_copy (base_type);\n   else\n-    type = build_distinct_type_copy (type);\n+    new_type = build_distinct_type_copy (base_type);\n+\n+  /* Allow the GNU vector extensions to be applied to vectors.\n+     The extensions aren't yet defined for packed predicates,\n+     so continue to treat them as abstract entities for now.  */\n+  if (!VECTOR_BOOLEAN_TYPE_P (new_type))\n+    TYPE_INDIVISIBLE_P (new_type) = 0;\n \n   /* The new type is a normal sized type; it doesn't have the same\n      restrictions as sizeless types.  */\n-  TYPE_ATTRIBUTES (type)\n+  TYPE_ATTRIBUTES (new_type)\n     = remove_attribute (\"SVE sizeless type\",\n-\t\t\tcopy_list (TYPE_ATTRIBUTES (type)));\n+\t\t\tcopy_list (TYPE_ATTRIBUTES (new_type)));\n \n-  /* Allow the GNU vector extensions to be applied to vectors.\n-     The extensions aren't yet defined for packed predicates,\n-     so continue to treat them as abstract entities for now.  */\n-  if (!VECTOR_BOOLEAN_TYPE_P (type))\n-    TYPE_INDIVISIBLE_P (type) = 0;\n+  /* Apply the relevant attributes, qualifiers and alignment of TYPE,\n+     if they differ from the original (sizeless) BASE_TYPE.  */\n+  if (TYPE_ATTRIBUTES (base_type) != TYPE_ATTRIBUTES (type)\n+      || TYPE_QUALS (base_type) != TYPE_QUALS (type))\n+    {\n+      tree attrs = remove_attribute (\"SVE sizeless type\",\n+\t\t\t\t     copy_list (TYPE_ATTRIBUTES (type)));\n+      new_type = build_type_attribute_qual_variant (new_type, attrs,\n+\t\t\t\t\t\t    TYPE_QUALS (type));\n+    }\n+  if (TYPE_ALIGN (base_type) != TYPE_ALIGN (type))\n+    new_type = build_aligned_type (new_type, TYPE_ALIGN (type));\n \n-  *node = type;\n+  *node = new_type;\n   return NULL_TREE;\n }\n "}, {"sha": "5163470c2456b56b715c20c64653e2788d38be1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c814af65ef9f146519cba657890a4fd93c5be38", "patch": "@@ -1,3 +1,9 @@\n+2020-05-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/95105\n+\t* gcc.target/aarch64/sve/acle/general/attributes_8.c: New test.\n+\t* g++.target/aarch64/sve/acle/general-c++/attributes_1.C: Likewise.\n+\n 2020-05-14  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/94703"}, {"sha": "befd494cd13cebe8b6f72de24dd38040ec47986e", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/attributes_1.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fattributes_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fattributes_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fattributes_1.C?ref=2c814af65ef9f146519cba657890a4fd93c5be38", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-options \"-msve-vector-bits=256 -W -Wall\" } */\n+\n+#include <arm_sve.h>\n+\n+#define N __ARM_FEATURE_SVE_BITS\n+#define FIXED_ATTR __attribute__ ((arm_sve_vector_bits (N)))\n+\n+template<typename T> struct foo { T var; };\n+\n+typedef svint8_t var1;\n+typedef __SVInt8_t var2;\n+\n+typedef const var1 const_var1;\n+typedef const var2 const_var2;\n+\n+typedef svint8_t fixed1 FIXED_ATTR;\n+typedef svint8_t fixed1_alias FIXED_ATTR;\n+typedef __SVInt8_t fixed2 FIXED_ATTR;\n+\n+typedef const_var1 const_fixed1 FIXED_ATTR;\n+typedef const var1 const_fixed1_alias FIXED_ATTR;\n+typedef const_var2 const_fixed2 FIXED_ATTR;\n+\n+extern fixed1 extern1;\n+extern fixed1_alias extern1_alias;\n+extern fixed2 extern2;\n+\n+extern foo<fixed1> extern1_foo;\n+extern foo<fixed1_alias> extern1_alias_foo;\n+extern foo<fixed2> extern2_foo;\n+\n+extern const_fixed1 const_extern1;\n+extern const_fixed1_alias const_extern1_alias;\n+extern const_fixed2 const_extern2;\n+\n+extern foo<const_fixed1> const_extern1_foo;\n+extern foo<const_fixed1_alias> const_extern1_alias_foo;\n+extern foo<const_fixed2> const_extern2_foo;\n+\n+fixed1 &ref1a = extern1;\n+fixed1_alias &ref1b = extern1;\n+fixed2 &ref1c = extern1;\n+\n+fixed1 &ref2a = extern1_alias;\n+fixed1_alias &ref2b = extern1_alias;\n+fixed2 &ref2c = extern1_alias;\n+\n+fixed1 &ref3a = extern2;\n+fixed1_alias &ref3b = extern2;\n+fixed2 &ref3c = extern2;\n+\n+fixed1 &ref1a_foo = extern1_foo.var;\n+fixed1_alias &ref1b_foo = extern1_foo.var;\n+fixed2 &ref1c_foo = extern1_foo.var;\n+\n+fixed1 &ref2a_foo = extern1_alias_foo.var;\n+fixed1_alias &ref2b_foo = extern1_alias_foo.var;\n+fixed2 &ref2c_foo = extern1_alias_foo.var;\n+\n+fixed1 &ref3a_foo = extern2_foo.var;\n+fixed1_alias &ref3b_foo = extern2_foo.var;\n+fixed2 &ref3c_foo = extern2_foo.var;\n+\n+fixed1 &ref4a = const_extern1; \t     // { dg-error {discards qualifiers} }\n+fixed1_alias &ref4b = const_extern1; // { dg-error {discards qualifiers} }\n+fixed2 &ref4c = const_extern1;       // { dg-error {discards qualifiers} }\n+\n+fixed1 &ref4a_foo = const_extern1_foo.var; \t     // { dg-error {discards qualifiers} }\n+fixed1_alias &ref4b_foo = const_extern1_foo.var; // { dg-error {discards qualifiers} }\n+fixed2 &ref4c_foo = const_extern1_foo.var;       // { dg-error {discards qualifiers} }\n+\n+const fixed1 &ref5a = const_extern2;\n+const fixed1_alias &ref5b = const_extern2;\n+const fixed2 &ref5c = const_extern2;\n+\n+const_fixed1 &const_ref1a = extern1;\n+const_fixed1_alias &const_ref1b = extern1;\n+const_fixed2 &const_ref1c = extern1;\n+\n+const_fixed1 &const_ref2a = extern1_alias;\n+const_fixed1_alias &const_ref2b = extern1_alias;\n+const_fixed2 &const_ref2c = extern1_alias;\n+\n+const_fixed1 &const_ref3a = extern2;\n+const_fixed1_alias &const_ref3b = extern2;\n+const_fixed2 &const_ref3c = extern2;\n+\n+const_fixed1 &const_ref1a_foo = extern1_foo.var;\n+const_fixed1_alias &const_ref1b_foo = extern1_foo.var;\n+const_fixed2 &const_ref1c_foo = extern1_foo.var;\n+\n+const_fixed1 &const_ref2a_foo = extern1_alias_foo.var;\n+const_fixed1_alias &const_ref2b_foo = extern1_alias_foo.var;\n+const_fixed2 &const_ref2c_foo = extern1_alias_foo.var;\n+\n+const_fixed1 &const_ref3a_foo = extern2_foo.var;\n+const_fixed1_alias &const_ref3b_foo = extern2_foo.var;\n+const_fixed2 &const_ref3c_foo = extern2_foo.var;\n+\n+const_fixed1 &const_ref4a = const_extern1;\n+const_fixed1_alias &const_ref4b = const_extern1;\n+const_fixed2 &const_ref4c = const_extern1;\n+\n+const_fixed1 &const_ref5a = const_extern1_alias;\n+const_fixed1_alias &const_ref5b = const_extern1_alias;\n+const_fixed2 &const_ref5c = const_extern1_alias;\n+\n+const_fixed1 &const_ref6a = const_extern2;\n+const_fixed1_alias &const_ref6b = const_extern2;\n+const_fixed2 &const_ref6c = const_extern2;\n+\n+const_fixed1 &const_ref4a_foo = const_extern1_foo.var;\n+const_fixed1_alias &const_ref4b_foo = const_extern1_foo.var;\n+const_fixed2 &const_ref4c_foo = const_extern1_foo.var;\n+\n+const_fixed1 &const_ref5a_foo = const_extern1_alias_foo.var;\n+const_fixed1_alias &const_ref5b_foo = const_extern1_alias_foo.var;\n+const_fixed2 &const_ref5c_foo = const_extern1_alias_foo.var;\n+\n+const_fixed1 &const_ref6a_foo = const_extern2_foo.var;\n+const_fixed1_alias &const_ref6b_foo = const_extern2_foo.var;\n+const_fixed2 &const_ref6c_foo = const_extern2_foo.var;"}, {"sha": "f302927c55bef1660ad2167479e50ef1320fc5c2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/attributes_8.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c814af65ef9f146519cba657890a4fd93c5be38/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_8.c?ref=2c814af65ef9f146519cba657890a4fd93c5be38", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-options \"-msve-vector-bits=256 -W -Wall\" } */\n+\n+#include <arm_sve.h>\n+\n+#define N __ARM_FEATURE_SVE_BITS\n+#define FIXED_ATTR __attribute__ ((arm_sve_vector_bits (N)))\n+#define ALIGNED_ATTR __attribute__((aligned(N / 8)))\n+\n+typedef svint8_t var1;\n+typedef __SVInt8_t var2;\n+\n+typedef const var1 const_var1;\n+typedef const var2 const_var2;\n+\n+typedef var1 aligned_var1 ALIGNED_ATTR;\n+typedef var2 aligned_var2 ALIGNED_ATTR;\n+\n+typedef var1 fixed1 FIXED_ATTR;\n+typedef var1 fixed1_alias FIXED_ATTR;\n+typedef var2 fixed2 FIXED_ATTR;\n+\n+typedef const_var1 const_fixed1 FIXED_ATTR;\n+typedef const var1 const_fixed1_alias FIXED_ATTR;\n+typedef const_var2 const_fixed2 FIXED_ATTR;\n+\n+typedef aligned_var1 aligned_fixed1 FIXED_ATTR;\n+typedef var1 aligned_fixed1_alias FIXED_ATTR ALIGNED_ATTR;\n+typedef aligned_var2 aligned_fixed2 FIXED_ATTR;\n+\n+extern fixed1 extern1;\n+extern fixed1_alias extern1_alias;\n+extern fixed2 extern2;\n+\n+extern const_fixed1 const_extern1;\n+extern const_fixed1_alias const_extern1_alias;\n+extern const_fixed2 const_extern2;\n+\n+fixed1 *ptr1a = &extern1;\n+fixed1_alias *ptr1b = &extern1;\n+fixed2 *ptr1c = &extern1;\n+\n+fixed1 *ptr2a = &extern1_alias;\n+fixed1_alias *ptr2b = &extern1_alias;\n+fixed2 *ptr2c = &extern1_alias;\n+\n+fixed1 *ptr3a = &extern2;\n+fixed1_alias *ptr3b = &extern2;\n+fixed2 *ptr3c = &extern2;\n+\n+fixed1 *ptr4a = &const_extern1; \t// { dg-error {invalid conversion} \"c++\" { target c++ } }\n+\t\t\t\t\t// { dg-warning {discards 'const' qualifier} \"c\" { target c } .-1 }\n+fixed1_alias *ptr4b = &const_extern1; \t// { dg-error {invalid conversion} \"c++\" { target c++ } }\n+\t\t\t\t\t// { dg-warning {discards 'const' qualifier} \"c\" { target c } .-1 }\n+fixed2 *ptr4c = &const_extern1; \t// { dg-error {invalid conversion} \"c++\" { target c++ } }\n+\t\t\t\t\t// { dg-warning {discards 'const' qualifier} \"c\" { target c } .-1 }\n+\n+const fixed1 *ptr5a = &const_extern2;\n+const fixed1_alias *ptr5b = &const_extern2;\n+const fixed2 *ptr5c = &const_extern2;\n+\n+const_fixed1 *const_ptr1a = &extern1;\n+const_fixed1_alias *const_ptr1b = &extern1;\n+const_fixed2 *const_ptr1c = &extern1;\n+\n+const_fixed1 *const_ptr2a = &extern1_alias;\n+const_fixed1_alias *const_ptr2b = &extern1_alias;\n+const_fixed2 *const_ptr2c = &extern1_alias;\n+\n+const_fixed1 *const_ptr3a = &extern2;\n+const_fixed1_alias *const_ptr3b = &extern2;\n+const_fixed2 *const_ptr3c = &extern2;\n+\n+const_fixed1 *const_ptr4a = &const_extern1;\n+const_fixed1_alias *const_ptr4b = &const_extern1;\n+const_fixed2 *const_ptr4c = &const_extern1;\n+\n+const_fixed1 *const_ptr5a = &const_extern1_alias;\n+const_fixed1_alias *const_ptr5b = &const_extern1_alias;\n+const_fixed2 *const_ptr5c = &const_extern1_alias;\n+\n+const_fixed1 *const_ptr6a = &const_extern2;\n+const_fixed1_alias *const_ptr6b = &const_extern2;\n+const_fixed2 *const_ptr6c = &const_extern2;\n+\n+struct normal1 { int x; fixed1 y; };\n+struct normal1_alias { int x; fixed1_alias y; };\n+struct normal2 { int x; fixed2 y; };\n+\n+struct aligned1 { int x; aligned_fixed1 y; };\n+struct aligned1_alias { int x; aligned_fixed1_alias y; };\n+struct aligned2 { int x; aligned_fixed2 y; };\n+\n+#define ASSERT(NAME, TEST) typedef int NAME[(TEST) ? 1 : -1]\n+\n+ASSERT (check_normal1, sizeof (struct normal1) == N / 8 + 16);\n+ASSERT (check_normal1_alias, sizeof (struct normal1_alias) == N / 8 + 16);\n+ASSERT (check_normal2, sizeof (struct normal2) == N / 8 + 16);\n+\n+ASSERT (check_aligned1, sizeof (struct aligned1) == N / 4);\n+ASSERT (check_aligned1_alias, sizeof (struct aligned1_alias) == N / 4);\n+ASSERT (check_aligned2, sizeof (struct aligned2) == N / 4);"}]}