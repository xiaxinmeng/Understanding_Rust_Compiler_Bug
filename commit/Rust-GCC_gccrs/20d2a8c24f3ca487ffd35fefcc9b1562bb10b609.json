{"sha": "20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "node_id": "C_kwDOANBUbNoAKDIwZDJhOGMyNGYzY2E0ODdmZmQzNWZlZmNjOWIxNTYyYmIxMGI2MDk", "commit": {"author": {"name": "Torbj\u00f6rn SVENSSON", "email": "torbjorn.svensson@foss.st.com", "date": "2022-09-22T20:14:24Z"}, "committer": {"name": "Torbj\u00f6rn SVENSSON", "email": "torbjorn.svensson@foss.st.com", "date": "2022-11-18T10:30:35Z"}, "message": "testsuite: Verify that module-mapper is available\n\nFor some test cases, it's required that the optional module mapper\n\"g++-mapper-server\" is built. As the server is not required, the\ntest cases will fail if it can't be found.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_is_prog_name_available):\n\tNew.\n\t* lib/target-supports-dg.exp\n\t(dg-require-prog-name-available): New.\n\t* g++.dg/modules/modules.exp: Verify avilability of module\n\tmapper.\n\nSigned-off-by: Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>", "tree": {"sha": "9d6e85577c113b7a73831c974858a9166b4fdcc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d6e85577c113b7a73831c974858a9166b4fdcc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/comments", "author": null, "committer": null, "parents": [{"sha": "33de7b37463fd3b846f76e86ed55aaa46870f92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33de7b37463fd3b846f76e86ed55aaa46870f92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33de7b37463fd3b846f76e86ed55aaa46870f92e"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4784803742ad86437eac35bda937b785b399563f", "filename": "gcc/testsuite/g++.dg/modules/modules.exp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp?ref=20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "patch": "@@ -279,6 +279,29 @@ proc module-init { src } {\n     return $option_list\n }\n \n+# Return 1 if requirements are met\n+proc module-check-requirements { tests } {\n+    foreach test $tests {\n+\tset tmp [dg-get-options $test]\n+\tforeach op $tmp {\n+\t    switch [lindex $op 0] {\n+\t\t\"dg-additional-options\" {\n+\t\t    # Example strings to match:\n+\t\t    # -fmodules-ts -fmodule-mapper=|@g++-mapper-server\\\\ -t\\\\ [srcdir]/inc-xlate-1.map\n+\t\t    # -fmodules-ts -fmodule-mapper=|@g++-mapper-server\n+\t\t    if [regexp -- {(^| )-fmodule-mapper=\\|@([^\\\\ ]*)} [lindex $op 2] dummy dummy2 prog] {\n+\t\t\tverbose \"Checking that mapper exist: $prog\"\n+\t\t\tif { ![ check_is_prog_name_available $prog ] } {\n+\t\t\t    return 0\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+    return 1\n+}\n+\n # cleanup any detritus from previous run\n cleanup_module_files [find $DEFAULT_REPO *.gcm]\n \n@@ -307,6 +330,14 @@ foreach src [lsort [find $srcdir/$subdir {*_a.[CHX}]] {\n \tset tests [lsort [find [file dirname $src] \\\n \t\t\t      [regsub {_a.[CHX]$} [file tail $src] {_[a-z].[CHX]}]]]\n \n+\tif { ![module-check-requirements $tests] } {\n+\t    set testcase [regsub {_a.[CH]} $src {}]\n+\t    set testcase \\\n+\t\t[string range $testcase [string length \"$srcdir/\"] end]\n+\t    unsupported $testcase\n+\t    continue\n+\t}\n+\n \tset std_list [module-init $src]\n \tforeach std $std_list {\n \t    set mod_files {}"}, {"sha": "6ce3b2b1a1bc1b28b7b49d96f5ee38d18c737e81", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "patch": "@@ -683,3 +683,18 @@ proc dg-require-symver { args } {\n \tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n     }\n }\n+\n+# If this target does not provide prog named \"$args\", skip this test.\n+\n+proc dg-require-prog-name-available { args } {\n+    # The args are within another list; pull them out.\n+    set args [lindex $args 0]\n+\n+    set prog [lindex $args 1]\n+\n+    if { ![ check_is_prog_name_available $prog ] } {\n+        upvar dg-do-what dg-do-what\n+        set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+    }\n+}\n+"}, {"sha": "01cf17ea44ae219d10a578f522900dd9da86ac5b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "patch": "@@ -12157,3 +12157,18 @@ main:\n \t.byte 0\n   } \"\"]\n }\n+ \n+# Return 1 if this target has prog named \"$prog\", 0 otherwise.\n+\n+proc check_is_prog_name_available { prog } {\n+    global tool\n+\n+    set options [list \"additional_flags=-print-prog-name=$prog\"]\n+    set output [lindex [${tool}_target_compile \"\" \"\" \"none\" $options] 0]\n+\n+    if { $output == $prog } {\n+        return 0\n+    }\n+\n+    return 1\n+}"}]}