{"sha": "776ff3efa9de7fce8b117b9f6388f317d447cb92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2ZmYzZWZhOWRlN2ZjZThiMTE3YjlmNjM4OGYzMTdkNDQ3Y2I5Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-17T15:56:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-17T15:56:49Z"}, "message": "lex.c (maybe_add_lang_type_raw): BOUND_TEMPLATE_TEMPLATE_PARMs don't need lang_type.\n\n\t* lex.c (maybe_add_lang_type_raw): BOUND_TEMPLATE_TEMPLATE_PARMs\n\tdon't need lang_type.\n\t(cxx_make_type): Use maybe_add_lang_type_raw return value.\n\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): Don't rely on\n\tTYPE_LANG_SPECIFIC.\n\nFrom-SVN: r251154", "tree": {"sha": "34ec29e83dc4237f4babd5d27764dc86cb350784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ec29e83dc4237f4babd5d27764dc86cb350784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776ff3efa9de7fce8b117b9f6388f317d447cb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776ff3efa9de7fce8b117b9f6388f317d447cb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776ff3efa9de7fce8b117b9f6388f317d447cb92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776ff3efa9de7fce8b117b9f6388f317d447cb92/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "46be937f6faada91485b9d53fed2610128c50515", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=776ff3efa9de7fce8b117b9f6388f317d447cb92", "patch": "@@ -1,5 +1,11 @@\n 2017-08-17  Nathan Sidwell  <nathan@acm.org>\n \n+\t* lex.c (maybe_add_lang_type_raw): BOUND_TEMPLATE_TEMPLATE_PARMs\n+\tdon't need lang_type.\n+\t(cxx_make_type): Use maybe_add_lang_type_raw return value.\n+\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): Don't rely on\n+\tTYPE_LANG_SPECIFIC.\n+\n \t* cp-tree.h (struct lang_type): Remove template_info field.\n \t(CLASSTYPE_TEMPLATE_INFO): Use TYPE_LANG_SLOT_1.\n \t(TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO): Likewise."}, {"sha": "b22d28742bb36f63d5e06022c0ca6d321452c2a5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=776ff3efa9de7fce8b117b9f6388f317d447cb92", "patch": "@@ -809,8 +809,7 @@ copy_type (tree type MEM_STAT_DECL)\n static bool\n maybe_add_lang_type_raw (tree t)\n {\n-  if (!(RECORD_OR_UNION_CODE_P (TREE_CODE (t))\n-\t|| TREE_CODE (t) == BOUND_TEMPLATE_TEMPLATE_PARM))\n+  if (!RECORD_OR_UNION_CODE_P (TREE_CODE (t)))\n     return false;\n   \n   TYPE_LANG_SPECIFIC (t)\n@@ -831,12 +830,10 @@ cxx_make_type (enum tree_code code)\n {\n   tree t = make_node (code);\n \n-  maybe_add_lang_type_raw (t);\n-\n-  /* Set up some flags that give proper default behavior.  */\n-  if (RECORD_OR_UNION_CODE_P (code))\n+  if (maybe_add_lang_type_raw (t))\n     {\n-      struct c_fileinfo *finfo = \\\n+      /* Set up some flags that give proper default behavior.  */\n+      struct c_fileinfo *finfo =\n \tget_fileinfo (LOCATION_FILE (input_location));\n       SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, finfo->interface_unknown);\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;"}, {"sha": "a87f97fdf9f08cc83bf83ebb386896c86f457570", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff3efa9de7fce8b117b9f6388f317d447cb92/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=776ff3efa9de7fce8b117b9f6388f317d447cb92", "patch": "@@ -81,10 +81,10 @@ along with GCC; see the file COPYING3.  If not see\n    instantiated outside of the template, and A is the type used\n    without parameters inside the template.  */\n #define CLASSTYPE_TEMPLATE_ID_P(NODE)\t\t\t\t\t\\\n-  (TYPE_LANG_SPECIFIC (NODE) != NULL\t\t\t\t\t\\\n-   && (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n-       || (CLASSTYPE_TEMPLATE_INFO (NODE) != NULL\t\t\t\\\n-\t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n+  (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n+   || (CLASS_TYPE_P (NODE)\t\t\t\t\t\t\\\n+       && CLASSTYPE_TEMPLATE_INFO (NODE) != NULL\t\t\t\\\n+       && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))\n \n /* For deciding whether to set G.need_abi_warning, we need to consider both\n    warn_abi_version and flag_abi_compat_version.  */"}]}