{"sha": "b99d6d2b800298cc003e77c15bb89b3d03ad9620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5ZDZkMmI4MDAyOThjYzAwM2U3N2MxNWJiODliM2QwM2FkOTYyMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-30T17:48:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-30T17:48:01Z"}, "message": "re PR target/19700 (ICE in final_scan_insn with O1 -g -march=athlon-xp -mfpmath=sse)\n\n        PR target/19700\n        * config/i386/i386.c (ix86_expand_copysign): New.\n        (ix86_split_copysign_const): New.\n        (ix86_split_copysign_var): Rename from ix86_split_copysign,\n        rearrange op1/nmask operands.\n        * config/i386/i386-protos.h: Update.\n        * config/i386/i386.md (copysignsf3): Use ix86_expand_copysign.\n        (copysigndf3): Likewise.\n        (copysignsf3_const, copysigndf3_const): New.\n        (copysignsf3_var): Rename from copysignsf3, split out splitter\n        and fix split predicate for X constraint.\n        (copysigndf3_var): Similarly.\n\nFrom-SVN: r94442", "tree": {"sha": "134976e6f81d462eca0cd9e90bf52a6297618630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/134976e6f81d462eca0cd9e90bf52a6297618630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b99d6d2b800298cc003e77c15bb89b3d03ad9620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99d6d2b800298cc003e77c15bb89b3d03ad9620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99d6d2b800298cc003e77c15bb89b3d03ad9620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99d6d2b800298cc003e77c15bb89b3d03ad9620/comments", "author": null, "committer": null, "parents": [{"sha": "c5c367ac3d831140d51f6bfa9da5f888fb2c4af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c367ac3d831140d51f6bfa9da5f888fb2c4af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c367ac3d831140d51f6bfa9da5f888fb2c4af5"}], "stats": {"total": 213, "additions": 178, "deletions": 35}, "files": [{"sha": "ba3e1fbb584ab4ec2adb1eb7cb23982a7f919696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b99d6d2b800298cc003e77c15bb89b3d03ad9620", "patch": "@@ -1,3 +1,18 @@\n+2005-01-30  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/19700\n+\t* config/i386/i386.c (ix86_expand_copysign): New.\n+\t(ix86_split_copysign_const): New.\n+\t(ix86_split_copysign_var): Rename from ix86_split_copysign, \n+\trearrange op1/nmask operands.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/i386/i386.md (copysignsf3): Use ix86_expand_copysign.\n+\t(copysigndf3): Likewise.\n+\t(copysignsf3_const, copysigndf3_const): New.\n+\t(copysignsf3_var): Rename from copysignsf3, split out splitter\n+\tand fix split predicate for X constraint.\n+\t(copysigndf3_var): Similarly.\n+\n 2005-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* optabs.c, doc/c-tree.texi, doc/install.texi, doc/md.texi,"}, {"sha": "feacd2d4e58f287e15d43b8d44a8dc2f54ed4038", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b99d6d2b800298cc003e77c15bb89b3d03ad9620", "patch": "@@ -139,7 +139,9 @@ extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,\n extern rtx ix86_build_signbit_mask (enum machine_mode, bool, bool);\n extern void ix86_expand_fp_absneg_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\t    rtx[]);\n-extern void ix86_split_copysign (rtx []);\n+extern void ix86_expand_copysign (rtx []);\n+extern void ix86_split_copysign_const (rtx []);\n+extern void ix86_split_copysign_var (rtx []);\n extern int ix86_unary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n extern int ix86_match_ccmode (rtx, enum machine_mode);\n extern rtx ix86_expand_compare (enum rtx_code, rtx *, rtx *);"}, {"sha": "4b6b3f20db1211e4d2208ff7285273e5d8106982", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b99d6d2b800298cc003e77c15bb89b3d03ad9620", "patch": "@@ -8117,19 +8117,101 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n     emit_move_insn (operands[0], dst);\n }\n \n-/* Deconstruct a copysign operation into bit masks.  */\n+/* Expand a copysign operation.  Special case operand 0 being a constant.  */\n \n void\n-ix86_split_copysign (rtx operands[])\n+ix86_expand_copysign (rtx operands[])\n+{\n+  enum machine_mode mode, vmode;\n+  rtx dest, op0, op1, mask, nmask;\n+\n+  dest = operands[0];\n+  op0 = operands[1];\n+  op1 = operands[2];\n+\n+  mode = GET_MODE (dest);\n+  vmode = mode == SFmode ? V4SFmode : V2DFmode;\n+\n+  if (GET_CODE (op0) == CONST_DOUBLE)\n+    {\n+      rtvec v;\n+\n+      if (real_isneg (CONST_DOUBLE_REAL_VALUE (op0)))\n+\top0 = simplify_unary_operation (ABS, mode, op0, mode);\n+\n+      if (op0 == CONST0_RTX (mode))\n+\top0 = CONST0_RTX (vmode);\n+      else\n+        {\n+\t  if (mode == SFmode)\n+\t    v = gen_rtvec (4, op0, CONST0_RTX (SFmode),\n+                           CONST0_RTX (SFmode), CONST0_RTX (SFmode));\n+\t  else\n+\t    v = gen_rtvec (2, op0, CONST0_RTX (DFmode));\n+          op0 = force_reg (vmode, gen_rtx_CONST_VECTOR (vmode, v));\n+\t}\n+\n+      mask = ix86_build_signbit_mask (mode, 0, 0);\n+\n+      if (mode == SFmode)\n+\temit_insn (gen_copysignsf3_const (dest, op0, op1, mask));\n+      else\n+\temit_insn (gen_copysigndf3_const (dest, op0, op1, mask));\n+    }\n+  else\n+    {\n+      nmask = ix86_build_signbit_mask (mode, 0, 1);\n+      mask = ix86_build_signbit_mask (mode, 0, 0);\n+\n+      if (mode == SFmode)\n+\temit_insn (gen_copysignsf3_var (dest, NULL, op0, op1, nmask, mask));\n+      else\n+\temit_insn (gen_copysigndf3_var (dest, NULL, op0, op1, nmask, mask));\n+    }\n+}\n+\n+/* Deconstruct a copysign operation into bit masks.  Operand 0 is known to\n+   be a constant, and so has already been expanded into a vector constant.  */\n+\n+void\n+ix86_split_copysign_const (rtx operands[])\n+{\n+  enum machine_mode mode, vmode;\n+  rtx dest, op0, op1, mask, x;\n+\n+  dest = operands[0];\n+  op0 = operands[1];\n+  op1 = operands[2];\n+  mask = operands[3];\n+\n+  mode = GET_MODE (dest);\n+  vmode = GET_MODE (mask);\n+\n+  dest = simplify_gen_subreg (vmode, dest, mode, 0);\n+  x = gen_rtx_AND (vmode, dest, mask);\n+  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+\n+  if (op0 != CONST0_RTX (vmode))\n+    {\n+      x = gen_rtx_IOR (vmode, dest, op0);\n+      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+    }\n+}\n+\n+/* Deconstruct a copysign operation into bit masks.  Operand 0 is variable,\n+   so we have to do two masks.  */\n+\n+void\n+ix86_split_copysign_var (rtx operands[])\n {\n   enum machine_mode mode, vmode;\n   rtx dest, scratch, op0, op1, mask, nmask, x;\n \n   dest = operands[0];\n   scratch = operands[1];\n   op0 = operands[2];\n-  nmask = operands[3];\n-  op1 = operands[4];\n+  op1 = operands[3];\n+  nmask = operands[4];\n   mask = operands[5];\n \n   mode = GET_MODE (dest);"}, {"sha": "4f8d31093f08d564577a3b7d3a9de3578769a08e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 74, "deletions": 30, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99d6d2b800298cc003e77c15bb89b3d03ad9620/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b99d6d2b800298cc003e77c15bb89b3d03ad9620", "patch": "@@ -9452,34 +9452,56 @@\n   \"#\")\n \n (define_expand \"copysignsf3\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")\n-\t\t\t       (match_dup 4)\n-\t\t\t       (match_operand:SF 2 \"register_operand\" \"\")\n-\t\t\t       (match_dup 5)]\n-\t\t\t      UNSPEC_COPYSIGN))\n-\t      (clobber (match_scratch:V4SF 3 \"\"))])]\n+  [(match_operand:SF 0 \"register_operand\" \"\")\n+   (match_operand:SF 1 \"nonmemory_operand\" \"\")\n+   (match_operand:SF 2 \"register_operand\" \"\")]\n   \"TARGET_SSE_MATH\"\n {\n-  operands[4] = ix86_build_signbit_mask (SFmode, 0, 1);\n-  operands[5] = ix86_build_signbit_mask (SFmode, 0, 0);\n+  ix86_expand_copysign (operands);\n+  DONE;\n })\n \n-(define_insn_and_split \"*copysignsf3\"\n+(define_insn_and_split \"copysignsf3_const\"\n+  [(set (match_operand:SF 0 \"register_operand\"          \"=x\")\n+\t(unspec:SF\n+\t  [(match_operand:V4SF 1 \"vector_move_operand\"  \"xmC\")\n+\t   (match_operand:SF 2 \"register_operand\"       \"0\")\n+\t   (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_COPYSIGN))]\n+  \"TARGET_SSE_MATH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  ix86_split_copysign_const (operands);\n+  DONE;\n+})\n+\n+(define_insn \"copysignsf3_var\"\n   [(set (match_operand:SF 0 \"register_operand\"          \"=x, x, x, x,x\")\n \t(unspec:SF\n \t  [(match_operand:SF 2 \"register_operand\"       \" x, 0, 0, x,x\")\n-\t   (match_operand:V4SF 3 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n-\t   (match_operand:SF 4 \"register_operand\"       \" 1, 1, x, 1,x\")\n+\t   (match_operand:SF 3 \"register_operand\"       \" 1, 1, x, 1,x\")\n+\t   (match_operand:V4SF 4 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n \t   (match_operand:V4SF 5 \"nonimmediate_operand\" \" 0,xm, 1,xm,1\")]\n \t  UNSPEC_COPYSIGN))\n    (clobber (match_scratch:V4SF 1\t\t\t\"=x, x, x, x,x\"))]\n   \"TARGET_SSE_MATH\"\n-  \"#\"\n-  \"&& reload_completed\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(unspec:SF\n+\t  [(match_operand:SF 2 \"register_operand\" \"\")\n+\t   (match_operand:SF 3 \"register_operand\" \"\")\n+\t   (match_operand:V4SF 4 \"\" \"\")\n+\t   (match_operand:V4SF 5 \"\" \"\")]\n+\t  UNSPEC_COPYSIGN))\n+   (clobber (match_scratch:V4SF 1 \"\"))]\n+  \"TARGET_SSE_MATH && reload_completed\"\n   [(const_int 0)]\n {\n-  ix86_split_copysign (operands);\n+  ix86_split_copysign_var (operands);\n   DONE;\n })\n \n@@ -9526,34 +9548,56 @@\n   \"#\")\n \n (define_expand \"copysigndf3\"\n-  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")\n-\t\t\t       (match_dup 4)\n-\t\t\t       (match_operand:DF 2 \"register_operand\" \"\")\n-\t\t\t       (match_dup 5)]\n-\t\t\t      UNSPEC_COPYSIGN))\n-\t      (clobber (match_scratch:V2DF 3 \"\"))])]\n+  [(match_operand:DF 0 \"register_operand\" \"\")\n+   (match_operand:DF 1 \"nonmemory_operand\" \"\")\n+   (match_operand:DF 2 \"register_operand\" \"\")]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n-  operands[4] = ix86_build_signbit_mask (DFmode, 0, 1);\n-  operands[5] = ix86_build_signbit_mask (DFmode, 0, 0);\n+  ix86_expand_copysign (operands);\n+  DONE;\n })\n \n-(define_insn_and_split \"*copysigndf3\"\n+(define_insn_and_split \"copysigndf3_const\"\n+  [(set (match_operand:DF 0 \"register_operand\"          \"=x\")\n+\t(unspec:DF\n+\t  [(match_operand:V2DF 1 \"vector_move_operand\"  \"xmC\")\n+\t   (match_operand:DF 2 \"register_operand\"       \"0\")\n+\t   (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_COPYSIGN))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  ix86_split_copysign_const (operands);\n+  DONE;\n+})\n+\n+(define_insn \"copysigndf3_var\"\n   [(set (match_operand:DF 0 \"register_operand\"          \"=x, x, x, x,x\")\n \t(unspec:DF\n \t  [(match_operand:DF 2 \"register_operand\"       \" x, 0, 0, x,x\")\n-\t   (match_operand:V2DF 3 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n-\t   (match_operand:DF 4 \"register_operand\"       \" 1, 1, x, 1,x\")\n+\t   (match_operand:DF 3 \"register_operand\"       \" 1, 1, x, 1,x\")\n+\t   (match_operand:V2DF 4 \"nonimmediate_operand\" \" X,xm,xm, 0,0\")\n \t   (match_operand:V2DF 5 \"nonimmediate_operand\" \" 0,xm, 1,xm,1\")]\n \t  UNSPEC_COPYSIGN))\n    (clobber (match_scratch:V2DF 1\t\t\t\"=x, x, x, x,x\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"#\"\n-  \"&& reload_completed\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(unspec:DF\n+\t  [(match_operand:DF 2 \"register_operand\" \"\")\n+\t   (match_operand:DF 3 \"register_operand\" \"\")\n+\t   (match_operand:V2DF 4 \"\" \"\")\n+\t   (match_operand:V2DF 5 \"\" \"\")]\n+\t  UNSPEC_COPYSIGN))\n+   (clobber (match_scratch:V2DF 1 \"\"))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH && reload_completed\"\n   [(const_int 0)]\n {\n-  ix86_split_copysign (operands);\n+  ix86_split_copysign_var (operands);\n   DONE;\n })\n "}]}