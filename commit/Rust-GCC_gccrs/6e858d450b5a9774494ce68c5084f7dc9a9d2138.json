{"sha": "6e858d450b5a9774494ce68c5084f7dc9a9d2138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4NThkNDUwYjVhOTc3NDQ5NGNlNjhjNTA4NGY3ZGM5YTlkMjEzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-03-29T05:46:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-03-29T05:46:46Z"}, "message": "reg-stack.c (subst_stack_regs_pat): Handle <UNSPEC_FIST> case.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle <UNSPEC_FIST> case.\n\t* config/i386/i386.c (output_fix_trunc): Add new round_mode\n\tvariable.  Output \"fldcw\" depending on round_mode.\n\t* config/i386/i386.md (UNSPEC_FIST): New.\n\t(fistdi2, fistdi2_with_temp, fist<mode>2, fist<mode>2_with_temp):\n\tNew isns patterns to implement lrint and llrint built-ins as x87\n\tintrinsic function.\n\t(fistdi2, fist<mode>2 splitters): New splitters.\n\t(lrint<mode>2): New expanders.\n\nFrom-SVN: r97151", "tree": {"sha": "6d42464074095f61a71de55b917919194d52861a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d42464074095f61a71de55b917919194d52861a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e858d450b5a9774494ce68c5084f7dc9a9d2138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e858d450b5a9774494ce68c5084f7dc9a9d2138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e858d450b5a9774494ce68c5084f7dc9a9d2138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e858d450b5a9774494ce68c5084f7dc9a9d2138/comments", "author": null, "committer": null, "parents": [{"sha": "2fa330b29a650365d4d88e4407fdbc2934dcb1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa330b29a650365d4d88e4407fdbc2934dcb1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa330b29a650365d4d88e4407fdbc2934dcb1b4"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "5ba2bc665a92a60263235a44e857d1bfd0970002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e858d450b5a9774494ce68c5084f7dc9a9d2138", "patch": "@@ -1,3 +1,15 @@\n+2005-03-29  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle <UNSPEC_FIST> case.\n+\t* config/i386/i386.c (output_fix_trunc): Add new round_mode\n+\tvariable.  Output \"fldcw\" depending on round_mode.\n+\t* config/i386/i386.md (UNSPEC_FIST): New.\n+\t(fistdi2, fistdi2_with_temp, fist<mode>2, fist<mode>2_with_temp):\n+\tNew isns patterns to implement lrint and llrint built-ins as x87\n+\tintrinsic function.\n+\t(fistdi2, fist<mode>2 splitters): New splitters.\n+\t(lrint<mode>2): New expanders.\n+\n 2005-03-28  Ian Lance Taylor  <ian@airs.com>\n \n \t* config/arc/arc.c (arc_output_function_epilogue): Pass prescan as"}, {"sha": "1e9165f4412affc228f02e28d1febb7e56e28308", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e858d450b5a9774494ce68c5084f7dc9a9d2138", "patch": "@@ -7287,6 +7287,7 @@ output_fix_trunc (rtx insn, rtx *operands, int fisttp)\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n   int dimode_p = GET_MODE (operands[0]) == DImode;\n+  int round_mode = get_attr_i387_cw (insn);\n \n   /* Jump through a hoop or two for DImode, since the hardware has no\n      non-popping instruction.  We used to do this a different way, but\n@@ -7304,12 +7305,14 @@ output_fix_trunc (rtx insn, rtx *operands, int fisttp)\n       output_asm_insn (\"fisttp%z0\\t%0\", operands);\n   else\n     {\n-      output_asm_insn (\"fldcw\\t%3\", operands);\n+      if (round_mode != I387_CW_ANY)\n+\toutput_asm_insn (\"fldcw\\t%3\", operands);\n       if (stack_top_dies || dimode_p)\n \toutput_asm_insn (\"fistp%z0\\t%0\", operands);\n       else\n \toutput_asm_insn (\"fist%z0\\t%0\", operands);\n-      output_asm_insn (\"fldcw\\t%2\", operands);\n+      if (round_mode != I387_CW_ANY)\n+\toutput_asm_insn (\"fldcw\\t%2\", operands);\n     }\n \n   return \"\";"}, {"sha": "9041cd0b534722bf116211e02d3c67c7e4887dfa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6e858d450b5a9774494ce68c5084f7dc9a9d2138", "patch": "@@ -119,7 +119,8 @@\n    (UNSPEC_FYL2X\t\t66)\n    (UNSPEC_FYL2XP1\t\t67)\n    (UNSPEC_FRNDINT\t\t68)\n-   (UNSPEC_F2XM1\t\t69)\n+   (UNSPEC_FIST\t\t\t69)\n+   (UNSPEC_F2XM1\t\t70)\n \n    ; x87 Double output FP\n    (UNSPEC_SINCOS_COS\t\t80)\n@@ -16244,6 +16245,112 @@\n   DONE;\n })\n \n+(define_insn \"fistdi2\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"f\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_scratch:XF 2 \"=&1f\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+  \"* return output_fix_trunc (insn, operands, 0);\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"fistdi2_with_temp\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"f,f\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch:XF 3 \"=&1f,&1f\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_split \n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 3 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 2) (unspec:DI [(match_dup 1)] UNSPEC_FIST))\n+\t      (clobber (match_dup 3))])\n+   (set (match_dup 0) (match_dup 2))]\n+  \"\")\n+\n+(define_split \n+  [(set (match_operand:DI 0 \"memory_operand\" \"\")\n+\t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch 3 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_FIST))\n+\t      (clobber (match_dup 3))])]\n+  \"\")\n+\n+(define_insn \"fist<mode>2\"\n+  [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n+\t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n+\t UNSPEC_FIST))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+  \"* return output_fix_trunc (insn, operands, 0);\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"fist<mode>2_with_temp\"\n+  [(set (match_operand:X87MODEI12 0 \"nonimmediate_operand\" \"=m,?r\")\n+\t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f,f\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_operand:X87MODEI12 2 \"memory_operand\" \"=m,m\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_split \n+  [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n+\t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_operand:X87MODEI12 2 \"memory_operand\" \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 2) (unspec:X87MODEI12 [(match_dup 1)]\n+\t\t       UNSPEC_FIST))\n+   (set (match_dup 0) (match_dup 2))]\n+  \"\")\n+\n+(define_split \n+  [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n+\t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t UNSPEC_FIST))\n+   (clobber (match_scratch 2 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (unspec:X87MODEI12 [(match_dup 1)]\n+\t\t       UNSPEC_FIST))]\n+  \"\")\n+\n+(define_expand \"lrint<mode>2\"\n+  [(use (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  if (memory_operand (operands[0], VOIDmode))\n+    emit_insn (gen_fist<mode>2 (operands[0], operands[1]));\n+  else\n+    {\n+      operands[2] = assign_386_stack_local (<MODE>mode, 0);\n+      emit_insn (gen_fist<mode>2_with_temp (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n+    }\n+  DONE;\n+})\n+\n (define_insn \"frndintxf2_floor\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]"}, {"sha": "6f58341ba2775f327c274738382274ae21ebdd11", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e858d450b5a9774494ce68c5084f7dc9a9d2138/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=6e858d450b5a9774494ce68c5084f7dc9a9d2138", "patch": "@@ -1672,6 +1672,27 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t  case UNSPEC:\n \t    switch (XINT (pat_src, 1))\n \t      {\n+\t      case UNSPEC_FIST:\n+\t\t/* These insns only operate on the top of the stack.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\temit_swap_insn (insn, regstack, *src1);\n+\n+\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n+\n+\t\tif (STACK_REG_P (*dest))\n+\t\t  replace_reg (dest, FIRST_STACK_REG);\n+\n+\t\tif (src1_note)\n+\t\t  {\n+\t\t    replace_reg (&XEXP (src1_note, 0), FIRST_STACK_REG);\n+\t\t    regstack->top--;\n+\t\t    CLEAR_HARD_REG_BIT (regstack->reg_set, REGNO (*src1));\n+\t\t  }\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\t\tbreak;\n+\n \t      case UNSPEC_SIN:\n \t      case UNSPEC_COS:\n \t      case UNSPEC_FRNDINT:"}]}