{"sha": "878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4ZWVmNGFkOGFhNjg1OGZlMjcwY2NiNTg5ZDNlZWQ0YTA1YzhlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-10-05T19:24:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-05T19:24:38Z"}, "message": "re PR debug/54519 (Debug info quality regression due to (pointless) partial inlining)\n\n\tPR debug/54519\n\t* ipa-split.c (split_function): Add debug args and\n\tdebug source and normal stmts for args_to_skip which are\n\tgimple regs.\n\t* tree-inline.c (copy_debug_stmt): When inlining, adjust\n\tsource debug bind stmts to debug binds of corresponding\n\tDEBUG_EXPR_DECL.\n\n\t* gcc.dg/guality/pr54519-1.c: New test.\n\t* gcc.dg/guality/pr54519-2.c: New test.\n\t* gcc.dg/guality/pr54519-3.c: New test.\n\t* gcc.dg/guality/pr54519-4.c: New test.\n\t* gcc.dg/guality/pr54519-5.c: New test.\n\t* gcc.dg/guality/pr54519-6.c: New test.\n\nFrom-SVN: r192139", "tree": {"sha": "f6eec448c0e3da89f23b49565a93609752d5a0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6eec448c0e3da89f23b49565a93609752d5a0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b1cd14dd034dec421712abbd95111a2c4fb08e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1cd14dd034dec421712abbd95111a2c4fb08e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1cd14dd034dec421712abbd95111a2c4fb08e1"}], "stats": {"total": 369, "additions": 369, "deletions": 0}, "files": [{"sha": "371a5fb70ac7b817688e4cd6755bf76056628879", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -1,3 +1,13 @@\n+2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54519\n+\t* ipa-split.c (split_function): Add debug args and\n+\tdebug source and normal stmts for args_to_skip which are\n+\tgimple regs.\n+\t* tree-inline.c (copy_debug_stmt): When inlining, adjust\n+\tsource debug bind stmts to debug binds of corresponding\n+\tDEBUG_EXPR_DECL.\n+\n 2012-10-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md: Fix indentations of insn C snippets."}, {"sha": "6750c11381a7bbe7743162ad58d62bcb45bd0bf2", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -1059,6 +1059,7 @@ split_function (struct split_point *split_point)\n   gimple last_stmt = NULL;\n   unsigned int i;\n   tree arg, ddef;\n+  VEC(tree, gc) **debug_args = NULL;\n \n   if (dump_file)\n     {\n@@ -1232,6 +1233,83 @@ split_function (struct split_point *split_point)\n   gimple_set_block (call, DECL_INITIAL (current_function_decl));\n   VEC_free (tree, heap, args_to_pass);\n \n+  /* For optimized away parameters, add on the caller side\n+     before the call\n+     DEBUG D#X => parm_Y(D)\n+     stmts and associate D#X with parm in decl_debug_args_lookup\n+     vector to say for debug info that if parameter parm had been passed,\n+     it would have value parm_Y(D).  */\n+  if (args_to_skip)\n+    for (parm = DECL_ARGUMENTS (current_function_decl), num = 0;\n+\t parm; parm = DECL_CHAIN (parm), num++)\n+      if (bitmap_bit_p (args_to_skip, num)\n+\t  && is_gimple_reg (parm))\n+\t{\n+\t  tree ddecl;\n+\t  gimple def_temp;\n+\n+\t  /* This needs to be done even without MAY_HAVE_DEBUG_STMTS,\n+\t     otherwise if it didn't exist before, we'd end up with\n+\t     different SSA_NAME_VERSIONs between -g and -g0.  */\n+\t  arg = get_or_create_ssa_default_def (cfun, parm);\n+\t  if (!MAY_HAVE_DEBUG_STMTS)\n+\t    continue;\n+\n+\t  if (debug_args == NULL)\n+\t    debug_args = decl_debug_args_insert (node->symbol.decl);\n+\t  ddecl = make_node (DEBUG_EXPR_DECL);\n+\t  DECL_ARTIFICIAL (ddecl) = 1;\n+\t  TREE_TYPE (ddecl) = TREE_TYPE (parm);\n+\t  DECL_MODE (ddecl) = DECL_MODE (parm);\n+\t  VEC_safe_push (tree, gc, *debug_args, DECL_ORIGIN (parm));\n+\t  VEC_safe_push (tree, gc, *debug_args, ddecl);\n+\t  def_temp = gimple_build_debug_bind (ddecl, unshare_expr (arg),\n+\t\t\t\t\t      call);\n+\t  gsi_insert_after (&gsi, def_temp, GSI_NEW_STMT);\n+\t}\n+  /* And on the callee side, add\n+     DEBUG D#Y s=> parm\n+     DEBUG var => D#Y\n+     stmts to the first bb where var is a VAR_DECL created for the\n+     optimized away parameter in DECL_INITIAL block.  This hints\n+     in the debug info that var (whole DECL_ORIGIN is the parm PARM_DECL)\n+     is optimized away, but could be looked up at the call site\n+     as value of D#X there.  */\n+  if (debug_args != NULL)\n+    {\n+      unsigned int i;\n+      tree var, vexpr;\n+      gimple_stmt_iterator cgsi;\n+      gimple def_temp;\n+\n+      push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n+      var = BLOCK_VARS (DECL_INITIAL (node->symbol.decl));\n+      i = VEC_length (tree, *debug_args);\n+      cgsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR));\n+      do\n+\t{\n+\t  i -= 2;\n+\t  while (var != NULL_TREE\n+\t\t && DECL_ABSTRACT_ORIGIN (var)\n+\t\t    != VEC_index (tree, *debug_args, i))\n+\t    var = TREE_CHAIN (var);\n+\t  if (var == NULL_TREE)\n+\t    break;\n+\t  vexpr = make_node (DEBUG_EXPR_DECL);\n+\t  parm = VEC_index (tree, *debug_args, i);\n+\t  DECL_ARTIFICIAL (vexpr) = 1;\n+\t  TREE_TYPE (vexpr) = TREE_TYPE (parm);\n+\t  DECL_MODE (vexpr) = DECL_MODE (parm);\n+\t  def_temp = gimple_build_debug_source_bind (vexpr, parm,\n+\t\t\t\t\t\t     NULL);\n+\t  gsi_insert_before (&cgsi, def_temp, GSI_SAME_STMT);\n+\t  def_temp = gimple_build_debug_bind (var, vexpr, NULL);\n+\t  gsi_insert_before (&cgsi, def_temp, GSI_SAME_STMT);\n+\t}\n+      while (i);\n+      pop_cfun ();\n+    }\n+\n   /* We avoid address being taken on any variable used by split part,\n      so return slot optimization is always possible.  Moreover this is\n      required to make DECL_BY_REFERENCE work.  */"}, {"sha": "ba310754789c75f087ffefb36e5a07559eadb68e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -1,3 +1,13 @@\n+2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54519\n+\t* gcc.dg/guality/pr54519-1.c: New test.\n+\t* gcc.dg/guality/pr54519-2.c: New test.\n+\t* gcc.dg/guality/pr54519-3.c: New test.\n+\t* gcc.dg/guality/pr54519-4.c: New test.\n+\t* gcc.dg/guality/pr54519-5.c: New test.\n+\t* gcc.dg/guality/pr54519-6.c: New test.\n+\n 2012-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50893"}, {"sha": "98afd45c18f8ddb0f6604ff4983db03a8a6ca3f6", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-1.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,48 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+fn1 (int x)\n+{\n+  __asm volatile (\"\" : \"+r\" (x) : : \"memory\");\n+}\n+\n+static int\n+fn2 (int x, int y, int z)\n+{\n+  int a = 8;\n+  if (x != z)\n+    {\n+      fn1 (x);\n+      fn1 (x);\t\t/* { dg-final { gdb-test 20 \"x\" \"36\" } } */\n+      if (x == 36)\t/* { dg-final { gdb-test 20 \"y\" \"25\" } } */\n+\tfn1 (x);\t/* { dg-final { gdb-test 20 \"z\" \"6\" } } */\n+      fn1 (x);\t\t/* { dg-final { gdb-test 23 \"x\" \"98\" } } */\n+      if (x == 98)\t/* { dg-final { gdb-test 23 \"y\" \"117\" } } */\n+\tfn1 (x);\t/* { dg-final { gdb-test 23 \"z\" \"8\" } } */\n+      fn1 (x);\n+      fn1 (x + a);\n+    }\n+  return y;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn3 (int x, int y)\n+{\n+  return fn2 (x, y, 6);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn4 (int x, int y)\n+{\n+  return fn2 (x, y, 8);\n+}\n+\n+int\n+main ()\n+{\n+  fn3 (36, 25);\n+  fn4 (98, 117);\n+  return 0;\n+}"}, {"sha": "4ee3c9e2f84acf940ceebd1c2e2b682bdae65c53", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-2.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,45 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+fn1 (int x)\n+{\n+  __asm volatile (\"\" : \"+r\" (x) : : \"memory\");\n+}\n+\n+static int\n+fn2 (int x, int y)\n+{\n+  if (y)\n+    {\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"x\" \"6\" } } */\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"y\" \"25\" } } */\n+      fn1 (x);\n+      fn1 (x);\n+      y = -2 + x;\n+      y = y * y * y + y;\n+      fn1 (x + y);\t/* { dg-final { gdb-test 22 \"y\" \"68\" } } */\n+    }\n+  return x;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn3 (int x, int y)\n+{\n+  return fn2 (x, y) + y;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn4 (int x, int y)\n+{\n+  return fn2 (x, y) + y;\n+}\n+\n+int\n+main ()\n+{\n+  fn3 (6, 25);\n+  fn4 (4, 117);\n+  return 0;\n+}"}, {"sha": "aa8369e15b83b2d91d6054171bb1ef0c9547c1bd", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-3.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,42 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+fn1 (int x)\n+{\n+  __asm volatile (\"\" : \"+r\" (x) : : \"memory\");\n+}\n+\n+static int\n+fn2 (int x, int y, int z)\n+{\n+  int a = 8;\n+  if (x != z)\n+    {\n+      fn1 (x);\n+      fn1 (x);\t\t/* { dg-final { gdb-test 20 \"x\" \"36\" } } */\n+      if (x == 36)\t/* { dg-final { gdb-test 20 \"y\" \"25\" } } */\n+\tfn1 (x);\t/* { dg-final { gdb-test 20 \"z\" \"6\" } } */\n+      fn1 (x);\t\t/* { dg-final { gdb-test 23 \"x\" \"98\" } } */\n+      if (x == 98)\t/* { dg-final { gdb-test 23 \"y\" \"117\" } } */\n+\tfn1 (x);\t/* { dg-final { gdb-test 23 \"z\" \"8\" } } */\n+      fn1 (x);\n+      fn1 (x + a);\n+    }\n+  return y;\n+}\n+\n+int (*p) (int, int, int) = fn2;\n+\n+int\n+main ()\n+{\n+  __asm volatile (\"\" : : : \"memory\");\n+  int (*q) (int, int, int) = p;\n+  __asm volatile (\"\" : : : \"memory\");\n+  q (36, 25, 6);\n+  q (98, 117, 8);\n+  q (0, 0, 0);\n+  return 0;\n+}"}, {"sha": "d2765d148c2ff4146d49ca729d0b87f006281792", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-4.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,39 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+fn1 (int x)\n+{\n+  __asm volatile (\"\" : \"+r\" (x) : : \"memory\");\n+}\n+\n+static int\n+fn2 (int x, int y)\n+{\n+  if (y)\n+    {\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"x\" \"6\" } } */\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"y\" \"25\" } } */\n+      fn1 (x);\n+      fn1 (x);\n+      y = -2 + x;\n+      y = y * y * y + y;\n+      fn1 (x + y);\t/* { dg-final { gdb-test 22 \"y\" \"68\" } } */\n+    }\n+  return x;\n+}\n+\n+int (*p) (int, int) = fn2;\n+\n+int\n+main ()\n+{\n+  __asm volatile (\"\" : : : \"memory\");\n+  int (*q) (int, int) = p;\n+  __asm volatile (\"\" : : : \"memory\");\n+  q (6, 25);\n+  q (4, 117);\n+  q (0, 0);\n+  return 0;\n+}"}, {"sha": "c64527a45d97c0db2811a78f53b907005fbcdce2", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-5.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,45 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+fn1 (int x)\n+{\n+  __asm volatile (\"\" : \"+r\" (x) : : \"memory\");\n+}\n+\n+static int\n+fn2 (int x, int y)\n+{\n+  if (y)\n+    {\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"x\" \"6\" } } */\n+      fn1 (x);\t\t/* { dg-final { gdb-test 17 \"y\" \"25\" } } */\n+      fn1 (x);\n+      fn1 (x);\n+      y = -2 + x;\n+      y = y * y * y + y;\n+      fn1 (x + y);\t/* { dg-final { gdb-test 22 \"y\" \"68\" } } */\n+    }\n+  return x;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn3 (int x, int y)\n+{\n+  return fn2 (x, y);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+fn4 (int x, int y)\n+{\n+  return fn2 (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  fn3 (6, 25);\n+  fn4 (4, 117);\n+  return 0;\n+}"}, {"sha": "836ab1f6601cc173f606b559f1c074db9e03d38a", "filename": "gcc/testsuite/gcc.dg/guality/pr54519-6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54519-6.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -0,0 +1,27 @@\n+/* PR debug/54519 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include \"../nop.h\"\n+\n+static inline void\n+f1 (int x, int y)\n+{\n+  asm volatile (NOP);\t/* { dg-final { gdb-test 11 \"x\" \"2\" } } */\n+  asm volatile (NOP);\t/* { dg-final { gdb-test 11 \"y\" \"0\" } } */\n+}\n+\n+static inline void\n+f2 (int z)\n+{\n+  f1 (z, 0);\n+  f1 (z, 1);\n+}\n+\n+int\n+main ()\n+{\n+  f2 (2);\n+  f2 (3);\n+  return 0;\n+}"}, {"sha": "04f87a3e309863ce3cd8c99737de0d986487b31c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878eef4ad8aa6858fe270ccb589d3eed4a05c8e3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=878eef4ad8aa6858fe270ccb589d3eed4a05c8e3", "patch": "@@ -2374,6 +2374,31 @@ copy_debug_stmt (gimple stmt, copy_body_data *id)\n       gimple_debug_source_bind_set_var (stmt, t);\n       walk_tree (gimple_debug_source_bind_get_value_ptr (stmt),\n \t\t remap_gimple_op_r, &wi, NULL);\n+      /* When inlining and source bind refers to one of the optimized\n+\t away parameters, change the source bind into normal debug bind\n+\t referring to the corresponding DEBUG_EXPR_DECL that should have\n+\t been bound before the call stmt.  */\n+      t = gimple_debug_source_bind_get_value (stmt);\n+      if (t != NULL_TREE\n+\t  && TREE_CODE (t) == PARM_DECL\n+\t  && id->gimple_call)\n+\t{\n+\t  VEC(tree, gc) **debug_args = decl_debug_args_lookup (id->src_fn);\n+\t  unsigned int i;\n+\t  if (debug_args != NULL)\n+\t    {\n+\t      for (i = 0; i < VEC_length (tree, *debug_args); i += 2)\n+\t\tif (VEC_index (tree, *debug_args, i) == DECL_ORIGIN (t)\n+\t\t    && TREE_CODE (VEC_index (tree, *debug_args, i + 1))\n+\t\t       == DEBUG_EXPR_DECL)\n+\t\t  {\n+\t\t    t = VEC_index (tree, *debug_args, i + 1);\n+\t\t    stmt->gsbase.subcode = GIMPLE_DEBUG_BIND;\n+\t\t    gimple_debug_bind_set_value (stmt, t);\n+\t\t    break;\n+\t\t  }\n+\t    }\n+\t}      \n     }\n \n   processing_debug_stmt = 0;"}]}