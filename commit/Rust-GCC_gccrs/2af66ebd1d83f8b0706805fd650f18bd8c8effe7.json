{"sha": "2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "node_id": "C_kwDOANBUbNoAKDJhZjY2ZWJkMWQ4M2Y4YjA3MDY4MDVmZDY1MGYxOGJkOGM4ZWZmZTc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-01T11:41:47Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:19Z"}, "message": "gccrs: parser: Improve parsing of complex generic arguments\n\nThe parser was missing code for handling complex type arguments such\nas type paths or nested generics.\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse-impl.h (Parser::parse_generic_arg): Handle type\n\tpaths and nested generics properly.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/parse_complex_generic_application.rs: New test.\n\t* rust/compile/parse_complex_generic_application2.rs: New test.", "tree": {"sha": "fa264171bf7799bea5212c03fc1efb9532ab3d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa264171bf7799bea5212c03fc1efb9532ab3d33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f53e5853d2b058e76235624c6988362ef4151e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f53e5853d2b058e76235624c6988362ef4151e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f53e5853d2b058e76235624c6988362ef4151e"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "3610790815c25720d34f59a6a8fa4fa279652fe5", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "patch": "@@ -6309,7 +6309,9 @@ Parser<ManagedTokenSource>::parse_generic_arg ()\n \t// could either have a valid type or a macro (FIXME: anything else?). So\n \t// we need one bit of lookahead to differentiate if this is really\n \tauto next_tok = lexer.peek_token (1);\n-\tif (next_tok->get_id () == EXCLAM)\n+\tif (next_tok->get_id () == LEFT_ANGLE\n+\t    || next_tok->get_id () == SCOPE_RESOLUTION\n+\t    || next_tok->get_id () == EXCLAM)\n \t  {\n \t    auto type = parse_type ();\n \t    if (type)"}, {"sha": "d5c7bf488b7d33371fc8bbe0f12f295a16af1a2d", "filename": "gcc/testsuite/rust/compile/parse_complex_generic_application.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application.rs?ref=2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "patch": "@@ -0,0 +1,17 @@\n+pub enum Either<T, E> {\n+    Left(T),\n+    Right(E),\n+}\n+\n+pub mod err {\n+    pub struct Error;\n+    pub struct ErrorWrap<T>(T);\n+}\n+\n+pub fn foo_err() -> Either<(), err::Error> {\n+    Either::Left(())\n+}\n+\n+pub fn foo_err_wrap() -> Either<(), err::ErrorWrap<u8>> {\n+    Either::Left(())\n+}"}, {"sha": "0361931c50c0b0b40234c5becf63fe78b6fb2814", "filename": "gcc/testsuite/rust/compile/parse_complex_generic_application2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af66ebd1d83f8b0706805fd650f18bd8c8effe7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_complex_generic_application2.rs?ref=2af66ebd1d83f8b0706805fd650f18bd8c8effe7", "patch": "@@ -0,0 +1,10 @@\n+pub enum Either<L, R> {\n+    Left(L),\n+    Right(R),\n+}\n+\n+pub struct Wrap<T>(T);\n+\n+pub fn foo_wrap() -> Either<(), Wrap<u8>> {\n+    Either::Left(())\n+}"}]}