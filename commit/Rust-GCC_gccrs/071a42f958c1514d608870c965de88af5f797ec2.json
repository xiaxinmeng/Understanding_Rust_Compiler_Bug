{"sha": "071a42f958c1514d608870c965de88af5f797ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxYTQyZjk1OGMxNTE0ZDYwODg3MGM5NjVkZTg4YWY1Zjc5N2VjMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-11-27T15:07:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-11-27T15:07:10Z"}, "message": "cfgexpand.c (construct_exit_block): Don't disturb end of last BB.\n\n\n\t* cfgexpand.c (construct_exit_block): Don't disturb end of last BB.\n\t* rtl.texi (NOTE_INSN_FUNCTION_END): Remove.\n\t* final.c (final_scan_insn): Don't scan NOTE_INSN_FUNCTION_END.\n\t* insn-notes.def (FUNCTION_END): Remove.\n\t* jump.c (delete_related_insns): Don't worry about FUNCTION_END.\n\t(redicect_jump_2): Don't accept -1 parameter to remove FUNCTION_END\n\tnote.\n\t* ifcvt.c (dead_or_predictable): Update call of redirect_jump_2.\n\t* function.c (expand_function_end): Don't emit NOTE_INSN_FUNCTION_END\n\t* cfglayout.c (duplicate_insn_chain): Don't worry about\n\tNOTE_FUNCTION_END.\n\nFrom-SVN: r119250", "tree": {"sha": "3174477a8d1b3916f3d18072026872cc7db41e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3174477a8d1b3916f3d18072026872cc7db41e00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071a42f958c1514d608870c965de88af5f797ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071a42f958c1514d608870c965de88af5f797ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071a42f958c1514d608870c965de88af5f797ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071a42f958c1514d608870c965de88af5f797ec2/comments", "author": null, "committer": null, "parents": [{"sha": "2505a3f233da445e15c2a5d6bdb82c7a6dd6a2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2505a3f233da445e15c2a5d6bdb82c7a6dd6a2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2505a3f233da445e15c2a5d6bdb82c7a6dd6a2d4"}], "stats": {"total": 64, "additions": 27, "deletions": 37}, "files": [{"sha": "e40e259fe658a6c4143708a55537444b2f4eb2c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -1,3 +1,17 @@\n+2006-11-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgexpand.c (construct_exit_block): Don't disturb end of last BB.\n+\t* rtl.texi (NOTE_INSN_FUNCTION_END): Remove.\n+\t* final.c (final_scan_insn): Don't scan NOTE_INSN_FUNCTION_END.\n+\t* insn-notes.def (FUNCTION_END): Remove.\n+\t* jump.c (delete_related_insns): Don't worry about FUNCTION_END.\n+\t(redicect_jump_2): Don't accept -1 parameter to remove FUNCTION_END\n+\tnote.\n+\t* ifcvt.c (dead_or_predictable): Update call of redirect_jump_2.\n+\t* function.c (expand_function_end): Don't emit NOTE_INSN_FUNCTION_END\n+\t* cfglayout.c (duplicate_insn_chain): Don't worry about\n+\tNOTE_FUNCTION_END.\n+\n 2006-11-27  Richard Guenther  <rguenther@suse.de>\n \tZdenek Dvorak <dvorakz@suse.cz>\n "}, {"sha": "d0a560ec00bd94c1fa9250f831eaed2975acaf29", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -1465,6 +1465,7 @@ construct_exit_block (void)\n   edge e, e2;\n   unsigned ix;\n   edge_iterator ei;\n+  rtx orig_end = BB_END (EXIT_BLOCK_PTR->prev_bb);\n \n   /* Make sure the locus is set to the end of the function, so that\n      epilogue line numbers and warnings are set properly.  */\n@@ -1484,6 +1485,9 @@ construct_exit_block (void)\n   end = get_last_insn ();\n   if (head == end)\n     return;\n+  /* While emitting the function end we could move end of the last basic block.\n+   */\n+  BB_END (EXIT_BLOCK_PTR->prev_bb) = orig_end;\n   while (NEXT_INSN (head) && NOTE_P (NEXT_INSN (head)))\n     head = NEXT_INSN (head);\n   exit_block = create_basic_block (NEXT_INSN (head), end,"}, {"sha": "15bde05de011ab363954c1611225c254ccf3581e", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -987,7 +987,6 @@ duplicate_insn_chain (rtx from, rtx to)\n \t    case NOTE_INSN_DELETED_LABEL:\n \t      /* No problem to strip these.  */\n \t    case NOTE_INSN_EPILOGUE_BEG:\n-\t    case NOTE_INSN_FUNCTION_END:\n \t      /* Debug code expect these notes to exist just once.\n \t\t Keep them in the master copy.\n \t\t ??? It probably makes more sense to duplicate them for each"}, {"sha": "2d4644d587380ee18df0ca028600398107ef9933", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -3178,13 +3178,6 @@ invariants.\n Appears at the start of the function body, after the function\n prologue.\n \n-@findex NOTE_INSN_FUNCTION_END\n-@item NOTE_INSN_FUNCTION_END\n-Appears near the end of the function body, just before the label that\n-@code{return} statements jump to (on machine where a single instruction\n-does not suffice for returning).  This note may be deleted by jump\n-optimization.\n-\n @end table\n \n These codes are printed symbolically when they appear in debugging dumps."}, {"sha": "da93fa2af6ec5b812c4260915c75c866b59724f3", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -4342,11 +4342,6 @@ expand_function_end (void)\n   clear_pending_stack_adjust ();\n   do_pending_stack_adjust ();\n \n-  /* Mark the end of the function body.\n-     If control reaches this insn, the function can drop through\n-     without returning a value.  */\n-  emit_note (NOTE_INSN_FUNCTION_END);\n-\n   /* Output a linenumber for the end of the function.\n      SDB depends on this.  */\n   force_next_line_note ();\n@@ -5289,15 +5284,14 @@ thread_prologue_and_epilogue_insns (rtx f ATTRIBUTE_UNUSED)\n \n       /* Similarly, move any line notes that appear after the epilogue.\n          There is no need, however, to be quite so anal about the existence\n-\t of such a note.  Also move the NOTE_INSN_FUNCTION_END and (possibly)\n+\t of such a note.  Also possibly move\n \t NOTE_INSN_FUNCTION_BEG notes, as those can be relevant for debug\n \t info generation.  */\n       for (insn = epilogue_end; insn; insn = next)\n \t{\n \t  next = NEXT_INSN (insn);\n \t  if (NOTE_P (insn) \n-\t      && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG\n-\t\t  || NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_END))\n+\t      && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG))\n \t    reorder_insns (insn, insn, PREV_INSN (epilogue_end));\n \t}\n     }"}, {"sha": "b869092ed774a55d6848353e2079ddbec020888f", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -3773,7 +3773,7 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \n   if (other_bb != new_dest)\n     {\n-      redirect_jump_2 (jump, old_dest, new_label, -1, reversep);\n+      redirect_jump_2 (jump, old_dest, new_label, 0, reversep);\n \n       redirect_edge_succ (BRANCH_EDGE (test_bb), new_dest);\n       if (reversep)"}, {"sha": "b93d6c2f4820be0e3ead4e257c434a108f623652", "filename": "gcc/insn-notes.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -48,13 +48,6 @@ INSN_NOTE (BLOCK_END)\n    their homes, etc.  */\n INSN_NOTE (FUNCTION_BEG)\n \n-/* This kind of note is generated at the end of the function body,\n-   just before the return insn or return label.  In an optimizing\n-   compilation it is deleted by the first jump optimization, after\n-   enabling that optimizer to determine whether control can fall\n-   off the end of the function body without a return statement.  */\n-INSN_NOTE (FUNCTION_END)\n-\n /* This marks the point immediately after the last prologue insn.  */\n INSN_NOTE (PROLOGUE_END)\n "}, {"sha": "807f2c6f7d6f2865fa595488b1398379a819dd7e", "filename": "gcc/jump.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a42f958c1514d608870c965de88af5f797ec2/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=071a42f958c1514d608870c965de88af5f797ec2", "patch": "@@ -1467,8 +1467,7 @@ delete_related_insns (rtx insn)\n       while (next)\n \t{\n \t  code = GET_CODE (next);\n-\t  if (code == NOTE\n-\t      && NOTE_LINE_NUMBER (next) != NOTE_INSN_FUNCTION_END)\n+\t  if (code == NOTE)\n \t    next = NEXT_INSN (next);\n \t  /* Keep going past other deleted labels to delete what follows.  */\n \t  else if (code == CODE_LABEL && INSN_DELETED_P (next))\n@@ -1631,8 +1630,7 @@ redirect_jump (rtx jump, rtx nlabel, int delete_unused)\n }\n \n /* Fix up JUMP_LABEL and label ref counts after OLABEL has been replaced with\n-   NLABEL in JUMP.  If DELETE_UNUSED is non-negative, copy a\n-   NOTE_INSN_FUNCTION_END found after OLABEL to the place after NLABEL.\n+   NLABEL in JUMP.  \n    If DELETE_UNUSED is positive, delete related insn to OLABEL if its ref\n    count has dropped to zero.  */\n void\n@@ -1641,6 +1639,10 @@ redirect_jump_2 (rtx jump, rtx olabel, rtx nlabel, int delete_unused,\n {\n   rtx note;\n \n+  /* negative DELETE_UNUSED used to be used to signalize behaviour on\n+     moving FUNCTION_END note.  Just sanity check that no user still worry\n+     about this.  */\n+  gcc_assert (delete_unused >= 0);\n   JUMP_LABEL (jump) = nlabel;\n   if (nlabel)\n     ++LABEL_NUSES (nlabel);\n@@ -1657,15 +1659,6 @@ redirect_jump_2 (rtx jump, rtx olabel, rtx nlabel, int delete_unused,\n \t}\n     }\n \n-  /* If we're eliding the jump over exception cleanups at the end of a\n-     function, move the function end note so that -Wreturn-type works.  */\n-  if (olabel && nlabel\n-      && NEXT_INSN (olabel)\n-      && NOTE_P (NEXT_INSN (olabel))\n-      && NOTE_LINE_NUMBER (NEXT_INSN (olabel)) == NOTE_INSN_FUNCTION_END\n-      && delete_unused >= 0)\n-    emit_note_after (NOTE_INSN_FUNCTION_END, nlabel);\n-\n   if (olabel && --LABEL_NUSES (olabel) == 0 && delete_unused > 0\n       /* Undefined labels will remain outside the insn stream.  */\n       && INSN_UID (olabel))"}]}