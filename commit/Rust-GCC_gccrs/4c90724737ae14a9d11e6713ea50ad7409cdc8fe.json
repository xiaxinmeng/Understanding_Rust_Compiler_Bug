{"sha": "4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5MDcyNDczN2FlMTRhOWQxMWU2NzEzZWE1MGFkNzQwOWNkYzhmZQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-08-29T23:16:29Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-08-29T23:16:29Z"}, "message": "target-supports.exp (check_effective_target_size32plus): Increase size to avoid false positives on 24-bit address spaces.\n\n* lib/target-supports.exp (check_effective_target_size32plus):\nIncrease size to avoid false positives on 24-bit address spaces.\n* gcc.c-torture/compile/limits-stringlit.c: Skip if msp430.\n* gcc.dg/lto/pr54709_1.c: Fix memcpy prototype.\n* gcc.dg/torture/pta-ptrarith-3.c: Use __SIZE_TYPE__ instead of \"int\".\n* gcc.dg/torture/pr36373-10.c: Use __SIZE_TYPE__ if present.\n* gcc.dg/torture/pr57864.c: Use __SIZE_TYPE__.\n* gcc.dg/torture/pr26763-2.c: Use __SIZE_TYPE__ instead of \"int\".\n* gcc.dg/tree-ssa/isolate-3.c: Use __SIZE_TYPE__ instead of \"long unsigned int\".\n* gcc.dg/pr52549.c: Use __SIZE_TYPE__ if present.\n\nFrom-SVN: r214746", "tree": {"sha": "2cb588459a35afca71c5d01eb698cbffb12ccb9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cb588459a35afca71c5d01eb698cbffb12ccb9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/comments", "author": null, "committer": null, "parents": [{"sha": "fdf96aa323491a7a07898aa9dc7888c8ed27ca26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf96aa323491a7a07898aa9dc7888c8ed27ca26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf96aa323491a7a07898aa9dc7888c8ed27ca26"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "b2f1bb2fcdd7086bf48d396724b10925599643a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1,3 +1,16 @@\n+2014-08-29  DJ Delorie  <dj@redhat.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_size32plus):\n+\tIncrease size to avoid false positives on 24-bit address spaces.\n+\t* gcc.c-torture/compile/limits-stringlit.c: Skip if msp430.\n+\t* gcc.dg/lto/pr54709_1.c: Fix memcpy prototype.\n+\t* gcc.dg/torture/pta-ptrarith-3.c: Use __SIZE_TYPE__ instead of \"int\".\n+\t* gcc.dg/torture/pr36373-10.c: Use __SIZE_TYPE__ if present.\n+\t* gcc.dg/torture/pr57864.c: Use __SIZE_TYPE__.\n+\t* gcc.dg/torture/pr26763-2.c: Use __SIZE_TYPE__ instead of \"int\".\n+\t* gcc.dg/tree-ssa/isolate-3.c: Use __SIZE_TYPE__ instead of \"long unsigned int\".\n+\t* gcc.dg/pr52549.c: Use __SIZE_TYPE__ if present.\n+\n 2014-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54002"}, {"sha": "4ad761235e15728de5717cbcd4e5d22e2db5147f", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-stringlit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-skip-if \"Array too big\" { avr-*-* picochip-*-* m32c-*-* pdp11-*-* } { \"*\" } { \"\" } } */ \n+/* { dg-skip-if \"Array too big\" { avr-*-* picochip-*-* m32c-*-* pdp11-*-* msp430-*-* } { \"*\" } { \"\" } } */ \n \n #define STR2 \"012345678901234567890123456789012345678901234567890123456789\\\n 0123456789012345678901234567890123456789\""}, {"sha": "59f3dbf8a55ccedebc65e401abd79db6f8cb082e", "filename": "gcc/testsuite/gcc.dg/lto/pr54709_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr54709_1.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1,4 +1,4 @@\n-void * memcpy (void *, void *, long);\n+void * memcpy (void *, void *, __SIZE_TYPE__);\n void bar (void *p, void *q, unsigned s)\n {\n   memcpy (p, q, s);"}, {"sha": "4d0a3e00a5ab9fc5012139e50cd340e272174052", "filename": "gcc/testsuite/gcc.dg/pr52549.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52549.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1,6 +1,11 @@\n /* { dg-do compile } */\n \n-#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n+#ifdef __SIZE_TYPE__\n+_mark (__SIZE_TYPE__ obj, int i, char *a)\n+{\n+  (char *)&(((long *)(obj)) [i]) - a;\n+}\n+#elif __SIZEOF_POINTER__ == __SIZEOF_LONG__\n _mark (long obj, int i, char *a)\n {\n   (char *)&(((long *)(obj)) [i]) - a;"}, {"sha": "7e9dc39bc18a93d050324c0d256cf2878de586dc", "filename": "gcc/testsuite/gcc.dg/torture/pr26763-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26763-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26763-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26763-2.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -2,7 +2,7 @@\n \n extern void abort(void);\n \n-int try (char *a, int d)\n+int try (char *a, __SIZE_TYPE__ d)\n {\n   return a + d > a;\n }"}, {"sha": "d18b4e8432ee2181456c963f46d594883de0a158", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-10.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n \n-#if (__SIZEOF_LONG_LONG__ == __SIZEOF_POINTER__)\n+#ifdef __SIZE_TYPE__\n+typedef __SIZE_TYPE__ uintptr_t;\n+#elif (__SIZEOF_LONG_LONG__ == __SIZEOF_POINTER__)\n typedef unsigned long long uintptr_t;\n #elif (__SIZEOF_LONG__ == __SIZEOF_POINTER__)\n typedef unsigned long uintptr_t;"}, {"sha": "fda1844fc3776b77967f06f562aeef9d44db2198", "filename": "gcc/testsuite/gcc.dg/torture/pr57864.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57864.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57864.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57864.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -15,12 +15,12 @@ static void fn1(union U *p1, int p2, _Bool p3)\n     union U *e;\n \n     if (p2 == 0)\n-\ta = ((union U*)((unsigned long)p1 & ~1))->val;\n+\ta = ((union U*)((__SIZE_TYPE__)p1 & ~1))->val;\n \n     if (b) {\n \te = p1;\n     } else if (c) {\n-\te = ((union U*)((unsigned long)p1 & ~1))->ptr;\n+\te = ((union U*)((__SIZE_TYPE__)p1 & ~1))->ptr;\n \td = e;\n     } else {\n \te = 0;"}, {"sha": "4b18e1aa3ac18cd0b409f6c3ed92102c57b23825", "filename": "gcc/testsuite/gcc.dg/torture/pta-ptrarith-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-ptrarith-3.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -9,7 +9,7 @@ struct X {\n   int *r;\n };\n int __attribute__((noinline))\n-foo(int i, int j, int k, int off)\n+foo(int i, int j, int k, __SIZE_TYPE__ off)\n {\n   struct X x;\n   int **p, *q;"}, {"sha": "1a10e334a452f49b78f90a8c9f97bc818a562817", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -3,7 +3,7 @@\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n \n-typedef long unsigned int size_t;\n+typedef __SIZE_TYPE__ size_t;\n extern void *memset (void *__s, int __c, size_t __n)\n   __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__nonnull__ (1)));\n struct rtx_def;"}, {"sha": "92c30926897d6ccad2b16f4ec593bfce5caab0e0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c90724737ae14a9d11e6713ea50ad7409cdc8fe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4c90724737ae14a9d11e6713ea50ad7409cdc8fe", "patch": "@@ -1809,11 +1809,12 @@ proc check_effective_target_ptr32plus { } {\n }\n \n # Return 1 if we support 32-bit or larger array and structure sizes\n-# using default options, 0 otherwise.\n+# using default options, 0 otherwise.  Avoid false positive on\n+# targets with 20 or 24 bit address spaces.\n \n proc check_effective_target_size32plus { } {\n     return [check_no_compiler_messages size32plus object {\n-\tchar dummy[65537];\n+\tchar dummy[16777217L];\n     }]\n }\n "}]}