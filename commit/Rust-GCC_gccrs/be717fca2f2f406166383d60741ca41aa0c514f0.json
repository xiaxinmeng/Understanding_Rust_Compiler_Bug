{"sha": "be717fca2f2f406166383d60741ca41aa0c514f0", "node_id": "C_kwDOANBUbNoAKGJlNzE3ZmNhMmYyZjQwNjE2NjM4M2Q2MDc0MWNhNDFhYTBjNTE0ZjA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-25T15:08:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-26T14:10:56Z"}, "message": "Add missing node mappings to HIR::WhereClauseItems", "tree": {"sha": "13000a63914e8cc04a0b04f003d0b2cb69fb2506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13000a63914e8cc04a0b04f003d0b2cb69fb2506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be717fca2f2f406166383d60741ca41aa0c514f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be717fca2f2f406166383d60741ca41aa0c514f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be717fca2f2f406166383d60741ca41aa0c514f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be717fca2f2f406166383d60741ca41aa0c514f0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "30170a9585cde45cc94f50b5c47783de94db3118", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be717fca2f2f406166383d60741ca41aa0c514f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be717fca2f2f406166383d60741ca41aa0c514f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=be717fca2f2f406166383d60741ca41aa0c514f0", "patch": "@@ -20,6 +20,7 @@\n #define RUST_HIR_ITEM_H\n \n #include \"rust-ast-full-decls.h\"\n+#include \"rust-common.h\"\n #include \"rust-hir.h\"\n #include \"rust-hir-path.h\"\n \n@@ -152,6 +153,8 @@ class WhereClauseItem\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n+  virtual Analysis::NodeMapping get_mappings () const = 0;\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual WhereClauseItem *clone_where_clause_item_impl () const = 0;\n@@ -161,24 +164,32 @@ class WhereClauseItem\n class LifetimeWhereClauseItem : public WhereClauseItem\n {\n   Lifetime lifetime;\n-\n-  // LifetimeBounds lifetime_bounds;\n-  std::vector<Lifetime> lifetime_bounds; // inlined lifetime bounds\n-\n+  std::vector<Lifetime> lifetime_bounds;\n   Location locus;\n+  Analysis::NodeMapping mappings;\n \n public:\n-  LifetimeWhereClauseItem (Lifetime lifetime,\n+  LifetimeWhereClauseItem (Analysis::NodeMapping mappings, Lifetime lifetime,\n \t\t\t   std::vector<Lifetime> lifetime_bounds,\n \t\t\t   Location locus)\n     : lifetime (std::move (lifetime)),\n-      lifetime_bounds (std::move (lifetime_bounds)), locus (locus)\n+      lifetime_bounds (std::move (lifetime_bounds)), locus (locus),\n+      mappings (std::move (mappings))\n   {}\n \n   std::string as_string () const override;\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Lifetime &get_lifetime () { return lifetime; }\n+\n+  std::vector<Lifetime> &get_lifetime_bounds () { return lifetime_bounds; }\n+\n+  Analysis::NodeMapping get_mappings () const override final\n+  {\n+    return mappings;\n+  };\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   LifetimeWhereClauseItem *clone_where_clause_item_impl () const override\n@@ -190,18 +201,10 @@ class LifetimeWhereClauseItem : public WhereClauseItem\n // A type bound where clause item\n class TypeBoundWhereClauseItem : public WhereClauseItem\n {\n-  // bool has_for_lifetimes;\n-  // LifetimeParams for_lifetimes;\n-  std::vector<LifetimeParam> for_lifetimes; // inlined\n-\n+  std::vector<LifetimeParam> for_lifetimes;\n   std::unique_ptr<Type> bound_type;\n-\n-  // bool has_type_param_bounds;\n-  // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound>>\n-    type_param_bounds; // inlined form\n-\n-  // should this store location info?\n+  std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n+  Analysis::NodeMapping mappings;\n \n public:\n   // Returns whether the item has ForLifetimes\n@@ -211,17 +214,19 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n   bool has_type_param_bounds () const { return !type_param_bounds.empty (); }\n \n   TypeBoundWhereClauseItem (\n-    std::vector<LifetimeParam> for_lifetimes, std::unique_ptr<Type> bound_type,\n+    Analysis::NodeMapping mappings, std::vector<LifetimeParam> for_lifetimes,\n+    std::unique_ptr<Type> bound_type,\n     std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds)\n     : for_lifetimes (std::move (for_lifetimes)),\n       bound_type (std::move (bound_type)),\n-      type_param_bounds (std::move (type_param_bounds))\n+      type_param_bounds (std::move (type_param_bounds)),\n+      mappings (std::move (mappings))\n   {}\n \n   // Copy constructor requires clone\n   TypeBoundWhereClauseItem (TypeBoundWhereClauseItem const &other)\n     : for_lifetimes (other.for_lifetimes),\n-      bound_type (other.bound_type->clone_type ())\n+      bound_type (other.bound_type->clone_type ()), mappings (other.mappings)\n   {\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n@@ -231,9 +236,9 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n   // Overload assignment operator to clone\n   TypeBoundWhereClauseItem &operator= (TypeBoundWhereClauseItem const &other)\n   {\n+    mappings = other.mappings;\n     for_lifetimes = other.for_lifetimes;\n     bound_type = other.bound_type->clone_type ();\n-\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n@@ -250,6 +255,20 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n+\n+  std::unique_ptr<Type> &get_bound_type () { return bound_type; }\n+\n+  std::vector<std::unique_ptr<TypeParamBound>> &get_type_param_bounds ()\n+  {\n+    return type_param_bounds;\n+  }\n+\n+  Analysis::NodeMapping get_mappings () const override final\n+  {\n+    return mappings;\n+  };\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TypeBoundWhereClauseItem *clone_where_clause_item_impl () const override"}]}