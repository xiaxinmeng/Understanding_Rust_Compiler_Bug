{"sha": "886f092f59d8a903fb5b99e757df5e4523dae825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2ZjA5MmY1OWQ4YTkwM2ZiNWI5OWU3NTdkZjVlNDUyM2RhZTgyNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-12-07T17:05:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-12-07T17:05:21Z"}, "message": "[AArch64][2/2] Add sve_width -moverride tunable\n\nOn top of the previous patch that implements TARGET_ESTIMATED_POLY_VALUE\nand adds an sve_width tuning field to the CPU structs, this patch implements\nan -moverride knob to adjust this sve_width field to allow for experimentation.\nAgain, reminder that this only has an effect when compiling for VLA-SVE that is,\nwithout msve-vector-bits=<foo>. This just adjusts tuning heuristics in the compiler,,\nlike profitability thresholds for vectorised versioned loops, and others.\n\nIt can be used, for example like -moverride=sve_width=256 to set the sve_width\ntuning field to 256. Widths outside of the accepted SVE widths [128 - 2048] are rejected\nas you'd expect.\n\n    * config/aarch64/aarch64.c (aarch64_tuning_override_functions): Add\n    sve_width entry.\n    (aarch64_parse_sve_width_string): Define.\n\n\n    * gcc.target/aarch64/sve/override_sve_width_1.c: New test.\n\nFrom-SVN: r266898", "tree": {"sha": "f915a21954bebd42a5981532532d5398d1a2354a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f915a21954bebd42a5981532532d5398d1a2354a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886f092f59d8a903fb5b99e757df5e4523dae825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886f092f59d8a903fb5b99e757df5e4523dae825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886f092f59d8a903fb5b99e757df5e4523dae825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886f092f59d8a903fb5b99e757df5e4523dae825/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c844c4028f5e8e1370f889db18042caeb83518fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c844c4028f5e8e1370f889db18042caeb83518fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c844c4028f5e8e1370f889db18042caeb83518fc"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "41fb2da0fbf5e5a7cd655a4a0d48023bc8cda87d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=886f092f59d8a903fb5b99e757df5e4523dae825", "patch": "@@ -1,3 +1,9 @@\n+2018-12-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_tuning_override_functions): Add\n+\tsve_width entry.\n+\t(aarch64_parse_sve_width_string): Define.\n+\n 2018-12-07  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/87813"}, {"sha": "ea7e79f758589e79cdee939fd9046df5ece7c80a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=886f092f59d8a903fb5b99e757df5e4523dae825", "patch": "@@ -1086,12 +1086,14 @@ struct aarch64_tuning_override_function\n \n static void aarch64_parse_fuse_string (const char*, struct tune_params*);\n static void aarch64_parse_tune_string (const char*, struct tune_params*);\n+static void aarch64_parse_sve_width_string (const char*, struct tune_params*);\n \n static const struct aarch64_tuning_override_function\n aarch64_tuning_override_functions[] =\n {\n   { \"fuse\", aarch64_parse_fuse_string },\n   { \"tune\", aarch64_parse_tune_string },\n+  { \"sve_width\", aarch64_parse_sve_width_string },\n   { NULL, NULL }\n };\n \n@@ -10834,6 +10836,37 @@ aarch64_parse_tune_string (const char *tune_string,\n \t\t\t\t     \"tune=\");\n }\n \n+/* Parse the sve_width tuning moverride string in TUNE_STRING.\n+   Accept the valid SVE vector widths allowed by\n+   aarch64_sve_vector_bits_enum and use it to override sve_width\n+   in TUNE.  */\n+\n+static void\n+aarch64_parse_sve_width_string (const char *tune_string,\n+\t\t\t\tstruct tune_params *tune)\n+{\n+  int width = -1;\n+\n+  int n = sscanf (tune_string, \"%d\", &width);\n+  if (n == EOF)\n+    {\n+      error (\"invalid format for sve_width\");\n+      return;\n+    }\n+  switch (width)\n+    {\n+    case SVE_128:\n+    case SVE_256:\n+    case SVE_512:\n+    case SVE_1024:\n+    case SVE_2048:\n+      break;\n+    default:\n+      error (\"invalid sve_width value: %d\", width);\n+    }\n+  tune->sve_width = (enum aarch64_sve_vector_bits_enum) width;\n+}\n+\n /* Parse TOKEN, which has length LENGTH to see if it is a tuning option\n    we understand.  If it is, extract the option string and handoff to\n    the appropriate function.  */"}, {"sha": "698a744ca2bac781885230fd50cc3da856afecc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=886f092f59d8a903fb5b99e757df5e4523dae825", "patch": "@@ -1,3 +1,7 @@\n+2018-12-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/sve/override_sve_width_1.c: New test.\n+\n 2018-12-07  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/87813"}, {"sha": "3752fdc2a7198783d2ed5c5f502c3227f98029b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/override_sve_width_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Foverride_sve_width_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886f092f59d8a903fb5b99e757df5e4523dae825/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Foverride_sve_width_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Foverride_sve_width_1.c?ref=886f092f59d8a903fb5b99e757df5e4523dae825", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -moverride=sve_width=512\" } */\n+\n+void __attribute__((noinline, noclone))\n+vadd (int *dst, int *op1, int *op2, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+    dst[i] = op1[i] + op2[i];\n+}"}]}