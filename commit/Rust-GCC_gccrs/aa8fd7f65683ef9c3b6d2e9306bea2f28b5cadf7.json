{"sha": "aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "node_id": "C_kwDOANBUbNoAKGFhOGZkN2Y2NTY4M2VmOWMzYjZkMmU5MzA2YmVhMmYyOGI1Y2FkZjc", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-07-07T10:07:28Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-07-08T03:11:20Z"}, "message": "LoongArch: Modify fp_sp_offset and gp_sp_offset's calculation method when frame->mask or frame->fmask is zero.\n\nUnder the LA architecture, when the stack is dropped too far, the process\nof dropping the stack is divided into two steps.\nstep1: After dropping the stack, save callee saved registers on the stack.\nstep2: The rest of it.\n\nThe stack drop operation is optimized when frame->total_size minus\nframe->sp_fp_offset is an integer multiple of 4096, can reduce the number\nof instructions required to drop the stack. However, this optimization is\nnot effective because of the original calculation method\n\nThe following case:\n\tint main()\n\t{\n  \t  char buf[1024 * 12];\n  \t  printf (\"%p\\n\", buf);\n  \t  return 0;\n\t}\n\nAs you can see from the generated assembler, the old GCC has two more\ninstructions than the new GCC, lines 14 and line 24.\n\n\t   new                                        old\n 10 main:                       | 11 main:\n 11   addi.d  $r3,$r3,-16       | 12   lu12i.w $r13,-12288>>12\n 12   lu12i.w $r13,-12288>>12   | 13   addi.d  $r3,$r3,-2032\n 13   lu12i.w $r5,-12288>>12    | 14   ori $r13,$r13,2016\n 14   lu12i.w $r12,12288>>12    | 15   lu12i.w $r5,-12288>>12\n 15   st.d  $r1,$r3,8           | 16   lu12i.w $r12,12288>>12\n 16   add.d $r12,$r12,$r5       | 17   st.d  $r1,$r3,2024\n 17   add.d $r3,$r3,$r13        | 18   add.d $r12,$r12,$r5\n 18   add.d $r5,$r12,$r3        | 19   add.d $r3,$r3,$r13\n 19   la.local  $r4,.LC0        | 20   add.d $r5,$r12,$r3\n 20   bl  %plt(printf)          | 21   la.local  $r4,.LC0\n 21   lu12i.w $r13,12288>>12    | 22   bl  %plt(printf)\n 22   add.d $r3,$r3,$r13        | 23   lu12i.w $r13,8192>>12\n 23   ld.d  $r1,$r3,8           | 24   ori $r13,$r13,2080\n 24   or  $r4,$r0,$r0           | 25   add.d $r3,$r3,$r13\n 25   addi.d  $r3,$r3,16        | 26   ld.d  $r1,$r3,2024\n 26   jr  $r1                   | 27   or  $r4,$r0,$r0\n\t\t\t        | 28   addi.d  $r3,$r3,2032\n \t\t\t\t| 29   jr  $r1\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_compute_frame_info):\n\tModify fp_sp_offset and gp_sp_offset's calculation method,\n\twhen frame->mask or frame->fmask is zero, don't minus UNITS_PER_WORD\n\tor UNITS_PER_FP_REG.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/prolog-opt.c: New test.", "tree": {"sha": "5bfcd48faa4c749f8eefc8534459abd5bd2d423a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bfcd48faa4c749f8eefc8534459abd5bd2d423a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6345c4145446ff9acc380cdef6bf83fdc3869db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6345c4145446ff9acc380cdef6bf83fdc3869db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6345c4145446ff9acc380cdef6bf83fdc3869db5"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "5c9a33c14f76a7da822cc0d41e0d23a8a63e3f12", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "patch": "@@ -917,8 +917,12 @@ loongarch_compute_frame_info (void)\n   frame->frame_pointer_offset = offset;\n   /* Next are the callee-saved FPRs.  */\n   if (frame->fmask)\n-    offset += LARCH_STACK_ALIGN (num_f_saved * UNITS_PER_FP_REG);\n-  frame->fp_sp_offset = offset - UNITS_PER_FP_REG;\n+    {\n+      offset += LARCH_STACK_ALIGN (num_f_saved * UNITS_PER_FP_REG);\n+      frame->fp_sp_offset = offset - UNITS_PER_FP_REG;\n+    }\n+  else\n+    frame->fp_sp_offset = offset;\n   /* Next are the callee-saved GPRs.  */\n   if (frame->mask)\n     {\n@@ -931,8 +935,10 @@ loongarch_compute_frame_info (void)\n \tframe->save_libcall_adjustment = x_save_size;\n \n       offset += x_save_size;\n+      frame->gp_sp_offset = offset - UNITS_PER_WORD;\n     }\n-  frame->gp_sp_offset = offset - UNITS_PER_WORD;\n+  else\n+    frame->gp_sp_offset = offset;\n   /* The hard frame pointer points above the callee-saved GPRs.  */\n   frame->hard_frame_pointer_offset = offset;\n   /* Above the hard frame pointer is the callee-allocated varags save area.  */"}, {"sha": "0470a1f1eeecb56def847d89f559101487de0fa8", "filename": "gcc/testsuite/gcc.target/loongarch/prolog-opt.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fprolog-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fprolog-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fprolog-opt.c?ref=aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "patch": "@@ -0,0 +1,15 @@\n+/* Test that LoongArch backend stack drop operation optimized.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mabi=lp64d\" } */\n+/* { dg-final { scan-assembler \"addi.d\\t\\\\\\$r3,\\\\\\$r3,-16\" } } */\n+\n+extern int printf (char *, ...);\n+\n+int main()\n+{\n+  char buf[1024 * 12];\n+  printf (\"%p\\n\", buf);\n+  return 0;\n+}\n+"}]}