{"sha": "f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MmE2ZWM5YjZkOThmNWYzNzExNGIxZDc0NTVjNTRjZTUwNTZiOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T11:47:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T11:47:10Z"}, "message": "strlen: Fix handle_builtin_string_cmp [PR96758]\n\nThe following testcase is miscompiled, because handle_builtin_string_cmp\nsees a strncmp call with constant last argument 4, where one of the strings\nhas an upper bound of 5 bytes (due to it being an array of that size) and\nthe other has a known string length of 1 and the result is used only in\nequality comparison.\nIt is folded into __builtin_strncmp_eq (str1, str2, 4), which is\nincorrect, because that means reading 4 bytes from both strings and\ncomparing that.  When one of the strings has known strlen of 1, we want to\ncompare just 2 bytes, not 4, as strncmp shouldn't compare any bytes beyond\nthe null.\nSo, the last argument to __builtin_strncmp_eq should be the minimum of the\nprovided strncmp last argument and the known string length + 1 (assuming\nthe other string has only a known upper bound due to array size).\n\nBesides that, I've noticed the code has been written with the intent to also\nsupport the case where we know exact string length of both strings (but not\nthe string content, so we can't compute it at compile time).  In that case,\nboth cstlen1 and cstlen2 are non-negative and both arysiz1 and arysiz2 are\nnegative.  We wouldn't optimize that, cmpsiz would be either the strncmp\nlast argument, or for strcmp the first string length, but varsiz would be\n-1 and thus cmpsiz would be never < varsiz.  The patch fixes it by using the\ncorrect length, in that case using the minimum of the two and for strncmp\nalso the last argument.\n\n2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96758\n\t* tree-ssa-strlen.c (handle_builtin_string_cmp): If both cstlen1\n\tand cstlen2 are set, set cmpsiz to their minimum, otherwise use the\n\tone that is set.  If bound is used and smaller than cmpsiz, set cmpsiz\n\tto bound.  If both cstlen1 and cstlen2 are set, perform the optimization.\n\n\t* gcc.dg/strcmpopt_12.c: New test.", "tree": {"sha": "be5f3a36a9f8d85d0371b2ae555df92e7e72c0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be5f3a36a9f8d85d0371b2ae555df92e7e72c0c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556600286dd312d3ddf3d673a8579576862663e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556600286dd312d3ddf3d673a8579576862663e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556600286dd312d3ddf3d673a8579576862663e3"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "d8077b62f7f93182c2a219412ec6e88dbb955aca", "filename": "gcc/testsuite/gcc.dg/strcmpopt_12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_12.c?ref=f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/96758 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 1;\n+\n+int\n+main ()\n+{\n+  const char *s = v ? \"a\" : \"b\";\n+  char x[5];\n+  char y[5] = \"a\\0a\";\n+  __builtin_memcpy (x, y, sizeof (y));\n+  if (__builtin_strncmp (x, s, 4) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "96962286735a3b4d001043a578ea9d5b0eb8ca8d", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "patch": "@@ -4485,11 +4485,19 @@ handle_builtin_string_cmp (gimple_stmt_iterator *gsi, const vr_values *rvals)\n     ++cstlen2;\n \n   /* The exact number of characters to compare.  */\n-  HOST_WIDE_INT cmpsiz = bound < 0 ? cstlen1 < 0 ? cstlen2 : cstlen1 : bound;\n+  HOST_WIDE_INT cmpsiz;\n+  if (cstlen1 >= 0 && cstlen2 >= 0)\n+    cmpsiz = MIN (cstlen1, cstlen2);\n+  else if (cstlen1 >= 0)\n+    cmpsiz = cstlen1;\n+  else\n+    cmpsiz = cstlen2;\n+  if (bound >= 0)\n+    cmpsiz = MIN (cmpsiz, bound);\n   /* The size of the array in which the unknown string is stored.  */\n   HOST_WIDE_INT varsiz = arysiz1 < 0 ? arysiz2 : arysiz1;\n \n-  if (cmpsiz < varsiz && used_only_for_zero_equality (lhs))\n+  if ((varsiz < 0 || cmpsiz < varsiz) && used_only_for_zero_equality (lhs))\n     {\n       /* If the known length is less than the size of the other array\n \t and the strcmp result is only used to test equality to zero,"}]}