{"sha": "987977840a808f3745bc6e300fc7c36680238061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3OTc3ODQwYTgwOGYzNzQ1YmM2ZTMwMGZjN2MzNjY4MDIzODA2MQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-12-20T07:25:51Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-12-20T07:25:51Z"}, "message": "doc: avoid leading whitespace in @smallexample install.texi.\n\ngcc/:\n\t* doc/install.texi (Configuration, Building, Testing, Specific):\n\tRemove leading whitespace from examples.\n\nFrom-SVN: r168080", "tree": {"sha": "2c2848953ce29667e345fa53961171f714c6e2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2848953ce29667e345fa53961171f714c6e2f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987977840a808f3745bc6e300fc7c36680238061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987977840a808f3745bc6e300fc7c36680238061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987977840a808f3745bc6e300fc7c36680238061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987977840a808f3745bc6e300fc7c36680238061/comments", "author": null, "committer": null, "parents": [{"sha": "de4d1796b9334751000565f2ca2491061cc33dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4d1796b9334751000565f2ca2491061cc33dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4d1796b9334751000565f2ca2491061cc33dea"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "8224947c1138591c51c1361ab0051c5f4e184918", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987977840a808f3745bc6e300fc7c36680238061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987977840a808f3745bc6e300fc7c36680238061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=987977840a808f3745bc6e300fc7c36680238061", "patch": "@@ -1,4 +1,9 @@\n-2010-12-19  Andi Kleen\t<ak@linux.intel.com>\n+2010-12-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/install.texi (Configuration, Building, Testing, Specific):\n+\tRemove leading whitespace from examples.\n+\n+2010-12-19  Andi Kleen  <ak@linux.intel.com>\n \n \tPR lto/46905\n \t* collect2.c (main): Handle -fno-lto."}, {"sha": "c8571ec066b7142c0ee9281bff10d1a22eaa9c43", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987977840a808f3745bc6e300fc7c36680238061/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987977840a808f3745bc6e300fc7c36680238061/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=987977840a808f3745bc6e300fc7c36680238061", "patch": "@@ -623,9 +623,9 @@ affected by this requirement, see\n To configure GCC:\n \n @smallexample\n-   % mkdir @var{objdir}\n-   % cd @var{objdir}\n-   % @var{srcdir}/configure [@var{options}] [@var{target}]\n+% mkdir @var{objdir}\n+% cd @var{objdir}\n+% @var{srcdir}/configure [@var{options}] [@var{target}]\n @end smallexample\n \n @heading Distributor options\n@@ -2120,7 +2120,7 @@ the bootstrap and the final installation.  (Libraries will still contain\n debugging information.)\n \n @smallexample\n-     make BOOT_CFLAGS='-O' bootstrap\n+make BOOT_CFLAGS='-O' bootstrap\n @end smallexample\n \n You can place non-default optimization flags into @code{BOOT_CFLAGS}; they\n@@ -2421,8 +2421,8 @@ environment variables appropriately, as in the following example (which\n assumes that DejaGnu has been installed under @file{/usr/local}):\n \n @smallexample\n-     TCL_LIBRARY = /usr/local/share/tcl8.0\n-     DEJAGNULIBS = /usr/local/share/dejagnu\n+TCL_LIBRARY = /usr/local/share/tcl8.0\n+DEJAGNULIBS = /usr/local/share/dejagnu\n @end smallexample\n \n (On systems such as Cygwin, these paths are required to be actual\n@@ -2432,7 +2432,7 @@ portability in the DejaGnu code.)\n \n Finally, you can run the testsuite (which may take a long time):\n @smallexample\n-     cd @var{objdir}; make -k check\n+cd @var{objdir}; make -k check\n @end smallexample\n \n This will test various components of GCC, such as compiler\n@@ -2456,14 +2456,14 @@ A more selective way to just run all @command{gcc} execute tests in the\n testsuite is to use\n \n @smallexample\n-    make check-gcc RUNTESTFLAGS=\"execute.exp @var{other-options}\"\n+make check-gcc RUNTESTFLAGS=\"execute.exp @var{other-options}\"\n @end smallexample\n \n Likewise, in order to run only the @command{g++} ``old-deja'' tests in\n the testsuite with filenames matching @samp{9805*}, you would use\n \n @smallexample\n-    make check-g++ RUNTESTFLAGS=\"old-deja.exp=9805* @var{other-options}\"\n+make check-g++ RUNTESTFLAGS=\"old-deja.exp=9805* @var{other-options}\"\n @end smallexample\n \n The @file{*.exp} files are located in the testsuite directories of the GCC\n@@ -2481,7 +2481,7 @@ You can pass multiple options to the testsuite using the\n work outside the makefiles.  For example,\n \n @smallexample\n-    make check-g++ RUNTESTFLAGS=\"--target_board=unix/-O3/-fmerge-constants\"\n+make check-g++ RUNTESTFLAGS=\"--target_board=unix/-O3/-fmerge-constants\"\n @end smallexample\n \n will run the standard @command{g++} testsuites (``unix'' is the target name\n@@ -2493,29 +2493,29 @@ You can run the testsuites multiple times using combinations of options\n with a syntax similar to the brace expansion of popular shells:\n \n @smallexample\n-    @dots{}\"--target_board=arm-sim\\@{-mhard-float,-msoft-float\\@}\\@{-O1,-O2,-O3,\\@}\"\n+@dots{}\"--target_board=arm-sim\\@{-mhard-float,-msoft-float\\@}\\@{-O1,-O2,-O3,\\@}\"\n @end smallexample\n \n (Note the empty option caused by the trailing comma in the final group.)\n The following will run each testsuite eight times using the @samp{arm-sim}\n target, as if you had specified all possible combinations yourself:\n \n @smallexample\n-    --target_board=arm-sim/-mhard-float/-O1\n-    --target_board=arm-sim/-mhard-float/-O2\n-    --target_board=arm-sim/-mhard-float/-O3\n-    --target_board=arm-sim/-mhard-float\n-    --target_board=arm-sim/-msoft-float/-O1\n-    --target_board=arm-sim/-msoft-float/-O2\n-    --target_board=arm-sim/-msoft-float/-O3\n-    --target_board=arm-sim/-msoft-float\n+--target_board=arm-sim/-mhard-float/-O1\n+--target_board=arm-sim/-mhard-float/-O2\n+--target_board=arm-sim/-mhard-float/-O3\n+--target_board=arm-sim/-mhard-float\n+--target_board=arm-sim/-msoft-float/-O1\n+--target_board=arm-sim/-msoft-float/-O2\n+--target_board=arm-sim/-msoft-float/-O3\n+--target_board=arm-sim/-msoft-float\n @end smallexample\n \n They can be combined as many times as you wish, in arbitrary ways.  This\n list:\n \n @smallexample\n-    @dots{}\"--target_board=unix/-Wextra\\@{-O3,-fno-strength\\@}\\@{-fomit-frame,\\@}\"\n+@dots{}\"--target_board=unix/-Wextra\\@{-O3,-fno-strength\\@}\\@{-fomit-frame,\\@}\"\n @end smallexample\n \n will generate four combinations, all involving @samp{-Wextra}.\n@@ -2528,13 +2528,13 @@ do the parallel runs.  Instead of using @samp{--target_board}, use a\n special makefile target:\n \n @smallexample\n-    make -j@var{N} check-@var{testsuite}//@var{test-target}/@var{option1}/@var{option2}/@dots{}\n+make -j@var{N} check-@var{testsuite}//@var{test-target}/@var{option1}/@var{option2}/@dots{}\n @end smallexample\n \n For example,\n \n @smallexample\n-    make -j3 check-gcc//sh-hms-sim/@{-m1,-m2,-m3,-m3e,-m4@}/@{,-nofpu@}\n+make -j3 check-gcc//sh-hms-sim/@{-m1,-m2,-m3,-m3e,-m4@}/@{,-nofpu@}\n @end smallexample\n \n will run three concurrent ``make-gcc'' testsuites, eventually testing all\n@@ -2593,8 +2593,8 @@ If you want to report the results to the GCC project, use the\n @file{contrib/test_summary} shell script.  Start it in the @var{objdir} with\n \n @smallexample\n-    @var{srcdir}/contrib/test_summary -p your_commentary.txt \\\n-        -m gcc-testresults@@gcc.gnu.org |sh\n+@var{srcdir}/contrib/test_summary -p your_commentary.txt \\\n+    -m gcc-testresults@@gcc.gnu.org |sh\n @end smallexample\n \n This script uses the @command{Mail} program to send the results, so\n@@ -3170,7 +3170,7 @@ We @emph{strongly} recommend using binutils 2.13 or newer.\n \n The following error:\n @smallexample\n-  Error: register required\n+Error: register required\n @end smallexample\n \n indicates that you should upgrade to a newer version of the binutils.\n@@ -3630,8 +3630,8 @@ requires a larger data segment, which can be enabled through the\n @var{LDR_CNTRL} environment variable, e.g.,\n \n @smallexample\n-   % LDR_CNTRL=MAXDATA=0x50000000\n-   % export LDR_CNTRL\n+% LDR_CNTRL=MAXDATA=0x50000000\n+% export LDR_CNTRL\n @end smallexample\n \n One can start with a pre-compiled version of GCC to build from\n@@ -3642,8 +3642,8 @@ To speed up the configuration phases of bootstrapping and installing GCC,\n one may use GNU Bash instead of AIX @command{/bin/sh}, e.g.,\n \n @smallexample\n-   % CONFIG_SHELL=/opt/freeware/bin/bash\n-   % export CONFIG_SHELL\n+% CONFIG_SHELL=/opt/freeware/bin/bash\n+% export CONFIG_SHELL\n @end smallexample\n \n and then proceed as described in @uref{build.html,,the build\n@@ -3691,19 +3691,19 @@ multilib @file{libstdc++.a} installed:\n Extract the shared objects from the currently installed\n @file{libstdc++.a} archive:\n @smallexample\n-   % ar -x libstdc++.a libstdc++.so.4 libstdc++.so.5\n+% ar -x libstdc++.a libstdc++.so.4 libstdc++.so.5\n @end smallexample\n \n Enable the @samp{F_LOADONLY} flag so that the shared object will be\n available for runtime dynamic loading, but not linking:\n @smallexample\n-   % strip -e libstdc++.so.4 libstdc++.so.5\n+% strip -e libstdc++.so.4 libstdc++.so.5\n @end smallexample\n \n Archive the runtime-only shared object in the GCC 3.4\n @file{libstdc++.a} archive:\n @smallexample\n-   % ar -q libstdc++.a libstdc++.so.4 libstdc++.so.5\n+% ar -q libstdc++.a libstdc++.so.4 libstdc++.so.5\n @end smallexample\n \n Linking executables and shared libraries may produce warnings of\n@@ -4153,8 +4153,8 @@ The Solaris 2 @command{/bin/sh} will often fail to configure\n recommend using the following initial sequence of commands\n \n @smallexample\n-   % CONFIG_SHELL=/bin/ksh\n-   % export CONFIG_SHELL\n+% CONFIG_SHELL=/bin/ksh\n+% export CONFIG_SHELL\n @end smallexample\n \n @noindent\n@@ -4325,7 +4325,7 @@ configure line.  This target triplet can be obtained by invoking @command{./conf\n not that of GMP or MPFR or MPC).  For example on a Solaris 9 system:\n \n @smallexample\n-   % ./configure --build=sparc-sun-solaris2.9 --prefix=xxx\n+% ./configure --build=sparc-sun-solaris2.9 --prefix=xxx\n @end smallexample\n \n @html\n@@ -4365,14 +4365,14 @@ the @command{build} parameter on the configure line.  For example\n on a Solaris 9 system:\n \n @smallexample\n-   % ./configure --build=sparc64-sun-solaris2.9 --prefix=xxx\n+% ./configure --build=sparc64-sun-solaris2.9 --prefix=xxx\n @end smallexample\n \n The following compiler flags must be specified in the configure\n step in order to bootstrap this target with the Sun compiler:\n \n @smallexample\n-   % CC=\"cc -xarch=v9 -xildoff\" @var{srcdir}/configure [@var{options}] [@var{target}]\n+% CC=\"cc -xarch=v9 -xildoff\" @var{srcdir}/configure [@var{options}] [@var{target}]\n @end smallexample\n \n @noindent"}]}