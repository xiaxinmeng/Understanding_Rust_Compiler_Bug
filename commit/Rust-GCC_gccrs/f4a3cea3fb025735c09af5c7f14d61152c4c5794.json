{"sha": "f4a3cea3fb025735c09af5c7f14d61152c4c5794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhM2NlYTNmYjAyNTczNWMwOWFmNWM3ZjE0ZDYxMTUyYzRjNTc5NA==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-12-14T09:38:49Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-02-23T05:44:05Z"}, "message": "rs6000: Use rldimi for vec init instead of shift + ior\n\nThis patch is to teach unsigned int vector init to use rldimi to\nmerge two integers instead of shift and ior.  It also adds one\nrequired splitter made by Segher.\n\nAn rl*imi is usually written as an IOR of an ASHIFT or similar, and\nan AND of a register with a constant mask.  In some cases combine\nknows that that AND doesn't do anything (because all zero bits in\nthat mask correspond to bits known to be already zero), and then no\npattern matches.  This patch adds a define_split for such cases.\n\nIt uses nonzero_bits in the condition of the splitter, but does not\nneed it afterwards for the instruction to be recognised.  This is\nnecessary because later passes can see fewer nonzero_bits.\n\nBecause it is a splitter, combine will only use it when starting with\nthree insns (or more), even though the result is just one.  This isn't\na huge problem in practice, but some possible combinations still won't\nhappen.\n\nBootstrapped/regtested on powerpc64le-linux-gnu P9 and\npowerpc64-linux-gnu P8, also SPEC2017 build/run passed on P9.\n\ngcc/ChangeLog:\n\n2020-02-23  Segher Boessenkool  <segher@kernel.crashing.org>\n\t    Kewen Lin  <linkw@gcc.gnu.org>\n\n\t* config/rs6000/rs6000.md (*rotl<mode>3_insert_3): Renamed to...\n\t(rotl<mode>3_insert_3): ...this.\n\t(plus_ior_xor): New code_iterator.\n\t(define_split for GPR rl*imi): New splitter.\n\t* config/rs6000/vsx.md (vsx_init_v4si): Use gen_rotldi3_insert_3\n\tfor integer merging.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/vec-init-10.c: New test.", "tree": {"sha": "f10489743af87916b6d41e35713c1d74c436bff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10489743af87916b6d41e35713c1d74c436bff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a3cea3fb025735c09af5c7f14d61152c4c5794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a3cea3fb025735c09af5c7f14d61152c4c5794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a3cea3fb025735c09af5c7f14d61152c4c5794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a3cea3fb025735c09af5c7f14d61152c4c5794/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198c56052ea8cce4196e60c0dc3187bf3d67a786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198c56052ea8cce4196e60c0dc3187bf3d67a786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198c56052ea8cce4196e60c0dc3187bf3d67a786"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "543a6cdd883553b83db2448ba3c7f62ce66dfc46", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f4a3cea3fb025735c09af5c7f14d61152c4c5794", "patch": "@@ -4068,7 +4068,7 @@\n   [(set_attr \"type\" \"insert\")])\n \n ; There are also some forms without one of the ANDs.\n-(define_insn \"*rotl<mode>3_insert_3\"\n+(define_insn \"rotl<mode>3_insert_3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(ior:GPR (and:GPR (match_operand:GPR 3 \"gpc_reg_operand\" \"0\")\n \t\t\t  (match_operand:GPR 4 \"const_int_operand\" \"n\"))\n@@ -4083,6 +4083,24 @@\n }\n   [(set_attr \"type\" \"insert\")])\n \n+(define_code_iterator plus_ior_xor [plus ior xor])\n+\n+(define_split\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(plus_ior_xor:GPR (ashift:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t\t\t      (match_operand:SI 2 \"const_int_operand\"))\n+\t\t\t  (match_operand:GPR 3 \"gpc_reg_operand\")))]\n+  \"nonzero_bits (operands[3], <MODE>mode)\n+   < HOST_WIDE_INT_1U << INTVAL (operands[2])\"\n+  [(set (match_dup 0)\n+\t(ior:GPR (and:GPR (match_dup 3)\n+\t\t\t  (match_dup 4))\n+\t\t (ashift:GPR (match_dup 1)\n+\t\t\t     (match_dup 2))))]\n+{\n+  operands[4] = GEN_INT ((HOST_WIDE_INT_1U << INTVAL (operands[2])) - 1);\n+})\n+\n (define_insn \"*rotl<mode>3_insert_4\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(ior:GPR (and:GPR (match_operand:GPR 3 \"gpc_reg_operand\" \"0\")"}, {"sha": "ad673968584f7902624346fb2146d3fe1483bc1b", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f4a3cea3fb025735c09af5c7f14d61152c4c5794", "patch": "@@ -3030,28 +3030,22 @@\n    (use (match_operand:SI 4 \"gpc_reg_operand\"))]\n    \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT\"\n {\n-  rtx a = gen_reg_rtx (DImode);\n-  rtx b = gen_reg_rtx (DImode);\n-  rtx c = gen_reg_rtx (DImode);\n-  rtx d = gen_reg_rtx (DImode);\n-  emit_insn (gen_zero_extendsidi2 (a, operands[1]));\n-  emit_insn (gen_zero_extendsidi2 (b, operands[2]));\n-  emit_insn (gen_zero_extendsidi2 (c, operands[3]));\n-  emit_insn (gen_zero_extendsidi2 (d, operands[4]));\n+  rtx a = gen_lowpart_SUBREG (DImode, operands[1]);\n+  rtx b = gen_lowpart_SUBREG (DImode, operands[2]);\n+  rtx c = gen_lowpart_SUBREG (DImode, operands[3]);\n+  rtx d = gen_lowpart_SUBREG (DImode, operands[4]);\n   if (!BYTES_BIG_ENDIAN)\n     {\n       std::swap (a, b);\n       std::swap (c, d);\n     }\n \n-  rtx aa = gen_reg_rtx (DImode);\n   rtx ab = gen_reg_rtx (DImode);\n-  rtx cc = gen_reg_rtx (DImode);\n   rtx cd = gen_reg_rtx (DImode);\n-  emit_insn (gen_ashldi3 (aa, a, GEN_INT (32)));\n-  emit_insn (gen_ashldi3 (cc, c, GEN_INT (32)));\n-  emit_insn (gen_iordi3 (ab, aa, b));\n-  emit_insn (gen_iordi3 (cd, cc, d));\n+  emit_insn (gen_rotldi3_insert_3 (ab, a, GEN_INT (32), b,\n+\t\t\t\t   GEN_INT (0xffffffff)));\n+  emit_insn (gen_rotldi3_insert_3 (cd, c, GEN_INT (32), d,\n+\t\t\t\t   GEN_INT (0xffffffff)));\n \n   rtx abcd = gen_reg_rtx (V2DImode);\n   emit_insn (gen_vsx_concat_v2di (abcd, ab, cd));"}, {"sha": "23587b3ac05ad131b1746967d29a73d55e099ede", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-10.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a3cea3fb025735c09af5c7f14d61152c4c5794/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-10.c?ref=f4a3cea3fb025735c09af5c7f14d61152c4c5794", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n+\n+/* Check that we can optimize sldi + or to rldimi for vector int init.  */\n+\n+vector unsigned int\n+testu (unsigned int i1, unsigned int i2, unsigned int i3, unsigned int i4)\n+{\n+  vector unsigned int v = {i1, i2, i3, i4};\n+  return v;\n+}\n+\n+vector signed int\n+tests (signed int i1, signed int i2, signed int i3, signed int i4)\n+{\n+  vector signed int v = {i1, i2, i3, i4};\n+  return v;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\msldi\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mor\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mrldimi\\M} 4 } } */"}]}