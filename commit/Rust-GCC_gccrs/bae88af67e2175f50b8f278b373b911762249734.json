{"sha": "bae88af67e2175f50b8f278b373b911762249734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlODhhZjY3ZTIxNzVmNTBiOGYyNzhiMzczYjkxMTc2MjI0OTczNA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-03-12T21:44:44Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-03-12T21:44:44Z"}, "message": "re PR fortran/20361 (-fmax-stack-var-size=N not working for equivalence)\n\nfortran/\nPR fortran/20361\n* trans-array.c (gfc_stack_space_left): Remove unused variable.\n(gfc_can_put_var_on_stack): Move to trans-decl.c, remove #if 0'ed\ncode.\n* trans-array.h (gfc_stack_space_left, gfc_can_put_var_on_stack):\nRemove declaration / prototype.\n* trans-common.c (build_equiv_decl): Give union a name.  Check if\nit can be put on the stack.\n* trans-decl.c (gfc_stack_space_left): Move function here.\n(gfc_build_qualified_array): Fix comment typo.\n* trans.h (gfc_put_var_on_stack): Add prototype.\n\ntestsuite/\nPR fortran/20361\n* gfortran.dg/largeequiv_1.f90: New test.\n\nFrom-SVN: r96352", "tree": {"sha": "28c0b703dc3ba7d95e02c234669e802d5c8227ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28c0b703dc3ba7d95e02c234669e802d5c8227ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae88af67e2175f50b8f278b373b911762249734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae88af67e2175f50b8f278b373b911762249734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae88af67e2175f50b8f278b373b911762249734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae88af67e2175f50b8f278b373b911762249734/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3bf067e90674708a69c8b838b4ad7c2caf98c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3bf067e90674708a69c8b838b4ad7c2caf98c7"}], "stats": {"total": 114, "additions": 69, "deletions": 45}, "files": [{"sha": "510789120e4075864230c542faacb2659987bf3c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -1,3 +1,17 @@\n+2005-03-12  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/20361\n+\t* trans-array.c (gfc_stack_space_left): Remove unused variable.\n+\t(gfc_can_put_var_on_stack): Move to trans-decl.c, remove #if 0'ed\n+\tcode.\n+\t* trans-array.h (gfc_stack_space_left, gfc_can_put_var_on_stack):\n+\tRemove declaration / prototype.\n+\t* trans-common.c (build_equiv_decl): Give union a name.  Check if\n+\tit can be put on the stack.\n+\t* trans-decl.c (gfc_stack_space_left): Move function here.\n+\t(gfc_build_qualified_array): Fix comment typo.\n+\t* trans.h (gfc_put_var_on_stack): Add prototype.\n+\n 2005-03-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Make-lang.in (fortran-warn): Set to $(STRICT_WARN) -Wno-error."}, {"sha": "bd77eb46850a0710ecc71438428d8b1c32f9c32a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -99,43 +99,6 @@ static gfc_ss *gfc_walk_subexpr (gfc_ss *, gfc_expr *);\n static gfc_ss gfc_ss_terminator_var;\n gfc_ss * const gfc_ss_terminator = &gfc_ss_terminator_var;\n \n-unsigned HOST_WIDE_INT gfc_stack_space_left;\n-\n-\n-/* Returns true if a variable of specified size should go on the stack.  */\n-\n-int\n-gfc_can_put_var_on_stack (tree size)\n-{\n-  unsigned HOST_WIDE_INT low;\n-\n-  if (!INTEGER_CST_P (size))\n-    return 0;\n-\n-  if (gfc_option.flag_max_stack_var_size < 0)\n-    return 1;\n-\n-  if (TREE_INT_CST_HIGH (size) != 0)\n-    return 0;\n-\n-  low = TREE_INT_CST_LOW (size);\n-  if (low > (unsigned HOST_WIDE_INT) gfc_option.flag_max_stack_var_size)\n-    return 0;\n-\n-/* TODO: Set a per-function stack size limit.  */\n-#if 0\n-  /* We should be a bit more clever with array temps.  */\n-  if (gfc_option.flag_max_function_vars_size >= 0)\n-    {\n-      if (low > gfc_stack_space_left)\n-\treturn 0;\n-\n-      gfc_stack_space_left -= low;\n-    }\n-#endif\n-\n-  return 1;\n-}\n \n static tree\n gfc_array_dataptr_type (tree desc)"}, {"sha": "faaaf5ade4b082b29ef18123dfcc589fc8b73368", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -95,11 +95,6 @@ tree gfc_conv_array_stride (tree, int);\n tree gfc_conv_array_lbound (tree, int);\n tree gfc_conv_array_ubound (tree, int);\n \n-/* The remaining space available for stack variables.  */\n-extern unsigned HOST_WIDE_INT gfc_stack_space_left;\n-/* Returns true if a variable of specified size should go on the stack.  */\n-int gfc_can_put_var_on_stack (tree);\n-\n /* Build expressions for accessing components of an array descriptor.  */\n tree gfc_conv_descriptor_data (tree);\n tree gfc_conv_descriptor_offset (tree);"}, {"sha": "c62d68d9b934f8add9ade302e1f6db1fc66105d3", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -252,6 +252,8 @@ static tree\n build_equiv_decl (tree union_type, bool is_init)\n {\n   tree decl;\n+  char name[15];\n+  static int serial = 0;\n \n   if (is_init)\n     {\n@@ -260,10 +262,13 @@ build_equiv_decl (tree union_type, bool is_init)\n       return decl;\n     }\n \n-  decl = build_decl (VAR_DECL, NULL, union_type);\n+  snprintf (name, sizeof (name), \"equiv.%d\", serial++);\n+  decl = build_decl (VAR_DECL, get_identifier (name), union_type);\n   DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n \n-  DECL_COMMON (decl) = 1;\n+  if (!gfc_can_put_var_on_stack (DECL_SIZE_UNIT (decl)))\n+    TREE_STATIC (decl) = 1;\n \n   TREE_ADDRESSABLE (decl) = 1;\n   TREE_USED (decl) = 1;"}, {"sha": "08dd72af697042ca7223e5223955ab34b0899805", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -317,6 +317,32 @@ gfc_sym_mangled_function_id (gfc_symbol * sym)\n }\n \n \n+/* Returns true if a variable of specified size should go on the stack.  */\n+\n+int\n+gfc_can_put_var_on_stack (tree size)\n+{\n+  unsigned HOST_WIDE_INT low;\n+\n+  if (!INTEGER_CST_P (size))\n+    return 0;\n+\n+  if (gfc_option.flag_max_stack_var_size < 0)\n+    return 1;\n+\n+  if (TREE_INT_CST_HIGH (size) != 0)\n+    return 0;\n+\n+  low = TREE_INT_CST_LOW (size);\n+  if (low > (unsigned HOST_WIDE_INT) gfc_option.flag_max_stack_var_size)\n+    return 0;\n+\n+/* TODO: Set a per-function stack size limit.  */\n+\n+  return 1;\n+}\n+\n+\n /* Finish processing of a declaration and install its initial value.  */\n \n static void\n@@ -533,7 +559,7 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n \n \n /* For some dummy arguments we don't use the actual argument directly.\n-   Instead we create a local decl and use that.  This allows us to preform\n+   Instead we create a local decl and use that.  This allows us to perform\n    initialization, and construct full type information.  */\n \n static tree"}, {"sha": "aad878f34f6ba33977ddfdd5437805488ebf1911", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -391,6 +391,9 @@ void gfc_shadow_sym (gfc_symbol *, tree, gfc_saved_var *);\n /* Restore the original variable.  */\n void gfc_restore_sym (gfc_symbol *, gfc_saved_var *);\n \n+/* Returns true if a variable of specified size should go on the stack.  */\n+int gfc_can_put_var_on_stack (tree);\n+\n /* Allocate the lang-spcific part of a decl node.  */\n void gfc_allocate_lang_decl (tree);\n "}, {"sha": "cdef890555026b9a95045e24596399451bf1283e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -1,3 +1,8 @@\n+2005-03-12  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/20361\n+\t* gfortran.dg/largeequiv_1.f90: New test.\n+\n 2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/ucnid-1.c: New."}, {"sha": "39b1f815938f1f5d1ff614050d6aeb943aacec81", "filename": "gcc/testsuite/gfortran.dg/largeequiv_1.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ftestsuite%2Fgfortran.dg%2Flargeequiv_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae88af67e2175f50b8f278b373b911762249734/gcc%2Ftestsuite%2Fgfortran.dg%2Flargeequiv_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flargeequiv_1.f90?ref=bae88af67e2175f50b8f278b373b911762249734", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+! PR 20361 : We didn't check if a large equivalence actually fit on\n+! the stack, and therefore segfaulted at execution time\n+subroutine test\n+integer i(1000000), j\n+equivalence (i(50), j)\n+\n+j = 1\n+if (i(50) /= j) call abort()\n+end subroutine test\n+\n+call test\n+end"}]}