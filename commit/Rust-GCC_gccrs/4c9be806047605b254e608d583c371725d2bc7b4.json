{"sha": "4c9be806047605b254e608d583c371725d2bc7b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5YmU4MDYwNDc2MDViMjU0ZTYwOGQ1ODNjMzcxNzI1ZDJiYzdiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-22T11:12:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-22T11:12:18Z"}, "message": "functional: Formatting fixes.\n\n2007-04-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/functional: Formatting fixes.\n\nFrom-SVN: r124041", "tree": {"sha": "a5aaf6f4986a4e213a357d045e60774faec7e207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5aaf6f4986a4e213a357d045e60774faec7e207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c9be806047605b254e608d583c371725d2bc7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9be806047605b254e608d583c371725d2bc7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9be806047605b254e608d583c371725d2bc7b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9be806047605b254e608d583c371725d2bc7b4/comments", "author": null, "committer": null, "parents": [{"sha": "87a208566110c45a8b33080a0eea54a184ca9712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a208566110c45a8b33080a0eea54a184ca9712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a208566110c45a8b33080a0eea54a184ca9712"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "e6d889a28e7de270b271b6296664d0b7760ea01b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9be806047605b254e608d583c371725d2bc7b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9be806047605b254e608d583c371725d2bc7b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c9be806047605b254e608d583c371725d2bc7b4", "patch": "@@ -1,3 +1,7 @@\n+2007-04-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/functional: Formatting fixes.\n+\n 2007-04-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/concurrence.h: Do not include <cstdlib>, use"}, {"sha": "1fcc0dc66e2789499b597cfb081077d8d0195dba", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9be806047605b254e608d583c371725d2bc7b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9be806047605b254e608d583c371725d2bc7b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=4c9be806047605b254e608d583c371725d2bc7b4", "patch": "@@ -569,17 +569,17 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n     cref(reference_wrapper<_Tp> __t)\n     { return cref(__t.get()); }\n \n-   template<typename _Tp, bool>\n-     struct _Mem_fn_const_or_non\n-     {\n-       typedef const _Tp& type;\n-     };\n+  template<typename _Tp, bool>\n+    struct _Mem_fn_const_or_non\n+    {\n+      typedef const _Tp& type;\n+    };\n \n-    template<typename _Tp>\n-      struct _Mem_fn_const_or_non<_Tp, false>\n-      {\n-        typedef _Tp& type;\n-      };\n+  template<typename _Tp>\n+    struct _Mem_fn_const_or_non<_Tp, false>\n+    {\n+      typedef _Tp& type;\n+    };\n \n   /**\n    * @if maint\n@@ -588,26 +588,26 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n    * primary template is the basis case, which derives nothing.\n    * @endif maint\n    */\n-   template<typename _Res, typename... _ArgTypes> \n-     struct _Maybe_unary_or_binary_function { };\n+  template<typename _Res, typename... _ArgTypes> \n+    struct _Maybe_unary_or_binary_function { };\n \n   /**\n    * @if maint\n    * Derives from @c unary_function, as appropriate.\n    * @endif\n    */ \n-   template<typename _Res, typename _T1> \n-     struct _Maybe_unary_or_binary_function<_Res, _T1>\n-     : std::unary_function<_T1, _Res> { };\n+  template<typename _Res, typename _T1> \n+    struct _Maybe_unary_or_binary_function<_Res, _T1>\n+    : std::unary_function<_T1, _Res> { };\n \n   /**\n    * @if maint\n    * Derives from @c binary_function, as appropriate.\n    * @endif\n    */ \n-   template<typename _Res, typename _T1, typename _T2> \n-     struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>\n-     : std::binary_function<_T1, _T2, _Res> { };\n+  template<typename _Res, typename _T1, typename _T2> \n+    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>\n+    : std::binary_function<_T1, _T2, _Res> { };\n \n   /**\n    * @if maint\n@@ -842,7 +842,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n       template<typename _Tp>\n         static __sfinae_types::__two __check_const(_Tp&, const volatile void*);\n \n-  public:\n+    public:\n       template<typename _Tp>\n         struct _Result_type\n \t: _Mem_fn_const_or_non<_Res,\n@@ -987,7 +987,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n    * in a tuple. \n    * @endif\n    */\n-  template<int... Indexes>\n+  template<int... _Indexes>\n     struct _Index_tuple { };\n \n   /**\n@@ -1411,7 +1411,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n                       (_GLIBCXX_TR1::get<_Indexes>(_M_bound_args), __args)...);\n         }\n \n-     public:\n+    public:\n       typedef _Result result_type;\n \n       explicit\n@@ -1457,11 +1457,11 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n    *  @endif\n    */\n   template<typename _Signature>\n-     struct is_bind_expression<_Bind<_Signature> >\n-     { static const bool value = true; };\n+    struct is_bind_expression<_Bind<_Signature> >\n+    { static const bool value = true; };\n \n-   template<typename _Signature>\n-     const bool is_bind_expression<_Bind<_Signature> >::value;\n+  template<typename _Signature>\n+    const bool is_bind_expression<_Bind<_Signature> >::value;\n \n   /**\n    *  @if maint\n@@ -1470,9 +1470,10 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n    */\n   template<typename _Result, typename _Signature>\n     struct is_bind_expression<_Bind_result<_Result, _Signature> >\n-    {\n-      static const bool value = true;\n-    };\n+    { static const bool value = true; };\n+\n+  template<typename _Result, typename _Signature>\n+    const bool is_bind_expression<_Bind_result<_Result, _Signature> >::value;\n \n   template<typename _Functor, typename... _ArgTypes>\n     inline\n@@ -1499,9 +1500,6 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n       return __result_type(__maybe_type::__do_wrap(__f), __args...);\n     }\n \n-  template<typename _Result, typename _Signature>\n-    const bool is_bind_expression<_Bind_result<_Result, _Signature> >::value;\n-\n   /**\n    *  @brief Exception class thrown when class template function's\n    *  operator() is called with an empty target.\n@@ -1589,7 +1587,9 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n   // Converts a reference to a function object into a callable\n   // function object.\n   template<typename _Functor>\n-    inline _Functor& __callable_functor(_Functor& __f) { return __f; }\n+    inline _Functor&\n+    __callable_functor(_Functor& __f)\n+    { return __f; }\n \n   template<typename _Member, typename _Class>\n     inline _Mem_fn<_Member _Class::*>"}]}