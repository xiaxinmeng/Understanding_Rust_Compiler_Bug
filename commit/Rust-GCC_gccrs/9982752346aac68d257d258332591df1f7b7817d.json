{"sha": "9982752346aac68d257d258332591df1f7b7817d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk4Mjc1MjM0NmFhYzY4ZDI1N2QyNTgzMzI1OTFkZjFmN2I3ODE3ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-01-08T03:14:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-01-08T03:14:24Z"}, "message": "re PR libstdc++/36801 (config/cpu/generic/atomicity_mutex/atomicity.h incorrectly relies on global constructor ordering)\n\n2009-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Jonathan Larmour  <jifl@eCosCentric.com>\n\n\tPR libstdc++/36801\n\t* config/cpu/generic/atomicity_mutex/atomicity.h (get_atomic_mutex):\n\tNew.\n\t(__gnu_cxx::__exchange_and_add): Use it.\n\t* src/atomic.cc (get_atomic_mutex): New.\n\t* src/debug.cc (get_safe_base_mutex): New.\n\t* src/locale.cc (get_locale_cache_mutex): New.\n\t* src/mt_allocator.cc (get_freelist): New.\n\t(get_freelist_mutex): New.\n\t* src/pool_allocator.cc (get_palloc_mutex): New.\n\t* include/std/mutex (__once_functor_lock): To\n\t(__get_once_functor_lock): ...this.\n\t* src/mutex.cc (__once_mutex): Don't export, use\n\t(get_once_mutex): ...this.\n\t* config/abi/pre/gnu.ver: Adjust exports.\n\nFrom-SVN: r143182", "tree": {"sha": "a6f1e0438084e4f64331de987399b0292a383367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f1e0438084e4f64331de987399b0292a383367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9982752346aac68d257d258332591df1f7b7817d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9982752346aac68d257d258332591df1f7b7817d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9982752346aac68d257d258332591df1f7b7817d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9982752346aac68d257d258332591df1f7b7817d/comments", "author": null, "committer": null, "parents": [{"sha": "f5651df1abb64343a5e18ed6af8cde899d4b2198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5651df1abb64343a5e18ed6af8cde899d4b2198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5651df1abb64343a5e18ed6af8cde899d4b2198"}], "stats": {"total": 193, "additions": 136, "deletions": 57}, "files": [{"sha": "02bfce7939b5570f8ff7c86cc5689868c45b923e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,3 +1,22 @@\n+2009-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Jonathan Larmour  <jifl@eCosCentric.com>\n+\n+\tPR libstdc++/36801\n+\t* config/cpu/generic/atomicity_mutex/atomicity.h (get_atomic_mutex):\n+\tNew.\n+\t(__gnu_cxx::__exchange_and_add): Use it.\n+\t* src/atomic.cc (get_atomic_mutex): New.\n+\t* src/debug.cc (get_safe_base_mutex): New.\n+\t* src/locale.cc (get_locale_cache_mutex): New.\n+\t* src/mt_allocator.cc (get_freelist): New.\n+\t(get_freelist_mutex): New.\n+\t* src/pool_allocator.cc (get_palloc_mutex): New.\n+\t* include/std/mutex (__once_functor_lock): To\n+\t(__get_once_functor_lock): ...this.\n+\t* src/mutex.cc (__once_mutex): Don't export, use\n+\t(get_once_mutex): ...this.\n+\t* config/abi/pre/gnu.ver: Adjust exports.\n+\n 2009-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/38732\n@@ -53,12 +72,12 @@\n \n \tPR libstdc++/38384\n \t* crossconfig.m4: Define HAVE_FABSF for hpux crosses.\n-        * configure: Regenerate.\n+\t* configure: Regenerate.\n \n 2009-01-05  Ben Elliston  <bje@au.ibm.com>\n \n-        * configure.ac (GLIBCXX_CHECK_STANDARD_LAYOUT): Remove invocation.\n-        * configure: Regenerate.\n+\t* configure.ac (GLIBCXX_CHECK_STANDARD_LAYOUT): Remove invocation.\n+\t* configure: Regenerate.\n \n 2009-01-05  Ben Elliston  <bje@au.ibm.com>\n \n@@ -141,12 +160,12 @@\n \n 2008-12-17  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n-        * testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n+\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n \tDon't xfail test on darwin8 or later.\n \n 2008-12-16  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n-        * testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n+\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n \tDon't xfail excessive errors on darwin8 or later.\n \n 2008-12-15  Benjamin Kosnik  <bkoz@redhat.com>"}, {"sha": "833435d9330f551889081bc95064e4f4d6cb3346", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n ## Linker script for GNU versioning (GNU ld 2.13.91+ only.)\n ##\n-## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the GNU ISO C++ Library.  This library is free\n@@ -884,9 +884,7 @@ GLIBCXX_3.4.11 {\n     _ZSt11__once_call;\n     _ZSt15__once_callable;\n     _ZSt14__once_functor;\n-    _ZSt19__once_functor_lock;\n-    _ZSt11__once_lock;\n-    _ZSt12__once_mutex;\n+    _ZSt23__get_once_functor_lockv;\n     __once_proxy;\n \n     # condition_variable"}, {"sha": "c2a9c3a8ab7216d16488bce5b207dd805f0852f4", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,7 +37,12 @@\n \n namespace \n {\n-  __gnu_cxx::__mutex atomic_mutex;\n+  __gnu_cxx::__mutex&\n+  get_atomic_mutex()\n+  {\n+    static __gnu_cxx::__mutex atomic_mutex;\n+    return atomic_mutex;\n+  }\n } // anonymous namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n@@ -46,7 +51,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-    __gnu_cxx::__scoped_lock sentry(atomic_mutex);\n+    __gnu_cxx::__scoped_lock sentry(get_atomic_mutex());\n     _Atomic_word __result;\n     __result = *__mem;\n     *__mem += __val;"}, {"sha": "4964bb3bcbc16de57ccd7a78eadce31ade148ac8", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // <mutex> -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -709,13 +709,16 @@ namespace std\n   extern __thread void (*__once_call)();\n \n   template<typename _Callable>\n-    void __once_call_impl()\n+    inline void \n+    __once_call_impl()\n     {\n       (*(_Callable*)__once_callable)();\n     }\n #else\n   extern function<void()> __once_functor;\n-  extern unique_lock<mutex> __once_functor_lock;\n+\n+  extern unique_lock<mutex>&\n+  __get_once_functor_lock();\n #endif\n \n   extern \"C\" void __once_proxy();\n@@ -729,15 +732,16 @@ namespace std\n       __once_callable = &__bound_functor;\n       __once_call = &__once_call_impl<decltype(__bound_functor)>;\n #else\n-      __once_functor_lock.lock();\n+      unique_lock<mutex>& __functor_lock = __get_once_functor_lock();\n+      __functor_lock.lock();\n       __once_functor = bind(__f, __args...);\n #endif\n      \n       int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n \n #ifndef _GLIBCXX_HAVE_TLS      \n-      if (__once_functor_lock)\n-\t__once_functor_lock.unlock();\n+      if (__functor_lock)\n+\t__functor_lock.unlock();\n #endif\n \n       if (__e)"}, {"sha": "5cb39191361d8c97369158d9e7343e76c81097bc", "filename": "libstdc++-v3/src/atomic.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // Support for atomic operations -*- C++ -*-\n \n-// Copyright (C) 2008\n+// Copyright (C) 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,7 +37,12 @@\n namespace\n {\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n-  std::mutex atomic_mutex;\n+  std::mutex&\n+  get_atomic_mutex()\n+  {\n+    static std::mutex atomic_mutex;\n+    return atomic_mutex;\n+  }\n #endif\n \n   std::__atomic_flag_base volatile flag_table[ 1 << LOGSIZE ] =\n@@ -57,7 +62,7 @@ namespace std\n     atomic_flag::test_and_set(memory_order) volatile\n     {\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n-      lock_guard<mutex> __lock(atomic_mutex);\n+      lock_guard<mutex> __lock(get_atomic_mutex());\n #endif\n       bool result = _M_i;\n       _M_i = true;\n@@ -68,7 +73,7 @@ namespace std\n     atomic_flag::clear(memory_order) volatile\n     {\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n-      lock_guard<mutex> __lock(atomic_mutex);\n+      lock_guard<mutex> __lock(get_atomic_mutex());\n #endif\n       _M_i = false;\n     }"}, {"sha": "4b7fac7d34aeacbff2aa054867980275c25067d0", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // Debugging mode support code -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,7 +42,12 @@ using namespace std;\n \n namespace\n {\n-  __gnu_cxx::__mutex safe_base_mutex;\n+  __gnu_cxx::__mutex&\n+  get_safe_base_mutex()\n+  {\n+    static __gnu_cxx::__mutex safe_base_mutex;\n+    return safe_base_mutex;\n+  }\n } // anonymous namespace\n \n namespace __gnu_debug\n@@ -112,7 +117,7 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_detach_all()\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     for (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n       {\n \t_Safe_iterator_base* __old = __iter;\n@@ -132,7 +137,7 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_detach_singular()\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     for (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n       {\n \t_Safe_iterator_base* __old = __iter;\n@@ -154,7 +159,7 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_revalidate_singular()\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     for (_Safe_iterator_base* __iter = _M_iterators; __iter;\n \t __iter = __iter->_M_next)\n       __iter->_M_version = _M_version;\n@@ -168,7 +173,7 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_swap(_Safe_sequence_base& __x)\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     swap(_M_iterators, __x._M_iterators);\n     swap(_M_const_iterators, __x._M_const_iterators);\n     swap(_M_version, __x._M_version);\n@@ -186,13 +191,13 @@ namespace __gnu_debug\n   __gnu_cxx::__mutex&\n   _Safe_sequence_base::\n   _M_get_mutex()\n-  { return safe_base_mutex; }\n+  { return get_safe_base_mutex(); }\n \n   void\n   _Safe_iterator_base::\n   _M_attach(_Safe_sequence_base* __seq, bool __constant)\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     _M_attach_single(__seq, __constant);\n   }\n   \n@@ -229,7 +234,7 @@ namespace __gnu_debug\n   _Safe_iterator_base::\n   _M_detach()\n   {\n-    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     _M_detach_single();\n   }\n \n@@ -273,7 +278,7 @@ namespace __gnu_debug\n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::\n   _M_get_mutex()\n-  { return safe_base_mutex; }\n+  { return get_safe_base_mutex(); }\n \n   void\n   _Error_formatter::_Parameter::"}, {"sha": "7c30fc0bfe32f61cb5faec181ac353e0480d1f78", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,7 +37,12 @@\n \n namespace\n {\n-  __gnu_cxx::__mutex locale_cache_mutex;\n+  __gnu_cxx::__mutex&\n+  get_locale_cache_mutex()\n+  {\n+    static __gnu_cxx::__mutex locale_cache_mutex;\n+    return locale_cache_mutex;\n+  }\n } // anonymous namespace\n \n // XXX GLIBCXX_ABI Deprecated\n@@ -389,7 +395,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::_Impl::\n   _M_install_cache(const facet* __cache, size_t __index)\n   {\n-    __gnu_cxx::__scoped_lock sentry(locale_cache_mutex);\n+    __gnu_cxx::__scoped_lock sentry(get_locale_cache_mutex());\n     if (_M_caches[__index] != 0)\n       {\n \t// Some other thread got in first."}, {"sha": "3430ad3466f78190fdf5dc94dca70cba08166703", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // Allocator details.\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,21 +57,34 @@ namespace\n     }\n   };\n \n-  // Ensure freelist is constructed first.\n-  static __freelist freelist;\n-  __gnu_cxx::__mutex freelist_mutex;\n+  __freelist&\n+  get_freelist()\n+  {\n+    static __freelist freelist;\n+    return freelist;\n+  }\n+\n+  __gnu_cxx::__mutex&\n+  get_freelist_mutex()\n+  {\n+    static __gnu_cxx::__mutex freelist_mutex;\n+    return freelist_mutex;\n+  }\n \n   static void \n   _M_destroy_thread_key(void* __id)\n   {\n     // Return this thread id record to the front of thread_freelist.\n-    __gnu_cxx::__scoped_lock sentry(freelist_mutex);\n-    size_t _M_id = reinterpret_cast<size_t>(__id);\n-\n-    typedef __gnu_cxx::__pool<true>::_Thread_record _Thread_record;\n-    _Thread_record* __tr = &freelist._M_thread_freelist_array[_M_id - 1];\n-    __tr->_M_next = freelist._M_thread_freelist;\n-    freelist._M_thread_freelist = __tr;\n+    __freelist& freelist = get_freelist();\n+    {\n+      __gnu_cxx::__scoped_lock sentry(get_freelist_mutex());\n+      size_t _M_id = reinterpret_cast<size_t>(__id);\n+      \n+      typedef __gnu_cxx::__pool<true>::_Thread_record _Thread_record;\n+      _Thread_record* __tr = &freelist._M_thread_freelist_array[_M_id - 1];\n+      __tr->_M_next = freelist._M_thread_freelist;\n+      freelist._M_thread_freelist = __tr;\n+    }\n   }\n #endif\n } // anonymous namespace\n@@ -496,8 +509,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     // directly and have no need for this.\n     if (__gthread_active_p())\n       {\n+\t__freelist& freelist = get_freelist();\n \t{\n-\t  __gnu_cxx::__scoped_lock sentry(freelist_mutex);\n+\t  __gnu_cxx::__scoped_lock sentry(get_freelist_mutex());\n \n \t  if (!freelist._M_thread_freelist_array\n \t      || freelist._M_max_threads < _M_options._M_max_threads)\n@@ -613,12 +627,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     // returns its id.\n     if (__gthread_active_p())\n       {\n+\t__freelist& freelist = get_freelist();\n \tvoid* v = __gthread_getspecific(freelist._M_key);\n \tsize_t _M_id = (size_t)v;\n \tif (_M_id == 0)\n \t  {\n \t    {\n-\t      __gnu_cxx::__scoped_lock sentry(freelist_mutex);\n+\t      __gnu_cxx::__scoped_lock sentry(get_freelist_mutex());\n \t      if (freelist._M_thread_freelist)\n \t\t{\n \t\t  _M_id = freelist._M_thread_freelist->_M_id;\n@@ -689,8 +704,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     // directly and have no need for this.\n     if (__gthread_active_p())\n       {\n+\t__freelist& freelist = get_freelist();\n \t{\n-\t  __gnu_cxx::__scoped_lock sentry(freelist_mutex);\n+\t  __gnu_cxx::__scoped_lock sentry(get_freelist_mutex());\n \n \t  if (!freelist._M_thread_freelist_array\n \t      || freelist._M_max_threads < _M_options._M_max_threads)"}, {"sha": "26435a277839ed92a11e949bca84555848a90cd3", "filename": "libstdc++-v3/src/mutex.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // mutex -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,6 +30,17 @@\n #include <mutex>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifndef _GLIBCXX_HAVE_TLS\n+namespace\n+{\n+  std::mutex&\n+  get_once_mutex()\n+  {\n+    static std::mutex once_mutex;\n+    return once_mutex;\n+  }\n+}\n+#endif\n \n namespace std\n {\n@@ -45,11 +56,16 @@ namespace std\n   __thread void* __once_callable;\n   __thread void (*__once_call)();\n #else\n-  // explicit instantiation due to -fno-implicit-instantiation\n+  // Explicit instantiation due to -fno-implicit-instantiation.\n   template class function<void()>;\n   function<void()> __once_functor;\n-  mutex __once_mutex;\n-  unique_lock<mutex> __once_functor_lock(__once_mutex, defer_lock);\n+\n+  unique_lock<mutex>&\n+  __get_once_functor_lock()\n+  {\n+    static unique_lock<mutex> once_functor_lock(get_once_mutex(), defer_lock);\n+    return once_functor_lock;\n+  }\n #endif\n \n   extern \"C\"\n@@ -58,7 +74,7 @@ namespace std\n     {\n #ifndef _GLIBCXX_HAVE_TLS\n       function<void()> __once_call = std::move(__once_functor);\n-      __once_functor_lock.unlock();\n+      __get_once_functor_lock().unlock();\n #endif\n       __once_call();\n     }"}, {"sha": "bcf9d36373d40825f2897af3fb1a4edc19184db1", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9982752346aac68d257d258332591df1f7b7817d/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=9982752346aac68d257d258332591df1f7b7817d", "patch": "@@ -1,6 +1,6 @@\n // Allocator details.\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,12 @@\n \n namespace\n {\n-  __gnu_cxx::__mutex palloc_init_mutex;\n+  __gnu_cxx::__mutex&\n+  get_palloc_mutex()\n+  {\n+    static __gnu_cxx::__mutex palloc_mutex;\n+    return palloc_mutex;\n+  }\n } // anonymous namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n@@ -52,7 +57,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   __mutex&\n   __pool_alloc_base::_M_get_mutex()\n-  { return palloc_init_mutex; }\n+  { return get_palloc_mutex(); }\n \n   // Allocate memory in large chunks in order to avoid fragmenting the\n   // heap too much.  Assume that __n is properly aligned.  We hold the"}]}